; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!14432 () Bool)

(assert start!14432)

(declare-fun b!136212 () Bool)

(declare-fun b_free!2941 () Bool)

(declare-fun b_next!2941 () Bool)

(assert (=> b!136212 (= b_free!2941 (not b_next!2941))))

(declare-fun tp!11277 () Bool)

(declare-fun b_and!8433 () Bool)

(assert (=> b!136212 (= tp!11277 b_and!8433)))

(declare-fun b!136215 () Bool)

(declare-fun b_free!2943 () Bool)

(declare-fun b_next!2943 () Bool)

(assert (=> b!136215 (= b_free!2943 (not b_next!2943))))

(declare-fun tp!11275 () Bool)

(declare-fun b_and!8435 () Bool)

(assert (=> b!136215 (= tp!11275 b_and!8435)))

(declare-fun b!136202 () Bool)

(declare-fun e!88695 () Bool)

(declare-fun e!88696 () Bool)

(declare-fun mapRes!4684 () Bool)

(assert (=> b!136202 (= e!88695 (and e!88696 mapRes!4684))))

(declare-fun condMapEmpty!4684 () Bool)

(declare-datatypes ((V!3497 0))(
  ( (V!3498 (val!1488 Int)) )
))
(declare-datatypes ((array!4789 0))(
  ( (array!4790 (arr!2264 (Array (_ BitVec 32) (_ BitVec 64))) (size!2534 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!1100 0))(
  ( (ValueCellFull!1100 (v!3219 V!3497)) (EmptyCell!1100) )
))
(declare-datatypes ((array!4791 0))(
  ( (array!4792 (arr!2265 (Array (_ BitVec 32) ValueCell!1100)) (size!2535 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!1108 0))(
  ( (LongMapFixedSize!1109 (defaultEntry!2888 Int) (mask!7202 (_ BitVec 32)) (extraKeys!2649 (_ BitVec 32)) (zeroValue!2741 V!3497) (minValue!2741 V!3497) (_size!603 (_ BitVec 32)) (_keys!4641 array!4789) (_values!2871 array!4791) (_vacant!603 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!1108)

(declare-fun mapDefault!4683 () ValueCell!1100)

(assert (=> b!136202 (= condMapEmpty!4684 (= (arr!2265 (_values!2871 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4683)))))

(declare-fun mapNonEmpty!4683 () Bool)

(declare-fun tp!11276 () Bool)

(declare-fun e!88697 () Bool)

(assert (=> mapNonEmpty!4683 (= mapRes!4684 (and tp!11276 e!88697))))

(declare-fun mapKey!4684 () (_ BitVec 32))

(declare-fun mapRest!4683 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapValue!4683 () ValueCell!1100)

(assert (=> mapNonEmpty!4683 (= (arr!2265 (_values!2871 newMap!16)) (store mapRest!4683 mapKey!4684 mapValue!4683))))

(declare-fun b!136203 () Bool)

(declare-fun e!88703 () Bool)

(declare-datatypes ((Cell!896 0))(
  ( (Cell!897 (v!3220 LongMapFixedSize!1108)) )
))
(declare-datatypes ((LongMap!896 0))(
  ( (LongMap!897 (underlying!459 Cell!896)) )
))
(declare-fun thiss!992 () LongMap!896)

(assert (=> b!136203 (= e!88703 (not (bvslt (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b01111111111111111111111111111111)))))

(declare-fun from!355 () (_ BitVec 32))

(declare-fun arrayContainsKey!0 (array!4789 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!136203 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-datatypes ((Unit!4281 0))(
  ( (Unit!4282) )
))
(declare-fun lt!71091 () Unit!4281)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!125 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) (_ BitVec 32) Int) Unit!4281)

(assert (=> b!136203 (= lt!71091 (lemmaListMapContainsThenArrayContainsFrom!125 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136204 () Bool)

(declare-fun tp_is_empty!2887 () Bool)

(assert (=> b!136204 (= e!88696 tp_is_empty!2887)))

(declare-fun mapNonEmpty!4684 () Bool)

(declare-fun mapRes!4683 () Bool)

(declare-fun tp!11278 () Bool)

(declare-fun e!88698 () Bool)

(assert (=> mapNonEmpty!4684 (= mapRes!4683 (and tp!11278 e!88698))))

(declare-fun mapValue!4684 () ValueCell!1100)

(declare-fun mapKey!4683 () (_ BitVec 32))

(declare-fun mapRest!4684 () (Array (_ BitVec 32) ValueCell!1100))

(assert (=> mapNonEmpty!4684 (= (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (store mapRest!4684 mapKey!4683 mapValue!4684))))

(declare-fun b!136205 () Bool)

(assert (=> b!136205 (= e!88697 tp_is_empty!2887)))

(declare-fun b!136206 () Bool)

(declare-fun e!88707 () Bool)

(assert (=> b!136206 (= e!88707 e!88703)))

(declare-fun res!65347 () Bool)

(assert (=> b!136206 (=> (not res!65347) (not e!88703))))

(declare-datatypes ((tuple2!2574 0))(
  ( (tuple2!2575 (_1!1298 (_ BitVec 64)) (_2!1298 V!3497)) )
))
(declare-datatypes ((List!1699 0))(
  ( (Nil!1696) (Cons!1695 (h!2301 tuple2!2574) (t!6179 List!1699)) )
))
(declare-datatypes ((ListLongMap!1659 0))(
  ( (ListLongMap!1660 (toList!845 List!1699)) )
))
(declare-fun lt!71090 () ListLongMap!1659)

(declare-fun contains!888 (ListLongMap!1659 (_ BitVec 64)) Bool)

(assert (=> b!136206 (= res!65347 (contains!888 lt!71090 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-datatypes ((tuple2!2576 0))(
  ( (tuple2!2577 (_1!1299 Bool) (_2!1299 LongMapFixedSize!1108)) )
))
(declare-fun lt!71089 () tuple2!2576)

(declare-fun update!198 (LongMapFixedSize!1108 (_ BitVec 64) V!3497) tuple2!2576)

(declare-fun get!1498 (ValueCell!1100 V!3497) V!3497)

(declare-fun dynLambda!428 (Int (_ BitVec 64)) V!3497)

(assert (=> b!136206 (= lt!71089 (update!198 newMap!16 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!136207 () Bool)

(declare-fun e!88700 () Bool)

(assert (=> b!136207 (= e!88700 e!88707)))

(declare-fun res!65352 () Bool)

(assert (=> b!136207 (=> (not res!65352) (not e!88707))))

(declare-fun lt!71092 () ListLongMap!1659)

(assert (=> b!136207 (= res!65352 (and (= lt!71092 lt!71090) (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1405 (LongMapFixedSize!1108) ListLongMap!1659)

(assert (=> b!136207 (= lt!71090 (map!1405 newMap!16))))

(declare-fun getCurrentListMap!521 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) Int) ListLongMap!1659)

(assert (=> b!136207 (= lt!71092 (getCurrentListMap!521 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136208 () Bool)

(declare-fun e!88708 () Bool)

(declare-fun e!88706 () Bool)

(assert (=> b!136208 (= e!88708 (and e!88706 mapRes!4683))))

(declare-fun condMapEmpty!4683 () Bool)

(declare-fun mapDefault!4684 () ValueCell!1100)

(assert (=> b!136208 (= condMapEmpty!4683 (= (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4684)))))

(declare-fun b!136210 () Bool)

(declare-fun res!65351 () Bool)

(assert (=> b!136210 (=> (not res!65351) (not e!88700))))

(declare-fun valid!545 (LongMapFixedSize!1108) Bool)

(assert (=> b!136210 (= res!65351 (valid!545 newMap!16))))

(declare-fun mapIsEmpty!4683 () Bool)

(assert (=> mapIsEmpty!4683 mapRes!4683))

(declare-fun b!136211 () Bool)

(declare-fun e!88704 () Bool)

(declare-fun e!88694 () Bool)

(assert (=> b!136211 (= e!88704 e!88694)))

(declare-fun e!88699 () Bool)

(declare-fun array_inv!1413 (array!4789) Bool)

(declare-fun array_inv!1414 (array!4791) Bool)

(assert (=> b!136212 (= e!88699 (and tp!11277 tp_is_empty!2887 (array_inv!1413 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (array_inv!1414 (_values!2871 (v!3220 (underlying!459 thiss!992)))) e!88708))))

(declare-fun b!136213 () Bool)

(declare-fun res!65350 () Bool)

(assert (=> b!136213 (=> (not res!65350) (not e!88700))))

(assert (=> b!136213 (= res!65350 (bvsge (bvadd #b00000000000000000000000000000001 (mask!7202 newMap!16)) (_size!603 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136214 () Bool)

(assert (=> b!136214 (= e!88694 e!88699)))

(declare-fun b!136209 () Bool)

(assert (=> b!136209 (= e!88706 tp_is_empty!2887)))

(declare-fun res!65349 () Bool)

(assert (=> start!14432 (=> (not res!65349) (not e!88700))))

(declare-fun valid!546 (LongMap!896) Bool)

(assert (=> start!14432 (= res!65349 (valid!546 thiss!992))))

(assert (=> start!14432 e!88700))

(assert (=> start!14432 e!88704))

(assert (=> start!14432 true))

(declare-fun e!88705 () Bool)

(assert (=> start!14432 e!88705))

(assert (=> b!136215 (= e!88705 (and tp!11275 tp_is_empty!2887 (array_inv!1413 (_keys!4641 newMap!16)) (array_inv!1414 (_values!2871 newMap!16)) e!88695))))

(declare-fun b!136216 () Bool)

(assert (=> b!136216 (= e!88698 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4684 () Bool)

(assert (=> mapIsEmpty!4684 mapRes!4684))

(declare-fun b!136217 () Bool)

(declare-fun res!65348 () Bool)

(assert (=> b!136217 (=> (not res!65348) (not e!88700))))

(assert (=> b!136217 (= res!65348 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))))))))

(assert (= (and start!14432 res!65349) b!136217))

(assert (= (and b!136217 res!65348) b!136210))

(assert (= (and b!136210 res!65351) b!136213))

(assert (= (and b!136213 res!65350) b!136207))

(assert (= (and b!136207 res!65352) b!136206))

(assert (= (and b!136206 res!65347) b!136203))

(assert (= (and b!136208 condMapEmpty!4683) mapIsEmpty!4683))

(assert (= (and b!136208 (not condMapEmpty!4683)) mapNonEmpty!4684))

(get-info :version)

(assert (= (and mapNonEmpty!4684 ((_ is ValueCellFull!1100) mapValue!4684)) b!136216))

(assert (= (and b!136208 ((_ is ValueCellFull!1100) mapDefault!4684)) b!136209))

(assert (= b!136212 b!136208))

(assert (= b!136214 b!136212))

(assert (= b!136211 b!136214))

(assert (= start!14432 b!136211))

(assert (= (and b!136202 condMapEmpty!4684) mapIsEmpty!4684))

(assert (= (and b!136202 (not condMapEmpty!4684)) mapNonEmpty!4683))

(assert (= (and mapNonEmpty!4683 ((_ is ValueCellFull!1100) mapValue!4683)) b!136205))

(assert (= (and b!136202 ((_ is ValueCellFull!1100) mapDefault!4683)) b!136204))

(assert (= b!136215 b!136202))

(assert (= start!14432 b!136215))

(declare-fun b_lambda!6097 () Bool)

(assert (=> (not b_lambda!6097) (not b!136206)))

(declare-fun t!6176 () Bool)

(declare-fun tb!2441 () Bool)

(assert (=> (and b!136212 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) t!6176) tb!2441))

(declare-fun result!4023 () Bool)

(assert (=> tb!2441 (= result!4023 tp_is_empty!2887)))

(assert (=> b!136206 t!6176))

(declare-fun b_and!8437 () Bool)

(assert (= b_and!8433 (and (=> t!6176 result!4023) b_and!8437)))

(declare-fun tb!2443 () Bool)

(declare-fun t!6178 () Bool)

(assert (=> (and b!136215 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) t!6178) tb!2443))

(declare-fun result!4027 () Bool)

(assert (= result!4027 result!4023))

(assert (=> b!136206 t!6178))

(declare-fun b_and!8439 () Bool)

(assert (= b_and!8435 (and (=> t!6178 result!4027) b_and!8439)))

(declare-fun m!162599 () Bool)

(assert (=> b!136210 m!162599))

(declare-fun m!162601 () Bool)

(assert (=> b!136215 m!162601))

(declare-fun m!162603 () Bool)

(assert (=> b!136215 m!162603))

(declare-fun m!162605 () Bool)

(assert (=> b!136207 m!162605))

(declare-fun m!162607 () Bool)

(assert (=> b!136207 m!162607))

(declare-fun m!162609 () Bool)

(assert (=> b!136207 m!162609))

(declare-fun m!162611 () Bool)

(assert (=> start!14432 m!162611))

(declare-fun m!162613 () Bool)

(assert (=> mapNonEmpty!4683 m!162613))

(declare-fun m!162615 () Bool)

(assert (=> mapNonEmpty!4684 m!162615))

(assert (=> b!136203 m!162605))

(assert (=> b!136203 m!162605))

(declare-fun m!162617 () Bool)

(assert (=> b!136203 m!162617))

(assert (=> b!136203 m!162605))

(declare-fun m!162619 () Bool)

(assert (=> b!136203 m!162619))

(declare-fun m!162621 () Bool)

(assert (=> b!136212 m!162621))

(declare-fun m!162623 () Bool)

(assert (=> b!136212 m!162623))

(declare-fun m!162625 () Bool)

(assert (=> b!136206 m!162625))

(declare-fun m!162627 () Bool)

(assert (=> b!136206 m!162627))

(declare-fun m!162629 () Bool)

(assert (=> b!136206 m!162629))

(assert (=> b!136206 m!162605))

(declare-fun m!162631 () Bool)

(assert (=> b!136206 m!162631))

(assert (=> b!136206 m!162605))

(assert (=> b!136206 m!162627))

(assert (=> b!136206 m!162605))

(assert (=> b!136206 m!162629))

(declare-fun m!162633 () Bool)

(assert (=> b!136206 m!162633))

(assert (=> b!136206 m!162625))

(check-sat (not b!136203) (not mapNonEmpty!4684) (not b!136210) b_and!8439 (not b_lambda!6097) (not b_next!2943) (not b!136206) tp_is_empty!2887 (not mapNonEmpty!4683) b_and!8437 (not b!136215) (not b!136207) (not b_next!2941) (not start!14432) (not b!136212))
(check-sat b_and!8437 b_and!8439 (not b_next!2941) (not b_next!2943))
(get-model)

(declare-fun b_lambda!6103 () Bool)

(assert (= b_lambda!6097 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6103)))

(check-sat (not b!136203) (not mapNonEmpty!4684) (not b!136210) (not b_lambda!6103) b_and!8439 (not b_next!2943) (not b!136206) tp_is_empty!2887 (not mapNonEmpty!4683) b_and!8437 (not b!136215) (not b!136207) (not b_next!2941) (not start!14432) (not b!136212))
(check-sat b_and!8437 b_and!8439 (not b_next!2941) (not b_next!2943))
(get-model)

(declare-fun d!42679 () Bool)

(declare-fun e!88803 () Bool)

(assert (=> d!42679 e!88803))

(declare-fun res!65391 () Bool)

(assert (=> d!42679 (=> res!65391 e!88803)))

(declare-fun lt!71126 () Bool)

(assert (=> d!42679 (= res!65391 (not lt!71126))))

(declare-fun lt!71127 () Bool)

(assert (=> d!42679 (= lt!71126 lt!71127)))

(declare-fun lt!71128 () Unit!4281)

(declare-fun e!88804 () Unit!4281)

(assert (=> d!42679 (= lt!71128 e!88804)))

(declare-fun c!25488 () Bool)

(assert (=> d!42679 (= c!25488 lt!71127)))

(declare-fun containsKey!177 (List!1699 (_ BitVec 64)) Bool)

(assert (=> d!42679 (= lt!71127 (containsKey!177 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42679 (= (contains!888 lt!71090 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71126)))

(declare-fun b!136326 () Bool)

(declare-fun lt!71125 () Unit!4281)

(assert (=> b!136326 (= e!88804 lt!71125)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!125 (List!1699 (_ BitVec 64)) Unit!4281)

(assert (=> b!136326 (= lt!71125 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-datatypes ((Option!180 0))(
  ( (Some!179 (v!3226 V!3497)) (None!178) )
))
(declare-fun isDefined!126 (Option!180) Bool)

(declare-fun getValueByKey!174 (List!1699 (_ BitVec 64)) Option!180)

(assert (=> b!136326 (isDefined!126 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!136327 () Bool)

(declare-fun Unit!4283 () Unit!4281)

(assert (=> b!136327 (= e!88804 Unit!4283)))

(declare-fun b!136328 () Bool)

(assert (=> b!136328 (= e!88803 (isDefined!126 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (= (and d!42679 c!25488) b!136326))

(assert (= (and d!42679 (not c!25488)) b!136327))

(assert (= (and d!42679 (not res!65391)) b!136328))

(assert (=> d!42679 m!162605))

(declare-fun m!162707 () Bool)

(assert (=> d!42679 m!162707))

(assert (=> b!136326 m!162605))

(declare-fun m!162709 () Bool)

(assert (=> b!136326 m!162709))

(assert (=> b!136326 m!162605))

(declare-fun m!162711 () Bool)

(assert (=> b!136326 m!162711))

(assert (=> b!136326 m!162711))

(declare-fun m!162713 () Bool)

(assert (=> b!136326 m!162713))

(assert (=> b!136328 m!162605))

(assert (=> b!136328 m!162711))

(assert (=> b!136328 m!162711))

(assert (=> b!136328 m!162713))

(assert (=> b!136206 d!42679))

(declare-fun b!136413 () Bool)

(declare-fun e!88851 () Bool)

(declare-fun call!14972 () Bool)

(assert (=> b!136413 (= e!88851 (not call!14972))))

(declare-fun b!136414 () Bool)

(declare-fun res!65420 () Bool)

(declare-datatypes ((SeekEntryResult!270 0))(
  ( (MissingZero!270 (index!3241 (_ BitVec 32))) (Found!270 (index!3242 (_ BitVec 32))) (Intermediate!270 (undefined!1082 Bool) (index!3243 (_ BitVec 32)) (x!15798 (_ BitVec 32))) (Undefined!270) (MissingVacant!270 (index!3244 (_ BitVec 32))) )
))
(declare-fun lt!71206 () SeekEntryResult!270)

(assert (=> b!136414 (= res!65420 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71206)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!88856 () Bool)

(assert (=> b!136414 (=> (not res!65420) (not e!88856))))

(declare-fun b!136415 () Bool)

(declare-fun e!88860 () Bool)

(assert (=> b!136415 (= e!88860 ((_ is Undefined!270) lt!71206))))

(declare-fun bm!14958 () Bool)

(declare-fun lt!71191 () SeekEntryResult!270)

(declare-fun c!25522 () Bool)

(declare-fun lt!71203 () SeekEntryResult!270)

(declare-fun c!25527 () Bool)

(declare-fun call!14962 () Bool)

(declare-fun c!25518 () Bool)

(declare-fun c!25521 () Bool)

(declare-fun lt!71190 () SeekEntryResult!270)

(declare-fun c!25523 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!14958 (= call!14962 (inRange!0 (ite c!25527 (ite c!25521 (index!3242 lt!71203) (ite c!25522 (index!3241 lt!71190) (index!3244 lt!71190))) (ite c!25518 (index!3242 lt!71191) (ite c!25523 (index!3241 lt!71206) (index!3244 lt!71206)))) (mask!7202 newMap!16)))))

(declare-fun b!136416 () Bool)

(declare-fun call!14976 () Bool)

(assert (=> b!136416 (= e!88856 (not call!14976))))

(declare-fun b!136417 () Bool)

(declare-fun e!88858 () Bool)

(declare-fun e!88867 () Bool)

(assert (=> b!136417 (= e!88858 e!88867)))

(declare-fun c!25530 () Bool)

(declare-fun lt!71193 () tuple2!2576)

(assert (=> b!136417 (= c!25530 (_1!1299 lt!71193))))

(declare-fun call!14969 () ListLongMap!1659)

(declare-fun lt!71204 () SeekEntryResult!270)

(declare-fun c!25529 () Bool)

(declare-fun bm!14959 () Bool)

(assert (=> bm!14959 (= call!14969 (getCurrentListMap!521 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136418 () Bool)

(declare-fun e!88849 () Bool)

(declare-fun e!88865 () Bool)

(assert (=> b!136418 (= e!88849 e!88865)))

(declare-fun res!65433 () Bool)

(declare-fun call!14965 () Bool)

(assert (=> b!136418 (= res!65433 call!14965)))

(assert (=> b!136418 (=> (not res!65433) (not e!88865))))

(declare-fun b!136419 () Bool)

(declare-fun e!88869 () ListLongMap!1659)

(declare-fun call!14967 () ListLongMap!1659)

(assert (=> b!136419 (= e!88869 call!14967)))

(declare-fun d!42681 () Bool)

(assert (=> d!42681 e!88858))

(declare-fun res!65428 () Bool)

(assert (=> d!42681 (=> (not res!65428) (not e!88858))))

(assert (=> d!42681 (= res!65428 (valid!545 (_2!1299 lt!71193)))))

(declare-fun e!88866 () tuple2!2576)

(assert (=> d!42681 (= lt!71193 e!88866)))

(assert (=> d!42681 (= c!25529 (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvneg (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42681 (valid!545 newMap!16)))

(assert (=> d!42681 (= (update!198 newMap!16 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!71193)))

(declare-fun bm!14960 () Bool)

(declare-fun call!14980 () Bool)

(assert (=> bm!14960 (= call!14976 call!14980)))

(declare-fun bm!14961 () Bool)

(declare-fun call!14970 () ListLongMap!1659)

(declare-fun call!14982 () ListLongMap!1659)

(assert (=> bm!14961 (= call!14970 call!14982)))

(declare-fun b!136420 () Bool)

(declare-fun c!25520 () Bool)

(assert (=> b!136420 (= c!25520 ((_ is MissingVacant!270) lt!71204))))

(declare-fun e!88859 () tuple2!2576)

(declare-fun e!88852 () tuple2!2576)

(assert (=> b!136420 (= e!88859 e!88852)))

(declare-fun b!136421 () Bool)

(assert (=> b!136421 (= e!88869 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136422 () Bool)

(declare-fun lt!71207 () Unit!4281)

(declare-fun lt!71183 () Unit!4281)

(assert (=> b!136422 (= lt!71207 lt!71183)))

(assert (=> b!136422 (contains!888 call!14967 (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))

(declare-fun lt!71196 () array!4791)

(declare-fun lemmaValidKeyInArrayIsInListMap!122 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) Int) Unit!4281)

(assert (=> b!136422 (= lt!71183 (lemmaValidKeyInArrayIsInListMap!122 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (defaultEntry!2888 newMap!16)))))

(assert (=> b!136422 (= lt!71196 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))))

(declare-fun lt!71209 () Unit!4281)

(declare-fun lt!71186 () Unit!4281)

(assert (=> b!136422 (= lt!71209 lt!71186)))

(declare-fun call!14964 () ListLongMap!1659)

(assert (=> b!136422 (= call!14964 call!14969)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) (_ BitVec 64) V!3497 Int) Unit!4281)

(assert (=> b!136422 (= lt!71186 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71189 () Unit!4281)

(declare-fun e!88857 () Unit!4281)

(assert (=> b!136422 (= lt!71189 e!88857)))

(declare-fun call!14983 () Bool)

(assert (=> b!136422 (= c!25518 call!14983)))

(declare-fun e!88864 () tuple2!2576)

(assert (=> b!136422 (= e!88864 (tuple2!2577 true (LongMapFixedSize!1109 (defaultEntry!2888 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (_size!603 newMap!16) (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (_vacant!603 newMap!16))))))

(declare-fun b!136423 () Bool)

(declare-fun lt!71197 () Unit!4281)

(declare-fun e!88855 () Unit!4281)

(assert (=> b!136423 (= lt!71197 e!88855)))

(assert (=> b!136423 (= c!25521 call!14983)))

(assert (=> b!136423 (= e!88859 (tuple2!2577 false newMap!16))))

(declare-fun b!136424 () Bool)

(declare-fun lt!71194 () tuple2!2576)

(assert (=> b!136424 (= e!88852 (tuple2!2577 (_1!1299 lt!71194) (_2!1299 lt!71194)))))

(declare-fun call!14973 () tuple2!2576)

(assert (=> b!136424 (= lt!71194 call!14973)))

(declare-fun bm!14962 () Bool)

(declare-fun call!14979 () Bool)

(assert (=> bm!14962 (= call!14979 call!14962)))

(declare-fun bm!14963 () Bool)

(declare-fun call!14966 () Bool)

(declare-fun call!14984 () Bool)

(assert (=> bm!14963 (= call!14966 call!14984)))

(declare-fun bm!14964 () Bool)

(declare-fun updateHelperNewKey!62 (LongMapFixedSize!1108 (_ BitVec 64) V!3497 (_ BitVec 32)) tuple2!2576)

(assert (=> bm!14964 (= call!14973 (updateHelperNewKey!62 newMap!16 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(declare-fun b!136425 () Bool)

(declare-fun e!88870 () Bool)

(assert (=> b!136425 (= e!88870 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71191)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!136426 () Bool)

(declare-fun Unit!4284 () Unit!4281)

(assert (=> b!136426 (= e!88855 Unit!4284)))

(declare-fun lt!71208 () Unit!4281)

(declare-fun call!14978 () Unit!4281)

(assert (=> b!136426 (= lt!71208 call!14978)))

(declare-fun call!14975 () SeekEntryResult!270)

(assert (=> b!136426 (= lt!71203 call!14975)))

(declare-fun res!65423 () Bool)

(assert (=> b!136426 (= res!65423 ((_ is Found!270) lt!71203))))

(declare-fun e!88853 () Bool)

(assert (=> b!136426 (=> (not res!65423) (not e!88853))))

(assert (=> b!136426 e!88853))

(declare-fun lt!71200 () Unit!4281)

(assert (=> b!136426 (= lt!71200 lt!71208)))

(assert (=> b!136426 false))

(declare-fun bm!14965 () Bool)

(declare-fun call!14974 () ListLongMap!1659)

(assert (=> bm!14965 (= call!14974 (map!1405 newMap!16))))

(declare-fun b!136427 () Bool)

(assert (=> b!136427 (= e!88852 e!88864)))

(declare-fun c!25525 () Bool)

(assert (=> b!136427 (= c!25525 ((_ is MissingZero!270) lt!71204))))

(declare-fun b!136428 () Bool)

(declare-fun c!25519 () Bool)

(assert (=> b!136428 (= c!25519 ((_ is MissingVacant!270) lt!71206))))

(declare-fun e!88863 () Bool)

(assert (=> b!136428 (= e!88863 e!88860)))

(declare-fun b!136429 () Bool)

(declare-fun lt!71192 () tuple2!2576)

(assert (=> b!136429 (= lt!71192 call!14973)))

(assert (=> b!136429 (= e!88864 (tuple2!2577 (_1!1299 lt!71192) (_2!1299 lt!71192)))))

(declare-fun bm!14966 () Bool)

(declare-fun call!14971 () ListLongMap!1659)

(assert (=> bm!14966 (= call!14971 (map!1405 (_2!1299 lt!71193)))))

(declare-fun b!136430 () Bool)

(assert (=> b!136430 (= e!88865 (not call!14972))))

(declare-fun bm!14967 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) Int) Unit!4281)

(assert (=> bm!14967 (= call!14978 (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(declare-fun b!136431 () Bool)

(assert (=> b!136431 (= e!88849 ((_ is Undefined!270) lt!71190))))

(declare-fun e!88854 () Bool)

(declare-fun b!136432 () Bool)

(declare-fun +!170 (ListLongMap!1659 tuple2!2574) ListLongMap!1659)

(assert (=> b!136432 (= e!88854 (= call!14971 (+!170 call!14974 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!136433 () Bool)

(declare-fun c!25526 () Bool)

(assert (=> b!136433 (= c!25526 ((_ is MissingVacant!270) lt!71190))))

(declare-fun e!88868 () Bool)

(assert (=> b!136433 (= e!88868 e!88849)))

(declare-fun b!136434 () Bool)

(declare-fun e!88861 () tuple2!2576)

(assert (=> b!136434 (= e!88866 e!88861)))

(declare-fun c!25524 () Bool)

(assert (=> b!136434 (= c!25524 (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14968 () Bool)

(assert (=> bm!14968 (= call!14965 call!14979)))

(declare-fun bm!14969 () Bool)

(declare-fun c!25517 () Bool)

(assert (=> bm!14969 (= c!25517 c!25527)))

(assert (=> bm!14969 (= call!14983 (contains!888 e!88869 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun bm!14970 () Bool)

(declare-fun lt!71185 () (_ BitVec 32))

(declare-fun lt!71199 () (_ BitVec 32))

(assert (=> bm!14970 (= call!14982 (getCurrentListMap!521 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun call!14968 () Unit!4281)

(declare-fun bm!14971 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) Int) Unit!4281)

(assert (=> bm!14971 (= call!14968 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(declare-fun bm!14972 () Bool)

(declare-fun call!14961 () SeekEntryResult!270)

(assert (=> bm!14972 (= call!14975 call!14961)))

(declare-fun b!136435 () Bool)

(declare-fun lt!71184 () Unit!4281)

(assert (=> b!136435 (= e!88855 lt!71184)))

(assert (=> b!136435 (= lt!71184 call!14968)))

(assert (=> b!136435 (= lt!71190 call!14975)))

(assert (=> b!136435 (= c!25522 ((_ is MissingZero!270) lt!71190))))

(assert (=> b!136435 e!88868))

(declare-fun b!136436 () Bool)

(assert (=> b!136436 (= e!88860 e!88856)))

(declare-fun res!65421 () Bool)

(assert (=> b!136436 (= res!65421 call!14966)))

(assert (=> b!136436 (=> (not res!65421) (not e!88856))))

(declare-fun b!136437 () Bool)

(assert (=> b!136437 (= e!88867 (= call!14971 call!14974))))

(declare-fun b!136438 () Bool)

(declare-fun lt!71201 () Unit!4281)

(assert (=> b!136438 (= e!88857 lt!71201)))

(assert (=> b!136438 (= lt!71201 call!14978)))

(declare-fun call!14981 () SeekEntryResult!270)

(assert (=> b!136438 (= lt!71191 call!14981)))

(declare-fun res!65429 () Bool)

(assert (=> b!136438 (= res!65429 ((_ is Found!270) lt!71191))))

(assert (=> b!136438 (=> (not res!65429) (not e!88870))))

(assert (=> b!136438 e!88870))

(declare-fun b!136439 () Bool)

(assert (=> b!136439 (= e!88867 e!88854)))

(declare-fun res!65424 () Bool)

(assert (=> b!136439 (= res!65424 (contains!888 call!14971 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!136439 (=> (not res!65424) (not e!88854))))

(declare-fun b!136440 () Bool)

(declare-fun res!65422 () Bool)

(assert (=> b!136440 (=> (not res!65422) (not e!88851))))

(assert (=> b!136440 (= res!65422 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71190)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14973 () Bool)

(assert (=> bm!14973 (= call!14967 call!14982)))

(declare-fun bm!14974 () Bool)

(assert (=> bm!14974 (= call!14972 call!14980)))

(declare-fun b!136441 () Bool)

(declare-fun res!65427 () Bool)

(declare-fun e!88850 () Bool)

(assert (=> b!136441 (=> (not res!65427) (not e!88850))))

(assert (=> b!136441 (= res!65427 call!14966)))

(assert (=> b!136441 (= e!88863 e!88850)))

(declare-fun b!136442 () Bool)

(declare-fun lt!71198 () Unit!4281)

(declare-fun lt!71205 () Unit!4281)

(assert (=> b!136442 (= lt!71198 lt!71205)))

(declare-fun call!14963 () ListLongMap!1659)

(assert (=> b!136442 (= call!14963 call!14970)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 V!3497 Int) Unit!4281)

(assert (=> b!136442 (= lt!71205 (lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(assert (=> b!136442 (= lt!71199 (bvor (extraKeys!2649 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!136442 (= e!88861 (tuple2!2577 true (LongMapFixedSize!1109 (defaultEntry!2888 newMap!16) (mask!7202 newMap!16) (bvor (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!603 newMap!16) (_keys!4641 newMap!16) (_values!2871 newMap!16) (_vacant!603 newMap!16))))))

(declare-fun b!136443 () Bool)

(declare-fun res!65431 () Bool)

(assert (=> b!136443 (=> (not res!65431) (not e!88850))))

(assert (=> b!136443 (= res!65431 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71206)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14975 () Bool)

(assert (=> bm!14975 (= call!14984 call!14962)))

(declare-fun b!136444 () Bool)

(assert (=> b!136444 (= e!88853 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71203)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun bm!14976 () Bool)

(assert (=> bm!14976 (= call!14963 call!14964)))

(declare-fun bm!14977 () Bool)

(declare-fun call!14977 () ListLongMap!1659)

(assert (=> bm!14977 (= call!14977 call!14969)))

(declare-fun bm!14978 () Bool)

(assert (=> bm!14978 (= call!14980 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!136445 () Bool)

(declare-fun lt!71188 () Unit!4281)

(declare-fun lt!71195 () Unit!4281)

(assert (=> b!136445 (= lt!71188 lt!71195)))

(assert (=> b!136445 (= call!14963 call!14970)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!62 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 V!3497 Int) Unit!4281)

(assert (=> b!136445 (= lt!71195 (lemmaChangeZeroKeyThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71185 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) (defaultEntry!2888 newMap!16)))))

(assert (=> b!136445 (= lt!71185 (bvor (extraKeys!2649 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!136445 (= e!88861 (tuple2!2577 true (LongMapFixedSize!1109 (defaultEntry!2888 newMap!16) (mask!7202 newMap!16) (bvor (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) (_size!603 newMap!16) (_keys!4641 newMap!16) (_values!2871 newMap!16) (_vacant!603 newMap!16))))))

(declare-fun bm!14979 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4789 (_ BitVec 32)) SeekEntryResult!270)

(assert (=> bm!14979 (= call!14961 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun b!136446 () Bool)

(declare-fun e!88862 () ListLongMap!1659)

(assert (=> b!136446 (= e!88862 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136447 () Bool)

(assert (=> b!136447 (= e!88866 e!88859)))

(assert (=> b!136447 (= lt!71204 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (=> b!136447 (= c!25527 ((_ is Undefined!270) lt!71204))))

(declare-fun b!136448 () Bool)

(declare-fun Unit!4285 () Unit!4281)

(assert (=> b!136448 (= e!88857 Unit!4285)))

(declare-fun lt!71202 () Unit!4281)

(assert (=> b!136448 (= lt!71202 call!14968)))

(assert (=> b!136448 (= lt!71206 call!14981)))

(assert (=> b!136448 (= c!25523 ((_ is MissingZero!270) lt!71206))))

(assert (=> b!136448 e!88863))

(declare-fun lt!71187 () Unit!4281)

(assert (=> b!136448 (= lt!71187 lt!71202)))

(assert (=> b!136448 false))

(declare-fun b!136449 () Bool)

(declare-fun res!65430 () Bool)

(assert (=> b!136449 (= res!65430 call!14984)))

(assert (=> b!136449 (=> (not res!65430) (not e!88870))))

(declare-fun bm!14980 () Bool)

(assert (=> bm!14980 (= call!14981 call!14961)))

(declare-fun b!136450 () Bool)

(declare-fun res!65425 () Bool)

(assert (=> b!136450 (=> (not res!65425) (not e!88851))))

(assert (=> b!136450 (= res!65425 call!14965)))

(assert (=> b!136450 (= e!88868 e!88851)))

(declare-fun b!136451 () Bool)

(assert (=> b!136451 (= e!88862 call!14977)))

(declare-fun b!136452 () Bool)

(assert (=> b!136452 (= e!88850 (not call!14976))))

(declare-fun b!136453 () Bool)

(declare-fun res!65432 () Bool)

(assert (=> b!136453 (= res!65432 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71190)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136453 (=> (not res!65432) (not e!88865))))

(declare-fun bm!14981 () Bool)

(assert (=> bm!14981 (= call!14964 (+!170 e!88862 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!25528 () Bool)

(assert (=> bm!14981 (= c!25528 c!25529)))

(declare-fun b!136454 () Bool)

(declare-fun res!65426 () Bool)

(assert (=> b!136454 (= res!65426 call!14979)))

(assert (=> b!136454 (=> (not res!65426) (not e!88853))))

(assert (= (and d!42681 c!25529) b!136434))

(assert (= (and d!42681 (not c!25529)) b!136447))

(assert (= (and b!136434 c!25524) b!136445))

(assert (= (and b!136434 (not c!25524)) b!136442))

(assert (= (or b!136445 b!136442) bm!14961))

(assert (= (or b!136445 b!136442) bm!14977))

(assert (= (or b!136445 b!136442) bm!14976))

(assert (= (and b!136447 c!25527) b!136423))

(assert (= (and b!136447 (not c!25527)) b!136420))

(assert (= (and b!136423 c!25521) b!136426))

(assert (= (and b!136423 (not c!25521)) b!136435))

(assert (= (and b!136426 res!65423) b!136454))

(assert (= (and b!136454 res!65426) b!136444))

(assert (= (and b!136435 c!25522) b!136450))

(assert (= (and b!136435 (not c!25522)) b!136433))

(assert (= (and b!136450 res!65425) b!136440))

(assert (= (and b!136440 res!65422) b!136413))

(assert (= (and b!136433 c!25526) b!136418))

(assert (= (and b!136433 (not c!25526)) b!136431))

(assert (= (and b!136418 res!65433) b!136453))

(assert (= (and b!136453 res!65432) b!136430))

(assert (= (or b!136450 b!136418) bm!14968))

(assert (= (or b!136413 b!136430) bm!14974))

(assert (= (or b!136454 bm!14968) bm!14962))

(assert (= (or b!136426 b!136435) bm!14972))

(assert (= (and b!136420 c!25520) b!136424))

(assert (= (and b!136420 (not c!25520)) b!136427))

(assert (= (and b!136427 c!25525) b!136429))

(assert (= (and b!136427 (not c!25525)) b!136422))

(assert (= (and b!136422 c!25518) b!136438))

(assert (= (and b!136422 (not c!25518)) b!136448))

(assert (= (and b!136438 res!65429) b!136449))

(assert (= (and b!136449 res!65430) b!136425))

(assert (= (and b!136448 c!25523) b!136441))

(assert (= (and b!136448 (not c!25523)) b!136428))

(assert (= (and b!136441 res!65427) b!136443))

(assert (= (and b!136443 res!65431) b!136452))

(assert (= (and b!136428 c!25519) b!136436))

(assert (= (and b!136428 (not c!25519)) b!136415))

(assert (= (and b!136436 res!65421) b!136414))

(assert (= (and b!136414 res!65420) b!136416))

(assert (= (or b!136441 b!136436) bm!14963))

(assert (= (or b!136452 b!136416) bm!14960))

(assert (= (or b!136449 bm!14963) bm!14975))

(assert (= (or b!136438 b!136448) bm!14980))

(assert (= (or b!136424 b!136429) bm!14964))

(assert (= (or bm!14962 bm!14975) bm!14958))

(assert (= (or b!136435 b!136448) bm!14971))

(assert (= (or b!136423 b!136422) bm!14973))

(assert (= (or b!136426 b!136438) bm!14967))

(assert (= (or bm!14974 bm!14960) bm!14978))

(assert (= (or bm!14972 bm!14980) bm!14979))

(assert (= (or b!136423 b!136422) bm!14969))

(assert (= (and bm!14969 c!25517) b!136419))

(assert (= (and bm!14969 (not c!25517)) b!136421))

(assert (= (or bm!14961 bm!14973) bm!14970))

(assert (= (or bm!14977 b!136422) bm!14959))

(assert (= (or bm!14976 b!136422) bm!14981))

(assert (= (and bm!14981 c!25528) b!136451))

(assert (= (and bm!14981 (not c!25528)) b!136446))

(assert (= (and d!42681 res!65428) b!136417))

(assert (= (and b!136417 c!25530) b!136439))

(assert (= (and b!136417 (not c!25530)) b!136437))

(assert (= (and b!136439 res!65424) b!136432))

(assert (= (or b!136439 b!136432 b!136437) bm!14966))

(assert (= (or b!136432 b!136437) bm!14965))

(declare-fun m!162715 () Bool)

(assert (=> b!136453 m!162715))

(declare-fun m!162717 () Bool)

(assert (=> bm!14970 m!162717))

(declare-fun m!162719 () Bool)

(assert (=> d!42681 m!162719))

(assert (=> d!42681 m!162599))

(declare-fun m!162721 () Bool)

(assert (=> b!136414 m!162721))

(assert (=> bm!14967 m!162605))

(declare-fun m!162723 () Bool)

(assert (=> bm!14967 m!162723))

(assert (=> b!136442 m!162629))

(declare-fun m!162725 () Bool)

(assert (=> b!136442 m!162725))

(declare-fun m!162727 () Bool)

(assert (=> b!136440 m!162727))

(declare-fun m!162729 () Bool)

(assert (=> bm!14981 m!162729))

(assert (=> bm!14971 m!162605))

(declare-fun m!162731 () Bool)

(assert (=> bm!14971 m!162731))

(assert (=> bm!14964 m!162605))

(assert (=> bm!14964 m!162629))

(declare-fun m!162733 () Bool)

(assert (=> bm!14964 m!162733))

(declare-fun m!162735 () Bool)

(assert (=> b!136432 m!162735))

(declare-fun m!162737 () Bool)

(assert (=> b!136421 m!162737))

(declare-fun m!162739 () Bool)

(assert (=> bm!14959 m!162739))

(declare-fun m!162741 () Bool)

(assert (=> bm!14959 m!162741))

(declare-fun m!162743 () Bool)

(assert (=> bm!14958 m!162743))

(declare-fun m!162745 () Bool)

(assert (=> b!136444 m!162745))

(assert (=> bm!14965 m!162607))

(declare-fun m!162747 () Bool)

(assert (=> b!136443 m!162747))

(declare-fun m!162749 () Bool)

(assert (=> bm!14966 m!162749))

(assert (=> bm!14979 m!162605))

(declare-fun m!162751 () Bool)

(assert (=> bm!14979 m!162751))

(assert (=> b!136445 m!162629))

(declare-fun m!162753 () Bool)

(assert (=> b!136445 m!162753))

(assert (=> b!136439 m!162605))

(declare-fun m!162755 () Bool)

(assert (=> b!136439 m!162755))

(assert (=> bm!14969 m!162605))

(declare-fun m!162757 () Bool)

(assert (=> bm!14969 m!162757))

(declare-fun m!162759 () Bool)

(assert (=> b!136425 m!162759))

(assert (=> b!136447 m!162605))

(assert (=> b!136447 m!162751))

(declare-fun m!162761 () Bool)

(assert (=> b!136422 m!162761))

(assert (=> b!136422 m!162739))

(assert (=> b!136422 m!162605))

(assert (=> b!136422 m!162629))

(declare-fun m!162763 () Bool)

(assert (=> b!136422 m!162763))

(declare-fun m!162765 () Bool)

(assert (=> b!136422 m!162765))

(assert (=> b!136422 m!162761))

(declare-fun m!162767 () Bool)

(assert (=> b!136422 m!162767))

(assert (=> b!136446 m!162737))

(assert (=> bm!14978 m!162605))

(declare-fun m!162769 () Bool)

(assert (=> bm!14978 m!162769))

(assert (=> b!136206 d!42681))

(declare-fun d!42683 () Bool)

(declare-fun c!25533 () Bool)

(assert (=> d!42683 (= c!25533 ((_ is ValueCellFull!1100) (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun e!88873 () V!3497)

(assert (=> d!42683 (= (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!88873)))

(declare-fun b!136459 () Bool)

(declare-fun get!1500 (ValueCell!1100 V!3497) V!3497)

(assert (=> b!136459 (= e!88873 (get!1500 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136460 () Bool)

(declare-fun get!1501 (ValueCell!1100 V!3497) V!3497)

(assert (=> b!136460 (= e!88873 (get!1501 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42683 c!25533) b!136459))

(assert (= (and d!42683 (not c!25533)) b!136460))

(assert (=> b!136459 m!162625))

(assert (=> b!136459 m!162627))

(declare-fun m!162771 () Bool)

(assert (=> b!136459 m!162771))

(assert (=> b!136460 m!162625))

(assert (=> b!136460 m!162627))

(declare-fun m!162773 () Bool)

(assert (=> b!136460 m!162773))

(assert (=> b!136206 d!42683))

(declare-fun d!42685 () Bool)

(declare-fun res!65438 () Bool)

(declare-fun e!88878 () Bool)

(assert (=> d!42685 (=> res!65438 e!88878)))

(assert (=> d!42685 (= res!65438 (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42685 (= (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!88878)))

(declare-fun b!136465 () Bool)

(declare-fun e!88879 () Bool)

(assert (=> b!136465 (= e!88878 e!88879)))

(declare-fun res!65439 () Bool)

(assert (=> b!136465 (=> (not res!65439) (not e!88879))))

(assert (=> b!136465 (= res!65439 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136466 () Bool)

(assert (=> b!136466 (= e!88879 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!42685 (not res!65438)) b!136465))

(assert (= (and b!136465 res!65439) b!136466))

(declare-fun m!162775 () Bool)

(assert (=> d!42685 m!162775))

(assert (=> b!136466 m!162605))

(declare-fun m!162777 () Bool)

(assert (=> b!136466 m!162777))

(assert (=> b!136203 d!42685))

(declare-fun d!42687 () Bool)

(declare-fun e!88882 () Bool)

(assert (=> d!42687 e!88882))

(declare-fun c!25536 () Bool)

(assert (=> d!42687 (= c!25536 (and (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!71212 () Unit!4281)

(declare-fun choose!837 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) (_ BitVec 32) Int) Unit!4281)

(assert (=> d!42687 (= lt!71212 (choose!837 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> d!42687 (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992))))))

(assert (=> d!42687 (= (lemmaListMapContainsThenArrayContainsFrom!125 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) lt!71212)))

(declare-fun b!136471 () Bool)

(assert (=> b!136471 (= e!88882 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!136472 () Bool)

(assert (=> b!136472 (= e!88882 (ite (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!42687 c!25536) b!136471))

(assert (= (and d!42687 (not c!25536)) b!136472))

(assert (=> d!42687 m!162605))

(declare-fun m!162779 () Bool)

(assert (=> d!42687 m!162779))

(declare-fun m!162781 () Bool)

(assert (=> d!42687 m!162781))

(assert (=> b!136471 m!162605))

(assert (=> b!136471 m!162617))

(assert (=> b!136203 d!42687))

(declare-fun d!42689 () Bool)

(assert (=> d!42689 (= (map!1405 newMap!16) (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun bs!5736 () Bool)

(assert (= bs!5736 d!42689))

(assert (=> bs!5736 m!162737))

(assert (=> b!136207 d!42689))

(declare-fun b!136515 () Bool)

(declare-fun e!88921 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!136515 (= e!88921 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136516 () Bool)

(declare-fun c!25554 () Bool)

(assert (=> b!136516 (= c!25554 (and (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!88912 () ListLongMap!1659)

(declare-fun e!88916 () ListLongMap!1659)

(assert (=> b!136516 (= e!88912 e!88916)))

(declare-fun d!42691 () Bool)

(declare-fun e!88914 () Bool)

(assert (=> d!42691 e!88914))

(declare-fun res!65465 () Bool)

(assert (=> d!42691 (=> (not res!65465) (not e!88914))))

(assert (=> d!42691 (= res!65465 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun lt!71267 () ListLongMap!1659)

(declare-fun lt!71276 () ListLongMap!1659)

(assert (=> d!42691 (= lt!71267 lt!71276)))

(declare-fun lt!71275 () Unit!4281)

(declare-fun e!88915 () Unit!4281)

(assert (=> d!42691 (= lt!71275 e!88915)))

(declare-fun c!25549 () Bool)

(assert (=> d!42691 (= c!25549 e!88921)))

(declare-fun res!65462 () Bool)

(assert (=> d!42691 (=> (not res!65462) (not e!88921))))

(assert (=> d!42691 (= res!65462 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!88913 () ListLongMap!1659)

(assert (=> d!42691 (= lt!71276 e!88913)))

(declare-fun c!25552 () Bool)

(assert (=> d!42691 (= c!25552 (and (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42691 (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992))))))

(assert (=> d!42691 (= (getCurrentListMap!521 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) lt!71267)))

(declare-fun b!136517 () Bool)

(declare-fun call!15000 () ListLongMap!1659)

(assert (=> b!136517 (= e!88912 call!15000)))

(declare-fun b!136518 () Bool)

(declare-fun res!65461 () Bool)

(assert (=> b!136518 (=> (not res!65461) (not e!88914))))

(declare-fun e!88917 () Bool)

(assert (=> b!136518 (= res!65461 e!88917)))

(declare-fun c!25551 () Bool)

(assert (=> b!136518 (= c!25551 (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!14996 () Bool)

(declare-fun call!15001 () ListLongMap!1659)

(declare-fun call!15004 () ListLongMap!1659)

(assert (=> bm!14996 (= call!15001 call!15004)))

(declare-fun bm!14997 () Bool)

(declare-fun call!15002 () Bool)

(assert (=> bm!14997 (= call!15002 (contains!888 lt!71267 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136519 () Bool)

(declare-fun Unit!4286 () Unit!4281)

(assert (=> b!136519 (= e!88915 Unit!4286)))

(declare-fun b!136520 () Bool)

(declare-fun call!15003 () ListLongMap!1659)

(assert (=> b!136520 (= e!88913 (+!170 call!15003 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136521 () Bool)

(declare-fun e!88910 () Bool)

(declare-fun apply!117 (ListLongMap!1659 (_ BitVec 64)) V!3497)

(assert (=> b!136521 (= e!88910 (= (apply!117 lt!71267 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136522 () Bool)

(declare-fun res!65459 () Bool)

(assert (=> b!136522 (=> (not res!65459) (not e!88914))))

(declare-fun e!88920 () Bool)

(assert (=> b!136522 (= res!65459 e!88920)))

(declare-fun res!65458 () Bool)

(assert (=> b!136522 (=> res!65458 e!88920)))

(declare-fun e!88918 () Bool)

(assert (=> b!136522 (= res!65458 (not e!88918))))

(declare-fun res!65464 () Bool)

(assert (=> b!136522 (=> (not res!65464) (not e!88918))))

(assert (=> b!136522 (= res!65464 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun bm!14998 () Bool)

(declare-fun c!25553 () Bool)

(declare-fun call!15005 () ListLongMap!1659)

(assert (=> bm!14998 (= call!15003 (+!170 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!136523 () Bool)

(declare-fun e!88909 () Bool)

(assert (=> b!136523 (= e!88920 e!88909)))

(declare-fun res!65460 () Bool)

(assert (=> b!136523 (=> (not res!65460) (not e!88909))))

(assert (=> b!136523 (= res!65460 (contains!888 lt!71267 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136523 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136524 () Bool)

(assert (=> b!136524 (= e!88913 e!88912)))

(assert (=> b!136524 (= c!25553 (and (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136525 () Bool)

(declare-fun lt!71261 () Unit!4281)

(assert (=> b!136525 (= e!88915 lt!71261)))

(declare-fun lt!71272 () ListLongMap!1659)

(declare-fun getCurrentListMapNoExtraKeys!137 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) Int) ListLongMap!1659)

(assert (=> b!136525 (= lt!71272 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun lt!71266 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71266 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71273 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71273 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71270 () Unit!4281)

(declare-fun addStillContains!93 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> b!136525 (= lt!71270 (addStillContains!93 lt!71272 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71273))))

(assert (=> b!136525 (contains!888 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71273)))

(declare-fun lt!71269 () Unit!4281)

(assert (=> b!136525 (= lt!71269 lt!71270)))

(declare-fun lt!71278 () ListLongMap!1659)

(assert (=> b!136525 (= lt!71278 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun lt!71265 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71265 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71264 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71264 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71271 () Unit!4281)

(declare-fun addApplyDifferent!93 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> b!136525 (= lt!71271 (addApplyDifferent!93 lt!71278 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71264))))

(assert (=> b!136525 (= (apply!117 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71264) (apply!117 lt!71278 lt!71264))))

(declare-fun lt!71263 () Unit!4281)

(assert (=> b!136525 (= lt!71263 lt!71271)))

(declare-fun lt!71257 () ListLongMap!1659)

(assert (=> b!136525 (= lt!71257 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun lt!71260 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71260 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71258 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71258 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71277 () Unit!4281)

(assert (=> b!136525 (= lt!71277 (addApplyDifferent!93 lt!71257 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71258))))

(assert (=> b!136525 (= (apply!117 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71258) (apply!117 lt!71257 lt!71258))))

(declare-fun lt!71259 () Unit!4281)

(assert (=> b!136525 (= lt!71259 lt!71277)))

(declare-fun lt!71262 () ListLongMap!1659)

(assert (=> b!136525 (= lt!71262 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun lt!71268 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71268 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71274 () (_ BitVec 64))

(assert (=> b!136525 (= lt!71274 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!136525 (= lt!71261 (addApplyDifferent!93 lt!71262 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71274))))

(assert (=> b!136525 (= (apply!117 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71274) (apply!117 lt!71262 lt!71274))))

(declare-fun bm!14999 () Bool)

(assert (=> bm!14999 (= call!15004 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136526 () Bool)

(declare-fun e!88911 () Bool)

(assert (=> b!136526 (= e!88914 e!88911)))

(declare-fun c!25550 () Bool)

(assert (=> b!136526 (= c!25550 (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136527 () Bool)

(declare-fun e!88919 () Bool)

(assert (=> b!136527 (= e!88919 (= (apply!117 lt!71267 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136528 () Bool)

(assert (=> b!136528 (= e!88911 e!88910)))

(declare-fun res!65463 () Bool)

(assert (=> b!136528 (= res!65463 call!15002)))

(assert (=> b!136528 (=> (not res!65463) (not e!88910))))

(declare-fun b!136529 () Bool)

(assert (=> b!136529 (= e!88909 (= (apply!117 lt!71267 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136529 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> b!136529 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136530 () Bool)

(assert (=> b!136530 (= e!88916 call!15000)))

(declare-fun b!136531 () Bool)

(assert (=> b!136531 (= e!88918 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136532 () Bool)

(assert (=> b!136532 (= e!88916 call!15005)))

(declare-fun b!136533 () Bool)

(assert (=> b!136533 (= e!88911 (not call!15002))))

(declare-fun b!136534 () Bool)

(declare-fun call!14999 () Bool)

(assert (=> b!136534 (= e!88917 (not call!14999))))

(declare-fun b!136535 () Bool)

(assert (=> b!136535 (= e!88917 e!88919)))

(declare-fun res!65466 () Bool)

(assert (=> b!136535 (= res!65466 call!14999)))

(assert (=> b!136535 (=> (not res!65466) (not e!88919))))

(declare-fun bm!15000 () Bool)

(assert (=> bm!15000 (= call!14999 (contains!888 lt!71267 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15001 () Bool)

(assert (=> bm!15001 (= call!15005 call!15001)))

(declare-fun bm!15002 () Bool)

(assert (=> bm!15002 (= call!15000 call!15003)))

(assert (= (and d!42691 c!25552) b!136520))

(assert (= (and d!42691 (not c!25552)) b!136524))

(assert (= (and b!136524 c!25553) b!136517))

(assert (= (and b!136524 (not c!25553)) b!136516))

(assert (= (and b!136516 c!25554) b!136530))

(assert (= (and b!136516 (not c!25554)) b!136532))

(assert (= (or b!136530 b!136532) bm!15001))

(assert (= (or b!136517 bm!15001) bm!14996))

(assert (= (or b!136517 b!136530) bm!15002))

(assert (= (or b!136520 bm!14996) bm!14999))

(assert (= (or b!136520 bm!15002) bm!14998))

(assert (= (and d!42691 res!65462) b!136515))

(assert (= (and d!42691 c!25549) b!136525))

(assert (= (and d!42691 (not c!25549)) b!136519))

(assert (= (and d!42691 res!65465) b!136522))

(assert (= (and b!136522 res!65464) b!136531))

(assert (= (and b!136522 (not res!65458)) b!136523))

(assert (= (and b!136523 res!65460) b!136529))

(assert (= (and b!136522 res!65459) b!136518))

(assert (= (and b!136518 c!25551) b!136535))

(assert (= (and b!136518 (not c!25551)) b!136534))

(assert (= (and b!136535 res!65466) b!136527))

(assert (= (or b!136535 b!136534) bm!15000))

(assert (= (and b!136518 res!65461) b!136526))

(assert (= (and b!136526 c!25550) b!136528))

(assert (= (and b!136526 (not c!25550)) b!136533))

(assert (= (and b!136528 res!65463) b!136521))

(assert (= (or b!136528 b!136533) bm!14997))

(declare-fun b_lambda!6105 () Bool)

(assert (=> (not b_lambda!6105) (not b!136529)))

(assert (=> b!136529 t!6176))

(declare-fun b_and!8457 () Bool)

(assert (= b_and!8437 (and (=> t!6176 result!4023) b_and!8457)))

(assert (=> b!136529 t!6178))

(declare-fun b_and!8459 () Bool)

(assert (= b_and!8439 (and (=> t!6178 result!4027) b_and!8459)))

(declare-fun m!162783 () Bool)

(assert (=> b!136521 m!162783))

(declare-fun m!162785 () Bool)

(assert (=> b!136525 m!162785))

(declare-fun m!162787 () Bool)

(assert (=> b!136525 m!162787))

(declare-fun m!162789 () Bool)

(assert (=> b!136525 m!162789))

(declare-fun m!162791 () Bool)

(assert (=> b!136525 m!162791))

(declare-fun m!162793 () Bool)

(assert (=> b!136525 m!162793))

(declare-fun m!162795 () Bool)

(assert (=> b!136525 m!162795))

(declare-fun m!162797 () Bool)

(assert (=> b!136525 m!162797))

(assert (=> b!136525 m!162797))

(declare-fun m!162799 () Bool)

(assert (=> b!136525 m!162799))

(declare-fun m!162801 () Bool)

(assert (=> b!136525 m!162801))

(declare-fun m!162803 () Bool)

(assert (=> b!136525 m!162803))

(declare-fun m!162805 () Bool)

(assert (=> b!136525 m!162805))

(declare-fun m!162807 () Bool)

(assert (=> b!136525 m!162807))

(declare-fun m!162809 () Bool)

(assert (=> b!136525 m!162809))

(assert (=> b!136525 m!162775))

(assert (=> b!136525 m!162787))

(assert (=> b!136525 m!162803))

(assert (=> b!136525 m!162801))

(declare-fun m!162811 () Bool)

(assert (=> b!136525 m!162811))

(declare-fun m!162813 () Bool)

(assert (=> b!136525 m!162813))

(declare-fun m!162815 () Bool)

(assert (=> b!136525 m!162815))

(assert (=> b!136523 m!162775))

(assert (=> b!136523 m!162775))

(declare-fun m!162817 () Bool)

(assert (=> b!136523 m!162817))

(assert (=> d!42691 m!162781))

(declare-fun m!162819 () Bool)

(assert (=> b!136529 m!162819))

(assert (=> b!136529 m!162819))

(assert (=> b!136529 m!162627))

(declare-fun m!162821 () Bool)

(assert (=> b!136529 m!162821))

(assert (=> b!136529 m!162775))

(assert (=> b!136529 m!162775))

(declare-fun m!162823 () Bool)

(assert (=> b!136529 m!162823))

(assert (=> b!136529 m!162627))

(declare-fun m!162825 () Bool)

(assert (=> b!136520 m!162825))

(declare-fun m!162827 () Bool)

(assert (=> bm!15000 m!162827))

(assert (=> bm!14999 m!162785))

(assert (=> b!136531 m!162775))

(assert (=> b!136531 m!162775))

(declare-fun m!162829 () Bool)

(assert (=> b!136531 m!162829))

(assert (=> b!136515 m!162775))

(assert (=> b!136515 m!162775))

(assert (=> b!136515 m!162829))

(declare-fun m!162831 () Bool)

(assert (=> bm!14997 m!162831))

(declare-fun m!162833 () Bool)

(assert (=> bm!14998 m!162833))

(declare-fun m!162835 () Bool)

(assert (=> b!136527 m!162835))

(assert (=> b!136207 d!42691))

(declare-fun d!42693 () Bool)

(assert (=> d!42693 (= (array_inv!1413 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvsge (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!136212 d!42693))

(declare-fun d!42695 () Bool)

(assert (=> d!42695 (= (array_inv!1414 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvsge (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!136212 d!42695))

(declare-fun d!42697 () Bool)

(declare-fun res!65473 () Bool)

(declare-fun e!88924 () Bool)

(assert (=> d!42697 (=> (not res!65473) (not e!88924))))

(declare-fun simpleValid!93 (LongMapFixedSize!1108) Bool)

(assert (=> d!42697 (= res!65473 (simpleValid!93 newMap!16))))

(assert (=> d!42697 (= (valid!545 newMap!16) e!88924)))

(declare-fun b!136542 () Bool)

(declare-fun res!65474 () Bool)

(assert (=> b!136542 (=> (not res!65474) (not e!88924))))

(declare-fun arrayCountValidKeys!0 (array!4789 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!136542 (= res!65474 (= (arrayCountValidKeys!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (_size!603 newMap!16)))))

(declare-fun b!136543 () Bool)

(declare-fun res!65475 () Bool)

(assert (=> b!136543 (=> (not res!65475) (not e!88924))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4789 (_ BitVec 32)) Bool)

(assert (=> b!136543 (= res!65475 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun b!136544 () Bool)

(declare-datatypes ((List!1701 0))(
  ( (Nil!1698) (Cons!1697 (h!2303 (_ BitVec 64)) (t!6189 List!1701)) )
))
(declare-fun arrayNoDuplicates!0 (array!4789 (_ BitVec 32) List!1701) Bool)

(assert (=> b!136544 (= e!88924 (arrayNoDuplicates!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 Nil!1698))))

(assert (= (and d!42697 res!65473) b!136542))

(assert (= (and b!136542 res!65474) b!136543))

(assert (= (and b!136543 res!65475) b!136544))

(declare-fun m!162837 () Bool)

(assert (=> d!42697 m!162837))

(declare-fun m!162839 () Bool)

(assert (=> b!136542 m!162839))

(declare-fun m!162841 () Bool)

(assert (=> b!136543 m!162841))

(declare-fun m!162843 () Bool)

(assert (=> b!136544 m!162843))

(assert (=> b!136210 d!42697))

(declare-fun d!42699 () Bool)

(assert (=> d!42699 (= (valid!546 thiss!992) (valid!545 (v!3220 (underlying!459 thiss!992))))))

(declare-fun bs!5737 () Bool)

(assert (= bs!5737 d!42699))

(declare-fun m!162845 () Bool)

(assert (=> bs!5737 m!162845))

(assert (=> start!14432 d!42699))

(declare-fun d!42701 () Bool)

(assert (=> d!42701 (= (array_inv!1413 (_keys!4641 newMap!16)) (bvsge (size!2534 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136215 d!42701))

(declare-fun d!42703 () Bool)

(assert (=> d!42703 (= (array_inv!1414 (_values!2871 newMap!16)) (bvsge (size!2535 (_values!2871 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136215 d!42703))

(declare-fun b!136552 () Bool)

(declare-fun e!88929 () Bool)

(assert (=> b!136552 (= e!88929 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4699 () Bool)

(declare-fun mapRes!4699 () Bool)

(assert (=> mapIsEmpty!4699 mapRes!4699))

(declare-fun mapNonEmpty!4699 () Bool)

(declare-fun tp!11305 () Bool)

(declare-fun e!88930 () Bool)

(assert (=> mapNonEmpty!4699 (= mapRes!4699 (and tp!11305 e!88930))))

(declare-fun mapRest!4699 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapValue!4699 () ValueCell!1100)

(declare-fun mapKey!4699 () (_ BitVec 32))

(assert (=> mapNonEmpty!4699 (= mapRest!4683 (store mapRest!4699 mapKey!4699 mapValue!4699))))

(declare-fun b!136551 () Bool)

(assert (=> b!136551 (= e!88930 tp_is_empty!2887)))

(declare-fun condMapEmpty!4699 () Bool)

(declare-fun mapDefault!4699 () ValueCell!1100)

(assert (=> mapNonEmpty!4683 (= condMapEmpty!4699 (= mapRest!4683 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4699)))))

(assert (=> mapNonEmpty!4683 (= tp!11276 (and e!88929 mapRes!4699))))

(assert (= (and mapNonEmpty!4683 condMapEmpty!4699) mapIsEmpty!4699))

(assert (= (and mapNonEmpty!4683 (not condMapEmpty!4699)) mapNonEmpty!4699))

(assert (= (and mapNonEmpty!4699 ((_ is ValueCellFull!1100) mapValue!4699)) b!136551))

(assert (= (and mapNonEmpty!4683 ((_ is ValueCellFull!1100) mapDefault!4699)) b!136552))

(declare-fun m!162847 () Bool)

(assert (=> mapNonEmpty!4699 m!162847))

(declare-fun b!136554 () Bool)

(declare-fun e!88931 () Bool)

(assert (=> b!136554 (= e!88931 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4700 () Bool)

(declare-fun mapRes!4700 () Bool)

(assert (=> mapIsEmpty!4700 mapRes!4700))

(declare-fun mapNonEmpty!4700 () Bool)

(declare-fun tp!11306 () Bool)

(declare-fun e!88932 () Bool)

(assert (=> mapNonEmpty!4700 (= mapRes!4700 (and tp!11306 e!88932))))

(declare-fun mapValue!4700 () ValueCell!1100)

(declare-fun mapKey!4700 () (_ BitVec 32))

(declare-fun mapRest!4700 () (Array (_ BitVec 32) ValueCell!1100))

(assert (=> mapNonEmpty!4700 (= mapRest!4684 (store mapRest!4700 mapKey!4700 mapValue!4700))))

(declare-fun b!136553 () Bool)

(assert (=> b!136553 (= e!88932 tp_is_empty!2887)))

(declare-fun condMapEmpty!4700 () Bool)

(declare-fun mapDefault!4700 () ValueCell!1100)

(assert (=> mapNonEmpty!4684 (= condMapEmpty!4700 (= mapRest!4684 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4700)))))

(assert (=> mapNonEmpty!4684 (= tp!11278 (and e!88931 mapRes!4700))))

(assert (= (and mapNonEmpty!4684 condMapEmpty!4700) mapIsEmpty!4700))

(assert (= (and mapNonEmpty!4684 (not condMapEmpty!4700)) mapNonEmpty!4700))

(assert (= (and mapNonEmpty!4700 ((_ is ValueCellFull!1100) mapValue!4700)) b!136553))

(assert (= (and mapNonEmpty!4684 ((_ is ValueCellFull!1100) mapDefault!4700)) b!136554))

(declare-fun m!162849 () Bool)

(assert (=> mapNonEmpty!4700 m!162849))

(declare-fun b_lambda!6107 () Bool)

(assert (= b_lambda!6105 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6107)))

(check-sat (not d!42681) (not bm!14998) (not bm!14981) (not b!136542) (not b!136520) (not bm!14997) (not b!136466) (not b_next!2943) (not b!136527) (not b!136515) (not bm!14978) (not bm!14958) (not b!136529) (not d!42689) (not b!136521) (not bm!14999) (not b!136445) (not b!136471) (not b!136447) (not mapNonEmpty!4699) (not b!136543) (not b!136525) (not bm!14966) (not bm!14964) (not b!136326) (not b!136460) (not b!136523) (not b!136432) (not d!42679) (not b!136439) (not b!136421) (not b_lambda!6103) (not d!42697) (not b!136544) (not b!136446) (not bm!14969) b_and!8459 (not d!42687) (not bm!14959) (not b_next!2941) (not bm!14965) (not b!136442) b_and!8457 (not bm!14970) (not b!136459) (not bm!15000) (not b!136422) (not b!136531) (not bm!14971) (not d!42699) (not b!136328) (not b_lambda!6107) (not d!42691) (not bm!14979) (not mapNonEmpty!4700) (not bm!14967) tp_is_empty!2887)
(check-sat b_and!8457 b_and!8459 (not b_next!2941) (not b_next!2943))
(get-model)

(declare-fun d!42705 () Bool)

(declare-fun e!88935 () Bool)

(assert (=> d!42705 e!88935))

(declare-fun res!65480 () Bool)

(assert (=> d!42705 (=> (not res!65480) (not e!88935))))

(declare-fun lt!71283 () SeekEntryResult!270)

(assert (=> d!42705 (= res!65480 ((_ is Found!270) lt!71283))))

(assert (=> d!42705 (= lt!71283 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun lt!71284 () Unit!4281)

(declare-fun choose!838 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) Int) Unit!4281)

(assert (=> d!42705 (= lt!71284 (choose!838 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42705 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42705 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)) lt!71284)))

(declare-fun b!136559 () Bool)

(declare-fun res!65481 () Bool)

(assert (=> b!136559 (=> (not res!65481) (not e!88935))))

(assert (=> b!136559 (= res!65481 (inRange!0 (index!3242 lt!71283) (mask!7202 newMap!16)))))

(declare-fun b!136560 () Bool)

(assert (=> b!136560 (= e!88935 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71283)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!136560 (and (bvsge (index!3242 lt!71283) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71283) (size!2534 (_keys!4641 newMap!16))))))

(assert (= (and d!42705 res!65480) b!136559))

(assert (= (and b!136559 res!65481) b!136560))

(assert (=> d!42705 m!162605))

(assert (=> d!42705 m!162751))

(assert (=> d!42705 m!162605))

(declare-fun m!162851 () Bool)

(assert (=> d!42705 m!162851))

(declare-fun m!162853 () Bool)

(assert (=> d!42705 m!162853))

(declare-fun m!162855 () Bool)

(assert (=> b!136559 m!162855))

(declare-fun m!162857 () Bool)

(assert (=> b!136560 m!162857))

(assert (=> bm!14967 d!42705))

(declare-fun d!42707 () Bool)

(declare-fun res!65482 () Bool)

(declare-fun e!88936 () Bool)

(assert (=> d!42707 (=> (not res!65482) (not e!88936))))

(assert (=> d!42707 (= res!65482 (simpleValid!93 (_2!1299 lt!71193)))))

(assert (=> d!42707 (= (valid!545 (_2!1299 lt!71193)) e!88936)))

(declare-fun b!136561 () Bool)

(declare-fun res!65483 () Bool)

(assert (=> b!136561 (=> (not res!65483) (not e!88936))))

(assert (=> b!136561 (= res!65483 (= (arrayCountValidKeys!0 (_keys!4641 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))) (_size!603 (_2!1299 lt!71193))))))

(declare-fun b!136562 () Bool)

(declare-fun res!65484 () Bool)

(assert (=> b!136562 (=> (not res!65484) (not e!88936))))

(assert (=> b!136562 (= res!65484 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193))))))

(declare-fun b!136563 () Bool)

(assert (=> b!136563 (= e!88936 (arrayNoDuplicates!0 (_keys!4641 (_2!1299 lt!71193)) #b00000000000000000000000000000000 Nil!1698))))

(assert (= (and d!42707 res!65482) b!136561))

(assert (= (and b!136561 res!65483) b!136562))

(assert (= (and b!136562 res!65484) b!136563))

(declare-fun m!162859 () Bool)

(assert (=> d!42707 m!162859))

(declare-fun m!162861 () Bool)

(assert (=> b!136561 m!162861))

(declare-fun m!162863 () Bool)

(assert (=> b!136562 m!162863))

(declare-fun m!162865 () Bool)

(assert (=> b!136563 m!162865))

(assert (=> d!42681 d!42707))

(assert (=> d!42681 d!42697))

(declare-fun d!42709 () Bool)

(assert (=> d!42709 (= (map!1405 (_2!1299 lt!71193)) (getCurrentListMap!521 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun bs!5738 () Bool)

(assert (= bs!5738 d!42709))

(declare-fun m!162867 () Bool)

(assert (=> bs!5738 m!162867))

(assert (=> bm!14966 d!42709))

(declare-fun d!42711 () Bool)

(declare-fun e!88939 () Bool)

(assert (=> d!42711 e!88939))

(declare-fun c!25557 () Bool)

(assert (=> d!42711 (= c!25557 (and (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!42711 true))

(declare-fun _$29!159 () Unit!4281)

(assert (=> d!42711 (= (choose!837 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) _$29!159)))

(declare-fun b!136568 () Bool)

(assert (=> b!136568 (= e!88939 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!136569 () Bool)

(assert (=> b!136569 (= e!88939 (ite (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!42711 c!25557) b!136568))

(assert (= (and d!42711 (not c!25557)) b!136569))

(assert (=> b!136568 m!162605))

(assert (=> b!136568 m!162617))

(assert (=> d!42687 d!42711))

(declare-fun d!42713 () Bool)

(assert (=> d!42713 (= (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992)))) (and (or (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000001111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000011111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000001111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000011111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000001111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000011111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000001111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000011111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000001111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000011111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000001111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000011111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000001111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000011111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000001111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000011111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000111111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00001111111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00011111111111111111111111111111) (= (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> d!42687 d!42713))

(declare-fun d!42715 () Bool)

(assert (=> d!42715 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71287 () Unit!4281)

(declare-fun choose!839 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 V!3497 Int) Unit!4281)

(assert (=> d!42715 (= lt!71287 (choose!839 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42715 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42715 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)) lt!71287)))

(declare-fun bs!5739 () Bool)

(assert (= bs!5739 d!42715))

(assert (=> bs!5739 m!162629))

(declare-fun m!162869 () Bool)

(assert (=> bs!5739 m!162869))

(assert (=> bs!5739 m!162629))

(declare-fun m!162871 () Bool)

(assert (=> bs!5739 m!162871))

(assert (=> bs!5739 m!162737))

(declare-fun m!162873 () Bool)

(assert (=> bs!5739 m!162873))

(assert (=> bs!5739 m!162853))

(assert (=> bs!5739 m!162737))

(assert (=> b!136442 d!42715))

(declare-fun d!42717 () Bool)

(assert (=> d!42717 (= (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136531 d!42717))

(assert (=> bm!14965 d!42689))

(declare-fun d!42719 () Bool)

(declare-fun get!1502 (Option!180) V!3497)

(assert (=> d!42719 (= (apply!117 lt!71267 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1502 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5740 () Bool)

(assert (= bs!5740 d!42719))

(assert (=> bs!5740 m!162775))

(declare-fun m!162875 () Bool)

(assert (=> bs!5740 m!162875))

(assert (=> bs!5740 m!162875))

(declare-fun m!162877 () Bool)

(assert (=> bs!5740 m!162877))

(assert (=> b!136529 d!42719))

(declare-fun d!42721 () Bool)

(declare-fun c!25558 () Bool)

(assert (=> d!42721 (= c!25558 ((_ is ValueCellFull!1100) (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!88940 () V!3497)

(assert (=> d!42721 (= (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!88940)))

(declare-fun b!136570 () Bool)

(assert (=> b!136570 (= e!88940 (get!1500 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136571 () Bool)

(assert (=> b!136571 (= e!88940 (get!1501 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42721 c!25558) b!136570))

(assert (= (and d!42721 (not c!25558)) b!136571))

(assert (=> b!136570 m!162819))

(assert (=> b!136570 m!162627))

(declare-fun m!162879 () Bool)

(assert (=> b!136570 m!162879))

(assert (=> b!136571 m!162819))

(assert (=> b!136571 m!162627))

(declare-fun m!162881 () Bool)

(assert (=> b!136571 m!162881))

(assert (=> b!136529 d!42721))

(assert (=> d!42691 d!42713))

(declare-fun d!42723 () Bool)

(declare-fun res!65485 () Bool)

(declare-fun e!88941 () Bool)

(assert (=> d!42723 (=> res!65485 e!88941)))

(assert (=> d!42723 (= res!65485 (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42723 (= (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!88941)))

(declare-fun b!136572 () Bool)

(declare-fun e!88942 () Bool)

(assert (=> b!136572 (= e!88941 e!88942)))

(declare-fun res!65486 () Bool)

(assert (=> b!136572 (=> (not res!65486) (not e!88942))))

(assert (=> b!136572 (= res!65486 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136573 () Bool)

(assert (=> b!136573 (= e!88942 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!42723 (not res!65485)) b!136572))

(assert (= (and b!136572 res!65486) b!136573))

(declare-fun m!162883 () Bool)

(assert (=> d!42723 m!162883))

(assert (=> b!136573 m!162605))

(declare-fun m!162885 () Bool)

(assert (=> b!136573 m!162885))

(assert (=> b!136466 d!42723))

(declare-fun b!136584 () Bool)

(declare-fun e!88951 () Bool)

(declare-fun contains!890 (List!1701 (_ BitVec 64)) Bool)

(assert (=> b!136584 (= e!88951 (contains!890 Nil!1698 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!42725 () Bool)

(declare-fun res!65495 () Bool)

(declare-fun e!88952 () Bool)

(assert (=> d!42725 (=> res!65495 e!88952)))

(assert (=> d!42725 (= res!65495 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42725 (= (arrayNoDuplicates!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 Nil!1698) e!88952)))

(declare-fun b!136585 () Bool)

(declare-fun e!88953 () Bool)

(declare-fun call!15008 () Bool)

(assert (=> b!136585 (= e!88953 call!15008)))

(declare-fun b!136586 () Bool)

(declare-fun e!88954 () Bool)

(assert (=> b!136586 (= e!88954 e!88953)))

(declare-fun c!25561 () Bool)

(assert (=> b!136586 (= c!25561 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!15005 () Bool)

(assert (=> bm!15005 (= call!15008 (arrayNoDuplicates!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25561 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) Nil!1698) Nil!1698)))))

(declare-fun b!136587 () Bool)

(assert (=> b!136587 (= e!88952 e!88954)))

(declare-fun res!65494 () Bool)

(assert (=> b!136587 (=> (not res!65494) (not e!88954))))

(assert (=> b!136587 (= res!65494 (not e!88951))))

(declare-fun res!65493 () Bool)

(assert (=> b!136587 (=> (not res!65493) (not e!88951))))

(assert (=> b!136587 (= res!65493 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136588 () Bool)

(assert (=> b!136588 (= e!88953 call!15008)))

(assert (= (and d!42725 (not res!65495)) b!136587))

(assert (= (and b!136587 res!65493) b!136584))

(assert (= (and b!136587 res!65494) b!136586))

(assert (= (and b!136586 c!25561) b!136588))

(assert (= (and b!136586 (not c!25561)) b!136585))

(assert (= (or b!136588 b!136585) bm!15005))

(declare-fun m!162887 () Bool)

(assert (=> b!136584 m!162887))

(assert (=> b!136584 m!162887))

(declare-fun m!162889 () Bool)

(assert (=> b!136584 m!162889))

(assert (=> b!136586 m!162887))

(assert (=> b!136586 m!162887))

(declare-fun m!162891 () Bool)

(assert (=> b!136586 m!162891))

(assert (=> bm!15005 m!162887))

(declare-fun m!162893 () Bool)

(assert (=> bm!15005 m!162893))

(assert (=> b!136587 m!162887))

(assert (=> b!136587 m!162887))

(assert (=> b!136587 m!162891))

(assert (=> b!136544 d!42725))

(declare-fun d!42727 () Bool)

(assert (=> d!42727 (= (apply!117 lt!71267 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5741 () Bool)

(assert (= bs!5741 d!42727))

(declare-fun m!162895 () Bool)

(assert (=> bs!5741 m!162895))

(assert (=> bs!5741 m!162895))

(declare-fun m!162897 () Bool)

(assert (=> bs!5741 m!162897))

(assert (=> b!136527 d!42727))

(declare-fun b!136597 () Bool)

(declare-fun e!88959 () (_ BitVec 32))

(declare-fun call!15011 () (_ BitVec 32))

(assert (=> b!136597 (= e!88959 call!15011)))

(declare-fun d!42729 () Bool)

(declare-fun lt!71290 () (_ BitVec 32))

(assert (=> d!42729 (and (bvsge lt!71290 #b00000000000000000000000000000000) (bvsle lt!71290 (bvsub (size!2534 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!88960 () (_ BitVec 32))

(assert (=> d!42729 (= lt!71290 e!88960)))

(declare-fun c!25567 () Bool)

(assert (=> d!42729 (= c!25567 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42729 (and (bvsle #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2534 (_keys!4641 newMap!16)) (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42729 (= (arrayCountValidKeys!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) lt!71290)))

(declare-fun b!136598 () Bool)

(assert (=> b!136598 (= e!88960 e!88959)))

(declare-fun c!25566 () Bool)

(assert (=> b!136598 (= c!25566 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136599 () Bool)

(assert (=> b!136599 (= e!88960 #b00000000000000000000000000000000)))

(declare-fun b!136600 () Bool)

(assert (=> b!136600 (= e!88959 (bvadd #b00000000000000000000000000000001 call!15011))))

(declare-fun bm!15008 () Bool)

(assert (=> bm!15008 (= call!15011 (arrayCountValidKeys!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (= (and d!42729 c!25567) b!136599))

(assert (= (and d!42729 (not c!25567)) b!136598))

(assert (= (and b!136598 c!25566) b!136600))

(assert (= (and b!136598 (not c!25566)) b!136597))

(assert (= (or b!136600 b!136597) bm!15008))

(assert (=> b!136598 m!162887))

(assert (=> b!136598 m!162887))

(assert (=> b!136598 m!162891))

(declare-fun m!162899 () Bool)

(assert (=> bm!15008 m!162899))

(assert (=> b!136542 d!42729))

(declare-fun bm!15011 () Bool)

(declare-fun call!15014 () ListLongMap!1659)

(assert (=> bm!15011 (= call!15014 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136626 () Bool)

(declare-fun lt!71311 () ListLongMap!1659)

(declare-fun e!88976 () Bool)

(assert (=> b!136626 (= e!88976 (= lt!71311 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136627 () Bool)

(declare-fun res!65505 () Bool)

(declare-fun e!88979 () Bool)

(assert (=> b!136627 (=> (not res!65505) (not e!88979))))

(assert (=> b!136627 (= res!65505 (not (contains!888 lt!71311 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136628 () Bool)

(declare-fun e!88981 () Bool)

(assert (=> b!136628 (= e!88981 e!88976)))

(declare-fun c!25579 () Bool)

(assert (=> b!136628 (= c!25579 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136629 () Bool)

(declare-fun e!88975 () ListLongMap!1659)

(assert (=> b!136629 (= e!88975 call!15014)))

(declare-fun b!136630 () Bool)

(declare-fun e!88980 () Bool)

(assert (=> b!136630 (= e!88980 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136630 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!136631 () Bool)

(declare-fun e!88978 () ListLongMap!1659)

(assert (=> b!136631 (= e!88978 (ListLongMap!1660 Nil!1696))))

(declare-fun b!136632 () Bool)

(assert (=> b!136632 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> b!136632 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!88977 () Bool)

(assert (=> b!136632 (= e!88977 (= (apply!117 lt!71311 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!136633 () Bool)

(declare-fun lt!71309 () Unit!4281)

(declare-fun lt!71306 () Unit!4281)

(assert (=> b!136633 (= lt!71309 lt!71306)))

(declare-fun lt!71308 () (_ BitVec 64))

(declare-fun lt!71307 () V!3497)

(declare-fun lt!71310 () (_ BitVec 64))

(declare-fun lt!71305 () ListLongMap!1659)

(assert (=> b!136633 (not (contains!888 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307)) lt!71310))))

(declare-fun addStillNotContains!64 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> b!136633 (= lt!71306 (addStillNotContains!64 lt!71305 lt!71308 lt!71307 lt!71310))))

(assert (=> b!136633 (= lt!71310 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!136633 (= lt!71307 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!136633 (= lt!71308 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!136633 (= lt!71305 call!15014)))

(assert (=> b!136633 (= e!88975 (+!170 call!15014 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!136634 () Bool)

(declare-fun isEmpty!418 (ListLongMap!1659) Bool)

(assert (=> b!136634 (= e!88976 (isEmpty!418 lt!71311))))

(declare-fun d!42731 () Bool)

(assert (=> d!42731 e!88979))

(declare-fun res!65507 () Bool)

(assert (=> d!42731 (=> (not res!65507) (not e!88979))))

(assert (=> d!42731 (= res!65507 (not (contains!888 lt!71311 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42731 (= lt!71311 e!88978)))

(declare-fun c!25578 () Bool)

(assert (=> d!42731 (= c!25578 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!42731 (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992))))))

(assert (=> d!42731 (= (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) lt!71311)))

(declare-fun b!136625 () Bool)

(assert (=> b!136625 (= e!88978 e!88975)))

(declare-fun c!25576 () Bool)

(assert (=> b!136625 (= c!25576 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136635 () Bool)

(assert (=> b!136635 (= e!88979 e!88981)))

(declare-fun c!25577 () Bool)

(assert (=> b!136635 (= c!25577 e!88980)))

(declare-fun res!65506 () Bool)

(assert (=> b!136635 (=> (not res!65506) (not e!88980))))

(assert (=> b!136635 (= res!65506 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136636 () Bool)

(assert (=> b!136636 (= e!88981 e!88977)))

(assert (=> b!136636 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun res!65504 () Bool)

(assert (=> b!136636 (= res!65504 (contains!888 lt!71311 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136636 (=> (not res!65504) (not e!88977))))

(assert (= (and d!42731 c!25578) b!136631))

(assert (= (and d!42731 (not c!25578)) b!136625))

(assert (= (and b!136625 c!25576) b!136633))

(assert (= (and b!136625 (not c!25576)) b!136629))

(assert (= (or b!136633 b!136629) bm!15011))

(assert (= (and d!42731 res!65507) b!136627))

(assert (= (and b!136627 res!65505) b!136635))

(assert (= (and b!136635 res!65506) b!136630))

(assert (= (and b!136635 c!25577) b!136636))

(assert (= (and b!136635 (not c!25577)) b!136628))

(assert (= (and b!136636 res!65504) b!136632))

(assert (= (and b!136628 c!25579) b!136626))

(assert (= (and b!136628 (not c!25579)) b!136634))

(declare-fun b_lambda!6109 () Bool)

(assert (=> (not b_lambda!6109) (not b!136632)))

(assert (=> b!136632 t!6176))

(declare-fun b_and!8461 () Bool)

(assert (= b_and!8457 (and (=> t!6176 result!4023) b_and!8461)))

(assert (=> b!136632 t!6178))

(declare-fun b_and!8463 () Bool)

(assert (= b_and!8459 (and (=> t!6178 result!4027) b_and!8463)))

(declare-fun b_lambda!6111 () Bool)

(assert (=> (not b_lambda!6111) (not b!136633)))

(assert (=> b!136633 t!6176))

(declare-fun b_and!8465 () Bool)

(assert (= b_and!8461 (and (=> t!6176 result!4023) b_and!8465)))

(assert (=> b!136633 t!6178))

(declare-fun b_and!8467 () Bool)

(assert (= b_and!8463 (and (=> t!6178 result!4027) b_and!8467)))

(declare-fun m!162901 () Bool)

(assert (=> d!42731 m!162901))

(assert (=> d!42731 m!162781))

(assert (=> b!136632 m!162819))

(assert (=> b!136632 m!162627))

(assert (=> b!136632 m!162821))

(assert (=> b!136632 m!162775))

(declare-fun m!162903 () Bool)

(assert (=> b!136632 m!162903))

(assert (=> b!136632 m!162627))

(assert (=> b!136632 m!162819))

(assert (=> b!136632 m!162775))

(assert (=> b!136630 m!162775))

(assert (=> b!136630 m!162775))

(assert (=> b!136630 m!162829))

(declare-fun m!162905 () Bool)

(assert (=> b!136627 m!162905))

(declare-fun m!162907 () Bool)

(assert (=> bm!15011 m!162907))

(assert (=> b!136626 m!162907))

(declare-fun m!162909 () Bool)

(assert (=> b!136634 m!162909))

(declare-fun m!162911 () Bool)

(assert (=> b!136633 m!162911))

(declare-fun m!162913 () Bool)

(assert (=> b!136633 m!162913))

(assert (=> b!136633 m!162819))

(assert (=> b!136633 m!162627))

(assert (=> b!136633 m!162821))

(assert (=> b!136633 m!162627))

(assert (=> b!136633 m!162819))

(assert (=> b!136633 m!162775))

(declare-fun m!162915 () Bool)

(assert (=> b!136633 m!162915))

(assert (=> b!136633 m!162915))

(declare-fun m!162917 () Bool)

(assert (=> b!136633 m!162917))

(assert (=> b!136625 m!162775))

(assert (=> b!136625 m!162775))

(assert (=> b!136625 m!162829))

(assert (=> b!136636 m!162775))

(assert (=> b!136636 m!162775))

(declare-fun m!162919 () Bool)

(assert (=> b!136636 m!162919))

(assert (=> bm!14999 d!42731))

(declare-fun b!136637 () Bool)

(declare-fun e!88994 () Bool)

(assert (=> b!136637 (= e!88994 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136638 () Bool)

(declare-fun c!25585 () Bool)

(assert (=> b!136638 (= c!25585 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!88985 () ListLongMap!1659)

(declare-fun e!88989 () ListLongMap!1659)

(assert (=> b!136638 (= e!88985 e!88989)))

(declare-fun d!42733 () Bool)

(declare-fun e!88987 () Bool)

(assert (=> d!42733 e!88987))

(declare-fun res!65515 () Bool)

(assert (=> d!42733 (=> (not res!65515) (not e!88987))))

(assert (=> d!42733 (= res!65515 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71322 () ListLongMap!1659)

(declare-fun lt!71331 () ListLongMap!1659)

(assert (=> d!42733 (= lt!71322 lt!71331)))

(declare-fun lt!71330 () Unit!4281)

(declare-fun e!88988 () Unit!4281)

(assert (=> d!42733 (= lt!71330 e!88988)))

(declare-fun c!25580 () Bool)

(assert (=> d!42733 (= c!25580 e!88994)))

(declare-fun res!65512 () Bool)

(assert (=> d!42733 (=> (not res!65512) (not e!88994))))

(assert (=> d!42733 (= res!65512 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!88986 () ListLongMap!1659)

(assert (=> d!42733 (= lt!71331 e!88986)))

(declare-fun c!25583 () Bool)

(assert (=> d!42733 (= c!25583 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42733 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42733 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71322)))

(declare-fun b!136639 () Bool)

(declare-fun call!15016 () ListLongMap!1659)

(assert (=> b!136639 (= e!88985 call!15016)))

(declare-fun b!136640 () Bool)

(declare-fun res!65511 () Bool)

(assert (=> b!136640 (=> (not res!65511) (not e!88987))))

(declare-fun e!88990 () Bool)

(assert (=> b!136640 (= res!65511 e!88990)))

(declare-fun c!25582 () Bool)

(assert (=> b!136640 (= c!25582 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15012 () Bool)

(declare-fun call!15017 () ListLongMap!1659)

(declare-fun call!15020 () ListLongMap!1659)

(assert (=> bm!15012 (= call!15017 call!15020)))

(declare-fun bm!15013 () Bool)

(declare-fun call!15018 () Bool)

(assert (=> bm!15013 (= call!15018 (contains!888 lt!71322 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136641 () Bool)

(declare-fun Unit!4287 () Unit!4281)

(assert (=> b!136641 (= e!88988 Unit!4287)))

(declare-fun b!136642 () Bool)

(declare-fun call!15019 () ListLongMap!1659)

(assert (=> b!136642 (= e!88986 (+!170 call!15019 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!136643 () Bool)

(declare-fun e!88983 () Bool)

(assert (=> b!136643 (= e!88983 (= (apply!117 lt!71322 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!136644 () Bool)

(declare-fun res!65509 () Bool)

(assert (=> b!136644 (=> (not res!65509) (not e!88987))))

(declare-fun e!88993 () Bool)

(assert (=> b!136644 (= res!65509 e!88993)))

(declare-fun res!65508 () Bool)

(assert (=> b!136644 (=> res!65508 e!88993)))

(declare-fun e!88991 () Bool)

(assert (=> b!136644 (= res!65508 (not e!88991))))

(declare-fun res!65514 () Bool)

(assert (=> b!136644 (=> (not res!65514) (not e!88991))))

(assert (=> b!136644 (= res!65514 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun bm!15014 () Bool)

(declare-fun c!25584 () Bool)

(declare-fun call!15021 () ListLongMap!1659)

(assert (=> bm!15014 (= call!15019 (+!170 (ite c!25583 call!15020 (ite c!25584 call!15017 call!15021)) (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!136645 () Bool)

(declare-fun e!88982 () Bool)

(assert (=> b!136645 (= e!88993 e!88982)))

(declare-fun res!65510 () Bool)

(assert (=> b!136645 (=> (not res!65510) (not e!88982))))

(assert (=> b!136645 (= res!65510 (contains!888 lt!71322 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136645 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136646 () Bool)

(assert (=> b!136646 (= e!88986 e!88985)))

(assert (=> b!136646 (= c!25584 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136647 () Bool)

(declare-fun lt!71316 () Unit!4281)

(assert (=> b!136647 (= e!88988 lt!71316)))

(declare-fun lt!71327 () ListLongMap!1659)

(assert (=> b!136647 (= lt!71327 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71321 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71321 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71328 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71328 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71325 () Unit!4281)

(assert (=> b!136647 (= lt!71325 (addStillContains!93 lt!71327 lt!71321 (zeroValue!2741 newMap!16) lt!71328))))

(assert (=> b!136647 (contains!888 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) lt!71328)))

(declare-fun lt!71324 () Unit!4281)

(assert (=> b!136647 (= lt!71324 lt!71325)))

(declare-fun lt!71333 () ListLongMap!1659)

(assert (=> b!136647 (= lt!71333 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71320 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71320 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71319 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71319 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71326 () Unit!4281)

(assert (=> b!136647 (= lt!71326 (addApplyDifferent!93 lt!71333 lt!71320 (minValue!2741 newMap!16) lt!71319))))

(assert (=> b!136647 (= (apply!117 (+!170 lt!71333 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) lt!71319) (apply!117 lt!71333 lt!71319))))

(declare-fun lt!71318 () Unit!4281)

(assert (=> b!136647 (= lt!71318 lt!71326)))

(declare-fun lt!71312 () ListLongMap!1659)

(assert (=> b!136647 (= lt!71312 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71315 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71315 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71313 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71313 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71332 () Unit!4281)

(assert (=> b!136647 (= lt!71332 (addApplyDifferent!93 lt!71312 lt!71315 (zeroValue!2741 newMap!16) lt!71313))))

(assert (=> b!136647 (= (apply!117 (+!170 lt!71312 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) lt!71313) (apply!117 lt!71312 lt!71313))))

(declare-fun lt!71314 () Unit!4281)

(assert (=> b!136647 (= lt!71314 lt!71332)))

(declare-fun lt!71317 () ListLongMap!1659)

(assert (=> b!136647 (= lt!71317 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71323 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71323 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71329 () (_ BitVec 64))

(assert (=> b!136647 (= lt!71329 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136647 (= lt!71316 (addApplyDifferent!93 lt!71317 lt!71323 (minValue!2741 newMap!16) lt!71329))))

(assert (=> b!136647 (= (apply!117 (+!170 lt!71317 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) lt!71329) (apply!117 lt!71317 lt!71329))))

(declare-fun bm!15015 () Bool)

(assert (=> bm!15015 (= call!15020 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136648 () Bool)

(declare-fun e!88984 () Bool)

(assert (=> b!136648 (= e!88987 e!88984)))

(declare-fun c!25581 () Bool)

(assert (=> b!136648 (= c!25581 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136649 () Bool)

(declare-fun e!88992 () Bool)

(assert (=> b!136649 (= e!88992 (= (apply!117 lt!71322 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!136650 () Bool)

(assert (=> b!136650 (= e!88984 e!88983)))

(declare-fun res!65513 () Bool)

(assert (=> b!136650 (= res!65513 call!15018)))

(assert (=> b!136650 (=> (not res!65513) (not e!88983))))

(declare-fun b!136651 () Bool)

(assert (=> b!136651 (= e!88982 (= (apply!117 lt!71322 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136651 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (_values!2871 newMap!16))))))

(assert (=> b!136651 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136652 () Bool)

(assert (=> b!136652 (= e!88989 call!15016)))

(declare-fun b!136653 () Bool)

(assert (=> b!136653 (= e!88991 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136654 () Bool)

(assert (=> b!136654 (= e!88989 call!15021)))

(declare-fun b!136655 () Bool)

(assert (=> b!136655 (= e!88984 (not call!15018))))

(declare-fun b!136656 () Bool)

(declare-fun call!15015 () Bool)

(assert (=> b!136656 (= e!88990 (not call!15015))))

(declare-fun b!136657 () Bool)

(assert (=> b!136657 (= e!88990 e!88992)))

(declare-fun res!65516 () Bool)

(assert (=> b!136657 (= res!65516 call!15015)))

(assert (=> b!136657 (=> (not res!65516) (not e!88992))))

(declare-fun bm!15016 () Bool)

(assert (=> bm!15016 (= call!15015 (contains!888 lt!71322 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15017 () Bool)

(assert (=> bm!15017 (= call!15021 call!15017)))

(declare-fun bm!15018 () Bool)

(assert (=> bm!15018 (= call!15016 call!15019)))

(assert (= (and d!42733 c!25583) b!136642))

(assert (= (and d!42733 (not c!25583)) b!136646))

(assert (= (and b!136646 c!25584) b!136639))

(assert (= (and b!136646 (not c!25584)) b!136638))

(assert (= (and b!136638 c!25585) b!136652))

(assert (= (and b!136638 (not c!25585)) b!136654))

(assert (= (or b!136652 b!136654) bm!15017))

(assert (= (or b!136639 bm!15017) bm!15012))

(assert (= (or b!136639 b!136652) bm!15018))

(assert (= (or b!136642 bm!15012) bm!15015))

(assert (= (or b!136642 bm!15018) bm!15014))

(assert (= (and d!42733 res!65512) b!136637))

(assert (= (and d!42733 c!25580) b!136647))

(assert (= (and d!42733 (not c!25580)) b!136641))

(assert (= (and d!42733 res!65515) b!136644))

(assert (= (and b!136644 res!65514) b!136653))

(assert (= (and b!136644 (not res!65508)) b!136645))

(assert (= (and b!136645 res!65510) b!136651))

(assert (= (and b!136644 res!65509) b!136640))

(assert (= (and b!136640 c!25582) b!136657))

(assert (= (and b!136640 (not c!25582)) b!136656))

(assert (= (and b!136657 res!65516) b!136649))

(assert (= (or b!136657 b!136656) bm!15016))

(assert (= (and b!136640 res!65511) b!136648))

(assert (= (and b!136648 c!25581) b!136650))

(assert (= (and b!136648 (not c!25581)) b!136655))

(assert (= (and b!136650 res!65513) b!136643))

(assert (= (or b!136650 b!136655) bm!15013))

(declare-fun b_lambda!6113 () Bool)

(assert (=> (not b_lambda!6113) (not b!136651)))

(declare-fun t!6191 () Bool)

(declare-fun tb!2453 () Bool)

(assert (=> (and b!136212 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16)) t!6191) tb!2453))

(declare-fun result!4043 () Bool)

(assert (=> tb!2453 (= result!4043 tp_is_empty!2887)))

(assert (=> b!136651 t!6191))

(declare-fun b_and!8469 () Bool)

(assert (= b_and!8465 (and (=> t!6191 result!4043) b_and!8469)))

(declare-fun t!6193 () Bool)

(declare-fun tb!2455 () Bool)

(assert (=> (and b!136215 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 newMap!16)) t!6193) tb!2455))

(declare-fun result!4045 () Bool)

(assert (= result!4045 result!4043))

(assert (=> b!136651 t!6193))

(declare-fun b_and!8471 () Bool)

(assert (= b_and!8467 (and (=> t!6193 result!4045) b_and!8471)))

(declare-fun m!162921 () Bool)

(assert (=> b!136643 m!162921))

(declare-fun m!162923 () Bool)

(assert (=> b!136647 m!162923))

(declare-fun m!162925 () Bool)

(assert (=> b!136647 m!162925))

(declare-fun m!162927 () Bool)

(assert (=> b!136647 m!162927))

(declare-fun m!162929 () Bool)

(assert (=> b!136647 m!162929))

(declare-fun m!162931 () Bool)

(assert (=> b!136647 m!162931))

(declare-fun m!162933 () Bool)

(assert (=> b!136647 m!162933))

(declare-fun m!162935 () Bool)

(assert (=> b!136647 m!162935))

(assert (=> b!136647 m!162935))

(declare-fun m!162937 () Bool)

(assert (=> b!136647 m!162937))

(declare-fun m!162939 () Bool)

(assert (=> b!136647 m!162939))

(declare-fun m!162941 () Bool)

(assert (=> b!136647 m!162941))

(declare-fun m!162943 () Bool)

(assert (=> b!136647 m!162943))

(declare-fun m!162945 () Bool)

(assert (=> b!136647 m!162945))

(declare-fun m!162947 () Bool)

(assert (=> b!136647 m!162947))

(assert (=> b!136647 m!162887))

(assert (=> b!136647 m!162925))

(assert (=> b!136647 m!162941))

(assert (=> b!136647 m!162939))

(declare-fun m!162949 () Bool)

(assert (=> b!136647 m!162949))

(declare-fun m!162951 () Bool)

(assert (=> b!136647 m!162951))

(declare-fun m!162953 () Bool)

(assert (=> b!136647 m!162953))

(assert (=> b!136645 m!162887))

(assert (=> b!136645 m!162887))

(declare-fun m!162955 () Bool)

(assert (=> b!136645 m!162955))

(assert (=> d!42733 m!162853))

(declare-fun m!162957 () Bool)

(assert (=> b!136651 m!162957))

(assert (=> b!136651 m!162957))

(declare-fun m!162959 () Bool)

(assert (=> b!136651 m!162959))

(declare-fun m!162961 () Bool)

(assert (=> b!136651 m!162961))

(assert (=> b!136651 m!162887))

(assert (=> b!136651 m!162887))

(declare-fun m!162963 () Bool)

(assert (=> b!136651 m!162963))

(assert (=> b!136651 m!162959))

(declare-fun m!162965 () Bool)

(assert (=> b!136642 m!162965))

(declare-fun m!162967 () Bool)

(assert (=> bm!15016 m!162967))

(assert (=> bm!15015 m!162923))

(assert (=> b!136653 m!162887))

(assert (=> b!136653 m!162887))

(assert (=> b!136653 m!162891))

(assert (=> b!136637 m!162887))

(assert (=> b!136637 m!162887))

(assert (=> b!136637 m!162891))

(declare-fun m!162969 () Bool)

(assert (=> bm!15013 m!162969))

(declare-fun m!162971 () Bool)

(assert (=> bm!15014 m!162971))

(declare-fun m!162973 () Bool)

(assert (=> b!136649 m!162973))

(assert (=> d!42689 d!42733))

(declare-fun d!42735 () Bool)

(declare-fun e!88995 () Bool)

(assert (=> d!42735 e!88995))

(declare-fun res!65517 () Bool)

(assert (=> d!42735 (=> res!65517 e!88995)))

(declare-fun lt!71335 () Bool)

(assert (=> d!42735 (= res!65517 (not lt!71335))))

(declare-fun lt!71336 () Bool)

(assert (=> d!42735 (= lt!71335 lt!71336)))

(declare-fun lt!71337 () Unit!4281)

(declare-fun e!88996 () Unit!4281)

(assert (=> d!42735 (= lt!71337 e!88996)))

(declare-fun c!25586 () Bool)

(assert (=> d!42735 (= c!25586 lt!71336)))

(assert (=> d!42735 (= lt!71336 (containsKey!177 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (=> d!42735 (= (contains!888 call!14967 (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))) lt!71335)))

(declare-fun b!136658 () Bool)

(declare-fun lt!71334 () Unit!4281)

(assert (=> b!136658 (= e!88996 lt!71334)))

(assert (=> b!136658 (= lt!71334 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (=> b!136658 (isDefined!126 (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(declare-fun b!136659 () Bool)

(declare-fun Unit!4288 () Unit!4281)

(assert (=> b!136659 (= e!88996 Unit!4288)))

(declare-fun b!136660 () Bool)

(assert (=> b!136660 (= e!88995 (isDefined!126 (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))))

(assert (= (and d!42735 c!25586) b!136658))

(assert (= (and d!42735 (not c!25586)) b!136659))

(assert (= (and d!42735 (not res!65517)) b!136660))

(assert (=> d!42735 m!162761))

(declare-fun m!162975 () Bool)

(assert (=> d!42735 m!162975))

(assert (=> b!136658 m!162761))

(declare-fun m!162977 () Bool)

(assert (=> b!136658 m!162977))

(assert (=> b!136658 m!162761))

(declare-fun m!162979 () Bool)

(assert (=> b!136658 m!162979))

(assert (=> b!136658 m!162979))

(declare-fun m!162981 () Bool)

(assert (=> b!136658 m!162981))

(assert (=> b!136660 m!162761))

(assert (=> b!136660 m!162979))

(assert (=> b!136660 m!162979))

(assert (=> b!136660 m!162981))

(assert (=> b!136422 d!42735))

(declare-fun d!42737 () Bool)

(declare-fun e!88999 () Bool)

(assert (=> d!42737 e!88999))

(declare-fun res!65520 () Bool)

(assert (=> d!42737 (=> (not res!65520) (not e!88999))))

(assert (=> d!42737 (= res!65520 (and (bvsge (index!3242 lt!71204) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71204) (size!2534 (_keys!4641 newMap!16)))))))

(declare-fun lt!71340 () Unit!4281)

(declare-fun choose!840 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) Int) Unit!4281)

(assert (=> d!42737 (= lt!71340 (choose!840 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42737 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42737 (= (lemmaValidKeyInArrayIsInListMap!122 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (defaultEntry!2888 newMap!16)) lt!71340)))

(declare-fun b!136663 () Bool)

(assert (=> b!136663 (= e!88999 (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (= (and d!42737 res!65520) b!136663))

(declare-fun m!162983 () Bool)

(assert (=> d!42737 m!162983))

(assert (=> d!42737 m!162853))

(declare-fun m!162985 () Bool)

(assert (=> b!136663 m!162985))

(assert (=> b!136663 m!162761))

(assert (=> b!136663 m!162985))

(assert (=> b!136663 m!162761))

(declare-fun m!162987 () Bool)

(assert (=> b!136663 m!162987))

(assert (=> b!136422 d!42737))

(declare-fun d!42739 () Bool)

(declare-fun e!89002 () Bool)

(assert (=> d!42739 e!89002))

(declare-fun res!65523 () Bool)

(assert (=> d!42739 (=> (not res!65523) (not e!89002))))

(assert (=> d!42739 (= res!65523 (and (bvsge (index!3242 lt!71204) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71204) (size!2535 (_values!2871 newMap!16)))))))

(declare-fun lt!71343 () Unit!4281)

(declare-fun choose!841 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) (_ BitVec 64) V!3497 Int) Unit!4281)

(assert (=> d!42739 (= lt!71343 (choose!841 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42739 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42739 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)) lt!71343)))

(declare-fun b!136666 () Bool)

(assert (=> b!136666 (= e!89002 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))))))

(assert (= (and d!42739 res!65523) b!136666))

(assert (=> d!42739 m!162605))

(assert (=> d!42739 m!162629))

(declare-fun m!162989 () Bool)

(assert (=> d!42739 m!162989))

(assert (=> d!42739 m!162853))

(assert (=> b!136666 m!162737))

(assert (=> b!136666 m!162737))

(declare-fun m!162991 () Bool)

(assert (=> b!136666 m!162991))

(assert (=> b!136666 m!162739))

(declare-fun m!162993 () Bool)

(assert (=> b!136666 m!162993))

(assert (=> b!136422 d!42739))

(declare-fun b!136667 () Bool)

(declare-fun e!89015 () Bool)

(assert (=> b!136667 (= e!89015 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136668 () Bool)

(declare-fun c!25592 () Bool)

(assert (=> b!136668 (= c!25592 (and (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89006 () ListLongMap!1659)

(declare-fun e!89010 () ListLongMap!1659)

(assert (=> b!136668 (= e!89006 e!89010)))

(declare-fun d!42741 () Bool)

(declare-fun e!89008 () Bool)

(assert (=> d!42741 e!89008))

(declare-fun res!65531 () Bool)

(assert (=> d!42741 (=> (not res!65531) (not e!89008))))

(assert (=> d!42741 (= res!65531 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71354 () ListLongMap!1659)

(declare-fun lt!71363 () ListLongMap!1659)

(assert (=> d!42741 (= lt!71354 lt!71363)))

(declare-fun lt!71362 () Unit!4281)

(declare-fun e!89009 () Unit!4281)

(assert (=> d!42741 (= lt!71362 e!89009)))

(declare-fun c!25587 () Bool)

(assert (=> d!42741 (= c!25587 e!89015)))

(declare-fun res!65528 () Bool)

(assert (=> d!42741 (=> (not res!65528) (not e!89015))))

(assert (=> d!42741 (= res!65528 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89007 () ListLongMap!1659)

(assert (=> d!42741 (= lt!71363 e!89007)))

(declare-fun c!25590 () Bool)

(assert (=> d!42741 (= c!25590 (and (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42741 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42741 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71354)))

(declare-fun b!136669 () Bool)

(declare-fun call!15023 () ListLongMap!1659)

(assert (=> b!136669 (= e!89006 call!15023)))

(declare-fun b!136670 () Bool)

(declare-fun res!65527 () Bool)

(assert (=> b!136670 (=> (not res!65527) (not e!89008))))

(declare-fun e!89011 () Bool)

(assert (=> b!136670 (= res!65527 e!89011)))

(declare-fun c!25589 () Bool)

(assert (=> b!136670 (= c!25589 (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15019 () Bool)

(declare-fun call!15024 () ListLongMap!1659)

(declare-fun call!15027 () ListLongMap!1659)

(assert (=> bm!15019 (= call!15024 call!15027)))

(declare-fun bm!15020 () Bool)

(declare-fun call!15025 () Bool)

(assert (=> bm!15020 (= call!15025 (contains!888 lt!71354 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136671 () Bool)

(declare-fun Unit!4289 () Unit!4281)

(assert (=> b!136671 (= e!89009 Unit!4289)))

(declare-fun b!136672 () Bool)

(declare-fun call!15026 () ListLongMap!1659)

(assert (=> b!136672 (= e!89007 (+!170 call!15026 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))

(declare-fun e!89004 () Bool)

(declare-fun b!136673 () Bool)

(assert (=> b!136673 (= e!89004 (= (apply!117 lt!71354 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))

(declare-fun b!136674 () Bool)

(declare-fun res!65525 () Bool)

(assert (=> b!136674 (=> (not res!65525) (not e!89008))))

(declare-fun e!89014 () Bool)

(assert (=> b!136674 (= res!65525 e!89014)))

(declare-fun res!65524 () Bool)

(assert (=> b!136674 (=> res!65524 e!89014)))

(declare-fun e!89012 () Bool)

(assert (=> b!136674 (= res!65524 (not e!89012))))

(declare-fun res!65530 () Bool)

(assert (=> b!136674 (=> (not res!65530) (not e!89012))))

(assert (=> b!136674 (= res!65530 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun bm!15021 () Bool)

(declare-fun call!15028 () ListLongMap!1659)

(declare-fun c!25591 () Bool)

(assert (=> bm!15021 (= call!15026 (+!170 (ite c!25590 call!15027 (ite c!25591 call!15024 call!15028)) (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(declare-fun b!136675 () Bool)

(declare-fun e!89003 () Bool)

(assert (=> b!136675 (= e!89014 e!89003)))

(declare-fun res!65526 () Bool)

(assert (=> b!136675 (=> (not res!65526) (not e!89003))))

(assert (=> b!136675 (= res!65526 (contains!888 lt!71354 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136675 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136676 () Bool)

(assert (=> b!136676 (= e!89007 e!89006)))

(assert (=> b!136676 (= c!25591 (and (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136677 () Bool)

(declare-fun lt!71348 () Unit!4281)

(assert (=> b!136677 (= e!89009 lt!71348)))

(declare-fun lt!71359 () ListLongMap!1659)

(assert (=> b!136677 (= lt!71359 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71353 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71353 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71360 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71360 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71357 () Unit!4281)

(assert (=> b!136677 (= lt!71357 (addStillContains!93 lt!71359 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71360))))

(assert (=> b!136677 (contains!888 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71360)))

(declare-fun lt!71356 () Unit!4281)

(assert (=> b!136677 (= lt!71356 lt!71357)))

(declare-fun lt!71365 () ListLongMap!1659)

(assert (=> b!136677 (= lt!71365 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71352 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71352 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71351 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71351 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71358 () Unit!4281)

(assert (=> b!136677 (= lt!71358 (addApplyDifferent!93 lt!71365 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71351))))

(assert (=> b!136677 (= (apply!117 (+!170 lt!71365 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71351) (apply!117 lt!71365 lt!71351))))

(declare-fun lt!71350 () Unit!4281)

(assert (=> b!136677 (= lt!71350 lt!71358)))

(declare-fun lt!71344 () ListLongMap!1659)

(assert (=> b!136677 (= lt!71344 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71347 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71347 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71345 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71345 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71364 () Unit!4281)

(assert (=> b!136677 (= lt!71364 (addApplyDifferent!93 lt!71344 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71345))))

(assert (=> b!136677 (= (apply!117 (+!170 lt!71344 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71345) (apply!117 lt!71344 lt!71345))))

(declare-fun lt!71346 () Unit!4281)

(assert (=> b!136677 (= lt!71346 lt!71364)))

(declare-fun lt!71349 () ListLongMap!1659)

(assert (=> b!136677 (= lt!71349 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71355 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71355 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71361 () (_ BitVec 64))

(assert (=> b!136677 (= lt!71361 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136677 (= lt!71348 (addApplyDifferent!93 lt!71349 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71361))))

(assert (=> b!136677 (= (apply!117 (+!170 lt!71349 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71361) (apply!117 lt!71349 lt!71361))))

(declare-fun bm!15022 () Bool)

(assert (=> bm!15022 (= call!15027 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136678 () Bool)

(declare-fun e!89005 () Bool)

(assert (=> b!136678 (= e!89008 e!89005)))

(declare-fun c!25588 () Bool)

(assert (=> b!136678 (= c!25588 (not (= (bvand (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136679 () Bool)

(declare-fun e!89013 () Bool)

(assert (=> b!136679 (= e!89013 (= (apply!117 lt!71354 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))

(declare-fun b!136680 () Bool)

(assert (=> b!136680 (= e!89005 e!89004)))

(declare-fun res!65529 () Bool)

(assert (=> b!136680 (= res!65529 call!15025)))

(assert (=> b!136680 (=> (not res!65529) (not e!89004))))

(declare-fun b!136681 () Bool)

(assert (=> b!136681 (= e!89003 (= (apply!117 lt!71354 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136681 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196))))))

(assert (=> b!136681 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136682 () Bool)

(assert (=> b!136682 (= e!89010 call!15023)))

(declare-fun b!136683 () Bool)

(assert (=> b!136683 (= e!89012 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136684 () Bool)

(assert (=> b!136684 (= e!89010 call!15028)))

(declare-fun b!136685 () Bool)

(assert (=> b!136685 (= e!89005 (not call!15025))))

(declare-fun b!136686 () Bool)

(declare-fun call!15022 () Bool)

(assert (=> b!136686 (= e!89011 (not call!15022))))

(declare-fun b!136687 () Bool)

(assert (=> b!136687 (= e!89011 e!89013)))

(declare-fun res!65532 () Bool)

(assert (=> b!136687 (= res!65532 call!15022)))

(assert (=> b!136687 (=> (not res!65532) (not e!89013))))

(declare-fun bm!15023 () Bool)

(assert (=> bm!15023 (= call!15022 (contains!888 lt!71354 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15024 () Bool)

(assert (=> bm!15024 (= call!15028 call!15024)))

(declare-fun bm!15025 () Bool)

(assert (=> bm!15025 (= call!15023 call!15026)))

(assert (= (and d!42741 c!25590) b!136672))

(assert (= (and d!42741 (not c!25590)) b!136676))

(assert (= (and b!136676 c!25591) b!136669))

(assert (= (and b!136676 (not c!25591)) b!136668))

(assert (= (and b!136668 c!25592) b!136682))

(assert (= (and b!136668 (not c!25592)) b!136684))

(assert (= (or b!136682 b!136684) bm!15024))

(assert (= (or b!136669 bm!15024) bm!15019))

(assert (= (or b!136669 b!136682) bm!15025))

(assert (= (or b!136672 bm!15019) bm!15022))

(assert (= (or b!136672 bm!15025) bm!15021))

(assert (= (and d!42741 res!65528) b!136667))

(assert (= (and d!42741 c!25587) b!136677))

(assert (= (and d!42741 (not c!25587)) b!136671))

(assert (= (and d!42741 res!65531) b!136674))

(assert (= (and b!136674 res!65530) b!136683))

(assert (= (and b!136674 (not res!65524)) b!136675))

(assert (= (and b!136675 res!65526) b!136681))

(assert (= (and b!136674 res!65525) b!136670))

(assert (= (and b!136670 c!25589) b!136687))

(assert (= (and b!136670 (not c!25589)) b!136686))

(assert (= (and b!136687 res!65532) b!136679))

(assert (= (or b!136687 b!136686) bm!15023))

(assert (= (and b!136670 res!65527) b!136678))

(assert (= (and b!136678 c!25588) b!136680))

(assert (= (and b!136678 (not c!25588)) b!136685))

(assert (= (and b!136680 res!65529) b!136673))

(assert (= (or b!136680 b!136685) bm!15020))

(declare-fun b_lambda!6115 () Bool)

(assert (=> (not b_lambda!6115) (not b!136681)))

(assert (=> b!136681 t!6191))

(declare-fun b_and!8473 () Bool)

(assert (= b_and!8469 (and (=> t!6191 result!4043) b_and!8473)))

(assert (=> b!136681 t!6193))

(declare-fun b_and!8475 () Bool)

(assert (= b_and!8471 (and (=> t!6193 result!4045) b_and!8475)))

(declare-fun m!162995 () Bool)

(assert (=> b!136673 m!162995))

(declare-fun m!162997 () Bool)

(assert (=> b!136677 m!162997))

(declare-fun m!162999 () Bool)

(assert (=> b!136677 m!162999))

(declare-fun m!163001 () Bool)

(assert (=> b!136677 m!163001))

(declare-fun m!163003 () Bool)

(assert (=> b!136677 m!163003))

(declare-fun m!163005 () Bool)

(assert (=> b!136677 m!163005))

(declare-fun m!163007 () Bool)

(assert (=> b!136677 m!163007))

(declare-fun m!163009 () Bool)

(assert (=> b!136677 m!163009))

(assert (=> b!136677 m!163009))

(declare-fun m!163011 () Bool)

(assert (=> b!136677 m!163011))

(declare-fun m!163013 () Bool)

(assert (=> b!136677 m!163013))

(declare-fun m!163015 () Bool)

(assert (=> b!136677 m!163015))

(declare-fun m!163017 () Bool)

(assert (=> b!136677 m!163017))

(declare-fun m!163019 () Bool)

(assert (=> b!136677 m!163019))

(declare-fun m!163021 () Bool)

(assert (=> b!136677 m!163021))

(assert (=> b!136677 m!162887))

(assert (=> b!136677 m!162999))

(assert (=> b!136677 m!163015))

(assert (=> b!136677 m!163013))

(declare-fun m!163023 () Bool)

(assert (=> b!136677 m!163023))

(declare-fun m!163025 () Bool)

(assert (=> b!136677 m!163025))

(declare-fun m!163027 () Bool)

(assert (=> b!136677 m!163027))

(assert (=> b!136675 m!162887))

(assert (=> b!136675 m!162887))

(declare-fun m!163029 () Bool)

(assert (=> b!136675 m!163029))

(assert (=> d!42741 m!162853))

(declare-fun m!163031 () Bool)

(assert (=> b!136681 m!163031))

(assert (=> b!136681 m!163031))

(assert (=> b!136681 m!162959))

(declare-fun m!163033 () Bool)

(assert (=> b!136681 m!163033))

(assert (=> b!136681 m!162887))

(assert (=> b!136681 m!162887))

(declare-fun m!163035 () Bool)

(assert (=> b!136681 m!163035))

(assert (=> b!136681 m!162959))

(declare-fun m!163037 () Bool)

(assert (=> b!136672 m!163037))

(declare-fun m!163039 () Bool)

(assert (=> bm!15023 m!163039))

(assert (=> bm!15022 m!162997))

(assert (=> b!136683 m!162887))

(assert (=> b!136683 m!162887))

(assert (=> b!136683 m!162891))

(assert (=> b!136667 m!162887))

(assert (=> b!136667 m!162887))

(assert (=> b!136667 m!162891))

(declare-fun m!163041 () Bool)

(assert (=> bm!15020 m!163041))

(declare-fun m!163043 () Bool)

(assert (=> bm!15021 m!163043))

(declare-fun m!163045 () Bool)

(assert (=> b!136679 m!163045))

(assert (=> bm!14970 d!42741))

(assert (=> b!136446 d!42733))

(declare-fun d!42743 () Bool)

(declare-fun e!89018 () Bool)

(assert (=> d!42743 e!89018))

(declare-fun res!65538 () Bool)

(assert (=> d!42743 (=> (not res!65538) (not e!89018))))

(declare-fun lt!71377 () ListLongMap!1659)

(assert (=> d!42743 (= res!65538 (contains!888 lt!71377 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun lt!71374 () List!1699)

(assert (=> d!42743 (= lt!71377 (ListLongMap!1660 lt!71374))))

(declare-fun lt!71375 () Unit!4281)

(declare-fun lt!71376 () Unit!4281)

(assert (=> d!42743 (= lt!71375 lt!71376)))

(assert (=> d!42743 (= (getValueByKey!174 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (Some!179 (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!89 (List!1699 (_ BitVec 64) V!3497) Unit!4281)

(assert (=> d!42743 (= lt!71376 (lemmaContainsTupThenGetReturnValue!89 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun insertStrictlySorted!92 (List!1699 (_ BitVec 64) V!3497) List!1699)

(assert (=> d!42743 (= lt!71374 (insertStrictlySorted!92 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42743 (= (+!170 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71377)))

(declare-fun b!136692 () Bool)

(declare-fun res!65537 () Bool)

(assert (=> b!136692 (=> (not res!65537) (not e!89018))))

(assert (=> b!136692 (= res!65537 (= (getValueByKey!174 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (Some!179 (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun b!136693 () Bool)

(declare-fun contains!891 (List!1699 tuple2!2574) Bool)

(assert (=> b!136693 (= e!89018 (contains!891 (toList!845 lt!71377) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (= (and d!42743 res!65538) b!136692))

(assert (= (and b!136692 res!65537) b!136693))

(declare-fun m!163047 () Bool)

(assert (=> d!42743 m!163047))

(declare-fun m!163049 () Bool)

(assert (=> d!42743 m!163049))

(declare-fun m!163051 () Bool)

(assert (=> d!42743 m!163051))

(declare-fun m!163053 () Bool)

(assert (=> d!42743 m!163053))

(declare-fun m!163055 () Bool)

(assert (=> b!136692 m!163055))

(declare-fun m!163057 () Bool)

(assert (=> b!136693 m!163057))

(assert (=> bm!14998 d!42743))

(declare-fun d!42745 () Bool)

(assert (=> d!42745 (= (get!1501 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136460 d!42745))

(declare-fun d!42747 () Bool)

(assert (=> d!42747 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71380 () Unit!4281)

(declare-fun choose!842 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 V!3497 Int) Unit!4281)

(assert (=> d!42747 (= lt!71380 (choose!842 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71185 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42747 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42747 (= (lemmaChangeZeroKeyThenAddPairToListMap!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71185 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) (defaultEntry!2888 newMap!16)) lt!71380)))

(declare-fun bs!5742 () Bool)

(assert (= bs!5742 d!42747))

(assert (=> bs!5742 m!162853))

(assert (=> bs!5742 m!162629))

(declare-fun m!163059 () Bool)

(assert (=> bs!5742 m!163059))

(assert (=> bs!5742 m!162737))

(declare-fun m!163061 () Bool)

(assert (=> bs!5742 m!163061))

(assert (=> bs!5742 m!162629))

(declare-fun m!163063 () Bool)

(assert (=> bs!5742 m!163063))

(assert (=> bs!5742 m!162737))

(assert (=> b!136445 d!42747))

(declare-fun d!42749 () Bool)

(assert (=> d!42749 (= (apply!117 lt!71267 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5743 () Bool)

(assert (= bs!5743 d!42749))

(declare-fun m!163065 () Bool)

(assert (=> bs!5743 m!163065))

(assert (=> bs!5743 m!163065))

(declare-fun m!163067 () Bool)

(assert (=> bs!5743 m!163067))

(assert (=> b!136521 d!42749))

(declare-fun d!42751 () Bool)

(declare-fun res!65543 () Bool)

(declare-fun e!89023 () Bool)

(assert (=> d!42751 (=> res!65543 e!89023)))

(assert (=> d!42751 (= res!65543 (and ((_ is Cons!1695) (toList!845 lt!71090)) (= (_1!1298 (h!2301 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42751 (= (containsKey!177 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89023)))

(declare-fun b!136698 () Bool)

(declare-fun e!89024 () Bool)

(assert (=> b!136698 (= e!89023 e!89024)))

(declare-fun res!65544 () Bool)

(assert (=> b!136698 (=> (not res!65544) (not e!89024))))

(assert (=> b!136698 (= res!65544 (and (or (not ((_ is Cons!1695) (toList!845 lt!71090))) (bvsle (_1!1298 (h!2301 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) ((_ is Cons!1695) (toList!845 lt!71090)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(declare-fun b!136699 () Bool)

(assert (=> b!136699 (= e!89024 (containsKey!177 (t!6179 (toList!845 lt!71090)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!42751 (not res!65543)) b!136698))

(assert (= (and b!136698 res!65544) b!136699))

(assert (=> b!136699 m!162605))

(declare-fun m!163069 () Bool)

(assert (=> b!136699 m!163069))

(assert (=> d!42679 d!42751))

(declare-fun d!42753 () Bool)

(declare-fun e!89025 () Bool)

(assert (=> d!42753 e!89025))

(declare-fun res!65545 () Bool)

(assert (=> d!42753 (=> res!65545 e!89025)))

(declare-fun lt!71382 () Bool)

(assert (=> d!42753 (= res!65545 (not lt!71382))))

(declare-fun lt!71383 () Bool)

(assert (=> d!42753 (= lt!71382 lt!71383)))

(declare-fun lt!71384 () Unit!4281)

(declare-fun e!89026 () Unit!4281)

(assert (=> d!42753 (= lt!71384 e!89026)))

(declare-fun c!25593 () Bool)

(assert (=> d!42753 (= c!25593 lt!71383)))

(assert (=> d!42753 (= lt!71383 (containsKey!177 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42753 (= (contains!888 lt!71267 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71382)))

(declare-fun b!136700 () Bool)

(declare-fun lt!71381 () Unit!4281)

(assert (=> b!136700 (= e!89026 lt!71381)))

(assert (=> b!136700 (= lt!71381 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136700 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136701 () Bool)

(declare-fun Unit!4290 () Unit!4281)

(assert (=> b!136701 (= e!89026 Unit!4290)))

(declare-fun b!136702 () Bool)

(assert (=> b!136702 (= e!89025 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42753 c!25593) b!136700))

(assert (= (and d!42753 (not c!25593)) b!136701))

(assert (= (and d!42753 (not res!65545)) b!136702))

(declare-fun m!163071 () Bool)

(assert (=> d!42753 m!163071))

(declare-fun m!163073 () Bool)

(assert (=> b!136700 m!163073))

(assert (=> b!136700 m!162895))

(assert (=> b!136700 m!162895))

(declare-fun m!163075 () Bool)

(assert (=> b!136700 m!163075))

(assert (=> b!136702 m!162895))

(assert (=> b!136702 m!162895))

(assert (=> b!136702 m!163075))

(assert (=> bm!15000 d!42753))

(declare-fun d!42755 () Bool)

(assert (=> d!42755 (= (inRange!0 (ite c!25527 (ite c!25521 (index!3242 lt!71203) (ite c!25522 (index!3241 lt!71190) (index!3244 lt!71190))) (ite c!25518 (index!3242 lt!71191) (ite c!25523 (index!3241 lt!71206) (index!3244 lt!71206)))) (mask!7202 newMap!16)) (and (bvsge (ite c!25527 (ite c!25521 (index!3242 lt!71203) (ite c!25522 (index!3241 lt!71190) (index!3244 lt!71190))) (ite c!25518 (index!3242 lt!71191) (ite c!25523 (index!3241 lt!71206) (index!3244 lt!71206)))) #b00000000000000000000000000000000) (bvslt (ite c!25527 (ite c!25521 (index!3242 lt!71203) (ite c!25522 (index!3241 lt!71190) (index!3244 lt!71190))) (ite c!25518 (index!3242 lt!71191) (ite c!25523 (index!3241 lt!71206) (index!3244 lt!71206)))) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!14958 d!42755))

(assert (=> b!136515 d!42717))

(declare-fun d!42757 () Bool)

(declare-fun e!89027 () Bool)

(assert (=> d!42757 e!89027))

(declare-fun res!65547 () Bool)

(assert (=> d!42757 (=> (not res!65547) (not e!89027))))

(declare-fun lt!71388 () ListLongMap!1659)

(assert (=> d!42757 (= res!65547 (contains!888 lt!71388 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!71385 () List!1699)

(assert (=> d!42757 (= lt!71388 (ListLongMap!1660 lt!71385))))

(declare-fun lt!71386 () Unit!4281)

(declare-fun lt!71387 () Unit!4281)

(assert (=> d!42757 (= lt!71386 lt!71387)))

(assert (=> d!42757 (= (getValueByKey!174 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!179 (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42757 (= lt!71387 (lemmaContainsTupThenGetReturnValue!89 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42757 (= lt!71385 (insertStrictlySorted!92 (toList!845 e!88862) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42757 (= (+!170 e!88862 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71388)))

(declare-fun b!136703 () Bool)

(declare-fun res!65546 () Bool)

(assert (=> b!136703 (=> (not res!65546) (not e!89027))))

(assert (=> b!136703 (= res!65546 (= (getValueByKey!174 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!179 (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!136704 () Bool)

(assert (=> b!136704 (= e!89027 (contains!891 (toList!845 lt!71388) (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!42757 res!65547) b!136703))

(assert (= (and b!136703 res!65546) b!136704))

(declare-fun m!163077 () Bool)

(assert (=> d!42757 m!163077))

(declare-fun m!163079 () Bool)

(assert (=> d!42757 m!163079))

(declare-fun m!163081 () Bool)

(assert (=> d!42757 m!163081))

(declare-fun m!163083 () Bool)

(assert (=> d!42757 m!163083))

(declare-fun m!163085 () Bool)

(assert (=> b!136703 m!163085))

(declare-fun m!163087 () Bool)

(assert (=> b!136704 m!163087))

(assert (=> bm!14981 d!42757))

(declare-fun d!42759 () Bool)

(declare-fun e!89028 () Bool)

(assert (=> d!42759 e!89028))

(declare-fun res!65548 () Bool)

(assert (=> d!42759 (=> res!65548 e!89028)))

(declare-fun lt!71390 () Bool)

(assert (=> d!42759 (= res!65548 (not lt!71390))))

(declare-fun lt!71391 () Bool)

(assert (=> d!42759 (= lt!71390 lt!71391)))

(declare-fun lt!71392 () Unit!4281)

(declare-fun e!89029 () Unit!4281)

(assert (=> d!42759 (= lt!71392 e!89029)))

(declare-fun c!25594 () Bool)

(assert (=> d!42759 (= c!25594 lt!71391)))

(assert (=> d!42759 (= lt!71391 (containsKey!177 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42759 (= (contains!888 call!14971 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71390)))

(declare-fun b!136705 () Bool)

(declare-fun lt!71389 () Unit!4281)

(assert (=> b!136705 (= e!89029 lt!71389)))

(assert (=> b!136705 (= lt!71389 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!136705 (isDefined!126 (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!136706 () Bool)

(declare-fun Unit!4291 () Unit!4281)

(assert (=> b!136706 (= e!89029 Unit!4291)))

(declare-fun b!136707 () Bool)

(assert (=> b!136707 (= e!89028 (isDefined!126 (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (= (and d!42759 c!25594) b!136705))

(assert (= (and d!42759 (not c!25594)) b!136706))

(assert (= (and d!42759 (not res!65548)) b!136707))

(assert (=> d!42759 m!162605))

(declare-fun m!163089 () Bool)

(assert (=> d!42759 m!163089))

(assert (=> b!136705 m!162605))

(declare-fun m!163091 () Bool)

(assert (=> b!136705 m!163091))

(assert (=> b!136705 m!162605))

(declare-fun m!163093 () Bool)

(assert (=> b!136705 m!163093))

(assert (=> b!136705 m!163093))

(declare-fun m!163095 () Bool)

(assert (=> b!136705 m!163095))

(assert (=> b!136707 m!162605))

(assert (=> b!136707 m!163093))

(assert (=> b!136707 m!163093))

(assert (=> b!136707 m!163095))

(assert (=> b!136439 d!42759))

(declare-fun b!136742 () Bool)

(declare-fun lt!71478 () SeekEntryResult!270)

(declare-fun e!89052 () Bool)

(assert (=> b!136742 (= e!89052 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71478)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun c!25603 () Bool)

(declare-fun bm!15034 () Bool)

(declare-fun call!15040 () Bool)

(declare-fun lt!71465 () SeekEntryResult!270)

(declare-fun c!25604 () Bool)

(assert (=> bm!15034 (= call!15040 (inRange!0 (ite c!25604 (index!3242 lt!71478) (ite c!25603 (index!3241 lt!71465) (index!3244 lt!71465))) (mask!7202 newMap!16)))))

(declare-fun b!136743 () Bool)

(declare-fun e!89053 () Unit!4281)

(declare-fun Unit!4292 () Unit!4281)

(assert (=> b!136743 (= e!89053 Unit!4292)))

(declare-fun lt!71473 () Unit!4281)

(assert (=> b!136743 (= lt!71473 (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(declare-fun call!15037 () SeekEntryResult!270)

(assert (=> b!136743 (= lt!71478 call!15037)))

(declare-fun res!65570 () Bool)

(assert (=> b!136743 (= res!65570 ((_ is Found!270) lt!71478))))

(assert (=> b!136743 (=> (not res!65570) (not e!89052))))

(assert (=> b!136743 e!89052))

(declare-fun lt!71462 () Unit!4281)

(assert (=> b!136743 (= lt!71462 lt!71473)))

(assert (=> b!136743 false))

(declare-fun b!136744 () Bool)

(declare-fun e!89046 () Unit!4281)

(declare-fun Unit!4293 () Unit!4281)

(assert (=> b!136744 (= e!89046 Unit!4293)))

(declare-fun bm!15035 () Bool)

(assert (=> bm!15035 (= call!15037 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun b!136745 () Bool)

(declare-fun e!89050 () Bool)

(declare-fun e!89047 () Bool)

(assert (=> b!136745 (= e!89050 e!89047)))

(declare-fun res!65569 () Bool)

(declare-fun call!15038 () Bool)

(assert (=> b!136745 (= res!65569 call!15038)))

(assert (=> b!136745 (=> (not res!65569) (not e!89047))))

(declare-fun d!42761 () Bool)

(declare-fun e!89049 () Bool)

(assert (=> d!42761 e!89049))

(declare-fun res!65574 () Bool)

(assert (=> d!42761 (=> (not res!65574) (not e!89049))))

(declare-fun lt!71467 () tuple2!2576)

(assert (=> d!42761 (= res!65574 (_1!1299 lt!71467))))

(assert (=> d!42761 (= lt!71467 (tuple2!2577 true (LongMapFixedSize!1109 (defaultEntry!2888 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (bvadd (_size!603 newMap!16) #b00000000000000000000000000000001) (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (_vacant!603 newMap!16))))))

(declare-fun lt!71481 () Unit!4281)

(declare-fun lt!71459 () Unit!4281)

(assert (=> d!42761 (= lt!71481 lt!71459)))

(declare-fun lt!71460 () array!4791)

(declare-fun lt!71461 () array!4789)

(assert (=> d!42761 (contains!888 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(assert (=> d!42761 (= lt!71459 (lemmaValidKeyInArrayIsInListMap!122 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42761 (= lt!71460 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))))

(assert (=> d!42761 (= lt!71461 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun lt!71455 () Unit!4281)

(declare-fun lt!71472 () Unit!4281)

(assert (=> d!42761 (= lt!71455 lt!71472)))

(declare-fun lt!71470 () array!4789)

(assert (=> d!42761 (= (arrayCountValidKeys!0 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4789 (_ BitVec 32)) Unit!4281)

(assert (=> d!42761 (= lt!71472 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(assert (=> d!42761 (= lt!71470 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun lt!71482 () Unit!4281)

(declare-fun lt!71468 () Unit!4281)

(assert (=> d!42761 (= lt!71482 lt!71468)))

(declare-fun lt!71454 () array!4789)

(assert (=> d!42761 (arrayContainsKey!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4789 (_ BitVec 64) (_ BitVec 32)) Unit!4281)

(assert (=> d!42761 (= lt!71468 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(assert (=> d!42761 (= lt!71454 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun lt!71471 () Unit!4281)

(declare-fun lt!71469 () Unit!4281)

(assert (=> d!42761 (= lt!71471 lt!71469)))

(assert (=> d!42761 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!43 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) (_ BitVec 64) V!3497 Int) Unit!4281)

(assert (=> d!42761 (= lt!71469 (lemmaAddValidKeyToArrayThenAddPairToListMap!43 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71463 () Unit!4281)

(declare-fun lt!71453 () Unit!4281)

(assert (=> d!42761 (= lt!71463 lt!71453)))

(assert (=> d!42761 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (mask!7202 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4789 (_ BitVec 32) (_ BitVec 32)) Unit!4281)

(assert (=> d!42761 (= lt!71453 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (mask!7202 newMap!16)))))

(declare-fun lt!71456 () Unit!4281)

(declare-fun lt!71457 () Unit!4281)

(assert (=> d!42761 (= lt!71456 lt!71457)))

(assert (=> d!42761 (= (arrayCountValidKeys!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4789 (_ BitVec 32) (_ BitVec 64)) Unit!4281)

(assert (=> d!42761 (= lt!71457 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun lt!71480 () Unit!4281)

(declare-fun lt!71464 () Unit!4281)

(assert (=> d!42761 (= lt!71480 lt!71464)))

(declare-fun lt!71458 () (_ BitVec 32))

(declare-fun lt!71477 () List!1701)

(assert (=> d!42761 (arrayNoDuplicates!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) lt!71458 lt!71477)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4789 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1701) Unit!4281)

(assert (=> d!42761 (= lt!71464 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) lt!71458 lt!71477))))

(assert (=> d!42761 (= lt!71477 Nil!1698)))

(assert (=> d!42761 (= lt!71458 #b00000000000000000000000000000000)))

(declare-fun lt!71479 () Unit!4281)

(assert (=> d!42761 (= lt!71479 e!89046)))

(declare-fun c!25606 () Bool)

(assert (=> d!42761 (= c!25606 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!71476 () Unit!4281)

(assert (=> d!42761 (= lt!71476 e!89053)))

(assert (=> d!42761 (= c!25604 (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42761 (valid!545 newMap!16)))

(assert (=> d!42761 (= (updateHelperNewKey!62 newMap!16 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))) lt!71467)))

(declare-fun b!136746 () Bool)

(declare-fun res!65572 () Bool)

(assert (=> b!136746 (= res!65572 call!15040)))

(assert (=> b!136746 (=> (not res!65572) (not e!89052))))

(declare-fun b!136747 () Bool)

(assert (=> b!136747 (= e!89049 (= (map!1405 (_2!1299 lt!71467)) (+!170 (map!1405 newMap!16) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!136748 () Bool)

(declare-fun Unit!4294 () Unit!4281)

(assert (=> b!136748 (= e!89046 Unit!4294)))

(declare-fun lt!71466 () Unit!4281)

(declare-fun lemmaArrayContainsKeyThenInListMap!43 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) (_ BitVec 32) Int) Unit!4281)

(assert (=> b!136748 (= lt!71466 (lemmaArrayContainsKeyThenInListMap!43 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(assert (=> b!136748 (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))

(declare-fun lt!71474 () Unit!4281)

(assert (=> b!136748 (= lt!71474 lt!71466)))

(assert (=> b!136748 false))

(declare-fun b!136749 () Bool)

(declare-fun e!89051 () Bool)

(declare-fun call!15039 () Bool)

(assert (=> b!136749 (= e!89051 (not call!15039))))

(declare-fun b!136750 () Bool)

(declare-fun lt!71475 () Unit!4281)

(assert (=> b!136750 (= e!89053 lt!71475)))

(assert (=> b!136750 (= lt!71475 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(assert (=> b!136750 (= lt!71465 call!15037)))

(assert (=> b!136750 (= c!25603 ((_ is MissingZero!270) lt!71465))))

(declare-fun e!89048 () Bool)

(assert (=> b!136750 e!89048))

(declare-fun b!136751 () Bool)

(declare-fun c!25605 () Bool)

(assert (=> b!136751 (= c!25605 ((_ is MissingVacant!270) lt!71465))))

(assert (=> b!136751 (= e!89048 e!89050)))

(declare-fun b!136752 () Bool)

(assert (=> b!136752 (= e!89050 ((_ is Undefined!270) lt!71465))))

(declare-fun b!136753 () Bool)

(assert (=> b!136753 (= e!89047 (not call!15039))))

(declare-fun b!136754 () Bool)

(declare-fun res!65575 () Bool)

(assert (=> b!136754 (=> (not res!65575) (not e!89051))))

(assert (=> b!136754 (= res!65575 call!15038)))

(assert (=> b!136754 (= e!89048 e!89051)))

(declare-fun b!136755 () Bool)

(declare-fun res!65568 () Bool)

(assert (=> b!136755 (=> (not res!65568) (not e!89051))))

(assert (=> b!136755 (= res!65568 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71465)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136756 () Bool)

(declare-fun res!65567 () Bool)

(assert (=> b!136756 (=> (not res!65567) (not e!89049))))

(assert (=> b!136756 (= res!65567 (valid!545 (_2!1299 lt!71467)))))

(declare-fun b!136757 () Bool)

(declare-fun res!65571 () Bool)

(assert (=> b!136757 (= res!65571 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71465)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136757 (=> (not res!65571) (not e!89047))))

(declare-fun bm!15036 () Bool)

(assert (=> bm!15036 (= call!15039 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!136758 () Bool)

(declare-fun res!65573 () Bool)

(assert (=> b!136758 (=> (not res!65573) (not e!89049))))

(assert (=> b!136758 (= res!65573 (contains!888 (map!1405 (_2!1299 lt!71467)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun bm!15037 () Bool)

(assert (=> bm!15037 (= call!15038 call!15040)))

(assert (= (and d!42761 c!25604) b!136743))

(assert (= (and d!42761 (not c!25604)) b!136750))

(assert (= (and b!136743 res!65570) b!136746))

(assert (= (and b!136746 res!65572) b!136742))

(assert (= (and b!136750 c!25603) b!136754))

(assert (= (and b!136750 (not c!25603)) b!136751))

(assert (= (and b!136754 res!65575) b!136755))

(assert (= (and b!136755 res!65568) b!136749))

(assert (= (and b!136751 c!25605) b!136745))

(assert (= (and b!136751 (not c!25605)) b!136752))

(assert (= (and b!136745 res!65569) b!136757))

(assert (= (and b!136757 res!65571) b!136753))

(assert (= (or b!136754 b!136745) bm!15037))

(assert (= (or b!136749 b!136753) bm!15036))

(assert (= (or b!136746 bm!15037) bm!15034))

(assert (= (or b!136743 b!136750) bm!15035))

(assert (= (and d!42761 c!25606) b!136748))

(assert (= (and d!42761 (not c!25606)) b!136744))

(assert (= (and d!42761 res!65574) b!136756))

(assert (= (and b!136756 res!65567) b!136758))

(assert (= (and b!136758 res!65573) b!136747))

(declare-fun m!163097 () Bool)

(assert (=> bm!15034 m!163097))

(assert (=> b!136743 m!162605))

(assert (=> b!136743 m!162723))

(assert (=> b!136750 m!162605))

(assert (=> b!136750 m!162731))

(declare-fun m!163099 () Bool)

(assert (=> b!136747 m!163099))

(assert (=> b!136747 m!162607))

(assert (=> b!136747 m!162607))

(declare-fun m!163101 () Bool)

(assert (=> b!136747 m!163101))

(assert (=> bm!15035 m!162605))

(assert (=> bm!15035 m!162751))

(declare-fun m!163103 () Bool)

(assert (=> b!136756 m!163103))

(assert (=> bm!15036 m!162605))

(assert (=> bm!15036 m!162769))

(assert (=> b!136758 m!163099))

(assert (=> b!136758 m!163099))

(assert (=> b!136758 m!162605))

(declare-fun m!163105 () Bool)

(assert (=> b!136758 m!163105))

(declare-fun m!163107 () Bool)

(assert (=> d!42761 m!163107))

(assert (=> d!42761 m!162605))

(declare-fun m!163109 () Bool)

(assert (=> d!42761 m!163109))

(declare-fun m!163111 () Bool)

(assert (=> d!42761 m!163111))

(declare-fun m!163113 () Bool)

(assert (=> d!42761 m!163113))

(assert (=> d!42761 m!162605))

(declare-fun m!163115 () Bool)

(assert (=> d!42761 m!163115))

(declare-fun m!163117 () Bool)

(assert (=> d!42761 m!163117))

(assert (=> d!42761 m!162737))

(assert (=> d!42761 m!162605))

(declare-fun m!163119 () Bool)

(assert (=> d!42761 m!163119))

(declare-fun m!163121 () Bool)

(assert (=> d!42761 m!163121))

(assert (=> d!42761 m!162737))

(assert (=> d!42761 m!162991))

(assert (=> d!42761 m!162737))

(assert (=> d!42761 m!162605))

(assert (=> d!42761 m!162629))

(declare-fun m!163123 () Bool)

(assert (=> d!42761 m!163123))

(declare-fun m!163125 () Bool)

(assert (=> d!42761 m!163125))

(assert (=> d!42761 m!162605))

(declare-fun m!163127 () Bool)

(assert (=> d!42761 m!163127))

(assert (=> d!42761 m!162599))

(assert (=> d!42761 m!162605))

(declare-fun m!163129 () Bool)

(assert (=> d!42761 m!163129))

(assert (=> d!42761 m!162605))

(assert (=> d!42761 m!162769))

(assert (=> d!42761 m!162839))

(declare-fun m!163131 () Bool)

(assert (=> d!42761 m!163131))

(declare-fun m!163133 () Bool)

(assert (=> d!42761 m!163133))

(declare-fun m!163135 () Bool)

(assert (=> d!42761 m!163135))

(declare-fun m!163137 () Bool)

(assert (=> d!42761 m!163137))

(assert (=> d!42761 m!162605))

(declare-fun m!163139 () Bool)

(assert (=> d!42761 m!163139))

(declare-fun m!163141 () Bool)

(assert (=> d!42761 m!163141))

(assert (=> d!42761 m!163117))

(assert (=> d!42761 m!163125))

(declare-fun m!163143 () Bool)

(assert (=> d!42761 m!163143))

(declare-fun m!163145 () Bool)

(assert (=> b!136757 m!163145))

(declare-fun m!163147 () Bool)

(assert (=> b!136755 m!163147))

(assert (=> b!136748 m!162605))

(declare-fun m!163149 () Bool)

(assert (=> b!136748 m!163149))

(assert (=> b!136748 m!162737))

(assert (=> b!136748 m!162737))

(assert (=> b!136748 m!162605))

(assert (=> b!136748 m!163119))

(declare-fun m!163151 () Bool)

(assert (=> b!136742 m!163151))

(assert (=> bm!14964 d!42761))

(declare-fun b!136767 () Bool)

(declare-fun e!89061 () Bool)

(declare-fun call!15043 () Bool)

(assert (=> b!136767 (= e!89061 call!15043)))

(declare-fun b!136768 () Bool)

(declare-fun e!89062 () Bool)

(assert (=> b!136768 (= e!89062 call!15043)))

(declare-fun b!136769 () Bool)

(assert (=> b!136769 (= e!89061 e!89062)))

(declare-fun lt!71489 () (_ BitVec 64))

(assert (=> b!136769 (= lt!71489 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71491 () Unit!4281)

(assert (=> b!136769 (= lt!71491 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000))))

(assert (=> b!136769 (arrayContainsKey!0 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000)))

(declare-fun lt!71490 () Unit!4281)

(assert (=> b!136769 (= lt!71490 lt!71491)))

(declare-fun res!65580 () Bool)

(assert (=> b!136769 (= res!65580 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (_keys!4641 newMap!16) (mask!7202 newMap!16)) (Found!270 #b00000000000000000000000000000000)))))

(assert (=> b!136769 (=> (not res!65580) (not e!89062))))

(declare-fun d!42763 () Bool)

(declare-fun res!65581 () Bool)

(declare-fun e!89060 () Bool)

(assert (=> d!42763 (=> res!65581 e!89060)))

(assert (=> d!42763 (= res!65581 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42763 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 newMap!16) (mask!7202 newMap!16)) e!89060)))

(declare-fun b!136770 () Bool)

(assert (=> b!136770 (= e!89060 e!89061)))

(declare-fun c!25609 () Bool)

(assert (=> b!136770 (= c!25609 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!15040 () Bool)

(assert (=> bm!15040 (= call!15043 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (= (and d!42763 (not res!65581)) b!136770))

(assert (= (and b!136770 c!25609) b!136769))

(assert (= (and b!136770 (not c!25609)) b!136767))

(assert (= (and b!136769 res!65580) b!136768))

(assert (= (or b!136768 b!136767) bm!15040))

(assert (=> b!136769 m!162887))

(declare-fun m!163153 () Bool)

(assert (=> b!136769 m!163153))

(declare-fun m!163155 () Bool)

(assert (=> b!136769 m!163155))

(assert (=> b!136769 m!162887))

(declare-fun m!163157 () Bool)

(assert (=> b!136769 m!163157))

(assert (=> b!136770 m!162887))

(assert (=> b!136770 m!162887))

(assert (=> b!136770 m!162891))

(declare-fun m!163159 () Bool)

(assert (=> bm!15040 m!163159))

(assert (=> b!136543 d!42763))

(declare-fun d!42765 () Bool)

(assert (=> d!42765 (isDefined!126 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun lt!71494 () Unit!4281)

(declare-fun choose!843 (List!1699 (_ BitVec 64)) Unit!4281)

(assert (=> d!42765 (= lt!71494 (choose!843 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun e!89065 () Bool)

(assert (=> d!42765 e!89065))

(declare-fun res!65584 () Bool)

(assert (=> d!42765 (=> (not res!65584) (not e!89065))))

(declare-fun isStrictlySorted!310 (List!1699) Bool)

(assert (=> d!42765 (= res!65584 (isStrictlySorted!310 (toList!845 lt!71090)))))

(assert (=> d!42765 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71494)))

(declare-fun b!136773 () Bool)

(assert (=> b!136773 (= e!89065 (containsKey!177 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!42765 res!65584) b!136773))

(assert (=> d!42765 m!162605))

(assert (=> d!42765 m!162711))

(assert (=> d!42765 m!162711))

(assert (=> d!42765 m!162713))

(assert (=> d!42765 m!162605))

(declare-fun m!163161 () Bool)

(assert (=> d!42765 m!163161))

(declare-fun m!163163 () Bool)

(assert (=> d!42765 m!163163))

(assert (=> b!136773 m!162605))

(assert (=> b!136773 m!162707))

(assert (=> b!136326 d!42765))

(declare-fun d!42767 () Bool)

(declare-fun isEmpty!419 (Option!180) Bool)

(assert (=> d!42767 (= (isDefined!126 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) (not (isEmpty!419 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(declare-fun bs!5744 () Bool)

(assert (= bs!5744 d!42767))

(assert (=> bs!5744 m!162711))

(declare-fun m!163165 () Bool)

(assert (=> bs!5744 m!163165))

(assert (=> b!136326 d!42767))

(declare-fun b!136785 () Bool)

(declare-fun e!89071 () Option!180)

(assert (=> b!136785 (= e!89071 None!178)))

(declare-fun b!136782 () Bool)

(declare-fun e!89070 () Option!180)

(assert (=> b!136782 (= e!89070 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71090)))))))

(declare-fun b!136784 () Bool)

(assert (=> b!136784 (= e!89071 (getValueByKey!174 (t!6179 (toList!845 lt!71090)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun c!25614 () Bool)

(declare-fun d!42769 () Bool)

(assert (=> d!42769 (= c!25614 (and ((_ is Cons!1695) (toList!845 lt!71090)) (= (_1!1298 (h!2301 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42769 (= (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89070)))

(declare-fun b!136783 () Bool)

(assert (=> b!136783 (= e!89070 e!89071)))

(declare-fun c!25615 () Bool)

(assert (=> b!136783 (= c!25615 (and ((_ is Cons!1695) (toList!845 lt!71090)) (not (= (_1!1298 (h!2301 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(assert (= (and d!42769 c!25614) b!136782))

(assert (= (and d!42769 (not c!25614)) b!136783))

(assert (= (and b!136783 c!25615) b!136784))

(assert (= (and b!136783 (not c!25615)) b!136785))

(assert (=> b!136784 m!162605))

(declare-fun m!163167 () Bool)

(assert (=> b!136784 m!163167))

(assert (=> b!136326 d!42769))

(declare-fun b!136796 () Bool)

(declare-fun res!65596 () Bool)

(declare-fun e!89074 () Bool)

(assert (=> b!136796 (=> (not res!65596) (not e!89074))))

(declare-fun size!2540 (LongMapFixedSize!1108) (_ BitVec 32))

(assert (=> b!136796 (= res!65596 (= (size!2540 newMap!16) (bvadd (_size!603 newMap!16) (bvsdiv (bvadd (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!136794 () Bool)

(declare-fun res!65593 () Bool)

(assert (=> b!136794 (=> (not res!65593) (not e!89074))))

(assert (=> b!136794 (= res!65593 (and (= (size!2535 (_values!2871 newMap!16)) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001)) (= (size!2534 (_keys!4641 newMap!16)) (size!2535 (_values!2871 newMap!16))) (bvsge (_size!603 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!603 newMap!16) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun d!42771 () Bool)

(declare-fun res!65595 () Bool)

(assert (=> d!42771 (=> (not res!65595) (not e!89074))))

(assert (=> d!42771 (= res!65595 (validMask!0 (mask!7202 newMap!16)))))

(assert (=> d!42771 (= (simpleValid!93 newMap!16) e!89074)))

(declare-fun b!136797 () Bool)

(assert (=> b!136797 (= e!89074 (and (bvsge (extraKeys!2649 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2649 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!603 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!136795 () Bool)

(declare-fun res!65594 () Bool)

(assert (=> b!136795 (=> (not res!65594) (not e!89074))))

(assert (=> b!136795 (= res!65594 (bvsge (size!2540 newMap!16) (_size!603 newMap!16)))))

(assert (= (and d!42771 res!65595) b!136794))

(assert (= (and b!136794 res!65593) b!136795))

(assert (= (and b!136795 res!65594) b!136796))

(assert (= (and b!136796 res!65596) b!136797))

(declare-fun m!163169 () Bool)

(assert (=> b!136796 m!163169))

(assert (=> d!42771 m!162853))

(assert (=> b!136795 m!163169))

(assert (=> d!42697 d!42771))

(declare-fun d!42773 () Bool)

(assert (=> d!42773 (= (apply!117 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71258) (apply!117 lt!71257 lt!71258))))

(declare-fun lt!71497 () Unit!4281)

(declare-fun choose!844 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> d!42773 (= lt!71497 (choose!844 lt!71257 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71258))))

(declare-fun e!89077 () Bool)

(assert (=> d!42773 e!89077))

(declare-fun res!65599 () Bool)

(assert (=> d!42773 (=> (not res!65599) (not e!89077))))

(assert (=> d!42773 (= res!65599 (contains!888 lt!71257 lt!71258))))

(assert (=> d!42773 (= (addApplyDifferent!93 lt!71257 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71258) lt!71497)))

(declare-fun b!136801 () Bool)

(assert (=> b!136801 (= e!89077 (not (= lt!71258 lt!71260)))))

(assert (= (and d!42773 res!65599) b!136801))

(assert (=> d!42773 m!162807))

(assert (=> d!42773 m!162787))

(assert (=> d!42773 m!162787))

(assert (=> d!42773 m!162789))

(declare-fun m!163171 () Bool)

(assert (=> d!42773 m!163171))

(declare-fun m!163173 () Bool)

(assert (=> d!42773 m!163173))

(assert (=> b!136525 d!42773))

(assert (=> b!136525 d!42731))

(declare-fun d!42775 () Bool)

(declare-fun e!89078 () Bool)

(assert (=> d!42775 e!89078))

(declare-fun res!65601 () Bool)

(assert (=> d!42775 (=> (not res!65601) (not e!89078))))

(declare-fun lt!71501 () ListLongMap!1659)

(assert (=> d!42775 (= res!65601 (contains!888 lt!71501 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71498 () List!1699)

(assert (=> d!42775 (= lt!71501 (ListLongMap!1660 lt!71498))))

(declare-fun lt!71499 () Unit!4281)

(declare-fun lt!71500 () Unit!4281)

(assert (=> d!42775 (= lt!71499 lt!71500)))

(assert (=> d!42775 (= (getValueByKey!174 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42775 (= lt!71500 (lemmaContainsTupThenGetReturnValue!89 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42775 (= lt!71498 (insertStrictlySorted!92 (toList!845 lt!71272) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42775 (= (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71501)))

(declare-fun b!136802 () Bool)

(declare-fun res!65600 () Bool)

(assert (=> b!136802 (=> (not res!65600) (not e!89078))))

(assert (=> b!136802 (= res!65600 (= (getValueByKey!174 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!136803 () Bool)

(assert (=> b!136803 (= e!89078 (contains!891 (toList!845 lt!71501) (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42775 res!65601) b!136802))

(assert (= (and b!136802 res!65600) b!136803))

(declare-fun m!163175 () Bool)

(assert (=> d!42775 m!163175))

(declare-fun m!163177 () Bool)

(assert (=> d!42775 m!163177))

(declare-fun m!163179 () Bool)

(assert (=> d!42775 m!163179))

(declare-fun m!163181 () Bool)

(assert (=> d!42775 m!163181))

(declare-fun m!163183 () Bool)

(assert (=> b!136802 m!163183))

(declare-fun m!163185 () Bool)

(assert (=> b!136803 m!163185))

(assert (=> b!136525 d!42775))

(declare-fun d!42777 () Bool)

(declare-fun e!89079 () Bool)

(assert (=> d!42777 e!89079))

(declare-fun res!65603 () Bool)

(assert (=> d!42777 (=> (not res!65603) (not e!89079))))

(declare-fun lt!71505 () ListLongMap!1659)

(assert (=> d!42777 (= res!65603 (contains!888 lt!71505 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71502 () List!1699)

(assert (=> d!42777 (= lt!71505 (ListLongMap!1660 lt!71502))))

(declare-fun lt!71503 () Unit!4281)

(declare-fun lt!71504 () Unit!4281)

(assert (=> d!42777 (= lt!71503 lt!71504)))

(assert (=> d!42777 (= (getValueByKey!174 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42777 (= lt!71504 (lemmaContainsTupThenGetReturnValue!89 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42777 (= lt!71502 (insertStrictlySorted!92 (toList!845 lt!71257) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42777 (= (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71505)))

(declare-fun b!136804 () Bool)

(declare-fun res!65602 () Bool)

(assert (=> b!136804 (=> (not res!65602) (not e!89079))))

(assert (=> b!136804 (= res!65602 (= (getValueByKey!174 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!136805 () Bool)

(assert (=> b!136805 (= e!89079 (contains!891 (toList!845 lt!71505) (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42777 res!65603) b!136804))

(assert (= (and b!136804 res!65602) b!136805))

(declare-fun m!163187 () Bool)

(assert (=> d!42777 m!163187))

(declare-fun m!163189 () Bool)

(assert (=> d!42777 m!163189))

(declare-fun m!163191 () Bool)

(assert (=> d!42777 m!163191))

(declare-fun m!163193 () Bool)

(assert (=> d!42777 m!163193))

(declare-fun m!163195 () Bool)

(assert (=> b!136804 m!163195))

(declare-fun m!163197 () Bool)

(assert (=> b!136805 m!163197))

(assert (=> b!136525 d!42777))

(declare-fun d!42779 () Bool)

(assert (=> d!42779 (= (apply!117 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71274) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71274)))))

(declare-fun bs!5745 () Bool)

(assert (= bs!5745 d!42779))

(declare-fun m!163199 () Bool)

(assert (=> bs!5745 m!163199))

(assert (=> bs!5745 m!163199))

(declare-fun m!163201 () Bool)

(assert (=> bs!5745 m!163201))

(assert (=> b!136525 d!42779))

(declare-fun d!42781 () Bool)

(declare-fun e!89080 () Bool)

(assert (=> d!42781 e!89080))

(declare-fun res!65604 () Bool)

(assert (=> d!42781 (=> res!65604 e!89080)))

(declare-fun lt!71507 () Bool)

(assert (=> d!42781 (= res!65604 (not lt!71507))))

(declare-fun lt!71508 () Bool)

(assert (=> d!42781 (= lt!71507 lt!71508)))

(declare-fun lt!71509 () Unit!4281)

(declare-fun e!89081 () Unit!4281)

(assert (=> d!42781 (= lt!71509 e!89081)))

(declare-fun c!25616 () Bool)

(assert (=> d!42781 (= c!25616 lt!71508)))

(assert (=> d!42781 (= lt!71508 (containsKey!177 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(assert (=> d!42781 (= (contains!888 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71273) lt!71507)))

(declare-fun b!136806 () Bool)

(declare-fun lt!71506 () Unit!4281)

(assert (=> b!136806 (= e!89081 lt!71506)))

(assert (=> b!136806 (= lt!71506 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(assert (=> b!136806 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(declare-fun b!136807 () Bool)

(declare-fun Unit!4295 () Unit!4281)

(assert (=> b!136807 (= e!89081 Unit!4295)))

(declare-fun b!136808 () Bool)

(assert (=> b!136808 (= e!89080 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273)))))

(assert (= (and d!42781 c!25616) b!136806))

(assert (= (and d!42781 (not c!25616)) b!136807))

(assert (= (and d!42781 (not res!65604)) b!136808))

(declare-fun m!163203 () Bool)

(assert (=> d!42781 m!163203))

(declare-fun m!163205 () Bool)

(assert (=> b!136806 m!163205))

(declare-fun m!163207 () Bool)

(assert (=> b!136806 m!163207))

(assert (=> b!136806 m!163207))

(declare-fun m!163209 () Bool)

(assert (=> b!136806 m!163209))

(assert (=> b!136808 m!163207))

(assert (=> b!136808 m!163207))

(assert (=> b!136808 m!163209))

(assert (=> b!136525 d!42781))

(declare-fun d!42783 () Bool)

(assert (=> d!42783 (= (apply!117 lt!71278 lt!71264) (get!1502 (getValueByKey!174 (toList!845 lt!71278) lt!71264)))))

(declare-fun bs!5746 () Bool)

(assert (= bs!5746 d!42783))

(declare-fun m!163211 () Bool)

(assert (=> bs!5746 m!163211))

(assert (=> bs!5746 m!163211))

(declare-fun m!163213 () Bool)

(assert (=> bs!5746 m!163213))

(assert (=> b!136525 d!42783))

(declare-fun d!42785 () Bool)

(assert (=> d!42785 (= (apply!117 lt!71257 lt!71258) (get!1502 (getValueByKey!174 (toList!845 lt!71257) lt!71258)))))

(declare-fun bs!5747 () Bool)

(assert (= bs!5747 d!42785))

(declare-fun m!163215 () Bool)

(assert (=> bs!5747 m!163215))

(assert (=> bs!5747 m!163215))

(declare-fun m!163217 () Bool)

(assert (=> bs!5747 m!163217))

(assert (=> b!136525 d!42785))

(declare-fun d!42787 () Bool)

(assert (=> d!42787 (= (apply!117 lt!71262 lt!71274) (get!1502 (getValueByKey!174 (toList!845 lt!71262) lt!71274)))))

(declare-fun bs!5748 () Bool)

(assert (= bs!5748 d!42787))

(declare-fun m!163219 () Bool)

(assert (=> bs!5748 m!163219))

(assert (=> bs!5748 m!163219))

(declare-fun m!163221 () Bool)

(assert (=> bs!5748 m!163221))

(assert (=> b!136525 d!42787))

(declare-fun d!42789 () Bool)

(declare-fun e!89082 () Bool)

(assert (=> d!42789 e!89082))

(declare-fun res!65606 () Bool)

(assert (=> d!42789 (=> (not res!65606) (not e!89082))))

(declare-fun lt!71513 () ListLongMap!1659)

(assert (=> d!42789 (= res!65606 (contains!888 lt!71513 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71510 () List!1699)

(assert (=> d!42789 (= lt!71513 (ListLongMap!1660 lt!71510))))

(declare-fun lt!71511 () Unit!4281)

(declare-fun lt!71512 () Unit!4281)

(assert (=> d!42789 (= lt!71511 lt!71512)))

(assert (=> d!42789 (= (getValueByKey!174 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42789 (= lt!71512 (lemmaContainsTupThenGetReturnValue!89 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42789 (= lt!71510 (insertStrictlySorted!92 (toList!845 lt!71262) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42789 (= (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71513)))

(declare-fun b!136809 () Bool)

(declare-fun res!65605 () Bool)

(assert (=> b!136809 (=> (not res!65605) (not e!89082))))

(assert (=> b!136809 (= res!65605 (= (getValueByKey!174 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!136810 () Bool)

(assert (=> b!136810 (= e!89082 (contains!891 (toList!845 lt!71513) (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42789 res!65606) b!136809))

(assert (= (and b!136809 res!65605) b!136810))

(declare-fun m!163223 () Bool)

(assert (=> d!42789 m!163223))

(declare-fun m!163225 () Bool)

(assert (=> d!42789 m!163225))

(declare-fun m!163227 () Bool)

(assert (=> d!42789 m!163227))

(declare-fun m!163229 () Bool)

(assert (=> d!42789 m!163229))

(declare-fun m!163231 () Bool)

(assert (=> b!136809 m!163231))

(declare-fun m!163233 () Bool)

(assert (=> b!136810 m!163233))

(assert (=> b!136525 d!42789))

(declare-fun d!42791 () Bool)

(declare-fun e!89083 () Bool)

(assert (=> d!42791 e!89083))

(declare-fun res!65608 () Bool)

(assert (=> d!42791 (=> (not res!65608) (not e!89083))))

(declare-fun lt!71517 () ListLongMap!1659)

(assert (=> d!42791 (= res!65608 (contains!888 lt!71517 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71514 () List!1699)

(assert (=> d!42791 (= lt!71517 (ListLongMap!1660 lt!71514))))

(declare-fun lt!71515 () Unit!4281)

(declare-fun lt!71516 () Unit!4281)

(assert (=> d!42791 (= lt!71515 lt!71516)))

(assert (=> d!42791 (= (getValueByKey!174 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42791 (= lt!71516 (lemmaContainsTupThenGetReturnValue!89 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42791 (= lt!71514 (insertStrictlySorted!92 (toList!845 lt!71278) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42791 (= (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71517)))

(declare-fun b!136811 () Bool)

(declare-fun res!65607 () Bool)

(assert (=> b!136811 (=> (not res!65607) (not e!89083))))

(assert (=> b!136811 (= res!65607 (= (getValueByKey!174 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!136812 () Bool)

(assert (=> b!136812 (= e!89083 (contains!891 (toList!845 lt!71517) (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42791 res!65608) b!136811))

(assert (= (and b!136811 res!65607) b!136812))

(declare-fun m!163235 () Bool)

(assert (=> d!42791 m!163235))

(declare-fun m!163237 () Bool)

(assert (=> d!42791 m!163237))

(declare-fun m!163239 () Bool)

(assert (=> d!42791 m!163239))

(declare-fun m!163241 () Bool)

(assert (=> d!42791 m!163241))

(declare-fun m!163243 () Bool)

(assert (=> b!136811 m!163243))

(declare-fun m!163245 () Bool)

(assert (=> b!136812 m!163245))

(assert (=> b!136525 d!42791))

(declare-fun d!42793 () Bool)

(assert (=> d!42793 (= (apply!117 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71264) (apply!117 lt!71278 lt!71264))))

(declare-fun lt!71518 () Unit!4281)

(assert (=> d!42793 (= lt!71518 (choose!844 lt!71278 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71264))))

(declare-fun e!89084 () Bool)

(assert (=> d!42793 e!89084))

(declare-fun res!65609 () Bool)

(assert (=> d!42793 (=> (not res!65609) (not e!89084))))

(assert (=> d!42793 (= res!65609 (contains!888 lt!71278 lt!71264))))

(assert (=> d!42793 (= (addApplyDifferent!93 lt!71278 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71264) lt!71518)))

(declare-fun b!136813 () Bool)

(assert (=> b!136813 (= e!89084 (not (= lt!71264 lt!71265)))))

(assert (= (and d!42793 res!65609) b!136813))

(assert (=> d!42793 m!162793))

(assert (=> d!42793 m!162797))

(assert (=> d!42793 m!162797))

(assert (=> d!42793 m!162799))

(declare-fun m!163247 () Bool)

(assert (=> d!42793 m!163247))

(declare-fun m!163249 () Bool)

(assert (=> d!42793 m!163249))

(assert (=> b!136525 d!42793))

(declare-fun d!42795 () Bool)

(assert (=> d!42795 (= (apply!117 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71264) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71264)))))

(declare-fun bs!5749 () Bool)

(assert (= bs!5749 d!42795))

(declare-fun m!163251 () Bool)

(assert (=> bs!5749 m!163251))

(assert (=> bs!5749 m!163251))

(declare-fun m!163253 () Bool)

(assert (=> bs!5749 m!163253))

(assert (=> b!136525 d!42795))

(declare-fun d!42797 () Bool)

(assert (=> d!42797 (= (apply!117 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71274) (apply!117 lt!71262 lt!71274))))

(declare-fun lt!71519 () Unit!4281)

(assert (=> d!42797 (= lt!71519 (choose!844 lt!71262 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71274))))

(declare-fun e!89085 () Bool)

(assert (=> d!42797 e!89085))

(declare-fun res!65610 () Bool)

(assert (=> d!42797 (=> (not res!65610) (not e!89085))))

(assert (=> d!42797 (= res!65610 (contains!888 lt!71262 lt!71274))))

(assert (=> d!42797 (= (addApplyDifferent!93 lt!71262 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71274) lt!71519)))

(declare-fun b!136814 () Bool)

(assert (=> b!136814 (= e!89085 (not (= lt!71274 lt!71268)))))

(assert (= (and d!42797 res!65610) b!136814))

(assert (=> d!42797 m!162795))

(assert (=> d!42797 m!162801))

(assert (=> d!42797 m!162801))

(assert (=> d!42797 m!162811))

(declare-fun m!163255 () Bool)

(assert (=> d!42797 m!163255))

(declare-fun m!163257 () Bool)

(assert (=> d!42797 m!163257))

(assert (=> b!136525 d!42797))

(declare-fun d!42799 () Bool)

(assert (=> d!42799 (contains!888 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71273)))

(declare-fun lt!71522 () Unit!4281)

(declare-fun choose!845 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> d!42799 (= lt!71522 (choose!845 lt!71272 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71273))))

(assert (=> d!42799 (contains!888 lt!71272 lt!71273)))

(assert (=> d!42799 (= (addStillContains!93 lt!71272 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71273) lt!71522)))

(declare-fun bs!5750 () Bool)

(assert (= bs!5750 d!42799))

(assert (=> bs!5750 m!162803))

(assert (=> bs!5750 m!162803))

(assert (=> bs!5750 m!162805))

(declare-fun m!163259 () Bool)

(assert (=> bs!5750 m!163259))

(declare-fun m!163261 () Bool)

(assert (=> bs!5750 m!163261))

(assert (=> b!136525 d!42799))

(declare-fun d!42801 () Bool)

(assert (=> d!42801 (= (apply!117 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71258) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71258)))))

(declare-fun bs!5751 () Bool)

(assert (= bs!5751 d!42801))

(declare-fun m!163263 () Bool)

(assert (=> bs!5751 m!163263))

(assert (=> bs!5751 m!163263))

(declare-fun m!163265 () Bool)

(assert (=> bs!5751 m!163265))

(assert (=> b!136525 d!42801))

(assert (=> b!136328 d!42767))

(assert (=> b!136328 d!42769))

(declare-fun b!136832 () Bool)

(declare-fun res!65620 () Bool)

(declare-fun e!89095 () Bool)

(assert (=> b!136832 (=> (not res!65620) (not e!89095))))

(declare-fun call!15048 () Bool)

(assert (=> b!136832 (= res!65620 call!15048)))

(declare-fun e!89096 () Bool)

(assert (=> b!136832 (= e!89096 e!89095)))

(declare-fun b!136833 () Bool)

(declare-fun e!89097 () Bool)

(assert (=> b!136833 (= e!89097 e!89096)))

(declare-fun c!25621 () Bool)

(declare-fun lt!71527 () SeekEntryResult!270)

(assert (=> b!136833 (= c!25621 ((_ is MissingVacant!270) lt!71527))))

(declare-fun b!136834 () Bool)

(declare-fun res!65622 () Bool)

(assert (=> b!136834 (=> (not res!65622) (not e!89095))))

(assert (=> b!136834 (= res!65622 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71527)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136834 (and (bvsge (index!3244 lt!71527) #b00000000000000000000000000000000) (bvslt (index!3244 lt!71527) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun d!42803 () Bool)

(assert (=> d!42803 e!89097))

(declare-fun c!25622 () Bool)

(assert (=> d!42803 (= c!25622 ((_ is MissingZero!270) lt!71527))))

(assert (=> d!42803 (= lt!71527 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun lt!71528 () Unit!4281)

(declare-fun choose!846 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) Int) Unit!4281)

(assert (=> d!42803 (= lt!71528 (choose!846 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)))))

(assert (=> d!42803 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42803 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)) lt!71528)))

(declare-fun b!136835 () Bool)

(declare-fun call!15049 () Bool)

(assert (=> b!136835 (= e!89095 (not call!15049))))

(declare-fun b!136836 () Bool)

(declare-fun e!89094 () Bool)

(assert (=> b!136836 (= e!89097 e!89094)))

(declare-fun res!65621 () Bool)

(assert (=> b!136836 (= res!65621 call!15048)))

(assert (=> b!136836 (=> (not res!65621) (not e!89094))))

(declare-fun b!136837 () Bool)

(assert (=> b!136837 (= e!89094 (not call!15049))))

(declare-fun b!136838 () Bool)

(assert (=> b!136838 (= e!89096 ((_ is Undefined!270) lt!71527))))

(declare-fun b!136839 () Bool)

(assert (=> b!136839 (and (bvsge (index!3241 lt!71527) #b00000000000000000000000000000000) (bvslt (index!3241 lt!71527) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65619 () Bool)

(assert (=> b!136839 (= res!65619 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71527)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136839 (=> (not res!65619) (not e!89094))))

(declare-fun bm!15045 () Bool)

(assert (=> bm!15045 (= call!15048 (inRange!0 (ite c!25622 (index!3241 lt!71527) (index!3244 lt!71527)) (mask!7202 newMap!16)))))

(declare-fun bm!15046 () Bool)

(assert (=> bm!15046 (= call!15049 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(assert (= (and d!42803 c!25622) b!136836))

(assert (= (and d!42803 (not c!25622)) b!136833))

(assert (= (and b!136836 res!65621) b!136839))

(assert (= (and b!136839 res!65619) b!136837))

(assert (= (and b!136833 c!25621) b!136832))

(assert (= (and b!136833 (not c!25621)) b!136838))

(assert (= (and b!136832 res!65620) b!136834))

(assert (= (and b!136834 res!65622) b!136835))

(assert (= (or b!136836 b!136832) bm!15045))

(assert (= (or b!136837 b!136835) bm!15046))

(declare-fun m!163267 () Bool)

(assert (=> bm!15045 m!163267))

(assert (=> d!42803 m!162605))

(assert (=> d!42803 m!162751))

(assert (=> d!42803 m!162605))

(declare-fun m!163269 () Bool)

(assert (=> d!42803 m!163269))

(assert (=> d!42803 m!162853))

(assert (=> bm!15046 m!162605))

(assert (=> bm!15046 m!162769))

(declare-fun m!163271 () Bool)

(assert (=> b!136839 m!163271))

(declare-fun m!163273 () Bool)

(assert (=> b!136834 m!163273))

(assert (=> bm!14971 d!42803))

(declare-fun b!136852 () Bool)

(declare-fun e!89104 () SeekEntryResult!270)

(declare-fun lt!71537 () SeekEntryResult!270)

(assert (=> b!136852 (= e!89104 (MissingZero!270 (index!3243 lt!71537)))))

(declare-fun b!136853 () Bool)

(declare-fun e!89105 () SeekEntryResult!270)

(assert (=> b!136853 (= e!89105 (Found!270 (index!3243 lt!71537)))))

(declare-fun lt!71535 () SeekEntryResult!270)

(declare-fun d!42805 () Bool)

(assert (=> d!42805 (and (or ((_ is Undefined!270) lt!71535) (not ((_ is Found!270) lt!71535)) (and (bvsge (index!3242 lt!71535) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71535) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71535) ((_ is Found!270) lt!71535) (not ((_ is MissingZero!270) lt!71535)) (and (bvsge (index!3241 lt!71535) #b00000000000000000000000000000000) (bvslt (index!3241 lt!71535) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71535) ((_ is Found!270) lt!71535) ((_ is MissingZero!270) lt!71535) (not ((_ is MissingVacant!270) lt!71535)) (and (bvsge (index!3244 lt!71535) #b00000000000000000000000000000000) (bvslt (index!3244 lt!71535) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71535) (ite ((_ is Found!270) lt!71535) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71535)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite ((_ is MissingZero!270) lt!71535) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71535)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!270) lt!71535) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71535)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89106 () SeekEntryResult!270)

(assert (=> d!42805 (= lt!71535 e!89106)))

(declare-fun c!25631 () Bool)

(assert (=> d!42805 (= c!25631 (and ((_ is Intermediate!270) lt!71537) (undefined!1082 lt!71537)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4789 (_ BitVec 32)) SeekEntryResult!270)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!42805 (= lt!71537 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (=> d!42805 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42805 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)) lt!71535)))

(declare-fun b!136854 () Bool)

(declare-fun c!25629 () Bool)

(declare-fun lt!71536 () (_ BitVec 64))

(assert (=> b!136854 (= c!25629 (= lt!71536 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136854 (= e!89105 e!89104)))

(declare-fun b!136855 () Bool)

(assert (=> b!136855 (= e!89106 e!89105)))

(assert (=> b!136855 (= lt!71536 (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71537)))))

(declare-fun c!25630 () Bool)

(assert (=> b!136855 (= c!25630 (= lt!71536 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!136856 () Bool)

(assert (=> b!136856 (= e!89106 Undefined!270)))

(declare-fun b!136857 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4789 (_ BitVec 32)) SeekEntryResult!270)

(assert (=> b!136857 (= e!89104 (seekKeyOrZeroReturnVacant!0 (x!15798 lt!71537) (index!3243 lt!71537) (index!3243 lt!71537) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (= (and d!42805 c!25631) b!136856))

(assert (= (and d!42805 (not c!25631)) b!136855))

(assert (= (and b!136855 c!25630) b!136853))

(assert (= (and b!136855 (not c!25630)) b!136854))

(assert (= (and b!136854 c!25629) b!136852))

(assert (= (and b!136854 (not c!25629)) b!136857))

(declare-fun m!163275 () Bool)

(assert (=> d!42805 m!163275))

(declare-fun m!163277 () Bool)

(assert (=> d!42805 m!163277))

(assert (=> d!42805 m!162605))

(declare-fun m!163279 () Bool)

(assert (=> d!42805 m!163279))

(assert (=> d!42805 m!162853))

(declare-fun m!163281 () Bool)

(assert (=> d!42805 m!163281))

(assert (=> d!42805 m!162605))

(assert (=> d!42805 m!163277))

(declare-fun m!163283 () Bool)

(assert (=> d!42805 m!163283))

(declare-fun m!163285 () Bool)

(assert (=> b!136855 m!163285))

(assert (=> b!136857 m!162605))

(declare-fun m!163287 () Bool)

(assert (=> b!136857 m!163287))

(assert (=> b!136447 d!42805))

(declare-fun d!42807 () Bool)

(declare-fun e!89107 () Bool)

(assert (=> d!42807 e!89107))

(declare-fun res!65623 () Bool)

(assert (=> d!42807 (=> res!65623 e!89107)))

(declare-fun lt!71539 () Bool)

(assert (=> d!42807 (= res!65623 (not lt!71539))))

(declare-fun lt!71540 () Bool)

(assert (=> d!42807 (= lt!71539 lt!71540)))

(declare-fun lt!71541 () Unit!4281)

(declare-fun e!89108 () Unit!4281)

(assert (=> d!42807 (= lt!71541 e!89108)))

(declare-fun c!25632 () Bool)

(assert (=> d!42807 (= c!25632 lt!71540)))

(assert (=> d!42807 (= lt!71540 (containsKey!177 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!42807 (= (contains!888 lt!71267 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!71539)))

(declare-fun b!136858 () Bool)

(declare-fun lt!71538 () Unit!4281)

(assert (=> b!136858 (= e!89108 lt!71538)))

(assert (=> b!136858 (= lt!71538 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136858 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136859 () Bool)

(declare-fun Unit!4296 () Unit!4281)

(assert (=> b!136859 (= e!89108 Unit!4296)))

(declare-fun b!136860 () Bool)

(assert (=> b!136860 (= e!89107 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!42807 c!25632) b!136858))

(assert (= (and d!42807 (not c!25632)) b!136859))

(assert (= (and d!42807 (not res!65623)) b!136860))

(assert (=> d!42807 m!162775))

(declare-fun m!163289 () Bool)

(assert (=> d!42807 m!163289))

(assert (=> b!136858 m!162775))

(declare-fun m!163291 () Bool)

(assert (=> b!136858 m!163291))

(assert (=> b!136858 m!162775))

(assert (=> b!136858 m!162875))

(assert (=> b!136858 m!162875))

(declare-fun m!163293 () Bool)

(assert (=> b!136858 m!163293))

(assert (=> b!136860 m!162775))

(assert (=> b!136860 m!162875))

(assert (=> b!136860 m!162875))

(assert (=> b!136860 m!163293))

(assert (=> b!136523 d!42807))

(assert (=> b!136421 d!42733))

(declare-fun d!42809 () Bool)

(declare-fun e!89109 () Bool)

(assert (=> d!42809 e!89109))

(declare-fun res!65624 () Bool)

(assert (=> d!42809 (=> res!65624 e!89109)))

(declare-fun lt!71543 () Bool)

(assert (=> d!42809 (= res!65624 (not lt!71543))))

(declare-fun lt!71544 () Bool)

(assert (=> d!42809 (= lt!71543 lt!71544)))

(declare-fun lt!71545 () Unit!4281)

(declare-fun e!89110 () Unit!4281)

(assert (=> d!42809 (= lt!71545 e!89110)))

(declare-fun c!25633 () Bool)

(assert (=> d!42809 (= c!25633 lt!71544)))

(assert (=> d!42809 (= lt!71544 (containsKey!177 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42809 (= (contains!888 e!88869 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71543)))

(declare-fun b!136861 () Bool)

(declare-fun lt!71542 () Unit!4281)

(assert (=> b!136861 (= e!89110 lt!71542)))

(assert (=> b!136861 (= lt!71542 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!136861 (isDefined!126 (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!136862 () Bool)

(declare-fun Unit!4297 () Unit!4281)

(assert (=> b!136862 (= e!89110 Unit!4297)))

(declare-fun b!136863 () Bool)

(assert (=> b!136863 (= e!89109 (isDefined!126 (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (= (and d!42809 c!25633) b!136861))

(assert (= (and d!42809 (not c!25633)) b!136862))

(assert (= (and d!42809 (not res!65624)) b!136863))

(assert (=> d!42809 m!162605))

(declare-fun m!163295 () Bool)

(assert (=> d!42809 m!163295))

(assert (=> b!136861 m!162605))

(declare-fun m!163297 () Bool)

(assert (=> b!136861 m!163297))

(assert (=> b!136861 m!162605))

(declare-fun m!163299 () Bool)

(assert (=> b!136861 m!163299))

(assert (=> b!136861 m!163299))

(declare-fun m!163301 () Bool)

(assert (=> b!136861 m!163301))

(assert (=> b!136863 m!162605))

(assert (=> b!136863 m!163299))

(assert (=> b!136863 m!163299))

(assert (=> b!136863 m!163301))

(assert (=> bm!14969 d!42809))

(assert (=> bm!14979 d!42805))

(declare-fun d!42811 () Bool)

(assert (=> d!42811 (= (get!1500 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3219 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!136459 d!42811))

(declare-fun d!42813 () Bool)

(declare-fun res!65625 () Bool)

(declare-fun e!89111 () Bool)

(assert (=> d!42813 (=> res!65625 e!89111)))

(assert (=> d!42813 (= res!65625 (= (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42813 (= (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000) e!89111)))

(declare-fun b!136864 () Bool)

(declare-fun e!89112 () Bool)

(assert (=> b!136864 (= e!89111 e!89112)))

(declare-fun res!65626 () Bool)

(assert (=> b!136864 (=> (not res!65626) (not e!89112))))

(assert (=> b!136864 (= res!65626 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136865 () Bool)

(assert (=> b!136865 (= e!89112 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!42813 (not res!65625)) b!136864))

(assert (= (and b!136864 res!65626) b!136865))

(assert (=> d!42813 m!162887))

(assert (=> b!136865 m!162605))

(declare-fun m!163303 () Bool)

(assert (=> b!136865 m!163303))

(assert (=> bm!14978 d!42813))

(declare-fun d!42815 () Bool)

(declare-fun e!89113 () Bool)

(assert (=> d!42815 e!89113))

(declare-fun res!65628 () Bool)

(assert (=> d!42815 (=> (not res!65628) (not e!89113))))

(declare-fun lt!71549 () ListLongMap!1659)

(assert (=> d!42815 (= res!65628 (contains!888 lt!71549 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71546 () List!1699)

(assert (=> d!42815 (= lt!71549 (ListLongMap!1660 lt!71546))))

(declare-fun lt!71547 () Unit!4281)

(declare-fun lt!71548 () Unit!4281)

(assert (=> d!42815 (= lt!71547 lt!71548)))

(assert (=> d!42815 (= (getValueByKey!174 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42815 (= lt!71548 (lemmaContainsTupThenGetReturnValue!89 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42815 (= lt!71546 (insertStrictlySorted!92 (toList!845 call!15003) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42815 (= (+!170 call!15003 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71549)))

(declare-fun b!136866 () Bool)

(declare-fun res!65627 () Bool)

(assert (=> b!136866 (=> (not res!65627) (not e!89113))))

(assert (=> b!136866 (= res!65627 (= (getValueByKey!174 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!136867 () Bool)

(assert (=> b!136867 (= e!89113 (contains!891 (toList!845 lt!71549) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42815 res!65628) b!136866))

(assert (= (and b!136866 res!65627) b!136867))

(declare-fun m!163305 () Bool)

(assert (=> d!42815 m!163305))

(declare-fun m!163307 () Bool)

(assert (=> d!42815 m!163307))

(declare-fun m!163309 () Bool)

(assert (=> d!42815 m!163309))

(declare-fun m!163311 () Bool)

(assert (=> d!42815 m!163311))

(declare-fun m!163313 () Bool)

(assert (=> b!136866 m!163313))

(declare-fun m!163315 () Bool)

(assert (=> b!136867 m!163315))

(assert (=> b!136520 d!42815))

(declare-fun d!42817 () Bool)

(declare-fun e!89114 () Bool)

(assert (=> d!42817 e!89114))

(declare-fun res!65630 () Bool)

(assert (=> d!42817 (=> (not res!65630) (not e!89114))))

(declare-fun lt!71553 () ListLongMap!1659)

(assert (=> d!42817 (= res!65630 (contains!888 lt!71553 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71550 () List!1699)

(assert (=> d!42817 (= lt!71553 (ListLongMap!1660 lt!71550))))

(declare-fun lt!71551 () Unit!4281)

(declare-fun lt!71552 () Unit!4281)

(assert (=> d!42817 (= lt!71551 lt!71552)))

(assert (=> d!42817 (= (getValueByKey!174 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42817 (= lt!71552 (lemmaContainsTupThenGetReturnValue!89 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42817 (= lt!71550 (insertStrictlySorted!92 (toList!845 call!14974) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42817 (= (+!170 call!14974 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71553)))

(declare-fun b!136868 () Bool)

(declare-fun res!65629 () Bool)

(assert (=> b!136868 (=> (not res!65629) (not e!89114))))

(assert (=> b!136868 (= res!65629 (= (getValueByKey!174 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!136869 () Bool)

(assert (=> b!136869 (= e!89114 (contains!891 (toList!845 lt!71553) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42817 res!65630) b!136868))

(assert (= (and b!136868 res!65629) b!136869))

(declare-fun m!163317 () Bool)

(assert (=> d!42817 m!163317))

(declare-fun m!163319 () Bool)

(assert (=> d!42817 m!163319))

(declare-fun m!163321 () Bool)

(assert (=> d!42817 m!163321))

(declare-fun m!163323 () Bool)

(assert (=> d!42817 m!163323))

(declare-fun m!163325 () Bool)

(assert (=> b!136868 m!163325))

(declare-fun m!163327 () Bool)

(assert (=> b!136869 m!163327))

(assert (=> b!136432 d!42817))

(declare-fun d!42819 () Bool)

(declare-fun res!65631 () Bool)

(declare-fun e!89115 () Bool)

(assert (=> d!42819 (=> (not res!65631) (not e!89115))))

(assert (=> d!42819 (= res!65631 (simpleValid!93 (v!3220 (underlying!459 thiss!992))))))

(assert (=> d!42819 (= (valid!545 (v!3220 (underlying!459 thiss!992))) e!89115)))

(declare-fun b!136870 () Bool)

(declare-fun res!65632 () Bool)

(assert (=> b!136870 (=> (not res!65632) (not e!89115))))

(assert (=> b!136870 (= res!65632 (= (arrayCountValidKeys!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))) (_size!603 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136871 () Bool)

(declare-fun res!65633 () Bool)

(assert (=> b!136871 (=> (not res!65633) (not e!89115))))

(assert (=> b!136871 (= res!65633 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!136872 () Bool)

(assert (=> b!136872 (= e!89115 (arrayNoDuplicates!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000 Nil!1698))))

(assert (= (and d!42819 res!65631) b!136870))

(assert (= (and b!136870 res!65632) b!136871))

(assert (= (and b!136871 res!65633) b!136872))

(declare-fun m!163329 () Bool)

(assert (=> d!42819 m!163329))

(declare-fun m!163331 () Bool)

(assert (=> b!136870 m!163331))

(declare-fun m!163333 () Bool)

(assert (=> b!136871 m!163333))

(declare-fun m!163335 () Bool)

(assert (=> b!136872 m!163335))

(assert (=> d!42699 d!42819))

(declare-fun d!42821 () Bool)

(declare-fun e!89116 () Bool)

(assert (=> d!42821 e!89116))

(declare-fun res!65634 () Bool)

(assert (=> d!42821 (=> res!65634 e!89116)))

(declare-fun lt!71555 () Bool)

(assert (=> d!42821 (= res!65634 (not lt!71555))))

(declare-fun lt!71556 () Bool)

(assert (=> d!42821 (= lt!71555 lt!71556)))

(declare-fun lt!71557 () Unit!4281)

(declare-fun e!89117 () Unit!4281)

(assert (=> d!42821 (= lt!71557 e!89117)))

(declare-fun c!25634 () Bool)

(assert (=> d!42821 (= c!25634 lt!71556)))

(assert (=> d!42821 (= lt!71556 (containsKey!177 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42821 (= (contains!888 lt!71267 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71555)))

(declare-fun b!136873 () Bool)

(declare-fun lt!71554 () Unit!4281)

(assert (=> b!136873 (= e!89117 lt!71554)))

(assert (=> b!136873 (= lt!71554 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136873 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136874 () Bool)

(declare-fun Unit!4298 () Unit!4281)

(assert (=> b!136874 (= e!89117 Unit!4298)))

(declare-fun b!136875 () Bool)

(assert (=> b!136875 (= e!89116 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42821 c!25634) b!136873))

(assert (= (and d!42821 (not c!25634)) b!136874))

(assert (= (and d!42821 (not res!65634)) b!136875))

(declare-fun m!163337 () Bool)

(assert (=> d!42821 m!163337))

(declare-fun m!163339 () Bool)

(assert (=> b!136873 m!163339))

(assert (=> b!136873 m!163065))

(assert (=> b!136873 m!163065))

(declare-fun m!163341 () Bool)

(assert (=> b!136873 m!163341))

(assert (=> b!136875 m!163065))

(assert (=> b!136875 m!163065))

(assert (=> b!136875 m!163341))

(assert (=> bm!14997 d!42821))

(assert (=> b!136471 d!42685))

(declare-fun b!136876 () Bool)

(declare-fun e!89130 () Bool)

(assert (=> b!136876 (= e!89130 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136877 () Bool)

(declare-fun c!25640 () Bool)

(assert (=> b!136877 (= c!25640 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89121 () ListLongMap!1659)

(declare-fun e!89125 () ListLongMap!1659)

(assert (=> b!136877 (= e!89121 e!89125)))

(declare-fun d!42823 () Bool)

(declare-fun e!89123 () Bool)

(assert (=> d!42823 e!89123))

(declare-fun res!65642 () Bool)

(assert (=> d!42823 (=> (not res!65642) (not e!89123))))

(assert (=> d!42823 (= res!65642 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71568 () ListLongMap!1659)

(declare-fun lt!71577 () ListLongMap!1659)

(assert (=> d!42823 (= lt!71568 lt!71577)))

(declare-fun lt!71576 () Unit!4281)

(declare-fun e!89124 () Unit!4281)

(assert (=> d!42823 (= lt!71576 e!89124)))

(declare-fun c!25635 () Bool)

(assert (=> d!42823 (= c!25635 e!89130)))

(declare-fun res!65639 () Bool)

(assert (=> d!42823 (=> (not res!65639) (not e!89130))))

(assert (=> d!42823 (= res!65639 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89122 () ListLongMap!1659)

(assert (=> d!42823 (= lt!71577 e!89122)))

(declare-fun c!25638 () Bool)

(assert (=> d!42823 (= c!25638 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42823 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42823 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71568)))

(declare-fun b!136878 () Bool)

(declare-fun call!15051 () ListLongMap!1659)

(assert (=> b!136878 (= e!89121 call!15051)))

(declare-fun b!136879 () Bool)

(declare-fun res!65638 () Bool)

(assert (=> b!136879 (=> (not res!65638) (not e!89123))))

(declare-fun e!89126 () Bool)

(assert (=> b!136879 (= res!65638 e!89126)))

(declare-fun c!25637 () Bool)

(assert (=> b!136879 (= c!25637 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15047 () Bool)

(declare-fun call!15052 () ListLongMap!1659)

(declare-fun call!15055 () ListLongMap!1659)

(assert (=> bm!15047 (= call!15052 call!15055)))

(declare-fun bm!15048 () Bool)

(declare-fun call!15053 () Bool)

(assert (=> bm!15048 (= call!15053 (contains!888 lt!71568 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136880 () Bool)

(declare-fun Unit!4299 () Unit!4281)

(assert (=> b!136880 (= e!89124 Unit!4299)))

(declare-fun b!136881 () Bool)

(declare-fun call!15054 () ListLongMap!1659)

(assert (=> b!136881 (= e!89122 (+!170 call!15054 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!136882 () Bool)

(declare-fun e!89119 () Bool)

(assert (=> b!136882 (= e!89119 (= (apply!117 lt!71568 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!136883 () Bool)

(declare-fun res!65636 () Bool)

(assert (=> b!136883 (=> (not res!65636) (not e!89123))))

(declare-fun e!89129 () Bool)

(assert (=> b!136883 (= res!65636 e!89129)))

(declare-fun res!65635 () Bool)

(assert (=> b!136883 (=> res!65635 e!89129)))

(declare-fun e!89127 () Bool)

(assert (=> b!136883 (= res!65635 (not e!89127))))

(declare-fun res!65641 () Bool)

(assert (=> b!136883 (=> (not res!65641) (not e!89127))))

(assert (=> b!136883 (= res!65641 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun call!15056 () ListLongMap!1659)

(declare-fun c!25639 () Bool)

(declare-fun bm!15049 () Bool)

(assert (=> bm!15049 (= call!15054 (+!170 (ite c!25638 call!15055 (ite c!25639 call!15052 call!15056)) (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!136884 () Bool)

(declare-fun e!89118 () Bool)

(assert (=> b!136884 (= e!89129 e!89118)))

(declare-fun res!65637 () Bool)

(assert (=> b!136884 (=> (not res!65637) (not e!89118))))

(assert (=> b!136884 (= res!65637 (contains!888 lt!71568 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136884 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136885 () Bool)

(assert (=> b!136885 (= e!89122 e!89121)))

(assert (=> b!136885 (= c!25639 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136886 () Bool)

(declare-fun lt!71562 () Unit!4281)

(assert (=> b!136886 (= e!89124 lt!71562)))

(declare-fun lt!71573 () ListLongMap!1659)

(assert (=> b!136886 (= lt!71573 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71567 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71567 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71574 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71574 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71571 () Unit!4281)

(assert (=> b!136886 (= lt!71571 (addStillContains!93 lt!71573 lt!71567 (zeroValue!2741 newMap!16) lt!71574))))

(assert (=> b!136886 (contains!888 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) lt!71574)))

(declare-fun lt!71570 () Unit!4281)

(assert (=> b!136886 (= lt!71570 lt!71571)))

(declare-fun lt!71579 () ListLongMap!1659)

(assert (=> b!136886 (= lt!71579 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71566 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71566 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71565 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71565 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71572 () Unit!4281)

(assert (=> b!136886 (= lt!71572 (addApplyDifferent!93 lt!71579 lt!71566 (minValue!2741 newMap!16) lt!71565))))

(assert (=> b!136886 (= (apply!117 (+!170 lt!71579 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) lt!71565) (apply!117 lt!71579 lt!71565))))

(declare-fun lt!71564 () Unit!4281)

(assert (=> b!136886 (= lt!71564 lt!71572)))

(declare-fun lt!71558 () ListLongMap!1659)

(assert (=> b!136886 (= lt!71558 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71561 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71561 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71559 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71559 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71578 () Unit!4281)

(assert (=> b!136886 (= lt!71578 (addApplyDifferent!93 lt!71558 lt!71561 (zeroValue!2741 newMap!16) lt!71559))))

(assert (=> b!136886 (= (apply!117 (+!170 lt!71558 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) lt!71559) (apply!117 lt!71558 lt!71559))))

(declare-fun lt!71560 () Unit!4281)

(assert (=> b!136886 (= lt!71560 lt!71578)))

(declare-fun lt!71563 () ListLongMap!1659)

(assert (=> b!136886 (= lt!71563 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71569 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71569 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71575 () (_ BitVec 64))

(assert (=> b!136886 (= lt!71575 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136886 (= lt!71562 (addApplyDifferent!93 lt!71563 lt!71569 (minValue!2741 newMap!16) lt!71575))))

(assert (=> b!136886 (= (apply!117 (+!170 lt!71563 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) lt!71575) (apply!117 lt!71563 lt!71575))))

(declare-fun bm!15050 () Bool)

(assert (=> bm!15050 (= call!15055 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136887 () Bool)

(declare-fun e!89120 () Bool)

(assert (=> b!136887 (= e!89123 e!89120)))

(declare-fun c!25636 () Bool)

(assert (=> b!136887 (= c!25636 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136888 () Bool)

(declare-fun e!89128 () Bool)

(assert (=> b!136888 (= e!89128 (= (apply!117 lt!71568 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!136889 () Bool)

(assert (=> b!136889 (= e!89120 e!89119)))

(declare-fun res!65640 () Bool)

(assert (=> b!136889 (= res!65640 call!15053)))

(assert (=> b!136889 (=> (not res!65640) (not e!89119))))

(declare-fun b!136890 () Bool)

(assert (=> b!136890 (= e!89118 (= (apply!117 lt!71568 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136890 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))))))))

(assert (=> b!136890 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136891 () Bool)

(assert (=> b!136891 (= e!89125 call!15051)))

(declare-fun b!136892 () Bool)

(assert (=> b!136892 (= e!89127 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136893 () Bool)

(assert (=> b!136893 (= e!89125 call!15056)))

(declare-fun b!136894 () Bool)

(assert (=> b!136894 (= e!89120 (not call!15053))))

(declare-fun b!136895 () Bool)

(declare-fun call!15050 () Bool)

(assert (=> b!136895 (= e!89126 (not call!15050))))

(declare-fun b!136896 () Bool)

(assert (=> b!136896 (= e!89126 e!89128)))

(declare-fun res!65643 () Bool)

(assert (=> b!136896 (= res!65643 call!15050)))

(assert (=> b!136896 (=> (not res!65643) (not e!89128))))

(declare-fun bm!15051 () Bool)

(assert (=> bm!15051 (= call!15050 (contains!888 lt!71568 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15052 () Bool)

(assert (=> bm!15052 (= call!15056 call!15052)))

(declare-fun bm!15053 () Bool)

(assert (=> bm!15053 (= call!15051 call!15054)))

(assert (= (and d!42823 c!25638) b!136881))

(assert (= (and d!42823 (not c!25638)) b!136885))

(assert (= (and b!136885 c!25639) b!136878))

(assert (= (and b!136885 (not c!25639)) b!136877))

(assert (= (and b!136877 c!25640) b!136891))

(assert (= (and b!136877 (not c!25640)) b!136893))

(assert (= (or b!136891 b!136893) bm!15052))

(assert (= (or b!136878 bm!15052) bm!15047))

(assert (= (or b!136878 b!136891) bm!15053))

(assert (= (or b!136881 bm!15047) bm!15050))

(assert (= (or b!136881 bm!15053) bm!15049))

(assert (= (and d!42823 res!65639) b!136876))

(assert (= (and d!42823 c!25635) b!136886))

(assert (= (and d!42823 (not c!25635)) b!136880))

(assert (= (and d!42823 res!65642) b!136883))

(assert (= (and b!136883 res!65641) b!136892))

(assert (= (and b!136883 (not res!65635)) b!136884))

(assert (= (and b!136884 res!65637) b!136890))

(assert (= (and b!136883 res!65636) b!136879))

(assert (= (and b!136879 c!25637) b!136896))

(assert (= (and b!136879 (not c!25637)) b!136895))

(assert (= (and b!136896 res!65643) b!136888))

(assert (= (or b!136896 b!136895) bm!15051))

(assert (= (and b!136879 res!65638) b!136887))

(assert (= (and b!136887 c!25636) b!136889))

(assert (= (and b!136887 (not c!25636)) b!136894))

(assert (= (and b!136889 res!65640) b!136882))

(assert (= (or b!136889 b!136894) bm!15048))

(declare-fun b_lambda!6117 () Bool)

(assert (=> (not b_lambda!6117) (not b!136890)))

(assert (=> b!136890 t!6191))

(declare-fun b_and!8477 () Bool)

(assert (= b_and!8473 (and (=> t!6191 result!4043) b_and!8477)))

(assert (=> b!136890 t!6193))

(declare-fun b_and!8479 () Bool)

(assert (= b_and!8475 (and (=> t!6193 result!4045) b_and!8479)))

(declare-fun m!163343 () Bool)

(assert (=> b!136882 m!163343))

(declare-fun m!163345 () Bool)

(assert (=> b!136886 m!163345))

(declare-fun m!163347 () Bool)

(assert (=> b!136886 m!163347))

(declare-fun m!163349 () Bool)

(assert (=> b!136886 m!163349))

(declare-fun m!163351 () Bool)

(assert (=> b!136886 m!163351))

(declare-fun m!163353 () Bool)

(assert (=> b!136886 m!163353))

(declare-fun m!163355 () Bool)

(assert (=> b!136886 m!163355))

(declare-fun m!163357 () Bool)

(assert (=> b!136886 m!163357))

(assert (=> b!136886 m!163357))

(declare-fun m!163359 () Bool)

(assert (=> b!136886 m!163359))

(declare-fun m!163361 () Bool)

(assert (=> b!136886 m!163361))

(declare-fun m!163363 () Bool)

(assert (=> b!136886 m!163363))

(declare-fun m!163365 () Bool)

(assert (=> b!136886 m!163365))

(declare-fun m!163367 () Bool)

(assert (=> b!136886 m!163367))

(declare-fun m!163369 () Bool)

(assert (=> b!136886 m!163369))

(assert (=> b!136886 m!162887))

(assert (=> b!136886 m!163347))

(assert (=> b!136886 m!163363))

(assert (=> b!136886 m!163361))

(declare-fun m!163371 () Bool)

(assert (=> b!136886 m!163371))

(declare-fun m!163373 () Bool)

(assert (=> b!136886 m!163373))

(declare-fun m!163375 () Bool)

(assert (=> b!136886 m!163375))

(assert (=> b!136884 m!162887))

(assert (=> b!136884 m!162887))

(declare-fun m!163377 () Bool)

(assert (=> b!136884 m!163377))

(assert (=> d!42823 m!162853))

(declare-fun m!163379 () Bool)

(assert (=> b!136890 m!163379))

(assert (=> b!136890 m!163379))

(assert (=> b!136890 m!162959))

(declare-fun m!163381 () Bool)

(assert (=> b!136890 m!163381))

(assert (=> b!136890 m!162887))

(assert (=> b!136890 m!162887))

(declare-fun m!163383 () Bool)

(assert (=> b!136890 m!163383))

(assert (=> b!136890 m!162959))

(declare-fun m!163385 () Bool)

(assert (=> b!136881 m!163385))

(declare-fun m!163387 () Bool)

(assert (=> bm!15051 m!163387))

(assert (=> bm!15050 m!163345))

(assert (=> b!136892 m!162887))

(assert (=> b!136892 m!162887))

(assert (=> b!136892 m!162891))

(assert (=> b!136876 m!162887))

(assert (=> b!136876 m!162887))

(assert (=> b!136876 m!162891))

(declare-fun m!163389 () Bool)

(assert (=> bm!15048 m!163389))

(declare-fun m!163391 () Bool)

(assert (=> bm!15049 m!163391))

(declare-fun m!163393 () Bool)

(assert (=> b!136888 m!163393))

(assert (=> bm!14959 d!42823))

(declare-fun b!136898 () Bool)

(declare-fun e!89131 () Bool)

(assert (=> b!136898 (= e!89131 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4701 () Bool)

(declare-fun mapRes!4701 () Bool)

(assert (=> mapIsEmpty!4701 mapRes!4701))

(declare-fun mapNonEmpty!4701 () Bool)

(declare-fun tp!11307 () Bool)

(declare-fun e!89132 () Bool)

(assert (=> mapNonEmpty!4701 (= mapRes!4701 (and tp!11307 e!89132))))

(declare-fun mapKey!4701 () (_ BitVec 32))

(declare-fun mapRest!4701 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapValue!4701 () ValueCell!1100)

(assert (=> mapNonEmpty!4701 (= mapRest!4700 (store mapRest!4701 mapKey!4701 mapValue!4701))))

(declare-fun b!136897 () Bool)

(assert (=> b!136897 (= e!89132 tp_is_empty!2887)))

(declare-fun condMapEmpty!4701 () Bool)

(declare-fun mapDefault!4701 () ValueCell!1100)

(assert (=> mapNonEmpty!4700 (= condMapEmpty!4701 (= mapRest!4700 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4701)))))

(assert (=> mapNonEmpty!4700 (= tp!11306 (and e!89131 mapRes!4701))))

(assert (= (and mapNonEmpty!4700 condMapEmpty!4701) mapIsEmpty!4701))

(assert (= (and mapNonEmpty!4700 (not condMapEmpty!4701)) mapNonEmpty!4701))

(assert (= (and mapNonEmpty!4701 ((_ is ValueCellFull!1100) mapValue!4701)) b!136897))

(assert (= (and mapNonEmpty!4700 ((_ is ValueCellFull!1100) mapDefault!4701)) b!136898))

(declare-fun m!163395 () Bool)

(assert (=> mapNonEmpty!4701 m!163395))

(declare-fun b!136900 () Bool)

(declare-fun e!89133 () Bool)

(assert (=> b!136900 (= e!89133 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4702 () Bool)

(declare-fun mapRes!4702 () Bool)

(assert (=> mapIsEmpty!4702 mapRes!4702))

(declare-fun mapNonEmpty!4702 () Bool)

(declare-fun tp!11308 () Bool)

(declare-fun e!89134 () Bool)

(assert (=> mapNonEmpty!4702 (= mapRes!4702 (and tp!11308 e!89134))))

(declare-fun mapValue!4702 () ValueCell!1100)

(declare-fun mapRest!4702 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapKey!4702 () (_ BitVec 32))

(assert (=> mapNonEmpty!4702 (= mapRest!4699 (store mapRest!4702 mapKey!4702 mapValue!4702))))

(declare-fun b!136899 () Bool)

(assert (=> b!136899 (= e!89134 tp_is_empty!2887)))

(declare-fun condMapEmpty!4702 () Bool)

(declare-fun mapDefault!4702 () ValueCell!1100)

(assert (=> mapNonEmpty!4699 (= condMapEmpty!4702 (= mapRest!4699 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4702)))))

(assert (=> mapNonEmpty!4699 (= tp!11305 (and e!89133 mapRes!4702))))

(assert (= (and mapNonEmpty!4699 condMapEmpty!4702) mapIsEmpty!4702))

(assert (= (and mapNonEmpty!4699 (not condMapEmpty!4702)) mapNonEmpty!4702))

(assert (= (and mapNonEmpty!4702 ((_ is ValueCellFull!1100) mapValue!4702)) b!136899))

(assert (= (and mapNonEmpty!4699 ((_ is ValueCellFull!1100) mapDefault!4702)) b!136900))

(declare-fun m!163397 () Bool)

(assert (=> mapNonEmpty!4702 m!163397))

(declare-fun b_lambda!6119 () Bool)

(assert (= b_lambda!6113 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6119)))

(declare-fun b_lambda!6121 () Bool)

(assert (= b_lambda!6117 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6121)))

(declare-fun b_lambda!6123 () Bool)

(assert (= b_lambda!6111 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6123)))

(declare-fun b_lambda!6125 () Bool)

(assert (= b_lambda!6109 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6125)))

(declare-fun b_lambda!6127 () Bool)

(assert (= b_lambda!6115 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6127)))

(check-sat (not d!42735) (not d!42727) (not b!136769) (not d!42739) b_and!8479 (not b!136573) (not b!136693) (not d!42791) (not b!136758) (not b!136773) (not d!42771) (not b!136770) (not bm!15020) (not b!136875) (not d!42789) (not d!42733) (not b!136704) (not b!136633) (not b!136806) (not d!42749) (not b!136634) (not bm!15048) (not bm!15045) (not b!136810) (not d!42799) (not bm!15035) (not bm!15011) (not b!136643) (not b!136869) (not b!136892) (not b!136663) (not b!136812) (not b!136784) (not d!42805) (not d!42757) (not d!42747) (not bm!15015) (not mapNonEmpty!4702) (not b!136756) (not d!42777) (not bm!15049) (not b!136881) (not d!42773) (not d!42705) (not d!42759) (not b_lambda!6127) (not b!136660) (not b!136699) (not b!136703) (not b!136625) (not b!136866) (not d!42737) (not b!136805) (not d!42801) (not b!136562) (not bm!15023) (not d!42793) (not b_lambda!6103) (not d!42753) b_and!8477 (not b!136630) (not b!136570) (not b!136886) (not b!136702) (not bm!15008) (not b!136677) (not d!42821) (not d!42785) (not b!136559) (not b!136890) (not d!42761) (not b!136858) (not b!136692) (not b!136876) (not b!136857) (not b!136861) (not b_next!2941) (not b!136667) (not b!136571) (not d!42715) (not b!136873) (not b!136647) (not bm!15022) (not d!42815) (not d!42781) (not b!136870) (not d!42767) (not d!42719) (not b_lambda!6119) (not d!42809) (not b!136683) (not bm!15046) (not d!42765) (not b!136627) (not b!136658) (not b_lambda!6125) (not b!136673) (not b!136747) (not d!42795) (not d!42775) (not bm!15021) (not b!136637) (not b!136795) (not d!42823) (not b!136882) (not b!136868) (not b!136649) (not b_next!2943) (not d!42779) (not d!42743) (not b!136863) (not bm!15051) (not b!136860) (not b!136705) (not d!42707) (not b!136867) (not b!136743) (not b!136584) (not bm!15040) (not b!136681) (not b!136871) (not b_lambda!6123) (not b!136748) (not d!42741) (not d!42807) (not d!42817) (not b!136679) (not bm!15050) (not d!42803) (not b!136803) (not b_lambda!6107) (not mapNonEmpty!4701) (not bm!15016) (not b!136888) (not bm!15034) (not b!136809) (not b!136561) (not b!136642) (not d!42797) (not b!136796) (not b!136811) (not d!42731) (not b!136563) (not b!136802) (not b!136865) (not b!136651) (not b!136587) (not b!136632) (not bm!15005) (not b!136872) (not d!42787) (not b!136636) (not b!136808) (not b!136672) (not b!136653) (not b_lambda!6121) (not d!42709) (not bm!15036) (not b!136666) (not b!136700) (not b!136626) tp_is_empty!2887 (not b!136645) (not b!136750) (not d!42819) (not b!136598) (not b!136675) (not b!136884) (not b!136568) (not b!136586) (not d!42783) (not b!136707) (not bm!15014) (not bm!15013) (not b!136804))
(check-sat b_and!8477 b_and!8479 (not b_next!2941) (not b_next!2943))
(get-model)

(declare-fun d!42825 () Bool)

(declare-fun res!65644 () Bool)

(declare-fun e!89135 () Bool)

(assert (=> d!42825 (=> res!65644 e!89135)))

(assert (=> d!42825 (= res!65644 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42825 (= (containsKey!177 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000) e!89135)))

(declare-fun b!136901 () Bool)

(declare-fun e!89136 () Bool)

(assert (=> b!136901 (= e!89135 e!89136)))

(declare-fun res!65645 () Bool)

(assert (=> b!136901 (=> (not res!65645) (not e!89136))))

(assert (=> b!136901 (= res!65645 (and (or (not ((_ is Cons!1695) (toList!845 lt!71267))) (bvsle (_1!1298 (h!2301 (toList!845 lt!71267))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1695) (toList!845 lt!71267)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71267))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136902 () Bool)

(assert (=> b!136902 (= e!89136 (containsKey!177 (t!6179 (toList!845 lt!71267)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!42825 (not res!65644)) b!136901))

(assert (= (and b!136901 res!65645) b!136902))

(declare-fun m!163399 () Bool)

(assert (=> b!136902 m!163399))

(assert (=> d!42753 d!42825))

(declare-fun d!42827 () Bool)

(assert (=> d!42827 (= (size!2540 newMap!16) (bvadd (_size!603 newMap!16) (bvsdiv (bvadd (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!136796 d!42827))

(declare-fun d!42829 () Bool)

(declare-fun e!89137 () Bool)

(assert (=> d!42829 e!89137))

(declare-fun res!65646 () Bool)

(assert (=> d!42829 (=> res!65646 e!89137)))

(declare-fun lt!71581 () Bool)

(assert (=> d!42829 (= res!65646 (not lt!71581))))

(declare-fun lt!71582 () Bool)

(assert (=> d!42829 (= lt!71581 lt!71582)))

(declare-fun lt!71583 () Unit!4281)

(declare-fun e!89138 () Unit!4281)

(assert (=> d!42829 (= lt!71583 e!89138)))

(declare-fun c!25641 () Bool)

(assert (=> d!42829 (= c!25641 lt!71582)))

(assert (=> d!42829 (= lt!71582 (containsKey!177 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42829 (= (contains!888 lt!71517 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71581)))

(declare-fun b!136903 () Bool)

(declare-fun lt!71580 () Unit!4281)

(assert (=> b!136903 (= e!89138 lt!71580)))

(assert (=> b!136903 (= lt!71580 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> b!136903 (isDefined!126 (getValueByKey!174 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!136904 () Bool)

(declare-fun Unit!4300 () Unit!4281)

(assert (=> b!136904 (= e!89138 Unit!4300)))

(declare-fun b!136905 () Bool)

(assert (=> b!136905 (= e!89137 (isDefined!126 (getValueByKey!174 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!42829 c!25641) b!136903))

(assert (= (and d!42829 (not c!25641)) b!136904))

(assert (= (and d!42829 (not res!65646)) b!136905))

(declare-fun m!163401 () Bool)

(assert (=> d!42829 m!163401))

(declare-fun m!163403 () Bool)

(assert (=> b!136903 m!163403))

(assert (=> b!136903 m!163243))

(assert (=> b!136903 m!163243))

(declare-fun m!163405 () Bool)

(assert (=> b!136903 m!163405))

(assert (=> b!136905 m!163243))

(assert (=> b!136905 m!163243))

(assert (=> b!136905 m!163405))

(assert (=> d!42791 d!42829))

(declare-fun b!136909 () Bool)

(declare-fun e!89140 () Option!180)

(assert (=> b!136909 (= e!89140 None!178)))

(declare-fun b!136906 () Bool)

(declare-fun e!89139 () Option!180)

(assert (=> b!136906 (= e!89139 (Some!179 (_2!1298 (h!2301 lt!71514))))))

(declare-fun b!136908 () Bool)

(assert (=> b!136908 (= e!89140 (getValueByKey!174 (t!6179 lt!71514) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!42831 () Bool)

(declare-fun c!25642 () Bool)

(assert (=> d!42831 (= c!25642 (and ((_ is Cons!1695) lt!71514) (= (_1!1298 (h!2301 lt!71514)) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42831 (= (getValueByKey!174 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89139)))

(declare-fun b!136907 () Bool)

(assert (=> b!136907 (= e!89139 e!89140)))

(declare-fun c!25643 () Bool)

(assert (=> b!136907 (= c!25643 (and ((_ is Cons!1695) lt!71514) (not (= (_1!1298 (h!2301 lt!71514)) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!42831 c!25642) b!136906))

(assert (= (and d!42831 (not c!25642)) b!136907))

(assert (= (and b!136907 c!25643) b!136908))

(assert (= (and b!136907 (not c!25643)) b!136909))

(declare-fun m!163407 () Bool)

(assert (=> b!136908 m!163407))

(assert (=> d!42791 d!42831))

(declare-fun d!42833 () Bool)

(assert (=> d!42833 (= (getValueByKey!174 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71586 () Unit!4281)

(declare-fun choose!847 (List!1699 (_ BitVec 64) V!3497) Unit!4281)

(assert (=> d!42833 (= lt!71586 (choose!847 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89143 () Bool)

(assert (=> d!42833 e!89143))

(declare-fun res!65651 () Bool)

(assert (=> d!42833 (=> (not res!65651) (not e!89143))))

(assert (=> d!42833 (= res!65651 (isStrictlySorted!310 lt!71514))))

(assert (=> d!42833 (= (lemmaContainsTupThenGetReturnValue!89 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71586)))

(declare-fun b!136914 () Bool)

(declare-fun res!65652 () Bool)

(assert (=> b!136914 (=> (not res!65652) (not e!89143))))

(assert (=> b!136914 (= res!65652 (containsKey!177 lt!71514 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!136915 () Bool)

(assert (=> b!136915 (= e!89143 (contains!891 lt!71514 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!42833 res!65651) b!136914))

(assert (= (and b!136914 res!65652) b!136915))

(assert (=> d!42833 m!163237))

(declare-fun m!163409 () Bool)

(assert (=> d!42833 m!163409))

(declare-fun m!163411 () Bool)

(assert (=> d!42833 m!163411))

(declare-fun m!163413 () Bool)

(assert (=> b!136914 m!163413))

(declare-fun m!163415 () Bool)

(assert (=> b!136915 m!163415))

(assert (=> d!42791 d!42833))

(declare-fun b!136936 () Bool)

(declare-fun c!25654 () Bool)

(assert (=> b!136936 (= c!25654 (and ((_ is Cons!1695) (toList!845 lt!71278)) (bvsgt (_1!1298 (h!2301 (toList!845 lt!71278))) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89155 () List!1699)

(declare-fun e!89156 () List!1699)

(assert (=> b!136936 (= e!89155 e!89156)))

(declare-fun lt!71589 () List!1699)

(declare-fun b!136937 () Bool)

(declare-fun e!89157 () Bool)

(assert (=> b!136937 (= e!89157 (contains!891 lt!71589 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun bm!15060 () Bool)

(declare-fun call!15065 () List!1699)

(declare-fun call!15063 () List!1699)

(assert (=> bm!15060 (= call!15065 call!15063)))

(declare-fun b!136938 () Bool)

(declare-fun e!89158 () List!1699)

(assert (=> b!136938 (= e!89158 e!89155)))

(declare-fun c!25652 () Bool)

(assert (=> b!136938 (= c!25652 (and ((_ is Cons!1695) (toList!845 lt!71278)) (= (_1!1298 (h!2301 (toList!845 lt!71278))) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!42835 () Bool)

(assert (=> d!42835 e!89157))

(declare-fun res!65657 () Bool)

(assert (=> d!42835 (=> (not res!65657) (not e!89157))))

(assert (=> d!42835 (= res!65657 (isStrictlySorted!310 lt!71589))))

(assert (=> d!42835 (= lt!71589 e!89158)))

(declare-fun c!25655 () Bool)

(assert (=> d!42835 (= c!25655 (and ((_ is Cons!1695) (toList!845 lt!71278)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71278))) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42835 (isStrictlySorted!310 (toList!845 lt!71278))))

(assert (=> d!42835 (= (insertStrictlySorted!92 (toList!845 lt!71278) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71589)))

(declare-fun e!89154 () List!1699)

(declare-fun b!136939 () Bool)

(assert (=> b!136939 (= e!89154 (ite c!25652 (t!6179 (toList!845 lt!71278)) (ite c!25654 (Cons!1695 (h!2301 (toList!845 lt!71278)) (t!6179 (toList!845 lt!71278))) Nil!1696)))))

(declare-fun b!136940 () Bool)

(assert (=> b!136940 (= e!89156 call!15065)))

(declare-fun bm!15061 () Bool)

(declare-fun call!15064 () List!1699)

(assert (=> bm!15061 (= call!15063 call!15064)))

(declare-fun b!136941 () Bool)

(declare-fun res!65658 () Bool)

(assert (=> b!136941 (=> (not res!65658) (not e!89157))))

(assert (=> b!136941 (= res!65658 (containsKey!177 lt!71589 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!136942 () Bool)

(assert (=> b!136942 (= e!89156 call!15065)))

(declare-fun bm!15062 () Bool)

(declare-fun $colon$colon!92 (List!1699 tuple2!2574) List!1699)

(assert (=> bm!15062 (= call!15064 ($colon$colon!92 e!89154 (ite c!25655 (h!2301 (toList!845 lt!71278)) (tuple2!2575 (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun c!25653 () Bool)

(assert (=> bm!15062 (= c!25653 c!25655)))

(declare-fun b!136943 () Bool)

(assert (=> b!136943 (= e!89158 call!15064)))

(declare-fun b!136944 () Bool)

(assert (=> b!136944 (= e!89154 (insertStrictlySorted!92 (t!6179 (toList!845 lt!71278)) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!136945 () Bool)

(assert (=> b!136945 (= e!89155 call!15063)))

(assert (= (and d!42835 c!25655) b!136943))

(assert (= (and d!42835 (not c!25655)) b!136938))

(assert (= (and b!136938 c!25652) b!136945))

(assert (= (and b!136938 (not c!25652)) b!136936))

(assert (= (and b!136936 c!25654) b!136942))

(assert (= (and b!136936 (not c!25654)) b!136940))

(assert (= (or b!136942 b!136940) bm!15060))

(assert (= (or b!136945 bm!15060) bm!15061))

(assert (= (or b!136943 bm!15061) bm!15062))

(assert (= (and bm!15062 c!25653) b!136944))

(assert (= (and bm!15062 (not c!25653)) b!136939))

(assert (= (and d!42835 res!65657) b!136941))

(assert (= (and b!136941 res!65658) b!136937))

(declare-fun m!163417 () Bool)

(assert (=> d!42835 m!163417))

(declare-fun m!163419 () Bool)

(assert (=> d!42835 m!163419))

(declare-fun m!163421 () Bool)

(assert (=> b!136944 m!163421))

(declare-fun m!163423 () Bool)

(assert (=> bm!15062 m!163423))

(declare-fun m!163425 () Bool)

(assert (=> b!136937 m!163425))

(declare-fun m!163427 () Bool)

(assert (=> b!136941 m!163427))

(assert (=> d!42791 d!42835))

(declare-fun b!136946 () Bool)

(declare-fun e!89171 () Bool)

(assert (=> b!136946 (= e!89171 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun b!136947 () Bool)

(declare-fun c!25661 () Bool)

(assert (=> b!136947 (= c!25661 (and (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89162 () ListLongMap!1659)

(declare-fun e!89166 () ListLongMap!1659)

(assert (=> b!136947 (= e!89162 e!89166)))

(declare-fun d!42837 () Bool)

(declare-fun e!89164 () Bool)

(assert (=> d!42837 e!89164))

(declare-fun res!65666 () Bool)

(assert (=> d!42837 (=> (not res!65666) (not e!89164))))

(assert (=> d!42837 (= res!65666 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))))

(declare-fun lt!71600 () ListLongMap!1659)

(declare-fun lt!71609 () ListLongMap!1659)

(assert (=> d!42837 (= lt!71600 lt!71609)))

(declare-fun lt!71608 () Unit!4281)

(declare-fun e!89165 () Unit!4281)

(assert (=> d!42837 (= lt!71608 e!89165)))

(declare-fun c!25656 () Bool)

(assert (=> d!42837 (= c!25656 e!89171)))

(declare-fun res!65663 () Bool)

(assert (=> d!42837 (=> (not res!65663) (not e!89171))))

(assert (=> d!42837 (= res!65663 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(declare-fun e!89163 () ListLongMap!1659)

(assert (=> d!42837 (= lt!71609 e!89163)))

(declare-fun c!25659 () Bool)

(assert (=> d!42837 (= c!25659 (and (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42837 (validMask!0 (mask!7202 (_2!1299 lt!71193)))))

(assert (=> d!42837 (= (getCurrentListMap!521 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))) lt!71600)))

(declare-fun b!136948 () Bool)

(declare-fun call!15067 () ListLongMap!1659)

(assert (=> b!136948 (= e!89162 call!15067)))

(declare-fun b!136949 () Bool)

(declare-fun res!65662 () Bool)

(assert (=> b!136949 (=> (not res!65662) (not e!89164))))

(declare-fun e!89167 () Bool)

(assert (=> b!136949 (= res!65662 e!89167)))

(declare-fun c!25658 () Bool)

(assert (=> b!136949 (= c!25658 (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15063 () Bool)

(declare-fun call!15068 () ListLongMap!1659)

(declare-fun call!15071 () ListLongMap!1659)

(assert (=> bm!15063 (= call!15068 call!15071)))

(declare-fun bm!15064 () Bool)

(declare-fun call!15069 () Bool)

(assert (=> bm!15064 (= call!15069 (contains!888 lt!71600 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136950 () Bool)

(declare-fun Unit!4301 () Unit!4281)

(assert (=> b!136950 (= e!89165 Unit!4301)))

(declare-fun b!136951 () Bool)

(declare-fun call!15070 () ListLongMap!1659)

(assert (=> b!136951 (= e!89163 (+!170 call!15070 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (_2!1299 lt!71193)))))))

(declare-fun b!136952 () Bool)

(declare-fun e!89160 () Bool)

(assert (=> b!136952 (= e!89160 (= (apply!117 lt!71600 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 (_2!1299 lt!71193))))))

(declare-fun b!136953 () Bool)

(declare-fun res!65660 () Bool)

(assert (=> b!136953 (=> (not res!65660) (not e!89164))))

(declare-fun e!89170 () Bool)

(assert (=> b!136953 (= res!65660 e!89170)))

(declare-fun res!65659 () Bool)

(assert (=> b!136953 (=> res!65659 e!89170)))

(declare-fun e!89168 () Bool)

(assert (=> b!136953 (= res!65659 (not e!89168))))

(declare-fun res!65665 () Bool)

(assert (=> b!136953 (=> (not res!65665) (not e!89168))))

(assert (=> b!136953 (= res!65665 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(declare-fun call!15072 () ListLongMap!1659)

(declare-fun c!25660 () Bool)

(declare-fun bm!15065 () Bool)

(assert (=> bm!15065 (= call!15070 (+!170 (ite c!25659 call!15071 (ite c!25660 call!15068 call!15072)) (ite (or c!25659 c!25660) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (_2!1299 lt!71193))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (_2!1299 lt!71193))))))))

(declare-fun b!136954 () Bool)

(declare-fun e!89159 () Bool)

(assert (=> b!136954 (= e!89170 e!89159)))

(declare-fun res!65661 () Bool)

(assert (=> b!136954 (=> (not res!65661) (not e!89159))))

(assert (=> b!136954 (= res!65661 (contains!888 lt!71600 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(assert (=> b!136954 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(declare-fun b!136955 () Bool)

(assert (=> b!136955 (= e!89163 e!89162)))

(assert (=> b!136955 (= c!25660 (and (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136956 () Bool)

(declare-fun lt!71594 () Unit!4281)

(assert (=> b!136956 (= e!89165 lt!71594)))

(declare-fun lt!71605 () ListLongMap!1659)

(assert (=> b!136956 (= lt!71605 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun lt!71599 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71599 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71606 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71606 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000))))

(declare-fun lt!71603 () Unit!4281)

(assert (=> b!136956 (= lt!71603 (addStillContains!93 lt!71605 lt!71599 (zeroValue!2741 (_2!1299 lt!71193)) lt!71606))))

(assert (=> b!136956 (contains!888 (+!170 lt!71605 (tuple2!2575 lt!71599 (zeroValue!2741 (_2!1299 lt!71193)))) lt!71606)))

(declare-fun lt!71602 () Unit!4281)

(assert (=> b!136956 (= lt!71602 lt!71603)))

(declare-fun lt!71611 () ListLongMap!1659)

(assert (=> b!136956 (= lt!71611 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun lt!71598 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71598 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71597 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71597 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000))))

(declare-fun lt!71604 () Unit!4281)

(assert (=> b!136956 (= lt!71604 (addApplyDifferent!93 lt!71611 lt!71598 (minValue!2741 (_2!1299 lt!71193)) lt!71597))))

(assert (=> b!136956 (= (apply!117 (+!170 lt!71611 (tuple2!2575 lt!71598 (minValue!2741 (_2!1299 lt!71193)))) lt!71597) (apply!117 lt!71611 lt!71597))))

(declare-fun lt!71596 () Unit!4281)

(assert (=> b!136956 (= lt!71596 lt!71604)))

(declare-fun lt!71590 () ListLongMap!1659)

(assert (=> b!136956 (= lt!71590 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun lt!71593 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71593 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71591 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71591 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000))))

(declare-fun lt!71610 () Unit!4281)

(assert (=> b!136956 (= lt!71610 (addApplyDifferent!93 lt!71590 lt!71593 (zeroValue!2741 (_2!1299 lt!71193)) lt!71591))))

(assert (=> b!136956 (= (apply!117 (+!170 lt!71590 (tuple2!2575 lt!71593 (zeroValue!2741 (_2!1299 lt!71193)))) lt!71591) (apply!117 lt!71590 lt!71591))))

(declare-fun lt!71592 () Unit!4281)

(assert (=> b!136956 (= lt!71592 lt!71610)))

(declare-fun lt!71595 () ListLongMap!1659)

(assert (=> b!136956 (= lt!71595 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun lt!71601 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71601 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71607 () (_ BitVec 64))

(assert (=> b!136956 (= lt!71607 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000))))

(assert (=> b!136956 (= lt!71594 (addApplyDifferent!93 lt!71595 lt!71601 (minValue!2741 (_2!1299 lt!71193)) lt!71607))))

(assert (=> b!136956 (= (apply!117 (+!170 lt!71595 (tuple2!2575 lt!71601 (minValue!2741 (_2!1299 lt!71193)))) lt!71607) (apply!117 lt!71595 lt!71607))))

(declare-fun bm!15066 () Bool)

(assert (=> bm!15066 (= call!15071 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (_2!1299 lt!71193)) (_values!2871 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193)) (extraKeys!2649 (_2!1299 lt!71193)) (zeroValue!2741 (_2!1299 lt!71193)) (minValue!2741 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71193))))))

(declare-fun b!136957 () Bool)

(declare-fun e!89161 () Bool)

(assert (=> b!136957 (= e!89164 e!89161)))

(declare-fun c!25657 () Bool)

(assert (=> b!136957 (= c!25657 (not (= (bvand (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136958 () Bool)

(declare-fun e!89169 () Bool)

(assert (=> b!136958 (= e!89169 (= (apply!117 lt!71600 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 (_2!1299 lt!71193))))))

(declare-fun b!136959 () Bool)

(assert (=> b!136959 (= e!89161 e!89160)))

(declare-fun res!65664 () Bool)

(assert (=> b!136959 (= res!65664 call!15069)))

(assert (=> b!136959 (=> (not res!65664) (not e!89160))))

(declare-fun b!136960 () Bool)

(assert (=> b!136960 (= e!89159 (= (apply!117 lt!71600 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (_values!2871 (_2!1299 lt!71193))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 (_2!1299 lt!71193)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136960 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (_values!2871 (_2!1299 lt!71193)))))))

(assert (=> b!136960 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(declare-fun b!136961 () Bool)

(assert (=> b!136961 (= e!89166 call!15067)))

(declare-fun b!136962 () Bool)

(assert (=> b!136962 (= e!89168 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun b!136963 () Bool)

(assert (=> b!136963 (= e!89166 call!15072)))

(declare-fun b!136964 () Bool)

(assert (=> b!136964 (= e!89161 (not call!15069))))

(declare-fun b!136965 () Bool)

(declare-fun call!15066 () Bool)

(assert (=> b!136965 (= e!89167 (not call!15066))))

(declare-fun b!136966 () Bool)

(assert (=> b!136966 (= e!89167 e!89169)))

(declare-fun res!65667 () Bool)

(assert (=> b!136966 (= res!65667 call!15066)))

(assert (=> b!136966 (=> (not res!65667) (not e!89169))))

(declare-fun bm!15067 () Bool)

(assert (=> bm!15067 (= call!15066 (contains!888 lt!71600 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15068 () Bool)

(assert (=> bm!15068 (= call!15072 call!15068)))

(declare-fun bm!15069 () Bool)

(assert (=> bm!15069 (= call!15067 call!15070)))

(assert (= (and d!42837 c!25659) b!136951))

(assert (= (and d!42837 (not c!25659)) b!136955))

(assert (= (and b!136955 c!25660) b!136948))

(assert (= (and b!136955 (not c!25660)) b!136947))

(assert (= (and b!136947 c!25661) b!136961))

(assert (= (and b!136947 (not c!25661)) b!136963))

(assert (= (or b!136961 b!136963) bm!15068))

(assert (= (or b!136948 bm!15068) bm!15063))

(assert (= (or b!136948 b!136961) bm!15069))

(assert (= (or b!136951 bm!15063) bm!15066))

(assert (= (or b!136951 bm!15069) bm!15065))

(assert (= (and d!42837 res!65663) b!136946))

(assert (= (and d!42837 c!25656) b!136956))

(assert (= (and d!42837 (not c!25656)) b!136950))

(assert (= (and d!42837 res!65666) b!136953))

(assert (= (and b!136953 res!65665) b!136962))

(assert (= (and b!136953 (not res!65659)) b!136954))

(assert (= (and b!136954 res!65661) b!136960))

(assert (= (and b!136953 res!65660) b!136949))

(assert (= (and b!136949 c!25658) b!136966))

(assert (= (and b!136949 (not c!25658)) b!136965))

(assert (= (and b!136966 res!65667) b!136958))

(assert (= (or b!136966 b!136965) bm!15067))

(assert (= (and b!136949 res!65662) b!136957))

(assert (= (and b!136957 c!25657) b!136959))

(assert (= (and b!136957 (not c!25657)) b!136964))

(assert (= (and b!136959 res!65664) b!136952))

(assert (= (or b!136959 b!136964) bm!15064))

(declare-fun b_lambda!6129 () Bool)

(assert (=> (not b_lambda!6129) (not b!136960)))

(declare-fun t!6195 () Bool)

(declare-fun tb!2457 () Bool)

(assert (=> (and b!136212 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 (_2!1299 lt!71193))) t!6195) tb!2457))

(declare-fun result!4047 () Bool)

(assert (=> tb!2457 (= result!4047 tp_is_empty!2887)))

(assert (=> b!136960 t!6195))

(declare-fun b_and!8481 () Bool)

(assert (= b_and!8477 (and (=> t!6195 result!4047) b_and!8481)))

(declare-fun t!6197 () Bool)

(declare-fun tb!2459 () Bool)

(assert (=> (and b!136215 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (_2!1299 lt!71193))) t!6197) tb!2459))

(declare-fun result!4049 () Bool)

(assert (= result!4049 result!4047))

(assert (=> b!136960 t!6197))

(declare-fun b_and!8483 () Bool)

(assert (= b_and!8479 (and (=> t!6197 result!4049) b_and!8483)))

(declare-fun m!163429 () Bool)

(assert (=> b!136952 m!163429))

(declare-fun m!163431 () Bool)

(assert (=> b!136956 m!163431))

(declare-fun m!163433 () Bool)

(assert (=> b!136956 m!163433))

(declare-fun m!163435 () Bool)

(assert (=> b!136956 m!163435))

(declare-fun m!163437 () Bool)

(assert (=> b!136956 m!163437))

(declare-fun m!163439 () Bool)

(assert (=> b!136956 m!163439))

(declare-fun m!163441 () Bool)

(assert (=> b!136956 m!163441))

(declare-fun m!163443 () Bool)

(assert (=> b!136956 m!163443))

(assert (=> b!136956 m!163443))

(declare-fun m!163445 () Bool)

(assert (=> b!136956 m!163445))

(declare-fun m!163447 () Bool)

(assert (=> b!136956 m!163447))

(declare-fun m!163449 () Bool)

(assert (=> b!136956 m!163449))

(declare-fun m!163451 () Bool)

(assert (=> b!136956 m!163451))

(declare-fun m!163453 () Bool)

(assert (=> b!136956 m!163453))

(declare-fun m!163455 () Bool)

(assert (=> b!136956 m!163455))

(declare-fun m!163457 () Bool)

(assert (=> b!136956 m!163457))

(assert (=> b!136956 m!163433))

(assert (=> b!136956 m!163449))

(assert (=> b!136956 m!163447))

(declare-fun m!163459 () Bool)

(assert (=> b!136956 m!163459))

(declare-fun m!163461 () Bool)

(assert (=> b!136956 m!163461))

(declare-fun m!163463 () Bool)

(assert (=> b!136956 m!163463))

(assert (=> b!136954 m!163457))

(assert (=> b!136954 m!163457))

(declare-fun m!163465 () Bool)

(assert (=> b!136954 m!163465))

(declare-fun m!163467 () Bool)

(assert (=> d!42837 m!163467))

(declare-fun m!163469 () Bool)

(assert (=> b!136960 m!163469))

(assert (=> b!136960 m!163469))

(declare-fun m!163471 () Bool)

(assert (=> b!136960 m!163471))

(declare-fun m!163473 () Bool)

(assert (=> b!136960 m!163473))

(assert (=> b!136960 m!163457))

(assert (=> b!136960 m!163457))

(declare-fun m!163475 () Bool)

(assert (=> b!136960 m!163475))

(assert (=> b!136960 m!163471))

(declare-fun m!163477 () Bool)

(assert (=> b!136951 m!163477))

(declare-fun m!163479 () Bool)

(assert (=> bm!15067 m!163479))

(assert (=> bm!15066 m!163431))

(assert (=> b!136962 m!163457))

(assert (=> b!136962 m!163457))

(declare-fun m!163481 () Bool)

(assert (=> b!136962 m!163481))

(assert (=> b!136946 m!163457))

(assert (=> b!136946 m!163457))

(assert (=> b!136946 m!163481))

(declare-fun m!163483 () Bool)

(assert (=> bm!15064 m!163483))

(declare-fun m!163485 () Bool)

(assert (=> bm!15065 m!163485))

(declare-fun m!163487 () Bool)

(assert (=> b!136958 m!163487))

(assert (=> d!42709 d!42837))

(declare-fun b!136970 () Bool)

(declare-fun e!89173 () Option!180)

(assert (=> b!136970 (= e!89173 None!178)))

(declare-fun b!136967 () Bool)

(declare-fun e!89172 () Option!180)

(assert (=> b!136967 (= e!89172 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71549)))))))

(declare-fun b!136969 () Bool)

(assert (=> b!136969 (= e!89173 (getValueByKey!174 (t!6179 (toList!845 lt!71549)) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!42839 () Bool)

(declare-fun c!25662 () Bool)

(assert (=> d!42839 (= c!25662 (and ((_ is Cons!1695) (toList!845 lt!71549)) (= (_1!1298 (h!2301 (toList!845 lt!71549))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42839 (= (getValueByKey!174 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89172)))

(declare-fun b!136968 () Bool)

(assert (=> b!136968 (= e!89172 e!89173)))

(declare-fun c!25663 () Bool)

(assert (=> b!136968 (= c!25663 (and ((_ is Cons!1695) (toList!845 lt!71549)) (not (= (_1!1298 (h!2301 (toList!845 lt!71549))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!42839 c!25662) b!136967))

(assert (= (and d!42839 (not c!25662)) b!136968))

(assert (= (and b!136968 c!25663) b!136969))

(assert (= (and b!136968 (not c!25663)) b!136970))

(declare-fun m!163489 () Bool)

(assert (=> b!136969 m!163489))

(assert (=> b!136866 d!42839))

(declare-fun d!42841 () Bool)

(assert (=> d!42841 (= (validMask!0 (mask!7202 newMap!16)) (and (or (= (mask!7202 newMap!16) #b00000000000000000000000000000111) (= (mask!7202 newMap!16) #b00000000000000000000000000001111) (= (mask!7202 newMap!16) #b00000000000000000000000000011111) (= (mask!7202 newMap!16) #b00000000000000000000000000111111) (= (mask!7202 newMap!16) #b00000000000000000000000001111111) (= (mask!7202 newMap!16) #b00000000000000000000000011111111) (= (mask!7202 newMap!16) #b00000000000000000000000111111111) (= (mask!7202 newMap!16) #b00000000000000000000001111111111) (= (mask!7202 newMap!16) #b00000000000000000000011111111111) (= (mask!7202 newMap!16) #b00000000000000000000111111111111) (= (mask!7202 newMap!16) #b00000000000000000001111111111111) (= (mask!7202 newMap!16) #b00000000000000000011111111111111) (= (mask!7202 newMap!16) #b00000000000000000111111111111111) (= (mask!7202 newMap!16) #b00000000000000001111111111111111) (= (mask!7202 newMap!16) #b00000000000000011111111111111111) (= (mask!7202 newMap!16) #b00000000000000111111111111111111) (= (mask!7202 newMap!16) #b00000000000001111111111111111111) (= (mask!7202 newMap!16) #b00000000000011111111111111111111) (= (mask!7202 newMap!16) #b00000000000111111111111111111111) (= (mask!7202 newMap!16) #b00000000001111111111111111111111) (= (mask!7202 newMap!16) #b00000000011111111111111111111111) (= (mask!7202 newMap!16) #b00000000111111111111111111111111) (= (mask!7202 newMap!16) #b00000001111111111111111111111111) (= (mask!7202 newMap!16) #b00000011111111111111111111111111) (= (mask!7202 newMap!16) #b00000111111111111111111111111111) (= (mask!7202 newMap!16) #b00001111111111111111111111111111) (= (mask!7202 newMap!16) #b00011111111111111111111111111111) (= (mask!7202 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!7202 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!42733 d!42841))

(declare-fun d!42843 () Bool)

(declare-fun lt!71614 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!135 (List!1699) (InoxSet tuple2!2574))

(assert (=> d!42843 (= lt!71614 (select (content!135 (toList!845 lt!71501)) (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89179 () Bool)

(assert (=> d!42843 (= lt!71614 e!89179)))

(declare-fun res!65672 () Bool)

(assert (=> d!42843 (=> (not res!65672) (not e!89179))))

(assert (=> d!42843 (= res!65672 ((_ is Cons!1695) (toList!845 lt!71501)))))

(assert (=> d!42843 (= (contains!891 (toList!845 lt!71501) (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71614)))

(declare-fun b!136975 () Bool)

(declare-fun e!89178 () Bool)

(assert (=> b!136975 (= e!89179 e!89178)))

(declare-fun res!65673 () Bool)

(assert (=> b!136975 (=> res!65673 e!89178)))

(assert (=> b!136975 (= res!65673 (= (h!2301 (toList!845 lt!71501)) (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!136976 () Bool)

(assert (=> b!136976 (= e!89178 (contains!891 (t!6179 (toList!845 lt!71501)) (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42843 res!65672) b!136975))

(assert (= (and b!136975 (not res!65673)) b!136976))

(declare-fun m!163491 () Bool)

(assert (=> d!42843 m!163491))

(declare-fun m!163493 () Bool)

(assert (=> d!42843 m!163493))

(declare-fun m!163495 () Bool)

(assert (=> b!136976 m!163495))

(assert (=> b!136803 d!42843))

(declare-fun d!42845 () Bool)

(declare-fun res!65674 () Bool)

(declare-fun e!89180 () Bool)

(assert (=> d!42845 (=> res!65674 e!89180)))

(assert (=> d!42845 (= res!65674 (and ((_ is Cons!1695) (t!6179 (toList!845 lt!71090))) (= (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090)))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42845 (= (containsKey!177 (t!6179 (toList!845 lt!71090)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89180)))

(declare-fun b!136977 () Bool)

(declare-fun e!89181 () Bool)

(assert (=> b!136977 (= e!89180 e!89181)))

(declare-fun res!65675 () Bool)

(assert (=> b!136977 (=> (not res!65675) (not e!89181))))

(assert (=> b!136977 (= res!65675 (and (or (not ((_ is Cons!1695) (t!6179 (toList!845 lt!71090)))) (bvsle (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090)))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) ((_ is Cons!1695) (t!6179 (toList!845 lt!71090))) (bvslt (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090)))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(declare-fun b!136978 () Bool)

(assert (=> b!136978 (= e!89181 (containsKey!177 (t!6179 (t!6179 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!42845 (not res!65674)) b!136977))

(assert (= (and b!136977 res!65675) b!136978))

(assert (=> b!136978 m!162605))

(declare-fun m!163497 () Bool)

(assert (=> b!136978 m!163497))

(assert (=> b!136699 d!42845))

(declare-fun d!42847 () Bool)

(declare-fun e!89182 () Bool)

(assert (=> d!42847 e!89182))

(declare-fun res!65677 () Bool)

(assert (=> d!42847 (=> (not res!65677) (not e!89182))))

(declare-fun lt!71618 () ListLongMap!1659)

(assert (=> d!42847 (= res!65677 (contains!888 lt!71618 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71615 () List!1699)

(assert (=> d!42847 (= lt!71618 (ListLongMap!1660 lt!71615))))

(declare-fun lt!71616 () Unit!4281)

(declare-fun lt!71617 () Unit!4281)

(assert (=> d!42847 (= lt!71616 lt!71617)))

(assert (=> d!42847 (= (getValueByKey!174 lt!71615 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42847 (= lt!71617 (lemmaContainsTupThenGetReturnValue!89 lt!71615 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42847 (= lt!71615 (insertStrictlySorted!92 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42847 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71618)))

(declare-fun b!136979 () Bool)

(declare-fun res!65676 () Bool)

(assert (=> b!136979 (=> (not res!65676) (not e!89182))))

(assert (=> b!136979 (= res!65676 (= (getValueByKey!174 (toList!845 lt!71618) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!136980 () Bool)

(assert (=> b!136980 (= e!89182 (contains!891 (toList!845 lt!71618) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42847 res!65677) b!136979))

(assert (= (and b!136979 res!65676) b!136980))

(declare-fun m!163499 () Bool)

(assert (=> d!42847 m!163499))

(declare-fun m!163501 () Bool)

(assert (=> d!42847 m!163501))

(declare-fun m!163503 () Bool)

(assert (=> d!42847 m!163503))

(declare-fun m!163505 () Bool)

(assert (=> d!42847 m!163505))

(declare-fun m!163507 () Bool)

(assert (=> b!136979 m!163507))

(declare-fun m!163509 () Bool)

(assert (=> b!136980 m!163509))

(assert (=> b!136666 d!42847))

(assert (=> b!136666 d!42733))

(declare-fun b!136981 () Bool)

(declare-fun e!89195 () Bool)

(assert (=> b!136981 (= e!89195 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136982 () Bool)

(declare-fun c!25669 () Bool)

(assert (=> b!136982 (= c!25669 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89186 () ListLongMap!1659)

(declare-fun e!89190 () ListLongMap!1659)

(assert (=> b!136982 (= e!89186 e!89190)))

(declare-fun d!42849 () Bool)

(declare-fun e!89188 () Bool)

(assert (=> d!42849 e!89188))

(declare-fun res!65685 () Bool)

(assert (=> d!42849 (=> (not res!65685) (not e!89188))))

(assert (=> d!42849 (= res!65685 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71629 () ListLongMap!1659)

(declare-fun lt!71638 () ListLongMap!1659)

(assert (=> d!42849 (= lt!71629 lt!71638)))

(declare-fun lt!71637 () Unit!4281)

(declare-fun e!89189 () Unit!4281)

(assert (=> d!42849 (= lt!71637 e!89189)))

(declare-fun c!25664 () Bool)

(assert (=> d!42849 (= c!25664 e!89195)))

(declare-fun res!65682 () Bool)

(assert (=> d!42849 (=> (not res!65682) (not e!89195))))

(assert (=> d!42849 (= res!65682 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89187 () ListLongMap!1659)

(assert (=> d!42849 (= lt!71638 e!89187)))

(declare-fun c!25667 () Bool)

(assert (=> d!42849 (= c!25667 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42849 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42849 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71629)))

(declare-fun b!136983 () Bool)

(declare-fun call!15074 () ListLongMap!1659)

(assert (=> b!136983 (= e!89186 call!15074)))

(declare-fun b!136984 () Bool)

(declare-fun res!65681 () Bool)

(assert (=> b!136984 (=> (not res!65681) (not e!89188))))

(declare-fun e!89191 () Bool)

(assert (=> b!136984 (= res!65681 e!89191)))

(declare-fun c!25666 () Bool)

(assert (=> b!136984 (= c!25666 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15070 () Bool)

(declare-fun call!15075 () ListLongMap!1659)

(declare-fun call!15078 () ListLongMap!1659)

(assert (=> bm!15070 (= call!15075 call!15078)))

(declare-fun bm!15071 () Bool)

(declare-fun call!15076 () Bool)

(assert (=> bm!15071 (= call!15076 (contains!888 lt!71629 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136985 () Bool)

(declare-fun Unit!4302 () Unit!4281)

(assert (=> b!136985 (= e!89189 Unit!4302)))

(declare-fun b!136986 () Bool)

(declare-fun call!15077 () ListLongMap!1659)

(assert (=> b!136986 (= e!89187 (+!170 call!15077 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!136987 () Bool)

(declare-fun e!89184 () Bool)

(assert (=> b!136987 (= e!89184 (= (apply!117 lt!71629 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!136988 () Bool)

(declare-fun res!65679 () Bool)

(assert (=> b!136988 (=> (not res!65679) (not e!89188))))

(declare-fun e!89194 () Bool)

(assert (=> b!136988 (= res!65679 e!89194)))

(declare-fun res!65678 () Bool)

(assert (=> b!136988 (=> res!65678 e!89194)))

(declare-fun e!89192 () Bool)

(assert (=> b!136988 (= res!65678 (not e!89192))))

(declare-fun res!65684 () Bool)

(assert (=> b!136988 (=> (not res!65684) (not e!89192))))

(assert (=> b!136988 (= res!65684 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun call!15079 () ListLongMap!1659)

(declare-fun c!25668 () Bool)

(declare-fun bm!15072 () Bool)

(assert (=> bm!15072 (= call!15077 (+!170 (ite c!25667 call!15078 (ite c!25668 call!15075 call!15079)) (ite (or c!25667 c!25668) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!136989 () Bool)

(declare-fun e!89183 () Bool)

(assert (=> b!136989 (= e!89194 e!89183)))

(declare-fun res!65680 () Bool)

(assert (=> b!136989 (=> (not res!65680) (not e!89183))))

(assert (=> b!136989 (= res!65680 (contains!888 lt!71629 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136989 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136990 () Bool)

(assert (=> b!136990 (= e!89187 e!89186)))

(assert (=> b!136990 (= c!25668 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136991 () Bool)

(declare-fun lt!71623 () Unit!4281)

(assert (=> b!136991 (= e!89189 lt!71623)))

(declare-fun lt!71634 () ListLongMap!1659)

(assert (=> b!136991 (= lt!71634 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71628 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71628 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71635 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71635 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71632 () Unit!4281)

(assert (=> b!136991 (= lt!71632 (addStillContains!93 lt!71634 lt!71628 (zeroValue!2741 newMap!16) lt!71635))))

(assert (=> b!136991 (contains!888 (+!170 lt!71634 (tuple2!2575 lt!71628 (zeroValue!2741 newMap!16))) lt!71635)))

(declare-fun lt!71631 () Unit!4281)

(assert (=> b!136991 (= lt!71631 lt!71632)))

(declare-fun lt!71640 () ListLongMap!1659)

(assert (=> b!136991 (= lt!71640 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71627 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71627 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71626 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71626 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71633 () Unit!4281)

(assert (=> b!136991 (= lt!71633 (addApplyDifferent!93 lt!71640 lt!71627 (minValue!2741 newMap!16) lt!71626))))

(assert (=> b!136991 (= (apply!117 (+!170 lt!71640 (tuple2!2575 lt!71627 (minValue!2741 newMap!16))) lt!71626) (apply!117 lt!71640 lt!71626))))

(declare-fun lt!71625 () Unit!4281)

(assert (=> b!136991 (= lt!71625 lt!71633)))

(declare-fun lt!71619 () ListLongMap!1659)

(assert (=> b!136991 (= lt!71619 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71622 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71622 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71620 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71620 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71639 () Unit!4281)

(assert (=> b!136991 (= lt!71639 (addApplyDifferent!93 lt!71619 lt!71622 (zeroValue!2741 newMap!16) lt!71620))))

(assert (=> b!136991 (= (apply!117 (+!170 lt!71619 (tuple2!2575 lt!71622 (zeroValue!2741 newMap!16))) lt!71620) (apply!117 lt!71619 lt!71620))))

(declare-fun lt!71621 () Unit!4281)

(assert (=> b!136991 (= lt!71621 lt!71639)))

(declare-fun lt!71624 () ListLongMap!1659)

(assert (=> b!136991 (= lt!71624 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71630 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71630 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71636 () (_ BitVec 64))

(assert (=> b!136991 (= lt!71636 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136991 (= lt!71623 (addApplyDifferent!93 lt!71624 lt!71630 (minValue!2741 newMap!16) lt!71636))))

(assert (=> b!136991 (= (apply!117 (+!170 lt!71624 (tuple2!2575 lt!71630 (minValue!2741 newMap!16))) lt!71636) (apply!117 lt!71624 lt!71636))))

(declare-fun bm!15073 () Bool)

(assert (=> bm!15073 (= call!15078 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!136992 () Bool)

(declare-fun e!89185 () Bool)

(assert (=> b!136992 (= e!89188 e!89185)))

(declare-fun c!25665 () Bool)

(assert (=> b!136992 (= c!25665 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136993 () Bool)

(declare-fun e!89193 () Bool)

(assert (=> b!136993 (= e!89193 (= (apply!117 lt!71629 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!136994 () Bool)

(assert (=> b!136994 (= e!89185 e!89184)))

(declare-fun res!65683 () Bool)

(assert (=> b!136994 (= res!65683 call!15076)))

(assert (=> b!136994 (=> (not res!65683) (not e!89184))))

(declare-fun b!136995 () Bool)

(assert (=> b!136995 (= e!89183 (= (apply!117 lt!71629 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136995 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))))))

(assert (=> b!136995 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!136996 () Bool)

(assert (=> b!136996 (= e!89190 call!15074)))

(declare-fun b!136997 () Bool)

(assert (=> b!136997 (= e!89192 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136998 () Bool)

(assert (=> b!136998 (= e!89190 call!15079)))

(declare-fun b!136999 () Bool)

(assert (=> b!136999 (= e!89185 (not call!15076))))

(declare-fun b!137000 () Bool)

(declare-fun call!15073 () Bool)

(assert (=> b!137000 (= e!89191 (not call!15073))))

(declare-fun b!137001 () Bool)

(assert (=> b!137001 (= e!89191 e!89193)))

(declare-fun res!65686 () Bool)

(assert (=> b!137001 (= res!65686 call!15073)))

(assert (=> b!137001 (=> (not res!65686) (not e!89193))))

(declare-fun bm!15074 () Bool)

(assert (=> bm!15074 (= call!15073 (contains!888 lt!71629 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15075 () Bool)

(assert (=> bm!15075 (= call!15079 call!15075)))

(declare-fun bm!15076 () Bool)

(assert (=> bm!15076 (= call!15074 call!15077)))

(assert (= (and d!42849 c!25667) b!136986))

(assert (= (and d!42849 (not c!25667)) b!136990))

(assert (= (and b!136990 c!25668) b!136983))

(assert (= (and b!136990 (not c!25668)) b!136982))

(assert (= (and b!136982 c!25669) b!136996))

(assert (= (and b!136982 (not c!25669)) b!136998))

(assert (= (or b!136996 b!136998) bm!15075))

(assert (= (or b!136983 bm!15075) bm!15070))

(assert (= (or b!136983 b!136996) bm!15076))

(assert (= (or b!136986 bm!15070) bm!15073))

(assert (= (or b!136986 bm!15076) bm!15072))

(assert (= (and d!42849 res!65682) b!136981))

(assert (= (and d!42849 c!25664) b!136991))

(assert (= (and d!42849 (not c!25664)) b!136985))

(assert (= (and d!42849 res!65685) b!136988))

(assert (= (and b!136988 res!65684) b!136997))

(assert (= (and b!136988 (not res!65678)) b!136989))

(assert (= (and b!136989 res!65680) b!136995))

(assert (= (and b!136988 res!65679) b!136984))

(assert (= (and b!136984 c!25666) b!137001))

(assert (= (and b!136984 (not c!25666)) b!137000))

(assert (= (and b!137001 res!65686) b!136993))

(assert (= (or b!137001 b!137000) bm!15074))

(assert (= (and b!136984 res!65681) b!136992))

(assert (= (and b!136992 c!25665) b!136994))

(assert (= (and b!136992 (not c!25665)) b!136999))

(assert (= (and b!136994 res!65683) b!136987))

(assert (= (or b!136994 b!136999) bm!15071))

(declare-fun b_lambda!6131 () Bool)

(assert (=> (not b_lambda!6131) (not b!136995)))

(assert (=> b!136995 t!6191))

(declare-fun b_and!8485 () Bool)

(assert (= b_and!8481 (and (=> t!6191 result!4043) b_and!8485)))

(assert (=> b!136995 t!6193))

(declare-fun b_and!8487 () Bool)

(assert (= b_and!8483 (and (=> t!6193 result!4045) b_and!8487)))

(declare-fun m!163511 () Bool)

(assert (=> b!136987 m!163511))

(declare-fun m!163513 () Bool)

(assert (=> b!136991 m!163513))

(declare-fun m!163515 () Bool)

(assert (=> b!136991 m!163515))

(declare-fun m!163517 () Bool)

(assert (=> b!136991 m!163517))

(declare-fun m!163519 () Bool)

(assert (=> b!136991 m!163519))

(declare-fun m!163521 () Bool)

(assert (=> b!136991 m!163521))

(declare-fun m!163523 () Bool)

(assert (=> b!136991 m!163523))

(declare-fun m!163525 () Bool)

(assert (=> b!136991 m!163525))

(assert (=> b!136991 m!163525))

(declare-fun m!163527 () Bool)

(assert (=> b!136991 m!163527))

(declare-fun m!163529 () Bool)

(assert (=> b!136991 m!163529))

(declare-fun m!163531 () Bool)

(assert (=> b!136991 m!163531))

(declare-fun m!163533 () Bool)

(assert (=> b!136991 m!163533))

(declare-fun m!163535 () Bool)

(assert (=> b!136991 m!163535))

(declare-fun m!163537 () Bool)

(assert (=> b!136991 m!163537))

(assert (=> b!136991 m!162887))

(assert (=> b!136991 m!163515))

(assert (=> b!136991 m!163531))

(assert (=> b!136991 m!163529))

(declare-fun m!163539 () Bool)

(assert (=> b!136991 m!163539))

(declare-fun m!163541 () Bool)

(assert (=> b!136991 m!163541))

(declare-fun m!163543 () Bool)

(assert (=> b!136991 m!163543))

(assert (=> b!136989 m!162887))

(assert (=> b!136989 m!162887))

(declare-fun m!163545 () Bool)

(assert (=> b!136989 m!163545))

(assert (=> d!42849 m!162853))

(declare-fun m!163547 () Bool)

(assert (=> b!136995 m!163547))

(assert (=> b!136995 m!163547))

(assert (=> b!136995 m!162959))

(declare-fun m!163549 () Bool)

(assert (=> b!136995 m!163549))

(assert (=> b!136995 m!162887))

(assert (=> b!136995 m!162887))

(declare-fun m!163551 () Bool)

(assert (=> b!136995 m!163551))

(assert (=> b!136995 m!162959))

(declare-fun m!163553 () Bool)

(assert (=> b!136986 m!163553))

(declare-fun m!163555 () Bool)

(assert (=> bm!15074 m!163555))

(assert (=> bm!15073 m!163513))

(assert (=> b!136997 m!162887))

(assert (=> b!136997 m!162887))

(assert (=> b!136997 m!162891))

(assert (=> b!136981 m!162887))

(assert (=> b!136981 m!162887))

(assert (=> b!136981 m!162891))

(declare-fun m!163557 () Bool)

(assert (=> bm!15071 m!163557))

(declare-fun m!163559 () Bool)

(assert (=> bm!15072 m!163559))

(declare-fun m!163561 () Bool)

(assert (=> b!136993 m!163561))

(assert (=> b!136666 d!42849))

(declare-fun d!42851 () Bool)

(assert (=> d!42851 (= (isDefined!126 (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) (not (isEmpty!419 (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(declare-fun bs!5752 () Bool)

(assert (= bs!5752 d!42851))

(assert (=> bs!5752 m!163093))

(declare-fun m!163563 () Bool)

(assert (=> bs!5752 m!163563))

(assert (=> b!136707 d!42851))

(declare-fun b!137005 () Bool)

(declare-fun e!89197 () Option!180)

(assert (=> b!137005 (= e!89197 None!178)))

(declare-fun b!137002 () Bool)

(declare-fun e!89196 () Option!180)

(assert (=> b!137002 (= e!89196 (Some!179 (_2!1298 (h!2301 (toList!845 call!14971)))))))

(declare-fun b!137004 () Bool)

(assert (=> b!137004 (= e!89197 (getValueByKey!174 (t!6179 (toList!845 call!14971)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun c!25670 () Bool)

(declare-fun d!42853 () Bool)

(assert (=> d!42853 (= c!25670 (and ((_ is Cons!1695) (toList!845 call!14971)) (= (_1!1298 (h!2301 (toList!845 call!14971))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42853 (= (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89196)))

(declare-fun b!137003 () Bool)

(assert (=> b!137003 (= e!89196 e!89197)))

(declare-fun c!25671 () Bool)

(assert (=> b!137003 (= c!25671 (and ((_ is Cons!1695) (toList!845 call!14971)) (not (= (_1!1298 (h!2301 (toList!845 call!14971))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(assert (= (and d!42853 c!25670) b!137002))

(assert (= (and d!42853 (not c!25670)) b!137003))

(assert (= (and b!137003 c!25671) b!137004))

(assert (= (and b!137003 (not c!25671)) b!137005))

(assert (=> b!137004 m!162605))

(declare-fun m!163565 () Bool)

(assert (=> b!137004 m!163565))

(assert (=> b!136707 d!42853))

(declare-fun b!137006 () Bool)

(declare-fun e!89198 () Bool)

(assert (=> b!137006 (= e!89198 (contains!890 (ite c!25561 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) Nil!1698) Nil!1698) (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!42855 () Bool)

(declare-fun res!65689 () Bool)

(declare-fun e!89199 () Bool)

(assert (=> d!42855 (=> res!65689 e!89199)))

(assert (=> d!42855 (= res!65689 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42855 (= (arrayNoDuplicates!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25561 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) Nil!1698) Nil!1698)) e!89199)))

(declare-fun b!137007 () Bool)

(declare-fun e!89200 () Bool)

(declare-fun call!15080 () Bool)

(assert (=> b!137007 (= e!89200 call!15080)))

(declare-fun b!137008 () Bool)

(declare-fun e!89201 () Bool)

(assert (=> b!137008 (= e!89201 e!89200)))

(declare-fun c!25672 () Bool)

(assert (=> b!137008 (= c!25672 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!15077 () Bool)

(assert (=> bm!15077 (= call!15080 (arrayNoDuplicates!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!25672 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!25561 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) Nil!1698) Nil!1698)) (ite c!25561 (Cons!1697 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) Nil!1698) Nil!1698))))))

(declare-fun b!137009 () Bool)

(assert (=> b!137009 (= e!89199 e!89201)))

(declare-fun res!65688 () Bool)

(assert (=> b!137009 (=> (not res!65688) (not e!89201))))

(assert (=> b!137009 (= res!65688 (not e!89198))))

(declare-fun res!65687 () Bool)

(assert (=> b!137009 (=> (not res!65687) (not e!89198))))

(assert (=> b!137009 (= res!65687 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!137010 () Bool)

(assert (=> b!137010 (= e!89200 call!15080)))

(assert (= (and d!42855 (not res!65689)) b!137009))

(assert (= (and b!137009 res!65687) b!137006))

(assert (= (and b!137009 res!65688) b!137008))

(assert (= (and b!137008 c!25672) b!137010))

(assert (= (and b!137008 (not c!25672)) b!137007))

(assert (= (or b!137010 b!137007) bm!15077))

(declare-fun m!163567 () Bool)

(assert (=> b!137006 m!163567))

(assert (=> b!137006 m!163567))

(declare-fun m!163569 () Bool)

(assert (=> b!137006 m!163569))

(assert (=> b!137008 m!163567))

(assert (=> b!137008 m!163567))

(declare-fun m!163571 () Bool)

(assert (=> b!137008 m!163571))

(assert (=> bm!15077 m!163567))

(declare-fun m!163573 () Bool)

(assert (=> bm!15077 m!163573))

(assert (=> b!137009 m!163567))

(assert (=> b!137009 m!163567))

(assert (=> b!137009 m!163571))

(assert (=> bm!15005 d!42855))

(declare-fun d!42857 () Bool)

(assert (=> d!42857 (= (apply!117 lt!71354 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!174 (toList!845 lt!71354) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5753 () Bool)

(assert (= bs!5753 d!42857))

(assert (=> bs!5753 m!162887))

(declare-fun m!163575 () Bool)

(assert (=> bs!5753 m!163575))

(assert (=> bs!5753 m!163575))

(declare-fun m!163577 () Bool)

(assert (=> bs!5753 m!163577))

(assert (=> b!136681 d!42857))

(declare-fun c!25673 () Bool)

(declare-fun d!42859 () Bool)

(assert (=> d!42859 (= c!25673 ((_ is ValueCellFull!1100) (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000)))))

(declare-fun e!89202 () V!3497)

(assert (=> d!42859 (= (get!1498 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89202)))

(declare-fun b!137011 () Bool)

(assert (=> b!137011 (= e!89202 (get!1500 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137012 () Bool)

(assert (=> b!137012 (= e!89202 (get!1501 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42859 c!25673) b!137011))

(assert (= (and d!42859 (not c!25673)) b!137012))

(assert (=> b!137011 m!163031))

(assert (=> b!137011 m!162959))

(declare-fun m!163579 () Bool)

(assert (=> b!137011 m!163579))

(assert (=> b!137012 m!163031))

(assert (=> b!137012 m!162959))

(declare-fun m!163581 () Bool)

(assert (=> b!137012 m!163581))

(assert (=> b!136681 d!42859))

(declare-fun d!42861 () Bool)

(declare-fun e!89203 () Bool)

(assert (=> d!42861 e!89203))

(declare-fun res!65690 () Bool)

(assert (=> d!42861 (=> res!65690 e!89203)))

(declare-fun lt!71642 () Bool)

(assert (=> d!42861 (= res!65690 (not lt!71642))))

(declare-fun lt!71643 () Bool)

(assert (=> d!42861 (= lt!71642 lt!71643)))

(declare-fun lt!71644 () Unit!4281)

(declare-fun e!89204 () Unit!4281)

(assert (=> d!42861 (= lt!71644 e!89204)))

(declare-fun c!25674 () Bool)

(assert (=> d!42861 (= c!25674 lt!71643)))

(assert (=> d!42861 (= lt!71643 (containsKey!177 (toList!845 lt!71322) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42861 (= (contains!888 lt!71322 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71642)))

(declare-fun b!137013 () Bool)

(declare-fun lt!71641 () Unit!4281)

(assert (=> b!137013 (= e!89204 lt!71641)))

(assert (=> b!137013 (= lt!71641 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71322) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137013 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137014 () Bool)

(declare-fun Unit!4303 () Unit!4281)

(assert (=> b!137014 (= e!89204 Unit!4303)))

(declare-fun b!137015 () Bool)

(assert (=> b!137015 (= e!89203 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42861 c!25674) b!137013))

(assert (= (and d!42861 (not c!25674)) b!137014))

(assert (= (and d!42861 (not res!65690)) b!137015))

(declare-fun m!163583 () Bool)

(assert (=> d!42861 m!163583))

(declare-fun m!163585 () Bool)

(assert (=> b!137013 m!163585))

(declare-fun m!163587 () Bool)

(assert (=> b!137013 m!163587))

(assert (=> b!137013 m!163587))

(declare-fun m!163589 () Bool)

(assert (=> b!137013 m!163589))

(assert (=> b!137015 m!163587))

(assert (=> b!137015 m!163587))

(assert (=> b!137015 m!163589))

(assert (=> bm!15013 d!42861))

(declare-fun d!42863 () Bool)

(assert (=> d!42863 (isDefined!126 (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(declare-fun lt!71645 () Unit!4281)

(assert (=> d!42863 (= lt!71645 (choose!843 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(declare-fun e!89205 () Bool)

(assert (=> d!42863 e!89205))

(declare-fun res!65691 () Bool)

(assert (=> d!42863 (=> (not res!65691) (not e!89205))))

(assert (=> d!42863 (= res!65691 (isStrictlySorted!310 (toList!845 call!14967)))))

(assert (=> d!42863 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))) lt!71645)))

(declare-fun b!137016 () Bool)

(assert (=> b!137016 (= e!89205 (containsKey!177 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (= (and d!42863 res!65691) b!137016))

(assert (=> d!42863 m!162761))

(assert (=> d!42863 m!162979))

(assert (=> d!42863 m!162979))

(assert (=> d!42863 m!162981))

(assert (=> d!42863 m!162761))

(declare-fun m!163591 () Bool)

(assert (=> d!42863 m!163591))

(declare-fun m!163593 () Bool)

(assert (=> d!42863 m!163593))

(assert (=> b!137016 m!162761))

(assert (=> b!137016 m!162975))

(assert (=> b!136658 d!42863))

(declare-fun d!42865 () Bool)

(assert (=> d!42865 (= (isDefined!126 (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))) (not (isEmpty!419 (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))))

(declare-fun bs!5754 () Bool)

(assert (= bs!5754 d!42865))

(assert (=> bs!5754 m!162979))

(declare-fun m!163595 () Bool)

(assert (=> bs!5754 m!163595))

(assert (=> b!136658 d!42865))

(declare-fun b!137020 () Bool)

(declare-fun e!89207 () Option!180)

(assert (=> b!137020 (= e!89207 None!178)))

(declare-fun b!137017 () Bool)

(declare-fun e!89206 () Option!180)

(assert (=> b!137017 (= e!89206 (Some!179 (_2!1298 (h!2301 (toList!845 call!14967)))))))

(declare-fun b!137019 () Bool)

(assert (=> b!137019 (= e!89207 (getValueByKey!174 (t!6179 (toList!845 call!14967)) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(declare-fun c!25675 () Bool)

(declare-fun d!42867 () Bool)

(assert (=> d!42867 (= c!25675 (and ((_ is Cons!1695) (toList!845 call!14967)) (= (_1!1298 (h!2301 (toList!845 call!14967))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))))

(assert (=> d!42867 (= (getValueByKey!174 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))) e!89206)))

(declare-fun b!137018 () Bool)

(assert (=> b!137018 (= e!89206 e!89207)))

(declare-fun c!25676 () Bool)

(assert (=> b!137018 (= c!25676 (and ((_ is Cons!1695) (toList!845 call!14967)) (not (= (_1!1298 (h!2301 (toList!845 call!14967))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))))

(assert (= (and d!42867 c!25675) b!137017))

(assert (= (and d!42867 (not c!25675)) b!137018))

(assert (= (and b!137018 c!25676) b!137019))

(assert (= (and b!137018 (not c!25676)) b!137020))

(assert (=> b!137019 m!162761))

(declare-fun m!163597 () Bool)

(assert (=> b!137019 m!163597))

(assert (=> b!136658 d!42867))

(declare-fun b!137023 () Bool)

(declare-fun res!65695 () Bool)

(declare-fun e!89208 () Bool)

(assert (=> b!137023 (=> (not res!65695) (not e!89208))))

(assert (=> b!137023 (= res!65695 (= (size!2540 (v!3220 (underlying!459 thiss!992))) (bvadd (_size!603 (v!3220 (underlying!459 thiss!992))) (bvsdiv (bvadd (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!137021 () Bool)

(declare-fun res!65692 () Bool)

(assert (=> b!137021 (=> (not res!65692) (not e!89208))))

(assert (=> b!137021 (= res!65692 (and (= (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001)) (= (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992))))) (bvsge (_size!603 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!603 (v!3220 (underlying!459 thiss!992))) (bvadd (mask!7202 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun d!42869 () Bool)

(declare-fun res!65694 () Bool)

(assert (=> d!42869 (=> (not res!65694) (not e!89208))))

(assert (=> d!42869 (= res!65694 (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992)))))))

(assert (=> d!42869 (= (simpleValid!93 (v!3220 (underlying!459 thiss!992))) e!89208)))

(declare-fun b!137024 () Bool)

(assert (=> b!137024 (= e!89208 (and (bvsge (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!603 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!137022 () Bool)

(declare-fun res!65693 () Bool)

(assert (=> b!137022 (=> (not res!65693) (not e!89208))))

(assert (=> b!137022 (= res!65693 (bvsge (size!2540 (v!3220 (underlying!459 thiss!992))) (_size!603 (v!3220 (underlying!459 thiss!992)))))))

(assert (= (and d!42869 res!65694) b!137021))

(assert (= (and b!137021 res!65692) b!137022))

(assert (= (and b!137022 res!65693) b!137023))

(assert (= (and b!137023 res!65695) b!137024))

(declare-fun m!163599 () Bool)

(assert (=> b!137023 m!163599))

(assert (=> d!42869 m!162781))

(assert (=> b!137022 m!163599))

(assert (=> d!42819 d!42869))

(assert (=> d!42771 d!42841))

(declare-fun d!42871 () Bool)

(declare-fun e!89209 () Bool)

(assert (=> d!42871 e!89209))

(declare-fun res!65697 () Bool)

(assert (=> d!42871 (=> (not res!65697) (not e!89209))))

(declare-fun lt!71649 () ListLongMap!1659)

(assert (=> d!42871 (= res!65697 (contains!888 lt!71649 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71646 () List!1699)

(assert (=> d!42871 (= lt!71649 (ListLongMap!1660 lt!71646))))

(declare-fun lt!71647 () Unit!4281)

(declare-fun lt!71648 () Unit!4281)

(assert (=> d!42871 (= lt!71647 lt!71648)))

(assert (=> d!42871 (= (getValueByKey!174 lt!71646 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42871 (= lt!71648 (lemmaContainsTupThenGetReturnValue!89 lt!71646 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42871 (= lt!71646 (insertStrictlySorted!92 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42871 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71649)))

(declare-fun b!137025 () Bool)

(declare-fun res!65696 () Bool)

(assert (=> b!137025 (=> (not res!65696) (not e!89209))))

(assert (=> b!137025 (= res!65696 (= (getValueByKey!174 (toList!845 lt!71649) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137026 () Bool)

(assert (=> b!137026 (= e!89209 (contains!891 (toList!845 lt!71649) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42871 res!65697) b!137025))

(assert (= (and b!137025 res!65696) b!137026))

(declare-fun m!163601 () Bool)

(assert (=> d!42871 m!163601))

(declare-fun m!163603 () Bool)

(assert (=> d!42871 m!163603))

(declare-fun m!163605 () Bool)

(assert (=> d!42871 m!163605))

(declare-fun m!163607 () Bool)

(assert (=> d!42871 m!163607))

(declare-fun m!163609 () Bool)

(assert (=> b!137025 m!163609))

(declare-fun m!163611 () Bool)

(assert (=> b!137026 m!163611))

(assert (=> d!42715 d!42871))

(declare-fun b!137027 () Bool)

(declare-fun e!89222 () Bool)

(assert (=> b!137027 (= e!89222 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137028 () Bool)

(declare-fun c!25682 () Bool)

(assert (=> b!137028 (= c!25682 (and (not (= (bvand lt!71199 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!71199 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89213 () ListLongMap!1659)

(declare-fun e!89217 () ListLongMap!1659)

(assert (=> b!137028 (= e!89213 e!89217)))

(declare-fun d!42873 () Bool)

(declare-fun e!89215 () Bool)

(assert (=> d!42873 e!89215))

(declare-fun res!65705 () Bool)

(assert (=> d!42873 (=> (not res!65705) (not e!89215))))

(assert (=> d!42873 (= res!65705 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71660 () ListLongMap!1659)

(declare-fun lt!71669 () ListLongMap!1659)

(assert (=> d!42873 (= lt!71660 lt!71669)))

(declare-fun lt!71668 () Unit!4281)

(declare-fun e!89216 () Unit!4281)

(assert (=> d!42873 (= lt!71668 e!89216)))

(declare-fun c!25677 () Bool)

(assert (=> d!42873 (= c!25677 e!89222)))

(declare-fun res!65702 () Bool)

(assert (=> d!42873 (=> (not res!65702) (not e!89222))))

(assert (=> d!42873 (= res!65702 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89214 () ListLongMap!1659)

(assert (=> d!42873 (= lt!71669 e!89214)))

(declare-fun c!25680 () Bool)

(assert (=> d!42873 (= c!25680 (and (not (= (bvand lt!71199 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!71199 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42873 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42873 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71660)))

(declare-fun b!137029 () Bool)

(declare-fun call!15082 () ListLongMap!1659)

(assert (=> b!137029 (= e!89213 call!15082)))

(declare-fun b!137030 () Bool)

(declare-fun res!65701 () Bool)

(assert (=> b!137030 (=> (not res!65701) (not e!89215))))

(declare-fun e!89218 () Bool)

(assert (=> b!137030 (= res!65701 e!89218)))

(declare-fun c!25679 () Bool)

(assert (=> b!137030 (= c!25679 (not (= (bvand lt!71199 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15078 () Bool)

(declare-fun call!15083 () ListLongMap!1659)

(declare-fun call!15086 () ListLongMap!1659)

(assert (=> bm!15078 (= call!15083 call!15086)))

(declare-fun bm!15079 () Bool)

(declare-fun call!15084 () Bool)

(assert (=> bm!15079 (= call!15084 (contains!888 lt!71660 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137031 () Bool)

(declare-fun Unit!4304 () Unit!4281)

(assert (=> b!137031 (= e!89216 Unit!4304)))

(declare-fun b!137032 () Bool)

(declare-fun call!15085 () ListLongMap!1659)

(assert (=> b!137032 (= e!89214 (+!170 call!15085 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!89211 () Bool)

(declare-fun b!137033 () Bool)

(assert (=> b!137033 (= e!89211 (= (apply!117 lt!71660 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137034 () Bool)

(declare-fun res!65699 () Bool)

(assert (=> b!137034 (=> (not res!65699) (not e!89215))))

(declare-fun e!89221 () Bool)

(assert (=> b!137034 (= res!65699 e!89221)))

(declare-fun res!65698 () Bool)

(assert (=> b!137034 (=> res!65698 e!89221)))

(declare-fun e!89219 () Bool)

(assert (=> b!137034 (= res!65698 (not e!89219))))

(declare-fun res!65704 () Bool)

(assert (=> b!137034 (=> (not res!65704) (not e!89219))))

(assert (=> b!137034 (= res!65704 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun bm!15080 () Bool)

(declare-fun c!25681 () Bool)

(declare-fun call!15087 () ListLongMap!1659)

(assert (=> bm!15080 (= call!15085 (+!170 (ite c!25680 call!15086 (ite c!25681 call!15083 call!15087)) (ite (or c!25680 c!25681) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137035 () Bool)

(declare-fun e!89210 () Bool)

(assert (=> b!137035 (= e!89221 e!89210)))

(declare-fun res!65700 () Bool)

(assert (=> b!137035 (=> (not res!65700) (not e!89210))))

(assert (=> b!137035 (= res!65700 (contains!888 lt!71660 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137035 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137036 () Bool)

(assert (=> b!137036 (= e!89214 e!89213)))

(assert (=> b!137036 (= c!25681 (and (not (= (bvand lt!71199 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!71199 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137037 () Bool)

(declare-fun lt!71654 () Unit!4281)

(assert (=> b!137037 (= e!89216 lt!71654)))

(declare-fun lt!71665 () ListLongMap!1659)

(assert (=> b!137037 (= lt!71665 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71659 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71659 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71666 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71666 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71663 () Unit!4281)

(assert (=> b!137037 (= lt!71663 (addStillContains!93 lt!71665 lt!71659 (zeroValue!2741 newMap!16) lt!71666))))

(assert (=> b!137037 (contains!888 (+!170 lt!71665 (tuple2!2575 lt!71659 (zeroValue!2741 newMap!16))) lt!71666)))

(declare-fun lt!71662 () Unit!4281)

(assert (=> b!137037 (= lt!71662 lt!71663)))

(declare-fun lt!71671 () ListLongMap!1659)

(assert (=> b!137037 (= lt!71671 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71658 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71658 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71657 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71657 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71664 () Unit!4281)

(assert (=> b!137037 (= lt!71664 (addApplyDifferent!93 lt!71671 lt!71658 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71657))))

(assert (=> b!137037 (= (apply!117 (+!170 lt!71671 (tuple2!2575 lt!71658 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71657) (apply!117 lt!71671 lt!71657))))

(declare-fun lt!71656 () Unit!4281)

(assert (=> b!137037 (= lt!71656 lt!71664)))

(declare-fun lt!71650 () ListLongMap!1659)

(assert (=> b!137037 (= lt!71650 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71653 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71653 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71651 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71651 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71670 () Unit!4281)

(assert (=> b!137037 (= lt!71670 (addApplyDifferent!93 lt!71650 lt!71653 (zeroValue!2741 newMap!16) lt!71651))))

(assert (=> b!137037 (= (apply!117 (+!170 lt!71650 (tuple2!2575 lt!71653 (zeroValue!2741 newMap!16))) lt!71651) (apply!117 lt!71650 lt!71651))))

(declare-fun lt!71652 () Unit!4281)

(assert (=> b!137037 (= lt!71652 lt!71670)))

(declare-fun lt!71655 () ListLongMap!1659)

(assert (=> b!137037 (= lt!71655 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71661 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71661 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71667 () (_ BitVec 64))

(assert (=> b!137037 (= lt!71667 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137037 (= lt!71654 (addApplyDifferent!93 lt!71655 lt!71661 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71667))))

(assert (=> b!137037 (= (apply!117 (+!170 lt!71655 (tuple2!2575 lt!71661 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71667) (apply!117 lt!71655 lt!71667))))

(declare-fun bm!15081 () Bool)

(assert (=> bm!15081 (= call!15086 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!137038 () Bool)

(declare-fun e!89212 () Bool)

(assert (=> b!137038 (= e!89215 e!89212)))

(declare-fun c!25678 () Bool)

(assert (=> b!137038 (= c!25678 (not (= (bvand lt!71199 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137039 () Bool)

(declare-fun e!89220 () Bool)

(assert (=> b!137039 (= e!89220 (= (apply!117 lt!71660 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!137040 () Bool)

(assert (=> b!137040 (= e!89212 e!89211)))

(declare-fun res!65703 () Bool)

(assert (=> b!137040 (= res!65703 call!15084)))

(assert (=> b!137040 (=> (not res!65703) (not e!89211))))

(declare-fun b!137041 () Bool)

(assert (=> b!137041 (= e!89210 (= (apply!117 lt!71660 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137041 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (_values!2871 newMap!16))))))

(assert (=> b!137041 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137042 () Bool)

(assert (=> b!137042 (= e!89217 call!15082)))

(declare-fun b!137043 () Bool)

(assert (=> b!137043 (= e!89219 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137044 () Bool)

(assert (=> b!137044 (= e!89217 call!15087)))

(declare-fun b!137045 () Bool)

(assert (=> b!137045 (= e!89212 (not call!15084))))

(declare-fun b!137046 () Bool)

(declare-fun call!15081 () Bool)

(assert (=> b!137046 (= e!89218 (not call!15081))))

(declare-fun b!137047 () Bool)

(assert (=> b!137047 (= e!89218 e!89220)))

(declare-fun res!65706 () Bool)

(assert (=> b!137047 (= res!65706 call!15081)))

(assert (=> b!137047 (=> (not res!65706) (not e!89220))))

(declare-fun bm!15082 () Bool)

(assert (=> bm!15082 (= call!15081 (contains!888 lt!71660 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15083 () Bool)

(assert (=> bm!15083 (= call!15087 call!15083)))

(declare-fun bm!15084 () Bool)

(assert (=> bm!15084 (= call!15082 call!15085)))

(assert (= (and d!42873 c!25680) b!137032))

(assert (= (and d!42873 (not c!25680)) b!137036))

(assert (= (and b!137036 c!25681) b!137029))

(assert (= (and b!137036 (not c!25681)) b!137028))

(assert (= (and b!137028 c!25682) b!137042))

(assert (= (and b!137028 (not c!25682)) b!137044))

(assert (= (or b!137042 b!137044) bm!15083))

(assert (= (or b!137029 bm!15083) bm!15078))

(assert (= (or b!137029 b!137042) bm!15084))

(assert (= (or b!137032 bm!15078) bm!15081))

(assert (= (or b!137032 bm!15084) bm!15080))

(assert (= (and d!42873 res!65702) b!137027))

(assert (= (and d!42873 c!25677) b!137037))

(assert (= (and d!42873 (not c!25677)) b!137031))

(assert (= (and d!42873 res!65705) b!137034))

(assert (= (and b!137034 res!65704) b!137043))

(assert (= (and b!137034 (not res!65698)) b!137035))

(assert (= (and b!137035 res!65700) b!137041))

(assert (= (and b!137034 res!65699) b!137030))

(assert (= (and b!137030 c!25679) b!137047))

(assert (= (and b!137030 (not c!25679)) b!137046))

(assert (= (and b!137047 res!65706) b!137039))

(assert (= (or b!137047 b!137046) bm!15082))

(assert (= (and b!137030 res!65701) b!137038))

(assert (= (and b!137038 c!25678) b!137040))

(assert (= (and b!137038 (not c!25678)) b!137045))

(assert (= (and b!137040 res!65703) b!137033))

(assert (= (or b!137040 b!137045) bm!15079))

(declare-fun b_lambda!6133 () Bool)

(assert (=> (not b_lambda!6133) (not b!137041)))

(assert (=> b!137041 t!6191))

(declare-fun b_and!8489 () Bool)

(assert (= b_and!8485 (and (=> t!6191 result!4043) b_and!8489)))

(assert (=> b!137041 t!6193))

(declare-fun b_and!8491 () Bool)

(assert (= b_and!8487 (and (=> t!6193 result!4045) b_and!8491)))

(declare-fun m!163613 () Bool)

(assert (=> b!137033 m!163613))

(assert (=> b!137037 m!162629))

(declare-fun m!163615 () Bool)

(assert (=> b!137037 m!163615))

(declare-fun m!163617 () Bool)

(assert (=> b!137037 m!163617))

(declare-fun m!163619 () Bool)

(assert (=> b!137037 m!163619))

(declare-fun m!163621 () Bool)

(assert (=> b!137037 m!163621))

(declare-fun m!163623 () Bool)

(assert (=> b!137037 m!163623))

(declare-fun m!163625 () Bool)

(assert (=> b!137037 m!163625))

(declare-fun m!163627 () Bool)

(assert (=> b!137037 m!163627))

(assert (=> b!137037 m!163627))

(declare-fun m!163629 () Bool)

(assert (=> b!137037 m!163629))

(declare-fun m!163631 () Bool)

(assert (=> b!137037 m!163631))

(declare-fun m!163633 () Bool)

(assert (=> b!137037 m!163633))

(declare-fun m!163635 () Bool)

(assert (=> b!137037 m!163635))

(declare-fun m!163637 () Bool)

(assert (=> b!137037 m!163637))

(assert (=> b!137037 m!162629))

(declare-fun m!163639 () Bool)

(assert (=> b!137037 m!163639))

(assert (=> b!137037 m!162887))

(assert (=> b!137037 m!163617))

(assert (=> b!137037 m!163633))

(assert (=> b!137037 m!163631))

(declare-fun m!163641 () Bool)

(assert (=> b!137037 m!163641))

(assert (=> b!137037 m!162629))

(declare-fun m!163643 () Bool)

(assert (=> b!137037 m!163643))

(declare-fun m!163645 () Bool)

(assert (=> b!137037 m!163645))

(assert (=> b!137035 m!162887))

(assert (=> b!137035 m!162887))

(declare-fun m!163647 () Bool)

(assert (=> b!137035 m!163647))

(assert (=> d!42873 m!162853))

(assert (=> b!137041 m!162957))

(assert (=> b!137041 m!162957))

(assert (=> b!137041 m!162959))

(assert (=> b!137041 m!162961))

(assert (=> b!137041 m!162887))

(assert (=> b!137041 m!162887))

(declare-fun m!163649 () Bool)

(assert (=> b!137041 m!163649))

(assert (=> b!137041 m!162959))

(declare-fun m!163651 () Bool)

(assert (=> b!137032 m!163651))

(declare-fun m!163653 () Bool)

(assert (=> bm!15082 m!163653))

(assert (=> bm!15081 m!162629))

(assert (=> bm!15081 m!163615))

(assert (=> b!137043 m!162887))

(assert (=> b!137043 m!162887))

(assert (=> b!137043 m!162891))

(assert (=> b!137027 m!162887))

(assert (=> b!137027 m!162887))

(assert (=> b!137027 m!162891))

(declare-fun m!163655 () Bool)

(assert (=> bm!15079 m!163655))

(declare-fun m!163657 () Bool)

(assert (=> bm!15080 m!163657))

(declare-fun m!163659 () Bool)

(assert (=> b!137039 m!163659))

(assert (=> d!42715 d!42873))

(assert (=> d!42715 d!42733))

(declare-fun d!42875 () Bool)

(assert (=> d!42875 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(assert (=> d!42875 true))

(declare-fun _$8!121 () Unit!4281)

(assert (=> d!42875 (= (choose!839 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71199 (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)) _$8!121)))

(declare-fun bs!5755 () Bool)

(assert (= bs!5755 d!42875))

(assert (=> bs!5755 m!162737))

(assert (=> bs!5755 m!162737))

(assert (=> bs!5755 m!162873))

(assert (=> bs!5755 m!162629))

(assert (=> bs!5755 m!162871))

(assert (=> d!42715 d!42875))

(assert (=> d!42715 d!42841))

(declare-fun d!42877 () Bool)

(assert (=> d!42877 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(assert (=> d!42877 true))

(declare-fun _$5!137 () Unit!4281)

(assert (=> d!42877 (= (choose!841 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)) _$5!137)))

(declare-fun bs!5756 () Bool)

(assert (= bs!5756 d!42877))

(assert (=> bs!5756 m!162737))

(assert (=> bs!5756 m!162737))

(assert (=> bs!5756 m!162991))

(assert (=> bs!5756 m!162739))

(assert (=> bs!5756 m!162993))

(assert (=> d!42739 d!42877))

(assert (=> d!42739 d!42841))

(assert (=> b!136625 d!42717))

(declare-fun d!42879 () Bool)

(assert (=> d!42879 (= (get!1500 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3219 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136570 d!42879))

(declare-fun d!42881 () Bool)

(assert (=> d!42881 (= (map!1405 (_2!1299 lt!71467)) (getCurrentListMap!521 (_keys!4641 (_2!1299 lt!71467)) (_values!2871 (_2!1299 lt!71467)) (mask!7202 (_2!1299 lt!71467)) (extraKeys!2649 (_2!1299 lt!71467)) (zeroValue!2741 (_2!1299 lt!71467)) (minValue!2741 (_2!1299 lt!71467)) #b00000000000000000000000000000000 (defaultEntry!2888 (_2!1299 lt!71467))))))

(declare-fun bs!5757 () Bool)

(assert (= bs!5757 d!42881))

(declare-fun m!163661 () Bool)

(assert (=> bs!5757 m!163661))

(assert (=> b!136747 d!42881))

(declare-fun d!42883 () Bool)

(declare-fun e!89223 () Bool)

(assert (=> d!42883 e!89223))

(declare-fun res!65708 () Bool)

(assert (=> d!42883 (=> (not res!65708) (not e!89223))))

(declare-fun lt!71675 () ListLongMap!1659)

(assert (=> d!42883 (= res!65708 (contains!888 lt!71675 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71672 () List!1699)

(assert (=> d!42883 (= lt!71675 (ListLongMap!1660 lt!71672))))

(declare-fun lt!71673 () Unit!4281)

(declare-fun lt!71674 () Unit!4281)

(assert (=> d!42883 (= lt!71673 lt!71674)))

(assert (=> d!42883 (= (getValueByKey!174 lt!71672 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42883 (= lt!71674 (lemmaContainsTupThenGetReturnValue!89 lt!71672 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42883 (= lt!71672 (insertStrictlySorted!92 (toList!845 (map!1405 newMap!16)) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42883 (= (+!170 (map!1405 newMap!16) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71675)))

(declare-fun b!137048 () Bool)

(declare-fun res!65707 () Bool)

(assert (=> b!137048 (=> (not res!65707) (not e!89223))))

(assert (=> b!137048 (= res!65707 (= (getValueByKey!174 (toList!845 lt!71675) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137049 () Bool)

(assert (=> b!137049 (= e!89223 (contains!891 (toList!845 lt!71675) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42883 res!65708) b!137048))

(assert (= (and b!137048 res!65707) b!137049))

(declare-fun m!163663 () Bool)

(assert (=> d!42883 m!163663))

(declare-fun m!163665 () Bool)

(assert (=> d!42883 m!163665))

(declare-fun m!163667 () Bool)

(assert (=> d!42883 m!163667))

(declare-fun m!163669 () Bool)

(assert (=> d!42883 m!163669))

(declare-fun m!163671 () Bool)

(assert (=> b!137048 m!163671))

(declare-fun m!163673 () Bool)

(assert (=> b!137049 m!163673))

(assert (=> b!136747 d!42883))

(assert (=> b!136747 d!42689))

(declare-fun lt!71676 () Bool)

(declare-fun d!42885 () Bool)

(assert (=> d!42885 (= lt!71676 (select (content!135 (toList!845 lt!71388)) (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89225 () Bool)

(assert (=> d!42885 (= lt!71676 e!89225)))

(declare-fun res!65709 () Bool)

(assert (=> d!42885 (=> (not res!65709) (not e!89225))))

(assert (=> d!42885 (= res!65709 ((_ is Cons!1695) (toList!845 lt!71388)))))

(assert (=> d!42885 (= (contains!891 (toList!845 lt!71388) (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71676)))

(declare-fun b!137050 () Bool)

(declare-fun e!89224 () Bool)

(assert (=> b!137050 (= e!89225 e!89224)))

(declare-fun res!65710 () Bool)

(assert (=> b!137050 (=> res!65710 e!89224)))

(assert (=> b!137050 (= res!65710 (= (h!2301 (toList!845 lt!71388)) (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137051 () Bool)

(assert (=> b!137051 (= e!89224 (contains!891 (t!6179 (toList!845 lt!71388)) (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!42885 res!65709) b!137050))

(assert (= (and b!137050 (not res!65710)) b!137051))

(declare-fun m!163675 () Bool)

(assert (=> d!42885 m!163675))

(declare-fun m!163677 () Bool)

(assert (=> d!42885 m!163677))

(declare-fun m!163679 () Bool)

(assert (=> b!137051 m!163679))

(assert (=> b!136704 d!42885))

(declare-fun call!15088 () ListLongMap!1659)

(declare-fun bm!15085 () Bool)

(assert (=> bm!15085 (= call!15088 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16)))))

(declare-fun e!89227 () Bool)

(declare-fun lt!71683 () ListLongMap!1659)

(declare-fun b!137053 () Bool)

(assert (=> b!137053 (= e!89227 (= lt!71683 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16))))))

(declare-fun b!137054 () Bool)

(declare-fun res!65712 () Bool)

(declare-fun e!89230 () Bool)

(assert (=> b!137054 (=> (not res!65712) (not e!89230))))

(assert (=> b!137054 (= res!65712 (not (contains!888 lt!71683 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137055 () Bool)

(declare-fun e!89232 () Bool)

(assert (=> b!137055 (= e!89232 e!89227)))

(declare-fun c!25686 () Bool)

(assert (=> b!137055 (= c!25686 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137056 () Bool)

(declare-fun e!89226 () ListLongMap!1659)

(assert (=> b!137056 (= e!89226 call!15088)))

(declare-fun b!137057 () Bool)

(declare-fun e!89231 () Bool)

(assert (=> b!137057 (= e!89231 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137057 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!137058 () Bool)

(declare-fun e!89229 () ListLongMap!1659)

(assert (=> b!137058 (= e!89229 (ListLongMap!1660 Nil!1696))))

(declare-fun b!137059 () Bool)

(assert (=> b!137059 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> b!137059 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196))))))

(declare-fun e!89228 () Bool)

(assert (=> b!137059 (= e!89228 (= (apply!117 lt!71683 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137060 () Bool)

(declare-fun lt!71681 () Unit!4281)

(declare-fun lt!71678 () Unit!4281)

(assert (=> b!137060 (= lt!71681 lt!71678)))

(declare-fun lt!71679 () V!3497)

(declare-fun lt!71682 () (_ BitVec 64))

(declare-fun lt!71677 () ListLongMap!1659)

(declare-fun lt!71680 () (_ BitVec 64))

(assert (=> b!137060 (not (contains!888 (+!170 lt!71677 (tuple2!2575 lt!71680 lt!71679)) lt!71682))))

(assert (=> b!137060 (= lt!71678 (addStillNotContains!64 lt!71677 lt!71680 lt!71679 lt!71682))))

(assert (=> b!137060 (= lt!71682 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137060 (= lt!71679 (get!1498 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137060 (= lt!71680 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137060 (= lt!71677 call!15088)))

(assert (=> b!137060 (= e!89226 (+!170 call!15088 (tuple2!2575 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2265 (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137061 () Bool)

(assert (=> b!137061 (= e!89227 (isEmpty!418 lt!71683))))

(declare-fun d!42887 () Bool)

(assert (=> d!42887 e!89230))

(declare-fun res!65714 () Bool)

(assert (=> d!42887 (=> (not res!65714) (not e!89230))))

(assert (=> d!42887 (= res!65714 (not (contains!888 lt!71683 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42887 (= lt!71683 e!89229)))

(declare-fun c!25685 () Bool)

(assert (=> d!42887 (= c!25685 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42887 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42887 (= (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite (or c!25529 c!25527) (_values!2871 newMap!16) lt!71196) (mask!7202 newMap!16) (ite c!25529 (ite c!25524 lt!71185 lt!71199) (extraKeys!2649 newMap!16)) (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71683)))

(declare-fun b!137052 () Bool)

(assert (=> b!137052 (= e!89229 e!89226)))

(declare-fun c!25683 () Bool)

(assert (=> b!137052 (= c!25683 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137062 () Bool)

(assert (=> b!137062 (= e!89230 e!89232)))

(declare-fun c!25684 () Bool)

(assert (=> b!137062 (= c!25684 e!89231)))

(declare-fun res!65713 () Bool)

(assert (=> b!137062 (=> (not res!65713) (not e!89231))))

(assert (=> b!137062 (= res!65713 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137063 () Bool)

(assert (=> b!137063 (= e!89232 e!89228)))

(assert (=> b!137063 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65711 () Bool)

(assert (=> b!137063 (= res!65711 (contains!888 lt!71683 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137063 (=> (not res!65711) (not e!89228))))

(assert (= (and d!42887 c!25685) b!137058))

(assert (= (and d!42887 (not c!25685)) b!137052))

(assert (= (and b!137052 c!25683) b!137060))

(assert (= (and b!137052 (not c!25683)) b!137056))

(assert (= (or b!137060 b!137056) bm!15085))

(assert (= (and d!42887 res!65714) b!137054))

(assert (= (and b!137054 res!65712) b!137062))

(assert (= (and b!137062 res!65713) b!137057))

(assert (= (and b!137062 c!25684) b!137063))

(assert (= (and b!137062 (not c!25684)) b!137055))

(assert (= (and b!137063 res!65711) b!137059))

(assert (= (and b!137055 c!25686) b!137053))

(assert (= (and b!137055 (not c!25686)) b!137061))

(declare-fun b_lambda!6135 () Bool)

(assert (=> (not b_lambda!6135) (not b!137059)))

(assert (=> b!137059 t!6191))

(declare-fun b_and!8493 () Bool)

(assert (= b_and!8489 (and (=> t!6191 result!4043) b_and!8493)))

(assert (=> b!137059 t!6193))

(declare-fun b_and!8495 () Bool)

(assert (= b_and!8491 (and (=> t!6193 result!4045) b_and!8495)))

(declare-fun b_lambda!6137 () Bool)

(assert (=> (not b_lambda!6137) (not b!137060)))

(assert (=> b!137060 t!6191))

(declare-fun b_and!8497 () Bool)

(assert (= b_and!8493 (and (=> t!6191 result!4043) b_and!8497)))

(assert (=> b!137060 t!6193))

(declare-fun b_and!8499 () Bool)

(assert (= b_and!8495 (and (=> t!6193 result!4045) b_and!8499)))

(declare-fun m!163681 () Bool)

(assert (=> d!42887 m!163681))

(assert (=> d!42887 m!162853))

(assert (=> b!137059 m!163031))

(assert (=> b!137059 m!162959))

(assert (=> b!137059 m!163033))

(assert (=> b!137059 m!162887))

(declare-fun m!163683 () Bool)

(assert (=> b!137059 m!163683))

(assert (=> b!137059 m!162959))

(assert (=> b!137059 m!163031))

(assert (=> b!137059 m!162887))

(assert (=> b!137057 m!162887))

(assert (=> b!137057 m!162887))

(assert (=> b!137057 m!162891))

(declare-fun m!163685 () Bool)

(assert (=> b!137054 m!163685))

(declare-fun m!163687 () Bool)

(assert (=> bm!15085 m!163687))

(assert (=> b!137053 m!163687))

(declare-fun m!163689 () Bool)

(assert (=> b!137061 m!163689))

(declare-fun m!163691 () Bool)

(assert (=> b!137060 m!163691))

(declare-fun m!163693 () Bool)

(assert (=> b!137060 m!163693))

(assert (=> b!137060 m!163031))

(assert (=> b!137060 m!162959))

(assert (=> b!137060 m!163033))

(assert (=> b!137060 m!162959))

(assert (=> b!137060 m!163031))

(assert (=> b!137060 m!162887))

(declare-fun m!163695 () Bool)

(assert (=> b!137060 m!163695))

(assert (=> b!137060 m!163695))

(declare-fun m!163697 () Bool)

(assert (=> b!137060 m!163697))

(assert (=> b!137052 m!162887))

(assert (=> b!137052 m!162887))

(assert (=> b!137052 m!162891))

(assert (=> b!137063 m!162887))

(assert (=> b!137063 m!162887))

(declare-fun m!163699 () Bool)

(assert (=> b!137063 m!163699))

(assert (=> bm!15022 d!42887))

(declare-fun d!42889 () Bool)

(declare-fun e!89233 () Bool)

(assert (=> d!42889 e!89233))

(declare-fun res!65715 () Bool)

(assert (=> d!42889 (=> res!65715 e!89233)))

(declare-fun lt!71685 () Bool)

(assert (=> d!42889 (= res!65715 (not lt!71685))))

(declare-fun lt!71686 () Bool)

(assert (=> d!42889 (= lt!71685 lt!71686)))

(declare-fun lt!71687 () Unit!4281)

(declare-fun e!89234 () Unit!4281)

(assert (=> d!42889 (= lt!71687 e!89234)))

(declare-fun c!25687 () Bool)

(assert (=> d!42889 (= c!25687 lt!71686)))

(assert (=> d!42889 (= lt!71686 (containsKey!177 (toList!845 lt!71568) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42889 (= (contains!888 lt!71568 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) lt!71685)))

(declare-fun b!137064 () Bool)

(declare-fun lt!71684 () Unit!4281)

(assert (=> b!137064 (= e!89234 lt!71684)))

(assert (=> b!137064 (= lt!71684 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71568) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137064 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137065 () Bool)

(declare-fun Unit!4305 () Unit!4281)

(assert (=> b!137065 (= e!89234 Unit!4305)))

(declare-fun b!137066 () Bool)

(assert (=> b!137066 (= e!89233 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42889 c!25687) b!137064))

(assert (= (and d!42889 (not c!25687)) b!137065))

(assert (= (and d!42889 (not res!65715)) b!137066))

(assert (=> d!42889 m!162887))

(declare-fun m!163701 () Bool)

(assert (=> d!42889 m!163701))

(assert (=> b!137064 m!162887))

(declare-fun m!163703 () Bool)

(assert (=> b!137064 m!163703))

(assert (=> b!137064 m!162887))

(declare-fun m!163705 () Bool)

(assert (=> b!137064 m!163705))

(assert (=> b!137064 m!163705))

(declare-fun m!163707 () Bool)

(assert (=> b!137064 m!163707))

(assert (=> b!137066 m!162887))

(assert (=> b!137066 m!163705))

(assert (=> b!137066 m!163705))

(assert (=> b!137066 m!163707))

(assert (=> b!136884 d!42889))

(declare-fun d!42891 () Bool)

(assert (=> d!42891 (= (get!1502 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!3226 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42749 d!42891))

(declare-fun b!137070 () Bool)

(declare-fun e!89236 () Option!180)

(assert (=> b!137070 (= e!89236 None!178)))

(declare-fun b!137067 () Bool)

(declare-fun e!89235 () Option!180)

(assert (=> b!137067 (= e!89235 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71267)))))))

(declare-fun b!137069 () Bool)

(assert (=> b!137069 (= e!89236 (getValueByKey!174 (t!6179 (toList!845 lt!71267)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!42893 () Bool)

(declare-fun c!25688 () Bool)

(assert (=> d!42893 (= c!25688 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42893 (= (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000) e!89235)))

(declare-fun b!137068 () Bool)

(assert (=> b!137068 (= e!89235 e!89236)))

(declare-fun c!25689 () Bool)

(assert (=> b!137068 (= c!25689 (and ((_ is Cons!1695) (toList!845 lt!71267)) (not (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!42893 c!25688) b!137067))

(assert (= (and d!42893 (not c!25688)) b!137068))

(assert (= (and b!137068 c!25689) b!137069))

(assert (= (and b!137068 (not c!25689)) b!137070))

(declare-fun m!163709 () Bool)

(assert (=> b!137069 m!163709))

(assert (=> d!42749 d!42893))

(declare-fun d!42895 () Bool)

(declare-fun e!89237 () Bool)

(assert (=> d!42895 e!89237))

(declare-fun res!65716 () Bool)

(assert (=> d!42895 (=> res!65716 e!89237)))

(declare-fun lt!71689 () Bool)

(assert (=> d!42895 (= res!65716 (not lt!71689))))

(declare-fun lt!71690 () Bool)

(assert (=> d!42895 (= lt!71689 lt!71690)))

(declare-fun lt!71691 () Unit!4281)

(declare-fun e!89238 () Unit!4281)

(assert (=> d!42895 (= lt!71691 e!89238)))

(declare-fun c!25690 () Bool)

(assert (=> d!42895 (= c!25690 lt!71690)))

(assert (=> d!42895 (= lt!71690 (containsKey!177 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42895 (= (contains!888 lt!71549 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71689)))

(declare-fun b!137071 () Bool)

(declare-fun lt!71688 () Unit!4281)

(assert (=> b!137071 (= e!89238 lt!71688)))

(assert (=> b!137071 (= lt!71688 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> b!137071 (isDefined!126 (getValueByKey!174 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137072 () Bool)

(declare-fun Unit!4306 () Unit!4281)

(assert (=> b!137072 (= e!89238 Unit!4306)))

(declare-fun b!137073 () Bool)

(assert (=> b!137073 (= e!89237 (isDefined!126 (getValueByKey!174 (toList!845 lt!71549) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!42895 c!25690) b!137071))

(assert (= (and d!42895 (not c!25690)) b!137072))

(assert (= (and d!42895 (not res!65716)) b!137073))

(declare-fun m!163711 () Bool)

(assert (=> d!42895 m!163711))

(declare-fun m!163713 () Bool)

(assert (=> b!137071 m!163713))

(assert (=> b!137071 m!163313))

(assert (=> b!137071 m!163313))

(declare-fun m!163715 () Bool)

(assert (=> b!137071 m!163715))

(assert (=> b!137073 m!163313))

(assert (=> b!137073 m!163313))

(assert (=> b!137073 m!163715))

(assert (=> d!42815 d!42895))

(declare-fun b!137077 () Bool)

(declare-fun e!89240 () Option!180)

(assert (=> b!137077 (= e!89240 None!178)))

(declare-fun b!137074 () Bool)

(declare-fun e!89239 () Option!180)

(assert (=> b!137074 (= e!89239 (Some!179 (_2!1298 (h!2301 lt!71546))))))

(declare-fun b!137076 () Bool)

(assert (=> b!137076 (= e!89240 (getValueByKey!174 (t!6179 lt!71546) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!42897 () Bool)

(declare-fun c!25691 () Bool)

(assert (=> d!42897 (= c!25691 (and ((_ is Cons!1695) lt!71546) (= (_1!1298 (h!2301 lt!71546)) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42897 (= (getValueByKey!174 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89239)))

(declare-fun b!137075 () Bool)

(assert (=> b!137075 (= e!89239 e!89240)))

(declare-fun c!25692 () Bool)

(assert (=> b!137075 (= c!25692 (and ((_ is Cons!1695) lt!71546) (not (= (_1!1298 (h!2301 lt!71546)) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!42897 c!25691) b!137074))

(assert (= (and d!42897 (not c!25691)) b!137075))

(assert (= (and b!137075 c!25692) b!137076))

(assert (= (and b!137075 (not c!25692)) b!137077))

(declare-fun m!163717 () Bool)

(assert (=> b!137076 m!163717))

(assert (=> d!42815 d!42897))

(declare-fun d!42899 () Bool)

(assert (=> d!42899 (= (getValueByKey!174 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71692 () Unit!4281)

(assert (=> d!42899 (= lt!71692 (choose!847 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89241 () Bool)

(assert (=> d!42899 e!89241))

(declare-fun res!65717 () Bool)

(assert (=> d!42899 (=> (not res!65717) (not e!89241))))

(assert (=> d!42899 (= res!65717 (isStrictlySorted!310 lt!71546))))

(assert (=> d!42899 (= (lemmaContainsTupThenGetReturnValue!89 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71692)))

(declare-fun b!137078 () Bool)

(declare-fun res!65718 () Bool)

(assert (=> b!137078 (=> (not res!65718) (not e!89241))))

(assert (=> b!137078 (= res!65718 (containsKey!177 lt!71546 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137079 () Bool)

(assert (=> b!137079 (= e!89241 (contains!891 lt!71546 (tuple2!2575 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!42899 res!65717) b!137078))

(assert (= (and b!137078 res!65718) b!137079))

(assert (=> d!42899 m!163307))

(declare-fun m!163719 () Bool)

(assert (=> d!42899 m!163719))

(declare-fun m!163721 () Bool)

(assert (=> d!42899 m!163721))

(declare-fun m!163723 () Bool)

(assert (=> b!137078 m!163723))

(declare-fun m!163725 () Bool)

(assert (=> b!137079 m!163725))

(assert (=> d!42815 d!42899))

(declare-fun b!137080 () Bool)

(declare-fun c!25695 () Bool)

(assert (=> b!137080 (= c!25695 (and ((_ is Cons!1695) (toList!845 call!15003)) (bvsgt (_1!1298 (h!2301 (toList!845 call!15003))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89243 () List!1699)

(declare-fun e!89244 () List!1699)

(assert (=> b!137080 (= e!89243 e!89244)))

(declare-fun b!137081 () Bool)

(declare-fun e!89245 () Bool)

(declare-fun lt!71693 () List!1699)

(assert (=> b!137081 (= e!89245 (contains!891 lt!71693 (tuple2!2575 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun bm!15086 () Bool)

(declare-fun call!15091 () List!1699)

(declare-fun call!15089 () List!1699)

(assert (=> bm!15086 (= call!15091 call!15089)))

(declare-fun b!137082 () Bool)

(declare-fun e!89246 () List!1699)

(assert (=> b!137082 (= e!89246 e!89243)))

(declare-fun c!25693 () Bool)

(assert (=> b!137082 (= c!25693 (and ((_ is Cons!1695) (toList!845 call!15003)) (= (_1!1298 (h!2301 (toList!845 call!15003))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!42901 () Bool)

(assert (=> d!42901 e!89245))

(declare-fun res!65719 () Bool)

(assert (=> d!42901 (=> (not res!65719) (not e!89245))))

(assert (=> d!42901 (= res!65719 (isStrictlySorted!310 lt!71693))))

(assert (=> d!42901 (= lt!71693 e!89246)))

(declare-fun c!25696 () Bool)

(assert (=> d!42901 (= c!25696 (and ((_ is Cons!1695) (toList!845 call!15003)) (bvslt (_1!1298 (h!2301 (toList!845 call!15003))) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42901 (isStrictlySorted!310 (toList!845 call!15003))))

(assert (=> d!42901 (= (insertStrictlySorted!92 (toList!845 call!15003) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71693)))

(declare-fun e!89242 () List!1699)

(declare-fun b!137083 () Bool)

(assert (=> b!137083 (= e!89242 (ite c!25693 (t!6179 (toList!845 call!15003)) (ite c!25695 (Cons!1695 (h!2301 (toList!845 call!15003)) (t!6179 (toList!845 call!15003))) Nil!1696)))))

(declare-fun b!137084 () Bool)

(assert (=> b!137084 (= e!89244 call!15091)))

(declare-fun bm!15087 () Bool)

(declare-fun call!15090 () List!1699)

(assert (=> bm!15087 (= call!15089 call!15090)))

(declare-fun b!137085 () Bool)

(declare-fun res!65720 () Bool)

(assert (=> b!137085 (=> (not res!65720) (not e!89245))))

(assert (=> b!137085 (= res!65720 (containsKey!177 lt!71693 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137086 () Bool)

(assert (=> b!137086 (= e!89244 call!15091)))

(declare-fun bm!15088 () Bool)

(assert (=> bm!15088 (= call!15090 ($colon$colon!92 e!89242 (ite c!25696 (h!2301 (toList!845 call!15003)) (tuple2!2575 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun c!25694 () Bool)

(assert (=> bm!15088 (= c!25694 c!25696)))

(declare-fun b!137087 () Bool)

(assert (=> b!137087 (= e!89246 call!15090)))

(declare-fun b!137088 () Bool)

(assert (=> b!137088 (= e!89242 (insertStrictlySorted!92 (t!6179 (toList!845 call!15003)) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137089 () Bool)

(assert (=> b!137089 (= e!89243 call!15089)))

(assert (= (and d!42901 c!25696) b!137087))

(assert (= (and d!42901 (not c!25696)) b!137082))

(assert (= (and b!137082 c!25693) b!137089))

(assert (= (and b!137082 (not c!25693)) b!137080))

(assert (= (and b!137080 c!25695) b!137086))

(assert (= (and b!137080 (not c!25695)) b!137084))

(assert (= (or b!137086 b!137084) bm!15086))

(assert (= (or b!137089 bm!15086) bm!15087))

(assert (= (or b!137087 bm!15087) bm!15088))

(assert (= (and bm!15088 c!25694) b!137088))

(assert (= (and bm!15088 (not c!25694)) b!137083))

(assert (= (and d!42901 res!65719) b!137085))

(assert (= (and b!137085 res!65720) b!137081))

(declare-fun m!163727 () Bool)

(assert (=> d!42901 m!163727))

(declare-fun m!163729 () Bool)

(assert (=> d!42901 m!163729))

(declare-fun m!163731 () Bool)

(assert (=> b!137088 m!163731))

(declare-fun m!163733 () Bool)

(assert (=> bm!15088 m!163733))

(declare-fun m!163735 () Bool)

(assert (=> b!137081 m!163735))

(declare-fun m!163737 () Bool)

(assert (=> b!137085 m!163737))

(assert (=> d!42815 d!42901))

(assert (=> b!136773 d!42751))

(declare-fun d!42903 () Bool)

(assert (=> d!42903 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!71694 () Unit!4281)

(assert (=> d!42903 (= lt!71694 (choose!843 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89247 () Bool)

(assert (=> d!42903 e!89247))

(declare-fun res!65721 () Bool)

(assert (=> d!42903 (=> (not res!65721) (not e!89247))))

(assert (=> d!42903 (= res!65721 (isStrictlySorted!310 (toList!845 lt!71267)))))

(assert (=> d!42903 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000) lt!71694)))

(declare-fun b!137090 () Bool)

(assert (=> b!137090 (= e!89247 (containsKey!177 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!42903 res!65721) b!137090))

(assert (=> d!42903 m!162895))

(assert (=> d!42903 m!162895))

(assert (=> d!42903 m!163075))

(declare-fun m!163739 () Bool)

(assert (=> d!42903 m!163739))

(declare-fun m!163741 () Bool)

(assert (=> d!42903 m!163741))

(assert (=> b!137090 m!163071))

(assert (=> b!136700 d!42903))

(declare-fun d!42905 () Bool)

(assert (=> d!42905 (= (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!419 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5758 () Bool)

(assert (= bs!5758 d!42905))

(assert (=> bs!5758 m!162895))

(declare-fun m!163743 () Bool)

(assert (=> bs!5758 m!163743))

(assert (=> b!136700 d!42905))

(declare-fun b!137094 () Bool)

(declare-fun e!89249 () Option!180)

(assert (=> b!137094 (= e!89249 None!178)))

(declare-fun b!137091 () Bool)

(declare-fun e!89248 () Option!180)

(assert (=> b!137091 (= e!89248 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71267)))))))

(declare-fun b!137093 () Bool)

(assert (=> b!137093 (= e!89249 (getValueByKey!174 (t!6179 (toList!845 lt!71267)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!42907 () Bool)

(declare-fun c!25697 () Bool)

(assert (=> d!42907 (= c!25697 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42907 (= (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000) e!89248)))

(declare-fun b!137092 () Bool)

(assert (=> b!137092 (= e!89248 e!89249)))

(declare-fun c!25698 () Bool)

(assert (=> b!137092 (= c!25698 (and ((_ is Cons!1695) (toList!845 lt!71267)) (not (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!42907 c!25697) b!137091))

(assert (= (and d!42907 (not c!25697)) b!137092))

(assert (= (and b!137092 c!25698) b!137093))

(assert (= (and b!137092 (not c!25698)) b!137094))

(declare-fun m!163745 () Bool)

(assert (=> b!137093 m!163745))

(assert (=> b!136700 d!42907))

(declare-fun d!42909 () Bool)

(declare-fun res!65722 () Bool)

(declare-fun e!89250 () Bool)

(assert (=> d!42909 (=> res!65722 e!89250)))

(assert (=> d!42909 (= res!65722 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42909 (= (containsKey!177 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000) e!89250)))

(declare-fun b!137095 () Bool)

(declare-fun e!89251 () Bool)

(assert (=> b!137095 (= e!89250 e!89251)))

(declare-fun res!65723 () Bool)

(assert (=> b!137095 (=> (not res!65723) (not e!89251))))

(assert (=> b!137095 (= res!65723 (and (or (not ((_ is Cons!1695) (toList!845 lt!71267))) (bvsle (_1!1298 (h!2301 (toList!845 lt!71267))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1695) (toList!845 lt!71267)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71267))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137096 () Bool)

(assert (=> b!137096 (= e!89251 (containsKey!177 (t!6179 (toList!845 lt!71267)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!42909 (not res!65722)) b!137095))

(assert (= (and b!137095 res!65723) b!137096))

(declare-fun m!163747 () Bool)

(assert (=> b!137096 m!163747))

(assert (=> d!42821 d!42909))

(declare-fun d!42911 () Bool)

(assert (=> d!42911 (= (apply!117 lt!71322 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!174 (toList!845 lt!71322) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5759 () Bool)

(assert (= bs!5759 d!42911))

(assert (=> bs!5759 m!162887))

(declare-fun m!163749 () Bool)

(assert (=> bs!5759 m!163749))

(assert (=> bs!5759 m!163749))

(declare-fun m!163751 () Bool)

(assert (=> bs!5759 m!163751))

(assert (=> b!136651 d!42911))

(declare-fun d!42913 () Bool)

(declare-fun c!25699 () Bool)

(assert (=> d!42913 (= c!25699 ((_ is ValueCellFull!1100) (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!89252 () V!3497)

(assert (=> d!42913 (= (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89252)))

(declare-fun b!137097 () Bool)

(assert (=> b!137097 (= e!89252 (get!1500 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137098 () Bool)

(assert (=> b!137098 (= e!89252 (get!1501 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42913 c!25699) b!137097))

(assert (= (and d!42913 (not c!25699)) b!137098))

(assert (=> b!137097 m!162957))

(assert (=> b!137097 m!162959))

(declare-fun m!163753 () Bool)

(assert (=> b!137097 m!163753))

(assert (=> b!137098 m!162957))

(assert (=> b!137098 m!162959))

(declare-fun m!163755 () Bool)

(assert (=> b!137098 m!163755))

(assert (=> b!136651 d!42913))

(declare-fun d!42915 () Bool)

(declare-fun e!89253 () Bool)

(assert (=> d!42915 e!89253))

(declare-fun res!65725 () Bool)

(assert (=> d!42915 (=> (not res!65725) (not e!89253))))

(declare-fun lt!71698 () ListLongMap!1659)

(assert (=> d!42915 (= res!65725 (contains!888 lt!71698 (_1!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(declare-fun lt!71695 () List!1699)

(assert (=> d!42915 (= lt!71698 (ListLongMap!1660 lt!71695))))

(declare-fun lt!71696 () Unit!4281)

(declare-fun lt!71697 () Unit!4281)

(assert (=> d!42915 (= lt!71696 lt!71697)))

(assert (=> d!42915 (= (getValueByKey!174 lt!71695 (_1!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))) (Some!179 (_2!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(assert (=> d!42915 (= lt!71697 (lemmaContainsTupThenGetReturnValue!89 lt!71695 (_1!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (_2!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(assert (=> d!42915 (= lt!71695 (insertStrictlySorted!92 (toList!845 (ite c!25590 call!15027 (ite c!25591 call!15024 call!15028))) (_1!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (_2!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(assert (=> d!42915 (= (+!170 (ite c!25590 call!15027 (ite c!25591 call!15024 call!15028)) (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) lt!71698)))

(declare-fun b!137099 () Bool)

(declare-fun res!65724 () Bool)

(assert (=> b!137099 (=> (not res!65724) (not e!89253))))

(assert (=> b!137099 (= res!65724 (= (getValueByKey!174 (toList!845 lt!71698) (_1!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))) (Some!179 (_2!1298 (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))))

(declare-fun b!137100 () Bool)

(assert (=> b!137100 (= e!89253 (contains!891 (toList!845 lt!71698) (ite (or c!25590 c!25591) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (= (and d!42915 res!65725) b!137099))

(assert (= (and b!137099 res!65724) b!137100))

(declare-fun m!163757 () Bool)

(assert (=> d!42915 m!163757))

(declare-fun m!163759 () Bool)

(assert (=> d!42915 m!163759))

(declare-fun m!163761 () Bool)

(assert (=> d!42915 m!163761))

(declare-fun m!163763 () Bool)

(assert (=> d!42915 m!163763))

(declare-fun m!163765 () Bool)

(assert (=> b!137099 m!163765))

(declare-fun m!163767 () Bool)

(assert (=> b!137100 m!163767))

(assert (=> bm!15021 d!42915))

(declare-fun d!42917 () Bool)

(declare-fun e!89254 () Bool)

(assert (=> d!42917 e!89254))

(declare-fun res!65727 () Bool)

(assert (=> d!42917 (=> (not res!65727) (not e!89254))))

(declare-fun lt!71702 () ListLongMap!1659)

(assert (=> d!42917 (= res!65727 (contains!888 lt!71702 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun lt!71699 () List!1699)

(assert (=> d!42917 (= lt!71702 (ListLongMap!1660 lt!71699))))

(declare-fun lt!71700 () Unit!4281)

(declare-fun lt!71701 () Unit!4281)

(assert (=> d!42917 (= lt!71700 lt!71701)))

(assert (=> d!42917 (= (getValueByKey!174 lt!71699 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!42917 (= lt!71701 (lemmaContainsTupThenGetReturnValue!89 lt!71699 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!42917 (= lt!71699 (insertStrictlySorted!92 (toList!845 call!15054) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!42917 (= (+!170 call!15054 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) lt!71702)))

(declare-fun b!137101 () Bool)

(declare-fun res!65726 () Bool)

(assert (=> b!137101 (=> (not res!65726) (not e!89254))))

(assert (=> b!137101 (= res!65726 (= (getValueByKey!174 (toList!845 lt!71702) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(declare-fun b!137102 () Bool)

(assert (=> b!137102 (= e!89254 (contains!891 (toList!845 lt!71702) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(assert (= (and d!42917 res!65727) b!137101))

(assert (= (and b!137101 res!65726) b!137102))

(declare-fun m!163769 () Bool)

(assert (=> d!42917 m!163769))

(declare-fun m!163771 () Bool)

(assert (=> d!42917 m!163771))

(declare-fun m!163773 () Bool)

(assert (=> d!42917 m!163773))

(declare-fun m!163775 () Bool)

(assert (=> d!42917 m!163775))

(declare-fun m!163777 () Bool)

(assert (=> b!137101 m!163777))

(declare-fun m!163779 () Bool)

(assert (=> b!137102 m!163779))

(assert (=> b!136881 d!42917))

(declare-fun d!42919 () Bool)

(assert (=> d!42919 (= (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273)) (not (isEmpty!419 (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))))

(declare-fun bs!5760 () Bool)

(assert (= bs!5760 d!42919))

(assert (=> bs!5760 m!163207))

(declare-fun m!163781 () Bool)

(assert (=> bs!5760 m!163781))

(assert (=> b!136808 d!42919))

(declare-fun b!137106 () Bool)

(declare-fun e!89256 () Option!180)

(assert (=> b!137106 (= e!89256 None!178)))

(declare-fun e!89255 () Option!180)

(declare-fun b!137103 () Bool)

(assert (=> b!137103 (= e!89255 (Some!179 (_2!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(declare-fun b!137105 () Bool)

(assert (=> b!137105 (= e!89256 (getValueByKey!174 (t!6179 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71273))))

(declare-fun d!42921 () Bool)

(declare-fun c!25700 () Bool)

(assert (=> d!42921 (= c!25700 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71273)))))

(assert (=> d!42921 (= (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273) e!89255)))

(declare-fun b!137104 () Bool)

(assert (=> b!137104 (= e!89255 e!89256)))

(declare-fun c!25701 () Bool)

(assert (=> b!137104 (= c!25701 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (not (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71273))))))

(assert (= (and d!42921 c!25700) b!137103))

(assert (= (and d!42921 (not c!25700)) b!137104))

(assert (= (and b!137104 c!25701) b!137105))

(assert (= (and b!137104 (not c!25701)) b!137106))

(declare-fun m!163783 () Bool)

(assert (=> b!137105 m!163783))

(assert (=> b!136808 d!42921))

(declare-fun b!137107 () Bool)

(declare-fun e!89257 () (_ BitVec 32))

(declare-fun call!15092 () (_ BitVec 32))

(assert (=> b!137107 (= e!89257 call!15092)))

(declare-fun d!42923 () Bool)

(declare-fun lt!71703 () (_ BitVec 32))

(assert (=> d!42923 (and (bvsge lt!71703 #b00000000000000000000000000000000) (bvsle lt!71703 (bvsub (size!2534 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun e!89258 () (_ BitVec 32))

(assert (=> d!42923 (= lt!71703 e!89258)))

(declare-fun c!25703 () Bool)

(assert (=> d!42923 (= c!25703 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(assert (=> d!42923 (and (bvsle #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2534 (_keys!4641 (_2!1299 lt!71193))) (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(assert (=> d!42923 (= (arrayCountValidKeys!0 (_keys!4641 (_2!1299 lt!71193)) #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))) lt!71703)))

(declare-fun b!137108 () Bool)

(assert (=> b!137108 (= e!89258 e!89257)))

(declare-fun c!25702 () Bool)

(assert (=> b!137108 (= c!25702 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun b!137109 () Bool)

(assert (=> b!137109 (= e!89258 #b00000000000000000000000000000000)))

(declare-fun b!137110 () Bool)

(assert (=> b!137110 (= e!89257 (bvadd #b00000000000000000000000000000001 call!15092))))

(declare-fun bm!15089 () Bool)

(assert (=> bm!15089 (= call!15092 (arrayCountValidKeys!0 (_keys!4641 (_2!1299 lt!71193)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(assert (= (and d!42923 c!25703) b!137109))

(assert (= (and d!42923 (not c!25703)) b!137108))

(assert (= (and b!137108 c!25702) b!137110))

(assert (= (and b!137108 (not c!25702)) b!137107))

(assert (= (or b!137110 b!137107) bm!15089))

(assert (=> b!137108 m!163457))

(assert (=> b!137108 m!163457))

(assert (=> b!137108 m!163481))

(declare-fun m!163785 () Bool)

(assert (=> bm!15089 m!163785))

(assert (=> b!136561 d!42923))

(assert (=> b!136568 d!42685))

(declare-fun d!42925 () Bool)

(declare-fun e!89259 () Bool)

(assert (=> d!42925 e!89259))

(declare-fun res!65728 () Bool)

(assert (=> d!42925 (=> res!65728 e!89259)))

(declare-fun lt!71705 () Bool)

(assert (=> d!42925 (= res!65728 (not lt!71705))))

(declare-fun lt!71706 () Bool)

(assert (=> d!42925 (= lt!71705 lt!71706)))

(declare-fun lt!71707 () Unit!4281)

(declare-fun e!89260 () Unit!4281)

(assert (=> d!42925 (= lt!71707 e!89260)))

(declare-fun c!25704 () Bool)

(assert (=> d!42925 (= c!25704 lt!71706)))

(assert (=> d!42925 (= lt!71706 (containsKey!177 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (=> d!42925 (= (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))) lt!71705)))

(declare-fun b!137111 () Bool)

(declare-fun lt!71704 () Unit!4281)

(assert (=> b!137111 (= e!89260 lt!71704)))

(assert (=> b!137111 (= lt!71704 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (=> b!137111 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(declare-fun b!137112 () Bool)

(declare-fun Unit!4307 () Unit!4281)

(assert (=> b!137112 (= e!89260 Unit!4307)))

(declare-fun b!137113 () Bool)

(assert (=> b!137113 (= e!89259 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))))

(assert (= (and d!42925 c!25704) b!137111))

(assert (= (and d!42925 (not c!25704)) b!137112))

(assert (= (and d!42925 (not res!65728)) b!137113))

(assert (=> d!42925 m!162761))

(declare-fun m!163787 () Bool)

(assert (=> d!42925 m!163787))

(assert (=> b!137111 m!162761))

(declare-fun m!163789 () Bool)

(assert (=> b!137111 m!163789))

(assert (=> b!137111 m!162761))

(declare-fun m!163791 () Bool)

(assert (=> b!137111 m!163791))

(assert (=> b!137111 m!163791))

(declare-fun m!163793 () Bool)

(assert (=> b!137111 m!163793))

(assert (=> b!137113 m!162761))

(assert (=> b!137113 m!163791))

(assert (=> b!137113 m!163791))

(assert (=> b!137113 m!163793))

(assert (=> b!136663 d!42925))

(declare-fun b!137114 () Bool)

(declare-fun e!89273 () Bool)

(assert (=> b!137114 (= e!89273 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137115 () Bool)

(declare-fun c!25710 () Bool)

(assert (=> b!137115 (= c!25710 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89264 () ListLongMap!1659)

(declare-fun e!89268 () ListLongMap!1659)

(assert (=> b!137115 (= e!89264 e!89268)))

(declare-fun d!42927 () Bool)

(declare-fun e!89266 () Bool)

(assert (=> d!42927 e!89266))

(declare-fun res!65736 () Bool)

(assert (=> d!42927 (=> (not res!65736) (not e!89266))))

(assert (=> d!42927 (= res!65736 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71718 () ListLongMap!1659)

(declare-fun lt!71727 () ListLongMap!1659)

(assert (=> d!42927 (= lt!71718 lt!71727)))

(declare-fun lt!71726 () Unit!4281)

(declare-fun e!89267 () Unit!4281)

(assert (=> d!42927 (= lt!71726 e!89267)))

(declare-fun c!25705 () Bool)

(assert (=> d!42927 (= c!25705 e!89273)))

(declare-fun res!65733 () Bool)

(assert (=> d!42927 (=> (not res!65733) (not e!89273))))

(assert (=> d!42927 (= res!65733 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89265 () ListLongMap!1659)

(assert (=> d!42927 (= lt!71727 e!89265)))

(declare-fun c!25708 () Bool)

(assert (=> d!42927 (= c!25708 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42927 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42927 (= (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71718)))

(declare-fun b!137116 () Bool)

(declare-fun call!15094 () ListLongMap!1659)

(assert (=> b!137116 (= e!89264 call!15094)))

(declare-fun b!137117 () Bool)

(declare-fun res!65732 () Bool)

(assert (=> b!137117 (=> (not res!65732) (not e!89266))))

(declare-fun e!89269 () Bool)

(assert (=> b!137117 (= res!65732 e!89269)))

(declare-fun c!25707 () Bool)

(assert (=> b!137117 (= c!25707 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15090 () Bool)

(declare-fun call!15095 () ListLongMap!1659)

(declare-fun call!15098 () ListLongMap!1659)

(assert (=> bm!15090 (= call!15095 call!15098)))

(declare-fun bm!15091 () Bool)

(declare-fun call!15096 () Bool)

(assert (=> bm!15091 (= call!15096 (contains!888 lt!71718 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137118 () Bool)

(declare-fun Unit!4308 () Unit!4281)

(assert (=> b!137118 (= e!89267 Unit!4308)))

(declare-fun b!137119 () Bool)

(declare-fun call!15097 () ListLongMap!1659)

(assert (=> b!137119 (= e!89265 (+!170 call!15097 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!137120 () Bool)

(declare-fun e!89262 () Bool)

(assert (=> b!137120 (= e!89262 (= (apply!117 lt!71718 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!137121 () Bool)

(declare-fun res!65730 () Bool)

(assert (=> b!137121 (=> (not res!65730) (not e!89266))))

(declare-fun e!89272 () Bool)

(assert (=> b!137121 (= res!65730 e!89272)))

(declare-fun res!65729 () Bool)

(assert (=> b!137121 (=> res!65729 e!89272)))

(declare-fun e!89270 () Bool)

(assert (=> b!137121 (= res!65729 (not e!89270))))

(declare-fun res!65735 () Bool)

(assert (=> b!137121 (=> (not res!65735) (not e!89270))))

(assert (=> b!137121 (= res!65735 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun call!15099 () ListLongMap!1659)

(declare-fun c!25709 () Bool)

(declare-fun bm!15092 () Bool)

(assert (=> bm!15092 (= call!15097 (+!170 (ite c!25708 call!15098 (ite c!25709 call!15095 call!15099)) (ite (or c!25708 c!25709) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!137122 () Bool)

(declare-fun e!89261 () Bool)

(assert (=> b!137122 (= e!89272 e!89261)))

(declare-fun res!65731 () Bool)

(assert (=> b!137122 (=> (not res!65731) (not e!89261))))

(assert (=> b!137122 (= res!65731 (contains!888 lt!71718 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137122 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137123 () Bool)

(assert (=> b!137123 (= e!89265 e!89264)))

(assert (=> b!137123 (= c!25709 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137124 () Bool)

(declare-fun lt!71712 () Unit!4281)

(assert (=> b!137124 (= e!89267 lt!71712)))

(declare-fun lt!71723 () ListLongMap!1659)

(assert (=> b!137124 (= lt!71723 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71717 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71717 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71724 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71724 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71721 () Unit!4281)

(assert (=> b!137124 (= lt!71721 (addStillContains!93 lt!71723 lt!71717 (zeroValue!2741 newMap!16) lt!71724))))

(assert (=> b!137124 (contains!888 (+!170 lt!71723 (tuple2!2575 lt!71717 (zeroValue!2741 newMap!16))) lt!71724)))

(declare-fun lt!71720 () Unit!4281)

(assert (=> b!137124 (= lt!71720 lt!71721)))

(declare-fun lt!71729 () ListLongMap!1659)

(assert (=> b!137124 (= lt!71729 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71716 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71716 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71715 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71715 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71722 () Unit!4281)

(assert (=> b!137124 (= lt!71722 (addApplyDifferent!93 lt!71729 lt!71716 (minValue!2741 newMap!16) lt!71715))))

(assert (=> b!137124 (= (apply!117 (+!170 lt!71729 (tuple2!2575 lt!71716 (minValue!2741 newMap!16))) lt!71715) (apply!117 lt!71729 lt!71715))))

(declare-fun lt!71714 () Unit!4281)

(assert (=> b!137124 (= lt!71714 lt!71722)))

(declare-fun lt!71708 () ListLongMap!1659)

(assert (=> b!137124 (= lt!71708 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71711 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71711 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71709 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71709 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71728 () Unit!4281)

(assert (=> b!137124 (= lt!71728 (addApplyDifferent!93 lt!71708 lt!71711 (zeroValue!2741 newMap!16) lt!71709))))

(assert (=> b!137124 (= (apply!117 (+!170 lt!71708 (tuple2!2575 lt!71711 (zeroValue!2741 newMap!16))) lt!71709) (apply!117 lt!71708 lt!71709))))

(declare-fun lt!71710 () Unit!4281)

(assert (=> b!137124 (= lt!71710 lt!71728)))

(declare-fun lt!71713 () ListLongMap!1659)

(assert (=> b!137124 (= lt!71713 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71719 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71719 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71725 () (_ BitVec 64))

(assert (=> b!137124 (= lt!71725 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137124 (= lt!71712 (addApplyDifferent!93 lt!71713 lt!71719 (minValue!2741 newMap!16) lt!71725))))

(assert (=> b!137124 (= (apply!117 (+!170 lt!71713 (tuple2!2575 lt!71719 (minValue!2741 newMap!16))) lt!71725) (apply!117 lt!71713 lt!71725))))

(declare-fun bm!15093 () Bool)

(assert (=> bm!15093 (= call!15098 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!137125 () Bool)

(declare-fun e!89263 () Bool)

(assert (=> b!137125 (= e!89266 e!89263)))

(declare-fun c!25706 () Bool)

(assert (=> b!137125 (= c!25706 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137126 () Bool)

(declare-fun e!89271 () Bool)

(assert (=> b!137126 (= e!89271 (= (apply!117 lt!71718 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!137127 () Bool)

(assert (=> b!137127 (= e!89263 e!89262)))

(declare-fun res!65734 () Bool)

(assert (=> b!137127 (= res!65734 call!15096)))

(assert (=> b!137127 (=> (not res!65734) (not e!89262))))

(declare-fun b!137128 () Bool)

(assert (=> b!137128 (= e!89261 (= (apply!117 lt!71718 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 lt!71196) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137128 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 lt!71196)))))

(assert (=> b!137128 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137129 () Bool)

(assert (=> b!137129 (= e!89268 call!15094)))

(declare-fun b!137130 () Bool)

(assert (=> b!137130 (= e!89270 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137131 () Bool)

(assert (=> b!137131 (= e!89268 call!15099)))

(declare-fun b!137132 () Bool)

(assert (=> b!137132 (= e!89263 (not call!15096))))

(declare-fun b!137133 () Bool)

(declare-fun call!15093 () Bool)

(assert (=> b!137133 (= e!89269 (not call!15093))))

(declare-fun b!137134 () Bool)

(assert (=> b!137134 (= e!89269 e!89271)))

(declare-fun res!65737 () Bool)

(assert (=> b!137134 (= res!65737 call!15093)))

(assert (=> b!137134 (=> (not res!65737) (not e!89271))))

(declare-fun bm!15094 () Bool)

(assert (=> bm!15094 (= call!15093 (contains!888 lt!71718 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15095 () Bool)

(assert (=> bm!15095 (= call!15099 call!15095)))

(declare-fun bm!15096 () Bool)

(assert (=> bm!15096 (= call!15094 call!15097)))

(assert (= (and d!42927 c!25708) b!137119))

(assert (= (and d!42927 (not c!25708)) b!137123))

(assert (= (and b!137123 c!25709) b!137116))

(assert (= (and b!137123 (not c!25709)) b!137115))

(assert (= (and b!137115 c!25710) b!137129))

(assert (= (and b!137115 (not c!25710)) b!137131))

(assert (= (or b!137129 b!137131) bm!15095))

(assert (= (or b!137116 bm!15095) bm!15090))

(assert (= (or b!137116 b!137129) bm!15096))

(assert (= (or b!137119 bm!15090) bm!15093))

(assert (= (or b!137119 bm!15096) bm!15092))

(assert (= (and d!42927 res!65733) b!137114))

(assert (= (and d!42927 c!25705) b!137124))

(assert (= (and d!42927 (not c!25705)) b!137118))

(assert (= (and d!42927 res!65736) b!137121))

(assert (= (and b!137121 res!65735) b!137130))

(assert (= (and b!137121 (not res!65729)) b!137122))

(assert (= (and b!137122 res!65731) b!137128))

(assert (= (and b!137121 res!65730) b!137117))

(assert (= (and b!137117 c!25707) b!137134))

(assert (= (and b!137117 (not c!25707)) b!137133))

(assert (= (and b!137134 res!65737) b!137126))

(assert (= (or b!137134 b!137133) bm!15094))

(assert (= (and b!137117 res!65732) b!137125))

(assert (= (and b!137125 c!25706) b!137127))

(assert (= (and b!137125 (not c!25706)) b!137132))

(assert (= (and b!137127 res!65734) b!137120))

(assert (= (or b!137127 b!137132) bm!15091))

(declare-fun b_lambda!6139 () Bool)

(assert (=> (not b_lambda!6139) (not b!137128)))

(assert (=> b!137128 t!6191))

(declare-fun b_and!8501 () Bool)

(assert (= b_and!8497 (and (=> t!6191 result!4043) b_and!8501)))

(assert (=> b!137128 t!6193))

(declare-fun b_and!8503 () Bool)

(assert (= b_and!8499 (and (=> t!6193 result!4045) b_and!8503)))

(declare-fun m!163795 () Bool)

(assert (=> b!137120 m!163795))

(declare-fun m!163797 () Bool)

(assert (=> b!137124 m!163797))

(declare-fun m!163799 () Bool)

(assert (=> b!137124 m!163799))

(declare-fun m!163801 () Bool)

(assert (=> b!137124 m!163801))

(declare-fun m!163803 () Bool)

(assert (=> b!137124 m!163803))

(declare-fun m!163805 () Bool)

(assert (=> b!137124 m!163805))

(declare-fun m!163807 () Bool)

(assert (=> b!137124 m!163807))

(declare-fun m!163809 () Bool)

(assert (=> b!137124 m!163809))

(assert (=> b!137124 m!163809))

(declare-fun m!163811 () Bool)

(assert (=> b!137124 m!163811))

(declare-fun m!163813 () Bool)

(assert (=> b!137124 m!163813))

(declare-fun m!163815 () Bool)

(assert (=> b!137124 m!163815))

(declare-fun m!163817 () Bool)

(assert (=> b!137124 m!163817))

(declare-fun m!163819 () Bool)

(assert (=> b!137124 m!163819))

(declare-fun m!163821 () Bool)

(assert (=> b!137124 m!163821))

(assert (=> b!137124 m!162887))

(assert (=> b!137124 m!163799))

(assert (=> b!137124 m!163815))

(assert (=> b!137124 m!163813))

(declare-fun m!163823 () Bool)

(assert (=> b!137124 m!163823))

(declare-fun m!163825 () Bool)

(assert (=> b!137124 m!163825))

(declare-fun m!163827 () Bool)

(assert (=> b!137124 m!163827))

(assert (=> b!137122 m!162887))

(assert (=> b!137122 m!162887))

(declare-fun m!163829 () Bool)

(assert (=> b!137122 m!163829))

(assert (=> d!42927 m!162853))

(declare-fun m!163831 () Bool)

(assert (=> b!137128 m!163831))

(assert (=> b!137128 m!163831))

(assert (=> b!137128 m!162959))

(declare-fun m!163833 () Bool)

(assert (=> b!137128 m!163833))

(assert (=> b!137128 m!162887))

(assert (=> b!137128 m!162887))

(declare-fun m!163835 () Bool)

(assert (=> b!137128 m!163835))

(assert (=> b!137128 m!162959))

(declare-fun m!163837 () Bool)

(assert (=> b!137119 m!163837))

(declare-fun m!163839 () Bool)

(assert (=> bm!15094 m!163839))

(assert (=> bm!15093 m!163797))

(assert (=> b!137130 m!162887))

(assert (=> b!137130 m!162887))

(assert (=> b!137130 m!162891))

(assert (=> b!137114 m!162887))

(assert (=> b!137114 m!162887))

(assert (=> b!137114 m!162891))

(declare-fun m!163841 () Bool)

(assert (=> bm!15091 m!163841))

(declare-fun m!163843 () Bool)

(assert (=> bm!15092 m!163843))

(declare-fun m!163845 () Bool)

(assert (=> b!137126 m!163845))

(assert (=> b!136663 d!42927))

(declare-fun lt!71730 () Bool)

(declare-fun d!42929 () Bool)

(assert (=> d!42929 (= lt!71730 (select (content!135 (toList!845 lt!71517)) (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89275 () Bool)

(assert (=> d!42929 (= lt!71730 e!89275)))

(declare-fun res!65738 () Bool)

(assert (=> d!42929 (=> (not res!65738) (not e!89275))))

(assert (=> d!42929 (= res!65738 ((_ is Cons!1695) (toList!845 lt!71517)))))

(assert (=> d!42929 (= (contains!891 (toList!845 lt!71517) (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71730)))

(declare-fun b!137135 () Bool)

(declare-fun e!89274 () Bool)

(assert (=> b!137135 (= e!89275 e!89274)))

(declare-fun res!65739 () Bool)

(assert (=> b!137135 (=> res!65739 e!89274)))

(assert (=> b!137135 (= res!65739 (= (h!2301 (toList!845 lt!71517)) (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137136 () Bool)

(assert (=> b!137136 (= e!89274 (contains!891 (t!6179 (toList!845 lt!71517)) (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42929 res!65738) b!137135))

(assert (= (and b!137135 (not res!65739)) b!137136))

(declare-fun m!163847 () Bool)

(assert (=> d!42929 m!163847))

(declare-fun m!163849 () Bool)

(assert (=> d!42929 m!163849))

(declare-fun m!163851 () Bool)

(assert (=> b!137136 m!163851))

(assert (=> b!136812 d!42929))

(declare-fun d!42931 () Bool)

(declare-fun res!65740 () Bool)

(declare-fun e!89276 () Bool)

(assert (=> d!42931 (=> res!65740 e!89276)))

(assert (=> d!42931 (= res!65740 (= (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42931 (= (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!89276)))

(declare-fun b!137137 () Bool)

(declare-fun e!89277 () Bool)

(assert (=> b!137137 (= e!89276 e!89277)))

(declare-fun res!65741 () Bool)

(assert (=> b!137137 (=> (not res!65741) (not e!89277))))

(assert (=> b!137137 (= res!65741 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137138 () Bool)

(assert (=> b!137138 (= e!89277 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!42931 (not res!65740)) b!137137))

(assert (= (and b!137137 res!65741) b!137138))

(assert (=> d!42931 m!163567))

(assert (=> b!137138 m!162605))

(declare-fun m!163853 () Bool)

(assert (=> b!137138 m!163853))

(assert (=> b!136865 d!42931))

(declare-fun d!42933 () Bool)

(declare-fun res!65742 () Bool)

(declare-fun e!89278 () Bool)

(assert (=> d!42933 (=> res!65742 e!89278)))

(assert (=> d!42933 (= res!65742 (= (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42933 (= (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!89278)))

(declare-fun b!137139 () Bool)

(declare-fun e!89279 () Bool)

(assert (=> b!137139 (= e!89278 e!89279)))

(declare-fun res!65743 () Bool)

(assert (=> b!137139 (=> (not res!65743) (not e!89279))))

(assert (=> b!137139 (= res!65743 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137140 () Bool)

(assert (=> b!137140 (= e!89279 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!42933 (not res!65742)) b!137139))

(assert (= (and b!137139 res!65743) b!137140))

(declare-fun m!163855 () Bool)

(assert (=> d!42933 m!163855))

(assert (=> b!137140 m!162605))

(declare-fun m!163857 () Bool)

(assert (=> b!137140 m!163857))

(assert (=> b!136573 d!42933))

(declare-fun d!42935 () Bool)

(assert (=> d!42935 (= (apply!117 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71258) (apply!117 lt!71257 lt!71258))))

(assert (=> d!42935 true))

(declare-fun _$34!991 () Unit!4281)

(assert (=> d!42935 (= (choose!844 lt!71257 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71258) _$34!991)))

(declare-fun bs!5761 () Bool)

(assert (= bs!5761 d!42935))

(assert (=> bs!5761 m!162787))

(assert (=> bs!5761 m!162787))

(assert (=> bs!5761 m!162789))

(assert (=> bs!5761 m!162807))

(assert (=> d!42773 d!42935))

(assert (=> d!42773 d!42777))

(assert (=> d!42773 d!42785))

(assert (=> d!42773 d!42801))

(declare-fun d!42937 () Bool)

(declare-fun e!89280 () Bool)

(assert (=> d!42937 e!89280))

(declare-fun res!65744 () Bool)

(assert (=> d!42937 (=> res!65744 e!89280)))

(declare-fun lt!71732 () Bool)

(assert (=> d!42937 (= res!65744 (not lt!71732))))

(declare-fun lt!71733 () Bool)

(assert (=> d!42937 (= lt!71732 lt!71733)))

(declare-fun lt!71734 () Unit!4281)

(declare-fun e!89281 () Unit!4281)

(assert (=> d!42937 (= lt!71734 e!89281)))

(declare-fun c!25711 () Bool)

(assert (=> d!42937 (= c!25711 lt!71733)))

(assert (=> d!42937 (= lt!71733 (containsKey!177 (toList!845 lt!71257) lt!71258))))

(assert (=> d!42937 (= (contains!888 lt!71257 lt!71258) lt!71732)))

(declare-fun b!137142 () Bool)

(declare-fun lt!71731 () Unit!4281)

(assert (=> b!137142 (= e!89281 lt!71731)))

(assert (=> b!137142 (= lt!71731 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71257) lt!71258))))

(assert (=> b!137142 (isDefined!126 (getValueByKey!174 (toList!845 lt!71257) lt!71258))))

(declare-fun b!137143 () Bool)

(declare-fun Unit!4309 () Unit!4281)

(assert (=> b!137143 (= e!89281 Unit!4309)))

(declare-fun b!137144 () Bool)

(assert (=> b!137144 (= e!89280 (isDefined!126 (getValueByKey!174 (toList!845 lt!71257) lt!71258)))))

(assert (= (and d!42937 c!25711) b!137142))

(assert (= (and d!42937 (not c!25711)) b!137143))

(assert (= (and d!42937 (not res!65744)) b!137144))

(declare-fun m!163859 () Bool)

(assert (=> d!42937 m!163859))

(declare-fun m!163861 () Bool)

(assert (=> b!137142 m!163861))

(assert (=> b!137142 m!163215))

(assert (=> b!137142 m!163215))

(declare-fun m!163863 () Bool)

(assert (=> b!137142 m!163863))

(assert (=> b!137144 m!163215))

(assert (=> b!137144 m!163215))

(assert (=> b!137144 m!163863))

(assert (=> d!42773 d!42937))

(declare-fun bm!15097 () Bool)

(declare-fun call!15100 () ListLongMap!1659)

(assert (=> bm!15097 (= call!15100 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16)))))

(declare-fun b!137146 () Bool)

(declare-fun e!89283 () Bool)

(declare-fun lt!71741 () ListLongMap!1659)

(assert (=> b!137146 (= e!89283 (= lt!71741 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16))))))

(declare-fun b!137147 () Bool)

(declare-fun res!65746 () Bool)

(declare-fun e!89286 () Bool)

(assert (=> b!137147 (=> (not res!65746) (not e!89286))))

(assert (=> b!137147 (= res!65746 (not (contains!888 lt!71741 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137148 () Bool)

(declare-fun e!89288 () Bool)

(assert (=> b!137148 (= e!89288 e!89283)))

(declare-fun c!25715 () Bool)

(assert (=> b!137148 (= c!25715 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137149 () Bool)

(declare-fun e!89282 () ListLongMap!1659)

(assert (=> b!137149 (= e!89282 call!15100)))

(declare-fun b!137150 () Bool)

(declare-fun e!89287 () Bool)

(assert (=> b!137150 (= e!89287 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137150 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!137151 () Bool)

(declare-fun e!89285 () ListLongMap!1659)

(assert (=> b!137151 (= e!89285 (ListLongMap!1660 Nil!1696))))

(declare-fun b!137152 () Bool)

(assert (=> b!137152 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> b!137152 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (_values!2871 newMap!16))))))

(declare-fun e!89284 () Bool)

(assert (=> b!137152 (= e!89284 (= (apply!117 lt!71741 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137153 () Bool)

(declare-fun lt!71739 () Unit!4281)

(declare-fun lt!71736 () Unit!4281)

(assert (=> b!137153 (= lt!71739 lt!71736)))

(declare-fun lt!71735 () ListLongMap!1659)

(declare-fun lt!71740 () (_ BitVec 64))

(declare-fun lt!71738 () (_ BitVec 64))

(declare-fun lt!71737 () V!3497)

(assert (=> b!137153 (not (contains!888 (+!170 lt!71735 (tuple2!2575 lt!71738 lt!71737)) lt!71740))))

(assert (=> b!137153 (= lt!71736 (addStillNotContains!64 lt!71735 lt!71738 lt!71737 lt!71740))))

(assert (=> b!137153 (= lt!71740 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137153 (= lt!71737 (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137153 (= lt!71738 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137153 (= lt!71735 call!15100)))

(assert (=> b!137153 (= e!89282 (+!170 call!15100 (tuple2!2575 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137154 () Bool)

(assert (=> b!137154 (= e!89283 (isEmpty!418 lt!71741))))

(declare-fun d!42939 () Bool)

(assert (=> d!42939 e!89286))

(declare-fun res!65748 () Bool)

(assert (=> d!42939 (=> (not res!65748) (not e!89286))))

(assert (=> d!42939 (= res!65748 (not (contains!888 lt!71741 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42939 (= lt!71741 e!89285)))

(declare-fun c!25714 () Bool)

(assert (=> d!42939 (= c!25714 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!42939 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42939 (= (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71741)))

(declare-fun b!137145 () Bool)

(assert (=> b!137145 (= e!89285 e!89282)))

(declare-fun c!25712 () Bool)

(assert (=> b!137145 (= c!25712 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137155 () Bool)

(assert (=> b!137155 (= e!89286 e!89288)))

(declare-fun c!25713 () Bool)

(assert (=> b!137155 (= c!25713 e!89287)))

(declare-fun res!65747 () Bool)

(assert (=> b!137155 (=> (not res!65747) (not e!89287))))

(assert (=> b!137155 (= res!65747 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137156 () Bool)

(assert (=> b!137156 (= e!89288 e!89284)))

(assert (=> b!137156 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65745 () Bool)

(assert (=> b!137156 (= res!65745 (contains!888 lt!71741 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137156 (=> (not res!65745) (not e!89284))))

(assert (= (and d!42939 c!25714) b!137151))

(assert (= (and d!42939 (not c!25714)) b!137145))

(assert (= (and b!137145 c!25712) b!137153))

(assert (= (and b!137145 (not c!25712)) b!137149))

(assert (= (or b!137153 b!137149) bm!15097))

(assert (= (and d!42939 res!65748) b!137147))

(assert (= (and b!137147 res!65746) b!137155))

(assert (= (and b!137155 res!65747) b!137150))

(assert (= (and b!137155 c!25713) b!137156))

(assert (= (and b!137155 (not c!25713)) b!137148))

(assert (= (and b!137156 res!65745) b!137152))

(assert (= (and b!137148 c!25715) b!137146))

(assert (= (and b!137148 (not c!25715)) b!137154))

(declare-fun b_lambda!6141 () Bool)

(assert (=> (not b_lambda!6141) (not b!137152)))

(assert (=> b!137152 t!6191))

(declare-fun b_and!8505 () Bool)

(assert (= b_and!8501 (and (=> t!6191 result!4043) b_and!8505)))

(assert (=> b!137152 t!6193))

(declare-fun b_and!8507 () Bool)

(assert (= b_and!8503 (and (=> t!6193 result!4045) b_and!8507)))

(declare-fun b_lambda!6143 () Bool)

(assert (=> (not b_lambda!6143) (not b!137153)))

(assert (=> b!137153 t!6191))

(declare-fun b_and!8509 () Bool)

(assert (= b_and!8505 (and (=> t!6191 result!4043) b_and!8509)))

(assert (=> b!137153 t!6193))

(declare-fun b_and!8511 () Bool)

(assert (= b_and!8507 (and (=> t!6193 result!4045) b_and!8511)))

(declare-fun m!163865 () Bool)

(assert (=> d!42939 m!163865))

(assert (=> d!42939 m!162853))

(assert (=> b!137152 m!162957))

(assert (=> b!137152 m!162959))

(assert (=> b!137152 m!162961))

(assert (=> b!137152 m!162887))

(declare-fun m!163867 () Bool)

(assert (=> b!137152 m!163867))

(assert (=> b!137152 m!162959))

(assert (=> b!137152 m!162957))

(assert (=> b!137152 m!162887))

(assert (=> b!137150 m!162887))

(assert (=> b!137150 m!162887))

(assert (=> b!137150 m!162891))

(declare-fun m!163869 () Bool)

(assert (=> b!137147 m!163869))

(declare-fun m!163871 () Bool)

(assert (=> bm!15097 m!163871))

(assert (=> b!137146 m!163871))

(declare-fun m!163873 () Bool)

(assert (=> b!137154 m!163873))

(declare-fun m!163875 () Bool)

(assert (=> b!137153 m!163875))

(declare-fun m!163877 () Bool)

(assert (=> b!137153 m!163877))

(assert (=> b!137153 m!162957))

(assert (=> b!137153 m!162959))

(assert (=> b!137153 m!162961))

(assert (=> b!137153 m!162959))

(assert (=> b!137153 m!162957))

(assert (=> b!137153 m!162887))

(declare-fun m!163879 () Bool)

(assert (=> b!137153 m!163879))

(assert (=> b!137153 m!163879))

(declare-fun m!163881 () Bool)

(assert (=> b!137153 m!163881))

(assert (=> b!137145 m!162887))

(assert (=> b!137145 m!162887))

(assert (=> b!137145 m!162891))

(assert (=> b!137156 m!162887))

(assert (=> b!137156 m!162887))

(declare-fun m!163883 () Bool)

(assert (=> b!137156 m!163883))

(assert (=> bm!15015 d!42939))

(declare-fun d!42941 () Bool)

(assert (=> d!42941 (= (get!1502 (getValueByKey!174 (toList!845 lt!71257) lt!71258)) (v!3226 (getValueByKey!174 (toList!845 lt!71257) lt!71258)))))

(assert (=> d!42785 d!42941))

(declare-fun b!137160 () Bool)

(declare-fun e!89290 () Option!180)

(assert (=> b!137160 (= e!89290 None!178)))

(declare-fun b!137157 () Bool)

(declare-fun e!89289 () Option!180)

(assert (=> b!137157 (= e!89289 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71257)))))))

(declare-fun b!137159 () Bool)

(assert (=> b!137159 (= e!89290 (getValueByKey!174 (t!6179 (toList!845 lt!71257)) lt!71258))))

(declare-fun d!42943 () Bool)

(declare-fun c!25716 () Bool)

(assert (=> d!42943 (= c!25716 (and ((_ is Cons!1695) (toList!845 lt!71257)) (= (_1!1298 (h!2301 (toList!845 lt!71257))) lt!71258)))))

(assert (=> d!42943 (= (getValueByKey!174 (toList!845 lt!71257) lt!71258) e!89289)))

(declare-fun b!137158 () Bool)

(assert (=> b!137158 (= e!89289 e!89290)))

(declare-fun c!25717 () Bool)

(assert (=> b!137158 (= c!25717 (and ((_ is Cons!1695) (toList!845 lt!71257)) (not (= (_1!1298 (h!2301 (toList!845 lt!71257))) lt!71258))))))

(assert (= (and d!42943 c!25716) b!137157))

(assert (= (and d!42943 (not c!25716)) b!137158))

(assert (= (and b!137158 c!25717) b!137159))

(assert (= (and b!137158 (not c!25717)) b!137160))

(declare-fun m!163885 () Bool)

(assert (=> b!137159 m!163885))

(assert (=> d!42785 d!42943))

(assert (=> d!42705 d!42805))

(declare-fun d!42945 () Bool)

(declare-fun e!89293 () Bool)

(assert (=> d!42945 e!89293))

(declare-fun res!65754 () Bool)

(assert (=> d!42945 (=> (not res!65754) (not e!89293))))

(declare-fun lt!71744 () SeekEntryResult!270)

(assert (=> d!42945 (= res!65754 ((_ is Found!270) lt!71744))))

(assert (=> d!42945 (= lt!71744 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (=> d!42945 true))

(declare-fun _$33!117 () Unit!4281)

(assert (=> d!42945 (= (choose!838 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)) _$33!117)))

(declare-fun b!137165 () Bool)

(declare-fun res!65753 () Bool)

(assert (=> b!137165 (=> (not res!65753) (not e!89293))))

(assert (=> b!137165 (= res!65753 (inRange!0 (index!3242 lt!71744) (mask!7202 newMap!16)))))

(declare-fun b!137166 () Bool)

(assert (=> b!137166 (= e!89293 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71744)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!42945 res!65754) b!137165))

(assert (= (and b!137165 res!65753) b!137166))

(assert (=> d!42945 m!162605))

(assert (=> d!42945 m!162751))

(declare-fun m!163887 () Bool)

(assert (=> b!137165 m!163887))

(declare-fun m!163889 () Bool)

(assert (=> b!137166 m!163889))

(assert (=> d!42705 d!42945))

(assert (=> d!42705 d!42841))

(assert (=> b!136633 d!42721))

(declare-fun d!42947 () Bool)

(declare-fun e!89294 () Bool)

(assert (=> d!42947 e!89294))

(declare-fun res!65756 () Bool)

(assert (=> d!42947 (=> (not res!65756) (not e!89294))))

(declare-fun lt!71748 () ListLongMap!1659)

(assert (=> d!42947 (= res!65756 (contains!888 lt!71748 (_1!1298 (tuple2!2575 lt!71308 lt!71307))))))

(declare-fun lt!71745 () List!1699)

(assert (=> d!42947 (= lt!71748 (ListLongMap!1660 lt!71745))))

(declare-fun lt!71746 () Unit!4281)

(declare-fun lt!71747 () Unit!4281)

(assert (=> d!42947 (= lt!71746 lt!71747)))

(assert (=> d!42947 (= (getValueByKey!174 lt!71745 (_1!1298 (tuple2!2575 lt!71308 lt!71307))) (Some!179 (_2!1298 (tuple2!2575 lt!71308 lt!71307))))))

(assert (=> d!42947 (= lt!71747 (lemmaContainsTupThenGetReturnValue!89 lt!71745 (_1!1298 (tuple2!2575 lt!71308 lt!71307)) (_2!1298 (tuple2!2575 lt!71308 lt!71307))))))

(assert (=> d!42947 (= lt!71745 (insertStrictlySorted!92 (toList!845 lt!71305) (_1!1298 (tuple2!2575 lt!71308 lt!71307)) (_2!1298 (tuple2!2575 lt!71308 lt!71307))))))

(assert (=> d!42947 (= (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307)) lt!71748)))

(declare-fun b!137167 () Bool)

(declare-fun res!65755 () Bool)

(assert (=> b!137167 (=> (not res!65755) (not e!89294))))

(assert (=> b!137167 (= res!65755 (= (getValueByKey!174 (toList!845 lt!71748) (_1!1298 (tuple2!2575 lt!71308 lt!71307))) (Some!179 (_2!1298 (tuple2!2575 lt!71308 lt!71307)))))))

(declare-fun b!137168 () Bool)

(assert (=> b!137168 (= e!89294 (contains!891 (toList!845 lt!71748) (tuple2!2575 lt!71308 lt!71307)))))

(assert (= (and d!42947 res!65756) b!137167))

(assert (= (and b!137167 res!65755) b!137168))

(declare-fun m!163891 () Bool)

(assert (=> d!42947 m!163891))

(declare-fun m!163893 () Bool)

(assert (=> d!42947 m!163893))

(declare-fun m!163895 () Bool)

(assert (=> d!42947 m!163895))

(declare-fun m!163897 () Bool)

(assert (=> d!42947 m!163897))

(declare-fun m!163899 () Bool)

(assert (=> b!137167 m!163899))

(declare-fun m!163901 () Bool)

(assert (=> b!137168 m!163901))

(assert (=> b!136633 d!42947))

(declare-fun d!42949 () Bool)

(declare-fun e!89295 () Bool)

(assert (=> d!42949 e!89295))

(declare-fun res!65757 () Bool)

(assert (=> d!42949 (=> res!65757 e!89295)))

(declare-fun lt!71750 () Bool)

(assert (=> d!42949 (= res!65757 (not lt!71750))))

(declare-fun lt!71751 () Bool)

(assert (=> d!42949 (= lt!71750 lt!71751)))

(declare-fun lt!71752 () Unit!4281)

(declare-fun e!89296 () Unit!4281)

(assert (=> d!42949 (= lt!71752 e!89296)))

(declare-fun c!25718 () Bool)

(assert (=> d!42949 (= c!25718 lt!71751)))

(assert (=> d!42949 (= lt!71751 (containsKey!177 (toList!845 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307))) lt!71310))))

(assert (=> d!42949 (= (contains!888 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307)) lt!71310) lt!71750)))

(declare-fun b!137169 () Bool)

(declare-fun lt!71749 () Unit!4281)

(assert (=> b!137169 (= e!89296 lt!71749)))

(assert (=> b!137169 (= lt!71749 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307))) lt!71310))))

(assert (=> b!137169 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307))) lt!71310))))

(declare-fun b!137170 () Bool)

(declare-fun Unit!4310 () Unit!4281)

(assert (=> b!137170 (= e!89296 Unit!4310)))

(declare-fun b!137171 () Bool)

(assert (=> b!137171 (= e!89295 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307))) lt!71310)))))

(assert (= (and d!42949 c!25718) b!137169))

(assert (= (and d!42949 (not c!25718)) b!137170))

(assert (= (and d!42949 (not res!65757)) b!137171))

(declare-fun m!163903 () Bool)

(assert (=> d!42949 m!163903))

(declare-fun m!163905 () Bool)

(assert (=> b!137169 m!163905))

(declare-fun m!163907 () Bool)

(assert (=> b!137169 m!163907))

(assert (=> b!137169 m!163907))

(declare-fun m!163909 () Bool)

(assert (=> b!137169 m!163909))

(assert (=> b!137171 m!163907))

(assert (=> b!137171 m!163907))

(assert (=> b!137171 m!163909))

(assert (=> b!136633 d!42949))

(declare-fun d!42951 () Bool)

(declare-fun e!89297 () Bool)

(assert (=> d!42951 e!89297))

(declare-fun res!65759 () Bool)

(assert (=> d!42951 (=> (not res!65759) (not e!89297))))

(declare-fun lt!71756 () ListLongMap!1659)

(assert (=> d!42951 (= res!65759 (contains!888 lt!71756 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71753 () List!1699)

(assert (=> d!42951 (= lt!71756 (ListLongMap!1660 lt!71753))))

(declare-fun lt!71754 () Unit!4281)

(declare-fun lt!71755 () Unit!4281)

(assert (=> d!42951 (= lt!71754 lt!71755)))

(assert (=> d!42951 (= (getValueByKey!174 lt!71753 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42951 (= lt!71755 (lemmaContainsTupThenGetReturnValue!89 lt!71753 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42951 (= lt!71753 (insertStrictlySorted!92 (toList!845 call!15014) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42951 (= (+!170 call!15014 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71756)))

(declare-fun b!137172 () Bool)

(declare-fun res!65758 () Bool)

(assert (=> b!137172 (=> (not res!65758) (not e!89297))))

(assert (=> b!137172 (= res!65758 (= (getValueByKey!174 (toList!845 lt!71756) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137173 () Bool)

(assert (=> b!137173 (= e!89297 (contains!891 (toList!845 lt!71756) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42951 res!65759) b!137172))

(assert (= (and b!137172 res!65758) b!137173))

(declare-fun m!163911 () Bool)

(assert (=> d!42951 m!163911))

(declare-fun m!163913 () Bool)

(assert (=> d!42951 m!163913))

(declare-fun m!163915 () Bool)

(assert (=> d!42951 m!163915))

(declare-fun m!163917 () Bool)

(assert (=> d!42951 m!163917))

(declare-fun m!163919 () Bool)

(assert (=> b!137172 m!163919))

(declare-fun m!163921 () Bool)

(assert (=> b!137173 m!163921))

(assert (=> b!136633 d!42951))

(declare-fun d!42953 () Bool)

(assert (=> d!42953 (not (contains!888 (+!170 lt!71305 (tuple2!2575 lt!71308 lt!71307)) lt!71310))))

(declare-fun lt!71759 () Unit!4281)

(declare-fun choose!848 (ListLongMap!1659 (_ BitVec 64) V!3497 (_ BitVec 64)) Unit!4281)

(assert (=> d!42953 (= lt!71759 (choose!848 lt!71305 lt!71308 lt!71307 lt!71310))))

(declare-fun e!89300 () Bool)

(assert (=> d!42953 e!89300))

(declare-fun res!65762 () Bool)

(assert (=> d!42953 (=> (not res!65762) (not e!89300))))

(assert (=> d!42953 (= res!65762 (not (contains!888 lt!71305 lt!71310)))))

(assert (=> d!42953 (= (addStillNotContains!64 lt!71305 lt!71308 lt!71307 lt!71310) lt!71759)))

(declare-fun b!137177 () Bool)

(assert (=> b!137177 (= e!89300 (not (= lt!71308 lt!71310)))))

(assert (= (and d!42953 res!65762) b!137177))

(assert (=> d!42953 m!162915))

(assert (=> d!42953 m!162915))

(assert (=> d!42953 m!162917))

(declare-fun m!163923 () Bool)

(assert (=> d!42953 m!163923))

(declare-fun m!163925 () Bool)

(assert (=> d!42953 m!163925))

(assert (=> b!136633 d!42953))

(declare-fun d!42955 () Bool)

(declare-fun res!65763 () Bool)

(declare-fun e!89301 () Bool)

(assert (=> d!42955 (=> (not res!65763) (not e!89301))))

(assert (=> d!42955 (= res!65763 (simpleValid!93 (_2!1299 lt!71467)))))

(assert (=> d!42955 (= (valid!545 (_2!1299 lt!71467)) e!89301)))

(declare-fun b!137178 () Bool)

(declare-fun res!65764 () Bool)

(assert (=> b!137178 (=> (not res!65764) (not e!89301))))

(assert (=> b!137178 (= res!65764 (= (arrayCountValidKeys!0 (_keys!4641 (_2!1299 lt!71467)) #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71467)))) (_size!603 (_2!1299 lt!71467))))))

(declare-fun b!137179 () Bool)

(declare-fun res!65765 () Bool)

(assert (=> b!137179 (=> (not res!65765) (not e!89301))))

(assert (=> b!137179 (= res!65765 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 (_2!1299 lt!71467)) (mask!7202 (_2!1299 lt!71467))))))

(declare-fun b!137180 () Bool)

(assert (=> b!137180 (= e!89301 (arrayNoDuplicates!0 (_keys!4641 (_2!1299 lt!71467)) #b00000000000000000000000000000000 Nil!1698))))

(assert (= (and d!42955 res!65763) b!137178))

(assert (= (and b!137178 res!65764) b!137179))

(assert (= (and b!137179 res!65765) b!137180))

(declare-fun m!163927 () Bool)

(assert (=> d!42955 m!163927))

(declare-fun m!163929 () Bool)

(assert (=> b!137178 m!163929))

(declare-fun m!163931 () Bool)

(assert (=> b!137179 m!163931))

(declare-fun m!163933 () Bool)

(assert (=> b!137180 m!163933))

(assert (=> b!136756 d!42955))

(declare-fun d!42957 () Bool)

(declare-fun e!89302 () Bool)

(assert (=> d!42957 e!89302))

(declare-fun res!65767 () Bool)

(assert (=> d!42957 (=> (not res!65767) (not e!89302))))

(declare-fun lt!71763 () ListLongMap!1659)

(assert (=> d!42957 (= res!65767 (contains!888 lt!71763 (_1!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(declare-fun lt!71760 () List!1699)

(assert (=> d!42957 (= lt!71763 (ListLongMap!1660 lt!71760))))

(declare-fun lt!71761 () Unit!4281)

(declare-fun lt!71762 () Unit!4281)

(assert (=> d!42957 (= lt!71761 lt!71762)))

(assert (=> d!42957 (= (getValueByKey!174 lt!71760 (_1!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!42957 (= lt!71762 (lemmaContainsTupThenGetReturnValue!89 lt!71760 (_1!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (_2!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!42957 (= lt!71760 (insertStrictlySorted!92 (toList!845 (ite c!25583 call!15020 (ite c!25584 call!15017 call!15021))) (_1!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (_2!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!42957 (= (+!170 (ite c!25583 call!15020 (ite c!25584 call!15017 call!15021)) (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) lt!71763)))

(declare-fun b!137181 () Bool)

(declare-fun res!65766 () Bool)

(assert (=> b!137181 (=> (not res!65766) (not e!89302))))

(assert (=> b!137181 (= res!65766 (= (getValueByKey!174 (toList!845 lt!71763) (_1!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))))

(declare-fun b!137182 () Bool)

(assert (=> b!137182 (= e!89302 (contains!891 (toList!845 lt!71763) (ite (or c!25583 c!25584) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (= (and d!42957 res!65767) b!137181))

(assert (= (and b!137181 res!65766) b!137182))

(declare-fun m!163935 () Bool)

(assert (=> d!42957 m!163935))

(declare-fun m!163937 () Bool)

(assert (=> d!42957 m!163937))

(declare-fun m!163939 () Bool)

(assert (=> d!42957 m!163939))

(declare-fun m!163941 () Bool)

(assert (=> d!42957 m!163941))

(declare-fun m!163943 () Bool)

(assert (=> b!137181 m!163943))

(declare-fun m!163945 () Bool)

(assert (=> b!137182 m!163945))

(assert (=> bm!15014 d!42957))

(declare-fun d!42959 () Bool)

(assert (=> d!42959 (= (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136892 d!42959))

(declare-fun d!42961 () Bool)

(declare-fun lt!71764 () Bool)

(assert (=> d!42961 (= lt!71764 (select (content!135 (toList!845 lt!71549)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89304 () Bool)

(assert (=> d!42961 (= lt!71764 e!89304)))

(declare-fun res!65768 () Bool)

(assert (=> d!42961 (=> (not res!65768) (not e!89304))))

(assert (=> d!42961 (= res!65768 ((_ is Cons!1695) (toList!845 lt!71549)))))

(assert (=> d!42961 (= (contains!891 (toList!845 lt!71549) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71764)))

(declare-fun b!137183 () Bool)

(declare-fun e!89303 () Bool)

(assert (=> b!137183 (= e!89304 e!89303)))

(declare-fun res!65769 () Bool)

(assert (=> b!137183 (=> res!65769 e!89303)))

(assert (=> b!137183 (= res!65769 (= (h!2301 (toList!845 lt!71549)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137184 () Bool)

(assert (=> b!137184 (= e!89303 (contains!891 (t!6179 (toList!845 lt!71549)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42961 res!65768) b!137183))

(assert (= (and b!137183 (not res!65769)) b!137184))

(declare-fun m!163947 () Bool)

(assert (=> d!42961 m!163947))

(declare-fun m!163949 () Bool)

(assert (=> d!42961 m!163949))

(declare-fun m!163951 () Bool)

(assert (=> b!137184 m!163951))

(assert (=> b!136867 d!42961))

(declare-fun b!137185 () Bool)

(declare-fun e!89305 () (_ BitVec 32))

(declare-fun call!15101 () (_ BitVec 32))

(assert (=> b!137185 (= e!89305 call!15101)))

(declare-fun d!42963 () Bool)

(declare-fun lt!71765 () (_ BitVec 32))

(assert (=> d!42963 (and (bvsge lt!71765 #b00000000000000000000000000000000) (bvsle lt!71765 (bvsub (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!89306 () (_ BitVec 32))

(assert (=> d!42963 (= lt!71765 e!89306)))

(declare-fun c!25720 () Bool)

(assert (=> d!42963 (= c!25720 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!42963 (and (bvsle #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!42963 (= (arrayCountValidKeys!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))) lt!71765)))

(declare-fun b!137186 () Bool)

(assert (=> b!137186 (= e!89306 e!89305)))

(declare-fun c!25719 () Bool)

(assert (=> b!137186 (= c!25719 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!137187 () Bool)

(assert (=> b!137187 (= e!89306 #b00000000000000000000000000000000)))

(declare-fun b!137188 () Bool)

(assert (=> b!137188 (= e!89305 (bvadd #b00000000000000000000000000000001 call!15101))))

(declare-fun bm!15098 () Bool)

(assert (=> bm!15098 (= call!15101 (arrayCountValidKeys!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!42963 c!25720) b!137187))

(assert (= (and d!42963 (not c!25720)) b!137186))

(assert (= (and b!137186 c!25719) b!137188))

(assert (= (and b!137186 (not c!25719)) b!137185))

(assert (= (or b!137188 b!137185) bm!15098))

(declare-fun m!163953 () Bool)

(assert (=> b!137186 m!163953))

(assert (=> b!137186 m!163953))

(declare-fun m!163955 () Bool)

(assert (=> b!137186 m!163955))

(declare-fun m!163957 () Bool)

(assert (=> bm!15098 m!163957))

(assert (=> b!136870 d!42963))

(declare-fun d!42965 () Bool)

(assert (=> d!42965 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!71766 () Unit!4281)

(assert (=> d!42965 (= lt!71766 (choose!843 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89307 () Bool)

(assert (=> d!42965 e!89307))

(declare-fun res!65770 () Bool)

(assert (=> d!42965 (=> (not res!65770) (not e!89307))))

(assert (=> d!42965 (= res!65770 (isStrictlySorted!310 (toList!845 lt!71267)))))

(assert (=> d!42965 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000) lt!71766)))

(declare-fun b!137189 () Bool)

(assert (=> b!137189 (= e!89307 (containsKey!177 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!42965 res!65770) b!137189))

(assert (=> d!42965 m!163065))

(assert (=> d!42965 m!163065))

(assert (=> d!42965 m!163341))

(declare-fun m!163959 () Bool)

(assert (=> d!42965 m!163959))

(assert (=> d!42965 m!163741))

(assert (=> b!137189 m!163337))

(assert (=> b!136873 d!42965))

(declare-fun d!42967 () Bool)

(assert (=> d!42967 (= (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!419 (getValueByKey!174 (toList!845 lt!71267) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5762 () Bool)

(assert (= bs!5762 d!42967))

(assert (=> bs!5762 m!163065))

(declare-fun m!163961 () Bool)

(assert (=> bs!5762 m!163961))

(assert (=> b!136873 d!42967))

(assert (=> b!136873 d!42893))

(assert (=> b!136587 d!42959))

(declare-fun b!137193 () Bool)

(declare-fun e!89309 () Option!180)

(assert (=> b!137193 (= e!89309 None!178)))

(declare-fun b!137190 () Bool)

(declare-fun e!89308 () Option!180)

(assert (=> b!137190 (= e!89308 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71505)))))))

(declare-fun b!137192 () Bool)

(assert (=> b!137192 (= e!89309 (getValueByKey!174 (t!6179 (toList!845 lt!71505)) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun c!25721 () Bool)

(declare-fun d!42969 () Bool)

(assert (=> d!42969 (= c!25721 (and ((_ is Cons!1695) (toList!845 lt!71505)) (= (_1!1298 (h!2301 (toList!845 lt!71505))) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42969 (= (getValueByKey!174 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89308)))

(declare-fun b!137191 () Bool)

(assert (=> b!137191 (= e!89308 e!89309)))

(declare-fun c!25722 () Bool)

(assert (=> b!137191 (= c!25722 (and ((_ is Cons!1695) (toList!845 lt!71505)) (not (= (_1!1298 (h!2301 (toList!845 lt!71505))) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!42969 c!25721) b!137190))

(assert (= (and d!42969 (not c!25721)) b!137191))

(assert (= (and b!137191 c!25722) b!137192))

(assert (= (and b!137191 (not c!25722)) b!137193))

(declare-fun m!163963 () Bool)

(assert (=> b!137192 m!163963))

(assert (=> b!136804 d!42969))

(declare-fun d!42971 () Bool)

(assert (=> d!42971 (= (apply!117 lt!71568 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71568) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5763 () Bool)

(assert (= bs!5763 d!42971))

(declare-fun m!163965 () Bool)

(assert (=> bs!5763 m!163965))

(assert (=> bs!5763 m!163965))

(declare-fun m!163967 () Bool)

(assert (=> bs!5763 m!163967))

(assert (=> b!136888 d!42971))

(assert (=> d!42765 d!42767))

(assert (=> d!42765 d!42769))

(declare-fun d!42973 () Bool)

(assert (=> d!42973 (isDefined!126 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42973 true))

(declare-fun _$12!409 () Unit!4281)

(assert (=> d!42973 (= (choose!843 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) _$12!409)))

(declare-fun bs!5764 () Bool)

(assert (= bs!5764 d!42973))

(assert (=> bs!5764 m!162605))

(assert (=> bs!5764 m!162711))

(assert (=> bs!5764 m!162711))

(assert (=> bs!5764 m!162713))

(assert (=> d!42765 d!42973))

(declare-fun d!42975 () Bool)

(declare-fun res!65775 () Bool)

(declare-fun e!89314 () Bool)

(assert (=> d!42975 (=> res!65775 e!89314)))

(assert (=> d!42975 (= res!65775 (or ((_ is Nil!1696) (toList!845 lt!71090)) ((_ is Nil!1696) (t!6179 (toList!845 lt!71090)))))))

(assert (=> d!42975 (= (isStrictlySorted!310 (toList!845 lt!71090)) e!89314)))

(declare-fun b!137198 () Bool)

(declare-fun e!89315 () Bool)

(assert (=> b!137198 (= e!89314 e!89315)))

(declare-fun res!65776 () Bool)

(assert (=> b!137198 (=> (not res!65776) (not e!89315))))

(assert (=> b!137198 (= res!65776 (bvslt (_1!1298 (h!2301 (toList!845 lt!71090))) (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090))))))))

(declare-fun b!137199 () Bool)

(assert (=> b!137199 (= e!89315 (isStrictlySorted!310 (t!6179 (toList!845 lt!71090))))))

(assert (= (and d!42975 (not res!65775)) b!137198))

(assert (= (and b!137198 res!65776) b!137199))

(declare-fun m!163969 () Bool)

(assert (=> b!137199 m!163969))

(assert (=> d!42765 d!42975))

(declare-fun d!42977 () Bool)

(declare-fun res!65777 () Bool)

(declare-fun e!89316 () Bool)

(assert (=> d!42977 (=> res!65777 e!89316)))

(assert (=> d!42977 (= res!65777 (and ((_ is Cons!1695) (toList!845 e!88869)) (= (_1!1298 (h!2301 (toList!845 e!88869))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!42977 (= (containsKey!177 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89316)))

(declare-fun b!137200 () Bool)

(declare-fun e!89317 () Bool)

(assert (=> b!137200 (= e!89316 e!89317)))

(declare-fun res!65778 () Bool)

(assert (=> b!137200 (=> (not res!65778) (not e!89317))))

(assert (=> b!137200 (= res!65778 (and (or (not ((_ is Cons!1695) (toList!845 e!88869))) (bvsle (_1!1298 (h!2301 (toList!845 e!88869))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) ((_ is Cons!1695) (toList!845 e!88869)) (bvslt (_1!1298 (h!2301 (toList!845 e!88869))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(declare-fun b!137201 () Bool)

(assert (=> b!137201 (= e!89317 (containsKey!177 (t!6179 (toList!845 e!88869)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!42977 (not res!65777)) b!137200))

(assert (= (and b!137200 res!65778) b!137201))

(assert (=> b!137201 m!162605))

(declare-fun m!163971 () Bool)

(assert (=> b!137201 m!163971))

(assert (=> d!42809 d!42977))

(declare-fun d!42979 () Bool)

(assert (=> d!42979 (= (get!1501 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136571 d!42979))

(declare-fun bm!15099 () Bool)

(declare-fun call!15102 () ListLongMap!1659)

(assert (=> bm!15099 (= call!15102 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))))))

(declare-fun b!137203 () Bool)

(declare-fun lt!71773 () ListLongMap!1659)

(declare-fun e!89319 () Bool)

(assert (=> b!137203 (= e!89319 (= lt!71773 (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137204 () Bool)

(declare-fun res!65780 () Bool)

(declare-fun e!89322 () Bool)

(assert (=> b!137204 (=> (not res!65780) (not e!89322))))

(assert (=> b!137204 (= res!65780 (not (contains!888 lt!71773 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137205 () Bool)

(declare-fun e!89324 () Bool)

(assert (=> b!137205 (= e!89324 e!89319)))

(declare-fun c!25726 () Bool)

(assert (=> b!137205 (= c!25726 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137206 () Bool)

(declare-fun e!89318 () ListLongMap!1659)

(assert (=> b!137206 (= e!89318 call!15102)))

(declare-fun b!137207 () Bool)

(declare-fun e!89323 () Bool)

(assert (=> b!137207 (= e!89323 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!137207 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!137208 () Bool)

(declare-fun e!89321 () ListLongMap!1659)

(assert (=> b!137208 (= e!89321 (ListLongMap!1660 Nil!1696))))

(declare-fun b!137209 () Bool)

(assert (=> b!137209 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> b!137209 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2535 (_values!2871 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89320 () Bool)

(assert (=> b!137209 (= e!89320 (= (apply!117 lt!71773 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137210 () Bool)

(declare-fun lt!71771 () Unit!4281)

(declare-fun lt!71768 () Unit!4281)

(assert (=> b!137210 (= lt!71771 lt!71768)))

(declare-fun lt!71772 () (_ BitVec 64))

(declare-fun lt!71770 () (_ BitVec 64))

(declare-fun lt!71769 () V!3497)

(declare-fun lt!71767 () ListLongMap!1659)

(assert (=> b!137210 (not (contains!888 (+!170 lt!71767 (tuple2!2575 lt!71770 lt!71769)) lt!71772))))

(assert (=> b!137210 (= lt!71768 (addStillNotContains!64 lt!71767 lt!71770 lt!71769 lt!71772))))

(assert (=> b!137210 (= lt!71772 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137210 (= lt!71769 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137210 (= lt!71770 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!137210 (= lt!71767 call!15102)))

(assert (=> b!137210 (= e!89318 (+!170 call!15102 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137211 () Bool)

(assert (=> b!137211 (= e!89319 (isEmpty!418 lt!71773))))

(declare-fun d!42981 () Bool)

(assert (=> d!42981 e!89322))

(declare-fun res!65782 () Bool)

(assert (=> d!42981 (=> (not res!65782) (not e!89322))))

(assert (=> d!42981 (= res!65782 (not (contains!888 lt!71773 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42981 (= lt!71773 e!89321)))

(declare-fun c!25725 () Bool)

(assert (=> d!42981 (= c!25725 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!42981 (validMask!0 (mask!7202 (v!3220 (underlying!459 thiss!992))))))

(assert (=> d!42981 (= (getCurrentListMapNoExtraKeys!137 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (_values!2871 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992))) (extraKeys!2649 (v!3220 (underlying!459 thiss!992))) (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) (minValue!2741 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992)))) lt!71773)))

(declare-fun b!137202 () Bool)

(assert (=> b!137202 (= e!89321 e!89318)))

(declare-fun c!25723 () Bool)

(assert (=> b!137202 (= c!25723 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!137212 () Bool)

(assert (=> b!137212 (= e!89322 e!89324)))

(declare-fun c!25724 () Bool)

(assert (=> b!137212 (= c!25724 e!89323)))

(declare-fun res!65781 () Bool)

(assert (=> b!137212 (=> (not res!65781) (not e!89323))))

(assert (=> b!137212 (= res!65781 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137213 () Bool)

(assert (=> b!137213 (= e!89324 e!89320)))

(assert (=> b!137213 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun res!65779 () Bool)

(assert (=> b!137213 (= res!65779 (contains!888 lt!71773 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!137213 (=> (not res!65779) (not e!89320))))

(assert (= (and d!42981 c!25725) b!137208))

(assert (= (and d!42981 (not c!25725)) b!137202))

(assert (= (and b!137202 c!25723) b!137210))

(assert (= (and b!137202 (not c!25723)) b!137206))

(assert (= (or b!137210 b!137206) bm!15099))

(assert (= (and d!42981 res!65782) b!137204))

(assert (= (and b!137204 res!65780) b!137212))

(assert (= (and b!137212 res!65781) b!137207))

(assert (= (and b!137212 c!25724) b!137213))

(assert (= (and b!137212 (not c!25724)) b!137205))

(assert (= (and b!137213 res!65779) b!137209))

(assert (= (and b!137205 c!25726) b!137203))

(assert (= (and b!137205 (not c!25726)) b!137211))

(declare-fun b_lambda!6145 () Bool)

(assert (=> (not b_lambda!6145) (not b!137209)))

(assert (=> b!137209 t!6176))

(declare-fun b_and!8513 () Bool)

(assert (= b_and!8509 (and (=> t!6176 result!4023) b_and!8513)))

(assert (=> b!137209 t!6178))

(declare-fun b_and!8515 () Bool)

(assert (= b_and!8511 (and (=> t!6178 result!4027) b_and!8515)))

(declare-fun b_lambda!6147 () Bool)

(assert (=> (not b_lambda!6147) (not b!137210)))

(assert (=> b!137210 t!6176))

(declare-fun b_and!8517 () Bool)

(assert (= b_and!8513 (and (=> t!6176 result!4023) b_and!8517)))

(assert (=> b!137210 t!6178))

(declare-fun b_and!8519 () Bool)

(assert (= b_and!8515 (and (=> t!6178 result!4027) b_and!8519)))

(declare-fun m!163973 () Bool)

(assert (=> d!42981 m!163973))

(assert (=> d!42981 m!162781))

(declare-fun m!163975 () Bool)

(assert (=> b!137209 m!163975))

(assert (=> b!137209 m!162627))

(declare-fun m!163977 () Bool)

(assert (=> b!137209 m!163977))

(assert (=> b!137209 m!162883))

(declare-fun m!163979 () Bool)

(assert (=> b!137209 m!163979))

(assert (=> b!137209 m!162627))

(assert (=> b!137209 m!163975))

(assert (=> b!137209 m!162883))

(assert (=> b!137207 m!162883))

(assert (=> b!137207 m!162883))

(declare-fun m!163981 () Bool)

(assert (=> b!137207 m!163981))

(declare-fun m!163983 () Bool)

(assert (=> b!137204 m!163983))

(declare-fun m!163985 () Bool)

(assert (=> bm!15099 m!163985))

(assert (=> b!137203 m!163985))

(declare-fun m!163987 () Bool)

(assert (=> b!137211 m!163987))

(declare-fun m!163989 () Bool)

(assert (=> b!137210 m!163989))

(declare-fun m!163991 () Bool)

(assert (=> b!137210 m!163991))

(assert (=> b!137210 m!163975))

(assert (=> b!137210 m!162627))

(assert (=> b!137210 m!163977))

(assert (=> b!137210 m!162627))

(assert (=> b!137210 m!163975))

(assert (=> b!137210 m!162883))

(declare-fun m!163993 () Bool)

(assert (=> b!137210 m!163993))

(assert (=> b!137210 m!163993))

(declare-fun m!163995 () Bool)

(assert (=> b!137210 m!163995))

(assert (=> b!137202 m!162883))

(assert (=> b!137202 m!162883))

(assert (=> b!137202 m!163981))

(assert (=> b!137213 m!162883))

(assert (=> b!137213 m!162883))

(declare-fun m!163997 () Bool)

(assert (=> b!137213 m!163997))

(assert (=> bm!15011 d!42981))

(declare-fun d!42983 () Bool)

(assert (=> d!42983 (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))

(declare-fun lt!71776 () Unit!4281)

(declare-fun choose!849 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 64) (_ BitVec 32) Int) Unit!4281)

(assert (=> d!42983 (= lt!71776 (choose!849 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(assert (=> d!42983 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42983 (= (lemmaArrayContainsKeyThenInListMap!43 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71776)))

(declare-fun bs!5765 () Bool)

(assert (= bs!5765 d!42983))

(assert (=> bs!5765 m!162737))

(assert (=> bs!5765 m!162737))

(assert (=> bs!5765 m!162605))

(assert (=> bs!5765 m!163119))

(assert (=> bs!5765 m!162605))

(declare-fun m!163999 () Bool)

(assert (=> bs!5765 m!163999))

(assert (=> bs!5765 m!162853))

(assert (=> b!136748 d!42983))

(declare-fun d!42985 () Bool)

(declare-fun e!89325 () Bool)

(assert (=> d!42985 e!89325))

(declare-fun res!65783 () Bool)

(assert (=> d!42985 (=> res!65783 e!89325)))

(declare-fun lt!71778 () Bool)

(assert (=> d!42985 (= res!65783 (not lt!71778))))

(declare-fun lt!71779 () Bool)

(assert (=> d!42985 (= lt!71778 lt!71779)))

(declare-fun lt!71780 () Unit!4281)

(declare-fun e!89326 () Unit!4281)

(assert (=> d!42985 (= lt!71780 e!89326)))

(declare-fun c!25727 () Bool)

(assert (=> d!42985 (= c!25727 lt!71779)))

(assert (=> d!42985 (= lt!71779 (containsKey!177 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!42985 (= (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71778)))

(declare-fun b!137214 () Bool)

(declare-fun lt!71777 () Unit!4281)

(assert (=> b!137214 (= e!89326 lt!71777)))

(assert (=> b!137214 (= lt!71777 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!137214 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!137215 () Bool)

(declare-fun Unit!4311 () Unit!4281)

(assert (=> b!137215 (= e!89326 Unit!4311)))

(declare-fun b!137216 () Bool)

(assert (=> b!137216 (= e!89325 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (= (and d!42985 c!25727) b!137214))

(assert (= (and d!42985 (not c!25727)) b!137215))

(assert (= (and d!42985 (not res!65783)) b!137216))

(assert (=> d!42985 m!162605))

(declare-fun m!164001 () Bool)

(assert (=> d!42985 m!164001))

(assert (=> b!137214 m!162605))

(declare-fun m!164003 () Bool)

(assert (=> b!137214 m!164003))

(assert (=> b!137214 m!162605))

(declare-fun m!164005 () Bool)

(assert (=> b!137214 m!164005))

(assert (=> b!137214 m!164005))

(declare-fun m!164007 () Bool)

(assert (=> b!137214 m!164007))

(assert (=> b!137216 m!162605))

(assert (=> b!137216 m!164005))

(assert (=> b!137216 m!164005))

(assert (=> b!137216 m!164007))

(assert (=> b!136748 d!42985))

(assert (=> b!136748 d!42733))

(declare-fun d!42987 () Bool)

(declare-fun lt!71783 () Bool)

(declare-fun content!136 (List!1701) (InoxSet (_ BitVec 64)))

(assert (=> d!42987 (= lt!71783 (select (content!136 Nil!1698) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!89332 () Bool)

(assert (=> d!42987 (= lt!71783 e!89332)))

(declare-fun res!65788 () Bool)

(assert (=> d!42987 (=> (not res!65788) (not e!89332))))

(assert (=> d!42987 (= res!65788 ((_ is Cons!1697) Nil!1698))))

(assert (=> d!42987 (= (contains!890 Nil!1698 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) lt!71783)))

(declare-fun b!137221 () Bool)

(declare-fun e!89331 () Bool)

(assert (=> b!137221 (= e!89332 e!89331)))

(declare-fun res!65789 () Bool)

(assert (=> b!137221 (=> res!65789 e!89331)))

(assert (=> b!137221 (= res!65789 (= (h!2303 Nil!1698) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137222 () Bool)

(assert (=> b!137222 (= e!89331 (contains!890 (t!6189 Nil!1698) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!42987 res!65788) b!137221))

(assert (= (and b!137221 (not res!65789)) b!137222))

(declare-fun m!164009 () Bool)

(assert (=> d!42987 m!164009))

(assert (=> d!42987 m!162887))

(declare-fun m!164011 () Bool)

(assert (=> d!42987 m!164011))

(assert (=> b!137222 m!162887))

(declare-fun m!164013 () Bool)

(assert (=> b!137222 m!164013))

(assert (=> b!136584 d!42987))

(declare-fun e!89347 () SeekEntryResult!270)

(declare-fun b!137241 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!137241 (= e!89347 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!7202 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun b!137242 () Bool)

(declare-fun e!89345 () Bool)

(declare-fun lt!71789 () SeekEntryResult!270)

(assert (=> b!137242 (= e!89345 (bvsge (x!15798 lt!71789) #b01111111111111111111111111111110))))

(declare-fun b!137243 () Bool)

(assert (=> b!137243 (and (bvsge (index!3243 lt!71789) #b00000000000000000000000000000000) (bvslt (index!3243 lt!71789) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89343 () Bool)

(assert (=> b!137243 (= e!89343 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71789)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137244 () Bool)

(assert (=> b!137244 (and (bvsge (index!3243 lt!71789) #b00000000000000000000000000000000) (bvslt (index!3243 lt!71789) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65797 () Bool)

(assert (=> b!137244 (= res!65797 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71789)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137244 (=> res!65797 e!89343)))

(declare-fun b!137245 () Bool)

(assert (=> b!137245 (= e!89347 (Intermediate!270 false (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!137246 () Bool)

(declare-fun e!89346 () Bool)

(assert (=> b!137246 (= e!89345 e!89346)))

(declare-fun res!65798 () Bool)

(assert (=> b!137246 (= res!65798 (and ((_ is Intermediate!270) lt!71789) (not (undefined!1082 lt!71789)) (bvslt (x!15798 lt!71789) #b01111111111111111111111111111110) (bvsge (x!15798 lt!71789) #b00000000000000000000000000000000) (bvsge (x!15798 lt!71789) #b00000000000000000000000000000000)))))

(assert (=> b!137246 (=> (not res!65798) (not e!89346))))

(declare-fun b!137247 () Bool)

(assert (=> b!137247 (and (bvsge (index!3243 lt!71789) #b00000000000000000000000000000000) (bvslt (index!3243 lt!71789) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65796 () Bool)

(assert (=> b!137247 (= res!65796 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71789)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!137247 (=> res!65796 e!89343)))

(assert (=> b!137247 (= e!89346 e!89343)))

(declare-fun b!137248 () Bool)

(declare-fun e!89344 () SeekEntryResult!270)

(assert (=> b!137248 (= e!89344 e!89347)))

(declare-fun lt!71788 () (_ BitVec 64))

(declare-fun c!25736 () Bool)

(assert (=> b!137248 (= c!25736 (or (= lt!71788 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (= (bvadd lt!71788 lt!71788) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!42989 () Bool)

(assert (=> d!42989 e!89345))

(declare-fun c!25734 () Bool)

(assert (=> d!42989 (= c!25734 (and ((_ is Intermediate!270) lt!71789) (undefined!1082 lt!71789)))))

(assert (=> d!42989 (= lt!71789 e!89344)))

(declare-fun c!25735 () Bool)

(assert (=> d!42989 (= c!25735 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!42989 (= lt!71788 (select (arr!2264 (_keys!4641 newMap!16)) (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16))))))

(assert (=> d!42989 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!42989 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)) lt!71789)))

(declare-fun b!137249 () Bool)

(assert (=> b!137249 (= e!89344 (Intermediate!270 true (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!42989 c!25735) b!137249))

(assert (= (and d!42989 (not c!25735)) b!137248))

(assert (= (and b!137248 c!25736) b!137245))

(assert (= (and b!137248 (not c!25736)) b!137241))

(assert (= (and d!42989 c!25734) b!137242))

(assert (= (and d!42989 (not c!25734)) b!137246))

(assert (= (and b!137246 res!65798) b!137247))

(assert (= (and b!137247 (not res!65796)) b!137244))

(assert (= (and b!137244 (not res!65797)) b!137243))

(declare-fun m!164015 () Bool)

(assert (=> b!137247 m!164015))

(assert (=> b!137244 m!164015))

(assert (=> d!42989 m!163277))

(declare-fun m!164017 () Bool)

(assert (=> d!42989 m!164017))

(assert (=> d!42989 m!162853))

(assert (=> b!137243 m!164015))

(assert (=> b!137241 m!163277))

(declare-fun m!164019 () Bool)

(assert (=> b!137241 m!164019))

(assert (=> b!137241 m!164019))

(assert (=> b!137241 m!162605))

(declare-fun m!164021 () Bool)

(assert (=> b!137241 m!164021))

(assert (=> d!42805 d!42989))

(declare-fun d!42991 () Bool)

(declare-fun lt!71795 () (_ BitVec 32))

(declare-fun lt!71794 () (_ BitVec 32))

(assert (=> d!42991 (= lt!71795 (bvmul (bvxor lt!71794 (bvlshr lt!71794 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!42991 (= lt!71794 ((_ extract 31 0) (bvand (bvxor (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvlshr (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!42991 (and (bvsge (mask!7202 newMap!16) #b00000000000000000000000000000000) (let ((res!65799 (let ((h!2304 ((_ extract 31 0) (bvand (bvxor (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvlshr (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!15901 (bvmul (bvxor h!2304 (bvlshr h!2304 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!15901 (bvlshr x!15901 #b00000000000000000000000000001101)) (mask!7202 newMap!16)))))) (and (bvslt res!65799 (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001)) (bvsge res!65799 #b00000000000000000000000000000000))))))

(assert (=> d!42991 (= (toIndex!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (mask!7202 newMap!16)) (bvand (bvxor lt!71795 (bvlshr lt!71795 #b00000000000000000000000000001101)) (mask!7202 newMap!16)))))

(assert (=> d!42805 d!42991))

(assert (=> d!42805 d!42841))

(declare-fun d!42993 () Bool)

(assert (=> d!42993 (= (inRange!0 (index!3242 lt!71283) (mask!7202 newMap!16)) (and (bvsge (index!3242 lt!71283) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71283) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!136559 d!42993))

(assert (=> bm!15035 d!42805))

(declare-fun d!42995 () Bool)

(declare-fun e!89348 () Bool)

(assert (=> d!42995 e!89348))

(declare-fun res!65800 () Bool)

(assert (=> d!42995 (=> res!65800 e!89348)))

(declare-fun lt!71797 () Bool)

(assert (=> d!42995 (= res!65800 (not lt!71797))))

(declare-fun lt!71798 () Bool)

(assert (=> d!42995 (= lt!71797 lt!71798)))

(declare-fun lt!71799 () Unit!4281)

(declare-fun e!89349 () Unit!4281)

(assert (=> d!42995 (= lt!71799 e!89349)))

(declare-fun c!25737 () Bool)

(assert (=> d!42995 (= c!25737 lt!71798)))

(assert (=> d!42995 (= lt!71798 (containsKey!177 (toList!845 lt!71354) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42995 (= (contains!888 lt!71354 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) lt!71797)))

(declare-fun b!137250 () Bool)

(declare-fun lt!71796 () Unit!4281)

(assert (=> b!137250 (= e!89349 lt!71796)))

(assert (=> b!137250 (= lt!71796 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71354) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137250 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137251 () Bool)

(declare-fun Unit!4312 () Unit!4281)

(assert (=> b!137251 (= e!89349 Unit!4312)))

(declare-fun b!137252 () Bool)

(assert (=> b!137252 (= e!89348 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42995 c!25737) b!137250))

(assert (= (and d!42995 (not c!25737)) b!137251))

(assert (= (and d!42995 (not res!65800)) b!137252))

(assert (=> d!42995 m!162887))

(declare-fun m!164023 () Bool)

(assert (=> d!42995 m!164023))

(assert (=> b!137250 m!162887))

(declare-fun m!164025 () Bool)

(assert (=> b!137250 m!164025))

(assert (=> b!137250 m!162887))

(assert (=> b!137250 m!163575))

(assert (=> b!137250 m!163575))

(declare-fun m!164027 () Bool)

(assert (=> b!137250 m!164027))

(assert (=> b!137252 m!162887))

(assert (=> b!137252 m!163575))

(assert (=> b!137252 m!163575))

(assert (=> b!137252 m!164027))

(assert (=> b!136675 d!42995))

(declare-fun d!42997 () Bool)

(declare-fun e!89350 () Bool)

(assert (=> d!42997 e!89350))

(declare-fun res!65801 () Bool)

(assert (=> d!42997 (=> res!65801 e!89350)))

(declare-fun lt!71801 () Bool)

(assert (=> d!42997 (= res!65801 (not lt!71801))))

(declare-fun lt!71802 () Bool)

(assert (=> d!42997 (= lt!71801 lt!71802)))

(declare-fun lt!71803 () Unit!4281)

(declare-fun e!89351 () Unit!4281)

(assert (=> d!42997 (= lt!71803 e!89351)))

(declare-fun c!25738 () Bool)

(assert (=> d!42997 (= c!25738 lt!71802)))

(assert (=> d!42997 (= lt!71802 (containsKey!177 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!42997 (= (contains!888 lt!71505 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71801)))

(declare-fun b!137253 () Bool)

(declare-fun lt!71800 () Unit!4281)

(assert (=> b!137253 (= e!89351 lt!71800)))

(assert (=> b!137253 (= lt!71800 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> b!137253 (isDefined!126 (getValueByKey!174 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137254 () Bool)

(declare-fun Unit!4313 () Unit!4281)

(assert (=> b!137254 (= e!89351 Unit!4313)))

(declare-fun b!137255 () Bool)

(assert (=> b!137255 (= e!89350 (isDefined!126 (getValueByKey!174 (toList!845 lt!71505) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!42997 c!25738) b!137253))

(assert (= (and d!42997 (not c!25738)) b!137254))

(assert (= (and d!42997 (not res!65801)) b!137255))

(declare-fun m!164029 () Bool)

(assert (=> d!42997 m!164029))

(declare-fun m!164031 () Bool)

(assert (=> b!137253 m!164031))

(assert (=> b!137253 m!163195))

(assert (=> b!137253 m!163195))

(declare-fun m!164033 () Bool)

(assert (=> b!137253 m!164033))

(assert (=> b!137255 m!163195))

(assert (=> b!137255 m!163195))

(assert (=> b!137255 m!164033))

(assert (=> d!42777 d!42997))

(declare-fun b!137259 () Bool)

(declare-fun e!89353 () Option!180)

(assert (=> b!137259 (= e!89353 None!178)))

(declare-fun b!137256 () Bool)

(declare-fun e!89352 () Option!180)

(assert (=> b!137256 (= e!89352 (Some!179 (_2!1298 (h!2301 lt!71502))))))

(declare-fun b!137258 () Bool)

(assert (=> b!137258 (= e!89353 (getValueByKey!174 (t!6179 lt!71502) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun c!25739 () Bool)

(declare-fun d!42999 () Bool)

(assert (=> d!42999 (= c!25739 (and ((_ is Cons!1695) lt!71502) (= (_1!1298 (h!2301 lt!71502)) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!42999 (= (getValueByKey!174 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89352)))

(declare-fun b!137257 () Bool)

(assert (=> b!137257 (= e!89352 e!89353)))

(declare-fun c!25740 () Bool)

(assert (=> b!137257 (= c!25740 (and ((_ is Cons!1695) lt!71502) (not (= (_1!1298 (h!2301 lt!71502)) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!42999 c!25739) b!137256))

(assert (= (and d!42999 (not c!25739)) b!137257))

(assert (= (and b!137257 c!25740) b!137258))

(assert (= (and b!137257 (not c!25740)) b!137259))

(declare-fun m!164035 () Bool)

(assert (=> b!137258 m!164035))

(assert (=> d!42777 d!42999))

(declare-fun d!43001 () Bool)

(assert (=> d!43001 (= (getValueByKey!174 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71804 () Unit!4281)

(assert (=> d!43001 (= lt!71804 (choose!847 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89354 () Bool)

(assert (=> d!43001 e!89354))

(declare-fun res!65802 () Bool)

(assert (=> d!43001 (=> (not res!65802) (not e!89354))))

(assert (=> d!43001 (= res!65802 (isStrictlySorted!310 lt!71502))))

(assert (=> d!43001 (= (lemmaContainsTupThenGetReturnValue!89 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71804)))

(declare-fun b!137260 () Bool)

(declare-fun res!65803 () Bool)

(assert (=> b!137260 (=> (not res!65803) (not e!89354))))

(assert (=> b!137260 (= res!65803 (containsKey!177 lt!71502 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137261 () Bool)

(assert (=> b!137261 (= e!89354 (contains!891 lt!71502 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!43001 res!65802) b!137260))

(assert (= (and b!137260 res!65803) b!137261))

(assert (=> d!43001 m!163189))

(declare-fun m!164037 () Bool)

(assert (=> d!43001 m!164037))

(declare-fun m!164039 () Bool)

(assert (=> d!43001 m!164039))

(declare-fun m!164041 () Bool)

(assert (=> b!137260 m!164041))

(declare-fun m!164043 () Bool)

(assert (=> b!137261 m!164043))

(assert (=> d!42777 d!43001))

(declare-fun b!137262 () Bool)

(declare-fun c!25743 () Bool)

(assert (=> b!137262 (= c!25743 (and ((_ is Cons!1695) (toList!845 lt!71257)) (bvsgt (_1!1298 (h!2301 (toList!845 lt!71257))) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89356 () List!1699)

(declare-fun e!89357 () List!1699)

(assert (=> b!137262 (= e!89356 e!89357)))

(declare-fun lt!71805 () List!1699)

(declare-fun e!89358 () Bool)

(declare-fun b!137263 () Bool)

(assert (=> b!137263 (= e!89358 (contains!891 lt!71805 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun bm!15100 () Bool)

(declare-fun call!15105 () List!1699)

(declare-fun call!15103 () List!1699)

(assert (=> bm!15100 (= call!15105 call!15103)))

(declare-fun b!137264 () Bool)

(declare-fun e!89359 () List!1699)

(assert (=> b!137264 (= e!89359 e!89356)))

(declare-fun c!25741 () Bool)

(assert (=> b!137264 (= c!25741 (and ((_ is Cons!1695) (toList!845 lt!71257)) (= (_1!1298 (h!2301 (toList!845 lt!71257))) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!43003 () Bool)

(assert (=> d!43003 e!89358))

(declare-fun res!65804 () Bool)

(assert (=> d!43003 (=> (not res!65804) (not e!89358))))

(assert (=> d!43003 (= res!65804 (isStrictlySorted!310 lt!71805))))

(assert (=> d!43003 (= lt!71805 e!89359)))

(declare-fun c!25744 () Bool)

(assert (=> d!43003 (= c!25744 (and ((_ is Cons!1695) (toList!845 lt!71257)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71257))) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43003 (isStrictlySorted!310 (toList!845 lt!71257))))

(assert (=> d!43003 (= (insertStrictlySorted!92 (toList!845 lt!71257) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71805)))

(declare-fun b!137265 () Bool)

(declare-fun e!89355 () List!1699)

(assert (=> b!137265 (= e!89355 (ite c!25741 (t!6179 (toList!845 lt!71257)) (ite c!25743 (Cons!1695 (h!2301 (toList!845 lt!71257)) (t!6179 (toList!845 lt!71257))) Nil!1696)))))

(declare-fun b!137266 () Bool)

(assert (=> b!137266 (= e!89357 call!15105)))

(declare-fun bm!15101 () Bool)

(declare-fun call!15104 () List!1699)

(assert (=> bm!15101 (= call!15103 call!15104)))

(declare-fun b!137267 () Bool)

(declare-fun res!65805 () Bool)

(assert (=> b!137267 (=> (not res!65805) (not e!89358))))

(assert (=> b!137267 (= res!65805 (containsKey!177 lt!71805 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137268 () Bool)

(assert (=> b!137268 (= e!89357 call!15105)))

(declare-fun bm!15102 () Bool)

(assert (=> bm!15102 (= call!15104 ($colon$colon!92 e!89355 (ite c!25744 (h!2301 (toList!845 lt!71257)) (tuple2!2575 (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun c!25742 () Bool)

(assert (=> bm!15102 (= c!25742 c!25744)))

(declare-fun b!137269 () Bool)

(assert (=> b!137269 (= e!89359 call!15104)))

(declare-fun b!137270 () Bool)

(assert (=> b!137270 (= e!89355 (insertStrictlySorted!92 (t!6179 (toList!845 lt!71257)) (_1!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137271 () Bool)

(assert (=> b!137271 (= e!89356 call!15103)))

(assert (= (and d!43003 c!25744) b!137269))

(assert (= (and d!43003 (not c!25744)) b!137264))

(assert (= (and b!137264 c!25741) b!137271))

(assert (= (and b!137264 (not c!25741)) b!137262))

(assert (= (and b!137262 c!25743) b!137268))

(assert (= (and b!137262 (not c!25743)) b!137266))

(assert (= (or b!137268 b!137266) bm!15100))

(assert (= (or b!137271 bm!15100) bm!15101))

(assert (= (or b!137269 bm!15101) bm!15102))

(assert (= (and bm!15102 c!25742) b!137270))

(assert (= (and bm!15102 (not c!25742)) b!137265))

(assert (= (and d!43003 res!65804) b!137267))

(assert (= (and b!137267 res!65805) b!137263))

(declare-fun m!164045 () Bool)

(assert (=> d!43003 m!164045))

(declare-fun m!164047 () Bool)

(assert (=> d!43003 m!164047))

(declare-fun m!164049 () Bool)

(assert (=> b!137270 m!164049))

(declare-fun m!164051 () Bool)

(assert (=> bm!15102 m!164051))

(declare-fun m!164053 () Bool)

(assert (=> b!137263 m!164053))

(declare-fun m!164055 () Bool)

(assert (=> b!137267 m!164055))

(assert (=> d!42777 d!43003))

(declare-fun d!43005 () Bool)

(assert (=> d!43005 (= (apply!117 lt!71568 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71568) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5766 () Bool)

(assert (= bs!5766 d!43005))

(declare-fun m!164057 () Bool)

(assert (=> bs!5766 m!164057))

(assert (=> bs!5766 m!164057))

(declare-fun m!164059 () Bool)

(assert (=> bs!5766 m!164059))

(assert (=> b!136882 d!43005))

(declare-fun b!137272 () Bool)

(declare-fun e!89361 () Bool)

(declare-fun call!15106 () Bool)

(assert (=> b!137272 (= e!89361 call!15106)))

(declare-fun b!137273 () Bool)

(declare-fun e!89362 () Bool)

(assert (=> b!137273 (= e!89362 call!15106)))

(declare-fun b!137274 () Bool)

(assert (=> b!137274 (= e!89361 e!89362)))

(declare-fun lt!71806 () (_ BitVec 64))

(assert (=> b!137274 (= lt!71806 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000))))

(declare-fun lt!71808 () Unit!4281)

(assert (=> b!137274 (= lt!71808 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4641 (_2!1299 lt!71193)) lt!71806 #b00000000000000000000000000000000))))

(assert (=> b!137274 (arrayContainsKey!0 (_keys!4641 (_2!1299 lt!71193)) lt!71806 #b00000000000000000000000000000000)))

(declare-fun lt!71807 () Unit!4281)

(assert (=> b!137274 (= lt!71807 lt!71808)))

(declare-fun res!65806 () Bool)

(assert (=> b!137274 (= res!65806 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000) (_keys!4641 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193))) (Found!270 #b00000000000000000000000000000000)))))

(assert (=> b!137274 (=> (not res!65806) (not e!89362))))

(declare-fun d!43007 () Bool)

(declare-fun res!65807 () Bool)

(declare-fun e!89360 () Bool)

(assert (=> d!43007 (=> res!65807 e!89360)))

(assert (=> d!43007 (= res!65807 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(assert (=> d!43007 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193))) e!89360)))

(declare-fun b!137275 () Bool)

(assert (=> b!137275 (= e!89360 e!89361)))

(declare-fun c!25745 () Bool)

(assert (=> b!137275 (= c!25745 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun bm!15103 () Bool)

(assert (=> bm!15103 (= call!15106 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4641 (_2!1299 lt!71193)) (mask!7202 (_2!1299 lt!71193))))))

(assert (= (and d!43007 (not res!65807)) b!137275))

(assert (= (and b!137275 c!25745) b!137274))

(assert (= (and b!137275 (not c!25745)) b!137272))

(assert (= (and b!137274 res!65806) b!137273))

(assert (= (or b!137273 b!137272) bm!15103))

(assert (=> b!137274 m!163457))

(declare-fun m!164061 () Bool)

(assert (=> b!137274 m!164061))

(declare-fun m!164063 () Bool)

(assert (=> b!137274 m!164063))

(assert (=> b!137274 m!163457))

(declare-fun m!164065 () Bool)

(assert (=> b!137274 m!164065))

(assert (=> b!137275 m!163457))

(assert (=> b!137275 m!163457))

(assert (=> b!137275 m!163481))

(declare-fun m!164067 () Bool)

(assert (=> bm!15103 m!164067))

(assert (=> b!136562 d!43007))

(declare-fun d!43009 () Bool)

(assert (=> d!43009 (= (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!419 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!5767 () Bool)

(assert (= bs!5767 d!43009))

(assert (=> bs!5767 m!162875))

(declare-fun m!164069 () Bool)

(assert (=> bs!5767 m!164069))

(assert (=> b!136860 d!43009))

(declare-fun b!137279 () Bool)

(declare-fun e!89364 () Option!180)

(assert (=> b!137279 (= e!89364 None!178)))

(declare-fun b!137276 () Bool)

(declare-fun e!89363 () Option!180)

(assert (=> b!137276 (= e!89363 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71267)))))))

(declare-fun b!137278 () Bool)

(assert (=> b!137278 (= e!89364 (getValueByKey!174 (t!6179 (toList!845 lt!71267)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun c!25746 () Bool)

(declare-fun d!43011 () Bool)

(assert (=> d!43011 (= c!25746 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!43011 (= (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!89363)))

(declare-fun b!137277 () Bool)

(assert (=> b!137277 (= e!89363 e!89364)))

(declare-fun c!25747 () Bool)

(assert (=> b!137277 (= c!25747 (and ((_ is Cons!1695) (toList!845 lt!71267)) (not (= (_1!1298 (h!2301 (toList!845 lt!71267))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(assert (= (and d!43011 c!25746) b!137276))

(assert (= (and d!43011 (not c!25746)) b!137277))

(assert (= (and b!137277 c!25747) b!137278))

(assert (= (and b!137277 (not c!25747)) b!137279))

(assert (=> b!137278 m!162775))

(declare-fun m!164071 () Bool)

(assert (=> b!137278 m!164071))

(assert (=> b!136860 d!43011))

(assert (=> d!42803 d!42805))

(declare-fun b!137296 () Bool)

(declare-fun e!89373 () Bool)

(declare-fun call!15111 () Bool)

(assert (=> b!137296 (= e!89373 (not call!15111))))

(declare-fun b!137297 () Bool)

(declare-fun e!89375 () Bool)

(declare-fun lt!71811 () SeekEntryResult!270)

(assert (=> b!137297 (= e!89375 ((_ is Undefined!270) lt!71811))))

(declare-fun b!137298 () Bool)

(declare-fun e!89376 () Bool)

(assert (=> b!137298 (= e!89376 e!89375)))

(declare-fun c!25752 () Bool)

(assert (=> b!137298 (= c!25752 ((_ is MissingVacant!270) lt!71811))))

(declare-fun bm!15108 () Bool)

(declare-fun call!15112 () Bool)

(declare-fun c!25753 () Bool)

(assert (=> bm!15108 (= call!15112 (inRange!0 (ite c!25753 (index!3241 lt!71811) (index!3244 lt!71811)) (mask!7202 newMap!16)))))

(declare-fun b!137299 () Bool)

(declare-fun e!89374 () Bool)

(assert (=> b!137299 (= e!89374 (not call!15111))))

(declare-fun b!137300 () Bool)

(declare-fun res!65817 () Bool)

(assert (=> b!137300 (= res!65817 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71811)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137300 (=> (not res!65817) (not e!89373))))

(declare-fun b!137302 () Bool)

(assert (=> b!137302 (= e!89376 e!89373)))

(declare-fun res!65818 () Bool)

(assert (=> b!137302 (= res!65818 call!15112)))

(assert (=> b!137302 (=> (not res!65818) (not e!89373))))

(declare-fun bm!15109 () Bool)

(assert (=> bm!15109 (= call!15111 (arrayContainsKey!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!137303 () Bool)

(declare-fun res!65816 () Bool)

(assert (=> b!137303 (=> (not res!65816) (not e!89374))))

(assert (=> b!137303 (= res!65816 (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71811)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137301 () Bool)

(declare-fun res!65819 () Bool)

(assert (=> b!137301 (=> (not res!65819) (not e!89374))))

(assert (=> b!137301 (= res!65819 call!15112)))

(assert (=> b!137301 (= e!89375 e!89374)))

(declare-fun d!43013 () Bool)

(assert (=> d!43013 e!89376))

(assert (=> d!43013 (= c!25753 ((_ is MissingZero!270) lt!71811))))

(assert (=> d!43013 (= lt!71811 (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (=> d!43013 true))

(declare-fun _$34!994 () Unit!4281)

(assert (=> d!43013 (= (choose!846 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (defaultEntry!2888 newMap!16)) _$34!994)))

(assert (= (and d!43013 c!25753) b!137302))

(assert (= (and d!43013 (not c!25753)) b!137298))

(assert (= (and b!137302 res!65818) b!137300))

(assert (= (and b!137300 res!65817) b!137296))

(assert (= (and b!137298 c!25752) b!137301))

(assert (= (and b!137298 (not c!25752)) b!137297))

(assert (= (and b!137301 res!65819) b!137303))

(assert (= (and b!137303 res!65816) b!137299))

(assert (= (or b!137302 b!137301) bm!15108))

(assert (= (or b!137296 b!137299) bm!15109))

(assert (=> d!43013 m!162605))

(assert (=> d!43013 m!162751))

(declare-fun m!164073 () Bool)

(assert (=> b!137303 m!164073))

(declare-fun m!164075 () Bool)

(assert (=> b!137300 m!164075))

(declare-fun m!164077 () Bool)

(assert (=> bm!15108 m!164077))

(assert (=> bm!15109 m!162605))

(assert (=> bm!15109 m!162769))

(assert (=> d!42803 d!43013))

(assert (=> d!42803 d!42841))

(declare-fun b!137304 () Bool)

(declare-fun e!89377 () (_ BitVec 32))

(declare-fun call!15113 () (_ BitVec 32))

(assert (=> b!137304 (= e!89377 call!15113)))

(declare-fun lt!71812 () (_ BitVec 32))

(declare-fun d!43015 () Bool)

(assert (=> d!43015 (and (bvsge lt!71812 #b00000000000000000000000000000000) (bvsle lt!71812 (bvsub (size!2534 lt!71470) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(declare-fun e!89378 () (_ BitVec 32))

(assert (=> d!43015 (= lt!71812 e!89378)))

(declare-fun c!25755 () Bool)

(assert (=> d!43015 (= c!25755 (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)))))

(assert (=> d!43015 (and (bvsle (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)) (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001) (size!2534 lt!71470)))))

(assert (=> d!43015 (= (arrayCountValidKeys!0 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)) lt!71812)))

(declare-fun b!137305 () Bool)

(assert (=> b!137305 (= e!89378 e!89377)))

(declare-fun c!25754 () Bool)

(assert (=> b!137305 (= c!25754 (validKeyInArray!0 (select (arr!2264 lt!71470) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(declare-fun b!137306 () Bool)

(assert (=> b!137306 (= e!89378 #b00000000000000000000000000000000)))

(declare-fun b!137307 () Bool)

(assert (=> b!137307 (= e!89377 (bvadd #b00000000000000000000000000000001 call!15113))))

(declare-fun bm!15110 () Bool)

(assert (=> bm!15110 (= call!15113 (arrayCountValidKeys!0 lt!71470 (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)))))

(assert (= (and d!43015 c!25755) b!137306))

(assert (= (and d!43015 (not c!25755)) b!137305))

(assert (= (and b!137305 c!25754) b!137307))

(assert (= (and b!137305 (not c!25754)) b!137304))

(assert (= (or b!137307 b!137304) bm!15110))

(declare-fun m!164079 () Bool)

(assert (=> b!137305 m!164079))

(assert (=> b!137305 m!164079))

(declare-fun m!164081 () Bool)

(assert (=> b!137305 m!164081))

(declare-fun m!164083 () Bool)

(assert (=> bm!15110 m!164083))

(assert (=> d!42761 d!43015))

(assert (=> d!42761 d!42985))

(assert (=> d!42761 d!42733))

(declare-fun b!137316 () Bool)

(declare-fun res!65829 () Bool)

(declare-fun e!89384 () Bool)

(assert (=> b!137316 (=> (not res!65829) (not e!89384))))

(assert (=> b!137316 (= res!65829 (not (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))))

(declare-fun b!137317 () Bool)

(declare-fun res!65831 () Bool)

(assert (=> b!137317 (=> (not res!65831) (not e!89384))))

(assert (=> b!137317 (= res!65831 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!137318 () Bool)

(assert (=> b!137318 (= e!89384 (bvslt (size!2534 (_keys!4641 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!43017 () Bool)

(declare-fun e!89383 () Bool)

(assert (=> d!43017 e!89383))

(declare-fun res!65830 () Bool)

(assert (=> d!43017 (=> (not res!65830) (not e!89383))))

(assert (=> d!43017 (= res!65830 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 (_keys!4641 newMap!16)))))))

(declare-fun lt!71815 () Unit!4281)

(declare-fun choose!1 (array!4789 (_ BitVec 32) (_ BitVec 64)) Unit!4281)

(assert (=> d!43017 (= lt!71815 (choose!1 (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!43017 e!89384))

(declare-fun res!65828 () Bool)

(assert (=> d!43017 (=> (not res!65828) (not e!89384))))

(assert (=> d!43017 (= res!65828 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 (_keys!4641 newMap!16)))))))

(assert (=> d!43017 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71815)))

(declare-fun b!137319 () Bool)

(assert (=> b!137319 (= e!89383 (= (arrayCountValidKeys!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4641 newMap!16) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!43017 res!65828) b!137316))

(assert (= (and b!137316 res!65829) b!137317))

(assert (= (and b!137317 res!65831) b!137318))

(assert (= (and d!43017 res!65830) b!137319))

(declare-fun m!164085 () Bool)

(assert (=> b!137316 m!164085))

(assert (=> b!137316 m!164085))

(declare-fun m!164087 () Bool)

(assert (=> b!137316 m!164087))

(assert (=> b!137317 m!162605))

(declare-fun m!164089 () Bool)

(assert (=> b!137317 m!164089))

(assert (=> d!43017 m!162605))

(declare-fun m!164091 () Bool)

(assert (=> d!43017 m!164091))

(assert (=> b!137319 m!163141))

(assert (=> b!137319 m!163107))

(assert (=> b!137319 m!162839))

(assert (=> d!42761 d!43017))

(assert (=> d!42761 d!42813))

(declare-fun b!137320 () Bool)

(declare-fun e!89397 () Bool)

(assert (=> b!137320 (= e!89397 (validKeyInArray!0 (select (arr!2264 lt!71461) #b00000000000000000000000000000000)))))

(declare-fun b!137321 () Bool)

(declare-fun c!25761 () Bool)

(assert (=> b!137321 (= c!25761 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89388 () ListLongMap!1659)

(declare-fun e!89392 () ListLongMap!1659)

(assert (=> b!137321 (= e!89388 e!89392)))

(declare-fun d!43019 () Bool)

(declare-fun e!89390 () Bool)

(assert (=> d!43019 e!89390))

(declare-fun res!65839 () Bool)

(assert (=> d!43019 (=> (not res!65839) (not e!89390))))

(assert (=> d!43019 (= res!65839 (or (bvsge #b00000000000000000000000000000000 (size!2534 lt!71461)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 lt!71461)))))))

(declare-fun lt!71826 () ListLongMap!1659)

(declare-fun lt!71835 () ListLongMap!1659)

(assert (=> d!43019 (= lt!71826 lt!71835)))

(declare-fun lt!71834 () Unit!4281)

(declare-fun e!89391 () Unit!4281)

(assert (=> d!43019 (= lt!71834 e!89391)))

(declare-fun c!25756 () Bool)

(assert (=> d!43019 (= c!25756 e!89397)))

(declare-fun res!65836 () Bool)

(assert (=> d!43019 (=> (not res!65836) (not e!89397))))

(assert (=> d!43019 (= res!65836 (bvslt #b00000000000000000000000000000000 (size!2534 lt!71461)))))

(declare-fun e!89389 () ListLongMap!1659)

(assert (=> d!43019 (= lt!71835 e!89389)))

(declare-fun c!25759 () Bool)

(assert (=> d!43019 (= c!25759 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43019 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43019 (= (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71826)))

(declare-fun b!137322 () Bool)

(declare-fun call!15115 () ListLongMap!1659)

(assert (=> b!137322 (= e!89388 call!15115)))

(declare-fun b!137323 () Bool)

(declare-fun res!65835 () Bool)

(assert (=> b!137323 (=> (not res!65835) (not e!89390))))

(declare-fun e!89393 () Bool)

(assert (=> b!137323 (= res!65835 e!89393)))

(declare-fun c!25758 () Bool)

(assert (=> b!137323 (= c!25758 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15111 () Bool)

(declare-fun call!15116 () ListLongMap!1659)

(declare-fun call!15119 () ListLongMap!1659)

(assert (=> bm!15111 (= call!15116 call!15119)))

(declare-fun bm!15112 () Bool)

(declare-fun call!15117 () Bool)

(assert (=> bm!15112 (= call!15117 (contains!888 lt!71826 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137324 () Bool)

(declare-fun Unit!4314 () Unit!4281)

(assert (=> b!137324 (= e!89391 Unit!4314)))

(declare-fun b!137325 () Bool)

(declare-fun call!15118 () ListLongMap!1659)

(assert (=> b!137325 (= e!89389 (+!170 call!15118 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!137326 () Bool)

(declare-fun e!89386 () Bool)

(assert (=> b!137326 (= e!89386 (= (apply!117 lt!71826 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!137327 () Bool)

(declare-fun res!65833 () Bool)

(assert (=> b!137327 (=> (not res!65833) (not e!89390))))

(declare-fun e!89396 () Bool)

(assert (=> b!137327 (= res!65833 e!89396)))

(declare-fun res!65832 () Bool)

(assert (=> b!137327 (=> res!65832 e!89396)))

(declare-fun e!89394 () Bool)

(assert (=> b!137327 (= res!65832 (not e!89394))))

(declare-fun res!65838 () Bool)

(assert (=> b!137327 (=> (not res!65838) (not e!89394))))

(assert (=> b!137327 (= res!65838 (bvslt #b00000000000000000000000000000000 (size!2534 lt!71461)))))

(declare-fun c!25760 () Bool)

(declare-fun call!15120 () ListLongMap!1659)

(declare-fun bm!15113 () Bool)

(assert (=> bm!15113 (= call!15118 (+!170 (ite c!25759 call!15119 (ite c!25760 call!15116 call!15120)) (ite (or c!25759 c!25760) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!137328 () Bool)

(declare-fun e!89385 () Bool)

(assert (=> b!137328 (= e!89396 e!89385)))

(declare-fun res!65834 () Bool)

(assert (=> b!137328 (=> (not res!65834) (not e!89385))))

(assert (=> b!137328 (= res!65834 (contains!888 lt!71826 (select (arr!2264 lt!71461) #b00000000000000000000000000000000)))))

(assert (=> b!137328 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 lt!71461)))))

(declare-fun b!137329 () Bool)

(assert (=> b!137329 (= e!89389 e!89388)))

(assert (=> b!137329 (= c!25760 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137330 () Bool)

(declare-fun lt!71820 () Unit!4281)

(assert (=> b!137330 (= e!89391 lt!71820)))

(declare-fun lt!71831 () ListLongMap!1659)

(assert (=> b!137330 (= lt!71831 (getCurrentListMapNoExtraKeys!137 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71825 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71825 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71832 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71832 (select (arr!2264 lt!71461) #b00000000000000000000000000000000))))

(declare-fun lt!71829 () Unit!4281)

(assert (=> b!137330 (= lt!71829 (addStillContains!93 lt!71831 lt!71825 (zeroValue!2741 newMap!16) lt!71832))))

(assert (=> b!137330 (contains!888 (+!170 lt!71831 (tuple2!2575 lt!71825 (zeroValue!2741 newMap!16))) lt!71832)))

(declare-fun lt!71828 () Unit!4281)

(assert (=> b!137330 (= lt!71828 lt!71829)))

(declare-fun lt!71837 () ListLongMap!1659)

(assert (=> b!137330 (= lt!71837 (getCurrentListMapNoExtraKeys!137 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71824 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71824 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71823 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71823 (select (arr!2264 lt!71461) #b00000000000000000000000000000000))))

(declare-fun lt!71830 () Unit!4281)

(assert (=> b!137330 (= lt!71830 (addApplyDifferent!93 lt!71837 lt!71824 (minValue!2741 newMap!16) lt!71823))))

(assert (=> b!137330 (= (apply!117 (+!170 lt!71837 (tuple2!2575 lt!71824 (minValue!2741 newMap!16))) lt!71823) (apply!117 lt!71837 lt!71823))))

(declare-fun lt!71822 () Unit!4281)

(assert (=> b!137330 (= lt!71822 lt!71830)))

(declare-fun lt!71816 () ListLongMap!1659)

(assert (=> b!137330 (= lt!71816 (getCurrentListMapNoExtraKeys!137 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71819 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71819 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71817 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71817 (select (arr!2264 lt!71461) #b00000000000000000000000000000000))))

(declare-fun lt!71836 () Unit!4281)

(assert (=> b!137330 (= lt!71836 (addApplyDifferent!93 lt!71816 lt!71819 (zeroValue!2741 newMap!16) lt!71817))))

(assert (=> b!137330 (= (apply!117 (+!170 lt!71816 (tuple2!2575 lt!71819 (zeroValue!2741 newMap!16))) lt!71817) (apply!117 lt!71816 lt!71817))))

(declare-fun lt!71818 () Unit!4281)

(assert (=> b!137330 (= lt!71818 lt!71836)))

(declare-fun lt!71821 () ListLongMap!1659)

(assert (=> b!137330 (= lt!71821 (getCurrentListMapNoExtraKeys!137 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71827 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71827 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71833 () (_ BitVec 64))

(assert (=> b!137330 (= lt!71833 (select (arr!2264 lt!71461) #b00000000000000000000000000000000))))

(assert (=> b!137330 (= lt!71820 (addApplyDifferent!93 lt!71821 lt!71827 (minValue!2741 newMap!16) lt!71833))))

(assert (=> b!137330 (= (apply!117 (+!170 lt!71821 (tuple2!2575 lt!71827 (minValue!2741 newMap!16))) lt!71833) (apply!117 lt!71821 lt!71833))))

(declare-fun bm!15114 () Bool)

(assert (=> bm!15114 (= call!15119 (getCurrentListMapNoExtraKeys!137 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!137331 () Bool)

(declare-fun e!89387 () Bool)

(assert (=> b!137331 (= e!89390 e!89387)))

(declare-fun c!25757 () Bool)

(assert (=> b!137331 (= c!25757 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137332 () Bool)

(declare-fun e!89395 () Bool)

(assert (=> b!137332 (= e!89395 (= (apply!117 lt!71826 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!137333 () Bool)

(assert (=> b!137333 (= e!89387 e!89386)))

(declare-fun res!65837 () Bool)

(assert (=> b!137333 (= res!65837 call!15117)))

(assert (=> b!137333 (=> (not res!65837) (not e!89386))))

(declare-fun b!137334 () Bool)

(assert (=> b!137334 (= e!89385 (= (apply!117 lt!71826 (select (arr!2264 lt!71461) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 lt!71460) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137334 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 lt!71460)))))

(assert (=> b!137334 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 lt!71461)))))

(declare-fun b!137335 () Bool)

(assert (=> b!137335 (= e!89392 call!15115)))

(declare-fun b!137336 () Bool)

(assert (=> b!137336 (= e!89394 (validKeyInArray!0 (select (arr!2264 lt!71461) #b00000000000000000000000000000000)))))

(declare-fun b!137337 () Bool)

(assert (=> b!137337 (= e!89392 call!15120)))

(declare-fun b!137338 () Bool)

(assert (=> b!137338 (= e!89387 (not call!15117))))

(declare-fun b!137339 () Bool)

(declare-fun call!15114 () Bool)

(assert (=> b!137339 (= e!89393 (not call!15114))))

(declare-fun b!137340 () Bool)

(assert (=> b!137340 (= e!89393 e!89395)))

(declare-fun res!65840 () Bool)

(assert (=> b!137340 (= res!65840 call!15114)))

(assert (=> b!137340 (=> (not res!65840) (not e!89395))))

(declare-fun bm!15115 () Bool)

(assert (=> bm!15115 (= call!15114 (contains!888 lt!71826 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15116 () Bool)

(assert (=> bm!15116 (= call!15120 call!15116)))

(declare-fun bm!15117 () Bool)

(assert (=> bm!15117 (= call!15115 call!15118)))

(assert (= (and d!43019 c!25759) b!137325))

(assert (= (and d!43019 (not c!25759)) b!137329))

(assert (= (and b!137329 c!25760) b!137322))

(assert (= (and b!137329 (not c!25760)) b!137321))

(assert (= (and b!137321 c!25761) b!137335))

(assert (= (and b!137321 (not c!25761)) b!137337))

(assert (= (or b!137335 b!137337) bm!15116))

(assert (= (or b!137322 bm!15116) bm!15111))

(assert (= (or b!137322 b!137335) bm!15117))

(assert (= (or b!137325 bm!15111) bm!15114))

(assert (= (or b!137325 bm!15117) bm!15113))

(assert (= (and d!43019 res!65836) b!137320))

(assert (= (and d!43019 c!25756) b!137330))

(assert (= (and d!43019 (not c!25756)) b!137324))

(assert (= (and d!43019 res!65839) b!137327))

(assert (= (and b!137327 res!65838) b!137336))

(assert (= (and b!137327 (not res!65832)) b!137328))

(assert (= (and b!137328 res!65834) b!137334))

(assert (= (and b!137327 res!65833) b!137323))

(assert (= (and b!137323 c!25758) b!137340))

(assert (= (and b!137323 (not c!25758)) b!137339))

(assert (= (and b!137340 res!65840) b!137332))

(assert (= (or b!137340 b!137339) bm!15115))

(assert (= (and b!137323 res!65835) b!137331))

(assert (= (and b!137331 c!25757) b!137333))

(assert (= (and b!137331 (not c!25757)) b!137338))

(assert (= (and b!137333 res!65837) b!137326))

(assert (= (or b!137333 b!137338) bm!15112))

(declare-fun b_lambda!6149 () Bool)

(assert (=> (not b_lambda!6149) (not b!137334)))

(assert (=> b!137334 t!6191))

(declare-fun b_and!8521 () Bool)

(assert (= b_and!8517 (and (=> t!6191 result!4043) b_and!8521)))

(assert (=> b!137334 t!6193))

(declare-fun b_and!8523 () Bool)

(assert (= b_and!8519 (and (=> t!6193 result!4045) b_and!8523)))

(declare-fun m!164093 () Bool)

(assert (=> b!137326 m!164093))

(declare-fun m!164095 () Bool)

(assert (=> b!137330 m!164095))

(declare-fun m!164097 () Bool)

(assert (=> b!137330 m!164097))

(declare-fun m!164099 () Bool)

(assert (=> b!137330 m!164099))

(declare-fun m!164101 () Bool)

(assert (=> b!137330 m!164101))

(declare-fun m!164103 () Bool)

(assert (=> b!137330 m!164103))

(declare-fun m!164105 () Bool)

(assert (=> b!137330 m!164105))

(declare-fun m!164107 () Bool)

(assert (=> b!137330 m!164107))

(assert (=> b!137330 m!164107))

(declare-fun m!164109 () Bool)

(assert (=> b!137330 m!164109))

(declare-fun m!164111 () Bool)

(assert (=> b!137330 m!164111))

(declare-fun m!164113 () Bool)

(assert (=> b!137330 m!164113))

(declare-fun m!164115 () Bool)

(assert (=> b!137330 m!164115))

(declare-fun m!164117 () Bool)

(assert (=> b!137330 m!164117))

(declare-fun m!164119 () Bool)

(assert (=> b!137330 m!164119))

(declare-fun m!164121 () Bool)

(assert (=> b!137330 m!164121))

(assert (=> b!137330 m!164097))

(assert (=> b!137330 m!164113))

(assert (=> b!137330 m!164111))

(declare-fun m!164123 () Bool)

(assert (=> b!137330 m!164123))

(declare-fun m!164125 () Bool)

(assert (=> b!137330 m!164125))

(declare-fun m!164127 () Bool)

(assert (=> b!137330 m!164127))

(assert (=> b!137328 m!164121))

(assert (=> b!137328 m!164121))

(declare-fun m!164129 () Bool)

(assert (=> b!137328 m!164129))

(assert (=> d!43019 m!162853))

(declare-fun m!164131 () Bool)

(assert (=> b!137334 m!164131))

(assert (=> b!137334 m!164131))

(assert (=> b!137334 m!162959))

(declare-fun m!164133 () Bool)

(assert (=> b!137334 m!164133))

(assert (=> b!137334 m!164121))

(assert (=> b!137334 m!164121))

(declare-fun m!164135 () Bool)

(assert (=> b!137334 m!164135))

(assert (=> b!137334 m!162959))

(declare-fun m!164137 () Bool)

(assert (=> b!137325 m!164137))

(declare-fun m!164139 () Bool)

(assert (=> bm!15115 m!164139))

(assert (=> bm!15114 m!164095))

(assert (=> b!137336 m!164121))

(assert (=> b!137336 m!164121))

(declare-fun m!164141 () Bool)

(assert (=> b!137336 m!164141))

(assert (=> b!137320 m!164121))

(assert (=> b!137320 m!164121))

(assert (=> b!137320 m!164141))

(declare-fun m!164143 () Bool)

(assert (=> bm!15112 m!164143))

(declare-fun m!164145 () Bool)

(assert (=> bm!15113 m!164145))

(declare-fun m!164147 () Bool)

(assert (=> b!137332 m!164147))

(assert (=> d!42761 d!43019))

(declare-fun d!43021 () Bool)

(declare-fun e!89400 () Bool)

(assert (=> d!43021 e!89400))

(declare-fun res!65843 () Bool)

(assert (=> d!43021 (=> (not res!65843) (not e!89400))))

(assert (=> d!43021 (= res!65843 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 (_keys!4641 newMap!16)))))))

(declare-fun lt!71840 () Unit!4281)

(declare-fun choose!41 (array!4789 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1701) Unit!4281)

(assert (=> d!43021 (= lt!71840 (choose!41 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) lt!71458 lt!71477))))

(assert (=> d!43021 (bvslt (size!2534 (_keys!4641 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!43021 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4641 newMap!16) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) lt!71458 lt!71477) lt!71840)))

(declare-fun b!137343 () Bool)

(assert (=> b!137343 (= e!89400 (arrayNoDuplicates!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) lt!71458 lt!71477))))

(assert (= (and d!43021 res!65843) b!137343))

(assert (=> d!43021 m!162605))

(declare-fun m!164149 () Bool)

(assert (=> d!43021 m!164149))

(assert (=> b!137343 m!163141))

(assert (=> b!137343 m!163131))

(assert (=> d!42761 d!43021))

(declare-fun d!43023 () Bool)

(declare-fun e!89401 () Bool)

(assert (=> d!43023 e!89401))

(declare-fun res!65844 () Bool)

(assert (=> d!43023 (=> (not res!65844) (not e!89401))))

(assert (=> d!43023 (= res!65844 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 lt!71461))))))

(declare-fun lt!71841 () Unit!4281)

(assert (=> d!43023 (= lt!71841 (choose!840 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (defaultEntry!2888 newMap!16)))))

(assert (=> d!43023 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43023 (= (lemmaValidKeyInArrayIsInListMap!122 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (defaultEntry!2888 newMap!16)) lt!71841)))

(declare-fun b!137344 () Bool)

(assert (=> b!137344 (= e!89401 (contains!888 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 lt!71461) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(assert (= (and d!43023 res!65844) b!137344))

(declare-fun m!164151 () Bool)

(assert (=> d!43023 m!164151))

(assert (=> d!43023 m!162853))

(assert (=> b!137344 m!163117))

(declare-fun m!164153 () Bool)

(assert (=> b!137344 m!164153))

(assert (=> b!137344 m!163117))

(assert (=> b!137344 m!164153))

(declare-fun m!164155 () Bool)

(assert (=> b!137344 m!164155))

(assert (=> d!42761 d!43023))

(declare-fun d!43025 () Bool)

(declare-fun res!65845 () Bool)

(declare-fun e!89402 () Bool)

(assert (=> d!43025 (=> res!65845 e!89402)))

(assert (=> d!43025 (= res!65845 (= (select (arr!2264 lt!71454) #b00000000000000000000000000000000) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!43025 (= (arrayContainsKey!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000) e!89402)))

(declare-fun b!137345 () Bool)

(declare-fun e!89403 () Bool)

(assert (=> b!137345 (= e!89402 e!89403)))

(declare-fun res!65846 () Bool)

(assert (=> b!137345 (=> (not res!65846) (not e!89403))))

(assert (=> b!137345 (= res!65846 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 lt!71454)))))

(declare-fun b!137346 () Bool)

(assert (=> b!137346 (= e!89403 (arrayContainsKey!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!43025 (not res!65845)) b!137345))

(assert (= (and b!137345 res!65846) b!137346))

(declare-fun m!164157 () Bool)

(assert (=> d!43025 m!164157))

(assert (=> b!137346 m!162605))

(declare-fun m!164159 () Bool)

(assert (=> b!137346 m!164159))

(assert (=> d!42761 d!43025))

(declare-fun d!43027 () Bool)

(declare-fun e!89404 () Bool)

(assert (=> d!43027 e!89404))

(declare-fun res!65847 () Bool)

(assert (=> d!43027 (=> res!65847 e!89404)))

(declare-fun lt!71843 () Bool)

(assert (=> d!43027 (= res!65847 (not lt!71843))))

(declare-fun lt!71844 () Bool)

(assert (=> d!43027 (= lt!71843 lt!71844)))

(declare-fun lt!71845 () Unit!4281)

(declare-fun e!89405 () Unit!4281)

(assert (=> d!43027 (= lt!71845 e!89405)))

(declare-fun c!25762 () Bool)

(assert (=> d!43027 (= c!25762 lt!71844)))

(assert (=> d!43027 (= lt!71844 (containsKey!177 (toList!845 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(assert (=> d!43027 (= (contains!888 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))) lt!71843)))

(declare-fun b!137347 () Bool)

(declare-fun lt!71842 () Unit!4281)

(assert (=> b!137347 (= e!89405 lt!71842)))

(assert (=> b!137347 (= lt!71842 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(assert (=> b!137347 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(declare-fun b!137348 () Bool)

(declare-fun Unit!4315 () Unit!4281)

(assert (=> b!137348 (= e!89405 Unit!4315)))

(declare-fun b!137349 () Bool)

(assert (=> b!137349 (= e!89404 (isDefined!126 (getValueByKey!174 (toList!845 (getCurrentListMap!521 lt!71461 lt!71460 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (select (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))))

(assert (= (and d!43027 c!25762) b!137347))

(assert (= (and d!43027 (not c!25762)) b!137348))

(assert (= (and d!43027 (not res!65847)) b!137349))

(assert (=> d!43027 m!163125))

(declare-fun m!164161 () Bool)

(assert (=> d!43027 m!164161))

(assert (=> b!137347 m!163125))

(declare-fun m!164163 () Bool)

(assert (=> b!137347 m!164163))

(assert (=> b!137347 m!163125))

(declare-fun m!164165 () Bool)

(assert (=> b!137347 m!164165))

(assert (=> b!137347 m!164165))

(declare-fun m!164167 () Bool)

(assert (=> b!137347 m!164167))

(assert (=> b!137349 m!163125))

(assert (=> b!137349 m!164165))

(assert (=> b!137349 m!164165))

(assert (=> b!137349 m!164167))

(assert (=> d!42761 d!43027))

(declare-fun b!137350 () Bool)

(declare-fun e!89418 () Bool)

(assert (=> b!137350 (= e!89418 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137351 () Bool)

(declare-fun c!25768 () Bool)

(assert (=> b!137351 (= c!25768 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89409 () ListLongMap!1659)

(declare-fun e!89413 () ListLongMap!1659)

(assert (=> b!137351 (= e!89409 e!89413)))

(declare-fun d!43029 () Bool)

(declare-fun e!89411 () Bool)

(assert (=> d!43029 e!89411))

(declare-fun res!65855 () Bool)

(assert (=> d!43029 (=> (not res!65855) (not e!89411))))

(assert (=> d!43029 (= res!65855 (or (bvsge #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))))

(declare-fun lt!71856 () ListLongMap!1659)

(declare-fun lt!71865 () ListLongMap!1659)

(assert (=> d!43029 (= lt!71856 lt!71865)))

(declare-fun lt!71864 () Unit!4281)

(declare-fun e!89412 () Unit!4281)

(assert (=> d!43029 (= lt!71864 e!89412)))

(declare-fun c!25763 () Bool)

(assert (=> d!43029 (= c!25763 e!89418)))

(declare-fun res!65852 () Bool)

(assert (=> d!43029 (=> (not res!65852) (not e!89418))))

(assert (=> d!43029 (= res!65852 (bvslt #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun e!89410 () ListLongMap!1659)

(assert (=> d!43029 (= lt!71865 e!89410)))

(declare-fun c!25766 () Bool)

(assert (=> d!43029 (= c!25766 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43029 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43029 (= (getCurrentListMap!521 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71856)))

(declare-fun b!137352 () Bool)

(declare-fun call!15122 () ListLongMap!1659)

(assert (=> b!137352 (= e!89409 call!15122)))

(declare-fun b!137353 () Bool)

(declare-fun res!65851 () Bool)

(assert (=> b!137353 (=> (not res!65851) (not e!89411))))

(declare-fun e!89414 () Bool)

(assert (=> b!137353 (= res!65851 e!89414)))

(declare-fun c!25765 () Bool)

(assert (=> b!137353 (= c!25765 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15118 () Bool)

(declare-fun call!15123 () ListLongMap!1659)

(declare-fun call!15126 () ListLongMap!1659)

(assert (=> bm!15118 (= call!15123 call!15126)))

(declare-fun bm!15119 () Bool)

(declare-fun call!15124 () Bool)

(assert (=> bm!15119 (= call!15124 (contains!888 lt!71856 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137354 () Bool)

(declare-fun Unit!4316 () Unit!4281)

(assert (=> b!137354 (= e!89412 Unit!4316)))

(declare-fun b!137355 () Bool)

(declare-fun call!15125 () ListLongMap!1659)

(assert (=> b!137355 (= e!89410 (+!170 call!15125 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!137356 () Bool)

(declare-fun e!89407 () Bool)

(assert (=> b!137356 (= e!89407 (= (apply!117 lt!71856 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!137357 () Bool)

(declare-fun res!65849 () Bool)

(assert (=> b!137357 (=> (not res!65849) (not e!89411))))

(declare-fun e!89417 () Bool)

(assert (=> b!137357 (= res!65849 e!89417)))

(declare-fun res!65848 () Bool)

(assert (=> b!137357 (=> res!65848 e!89417)))

(declare-fun e!89415 () Bool)

(assert (=> b!137357 (= res!65848 (not e!89415))))

(declare-fun res!65854 () Bool)

(assert (=> b!137357 (=> (not res!65854) (not e!89415))))

(assert (=> b!137357 (= res!65854 (bvslt #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun call!15127 () ListLongMap!1659)

(declare-fun bm!15120 () Bool)

(declare-fun c!25767 () Bool)

(assert (=> bm!15120 (= call!15125 (+!170 (ite c!25766 call!15126 (ite c!25767 call!15123 call!15127)) (ite (or c!25766 c!25767) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!137358 () Bool)

(declare-fun e!89406 () Bool)

(assert (=> b!137358 (= e!89417 e!89406)))

(declare-fun res!65850 () Bool)

(assert (=> b!137358 (=> (not res!65850) (not e!89406))))

(assert (=> b!137358 (= res!65850 (contains!888 lt!71856 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!137358 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun b!137359 () Bool)

(assert (=> b!137359 (= e!89410 e!89409)))

(assert (=> b!137359 (= c!25767 (and (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137360 () Bool)

(declare-fun lt!71850 () Unit!4281)

(assert (=> b!137360 (= e!89412 lt!71850)))

(declare-fun lt!71861 () ListLongMap!1659)

(assert (=> b!137360 (= lt!71861 (getCurrentListMapNoExtraKeys!137 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71855 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71855 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71862 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71862 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!71859 () Unit!4281)

(assert (=> b!137360 (= lt!71859 (addStillContains!93 lt!71861 lt!71855 (zeroValue!2741 newMap!16) lt!71862))))

(assert (=> b!137360 (contains!888 (+!170 lt!71861 (tuple2!2575 lt!71855 (zeroValue!2741 newMap!16))) lt!71862)))

(declare-fun lt!71858 () Unit!4281)

(assert (=> b!137360 (= lt!71858 lt!71859)))

(declare-fun lt!71867 () ListLongMap!1659)

(assert (=> b!137360 (= lt!71867 (getCurrentListMapNoExtraKeys!137 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71854 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71854 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71853 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71853 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!71860 () Unit!4281)

(assert (=> b!137360 (= lt!71860 (addApplyDifferent!93 lt!71867 lt!71854 (minValue!2741 newMap!16) lt!71853))))

(assert (=> b!137360 (= (apply!117 (+!170 lt!71867 (tuple2!2575 lt!71854 (minValue!2741 newMap!16))) lt!71853) (apply!117 lt!71867 lt!71853))))

(declare-fun lt!71852 () Unit!4281)

(assert (=> b!137360 (= lt!71852 lt!71860)))

(declare-fun lt!71846 () ListLongMap!1659)

(assert (=> b!137360 (= lt!71846 (getCurrentListMapNoExtraKeys!137 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71849 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71849 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71847 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71847 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!71866 () Unit!4281)

(assert (=> b!137360 (= lt!71866 (addApplyDifferent!93 lt!71846 lt!71849 (zeroValue!2741 newMap!16) lt!71847))))

(assert (=> b!137360 (= (apply!117 (+!170 lt!71846 (tuple2!2575 lt!71849 (zeroValue!2741 newMap!16))) lt!71847) (apply!117 lt!71846 lt!71847))))

(declare-fun lt!71848 () Unit!4281)

(assert (=> b!137360 (= lt!71848 lt!71866)))

(declare-fun lt!71851 () ListLongMap!1659)

(assert (=> b!137360 (= lt!71851 (getCurrentListMapNoExtraKeys!137 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71857 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71857 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71863 () (_ BitVec 64))

(assert (=> b!137360 (= lt!71863 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!137360 (= lt!71850 (addApplyDifferent!93 lt!71851 lt!71857 (minValue!2741 newMap!16) lt!71863))))

(assert (=> b!137360 (= (apply!117 (+!170 lt!71851 (tuple2!2575 lt!71857 (minValue!2741 newMap!16))) lt!71863) (apply!117 lt!71851 lt!71863))))

(declare-fun bm!15121 () Bool)

(assert (=> bm!15121 (= call!15126 (getCurrentListMapNoExtraKeys!137 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!137361 () Bool)

(declare-fun e!89408 () Bool)

(assert (=> b!137361 (= e!89411 e!89408)))

(declare-fun c!25764 () Bool)

(assert (=> b!137361 (= c!25764 (not (= (bvand (extraKeys!2649 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137362 () Bool)

(declare-fun e!89416 () Bool)

(assert (=> b!137362 (= e!89416 (= (apply!117 lt!71856 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2741 newMap!16)))))

(declare-fun b!137363 () Bool)

(assert (=> b!137363 (= e!89408 e!89407)))

(declare-fun res!65853 () Bool)

(assert (=> b!137363 (= res!65853 call!15124)))

(assert (=> b!137363 (=> (not res!65853) (not e!89407))))

(declare-fun b!137364 () Bool)

(assert (=> b!137364 (= e!89406 (= (apply!117 lt!71856 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137364 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))))))

(assert (=> b!137364 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun b!137365 () Bool)

(assert (=> b!137365 (= e!89413 call!15122)))

(declare-fun b!137366 () Bool)

(assert (=> b!137366 (= e!89415 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137367 () Bool)

(assert (=> b!137367 (= e!89413 call!15127)))

(declare-fun b!137368 () Bool)

(assert (=> b!137368 (= e!89408 (not call!15124))))

(declare-fun b!137369 () Bool)

(declare-fun call!15121 () Bool)

(assert (=> b!137369 (= e!89414 (not call!15121))))

(declare-fun b!137370 () Bool)

(assert (=> b!137370 (= e!89414 e!89416)))

(declare-fun res!65856 () Bool)

(assert (=> b!137370 (= res!65856 call!15121)))

(assert (=> b!137370 (=> (not res!65856) (not e!89416))))

(declare-fun bm!15122 () Bool)

(assert (=> bm!15122 (= call!15121 (contains!888 lt!71856 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15123 () Bool)

(assert (=> bm!15123 (= call!15127 call!15123)))

(declare-fun bm!15124 () Bool)

(assert (=> bm!15124 (= call!15122 call!15125)))

(assert (= (and d!43029 c!25766) b!137355))

(assert (= (and d!43029 (not c!25766)) b!137359))

(assert (= (and b!137359 c!25767) b!137352))

(assert (= (and b!137359 (not c!25767)) b!137351))

(assert (= (and b!137351 c!25768) b!137365))

(assert (= (and b!137351 (not c!25768)) b!137367))

(assert (= (or b!137365 b!137367) bm!15123))

(assert (= (or b!137352 bm!15123) bm!15118))

(assert (= (or b!137352 b!137365) bm!15124))

(assert (= (or b!137355 bm!15118) bm!15121))

(assert (= (or b!137355 bm!15124) bm!15120))

(assert (= (and d!43029 res!65852) b!137350))

(assert (= (and d!43029 c!25763) b!137360))

(assert (= (and d!43029 (not c!25763)) b!137354))

(assert (= (and d!43029 res!65855) b!137357))

(assert (= (and b!137357 res!65854) b!137366))

(assert (= (and b!137357 (not res!65848)) b!137358))

(assert (= (and b!137358 res!65850) b!137364))

(assert (= (and b!137357 res!65849) b!137353))

(assert (= (and b!137353 c!25765) b!137370))

(assert (= (and b!137353 (not c!25765)) b!137369))

(assert (= (and b!137370 res!65856) b!137362))

(assert (= (or b!137370 b!137369) bm!15122))

(assert (= (and b!137353 res!65851) b!137361))

(assert (= (and b!137361 c!25764) b!137363))

(assert (= (and b!137361 (not c!25764)) b!137368))

(assert (= (and b!137363 res!65853) b!137356))

(assert (= (or b!137363 b!137368) bm!15119))

(declare-fun b_lambda!6151 () Bool)

(assert (=> (not b_lambda!6151) (not b!137364)))

(assert (=> b!137364 t!6191))

(declare-fun b_and!8525 () Bool)

(assert (= b_and!8521 (and (=> t!6191 result!4043) b_and!8525)))

(assert (=> b!137364 t!6193))

(declare-fun b_and!8527 () Bool)

(assert (= b_and!8523 (and (=> t!6193 result!4045) b_and!8527)))

(declare-fun m!164169 () Bool)

(assert (=> b!137356 m!164169))

(declare-fun m!164171 () Bool)

(assert (=> b!137360 m!164171))

(declare-fun m!164173 () Bool)

(assert (=> b!137360 m!164173))

(declare-fun m!164175 () Bool)

(assert (=> b!137360 m!164175))

(declare-fun m!164177 () Bool)

(assert (=> b!137360 m!164177))

(declare-fun m!164179 () Bool)

(assert (=> b!137360 m!164179))

(declare-fun m!164181 () Bool)

(assert (=> b!137360 m!164181))

(declare-fun m!164183 () Bool)

(assert (=> b!137360 m!164183))

(assert (=> b!137360 m!164183))

(declare-fun m!164185 () Bool)

(assert (=> b!137360 m!164185))

(declare-fun m!164187 () Bool)

(assert (=> b!137360 m!164187))

(declare-fun m!164189 () Bool)

(assert (=> b!137360 m!164189))

(declare-fun m!164191 () Bool)

(assert (=> b!137360 m!164191))

(declare-fun m!164193 () Bool)

(assert (=> b!137360 m!164193))

(declare-fun m!164195 () Bool)

(assert (=> b!137360 m!164195))

(declare-fun m!164197 () Bool)

(assert (=> b!137360 m!164197))

(assert (=> b!137360 m!164173))

(assert (=> b!137360 m!164189))

(assert (=> b!137360 m!164187))

(declare-fun m!164199 () Bool)

(assert (=> b!137360 m!164199))

(declare-fun m!164201 () Bool)

(assert (=> b!137360 m!164201))

(declare-fun m!164203 () Bool)

(assert (=> b!137360 m!164203))

(assert (=> b!137358 m!164197))

(assert (=> b!137358 m!164197))

(declare-fun m!164205 () Bool)

(assert (=> b!137358 m!164205))

(assert (=> d!43029 m!162853))

(declare-fun m!164207 () Bool)

(assert (=> b!137364 m!164207))

(assert (=> b!137364 m!164207))

(assert (=> b!137364 m!162959))

(declare-fun m!164209 () Bool)

(assert (=> b!137364 m!164209))

(assert (=> b!137364 m!164197))

(assert (=> b!137364 m!164197))

(declare-fun m!164211 () Bool)

(assert (=> b!137364 m!164211))

(assert (=> b!137364 m!162959))

(declare-fun m!164213 () Bool)

(assert (=> b!137355 m!164213))

(declare-fun m!164215 () Bool)

(assert (=> bm!15122 m!164215))

(assert (=> bm!15121 m!164171))

(assert (=> b!137366 m!164197))

(assert (=> b!137366 m!164197))

(declare-fun m!164217 () Bool)

(assert (=> b!137366 m!164217))

(assert (=> b!137350 m!164197))

(assert (=> b!137350 m!164197))

(assert (=> b!137350 m!164217))

(declare-fun m!164219 () Bool)

(assert (=> bm!15119 m!164219))

(declare-fun m!164221 () Bool)

(assert (=> bm!15120 m!164221))

(declare-fun m!164223 () Bool)

(assert (=> b!137362 m!164223))

(assert (=> d!42761 d!43029))

(declare-fun b!137371 () Bool)

(declare-fun e!89420 () Bool)

(declare-fun call!15128 () Bool)

(assert (=> b!137371 (= e!89420 call!15128)))

(declare-fun b!137372 () Bool)

(declare-fun e!89421 () Bool)

(assert (=> b!137372 (= e!89421 call!15128)))

(declare-fun b!137373 () Bool)

(assert (=> b!137373 (= e!89420 e!89421)))

(declare-fun lt!71868 () (_ BitVec 64))

(assert (=> b!137373 (= lt!71868 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!71870 () Unit!4281)

(assert (=> b!137373 (= lt!71870 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) lt!71868 #b00000000000000000000000000000000))))

(assert (=> b!137373 (arrayContainsKey!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) lt!71868 #b00000000000000000000000000000000)))

(declare-fun lt!71869 () Unit!4281)

(assert (=> b!137373 (= lt!71869 lt!71870)))

(declare-fun res!65857 () Bool)

(assert (=> b!137373 (= res!65857 (= (seekEntryOrOpen!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000) (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (mask!7202 newMap!16)) (Found!270 #b00000000000000000000000000000000)))))

(assert (=> b!137373 (=> (not res!65857) (not e!89421))))

(declare-fun d!43031 () Bool)

(declare-fun res!65858 () Bool)

(declare-fun e!89419 () Bool)

(assert (=> d!43031 (=> res!65858 e!89419)))

(assert (=> d!43031 (= res!65858 (bvsge #b00000000000000000000000000000000 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(assert (=> d!43031 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (mask!7202 newMap!16)) e!89419)))

(declare-fun b!137374 () Bool)

(assert (=> b!137374 (= e!89419 e!89420)))

(declare-fun c!25769 () Bool)

(assert (=> b!137374 (= c!25769 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!15125 () Bool)

(assert (=> bm!15125 (= call!15128 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (mask!7202 newMap!16)))))

(assert (= (and d!43031 (not res!65858)) b!137374))

(assert (= (and b!137374 c!25769) b!137373))

(assert (= (and b!137374 (not c!25769)) b!137371))

(assert (= (and b!137373 res!65857) b!137372))

(assert (= (or b!137372 b!137371) bm!15125))

(assert (=> b!137373 m!164197))

(declare-fun m!164225 () Bool)

(assert (=> b!137373 m!164225))

(declare-fun m!164227 () Bool)

(assert (=> b!137373 m!164227))

(assert (=> b!137373 m!164197))

(declare-fun m!164229 () Bool)

(assert (=> b!137373 m!164229))

(assert (=> b!137374 m!164197))

(assert (=> b!137374 m!164197))

(assert (=> b!137374 m!164217))

(declare-fun m!164231 () Bool)

(assert (=> bm!15125 m!164231))

(assert (=> d!42761 d!43031))

(assert (=> d!42761 d!42847))

(declare-fun d!43033 () Bool)

(assert (=> d!43033 (arrayContainsKey!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!71873 () Unit!4281)

(declare-fun choose!13 (array!4789 (_ BitVec 64) (_ BitVec 32)) Unit!4281)

(assert (=> d!43033 (= lt!71873 (choose!13 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(assert (=> d!43033 (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000)))

(assert (=> d!43033 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!71454 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))) lt!71873)))

(declare-fun bs!5768 () Bool)

(assert (= bs!5768 d!43033))

(assert (=> bs!5768 m!162605))

(assert (=> bs!5768 m!163115))

(assert (=> bs!5768 m!162605))

(declare-fun m!164233 () Bool)

(assert (=> bs!5768 m!164233))

(assert (=> d!42761 d!43033))

(declare-fun b!137375 () Bool)

(declare-fun e!89422 () (_ BitVec 32))

(declare-fun call!15129 () (_ BitVec 32))

(assert (=> b!137375 (= e!89422 call!15129)))

(declare-fun lt!71874 () (_ BitVec 32))

(declare-fun d!43035 () Bool)

(assert (=> d!43035 (and (bvsge lt!71874 #b00000000000000000000000000000000) (bvsle lt!71874 (bvsub (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!89423 () (_ BitVec 32))

(assert (=> d!43035 (= lt!71874 e!89423)))

(declare-fun c!25771 () Bool)

(assert (=> d!43035 (= c!25771 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!43035 (and (bvsle #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2534 (_keys!4641 newMap!16)) (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(assert (=> d!43035 (= (arrayCountValidKeys!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) lt!71874)))

(declare-fun b!137376 () Bool)

(assert (=> b!137376 (= e!89423 e!89422)))

(declare-fun c!25770 () Bool)

(assert (=> b!137376 (= c!25770 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137377 () Bool)

(assert (=> b!137377 (= e!89423 #b00000000000000000000000000000000)))

(declare-fun b!137378 () Bool)

(assert (=> b!137378 (= e!89422 (bvadd #b00000000000000000000000000000001 call!15129))))

(declare-fun bm!15126 () Bool)

(assert (=> bm!15126 (= call!15129 (arrayCountValidKeys!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (= (and d!43035 c!25771) b!137377))

(assert (= (and d!43035 (not c!25771)) b!137376))

(assert (= (and b!137376 c!25770) b!137378))

(assert (= (and b!137376 (not c!25770)) b!137375))

(assert (= (or b!137378 b!137375) bm!15126))

(assert (=> b!137376 m!164197))

(assert (=> b!137376 m!164197))

(assert (=> b!137376 m!164217))

(declare-fun m!164235 () Bool)

(assert (=> bm!15126 m!164235))

(assert (=> d!42761 d!43035))

(declare-fun d!43037 () Bool)

(declare-fun e!89426 () Bool)

(assert (=> d!43037 e!89426))

(declare-fun res!65861 () Bool)

(assert (=> d!43037 (=> (not res!65861) (not e!89426))))

(assert (=> d!43037 (= res!65861 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 (_keys!4641 newMap!16)))))))

(declare-fun lt!71877 () Unit!4281)

(declare-fun choose!102 ((_ BitVec 64) array!4789 (_ BitVec 32) (_ BitVec 32)) Unit!4281)

(assert (=> d!43037 (= lt!71877 (choose!102 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (mask!7202 newMap!16)))))

(assert (=> d!43037 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43037 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (mask!7202 newMap!16)) lt!71877)))

(declare-fun b!137381 () Bool)

(assert (=> b!137381 (= e!89426 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (mask!7202 newMap!16)))))

(assert (= (and d!43037 res!65861) b!137381))

(assert (=> d!43037 m!162605))

(declare-fun m!164237 () Bool)

(assert (=> d!43037 m!164237))

(assert (=> d!43037 m!162853))

(assert (=> b!137381 m!163141))

(assert (=> b!137381 m!163135))

(assert (=> d!42761 d!43037))

(assert (=> d!42761 d!42697))

(assert (=> d!42761 d!42729))

(declare-fun d!43039 () Bool)

(assert (=> d!43039 (= (arrayCountValidKeys!0 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (bvadd (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!71880 () Unit!4281)

(declare-fun choose!2 (array!4789 (_ BitVec 32)) Unit!4281)

(assert (=> d!43039 (= lt!71880 (choose!2 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))))))

(declare-fun e!89429 () Bool)

(assert (=> d!43039 e!89429))

(declare-fun res!65866 () Bool)

(assert (=> d!43039 (=> (not res!65866) (not e!89429))))

(assert (=> d!43039 (= res!65866 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 lt!71470))))))

(assert (=> d!43039 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!71470 (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204))) lt!71880)))

(declare-fun b!137386 () Bool)

(declare-fun res!65867 () Bool)

(assert (=> b!137386 (=> (not res!65867) (not e!89429))))

(assert (=> b!137386 (= res!65867 (validKeyInArray!0 (select (arr!2264 lt!71470) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)))))))

(declare-fun b!137387 () Bool)

(assert (=> b!137387 (= e!89429 (bvslt (size!2534 lt!71470) #b01111111111111111111111111111111))))

(assert (= (and d!43039 res!65866) b!137386))

(assert (= (and b!137386 res!65867) b!137387))

(assert (=> d!43039 m!163121))

(declare-fun m!164239 () Bool)

(assert (=> d!43039 m!164239))

(assert (=> b!137386 m!164079))

(assert (=> b!137386 m!164079))

(assert (=> b!137386 m!164081))

(assert (=> d!42761 d!43039))

(declare-fun d!43041 () Bool)

(declare-fun e!89432 () Bool)

(assert (=> d!43041 e!89432))

(declare-fun res!65870 () Bool)

(assert (=> d!43041 (=> (not res!65870) (not e!89432))))

(assert (=> d!43041 (= res!65870 (and (bvsge (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) #b00000000000000000000000000000000) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2534 (_keys!4641 newMap!16))) (bvslt (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (size!2535 (_values!2871 newMap!16)))))))

(declare-fun lt!71883 () Unit!4281)

(declare-fun choose!850 (array!4789 array!4791 (_ BitVec 32) (_ BitVec 32) V!3497 V!3497 (_ BitVec 32) (_ BitVec 64) V!3497 Int) Unit!4281)

(assert (=> d!43041 (= lt!71883 (choose!850 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)))))

(assert (=> d!43041 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43041 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!43 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2888 newMap!16)) lt!71883)))

(declare-fun b!137390 () Bool)

(assert (=> b!137390 (= e!89432 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))))))

(assert (= (and d!43041 res!65870) b!137390))

(assert (=> d!43041 m!162605))

(assert (=> d!43041 m!162629))

(declare-fun m!164241 () Bool)

(assert (=> d!43041 m!164241))

(assert (=> d!43041 m!162853))

(assert (=> b!137390 m!163111))

(assert (=> b!137390 m!163133))

(assert (=> b!137390 m!163141))

(assert (=> b!137390 m!162737))

(assert (=> b!137390 m!162991))

(assert (=> b!137390 m!162737))

(assert (=> d!42761 d!43041))

(declare-fun b!137391 () Bool)

(declare-fun e!89433 () Bool)

(assert (=> b!137391 (= e!89433 (contains!890 lt!71477 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) lt!71458)))))

(declare-fun d!43043 () Bool)

(declare-fun res!65873 () Bool)

(declare-fun e!89434 () Bool)

(assert (=> d!43043 (=> res!65873 e!89434)))

(assert (=> d!43043 (= res!65873 (bvsge lt!71458 (size!2534 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))))))))

(assert (=> d!43043 (= (arrayNoDuplicates!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) lt!71458 lt!71477) e!89434)))

(declare-fun b!137392 () Bool)

(declare-fun e!89435 () Bool)

(declare-fun call!15130 () Bool)

(assert (=> b!137392 (= e!89435 call!15130)))

(declare-fun b!137393 () Bool)

(declare-fun e!89436 () Bool)

(assert (=> b!137393 (= e!89436 e!89435)))

(declare-fun c!25772 () Bool)

(assert (=> b!137393 (= c!25772 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) lt!71458)))))

(declare-fun bm!15127 () Bool)

(assert (=> bm!15127 (= call!15130 (arrayNoDuplicates!0 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16))) (bvadd lt!71458 #b00000000000000000000000000000001) (ite c!25772 (Cons!1697 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) lt!71458) lt!71477) lt!71477)))))

(declare-fun b!137394 () Bool)

(assert (=> b!137394 (= e!89434 e!89436)))

(declare-fun res!65872 () Bool)

(assert (=> b!137394 (=> (not res!65872) (not e!89436))))

(assert (=> b!137394 (= res!65872 (not e!89433))))

(declare-fun res!65871 () Bool)

(assert (=> b!137394 (=> (not res!65871) (not e!89433))))

(assert (=> b!137394 (= res!65871 (validKeyInArray!0 (select (arr!2264 (array!4790 (store (arr!2264 (_keys!4641 newMap!16)) (ite c!25520 (index!3244 lt!71204) (index!3241 lt!71204)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (size!2534 (_keys!4641 newMap!16)))) lt!71458)))))

(declare-fun b!137395 () Bool)

(assert (=> b!137395 (= e!89435 call!15130)))

(assert (= (and d!43043 (not res!65873)) b!137394))

(assert (= (and b!137394 res!65871) b!137391))

(assert (= (and b!137394 res!65872) b!137393))

(assert (= (and b!137393 c!25772) b!137395))

(assert (= (and b!137393 (not c!25772)) b!137392))

(assert (= (or b!137395 b!137392) bm!15127))

(declare-fun m!164243 () Bool)

(assert (=> b!137391 m!164243))

(assert (=> b!137391 m!164243))

(declare-fun m!164245 () Bool)

(assert (=> b!137391 m!164245))

(assert (=> b!137393 m!164243))

(assert (=> b!137393 m!164243))

(declare-fun m!164247 () Bool)

(assert (=> b!137393 m!164247))

(assert (=> bm!15127 m!164243))

(declare-fun m!164249 () Bool)

(assert (=> bm!15127 m!164249))

(assert (=> b!137394 m!164243))

(assert (=> b!137394 m!164243))

(assert (=> b!137394 m!164247))

(assert (=> d!42761 d!43043))

(declare-fun d!43045 () Bool)

(declare-fun e!89437 () Bool)

(assert (=> d!43045 e!89437))

(declare-fun res!65875 () Bool)

(assert (=> d!43045 (=> (not res!65875) (not e!89437))))

(declare-fun lt!71887 () ListLongMap!1659)

(assert (=> d!43045 (= res!65875 (contains!888 lt!71887 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(declare-fun lt!71884 () List!1699)

(assert (=> d!43045 (= lt!71887 (ListLongMap!1660 lt!71884))))

(declare-fun lt!71885 () Unit!4281)

(declare-fun lt!71886 () Unit!4281)

(assert (=> d!43045 (= lt!71885 lt!71886)))

(assert (=> d!43045 (= (getValueByKey!174 lt!71884 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43045 (= lt!71886 (lemmaContainsTupThenGetReturnValue!89 lt!71884 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43045 (= lt!71884 (insertStrictlySorted!92 (toList!845 call!15026) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43045 (= (+!170 call!15026 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71887)))

(declare-fun b!137396 () Bool)

(declare-fun res!65874 () Bool)

(assert (=> b!137396 (=> (not res!65874) (not e!89437))))

(assert (=> b!137396 (= res!65874 (= (getValueByKey!174 (toList!845 lt!71887) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(declare-fun b!137397 () Bool)

(assert (=> b!137397 (= e!89437 (contains!891 (toList!845 lt!71887) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))

(assert (= (and d!43045 res!65875) b!137396))

(assert (= (and b!137396 res!65874) b!137397))

(declare-fun m!164251 () Bool)

(assert (=> d!43045 m!164251))

(declare-fun m!164253 () Bool)

(assert (=> d!43045 m!164253))

(declare-fun m!164255 () Bool)

(assert (=> d!43045 m!164255))

(declare-fun m!164257 () Bool)

(assert (=> d!43045 m!164257))

(declare-fun m!164259 () Bool)

(assert (=> b!137396 m!164259))

(declare-fun m!164261 () Bool)

(assert (=> b!137397 m!164261))

(assert (=> b!136672 d!43045))

(declare-fun d!43047 () Bool)

(declare-fun e!89438 () Bool)

(assert (=> d!43047 e!89438))

(declare-fun res!65876 () Bool)

(assert (=> d!43047 (=> res!65876 e!89438)))

(declare-fun lt!71889 () Bool)

(assert (=> d!43047 (= res!65876 (not lt!71889))))

(declare-fun lt!71890 () Bool)

(assert (=> d!43047 (= lt!71889 lt!71890)))

(declare-fun lt!71891 () Unit!4281)

(declare-fun e!89439 () Unit!4281)

(assert (=> d!43047 (= lt!71891 e!89439)))

(declare-fun c!25773 () Bool)

(assert (=> d!43047 (= c!25773 lt!71890)))

(assert (=> d!43047 (= lt!71890 (containsKey!177 (toList!845 lt!71568) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43047 (= (contains!888 lt!71568 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71889)))

(declare-fun b!137398 () Bool)

(declare-fun lt!71888 () Unit!4281)

(assert (=> b!137398 (= e!89439 lt!71888)))

(assert (=> b!137398 (= lt!71888 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71568) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137398 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137399 () Bool)

(declare-fun Unit!4317 () Unit!4281)

(assert (=> b!137399 (= e!89439 Unit!4317)))

(declare-fun b!137400 () Bool)

(assert (=> b!137400 (= e!89438 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43047 c!25773) b!137398))

(assert (= (and d!43047 (not c!25773)) b!137399))

(assert (= (and d!43047 (not res!65876)) b!137400))

(declare-fun m!164263 () Bool)

(assert (=> d!43047 m!164263))

(declare-fun m!164265 () Bool)

(assert (=> b!137398 m!164265))

(assert (=> b!137398 m!163965))

(assert (=> b!137398 m!163965))

(declare-fun m!164267 () Bool)

(assert (=> b!137398 m!164267))

(assert (=> b!137400 m!163965))

(assert (=> b!137400 m!163965))

(assert (=> b!137400 m!164267))

(assert (=> bm!15051 d!43047))

(declare-fun d!43049 () Bool)

(declare-fun res!65877 () Bool)

(declare-fun e!89440 () Bool)

(assert (=> d!43049 (=> res!65877 e!89440)))

(assert (=> d!43049 (= res!65877 (and ((_ is Cons!1695) (toList!845 call!14971)) (= (_1!1298 (h!2301 (toList!845 call!14971))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!43049 (= (containsKey!177 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89440)))

(declare-fun b!137401 () Bool)

(declare-fun e!89441 () Bool)

(assert (=> b!137401 (= e!89440 e!89441)))

(declare-fun res!65878 () Bool)

(assert (=> b!137401 (=> (not res!65878) (not e!89441))))

(assert (=> b!137401 (= res!65878 (and (or (not ((_ is Cons!1695) (toList!845 call!14971))) (bvsle (_1!1298 (h!2301 (toList!845 call!14971))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) ((_ is Cons!1695) (toList!845 call!14971)) (bvslt (_1!1298 (h!2301 (toList!845 call!14971))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(declare-fun b!137402 () Bool)

(assert (=> b!137402 (= e!89441 (containsKey!177 (t!6179 (toList!845 call!14971)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!43049 (not res!65877)) b!137401))

(assert (= (and b!137401 res!65878) b!137402))

(assert (=> b!137402 m!162605))

(declare-fun m!164269 () Bool)

(assert (=> b!137402 m!164269))

(assert (=> d!42759 d!43049))

(declare-fun d!43051 () Bool)

(assert (=> d!43051 (arrayContainsKey!0 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000)))

(declare-fun lt!71892 () Unit!4281)

(assert (=> d!43051 (= lt!71892 (choose!13 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000))))

(assert (=> d!43051 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!43051 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000) lt!71892)))

(declare-fun bs!5769 () Bool)

(assert (= bs!5769 d!43051))

(assert (=> bs!5769 m!163155))

(declare-fun m!164271 () Bool)

(assert (=> bs!5769 m!164271))

(assert (=> b!136769 d!43051))

(declare-fun d!43053 () Bool)

(declare-fun res!65879 () Bool)

(declare-fun e!89442 () Bool)

(assert (=> d!43053 (=> res!65879 e!89442)))

(assert (=> d!43053 (= res!65879 (= (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) lt!71489))))

(assert (=> d!43053 (= (arrayContainsKey!0 (_keys!4641 newMap!16) lt!71489 #b00000000000000000000000000000000) e!89442)))

(declare-fun b!137403 () Bool)

(declare-fun e!89443 () Bool)

(assert (=> b!137403 (= e!89442 e!89443)))

(declare-fun res!65880 () Bool)

(assert (=> b!137403 (=> (not res!65880) (not e!89443))))

(assert (=> b!137403 (= res!65880 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137404 () Bool)

(assert (=> b!137404 (= e!89443 (arrayContainsKey!0 (_keys!4641 newMap!16) lt!71489 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!43053 (not res!65879)) b!137403))

(assert (= (and b!137403 res!65880) b!137404))

(assert (=> d!43053 m!162887))

(declare-fun m!164273 () Bool)

(assert (=> b!137404 m!164273))

(assert (=> b!136769 d!43053))

(declare-fun b!137405 () Bool)

(declare-fun e!89444 () SeekEntryResult!270)

(declare-fun lt!71895 () SeekEntryResult!270)

(assert (=> b!137405 (= e!89444 (MissingZero!270 (index!3243 lt!71895)))))

(declare-fun b!137406 () Bool)

(declare-fun e!89445 () SeekEntryResult!270)

(assert (=> b!137406 (= e!89445 (Found!270 (index!3243 lt!71895)))))

(declare-fun d!43055 () Bool)

(declare-fun lt!71893 () SeekEntryResult!270)

(assert (=> d!43055 (and (or ((_ is Undefined!270) lt!71893) (not ((_ is Found!270) lt!71893)) (and (bvsge (index!3242 lt!71893) #b00000000000000000000000000000000) (bvslt (index!3242 lt!71893) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71893) ((_ is Found!270) lt!71893) (not ((_ is MissingZero!270) lt!71893)) (and (bvsge (index!3241 lt!71893) #b00000000000000000000000000000000) (bvslt (index!3241 lt!71893) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71893) ((_ is Found!270) lt!71893) ((_ is MissingZero!270) lt!71893) (not ((_ is MissingVacant!270) lt!71893)) (and (bvsge (index!3244 lt!71893) #b00000000000000000000000000000000) (bvslt (index!3244 lt!71893) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!71893) (ite ((_ is Found!270) lt!71893) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71893)) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!270) lt!71893) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3241 lt!71893)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!270) lt!71893) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!71893)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89446 () SeekEntryResult!270)

(assert (=> d!43055 (= lt!71893 e!89446)))

(declare-fun c!25776 () Bool)

(assert (=> d!43055 (= c!25776 (and ((_ is Intermediate!270) lt!71895) (undefined!1082 lt!71895)))))

(assert (=> d!43055 (= lt!71895 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (mask!7202 newMap!16)) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (=> d!43055 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43055 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (_keys!4641 newMap!16) (mask!7202 newMap!16)) lt!71893)))

(declare-fun b!137407 () Bool)

(declare-fun c!25774 () Bool)

(declare-fun lt!71894 () (_ BitVec 64))

(assert (=> b!137407 (= c!25774 (= lt!71894 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137407 (= e!89445 e!89444)))

(declare-fun b!137408 () Bool)

(assert (=> b!137408 (= e!89446 e!89445)))

(assert (=> b!137408 (= lt!71894 (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71895)))))

(declare-fun c!25775 () Bool)

(assert (=> b!137408 (= c!25775 (= lt!71894 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137409 () Bool)

(assert (=> b!137409 (= e!89446 Undefined!270)))

(declare-fun b!137410 () Bool)

(assert (=> b!137410 (= e!89444 (seekKeyOrZeroReturnVacant!0 (x!15798 lt!71895) (index!3243 lt!71895) (index!3243 lt!71895) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (= (and d!43055 c!25776) b!137409))

(assert (= (and d!43055 (not c!25776)) b!137408))

(assert (= (and b!137408 c!25775) b!137406))

(assert (= (and b!137408 (not c!25775)) b!137407))

(assert (= (and b!137407 c!25774) b!137405))

(assert (= (and b!137407 (not c!25774)) b!137410))

(declare-fun m!164275 () Bool)

(assert (=> d!43055 m!164275))

(declare-fun m!164277 () Bool)

(assert (=> d!43055 m!164277))

(assert (=> d!43055 m!162887))

(declare-fun m!164279 () Bool)

(assert (=> d!43055 m!164279))

(assert (=> d!43055 m!162853))

(declare-fun m!164281 () Bool)

(assert (=> d!43055 m!164281))

(assert (=> d!43055 m!162887))

(assert (=> d!43055 m!164277))

(declare-fun m!164283 () Bool)

(assert (=> d!43055 m!164283))

(declare-fun m!164285 () Bool)

(assert (=> b!137408 m!164285))

(assert (=> b!137410 m!162887))

(declare-fun m!164287 () Bool)

(assert (=> b!137410 m!164287))

(assert (=> b!136769 d!43055))

(declare-fun b!137414 () Bool)

(declare-fun e!89448 () Option!180)

(assert (=> b!137414 (= e!89448 None!178)))

(declare-fun b!137411 () Bool)

(declare-fun e!89447 () Option!180)

(assert (=> b!137411 (= e!89447 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71513)))))))

(declare-fun b!137413 () Bool)

(assert (=> b!137413 (= e!89448 (getValueByKey!174 (t!6179 (toList!845 lt!71513)) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!43057 () Bool)

(declare-fun c!25777 () Bool)

(assert (=> d!43057 (= c!25777 (and ((_ is Cons!1695) (toList!845 lt!71513)) (= (_1!1298 (h!2301 (toList!845 lt!71513))) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43057 (= (getValueByKey!174 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89447)))

(declare-fun b!137412 () Bool)

(assert (=> b!137412 (= e!89447 e!89448)))

(declare-fun c!25778 () Bool)

(assert (=> b!137412 (= c!25778 (and ((_ is Cons!1695) (toList!845 lt!71513)) (not (= (_1!1298 (h!2301 (toList!845 lt!71513))) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43057 c!25777) b!137411))

(assert (= (and d!43057 (not c!25777)) b!137412))

(assert (= (and b!137412 c!25778) b!137413))

(assert (= (and b!137412 (not c!25778)) b!137414))

(declare-fun m!164289 () Bool)

(assert (=> b!137413 m!164289))

(assert (=> b!136809 d!43057))

(declare-fun d!43059 () Bool)

(assert (=> d!43059 (isDefined!126 (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun lt!71896 () Unit!4281)

(assert (=> d!43059 (= lt!71896 (choose!843 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun e!89449 () Bool)

(assert (=> d!43059 e!89449))

(declare-fun res!65881 () Bool)

(assert (=> d!43059 (=> (not res!65881) (not e!89449))))

(assert (=> d!43059 (= res!65881 (isStrictlySorted!310 (toList!845 e!88869)))))

(assert (=> d!43059 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71896)))

(declare-fun b!137415 () Bool)

(assert (=> b!137415 (= e!89449 (containsKey!177 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!43059 res!65881) b!137415))

(assert (=> d!43059 m!162605))

(assert (=> d!43059 m!163299))

(assert (=> d!43059 m!163299))

(assert (=> d!43059 m!163301))

(assert (=> d!43059 m!162605))

(declare-fun m!164291 () Bool)

(assert (=> d!43059 m!164291))

(declare-fun m!164293 () Bool)

(assert (=> d!43059 m!164293))

(assert (=> b!137415 m!162605))

(assert (=> b!137415 m!163295))

(assert (=> b!136861 d!43059))

(declare-fun d!43061 () Bool)

(assert (=> d!43061 (= (isDefined!126 (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) (not (isEmpty!419 (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(declare-fun bs!5770 () Bool)

(assert (= bs!5770 d!43061))

(assert (=> bs!5770 m!163299))

(declare-fun m!164295 () Bool)

(assert (=> bs!5770 m!164295))

(assert (=> b!136861 d!43061))

(declare-fun b!137419 () Bool)

(declare-fun e!89451 () Option!180)

(assert (=> b!137419 (= e!89451 None!178)))

(declare-fun b!137416 () Bool)

(declare-fun e!89450 () Option!180)

(assert (=> b!137416 (= e!89450 (Some!179 (_2!1298 (h!2301 (toList!845 e!88869)))))))

(declare-fun b!137418 () Bool)

(assert (=> b!137418 (= e!89451 (getValueByKey!174 (t!6179 (toList!845 e!88869)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun d!43063 () Bool)

(declare-fun c!25779 () Bool)

(assert (=> d!43063 (= c!25779 (and ((_ is Cons!1695) (toList!845 e!88869)) (= (_1!1298 (h!2301 (toList!845 e!88869))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!43063 (= (getValueByKey!174 (toList!845 e!88869) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89450)))

(declare-fun b!137417 () Bool)

(assert (=> b!137417 (= e!89450 e!89451)))

(declare-fun c!25780 () Bool)

(assert (=> b!137417 (= c!25780 (and ((_ is Cons!1695) (toList!845 e!88869)) (not (= (_1!1298 (h!2301 (toList!845 e!88869))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(assert (= (and d!43063 c!25779) b!137416))

(assert (= (and d!43063 (not c!25779)) b!137417))

(assert (= (and b!137417 c!25780) b!137418))

(assert (= (and b!137417 (not c!25780)) b!137419))

(assert (=> b!137418 m!162605))

(declare-fun m!164297 () Bool)

(assert (=> b!137418 m!164297))

(assert (=> b!136861 d!43063))

(declare-fun d!43065 () Bool)

(declare-fun isEmpty!420 (List!1699) Bool)

(assert (=> d!43065 (= (isEmpty!418 lt!71311) (isEmpty!420 (toList!845 lt!71311)))))

(declare-fun bs!5771 () Bool)

(assert (= bs!5771 d!43065))

(declare-fun m!164299 () Bool)

(assert (=> bs!5771 m!164299))

(assert (=> b!136634 d!43065))

(declare-fun d!43067 () Bool)

(declare-fun e!89452 () Bool)

(assert (=> d!43067 e!89452))

(declare-fun res!65882 () Bool)

(assert (=> d!43067 (=> res!65882 e!89452)))

(declare-fun lt!71898 () Bool)

(assert (=> d!43067 (= res!65882 (not lt!71898))))

(declare-fun lt!71899 () Bool)

(assert (=> d!43067 (= lt!71898 lt!71899)))

(declare-fun lt!71900 () Unit!4281)

(declare-fun e!89453 () Unit!4281)

(assert (=> d!43067 (= lt!71900 e!89453)))

(declare-fun c!25781 () Bool)

(assert (=> d!43067 (= c!25781 lt!71899)))

(assert (=> d!43067 (= lt!71899 (containsKey!177 (toList!845 lt!71322) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!43067 (= (contains!888 lt!71322 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) lt!71898)))

(declare-fun b!137420 () Bool)

(declare-fun lt!71897 () Unit!4281)

(assert (=> b!137420 (= e!89453 lt!71897)))

(assert (=> b!137420 (= lt!71897 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71322) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137420 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137421 () Bool)

(declare-fun Unit!4318 () Unit!4281)

(assert (=> b!137421 (= e!89453 Unit!4318)))

(declare-fun b!137422 () Bool)

(assert (=> b!137422 (= e!89452 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!43067 c!25781) b!137420))

(assert (= (and d!43067 (not c!25781)) b!137421))

(assert (= (and d!43067 (not res!65882)) b!137422))

(assert (=> d!43067 m!162887))

(declare-fun m!164301 () Bool)

(assert (=> d!43067 m!164301))

(assert (=> b!137420 m!162887))

(declare-fun m!164303 () Bool)

(assert (=> b!137420 m!164303))

(assert (=> b!137420 m!162887))

(assert (=> b!137420 m!163749))

(assert (=> b!137420 m!163749))

(declare-fun m!164305 () Bool)

(assert (=> b!137420 m!164305))

(assert (=> b!137422 m!162887))

(assert (=> b!137422 m!163749))

(assert (=> b!137422 m!163749))

(assert (=> b!137422 m!164305))

(assert (=> b!136645 d!43067))

(assert (=> b!136876 d!42959))

(declare-fun d!43069 () Bool)

(declare-fun e!89454 () Bool)

(assert (=> d!43069 e!89454))

(declare-fun res!65883 () Bool)

(assert (=> d!43069 (=> res!65883 e!89454)))

(declare-fun lt!71902 () Bool)

(assert (=> d!43069 (= res!65883 (not lt!71902))))

(declare-fun lt!71903 () Bool)

(assert (=> d!43069 (= lt!71902 lt!71903)))

(declare-fun lt!71904 () Unit!4281)

(declare-fun e!89455 () Unit!4281)

(assert (=> d!43069 (= lt!71904 e!89455)))

(declare-fun c!25782 () Bool)

(assert (=> d!43069 (= c!25782 lt!71903)))

(assert (=> d!43069 (= lt!71903 (containsKey!177 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43069 (= (contains!888 lt!71377 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71902)))

(declare-fun b!137423 () Bool)

(declare-fun lt!71901 () Unit!4281)

(assert (=> b!137423 (= e!89455 lt!71901)))

(assert (=> b!137423 (= lt!71901 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> b!137423 (isDefined!126 (getValueByKey!174 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!137424 () Bool)

(declare-fun Unit!4319 () Unit!4281)

(assert (=> b!137424 (= e!89455 Unit!4319)))

(declare-fun b!137425 () Bool)

(assert (=> b!137425 (= e!89454 (isDefined!126 (getValueByKey!174 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43069 c!25782) b!137423))

(assert (= (and d!43069 (not c!25782)) b!137424))

(assert (= (and d!43069 (not res!65883)) b!137425))

(declare-fun m!164307 () Bool)

(assert (=> d!43069 m!164307))

(declare-fun m!164309 () Bool)

(assert (=> b!137423 m!164309))

(assert (=> b!137423 m!163055))

(assert (=> b!137423 m!163055))

(declare-fun m!164311 () Bool)

(assert (=> b!137423 m!164311))

(assert (=> b!137425 m!163055))

(assert (=> b!137425 m!163055))

(assert (=> b!137425 m!164311))

(assert (=> d!42743 d!43069))

(declare-fun b!137429 () Bool)

(declare-fun e!89457 () Option!180)

(assert (=> b!137429 (= e!89457 None!178)))

(declare-fun b!137426 () Bool)

(declare-fun e!89456 () Option!180)

(assert (=> b!137426 (= e!89456 (Some!179 (_2!1298 (h!2301 lt!71374))))))

(declare-fun b!137428 () Bool)

(assert (=> b!137428 (= e!89457 (getValueByKey!174 (t!6179 lt!71374) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!43071 () Bool)

(declare-fun c!25783 () Bool)

(assert (=> d!43071 (= c!25783 (and ((_ is Cons!1695) lt!71374) (= (_1!1298 (h!2301 lt!71374)) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (=> d!43071 (= (getValueByKey!174 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) e!89456)))

(declare-fun b!137427 () Bool)

(assert (=> b!137427 (= e!89456 e!89457)))

(declare-fun c!25784 () Bool)

(assert (=> b!137427 (= c!25784 (and ((_ is Cons!1695) lt!71374) (not (= (_1!1298 (h!2301 lt!71374)) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(assert (= (and d!43071 c!25783) b!137426))

(assert (= (and d!43071 (not c!25783)) b!137427))

(assert (= (and b!137427 c!25784) b!137428))

(assert (= (and b!137427 (not c!25784)) b!137429))

(declare-fun m!164313 () Bool)

(assert (=> b!137428 m!164313))

(assert (=> d!42743 d!43071))

(declare-fun d!43073 () Bool)

(assert (=> d!43073 (= (getValueByKey!174 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (Some!179 (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun lt!71905 () Unit!4281)

(assert (=> d!43073 (= lt!71905 (choose!847 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89458 () Bool)

(assert (=> d!43073 e!89458))

(declare-fun res!65884 () Bool)

(assert (=> d!43073 (=> (not res!65884) (not e!89458))))

(assert (=> d!43073 (= res!65884 (isStrictlySorted!310 lt!71374))))

(assert (=> d!43073 (= (lemmaContainsTupThenGetReturnValue!89 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71905)))

(declare-fun b!137430 () Bool)

(declare-fun res!65885 () Bool)

(assert (=> b!137430 (=> (not res!65885) (not e!89458))))

(assert (=> b!137430 (= res!65885 (containsKey!177 lt!71374 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!137431 () Bool)

(assert (=> b!137431 (= e!89458 (contains!891 lt!71374 (tuple2!2575 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43073 res!65884) b!137430))

(assert (= (and b!137430 res!65885) b!137431))

(assert (=> d!43073 m!163049))

(declare-fun m!164315 () Bool)

(assert (=> d!43073 m!164315))

(declare-fun m!164317 () Bool)

(assert (=> d!43073 m!164317))

(declare-fun m!164319 () Bool)

(assert (=> b!137430 m!164319))

(declare-fun m!164321 () Bool)

(assert (=> b!137431 m!164321))

(assert (=> d!42743 d!43073))

(declare-fun b!137432 () Bool)

(declare-fun c!25787 () Bool)

(assert (=> b!137432 (= c!25787 (and ((_ is Cons!1695) (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (bvsgt (_1!1298 (h!2301 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun e!89460 () List!1699)

(declare-fun e!89461 () List!1699)

(assert (=> b!137432 (= e!89460 e!89461)))

(declare-fun e!89462 () Bool)

(declare-fun lt!71906 () List!1699)

(declare-fun b!137433 () Bool)

(assert (=> b!137433 (= e!89462 (contains!891 lt!71906 (tuple2!2575 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun bm!15128 () Bool)

(declare-fun call!15133 () List!1699)

(declare-fun call!15131 () List!1699)

(assert (=> bm!15128 (= call!15133 call!15131)))

(declare-fun b!137434 () Bool)

(declare-fun e!89463 () List!1699)

(assert (=> b!137434 (= e!89463 e!89460)))

(declare-fun c!25785 () Bool)

(assert (=> b!137434 (= c!25785 (and ((_ is Cons!1695) (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (= (_1!1298 (h!2301 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun d!43075 () Bool)

(assert (=> d!43075 e!89462))

(declare-fun res!65886 () Bool)

(assert (=> d!43075 (=> (not res!65886) (not e!89462))))

(assert (=> d!43075 (= res!65886 (isStrictlySorted!310 lt!71906))))

(assert (=> d!43075 (= lt!71906 e!89463)))

(declare-fun c!25788 () Bool)

(assert (=> d!43075 (= c!25788 (and ((_ is Cons!1695) (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (bvslt (_1!1298 (h!2301 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (=> d!43075 (isStrictlySorted!310 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))))))

(assert (=> d!43075 (= (insertStrictlySorted!92 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71906)))

(declare-fun b!137435 () Bool)

(declare-fun e!89459 () List!1699)

(assert (=> b!137435 (= e!89459 (ite c!25785 (t!6179 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (ite c!25787 (Cons!1695 (h!2301 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (t!6179 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005))))) Nil!1696)))))

(declare-fun b!137436 () Bool)

(assert (=> b!137436 (= e!89461 call!15133)))

(declare-fun bm!15129 () Bool)

(declare-fun call!15132 () List!1699)

(assert (=> bm!15129 (= call!15131 call!15132)))

(declare-fun b!137437 () Bool)

(declare-fun res!65887 () Bool)

(assert (=> b!137437 (=> (not res!65887) (not e!89462))))

(assert (=> b!137437 (= res!65887 (containsKey!177 lt!71906 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!137438 () Bool)

(assert (=> b!137438 (= e!89461 call!15133)))

(declare-fun bm!15130 () Bool)

(assert (=> bm!15130 (= call!15132 ($colon$colon!92 e!89459 (ite c!25788 (h!2301 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (tuple2!2575 (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(declare-fun c!25786 () Bool)

(assert (=> bm!15130 (= c!25786 c!25788)))

(declare-fun b!137439 () Bool)

(assert (=> b!137439 (= e!89463 call!15132)))

(declare-fun b!137440 () Bool)

(assert (=> b!137440 (= e!89459 (insertStrictlySorted!92 (t!6179 (toList!845 (ite c!25552 call!15004 (ite c!25553 call!15001 call!15005)))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (_2!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun b!137441 () Bool)

(assert (=> b!137441 (= e!89460 call!15131)))

(assert (= (and d!43075 c!25788) b!137439))

(assert (= (and d!43075 (not c!25788)) b!137434))

(assert (= (and b!137434 c!25785) b!137441))

(assert (= (and b!137434 (not c!25785)) b!137432))

(assert (= (and b!137432 c!25787) b!137438))

(assert (= (and b!137432 (not c!25787)) b!137436))

(assert (= (or b!137438 b!137436) bm!15128))

(assert (= (or b!137441 bm!15128) bm!15129))

(assert (= (or b!137439 bm!15129) bm!15130))

(assert (= (and bm!15130 c!25786) b!137440))

(assert (= (and bm!15130 (not c!25786)) b!137435))

(assert (= (and d!43075 res!65886) b!137437))

(assert (= (and b!137437 res!65887) b!137433))

(declare-fun m!164323 () Bool)

(assert (=> d!43075 m!164323))

(declare-fun m!164325 () Bool)

(assert (=> d!43075 m!164325))

(declare-fun m!164327 () Bool)

(assert (=> b!137440 m!164327))

(declare-fun m!164329 () Bool)

(assert (=> bm!15130 m!164329))

(declare-fun m!164331 () Bool)

(assert (=> b!137433 m!164331))

(declare-fun m!164333 () Bool)

(assert (=> b!137437 m!164333))

(assert (=> d!42743 d!43075))

(declare-fun d!43077 () Bool)

(assert (=> d!43077 (= (apply!117 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71264) (apply!117 lt!71278 lt!71264))))

(assert (=> d!43077 true))

(declare-fun _$34!995 () Unit!4281)

(assert (=> d!43077 (= (choose!844 lt!71278 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71264) _$34!995)))

(declare-fun bs!5772 () Bool)

(assert (= bs!5772 d!43077))

(assert (=> bs!5772 m!162797))

(assert (=> bs!5772 m!162797))

(assert (=> bs!5772 m!162799))

(assert (=> bs!5772 m!162793))

(assert (=> d!42793 d!43077))

(declare-fun d!43079 () Bool)

(declare-fun e!89464 () Bool)

(assert (=> d!43079 e!89464))

(declare-fun res!65888 () Bool)

(assert (=> d!43079 (=> res!65888 e!89464)))

(declare-fun lt!71908 () Bool)

(assert (=> d!43079 (= res!65888 (not lt!71908))))

(declare-fun lt!71909 () Bool)

(assert (=> d!43079 (= lt!71908 lt!71909)))

(declare-fun lt!71910 () Unit!4281)

(declare-fun e!89465 () Unit!4281)

(assert (=> d!43079 (= lt!71910 e!89465)))

(declare-fun c!25789 () Bool)

(assert (=> d!43079 (= c!25789 lt!71909)))

(assert (=> d!43079 (= lt!71909 (containsKey!177 (toList!845 lt!71278) lt!71264))))

(assert (=> d!43079 (= (contains!888 lt!71278 lt!71264) lt!71908)))

(declare-fun b!137442 () Bool)

(declare-fun lt!71907 () Unit!4281)

(assert (=> b!137442 (= e!89465 lt!71907)))

(assert (=> b!137442 (= lt!71907 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71278) lt!71264))))

(assert (=> b!137442 (isDefined!126 (getValueByKey!174 (toList!845 lt!71278) lt!71264))))

(declare-fun b!137443 () Bool)

(declare-fun Unit!4320 () Unit!4281)

(assert (=> b!137443 (= e!89465 Unit!4320)))

(declare-fun b!137444 () Bool)

(assert (=> b!137444 (= e!89464 (isDefined!126 (getValueByKey!174 (toList!845 lt!71278) lt!71264)))))

(assert (= (and d!43079 c!25789) b!137442))

(assert (= (and d!43079 (not c!25789)) b!137443))

(assert (= (and d!43079 (not res!65888)) b!137444))

(declare-fun m!164335 () Bool)

(assert (=> d!43079 m!164335))

(declare-fun m!164337 () Bool)

(assert (=> b!137442 m!164337))

(assert (=> b!137442 m!163211))

(assert (=> b!137442 m!163211))

(declare-fun m!164339 () Bool)

(assert (=> b!137442 m!164339))

(assert (=> b!137444 m!163211))

(assert (=> b!137444 m!163211))

(assert (=> b!137444 m!164339))

(assert (=> d!42793 d!43079))

(assert (=> d!42793 d!42791))

(assert (=> d!42793 d!42783))

(assert (=> d!42793 d!42795))

(assert (=> b!136630 d!42717))

(declare-fun b!137448 () Bool)

(declare-fun e!89467 () Option!180)

(assert (=> b!137448 (= e!89467 None!178)))

(declare-fun b!137445 () Bool)

(declare-fun e!89466 () Option!180)

(assert (=> b!137445 (= e!89466 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71553)))))))

(declare-fun b!137447 () Bool)

(assert (=> b!137447 (= e!89467 (getValueByKey!174 (t!6179 (toList!845 lt!71553)) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!25790 () Bool)

(declare-fun d!43081 () Bool)

(assert (=> d!43081 (= c!25790 (and ((_ is Cons!1695) (toList!845 lt!71553)) (= (_1!1298 (h!2301 (toList!845 lt!71553))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!43081 (= (getValueByKey!174 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!89466)))

(declare-fun b!137446 () Bool)

(assert (=> b!137446 (= e!89466 e!89467)))

(declare-fun c!25791 () Bool)

(assert (=> b!137446 (= c!25791 (and ((_ is Cons!1695) (toList!845 lt!71553)) (not (= (_1!1298 (h!2301 (toList!845 lt!71553))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43081 c!25790) b!137445))

(assert (= (and d!43081 (not c!25790)) b!137446))

(assert (= (and b!137446 c!25791) b!137447))

(assert (= (and b!137446 (not c!25791)) b!137448))

(declare-fun m!164341 () Bool)

(assert (=> b!137447 m!164341))

(assert (=> b!136868 d!43081))

(declare-fun b!137449 () Bool)

(declare-fun e!89469 () Bool)

(declare-fun call!15134 () Bool)

(assert (=> b!137449 (= e!89469 call!15134)))

(declare-fun b!137450 () Bool)

(declare-fun e!89470 () Bool)

(assert (=> b!137450 (= e!89470 call!15134)))

(declare-fun b!137451 () Bool)

(assert (=> b!137451 (= e!89469 e!89470)))

(declare-fun lt!71911 () (_ BitVec 64))

(assert (=> b!137451 (= lt!71911 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!71913 () Unit!4281)

(assert (=> b!137451 (= lt!71913 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) lt!71911 #b00000000000000000000000000000000))))

(assert (=> b!137451 (arrayContainsKey!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) lt!71911 #b00000000000000000000000000000000)))

(declare-fun lt!71912 () Unit!4281)

(assert (=> b!137451 (= lt!71912 lt!71913)))

(declare-fun res!65889 () Bool)

(assert (=> b!137451 (= res!65889 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000) (_keys!4641 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992)))) (Found!270 #b00000000000000000000000000000000)))))

(assert (=> b!137451 (=> (not res!65889) (not e!89470))))

(declare-fun d!43083 () Bool)

(declare-fun res!65890 () Bool)

(declare-fun e!89468 () Bool)

(assert (=> d!43083 (=> res!65890 e!89468)))

(assert (=> d!43083 (= res!65890 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!43083 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992)))) e!89468)))

(declare-fun b!137452 () Bool)

(assert (=> b!137452 (= e!89468 e!89469)))

(declare-fun c!25792 () Bool)

(assert (=> b!137452 (= c!25792 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!15131 () Bool)

(assert (=> bm!15131 (= call!15134 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4641 (v!3220 (underlying!459 thiss!992))) (mask!7202 (v!3220 (underlying!459 thiss!992)))))))

(assert (= (and d!43083 (not res!65890)) b!137452))

(assert (= (and b!137452 c!25792) b!137451))

(assert (= (and b!137452 (not c!25792)) b!137449))

(assert (= (and b!137451 res!65889) b!137450))

(assert (= (or b!137450 b!137449) bm!15131))

(assert (=> b!137451 m!163953))

(declare-fun m!164343 () Bool)

(assert (=> b!137451 m!164343))

(declare-fun m!164345 () Bool)

(assert (=> b!137451 m!164345))

(assert (=> b!137451 m!163953))

(declare-fun m!164347 () Bool)

(assert (=> b!137451 m!164347))

(assert (=> b!137452 m!163953))

(assert (=> b!137452 m!163953))

(assert (=> b!137452 m!163955))

(declare-fun m!164349 () Bool)

(assert (=> bm!15131 m!164349))

(assert (=> b!136871 d!43083))

(declare-fun d!43085 () Bool)

(declare-fun res!65891 () Bool)

(declare-fun e!89471 () Bool)

(assert (=> d!43085 (=> res!65891 e!89471)))

(assert (=> d!43085 (= res!65891 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71273)))))

(assert (=> d!43085 (= (containsKey!177 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273) e!89471)))

(declare-fun b!137453 () Bool)

(declare-fun e!89472 () Bool)

(assert (=> b!137453 (= e!89471 e!89472)))

(declare-fun res!65892 () Bool)

(assert (=> b!137453 (=> (not res!65892) (not e!89472))))

(assert (=> b!137453 (= res!65892 (and (or (not ((_ is Cons!1695) (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) (bvsle (_1!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71273)) ((_ is Cons!1695) (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (bvslt (_1!1298 (h!2301 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71273)))))

(declare-fun b!137454 () Bool)

(assert (=> b!137454 (= e!89472 (containsKey!177 (t!6179 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71273))))

(assert (= (and d!43085 (not res!65891)) b!137453))

(assert (= (and b!137453 res!65892) b!137454))

(declare-fun m!164351 () Bool)

(assert (=> b!137454 m!164351))

(assert (=> d!42781 d!43085))

(declare-fun d!43087 () Bool)

(assert (=> d!43087 (= (get!1502 (getValueByKey!174 (toList!845 lt!71278) lt!71264)) (v!3226 (getValueByKey!174 (toList!845 lt!71278) lt!71264)))))

(assert (=> d!42783 d!43087))

(declare-fun b!137458 () Bool)

(declare-fun e!89474 () Option!180)

(assert (=> b!137458 (= e!89474 None!178)))

(declare-fun b!137455 () Bool)

(declare-fun e!89473 () Option!180)

(assert (=> b!137455 (= e!89473 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71278)))))))

(declare-fun b!137457 () Bool)

(assert (=> b!137457 (= e!89474 (getValueByKey!174 (t!6179 (toList!845 lt!71278)) lt!71264))))

(declare-fun d!43089 () Bool)

(declare-fun c!25793 () Bool)

(assert (=> d!43089 (= c!25793 (and ((_ is Cons!1695) (toList!845 lt!71278)) (= (_1!1298 (h!2301 (toList!845 lt!71278))) lt!71264)))))

(assert (=> d!43089 (= (getValueByKey!174 (toList!845 lt!71278) lt!71264) e!89473)))

(declare-fun b!137456 () Bool)

(assert (=> b!137456 (= e!89473 e!89474)))

(declare-fun c!25794 () Bool)

(assert (=> b!137456 (= c!25794 (and ((_ is Cons!1695) (toList!845 lt!71278)) (not (= (_1!1298 (h!2301 (toList!845 lt!71278))) lt!71264))))))

(assert (= (and d!43089 c!25793) b!137455))

(assert (= (and d!43089 (not c!25793)) b!137456))

(assert (= (and b!137456 c!25794) b!137457))

(assert (= (and b!137456 (not c!25794)) b!137458))

(declare-fun m!164353 () Bool)

(assert (=> b!137457 m!164353))

(assert (=> d!42783 d!43089))

(assert (=> b!136683 d!42959))

(declare-fun d!43091 () Bool)

(declare-fun e!89475 () Bool)

(assert (=> d!43091 e!89475))

(declare-fun res!65894 () Bool)

(assert (=> d!43091 (=> (not res!65894) (not e!89475))))

(declare-fun lt!71917 () ListLongMap!1659)

(assert (=> d!43091 (= res!65894 (contains!888 lt!71917 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun lt!71914 () List!1699)

(assert (=> d!43091 (= lt!71917 (ListLongMap!1660 lt!71914))))

(declare-fun lt!71915 () Unit!4281)

(declare-fun lt!71916 () Unit!4281)

(assert (=> d!43091 (= lt!71915 lt!71916)))

(assert (=> d!43091 (= (getValueByKey!174 lt!71914 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!43091 (= lt!71916 (lemmaContainsTupThenGetReturnValue!89 lt!71914 (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!43091 (= lt!71914 (insertStrictlySorted!92 (toList!845 call!15019) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (=> d!43091 (= (+!170 call!15019 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))) lt!71917)))

(declare-fun b!137459 () Bool)

(declare-fun res!65893 () Bool)

(assert (=> b!137459 (=> (not res!65893) (not e!89475))))

(assert (=> b!137459 (= res!65893 (= (getValueByKey!174 (toList!845 lt!71917) (_1!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(declare-fun b!137460 () Bool)

(assert (=> b!137460 (= e!89475 (contains!891 (toList!845 lt!71917) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(assert (= (and d!43091 res!65894) b!137459))

(assert (= (and b!137459 res!65893) b!137460))

(declare-fun m!164355 () Bool)

(assert (=> d!43091 m!164355))

(declare-fun m!164357 () Bool)

(assert (=> d!43091 m!164357))

(declare-fun m!164359 () Bool)

(assert (=> d!43091 m!164359))

(declare-fun m!164361 () Bool)

(assert (=> d!43091 m!164361))

(declare-fun m!164363 () Bool)

(assert (=> b!137459 m!164363))

(declare-fun m!164365 () Bool)

(assert (=> b!137460 m!164365))

(assert (=> b!136642 d!43091))

(declare-fun lt!71918 () Bool)

(declare-fun d!43093 () Bool)

(assert (=> d!43093 (= lt!71918 (select (content!135 (toList!845 lt!71505)) (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89477 () Bool)

(assert (=> d!43093 (= lt!71918 e!89477)))

(declare-fun res!65895 () Bool)

(assert (=> d!43093 (=> (not res!65895) (not e!89477))))

(assert (=> d!43093 (= res!65895 ((_ is Cons!1695) (toList!845 lt!71505)))))

(assert (=> d!43093 (= (contains!891 (toList!845 lt!71505) (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71918)))

(declare-fun b!137461 () Bool)

(declare-fun e!89476 () Bool)

(assert (=> b!137461 (= e!89477 e!89476)))

(declare-fun res!65896 () Bool)

(assert (=> b!137461 (=> res!65896 e!89476)))

(assert (=> b!137461 (= res!65896 (= (h!2301 (toList!845 lt!71505)) (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137462 () Bool)

(assert (=> b!137462 (= e!89476 (contains!891 (t!6179 (toList!845 lt!71505)) (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!43093 res!65895) b!137461))

(assert (= (and b!137461 (not res!65896)) b!137462))

(declare-fun m!164367 () Bool)

(assert (=> d!43093 m!164367))

(declare-fun m!164369 () Bool)

(assert (=> d!43093 m!164369))

(declare-fun m!164371 () Bool)

(assert (=> b!137462 m!164371))

(assert (=> b!136805 d!43093))

(declare-fun d!43095 () Bool)

(assert (=> d!43095 (= (apply!117 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71274) (apply!117 lt!71262 lt!71274))))

(assert (=> d!43095 true))

(declare-fun _$34!996 () Unit!4281)

(assert (=> d!43095 (= (choose!844 lt!71262 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71274) _$34!996)))

(declare-fun bs!5773 () Bool)

(assert (= bs!5773 d!43095))

(assert (=> bs!5773 m!162801))

(assert (=> bs!5773 m!162801))

(assert (=> bs!5773 m!162811))

(assert (=> bs!5773 m!162795))

(assert (=> d!42797 d!43095))

(declare-fun d!43097 () Bool)

(declare-fun e!89478 () Bool)

(assert (=> d!43097 e!89478))

(declare-fun res!65897 () Bool)

(assert (=> d!43097 (=> res!65897 e!89478)))

(declare-fun lt!71920 () Bool)

(assert (=> d!43097 (= res!65897 (not lt!71920))))

(declare-fun lt!71921 () Bool)

(assert (=> d!43097 (= lt!71920 lt!71921)))

(declare-fun lt!71922 () Unit!4281)

(declare-fun e!89479 () Unit!4281)

(assert (=> d!43097 (= lt!71922 e!89479)))

(declare-fun c!25795 () Bool)

(assert (=> d!43097 (= c!25795 lt!71921)))

(assert (=> d!43097 (= lt!71921 (containsKey!177 (toList!845 lt!71262) lt!71274))))

(assert (=> d!43097 (= (contains!888 lt!71262 lt!71274) lt!71920)))

(declare-fun b!137463 () Bool)

(declare-fun lt!71919 () Unit!4281)

(assert (=> b!137463 (= e!89479 lt!71919)))

(assert (=> b!137463 (= lt!71919 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71262) lt!71274))))

(assert (=> b!137463 (isDefined!126 (getValueByKey!174 (toList!845 lt!71262) lt!71274))))

(declare-fun b!137464 () Bool)

(declare-fun Unit!4321 () Unit!4281)

(assert (=> b!137464 (= e!89479 Unit!4321)))

(declare-fun b!137465 () Bool)

(assert (=> b!137465 (= e!89478 (isDefined!126 (getValueByKey!174 (toList!845 lt!71262) lt!71274)))))

(assert (= (and d!43097 c!25795) b!137463))

(assert (= (and d!43097 (not c!25795)) b!137464))

(assert (= (and d!43097 (not res!65897)) b!137465))

(declare-fun m!164373 () Bool)

(assert (=> d!43097 m!164373))

(declare-fun m!164375 () Bool)

(assert (=> b!137463 m!164375))

(assert (=> b!137463 m!163219))

(assert (=> b!137463 m!163219))

(declare-fun m!164377 () Bool)

(assert (=> b!137463 m!164377))

(assert (=> b!137465 m!163219))

(assert (=> b!137465 m!163219))

(assert (=> b!137465 m!164377))

(assert (=> d!42797 d!43097))

(assert (=> d!42797 d!42779))

(assert (=> d!42797 d!42787))

(assert (=> d!42797 d!42789))

(declare-fun d!43099 () Bool)

(assert (=> d!43099 (= (isEmpty!419 (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))) (not ((_ is Some!179) (getValueByKey!174 (toList!845 lt!71090) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(assert (=> d!42767 d!43099))

(assert (=> b!136660 d!42865))

(assert (=> b!136660 d!42867))

(declare-fun d!43101 () Bool)

(declare-fun e!89480 () Bool)

(assert (=> d!43101 e!89480))

(declare-fun res!65898 () Bool)

(assert (=> d!43101 (=> res!65898 e!89480)))

(declare-fun lt!71924 () Bool)

(assert (=> d!43101 (= res!65898 (not lt!71924))))

(declare-fun lt!71925 () Bool)

(assert (=> d!43101 (= lt!71924 lt!71925)))

(declare-fun lt!71926 () Unit!4281)

(declare-fun e!89481 () Unit!4281)

(assert (=> d!43101 (= lt!71926 e!89481)))

(declare-fun c!25796 () Bool)

(assert (=> d!43101 (= c!25796 lt!71925)))

(assert (=> d!43101 (= lt!71925 (containsKey!177 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!43101 (= (contains!888 lt!71513 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71924)))

(declare-fun b!137466 () Bool)

(declare-fun lt!71923 () Unit!4281)

(assert (=> b!137466 (= e!89481 lt!71923)))

(assert (=> b!137466 (= lt!71923 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> b!137466 (isDefined!126 (getValueByKey!174 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137467 () Bool)

(declare-fun Unit!4322 () Unit!4281)

(assert (=> b!137467 (= e!89481 Unit!4322)))

(declare-fun b!137468 () Bool)

(assert (=> b!137468 (= e!89480 (isDefined!126 (getValueByKey!174 (toList!845 lt!71513) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!43101 c!25796) b!137466))

(assert (= (and d!43101 (not c!25796)) b!137467))

(assert (= (and d!43101 (not res!65898)) b!137468))

(declare-fun m!164379 () Bool)

(assert (=> d!43101 m!164379))

(declare-fun m!164381 () Bool)

(assert (=> b!137466 m!164381))

(assert (=> b!137466 m!163231))

(assert (=> b!137466 m!163231))

(declare-fun m!164383 () Bool)

(assert (=> b!137466 m!164383))

(assert (=> b!137468 m!163231))

(assert (=> b!137468 m!163231))

(assert (=> b!137468 m!164383))

(assert (=> d!42789 d!43101))

(declare-fun b!137472 () Bool)

(declare-fun e!89483 () Option!180)

(assert (=> b!137472 (= e!89483 None!178)))

(declare-fun b!137469 () Bool)

(declare-fun e!89482 () Option!180)

(assert (=> b!137469 (= e!89482 (Some!179 (_2!1298 (h!2301 lt!71510))))))

(declare-fun b!137471 () Bool)

(assert (=> b!137471 (= e!89483 (getValueByKey!174 (t!6179 lt!71510) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun c!25797 () Bool)

(declare-fun d!43103 () Bool)

(assert (=> d!43103 (= c!25797 (and ((_ is Cons!1695) lt!71510) (= (_1!1298 (h!2301 lt!71510)) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43103 (= (getValueByKey!174 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89482)))

(declare-fun b!137470 () Bool)

(assert (=> b!137470 (= e!89482 e!89483)))

(declare-fun c!25798 () Bool)

(assert (=> b!137470 (= c!25798 (and ((_ is Cons!1695) lt!71510) (not (= (_1!1298 (h!2301 lt!71510)) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43103 c!25797) b!137469))

(assert (= (and d!43103 (not c!25797)) b!137470))

(assert (= (and b!137470 c!25798) b!137471))

(assert (= (and b!137470 (not c!25798)) b!137472))

(declare-fun m!164385 () Bool)

(assert (=> b!137471 m!164385))

(assert (=> d!42789 d!43103))

(declare-fun d!43105 () Bool)

(assert (=> d!43105 (= (getValueByKey!174 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!71927 () Unit!4281)

(assert (=> d!43105 (= lt!71927 (choose!847 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89484 () Bool)

(assert (=> d!43105 e!89484))

(declare-fun res!65899 () Bool)

(assert (=> d!43105 (=> (not res!65899) (not e!89484))))

(assert (=> d!43105 (= res!65899 (isStrictlySorted!310 lt!71510))))

(assert (=> d!43105 (= (lemmaContainsTupThenGetReturnValue!89 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71927)))

(declare-fun b!137473 () Bool)

(declare-fun res!65900 () Bool)

(assert (=> b!137473 (=> (not res!65900) (not e!89484))))

(assert (=> b!137473 (= res!65900 (containsKey!177 lt!71510 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137474 () Bool)

(assert (=> b!137474 (= e!89484 (contains!891 lt!71510 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!43105 res!65899) b!137473))

(assert (= (and b!137473 res!65900) b!137474))

(assert (=> d!43105 m!163225))

(declare-fun m!164387 () Bool)

(assert (=> d!43105 m!164387))

(declare-fun m!164389 () Bool)

(assert (=> d!43105 m!164389))

(declare-fun m!164391 () Bool)

(assert (=> b!137473 m!164391))

(declare-fun m!164393 () Bool)

(assert (=> b!137474 m!164393))

(assert (=> d!42789 d!43105))

(declare-fun c!25801 () Bool)

(declare-fun b!137475 () Bool)

(assert (=> b!137475 (= c!25801 (and ((_ is Cons!1695) (toList!845 lt!71262)) (bvsgt (_1!1298 (h!2301 (toList!845 lt!71262))) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89486 () List!1699)

(declare-fun e!89487 () List!1699)

(assert (=> b!137475 (= e!89486 e!89487)))

(declare-fun e!89488 () Bool)

(declare-fun b!137476 () Bool)

(declare-fun lt!71928 () List!1699)

(assert (=> b!137476 (= e!89488 (contains!891 lt!71928 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun bm!15132 () Bool)

(declare-fun call!15137 () List!1699)

(declare-fun call!15135 () List!1699)

(assert (=> bm!15132 (= call!15137 call!15135)))

(declare-fun b!137477 () Bool)

(declare-fun e!89489 () List!1699)

(assert (=> b!137477 (= e!89489 e!89486)))

(declare-fun c!25799 () Bool)

(assert (=> b!137477 (= c!25799 (and ((_ is Cons!1695) (toList!845 lt!71262)) (= (_1!1298 (h!2301 (toList!845 lt!71262))) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!43107 () Bool)

(assert (=> d!43107 e!89488))

(declare-fun res!65901 () Bool)

(assert (=> d!43107 (=> (not res!65901) (not e!89488))))

(assert (=> d!43107 (= res!65901 (isStrictlySorted!310 lt!71928))))

(assert (=> d!43107 (= lt!71928 e!89489)))

(declare-fun c!25802 () Bool)

(assert (=> d!43107 (= c!25802 (and ((_ is Cons!1695) (toList!845 lt!71262)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71262))) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43107 (isStrictlySorted!310 (toList!845 lt!71262))))

(assert (=> d!43107 (= (insertStrictlySorted!92 (toList!845 lt!71262) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71928)))

(declare-fun e!89485 () List!1699)

(declare-fun b!137478 () Bool)

(assert (=> b!137478 (= e!89485 (ite c!25799 (t!6179 (toList!845 lt!71262)) (ite c!25801 (Cons!1695 (h!2301 (toList!845 lt!71262)) (t!6179 (toList!845 lt!71262))) Nil!1696)))))

(declare-fun b!137479 () Bool)

(assert (=> b!137479 (= e!89487 call!15137)))

(declare-fun bm!15133 () Bool)

(declare-fun call!15136 () List!1699)

(assert (=> bm!15133 (= call!15135 call!15136)))

(declare-fun b!137480 () Bool)

(declare-fun res!65902 () Bool)

(assert (=> b!137480 (=> (not res!65902) (not e!89488))))

(assert (=> b!137480 (= res!65902 (containsKey!177 lt!71928 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137481 () Bool)

(assert (=> b!137481 (= e!89487 call!15137)))

(declare-fun bm!15134 () Bool)

(assert (=> bm!15134 (= call!15136 ($colon$colon!92 e!89485 (ite c!25802 (h!2301 (toList!845 lt!71262)) (tuple2!2575 (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun c!25800 () Bool)

(assert (=> bm!15134 (= c!25800 c!25802)))

(declare-fun b!137482 () Bool)

(assert (=> b!137482 (= e!89489 call!15136)))

(declare-fun b!137483 () Bool)

(assert (=> b!137483 (= e!89485 (insertStrictlySorted!92 (t!6179 (toList!845 lt!71262)) (_1!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137484 () Bool)

(assert (=> b!137484 (= e!89486 call!15135)))

(assert (= (and d!43107 c!25802) b!137482))

(assert (= (and d!43107 (not c!25802)) b!137477))

(assert (= (and b!137477 c!25799) b!137484))

(assert (= (and b!137477 (not c!25799)) b!137475))

(assert (= (and b!137475 c!25801) b!137481))

(assert (= (and b!137475 (not c!25801)) b!137479))

(assert (= (or b!137481 b!137479) bm!15132))

(assert (= (or b!137484 bm!15132) bm!15133))

(assert (= (or b!137482 bm!15133) bm!15134))

(assert (= (and bm!15134 c!25800) b!137483))

(assert (= (and bm!15134 (not c!25800)) b!137478))

(assert (= (and d!43107 res!65901) b!137480))

(assert (= (and b!137480 res!65902) b!137476))

(declare-fun m!164395 () Bool)

(assert (=> d!43107 m!164395))

(declare-fun m!164397 () Bool)

(assert (=> d!43107 m!164397))

(declare-fun m!164399 () Bool)

(assert (=> b!137483 m!164399))

(declare-fun m!164401 () Bool)

(assert (=> bm!15134 m!164401))

(declare-fun m!164403 () Bool)

(assert (=> b!137476 m!164403))

(declare-fun m!164405 () Bool)

(assert (=> b!137480 m!164405))

(assert (=> d!42789 d!43107))

(assert (=> b!136626 d!42981))

(declare-fun d!43109 () Bool)

(assert (=> d!43109 (isDefined!126 (getValueByKey!174 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun lt!71929 () Unit!4281)

(assert (=> d!43109 (= lt!71929 (choose!843 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun e!89490 () Bool)

(assert (=> d!43109 e!89490))

(declare-fun res!65903 () Bool)

(assert (=> d!43109 (=> (not res!65903) (not e!89490))))

(assert (=> d!43109 (= res!65903 (isStrictlySorted!310 (toList!845 call!14971)))))

(assert (=> d!43109 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!71929)))

(declare-fun b!137485 () Bool)

(assert (=> b!137485 (= e!89490 (containsKey!177 (toList!845 call!14971) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (= (and d!43109 res!65903) b!137485))

(assert (=> d!43109 m!162605))

(assert (=> d!43109 m!163093))

(assert (=> d!43109 m!163093))

(assert (=> d!43109 m!163095))

(assert (=> d!43109 m!162605))

(declare-fun m!164407 () Bool)

(assert (=> d!43109 m!164407))

(declare-fun m!164409 () Bool)

(assert (=> d!43109 m!164409))

(assert (=> b!137485 m!162605))

(assert (=> b!137485 m!163089))

(assert (=> b!136705 d!43109))

(assert (=> b!136705 d!42851))

(assert (=> b!136705 d!42853))

(declare-fun d!43111 () Bool)

(assert (=> d!43111 (= (apply!117 (+!170 lt!71579 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) lt!71565) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71579 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))) lt!71565)))))

(declare-fun bs!5774 () Bool)

(assert (= bs!5774 d!43111))

(declare-fun m!164411 () Bool)

(assert (=> bs!5774 m!164411))

(assert (=> bs!5774 m!164411))

(declare-fun m!164413 () Bool)

(assert (=> bs!5774 m!164413))

(assert (=> b!136886 d!43111))

(declare-fun d!43113 () Bool)

(assert (=> d!43113 (contains!888 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) lt!71574)))

(declare-fun lt!71930 () Unit!4281)

(assert (=> d!43113 (= lt!71930 (choose!845 lt!71573 lt!71567 (zeroValue!2741 newMap!16) lt!71574))))

(assert (=> d!43113 (contains!888 lt!71573 lt!71574)))

(assert (=> d!43113 (= (addStillContains!93 lt!71573 lt!71567 (zeroValue!2741 newMap!16) lt!71574) lt!71930)))

(declare-fun bs!5775 () Bool)

(assert (= bs!5775 d!43113))

(assert (=> bs!5775 m!163363))

(assert (=> bs!5775 m!163363))

(assert (=> bs!5775 m!163365))

(declare-fun m!164415 () Bool)

(assert (=> bs!5775 m!164415))

(declare-fun m!164417 () Bool)

(assert (=> bs!5775 m!164417))

(assert (=> b!136886 d!43113))

(declare-fun d!43115 () Bool)

(assert (=> d!43115 (= (apply!117 (+!170 lt!71563 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) lt!71575) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71563 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))) lt!71575)))))

(declare-fun bs!5776 () Bool)

(assert (= bs!5776 d!43115))

(declare-fun m!164419 () Bool)

(assert (=> bs!5776 m!164419))

(assert (=> bs!5776 m!164419))

(declare-fun m!164421 () Bool)

(assert (=> bs!5776 m!164421))

(assert (=> b!136886 d!43115))

(declare-fun d!43117 () Bool)

(assert (=> d!43117 (= (apply!117 lt!71563 lt!71575) (get!1502 (getValueByKey!174 (toList!845 lt!71563) lt!71575)))))

(declare-fun bs!5777 () Bool)

(assert (= bs!5777 d!43117))

(declare-fun m!164423 () Bool)

(assert (=> bs!5777 m!164423))

(assert (=> bs!5777 m!164423))

(declare-fun m!164425 () Bool)

(assert (=> bs!5777 m!164425))

(assert (=> b!136886 d!43117))

(declare-fun d!43119 () Bool)

(assert (=> d!43119 (= (apply!117 (+!170 lt!71558 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) lt!71559) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71558 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))) lt!71559)))))

(declare-fun bs!5778 () Bool)

(assert (= bs!5778 d!43119))

(declare-fun m!164427 () Bool)

(assert (=> bs!5778 m!164427))

(assert (=> bs!5778 m!164427))

(declare-fun m!164429 () Bool)

(assert (=> bs!5778 m!164429))

(assert (=> b!136886 d!43119))

(declare-fun d!43121 () Bool)

(assert (=> d!43121 (= (apply!117 (+!170 lt!71558 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) lt!71559) (apply!117 lt!71558 lt!71559))))

(declare-fun lt!71931 () Unit!4281)

(assert (=> d!43121 (= lt!71931 (choose!844 lt!71558 lt!71561 (zeroValue!2741 newMap!16) lt!71559))))

(declare-fun e!89491 () Bool)

(assert (=> d!43121 e!89491))

(declare-fun res!65904 () Bool)

(assert (=> d!43121 (=> (not res!65904) (not e!89491))))

(assert (=> d!43121 (= res!65904 (contains!888 lt!71558 lt!71559))))

(assert (=> d!43121 (= (addApplyDifferent!93 lt!71558 lt!71561 (zeroValue!2741 newMap!16) lt!71559) lt!71931)))

(declare-fun b!137486 () Bool)

(assert (=> b!137486 (= e!89491 (not (= lt!71559 lt!71561)))))

(assert (= (and d!43121 res!65904) b!137486))

(assert (=> d!43121 m!163367))

(assert (=> d!43121 m!163347))

(assert (=> d!43121 m!163347))

(assert (=> d!43121 m!163349))

(declare-fun m!164431 () Bool)

(assert (=> d!43121 m!164431))

(declare-fun m!164433 () Bool)

(assert (=> d!43121 m!164433))

(assert (=> b!136886 d!43121))

(declare-fun call!15138 () ListLongMap!1659)

(declare-fun bm!15135 () Bool)

(assert (=> bm!15135 (= call!15138 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16)))))

(declare-fun b!137488 () Bool)

(declare-fun lt!71938 () ListLongMap!1659)

(declare-fun e!89493 () Bool)

(assert (=> b!137488 (= e!89493 (= lt!71938 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2888 newMap!16))))))

(declare-fun b!137489 () Bool)

(declare-fun res!65906 () Bool)

(declare-fun e!89496 () Bool)

(assert (=> b!137489 (=> (not res!65906) (not e!89496))))

(assert (=> b!137489 (= res!65906 (not (contains!888 lt!71938 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137490 () Bool)

(declare-fun e!89498 () Bool)

(assert (=> b!137490 (= e!89498 e!89493)))

(declare-fun c!25806 () Bool)

(assert (=> b!137490 (= c!25806 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137491 () Bool)

(declare-fun e!89492 () ListLongMap!1659)

(assert (=> b!137491 (= e!89492 call!15138)))

(declare-fun b!137492 () Bool)

(declare-fun e!89497 () Bool)

(assert (=> b!137492 (= e!89497 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137492 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!137493 () Bool)

(declare-fun e!89495 () ListLongMap!1659)

(assert (=> b!137493 (= e!89495 (ListLongMap!1660 Nil!1696))))

(declare-fun b!137494 () Bool)

(assert (=> b!137494 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> b!137494 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))))))))

(declare-fun e!89494 () Bool)

(assert (=> b!137494 (= e!89494 (= (apply!117 lt!71938 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137495 () Bool)

(declare-fun lt!71936 () Unit!4281)

(declare-fun lt!71933 () Unit!4281)

(assert (=> b!137495 (= lt!71936 lt!71933)))

(declare-fun lt!71932 () ListLongMap!1659)

(declare-fun lt!71935 () (_ BitVec 64))

(declare-fun lt!71937 () (_ BitVec 64))

(declare-fun lt!71934 () V!3497)

(assert (=> b!137495 (not (contains!888 (+!170 lt!71932 (tuple2!2575 lt!71935 lt!71934)) lt!71937))))

(assert (=> b!137495 (= lt!71933 (addStillNotContains!64 lt!71932 lt!71935 lt!71934 lt!71937))))

(assert (=> b!137495 (= lt!71937 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137495 (= lt!71934 (get!1498 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137495 (= lt!71935 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137495 (= lt!71932 call!15138)))

(assert (=> b!137495 (= e!89492 (+!170 call!15138 (tuple2!2575 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137496 () Bool)

(assert (=> b!137496 (= e!89493 (isEmpty!418 lt!71938))))

(declare-fun d!43123 () Bool)

(assert (=> d!43123 e!89496))

(declare-fun res!65908 () Bool)

(assert (=> d!43123 (=> (not res!65908) (not e!89496))))

(assert (=> d!43123 (= res!65908 (not (contains!888 lt!71938 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!43123 (= lt!71938 e!89495)))

(declare-fun c!25805 () Bool)

(assert (=> d!43123 (= c!25805 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!43123 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43123 (= (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16)))) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71938)))

(declare-fun b!137487 () Bool)

(assert (=> b!137487 (= e!89495 e!89492)))

(declare-fun c!25803 () Bool)

(assert (=> b!137487 (= c!25803 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137497 () Bool)

(assert (=> b!137497 (= e!89496 e!89498)))

(declare-fun c!25804 () Bool)

(assert (=> b!137497 (= c!25804 e!89497)))

(declare-fun res!65907 () Bool)

(assert (=> b!137497 (=> (not res!65907) (not e!89497))))

(assert (=> b!137497 (= res!65907 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137498 () Bool)

(assert (=> b!137498 (= e!89498 e!89494)))

(assert (=> b!137498 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun res!65905 () Bool)

(assert (=> b!137498 (= res!65905 (contains!888 lt!71938 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137498 (=> (not res!65905) (not e!89494))))

(assert (= (and d!43123 c!25805) b!137493))

(assert (= (and d!43123 (not c!25805)) b!137487))

(assert (= (and b!137487 c!25803) b!137495))

(assert (= (and b!137487 (not c!25803)) b!137491))

(assert (= (or b!137495 b!137491) bm!15135))

(assert (= (and d!43123 res!65908) b!137489))

(assert (= (and b!137489 res!65906) b!137497))

(assert (= (and b!137497 res!65907) b!137492))

(assert (= (and b!137497 c!25804) b!137498))

(assert (= (and b!137497 (not c!25804)) b!137490))

(assert (= (and b!137498 res!65905) b!137494))

(assert (= (and b!137490 c!25806) b!137488))

(assert (= (and b!137490 (not c!25806)) b!137496))

(declare-fun b_lambda!6153 () Bool)

(assert (=> (not b_lambda!6153) (not b!137494)))

(assert (=> b!137494 t!6191))

(declare-fun b_and!8529 () Bool)

(assert (= b_and!8525 (and (=> t!6191 result!4043) b_and!8529)))

(assert (=> b!137494 t!6193))

(declare-fun b_and!8531 () Bool)

(assert (= b_and!8527 (and (=> t!6193 result!4045) b_and!8531)))

(declare-fun b_lambda!6155 () Bool)

(assert (=> (not b_lambda!6155) (not b!137495)))

(assert (=> b!137495 t!6191))

(declare-fun b_and!8533 () Bool)

(assert (= b_and!8529 (and (=> t!6191 result!4043) b_and!8533)))

(assert (=> b!137495 t!6193))

(declare-fun b_and!8535 () Bool)

(assert (= b_and!8531 (and (=> t!6193 result!4045) b_and!8535)))

(declare-fun m!164435 () Bool)

(assert (=> d!43123 m!164435))

(assert (=> d!43123 m!162853))

(assert (=> b!137494 m!163379))

(assert (=> b!137494 m!162959))

(assert (=> b!137494 m!163381))

(assert (=> b!137494 m!162887))

(declare-fun m!164437 () Bool)

(assert (=> b!137494 m!164437))

(assert (=> b!137494 m!162959))

(assert (=> b!137494 m!163379))

(assert (=> b!137494 m!162887))

(assert (=> b!137492 m!162887))

(assert (=> b!137492 m!162887))

(assert (=> b!137492 m!162891))

(declare-fun m!164439 () Bool)

(assert (=> b!137489 m!164439))

(declare-fun m!164441 () Bool)

(assert (=> bm!15135 m!164441))

(assert (=> b!137488 m!164441))

(declare-fun m!164443 () Bool)

(assert (=> b!137496 m!164443))

(declare-fun m!164445 () Bool)

(assert (=> b!137495 m!164445))

(declare-fun m!164447 () Bool)

(assert (=> b!137495 m!164447))

(assert (=> b!137495 m!163379))

(assert (=> b!137495 m!162959))

(assert (=> b!137495 m!163381))

(assert (=> b!137495 m!162959))

(assert (=> b!137495 m!163379))

(assert (=> b!137495 m!162887))

(declare-fun m!164449 () Bool)

(assert (=> b!137495 m!164449))

(assert (=> b!137495 m!164449))

(declare-fun m!164451 () Bool)

(assert (=> b!137495 m!164451))

(assert (=> b!137487 m!162887))

(assert (=> b!137487 m!162887))

(assert (=> b!137487 m!162891))

(assert (=> b!137498 m!162887))

(assert (=> b!137498 m!162887))

(declare-fun m!164453 () Bool)

(assert (=> b!137498 m!164453))

(assert (=> b!136886 d!43123))

(declare-fun d!43125 () Bool)

(assert (=> d!43125 (= (apply!117 (+!170 lt!71579 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) lt!71565) (apply!117 lt!71579 lt!71565))))

(declare-fun lt!71939 () Unit!4281)

(assert (=> d!43125 (= lt!71939 (choose!844 lt!71579 lt!71566 (minValue!2741 newMap!16) lt!71565))))

(declare-fun e!89499 () Bool)

(assert (=> d!43125 e!89499))

(declare-fun res!65909 () Bool)

(assert (=> d!43125 (=> (not res!65909) (not e!89499))))

(assert (=> d!43125 (= res!65909 (contains!888 lt!71579 lt!71565))))

(assert (=> d!43125 (= (addApplyDifferent!93 lt!71579 lt!71566 (minValue!2741 newMap!16) lt!71565) lt!71939)))

(declare-fun b!137499 () Bool)

(assert (=> b!137499 (= e!89499 (not (= lt!71565 lt!71566)))))

(assert (= (and d!43125 res!65909) b!137499))

(assert (=> d!43125 m!163353))

(assert (=> d!43125 m!163357))

(assert (=> d!43125 m!163357))

(assert (=> d!43125 m!163359))

(declare-fun m!164455 () Bool)

(assert (=> d!43125 m!164455))

(declare-fun m!164457 () Bool)

(assert (=> d!43125 m!164457))

(assert (=> b!136886 d!43125))

(declare-fun d!43127 () Bool)

(declare-fun e!89500 () Bool)

(assert (=> d!43127 e!89500))

(declare-fun res!65910 () Bool)

(assert (=> d!43127 (=> res!65910 e!89500)))

(declare-fun lt!71941 () Bool)

(assert (=> d!43127 (= res!65910 (not lt!71941))))

(declare-fun lt!71942 () Bool)

(assert (=> d!43127 (= lt!71941 lt!71942)))

(declare-fun lt!71943 () Unit!4281)

(declare-fun e!89501 () Unit!4281)

(assert (=> d!43127 (= lt!71943 e!89501)))

(declare-fun c!25807 () Bool)

(assert (=> d!43127 (= c!25807 lt!71942)))

(assert (=> d!43127 (= lt!71942 (containsKey!177 (toList!845 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) lt!71574))))

(assert (=> d!43127 (= (contains!888 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) lt!71574) lt!71941)))

(declare-fun b!137500 () Bool)

(declare-fun lt!71940 () Unit!4281)

(assert (=> b!137500 (= e!89501 lt!71940)))

(assert (=> b!137500 (= lt!71940 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) lt!71574))))

(assert (=> b!137500 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) lt!71574))))

(declare-fun b!137501 () Bool)

(declare-fun Unit!4323 () Unit!4281)

(assert (=> b!137501 (= e!89501 Unit!4323)))

(declare-fun b!137502 () Bool)

(assert (=> b!137502 (= e!89500 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) lt!71574)))))

(assert (= (and d!43127 c!25807) b!137500))

(assert (= (and d!43127 (not c!25807)) b!137501))

(assert (= (and d!43127 (not res!65910)) b!137502))

(declare-fun m!164459 () Bool)

(assert (=> d!43127 m!164459))

(declare-fun m!164461 () Bool)

(assert (=> b!137500 m!164461))

(declare-fun m!164463 () Bool)

(assert (=> b!137500 m!164463))

(assert (=> b!137500 m!164463))

(declare-fun m!164465 () Bool)

(assert (=> b!137500 m!164465))

(assert (=> b!137502 m!164463))

(assert (=> b!137502 m!164463))

(assert (=> b!137502 m!164465))

(assert (=> b!136886 d!43127))

(declare-fun d!43129 () Bool)

(assert (=> d!43129 (= (apply!117 (+!170 lt!71563 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) lt!71575) (apply!117 lt!71563 lt!71575))))

(declare-fun lt!71944 () Unit!4281)

(assert (=> d!43129 (= lt!71944 (choose!844 lt!71563 lt!71569 (minValue!2741 newMap!16) lt!71575))))

(declare-fun e!89502 () Bool)

(assert (=> d!43129 e!89502))

(declare-fun res!65911 () Bool)

(assert (=> d!43129 (=> (not res!65911) (not e!89502))))

(assert (=> d!43129 (= res!65911 (contains!888 lt!71563 lt!71575))))

(assert (=> d!43129 (= (addApplyDifferent!93 lt!71563 lt!71569 (minValue!2741 newMap!16) lt!71575) lt!71944)))

(declare-fun b!137503 () Bool)

(assert (=> b!137503 (= e!89502 (not (= lt!71575 lt!71569)))))

(assert (= (and d!43129 res!65911) b!137503))

(assert (=> d!43129 m!163355))

(assert (=> d!43129 m!163361))

(assert (=> d!43129 m!163361))

(assert (=> d!43129 m!163371))

(declare-fun m!164467 () Bool)

(assert (=> d!43129 m!164467))

(declare-fun m!164469 () Bool)

(assert (=> d!43129 m!164469))

(assert (=> b!136886 d!43129))

(declare-fun d!43131 () Bool)

(assert (=> d!43131 (= (apply!117 lt!71558 lt!71559) (get!1502 (getValueByKey!174 (toList!845 lt!71558) lt!71559)))))

(declare-fun bs!5779 () Bool)

(assert (= bs!5779 d!43131))

(declare-fun m!164471 () Bool)

(assert (=> bs!5779 m!164471))

(assert (=> bs!5779 m!164471))

(declare-fun m!164473 () Bool)

(assert (=> bs!5779 m!164473))

(assert (=> b!136886 d!43131))

(declare-fun d!43133 () Bool)

(declare-fun e!89503 () Bool)

(assert (=> d!43133 e!89503))

(declare-fun res!65913 () Bool)

(assert (=> d!43133 (=> (not res!65913) (not e!89503))))

(declare-fun lt!71948 () ListLongMap!1659)

(assert (=> d!43133 (= res!65913 (contains!888 lt!71948 (_1!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))))))

(declare-fun lt!71945 () List!1699)

(assert (=> d!43133 (= lt!71948 (ListLongMap!1660 lt!71945))))

(declare-fun lt!71946 () Unit!4281)

(declare-fun lt!71947 () Unit!4281)

(assert (=> d!43133 (= lt!71946 lt!71947)))

(assert (=> d!43133 (= (getValueByKey!174 lt!71945 (_1!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43133 (= lt!71947 (lemmaContainsTupThenGetReturnValue!89 lt!71945 (_1!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43133 (= lt!71945 (insertStrictlySorted!92 (toList!845 lt!71558) (_1!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43133 (= (+!170 lt!71558 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))) lt!71948)))

(declare-fun b!137504 () Bool)

(declare-fun res!65912 () Bool)

(assert (=> b!137504 (=> (not res!65912) (not e!89503))))

(assert (=> b!137504 (= res!65912 (= (getValueByKey!174 (toList!845 lt!71948) (_1!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))))))))

(declare-fun b!137505 () Bool)

(assert (=> b!137505 (= e!89503 (contains!891 (toList!845 lt!71948) (tuple2!2575 lt!71561 (zeroValue!2741 newMap!16))))))

(assert (= (and d!43133 res!65913) b!137504))

(assert (= (and b!137504 res!65912) b!137505))

(declare-fun m!164475 () Bool)

(assert (=> d!43133 m!164475))

(declare-fun m!164477 () Bool)

(assert (=> d!43133 m!164477))

(declare-fun m!164479 () Bool)

(assert (=> d!43133 m!164479))

(declare-fun m!164481 () Bool)

(assert (=> d!43133 m!164481))

(declare-fun m!164483 () Bool)

(assert (=> b!137504 m!164483))

(declare-fun m!164485 () Bool)

(assert (=> b!137505 m!164485))

(assert (=> b!136886 d!43133))

(declare-fun d!43135 () Bool)

(declare-fun e!89504 () Bool)

(assert (=> d!43135 e!89504))

(declare-fun res!65915 () Bool)

(assert (=> d!43135 (=> (not res!65915) (not e!89504))))

(declare-fun lt!71952 () ListLongMap!1659)

(assert (=> d!43135 (= res!65915 (contains!888 lt!71952 (_1!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))))))

(declare-fun lt!71949 () List!1699)

(assert (=> d!43135 (= lt!71952 (ListLongMap!1660 lt!71949))))

(declare-fun lt!71950 () Unit!4281)

(declare-fun lt!71951 () Unit!4281)

(assert (=> d!43135 (= lt!71950 lt!71951)))

(assert (=> d!43135 (= (getValueByKey!174 lt!71949 (_1!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43135 (= lt!71951 (lemmaContainsTupThenGetReturnValue!89 lt!71949 (_1!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43135 (= lt!71949 (insertStrictlySorted!92 (toList!845 lt!71573) (_1!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43135 (= (+!170 lt!71573 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))) lt!71952)))

(declare-fun b!137506 () Bool)

(declare-fun res!65914 () Bool)

(assert (=> b!137506 (=> (not res!65914) (not e!89504))))

(assert (=> b!137506 (= res!65914 (= (getValueByKey!174 (toList!845 lt!71952) (_1!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))))))))

(declare-fun b!137507 () Bool)

(assert (=> b!137507 (= e!89504 (contains!891 (toList!845 lt!71952) (tuple2!2575 lt!71567 (zeroValue!2741 newMap!16))))))

(assert (= (and d!43135 res!65915) b!137506))

(assert (= (and b!137506 res!65914) b!137507))

(declare-fun m!164487 () Bool)

(assert (=> d!43135 m!164487))

(declare-fun m!164489 () Bool)

(assert (=> d!43135 m!164489))

(declare-fun m!164491 () Bool)

(assert (=> d!43135 m!164491))

(declare-fun m!164493 () Bool)

(assert (=> d!43135 m!164493))

(declare-fun m!164495 () Bool)

(assert (=> b!137506 m!164495))

(declare-fun m!164497 () Bool)

(assert (=> b!137507 m!164497))

(assert (=> b!136886 d!43135))

(declare-fun d!43137 () Bool)

(declare-fun e!89505 () Bool)

(assert (=> d!43137 e!89505))

(declare-fun res!65917 () Bool)

(assert (=> d!43137 (=> (not res!65917) (not e!89505))))

(declare-fun lt!71956 () ListLongMap!1659)

(assert (=> d!43137 (= res!65917 (contains!888 lt!71956 (_1!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))))))

(declare-fun lt!71953 () List!1699)

(assert (=> d!43137 (= lt!71956 (ListLongMap!1660 lt!71953))))

(declare-fun lt!71954 () Unit!4281)

(declare-fun lt!71955 () Unit!4281)

(assert (=> d!43137 (= lt!71954 lt!71955)))

(assert (=> d!43137 (= (getValueByKey!174 lt!71953 (_1!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))))))

(assert (=> d!43137 (= lt!71955 (lemmaContainsTupThenGetReturnValue!89 lt!71953 (_1!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))))))

(assert (=> d!43137 (= lt!71953 (insertStrictlySorted!92 (toList!845 lt!71563) (_1!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))))))

(assert (=> d!43137 (= (+!170 lt!71563 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))) lt!71956)))

(declare-fun b!137508 () Bool)

(declare-fun res!65916 () Bool)

(assert (=> b!137508 (=> (not res!65916) (not e!89505))))

(assert (=> b!137508 (= res!65916 (= (getValueByKey!174 (toList!845 lt!71956) (_1!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71569 (minValue!2741 newMap!16))))))))

(declare-fun b!137509 () Bool)

(assert (=> b!137509 (= e!89505 (contains!891 (toList!845 lt!71956) (tuple2!2575 lt!71569 (minValue!2741 newMap!16))))))

(assert (= (and d!43137 res!65917) b!137508))

(assert (= (and b!137508 res!65916) b!137509))

(declare-fun m!164499 () Bool)

(assert (=> d!43137 m!164499))

(declare-fun m!164501 () Bool)

(assert (=> d!43137 m!164501))

(declare-fun m!164503 () Bool)

(assert (=> d!43137 m!164503))

(declare-fun m!164505 () Bool)

(assert (=> d!43137 m!164505))

(declare-fun m!164507 () Bool)

(assert (=> b!137508 m!164507))

(declare-fun m!164509 () Bool)

(assert (=> b!137509 m!164509))

(assert (=> b!136886 d!43137))

(declare-fun d!43139 () Bool)

(assert (=> d!43139 (= (apply!117 lt!71579 lt!71565) (get!1502 (getValueByKey!174 (toList!845 lt!71579) lt!71565)))))

(declare-fun bs!5780 () Bool)

(assert (= bs!5780 d!43139))

(declare-fun m!164511 () Bool)

(assert (=> bs!5780 m!164511))

(assert (=> bs!5780 m!164511))

(declare-fun m!164513 () Bool)

(assert (=> bs!5780 m!164513))

(assert (=> b!136886 d!43139))

(declare-fun d!43141 () Bool)

(declare-fun e!89506 () Bool)

(assert (=> d!43141 e!89506))

(declare-fun res!65919 () Bool)

(assert (=> d!43141 (=> (not res!65919) (not e!89506))))

(declare-fun lt!71960 () ListLongMap!1659)

(assert (=> d!43141 (= res!65919 (contains!888 lt!71960 (_1!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))))))

(declare-fun lt!71957 () List!1699)

(assert (=> d!43141 (= lt!71960 (ListLongMap!1660 lt!71957))))

(declare-fun lt!71958 () Unit!4281)

(declare-fun lt!71959 () Unit!4281)

(assert (=> d!43141 (= lt!71958 lt!71959)))

(assert (=> d!43141 (= (getValueByKey!174 lt!71957 (_1!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))))))

(assert (=> d!43141 (= lt!71959 (lemmaContainsTupThenGetReturnValue!89 lt!71957 (_1!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))))))

(assert (=> d!43141 (= lt!71957 (insertStrictlySorted!92 (toList!845 lt!71579) (_1!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))))))

(assert (=> d!43141 (= (+!170 lt!71579 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))) lt!71960)))

(declare-fun b!137510 () Bool)

(declare-fun res!65918 () Bool)

(assert (=> b!137510 (=> (not res!65918) (not e!89506))))

(assert (=> b!137510 (= res!65918 (= (getValueByKey!174 (toList!845 lt!71960) (_1!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71566 (minValue!2741 newMap!16))))))))

(declare-fun b!137511 () Bool)

(assert (=> b!137511 (= e!89506 (contains!891 (toList!845 lt!71960) (tuple2!2575 lt!71566 (minValue!2741 newMap!16))))))

(assert (= (and d!43141 res!65919) b!137510))

(assert (= (and b!137510 res!65918) b!137511))

(declare-fun m!164515 () Bool)

(assert (=> d!43141 m!164515))

(declare-fun m!164517 () Bool)

(assert (=> d!43141 m!164517))

(declare-fun m!164519 () Bool)

(assert (=> d!43141 m!164519))

(declare-fun m!164521 () Bool)

(assert (=> d!43141 m!164521))

(declare-fun m!164523 () Bool)

(assert (=> b!137510 m!164523))

(declare-fun m!164525 () Bool)

(assert (=> b!137511 m!164525))

(assert (=> b!136886 d!43141))

(declare-fun d!43143 () Bool)

(assert (=> d!43143 (= (apply!117 lt!71354 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71354) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5781 () Bool)

(assert (= bs!5781 d!43143))

(declare-fun m!164527 () Bool)

(assert (=> bs!5781 m!164527))

(assert (=> bs!5781 m!164527))

(declare-fun m!164529 () Bool)

(assert (=> bs!5781 m!164529))

(assert (=> b!136679 d!43143))

(declare-fun d!43145 () Bool)

(declare-fun e!89507 () Bool)

(assert (=> d!43145 e!89507))

(declare-fun res!65920 () Bool)

(assert (=> d!43145 (=> res!65920 e!89507)))

(declare-fun lt!71962 () Bool)

(assert (=> d!43145 (= res!65920 (not lt!71962))))

(declare-fun lt!71963 () Bool)

(assert (=> d!43145 (= lt!71962 lt!71963)))

(declare-fun lt!71964 () Unit!4281)

(declare-fun e!89508 () Unit!4281)

(assert (=> d!43145 (= lt!71964 e!89508)))

(declare-fun c!25808 () Bool)

(assert (=> d!43145 (= c!25808 lt!71963)))

(assert (=> d!43145 (= lt!71963 (containsKey!177 (toList!845 lt!71311) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43145 (= (contains!888 lt!71311 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71962)))

(declare-fun b!137512 () Bool)

(declare-fun lt!71961 () Unit!4281)

(assert (=> b!137512 (= e!89508 lt!71961)))

(assert (=> b!137512 (= lt!71961 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71311) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137512 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137513 () Bool)

(declare-fun Unit!4324 () Unit!4281)

(assert (=> b!137513 (= e!89508 Unit!4324)))

(declare-fun b!137514 () Bool)

(assert (=> b!137514 (= e!89507 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43145 c!25808) b!137512))

(assert (= (and d!43145 (not c!25808)) b!137513))

(assert (= (and d!43145 (not res!65920)) b!137514))

(declare-fun m!164531 () Bool)

(assert (=> d!43145 m!164531))

(declare-fun m!164533 () Bool)

(assert (=> b!137512 m!164533))

(declare-fun m!164535 () Bool)

(assert (=> b!137512 m!164535))

(assert (=> b!137512 m!164535))

(declare-fun m!164537 () Bool)

(assert (=> b!137512 m!164537))

(assert (=> b!137514 m!164535))

(assert (=> b!137514 m!164535))

(assert (=> b!137514 m!164537))

(assert (=> d!42731 d!43145))

(assert (=> d!42731 d!42713))

(assert (=> b!136702 d!42905))

(assert (=> b!136702 d!42907))

(declare-fun d!43147 () Bool)

(declare-fun e!89509 () Bool)

(assert (=> d!43147 e!89509))

(declare-fun res!65921 () Bool)

(assert (=> d!43147 (=> res!65921 e!89509)))

(declare-fun lt!71966 () Bool)

(assert (=> d!43147 (= res!65921 (not lt!71966))))

(declare-fun lt!71967 () Bool)

(assert (=> d!43147 (= lt!71966 lt!71967)))

(declare-fun lt!71968 () Unit!4281)

(declare-fun e!89510 () Unit!4281)

(assert (=> d!43147 (= lt!71968 e!89510)))

(declare-fun c!25809 () Bool)

(assert (=> d!43147 (= c!25809 lt!71967)))

(assert (=> d!43147 (= lt!71967 (containsKey!177 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43147 (= (contains!888 lt!71553 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71966)))

(declare-fun b!137515 () Bool)

(declare-fun lt!71965 () Unit!4281)

(assert (=> b!137515 (= e!89510 lt!71965)))

(assert (=> b!137515 (= lt!71965 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!137515 (isDefined!126 (getValueByKey!174 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137516 () Bool)

(declare-fun Unit!4325 () Unit!4281)

(assert (=> b!137516 (= e!89510 Unit!4325)))

(declare-fun b!137517 () Bool)

(assert (=> b!137517 (= e!89509 (isDefined!126 (getValueByKey!174 (toList!845 lt!71553) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!43147 c!25809) b!137515))

(assert (= (and d!43147 (not c!25809)) b!137516))

(assert (= (and d!43147 (not res!65921)) b!137517))

(declare-fun m!164539 () Bool)

(assert (=> d!43147 m!164539))

(declare-fun m!164541 () Bool)

(assert (=> b!137515 m!164541))

(assert (=> b!137515 m!163325))

(assert (=> b!137515 m!163325))

(declare-fun m!164543 () Bool)

(assert (=> b!137515 m!164543))

(assert (=> b!137517 m!163325))

(assert (=> b!137517 m!163325))

(assert (=> b!137517 m!164543))

(assert (=> d!42817 d!43147))

(declare-fun b!137521 () Bool)

(declare-fun e!89512 () Option!180)

(assert (=> b!137521 (= e!89512 None!178)))

(declare-fun b!137518 () Bool)

(declare-fun e!89511 () Option!180)

(assert (=> b!137518 (= e!89511 (Some!179 (_2!1298 (h!2301 lt!71550))))))

(declare-fun b!137520 () Bool)

(assert (=> b!137520 (= e!89512 (getValueByKey!174 (t!6179 lt!71550) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!25810 () Bool)

(declare-fun d!43149 () Bool)

(assert (=> d!43149 (= c!25810 (and ((_ is Cons!1695) lt!71550) (= (_1!1298 (h!2301 lt!71550)) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!43149 (= (getValueByKey!174 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!89511)))

(declare-fun b!137519 () Bool)

(assert (=> b!137519 (= e!89511 e!89512)))

(declare-fun c!25811 () Bool)

(assert (=> b!137519 (= c!25811 (and ((_ is Cons!1695) lt!71550) (not (= (_1!1298 (h!2301 lt!71550)) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43149 c!25810) b!137518))

(assert (= (and d!43149 (not c!25810)) b!137519))

(assert (= (and b!137519 c!25811) b!137520))

(assert (= (and b!137519 (not c!25811)) b!137521))

(declare-fun m!164545 () Bool)

(assert (=> b!137520 m!164545))

(assert (=> d!42817 d!43149))

(declare-fun d!43151 () Bool)

(assert (=> d!43151 (= (getValueByKey!174 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71969 () Unit!4281)

(assert (=> d!43151 (= lt!71969 (choose!847 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89513 () Bool)

(assert (=> d!43151 e!89513))

(declare-fun res!65922 () Bool)

(assert (=> d!43151 (=> (not res!65922) (not e!89513))))

(assert (=> d!43151 (= res!65922 (isStrictlySorted!310 lt!71550))))

(assert (=> d!43151 (= (lemmaContainsTupThenGetReturnValue!89 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71969)))

(declare-fun b!137522 () Bool)

(declare-fun res!65923 () Bool)

(assert (=> b!137522 (=> (not res!65923) (not e!89513))))

(assert (=> b!137522 (= res!65923 (containsKey!177 lt!71550 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137523 () Bool)

(assert (=> b!137523 (= e!89513 (contains!891 lt!71550 (tuple2!2575 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!43151 res!65922) b!137522))

(assert (= (and b!137522 res!65923) b!137523))

(assert (=> d!43151 m!163319))

(declare-fun m!164547 () Bool)

(assert (=> d!43151 m!164547))

(declare-fun m!164549 () Bool)

(assert (=> d!43151 m!164549))

(declare-fun m!164551 () Bool)

(assert (=> b!137522 m!164551))

(declare-fun m!164553 () Bool)

(assert (=> b!137523 m!164553))

(assert (=> d!42817 d!43151))

(declare-fun c!25814 () Bool)

(declare-fun b!137524 () Bool)

(assert (=> b!137524 (= c!25814 (and ((_ is Cons!1695) (toList!845 call!14974)) (bvsgt (_1!1298 (h!2301 (toList!845 call!14974))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!89515 () List!1699)

(declare-fun e!89516 () List!1699)

(assert (=> b!137524 (= e!89515 e!89516)))

(declare-fun e!89517 () Bool)

(declare-fun lt!71970 () List!1699)

(declare-fun b!137525 () Bool)

(assert (=> b!137525 (= e!89517 (contains!891 lt!71970 (tuple2!2575 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!15136 () Bool)

(declare-fun call!15141 () List!1699)

(declare-fun call!15139 () List!1699)

(assert (=> bm!15136 (= call!15141 call!15139)))

(declare-fun b!137526 () Bool)

(declare-fun e!89518 () List!1699)

(assert (=> b!137526 (= e!89518 e!89515)))

(declare-fun c!25812 () Bool)

(assert (=> b!137526 (= c!25812 (and ((_ is Cons!1695) (toList!845 call!14974)) (= (_1!1298 (h!2301 (toList!845 call!14974))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!43153 () Bool)

(assert (=> d!43153 e!89517))

(declare-fun res!65924 () Bool)

(assert (=> d!43153 (=> (not res!65924) (not e!89517))))

(assert (=> d!43153 (= res!65924 (isStrictlySorted!310 lt!71970))))

(assert (=> d!43153 (= lt!71970 e!89518)))

(declare-fun c!25815 () Bool)

(assert (=> d!43153 (= c!25815 (and ((_ is Cons!1695) (toList!845 call!14974)) (bvslt (_1!1298 (h!2301 (toList!845 call!14974))) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!43153 (isStrictlySorted!310 (toList!845 call!14974))))

(assert (=> d!43153 (= (insertStrictlySorted!92 (toList!845 call!14974) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71970)))

(declare-fun e!89514 () List!1699)

(declare-fun b!137527 () Bool)

(assert (=> b!137527 (= e!89514 (ite c!25812 (t!6179 (toList!845 call!14974)) (ite c!25814 (Cons!1695 (h!2301 (toList!845 call!14974)) (t!6179 (toList!845 call!14974))) Nil!1696)))))

(declare-fun b!137528 () Bool)

(assert (=> b!137528 (= e!89516 call!15141)))

(declare-fun bm!15137 () Bool)

(declare-fun call!15140 () List!1699)

(assert (=> bm!15137 (= call!15139 call!15140)))

(declare-fun b!137529 () Bool)

(declare-fun res!65925 () Bool)

(assert (=> b!137529 (=> (not res!65925) (not e!89517))))

(assert (=> b!137529 (= res!65925 (containsKey!177 lt!71970 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137530 () Bool)

(assert (=> b!137530 (= e!89516 call!15141)))

(declare-fun bm!15138 () Bool)

(assert (=> bm!15138 (= call!15140 ($colon$colon!92 e!89514 (ite c!25815 (h!2301 (toList!845 call!14974)) (tuple2!2575 (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!25813 () Bool)

(assert (=> bm!15138 (= c!25813 c!25815)))

(declare-fun b!137531 () Bool)

(assert (=> b!137531 (= e!89518 call!15140)))

(declare-fun b!137532 () Bool)

(assert (=> b!137532 (= e!89514 (insertStrictlySorted!92 (t!6179 (toList!845 call!14974)) (_1!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137533 () Bool)

(assert (=> b!137533 (= e!89515 call!15139)))

(assert (= (and d!43153 c!25815) b!137531))

(assert (= (and d!43153 (not c!25815)) b!137526))

(assert (= (and b!137526 c!25812) b!137533))

(assert (= (and b!137526 (not c!25812)) b!137524))

(assert (= (and b!137524 c!25814) b!137530))

(assert (= (and b!137524 (not c!25814)) b!137528))

(assert (= (or b!137530 b!137528) bm!15136))

(assert (= (or b!137533 bm!15136) bm!15137))

(assert (= (or b!137531 bm!15137) bm!15138))

(assert (= (and bm!15138 c!25813) b!137532))

(assert (= (and bm!15138 (not c!25813)) b!137527))

(assert (= (and d!43153 res!65924) b!137529))

(assert (= (and b!137529 res!65925) b!137525))

(declare-fun m!164555 () Bool)

(assert (=> d!43153 m!164555))

(declare-fun m!164557 () Bool)

(assert (=> d!43153 m!164557))

(declare-fun m!164559 () Bool)

(assert (=> b!137532 m!164559))

(declare-fun m!164561 () Bool)

(assert (=> bm!15138 m!164561))

(declare-fun m!164563 () Bool)

(assert (=> b!137525 m!164563))

(declare-fun m!164565 () Bool)

(assert (=> b!137529 m!164565))

(assert (=> d!42817 d!43153))

(assert (=> b!136653 d!42959))

(declare-fun b!137534 () Bool)

(declare-fun e!89519 () (_ BitVec 32))

(declare-fun call!15142 () (_ BitVec 32))

(assert (=> b!137534 (= e!89519 call!15142)))

(declare-fun d!43155 () Bool)

(declare-fun lt!71971 () (_ BitVec 32))

(assert (=> d!43155 (and (bvsge lt!71971 #b00000000000000000000000000000000) (bvsle lt!71971 (bvsub (size!2534 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!89520 () (_ BitVec 32))

(assert (=> d!43155 (= lt!71971 e!89520)))

(declare-fun c!25817 () Bool)

(assert (=> d!43155 (= c!25817 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!43155 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2534 (_keys!4641 newMap!16)) (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!43155 (= (arrayCountValidKeys!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))) lt!71971)))

(declare-fun b!137535 () Bool)

(assert (=> b!137535 (= e!89520 e!89519)))

(declare-fun c!25816 () Bool)

(assert (=> b!137535 (= c!25816 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!137536 () Bool)

(assert (=> b!137536 (= e!89520 #b00000000000000000000000000000000)))

(declare-fun b!137537 () Bool)

(assert (=> b!137537 (= e!89519 (bvadd #b00000000000000000000000000000001 call!15142))))

(declare-fun bm!15139 () Bool)

(assert (=> bm!15139 (= call!15142 (arrayCountValidKeys!0 (_keys!4641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (= (and d!43155 c!25817) b!137536))

(assert (= (and d!43155 (not c!25817)) b!137535))

(assert (= (and b!137535 c!25816) b!137537))

(assert (= (and b!137535 (not c!25816)) b!137534))

(assert (= (or b!137537 b!137534) bm!15139))

(assert (=> b!137535 m!163567))

(assert (=> b!137535 m!163567))

(assert (=> b!137535 m!163571))

(declare-fun m!164567 () Bool)

(assert (=> bm!15139 m!164567))

(assert (=> bm!15008 d!43155))

(declare-fun b!137538 () Bool)

(declare-fun e!89521 () Bool)

(assert (=> b!137538 (= e!89521 (contains!890 Nil!1698 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun d!43157 () Bool)

(declare-fun res!65928 () Bool)

(declare-fun e!89522 () Bool)

(assert (=> d!43157 (=> res!65928 e!89522)))

(assert (=> d!43157 (= res!65928 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (_2!1299 lt!71193)))))))

(assert (=> d!43157 (= (arrayNoDuplicates!0 (_keys!4641 (_2!1299 lt!71193)) #b00000000000000000000000000000000 Nil!1698) e!89522)))

(declare-fun b!137539 () Bool)

(declare-fun e!89523 () Bool)

(declare-fun call!15143 () Bool)

(assert (=> b!137539 (= e!89523 call!15143)))

(declare-fun b!137540 () Bool)

(declare-fun e!89524 () Bool)

(assert (=> b!137540 (= e!89524 e!89523)))

(declare-fun c!25818 () Bool)

(assert (=> b!137540 (= c!25818 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun bm!15140 () Bool)

(assert (=> bm!15140 (= call!15143 (arrayNoDuplicates!0 (_keys!4641 (_2!1299 lt!71193)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25818 (Cons!1697 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000) Nil!1698) Nil!1698)))))

(declare-fun b!137541 () Bool)

(assert (=> b!137541 (= e!89522 e!89524)))

(declare-fun res!65927 () Bool)

(assert (=> b!137541 (=> (not res!65927) (not e!89524))))

(assert (=> b!137541 (= res!65927 (not e!89521))))

(declare-fun res!65926 () Bool)

(assert (=> b!137541 (=> (not res!65926) (not e!89521))))

(assert (=> b!137541 (= res!65926 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (_2!1299 lt!71193))) #b00000000000000000000000000000000)))))

(declare-fun b!137542 () Bool)

(assert (=> b!137542 (= e!89523 call!15143)))

(assert (= (and d!43157 (not res!65928)) b!137541))

(assert (= (and b!137541 res!65926) b!137538))

(assert (= (and b!137541 res!65927) b!137540))

(assert (= (and b!137540 c!25818) b!137542))

(assert (= (and b!137540 (not c!25818)) b!137539))

(assert (= (or b!137542 b!137539) bm!15140))

(assert (=> b!137538 m!163457))

(assert (=> b!137538 m!163457))

(declare-fun m!164569 () Bool)

(assert (=> b!137538 m!164569))

(assert (=> b!137540 m!163457))

(assert (=> b!137540 m!163457))

(assert (=> b!137540 m!163481))

(assert (=> bm!15140 m!163457))

(declare-fun m!164571 () Bool)

(assert (=> bm!15140 m!164571))

(assert (=> b!137541 m!163457))

(assert (=> b!137541 m!163457))

(assert (=> b!137541 m!163481))

(assert (=> b!136563 d!43157))

(declare-fun b!137546 () Bool)

(declare-fun e!89526 () Option!180)

(assert (=> b!137546 (= e!89526 None!178)))

(declare-fun b!137543 () Bool)

(declare-fun e!89525 () Option!180)

(assert (=> b!137543 (= e!89525 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71377)))))))

(declare-fun b!137545 () Bool)

(assert (=> b!137545 (= e!89526 (getValueByKey!174 (t!6179 (toList!845 lt!71377)) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun c!25819 () Bool)

(declare-fun d!43159 () Bool)

(assert (=> d!43159 (= c!25819 (and ((_ is Cons!1695) (toList!845 lt!71377)) (= (_1!1298 (h!2301 (toList!845 lt!71377))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (=> d!43159 (= (getValueByKey!174 (toList!845 lt!71377) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) e!89525)))

(declare-fun b!137544 () Bool)

(assert (=> b!137544 (= e!89525 e!89526)))

(declare-fun c!25820 () Bool)

(assert (=> b!137544 (= c!25820 (and ((_ is Cons!1695) (toList!845 lt!71377)) (not (= (_1!1298 (h!2301 (toList!845 lt!71377))) (_1!1298 (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(assert (= (and d!43159 c!25819) b!137543))

(assert (= (and d!43159 (not c!25819)) b!137544))

(assert (= (and b!137544 c!25820) b!137545))

(assert (= (and b!137544 (not c!25820)) b!137546))

(declare-fun m!164573 () Bool)

(assert (=> b!137545 m!164573))

(assert (=> b!136692 d!43159))

(declare-fun d!43161 () Bool)

(declare-fun e!89527 () Bool)

(assert (=> d!43161 e!89527))

(declare-fun res!65930 () Bool)

(assert (=> d!43161 (=> (not res!65930) (not e!89527))))

(declare-fun lt!71975 () ListLongMap!1659)

(assert (=> d!43161 (= res!65930 (contains!888 lt!71975 (_1!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71972 () List!1699)

(assert (=> d!43161 (= lt!71975 (ListLongMap!1660 lt!71972))))

(declare-fun lt!71973 () Unit!4281)

(declare-fun lt!71974 () Unit!4281)

(assert (=> d!43161 (= lt!71973 lt!71974)))

(assert (=> d!43161 (= (getValueByKey!174 lt!71972 (_1!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43161 (= lt!71974 (lemmaContainsTupThenGetReturnValue!89 lt!71972 (_1!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43161 (= lt!71972 (insertStrictlySorted!92 (toList!845 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16))) (_1!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43161 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71975)))

(declare-fun b!137547 () Bool)

(declare-fun res!65929 () Bool)

(assert (=> b!137547 (=> (not res!65929) (not e!89527))))

(assert (=> b!137547 (= res!65929 (= (getValueByKey!174 (toList!845 lt!71975) (_1!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!179 (_2!1298 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137548 () Bool)

(assert (=> b!137548 (= e!89527 (contains!891 (toList!845 lt!71975) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!43161 res!65930) b!137547))

(assert (= (and b!137547 res!65929) b!137548))

(declare-fun m!164575 () Bool)

(assert (=> d!43161 m!164575))

(declare-fun m!164577 () Bool)

(assert (=> d!43161 m!164577))

(declare-fun m!164579 () Bool)

(assert (=> d!43161 m!164579))

(declare-fun m!164581 () Bool)

(assert (=> d!43161 m!164581))

(declare-fun m!164583 () Bool)

(assert (=> b!137547 m!164583))

(declare-fun m!164585 () Bool)

(assert (=> b!137548 m!164585))

(assert (=> d!42747 d!43161))

(declare-fun d!43163 () Bool)

(assert (=> d!43163 (= (+!170 (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(assert (=> d!43163 true))

(declare-fun _$7!119 () Unit!4281)

(assert (=> d!43163 (= (choose!842 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) (extraKeys!2649 newMap!16) lt!71185 (zeroValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) (defaultEntry!2888 newMap!16)) _$7!119)))

(declare-fun bs!5782 () Bool)

(assert (= bs!5782 d!43163))

(assert (=> bs!5782 m!162737))

(assert (=> bs!5782 m!162737))

(assert (=> bs!5782 m!163061))

(assert (=> bs!5782 m!162629))

(assert (=> bs!5782 m!163063))

(assert (=> d!42747 d!43163))

(assert (=> d!42747 d!42733))

(declare-fun b!137549 () Bool)

(declare-fun e!89540 () Bool)

(assert (=> b!137549 (= e!89540 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137550 () Bool)

(declare-fun c!25826 () Bool)

(assert (=> b!137550 (= c!25826 (and (not (= (bvand lt!71185 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!71185 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!89531 () ListLongMap!1659)

(declare-fun e!89535 () ListLongMap!1659)

(assert (=> b!137550 (= e!89531 e!89535)))

(declare-fun d!43165 () Bool)

(declare-fun e!89533 () Bool)

(assert (=> d!43165 e!89533))

(declare-fun res!65938 () Bool)

(assert (=> d!43165 (=> (not res!65938) (not e!89533))))

(assert (=> d!43165 (= res!65938 (or (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))))

(declare-fun lt!71986 () ListLongMap!1659)

(declare-fun lt!71995 () ListLongMap!1659)

(assert (=> d!43165 (= lt!71986 lt!71995)))

(declare-fun lt!71994 () Unit!4281)

(declare-fun e!89534 () Unit!4281)

(assert (=> d!43165 (= lt!71994 e!89534)))

(declare-fun c!25821 () Bool)

(assert (=> d!43165 (= c!25821 e!89540)))

(declare-fun res!65935 () Bool)

(assert (=> d!43165 (=> (not res!65935) (not e!89540))))

(assert (=> d!43165 (= res!65935 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun e!89532 () ListLongMap!1659)

(assert (=> d!43165 (= lt!71995 e!89532)))

(declare-fun c!25824 () Bool)

(assert (=> d!43165 (= c!25824 (and (not (= (bvand lt!71185 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!71185 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43165 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43165 (= (getCurrentListMap!521 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) lt!71986)))

(declare-fun b!137551 () Bool)

(declare-fun call!15145 () ListLongMap!1659)

(assert (=> b!137551 (= e!89531 call!15145)))

(declare-fun b!137552 () Bool)

(declare-fun res!65934 () Bool)

(assert (=> b!137552 (=> (not res!65934) (not e!89533))))

(declare-fun e!89536 () Bool)

(assert (=> b!137552 (= res!65934 e!89536)))

(declare-fun c!25823 () Bool)

(assert (=> b!137552 (= c!25823 (not (= (bvand lt!71185 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!15141 () Bool)

(declare-fun call!15146 () ListLongMap!1659)

(declare-fun call!15149 () ListLongMap!1659)

(assert (=> bm!15141 (= call!15146 call!15149)))

(declare-fun bm!15142 () Bool)

(declare-fun call!15147 () Bool)

(assert (=> bm!15142 (= call!15147 (contains!888 lt!71986 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137553 () Bool)

(declare-fun Unit!4326 () Unit!4281)

(assert (=> b!137553 (= e!89534 Unit!4326)))

(declare-fun b!137554 () Bool)

(declare-fun call!15148 () ListLongMap!1659)

(assert (=> b!137554 (= e!89532 (+!170 call!15148 (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))

(declare-fun b!137555 () Bool)

(declare-fun e!89529 () Bool)

(assert (=> b!137555 (= e!89529 (= (apply!117 lt!71986 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2741 newMap!16)))))

(declare-fun b!137556 () Bool)

(declare-fun res!65932 () Bool)

(assert (=> b!137556 (=> (not res!65932) (not e!89533))))

(declare-fun e!89539 () Bool)

(assert (=> b!137556 (= res!65932 e!89539)))

(declare-fun res!65931 () Bool)

(assert (=> b!137556 (=> res!65931 e!89539)))

(declare-fun e!89537 () Bool)

(assert (=> b!137556 (= res!65931 (not e!89537))))

(declare-fun res!65937 () Bool)

(assert (=> b!137556 (=> (not res!65937) (not e!89537))))

(assert (=> b!137556 (= res!65937 (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun c!25825 () Bool)

(declare-fun bm!15143 () Bool)

(declare-fun call!15150 () ListLongMap!1659)

(assert (=> bm!15143 (= call!15148 (+!170 (ite c!25824 call!15149 (ite c!25825 call!15146 call!15150)) (ite (or c!25824 c!25825) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(declare-fun b!137557 () Bool)

(declare-fun e!89528 () Bool)

(assert (=> b!137557 (= e!89539 e!89528)))

(declare-fun res!65933 () Bool)

(assert (=> b!137557 (=> (not res!65933) (not e!89528))))

(assert (=> b!137557 (= res!65933 (contains!888 lt!71986 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137557 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137558 () Bool)

(assert (=> b!137558 (= e!89532 e!89531)))

(assert (=> b!137558 (= c!25825 (and (not (= (bvand lt!71185 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!71185 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137559 () Bool)

(declare-fun lt!71980 () Unit!4281)

(assert (=> b!137559 (= e!89534 lt!71980)))

(declare-fun lt!71991 () ListLongMap!1659)

(assert (=> b!137559 (= lt!71991 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71985 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71985 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71992 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71992 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71989 () Unit!4281)

(assert (=> b!137559 (= lt!71989 (addStillContains!93 lt!71991 lt!71985 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71992))))

(assert (=> b!137559 (contains!888 (+!170 lt!71991 (tuple2!2575 lt!71985 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71992)))

(declare-fun lt!71988 () Unit!4281)

(assert (=> b!137559 (= lt!71988 lt!71989)))

(declare-fun lt!71997 () ListLongMap!1659)

(assert (=> b!137559 (= lt!71997 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71984 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71984 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71983 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71983 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71990 () Unit!4281)

(assert (=> b!137559 (= lt!71990 (addApplyDifferent!93 lt!71997 lt!71984 (minValue!2741 newMap!16) lt!71983))))

(assert (=> b!137559 (= (apply!117 (+!170 lt!71997 (tuple2!2575 lt!71984 (minValue!2741 newMap!16))) lt!71983) (apply!117 lt!71997 lt!71983))))

(declare-fun lt!71982 () Unit!4281)

(assert (=> b!137559 (= lt!71982 lt!71990)))

(declare-fun lt!71976 () ListLongMap!1659)

(assert (=> b!137559 (= lt!71976 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71979 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71979 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71977 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71977 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71996 () Unit!4281)

(assert (=> b!137559 (= lt!71996 (addApplyDifferent!93 lt!71976 lt!71979 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71977))))

(assert (=> b!137559 (= (apply!117 (+!170 lt!71976 (tuple2!2575 lt!71979 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71977) (apply!117 lt!71976 lt!71977))))

(declare-fun lt!71978 () Unit!4281)

(assert (=> b!137559 (= lt!71978 lt!71996)))

(declare-fun lt!71981 () ListLongMap!1659)

(assert (=> b!137559 (= lt!71981 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun lt!71987 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71987 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71993 () (_ BitVec 64))

(assert (=> b!137559 (= lt!71993 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137559 (= lt!71980 (addApplyDifferent!93 lt!71981 lt!71987 (minValue!2741 newMap!16) lt!71993))))

(assert (=> b!137559 (= (apply!117 (+!170 lt!71981 (tuple2!2575 lt!71987 (minValue!2741 newMap!16))) lt!71993) (apply!117 lt!71981 lt!71993))))

(declare-fun bm!15144 () Bool)

(assert (=> bm!15144 (= call!15149 (getCurrentListMapNoExtraKeys!137 (_keys!4641 newMap!16) (_values!2871 newMap!16) (mask!7202 newMap!16) lt!71185 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)))))

(declare-fun b!137560 () Bool)

(declare-fun e!89530 () Bool)

(assert (=> b!137560 (= e!89533 e!89530)))

(declare-fun c!25822 () Bool)

(assert (=> b!137560 (= c!25822 (not (= (bvand lt!71185 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137561 () Bool)

(declare-fun e!89538 () Bool)

(assert (=> b!137561 (= e!89538 (= (apply!117 lt!71986 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137562 () Bool)

(assert (=> b!137562 (= e!89530 e!89529)))

(declare-fun res!65936 () Bool)

(assert (=> b!137562 (= res!65936 call!15147)))

(assert (=> b!137562 (=> (not res!65936) (not e!89529))))

(declare-fun b!137563 () Bool)

(assert (=> b!137563 (= e!89528 (= (apply!117 lt!71986 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2265 (_values!2871 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137563 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2535 (_values!2871 newMap!16))))))

(assert (=> b!137563 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2534 (_keys!4641 newMap!16))))))

(declare-fun b!137564 () Bool)

(assert (=> b!137564 (= e!89535 call!15145)))

(declare-fun b!137565 () Bool)

(assert (=> b!137565 (= e!89537 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137566 () Bool)

(assert (=> b!137566 (= e!89535 call!15150)))

(declare-fun b!137567 () Bool)

(assert (=> b!137567 (= e!89530 (not call!15147))))

(declare-fun b!137568 () Bool)

(declare-fun call!15144 () Bool)

(assert (=> b!137568 (= e!89536 (not call!15144))))

(declare-fun b!137569 () Bool)

(assert (=> b!137569 (= e!89536 e!89538)))

(declare-fun res!65939 () Bool)

(assert (=> b!137569 (= res!65939 call!15144)))

(assert (=> b!137569 (=> (not res!65939) (not e!89538))))

(declare-fun bm!15145 () Bool)

(assert (=> bm!15145 (= call!15144 (contains!888 lt!71986 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15146 () Bool)

(assert (=> bm!15146 (= call!15150 call!15146)))

(declare-fun bm!15147 () Bool)

(assert (=> bm!15147 (= call!15145 call!15148)))

(assert (= (and d!43165 c!25824) b!137554))

(assert (= (and d!43165 (not c!25824)) b!137558))

(assert (= (and b!137558 c!25825) b!137551))

(assert (= (and b!137558 (not c!25825)) b!137550))

(assert (= (and b!137550 c!25826) b!137564))

(assert (= (and b!137550 (not c!25826)) b!137566))

(assert (= (or b!137564 b!137566) bm!15146))

(assert (= (or b!137551 bm!15146) bm!15141))

(assert (= (or b!137551 b!137564) bm!15147))

(assert (= (or b!137554 bm!15141) bm!15144))

(assert (= (or b!137554 bm!15147) bm!15143))

(assert (= (and d!43165 res!65935) b!137549))

(assert (= (and d!43165 c!25821) b!137559))

(assert (= (and d!43165 (not c!25821)) b!137553))

(assert (= (and d!43165 res!65938) b!137556))

(assert (= (and b!137556 res!65937) b!137565))

(assert (= (and b!137556 (not res!65931)) b!137557))

(assert (= (and b!137557 res!65933) b!137563))

(assert (= (and b!137556 res!65932) b!137552))

(assert (= (and b!137552 c!25823) b!137569))

(assert (= (and b!137552 (not c!25823)) b!137568))

(assert (= (and b!137569 res!65939) b!137561))

(assert (= (or b!137569 b!137568) bm!15145))

(assert (= (and b!137552 res!65934) b!137560))

(assert (= (and b!137560 c!25822) b!137562))

(assert (= (and b!137560 (not c!25822)) b!137567))

(assert (= (and b!137562 res!65936) b!137555))

(assert (= (or b!137562 b!137567) bm!15142))

(declare-fun b_lambda!6157 () Bool)

(assert (=> (not b_lambda!6157) (not b!137563)))

(assert (=> b!137563 t!6191))

(declare-fun b_and!8537 () Bool)

(assert (= b_and!8533 (and (=> t!6191 result!4043) b_and!8537)))

(assert (=> b!137563 t!6193))

(declare-fun b_and!8539 () Bool)

(assert (= b_and!8535 (and (=> t!6193 result!4045) b_and!8539)))

(declare-fun m!164587 () Bool)

(assert (=> b!137555 m!164587))

(assert (=> b!137559 m!162629))

(declare-fun m!164589 () Bool)

(assert (=> b!137559 m!164589))

(declare-fun m!164591 () Bool)

(assert (=> b!137559 m!164591))

(declare-fun m!164593 () Bool)

(assert (=> b!137559 m!164593))

(assert (=> b!137559 m!162629))

(declare-fun m!164595 () Bool)

(assert (=> b!137559 m!164595))

(declare-fun m!164597 () Bool)

(assert (=> b!137559 m!164597))

(declare-fun m!164599 () Bool)

(assert (=> b!137559 m!164599))

(declare-fun m!164601 () Bool)

(assert (=> b!137559 m!164601))

(assert (=> b!137559 m!164601))

(declare-fun m!164603 () Bool)

(assert (=> b!137559 m!164603))

(declare-fun m!164605 () Bool)

(assert (=> b!137559 m!164605))

(declare-fun m!164607 () Bool)

(assert (=> b!137559 m!164607))

(declare-fun m!164609 () Bool)

(assert (=> b!137559 m!164609))

(declare-fun m!164611 () Bool)

(assert (=> b!137559 m!164611))

(declare-fun m!164613 () Bool)

(assert (=> b!137559 m!164613))

(assert (=> b!137559 m!162887))

(assert (=> b!137559 m!164591))

(assert (=> b!137559 m!164607))

(assert (=> b!137559 m!164605))

(declare-fun m!164615 () Bool)

(assert (=> b!137559 m!164615))

(declare-fun m!164617 () Bool)

(assert (=> b!137559 m!164617))

(assert (=> b!137559 m!162629))

(declare-fun m!164619 () Bool)

(assert (=> b!137559 m!164619))

(assert (=> b!137557 m!162887))

(assert (=> b!137557 m!162887))

(declare-fun m!164621 () Bool)

(assert (=> b!137557 m!164621))

(assert (=> d!43165 m!162853))

(assert (=> b!137563 m!162957))

(assert (=> b!137563 m!162957))

(assert (=> b!137563 m!162959))

(assert (=> b!137563 m!162961))

(assert (=> b!137563 m!162887))

(assert (=> b!137563 m!162887))

(declare-fun m!164623 () Bool)

(assert (=> b!137563 m!164623))

(assert (=> b!137563 m!162959))

(declare-fun m!164625 () Bool)

(assert (=> b!137554 m!164625))

(declare-fun m!164627 () Bool)

(assert (=> bm!15145 m!164627))

(assert (=> bm!15144 m!162629))

(assert (=> bm!15144 m!164589))

(assert (=> b!137565 m!162887))

(assert (=> b!137565 m!162887))

(assert (=> b!137565 m!162891))

(assert (=> b!137549 m!162887))

(assert (=> b!137549 m!162887))

(assert (=> b!137549 m!162891))

(declare-fun m!164629 () Bool)

(assert (=> bm!15142 m!164629))

(declare-fun m!164631 () Bool)

(assert (=> bm!15143 m!164631))

(declare-fun m!164633 () Bool)

(assert (=> b!137561 m!164633))

(assert (=> d!42747 d!43165))

(assert (=> d!42747 d!42841))

(assert (=> d!42823 d!42841))

(declare-fun d!43167 () Bool)

(declare-fun e!89541 () Bool)

(assert (=> d!43167 e!89541))

(declare-fun res!65940 () Bool)

(assert (=> d!43167 (=> res!65940 e!89541)))

(declare-fun lt!71999 () Bool)

(assert (=> d!43167 (= res!65940 (not lt!71999))))

(declare-fun lt!72000 () Bool)

(assert (=> d!43167 (= lt!71999 lt!72000)))

(declare-fun lt!72001 () Unit!4281)

(declare-fun e!89542 () Unit!4281)

(assert (=> d!43167 (= lt!72001 e!89542)))

(declare-fun c!25827 () Bool)

(assert (=> d!43167 (= c!25827 lt!72000)))

(assert (=> d!43167 (= lt!72000 (containsKey!177 (toList!845 lt!71568) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43167 (= (contains!888 lt!71568 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71999)))

(declare-fun b!137570 () Bool)

(declare-fun lt!71998 () Unit!4281)

(assert (=> b!137570 (= e!89542 lt!71998)))

(assert (=> b!137570 (= lt!71998 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71568) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137570 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137571 () Bool)

(declare-fun Unit!4327 () Unit!4281)

(assert (=> b!137571 (= e!89542 Unit!4327)))

(declare-fun b!137572 () Bool)

(assert (=> b!137572 (= e!89541 (isDefined!126 (getValueByKey!174 (toList!845 lt!71568) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43167 c!25827) b!137570))

(assert (= (and d!43167 (not c!25827)) b!137571))

(assert (= (and d!43167 (not res!65940)) b!137572))

(declare-fun m!164635 () Bool)

(assert (=> d!43167 m!164635))

(declare-fun m!164637 () Bool)

(assert (=> b!137570 m!164637))

(assert (=> b!137570 m!164057))

(assert (=> b!137570 m!164057))

(declare-fun m!164639 () Bool)

(assert (=> b!137570 m!164639))

(assert (=> b!137572 m!164057))

(assert (=> b!137572 m!164057))

(assert (=> b!137572 m!164639))

(assert (=> bm!15048 d!43167))

(declare-fun d!43169 () Bool)

(assert (=> d!43169 (= (inRange!0 (ite c!25604 (index!3242 lt!71478) (ite c!25603 (index!3241 lt!71465) (index!3244 lt!71465))) (mask!7202 newMap!16)) (and (bvsge (ite c!25604 (index!3242 lt!71478) (ite c!25603 (index!3241 lt!71465) (index!3244 lt!71465))) #b00000000000000000000000000000000) (bvslt (ite c!25604 (index!3242 lt!71478) (ite c!25603 (index!3241 lt!71465) (index!3244 lt!71465))) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!15034 d!43169))

(declare-fun d!43171 () Bool)

(assert (=> d!43171 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(declare-fun lt!72002 () Unit!4281)

(assert (=> d!43171 (= lt!72002 (choose!843 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(declare-fun e!89543 () Bool)

(assert (=> d!43171 e!89543))

(declare-fun res!65941 () Bool)

(assert (=> d!43171 (=> (not res!65941) (not e!89543))))

(assert (=> d!43171 (= res!65941 (isStrictlySorted!310 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43171 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273) lt!72002)))

(declare-fun b!137573 () Bool)

(assert (=> b!137573 (= e!89543 (containsKey!177 (toList!845 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71273))))

(assert (= (and d!43171 res!65941) b!137573))

(assert (=> d!43171 m!163207))

(assert (=> d!43171 m!163207))

(assert (=> d!43171 m!163209))

(declare-fun m!164641 () Bool)

(assert (=> d!43171 m!164641))

(declare-fun m!164643 () Bool)

(assert (=> d!43171 m!164643))

(assert (=> b!137573 m!163203))

(assert (=> b!136806 d!43171))

(assert (=> b!136806 d!42919))

(assert (=> b!136806 d!42921))

(declare-fun d!43173 () Bool)

(assert (=> d!43173 (= (apply!117 lt!71322 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71322) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5783 () Bool)

(assert (= bs!5783 d!43173))

(declare-fun m!164645 () Bool)

(assert (=> bs!5783 m!164645))

(assert (=> bs!5783 m!164645))

(declare-fun m!164647 () Bool)

(assert (=> bs!5783 m!164647))

(assert (=> b!136649 d!43173))

(declare-fun d!43175 () Bool)

(assert (=> d!43175 (= (apply!117 lt!71354 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71354) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5784 () Bool)

(assert (= bs!5784 d!43175))

(declare-fun m!164649 () Bool)

(assert (=> bs!5784 m!164649))

(assert (=> bs!5784 m!164649))

(declare-fun m!164651 () Bool)

(assert (=> bs!5784 m!164651))

(assert (=> b!136673 d!43175))

(assert (=> b!136770 d!42959))

(declare-fun d!43177 () Bool)

(declare-fun lt!72003 () Bool)

(assert (=> d!43177 (= lt!72003 (select (content!135 (toList!845 lt!71513)) (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun e!89545 () Bool)

(assert (=> d!43177 (= lt!72003 e!89545)))

(declare-fun res!65942 () Bool)

(assert (=> d!43177 (=> (not res!65942) (not e!89545))))

(assert (=> d!43177 (= res!65942 ((_ is Cons!1695) (toList!845 lt!71513)))))

(assert (=> d!43177 (= (contains!891 (toList!845 lt!71513) (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!72003)))

(declare-fun b!137574 () Bool)

(declare-fun e!89544 () Bool)

(assert (=> b!137574 (= e!89545 e!89544)))

(declare-fun res!65943 () Bool)

(assert (=> b!137574 (=> res!65943 e!89544)))

(assert (=> b!137574 (= res!65943 (= (h!2301 (toList!845 lt!71513)) (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(declare-fun b!137575 () Bool)

(assert (=> b!137575 (= e!89544 (contains!891 (t!6179 (toList!845 lt!71513)) (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))

(assert (= (and d!43177 res!65942) b!137574))

(assert (= (and b!137574 (not res!65943)) b!137575))

(declare-fun m!164653 () Bool)

(assert (=> d!43177 m!164653))

(declare-fun m!164655 () Bool)

(assert (=> d!43177 m!164655))

(declare-fun m!164657 () Bool)

(assert (=> b!137575 m!164657))

(assert (=> b!136810 d!43177))

(assert (=> bm!15036 d!42813))

(declare-fun d!43179 () Bool)

(declare-fun e!89546 () Bool)

(assert (=> d!43179 e!89546))

(declare-fun res!65944 () Bool)

(assert (=> d!43179 (=> res!65944 e!89546)))

(declare-fun lt!72005 () Bool)

(assert (=> d!43179 (= res!65944 (not lt!72005))))

(declare-fun lt!72006 () Bool)

(assert (=> d!43179 (= lt!72005 lt!72006)))

(declare-fun lt!72007 () Unit!4281)

(declare-fun e!89547 () Unit!4281)

(assert (=> d!43179 (= lt!72007 e!89547)))

(declare-fun c!25828 () Bool)

(assert (=> d!43179 (= c!25828 lt!72006)))

(assert (=> d!43179 (= lt!72006 (containsKey!177 (toList!845 lt!71354) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43179 (= (contains!888 lt!71354 #b0000000000000000000000000000000000000000000000000000000000000000) lt!72005)))

(declare-fun b!137576 () Bool)

(declare-fun lt!72004 () Unit!4281)

(assert (=> b!137576 (= e!89547 lt!72004)))

(assert (=> b!137576 (= lt!72004 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71354) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137576 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137577 () Bool)

(declare-fun Unit!4328 () Unit!4281)

(assert (=> b!137577 (= e!89547 Unit!4328)))

(declare-fun b!137578 () Bool)

(assert (=> b!137578 (= e!89546 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43179 c!25828) b!137576))

(assert (= (and d!43179 (not c!25828)) b!137577))

(assert (= (and d!43179 (not res!65944)) b!137578))

(declare-fun m!164659 () Bool)

(assert (=> d!43179 m!164659))

(declare-fun m!164661 () Bool)

(assert (=> b!137576 m!164661))

(assert (=> b!137576 m!164527))

(assert (=> b!137576 m!164527))

(declare-fun m!164663 () Bool)

(assert (=> b!137576 m!164663))

(assert (=> b!137578 m!164527))

(assert (=> b!137578 m!164527))

(assert (=> b!137578 m!164663))

(assert (=> bm!15023 d!43179))

(declare-fun d!43181 () Bool)

(assert (=> d!43181 (= (inRange!0 (ite c!25622 (index!3241 lt!71527) (index!3244 lt!71527)) (mask!7202 newMap!16)) (and (bvsge (ite c!25622 (index!3241 lt!71527) (index!3244 lt!71527)) #b00000000000000000000000000000000) (bvslt (ite c!25622 (index!3241 lt!71527) (index!3244 lt!71527)) (bvadd (mask!7202 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!15045 d!43181))

(declare-fun b!137579 () Bool)

(declare-fun e!89548 () Bool)

(assert (=> b!137579 (= e!89548 (contains!890 Nil!1698 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!43183 () Bool)

(declare-fun res!65947 () Bool)

(declare-fun e!89549 () Bool)

(assert (=> d!43183 (=> res!65947 e!89549)))

(assert (=> d!43183 (= res!65947 (bvsge #b00000000000000000000000000000000 (size!2534 (_keys!4641 (v!3220 (underlying!459 thiss!992))))))))

(assert (=> d!43183 (= (arrayNoDuplicates!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) #b00000000000000000000000000000000 Nil!1698) e!89549)))

(declare-fun b!137580 () Bool)

(declare-fun e!89550 () Bool)

(declare-fun call!15151 () Bool)

(assert (=> b!137580 (= e!89550 call!15151)))

(declare-fun b!137581 () Bool)

(declare-fun e!89551 () Bool)

(assert (=> b!137581 (= e!89551 e!89550)))

(declare-fun c!25829 () Bool)

(assert (=> b!137581 (= c!25829 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!15148 () Bool)

(assert (=> bm!15148 (= call!15151 (arrayNoDuplicates!0 (_keys!4641 (v!3220 (underlying!459 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25829 (Cons!1697 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000) Nil!1698) Nil!1698)))))

(declare-fun b!137582 () Bool)

(assert (=> b!137582 (= e!89549 e!89551)))

(declare-fun res!65946 () Bool)

(assert (=> b!137582 (=> (not res!65946) (not e!89551))))

(assert (=> b!137582 (= res!65946 (not e!89548))))

(declare-fun res!65945 () Bool)

(assert (=> b!137582 (=> (not res!65945) (not e!89548))))

(assert (=> b!137582 (= res!65945 (validKeyInArray!0 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!137583 () Bool)

(assert (=> b!137583 (= e!89550 call!15151)))

(assert (= (and d!43183 (not res!65947)) b!137582))

(assert (= (and b!137582 res!65945) b!137579))

(assert (= (and b!137582 res!65946) b!137581))

(assert (= (and b!137581 c!25829) b!137583))

(assert (= (and b!137581 (not c!25829)) b!137580))

(assert (= (or b!137583 b!137580) bm!15148))

(assert (=> b!137579 m!163953))

(assert (=> b!137579 m!163953))

(declare-fun m!164665 () Bool)

(assert (=> b!137579 m!164665))

(assert (=> b!137581 m!163953))

(assert (=> b!137581 m!163953))

(assert (=> b!137581 m!163955))

(assert (=> bm!15148 m!163953))

(declare-fun m!164667 () Bool)

(assert (=> bm!15148 m!164667))

(assert (=> b!137582 m!163953))

(assert (=> b!137582 m!163953))

(assert (=> b!137582 m!163955))

(assert (=> b!136872 d!43183))

(assert (=> b!136875 d!42967))

(assert (=> b!136875 d!42893))

(assert (=> b!136795 d!42827))

(declare-fun d!43185 () Bool)

(assert (=> d!43185 (= (get!1502 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!3226 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!42719 d!43185))

(assert (=> d!42719 d!43011))

(declare-fun lt!72008 () Bool)

(declare-fun d!43187 () Bool)

(assert (=> d!43187 (= lt!72008 (select (content!135 (toList!845 lt!71553)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!89553 () Bool)

(assert (=> d!43187 (= lt!72008 e!89553)))

(declare-fun res!65948 () Bool)

(assert (=> d!43187 (=> (not res!65948) (not e!89553))))

(assert (=> d!43187 (= res!65948 ((_ is Cons!1695) (toList!845 lt!71553)))))

(assert (=> d!43187 (= (contains!891 (toList!845 lt!71553) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72008)))

(declare-fun b!137584 () Bool)

(declare-fun e!89552 () Bool)

(assert (=> b!137584 (= e!89553 e!89552)))

(declare-fun res!65949 () Bool)

(assert (=> b!137584 (=> res!65949 e!89552)))

(assert (=> b!137584 (= res!65949 (= (h!2301 (toList!845 lt!71553)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137585 () Bool)

(assert (=> b!137585 (= e!89552 (contains!891 (t!6179 (toList!845 lt!71553)) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!43187 res!65948) b!137584))

(assert (= (and b!137584 (not res!65949)) b!137585))

(declare-fun m!164669 () Bool)

(assert (=> d!43187 m!164669))

(declare-fun m!164671 () Bool)

(assert (=> d!43187 m!164671))

(declare-fun m!164673 () Bool)

(assert (=> b!137585 m!164673))

(assert (=> b!136869 d!43187))

(declare-fun d!43189 () Bool)

(assert (=> d!43189 (= (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71258)) (v!3226 (getValueByKey!174 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71258)))))

(assert (=> d!42801 d!43189))

(declare-fun b!137589 () Bool)

(declare-fun e!89555 () Option!180)

(assert (=> b!137589 (= e!89555 None!178)))

(declare-fun b!137586 () Bool)

(declare-fun e!89554 () Option!180)

(assert (=> b!137586 (= e!89554 (Some!179 (_2!1298 (h!2301 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(declare-fun b!137588 () Bool)

(assert (=> b!137588 (= e!89555 (getValueByKey!174 (t!6179 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71258))))

(declare-fun c!25830 () Bool)

(declare-fun d!43191 () Bool)

(assert (=> d!43191 (= c!25830 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71258)))))

(assert (=> d!43191 (= (getValueByKey!174 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71258) e!89554)))

(declare-fun b!137587 () Bool)

(assert (=> b!137587 (= e!89554 e!89555)))

(declare-fun c!25831 () Bool)

(assert (=> b!137587 (= c!25831 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))) (not (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71257 (tuple2!2575 lt!71260 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71258))))))

(assert (= (and d!43191 c!25830) b!137586))

(assert (= (and d!43191 (not c!25830)) b!137587))

(assert (= (and b!137587 c!25831) b!137588))

(assert (= (and b!137587 (not c!25831)) b!137589))

(declare-fun m!164675 () Bool)

(assert (=> b!137588 m!164675))

(assert (=> d!42801 d!43191))

(declare-fun d!43193 () Bool)

(assert (=> d!43193 (= (apply!117 lt!71568 (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!174 (toList!845 lt!71568) (select (arr!2264 (_keys!4641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5785 () Bool)

(assert (= bs!5785 d!43193))

(assert (=> bs!5785 m!162887))

(assert (=> bs!5785 m!163705))

(assert (=> bs!5785 m!163705))

(declare-fun m!164677 () Bool)

(assert (=> bs!5785 m!164677))

(assert (=> b!136890 d!43193))

(declare-fun d!43195 () Bool)

(declare-fun c!25832 () Bool)

(assert (=> d!43195 (= c!25832 ((_ is ValueCellFull!1100) (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!89556 () V!3497)

(assert (=> d!43195 (= (get!1498 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89556)))

(declare-fun b!137590 () Bool)

(assert (=> b!137590 (= e!89556 (get!1500 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137591 () Bool)

(assert (=> b!137591 (= e!89556 (get!1501 (select (arr!2265 (ite c!25529 (_values!2871 newMap!16) (array!4792 (store (arr!2265 (_values!2871 newMap!16)) (index!3242 lt!71204) (ValueCellFull!1100 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2535 (_values!2871 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2888 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43195 c!25832) b!137590))

(assert (= (and d!43195 (not c!25832)) b!137591))

(assert (=> b!137590 m!163379))

(assert (=> b!137590 m!162959))

(declare-fun m!164679 () Bool)

(assert (=> b!137590 m!164679))

(assert (=> b!137591 m!163379))

(assert (=> b!137591 m!162959))

(declare-fun m!164681 () Bool)

(assert (=> b!137591 m!164681))

(assert (=> b!136890 d!43195))

(declare-fun d!43197 () Bool)

(assert (=> d!43197 (= (apply!117 lt!71322 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!174 (toList!845 lt!71322) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5786 () Bool)

(assert (= bs!5786 d!43197))

(assert (=> bs!5786 m!163587))

(assert (=> bs!5786 m!163587))

(declare-fun m!164683 () Bool)

(assert (=> bs!5786 m!164683))

(assert (=> b!136643 d!43197))

(assert (=> b!136667 d!42959))

(declare-fun d!43199 () Bool)

(declare-fun res!65950 () Bool)

(declare-fun e!89557 () Bool)

(assert (=> d!43199 (=> res!65950 e!89557)))

(assert (=> d!43199 (= res!65950 (and ((_ is Cons!1695) (toList!845 lt!71267)) (= (_1!1298 (h!2301 (toList!845 lt!71267))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!43199 (= (containsKey!177 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!89557)))

(declare-fun b!137592 () Bool)

(declare-fun e!89558 () Bool)

(assert (=> b!137592 (= e!89557 e!89558)))

(declare-fun res!65951 () Bool)

(assert (=> b!137592 (=> (not res!65951) (not e!89558))))

(assert (=> b!137592 (= res!65951 (and (or (not ((_ is Cons!1695) (toList!845 lt!71267))) (bvsle (_1!1298 (h!2301 (toList!845 lt!71267))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1695) (toList!845 lt!71267)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71267))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!137593 () Bool)

(assert (=> b!137593 (= e!89558 (containsKey!177 (t!6179 (toList!845 lt!71267)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!43199 (not res!65950)) b!137592))

(assert (= (and b!137592 res!65951) b!137593))

(assert (=> b!137593 m!162775))

(declare-fun m!164685 () Bool)

(assert (=> b!137593 m!164685))

(assert (=> d!42807 d!43199))

(declare-fun d!43201 () Bool)

(declare-fun e!89559 () Bool)

(assert (=> d!43201 e!89559))

(declare-fun res!65952 () Bool)

(assert (=> d!43201 (=> res!65952 e!89559)))

(declare-fun lt!72010 () Bool)

(assert (=> d!43201 (= res!65952 (not lt!72010))))

(declare-fun lt!72011 () Bool)

(assert (=> d!43201 (= lt!72010 lt!72011)))

(declare-fun lt!72012 () Unit!4281)

(declare-fun e!89560 () Unit!4281)

(assert (=> d!43201 (= lt!72012 e!89560)))

(declare-fun c!25833 () Bool)

(assert (=> d!43201 (= c!25833 lt!72011)))

(assert (=> d!43201 (= lt!72011 (containsKey!177 (toList!845 lt!71311) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43201 (= (contains!888 lt!71311 #b1000000000000000000000000000000000000000000000000000000000000000) lt!72010)))

(declare-fun b!137594 () Bool)

(declare-fun lt!72009 () Unit!4281)

(assert (=> b!137594 (= e!89560 lt!72009)))

(assert (=> b!137594 (= lt!72009 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71311) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137594 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137595 () Bool)

(declare-fun Unit!4329 () Unit!4281)

(assert (=> b!137595 (= e!89560 Unit!4329)))

(declare-fun b!137596 () Bool)

(assert (=> b!137596 (= e!89559 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43201 c!25833) b!137594))

(assert (= (and d!43201 (not c!25833)) b!137595))

(assert (= (and d!43201 (not res!65952)) b!137596))

(declare-fun m!164687 () Bool)

(assert (=> d!43201 m!164687))

(declare-fun m!164689 () Bool)

(assert (=> b!137594 m!164689))

(declare-fun m!164691 () Bool)

(assert (=> b!137594 m!164691))

(assert (=> b!137594 m!164691))

(declare-fun m!164693 () Bool)

(assert (=> b!137594 m!164693))

(assert (=> b!137596 m!164691))

(assert (=> b!137596 m!164691))

(assert (=> b!137596 m!164693))

(assert (=> b!136627 d!43201))

(assert (=> b!136750 d!42803))

(assert (=> bm!15050 d!43123))

(assert (=> b!136586 d!42959))

(declare-fun b!137600 () Bool)

(declare-fun e!89562 () Option!180)

(assert (=> b!137600 (= e!89562 None!178)))

(declare-fun b!137597 () Bool)

(declare-fun e!89561 () Option!180)

(assert (=> b!137597 (= e!89561 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71501)))))))

(declare-fun b!137599 () Bool)

(assert (=> b!137599 (= e!89562 (getValueByKey!174 (t!6179 (toList!845 lt!71501)) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun c!25834 () Bool)

(declare-fun d!43203 () Bool)

(assert (=> d!43203 (= c!25834 (and ((_ is Cons!1695) (toList!845 lt!71501)) (= (_1!1298 (h!2301 (toList!845 lt!71501))) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43203 (= (getValueByKey!174 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89561)))

(declare-fun b!137598 () Bool)

(assert (=> b!137598 (= e!89561 e!89562)))

(declare-fun c!25835 () Bool)

(assert (=> b!137598 (= c!25835 (and ((_ is Cons!1695) (toList!845 lt!71501)) (not (= (_1!1298 (h!2301 (toList!845 lt!71501))) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43203 c!25834) b!137597))

(assert (= (and d!43203 (not c!25834)) b!137598))

(assert (= (and b!137598 c!25835) b!137599))

(assert (= (and b!137598 (not c!25835)) b!137600))

(declare-fun m!164695 () Bool)

(assert (=> b!137599 m!164695))

(assert (=> b!136802 d!43203))

(declare-fun d!43205 () Bool)

(declare-fun e!89563 () Bool)

(assert (=> d!43205 e!89563))

(declare-fun res!65953 () Bool)

(assert (=> d!43205 (=> res!65953 e!89563)))

(declare-fun lt!72014 () Bool)

(assert (=> d!43205 (= res!65953 (not lt!72014))))

(declare-fun lt!72015 () Bool)

(assert (=> d!43205 (= lt!72014 lt!72015)))

(declare-fun lt!72016 () Unit!4281)

(declare-fun e!89564 () Unit!4281)

(assert (=> d!43205 (= lt!72016 e!89564)))

(declare-fun c!25836 () Bool)

(assert (=> d!43205 (= c!25836 lt!72015)))

(assert (=> d!43205 (= lt!72015 (containsKey!177 (toList!845 lt!71322) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43205 (= (contains!888 lt!71322 #b0000000000000000000000000000000000000000000000000000000000000000) lt!72014)))

(declare-fun b!137601 () Bool)

(declare-fun lt!72013 () Unit!4281)

(assert (=> b!137601 (= e!89564 lt!72013)))

(assert (=> b!137601 (= lt!72013 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71322) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137601 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137602 () Bool)

(declare-fun Unit!4330 () Unit!4281)

(assert (=> b!137602 (= e!89564 Unit!4330)))

(declare-fun b!137603 () Bool)

(assert (=> b!137603 (= e!89563 (isDefined!126 (getValueByKey!174 (toList!845 lt!71322) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43205 c!25836) b!137601))

(assert (= (and d!43205 (not c!25836)) b!137602))

(assert (= (and d!43205 (not res!65953)) b!137603))

(declare-fun m!164697 () Bool)

(assert (=> d!43205 m!164697))

(declare-fun m!164699 () Bool)

(assert (=> b!137601 m!164699))

(assert (=> b!137601 m!164645))

(assert (=> b!137601 m!164645))

(declare-fun m!164701 () Bool)

(assert (=> b!137601 m!164701))

(assert (=> b!137603 m!164645))

(assert (=> b!137603 m!164645))

(assert (=> b!137603 m!164701))

(assert (=> bm!15016 d!43205))

(declare-fun b!137607 () Bool)

(declare-fun e!89566 () Option!180)

(assert (=> b!137607 (= e!89566 None!178)))

(declare-fun b!137604 () Bool)

(declare-fun e!89565 () Option!180)

(assert (=> b!137604 (= e!89565 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71388)))))))

(declare-fun b!137606 () Bool)

(assert (=> b!137606 (= e!89566 (getValueByKey!174 (t!6179 (toList!845 lt!71388)) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!43207 () Bool)

(declare-fun c!25837 () Bool)

(assert (=> d!43207 (= c!25837 (and ((_ is Cons!1695) (toList!845 lt!71388)) (= (_1!1298 (h!2301 (toList!845 lt!71388))) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!43207 (= (getValueByKey!174 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!89565)))

(declare-fun b!137605 () Bool)

(assert (=> b!137605 (= e!89565 e!89566)))

(declare-fun c!25838 () Bool)

(assert (=> b!137605 (= c!25838 (and ((_ is Cons!1695) (toList!845 lt!71388)) (not (= (_1!1298 (h!2301 (toList!845 lt!71388))) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!43207 c!25837) b!137604))

(assert (= (and d!43207 (not c!25837)) b!137605))

(assert (= (and b!137605 c!25838) b!137606))

(assert (= (and b!137605 (not c!25838)) b!137607))

(declare-fun m!164703 () Bool)

(assert (=> b!137606 m!164703))

(assert (=> b!136703 d!43207))

(declare-fun d!43209 () Bool)

(declare-fun e!89567 () Bool)

(assert (=> d!43209 e!89567))

(declare-fun res!65955 () Bool)

(assert (=> d!43209 (=> (not res!65955) (not e!89567))))

(declare-fun lt!72020 () ListLongMap!1659)

(assert (=> d!43209 (= res!65955 (contains!888 lt!72020 (_1!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(declare-fun lt!72017 () List!1699)

(assert (=> d!43209 (= lt!72020 (ListLongMap!1660 lt!72017))))

(declare-fun lt!72018 () Unit!4281)

(declare-fun lt!72019 () Unit!4281)

(assert (=> d!43209 (= lt!72018 lt!72019)))

(assert (=> d!43209 (= (getValueByKey!174 lt!72017 (_1!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!43209 (= lt!72019 (lemmaContainsTupThenGetReturnValue!89 lt!72017 (_1!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (_2!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!43209 (= lt!72017 (insertStrictlySorted!92 (toList!845 (ite c!25638 call!15055 (ite c!25639 call!15052 call!15056))) (_1!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) (_2!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))))))

(assert (=> d!43209 (= (+!170 (ite c!25638 call!15055 (ite c!25639 call!15052 call!15056)) (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))) lt!72020)))

(declare-fun b!137608 () Bool)

(declare-fun res!65954 () Bool)

(assert (=> b!137608 (=> (not res!65954) (not e!89567))))

(assert (=> b!137608 (= res!65954 (= (getValueByKey!174 (toList!845 lt!72020) (_1!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))))

(declare-fun b!137609 () Bool)

(assert (=> b!137609 (= e!89567 (contains!891 (toList!845 lt!72020) (ite (or c!25638 c!25639) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 newMap!16)) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 newMap!16)))))))

(assert (= (and d!43209 res!65955) b!137608))

(assert (= (and b!137608 res!65954) b!137609))

(declare-fun m!164705 () Bool)

(assert (=> d!43209 m!164705))

(declare-fun m!164707 () Bool)

(assert (=> d!43209 m!164707))

(declare-fun m!164709 () Bool)

(assert (=> d!43209 m!164709))

(declare-fun m!164711 () Bool)

(assert (=> d!43209 m!164711))

(declare-fun m!164713 () Bool)

(assert (=> b!137608 m!164713))

(declare-fun m!164715 () Bool)

(assert (=> b!137609 m!164715))

(assert (=> bm!15049 d!43209))

(declare-fun d!43211 () Bool)

(assert (=> d!43211 (= (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71274)) (v!3226 (getValueByKey!174 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71274)))))

(assert (=> d!42779 d!43211))

(declare-fun b!137613 () Bool)

(declare-fun e!89569 () Option!180)

(assert (=> b!137613 (= e!89569 None!178)))

(declare-fun b!137610 () Bool)

(declare-fun e!89568 () Option!180)

(assert (=> b!137610 (= e!89568 (Some!179 (_2!1298 (h!2301 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(declare-fun b!137612 () Bool)

(assert (=> b!137612 (= e!89569 (getValueByKey!174 (t!6179 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71274))))

(declare-fun c!25839 () Bool)

(declare-fun d!43213 () Bool)

(assert (=> d!43213 (= c!25839 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71274)))))

(assert (=> d!43213 (= (getValueByKey!174 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71274) e!89568)))

(declare-fun b!137611 () Bool)

(assert (=> b!137611 (= e!89568 e!89569)))

(declare-fun c!25840 () Bool)

(assert (=> b!137611 (= c!25840 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (not (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71262 (tuple2!2575 lt!71268 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71274))))))

(assert (= (and d!43213 c!25839) b!137610))

(assert (= (and d!43213 (not c!25839)) b!137611))

(assert (= (and b!137611 c!25840) b!137612))

(assert (= (and b!137611 (not c!25840)) b!137613))

(declare-fun m!164717 () Bool)

(assert (=> b!137612 m!164717))

(assert (=> d!42779 d!43213))

(declare-fun d!43215 () Bool)

(declare-fun e!89570 () Bool)

(assert (=> d!43215 e!89570))

(declare-fun res!65957 () Bool)

(assert (=> d!43215 (=> (not res!65957) (not e!89570))))

(declare-fun lt!72024 () ListLongMap!1659)

(assert (=> d!43215 (= res!65957 (contains!888 lt!72024 (_1!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(declare-fun lt!72021 () List!1699)

(assert (=> d!43215 (= lt!72024 (ListLongMap!1660 lt!72021))))

(declare-fun lt!72022 () Unit!4281)

(declare-fun lt!72023 () Unit!4281)

(assert (=> d!43215 (= lt!72022 lt!72023)))

(assert (=> d!43215 (= (getValueByKey!174 lt!72021 (_1!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43215 (= lt!72023 (lemmaContainsTupThenGetReturnValue!89 lt!72021 (_1!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43215 (= lt!72021 (insertStrictlySorted!92 (toList!845 lt!71359) (_1!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43215 (= (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!72024)))

(declare-fun b!137614 () Bool)

(declare-fun res!65956 () Bool)

(assert (=> b!137614 (=> (not res!65956) (not e!89570))))

(assert (=> b!137614 (= res!65956 (= (getValueByKey!174 (toList!845 lt!72024) (_1!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))))))))

(declare-fun b!137615 () Bool)

(assert (=> b!137615 (= e!89570 (contains!891 (toList!845 lt!72024) (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))))))

(assert (= (and d!43215 res!65957) b!137614))

(assert (= (and b!137614 res!65956) b!137615))

(declare-fun m!164719 () Bool)

(assert (=> d!43215 m!164719))

(declare-fun m!164721 () Bool)

(assert (=> d!43215 m!164721))

(declare-fun m!164723 () Bool)

(assert (=> d!43215 m!164723))

(declare-fun m!164725 () Bool)

(assert (=> d!43215 m!164725))

(declare-fun m!164727 () Bool)

(assert (=> b!137614 m!164727))

(declare-fun m!164729 () Bool)

(assert (=> b!137615 m!164729))

(assert (=> b!136677 d!43215))

(assert (=> b!136677 d!42887))

(declare-fun d!43217 () Bool)

(assert (=> d!43217 (= (apply!117 (+!170 lt!71365 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71351) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71365 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) lt!71351)))))

(declare-fun bs!5787 () Bool)

(assert (= bs!5787 d!43217))

(declare-fun m!164731 () Bool)

(assert (=> bs!5787 m!164731))

(assert (=> bs!5787 m!164731))

(declare-fun m!164733 () Bool)

(assert (=> bs!5787 m!164733))

(assert (=> b!136677 d!43217))

(declare-fun d!43219 () Bool)

(declare-fun e!89571 () Bool)

(assert (=> d!43219 e!89571))

(declare-fun res!65959 () Bool)

(assert (=> d!43219 (=> (not res!65959) (not e!89571))))

(declare-fun lt!72028 () ListLongMap!1659)

(assert (=> d!43219 (= res!65959 (contains!888 lt!72028 (_1!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(declare-fun lt!72025 () List!1699)

(assert (=> d!43219 (= lt!72028 (ListLongMap!1660 lt!72025))))

(declare-fun lt!72026 () Unit!4281)

(declare-fun lt!72027 () Unit!4281)

(assert (=> d!43219 (= lt!72026 lt!72027)))

(assert (=> d!43219 (= (getValueByKey!174 lt!72025 (_1!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43219 (= lt!72027 (lemmaContainsTupThenGetReturnValue!89 lt!72025 (_1!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43219 (= lt!72025 (insertStrictlySorted!92 (toList!845 lt!71344) (_1!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))))))

(assert (=> d!43219 (= (+!170 lt!71344 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!72028)))

(declare-fun b!137616 () Bool)

(declare-fun res!65958 () Bool)

(assert (=> b!137616 (=> (not res!65958) (not e!89571))))

(assert (=> b!137616 (= res!65958 (= (getValueByKey!174 (toList!845 lt!72028) (_1!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))))))))

(declare-fun b!137617 () Bool)

(assert (=> b!137617 (= e!89571 (contains!891 (toList!845 lt!72028) (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))))))

(assert (= (and d!43219 res!65959) b!137616))

(assert (= (and b!137616 res!65958) b!137617))

(declare-fun m!164735 () Bool)

(assert (=> d!43219 m!164735))

(declare-fun m!164737 () Bool)

(assert (=> d!43219 m!164737))

(declare-fun m!164739 () Bool)

(assert (=> d!43219 m!164739))

(declare-fun m!164741 () Bool)

(assert (=> d!43219 m!164741))

(declare-fun m!164743 () Bool)

(assert (=> b!137616 m!164743))

(declare-fun m!164745 () Bool)

(assert (=> b!137617 m!164745))

(assert (=> b!136677 d!43219))

(declare-fun d!43221 () Bool)

(assert (=> d!43221 (= (apply!117 (+!170 lt!71349 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71361) (apply!117 lt!71349 lt!71361))))

(declare-fun lt!72029 () Unit!4281)

(assert (=> d!43221 (= lt!72029 (choose!844 lt!71349 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71361))))

(declare-fun e!89572 () Bool)

(assert (=> d!43221 e!89572))

(declare-fun res!65960 () Bool)

(assert (=> d!43221 (=> (not res!65960) (not e!89572))))

(assert (=> d!43221 (= res!65960 (contains!888 lt!71349 lt!71361))))

(assert (=> d!43221 (= (addApplyDifferent!93 lt!71349 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71361) lt!72029)))

(declare-fun b!137618 () Bool)

(assert (=> b!137618 (= e!89572 (not (= lt!71361 lt!71355)))))

(assert (= (and d!43221 res!65960) b!137618))

(assert (=> d!43221 m!163007))

(assert (=> d!43221 m!163013))

(assert (=> d!43221 m!163013))

(assert (=> d!43221 m!163023))

(declare-fun m!164747 () Bool)

(assert (=> d!43221 m!164747))

(declare-fun m!164749 () Bool)

(assert (=> d!43221 m!164749))

(assert (=> b!136677 d!43221))

(declare-fun d!43223 () Bool)

(assert (=> d!43223 (contains!888 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71360)))

(declare-fun lt!72030 () Unit!4281)

(assert (=> d!43223 (= lt!72030 (choose!845 lt!71359 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71360))))

(assert (=> d!43223 (contains!888 lt!71359 lt!71360)))

(assert (=> d!43223 (= (addStillContains!93 lt!71359 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71360) lt!72030)))

(declare-fun bs!5788 () Bool)

(assert (= bs!5788 d!43223))

(assert (=> bs!5788 m!163015))

(assert (=> bs!5788 m!163015))

(assert (=> bs!5788 m!163017))

(declare-fun m!164751 () Bool)

(assert (=> bs!5788 m!164751))

(declare-fun m!164753 () Bool)

(assert (=> bs!5788 m!164753))

(assert (=> b!136677 d!43223))

(declare-fun d!43225 () Bool)

(declare-fun e!89573 () Bool)

(assert (=> d!43225 e!89573))

(declare-fun res!65961 () Bool)

(assert (=> d!43225 (=> res!65961 e!89573)))

(declare-fun lt!72032 () Bool)

(assert (=> d!43225 (= res!65961 (not lt!72032))))

(declare-fun lt!72033 () Bool)

(assert (=> d!43225 (= lt!72032 lt!72033)))

(declare-fun lt!72034 () Unit!4281)

(declare-fun e!89574 () Unit!4281)

(assert (=> d!43225 (= lt!72034 e!89574)))

(declare-fun c!25841 () Bool)

(assert (=> d!43225 (= c!25841 lt!72033)))

(assert (=> d!43225 (= lt!72033 (containsKey!177 (toList!845 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) lt!71360))))

(assert (=> d!43225 (= (contains!888 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71360) lt!72032)))

(declare-fun b!137619 () Bool)

(declare-fun lt!72031 () Unit!4281)

(assert (=> b!137619 (= e!89574 lt!72031)))

(assert (=> b!137619 (= lt!72031 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) lt!71360))))

(assert (=> b!137619 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) lt!71360))))

(declare-fun b!137620 () Bool)

(declare-fun Unit!4331 () Unit!4281)

(assert (=> b!137620 (= e!89574 Unit!4331)))

(declare-fun b!137621 () Bool)

(assert (=> b!137621 (= e!89573 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71359 (tuple2!2575 lt!71353 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) lt!71360)))))

(assert (= (and d!43225 c!25841) b!137619))

(assert (= (and d!43225 (not c!25841)) b!137620))

(assert (= (and d!43225 (not res!65961)) b!137621))

(declare-fun m!164755 () Bool)

(assert (=> d!43225 m!164755))

(declare-fun m!164757 () Bool)

(assert (=> b!137619 m!164757))

(declare-fun m!164759 () Bool)

(assert (=> b!137619 m!164759))

(assert (=> b!137619 m!164759))

(declare-fun m!164761 () Bool)

(assert (=> b!137619 m!164761))

(assert (=> b!137621 m!164759))

(assert (=> b!137621 m!164759))

(assert (=> b!137621 m!164761))

(assert (=> b!136677 d!43225))

(declare-fun d!43227 () Bool)

(assert (=> d!43227 (= (apply!117 (+!170 lt!71344 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71345) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71344 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16))))) lt!71345)))))

(declare-fun bs!5789 () Bool)

(assert (= bs!5789 d!43227))

(declare-fun m!164763 () Bool)

(assert (=> bs!5789 m!164763))

(assert (=> bs!5789 m!164763))

(declare-fun m!164765 () Bool)

(assert (=> bs!5789 m!164765))

(assert (=> b!136677 d!43227))

(declare-fun d!43229 () Bool)

(assert (=> d!43229 (= (apply!117 (+!170 lt!71349 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71361) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71349 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) lt!71361)))))

(declare-fun bs!5790 () Bool)

(assert (= bs!5790 d!43229))

(declare-fun m!164767 () Bool)

(assert (=> bs!5790 m!164767))

(assert (=> bs!5790 m!164767))

(declare-fun m!164769 () Bool)

(assert (=> bs!5790 m!164769))

(assert (=> b!136677 d!43229))

(declare-fun d!43231 () Bool)

(declare-fun e!89575 () Bool)

(assert (=> d!43231 e!89575))

(declare-fun res!65963 () Bool)

(assert (=> d!43231 (=> (not res!65963) (not e!89575))))

(declare-fun lt!72038 () ListLongMap!1659)

(assert (=> d!43231 (= res!65963 (contains!888 lt!72038 (_1!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(declare-fun lt!72035 () List!1699)

(assert (=> d!43231 (= lt!72038 (ListLongMap!1660 lt!72035))))

(declare-fun lt!72036 () Unit!4281)

(declare-fun lt!72037 () Unit!4281)

(assert (=> d!43231 (= lt!72036 lt!72037)))

(assert (=> d!43231 (= (getValueByKey!174 lt!72035 (_1!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43231 (= lt!72037 (lemmaContainsTupThenGetReturnValue!89 lt!72035 (_1!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43231 (= lt!72035 (insertStrictlySorted!92 (toList!845 lt!71349) (_1!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43231 (= (+!170 lt!71349 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!72038)))

(declare-fun b!137622 () Bool)

(declare-fun res!65962 () Bool)

(assert (=> b!137622 (=> (not res!65962) (not e!89575))))

(assert (=> b!137622 (= res!65962 (= (getValueByKey!174 (toList!845 lt!72038) (_1!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(declare-fun b!137623 () Bool)

(assert (=> b!137623 (= e!89575 (contains!891 (toList!845 lt!72038) (tuple2!2575 lt!71355 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))

(assert (= (and d!43231 res!65963) b!137622))

(assert (= (and b!137622 res!65962) b!137623))

(declare-fun m!164771 () Bool)

(assert (=> d!43231 m!164771))

(declare-fun m!164773 () Bool)

(assert (=> d!43231 m!164773))

(declare-fun m!164775 () Bool)

(assert (=> d!43231 m!164775))

(declare-fun m!164777 () Bool)

(assert (=> d!43231 m!164777))

(declare-fun m!164779 () Bool)

(assert (=> b!137622 m!164779))

(declare-fun m!164781 () Bool)

(assert (=> b!137623 m!164781))

(assert (=> b!136677 d!43231))

(declare-fun d!43233 () Bool)

(declare-fun e!89576 () Bool)

(assert (=> d!43233 e!89576))

(declare-fun res!65965 () Bool)

(assert (=> d!43233 (=> (not res!65965) (not e!89576))))

(declare-fun lt!72042 () ListLongMap!1659)

(assert (=> d!43233 (= res!65965 (contains!888 lt!72042 (_1!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(declare-fun lt!72039 () List!1699)

(assert (=> d!43233 (= lt!72042 (ListLongMap!1660 lt!72039))))

(declare-fun lt!72040 () Unit!4281)

(declare-fun lt!72041 () Unit!4281)

(assert (=> d!43233 (= lt!72040 lt!72041)))

(assert (=> d!43233 (= (getValueByKey!174 lt!72039 (_1!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43233 (= lt!72041 (lemmaContainsTupThenGetReturnValue!89 lt!72039 (_1!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43233 (= lt!72039 (insertStrictlySorted!92 (toList!845 lt!71365) (_1!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) (_2!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))))))

(assert (=> d!43233 (= (+!170 lt!71365 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!72042)))

(declare-fun b!137624 () Bool)

(declare-fun res!65964 () Bool)

(assert (=> b!137624 (=> (not res!65964) (not e!89576))))

(assert (=> b!137624 (= res!65964 (= (getValueByKey!174 (toList!845 lt!72042) (_1!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16))))) (Some!179 (_2!1298 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))))

(declare-fun b!137625 () Bool)

(assert (=> b!137625 (= e!89576 (contains!891 (toList!845 lt!72042) (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))))))

(assert (= (and d!43233 res!65965) b!137624))

(assert (= (and b!137624 res!65964) b!137625))

(declare-fun m!164783 () Bool)

(assert (=> d!43233 m!164783))

(declare-fun m!164785 () Bool)

(assert (=> d!43233 m!164785))

(declare-fun m!164787 () Bool)

(assert (=> d!43233 m!164787))

(declare-fun m!164789 () Bool)

(assert (=> d!43233 m!164789))

(declare-fun m!164791 () Bool)

(assert (=> b!137624 m!164791))

(declare-fun m!164793 () Bool)

(assert (=> b!137625 m!164793))

(assert (=> b!136677 d!43233))

(declare-fun d!43235 () Bool)

(assert (=> d!43235 (= (apply!117 lt!71365 lt!71351) (get!1502 (getValueByKey!174 (toList!845 lt!71365) lt!71351)))))

(declare-fun bs!5791 () Bool)

(assert (= bs!5791 d!43235))

(declare-fun m!164795 () Bool)

(assert (=> bs!5791 m!164795))

(assert (=> bs!5791 m!164795))

(declare-fun m!164797 () Bool)

(assert (=> bs!5791 m!164797))

(assert (=> b!136677 d!43235))

(declare-fun d!43237 () Bool)

(assert (=> d!43237 (= (apply!117 lt!71344 lt!71345) (get!1502 (getValueByKey!174 (toList!845 lt!71344) lt!71345)))))

(declare-fun bs!5792 () Bool)

(assert (= bs!5792 d!43237))

(declare-fun m!164799 () Bool)

(assert (=> bs!5792 m!164799))

(assert (=> bs!5792 m!164799))

(declare-fun m!164801 () Bool)

(assert (=> bs!5792 m!164801))

(assert (=> b!136677 d!43237))

(declare-fun d!43239 () Bool)

(assert (=> d!43239 (= (apply!117 lt!71349 lt!71361) (get!1502 (getValueByKey!174 (toList!845 lt!71349) lt!71361)))))

(declare-fun bs!5793 () Bool)

(assert (= bs!5793 d!43239))

(declare-fun m!164803 () Bool)

(assert (=> bs!5793 m!164803))

(assert (=> bs!5793 m!164803))

(declare-fun m!164805 () Bool)

(assert (=> bs!5793 m!164805))

(assert (=> b!136677 d!43239))

(declare-fun d!43241 () Bool)

(assert (=> d!43241 (= (apply!117 (+!170 lt!71365 (tuple2!2575 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)))) lt!71351) (apply!117 lt!71365 lt!71351))))

(declare-fun lt!72043 () Unit!4281)

(assert (=> d!43241 (= lt!72043 (choose!844 lt!71365 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71351))))

(declare-fun e!89577 () Bool)

(assert (=> d!43241 e!89577))

(declare-fun res!65966 () Bool)

(assert (=> d!43241 (=> (not res!65966) (not e!89577))))

(assert (=> d!43241 (= res!65966 (contains!888 lt!71365 lt!71351))))

(assert (=> d!43241 (= (addApplyDifferent!93 lt!71365 lt!71352 (ite c!25529 (ite c!25524 (minValue!2741 newMap!16) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2741 newMap!16)) lt!71351) lt!72043)))

(declare-fun b!137626 () Bool)

(assert (=> b!137626 (= e!89577 (not (= lt!71351 lt!71352)))))

(assert (= (and d!43241 res!65966) b!137626))

(assert (=> d!43241 m!163005))

(assert (=> d!43241 m!163009))

(assert (=> d!43241 m!163009))

(assert (=> d!43241 m!163011))

(declare-fun m!164807 () Bool)

(assert (=> d!43241 m!164807))

(declare-fun m!164809 () Bool)

(assert (=> d!43241 m!164809))

(assert (=> b!136677 d!43241))

(declare-fun d!43243 () Bool)

(assert (=> d!43243 (= (apply!117 (+!170 lt!71344 (tuple2!2575 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)))) lt!71345) (apply!117 lt!71344 lt!71345))))

(declare-fun lt!72044 () Unit!4281)

(assert (=> d!43243 (= lt!72044 (choose!844 lt!71344 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71345))))

(declare-fun e!89578 () Bool)

(assert (=> d!43243 e!89578))

(declare-fun res!65967 () Bool)

(assert (=> d!43243 (=> (not res!65967) (not e!89578))))

(assert (=> d!43243 (= res!65967 (contains!888 lt!71344 lt!71345))))

(assert (=> d!43243 (= (addApplyDifferent!93 lt!71344 lt!71347 (ite (and c!25529 c!25524) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2741 newMap!16)) lt!71345) lt!72044)))

(declare-fun b!137627 () Bool)

(assert (=> b!137627 (= e!89578 (not (= lt!71345 lt!71347)))))

(assert (= (and d!43243 res!65967) b!137627))

(assert (=> d!43243 m!163019))

(assert (=> d!43243 m!162999))

(assert (=> d!43243 m!162999))

(assert (=> d!43243 m!163001))

(declare-fun m!164811 () Bool)

(assert (=> d!43243 m!164811))

(declare-fun m!164813 () Bool)

(assert (=> d!43243 m!164813))

(assert (=> b!136677 d!43243))

(assert (=> b!136637 d!42959))

(declare-fun d!43245 () Bool)

(assert (=> d!43245 (= (get!1502 (getValueByKey!174 (toList!845 lt!71262) lt!71274)) (v!3226 (getValueByKey!174 (toList!845 lt!71262) lt!71274)))))

(assert (=> d!42787 d!43245))

(declare-fun b!137631 () Bool)

(declare-fun e!89580 () Option!180)

(assert (=> b!137631 (= e!89580 None!178)))

(declare-fun b!137628 () Bool)

(declare-fun e!89579 () Option!180)

(assert (=> b!137628 (= e!89579 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71262)))))))

(declare-fun b!137630 () Bool)

(assert (=> b!137630 (= e!89580 (getValueByKey!174 (t!6179 (toList!845 lt!71262)) lt!71274))))

(declare-fun d!43247 () Bool)

(declare-fun c!25842 () Bool)

(assert (=> d!43247 (= c!25842 (and ((_ is Cons!1695) (toList!845 lt!71262)) (= (_1!1298 (h!2301 (toList!845 lt!71262))) lt!71274)))))

(assert (=> d!43247 (= (getValueByKey!174 (toList!845 lt!71262) lt!71274) e!89579)))

(declare-fun b!137629 () Bool)

(assert (=> b!137629 (= e!89579 e!89580)))

(declare-fun c!25843 () Bool)

(assert (=> b!137629 (= c!25843 (and ((_ is Cons!1695) (toList!845 lt!71262)) (not (= (_1!1298 (h!2301 (toList!845 lt!71262))) lt!71274))))))

(assert (= (and d!43247 c!25842) b!137628))

(assert (= (and d!43247 (not c!25842)) b!137629))

(assert (= (and b!137629 c!25843) b!137630))

(assert (= (and b!137629 (not c!25843)) b!137631))

(declare-fun m!164815 () Bool)

(assert (=> b!137630 m!164815))

(assert (=> d!42787 d!43247))

(declare-fun b!137635 () Bool)

(declare-fun e!89582 () Option!180)

(assert (=> b!137635 (= e!89582 None!178)))

(declare-fun b!137632 () Bool)

(declare-fun e!89581 () Option!180)

(assert (=> b!137632 (= e!89581 (Some!179 (_2!1298 (h!2301 (t!6179 (toList!845 lt!71090))))))))

(declare-fun b!137634 () Bool)

(assert (=> b!137634 (= e!89582 (getValueByKey!174 (t!6179 (t!6179 (toList!845 lt!71090))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun d!43249 () Bool)

(declare-fun c!25844 () Bool)

(assert (=> d!43249 (= c!25844 (and ((_ is Cons!1695) (t!6179 (toList!845 lt!71090))) (= (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090)))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (=> d!43249 (= (getValueByKey!174 (t!6179 (toList!845 lt!71090)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) e!89581)))

(declare-fun b!137633 () Bool)

(assert (=> b!137633 (= e!89581 e!89582)))

(declare-fun c!25845 () Bool)

(assert (=> b!137633 (= c!25845 (and ((_ is Cons!1695) (t!6179 (toList!845 lt!71090))) (not (= (_1!1298 (h!2301 (t!6179 (toList!845 lt!71090)))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))))

(assert (= (and d!43249 c!25844) b!137632))

(assert (= (and d!43249 (not c!25844)) b!137633))

(assert (= (and b!137633 c!25845) b!137634))

(assert (= (and b!137633 (not c!25845)) b!137635))

(assert (=> b!137634 m!162605))

(declare-fun m!164817 () Bool)

(assert (=> b!137634 m!164817))

(assert (=> b!136784 d!43249))

(declare-fun d!43251 () Bool)

(declare-fun lt!72045 () Bool)

(assert (=> d!43251 (= lt!72045 (select (content!135 (toList!845 lt!71377)) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89584 () Bool)

(assert (=> d!43251 (= lt!72045 e!89584)))

(declare-fun res!65968 () Bool)

(assert (=> d!43251 (=> (not res!65968) (not e!89584))))

(assert (=> d!43251 (= res!65968 ((_ is Cons!1695) (toList!845 lt!71377)))))

(assert (=> d!43251 (= (contains!891 (toList!845 lt!71377) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!72045)))

(declare-fun b!137636 () Bool)

(declare-fun e!89583 () Bool)

(assert (=> b!137636 (= e!89584 e!89583)))

(declare-fun res!65969 () Bool)

(assert (=> b!137636 (=> res!65969 e!89583)))

(assert (=> b!137636 (= res!65969 (= (h!2301 (toList!845 lt!71377)) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137637 () Bool)

(assert (=> b!137637 (= e!89583 (contains!891 (t!6179 (toList!845 lt!71377)) (ite (or c!25552 c!25553) (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (= (and d!43251 res!65968) b!137636))

(assert (= (and b!137636 (not res!65969)) b!137637))

(declare-fun m!164819 () Bool)

(assert (=> d!43251 m!164819))

(declare-fun m!164821 () Bool)

(assert (=> d!43251 m!164821))

(declare-fun m!164823 () Bool)

(assert (=> b!137637 m!164823))

(assert (=> b!136693 d!43251))

(declare-fun d!43253 () Bool)

(assert (=> d!43253 (= (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71264)) (v!3226 (getValueByKey!174 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71264)))))

(assert (=> d!42795 d!43253))

(declare-fun b!137641 () Bool)

(declare-fun e!89586 () Option!180)

(assert (=> b!137641 (= e!89586 None!178)))

(declare-fun b!137638 () Bool)

(declare-fun e!89585 () Option!180)

(assert (=> b!137638 (= e!89585 (Some!179 (_2!1298 (h!2301 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))))

(declare-fun b!137640 () Bool)

(assert (=> b!137640 (= e!89586 (getValueByKey!174 (t!6179 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) lt!71264))))

(declare-fun c!25846 () Bool)

(declare-fun d!43255 () Bool)

(assert (=> d!43255 (= c!25846 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71264)))))

(assert (=> d!43255 (= (getValueByKey!174 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!71264) e!89585)))

(declare-fun b!137639 () Bool)

(assert (=> b!137639 (= e!89585 e!89586)))

(declare-fun c!25847 () Bool)

(assert (=> b!137639 (= c!25847 (and ((_ is Cons!1695) (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))) (not (= (_1!1298 (h!2301 (toList!845 (+!170 lt!71278 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))) lt!71264))))))

(assert (= (and d!43255 c!25846) b!137638))

(assert (= (and d!43255 (not c!25846)) b!137639))

(assert (= (and b!137639 c!25847) b!137640))

(assert (= (and b!137639 (not c!25847)) b!137641))

(declare-fun m!164825 () Bool)

(assert (=> b!137640 m!164825))

(assert (=> d!42795 d!43255))

(assert (=> b!136743 d!42705))

(declare-fun d!43257 () Bool)

(assert (=> d!43257 (= (get!1502 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3226 (getValueByKey!174 (toList!845 lt!71267) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42727 d!43257))

(assert (=> d!42727 d!42907))

(declare-fun d!43259 () Bool)

(declare-fun e!89587 () Bool)

(assert (=> d!43259 e!89587))

(declare-fun res!65970 () Bool)

(assert (=> d!43259 (=> res!65970 e!89587)))

(declare-fun lt!72047 () Bool)

(assert (=> d!43259 (= res!65970 (not lt!72047))))

(declare-fun lt!72048 () Bool)

(assert (=> d!43259 (= lt!72047 lt!72048)))

(declare-fun lt!72049 () Unit!4281)

(declare-fun e!89588 () Unit!4281)

(assert (=> d!43259 (= lt!72049 e!89588)))

(declare-fun c!25848 () Bool)

(assert (=> d!43259 (= c!25848 lt!72048)))

(assert (=> d!43259 (= lt!72048 (containsKey!177 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> d!43259 (= (contains!888 lt!71501 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!72047)))

(declare-fun b!137642 () Bool)

(declare-fun lt!72046 () Unit!4281)

(assert (=> b!137642 (= e!89588 lt!72046)))

(assert (=> b!137642 (= lt!72046 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(assert (=> b!137642 (isDefined!126 (getValueByKey!174 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137643 () Bool)

(declare-fun Unit!4332 () Unit!4281)

(assert (=> b!137643 (= e!89588 Unit!4332)))

(declare-fun b!137644 () Bool)

(assert (=> b!137644 (= e!89587 (isDefined!126 (getValueByKey!174 (toList!845 lt!71501) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!43259 c!25848) b!137642))

(assert (= (and d!43259 (not c!25848)) b!137643))

(assert (= (and d!43259 (not res!65970)) b!137644))

(declare-fun m!164827 () Bool)

(assert (=> d!43259 m!164827))

(declare-fun m!164829 () Bool)

(assert (=> b!137642 m!164829))

(assert (=> b!137642 m!163183))

(assert (=> b!137642 m!163183))

(declare-fun m!164831 () Bool)

(assert (=> b!137642 m!164831))

(assert (=> b!137644 m!163183))

(assert (=> b!137644 m!163183))

(assert (=> b!137644 m!164831))

(assert (=> d!42775 d!43259))

(declare-fun b!137648 () Bool)

(declare-fun e!89590 () Option!180)

(assert (=> b!137648 (= e!89590 None!178)))

(declare-fun b!137645 () Bool)

(declare-fun e!89589 () Option!180)

(assert (=> b!137645 (= e!89589 (Some!179 (_2!1298 (h!2301 lt!71498))))))

(declare-fun b!137647 () Bool)

(assert (=> b!137647 (= e!89590 (getValueByKey!174 (t!6179 lt!71498) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!43261 () Bool)

(declare-fun c!25849 () Bool)

(assert (=> d!43261 (= c!25849 (and ((_ is Cons!1695) lt!71498) (= (_1!1298 (h!2301 lt!71498)) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43261 (= (getValueByKey!174 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89589)))

(declare-fun b!137646 () Bool)

(assert (=> b!137646 (= e!89589 e!89590)))

(declare-fun c!25850 () Bool)

(assert (=> b!137646 (= c!25850 (and ((_ is Cons!1695) lt!71498) (not (= (_1!1298 (h!2301 lt!71498)) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43261 c!25849) b!137645))

(assert (= (and d!43261 (not c!25849)) b!137646))

(assert (= (and b!137646 c!25850) b!137647))

(assert (= (and b!137646 (not c!25850)) b!137648))

(declare-fun m!164833 () Bool)

(assert (=> b!137647 m!164833))

(assert (=> d!42775 d!43261))

(declare-fun d!43263 () Bool)

(assert (=> d!43263 (= (getValueByKey!174 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) (Some!179 (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun lt!72050 () Unit!4281)

(assert (=> d!43263 (= lt!72050 (choose!847 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun e!89591 () Bool)

(assert (=> d!43263 e!89591))

(declare-fun res!65971 () Bool)

(assert (=> d!43263 (=> (not res!65971) (not e!89591))))

(assert (=> d!43263 (= res!65971 (isStrictlySorted!310 lt!71498))))

(assert (=> d!43263 (= (lemmaContainsTupThenGetReturnValue!89 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!72050)))

(declare-fun b!137649 () Bool)

(declare-fun res!65972 () Bool)

(assert (=> b!137649 (=> (not res!65972) (not e!89591))))

(assert (=> b!137649 (= res!65972 (containsKey!177 lt!71498 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137650 () Bool)

(assert (=> b!137650 (= e!89591 (contains!891 lt!71498 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (= (and d!43263 res!65971) b!137649))

(assert (= (and b!137649 res!65972) b!137650))

(assert (=> d!43263 m!163177))

(declare-fun m!164835 () Bool)

(assert (=> d!43263 m!164835))

(declare-fun m!164837 () Bool)

(assert (=> d!43263 m!164837))

(declare-fun m!164839 () Bool)

(assert (=> b!137649 m!164839))

(declare-fun m!164841 () Bool)

(assert (=> b!137650 m!164841))

(assert (=> d!42775 d!43263))

(declare-fun c!25853 () Bool)

(declare-fun b!137651 () Bool)

(assert (=> b!137651 (= c!25853 (and ((_ is Cons!1695) (toList!845 lt!71272)) (bvsgt (_1!1298 (h!2301 (toList!845 lt!71272))) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun e!89593 () List!1699)

(declare-fun e!89594 () List!1699)

(assert (=> b!137651 (= e!89593 e!89594)))

(declare-fun lt!72051 () List!1699)

(declare-fun b!137652 () Bool)

(declare-fun e!89595 () Bool)

(assert (=> b!137652 (= e!89595 (contains!891 lt!72051 (tuple2!2575 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun bm!15149 () Bool)

(declare-fun call!15154 () List!1699)

(declare-fun call!15152 () List!1699)

(assert (=> bm!15149 (= call!15154 call!15152)))

(declare-fun b!137653 () Bool)

(declare-fun e!89596 () List!1699)

(assert (=> b!137653 (= e!89596 e!89593)))

(declare-fun c!25851 () Bool)

(assert (=> b!137653 (= c!25851 (and ((_ is Cons!1695) (toList!845 lt!71272)) (= (_1!1298 (h!2301 (toList!845 lt!71272))) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(declare-fun d!43265 () Bool)

(assert (=> d!43265 e!89595))

(declare-fun res!65973 () Bool)

(assert (=> d!43265 (=> (not res!65973) (not e!89595))))

(assert (=> d!43265 (= res!65973 (isStrictlySorted!310 lt!72051))))

(assert (=> d!43265 (= lt!72051 e!89596)))

(declare-fun c!25854 () Bool)

(assert (=> d!43265 (= c!25854 (and ((_ is Cons!1695) (toList!845 lt!71272)) (bvslt (_1!1298 (h!2301 (toList!845 lt!71272))) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43265 (isStrictlySorted!310 (toList!845 lt!71272))))

(assert (=> d!43265 (= (insertStrictlySorted!92 (toList!845 lt!71272) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))) lt!72051)))

(declare-fun e!89592 () List!1699)

(declare-fun b!137654 () Bool)

(assert (=> b!137654 (= e!89592 (ite c!25851 (t!6179 (toList!845 lt!71272)) (ite c!25853 (Cons!1695 (h!2301 (toList!845 lt!71272)) (t!6179 (toList!845 lt!71272))) Nil!1696)))))

(declare-fun b!137655 () Bool)

(assert (=> b!137655 (= e!89594 call!15154)))

(declare-fun bm!15150 () Bool)

(declare-fun call!15153 () List!1699)

(assert (=> bm!15150 (= call!15152 call!15153)))

(declare-fun b!137656 () Bool)

(declare-fun res!65974 () Bool)

(assert (=> b!137656 (=> (not res!65974) (not e!89595))))

(assert (=> b!137656 (= res!65974 (containsKey!177 lt!72051 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137657 () Bool)

(assert (=> b!137657 (= e!89594 call!15154)))

(declare-fun bm!15151 () Bool)

(assert (=> bm!15151 (= call!15153 ($colon$colon!92 e!89592 (ite c!25854 (h!2301 (toList!845 lt!71272)) (tuple2!2575 (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(declare-fun c!25852 () Bool)

(assert (=> bm!15151 (= c!25852 c!25854)))

(declare-fun b!137658 () Bool)

(assert (=> b!137658 (= e!89596 call!15153)))

(declare-fun b!137659 () Bool)

(assert (=> b!137659 (= e!89592 (insertStrictlySorted!92 (t!6179 (toList!845 lt!71272)) (_1!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) (_2!1298 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun b!137660 () Bool)

(assert (=> b!137660 (= e!89593 call!15152)))

(assert (= (and d!43265 c!25854) b!137658))

(assert (= (and d!43265 (not c!25854)) b!137653))

(assert (= (and b!137653 c!25851) b!137660))

(assert (= (and b!137653 (not c!25851)) b!137651))

(assert (= (and b!137651 c!25853) b!137657))

(assert (= (and b!137651 (not c!25853)) b!137655))

(assert (= (or b!137657 b!137655) bm!15149))

(assert (= (or b!137660 bm!15149) bm!15150))

(assert (= (or b!137658 bm!15150) bm!15151))

(assert (= (and bm!15151 c!25852) b!137659))

(assert (= (and bm!15151 (not c!25852)) b!137654))

(assert (= (and d!43265 res!65973) b!137656))

(assert (= (and b!137656 res!65974) b!137652))

(declare-fun m!164843 () Bool)

(assert (=> d!43265 m!164843))

(declare-fun m!164845 () Bool)

(assert (=> d!43265 m!164845))

(declare-fun m!164847 () Bool)

(assert (=> b!137659 m!164847))

(declare-fun m!164849 () Bool)

(assert (=> bm!15151 m!164849))

(declare-fun m!164851 () Bool)

(assert (=> b!137652 m!164851))

(declare-fun m!164853 () Bool)

(assert (=> b!137656 m!164853))

(assert (=> d!42775 d!43265))

(declare-fun d!43267 () Bool)

(assert (=> d!43267 (isDefined!126 (getValueByKey!174 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!72052 () Unit!4281)

(assert (=> d!43267 (= lt!72052 (choose!843 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!89597 () Bool)

(assert (=> d!43267 e!89597))

(declare-fun res!65975 () Bool)

(assert (=> d!43267 (=> (not res!65975) (not e!89597))))

(assert (=> d!43267 (= res!65975 (isStrictlySorted!310 (toList!845 lt!71267)))))

(assert (=> d!43267 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!72052)))

(declare-fun b!137661 () Bool)

(assert (=> b!137661 (= e!89597 (containsKey!177 (toList!845 lt!71267) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!43267 res!65975) b!137661))

(assert (=> d!43267 m!162775))

(assert (=> d!43267 m!162875))

(assert (=> d!43267 m!162875))

(assert (=> d!43267 m!163293))

(assert (=> d!43267 m!162775))

(declare-fun m!164855 () Bool)

(assert (=> d!43267 m!164855))

(assert (=> d!43267 m!163741))

(assert (=> b!137661 m!162775))

(assert (=> b!137661 m!163289))

(assert (=> b!136858 d!43267))

(assert (=> b!136858 d!43009))

(assert (=> b!136858 d!43011))

(assert (=> b!136598 d!42959))

(assert (=> b!136863 d!43061))

(assert (=> b!136863 d!43063))

(declare-fun b!137665 () Bool)

(declare-fun e!89599 () Option!180)

(assert (=> b!137665 (= e!89599 None!178)))

(declare-fun b!137662 () Bool)

(declare-fun e!89598 () Option!180)

(assert (=> b!137662 (= e!89598 (Some!179 (_2!1298 (h!2301 (toList!845 lt!71517)))))))

(declare-fun b!137664 () Bool)

(assert (=> b!137664 (= e!89599 (getValueByKey!174 (t!6179 (toList!845 lt!71517)) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))

(declare-fun d!43269 () Bool)

(declare-fun c!25855 () Bool)

(assert (=> d!43269 (= c!25855 (and ((_ is Cons!1695) (toList!845 lt!71517)) (= (_1!1298 (h!2301 (toList!845 lt!71517))) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992))))))))))

(assert (=> d!43269 (= (getValueByKey!174 (toList!845 lt!71517) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))) e!89598)))

(declare-fun b!137663 () Bool)

(assert (=> b!137663 (= e!89598 e!89599)))

(declare-fun c!25856 () Bool)

(assert (=> b!137663 (= c!25856 (and ((_ is Cons!1695) (toList!845 lt!71517)) (not (= (_1!1298 (h!2301 (toList!845 lt!71517))) (_1!1298 (tuple2!2575 lt!71265 (minValue!2741 (v!3220 (underlying!459 thiss!992)))))))))))

(assert (= (and d!43269 c!25855) b!137662))

(assert (= (and d!43269 (not c!25855)) b!137663))

(assert (= (and b!137663 c!25856) b!137664))

(assert (= (and b!137663 (not c!25856)) b!137665))

(declare-fun m!164857 () Bool)

(assert (=> b!137664 m!164857))

(assert (=> b!136811 d!43269))

(declare-fun b!137666 () Bool)

(declare-fun e!89601 () Bool)

(declare-fun call!15155 () Bool)

(assert (=> b!137666 (= e!89601 call!15155)))

(declare-fun b!137667 () Bool)

(declare-fun e!89602 () Bool)

(assert (=> b!137667 (= e!89602 call!15155)))

(declare-fun b!137668 () Bool)

(assert (=> b!137668 (= e!89601 e!89602)))

(declare-fun lt!72053 () (_ BitVec 64))

(assert (=> b!137668 (= lt!72053 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!72055 () Unit!4281)

(assert (=> b!137668 (= lt!72055 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4641 newMap!16) lt!72053 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!137668 (arrayContainsKey!0 (_keys!4641 newMap!16) lt!72053 #b00000000000000000000000000000000)))

(declare-fun lt!72054 () Unit!4281)

(assert (=> b!137668 (= lt!72054 lt!72055)))

(declare-fun res!65976 () Bool)

(assert (=> b!137668 (= res!65976 (= (seekEntryOrOpen!0 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4641 newMap!16) (mask!7202 newMap!16)) (Found!270 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!137668 (=> (not res!65976) (not e!89602))))

(declare-fun d!43271 () Bool)

(declare-fun res!65977 () Bool)

(declare-fun e!89600 () Bool)

(assert (=> d!43271 (=> res!65977 e!89600)))

(assert (=> d!43271 (= res!65977 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2534 (_keys!4641 newMap!16))))))

(assert (=> d!43271 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4641 newMap!16) (mask!7202 newMap!16)) e!89600)))

(declare-fun b!137669 () Bool)

(assert (=> b!137669 (= e!89600 e!89601)))

(declare-fun c!25857 () Bool)

(assert (=> b!137669 (= c!25857 (validKeyInArray!0 (select (arr!2264 (_keys!4641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!15152 () Bool)

(assert (=> bm!15152 (= call!15155 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(assert (= (and d!43271 (not res!65977)) b!137669))

(assert (= (and b!137669 c!25857) b!137668))

(assert (= (and b!137669 (not c!25857)) b!137666))

(assert (= (and b!137668 res!65976) b!137667))

(assert (= (or b!137667 b!137666) bm!15152))

(assert (=> b!137668 m!163567))

(declare-fun m!164859 () Bool)

(assert (=> b!137668 m!164859))

(declare-fun m!164861 () Bool)

(assert (=> b!137668 m!164861))

(assert (=> b!137668 m!163567))

(declare-fun m!164863 () Bool)

(assert (=> b!137668 m!164863))

(assert (=> b!137669 m!163567))

(assert (=> b!137669 m!163567))

(assert (=> b!137669 m!163571))

(declare-fun m!164865 () Bool)

(assert (=> bm!15152 m!164865))

(assert (=> bm!15040 d!43271))

(declare-fun d!43273 () Bool)

(assert (=> d!43273 (contains!888 (getCurrentListMap!521 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2888 newMap!16)) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))

(assert (=> d!43273 true))

(declare-fun _$16!155 () Unit!4281)

(assert (=> d!43273 (= (choose!840 (_keys!4641 newMap!16) lt!71196 (mask!7202 newMap!16) (extraKeys!2649 newMap!16) (zeroValue!2741 newMap!16) (minValue!2741 newMap!16) (index!3242 lt!71204) (defaultEntry!2888 newMap!16)) _$16!155)))

(declare-fun bs!5794 () Bool)

(assert (= bs!5794 d!43273))

(assert (=> bs!5794 m!162985))

(assert (=> bs!5794 m!162761))

(assert (=> bs!5794 m!162985))

(assert (=> bs!5794 m!162761))

(assert (=> bs!5794 m!162987))

(assert (=> d!42737 d!43273))

(assert (=> d!42737 d!42841))

(declare-fun d!43275 () Bool)

(declare-fun res!65978 () Bool)

(declare-fun e!89603 () Bool)

(assert (=> d!43275 (=> res!65978 e!89603)))

(assert (=> d!43275 (= res!65978 (and ((_ is Cons!1695) (toList!845 call!14967)) (= (_1!1298 (h!2301 (toList!845 call!14967))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))))

(assert (=> d!43275 (= (containsKey!177 (toList!845 call!14967) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))) e!89603)))

(declare-fun b!137670 () Bool)

(declare-fun e!89604 () Bool)

(assert (=> b!137670 (= e!89603 e!89604)))

(declare-fun res!65979 () Bool)

(assert (=> b!137670 (=> (not res!65979) (not e!89604))))

(assert (=> b!137670 (= res!65979 (and (or (not ((_ is Cons!1695) (toList!845 call!14967))) (bvsle (_1!1298 (h!2301 (toList!845 call!14967))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))) ((_ is Cons!1695) (toList!845 call!14967)) (bvslt (_1!1298 (h!2301 (toList!845 call!14967))) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204)))))))

(declare-fun b!137671 () Bool)

(assert (=> b!137671 (= e!89604 (containsKey!177 (t!6179 (toList!845 call!14967)) (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!71204))))))

(assert (= (and d!43275 (not res!65978)) b!137670))

(assert (= (and b!137670 res!65979) b!137671))

(assert (=> b!137671 m!162761))

(declare-fun m!164867 () Bool)

(assert (=> b!137671 m!164867))

(assert (=> d!42735 d!43275))

(declare-fun d!43277 () Bool)

(declare-fun e!89605 () Bool)

(assert (=> d!43277 e!89605))

(declare-fun res!65980 () Bool)

(assert (=> d!43277 (=> res!65980 e!89605)))

(declare-fun lt!72057 () Bool)

(assert (=> d!43277 (= res!65980 (not lt!72057))))

(declare-fun lt!72058 () Bool)

(assert (=> d!43277 (= lt!72057 lt!72058)))

(declare-fun lt!72059 () Unit!4281)

(declare-fun e!89606 () Unit!4281)

(assert (=> d!43277 (= lt!72059 e!89606)))

(declare-fun c!25858 () Bool)

(assert (=> d!43277 (= c!25858 lt!72058)))

(assert (=> d!43277 (= lt!72058 (containsKey!177 (toList!845 lt!71311) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!43277 (= (contains!888 lt!71311 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!72057)))

(declare-fun b!137672 () Bool)

(declare-fun lt!72056 () Unit!4281)

(assert (=> b!137672 (= e!89606 lt!72056)))

(assert (=> b!137672 (= lt!72056 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71311) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!137672 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!137673 () Bool)

(declare-fun Unit!4333 () Unit!4281)

(assert (=> b!137673 (= e!89606 Unit!4333)))

(declare-fun b!137674 () Bool)

(assert (=> b!137674 (= e!89605 (isDefined!126 (getValueByKey!174 (toList!845 lt!71311) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!43277 c!25858) b!137672))

(assert (= (and d!43277 (not c!25858)) b!137673))

(assert (= (and d!43277 (not res!65980)) b!137674))

(assert (=> d!43277 m!162775))

(declare-fun m!164869 () Bool)

(assert (=> d!43277 m!164869))

(assert (=> b!137672 m!162775))

(declare-fun m!164871 () Bool)

(assert (=> b!137672 m!164871))

(assert (=> b!137672 m!162775))

(declare-fun m!164873 () Bool)

(assert (=> b!137672 m!164873))

(assert (=> b!137672 m!164873))

(declare-fun m!164875 () Bool)

(assert (=> b!137672 m!164875))

(assert (=> b!137674 m!162775))

(assert (=> b!137674 m!164873))

(assert (=> b!137674 m!164873))

(assert (=> b!137674 m!164875))

(assert (=> b!136636 d!43277))

(assert (=> d!42799 d!42781))

(assert (=> d!42799 d!42775))

(declare-fun d!43279 () Bool)

(assert (=> d!43279 (contains!888 (+!170 lt!71272 (tuple2!2575 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))))) lt!71273)))

(assert (=> d!43279 true))

(declare-fun _$35!387 () Unit!4281)

(assert (=> d!43279 (= (choose!845 lt!71272 lt!71266 (zeroValue!2741 (v!3220 (underlying!459 thiss!992))) lt!71273) _$35!387)))

(declare-fun bs!5795 () Bool)

(assert (= bs!5795 d!43279))

(assert (=> bs!5795 m!162803))

(assert (=> bs!5795 m!162803))

(assert (=> bs!5795 m!162805))

(assert (=> d!42799 d!43279))

(declare-fun d!43281 () Bool)

(declare-fun e!89607 () Bool)

(assert (=> d!43281 e!89607))

(declare-fun res!65981 () Bool)

(assert (=> d!43281 (=> res!65981 e!89607)))

(declare-fun lt!72061 () Bool)

(assert (=> d!43281 (= res!65981 (not lt!72061))))

(declare-fun lt!72062 () Bool)

(assert (=> d!43281 (= lt!72061 lt!72062)))

(declare-fun lt!72063 () Unit!4281)

(declare-fun e!89608 () Unit!4281)

(assert (=> d!43281 (= lt!72063 e!89608)))

(declare-fun c!25859 () Bool)

(assert (=> d!43281 (= c!25859 lt!72062)))

(assert (=> d!43281 (= lt!72062 (containsKey!177 (toList!845 lt!71272) lt!71273))))

(assert (=> d!43281 (= (contains!888 lt!71272 lt!71273) lt!72061)))

(declare-fun b!137676 () Bool)

(declare-fun lt!72060 () Unit!4281)

(assert (=> b!137676 (= e!89608 lt!72060)))

(assert (=> b!137676 (= lt!72060 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71272) lt!71273))))

(assert (=> b!137676 (isDefined!126 (getValueByKey!174 (toList!845 lt!71272) lt!71273))))

(declare-fun b!137677 () Bool)

(declare-fun Unit!4334 () Unit!4281)

(assert (=> b!137677 (= e!89608 Unit!4334)))

(declare-fun b!137678 () Bool)

(assert (=> b!137678 (= e!89607 (isDefined!126 (getValueByKey!174 (toList!845 lt!71272) lt!71273)))))

(assert (= (and d!43281 c!25859) b!137676))

(assert (= (and d!43281 (not c!25859)) b!137677))

(assert (= (and d!43281 (not res!65981)) b!137678))

(declare-fun m!164877 () Bool)

(assert (=> d!43281 m!164877))

(declare-fun m!164879 () Bool)

(assert (=> b!137676 m!164879))

(declare-fun m!164881 () Bool)

(assert (=> b!137676 m!164881))

(assert (=> b!137676 m!164881))

(declare-fun m!164883 () Bool)

(assert (=> b!137676 m!164883))

(assert (=> b!137678 m!164881))

(assert (=> b!137678 m!164881))

(assert (=> b!137678 m!164883))

(assert (=> d!42799 d!43281))

(declare-fun d!43283 () Bool)

(declare-fun e!89609 () Bool)

(assert (=> d!43283 e!89609))

(declare-fun res!65982 () Bool)

(assert (=> d!43283 (=> res!65982 e!89609)))

(declare-fun lt!72065 () Bool)

(assert (=> d!43283 (= res!65982 (not lt!72065))))

(declare-fun lt!72066 () Bool)

(assert (=> d!43283 (= lt!72065 lt!72066)))

(declare-fun lt!72067 () Unit!4281)

(declare-fun e!89610 () Unit!4281)

(assert (=> d!43283 (= lt!72067 e!89610)))

(declare-fun c!25860 () Bool)

(assert (=> d!43283 (= c!25860 lt!72066)))

(assert (=> d!43283 (= lt!72066 (containsKey!177 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!43283 (= (contains!888 lt!71388 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!72065)))

(declare-fun b!137679 () Bool)

(declare-fun lt!72064 () Unit!4281)

(assert (=> b!137679 (= e!89610 lt!72064)))

(assert (=> b!137679 (= lt!72064 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!137679 (isDefined!126 (getValueByKey!174 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137680 () Bool)

(declare-fun Unit!4335 () Unit!4281)

(assert (=> b!137680 (= e!89610 Unit!4335)))

(declare-fun b!137681 () Bool)

(assert (=> b!137681 (= e!89609 (isDefined!126 (getValueByKey!174 (toList!845 lt!71388) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43283 c!25860) b!137679))

(assert (= (and d!43283 (not c!25860)) b!137680))

(assert (= (and d!43283 (not res!65982)) b!137681))

(declare-fun m!164885 () Bool)

(assert (=> d!43283 m!164885))

(declare-fun m!164887 () Bool)

(assert (=> b!137679 m!164887))

(assert (=> b!137679 m!163085))

(assert (=> b!137679 m!163085))

(declare-fun m!164889 () Bool)

(assert (=> b!137679 m!164889))

(assert (=> b!137681 m!163085))

(assert (=> b!137681 m!163085))

(assert (=> b!137681 m!164889))

(assert (=> d!42757 d!43283))

(declare-fun b!137685 () Bool)

(declare-fun e!89612 () Option!180)

(assert (=> b!137685 (= e!89612 None!178)))

(declare-fun b!137682 () Bool)

(declare-fun e!89611 () Option!180)

(assert (=> b!137682 (= e!89611 (Some!179 (_2!1298 (h!2301 lt!71385))))))

(declare-fun b!137684 () Bool)

(assert (=> b!137684 (= e!89612 (getValueByKey!174 (t!6179 lt!71385) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!25861 () Bool)

(declare-fun d!43285 () Bool)

(assert (=> d!43285 (= c!25861 (and ((_ is Cons!1695) lt!71385) (= (_1!1298 (h!2301 lt!71385)) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!43285 (= (getValueByKey!174 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!89611)))

(declare-fun b!137683 () Bool)

(assert (=> b!137683 (= e!89611 e!89612)))

(declare-fun c!25862 () Bool)

(assert (=> b!137683 (= c!25862 (and ((_ is Cons!1695) lt!71385) (not (= (_1!1298 (h!2301 lt!71385)) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!43285 c!25861) b!137682))

(assert (= (and d!43285 (not c!25861)) b!137683))

(assert (= (and b!137683 c!25862) b!137684))

(assert (= (and b!137683 (not c!25862)) b!137685))

(declare-fun m!164891 () Bool)

(assert (=> b!137684 m!164891))

(assert (=> d!42757 d!43285))

(declare-fun d!43287 () Bool)

(assert (=> d!43287 (= (getValueByKey!174 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!179 (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!72068 () Unit!4281)

(assert (=> d!43287 (= lt!72068 (choose!847 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!89613 () Bool)

(assert (=> d!43287 e!89613))

(declare-fun res!65983 () Bool)

(assert (=> d!43287 (=> (not res!65983) (not e!89613))))

(assert (=> d!43287 (= res!65983 (isStrictlySorted!310 lt!71385))))

(assert (=> d!43287 (= (lemmaContainsTupThenGetReturnValue!89 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!72068)))

(declare-fun b!137686 () Bool)

(declare-fun res!65984 () Bool)

(assert (=> b!137686 (=> (not res!65984) (not e!89613))))

(assert (=> b!137686 (= res!65984 (containsKey!177 lt!71385 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137687 () Bool)

(assert (=> b!137687 (= e!89613 (contains!891 lt!71385 (tuple2!2575 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43287 res!65983) b!137686))

(assert (= (and b!137686 res!65984) b!137687))

(assert (=> d!43287 m!163079))

(declare-fun m!164893 () Bool)

(assert (=> d!43287 m!164893))

(declare-fun m!164895 () Bool)

(assert (=> d!43287 m!164895))

(declare-fun m!164897 () Bool)

(assert (=> b!137686 m!164897))

(declare-fun m!164899 () Bool)

(assert (=> b!137687 m!164899))

(assert (=> d!42757 d!43287))

(declare-fun c!25865 () Bool)

(declare-fun b!137688 () Bool)

(assert (=> b!137688 (= c!25865 (and ((_ is Cons!1695) (toList!845 e!88862)) (bvsgt (_1!1298 (h!2301 (toList!845 e!88862))) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!89615 () List!1699)

(declare-fun e!89616 () List!1699)

(assert (=> b!137688 (= e!89615 e!89616)))

(declare-fun b!137689 () Bool)

(declare-fun lt!72069 () List!1699)

(declare-fun e!89617 () Bool)

(assert (=> b!137689 (= e!89617 (contains!891 lt!72069 (tuple2!2575 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!15153 () Bool)

(declare-fun call!15158 () List!1699)

(declare-fun call!15156 () List!1699)

(assert (=> bm!15153 (= call!15158 call!15156)))

(declare-fun b!137690 () Bool)

(declare-fun e!89618 () List!1699)

(assert (=> b!137690 (= e!89618 e!89615)))

(declare-fun c!25863 () Bool)

(assert (=> b!137690 (= c!25863 (and ((_ is Cons!1695) (toList!845 e!88862)) (= (_1!1298 (h!2301 (toList!845 e!88862))) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!43289 () Bool)

(assert (=> d!43289 e!89617))

(declare-fun res!65985 () Bool)

(assert (=> d!43289 (=> (not res!65985) (not e!89617))))

(assert (=> d!43289 (= res!65985 (isStrictlySorted!310 lt!72069))))

(assert (=> d!43289 (= lt!72069 e!89618)))

(declare-fun c!25866 () Bool)

(assert (=> d!43289 (= c!25866 (and ((_ is Cons!1695) (toList!845 e!88862)) (bvslt (_1!1298 (h!2301 (toList!845 e!88862))) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!43289 (isStrictlySorted!310 (toList!845 e!88862))))

(assert (=> d!43289 (= (insertStrictlySorted!92 (toList!845 e!88862) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!72069)))

(declare-fun e!89614 () List!1699)

(declare-fun b!137691 () Bool)

(assert (=> b!137691 (= e!89614 (ite c!25863 (t!6179 (toList!845 e!88862)) (ite c!25865 (Cons!1695 (h!2301 (toList!845 e!88862)) (t!6179 (toList!845 e!88862))) Nil!1696)))))

(declare-fun b!137692 () Bool)

(assert (=> b!137692 (= e!89616 call!15158)))

(declare-fun bm!15154 () Bool)

(declare-fun call!15157 () List!1699)

(assert (=> bm!15154 (= call!15156 call!15157)))

(declare-fun b!137693 () Bool)

(declare-fun res!65986 () Bool)

(assert (=> b!137693 (=> (not res!65986) (not e!89617))))

(assert (=> b!137693 (= res!65986 (containsKey!177 lt!72069 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137694 () Bool)

(assert (=> b!137694 (= e!89616 call!15158)))

(declare-fun bm!15155 () Bool)

(assert (=> bm!15155 (= call!15157 ($colon$colon!92 e!89614 (ite c!25866 (h!2301 (toList!845 e!88862)) (tuple2!2575 (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!25864 () Bool)

(assert (=> bm!15155 (= c!25864 c!25866)))

(declare-fun b!137695 () Bool)

(assert (=> b!137695 (= e!89618 call!15157)))

(declare-fun b!137696 () Bool)

(assert (=> b!137696 (= e!89614 (insertStrictlySorted!92 (t!6179 (toList!845 e!88862)) (_1!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1298 (ite c!25529 (ite c!25524 (tuple2!2575 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2575 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2575 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (get!1498 (select (arr!2265 (_values!2871 (v!3220 (underlying!459 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137697 () Bool)

(assert (=> b!137697 (= e!89615 call!15156)))

(assert (= (and d!43289 c!25866) b!137695))

(assert (= (and d!43289 (not c!25866)) b!137690))

(assert (= (and b!137690 c!25863) b!137697))

(assert (= (and b!137690 (not c!25863)) b!137688))

(assert (= (and b!137688 c!25865) b!137694))

(assert (= (and b!137688 (not c!25865)) b!137692))

(assert (= (or b!137694 b!137692) bm!15153))

(assert (= (or b!137697 bm!15153) bm!15154))

(assert (= (or b!137695 bm!15154) bm!15155))

(assert (= (and bm!15155 c!25864) b!137696))

(assert (= (and bm!15155 (not c!25864)) b!137691))

(assert (= (and d!43289 res!65985) b!137693))

(assert (= (and b!137693 res!65986) b!137689))

(declare-fun m!164901 () Bool)

(assert (=> d!43289 m!164901))

(declare-fun m!164903 () Bool)

(assert (=> d!43289 m!164903))

(declare-fun m!164905 () Bool)

(assert (=> b!137696 m!164905))

(declare-fun m!164907 () Bool)

(assert (=> bm!15155 m!164907))

(declare-fun m!164909 () Bool)

(assert (=> b!137689 m!164909))

(declare-fun m!164911 () Bool)

(assert (=> b!137693 m!164911))

(assert (=> d!42757 d!43289))

(assert (=> bm!15046 d!42813))

(assert (=> d!42741 d!42841))

(declare-fun d!43291 () Bool)

(declare-fun e!89619 () Bool)

(assert (=> d!43291 e!89619))

(declare-fun res!65987 () Bool)

(assert (=> d!43291 (=> res!65987 e!89619)))

(declare-fun lt!72071 () Bool)

(assert (=> d!43291 (= res!65987 (not lt!72071))))

(declare-fun lt!72072 () Bool)

(assert (=> d!43291 (= lt!72071 lt!72072)))

(declare-fun lt!72073 () Unit!4281)

(declare-fun e!89620 () Unit!4281)

(assert (=> d!43291 (= lt!72073 e!89620)))

(declare-fun c!25867 () Bool)

(assert (=> d!43291 (= c!25867 lt!72072)))

(assert (=> d!43291 (= lt!72072 (containsKey!177 (toList!845 lt!71354) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43291 (= (contains!888 lt!71354 #b1000000000000000000000000000000000000000000000000000000000000000) lt!72071)))

(declare-fun b!137698 () Bool)

(declare-fun lt!72070 () Unit!4281)

(assert (=> b!137698 (= e!89620 lt!72070)))

(assert (=> b!137698 (= lt!72070 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 lt!71354) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137698 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137699 () Bool)

(declare-fun Unit!4336 () Unit!4281)

(assert (=> b!137699 (= e!89620 Unit!4336)))

(declare-fun b!137700 () Bool)

(assert (=> b!137700 (= e!89619 (isDefined!126 (getValueByKey!174 (toList!845 lt!71354) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43291 c!25867) b!137698))

(assert (= (and d!43291 (not c!25867)) b!137699))

(assert (= (and d!43291 (not res!65987)) b!137700))

(declare-fun m!164913 () Bool)

(assert (=> d!43291 m!164913))

(declare-fun m!164915 () Bool)

(assert (=> b!137698 m!164915))

(assert (=> b!137698 m!164649))

(assert (=> b!137698 m!164649))

(declare-fun m!164917 () Bool)

(assert (=> b!137698 m!164917))

(assert (=> b!137700 m!164649))

(assert (=> b!137700 m!164649))

(assert (=> b!137700 m!164917))

(assert (=> bm!15020 d!43291))

(declare-fun d!43293 () Bool)

(declare-fun e!89621 () Bool)

(assert (=> d!43293 e!89621))

(declare-fun res!65988 () Bool)

(assert (=> d!43293 (=> res!65988 e!89621)))

(declare-fun lt!72075 () Bool)

(assert (=> d!43293 (= res!65988 (not lt!72075))))

(declare-fun lt!72076 () Bool)

(assert (=> d!43293 (= lt!72075 lt!72076)))

(declare-fun lt!72077 () Unit!4281)

(declare-fun e!89622 () Unit!4281)

(assert (=> d!43293 (= lt!72077 e!89622)))

(declare-fun c!25868 () Bool)

(assert (=> d!43293 (= c!25868 lt!72076)))

(assert (=> d!43293 (= lt!72076 (containsKey!177 (toList!845 (map!1405 (_2!1299 lt!71467))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> d!43293 (= (contains!888 (map!1405 (_2!1299 lt!71467)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) lt!72075)))

(declare-fun b!137701 () Bool)

(declare-fun lt!72074 () Unit!4281)

(assert (=> b!137701 (= e!89622 lt!72074)))

(assert (=> b!137701 (= lt!72074 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (map!1405 (_2!1299 lt!71467))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(assert (=> b!137701 (isDefined!126 (getValueByKey!174 (toList!845 (map!1405 (_2!1299 lt!71467))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!137702 () Bool)

(declare-fun Unit!4337 () Unit!4281)

(assert (=> b!137702 (= e!89622 Unit!4337)))

(declare-fun b!137703 () Bool)

(assert (=> b!137703 (= e!89621 (isDefined!126 (getValueByKey!174 (toList!845 (map!1405 (_2!1299 lt!71467))) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355))))))

(assert (= (and d!43293 c!25868) b!137701))

(assert (= (and d!43293 (not c!25868)) b!137702))

(assert (= (and d!43293 (not res!65988)) b!137703))

(assert (=> d!43293 m!162605))

(declare-fun m!164919 () Bool)

(assert (=> d!43293 m!164919))

(assert (=> b!137701 m!162605))

(declare-fun m!164921 () Bool)

(assert (=> b!137701 m!164921))

(assert (=> b!137701 m!162605))

(declare-fun m!164923 () Bool)

(assert (=> b!137701 m!164923))

(assert (=> b!137701 m!164923))

(declare-fun m!164925 () Bool)

(assert (=> b!137701 m!164925))

(assert (=> b!137703 m!162605))

(assert (=> b!137703 m!164923))

(assert (=> b!137703 m!164923))

(assert (=> b!137703 m!164925))

(assert (=> b!136758 d!43293))

(assert (=> b!136758 d!42881))

(declare-fun d!43295 () Bool)

(assert (=> d!43295 (= (apply!117 (+!170 lt!71333 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) lt!71319) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71333 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))) lt!71319)))))

(declare-fun bs!5796 () Bool)

(assert (= bs!5796 d!43295))

(declare-fun m!164927 () Bool)

(assert (=> bs!5796 m!164927))

(assert (=> bs!5796 m!164927))

(declare-fun m!164929 () Bool)

(assert (=> bs!5796 m!164929))

(assert (=> b!136647 d!43295))

(declare-fun d!43297 () Bool)

(declare-fun e!89623 () Bool)

(assert (=> d!43297 e!89623))

(declare-fun res!65989 () Bool)

(assert (=> d!43297 (=> res!65989 e!89623)))

(declare-fun lt!72079 () Bool)

(assert (=> d!43297 (= res!65989 (not lt!72079))))

(declare-fun lt!72080 () Bool)

(assert (=> d!43297 (= lt!72079 lt!72080)))

(declare-fun lt!72081 () Unit!4281)

(declare-fun e!89624 () Unit!4281)

(assert (=> d!43297 (= lt!72081 e!89624)))

(declare-fun c!25869 () Bool)

(assert (=> d!43297 (= c!25869 lt!72080)))

(assert (=> d!43297 (= lt!72080 (containsKey!177 (toList!845 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) lt!71328))))

(assert (=> d!43297 (= (contains!888 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) lt!71328) lt!72079)))

(declare-fun b!137704 () Bool)

(declare-fun lt!72078 () Unit!4281)

(assert (=> b!137704 (= e!89624 lt!72078)))

(assert (=> b!137704 (= lt!72078 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!845 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) lt!71328))))

(assert (=> b!137704 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) lt!71328))))

(declare-fun b!137705 () Bool)

(declare-fun Unit!4338 () Unit!4281)

(assert (=> b!137705 (= e!89624 Unit!4338)))

(declare-fun b!137706 () Bool)

(assert (=> b!137706 (= e!89623 (isDefined!126 (getValueByKey!174 (toList!845 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) lt!71328)))))

(assert (= (and d!43297 c!25869) b!137704))

(assert (= (and d!43297 (not c!25869)) b!137705))

(assert (= (and d!43297 (not res!65989)) b!137706))

(declare-fun m!164931 () Bool)

(assert (=> d!43297 m!164931))

(declare-fun m!164933 () Bool)

(assert (=> b!137704 m!164933))

(declare-fun m!164935 () Bool)

(assert (=> b!137704 m!164935))

(assert (=> b!137704 m!164935))

(declare-fun m!164937 () Bool)

(assert (=> b!137704 m!164937))

(assert (=> b!137706 m!164935))

(assert (=> b!137706 m!164935))

(assert (=> b!137706 m!164937))

(assert (=> b!136647 d!43297))

(declare-fun d!43299 () Bool)

(assert (=> d!43299 (= (apply!117 (+!170 lt!71317 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) lt!71329) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71317 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))) lt!71329)))))

(declare-fun bs!5797 () Bool)

(assert (= bs!5797 d!43299))

(declare-fun m!164939 () Bool)

(assert (=> bs!5797 m!164939))

(assert (=> bs!5797 m!164939))

(declare-fun m!164941 () Bool)

(assert (=> bs!5797 m!164941))

(assert (=> b!136647 d!43299))

(declare-fun d!43301 () Bool)

(assert (=> d!43301 (= (apply!117 lt!71333 lt!71319) (get!1502 (getValueByKey!174 (toList!845 lt!71333) lt!71319)))))

(declare-fun bs!5798 () Bool)

(assert (= bs!5798 d!43301))

(declare-fun m!164943 () Bool)

(assert (=> bs!5798 m!164943))

(assert (=> bs!5798 m!164943))

(declare-fun m!164945 () Bool)

(assert (=> bs!5798 m!164945))

(assert (=> b!136647 d!43301))

(assert (=> b!136647 d!42939))

(declare-fun d!43303 () Bool)

(assert (=> d!43303 (= (apply!117 lt!71317 lt!71329) (get!1502 (getValueByKey!174 (toList!845 lt!71317) lt!71329)))))

(declare-fun bs!5799 () Bool)

(assert (= bs!5799 d!43303))

(declare-fun m!164947 () Bool)

(assert (=> bs!5799 m!164947))

(assert (=> bs!5799 m!164947))

(declare-fun m!164949 () Bool)

(assert (=> bs!5799 m!164949))

(assert (=> b!136647 d!43303))

(declare-fun d!43305 () Bool)

(assert (=> d!43305 (= (apply!117 (+!170 lt!71312 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) lt!71313) (get!1502 (getValueByKey!174 (toList!845 (+!170 lt!71312 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))) lt!71313)))))

(declare-fun bs!5800 () Bool)

(assert (= bs!5800 d!43305))

(declare-fun m!164951 () Bool)

(assert (=> bs!5800 m!164951))

(assert (=> bs!5800 m!164951))

(declare-fun m!164953 () Bool)

(assert (=> bs!5800 m!164953))

(assert (=> b!136647 d!43305))

(declare-fun d!43307 () Bool)

(assert (=> d!43307 (contains!888 (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) lt!71328)))

(declare-fun lt!72082 () Unit!4281)

(assert (=> d!43307 (= lt!72082 (choose!845 lt!71327 lt!71321 (zeroValue!2741 newMap!16) lt!71328))))

(assert (=> d!43307 (contains!888 lt!71327 lt!71328)))

(assert (=> d!43307 (= (addStillContains!93 lt!71327 lt!71321 (zeroValue!2741 newMap!16) lt!71328) lt!72082)))

(declare-fun bs!5801 () Bool)

(assert (= bs!5801 d!43307))

(assert (=> bs!5801 m!162941))

(assert (=> bs!5801 m!162941))

(assert (=> bs!5801 m!162943))

(declare-fun m!164955 () Bool)

(assert (=> bs!5801 m!164955))

(declare-fun m!164957 () Bool)

(assert (=> bs!5801 m!164957))

(assert (=> b!136647 d!43307))

(declare-fun d!43309 () Bool)

(declare-fun e!89625 () Bool)

(assert (=> d!43309 e!89625))

(declare-fun res!65991 () Bool)

(assert (=> d!43309 (=> (not res!65991) (not e!89625))))

(declare-fun lt!72086 () ListLongMap!1659)

(assert (=> d!43309 (= res!65991 (contains!888 lt!72086 (_1!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))))))

(declare-fun lt!72083 () List!1699)

(assert (=> d!43309 (= lt!72086 (ListLongMap!1660 lt!72083))))

(declare-fun lt!72084 () Unit!4281)

(declare-fun lt!72085 () Unit!4281)

(assert (=> d!43309 (= lt!72084 lt!72085)))

(assert (=> d!43309 (= (getValueByKey!174 lt!72083 (_1!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43309 (= lt!72085 (lemmaContainsTupThenGetReturnValue!89 lt!72083 (_1!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43309 (= lt!72083 (insertStrictlySorted!92 (toList!845 lt!71312) (_1!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43309 (= (+!170 lt!71312 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) lt!72086)))

(declare-fun b!137707 () Bool)

(declare-fun res!65990 () Bool)

(assert (=> b!137707 (=> (not res!65990) (not e!89625))))

(assert (=> b!137707 (= res!65990 (= (getValueByKey!174 (toList!845 lt!72086) (_1!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))))))))

(declare-fun b!137708 () Bool)

(assert (=> b!137708 (= e!89625 (contains!891 (toList!845 lt!72086) (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))))))

(assert (= (and d!43309 res!65991) b!137707))

(assert (= (and b!137707 res!65990) b!137708))

(declare-fun m!164959 () Bool)

(assert (=> d!43309 m!164959))

(declare-fun m!164961 () Bool)

(assert (=> d!43309 m!164961))

(declare-fun m!164963 () Bool)

(assert (=> d!43309 m!164963))

(declare-fun m!164965 () Bool)

(assert (=> d!43309 m!164965))

(declare-fun m!164967 () Bool)

(assert (=> b!137707 m!164967))

(declare-fun m!164969 () Bool)

(assert (=> b!137708 m!164969))

(assert (=> b!136647 d!43309))

(declare-fun d!43311 () Bool)

(assert (=> d!43311 (= (apply!117 (+!170 lt!71333 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) lt!71319) (apply!117 lt!71333 lt!71319))))

(declare-fun lt!72087 () Unit!4281)

(assert (=> d!43311 (= lt!72087 (choose!844 lt!71333 lt!71320 (minValue!2741 newMap!16) lt!71319))))

(declare-fun e!89626 () Bool)

(assert (=> d!43311 e!89626))

(declare-fun res!65992 () Bool)

(assert (=> d!43311 (=> (not res!65992) (not e!89626))))

(assert (=> d!43311 (= res!65992 (contains!888 lt!71333 lt!71319))))

(assert (=> d!43311 (= (addApplyDifferent!93 lt!71333 lt!71320 (minValue!2741 newMap!16) lt!71319) lt!72087)))

(declare-fun b!137709 () Bool)

(assert (=> b!137709 (= e!89626 (not (= lt!71319 lt!71320)))))

(assert (= (and d!43311 res!65992) b!137709))

(assert (=> d!43311 m!162931))

(assert (=> d!43311 m!162935))

(assert (=> d!43311 m!162935))

(assert (=> d!43311 m!162937))

(declare-fun m!164971 () Bool)

(assert (=> d!43311 m!164971))

(declare-fun m!164973 () Bool)

(assert (=> d!43311 m!164973))

(assert (=> b!136647 d!43311))

(declare-fun d!43313 () Bool)

(declare-fun e!89627 () Bool)

(assert (=> d!43313 e!89627))

(declare-fun res!65994 () Bool)

(assert (=> d!43313 (=> (not res!65994) (not e!89627))))

(declare-fun lt!72091 () ListLongMap!1659)

(assert (=> d!43313 (= res!65994 (contains!888 lt!72091 (_1!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))))))

(declare-fun lt!72088 () List!1699)

(assert (=> d!43313 (= lt!72091 (ListLongMap!1660 lt!72088))))

(declare-fun lt!72089 () Unit!4281)

(declare-fun lt!72090 () Unit!4281)

(assert (=> d!43313 (= lt!72089 lt!72090)))

(assert (=> d!43313 (= (getValueByKey!174 lt!72088 (_1!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))))))

(assert (=> d!43313 (= lt!72090 (lemmaContainsTupThenGetReturnValue!89 lt!72088 (_1!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))))))

(assert (=> d!43313 (= lt!72088 (insertStrictlySorted!92 (toList!845 lt!71333) (_1!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))))))

(assert (=> d!43313 (= (+!170 lt!71333 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))) lt!72091)))

(declare-fun b!137710 () Bool)

(declare-fun res!65993 () Bool)

(assert (=> b!137710 (=> (not res!65993) (not e!89627))))

(assert (=> b!137710 (= res!65993 (= (getValueByKey!174 (toList!845 lt!72091) (_1!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71320 (minValue!2741 newMap!16))))))))

(declare-fun b!137711 () Bool)

(assert (=> b!137711 (= e!89627 (contains!891 (toList!845 lt!72091) (tuple2!2575 lt!71320 (minValue!2741 newMap!16))))))

(assert (= (and d!43313 res!65994) b!137710))

(assert (= (and b!137710 res!65993) b!137711))

(declare-fun m!164975 () Bool)

(assert (=> d!43313 m!164975))

(declare-fun m!164977 () Bool)

(assert (=> d!43313 m!164977))

(declare-fun m!164979 () Bool)

(assert (=> d!43313 m!164979))

(declare-fun m!164981 () Bool)

(assert (=> d!43313 m!164981))

(declare-fun m!164983 () Bool)

(assert (=> b!137710 m!164983))

(declare-fun m!164985 () Bool)

(assert (=> b!137711 m!164985))

(assert (=> b!136647 d!43313))

(declare-fun d!43315 () Bool)

(declare-fun e!89628 () Bool)

(assert (=> d!43315 e!89628))

(declare-fun res!65996 () Bool)

(assert (=> d!43315 (=> (not res!65996) (not e!89628))))

(declare-fun lt!72095 () ListLongMap!1659)

(assert (=> d!43315 (= res!65996 (contains!888 lt!72095 (_1!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))))))

(declare-fun lt!72092 () List!1699)

(assert (=> d!43315 (= lt!72095 (ListLongMap!1660 lt!72092))))

(declare-fun lt!72093 () Unit!4281)

(declare-fun lt!72094 () Unit!4281)

(assert (=> d!43315 (= lt!72093 lt!72094)))

(assert (=> d!43315 (= (getValueByKey!174 lt!72092 (_1!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))))))

(assert (=> d!43315 (= lt!72094 (lemmaContainsTupThenGetReturnValue!89 lt!72092 (_1!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))))))

(assert (=> d!43315 (= lt!72092 (insertStrictlySorted!92 (toList!845 lt!71317) (_1!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))))))

(assert (=> d!43315 (= (+!170 lt!71317 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) lt!72095)))

(declare-fun b!137712 () Bool)

(declare-fun res!65995 () Bool)

(assert (=> b!137712 (=> (not res!65995) (not e!89628))))

(assert (=> b!137712 (= res!65995 (= (getValueByKey!174 (toList!845 lt!72095) (_1!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))))))))

(declare-fun b!137713 () Bool)

(assert (=> b!137713 (= e!89628 (contains!891 (toList!845 lt!72095) (tuple2!2575 lt!71323 (minValue!2741 newMap!16))))))

(assert (= (and d!43315 res!65996) b!137712))

(assert (= (and b!137712 res!65995) b!137713))

(declare-fun m!164987 () Bool)

(assert (=> d!43315 m!164987))

(declare-fun m!164989 () Bool)

(assert (=> d!43315 m!164989))

(declare-fun m!164991 () Bool)

(assert (=> d!43315 m!164991))

(declare-fun m!164993 () Bool)

(assert (=> d!43315 m!164993))

(declare-fun m!164995 () Bool)

(assert (=> b!137712 m!164995))

(declare-fun m!164997 () Bool)

(assert (=> b!137713 m!164997))

(assert (=> b!136647 d!43315))

(declare-fun d!43317 () Bool)

(assert (=> d!43317 (= (apply!117 (+!170 lt!71317 (tuple2!2575 lt!71323 (minValue!2741 newMap!16))) lt!71329) (apply!117 lt!71317 lt!71329))))

(declare-fun lt!72096 () Unit!4281)

(assert (=> d!43317 (= lt!72096 (choose!844 lt!71317 lt!71323 (minValue!2741 newMap!16) lt!71329))))

(declare-fun e!89629 () Bool)

(assert (=> d!43317 e!89629))

(declare-fun res!65997 () Bool)

(assert (=> d!43317 (=> (not res!65997) (not e!89629))))

(assert (=> d!43317 (= res!65997 (contains!888 lt!71317 lt!71329))))

(assert (=> d!43317 (= (addApplyDifferent!93 lt!71317 lt!71323 (minValue!2741 newMap!16) lt!71329) lt!72096)))

(declare-fun b!137714 () Bool)

(assert (=> b!137714 (= e!89629 (not (= lt!71329 lt!71323)))))

(assert (= (and d!43317 res!65997) b!137714))

(assert (=> d!43317 m!162933))

(assert (=> d!43317 m!162939))

(assert (=> d!43317 m!162939))

(assert (=> d!43317 m!162949))

(declare-fun m!164999 () Bool)

(assert (=> d!43317 m!164999))

(declare-fun m!165001 () Bool)

(assert (=> d!43317 m!165001))

(assert (=> b!136647 d!43317))

(declare-fun d!43319 () Bool)

(assert (=> d!43319 (= (apply!117 lt!71312 lt!71313) (get!1502 (getValueByKey!174 (toList!845 lt!71312) lt!71313)))))

(declare-fun bs!5802 () Bool)

(assert (= bs!5802 d!43319))

(declare-fun m!165003 () Bool)

(assert (=> bs!5802 m!165003))

(assert (=> bs!5802 m!165003))

(declare-fun m!165005 () Bool)

(assert (=> bs!5802 m!165005))

(assert (=> b!136647 d!43319))

(declare-fun d!43321 () Bool)

(assert (=> d!43321 (= (apply!117 (+!170 lt!71312 (tuple2!2575 lt!71315 (zeroValue!2741 newMap!16))) lt!71313) (apply!117 lt!71312 lt!71313))))

(declare-fun lt!72097 () Unit!4281)

(assert (=> d!43321 (= lt!72097 (choose!844 lt!71312 lt!71315 (zeroValue!2741 newMap!16) lt!71313))))

(declare-fun e!89630 () Bool)

(assert (=> d!43321 e!89630))

(declare-fun res!65998 () Bool)

(assert (=> d!43321 (=> (not res!65998) (not e!89630))))

(assert (=> d!43321 (= res!65998 (contains!888 lt!71312 lt!71313))))

(assert (=> d!43321 (= (addApplyDifferent!93 lt!71312 lt!71315 (zeroValue!2741 newMap!16) lt!71313) lt!72097)))

(declare-fun b!137715 () Bool)

(assert (=> b!137715 (= e!89630 (not (= lt!71313 lt!71315)))))

(assert (= (and d!43321 res!65998) b!137715))

(assert (=> d!43321 m!162945))

(assert (=> d!43321 m!162925))

(assert (=> d!43321 m!162925))

(assert (=> d!43321 m!162927))

(declare-fun m!165007 () Bool)

(assert (=> d!43321 m!165007))

(declare-fun m!165009 () Bool)

(assert (=> d!43321 m!165009))

(assert (=> b!136647 d!43321))

(declare-fun d!43323 () Bool)

(declare-fun e!89631 () Bool)

(assert (=> d!43323 e!89631))

(declare-fun res!66000 () Bool)

(assert (=> d!43323 (=> (not res!66000) (not e!89631))))

(declare-fun lt!72101 () ListLongMap!1659)

(assert (=> d!43323 (= res!66000 (contains!888 lt!72101 (_1!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))))))

(declare-fun lt!72098 () List!1699)

(assert (=> d!43323 (= lt!72101 (ListLongMap!1660 lt!72098))))

(declare-fun lt!72099 () Unit!4281)

(declare-fun lt!72100 () Unit!4281)

(assert (=> d!43323 (= lt!72099 lt!72100)))

(assert (=> d!43323 (= (getValueByKey!174 lt!72098 (_1!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43323 (= lt!72100 (lemmaContainsTupThenGetReturnValue!89 lt!72098 (_1!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43323 (= lt!72098 (insertStrictlySorted!92 (toList!845 lt!71327) (_1!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) (_2!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))))))

(assert (=> d!43323 (= (+!170 lt!71327 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))) lt!72101)))

(declare-fun b!137716 () Bool)

(declare-fun res!65999 () Bool)

(assert (=> b!137716 (=> (not res!65999) (not e!89631))))

(assert (=> b!137716 (= res!65999 (= (getValueByKey!174 (toList!845 lt!72101) (_1!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16)))) (Some!179 (_2!1298 (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))))))))

(declare-fun b!137717 () Bool)

(assert (=> b!137717 (= e!89631 (contains!891 (toList!845 lt!72101) (tuple2!2575 lt!71321 (zeroValue!2741 newMap!16))))))

(assert (= (and d!43323 res!66000) b!137716))

(assert (= (and b!137716 res!65999) b!137717))

(declare-fun m!165011 () Bool)

(assert (=> d!43323 m!165011))

(declare-fun m!165013 () Bool)

(assert (=> d!43323 m!165013))

(declare-fun m!165015 () Bool)

(assert (=> d!43323 m!165015))

(declare-fun m!165017 () Bool)

(assert (=> d!43323 m!165017))

(declare-fun m!165019 () Bool)

(assert (=> b!137716 m!165019))

(declare-fun m!165021 () Bool)

(assert (=> b!137717 m!165021))

(assert (=> b!136647 d!43323))

(declare-fun b!137720 () Bool)

(declare-fun res!66004 () Bool)

(declare-fun e!89632 () Bool)

(assert (=> b!137720 (=> (not res!66004) (not e!89632))))

(assert (=> b!137720 (= res!66004 (= (size!2540 (_2!1299 lt!71193)) (bvadd (_size!603 (_2!1299 lt!71193)) (bvsdiv (bvadd (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!137718 () Bool)

(declare-fun res!66001 () Bool)

(assert (=> b!137718 (=> (not res!66001) (not e!89632))))

(assert (=> b!137718 (= res!66001 (and (= (size!2535 (_values!2871 (_2!1299 lt!71193))) (bvadd (mask!7202 (_2!1299 lt!71193)) #b00000000000000000000000000000001)) (= (size!2534 (_keys!4641 (_2!1299 lt!71193))) (size!2535 (_values!2871 (_2!1299 lt!71193)))) (bvsge (_size!603 (_2!1299 lt!71193)) #b00000000000000000000000000000000) (bvsle (_size!603 (_2!1299 lt!71193)) (bvadd (mask!7202 (_2!1299 lt!71193)) #b00000000000000000000000000000001))))))

(declare-fun d!43325 () Bool)

(declare-fun res!66003 () Bool)

(assert (=> d!43325 (=> (not res!66003) (not e!89632))))

(assert (=> d!43325 (= res!66003 (validMask!0 (mask!7202 (_2!1299 lt!71193))))))

(assert (=> d!43325 (= (simpleValid!93 (_2!1299 lt!71193)) e!89632)))

(declare-fun b!137721 () Bool)

(assert (=> b!137721 (= e!89632 (and (bvsge (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000000) (bvsle (extraKeys!2649 (_2!1299 lt!71193)) #b00000000000000000000000000000011) (bvsge (_vacant!603 (_2!1299 lt!71193)) #b00000000000000000000000000000000)))))

(declare-fun b!137719 () Bool)

(declare-fun res!66002 () Bool)

(assert (=> b!137719 (=> (not res!66002) (not e!89632))))

(assert (=> b!137719 (= res!66002 (bvsge (size!2540 (_2!1299 lt!71193)) (_size!603 (_2!1299 lt!71193))))))

(assert (= (and d!43325 res!66003) b!137718))

(assert (= (and b!137718 res!66001) b!137719))

(assert (= (and b!137719 res!66002) b!137720))

(assert (= (and b!137720 res!66004) b!137721))

(declare-fun m!165023 () Bool)

(assert (=> b!137720 m!165023))

(assert (=> d!43325 m!163467))

(assert (=> b!137719 m!165023))

(assert (=> d!42707 d!43325))

(declare-fun b!137734 () Bool)

(declare-fun c!25877 () Bool)

(declare-fun lt!72107 () (_ BitVec 64))

(assert (=> b!137734 (= c!25877 (= lt!72107 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89641 () SeekEntryResult!270)

(declare-fun e!89639 () SeekEntryResult!270)

(assert (=> b!137734 (= e!89641 e!89639)))

(declare-fun b!137735 () Bool)

(declare-fun e!89640 () SeekEntryResult!270)

(assert (=> b!137735 (= e!89640 e!89641)))

(declare-fun c!25876 () Bool)

(assert (=> b!137735 (= c!25876 (= lt!72107 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)))))

(declare-fun b!137736 () Bool)

(assert (=> b!137736 (= e!89639 (seekKeyOrZeroReturnVacant!0 (bvadd (x!15798 lt!71537) #b00000000000000000000000000000001) (nextIndex!0 (index!3243 lt!71537) (bvadd (x!15798 lt!71537) #b00000000000000000000000000000001) (mask!7202 newMap!16)) (index!3243 lt!71537) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)))))

(declare-fun b!137737 () Bool)

(assert (=> b!137737 (= e!89639 (MissingVacant!270 (index!3243 lt!71537)))))

(declare-fun b!137738 () Bool)

(assert (=> b!137738 (= e!89640 Undefined!270)))

(declare-fun lt!72106 () SeekEntryResult!270)

(declare-fun d!43327 () Bool)

(assert (=> d!43327 (and (or ((_ is Undefined!270) lt!72106) (not ((_ is Found!270) lt!72106)) (and (bvsge (index!3242 lt!72106) #b00000000000000000000000000000000) (bvslt (index!3242 lt!72106) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!72106) ((_ is Found!270) lt!72106) (not ((_ is MissingVacant!270) lt!72106)) (not (= (index!3244 lt!72106) (index!3243 lt!71537))) (and (bvsge (index!3244 lt!72106) #b00000000000000000000000000000000) (bvslt (index!3244 lt!72106) (size!2534 (_keys!4641 newMap!16))))) (or ((_ is Undefined!270) lt!72106) (ite ((_ is Found!270) lt!72106) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3242 lt!72106)) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355)) (and ((_ is MissingVacant!270) lt!72106) (= (index!3244 lt!72106) (index!3243 lt!71537)) (= (select (arr!2264 (_keys!4641 newMap!16)) (index!3244 lt!72106)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!43327 (= lt!72106 e!89640)))

(declare-fun c!25878 () Bool)

(assert (=> d!43327 (= c!25878 (bvsge (x!15798 lt!71537) #b01111111111111111111111111111110))))

(assert (=> d!43327 (= lt!72107 (select (arr!2264 (_keys!4641 newMap!16)) (index!3243 lt!71537)))))

(assert (=> d!43327 (validMask!0 (mask!7202 newMap!16))))

(assert (=> d!43327 (= (seekKeyOrZeroReturnVacant!0 (x!15798 lt!71537) (index!3243 lt!71537) (index!3243 lt!71537) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) from!355) (_keys!4641 newMap!16) (mask!7202 newMap!16)) lt!72106)))

(declare-fun b!137739 () Bool)

(assert (=> b!137739 (= e!89641 (Found!270 (index!3243 lt!71537)))))

(assert (= (and d!43327 c!25878) b!137738))

(assert (= (and d!43327 (not c!25878)) b!137735))

(assert (= (and b!137735 c!25876) b!137739))

(assert (= (and b!137735 (not c!25876)) b!137734))

(assert (= (and b!137734 c!25877) b!137737))

(assert (= (and b!137734 (not c!25877)) b!137736))

(declare-fun m!165025 () Bool)

(assert (=> b!137736 m!165025))

(assert (=> b!137736 m!165025))

(assert (=> b!137736 m!162605))

(declare-fun m!165027 () Bool)

(assert (=> b!137736 m!165027))

(declare-fun m!165029 () Bool)

(assert (=> d!43327 m!165029))

(declare-fun m!165031 () Bool)

(assert (=> d!43327 m!165031))

(assert (=> d!43327 m!163285))

(assert (=> d!43327 m!162853))

(assert (=> b!136857 d!43327))

(declare-fun d!43329 () Bool)

(assert (=> d!43329 (= (apply!117 lt!71311 (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1502 (getValueByKey!174 (toList!845 lt!71311) (select (arr!2264 (_keys!4641 (v!3220 (underlying!459 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5803 () Bool)

(assert (= bs!5803 d!43329))

(assert (=> bs!5803 m!162775))

(assert (=> bs!5803 m!164873))

(assert (=> bs!5803 m!164873))

(declare-fun m!165033 () Bool)

(assert (=> bs!5803 m!165033))

(assert (=> b!136632 d!43329))

(assert (=> b!136632 d!42721))

(declare-fun b!137741 () Bool)

(declare-fun e!89642 () Bool)

(assert (=> b!137741 (= e!89642 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4703 () Bool)

(declare-fun mapRes!4703 () Bool)

(assert (=> mapIsEmpty!4703 mapRes!4703))

(declare-fun mapNonEmpty!4703 () Bool)

(declare-fun tp!11309 () Bool)

(declare-fun e!89643 () Bool)

(assert (=> mapNonEmpty!4703 (= mapRes!4703 (and tp!11309 e!89643))))

(declare-fun mapKey!4703 () (_ BitVec 32))

(declare-fun mapRest!4703 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapValue!4703 () ValueCell!1100)

(assert (=> mapNonEmpty!4703 (= mapRest!4702 (store mapRest!4703 mapKey!4703 mapValue!4703))))

(declare-fun b!137740 () Bool)

(assert (=> b!137740 (= e!89643 tp_is_empty!2887)))

(declare-fun condMapEmpty!4703 () Bool)

(declare-fun mapDefault!4703 () ValueCell!1100)

(assert (=> mapNonEmpty!4702 (= condMapEmpty!4703 (= mapRest!4702 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4703)))))

(assert (=> mapNonEmpty!4702 (= tp!11308 (and e!89642 mapRes!4703))))

(assert (= (and mapNonEmpty!4702 condMapEmpty!4703) mapIsEmpty!4703))

(assert (= (and mapNonEmpty!4702 (not condMapEmpty!4703)) mapNonEmpty!4703))

(assert (= (and mapNonEmpty!4703 ((_ is ValueCellFull!1100) mapValue!4703)) b!137740))

(assert (= (and mapNonEmpty!4702 ((_ is ValueCellFull!1100) mapDefault!4703)) b!137741))

(declare-fun m!165035 () Bool)

(assert (=> mapNonEmpty!4703 m!165035))

(declare-fun b!137743 () Bool)

(declare-fun e!89644 () Bool)

(assert (=> b!137743 (= e!89644 tp_is_empty!2887)))

(declare-fun mapIsEmpty!4704 () Bool)

(declare-fun mapRes!4704 () Bool)

(assert (=> mapIsEmpty!4704 mapRes!4704))

(declare-fun mapNonEmpty!4704 () Bool)

(declare-fun tp!11310 () Bool)

(declare-fun e!89645 () Bool)

(assert (=> mapNonEmpty!4704 (= mapRes!4704 (and tp!11310 e!89645))))

(declare-fun mapRest!4704 () (Array (_ BitVec 32) ValueCell!1100))

(declare-fun mapKey!4704 () (_ BitVec 32))

(declare-fun mapValue!4704 () ValueCell!1100)

(assert (=> mapNonEmpty!4704 (= mapRest!4701 (store mapRest!4704 mapKey!4704 mapValue!4704))))

(declare-fun b!137742 () Bool)

(assert (=> b!137742 (= e!89645 tp_is_empty!2887)))

(declare-fun condMapEmpty!4704 () Bool)

(declare-fun mapDefault!4704 () ValueCell!1100)

(assert (=> mapNonEmpty!4701 (= condMapEmpty!4704 (= mapRest!4701 ((as const (Array (_ BitVec 32) ValueCell!1100)) mapDefault!4704)))))

(assert (=> mapNonEmpty!4701 (= tp!11307 (and e!89644 mapRes!4704))))

(assert (= (and mapNonEmpty!4701 condMapEmpty!4704) mapIsEmpty!4704))

(assert (= (and mapNonEmpty!4701 (not condMapEmpty!4704)) mapNonEmpty!4704))

(assert (= (and mapNonEmpty!4704 ((_ is ValueCellFull!1100) mapValue!4704)) b!137742))

(assert (= (and mapNonEmpty!4701 ((_ is ValueCellFull!1100) mapDefault!4704)) b!137743))

(declare-fun m!165037 () Bool)

(assert (=> mapNonEmpty!4704 m!165037))

(declare-fun b_lambda!6159 () Bool)

(assert (= b_lambda!6141 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6159)))

(declare-fun b_lambda!6161 () Bool)

(assert (= b_lambda!6143 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6161)))

(declare-fun b_lambda!6163 () Bool)

(assert (= b_lambda!6151 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6163)))

(declare-fun b_lambda!6165 () Bool)

(assert (= b_lambda!6131 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6165)))

(declare-fun b_lambda!6167 () Bool)

(assert (= b_lambda!6153 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6167)))

(declare-fun b_lambda!6169 () Bool)

(assert (= b_lambda!6147 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6169)))

(declare-fun b_lambda!6171 () Bool)

(assert (= b_lambda!6139 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6171)))

(declare-fun b_lambda!6173 () Bool)

(assert (= b_lambda!6157 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6173)))

(declare-fun b_lambda!6175 () Bool)

(assert (= b_lambda!6149 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6175)))

(declare-fun b_lambda!6177 () Bool)

(assert (= b_lambda!6135 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6177)))

(declare-fun b_lambda!6179 () Bool)

(assert (= b_lambda!6133 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6179)))

(declare-fun b_lambda!6181 () Bool)

(assert (= b_lambda!6137 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6181)))

(declare-fun b_lambda!6183 () Bool)

(assert (= b_lambda!6145 (or (and b!136212 b_free!2941) (and b!136215 b_free!2943 (= (defaultEntry!2888 newMap!16) (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))))) b_lambda!6183)))

(declare-fun b_lambda!6185 () Bool)

(assert (= b_lambda!6155 (or (and b!136212 b_free!2941 (= (defaultEntry!2888 (v!3220 (underlying!459 thiss!992))) (defaultEntry!2888 newMap!16))) (and b!136215 b_free!2943) b_lambda!6185)))

(check-sat (not b!137500) (not b!137090) (not b!137400) (not b!137274) (not bm!15088) (not b!137572) (not b!136993) (not b!137575) (not b!137101) (not b!137336) (not d!43315) (not bm!15142) (not bm!15126) (not bm!15091) (not b!137707) (not b!137004) (not d!42835) (not b!136941) (not d!43175) (not d!43039) (not d!43129) (not b!137394) (not bm!15074) (not b!137428) (not b!137664) (not bm!15102) (not d!42955) (not d!43263) (not b!137596) (not d!43193) (not b_lambda!6161) (not bm!15077) (not b!137364) (not b!137581) (not d!42843) (not d!43311) (not b!137693) (not b!136969) (not b!137398) (not b!137180) (not b!137454) (not d!43059) (not bm!15103) (not d!43093) (not b_lambda!6183) (not d!43095) (not b!137255) (not b!137098) (not b!137063) (not b!137099) (not b!137100) (not d!42899) (not b!137120) (not b!137186) (not d!43143) (not b!137167) (not b!137216) (not b!137585) (not b!137211) (not d!43121) (not b!137026) (not b!137413) (not b!137622) (not b!137588) (not b!137393) (not b!137736) (not b!137465) (not b!136914) (not b!137601) (not b!137701) (not bm!15155) (not d!43313) (not b!137674) (not d!42837) (not bm!15079) (not d!43233) (not b!137320) (not b!137713) (not b!137668) (not b!137431) (not b!137719) (not bm!15062) (not b!137689) (not b!137147) (not b!137508) (not b!137594) (not b!137114) (not d!43179) (not b!136951) (not b!137278) (not b!137051) (not d!43097) (not d!42865) (not b!137444) (not b!137181) (not b!137172) (not d!42947) (not b!137261) (not d!42925) (not d!42957) (not d!43079) (not d!43241) (not b!137270) (not d!43107) (not d!43065) (not b!136937) (not b!137173) (not b!137124) (not b!137460) (not b!137468) (not d!43001) (not b!137451) (not b!137057) (not b!137621) (not b!137495) (not b!136908) (not b!137207) (not b!137617) (not b!136954) (not b_lambda!6177) (not b!137355) (not b!137440) (not b!137202) (not d!43101) (not d!43109) (not d!42881) (not b!137006) (not bm!15097) (not d!43077) (not d!43325) (not d!43303) (not b!137716) (not b!137433) (not b!137504) (not d!43005) (not b!137473) (not d!43119) (not b!136956) (not b!137360) (not b!137681) (not d!42833) (not b!137548) (not b!137252) (not d!43027) (not d!43021) (not b!137485) (not d!43045) (not b!137599) (not d!43299) (not b!137111) (not d!42915) (not b!137509) (not b!137703) (not b_lambda!6159) (not d!42929) (not b_lambda!6127) (not b!137209) (not d!43219) (not d!43235) (not b!137415) (not b!137523) (not d!43153) (not b!137459) (not b!137510) (not b_lambda!6179) (not b!137442) (not b!137222) (not b!137676) (not b!137525) (not d!42871) (not b!137085) (not b!137140) (not b!137650) (not b!137153) (not b!137049) (not b!137437) (not b!137520) (not b!137496) (not b!137555) (not b!137396) (not b!137146) (not b!136989) (not b!137344) (not d!43125) (not b!137159) (not d!43073) (not b!137022) (not b_lambda!6103) (not b!137204) (not d!43019) (not d!43305) (not b!137576) (not d!42981) (not b!136978) (not d!42861) (not d!43115) (not d!43217) (not b!137397) (not b!137142) (not b!137545) (not b!136902) (not b!136905) (not b!137032) (not d!42967) (not b!137624) (not b!137043) (not b!137258) (not b!137064) (not b!137506) (not b!137179) (not b!137557) (not b!137096) (not d!43117) (not b!137706) (not b!137033) (not b!137330) (not b!137488) (not d!42935) (not d!43319) (not b!137637) (not b_lambda!6167) (not b!137474) (not b!137717) (not b!137582) (not d!43291) (not b!137126) (not b!137037) (not b!137565) (not b!137640) (not bm!15113) (not b!137374) (not b!137541) (not d!43127) (not b_lambda!6173) (not b!137069) (not b!137634) (not d!43139) (not d!42829) (not d!42927) (not b!137362) (not b!137423) (not b_lambda!6129) (not b!137213) (not b!137381) (not d!43287) (not d!42847) (not d!43197) (not bm!15125) (not d!42953) (not b!137529) (not b!137512) (not b!137507) (not bm!15140) (not b!137672) (not b!137630) (not b!137480) (not b!136962) (not b!137144) (not b!137023) (not d!43173) (not b!136946) (not b!137649) (not b!137494) (not b_next!2941) (not d!43111) (not b!137182) (not b!137066) (not b!137483) (not b!137418) (not d!43145) (not d!43329) (not b!137532) (not d!43201) (not bm!15067) (not d!42919) (not b!137027) (not d!42903) (not b!137514) (not b!137305) (not b!137346) (not d!43267) (not b!137679) (not b!137019) (not b!137698) (not b!137192) (not b!137700) (not bm!15143) (not d!43037) (not d!43067) (not bm!15127) (not d!43167) (not b!137647) (not bm!15092) (not d!43205) (not d!43091) (not d!43069) (not b!137156) (not bm!15073) (not b!137343) (not d!43231) (not b!137708) (not d!42973) (not b!136915) (not d!43251) (not d!43133) (not d!43221) (not b!137492) (not d!42857) (not b!137603) (not b!137214) (not b!137039) (not d!43163) (not b_lambda!6119) (not d!43055) (not b!136980) (not b!136944) (not d!43041) (not b!136903) (not b!137150) (not b!137154) (not b!137349) (not b_lambda!6171) (not b!137326) (not d!43135) (not b!136997) (not d!43187) (not b!137578) (not b!137642) (not d!43165) (not b_lambda!6165) (not b!137591) (not bm!15110) (not b!137201) (not b!137128) (not d!43243) (not b_lambda!6125) (not b!137136) (not b!137452) (not b!137189) (not b!136976) (not d!42889) (not d!43147) (not d!43223) (not d!42937) (not b!137554) (not b!137241) (not d!42989) (not b!137696) (not b!137316) (not bm!15099) (not d!43209) (not b!137644) (not b!137152) (not b!137035) (not b!137471) (not d!43075) (not b!136952) (not bm!15066) (not b!137102) (not b!137053) (not b!137517) (not d!43237) (not b!137105) (not bm!15071) (not d!43215) (not b!137390) (not d!42863) (not bm!15081) (not b!137684) (not b!137498) (not b!137317) (not b!137060) (not b!137720) (not b!137466) (not b!137678) (not d!43279) (not b!137661) (not d!43259) (not d!42971) (not b!137347) (not b!137659) (not bm!15094) (not b!137093) (not mapNonEmpty!4704) (not d!42951) (not b!137171) (not bm!15122) (not b_next!2943) (not bm!15119) (not b!137334) (not b!137447) (not d!43327) (not d!43281) (not b!137489) (not bm!15064) (not d!42869) (not d!43177) b_and!8539 (not bm!15152) (not d!42961) (not d!42851) (not b_lambda!6181) (not b!137373) (not d!42895) (not d!43277) (not bm!15098) (not d!43131) (not b!137079) (not b!137609) (not d!42873) (not b!137656) (not b!137563) (not d!43307) (not b!137593) (not b!137420) (not d!42901) (not bm!15065) (not d!43033) (not d!43321) (not d!42949) (not b_lambda!6175) (not b!137325) (not b!137113) (not bm!15121) (not d!42997) (not b!137108) (not d!42965) (not d!43161) (not d!43023) (not b!137376) (not b!137522) (not d!42883) (not b_lambda!6123) (not b!137686) (not d!42917) (not b!137097) (not d!42987) (not b!137547) (not b!137462) (not bm!15114) (not b!136987) (not b!137169) (not b!137704) (not d!43051) (not b!137652) (not b_lambda!6107) (not bm!15082) (not b!137511) (not b!137025) (not b!137250) (not b!136960) (not bm!15135) (not b!137048) (not bm!15134) (not b!137515) (not d!43013) (not b!137535) (not b!137614) (not d!42885) (not bm!15085) (not b!137549) (not d!43171) (not b!136986) (not b!137425) (not b!137012) (not b!137253) (not d!43137) (not bm!15131) (not b!137487) (not b!137184) (not bm!15148) (not d!43047) (not d!43297) (not d!43151) (not b!137615) (not b!137502) (not b!137130) (not b!137561) (not b!137168) (not b!137623) (not d!43229) (not b!137476) (not b!137358) (not b!137606) (not bm!15120) (not b!137016) (not d!43295) (not b!137386) (not bm!15115) (not b!137366) (not b!137612) (not d!43141) (not d!42849) (not mapNonEmpty!4703) (not b!137422) (not d!42983) (not d!43239) (not d!43029) (not b!137088) (not b!137671) (not b!137710) (not b!137319) (not bm!15112) (not b!137178) (not bm!15139) (not b!137013) (not b!137711) (not b!137052) (not b_lambda!6185) (not b!137457) (not bm!15072) (not d!43105) (not b_lambda!6163) (not d!42945) (not b!137404) (not b!137145) (not b!137391) (not b!137054) (not b!137559) (not b!137712) (not d!43265) (not b!137356) (not b!137071) (not b!137687) (not b!137199) (not b!137138) (not d!43123) (not b!137165) (not d!43309) (not b!137267) (not b!136981) (not b_lambda!6121) (not b!137350) (not bm!15080) (not b!137540) (not b!137590) (not d!42995) (not b!137081) (not b!136958) (not bm!15093) (not bm!15151) (not d!43293) (not b!137041) (not d!42905) (not bm!15109) (not b!137328) (not bm!15144) (not d!43301) (not b!137579) (not b!136979) (not d!43225) (not b!137573) tp_is_empty!2887 (not b!136995) (not b!137619) (not b!137119) (not d!42939) (not d!43317) (not d!43061) (not d!43017) (not b!137430) (not b!137505) (not b!137078) (not b!137008) (not b!137616) (not bm!15145) (not b!137669) (not b!137570) (not b!137625) (not d!42875) (not d!43227) (not b!137073) (not b!137210) (not bm!15138) (not b!137463) (not b!137061) (not b!137332) (not d!42985) (not d!42877) (not b!137009) (not b!137011) (not d!43009) (not b!137275) (not d!42887) (not d!43289) b_and!8537 (not bm!15108) (not d!43113) (not b!137410) (not b!137402) (not d!43323) (not b!137076) (not b!137015) (not b!137608) (not bm!15089) (not b!137263) (not b!137538) (not b_lambda!6169) (not d!43003) (not b!137203) (not bm!15130) (not b!137260) (not d!42911) (not b!137059) (not d!43283) (not b!136991) (not b!137122) (not d!43273))
(check-sat b_and!8537 b_and!8539 (not b_next!2941) (not b_next!2943))
