; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11654 () Bool)

(assert start!11654)

(declare-fun b!97245 () Bool)

(declare-fun b_free!2425 () Bool)

(declare-fun b_next!2425 () Bool)

(assert (=> b!97245 (= b_free!2425 (not b_next!2425))))

(declare-fun tp!9560 () Bool)

(declare-fun b_and!5957 () Bool)

(assert (=> b!97245 (= tp!9560 b_and!5957)))

(declare-fun b!97251 () Bool)

(declare-fun b_free!2427 () Bool)

(declare-fun b_next!2427 () Bool)

(assert (=> b!97251 (= b_free!2427 (not b_next!2427))))

(declare-fun tp!9558 () Bool)

(declare-fun b_and!5959 () Bool)

(assert (=> b!97251 (= tp!9558 b_and!5959)))

(declare-fun b!97239 () Bool)

(declare-fun e!63423 () Bool)

(declare-fun tp_is_empty!2629 () Bool)

(assert (=> b!97239 (= e!63423 tp_is_empty!2629)))

(declare-fun b!97240 () Bool)

(declare-datatypes ((Unit!2934 0))(
  ( (Unit!2935) )
))
(declare-fun e!63425 () Unit!2934)

(declare-fun Unit!2936 () Unit!2934)

(assert (=> b!97240 (= e!63425 Unit!2936)))

(declare-fun b!97241 () Bool)

(declare-fun e!63426 () Bool)

(assert (=> b!97241 (= e!63426 tp_is_empty!2629)))

(declare-fun b!97242 () Bool)

(declare-fun e!63418 () Bool)

(declare-fun e!63414 () Bool)

(assert (=> b!97242 (= e!63418 e!63414)))

(declare-fun res!49011 () Bool)

(assert (=> b!97242 (=> (not res!49011) (not e!63414))))

(declare-datatypes ((V!3153 0))(
  ( (V!3154 (val!1359 Int)) )
))
(declare-datatypes ((array!4217 0))(
  ( (array!4218 (arr!2002 (Array (_ BitVec 32) (_ BitVec 64))) (size!2253 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!971 0))(
  ( (ValueCellFull!971 (v!2790 V!3153)) (EmptyCell!971) )
))
(declare-datatypes ((array!4219 0))(
  ( (array!4220 (arr!2003 (Array (_ BitVec 32) ValueCell!971)) (size!2254 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!850 0))(
  ( (LongMapFixedSize!851 (defaultEntry!2480 Int) (mask!6576 (_ BitVec 32)) (extraKeys!2301 (_ BitVec 32)) (zeroValue!2363 V!3153) (minValue!2363 V!3153) (_size!474 (_ BitVec 32)) (_keys!4169 array!4217) (_values!2463 array!4219) (_vacant!474 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!640 0))(
  ( (Cell!641 (v!2791 LongMapFixedSize!850)) )
))
(declare-datatypes ((LongMap!640 0))(
  ( (LongMap!641 (underlying!331 Cell!640)) )
))
(declare-fun thiss!992 () LongMap!640)

(declare-datatypes ((tuple2!2326 0))(
  ( (tuple2!2327 (_1!1174 (_ BitVec 64)) (_2!1174 V!3153)) )
))
(declare-datatypes ((List!1586 0))(
  ( (Nil!1583) (Cons!1582 (h!2176 tuple2!2326) (t!5531 List!1586)) )
))
(declare-datatypes ((ListLongMap!1513 0))(
  ( (ListLongMap!1514 (toList!772 List!1586)) )
))
(declare-fun lt!48640 () ListLongMap!1513)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lt!48641 () ListLongMap!1513)

(assert (=> b!97242 (= res!49011 (and (= lt!48640 lt!48641) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun newMap!16 () LongMapFixedSize!850)

(declare-fun map!1243 (LongMapFixedSize!850) ListLongMap!1513)

(assert (=> b!97242 (= lt!48641 (map!1243 newMap!16))))

(declare-fun getCurrentListMap!453 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) ListLongMap!1513)

(assert (=> b!97242 (= lt!48640 (getCurrentListMap!453 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97243 () Bool)

(declare-fun res!49007 () Bool)

(assert (=> b!97243 (=> (not res!49007) (not e!63418))))

(assert (=> b!97243 (= res!49007 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!97244 () Bool)

(declare-fun e!63421 () Bool)

(assert (=> b!97244 (= e!63421 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3739 () Bool)

(declare-fun mapRes!3739 () Bool)

(declare-fun tp!9559 () Bool)

(declare-fun e!63422 () Bool)

(assert (=> mapNonEmpty!3739 (= mapRes!3739 (and tp!9559 e!63422))))

(declare-fun mapValue!3739 () ValueCell!971)

(declare-fun mapKey!3739 () (_ BitVec 32))

(declare-fun mapRest!3740 () (Array (_ BitVec 32) ValueCell!971))

(assert (=> mapNonEmpty!3739 (= (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (store mapRest!3740 mapKey!3739 mapValue!3739))))

(declare-fun mapNonEmpty!3740 () Bool)

(declare-fun mapRes!3740 () Bool)

(declare-fun tp!9557 () Bool)

(assert (=> mapNonEmpty!3740 (= mapRes!3740 (and tp!9557 e!63426))))

(declare-fun mapKey!3740 () (_ BitVec 32))

(declare-fun mapValue!3740 () ValueCell!971)

(declare-fun mapRest!3739 () (Array (_ BitVec 32) ValueCell!971))

(assert (=> mapNonEmpty!3740 (= (arr!2003 (_values!2463 newMap!16)) (store mapRest!3739 mapKey!3740 mapValue!3740))))

(declare-fun res!49010 () Bool)

(assert (=> start!11654 (=> (not res!49010) (not e!63418))))

(declare-fun valid!390 (LongMap!640) Bool)

(assert (=> start!11654 (= res!49010 (valid!390 thiss!992))))

(assert (=> start!11654 e!63418))

(declare-fun e!63420 () Bool)

(assert (=> start!11654 e!63420))

(assert (=> start!11654 true))

(declare-fun e!63428 () Bool)

(assert (=> start!11654 e!63428))

(declare-fun e!63413 () Bool)

(declare-fun e!63415 () Bool)

(declare-fun array_inv!1253 (array!4217) Bool)

(declare-fun array_inv!1254 (array!4219) Bool)

(assert (=> b!97245 (= e!63415 (and tp!9560 tp_is_empty!2629 (array_inv!1253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (array_inv!1254 (_values!2463 (v!2791 (underlying!331 thiss!992)))) e!63413))))

(declare-fun b!97246 () Bool)

(declare-fun Unit!2937 () Unit!2934)

(assert (=> b!97246 (= e!63425 Unit!2937)))

(declare-fun lt!48646 () Unit!2934)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!95 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2934)

(assert (=> b!97246 (= lt!48646 (lemmaListMapContainsThenArrayContainsFrom!95 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4217 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!97246 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!48645 () Unit!2934)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4217 (_ BitVec 32) (_ BitVec 32)) Unit!2934)

(assert (=> b!97246 (= lt!48645 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1587 0))(
  ( (Nil!1584) (Cons!1583 (h!2177 (_ BitVec 64)) (t!5532 List!1587)) )
))
(declare-fun arrayNoDuplicates!0 (array!4217 (_ BitVec 32) List!1587) Bool)

(assert (=> b!97246 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) from!355 Nil!1584)))

(declare-fun lt!48642 () Unit!2934)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4217 (_ BitVec 32) (_ BitVec 64) List!1587) Unit!2934)

(assert (=> b!97246 (= lt!48642 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584)))))

(assert (=> b!97246 false))

(declare-fun mapIsEmpty!3739 () Bool)

(assert (=> mapIsEmpty!3739 mapRes!3739))

(declare-fun b!97247 () Bool)

(declare-fun e!63424 () Bool)

(assert (=> b!97247 (= e!63424 (and e!63423 mapRes!3740))))

(declare-fun condMapEmpty!3739 () Bool)

(declare-fun mapDefault!3740 () ValueCell!971)

(assert (=> b!97247 (= condMapEmpty!3739 (= (arr!2003 (_values!2463 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3740)))))

(declare-fun b!97248 () Bool)

(declare-fun res!49009 () Bool)

(assert (=> b!97248 (=> (not res!49009) (not e!63418))))

(assert (=> b!97248 (= res!49009 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6576 newMap!16)) (_size!474 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97249 () Bool)

(declare-fun e!63417 () Bool)

(assert (=> b!97249 (= e!63417 (and (= (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6576 (v!2791 (underlying!331 thiss!992))))) (= (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992))))) (bvsge (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!97250 () Bool)

(declare-fun e!63419 () Bool)

(assert (=> b!97250 (= e!63419 e!63415)))

(assert (=> b!97251 (= e!63428 (and tp!9558 tp_is_empty!2629 (array_inv!1253 (_keys!4169 newMap!16)) (array_inv!1254 (_values!2463 newMap!16)) e!63424))))

(declare-fun b!97252 () Bool)

(assert (=> b!97252 (= e!63420 e!63419)))

(declare-fun b!97253 () Bool)

(assert (=> b!97253 (= e!63413 (and e!63421 mapRes!3739))))

(declare-fun condMapEmpty!3740 () Bool)

(declare-fun mapDefault!3739 () ValueCell!971)

(assert (=> b!97253 (= condMapEmpty!3740 (= (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3739)))))

(declare-fun mapIsEmpty!3740 () Bool)

(assert (=> mapIsEmpty!3740 mapRes!3740))

(declare-fun b!97254 () Bool)

(declare-fun res!49008 () Bool)

(assert (=> b!97254 (=> (not res!49008) (not e!63417))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!97254 (= res!49008 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97255 () Bool)

(assert (=> b!97255 (= e!63414 e!63417)))

(declare-fun res!49013 () Bool)

(assert (=> b!97255 (=> (not res!49013) (not e!63417))))

(declare-datatypes ((tuple2!2328 0))(
  ( (tuple2!2329 (_1!1175 Bool) (_2!1175 LongMapFixedSize!850)) )
))
(declare-fun lt!48644 () tuple2!2328)

(assert (=> b!97255 (= res!49013 (and (_1!1175 lt!48644) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!48643 () Unit!2934)

(assert (=> b!97255 (= lt!48643 e!63425)))

(declare-fun c!16439 () Bool)

(declare-fun contains!796 (ListLongMap!1513 (_ BitVec 64)) Bool)

(assert (=> b!97255 (= c!16439 (contains!796 lt!48641 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun update!147 (LongMapFixedSize!850 (_ BitVec 64) V!3153) tuple2!2328)

(declare-fun get!1285 (ValueCell!971 V!3153) V!3153)

(declare-fun dynLambda!370 (Int (_ BitVec 64)) V!3153)

(assert (=> b!97255 (= lt!48644 (update!147 newMap!16 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!97256 () Bool)

(assert (=> b!97256 (= e!63422 tp_is_empty!2629)))

(declare-fun b!97257 () Bool)

(declare-fun res!49012 () Bool)

(assert (=> b!97257 (=> (not res!49012) (not e!63418))))

(declare-fun valid!391 (LongMapFixedSize!850) Bool)

(assert (=> b!97257 (= res!49012 (valid!391 newMap!16))))

(assert (= (and start!11654 res!49010) b!97243))

(assert (= (and b!97243 res!49007) b!97257))

(assert (= (and b!97257 res!49012) b!97248))

(assert (= (and b!97248 res!49009) b!97242))

(assert (= (and b!97242 res!49011) b!97255))

(assert (= (and b!97255 c!16439) b!97246))

(assert (= (and b!97255 (not c!16439)) b!97240))

(assert (= (and b!97255 res!49013) b!97254))

(assert (= (and b!97254 res!49008) b!97249))

(assert (= (and b!97253 condMapEmpty!3740) mapIsEmpty!3739))

(assert (= (and b!97253 (not condMapEmpty!3740)) mapNonEmpty!3739))

(get-info :version)

(assert (= (and mapNonEmpty!3739 ((_ is ValueCellFull!971) mapValue!3739)) b!97256))

(assert (= (and b!97253 ((_ is ValueCellFull!971) mapDefault!3739)) b!97244))

(assert (= b!97245 b!97253))

(assert (= b!97250 b!97245))

(assert (= b!97252 b!97250))

(assert (= start!11654 b!97252))

(assert (= (and b!97247 condMapEmpty!3739) mapIsEmpty!3740))

(assert (= (and b!97247 (not condMapEmpty!3739)) mapNonEmpty!3740))

(assert (= (and mapNonEmpty!3740 ((_ is ValueCellFull!971) mapValue!3740)) b!97241))

(assert (= (and b!97247 ((_ is ValueCellFull!971) mapDefault!3740)) b!97239))

(assert (= b!97251 b!97247))

(assert (= start!11654 b!97251))

(declare-fun b_lambda!4317 () Bool)

(assert (=> (not b_lambda!4317) (not b!97255)))

(declare-fun t!5528 () Bool)

(declare-fun tb!1913 () Bool)

(assert (=> (and b!97245 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) t!5528) tb!1913))

(declare-fun result!3251 () Bool)

(assert (=> tb!1913 (= result!3251 tp_is_empty!2629)))

(assert (=> b!97255 t!5528))

(declare-fun b_and!5961 () Bool)

(assert (= b_and!5957 (and (=> t!5528 result!3251) b_and!5961)))

(declare-fun t!5530 () Bool)

(declare-fun tb!1915 () Bool)

(assert (=> (and b!97251 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) t!5530) tb!1915))

(declare-fun result!3255 () Bool)

(assert (= result!3255 result!3251))

(assert (=> b!97255 t!5530))

(declare-fun b_and!5963 () Bool)

(assert (= b_and!5959 (and (=> t!5530 result!3255) b_and!5963)))

(declare-fun m!106083 () Bool)

(assert (=> b!97254 m!106083))

(declare-fun m!106085 () Bool)

(assert (=> b!97257 m!106085))

(declare-fun m!106087 () Bool)

(assert (=> b!97245 m!106087))

(declare-fun m!106089 () Bool)

(assert (=> b!97245 m!106089))

(declare-fun m!106091 () Bool)

(assert (=> mapNonEmpty!3740 m!106091))

(declare-fun m!106093 () Bool)

(assert (=> b!97251 m!106093))

(declare-fun m!106095 () Bool)

(assert (=> b!97251 m!106095))

(declare-fun m!106097 () Bool)

(assert (=> mapNonEmpty!3739 m!106097))

(declare-fun m!106099 () Bool)

(assert (=> start!11654 m!106099))

(declare-fun m!106101 () Bool)

(assert (=> b!97246 m!106101))

(declare-fun m!106103 () Bool)

(assert (=> b!97246 m!106103))

(declare-fun m!106105 () Bool)

(assert (=> b!97246 m!106105))

(declare-fun m!106107 () Bool)

(assert (=> b!97246 m!106107))

(assert (=> b!97246 m!106105))

(assert (=> b!97246 m!106105))

(declare-fun m!106109 () Bool)

(assert (=> b!97246 m!106109))

(assert (=> b!97246 m!106105))

(declare-fun m!106111 () Bool)

(assert (=> b!97246 m!106111))

(assert (=> b!97242 m!106105))

(declare-fun m!106113 () Bool)

(assert (=> b!97242 m!106113))

(declare-fun m!106115 () Bool)

(assert (=> b!97242 m!106115))

(declare-fun m!106117 () Bool)

(assert (=> b!97255 m!106117))

(declare-fun m!106119 () Bool)

(assert (=> b!97255 m!106119))

(declare-fun m!106121 () Bool)

(assert (=> b!97255 m!106121))

(assert (=> b!97255 m!106105))

(declare-fun m!106123 () Bool)

(assert (=> b!97255 m!106123))

(assert (=> b!97255 m!106105))

(assert (=> b!97255 m!106119))

(assert (=> b!97255 m!106105))

(assert (=> b!97255 m!106121))

(declare-fun m!106125 () Bool)

(assert (=> b!97255 m!106125))

(assert (=> b!97255 m!106117))

(check-sat (not mapNonEmpty!3739) b_and!5961 (not start!11654) (not b!97242) (not b!97255) (not b!97246) (not b_lambda!4317) (not b!97257) b_and!5963 (not b_next!2427) (not b!97254) (not b_next!2425) (not mapNonEmpty!3740) (not b!97245) tp_is_empty!2629 (not b!97251))
(check-sat b_and!5961 b_and!5963 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun b_lambda!4323 () Bool)

(assert (= b_lambda!4317 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4323)))

(check-sat (not mapNonEmpty!3739) b_and!5961 (not start!11654) (not b!97242) (not b!97246) (not b!97257) b_and!5963 (not b_next!2427) (not b!97254) (not b_next!2425) (not mapNonEmpty!3740) (not b!97245) (not b!97255) (not b_lambda!4323) tp_is_empty!2629 (not b!97251))
(check-sat b_and!5961 b_and!5963 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun d!25875 () Bool)

(assert (=> d!25875 (= (valid!390 thiss!992) (valid!391 (v!2791 (underlying!331 thiss!992))))))

(declare-fun bs!4009 () Bool)

(assert (= bs!4009 d!25875))

(declare-fun m!106215 () Bool)

(assert (=> bs!4009 m!106215))

(assert (=> start!11654 d!25875))

(declare-fun d!25877 () Bool)

(assert (=> d!25877 (= (array_inv!1253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvsge (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97245 d!25877))

(declare-fun d!25879 () Bool)

(assert (=> d!25879 (= (array_inv!1254 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvsge (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97245 d!25879))

(declare-fun d!25881 () Bool)

(assert (=> d!25881 (= (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992)))) (and (or (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000001111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000011111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000001111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000011111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000001111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000011111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000001111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000011111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000001111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000011111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000001111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000011111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000001111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000011111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000001111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000011111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000111111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00001111111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00011111111111111111111111111111) (= (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!97254 d!25881))

(declare-fun d!25883 () Bool)

(assert (=> d!25883 (= (map!1243 newMap!16) (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun bs!4010 () Bool)

(assert (= bs!4010 d!25883))

(declare-fun m!106217 () Bool)

(assert (=> bs!4010 m!106217))

(assert (=> b!97242 d!25883))

(declare-fun b!97420 () Bool)

(declare-fun e!63563 () ListLongMap!1513)

(declare-fun call!9868 () ListLongMap!1513)

(declare-fun +!128 (ListLongMap!1513 tuple2!2326) ListLongMap!1513)

(assert (=> b!97420 (= e!63563 (+!128 call!9868 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97421 () Bool)

(declare-fun e!63552 () Bool)

(declare-fun e!63561 () Bool)

(assert (=> b!97421 (= e!63552 e!63561)))

(declare-fun res!49077 () Bool)

(assert (=> b!97421 (=> (not res!49077) (not e!63561))))

(declare-fun lt!48747 () ListLongMap!1513)

(assert (=> b!97421 (= res!49077 (contains!796 lt!48747 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97421 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun bm!9860 () Bool)

(declare-fun call!9867 () Bool)

(assert (=> bm!9860 (= call!9867 (contains!796 lt!48747 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97422 () Bool)

(declare-fun e!63560 () Bool)

(declare-fun call!9865 () Bool)

(assert (=> b!97422 (= e!63560 (not call!9865))))

(declare-fun b!97423 () Bool)

(declare-fun e!63557 () Bool)

(assert (=> b!97423 (= e!63557 (not call!9867))))

(declare-fun b!97424 () Bool)

(declare-fun e!63556 () Bool)

(assert (=> b!97424 (= e!63557 e!63556)))

(declare-fun res!49078 () Bool)

(assert (=> b!97424 (= res!49078 call!9867)))

(assert (=> b!97424 (=> (not res!49078) (not e!63556))))

(declare-fun b!97425 () Bool)

(declare-fun e!63559 () Bool)

(assert (=> b!97425 (= e!63559 e!63560)))

(declare-fun c!16458 () Bool)

(assert (=> b!97425 (= c!16458 (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9861 () Bool)

(assert (=> bm!9861 (= call!9865 (contains!796 lt!48747 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97426 () Bool)

(declare-fun e!63554 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!97426 (= e!63554 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!9862 () Bool)

(declare-fun call!9864 () ListLongMap!1513)

(declare-fun call!9863 () ListLongMap!1513)

(assert (=> bm!9862 (= call!9864 call!9863)))

(declare-fun b!97427 () Bool)

(declare-fun e!63558 () ListLongMap!1513)

(declare-fun call!9866 () ListLongMap!1513)

(assert (=> b!97427 (= e!63558 call!9866)))

(declare-fun b!97428 () Bool)

(declare-fun c!16462 () Bool)

(assert (=> b!97428 (= c!16462 (and (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63553 () ListLongMap!1513)

(assert (=> b!97428 (= e!63558 e!63553)))

(declare-fun b!97429 () Bool)

(declare-fun apply!92 (ListLongMap!1513 (_ BitVec 64)) V!3153)

(assert (=> b!97429 (= e!63561 (= (apply!92 lt!48747 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97429 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> b!97429 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97430 () Bool)

(assert (=> b!97430 (= e!63563 e!63558)))

(declare-fun c!16460 () Bool)

(assert (=> b!97430 (= c!16460 (and (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!16461 () Bool)

(declare-fun bm!9863 () Bool)

(declare-fun call!9869 () ListLongMap!1513)

(assert (=> bm!9863 (= call!9868 (+!128 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun bm!9864 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!92 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) ListLongMap!1513)

(assert (=> bm!9864 (= call!9863 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97431 () Bool)

(assert (=> b!97431 (= e!63556 (= (apply!92 lt!48747 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97432 () Bool)

(assert (=> b!97432 (= e!63553 call!9866)))

(declare-fun b!97433 () Bool)

(declare-fun e!63555 () Unit!2934)

(declare-fun lt!48750 () Unit!2934)

(assert (=> b!97433 (= e!63555 lt!48750)))

(declare-fun lt!48736 () ListLongMap!1513)

(assert (=> b!97433 (= lt!48736 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun lt!48751 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48751 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48733 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48733 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48742 () Unit!2934)

(declare-fun addStillContains!68 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> b!97433 (= lt!48742 (addStillContains!68 lt!48736 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48733))))

(assert (=> b!97433 (contains!796 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48733)))

(declare-fun lt!48748 () Unit!2934)

(assert (=> b!97433 (= lt!48748 lt!48742)))

(declare-fun lt!48749 () ListLongMap!1513)

(assert (=> b!97433 (= lt!48749 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun lt!48740 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48740 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48745 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48745 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48739 () Unit!2934)

(declare-fun addApplyDifferent!68 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> b!97433 (= lt!48739 (addApplyDifferent!68 lt!48749 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48745))))

(assert (=> b!97433 (= (apply!92 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48745) (apply!92 lt!48749 lt!48745))))

(declare-fun lt!48741 () Unit!2934)

(assert (=> b!97433 (= lt!48741 lt!48739)))

(declare-fun lt!48746 () ListLongMap!1513)

(assert (=> b!97433 (= lt!48746 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun lt!48753 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48753 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48744 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48744 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48752 () Unit!2934)

(assert (=> b!97433 (= lt!48752 (addApplyDifferent!68 lt!48746 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48744))))

(assert (=> b!97433 (= (apply!92 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48744) (apply!92 lt!48746 lt!48744))))

(declare-fun lt!48754 () Unit!2934)

(assert (=> b!97433 (= lt!48754 lt!48752)))

(declare-fun lt!48743 () ListLongMap!1513)

(assert (=> b!97433 (= lt!48743 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun lt!48734 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48734 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48735 () (_ BitVec 64))

(assert (=> b!97433 (= lt!48735 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97433 (= lt!48750 (addApplyDifferent!68 lt!48743 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48735))))

(assert (=> b!97433 (= (apply!92 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48735) (apply!92 lt!48743 lt!48735))))

(declare-fun b!97434 () Bool)

(declare-fun e!63562 () Bool)

(assert (=> b!97434 (= e!63562 (= (apply!92 lt!48747 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun bm!9865 () Bool)

(assert (=> bm!9865 (= call!9866 call!9868)))

(declare-fun b!97435 () Bool)

(assert (=> b!97435 (= e!63553 call!9869)))

(declare-fun b!97436 () Bool)

(declare-fun Unit!2942 () Unit!2934)

(assert (=> b!97436 (= e!63555 Unit!2942)))

(declare-fun b!97437 () Bool)

(declare-fun e!63551 () Bool)

(assert (=> b!97437 (= e!63551 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97438 () Bool)

(declare-fun res!49076 () Bool)

(assert (=> b!97438 (=> (not res!49076) (not e!63559))))

(assert (=> b!97438 (= res!49076 e!63557)))

(declare-fun c!16459 () Bool)

(assert (=> b!97438 (= c!16459 (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25885 () Bool)

(assert (=> d!25885 e!63559))

(declare-fun res!49079 () Bool)

(assert (=> d!25885 (=> (not res!49079) (not e!63559))))

(assert (=> d!25885 (= res!49079 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun lt!48738 () ListLongMap!1513)

(assert (=> d!25885 (= lt!48747 lt!48738)))

(declare-fun lt!48737 () Unit!2934)

(assert (=> d!25885 (= lt!48737 e!63555)))

(declare-fun c!16463 () Bool)

(assert (=> d!25885 (= c!16463 e!63551)))

(declare-fun res!49075 () Bool)

(assert (=> d!25885 (=> (not res!49075) (not e!63551))))

(assert (=> d!25885 (= res!49075 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!25885 (= lt!48738 e!63563)))

(assert (=> d!25885 (= c!16461 (and (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25885 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992))))))

(assert (=> d!25885 (= (getCurrentListMap!453 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) lt!48747)))

(declare-fun bm!9866 () Bool)

(assert (=> bm!9866 (= call!9869 call!9864)))

(declare-fun b!97439 () Bool)

(assert (=> b!97439 (= e!63560 e!63562)))

(declare-fun res!49080 () Bool)

(assert (=> b!97439 (= res!49080 call!9865)))

(assert (=> b!97439 (=> (not res!49080) (not e!63562))))

(declare-fun b!97440 () Bool)

(declare-fun res!49081 () Bool)

(assert (=> b!97440 (=> (not res!49081) (not e!63559))))

(assert (=> b!97440 (= res!49081 e!63552)))

(declare-fun res!49082 () Bool)

(assert (=> b!97440 (=> res!49082 e!63552)))

(assert (=> b!97440 (= res!49082 (not e!63554))))

(declare-fun res!49074 () Bool)

(assert (=> b!97440 (=> (not res!49074) (not e!63554))))

(assert (=> b!97440 (= res!49074 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25885 c!16461) b!97420))

(assert (= (and d!25885 (not c!16461)) b!97430))

(assert (= (and b!97430 c!16460) b!97427))

(assert (= (and b!97430 (not c!16460)) b!97428))

(assert (= (and b!97428 c!16462) b!97432))

(assert (= (and b!97428 (not c!16462)) b!97435))

(assert (= (or b!97432 b!97435) bm!9866))

(assert (= (or b!97427 bm!9866) bm!9862))

(assert (= (or b!97427 b!97432) bm!9865))

(assert (= (or b!97420 bm!9862) bm!9864))

(assert (= (or b!97420 bm!9865) bm!9863))

(assert (= (and d!25885 res!49075) b!97437))

(assert (= (and d!25885 c!16463) b!97433))

(assert (= (and d!25885 (not c!16463)) b!97436))

(assert (= (and d!25885 res!49079) b!97440))

(assert (= (and b!97440 res!49074) b!97426))

(assert (= (and b!97440 (not res!49082)) b!97421))

(assert (= (and b!97421 res!49077) b!97429))

(assert (= (and b!97440 res!49081) b!97438))

(assert (= (and b!97438 c!16459) b!97424))

(assert (= (and b!97438 (not c!16459)) b!97423))

(assert (= (and b!97424 res!49078) b!97431))

(assert (= (or b!97424 b!97423) bm!9860))

(assert (= (and b!97438 res!49076) b!97425))

(assert (= (and b!97425 c!16458) b!97439))

(assert (= (and b!97425 (not c!16458)) b!97422))

(assert (= (and b!97439 res!49080) b!97434))

(assert (= (or b!97439 b!97422) bm!9861))

(declare-fun b_lambda!4325 () Bool)

(assert (=> (not b_lambda!4325) (not b!97429)))

(assert (=> b!97429 t!5528))

(declare-fun b_and!5981 () Bool)

(assert (= b_and!5961 (and (=> t!5528 result!3251) b_and!5981)))

(assert (=> b!97429 t!5530))

(declare-fun b_and!5983 () Bool)

(assert (= b_and!5963 (and (=> t!5530 result!3255) b_and!5983)))

(declare-fun m!106219 () Bool)

(assert (=> b!97421 m!106219))

(assert (=> b!97421 m!106219))

(declare-fun m!106221 () Bool)

(assert (=> b!97421 m!106221))

(declare-fun m!106223 () Bool)

(assert (=> b!97433 m!106223))

(declare-fun m!106225 () Bool)

(assert (=> b!97433 m!106225))

(declare-fun m!106227 () Bool)

(assert (=> b!97433 m!106227))

(assert (=> b!97433 m!106227))

(declare-fun m!106229 () Bool)

(assert (=> b!97433 m!106229))

(declare-fun m!106231 () Bool)

(assert (=> b!97433 m!106231))

(declare-fun m!106233 () Bool)

(assert (=> b!97433 m!106233))

(declare-fun m!106235 () Bool)

(assert (=> b!97433 m!106235))

(declare-fun m!106237 () Bool)

(assert (=> b!97433 m!106237))

(assert (=> b!97433 m!106225))

(declare-fun m!106239 () Bool)

(assert (=> b!97433 m!106239))

(declare-fun m!106241 () Bool)

(assert (=> b!97433 m!106241))

(declare-fun m!106243 () Bool)

(assert (=> b!97433 m!106243))

(declare-fun m!106245 () Bool)

(assert (=> b!97433 m!106245))

(assert (=> b!97433 m!106219))

(assert (=> b!97433 m!106235))

(declare-fun m!106247 () Bool)

(assert (=> b!97433 m!106247))

(declare-fun m!106249 () Bool)

(assert (=> b!97433 m!106249))

(declare-fun m!106251 () Bool)

(assert (=> b!97433 m!106251))

(declare-fun m!106253 () Bool)

(assert (=> b!97433 m!106253))

(assert (=> b!97433 m!106241))

(declare-fun m!106255 () Bool)

(assert (=> bm!9860 m!106255))

(declare-fun m!106257 () Bool)

(assert (=> b!97420 m!106257))

(declare-fun m!106259 () Bool)

(assert (=> bm!9861 m!106259))

(declare-fun m!106261 () Bool)

(assert (=> b!97434 m!106261))

(assert (=> b!97429 m!106219))

(declare-fun m!106263 () Bool)

(assert (=> b!97429 m!106263))

(assert (=> b!97429 m!106119))

(declare-fun m!106265 () Bool)

(assert (=> b!97429 m!106265))

(assert (=> b!97429 m!106219))

(declare-fun m!106267 () Bool)

(assert (=> b!97429 m!106267))

(assert (=> b!97429 m!106263))

(assert (=> b!97429 m!106119))

(assert (=> d!25885 m!106083))

(declare-fun m!106269 () Bool)

(assert (=> bm!9863 m!106269))

(assert (=> b!97426 m!106219))

(assert (=> b!97426 m!106219))

(declare-fun m!106271 () Bool)

(assert (=> b!97426 m!106271))

(assert (=> bm!9864 m!106247))

(assert (=> b!97437 m!106219))

(assert (=> b!97437 m!106219))

(assert (=> b!97437 m!106271))

(declare-fun m!106273 () Bool)

(assert (=> b!97431 m!106273))

(assert (=> b!97242 d!25885))

(declare-fun d!25887 () Bool)

(declare-fun e!63568 () Bool)

(assert (=> d!25887 e!63568))

(declare-fun res!49085 () Bool)

(assert (=> d!25887 (=> res!49085 e!63568)))

(declare-fun lt!48764 () Bool)

(assert (=> d!25887 (= res!49085 (not lt!48764))))

(declare-fun lt!48765 () Bool)

(assert (=> d!25887 (= lt!48764 lt!48765)))

(declare-fun lt!48763 () Unit!2934)

(declare-fun e!63569 () Unit!2934)

(assert (=> d!25887 (= lt!48763 e!63569)))

(declare-fun c!16466 () Bool)

(assert (=> d!25887 (= c!16466 lt!48765)))

(declare-fun containsKey!152 (List!1586 (_ BitVec 64)) Bool)

(assert (=> d!25887 (= lt!48765 (containsKey!152 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25887 (= (contains!796 lt!48641 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!48764)))

(declare-fun b!97447 () Bool)

(declare-fun lt!48766 () Unit!2934)

(assert (=> b!97447 (= e!63569 lt!48766)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!101 (List!1586 (_ BitVec 64)) Unit!2934)

(assert (=> b!97447 (= lt!48766 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-datatypes ((Option!154 0))(
  ( (Some!153 (v!2797 V!3153)) (None!152) )
))
(declare-fun isDefined!102 (Option!154) Bool)

(declare-fun getValueByKey!148 (List!1586 (_ BitVec 64)) Option!154)

(assert (=> b!97447 (isDefined!102 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97448 () Bool)

(declare-fun Unit!2943 () Unit!2934)

(assert (=> b!97448 (= e!63569 Unit!2943)))

(declare-fun b!97449 () Bool)

(assert (=> b!97449 (= e!63568 (isDefined!102 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25887 c!16466) b!97447))

(assert (= (and d!25887 (not c!16466)) b!97448))

(assert (= (and d!25887 (not res!49085)) b!97449))

(assert (=> d!25887 m!106105))

(declare-fun m!106275 () Bool)

(assert (=> d!25887 m!106275))

(assert (=> b!97447 m!106105))

(declare-fun m!106277 () Bool)

(assert (=> b!97447 m!106277))

(assert (=> b!97447 m!106105))

(declare-fun m!106279 () Bool)

(assert (=> b!97447 m!106279))

(assert (=> b!97447 m!106279))

(declare-fun m!106281 () Bool)

(assert (=> b!97447 m!106281))

(assert (=> b!97449 m!106105))

(assert (=> b!97449 m!106279))

(assert (=> b!97449 m!106279))

(assert (=> b!97449 m!106281))

(assert (=> b!97255 d!25887))

(declare-fun d!25889 () Bool)

(declare-fun e!63631 () Bool)

(assert (=> d!25889 e!63631))

(declare-fun res!49124 () Bool)

(assert (=> d!25889 (=> (not res!49124) (not e!63631))))

(declare-fun lt!48824 () tuple2!2328)

(assert (=> d!25889 (= res!49124 (valid!391 (_2!1175 lt!48824)))))

(declare-fun e!63628 () tuple2!2328)

(assert (=> d!25889 (= lt!48824 e!63628)))

(declare-fun c!16508 () Bool)

(assert (=> d!25889 (= c!16508 (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvneg (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25889 (valid!391 newMap!16)))

(assert (=> d!25889 (= (update!147 newMap!16 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!48824)))

(declare-fun lt!48837 () (_ BitVec 32))

(declare-fun c!16500 () Bool)

(declare-fun bm!9915 () Bool)

(declare-fun lt!48828 () (_ BitVec 32))

(declare-fun c!16499 () Bool)

(declare-fun call!9925 () ListLongMap!1513)

(declare-datatypes ((SeekEntryResult!256 0))(
  ( (MissingZero!256 (index!3167 (_ BitVec 32))) (Found!256 (index!3168 (_ BitVec 32))) (Intermediate!256 (undefined!1068 Bool) (index!3169 (_ BitVec 32)) (x!12961 (_ BitVec 32))) (Undefined!256) (MissingVacant!256 (index!3170 (_ BitVec 32))) )
))
(declare-fun lt!48847 () SeekEntryResult!256)

(assert (=> bm!9915 (= call!9925 (getCurrentListMap!453 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97534 () Bool)

(declare-fun res!49123 () Bool)

(declare-fun lt!48826 () SeekEntryResult!256)

(assert (=> b!97534 (= res!49123 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!48826)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63635 () Bool)

(assert (=> b!97534 (=> (not res!49123) (not e!63635))))

(declare-fun b!97535 () Bool)

(declare-fun c!16498 () Bool)

(declare-fun lt!48836 () SeekEntryResult!256)

(assert (=> b!97535 (= c!16498 ((_ is MissingVacant!256) lt!48836))))

(declare-fun e!63614 () Bool)

(declare-fun e!63616 () Bool)

(assert (=> b!97535 (= e!63614 e!63616)))

(declare-fun call!9939 () Bool)

(declare-fun bm!9916 () Bool)

(assert (=> bm!9916 (= call!9939 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97536 () Bool)

(declare-fun res!49125 () Bool)

(assert (=> b!97536 (= res!49125 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!48836)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63633 () Bool)

(assert (=> b!97536 (=> (not res!49125) (not e!63633))))

(declare-fun b!97537 () Bool)

(declare-fun lt!48838 () Unit!2934)

(declare-fun lt!48827 () Unit!2934)

(assert (=> b!97537 (= lt!48838 lt!48827)))

(declare-fun call!9936 () ListLongMap!1513)

(declare-fun call!9929 () ListLongMap!1513)

(assert (=> b!97537 (= call!9936 call!9929)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2934)

(assert (=> b!97537 (= lt!48827 (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97537 (= lt!48837 (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!63617 () tuple2!2328)

(assert (=> b!97537 (= e!63617 (tuple2!2329 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6576 newMap!16) (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!474 newMap!16) (_keys!4169 newMap!16) (_values!2463 newMap!16) (_vacant!474 newMap!16))))))

(declare-fun lt!48825 () array!4219)

(declare-fun call!9941 () ListLongMap!1513)

(declare-fun bm!9917 () Bool)

(assert (=> bm!9917 (= call!9941 (getCurrentListMap!453 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun bm!9918 () Bool)

(declare-fun c!16504 () Bool)

(assert (=> bm!9918 (= c!16504 c!16500)))

(declare-fun e!63619 () ListLongMap!1513)

(declare-fun call!9928 () Bool)

(assert (=> bm!9918 (= call!9928 (contains!796 e!63619 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97538 () Bool)

(declare-fun lt!48829 () Unit!2934)

(declare-fun lt!48831 () Unit!2934)

(assert (=> b!97538 (= lt!48829 lt!48831)))

(assert (=> b!97538 (= call!9936 call!9929)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!41 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2934)

(assert (=> b!97538 (= lt!48831 (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48828 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97538 (= lt!48828 (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!97538 (= e!63617 (tuple2!2329 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6576 newMap!16) (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (_size!474 newMap!16) (_keys!4169 newMap!16) (_values!2463 newMap!16) (_vacant!474 newMap!16))))))

(declare-fun bm!9919 () Bool)

(declare-fun call!9920 () ListLongMap!1513)

(assert (=> bm!9919 (= call!9920 (map!1243 newMap!16))))

(declare-fun b!97539 () Bool)

(declare-fun e!63624 () Unit!2934)

(declare-fun lt!48843 () Unit!2934)

(assert (=> b!97539 (= e!63624 lt!48843)))

(declare-fun call!9933 () Unit!2934)

(assert (=> b!97539 (= lt!48843 call!9933)))

(declare-fun lt!48834 () SeekEntryResult!256)

(declare-fun call!9935 () SeekEntryResult!256)

(assert (=> b!97539 (= lt!48834 call!9935)))

(declare-fun res!49120 () Bool)

(assert (=> b!97539 (= res!49120 ((_ is Found!256) lt!48834))))

(declare-fun e!63622 () Bool)

(assert (=> b!97539 (=> (not res!49120) (not e!63622))))

(assert (=> b!97539 e!63622))

(declare-fun bm!9920 () Bool)

(declare-fun call!9919 () Bool)

(declare-fun call!9934 () Bool)

(assert (=> bm!9920 (= call!9919 call!9934)))

(declare-fun call!9937 () ListLongMap!1513)

(declare-fun e!63621 () ListLongMap!1513)

(declare-fun bm!9921 () Bool)

(assert (=> bm!9921 (= call!9937 (+!128 e!63621 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16495 () Bool)

(assert (=> bm!9921 (= c!16495 c!16508)))

(declare-fun bm!9922 () Bool)

(declare-fun call!9932 () Bool)

(assert (=> bm!9922 (= call!9932 call!9939)))

(declare-fun b!97540 () Bool)

(declare-fun lt!48832 () tuple2!2328)

(declare-fun call!9938 () tuple2!2328)

(assert (=> b!97540 (= lt!48832 call!9938)))

(declare-fun e!63627 () tuple2!2328)

(assert (=> b!97540 (= e!63627 (tuple2!2329 (_1!1175 lt!48832) (_2!1175 lt!48832)))))

(declare-fun bm!9923 () Bool)

(declare-fun call!9921 () SeekEntryResult!256)

(declare-fun call!9940 () SeekEntryResult!256)

(assert (=> bm!9923 (= call!9921 call!9940)))

(declare-fun b!97541 () Bool)

(declare-fun call!9926 () ListLongMap!1513)

(assert (=> b!97541 (= e!63619 call!9926)))

(declare-fun c!16507 () Bool)

(declare-fun bm!9924 () Bool)

(declare-fun updateHelperNewKey!41 (LongMapFixedSize!850 (_ BitVec 64) V!3153 (_ BitVec 32)) tuple2!2328)

(assert (=> bm!9924 (= call!9938 (updateHelperNewKey!41 newMap!16 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(declare-fun b!97542 () Bool)

(declare-fun res!49126 () Bool)

(declare-fun call!9927 () Bool)

(assert (=> b!97542 (= res!49126 call!9927)))

(assert (=> b!97542 (=> (not res!49126) (not e!63622))))

(declare-fun b!97543 () Bool)

(declare-fun res!49116 () Bool)

(declare-fun e!63634 () Bool)

(assert (=> b!97543 (=> (not res!49116) (not e!63634))))

(assert (=> b!97543 (= res!49116 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!48836)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97544 () Bool)

(declare-fun e!63623 () Bool)

(assert (=> b!97544 (= e!63623 ((_ is Undefined!256) lt!48826))))

(declare-fun b!97545 () Bool)

(declare-fun e!63625 () Bool)

(assert (=> b!97545 (= e!63631 e!63625)))

(declare-fun c!16497 () Bool)

(assert (=> b!97545 (= c!16497 (_1!1175 lt!48824))))

(declare-fun b!97546 () Bool)

(declare-fun e!63629 () Unit!2934)

(declare-fun lt!48830 () Unit!2934)

(assert (=> b!97546 (= e!63629 lt!48830)))

(declare-fun call!9924 () Unit!2934)

(assert (=> b!97546 (= lt!48830 call!9924)))

(assert (=> b!97546 (= lt!48836 call!9921)))

(declare-fun c!16506 () Bool)

(assert (=> b!97546 (= c!16506 ((_ is MissingZero!256) lt!48836))))

(assert (=> b!97546 e!63614))

(declare-fun bm!9925 () Bool)

(assert (=> bm!9925 (= call!9929 call!9925)))

(declare-fun b!97547 () Bool)

(declare-fun call!9922 () ListLongMap!1513)

(assert (=> b!97547 (= e!63621 call!9922)))

(declare-fun bm!9926 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4217 (_ BitVec 32)) SeekEntryResult!256)

(assert (=> bm!9926 (= call!9940 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun bm!9927 () Bool)

(assert (=> bm!9927 (= call!9927 call!9934)))

(declare-fun b!97548 () Bool)

(declare-fun e!63626 () tuple2!2328)

(assert (=> b!97548 (= e!63626 e!63627)))

(declare-fun c!16503 () Bool)

(assert (=> b!97548 (= c!16503 ((_ is MissingZero!256) lt!48847))))

(declare-fun bm!9928 () Bool)

(declare-fun call!9930 () Bool)

(assert (=> bm!9928 (= call!9930 call!9939)))

(declare-fun bm!9929 () Bool)

(assert (=> bm!9929 (= call!9926 call!9925)))

(declare-fun b!97549 () Bool)

(assert (=> b!97549 (= e!63622 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48834)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97550 () Bool)

(declare-fun lt!48823 () tuple2!2328)

(assert (=> b!97550 (= e!63626 (tuple2!2329 (_1!1175 lt!48823) (_2!1175 lt!48823)))))

(assert (=> b!97550 (= lt!48823 call!9938)))

(declare-fun b!97551 () Bool)

(assert (=> b!97551 (= e!63619 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun bm!9930 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2934)

(assert (=> bm!9930 (= call!9933 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(declare-fun b!97552 () Bool)

(assert (=> b!97552 (= e!63633 (not call!9932))))

(declare-fun b!97553 () Bool)

(assert (=> b!97553 (= e!63634 (not call!9932))))

(declare-fun b!97554 () Bool)

(declare-fun Unit!2944 () Unit!2934)

(assert (=> b!97554 (= e!63624 Unit!2944)))

(declare-fun lt!48840 () Unit!2934)

(assert (=> b!97554 (= lt!48840 call!9924)))

(assert (=> b!97554 (= lt!48826 call!9935)))

(declare-fun c!16505 () Bool)

(assert (=> b!97554 (= c!16505 ((_ is MissingZero!256) lt!48826))))

(declare-fun e!63630 () Bool)

(assert (=> b!97554 e!63630))

(declare-fun lt!48841 () Unit!2934)

(assert (=> b!97554 (= lt!48841 lt!48840)))

(assert (=> b!97554 false))

(declare-fun bm!9931 () Bool)

(declare-fun call!9918 () ListLongMap!1513)

(assert (=> bm!9931 (= call!9918 (map!1243 (_2!1175 lt!48824)))))

(declare-fun b!97555 () Bool)

(declare-fun res!49114 () Bool)

(declare-fun e!63632 () Bool)

(assert (=> b!97555 (=> (not res!49114) (not e!63632))))

(assert (=> b!97555 (= res!49114 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!48826)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97556 () Bool)

(assert (=> b!97556 (= e!63628 e!63617)))

(assert (=> b!97556 (= c!16499 (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97557 () Bool)

(assert (=> b!97557 (= e!63623 e!63635)))

(declare-fun res!49118 () Bool)

(declare-fun call!9923 () Bool)

(assert (=> b!97557 (= res!49118 call!9923)))

(assert (=> b!97557 (=> (not res!49118) (not e!63635))))

(declare-fun b!97558 () Bool)

(assert (=> b!97558 (= e!63616 ((_ is Undefined!256) lt!48836))))

(declare-fun bm!9932 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2934)

(assert (=> bm!9932 (= call!9924 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(declare-fun b!97559 () Bool)

(declare-fun Unit!2945 () Unit!2934)

(assert (=> b!97559 (= e!63629 Unit!2945)))

(declare-fun lt!48821 () Unit!2934)

(assert (=> b!97559 (= lt!48821 call!9933)))

(declare-fun lt!48839 () SeekEntryResult!256)

(assert (=> b!97559 (= lt!48839 call!9921)))

(declare-fun res!49117 () Bool)

(assert (=> b!97559 (= res!49117 ((_ is Found!256) lt!48839))))

(declare-fun e!63618 () Bool)

(assert (=> b!97559 (=> (not res!49117) (not e!63618))))

(assert (=> b!97559 e!63618))

(declare-fun lt!48835 () Unit!2934)

(assert (=> b!97559 (= lt!48835 lt!48821)))

(assert (=> b!97559 false))

(declare-fun b!97560 () Bool)

(declare-fun res!49127 () Bool)

(assert (=> b!97560 (=> (not res!49127) (not e!63634))))

(declare-fun call!9931 () Bool)

(assert (=> b!97560 (= res!49127 call!9931)))

(assert (=> b!97560 (= e!63614 e!63634)))

(declare-fun b!97561 () Bool)

(declare-fun res!49122 () Bool)

(assert (=> b!97561 (= res!49122 call!9919)))

(assert (=> b!97561 (=> (not res!49122) (not e!63618))))

(declare-fun b!97562 () Bool)

(declare-fun e!63615 () tuple2!2328)

(assert (=> b!97562 (= e!63628 e!63615)))

(assert (=> b!97562 (= lt!48847 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (=> b!97562 (= c!16500 ((_ is Undefined!256) lt!48847))))

(declare-fun c!16502 () Bool)

(declare-fun bm!9933 () Bool)

(declare-fun c!16496 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9933 (= call!9934 (inRange!0 (ite c!16500 (ite c!16502 (index!3168 lt!48839) (ite c!16506 (index!3167 lt!48836) (index!3170 lt!48836))) (ite c!16496 (index!3168 lt!48834) (ite c!16505 (index!3167 lt!48826) (index!3170 lt!48826)))) (mask!6576 newMap!16)))))

(declare-fun b!97563 () Bool)

(declare-fun res!49115 () Bool)

(assert (=> b!97563 (=> (not res!49115) (not e!63632))))

(assert (=> b!97563 (= res!49115 call!9923)))

(assert (=> b!97563 (= e!63630 e!63632)))

(declare-fun b!97564 () Bool)

(assert (=> b!97564 (= e!63635 (not call!9930))))

(declare-fun b!97565 () Bool)

(assert (=> b!97565 (= e!63625 (= call!9918 call!9920))))

(declare-fun b!97566 () Bool)

(declare-fun e!63620 () Bool)

(assert (=> b!97566 (= e!63625 e!63620)))

(declare-fun res!49119 () Bool)

(assert (=> b!97566 (= res!49119 (contains!796 call!9918 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!97566 (=> (not res!49119) (not e!63620))))

(declare-fun bm!9934 () Bool)

(assert (=> bm!9934 (= call!9935 call!9940)))

(declare-fun b!97567 () Bool)

(declare-fun lt!48846 () Unit!2934)

(declare-fun lt!48842 () Unit!2934)

(assert (=> b!97567 (= lt!48846 lt!48842)))

(assert (=> b!97567 (contains!796 call!9941 (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!100 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) Unit!2934)

(assert (=> b!97567 (= lt!48842 (lemmaValidKeyInArrayIsInListMap!100 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97567 (= lt!48825 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))))

(declare-fun lt!48822 () Unit!2934)

(declare-fun lt!48844 () Unit!2934)

(assert (=> b!97567 (= lt!48822 lt!48844)))

(assert (=> b!97567 (= call!9937 call!9926)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2934)

(assert (=> b!97567 (= lt!48844 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48833 () Unit!2934)

(assert (=> b!97567 (= lt!48833 e!63624)))

(assert (=> b!97567 (= c!16496 call!9928)))

(assert (=> b!97567 (= e!63627 (tuple2!2329 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (_size!474 newMap!16) (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (_vacant!474 newMap!16))))))

(declare-fun b!97568 () Bool)

(declare-fun c!16501 () Bool)

(assert (=> b!97568 (= c!16501 ((_ is MissingVacant!256) lt!48826))))

(assert (=> b!97568 (= e!63630 e!63623)))

(declare-fun b!97569 () Bool)

(assert (=> b!97569 (= c!16507 ((_ is MissingVacant!256) lt!48847))))

(assert (=> b!97569 (= e!63615 e!63626)))

(declare-fun b!97570 () Bool)

(assert (=> b!97570 (= e!63621 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97571 () Bool)

(assert (=> b!97571 (= e!63632 (not call!9930))))

(declare-fun bm!9935 () Bool)

(assert (=> bm!9935 (= call!9936 call!9937)))

(declare-fun bm!9936 () Bool)

(assert (=> bm!9936 (= call!9923 call!9927)))

(declare-fun bm!9937 () Bool)

(assert (=> bm!9937 (= call!9931 call!9919)))

(declare-fun b!97572 () Bool)

(assert (=> b!97572 (= e!63620 (= call!9918 (+!128 call!9920 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97573 () Bool)

(declare-fun lt!48845 () Unit!2934)

(assert (=> b!97573 (= lt!48845 e!63629)))

(assert (=> b!97573 (= c!16502 call!9928)))

(assert (=> b!97573 (= e!63615 (tuple2!2329 false newMap!16))))

(declare-fun b!97574 () Bool)

(assert (=> b!97574 (= e!63616 e!63633)))

(declare-fun res!49121 () Bool)

(assert (=> b!97574 (= res!49121 call!9931)))

(assert (=> b!97574 (=> (not res!49121) (not e!63633))))

(declare-fun b!97575 () Bool)

(assert (=> b!97575 (= e!63618 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48839)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun bm!9938 () Bool)

(assert (=> bm!9938 (= call!9922 call!9941)))

(assert (= (and d!25889 c!16508) b!97556))

(assert (= (and d!25889 (not c!16508)) b!97562))

(assert (= (and b!97556 c!16499) b!97538))

(assert (= (and b!97556 (not c!16499)) b!97537))

(assert (= (or b!97538 b!97537) bm!9925))

(assert (= (or b!97538 b!97537) bm!9938))

(assert (= (or b!97538 b!97537) bm!9935))

(assert (= (and b!97562 c!16500) b!97573))

(assert (= (and b!97562 (not c!16500)) b!97569))

(assert (= (and b!97573 c!16502) b!97559))

(assert (= (and b!97573 (not c!16502)) b!97546))

(assert (= (and b!97559 res!49117) b!97561))

(assert (= (and b!97561 res!49122) b!97575))

(assert (= (and b!97546 c!16506) b!97560))

(assert (= (and b!97546 (not c!16506)) b!97535))

(assert (= (and b!97560 res!49127) b!97543))

(assert (= (and b!97543 res!49116) b!97553))

(assert (= (and b!97535 c!16498) b!97574))

(assert (= (and b!97535 (not c!16498)) b!97558))

(assert (= (and b!97574 res!49121) b!97536))

(assert (= (and b!97536 res!49125) b!97552))

(assert (= (or b!97560 b!97574) bm!9937))

(assert (= (or b!97553 b!97552) bm!9922))

(assert (= (or b!97561 bm!9937) bm!9920))

(assert (= (or b!97559 b!97546) bm!9923))

(assert (= (and b!97569 c!16507) b!97550))

(assert (= (and b!97569 (not c!16507)) b!97548))

(assert (= (and b!97548 c!16503) b!97540))

(assert (= (and b!97548 (not c!16503)) b!97567))

(assert (= (and b!97567 c!16496) b!97539))

(assert (= (and b!97567 (not c!16496)) b!97554))

(assert (= (and b!97539 res!49120) b!97542))

(assert (= (and b!97542 res!49126) b!97549))

(assert (= (and b!97554 c!16505) b!97563))

(assert (= (and b!97554 (not c!16505)) b!97568))

(assert (= (and b!97563 res!49115) b!97555))

(assert (= (and b!97555 res!49114) b!97571))

(assert (= (and b!97568 c!16501) b!97557))

(assert (= (and b!97568 (not c!16501)) b!97544))

(assert (= (and b!97557 res!49118) b!97534))

(assert (= (and b!97534 res!49123) b!97564))

(assert (= (or b!97563 b!97557) bm!9936))

(assert (= (or b!97571 b!97564) bm!9928))

(assert (= (or b!97542 bm!9936) bm!9927))

(assert (= (or b!97539 b!97554) bm!9934))

(assert (= (or b!97550 b!97540) bm!9924))

(assert (= (or bm!9922 bm!9928) bm!9916))

(assert (= (or b!97573 b!97567) bm!9929))

(assert (= (or bm!9920 bm!9927) bm!9933))

(assert (= (or bm!9923 bm!9934) bm!9926))

(assert (= (or b!97546 b!97554) bm!9932))

(assert (= (or b!97559 b!97539) bm!9930))

(assert (= (or b!97573 b!97567) bm!9918))

(assert (= (and bm!9918 c!16504) b!97541))

(assert (= (and bm!9918 (not c!16504)) b!97551))

(assert (= (or bm!9938 b!97567) bm!9917))

(assert (= (or bm!9925 bm!9929) bm!9915))

(assert (= (or bm!9935 b!97567) bm!9921))

(assert (= (and bm!9921 c!16495) b!97547))

(assert (= (and bm!9921 (not c!16495)) b!97570))

(assert (= (and d!25889 res!49124) b!97545))

(assert (= (and b!97545 c!16497) b!97566))

(assert (= (and b!97545 (not c!16497)) b!97565))

(assert (= (and b!97566 res!49119) b!97572))

(assert (= (or b!97572 b!97565) bm!9919))

(assert (= (or b!97566 b!97572 b!97565) bm!9931))

(assert (=> bm!9919 m!106113))

(declare-fun m!106283 () Bool)

(assert (=> bm!9933 m!106283))

(declare-fun m!106285 () Bool)

(assert (=> b!97534 m!106285))

(declare-fun m!106287 () Bool)

(assert (=> b!97572 m!106287))

(assert (=> bm!9930 m!106105))

(declare-fun m!106289 () Bool)

(assert (=> bm!9930 m!106289))

(assert (=> bm!9916 m!106105))

(declare-fun m!106291 () Bool)

(assert (=> bm!9916 m!106291))

(declare-fun m!106293 () Bool)

(assert (=> b!97536 m!106293))

(assert (=> b!97538 m!106121))

(declare-fun m!106295 () Bool)

(assert (=> b!97538 m!106295))

(assert (=> b!97562 m!106105))

(declare-fun m!106297 () Bool)

(assert (=> b!97562 m!106297))

(declare-fun m!106299 () Bool)

(assert (=> bm!9931 m!106299))

(assert (=> bm!9932 m!106105))

(declare-fun m!106301 () Bool)

(assert (=> bm!9932 m!106301))

(declare-fun m!106303 () Bool)

(assert (=> b!97549 m!106303))

(assert (=> b!97537 m!106121))

(declare-fun m!106305 () Bool)

(assert (=> b!97537 m!106305))

(declare-fun m!106307 () Bool)

(assert (=> bm!9917 m!106307))

(assert (=> bm!9918 m!106105))

(declare-fun m!106309 () Bool)

(assert (=> bm!9918 m!106309))

(assert (=> bm!9924 m!106105))

(assert (=> bm!9924 m!106121))

(declare-fun m!106311 () Bool)

(assert (=> bm!9924 m!106311))

(declare-fun m!106313 () Bool)

(assert (=> b!97543 m!106313))

(assert (=> b!97566 m!106105))

(declare-fun m!106315 () Bool)

(assert (=> b!97566 m!106315))

(assert (=> b!97570 m!106217))

(declare-fun m!106317 () Bool)

(assert (=> b!97555 m!106317))

(assert (=> bm!9926 m!106105))

(assert (=> bm!9926 m!106297))

(declare-fun m!106319 () Bool)

(assert (=> bm!9921 m!106319))

(declare-fun m!106321 () Bool)

(assert (=> b!97567 m!106321))

(declare-fun m!106323 () Bool)

(assert (=> b!97567 m!106323))

(declare-fun m!106325 () Bool)

(assert (=> b!97567 m!106325))

(assert (=> b!97567 m!106323))

(declare-fun m!106327 () Bool)

(assert (=> b!97567 m!106327))

(assert (=> b!97567 m!106105))

(assert (=> b!97567 m!106121))

(declare-fun m!106329 () Bool)

(assert (=> b!97567 m!106329))

(declare-fun m!106331 () Bool)

(assert (=> d!25889 m!106331))

(assert (=> d!25889 m!106085))

(declare-fun m!106333 () Bool)

(assert (=> b!97575 m!106333))

(assert (=> b!97551 m!106217))

(assert (=> bm!9915 m!106327))

(declare-fun m!106335 () Bool)

(assert (=> bm!9915 m!106335))

(assert (=> b!97255 d!25889))

(declare-fun d!25891 () Bool)

(declare-fun c!16511 () Bool)

(assert (=> d!25891 (= c!16511 ((_ is ValueCellFull!971) (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63638 () V!3153)

(assert (=> d!25891 (= (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63638)))

(declare-fun b!97580 () Bool)

(declare-fun get!1286 (ValueCell!971 V!3153) V!3153)

(assert (=> b!97580 (= e!63638 (get!1286 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97581 () Bool)

(declare-fun get!1287 (ValueCell!971 V!3153) V!3153)

(assert (=> b!97581 (= e!63638 (get!1287 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25891 c!16511) b!97580))

(assert (= (and d!25891 (not c!16511)) b!97581))

(assert (=> b!97580 m!106117))

(assert (=> b!97580 m!106119))

(declare-fun m!106337 () Bool)

(assert (=> b!97580 m!106337))

(assert (=> b!97581 m!106117))

(assert (=> b!97581 m!106119))

(declare-fun m!106339 () Bool)

(assert (=> b!97581 m!106339))

(assert (=> b!97255 d!25891))

(declare-fun d!25893 () Bool)

(assert (=> d!25893 (not (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48850 () Unit!2934)

(declare-fun choose!68 (array!4217 (_ BitVec 32) (_ BitVec 64) List!1587) Unit!2934)

(assert (=> d!25893 (= lt!48850 (choose!68 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584)))))

(assert (=> d!25893 (bvslt (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25893 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584)) lt!48850)))

(declare-fun bs!4011 () Bool)

(assert (= bs!4011 d!25893))

(assert (=> bs!4011 m!106105))

(assert (=> bs!4011 m!106109))

(assert (=> bs!4011 m!106105))

(declare-fun m!106341 () Bool)

(assert (=> bs!4011 m!106341))

(assert (=> b!97246 d!25893))

(declare-fun d!25895 () Bool)

(assert (=> d!25895 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) from!355 Nil!1584)))

(declare-fun lt!48853 () Unit!2934)

(declare-fun choose!39 (array!4217 (_ BitVec 32) (_ BitVec 32)) Unit!2934)

(assert (=> d!25895 (= lt!48853 (choose!39 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!25895 (bvslt (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25895 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355) lt!48853)))

(declare-fun bs!4012 () Bool)

(assert (= bs!4012 d!25895))

(assert (=> bs!4012 m!106103))

(declare-fun m!106343 () Bool)

(assert (=> bs!4012 m!106343))

(assert (=> b!97246 d!25895))

(declare-fun d!25897 () Bool)

(declare-fun res!49132 () Bool)

(declare-fun e!63643 () Bool)

(assert (=> d!25897 (=> res!49132 e!63643)))

(assert (=> d!25897 (= res!49132 (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25897 (= (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!63643)))

(declare-fun b!97586 () Bool)

(declare-fun e!63644 () Bool)

(assert (=> b!97586 (= e!63643 e!63644)))

(declare-fun res!49133 () Bool)

(assert (=> b!97586 (=> (not res!49133) (not e!63644))))

(assert (=> b!97586 (= res!49133 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97587 () Bool)

(assert (=> b!97587 (= e!63644 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!25897 (not res!49132)) b!97586))

(assert (= (and b!97586 res!49133) b!97587))

(assert (=> d!25897 m!106219))

(assert (=> b!97587 m!106105))

(declare-fun m!106345 () Bool)

(assert (=> b!97587 m!106345))

(assert (=> b!97246 d!25897))

(declare-fun d!25899 () Bool)

(declare-fun e!63647 () Bool)

(assert (=> d!25899 e!63647))

(declare-fun c!16514 () Bool)

(assert (=> d!25899 (= c!16514 (and (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!48856 () Unit!2934)

(declare-fun choose!594 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2934)

(assert (=> d!25899 (= lt!48856 (choose!594 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(assert (=> d!25899 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992))))))

(assert (=> d!25899 (= (lemmaListMapContainsThenArrayContainsFrom!95 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) lt!48856)))

(declare-fun b!97592 () Bool)

(assert (=> b!97592 (= e!63647 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97593 () Bool)

(assert (=> b!97593 (= e!63647 (ite (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25899 c!16514) b!97592))

(assert (= (and d!25899 (not c!16514)) b!97593))

(assert (=> d!25899 m!106105))

(declare-fun m!106347 () Bool)

(assert (=> d!25899 m!106347))

(assert (=> d!25899 m!106083))

(assert (=> b!97592 m!106105))

(assert (=> b!97592 m!106109))

(assert (=> b!97246 d!25899))

(declare-fun b!97604 () Bool)

(declare-fun e!63657 () Bool)

(declare-fun e!63659 () Bool)

(assert (=> b!97604 (= e!63657 e!63659)))

(declare-fun c!16517 () Bool)

(assert (=> b!97604 (= c!16517 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun d!25901 () Bool)

(declare-fun res!49142 () Bool)

(declare-fun e!63656 () Bool)

(assert (=> d!25901 (=> res!49142 e!63656)))

(assert (=> d!25901 (= res!49142 (bvsge from!355 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!25901 (= (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) from!355 Nil!1584) e!63656)))

(declare-fun call!9944 () Bool)

(declare-fun bm!9941 () Bool)

(assert (=> bm!9941 (= call!9944 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)))))

(declare-fun b!97605 () Bool)

(declare-fun e!63658 () Bool)

(declare-fun contains!797 (List!1587 (_ BitVec 64)) Bool)

(assert (=> b!97605 (= e!63658 (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97606 () Bool)

(assert (=> b!97606 (= e!63659 call!9944)))

(declare-fun b!97607 () Bool)

(assert (=> b!97607 (= e!63659 call!9944)))

(declare-fun b!97608 () Bool)

(assert (=> b!97608 (= e!63656 e!63657)))

(declare-fun res!49141 () Bool)

(assert (=> b!97608 (=> (not res!49141) (not e!63657))))

(assert (=> b!97608 (= res!49141 (not e!63658))))

(declare-fun res!49140 () Bool)

(assert (=> b!97608 (=> (not res!49140) (not e!63658))))

(assert (=> b!97608 (= res!49140 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25901 (not res!49142)) b!97608))

(assert (= (and b!97608 res!49140) b!97605))

(assert (= (and b!97608 res!49141) b!97604))

(assert (= (and b!97604 c!16517) b!97606))

(assert (= (and b!97604 (not c!16517)) b!97607))

(assert (= (or b!97606 b!97607) bm!9941))

(assert (=> b!97604 m!106105))

(assert (=> b!97604 m!106105))

(declare-fun m!106349 () Bool)

(assert (=> b!97604 m!106349))

(assert (=> bm!9941 m!106105))

(declare-fun m!106351 () Bool)

(assert (=> bm!9941 m!106351))

(assert (=> b!97605 m!106105))

(assert (=> b!97605 m!106105))

(declare-fun m!106353 () Bool)

(assert (=> b!97605 m!106353))

(assert (=> b!97608 m!106105))

(assert (=> b!97608 m!106105))

(assert (=> b!97608 m!106349))

(assert (=> b!97246 d!25901))

(declare-fun d!25903 () Bool)

(assert (=> d!25903 (= (array_inv!1253 (_keys!4169 newMap!16)) (bvsge (size!2253 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97251 d!25903))

(declare-fun d!25905 () Bool)

(assert (=> d!25905 (= (array_inv!1254 (_values!2463 newMap!16)) (bvsge (size!2254 (_values!2463 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97251 d!25905))

(declare-fun d!25907 () Bool)

(declare-fun res!49149 () Bool)

(declare-fun e!63662 () Bool)

(assert (=> d!25907 (=> (not res!49149) (not e!63662))))

(declare-fun simpleValid!68 (LongMapFixedSize!850) Bool)

(assert (=> d!25907 (= res!49149 (simpleValid!68 newMap!16))))

(assert (=> d!25907 (= (valid!391 newMap!16) e!63662)))

(declare-fun b!97615 () Bool)

(declare-fun res!49150 () Bool)

(assert (=> b!97615 (=> (not res!49150) (not e!63662))))

(declare-fun arrayCountValidKeys!0 (array!4217 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!97615 (= res!49150 (= (arrayCountValidKeys!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (_size!474 newMap!16)))))

(declare-fun b!97616 () Bool)

(declare-fun res!49151 () Bool)

(assert (=> b!97616 (=> (not res!49151) (not e!63662))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4217 (_ BitVec 32)) Bool)

(assert (=> b!97616 (= res!49151 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun b!97617 () Bool)

(assert (=> b!97617 (= e!63662 (arrayNoDuplicates!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 Nil!1584))))

(assert (= (and d!25907 res!49149) b!97615))

(assert (= (and b!97615 res!49150) b!97616))

(assert (= (and b!97616 res!49151) b!97617))

(declare-fun m!106355 () Bool)

(assert (=> d!25907 m!106355))

(declare-fun m!106357 () Bool)

(assert (=> b!97615 m!106357))

(declare-fun m!106359 () Bool)

(assert (=> b!97616 m!106359))

(declare-fun m!106361 () Bool)

(assert (=> b!97617 m!106361))

(assert (=> b!97257 d!25907))

(declare-fun mapIsEmpty!3755 () Bool)

(declare-fun mapRes!3755 () Bool)

(assert (=> mapIsEmpty!3755 mapRes!3755))

(declare-fun b!97624 () Bool)

(declare-fun e!63668 () Bool)

(assert (=> b!97624 (= e!63668 tp_is_empty!2629)))

(declare-fun condMapEmpty!3755 () Bool)

(declare-fun mapDefault!3755 () ValueCell!971)

(assert (=> mapNonEmpty!3740 (= condMapEmpty!3755 (= mapRest!3739 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3755)))))

(declare-fun e!63667 () Bool)

(assert (=> mapNonEmpty!3740 (= tp!9557 (and e!63667 mapRes!3755))))

(declare-fun b!97625 () Bool)

(assert (=> b!97625 (= e!63667 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3755 () Bool)

(declare-fun tp!9587 () Bool)

(assert (=> mapNonEmpty!3755 (= mapRes!3755 (and tp!9587 e!63668))))

(declare-fun mapRest!3755 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapKey!3755 () (_ BitVec 32))

(declare-fun mapValue!3755 () ValueCell!971)

(assert (=> mapNonEmpty!3755 (= mapRest!3739 (store mapRest!3755 mapKey!3755 mapValue!3755))))

(assert (= (and mapNonEmpty!3740 condMapEmpty!3755) mapIsEmpty!3755))

(assert (= (and mapNonEmpty!3740 (not condMapEmpty!3755)) mapNonEmpty!3755))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!971) mapValue!3755)) b!97624))

(assert (= (and mapNonEmpty!3740 ((_ is ValueCellFull!971) mapDefault!3755)) b!97625))

(declare-fun m!106363 () Bool)

(assert (=> mapNonEmpty!3755 m!106363))

(declare-fun mapIsEmpty!3756 () Bool)

(declare-fun mapRes!3756 () Bool)

(assert (=> mapIsEmpty!3756 mapRes!3756))

(declare-fun b!97626 () Bool)

(declare-fun e!63670 () Bool)

(assert (=> b!97626 (= e!63670 tp_is_empty!2629)))

(declare-fun condMapEmpty!3756 () Bool)

(declare-fun mapDefault!3756 () ValueCell!971)

(assert (=> mapNonEmpty!3739 (= condMapEmpty!3756 (= mapRest!3740 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3756)))))

(declare-fun e!63669 () Bool)

(assert (=> mapNonEmpty!3739 (= tp!9559 (and e!63669 mapRes!3756))))

(declare-fun b!97627 () Bool)

(assert (=> b!97627 (= e!63669 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3756 () Bool)

(declare-fun tp!9588 () Bool)

(assert (=> mapNonEmpty!3756 (= mapRes!3756 (and tp!9588 e!63670))))

(declare-fun mapKey!3756 () (_ BitVec 32))

(declare-fun mapRest!3756 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3756 () ValueCell!971)

(assert (=> mapNonEmpty!3756 (= mapRest!3740 (store mapRest!3756 mapKey!3756 mapValue!3756))))

(assert (= (and mapNonEmpty!3739 condMapEmpty!3756) mapIsEmpty!3756))

(assert (= (and mapNonEmpty!3739 (not condMapEmpty!3756)) mapNonEmpty!3756))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!971) mapValue!3756)) b!97626))

(assert (= (and mapNonEmpty!3739 ((_ is ValueCellFull!971) mapDefault!3756)) b!97627))

(declare-fun m!106365 () Bool)

(assert (=> mapNonEmpty!3756 m!106365))

(declare-fun b_lambda!4327 () Bool)

(assert (= b_lambda!4325 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4327)))

(check-sat (not d!25889) b_and!5983 (not b!97449) (not bm!9926) (not b!97538) (not bm!9864) (not b!97608) (not b!97551) (not b!97429) (not bm!9924) (not bm!9930) (not mapNonEmpty!3755) (not d!25887) (not b!97617) (not d!25893) (not b!97580) (not b!97581) (not b!97592) (not b!97566) (not bm!9915) (not bm!9863) (not b_next!2425) (not b!97587) (not b!97616) (not b!97421) (not b!97605) (not bm!9916) (not d!25907) (not bm!9941) (not b!97604) (not b!97570) (not b!97562) (not mapNonEmpty!3756) (not d!25883) b_and!5981 (not d!25885) (not b!97431) (not b!97447) (not bm!9860) (not b!97537) (not b_lambda!4323) (not b!97426) (not b!97434) (not bm!9932) (not b!97572) (not d!25899) (not bm!9918) (not d!25895) (not bm!9919) (not bm!9931) (not bm!9921) (not d!25875) (not bm!9933) (not bm!9861) tp_is_empty!2629 (not b!97420) (not b!97615) (not b!97567) (not b!97437) (not b_lambda!4327) (not b!97433) (not b_next!2427) (not bm!9917))
(check-sat b_and!5981 b_and!5983 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun d!25909 () Bool)

(declare-fun res!49152 () Bool)

(declare-fun e!63671 () Bool)

(assert (=> d!25909 (=> (not res!49152) (not e!63671))))

(assert (=> d!25909 (= res!49152 (simpleValid!68 (_2!1175 lt!48824)))))

(assert (=> d!25909 (= (valid!391 (_2!1175 lt!48824)) e!63671)))

(declare-fun b!97628 () Bool)

(declare-fun res!49153 () Bool)

(assert (=> b!97628 (=> (not res!49153) (not e!63671))))

(assert (=> b!97628 (= res!49153 (= (arrayCountValidKeys!0 (_keys!4169 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))) (_size!474 (_2!1175 lt!48824))))))

(declare-fun b!97629 () Bool)

(declare-fun res!49154 () Bool)

(assert (=> b!97629 (=> (not res!49154) (not e!63671))))

(assert (=> b!97629 (= res!49154 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824))))))

(declare-fun b!97630 () Bool)

(assert (=> b!97630 (= e!63671 (arrayNoDuplicates!0 (_keys!4169 (_2!1175 lt!48824)) #b00000000000000000000000000000000 Nil!1584))))

(assert (= (and d!25909 res!49152) b!97628))

(assert (= (and b!97628 res!49153) b!97629))

(assert (= (and b!97629 res!49154) b!97630))

(declare-fun m!106367 () Bool)

(assert (=> d!25909 m!106367))

(declare-fun m!106369 () Bool)

(assert (=> b!97628 m!106369))

(declare-fun m!106371 () Bool)

(assert (=> b!97629 m!106371))

(declare-fun m!106373 () Bool)

(assert (=> b!97630 m!106373))

(assert (=> d!25889 d!25909))

(assert (=> d!25889 d!25907))

(declare-fun b!97631 () Bool)

(declare-fun e!63684 () ListLongMap!1513)

(declare-fun call!9950 () ListLongMap!1513)

(assert (=> b!97631 (= e!63684 (+!128 call!9950 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!97632 () Bool)

(declare-fun e!63673 () Bool)

(declare-fun e!63682 () Bool)

(assert (=> b!97632 (= e!63673 e!63682)))

(declare-fun res!49158 () Bool)

(assert (=> b!97632 (=> (not res!49158) (not e!63682))))

(declare-fun lt!48871 () ListLongMap!1513)

(assert (=> b!97632 (= res!49158 (contains!796 lt!48871 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97632 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!9942 () Bool)

(declare-fun call!9949 () Bool)

(assert (=> bm!9942 (= call!9949 (contains!796 lt!48871 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97633 () Bool)

(declare-fun e!63681 () Bool)

(declare-fun call!9947 () Bool)

(assert (=> b!97633 (= e!63681 (not call!9947))))

(declare-fun b!97634 () Bool)

(declare-fun e!63678 () Bool)

(assert (=> b!97634 (= e!63678 (not call!9949))))

(declare-fun b!97635 () Bool)

(declare-fun e!63677 () Bool)

(assert (=> b!97635 (= e!63678 e!63677)))

(declare-fun res!49159 () Bool)

(assert (=> b!97635 (= res!49159 call!9949)))

(assert (=> b!97635 (=> (not res!49159) (not e!63677))))

(declare-fun b!97636 () Bool)

(declare-fun e!63680 () Bool)

(assert (=> b!97636 (= e!63680 e!63681)))

(declare-fun c!16518 () Bool)

(assert (=> b!97636 (= c!16518 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9943 () Bool)

(assert (=> bm!9943 (= call!9947 (contains!796 lt!48871 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97637 () Bool)

(declare-fun e!63675 () Bool)

(assert (=> b!97637 (= e!63675 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9944 () Bool)

(declare-fun call!9946 () ListLongMap!1513)

(declare-fun call!9945 () ListLongMap!1513)

(assert (=> bm!9944 (= call!9946 call!9945)))

(declare-fun b!97638 () Bool)

(declare-fun e!63679 () ListLongMap!1513)

(declare-fun call!9948 () ListLongMap!1513)

(assert (=> b!97638 (= e!63679 call!9948)))

(declare-fun b!97639 () Bool)

(declare-fun c!16522 () Bool)

(assert (=> b!97639 (= c!16522 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63674 () ListLongMap!1513)

(assert (=> b!97639 (= e!63679 e!63674)))

(declare-fun b!97640 () Bool)

(assert (=> b!97640 (= e!63682 (= (apply!92 lt!48871 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97640 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (_values!2463 newMap!16))))))

(assert (=> b!97640 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97641 () Bool)

(assert (=> b!97641 (= e!63684 e!63679)))

(declare-fun c!16520 () Bool)

(assert (=> b!97641 (= c!16520 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9945 () Bool)

(declare-fun c!16521 () Bool)

(declare-fun call!9951 () ListLongMap!1513)

(assert (=> bm!9945 (= call!9950 (+!128 (ite c!16521 call!9945 (ite c!16520 call!9946 call!9951)) (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!9946 () Bool)

(assert (=> bm!9946 (= call!9945 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97642 () Bool)

(assert (=> b!97642 (= e!63677 (= (apply!92 lt!48871 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!97643 () Bool)

(assert (=> b!97643 (= e!63674 call!9948)))

(declare-fun b!97644 () Bool)

(declare-fun e!63676 () Unit!2934)

(declare-fun lt!48874 () Unit!2934)

(assert (=> b!97644 (= e!63676 lt!48874)))

(declare-fun lt!48860 () ListLongMap!1513)

(assert (=> b!97644 (= lt!48860 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48875 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48875 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48857 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48857 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48866 () Unit!2934)

(assert (=> b!97644 (= lt!48866 (addStillContains!68 lt!48860 lt!48875 (zeroValue!2363 newMap!16) lt!48857))))

(assert (=> b!97644 (contains!796 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) lt!48857)))

(declare-fun lt!48872 () Unit!2934)

(assert (=> b!97644 (= lt!48872 lt!48866)))

(declare-fun lt!48873 () ListLongMap!1513)

(assert (=> b!97644 (= lt!48873 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48864 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48864 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48869 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48869 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48863 () Unit!2934)

(assert (=> b!97644 (= lt!48863 (addApplyDifferent!68 lt!48873 lt!48864 (minValue!2363 newMap!16) lt!48869))))

(assert (=> b!97644 (= (apply!92 (+!128 lt!48873 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) lt!48869) (apply!92 lt!48873 lt!48869))))

(declare-fun lt!48865 () Unit!2934)

(assert (=> b!97644 (= lt!48865 lt!48863)))

(declare-fun lt!48870 () ListLongMap!1513)

(assert (=> b!97644 (= lt!48870 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48877 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48877 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48868 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48868 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48876 () Unit!2934)

(assert (=> b!97644 (= lt!48876 (addApplyDifferent!68 lt!48870 lt!48877 (zeroValue!2363 newMap!16) lt!48868))))

(assert (=> b!97644 (= (apply!92 (+!128 lt!48870 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) lt!48868) (apply!92 lt!48870 lt!48868))))

(declare-fun lt!48878 () Unit!2934)

(assert (=> b!97644 (= lt!48878 lt!48876)))

(declare-fun lt!48867 () ListLongMap!1513)

(assert (=> b!97644 (= lt!48867 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48858 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48858 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48859 () (_ BitVec 64))

(assert (=> b!97644 (= lt!48859 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97644 (= lt!48874 (addApplyDifferent!68 lt!48867 lt!48858 (minValue!2363 newMap!16) lt!48859))))

(assert (=> b!97644 (= (apply!92 (+!128 lt!48867 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) lt!48859) (apply!92 lt!48867 lt!48859))))

(declare-fun b!97645 () Bool)

(declare-fun e!63683 () Bool)

(assert (=> b!97645 (= e!63683 (= (apply!92 lt!48871 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!9947 () Bool)

(assert (=> bm!9947 (= call!9948 call!9950)))

(declare-fun b!97646 () Bool)

(assert (=> b!97646 (= e!63674 call!9951)))

(declare-fun b!97647 () Bool)

(declare-fun Unit!2946 () Unit!2934)

(assert (=> b!97647 (= e!63676 Unit!2946)))

(declare-fun b!97648 () Bool)

(declare-fun e!63672 () Bool)

(assert (=> b!97648 (= e!63672 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97649 () Bool)

(declare-fun res!49157 () Bool)

(assert (=> b!97649 (=> (not res!49157) (not e!63680))))

(assert (=> b!97649 (= res!49157 e!63678)))

(declare-fun c!16519 () Bool)

(assert (=> b!97649 (= c!16519 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25911 () Bool)

(assert (=> d!25911 e!63680))

(declare-fun res!49160 () Bool)

(assert (=> d!25911 (=> (not res!49160) (not e!63680))))

(assert (=> d!25911 (= res!49160 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!48862 () ListLongMap!1513)

(assert (=> d!25911 (= lt!48871 lt!48862)))

(declare-fun lt!48861 () Unit!2934)

(assert (=> d!25911 (= lt!48861 e!63676)))

(declare-fun c!16523 () Bool)

(assert (=> d!25911 (= c!16523 e!63672)))

(declare-fun res!49156 () Bool)

(assert (=> d!25911 (=> (not res!49156) (not e!63672))))

(assert (=> d!25911 (= res!49156 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!25911 (= lt!48862 e!63684)))

(assert (=> d!25911 (= c!16521 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25911 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25911 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!48871)))

(declare-fun bm!9948 () Bool)

(assert (=> bm!9948 (= call!9951 call!9946)))

(declare-fun b!97650 () Bool)

(assert (=> b!97650 (= e!63681 e!63683)))

(declare-fun res!49161 () Bool)

(assert (=> b!97650 (= res!49161 call!9947)))

(assert (=> b!97650 (=> (not res!49161) (not e!63683))))

(declare-fun b!97651 () Bool)

(declare-fun res!49162 () Bool)

(assert (=> b!97651 (=> (not res!49162) (not e!63680))))

(assert (=> b!97651 (= res!49162 e!63673)))

(declare-fun res!49163 () Bool)

(assert (=> b!97651 (=> res!49163 e!63673)))

(assert (=> b!97651 (= res!49163 (not e!63675))))

(declare-fun res!49155 () Bool)

(assert (=> b!97651 (=> (not res!49155) (not e!63675))))

(assert (=> b!97651 (= res!49155 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!25911 c!16521) b!97631))

(assert (= (and d!25911 (not c!16521)) b!97641))

(assert (= (and b!97641 c!16520) b!97638))

(assert (= (and b!97641 (not c!16520)) b!97639))

(assert (= (and b!97639 c!16522) b!97643))

(assert (= (and b!97639 (not c!16522)) b!97646))

(assert (= (or b!97643 b!97646) bm!9948))

(assert (= (or b!97638 bm!9948) bm!9944))

(assert (= (or b!97638 b!97643) bm!9947))

(assert (= (or b!97631 bm!9944) bm!9946))

(assert (= (or b!97631 bm!9947) bm!9945))

(assert (= (and d!25911 res!49156) b!97648))

(assert (= (and d!25911 c!16523) b!97644))

(assert (= (and d!25911 (not c!16523)) b!97647))

(assert (= (and d!25911 res!49160) b!97651))

(assert (= (and b!97651 res!49155) b!97637))

(assert (= (and b!97651 (not res!49163)) b!97632))

(assert (= (and b!97632 res!49158) b!97640))

(assert (= (and b!97651 res!49162) b!97649))

(assert (= (and b!97649 c!16519) b!97635))

(assert (= (and b!97649 (not c!16519)) b!97634))

(assert (= (and b!97635 res!49159) b!97642))

(assert (= (or b!97635 b!97634) bm!9942))

(assert (= (and b!97649 res!49157) b!97636))

(assert (= (and b!97636 c!16518) b!97650))

(assert (= (and b!97636 (not c!16518)) b!97633))

(assert (= (and b!97650 res!49161) b!97645))

(assert (= (or b!97650 b!97633) bm!9943))

(declare-fun b_lambda!4329 () Bool)

(assert (=> (not b_lambda!4329) (not b!97640)))

(declare-fun t!5544 () Bool)

(declare-fun tb!1925 () Bool)

(assert (=> (and b!97245 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16)) t!5544) tb!1925))

(declare-fun result!3271 () Bool)

(assert (=> tb!1925 (= result!3271 tp_is_empty!2629)))

(assert (=> b!97640 t!5544))

(declare-fun b_and!5985 () Bool)

(assert (= b_and!5981 (and (=> t!5544 result!3271) b_and!5985)))

(declare-fun t!5546 () Bool)

(declare-fun tb!1927 () Bool)

(assert (=> (and b!97251 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 newMap!16)) t!5546) tb!1927))

(declare-fun result!3273 () Bool)

(assert (= result!3273 result!3271))

(assert (=> b!97640 t!5546))

(declare-fun b_and!5987 () Bool)

(assert (= b_and!5983 (and (=> t!5546 result!3273) b_and!5987)))

(declare-fun m!106375 () Bool)

(assert (=> b!97632 m!106375))

(assert (=> b!97632 m!106375))

(declare-fun m!106377 () Bool)

(assert (=> b!97632 m!106377))

(declare-fun m!106379 () Bool)

(assert (=> b!97644 m!106379))

(declare-fun m!106381 () Bool)

(assert (=> b!97644 m!106381))

(declare-fun m!106383 () Bool)

(assert (=> b!97644 m!106383))

(assert (=> b!97644 m!106383))

(declare-fun m!106385 () Bool)

(assert (=> b!97644 m!106385))

(declare-fun m!106387 () Bool)

(assert (=> b!97644 m!106387))

(declare-fun m!106389 () Bool)

(assert (=> b!97644 m!106389))

(declare-fun m!106391 () Bool)

(assert (=> b!97644 m!106391))

(declare-fun m!106393 () Bool)

(assert (=> b!97644 m!106393))

(assert (=> b!97644 m!106381))

(declare-fun m!106395 () Bool)

(assert (=> b!97644 m!106395))

(declare-fun m!106397 () Bool)

(assert (=> b!97644 m!106397))

(declare-fun m!106399 () Bool)

(assert (=> b!97644 m!106399))

(declare-fun m!106401 () Bool)

(assert (=> b!97644 m!106401))

(assert (=> b!97644 m!106375))

(assert (=> b!97644 m!106391))

(declare-fun m!106403 () Bool)

(assert (=> b!97644 m!106403))

(declare-fun m!106405 () Bool)

(assert (=> b!97644 m!106405))

(declare-fun m!106407 () Bool)

(assert (=> b!97644 m!106407))

(declare-fun m!106409 () Bool)

(assert (=> b!97644 m!106409))

(assert (=> b!97644 m!106397))

(declare-fun m!106411 () Bool)

(assert (=> bm!9942 m!106411))

(declare-fun m!106413 () Bool)

(assert (=> b!97631 m!106413))

(declare-fun m!106415 () Bool)

(assert (=> bm!9943 m!106415))

(declare-fun m!106417 () Bool)

(assert (=> b!97645 m!106417))

(assert (=> b!97640 m!106375))

(declare-fun m!106419 () Bool)

(assert (=> b!97640 m!106419))

(declare-fun m!106421 () Bool)

(assert (=> b!97640 m!106421))

(declare-fun m!106423 () Bool)

(assert (=> b!97640 m!106423))

(assert (=> b!97640 m!106375))

(declare-fun m!106425 () Bool)

(assert (=> b!97640 m!106425))

(assert (=> b!97640 m!106419))

(assert (=> b!97640 m!106421))

(declare-fun m!106427 () Bool)

(assert (=> d!25911 m!106427))

(declare-fun m!106429 () Bool)

(assert (=> bm!9945 m!106429))

(assert (=> b!97637 m!106375))

(assert (=> b!97637 m!106375))

(declare-fun m!106431 () Bool)

(assert (=> b!97637 m!106431))

(assert (=> bm!9946 m!106403))

(assert (=> b!97648 m!106375))

(assert (=> b!97648 m!106375))

(assert (=> b!97648 m!106431))

(declare-fun m!106433 () Bool)

(assert (=> b!97642 m!106433))

(assert (=> d!25883 d!25911))

(declare-fun b!97652 () Bool)

(declare-fun e!63697 () ListLongMap!1513)

(declare-fun call!9957 () ListLongMap!1513)

(assert (=> b!97652 (= e!63697 (+!128 call!9957 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!97653 () Bool)

(declare-fun e!63686 () Bool)

(declare-fun e!63695 () Bool)

(assert (=> b!97653 (= e!63686 e!63695)))

(declare-fun res!49167 () Bool)

(assert (=> b!97653 (=> (not res!49167) (not e!63695))))

(declare-fun lt!48893 () ListLongMap!1513)

(assert (=> b!97653 (= res!49167 (contains!796 lt!48893 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97653 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!9949 () Bool)

(declare-fun call!9956 () Bool)

(assert (=> bm!9949 (= call!9956 (contains!796 lt!48893 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97654 () Bool)

(declare-fun e!63694 () Bool)

(declare-fun call!9954 () Bool)

(assert (=> b!97654 (= e!63694 (not call!9954))))

(declare-fun b!97655 () Bool)

(declare-fun e!63691 () Bool)

(assert (=> b!97655 (= e!63691 (not call!9956))))

(declare-fun b!97656 () Bool)

(declare-fun e!63690 () Bool)

(assert (=> b!97656 (= e!63691 e!63690)))

(declare-fun res!49168 () Bool)

(assert (=> b!97656 (= res!49168 call!9956)))

(assert (=> b!97656 (=> (not res!49168) (not e!63690))))

(declare-fun b!97657 () Bool)

(declare-fun e!63693 () Bool)

(assert (=> b!97657 (= e!63693 e!63694)))

(declare-fun c!16524 () Bool)

(assert (=> b!97657 (= c!16524 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9950 () Bool)

(assert (=> bm!9950 (= call!9954 (contains!796 lt!48893 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97658 () Bool)

(declare-fun e!63688 () Bool)

(assert (=> b!97658 (= e!63688 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9951 () Bool)

(declare-fun call!9953 () ListLongMap!1513)

(declare-fun call!9952 () ListLongMap!1513)

(assert (=> bm!9951 (= call!9953 call!9952)))

(declare-fun b!97659 () Bool)

(declare-fun e!63692 () ListLongMap!1513)

(declare-fun call!9955 () ListLongMap!1513)

(assert (=> b!97659 (= e!63692 call!9955)))

(declare-fun b!97660 () Bool)

(declare-fun c!16528 () Bool)

(assert (=> b!97660 (= c!16528 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63687 () ListLongMap!1513)

(assert (=> b!97660 (= e!63692 e!63687)))

(declare-fun b!97661 () Bool)

(assert (=> b!97661 (= e!63695 (= (apply!92 lt!48893 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97661 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (ite c!16508 (_values!2463 newMap!16) lt!48825))))))

(assert (=> b!97661 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97662 () Bool)

(assert (=> b!97662 (= e!63697 e!63692)))

(declare-fun c!16526 () Bool)

(assert (=> b!97662 (= c!16526 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9952 () Bool)

(declare-fun call!9958 () ListLongMap!1513)

(declare-fun c!16527 () Bool)

(assert (=> bm!9952 (= call!9957 (+!128 (ite c!16527 call!9952 (ite c!16526 call!9953 call!9958)) (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!9953 () Bool)

(assert (=> bm!9953 (= call!9952 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97663 () Bool)

(assert (=> b!97663 (= e!63690 (= (apply!92 lt!48893 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!97664 () Bool)

(assert (=> b!97664 (= e!63687 call!9955)))

(declare-fun b!97665 () Bool)

(declare-fun e!63689 () Unit!2934)

(declare-fun lt!48896 () Unit!2934)

(assert (=> b!97665 (= e!63689 lt!48896)))

(declare-fun lt!48882 () ListLongMap!1513)

(assert (=> b!97665 (= lt!48882 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48897 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48897 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48879 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48879 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48888 () Unit!2934)

(assert (=> b!97665 (= lt!48888 (addStillContains!68 lt!48882 lt!48897 (zeroValue!2363 newMap!16) lt!48879))))

(assert (=> b!97665 (contains!796 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) lt!48879)))

(declare-fun lt!48894 () Unit!2934)

(assert (=> b!97665 (= lt!48894 lt!48888)))

(declare-fun lt!48895 () ListLongMap!1513)

(assert (=> b!97665 (= lt!48895 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48886 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48886 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48891 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48891 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48885 () Unit!2934)

(assert (=> b!97665 (= lt!48885 (addApplyDifferent!68 lt!48895 lt!48886 (minValue!2363 newMap!16) lt!48891))))

(assert (=> b!97665 (= (apply!92 (+!128 lt!48895 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) lt!48891) (apply!92 lt!48895 lt!48891))))

(declare-fun lt!48887 () Unit!2934)

(assert (=> b!97665 (= lt!48887 lt!48885)))

(declare-fun lt!48892 () ListLongMap!1513)

(assert (=> b!97665 (= lt!48892 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48899 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48899 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48890 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48890 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48898 () Unit!2934)

(assert (=> b!97665 (= lt!48898 (addApplyDifferent!68 lt!48892 lt!48899 (zeroValue!2363 newMap!16) lt!48890))))

(assert (=> b!97665 (= (apply!92 (+!128 lt!48892 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) lt!48890) (apply!92 lt!48892 lt!48890))))

(declare-fun lt!48900 () Unit!2934)

(assert (=> b!97665 (= lt!48900 lt!48898)))

(declare-fun lt!48889 () ListLongMap!1513)

(assert (=> b!97665 (= lt!48889 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48880 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48880 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48881 () (_ BitVec 64))

(assert (=> b!97665 (= lt!48881 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97665 (= lt!48896 (addApplyDifferent!68 lt!48889 lt!48880 (minValue!2363 newMap!16) lt!48881))))

(assert (=> b!97665 (= (apply!92 (+!128 lt!48889 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) lt!48881) (apply!92 lt!48889 lt!48881))))

(declare-fun b!97666 () Bool)

(declare-fun e!63696 () Bool)

(assert (=> b!97666 (= e!63696 (= (apply!92 lt!48893 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!9954 () Bool)

(assert (=> bm!9954 (= call!9955 call!9957)))

(declare-fun b!97667 () Bool)

(assert (=> b!97667 (= e!63687 call!9958)))

(declare-fun b!97668 () Bool)

(declare-fun Unit!2947 () Unit!2934)

(assert (=> b!97668 (= e!63689 Unit!2947)))

(declare-fun b!97669 () Bool)

(declare-fun e!63685 () Bool)

(assert (=> b!97669 (= e!63685 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97670 () Bool)

(declare-fun res!49166 () Bool)

(assert (=> b!97670 (=> (not res!49166) (not e!63693))))

(assert (=> b!97670 (= res!49166 e!63691)))

(declare-fun c!16525 () Bool)

(assert (=> b!97670 (= c!16525 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25913 () Bool)

(assert (=> d!25913 e!63693))

(declare-fun res!49169 () Bool)

(assert (=> d!25913 (=> (not res!49169) (not e!63693))))

(assert (=> d!25913 (= res!49169 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!48884 () ListLongMap!1513)

(assert (=> d!25913 (= lt!48893 lt!48884)))

(declare-fun lt!48883 () Unit!2934)

(assert (=> d!25913 (= lt!48883 e!63689)))

(declare-fun c!16529 () Bool)

(assert (=> d!25913 (= c!16529 e!63685)))

(declare-fun res!49165 () Bool)

(assert (=> d!25913 (=> (not res!49165) (not e!63685))))

(assert (=> d!25913 (= res!49165 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!25913 (= lt!48884 e!63697)))

(assert (=> d!25913 (= c!16527 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25913 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25913 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!48893)))

(declare-fun bm!9955 () Bool)

(assert (=> bm!9955 (= call!9958 call!9953)))

(declare-fun b!97671 () Bool)

(assert (=> b!97671 (= e!63694 e!63696)))

(declare-fun res!49170 () Bool)

(assert (=> b!97671 (= res!49170 call!9954)))

(assert (=> b!97671 (=> (not res!49170) (not e!63696))))

(declare-fun b!97672 () Bool)

(declare-fun res!49171 () Bool)

(assert (=> b!97672 (=> (not res!49171) (not e!63693))))

(assert (=> b!97672 (= res!49171 e!63686)))

(declare-fun res!49172 () Bool)

(assert (=> b!97672 (=> res!49172 e!63686)))

(assert (=> b!97672 (= res!49172 (not e!63688))))

(declare-fun res!49164 () Bool)

(assert (=> b!97672 (=> (not res!49164) (not e!63688))))

(assert (=> b!97672 (= res!49164 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!25913 c!16527) b!97652))

(assert (= (and d!25913 (not c!16527)) b!97662))

(assert (= (and b!97662 c!16526) b!97659))

(assert (= (and b!97662 (not c!16526)) b!97660))

(assert (= (and b!97660 c!16528) b!97664))

(assert (= (and b!97660 (not c!16528)) b!97667))

(assert (= (or b!97664 b!97667) bm!9955))

(assert (= (or b!97659 bm!9955) bm!9951))

(assert (= (or b!97659 b!97664) bm!9954))

(assert (= (or b!97652 bm!9951) bm!9953))

(assert (= (or b!97652 bm!9954) bm!9952))

(assert (= (and d!25913 res!49165) b!97669))

(assert (= (and d!25913 c!16529) b!97665))

(assert (= (and d!25913 (not c!16529)) b!97668))

(assert (= (and d!25913 res!49169) b!97672))

(assert (= (and b!97672 res!49164) b!97658))

(assert (= (and b!97672 (not res!49172)) b!97653))

(assert (= (and b!97653 res!49167) b!97661))

(assert (= (and b!97672 res!49171) b!97670))

(assert (= (and b!97670 c!16525) b!97656))

(assert (= (and b!97670 (not c!16525)) b!97655))

(assert (= (and b!97656 res!49168) b!97663))

(assert (= (or b!97656 b!97655) bm!9949))

(assert (= (and b!97670 res!49166) b!97657))

(assert (= (and b!97657 c!16524) b!97671))

(assert (= (and b!97657 (not c!16524)) b!97654))

(assert (= (and b!97671 res!49170) b!97666))

(assert (= (or b!97671 b!97654) bm!9950))

(declare-fun b_lambda!4331 () Bool)

(assert (=> (not b_lambda!4331) (not b!97661)))

(assert (=> b!97661 t!5544))

(declare-fun b_and!5989 () Bool)

(assert (= b_and!5985 (and (=> t!5544 result!3271) b_and!5989)))

(assert (=> b!97661 t!5546))

(declare-fun b_and!5991 () Bool)

(assert (= b_and!5987 (and (=> t!5546 result!3273) b_and!5991)))

(assert (=> b!97653 m!106375))

(assert (=> b!97653 m!106375))

(declare-fun m!106435 () Bool)

(assert (=> b!97653 m!106435))

(declare-fun m!106437 () Bool)

(assert (=> b!97665 m!106437))

(declare-fun m!106439 () Bool)

(assert (=> b!97665 m!106439))

(declare-fun m!106441 () Bool)

(assert (=> b!97665 m!106441))

(assert (=> b!97665 m!106441))

(declare-fun m!106443 () Bool)

(assert (=> b!97665 m!106443))

(declare-fun m!106445 () Bool)

(assert (=> b!97665 m!106445))

(declare-fun m!106447 () Bool)

(assert (=> b!97665 m!106447))

(declare-fun m!106449 () Bool)

(assert (=> b!97665 m!106449))

(declare-fun m!106451 () Bool)

(assert (=> b!97665 m!106451))

(assert (=> b!97665 m!106439))

(declare-fun m!106453 () Bool)

(assert (=> b!97665 m!106453))

(declare-fun m!106455 () Bool)

(assert (=> b!97665 m!106455))

(declare-fun m!106457 () Bool)

(assert (=> b!97665 m!106457))

(declare-fun m!106459 () Bool)

(assert (=> b!97665 m!106459))

(assert (=> b!97665 m!106375))

(assert (=> b!97665 m!106449))

(declare-fun m!106461 () Bool)

(assert (=> b!97665 m!106461))

(declare-fun m!106463 () Bool)

(assert (=> b!97665 m!106463))

(declare-fun m!106465 () Bool)

(assert (=> b!97665 m!106465))

(declare-fun m!106467 () Bool)

(assert (=> b!97665 m!106467))

(assert (=> b!97665 m!106455))

(declare-fun m!106469 () Bool)

(assert (=> bm!9949 m!106469))

(declare-fun m!106471 () Bool)

(assert (=> b!97652 m!106471))

(declare-fun m!106473 () Bool)

(assert (=> bm!9950 m!106473))

(declare-fun m!106475 () Bool)

(assert (=> b!97666 m!106475))

(assert (=> b!97661 m!106375))

(declare-fun m!106477 () Bool)

(assert (=> b!97661 m!106477))

(assert (=> b!97661 m!106421))

(declare-fun m!106479 () Bool)

(assert (=> b!97661 m!106479))

(assert (=> b!97661 m!106375))

(declare-fun m!106481 () Bool)

(assert (=> b!97661 m!106481))

(assert (=> b!97661 m!106477))

(assert (=> b!97661 m!106421))

(assert (=> d!25913 m!106427))

(declare-fun m!106483 () Bool)

(assert (=> bm!9952 m!106483))

(assert (=> b!97658 m!106375))

(assert (=> b!97658 m!106375))

(assert (=> b!97658 m!106431))

(assert (=> bm!9953 m!106461))

(assert (=> b!97669 m!106375))

(assert (=> b!97669 m!106375))

(assert (=> b!97669 m!106431))

(declare-fun m!106485 () Bool)

(assert (=> b!97663 m!106485))

(assert (=> bm!9917 d!25913))

(declare-fun d!25915 () Bool)

(declare-fun e!63700 () Bool)

(assert (=> d!25915 e!63700))

(declare-fun c!16532 () Bool)

(assert (=> d!25915 (= c!16532 (and (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!25915 true))

(declare-fun _$29!126 () Unit!2934)

(assert (=> d!25915 (= (choose!594 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) _$29!126)))

(declare-fun b!97677 () Bool)

(assert (=> b!97677 (= e!63700 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97678 () Bool)

(assert (=> b!97678 (= e!63700 (ite (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25915 c!16532) b!97677))

(assert (= (and d!25915 (not c!16532)) b!97678))

(assert (=> b!97677 m!106105))

(assert (=> b!97677 m!106109))

(assert (=> d!25899 d!25915))

(assert (=> d!25899 d!25881))

(declare-fun d!25917 () Bool)

(declare-fun get!1288 (Option!154) V!3153)

(assert (=> d!25917 (= (apply!92 lt!48747 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1288 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4013 () Bool)

(assert (= bs!4013 d!25917))

(assert (=> bs!4013 m!106219))

(declare-fun m!106487 () Bool)

(assert (=> bs!4013 m!106487))

(assert (=> bs!4013 m!106487))

(declare-fun m!106489 () Bool)

(assert (=> bs!4013 m!106489))

(assert (=> b!97429 d!25917))

(declare-fun d!25919 () Bool)

(declare-fun c!16533 () Bool)

(assert (=> d!25919 (= c!16533 ((_ is ValueCellFull!971) (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63701 () V!3153)

(assert (=> d!25919 (= (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63701)))

(declare-fun b!97679 () Bool)

(assert (=> b!97679 (= e!63701 (get!1286 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97680 () Bool)

(assert (=> b!97680 (= e!63701 (get!1287 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25919 c!16533) b!97679))

(assert (= (and d!25919 (not c!16533)) b!97680))

(assert (=> b!97679 m!106263))

(assert (=> b!97679 m!106119))

(declare-fun m!106491 () Bool)

(assert (=> b!97679 m!106491))

(assert (=> b!97680 m!106263))

(assert (=> b!97680 m!106119))

(declare-fun m!106493 () Bool)

(assert (=> b!97680 m!106493))

(assert (=> b!97429 d!25919))

(declare-fun e!63709 () SeekEntryResult!256)

(declare-fun lt!48909 () SeekEntryResult!256)

(declare-fun b!97693 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4217 (_ BitVec 32)) SeekEntryResult!256)

(assert (=> b!97693 (= e!63709 (seekKeyOrZeroReturnVacant!0 (x!12961 lt!48909) (index!3169 lt!48909) (index!3169 lt!48909) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun lt!48907 () SeekEntryResult!256)

(declare-fun d!25921 () Bool)

(assert (=> d!25921 (and (or ((_ is Undefined!256) lt!48907) (not ((_ is Found!256) lt!48907)) (and (bvsge (index!3168 lt!48907) #b00000000000000000000000000000000) (bvslt (index!3168 lt!48907) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!48907) ((_ is Found!256) lt!48907) (not ((_ is MissingZero!256) lt!48907)) (and (bvsge (index!3167 lt!48907) #b00000000000000000000000000000000) (bvslt (index!3167 lt!48907) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!48907) ((_ is Found!256) lt!48907) ((_ is MissingZero!256) lt!48907) (not ((_ is MissingVacant!256) lt!48907)) (and (bvsge (index!3170 lt!48907) #b00000000000000000000000000000000) (bvslt (index!3170 lt!48907) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!48907) (ite ((_ is Found!256) lt!48907) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48907)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite ((_ is MissingZero!256) lt!48907) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!48907)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!256) lt!48907) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!48907)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63708 () SeekEntryResult!256)

(assert (=> d!25921 (= lt!48907 e!63708)))

(declare-fun c!16541 () Bool)

(assert (=> d!25921 (= c!16541 (and ((_ is Intermediate!256) lt!48909) (undefined!1068 lt!48909)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4217 (_ BitVec 32)) SeekEntryResult!256)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!25921 (= lt!48909 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (=> d!25921 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25921 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)) lt!48907)))

(declare-fun b!97694 () Bool)

(declare-fun c!16540 () Bool)

(declare-fun lt!48908 () (_ BitVec 64))

(assert (=> b!97694 (= c!16540 (= lt!48908 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63710 () SeekEntryResult!256)

(assert (=> b!97694 (= e!63710 e!63709)))

(declare-fun b!97695 () Bool)

(assert (=> b!97695 (= e!63710 (Found!256 (index!3169 lt!48909)))))

(declare-fun b!97696 () Bool)

(assert (=> b!97696 (= e!63708 e!63710)))

(assert (=> b!97696 (= lt!48908 (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!48909)))))

(declare-fun c!16542 () Bool)

(assert (=> b!97696 (= c!16542 (= lt!48908 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97697 () Bool)

(assert (=> b!97697 (= e!63708 Undefined!256)))

(declare-fun b!97698 () Bool)

(assert (=> b!97698 (= e!63709 (MissingZero!256 (index!3169 lt!48909)))))

(assert (= (and d!25921 c!16541) b!97697))

(assert (= (and d!25921 (not c!16541)) b!97696))

(assert (= (and b!97696 c!16542) b!97695))

(assert (= (and b!97696 (not c!16542)) b!97694))

(assert (= (and b!97694 c!16540) b!97698))

(assert (= (and b!97694 (not c!16540)) b!97693))

(assert (=> b!97693 m!106105))

(declare-fun m!106495 () Bool)

(assert (=> b!97693 m!106495))

(assert (=> d!25921 m!106427))

(assert (=> d!25921 m!106105))

(declare-fun m!106497 () Bool)

(assert (=> d!25921 m!106497))

(declare-fun m!106499 () Bool)

(assert (=> d!25921 m!106499))

(assert (=> d!25921 m!106497))

(assert (=> d!25921 m!106105))

(declare-fun m!106501 () Bool)

(assert (=> d!25921 m!106501))

(declare-fun m!106503 () Bool)

(assert (=> d!25921 m!106503))

(declare-fun m!106505 () Bool)

(assert (=> d!25921 m!106505))

(declare-fun m!106507 () Bool)

(assert (=> b!97696 m!106507))

(assert (=> bm!9926 d!25921))

(assert (=> b!97562 d!25921))

(declare-fun d!25923 () Bool)

(declare-fun e!63713 () Bool)

(assert (=> d!25923 e!63713))

(declare-fun res!49178 () Bool)

(assert (=> d!25923 (=> (not res!49178) (not e!63713))))

(declare-fun lt!48921 () ListLongMap!1513)

(assert (=> d!25923 (= res!49178 (contains!796 lt!48921 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun lt!48919 () List!1586)

(assert (=> d!25923 (= lt!48921 (ListLongMap!1514 lt!48919))))

(declare-fun lt!48920 () Unit!2934)

(declare-fun lt!48918 () Unit!2934)

(assert (=> d!25923 (= lt!48920 lt!48918)))

(assert (=> d!25923 (= (getValueByKey!148 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (Some!153 (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!67 (List!1586 (_ BitVec 64) V!3153) Unit!2934)

(assert (=> d!25923 (= lt!48918 (lemmaContainsTupThenGetReturnValue!67 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun insertStrictlySorted!70 (List!1586 (_ BitVec 64) V!3153) List!1586)

(assert (=> d!25923 (= lt!48919 (insertStrictlySorted!70 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!25923 (= (+!128 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48921)))

(declare-fun b!97703 () Bool)

(declare-fun res!49177 () Bool)

(assert (=> b!97703 (=> (not res!49177) (not e!63713))))

(assert (=> b!97703 (= res!49177 (= (getValueByKey!148 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (Some!153 (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!97704 () Bool)

(declare-fun contains!798 (List!1586 tuple2!2326) Bool)

(assert (=> b!97704 (= e!63713 (contains!798 (toList!772 lt!48921) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!25923 res!49178) b!97703))

(assert (= (and b!97703 res!49177) b!97704))

(declare-fun m!106509 () Bool)

(assert (=> d!25923 m!106509))

(declare-fun m!106511 () Bool)

(assert (=> d!25923 m!106511))

(declare-fun m!106513 () Bool)

(assert (=> d!25923 m!106513))

(declare-fun m!106515 () Bool)

(assert (=> d!25923 m!106515))

(declare-fun m!106517 () Bool)

(assert (=> b!97703 m!106517))

(declare-fun m!106519 () Bool)

(assert (=> b!97704 m!106519))

(assert (=> bm!9863 d!25923))

(declare-fun d!25925 () Bool)

(declare-fun res!49179 () Bool)

(declare-fun e!63714 () Bool)

(assert (=> d!25925 (=> res!49179 e!63714)))

(assert (=> d!25925 (= res!49179 (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25925 (= (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!63714)))

(declare-fun b!97705 () Bool)

(declare-fun e!63715 () Bool)

(assert (=> b!97705 (= e!63714 e!63715)))

(declare-fun res!49180 () Bool)

(assert (=> b!97705 (=> (not res!49180) (not e!63715))))

(assert (=> b!97705 (= res!49180 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97706 () Bool)

(assert (=> b!97706 (= e!63715 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25925 (not res!49179)) b!97705))

(assert (= (and b!97705 res!49180) b!97706))

(declare-fun m!106521 () Bool)

(assert (=> d!25925 m!106521))

(assert (=> b!97706 m!106105))

(declare-fun m!106523 () Bool)

(assert (=> b!97706 m!106523))

(assert (=> b!97587 d!25925))

(declare-fun d!25927 () Bool)

(assert (=> d!25927 (= (apply!92 lt!48747 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4014 () Bool)

(assert (= bs!4014 d!25927))

(declare-fun m!106525 () Bool)

(assert (=> bs!4014 m!106525))

(assert (=> bs!4014 m!106525))

(declare-fun m!106527 () Bool)

(assert (=> bs!4014 m!106527))

(assert (=> b!97431 d!25927))

(declare-fun b!97707 () Bool)

(declare-fun call!9964 () ListLongMap!1513)

(declare-fun e!63728 () ListLongMap!1513)

(assert (=> b!97707 (= e!63728 (+!128 call!9964 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(declare-fun b!97708 () Bool)

(declare-fun e!63717 () Bool)

(declare-fun e!63726 () Bool)

(assert (=> b!97708 (= e!63717 e!63726)))

(declare-fun res!49184 () Bool)

(assert (=> b!97708 (=> (not res!49184) (not e!63726))))

(declare-fun lt!48936 () ListLongMap!1513)

(assert (=> b!97708 (= res!49184 (contains!796 lt!48936 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97708 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!9956 () Bool)

(declare-fun call!9963 () Bool)

(assert (=> bm!9956 (= call!9963 (contains!796 lt!48936 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97709 () Bool)

(declare-fun e!63725 () Bool)

(declare-fun call!9961 () Bool)

(assert (=> b!97709 (= e!63725 (not call!9961))))

(declare-fun b!97710 () Bool)

(declare-fun e!63722 () Bool)

(assert (=> b!97710 (= e!63722 (not call!9963))))

(declare-fun b!97711 () Bool)

(declare-fun e!63721 () Bool)

(assert (=> b!97711 (= e!63722 e!63721)))

(declare-fun res!49185 () Bool)

(assert (=> b!97711 (= res!49185 call!9963)))

(assert (=> b!97711 (=> (not res!49185) (not e!63721))))

(declare-fun b!97712 () Bool)

(declare-fun e!63724 () Bool)

(assert (=> b!97712 (= e!63724 e!63725)))

(declare-fun c!16543 () Bool)

(assert (=> b!97712 (= c!16543 (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9957 () Bool)

(assert (=> bm!9957 (= call!9961 (contains!796 lt!48936 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97713 () Bool)

(declare-fun e!63719 () Bool)

(assert (=> b!97713 (= e!63719 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9958 () Bool)

(declare-fun call!9960 () ListLongMap!1513)

(declare-fun call!9959 () ListLongMap!1513)

(assert (=> bm!9958 (= call!9960 call!9959)))

(declare-fun b!97714 () Bool)

(declare-fun e!63723 () ListLongMap!1513)

(declare-fun call!9962 () ListLongMap!1513)

(assert (=> b!97714 (= e!63723 call!9962)))

(declare-fun c!16547 () Bool)

(declare-fun b!97715 () Bool)

(assert (=> b!97715 (= c!16547 (and (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63718 () ListLongMap!1513)

(assert (=> b!97715 (= e!63723 e!63718)))

(declare-fun b!97716 () Bool)

(assert (=> b!97716 (= e!63726 (= (apply!92 lt!48936 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97716 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))))))))

(assert (=> b!97716 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97717 () Bool)

(assert (=> b!97717 (= e!63728 e!63723)))

(declare-fun c!16545 () Bool)

(assert (=> b!97717 (= c!16545 (and (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9959 () Bool)

(declare-fun c!16546 () Bool)

(declare-fun call!9965 () ListLongMap!1513)

(assert (=> bm!9959 (= call!9964 (+!128 (ite c!16546 call!9959 (ite c!16545 call!9960 call!9965)) (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun bm!9960 () Bool)

(assert (=> bm!9960 (= call!9959 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97718 () Bool)

(assert (=> b!97718 (= e!63721 (= (apply!92 lt!48936 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))

(declare-fun b!97719 () Bool)

(assert (=> b!97719 (= e!63718 call!9962)))

(declare-fun b!97720 () Bool)

(declare-fun e!63720 () Unit!2934)

(declare-fun lt!48939 () Unit!2934)

(assert (=> b!97720 (= e!63720 lt!48939)))

(declare-fun lt!48925 () ListLongMap!1513)

(assert (=> b!97720 (= lt!48925 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48940 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48940 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48922 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48922 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48931 () Unit!2934)

(assert (=> b!97720 (= lt!48931 (addStillContains!68 lt!48925 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48922))))

(assert (=> b!97720 (contains!796 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48922)))

(declare-fun lt!48937 () Unit!2934)

(assert (=> b!97720 (= lt!48937 lt!48931)))

(declare-fun lt!48938 () ListLongMap!1513)

(assert (=> b!97720 (= lt!48938 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48929 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48929 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48934 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48934 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48928 () Unit!2934)

(assert (=> b!97720 (= lt!48928 (addApplyDifferent!68 lt!48938 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48934))))

(assert (=> b!97720 (= (apply!92 (+!128 lt!48938 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48934) (apply!92 lt!48938 lt!48934))))

(declare-fun lt!48930 () Unit!2934)

(assert (=> b!97720 (= lt!48930 lt!48928)))

(declare-fun lt!48935 () ListLongMap!1513)

(assert (=> b!97720 (= lt!48935 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48942 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48942 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48933 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48933 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48941 () Unit!2934)

(assert (=> b!97720 (= lt!48941 (addApplyDifferent!68 lt!48935 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48933))))

(assert (=> b!97720 (= (apply!92 (+!128 lt!48935 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48933) (apply!92 lt!48935 lt!48933))))

(declare-fun lt!48943 () Unit!2934)

(assert (=> b!97720 (= lt!48943 lt!48941)))

(declare-fun lt!48932 () ListLongMap!1513)

(assert (=> b!97720 (= lt!48932 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48923 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48923 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48924 () (_ BitVec 64))

(assert (=> b!97720 (= lt!48924 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97720 (= lt!48939 (addApplyDifferent!68 lt!48932 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48924))))

(assert (=> b!97720 (= (apply!92 (+!128 lt!48932 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48924) (apply!92 lt!48932 lt!48924))))

(declare-fun e!63727 () Bool)

(declare-fun b!97721 () Bool)

(assert (=> b!97721 (= e!63727 (= (apply!92 lt!48936 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))

(declare-fun bm!9961 () Bool)

(assert (=> bm!9961 (= call!9962 call!9964)))

(declare-fun b!97722 () Bool)

(assert (=> b!97722 (= e!63718 call!9965)))

(declare-fun b!97723 () Bool)

(declare-fun Unit!2948 () Unit!2934)

(assert (=> b!97723 (= e!63720 Unit!2948)))

(declare-fun b!97724 () Bool)

(declare-fun e!63716 () Bool)

(assert (=> b!97724 (= e!63716 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97725 () Bool)

(declare-fun res!49183 () Bool)

(assert (=> b!97725 (=> (not res!49183) (not e!63724))))

(assert (=> b!97725 (= res!49183 e!63722)))

(declare-fun c!16544 () Bool)

(assert (=> b!97725 (= c!16544 (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25929 () Bool)

(assert (=> d!25929 e!63724))

(declare-fun res!49186 () Bool)

(assert (=> d!25929 (=> (not res!49186) (not e!63724))))

(assert (=> d!25929 (= res!49186 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!48927 () ListLongMap!1513)

(assert (=> d!25929 (= lt!48936 lt!48927)))

(declare-fun lt!48926 () Unit!2934)

(assert (=> d!25929 (= lt!48926 e!63720)))

(declare-fun c!16548 () Bool)

(assert (=> d!25929 (= c!16548 e!63716)))

(declare-fun res!49182 () Bool)

(assert (=> d!25929 (=> (not res!49182) (not e!63716))))

(assert (=> d!25929 (= res!49182 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!25929 (= lt!48927 e!63728)))

(assert (=> d!25929 (= c!16546 (and (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25929 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25929 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!48936)))

(declare-fun bm!9962 () Bool)

(assert (=> bm!9962 (= call!9965 call!9960)))

(declare-fun b!97726 () Bool)

(assert (=> b!97726 (= e!63725 e!63727)))

(declare-fun res!49187 () Bool)

(assert (=> b!97726 (= res!49187 call!9961)))

(assert (=> b!97726 (=> (not res!49187) (not e!63727))))

(declare-fun b!97727 () Bool)

(declare-fun res!49188 () Bool)

(assert (=> b!97727 (=> (not res!49188) (not e!63724))))

(assert (=> b!97727 (= res!49188 e!63717)))

(declare-fun res!49189 () Bool)

(assert (=> b!97727 (=> res!49189 e!63717)))

(assert (=> b!97727 (= res!49189 (not e!63719))))

(declare-fun res!49181 () Bool)

(assert (=> b!97727 (=> (not res!49181) (not e!63719))))

(assert (=> b!97727 (= res!49181 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!25929 c!16546) b!97707))

(assert (= (and d!25929 (not c!16546)) b!97717))

(assert (= (and b!97717 c!16545) b!97714))

(assert (= (and b!97717 (not c!16545)) b!97715))

(assert (= (and b!97715 c!16547) b!97719))

(assert (= (and b!97715 (not c!16547)) b!97722))

(assert (= (or b!97719 b!97722) bm!9962))

(assert (= (or b!97714 bm!9962) bm!9958))

(assert (= (or b!97714 b!97719) bm!9961))

(assert (= (or b!97707 bm!9958) bm!9960))

(assert (= (or b!97707 bm!9961) bm!9959))

(assert (= (and d!25929 res!49182) b!97724))

(assert (= (and d!25929 c!16548) b!97720))

(assert (= (and d!25929 (not c!16548)) b!97723))

(assert (= (and d!25929 res!49186) b!97727))

(assert (= (and b!97727 res!49181) b!97713))

(assert (= (and b!97727 (not res!49189)) b!97708))

(assert (= (and b!97708 res!49184) b!97716))

(assert (= (and b!97727 res!49188) b!97725))

(assert (= (and b!97725 c!16544) b!97711))

(assert (= (and b!97725 (not c!16544)) b!97710))

(assert (= (and b!97711 res!49185) b!97718))

(assert (= (or b!97711 b!97710) bm!9956))

(assert (= (and b!97725 res!49183) b!97712))

(assert (= (and b!97712 c!16543) b!97726))

(assert (= (and b!97712 (not c!16543)) b!97709))

(assert (= (and b!97726 res!49187) b!97721))

(assert (= (or b!97726 b!97709) bm!9957))

(declare-fun b_lambda!4333 () Bool)

(assert (=> (not b_lambda!4333) (not b!97716)))

(assert (=> b!97716 t!5544))

(declare-fun b_and!5993 () Bool)

(assert (= b_and!5989 (and (=> t!5544 result!3271) b_and!5993)))

(assert (=> b!97716 t!5546))

(declare-fun b_and!5995 () Bool)

(assert (= b_and!5991 (and (=> t!5546 result!3273) b_and!5995)))

(assert (=> b!97708 m!106375))

(assert (=> b!97708 m!106375))

(declare-fun m!106529 () Bool)

(assert (=> b!97708 m!106529))

(declare-fun m!106531 () Bool)

(assert (=> b!97720 m!106531))

(declare-fun m!106533 () Bool)

(assert (=> b!97720 m!106533))

(declare-fun m!106535 () Bool)

(assert (=> b!97720 m!106535))

(assert (=> b!97720 m!106535))

(declare-fun m!106537 () Bool)

(assert (=> b!97720 m!106537))

(declare-fun m!106539 () Bool)

(assert (=> b!97720 m!106539))

(declare-fun m!106541 () Bool)

(assert (=> b!97720 m!106541))

(declare-fun m!106543 () Bool)

(assert (=> b!97720 m!106543))

(declare-fun m!106545 () Bool)

(assert (=> b!97720 m!106545))

(assert (=> b!97720 m!106533))

(declare-fun m!106547 () Bool)

(assert (=> b!97720 m!106547))

(declare-fun m!106549 () Bool)

(assert (=> b!97720 m!106549))

(declare-fun m!106551 () Bool)

(assert (=> b!97720 m!106551))

(declare-fun m!106553 () Bool)

(assert (=> b!97720 m!106553))

(assert (=> b!97720 m!106375))

(assert (=> b!97720 m!106543))

(declare-fun m!106555 () Bool)

(assert (=> b!97720 m!106555))

(declare-fun m!106557 () Bool)

(assert (=> b!97720 m!106557))

(declare-fun m!106559 () Bool)

(assert (=> b!97720 m!106559))

(declare-fun m!106561 () Bool)

(assert (=> b!97720 m!106561))

(assert (=> b!97720 m!106549))

(declare-fun m!106563 () Bool)

(assert (=> bm!9956 m!106563))

(declare-fun m!106565 () Bool)

(assert (=> b!97707 m!106565))

(declare-fun m!106567 () Bool)

(assert (=> bm!9957 m!106567))

(declare-fun m!106569 () Bool)

(assert (=> b!97721 m!106569))

(assert (=> b!97716 m!106375))

(declare-fun m!106571 () Bool)

(assert (=> b!97716 m!106571))

(assert (=> b!97716 m!106421))

(declare-fun m!106573 () Bool)

(assert (=> b!97716 m!106573))

(assert (=> b!97716 m!106375))

(declare-fun m!106575 () Bool)

(assert (=> b!97716 m!106575))

(assert (=> b!97716 m!106571))

(assert (=> b!97716 m!106421))

(assert (=> d!25929 m!106427))

(declare-fun m!106577 () Bool)

(assert (=> bm!9959 m!106577))

(assert (=> b!97713 m!106375))

(assert (=> b!97713 m!106375))

(assert (=> b!97713 m!106431))

(assert (=> bm!9960 m!106555))

(assert (=> b!97724 m!106375))

(assert (=> b!97724 m!106375))

(assert (=> b!97724 m!106431))

(declare-fun m!106579 () Bool)

(assert (=> b!97718 m!106579))

(assert (=> bm!9915 d!25929))

(declare-fun d!25931 () Bool)

(assert (=> d!25931 (= (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (and (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97608 d!25931))

(declare-fun b!97744 () Bool)

(declare-fun lt!48949 () SeekEntryResult!256)

(assert (=> b!97744 (and (bvsge (index!3167 lt!48949) #b00000000000000000000000000000000) (bvslt (index!3167 lt!48949) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49201 () Bool)

(assert (=> b!97744 (= res!49201 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!48949)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63737 () Bool)

(assert (=> b!97744 (=> (not res!49201) (not e!63737))))

(declare-fun b!97745 () Bool)

(declare-fun e!63739 () Bool)

(assert (=> b!97745 (= e!63739 e!63737)))

(declare-fun res!49200 () Bool)

(declare-fun call!9971 () Bool)

(assert (=> b!97745 (= res!49200 call!9971)))

(assert (=> b!97745 (=> (not res!49200) (not e!63737))))

(declare-fun b!97746 () Bool)

(declare-fun res!49198 () Bool)

(declare-fun e!63740 () Bool)

(assert (=> b!97746 (=> (not res!49198) (not e!63740))))

(assert (=> b!97746 (= res!49198 call!9971)))

(declare-fun e!63738 () Bool)

(assert (=> b!97746 (= e!63738 e!63740)))

(declare-fun b!97747 () Bool)

(declare-fun call!9970 () Bool)

(assert (=> b!97747 (= e!63737 (not call!9970))))

(declare-fun d!25933 () Bool)

(assert (=> d!25933 e!63739))

(declare-fun c!16554 () Bool)

(assert (=> d!25933 (= c!16554 ((_ is MissingZero!256) lt!48949))))

(assert (=> d!25933 (= lt!48949 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun lt!48948 () Unit!2934)

(declare-fun choose!595 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2934)

(assert (=> d!25933 (= lt!48948 (choose!595 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25933 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25933 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) lt!48948)))

(declare-fun b!97748 () Bool)

(declare-fun res!49199 () Bool)

(assert (=> b!97748 (=> (not res!49199) (not e!63740))))

(assert (=> b!97748 (= res!49199 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!48949)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97748 (and (bvsge (index!3170 lt!48949) #b00000000000000000000000000000000) (bvslt (index!3170 lt!48949) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97749 () Bool)

(assert (=> b!97749 (= e!63740 (not call!9970))))

(declare-fun bm!9967 () Bool)

(assert (=> bm!9967 (= call!9970 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97750 () Bool)

(assert (=> b!97750 (= e!63738 ((_ is Undefined!256) lt!48949))))

(declare-fun bm!9968 () Bool)

(assert (=> bm!9968 (= call!9971 (inRange!0 (ite c!16554 (index!3167 lt!48949) (index!3170 lt!48949)) (mask!6576 newMap!16)))))

(declare-fun b!97751 () Bool)

(assert (=> b!97751 (= e!63739 e!63738)))

(declare-fun c!16553 () Bool)

(assert (=> b!97751 (= c!16553 ((_ is MissingVacant!256) lt!48949))))

(assert (= (and d!25933 c!16554) b!97745))

(assert (= (and d!25933 (not c!16554)) b!97751))

(assert (= (and b!97745 res!49200) b!97744))

(assert (= (and b!97744 res!49201) b!97747))

(assert (= (and b!97751 c!16553) b!97746))

(assert (= (and b!97751 (not c!16553)) b!97750))

(assert (= (and b!97746 res!49198) b!97748))

(assert (= (and b!97748 res!49199) b!97749))

(assert (= (or b!97745 b!97746) bm!9968))

(assert (= (or b!97747 b!97749) bm!9967))

(assert (=> d!25933 m!106105))

(assert (=> d!25933 m!106297))

(assert (=> d!25933 m!106105))

(declare-fun m!106581 () Bool)

(assert (=> d!25933 m!106581))

(assert (=> d!25933 m!106427))

(declare-fun m!106583 () Bool)

(assert (=> bm!9968 m!106583))

(assert (=> bm!9967 m!106105))

(assert (=> bm!9967 m!106291))

(declare-fun m!106585 () Bool)

(assert (=> b!97748 m!106585))

(declare-fun m!106587 () Bool)

(assert (=> b!97744 m!106587))

(assert (=> bm!9932 d!25933))

(declare-fun d!25935 () Bool)

(assert (=> d!25935 (= (apply!92 lt!48749 lt!48745) (get!1288 (getValueByKey!148 (toList!772 lt!48749) lt!48745)))))

(declare-fun bs!4015 () Bool)

(assert (= bs!4015 d!25935))

(declare-fun m!106589 () Bool)

(assert (=> bs!4015 m!106589))

(assert (=> bs!4015 m!106589))

(declare-fun m!106591 () Bool)

(assert (=> bs!4015 m!106591))

(assert (=> b!97433 d!25935))

(declare-fun d!25937 () Bool)

(assert (=> d!25937 (= (apply!92 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48744) (apply!92 lt!48746 lt!48744))))

(declare-fun lt!48952 () Unit!2934)

(declare-fun choose!596 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> d!25937 (= lt!48952 (choose!596 lt!48746 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48744))))

(declare-fun e!63743 () Bool)

(assert (=> d!25937 e!63743))

(declare-fun res!49204 () Bool)

(assert (=> d!25937 (=> (not res!49204) (not e!63743))))

(assert (=> d!25937 (= res!49204 (contains!796 lt!48746 lt!48744))))

(assert (=> d!25937 (= (addApplyDifferent!68 lt!48746 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48744) lt!48952)))

(declare-fun b!97755 () Bool)

(assert (=> b!97755 (= e!63743 (not (= lt!48744 lt!48753)))))

(assert (= (and d!25937 res!49204) b!97755))

(declare-fun m!106593 () Bool)

(assert (=> d!25937 m!106593))

(declare-fun m!106595 () Bool)

(assert (=> d!25937 m!106595))

(assert (=> d!25937 m!106241))

(assert (=> d!25937 m!106241))

(assert (=> d!25937 m!106243))

(assert (=> d!25937 m!106231))

(assert (=> b!97433 d!25937))

(declare-fun d!25939 () Bool)

(assert (=> d!25939 (= (apply!92 lt!48746 lt!48744) (get!1288 (getValueByKey!148 (toList!772 lt!48746) lt!48744)))))

(declare-fun bs!4016 () Bool)

(assert (= bs!4016 d!25939))

(declare-fun m!106597 () Bool)

(assert (=> bs!4016 m!106597))

(assert (=> bs!4016 m!106597))

(declare-fun m!106599 () Bool)

(assert (=> bs!4016 m!106599))

(assert (=> b!97433 d!25939))

(declare-fun b!97780 () Bool)

(declare-fun e!63762 () ListLongMap!1513)

(declare-fun e!63761 () ListLongMap!1513)

(assert (=> b!97780 (= e!63762 e!63761)))

(declare-fun c!16565 () Bool)

(assert (=> b!97780 (= c!16565 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97781 () Bool)

(declare-fun e!63760 () Bool)

(assert (=> b!97781 (= e!63760 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97781 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!97782 () Bool)

(declare-fun e!63764 () Bool)

(declare-fun lt!48971 () ListLongMap!1513)

(declare-fun isEmpty!360 (ListLongMap!1513) Bool)

(assert (=> b!97782 (= e!63764 (isEmpty!360 lt!48971))))

(declare-fun b!97783 () Bool)

(assert (=> b!97783 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> b!97783 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!63758 () Bool)

(assert (=> b!97783 (= e!63758 (= (apply!92 lt!48971 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!97784 () Bool)

(assert (=> b!97784 (= e!63762 (ListLongMap!1514 Nil!1583))))

(declare-fun b!97785 () Bool)

(declare-fun res!49215 () Bool)

(declare-fun e!63763 () Bool)

(assert (=> b!97785 (=> (not res!49215) (not e!63763))))

(assert (=> b!97785 (= res!49215 (not (contains!796 lt!48971 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97786 () Bool)

(declare-fun e!63759 () Bool)

(assert (=> b!97786 (= e!63763 e!63759)))

(declare-fun c!16566 () Bool)

(assert (=> b!97786 (= c!16566 e!63760)))

(declare-fun res!49213 () Bool)

(assert (=> b!97786 (=> (not res!49213) (not e!63760))))

(assert (=> b!97786 (= res!49213 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun d!25941 () Bool)

(assert (=> d!25941 e!63763))

(declare-fun res!49216 () Bool)

(assert (=> d!25941 (=> (not res!49216) (not e!63763))))

(assert (=> d!25941 (= res!49216 (not (contains!796 lt!48971 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25941 (= lt!48971 e!63762)))

(declare-fun c!16564 () Bool)

(assert (=> d!25941 (= c!16564 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!25941 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992))))))

(assert (=> d!25941 (= (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) lt!48971)))

(declare-fun b!97787 () Bool)

(assert (=> b!97787 (= e!63764 (= lt!48971 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97788 () Bool)

(declare-fun call!9974 () ListLongMap!1513)

(assert (=> b!97788 (= e!63761 call!9974)))

(declare-fun b!97789 () Bool)

(assert (=> b!97789 (= e!63759 e!63764)))

(declare-fun c!16563 () Bool)

(assert (=> b!97789 (= c!16563 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!97790 () Bool)

(declare-fun lt!48969 () Unit!2934)

(declare-fun lt!48972 () Unit!2934)

(assert (=> b!97790 (= lt!48969 lt!48972)))

(declare-fun lt!48973 () (_ BitVec 64))

(declare-fun lt!48967 () (_ BitVec 64))

(declare-fun lt!48968 () ListLongMap!1513)

(declare-fun lt!48970 () V!3153)

(assert (=> b!97790 (not (contains!796 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970)) lt!48973))))

(declare-fun addStillNotContains!41 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> b!97790 (= lt!48972 (addStillNotContains!41 lt!48968 lt!48967 lt!48970 lt!48973))))

(assert (=> b!97790 (= lt!48973 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!97790 (= lt!48970 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!97790 (= lt!48967 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97790 (= lt!48968 call!9974)))

(assert (=> b!97790 (= e!63761 (+!128 call!9974 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!97791 () Bool)

(assert (=> b!97791 (= e!63759 e!63758)))

(assert (=> b!97791 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun res!49214 () Bool)

(assert (=> b!97791 (= res!49214 (contains!796 lt!48971 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97791 (=> (not res!49214) (not e!63758))))

(declare-fun bm!9971 () Bool)

(assert (=> bm!9971 (= call!9974 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(assert (= (and d!25941 c!16564) b!97784))

(assert (= (and d!25941 (not c!16564)) b!97780))

(assert (= (and b!97780 c!16565) b!97790))

(assert (= (and b!97780 (not c!16565)) b!97788))

(assert (= (or b!97790 b!97788) bm!9971))

(assert (= (and d!25941 res!49216) b!97785))

(assert (= (and b!97785 res!49215) b!97786))

(assert (= (and b!97786 res!49213) b!97781))

(assert (= (and b!97786 c!16566) b!97791))

(assert (= (and b!97786 (not c!16566)) b!97789))

(assert (= (and b!97791 res!49214) b!97783))

(assert (= (and b!97789 c!16563) b!97787))

(assert (= (and b!97789 (not c!16563)) b!97782))

(declare-fun b_lambda!4335 () Bool)

(assert (=> (not b_lambda!4335) (not b!97783)))

(assert (=> b!97783 t!5528))

(declare-fun b_and!5997 () Bool)

(assert (= b_and!5993 (and (=> t!5528 result!3251) b_and!5997)))

(assert (=> b!97783 t!5530))

(declare-fun b_and!5999 () Bool)

(assert (= b_and!5995 (and (=> t!5530 result!3255) b_and!5999)))

(declare-fun b_lambda!4337 () Bool)

(assert (=> (not b_lambda!4337) (not b!97790)))

(assert (=> b!97790 t!5528))

(declare-fun b_and!6001 () Bool)

(assert (= b_and!5997 (and (=> t!5528 result!3251) b_and!6001)))

(assert (=> b!97790 t!5530))

(declare-fun b_and!6003 () Bool)

(assert (= b_and!5999 (and (=> t!5530 result!3255) b_and!6003)))

(assert (=> b!97783 m!106219))

(assert (=> b!97783 m!106119))

(assert (=> b!97783 m!106263))

(assert (=> b!97783 m!106219))

(declare-fun m!106601 () Bool)

(assert (=> b!97783 m!106601))

(assert (=> b!97783 m!106263))

(assert (=> b!97783 m!106119))

(assert (=> b!97783 m!106265))

(declare-fun m!106603 () Bool)

(assert (=> bm!9971 m!106603))

(assert (=> b!97787 m!106603))

(declare-fun m!106605 () Bool)

(assert (=> b!97782 m!106605))

(assert (=> b!97781 m!106219))

(assert (=> b!97781 m!106219))

(assert (=> b!97781 m!106271))

(assert (=> b!97790 m!106219))

(assert (=> b!97790 m!106119))

(declare-fun m!106607 () Bool)

(assert (=> b!97790 m!106607))

(declare-fun m!106609 () Bool)

(assert (=> b!97790 m!106609))

(assert (=> b!97790 m!106263))

(declare-fun m!106611 () Bool)

(assert (=> b!97790 m!106611))

(assert (=> b!97790 m!106609))

(declare-fun m!106613 () Bool)

(assert (=> b!97790 m!106613))

(assert (=> b!97790 m!106263))

(assert (=> b!97790 m!106119))

(assert (=> b!97790 m!106265))

(declare-fun m!106615 () Bool)

(assert (=> d!25941 m!106615))

(assert (=> d!25941 m!106083))

(assert (=> b!97780 m!106219))

(assert (=> b!97780 m!106219))

(assert (=> b!97780 m!106271))

(declare-fun m!106617 () Bool)

(assert (=> b!97785 m!106617))

(assert (=> b!97791 m!106219))

(assert (=> b!97791 m!106219))

(declare-fun m!106619 () Bool)

(assert (=> b!97791 m!106619))

(assert (=> b!97433 d!25941))

(declare-fun d!25943 () Bool)

(assert (=> d!25943 (= (apply!92 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48745) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48745)))))

(declare-fun bs!4017 () Bool)

(assert (= bs!4017 d!25943))

(declare-fun m!106621 () Bool)

(assert (=> bs!4017 m!106621))

(assert (=> bs!4017 m!106621))

(declare-fun m!106623 () Bool)

(assert (=> bs!4017 m!106623))

(assert (=> b!97433 d!25943))

(declare-fun d!25945 () Bool)

(assert (=> d!25945 (= (apply!92 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48745) (apply!92 lt!48749 lt!48745))))

(declare-fun lt!48974 () Unit!2934)

(assert (=> d!25945 (= lt!48974 (choose!596 lt!48749 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48745))))

(declare-fun e!63765 () Bool)

(assert (=> d!25945 e!63765))

(declare-fun res!49217 () Bool)

(assert (=> d!25945 (=> (not res!49217) (not e!63765))))

(assert (=> d!25945 (= res!49217 (contains!796 lt!48749 lt!48745))))

(assert (=> d!25945 (= (addApplyDifferent!68 lt!48749 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48745) lt!48974)))

(declare-fun b!97792 () Bool)

(assert (=> b!97792 (= e!63765 (not (= lt!48745 lt!48740)))))

(assert (= (and d!25945 res!49217) b!97792))

(declare-fun m!106625 () Bool)

(assert (=> d!25945 m!106625))

(declare-fun m!106627 () Bool)

(assert (=> d!25945 m!106627))

(assert (=> d!25945 m!106227))

(assert (=> d!25945 m!106227))

(assert (=> d!25945 m!106229))

(assert (=> d!25945 m!106233))

(assert (=> b!97433 d!25945))

(declare-fun d!25947 () Bool)

(declare-fun e!63766 () Bool)

(assert (=> d!25947 e!63766))

(declare-fun res!49218 () Bool)

(assert (=> d!25947 (=> res!49218 e!63766)))

(declare-fun lt!48976 () Bool)

(assert (=> d!25947 (= res!49218 (not lt!48976))))

(declare-fun lt!48977 () Bool)

(assert (=> d!25947 (= lt!48976 lt!48977)))

(declare-fun lt!48975 () Unit!2934)

(declare-fun e!63767 () Unit!2934)

(assert (=> d!25947 (= lt!48975 e!63767)))

(declare-fun c!16567 () Bool)

(assert (=> d!25947 (= c!16567 lt!48977)))

(assert (=> d!25947 (= lt!48977 (containsKey!152 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(assert (=> d!25947 (= (contains!796 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48733) lt!48976)))

(declare-fun b!97793 () Bool)

(declare-fun lt!48978 () Unit!2934)

(assert (=> b!97793 (= e!63767 lt!48978)))

(assert (=> b!97793 (= lt!48978 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(assert (=> b!97793 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(declare-fun b!97794 () Bool)

(declare-fun Unit!2949 () Unit!2934)

(assert (=> b!97794 (= e!63767 Unit!2949)))

(declare-fun b!97795 () Bool)

(assert (=> b!97795 (= e!63766 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733)))))

(assert (= (and d!25947 c!16567) b!97793))

(assert (= (and d!25947 (not c!16567)) b!97794))

(assert (= (and d!25947 (not res!49218)) b!97795))

(declare-fun m!106629 () Bool)

(assert (=> d!25947 m!106629))

(declare-fun m!106631 () Bool)

(assert (=> b!97793 m!106631))

(declare-fun m!106633 () Bool)

(assert (=> b!97793 m!106633))

(assert (=> b!97793 m!106633))

(declare-fun m!106635 () Bool)

(assert (=> b!97793 m!106635))

(assert (=> b!97795 m!106633))

(assert (=> b!97795 m!106633))

(assert (=> b!97795 m!106635))

(assert (=> b!97433 d!25947))

(declare-fun d!25949 () Bool)

(assert (=> d!25949 (= (apply!92 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48735) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48735)))))

(declare-fun bs!4018 () Bool)

(assert (= bs!4018 d!25949))

(declare-fun m!106637 () Bool)

(assert (=> bs!4018 m!106637))

(assert (=> bs!4018 m!106637))

(declare-fun m!106639 () Bool)

(assert (=> bs!4018 m!106639))

(assert (=> b!97433 d!25949))

(declare-fun d!25951 () Bool)

(declare-fun e!63768 () Bool)

(assert (=> d!25951 e!63768))

(declare-fun res!49220 () Bool)

(assert (=> d!25951 (=> (not res!49220) (not e!63768))))

(declare-fun lt!48982 () ListLongMap!1513)

(assert (=> d!25951 (= res!49220 (contains!796 lt!48982 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!48980 () List!1586)

(assert (=> d!25951 (= lt!48982 (ListLongMap!1514 lt!48980))))

(declare-fun lt!48981 () Unit!2934)

(declare-fun lt!48979 () Unit!2934)

(assert (=> d!25951 (= lt!48981 lt!48979)))

(assert (=> d!25951 (= (getValueByKey!148 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25951 (= lt!48979 (lemmaContainsTupThenGetReturnValue!67 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25951 (= lt!48980 (insertStrictlySorted!70 (toList!772 lt!48736) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25951 (= (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48982)))

(declare-fun b!97796 () Bool)

(declare-fun res!49219 () Bool)

(assert (=> b!97796 (=> (not res!49219) (not e!63768))))

(assert (=> b!97796 (= res!49219 (= (getValueByKey!148 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!97797 () Bool)

(assert (=> b!97797 (= e!63768 (contains!798 (toList!772 lt!48982) (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25951 res!49220) b!97796))

(assert (= (and b!97796 res!49219) b!97797))

(declare-fun m!106641 () Bool)

(assert (=> d!25951 m!106641))

(declare-fun m!106643 () Bool)

(assert (=> d!25951 m!106643))

(declare-fun m!106645 () Bool)

(assert (=> d!25951 m!106645))

(declare-fun m!106647 () Bool)

(assert (=> d!25951 m!106647))

(declare-fun m!106649 () Bool)

(assert (=> b!97796 m!106649))

(declare-fun m!106651 () Bool)

(assert (=> b!97797 m!106651))

(assert (=> b!97433 d!25951))

(declare-fun d!25953 () Bool)

(assert (=> d!25953 (contains!796 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48733)))

(declare-fun lt!48985 () Unit!2934)

(declare-fun choose!597 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> d!25953 (= lt!48985 (choose!597 lt!48736 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48733))))

(assert (=> d!25953 (contains!796 lt!48736 lt!48733)))

(assert (=> d!25953 (= (addStillContains!68 lt!48736 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48733) lt!48985)))

(declare-fun bs!4019 () Bool)

(assert (= bs!4019 d!25953))

(assert (=> bs!4019 m!106225))

(assert (=> bs!4019 m!106225))

(assert (=> bs!4019 m!106239))

(declare-fun m!106653 () Bool)

(assert (=> bs!4019 m!106653))

(declare-fun m!106655 () Bool)

(assert (=> bs!4019 m!106655))

(assert (=> b!97433 d!25953))

(declare-fun d!25955 () Bool)

(declare-fun e!63769 () Bool)

(assert (=> d!25955 e!63769))

(declare-fun res!49222 () Bool)

(assert (=> d!25955 (=> (not res!49222) (not e!63769))))

(declare-fun lt!48989 () ListLongMap!1513)

(assert (=> d!25955 (= res!49222 (contains!796 lt!48989 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!48987 () List!1586)

(assert (=> d!25955 (= lt!48989 (ListLongMap!1514 lt!48987))))

(declare-fun lt!48988 () Unit!2934)

(declare-fun lt!48986 () Unit!2934)

(assert (=> d!25955 (= lt!48988 lt!48986)))

(assert (=> d!25955 (= (getValueByKey!148 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25955 (= lt!48986 (lemmaContainsTupThenGetReturnValue!67 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25955 (= lt!48987 (insertStrictlySorted!70 (toList!772 lt!48749) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25955 (= (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48989)))

(declare-fun b!97799 () Bool)

(declare-fun res!49221 () Bool)

(assert (=> b!97799 (=> (not res!49221) (not e!63769))))

(assert (=> b!97799 (= res!49221 (= (getValueByKey!148 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!97800 () Bool)

(assert (=> b!97800 (= e!63769 (contains!798 (toList!772 lt!48989) (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25955 res!49222) b!97799))

(assert (= (and b!97799 res!49221) b!97800))

(declare-fun m!106657 () Bool)

(assert (=> d!25955 m!106657))

(declare-fun m!106659 () Bool)

(assert (=> d!25955 m!106659))

(declare-fun m!106661 () Bool)

(assert (=> d!25955 m!106661))

(declare-fun m!106663 () Bool)

(assert (=> d!25955 m!106663))

(declare-fun m!106665 () Bool)

(assert (=> b!97799 m!106665))

(declare-fun m!106667 () Bool)

(assert (=> b!97800 m!106667))

(assert (=> b!97433 d!25955))

(declare-fun d!25957 () Bool)

(declare-fun e!63770 () Bool)

(assert (=> d!25957 e!63770))

(declare-fun res!49224 () Bool)

(assert (=> d!25957 (=> (not res!49224) (not e!63770))))

(declare-fun lt!48993 () ListLongMap!1513)

(assert (=> d!25957 (= res!49224 (contains!796 lt!48993 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!48991 () List!1586)

(assert (=> d!25957 (= lt!48993 (ListLongMap!1514 lt!48991))))

(declare-fun lt!48992 () Unit!2934)

(declare-fun lt!48990 () Unit!2934)

(assert (=> d!25957 (= lt!48992 lt!48990)))

(assert (=> d!25957 (= (getValueByKey!148 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25957 (= lt!48990 (lemmaContainsTupThenGetReturnValue!67 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25957 (= lt!48991 (insertStrictlySorted!70 (toList!772 lt!48746) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25957 (= (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48993)))

(declare-fun b!97801 () Bool)

(declare-fun res!49223 () Bool)

(assert (=> b!97801 (=> (not res!49223) (not e!63770))))

(assert (=> b!97801 (= res!49223 (= (getValueByKey!148 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!97802 () Bool)

(assert (=> b!97802 (= e!63770 (contains!798 (toList!772 lt!48993) (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25957 res!49224) b!97801))

(assert (= (and b!97801 res!49223) b!97802))

(declare-fun m!106669 () Bool)

(assert (=> d!25957 m!106669))

(declare-fun m!106671 () Bool)

(assert (=> d!25957 m!106671))

(declare-fun m!106673 () Bool)

(assert (=> d!25957 m!106673))

(declare-fun m!106675 () Bool)

(assert (=> d!25957 m!106675))

(declare-fun m!106677 () Bool)

(assert (=> b!97801 m!106677))

(declare-fun m!106679 () Bool)

(assert (=> b!97802 m!106679))

(assert (=> b!97433 d!25957))

(declare-fun d!25959 () Bool)

(assert (=> d!25959 (= (apply!92 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48744) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48744)))))

(declare-fun bs!4020 () Bool)

(assert (= bs!4020 d!25959))

(declare-fun m!106681 () Bool)

(assert (=> bs!4020 m!106681))

(assert (=> bs!4020 m!106681))

(declare-fun m!106683 () Bool)

(assert (=> bs!4020 m!106683))

(assert (=> b!97433 d!25959))

(declare-fun d!25961 () Bool)

(declare-fun e!63771 () Bool)

(assert (=> d!25961 e!63771))

(declare-fun res!49226 () Bool)

(assert (=> d!25961 (=> (not res!49226) (not e!63771))))

(declare-fun lt!48997 () ListLongMap!1513)

(assert (=> d!25961 (= res!49226 (contains!796 lt!48997 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!48995 () List!1586)

(assert (=> d!25961 (= lt!48997 (ListLongMap!1514 lt!48995))))

(declare-fun lt!48996 () Unit!2934)

(declare-fun lt!48994 () Unit!2934)

(assert (=> d!25961 (= lt!48996 lt!48994)))

(assert (=> d!25961 (= (getValueByKey!148 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25961 (= lt!48994 (lemmaContainsTupThenGetReturnValue!67 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25961 (= lt!48995 (insertStrictlySorted!70 (toList!772 lt!48743) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25961 (= (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48997)))

(declare-fun b!97803 () Bool)

(declare-fun res!49225 () Bool)

(assert (=> b!97803 (=> (not res!49225) (not e!63771))))

(assert (=> b!97803 (= res!49225 (= (getValueByKey!148 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!97804 () Bool)

(assert (=> b!97804 (= e!63771 (contains!798 (toList!772 lt!48997) (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25961 res!49226) b!97803))

(assert (= (and b!97803 res!49225) b!97804))

(declare-fun m!106685 () Bool)

(assert (=> d!25961 m!106685))

(declare-fun m!106687 () Bool)

(assert (=> d!25961 m!106687))

(declare-fun m!106689 () Bool)

(assert (=> d!25961 m!106689))

(declare-fun m!106691 () Bool)

(assert (=> d!25961 m!106691))

(declare-fun m!106693 () Bool)

(assert (=> b!97803 m!106693))

(declare-fun m!106695 () Bool)

(assert (=> b!97804 m!106695))

(assert (=> b!97433 d!25961))

(declare-fun d!25963 () Bool)

(assert (=> d!25963 (= (apply!92 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48735) (apply!92 lt!48743 lt!48735))))

(declare-fun lt!48998 () Unit!2934)

(assert (=> d!25963 (= lt!48998 (choose!596 lt!48743 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48735))))

(declare-fun e!63772 () Bool)

(assert (=> d!25963 e!63772))

(declare-fun res!49227 () Bool)

(assert (=> d!25963 (=> (not res!49227) (not e!63772))))

(assert (=> d!25963 (= res!49227 (contains!796 lt!48743 lt!48735))))

(assert (=> d!25963 (= (addApplyDifferent!68 lt!48743 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48735) lt!48998)))

(declare-fun b!97805 () Bool)

(assert (=> b!97805 (= e!63772 (not (= lt!48735 lt!48734)))))

(assert (= (and d!25963 res!49227) b!97805))

(declare-fun m!106697 () Bool)

(assert (=> d!25963 m!106697))

(declare-fun m!106699 () Bool)

(assert (=> d!25963 m!106699))

(assert (=> d!25963 m!106235))

(assert (=> d!25963 m!106235))

(assert (=> d!25963 m!106237))

(assert (=> d!25963 m!106251))

(assert (=> b!97433 d!25963))

(declare-fun d!25965 () Bool)

(assert (=> d!25965 (= (apply!92 lt!48743 lt!48735) (get!1288 (getValueByKey!148 (toList!772 lt!48743) lt!48735)))))

(declare-fun bs!4021 () Bool)

(assert (= bs!4021 d!25965))

(declare-fun m!106701 () Bool)

(assert (=> bs!4021 m!106701))

(assert (=> bs!4021 m!106701))

(declare-fun m!106703 () Bool)

(assert (=> bs!4021 m!106703))

(assert (=> b!97433 d!25965))

(assert (=> d!25885 d!25881))

(declare-fun d!25967 () Bool)

(declare-fun e!63773 () Bool)

(assert (=> d!25967 e!63773))

(declare-fun res!49229 () Bool)

(assert (=> d!25967 (=> (not res!49229) (not e!63773))))

(declare-fun lt!49002 () ListLongMap!1513)

(assert (=> d!25967 (= res!49229 (contains!796 lt!49002 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49000 () List!1586)

(assert (=> d!25967 (= lt!49002 (ListLongMap!1514 lt!49000))))

(declare-fun lt!49001 () Unit!2934)

(declare-fun lt!48999 () Unit!2934)

(assert (=> d!25967 (= lt!49001 lt!48999)))

(assert (=> d!25967 (= (getValueByKey!148 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25967 (= lt!48999 (lemmaContainsTupThenGetReturnValue!67 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25967 (= lt!49000 (insertStrictlySorted!70 (toList!772 call!9920) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25967 (= (+!128 call!9920 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49002)))

(declare-fun b!97806 () Bool)

(declare-fun res!49228 () Bool)

(assert (=> b!97806 (=> (not res!49228) (not e!63773))))

(assert (=> b!97806 (= res!49228 (= (getValueByKey!148 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97807 () Bool)

(assert (=> b!97807 (= e!63773 (contains!798 (toList!772 lt!49002) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25967 res!49229) b!97806))

(assert (= (and b!97806 res!49228) b!97807))

(declare-fun m!106705 () Bool)

(assert (=> d!25967 m!106705))

(declare-fun m!106707 () Bool)

(assert (=> d!25967 m!106707))

(declare-fun m!106709 () Bool)

(assert (=> d!25967 m!106709))

(declare-fun m!106711 () Bool)

(assert (=> d!25967 m!106711))

(declare-fun m!106713 () Bool)

(assert (=> b!97806 m!106713))

(declare-fun m!106715 () Bool)

(assert (=> b!97807 m!106715))

(assert (=> b!97572 d!25967))

(declare-fun d!25969 () Bool)

(declare-fun isEmpty!361 (Option!154) Bool)

(assert (=> d!25969 (= (isDefined!102 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!4022 () Bool)

(assert (= bs!4022 d!25969))

(assert (=> bs!4022 m!106279))

(declare-fun m!106717 () Bool)

(assert (=> bs!4022 m!106717))

(assert (=> b!97449 d!25969))

(declare-fun b!97817 () Bool)

(declare-fun e!63778 () Option!154)

(declare-fun e!63779 () Option!154)

(assert (=> b!97817 (= e!63778 e!63779)))

(declare-fun c!16573 () Bool)

(assert (=> b!97817 (= c!16573 (and ((_ is Cons!1582) (toList!772 lt!48641)) (not (= (_1!1174 (h!2176 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun b!97818 () Bool)

(assert (=> b!97818 (= e!63779 (getValueByKey!148 (t!5531 (toList!772 lt!48641)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97816 () Bool)

(assert (=> b!97816 (= e!63778 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48641)))))))

(declare-fun c!16572 () Bool)

(declare-fun d!25971 () Bool)

(assert (=> d!25971 (= c!16572 (and ((_ is Cons!1582) (toList!772 lt!48641)) (= (_1!1174 (h!2176 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25971 (= (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!63778)))

(declare-fun b!97819 () Bool)

(assert (=> b!97819 (= e!63779 None!152)))

(assert (= (and d!25971 c!16572) b!97816))

(assert (= (and d!25971 (not c!16572)) b!97817))

(assert (= (and b!97817 c!16573) b!97818))

(assert (= (and b!97817 (not c!16573)) b!97819))

(assert (=> b!97818 m!106105))

(declare-fun m!106719 () Bool)

(assert (=> b!97818 m!106719))

(assert (=> b!97449 d!25971))

(declare-fun d!25973 () Bool)

(declare-fun e!63780 () Bool)

(assert (=> d!25973 e!63780))

(declare-fun res!49231 () Bool)

(assert (=> d!25973 (=> (not res!49231) (not e!63780))))

(declare-fun lt!49006 () ListLongMap!1513)

(assert (=> d!25973 (= res!49231 (contains!796 lt!49006 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49004 () List!1586)

(assert (=> d!25973 (= lt!49006 (ListLongMap!1514 lt!49004))))

(declare-fun lt!49005 () Unit!2934)

(declare-fun lt!49003 () Unit!2934)

(assert (=> d!25973 (= lt!49005 lt!49003)))

(assert (=> d!25973 (= (getValueByKey!148 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25973 (= lt!49003 (lemmaContainsTupThenGetReturnValue!67 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25973 (= lt!49004 (insertStrictlySorted!70 (toList!772 call!9868) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!25973 (= (+!128 call!9868 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49006)))

(declare-fun b!97820 () Bool)

(declare-fun res!49230 () Bool)

(assert (=> b!97820 (=> (not res!49230) (not e!63780))))

(assert (=> b!97820 (= res!49230 (= (getValueByKey!148 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!97821 () Bool)

(assert (=> b!97821 (= e!63780 (contains!798 (toList!772 lt!49006) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!25973 res!49231) b!97820))

(assert (= (and b!97820 res!49230) b!97821))

(declare-fun m!106721 () Bool)

(assert (=> d!25973 m!106721))

(declare-fun m!106723 () Bool)

(assert (=> d!25973 m!106723))

(declare-fun m!106725 () Bool)

(assert (=> d!25973 m!106725))

(declare-fun m!106727 () Bool)

(assert (=> d!25973 m!106727))

(declare-fun m!106729 () Bool)

(assert (=> b!97820 m!106729))

(declare-fun m!106731 () Bool)

(assert (=> b!97821 m!106731))

(assert (=> b!97420 d!25973))

(assert (=> b!97604 d!25931))

(declare-fun d!25975 () Bool)

(assert (=> d!25975 (= (map!1243 (_2!1175 lt!48824)) (getCurrentListMap!453 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun bs!4023 () Bool)

(assert (= bs!4023 d!25975))

(declare-fun m!106733 () Bool)

(assert (=> bs!4023 m!106733))

(assert (=> bm!9931 d!25975))

(declare-fun d!25977 () Bool)

(assert (=> d!25977 (= (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97437 d!25977))

(declare-fun d!25979 () Bool)

(declare-fun e!63781 () Bool)

(assert (=> d!25979 e!63781))

(declare-fun res!49232 () Bool)

(assert (=> d!25979 (=> res!49232 e!63781)))

(declare-fun lt!49008 () Bool)

(assert (=> d!25979 (= res!49232 (not lt!49008))))

(declare-fun lt!49009 () Bool)

(assert (=> d!25979 (= lt!49008 lt!49009)))

(declare-fun lt!49007 () Unit!2934)

(declare-fun e!63782 () Unit!2934)

(assert (=> d!25979 (= lt!49007 e!63782)))

(declare-fun c!16574 () Bool)

(assert (=> d!25979 (= c!16574 lt!49009)))

(assert (=> d!25979 (= lt!49009 (containsKey!152 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25979 (= (contains!796 lt!48747 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49008)))

(declare-fun b!97822 () Bool)

(declare-fun lt!49010 () Unit!2934)

(assert (=> b!97822 (= e!63782 lt!49010)))

(assert (=> b!97822 (= lt!49010 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97822 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97823 () Bool)

(declare-fun Unit!2950 () Unit!2934)

(assert (=> b!97823 (= e!63782 Unit!2950)))

(declare-fun b!97824 () Bool)

(assert (=> b!97824 (= e!63781 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25979 c!16574) b!97822))

(assert (= (and d!25979 (not c!16574)) b!97823))

(assert (= (and d!25979 (not res!49232)) b!97824))

(declare-fun m!106735 () Bool)

(assert (=> d!25979 m!106735))

(declare-fun m!106737 () Bool)

(assert (=> b!97822 m!106737))

(assert (=> b!97822 m!106525))

(assert (=> b!97822 m!106525))

(declare-fun m!106739 () Bool)

(assert (=> b!97822 m!106739))

(assert (=> b!97824 m!106525))

(assert (=> b!97824 m!106525))

(assert (=> b!97824 m!106739))

(assert (=> bm!9860 d!25979))

(declare-fun d!25981 () Bool)

(declare-fun res!49238 () Bool)

(declare-fun e!63790 () Bool)

(assert (=> d!25981 (=> res!49238 e!63790)))

(assert (=> d!25981 (= res!49238 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!25981 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 newMap!16) (mask!6576 newMap!16)) e!63790)))

(declare-fun b!97833 () Bool)

(declare-fun e!63789 () Bool)

(assert (=> b!97833 (= e!63790 e!63789)))

(declare-fun c!16577 () Bool)

(assert (=> b!97833 (= c!16577 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97834 () Bool)

(declare-fun e!63791 () Bool)

(assert (=> b!97834 (= e!63789 e!63791)))

(declare-fun lt!49018 () (_ BitVec 64))

(assert (=> b!97834 (= lt!49018 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49019 () Unit!2934)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4217 (_ BitVec 64) (_ BitVec 32)) Unit!2934)

(assert (=> b!97834 (= lt!49019 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000))))

(assert (=> b!97834 (arrayContainsKey!0 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000)))

(declare-fun lt!49017 () Unit!2934)

(assert (=> b!97834 (= lt!49017 lt!49019)))

(declare-fun res!49237 () Bool)

(assert (=> b!97834 (= res!49237 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (_keys!4169 newMap!16) (mask!6576 newMap!16)) (Found!256 #b00000000000000000000000000000000)))))

(assert (=> b!97834 (=> (not res!49237) (not e!63791))))

(declare-fun b!97835 () Bool)

(declare-fun call!9977 () Bool)

(assert (=> b!97835 (= e!63789 call!9977)))

(declare-fun b!97836 () Bool)

(assert (=> b!97836 (= e!63791 call!9977)))

(declare-fun bm!9974 () Bool)

(assert (=> bm!9974 (= call!9977 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (= (and d!25981 (not res!49238)) b!97833))

(assert (= (and b!97833 c!16577) b!97834))

(assert (= (and b!97833 (not c!16577)) b!97835))

(assert (= (and b!97834 res!49237) b!97836))

(assert (= (or b!97836 b!97835) bm!9974))

(assert (=> b!97833 m!106375))

(assert (=> b!97833 m!106375))

(assert (=> b!97833 m!106431))

(assert (=> b!97834 m!106375))

(declare-fun m!106741 () Bool)

(assert (=> b!97834 m!106741))

(declare-fun m!106743 () Bool)

(assert (=> b!97834 m!106743))

(assert (=> b!97834 m!106375))

(declare-fun m!106745 () Bool)

(assert (=> b!97834 m!106745))

(declare-fun m!106747 () Bool)

(assert (=> bm!9974 m!106747))

(assert (=> b!97616 d!25981))

(assert (=> b!97570 d!25911))

(declare-fun d!25983 () Bool)

(declare-fun e!63792 () Bool)

(assert (=> d!25983 e!63792))

(declare-fun res!49240 () Bool)

(assert (=> d!25983 (=> (not res!49240) (not e!63792))))

(declare-fun lt!49023 () ListLongMap!1513)

(assert (=> d!25983 (= res!49240 (contains!796 lt!49023 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49021 () List!1586)

(assert (=> d!25983 (= lt!49023 (ListLongMap!1514 lt!49021))))

(declare-fun lt!49022 () Unit!2934)

(declare-fun lt!49020 () Unit!2934)

(assert (=> d!25983 (= lt!49022 lt!49020)))

(assert (=> d!25983 (= (getValueByKey!148 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25983 (= lt!49020 (lemmaContainsTupThenGetReturnValue!67 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25983 (= lt!49021 (insertStrictlySorted!70 (toList!772 e!63621) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25983 (= (+!128 e!63621 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49023)))

(declare-fun b!97837 () Bool)

(declare-fun res!49239 () Bool)

(assert (=> b!97837 (=> (not res!49239) (not e!63792))))

(assert (=> b!97837 (= res!49239 (= (getValueByKey!148 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!97838 () Bool)

(assert (=> b!97838 (= e!63792 (contains!798 (toList!772 lt!49023) (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!25983 res!49240) b!97837))

(assert (= (and b!97837 res!49239) b!97838))

(declare-fun m!106749 () Bool)

(assert (=> d!25983 m!106749))

(declare-fun m!106751 () Bool)

(assert (=> d!25983 m!106751))

(declare-fun m!106753 () Bool)

(assert (=> d!25983 m!106753))

(declare-fun m!106755 () Bool)

(assert (=> d!25983 m!106755))

(declare-fun m!106757 () Bool)

(assert (=> b!97837 m!106757))

(declare-fun m!106759 () Bool)

(assert (=> b!97838 m!106759))

(assert (=> bm!9921 d!25983))

(declare-fun b!97847 () Bool)

(declare-fun res!49252 () Bool)

(declare-fun e!63795 () Bool)

(assert (=> b!97847 (=> (not res!49252) (not e!63795))))

(assert (=> b!97847 (= res!49252 (and (= (size!2254 (_values!2463 newMap!16)) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001)) (= (size!2253 (_keys!4169 newMap!16)) (size!2254 (_values!2463 newMap!16))) (bvsge (_size!474 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!474 newMap!16) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!97848 () Bool)

(declare-fun res!49251 () Bool)

(assert (=> b!97848 (=> (not res!49251) (not e!63795))))

(declare-fun size!2259 (LongMapFixedSize!850) (_ BitVec 32))

(assert (=> b!97848 (= res!49251 (bvsge (size!2259 newMap!16) (_size!474 newMap!16)))))

(declare-fun b!97850 () Bool)

(assert (=> b!97850 (= e!63795 (and (bvsge (extraKeys!2301 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!474 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!97849 () Bool)

(declare-fun res!49250 () Bool)

(assert (=> b!97849 (=> (not res!49250) (not e!63795))))

(assert (=> b!97849 (= res!49250 (= (size!2259 newMap!16) (bvadd (_size!474 newMap!16) (bvsdiv (bvadd (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!25985 () Bool)

(declare-fun res!49249 () Bool)

(assert (=> d!25985 (=> (not res!49249) (not e!63795))))

(assert (=> d!25985 (= res!49249 (validMask!0 (mask!6576 newMap!16)))))

(assert (=> d!25985 (= (simpleValid!68 newMap!16) e!63795)))

(assert (= (and d!25985 res!49249) b!97847))

(assert (= (and b!97847 res!49252) b!97848))

(assert (= (and b!97848 res!49251) b!97849))

(assert (= (and b!97849 res!49250) b!97850))

(declare-fun m!106761 () Bool)

(assert (=> b!97848 m!106761))

(assert (=> b!97849 m!106761))

(assert (=> d!25985 m!106427))

(assert (=> d!25907 d!25985))

(declare-fun d!25987 () Bool)

(declare-fun e!63798 () Bool)

(assert (=> d!25987 e!63798))

(declare-fun res!49258 () Bool)

(assert (=> d!25987 (=> (not res!49258) (not e!63798))))

(declare-fun lt!49029 () SeekEntryResult!256)

(assert (=> d!25987 (= res!49258 ((_ is Found!256) lt!49029))))

(assert (=> d!25987 (= lt!49029 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun lt!49028 () Unit!2934)

(declare-fun choose!598 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2934)

(assert (=> d!25987 (= lt!49028 (choose!598 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25987 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25987 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) lt!49028)))

(declare-fun b!97855 () Bool)

(declare-fun res!49257 () Bool)

(assert (=> b!97855 (=> (not res!49257) (not e!63798))))

(assert (=> b!97855 (= res!49257 (inRange!0 (index!3168 lt!49029) (mask!6576 newMap!16)))))

(declare-fun b!97856 () Bool)

(assert (=> b!97856 (= e!63798 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!49029)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!97856 (and (bvsge (index!3168 lt!49029) #b00000000000000000000000000000000) (bvslt (index!3168 lt!49029) (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!25987 res!49258) b!97855))

(assert (= (and b!97855 res!49257) b!97856))

(assert (=> d!25987 m!106105))

(assert (=> d!25987 m!106297))

(assert (=> d!25987 m!106105))

(declare-fun m!106763 () Bool)

(assert (=> d!25987 m!106763))

(assert (=> d!25987 m!106427))

(declare-fun m!106765 () Bool)

(assert (=> b!97855 m!106765))

(declare-fun m!106767 () Bool)

(assert (=> b!97856 m!106767))

(assert (=> bm!9930 d!25987))

(assert (=> b!97426 d!25977))

(assert (=> b!97592 d!25897))

(declare-fun d!25989 () Bool)

(declare-fun res!49259 () Bool)

(declare-fun e!63799 () Bool)

(assert (=> d!25989 (=> (not res!49259) (not e!63799))))

(assert (=> d!25989 (= res!49259 (simpleValid!68 (v!2791 (underlying!331 thiss!992))))))

(assert (=> d!25989 (= (valid!391 (v!2791 (underlying!331 thiss!992))) e!63799)))

(declare-fun b!97857 () Bool)

(declare-fun res!49260 () Bool)

(assert (=> b!97857 (=> (not res!49260) (not e!63799))))

(assert (=> b!97857 (= res!49260 (= (arrayCountValidKeys!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))) (_size!474 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97858 () Bool)

(declare-fun res!49261 () Bool)

(assert (=> b!97858 (=> (not res!49261) (not e!63799))))

(assert (=> b!97858 (= res!49261 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!97859 () Bool)

(assert (=> b!97859 (= e!63799 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 Nil!1584))))

(assert (= (and d!25989 res!49259) b!97857))

(assert (= (and b!97857 res!49260) b!97858))

(assert (= (and b!97858 res!49261) b!97859))

(declare-fun m!106769 () Bool)

(assert (=> d!25989 m!106769))

(declare-fun m!106771 () Bool)

(assert (=> b!97857 m!106771))

(declare-fun m!106773 () Bool)

(assert (=> b!97858 m!106773))

(declare-fun m!106775 () Bool)

(assert (=> b!97859 m!106775))

(assert (=> d!25875 d!25989))

(declare-fun d!25991 () Bool)

(assert (=> d!25991 (= (get!1286 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2790 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!97580 d!25991))

(declare-fun d!25993 () Bool)

(assert (=> d!25993 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49032 () Unit!2934)

(declare-fun choose!599 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2934)

(assert (=> d!25993 (= lt!49032 (choose!599 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48828 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25993 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25993 (= (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48828 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)) lt!49032)))

(declare-fun bs!4024 () Bool)

(assert (= bs!4024 d!25993))

(assert (=> bs!4024 m!106217))

(assert (=> bs!4024 m!106121))

(declare-fun m!106777 () Bool)

(assert (=> bs!4024 m!106777))

(assert (=> bs!4024 m!106427))

(assert (=> bs!4024 m!106121))

(declare-fun m!106779 () Bool)

(assert (=> bs!4024 m!106779))

(assert (=> bs!4024 m!106217))

(declare-fun m!106781 () Bool)

(assert (=> bs!4024 m!106781))

(assert (=> b!97538 d!25993))

(assert (=> d!25895 d!25901))

(declare-fun d!25995 () Bool)

(assert (=> d!25995 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) from!355 Nil!1584)))

(assert (=> d!25995 true))

(declare-fun _$71!132 () Unit!2934)

(assert (=> d!25995 (= (choose!39 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!132)))

(declare-fun bs!4025 () Bool)

(assert (= bs!4025 d!25995))

(assert (=> bs!4025 m!106103))

(assert (=> d!25895 d!25995))

(declare-fun d!25997 () Bool)

(assert (=> d!25997 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49035 () Unit!2934)

(declare-fun choose!600 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2934)

(assert (=> d!25997 (= lt!49035 (choose!600 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25997 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!25997 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!49035)))

(declare-fun bs!4026 () Bool)

(assert (= bs!4026 d!25997))

(assert (=> bs!4026 m!106217))

(assert (=> bs!4026 m!106217))

(declare-fun m!106783 () Bool)

(assert (=> bs!4026 m!106783))

(assert (=> bs!4026 m!106121))

(declare-fun m!106785 () Bool)

(assert (=> bs!4026 m!106785))

(assert (=> bs!4026 m!106427))

(assert (=> bs!4026 m!106121))

(declare-fun m!106787 () Bool)

(assert (=> bs!4026 m!106787))

(assert (=> b!97537 d!25997))

(declare-fun d!25999 () Bool)

(assert (=> d!25999 (= (inRange!0 (ite c!16500 (ite c!16502 (index!3168 lt!48839) (ite c!16506 (index!3167 lt!48836) (index!3170 lt!48836))) (ite c!16496 (index!3168 lt!48834) (ite c!16505 (index!3167 lt!48826) (index!3170 lt!48826)))) (mask!6576 newMap!16)) (and (bvsge (ite c!16500 (ite c!16502 (index!3168 lt!48839) (ite c!16506 (index!3167 lt!48836) (index!3170 lt!48836))) (ite c!16496 (index!3168 lt!48834) (ite c!16505 (index!3167 lt!48826) (index!3170 lt!48826)))) #b00000000000000000000000000000000) (bvslt (ite c!16500 (ite c!16502 (index!3168 lt!48839) (ite c!16506 (index!3167 lt!48836) (index!3170 lt!48836))) (ite c!16496 (index!3168 lt!48834) (ite c!16505 (index!3167 lt!48826) (index!3170 lt!48826)))) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9933 d!25999))

(declare-fun d!26001 () Bool)

(declare-fun res!49262 () Bool)

(declare-fun e!63800 () Bool)

(assert (=> d!26001 (=> res!49262 e!63800)))

(assert (=> d!26001 (= res!49262 (= (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26001 (= (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000) e!63800)))

(declare-fun b!97860 () Bool)

(declare-fun e!63801 () Bool)

(assert (=> b!97860 (= e!63800 e!63801)))

(declare-fun res!49263 () Bool)

(assert (=> b!97860 (=> (not res!49263) (not e!63801))))

(assert (=> b!97860 (= res!49263 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97861 () Bool)

(assert (=> b!97861 (= e!63801 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26001 (not res!49262)) b!97860))

(assert (= (and b!97860 res!49263) b!97861))

(assert (=> d!26001 m!106375))

(assert (=> b!97861 m!106105))

(declare-fun m!106789 () Bool)

(assert (=> b!97861 m!106789))

(assert (=> bm!9916 d!26001))

(assert (=> bm!9864 d!25941))

(declare-fun d!26003 () Bool)

(assert (=> d!26003 (= (apply!92 lt!48747 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4027 () Bool)

(assert (= bs!4027 d!26003))

(declare-fun m!106791 () Bool)

(assert (=> bs!4027 m!106791))

(assert (=> bs!4027 m!106791))

(declare-fun m!106793 () Bool)

(assert (=> bs!4027 m!106793))

(assert (=> b!97434 d!26003))

(declare-fun d!26005 () Bool)

(assert (=> d!26005 (isDefined!102 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!49038 () Unit!2934)

(declare-fun choose!601 (List!1586 (_ BitVec 64)) Unit!2934)

(assert (=> d!26005 (= lt!49038 (choose!601 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63804 () Bool)

(assert (=> d!26005 e!63804))

(declare-fun res!49266 () Bool)

(assert (=> d!26005 (=> (not res!49266) (not e!63804))))

(declare-fun isStrictlySorted!299 (List!1586) Bool)

(assert (=> d!26005 (= res!49266 (isStrictlySorted!299 (toList!772 lt!48641)))))

(assert (=> d!26005 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49038)))

(declare-fun b!97864 () Bool)

(assert (=> b!97864 (= e!63804 (containsKey!152 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26005 res!49266) b!97864))

(assert (=> d!26005 m!106105))

(assert (=> d!26005 m!106279))

(assert (=> d!26005 m!106279))

(assert (=> d!26005 m!106281))

(assert (=> d!26005 m!106105))

(declare-fun m!106795 () Bool)

(assert (=> d!26005 m!106795))

(declare-fun m!106797 () Bool)

(assert (=> d!26005 m!106797))

(assert (=> b!97864 m!106105))

(assert (=> b!97864 m!106275))

(assert (=> b!97447 d!26005))

(assert (=> b!97447 d!25969))

(assert (=> b!97447 d!25971))

(declare-fun d!26007 () Bool)

(declare-fun lt!49041 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!101 (List!1587) (InoxSet (_ BitVec 64)))

(assert (=> d!26007 (= lt!49041 (select (content!101 Nil!1584) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63809 () Bool)

(assert (=> d!26007 (= lt!49041 e!63809)))

(declare-fun res!49271 () Bool)

(assert (=> d!26007 (=> (not res!49271) (not e!63809))))

(assert (=> d!26007 (= res!49271 ((_ is Cons!1583) Nil!1584))))

(assert (=> d!26007 (= (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49041)))

(declare-fun b!97869 () Bool)

(declare-fun e!63810 () Bool)

(assert (=> b!97869 (= e!63809 e!63810)))

(declare-fun res!49272 () Bool)

(assert (=> b!97869 (=> res!49272 e!63810)))

(assert (=> b!97869 (= res!49272 (= (h!2177 Nil!1584) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97870 () Bool)

(assert (=> b!97870 (= e!63810 (contains!797 (t!5532 Nil!1584) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26007 res!49271) b!97869))

(assert (= (and b!97869 (not res!49272)) b!97870))

(declare-fun m!106799 () Bool)

(assert (=> d!26007 m!106799))

(assert (=> d!26007 m!106105))

(declare-fun m!106801 () Bool)

(assert (=> d!26007 m!106801))

(assert (=> b!97870 m!106105))

(declare-fun m!106803 () Bool)

(assert (=> b!97870 m!106803))

(assert (=> b!97605 d!26007))

(declare-fun b!97871 () Bool)

(declare-fun e!63812 () Bool)

(declare-fun e!63814 () Bool)

(assert (=> b!97871 (= e!63812 e!63814)))

(declare-fun c!16578 () Bool)

(assert (=> b!97871 (= c!16578 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!26009 () Bool)

(declare-fun res!49275 () Bool)

(declare-fun e!63811 () Bool)

(assert (=> d!26009 (=> res!49275 e!63811)))

(assert (=> d!26009 (= res!49275 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26009 (= (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) e!63811)))

(declare-fun call!9978 () Bool)

(declare-fun bm!9975 () Bool)

(assert (=> bm!9975 (= call!9978 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16578 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584))))))

(declare-fun e!63813 () Bool)

(declare-fun b!97872 () Bool)

(assert (=> b!97872 (= e!63813 (contains!797 (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!97873 () Bool)

(assert (=> b!97873 (= e!63814 call!9978)))

(declare-fun b!97874 () Bool)

(assert (=> b!97874 (= e!63814 call!9978)))

(declare-fun b!97875 () Bool)

(assert (=> b!97875 (= e!63811 e!63812)))

(declare-fun res!49274 () Bool)

(assert (=> b!97875 (=> (not res!49274) (not e!63812))))

(assert (=> b!97875 (= res!49274 (not e!63813))))

(declare-fun res!49273 () Bool)

(assert (=> b!97875 (=> (not res!49273) (not e!63813))))

(assert (=> b!97875 (= res!49273 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26009 (not res!49275)) b!97875))

(assert (= (and b!97875 res!49273) b!97872))

(assert (= (and b!97875 res!49274) b!97871))

(assert (= (and b!97871 c!16578) b!97873))

(assert (= (and b!97871 (not c!16578)) b!97874))

(assert (= (or b!97873 b!97874) bm!9975))

(declare-fun m!106805 () Bool)

(assert (=> b!97871 m!106805))

(assert (=> b!97871 m!106805))

(declare-fun m!106807 () Bool)

(assert (=> b!97871 m!106807))

(assert (=> bm!9975 m!106805))

(declare-fun m!106809 () Bool)

(assert (=> bm!9975 m!106809))

(assert (=> b!97872 m!106805))

(assert (=> b!97872 m!106805))

(declare-fun m!106811 () Bool)

(assert (=> b!97872 m!106811))

(assert (=> b!97875 m!106805))

(assert (=> b!97875 m!106805))

(assert (=> b!97875 m!106807))

(assert (=> bm!9941 d!26009))

(declare-fun b!97910 () Bool)

(declare-fun c!16589 () Bool)

(declare-fun lt!49119 () SeekEntryResult!256)

(assert (=> b!97910 (= c!16589 ((_ is MissingVacant!256) lt!49119))))

(declare-fun e!63836 () Bool)

(declare-fun e!63835 () Bool)

(assert (=> b!97910 (= e!63836 e!63835)))

(declare-fun e!63831 () Bool)

(declare-fun lt!49102 () SeekEntryResult!256)

(declare-fun b!97911 () Bool)

(assert (=> b!97911 (= e!63831 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!49102)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97912 () Bool)

(declare-fun e!63834 () Bool)

(declare-fun call!9987 () Bool)

(assert (=> b!97912 (= e!63834 (not call!9987))))

(declare-fun b!97913 () Bool)

(declare-fun res!49295 () Bool)

(assert (=> b!97913 (= res!49295 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!49119)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63833 () Bool)

(assert (=> b!97913 (=> (not res!49295) (not e!63833))))

(declare-fun b!97914 () Bool)

(assert (=> b!97914 (= e!63833 (not call!9987))))

(declare-fun b!97915 () Bool)

(declare-fun res!49298 () Bool)

(assert (=> b!97915 (=> (not res!49298) (not e!63834))))

(declare-fun call!9989 () Bool)

(assert (=> b!97915 (= res!49298 call!9989)))

(assert (=> b!97915 (= e!63836 e!63834)))

(declare-fun lt!49116 () tuple2!2328)

(declare-fun b!97916 () Bool)

(declare-fun e!63832 () Bool)

(assert (=> b!97916 (= e!63832 (= (map!1243 (_2!1175 lt!49116)) (+!128 (map!1243 newMap!16) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97917 () Bool)

(declare-fun res!49294 () Bool)

(declare-fun call!9988 () Bool)

(assert (=> b!97917 (= res!49294 call!9988)))

(assert (=> b!97917 (=> (not res!49294) (not e!63831))))

(declare-fun b!97918 () Bool)

(assert (=> b!97918 (= e!63835 e!63833)))

(declare-fun res!49300 () Bool)

(assert (=> b!97918 (= res!49300 call!9989)))

(assert (=> b!97918 (=> (not res!49300) (not e!63833))))

(declare-fun bm!9985 () Bool)

(declare-fun call!9990 () SeekEntryResult!256)

(assert (=> bm!9985 (= call!9990 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun b!97919 () Bool)

(declare-fun e!63838 () Unit!2934)

(declare-fun Unit!2951 () Unit!2934)

(assert (=> b!97919 (= e!63838 Unit!2951)))

(declare-fun lt!49113 () Unit!2934)

(assert (=> b!97919 (= lt!49113 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97919 (= lt!49102 call!9990)))

(declare-fun res!49297 () Bool)

(assert (=> b!97919 (= res!49297 ((_ is Found!256) lt!49102))))

(assert (=> b!97919 (=> (not res!49297) (not e!63831))))

(assert (=> b!97919 e!63831))

(declare-fun lt!49122 () Unit!2934)

(assert (=> b!97919 (= lt!49122 lt!49113)))

(assert (=> b!97919 false))

(declare-fun b!97920 () Bool)

(assert (=> b!97920 (= e!63835 ((_ is Undefined!256) lt!49119))))

(declare-fun b!97921 () Bool)

(declare-fun e!63837 () Unit!2934)

(declare-fun Unit!2952 () Unit!2934)

(assert (=> b!97921 (= e!63837 Unit!2952)))

(declare-fun lt!49124 () Unit!2934)

(declare-fun lemmaArrayContainsKeyThenInListMap!25 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2934)

(assert (=> b!97921 (= lt!49124 (lemmaArrayContainsKeyThenInListMap!25 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> b!97921 (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))

(declare-fun lt!49106 () Unit!2934)

(assert (=> b!97921 (= lt!49106 lt!49124)))

(assert (=> b!97921 false))

(declare-fun bm!9986 () Bool)

(assert (=> bm!9986 (= call!9987 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97922 () Bool)

(declare-fun res!49296 () Bool)

(assert (=> b!97922 (=> (not res!49296) (not e!63834))))

(assert (=> b!97922 (= res!49296 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!49119)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97923 () Bool)

(declare-fun lt!49127 () Unit!2934)

(assert (=> b!97923 (= e!63838 lt!49127)))

(assert (=> b!97923 (= lt!49127 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97923 (= lt!49119 call!9990)))

(declare-fun c!16587 () Bool)

(assert (=> b!97923 (= c!16587 ((_ is MissingZero!256) lt!49119))))

(assert (=> b!97923 e!63836))

(declare-fun b!97924 () Bool)

(declare-fun res!49302 () Bool)

(assert (=> b!97924 (=> (not res!49302) (not e!63832))))

(assert (=> b!97924 (= res!49302 (contains!796 (map!1243 (_2!1175 lt!49116)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97925 () Bool)

(declare-fun Unit!2953 () Unit!2934)

(assert (=> b!97925 (= e!63837 Unit!2953)))

(declare-fun bm!9987 () Bool)

(declare-fun c!16588 () Bool)

(assert (=> bm!9987 (= call!9988 (inRange!0 (ite c!16588 (index!3168 lt!49102) (ite c!16587 (index!3167 lt!49119) (index!3170 lt!49119))) (mask!6576 newMap!16)))))

(declare-fun b!97926 () Bool)

(declare-fun res!49299 () Bool)

(assert (=> b!97926 (=> (not res!49299) (not e!63832))))

(assert (=> b!97926 (= res!49299 (valid!391 (_2!1175 lt!49116)))))

(declare-fun bm!9984 () Bool)

(assert (=> bm!9984 (= call!9989 call!9988)))

(declare-fun d!26011 () Bool)

(assert (=> d!26011 e!63832))

(declare-fun res!49301 () Bool)

(assert (=> d!26011 (=> (not res!49301) (not e!63832))))

(assert (=> d!26011 (= res!49301 (_1!1175 lt!49116))))

(assert (=> d!26011 (= lt!49116 (tuple2!2329 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd (_size!474 newMap!16) #b00000000000000000000000000000001) (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (_vacant!474 newMap!16))))))

(declare-fun lt!49103 () Unit!2934)

(declare-fun lt!49111 () Unit!2934)

(assert (=> d!26011 (= lt!49103 lt!49111)))

(declare-fun lt!49131 () array!4217)

(declare-fun lt!49121 () array!4219)

(assert (=> d!26011 (contains!796 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(assert (=> d!26011 (= lt!49111 (lemmaValidKeyInArrayIsInListMap!100 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26011 (= lt!49121 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))))

(assert (=> d!26011 (= lt!49131 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun lt!49128 () Unit!2934)

(declare-fun lt!49114 () Unit!2934)

(assert (=> d!26011 (= lt!49128 lt!49114)))

(declare-fun lt!49120 () array!4217)

(assert (=> d!26011 (= (arrayCountValidKeys!0 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4217 (_ BitVec 32)) Unit!2934)

(assert (=> d!26011 (= lt!49114 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(assert (=> d!26011 (= lt!49120 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun lt!49117 () Unit!2934)

(declare-fun lt!49125 () Unit!2934)

(assert (=> d!26011 (= lt!49117 lt!49125)))

(declare-fun lt!49126 () array!4217)

(assert (=> d!26011 (arrayContainsKey!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26011 (= lt!49125 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(assert (=> d!26011 (= lt!49126 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun lt!49110 () Unit!2934)

(declare-fun lt!49104 () Unit!2934)

(assert (=> d!26011 (= lt!49110 lt!49104)))

(assert (=> d!26011 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!25 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2934)

(assert (=> d!26011 (= lt!49104 (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49108 () Unit!2934)

(declare-fun lt!49115 () Unit!2934)

(assert (=> d!26011 (= lt!49108 lt!49115)))

(assert (=> d!26011 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (mask!6576 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4217 (_ BitVec 32) (_ BitVec 32)) Unit!2934)

(assert (=> d!26011 (= lt!49115 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (mask!6576 newMap!16)))))

(declare-fun lt!49123 () Unit!2934)

(declare-fun lt!49118 () Unit!2934)

(assert (=> d!26011 (= lt!49123 lt!49118)))

(assert (=> d!26011 (= (arrayCountValidKeys!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4217 (_ BitVec 32) (_ BitVec 64)) Unit!2934)

(assert (=> d!26011 (= lt!49118 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!49129 () Unit!2934)

(declare-fun lt!49112 () Unit!2934)

(assert (=> d!26011 (= lt!49129 lt!49112)))

(declare-fun lt!49109 () (_ BitVec 32))

(declare-fun lt!49105 () List!1587)

(assert (=> d!26011 (arrayNoDuplicates!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) lt!49109 lt!49105)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4217 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1587) Unit!2934)

(assert (=> d!26011 (= lt!49112 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) lt!49109 lt!49105))))

(assert (=> d!26011 (= lt!49105 Nil!1584)))

(assert (=> d!26011 (= lt!49109 #b00000000000000000000000000000000)))

(declare-fun lt!49130 () Unit!2934)

(assert (=> d!26011 (= lt!49130 e!63837)))

(declare-fun c!16590 () Bool)

(assert (=> d!26011 (= c!16590 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!49107 () Unit!2934)

(assert (=> d!26011 (= lt!49107 e!63838)))

(assert (=> d!26011 (= c!16588 (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26011 (valid!391 newMap!16)))

(assert (=> d!26011 (= (updateHelperNewKey!41 newMap!16 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))) lt!49116)))

(assert (= (and d!26011 c!16588) b!97919))

(assert (= (and d!26011 (not c!16588)) b!97923))

(assert (= (and b!97919 res!49297) b!97917))

(assert (= (and b!97917 res!49294) b!97911))

(assert (= (and b!97923 c!16587) b!97915))

(assert (= (and b!97923 (not c!16587)) b!97910))

(assert (= (and b!97915 res!49298) b!97922))

(assert (= (and b!97922 res!49296) b!97912))

(assert (= (and b!97910 c!16589) b!97918))

(assert (= (and b!97910 (not c!16589)) b!97920))

(assert (= (and b!97918 res!49300) b!97913))

(assert (= (and b!97913 res!49295) b!97914))

(assert (= (or b!97915 b!97918) bm!9984))

(assert (= (or b!97912 b!97914) bm!9986))

(assert (= (or b!97917 bm!9984) bm!9987))

(assert (= (or b!97919 b!97923) bm!9985))

(assert (= (and d!26011 c!16590) b!97921))

(assert (= (and d!26011 (not c!16590)) b!97925))

(assert (= (and d!26011 res!49301) b!97926))

(assert (= (and b!97926 res!49299) b!97924))

(assert (= (and b!97924 res!49302) b!97916))

(declare-fun m!106813 () Bool)

(assert (=> b!97924 m!106813))

(assert (=> b!97924 m!106813))

(assert (=> b!97924 m!106105))

(declare-fun m!106815 () Bool)

(assert (=> b!97924 m!106815))

(assert (=> bm!9985 m!106105))

(assert (=> bm!9985 m!106297))

(declare-fun m!106817 () Bool)

(assert (=> bm!9987 m!106817))

(declare-fun m!106819 () Bool)

(assert (=> b!97922 m!106819))

(assert (=> bm!9986 m!106105))

(assert (=> bm!9986 m!106291))

(declare-fun m!106821 () Bool)

(assert (=> b!97911 m!106821))

(assert (=> b!97921 m!106105))

(declare-fun m!106823 () Bool)

(assert (=> b!97921 m!106823))

(assert (=> b!97921 m!106217))

(assert (=> b!97921 m!106217))

(assert (=> b!97921 m!106105))

(declare-fun m!106825 () Bool)

(assert (=> b!97921 m!106825))

(declare-fun m!106827 () Bool)

(assert (=> d!26011 m!106827))

(declare-fun m!106829 () Bool)

(assert (=> d!26011 m!106829))

(assert (=> d!26011 m!106217))

(declare-fun m!106831 () Bool)

(assert (=> d!26011 m!106831))

(declare-fun m!106833 () Bool)

(assert (=> d!26011 m!106833))

(declare-fun m!106835 () Bool)

(assert (=> d!26011 m!106835))

(assert (=> d!26011 m!106085))

(assert (=> d!26011 m!106105))

(declare-fun m!106837 () Bool)

(assert (=> d!26011 m!106837))

(declare-fun m!106839 () Bool)

(assert (=> d!26011 m!106839))

(assert (=> d!26011 m!106105))

(declare-fun m!106841 () Bool)

(assert (=> d!26011 m!106841))

(declare-fun m!106843 () Bool)

(assert (=> d!26011 m!106843))

(declare-fun m!106845 () Bool)

(assert (=> d!26011 m!106845))

(declare-fun m!106847 () Bool)

(assert (=> d!26011 m!106847))

(assert (=> d!26011 m!106105))

(assert (=> d!26011 m!106121))

(declare-fun m!106849 () Bool)

(assert (=> d!26011 m!106849))

(declare-fun m!106851 () Bool)

(assert (=> d!26011 m!106851))

(declare-fun m!106853 () Bool)

(assert (=> d!26011 m!106853))

(assert (=> d!26011 m!106105))

(declare-fun m!106855 () Bool)

(assert (=> d!26011 m!106855))

(assert (=> d!26011 m!106217))

(assert (=> d!26011 m!106217))

(assert (=> d!26011 m!106105))

(assert (=> d!26011 m!106825))

(assert (=> d!26011 m!106105))

(declare-fun m!106857 () Bool)

(assert (=> d!26011 m!106857))

(assert (=> d!26011 m!106833))

(declare-fun m!106859 () Bool)

(assert (=> d!26011 m!106859))

(declare-fun m!106861 () Bool)

(assert (=> d!26011 m!106861))

(assert (=> d!26011 m!106105))

(declare-fun m!106863 () Bool)

(assert (=> d!26011 m!106863))

(assert (=> d!26011 m!106105))

(assert (=> d!26011 m!106291))

(assert (=> d!26011 m!106859))

(assert (=> d!26011 m!106357))

(declare-fun m!106865 () Bool)

(assert (=> b!97926 m!106865))

(assert (=> b!97923 m!106105))

(assert (=> b!97923 m!106301))

(declare-fun m!106867 () Bool)

(assert (=> b!97913 m!106867))

(assert (=> b!97916 m!106813))

(assert (=> b!97916 m!106113))

(assert (=> b!97916 m!106113))

(declare-fun m!106869 () Bool)

(assert (=> b!97916 m!106869))

(assert (=> b!97919 m!106105))

(assert (=> b!97919 m!106289))

(assert (=> bm!9924 d!26011))

(declare-fun d!26013 () Bool)

(declare-fun e!63839 () Bool)

(assert (=> d!26013 e!63839))

(declare-fun res!49303 () Bool)

(assert (=> d!26013 (=> res!49303 e!63839)))

(declare-fun lt!49133 () Bool)

(assert (=> d!26013 (= res!49303 (not lt!49133))))

(declare-fun lt!49134 () Bool)

(assert (=> d!26013 (= lt!49133 lt!49134)))

(declare-fun lt!49132 () Unit!2934)

(declare-fun e!63840 () Unit!2934)

(assert (=> d!26013 (= lt!49132 e!63840)))

(declare-fun c!16591 () Bool)

(assert (=> d!26013 (= c!16591 lt!49134)))

(assert (=> d!26013 (= lt!49134 (containsKey!152 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26013 (= (contains!796 lt!48747 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49133)))

(declare-fun b!97927 () Bool)

(declare-fun lt!49135 () Unit!2934)

(assert (=> b!97927 (= e!63840 lt!49135)))

(assert (=> b!97927 (= lt!49135 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97927 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97928 () Bool)

(declare-fun Unit!2954 () Unit!2934)

(assert (=> b!97928 (= e!63840 Unit!2954)))

(declare-fun b!97929 () Bool)

(assert (=> b!97929 (= e!63839 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26013 c!16591) b!97927))

(assert (= (and d!26013 (not c!16591)) b!97928))

(assert (= (and d!26013 (not res!49303)) b!97929))

(assert (=> d!26013 m!106219))

(declare-fun m!106871 () Bool)

(assert (=> d!26013 m!106871))

(assert (=> b!97927 m!106219))

(declare-fun m!106873 () Bool)

(assert (=> b!97927 m!106873))

(assert (=> b!97927 m!106219))

(assert (=> b!97927 m!106487))

(assert (=> b!97927 m!106487))

(declare-fun m!106875 () Bool)

(assert (=> b!97927 m!106875))

(assert (=> b!97929 m!106219))

(assert (=> b!97929 m!106487))

(assert (=> b!97929 m!106487))

(assert (=> b!97929 m!106875))

(assert (=> b!97421 d!26013))

(assert (=> d!25893 d!25897))

(declare-fun d!26015 () Bool)

(assert (=> d!26015 (not (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26015 true))

(declare-fun _$68!91 () Unit!2934)

(assert (=> d!26015 (= (choose!68 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584)) _$68!91)))

(declare-fun bs!4028 () Bool)

(assert (= bs!4028 d!26015))

(assert (=> bs!4028 m!106105))

(assert (=> bs!4028 m!106109))

(assert (=> d!25893 d!26015))

(declare-fun b!97930 () Bool)

(declare-fun e!63842 () Bool)

(declare-fun e!63844 () Bool)

(assert (=> b!97930 (= e!63842 e!63844)))

(declare-fun c!16592 () Bool)

(assert (=> b!97930 (= c!16592 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26017 () Bool)

(declare-fun res!49306 () Bool)

(declare-fun e!63841 () Bool)

(assert (=> d!26017 (=> res!49306 e!63841)))

(assert (=> d!26017 (= res!49306 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26017 (= (arrayNoDuplicates!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 Nil!1584) e!63841)))

(declare-fun bm!9988 () Bool)

(declare-fun call!9991 () Bool)

(assert (=> bm!9988 (= call!9991 (arrayNoDuplicates!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16592 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) Nil!1584) Nil!1584)))))

(declare-fun b!97931 () Bool)

(declare-fun e!63843 () Bool)

(assert (=> b!97931 (= e!63843 (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97932 () Bool)

(assert (=> b!97932 (= e!63844 call!9991)))

(declare-fun b!97933 () Bool)

(assert (=> b!97933 (= e!63844 call!9991)))

(declare-fun b!97934 () Bool)

(assert (=> b!97934 (= e!63841 e!63842)))

(declare-fun res!49305 () Bool)

(assert (=> b!97934 (=> (not res!49305) (not e!63842))))

(assert (=> b!97934 (= res!49305 (not e!63843))))

(declare-fun res!49304 () Bool)

(assert (=> b!97934 (=> (not res!49304) (not e!63843))))

(assert (=> b!97934 (= res!49304 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26017 (not res!49306)) b!97934))

(assert (= (and b!97934 res!49304) b!97931))

(assert (= (and b!97934 res!49305) b!97930))

(assert (= (and b!97930 c!16592) b!97932))

(assert (= (and b!97930 (not c!16592)) b!97933))

(assert (= (or b!97932 b!97933) bm!9988))

(assert (=> b!97930 m!106375))

(assert (=> b!97930 m!106375))

(assert (=> b!97930 m!106431))

(assert (=> bm!9988 m!106375))

(declare-fun m!106877 () Bool)

(assert (=> bm!9988 m!106877))

(assert (=> b!97931 m!106375))

(assert (=> b!97931 m!106375))

(declare-fun m!106879 () Bool)

(assert (=> b!97931 m!106879))

(assert (=> b!97934 m!106375))

(assert (=> b!97934 m!106375))

(assert (=> b!97934 m!106431))

(assert (=> b!97617 d!26017))

(declare-fun bm!9991 () Bool)

(declare-fun call!9994 () (_ BitVec 32))

(assert (=> bm!9991 (= call!9994 (arrayCountValidKeys!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!97943 () Bool)

(declare-fun e!63849 () (_ BitVec 32))

(assert (=> b!97943 (= e!63849 call!9994)))

(declare-fun b!97944 () Bool)

(declare-fun e!63850 () (_ BitVec 32))

(assert (=> b!97944 (= e!63850 #b00000000000000000000000000000000)))

(declare-fun b!97945 () Bool)

(assert (=> b!97945 (= e!63849 (bvadd #b00000000000000000000000000000001 call!9994))))

(declare-fun b!97946 () Bool)

(assert (=> b!97946 (= e!63850 e!63849)))

(declare-fun c!16598 () Bool)

(assert (=> b!97946 (= c!16598 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26019 () Bool)

(declare-fun lt!49138 () (_ BitVec 32))

(assert (=> d!26019 (and (bvsge lt!49138 #b00000000000000000000000000000000) (bvsle lt!49138 (bvsub (size!2253 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26019 (= lt!49138 e!63850)))

(declare-fun c!16597 () Bool)

(assert (=> d!26019 (= c!16597 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26019 (and (bvsle #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2253 (_keys!4169 newMap!16)) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26019 (= (arrayCountValidKeys!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) lt!49138)))

(assert (= (and d!26019 c!16597) b!97944))

(assert (= (and d!26019 (not c!16597)) b!97946))

(assert (= (and b!97946 c!16598) b!97945))

(assert (= (and b!97946 (not c!16598)) b!97943))

(assert (= (or b!97945 b!97943) bm!9991))

(declare-fun m!106881 () Bool)

(assert (=> bm!9991 m!106881))

(assert (=> b!97946 m!106375))

(assert (=> b!97946 m!106375))

(assert (=> b!97946 m!106431))

(assert (=> b!97615 d!26019))

(declare-fun d!26021 () Bool)

(declare-fun res!49311 () Bool)

(declare-fun e!63855 () Bool)

(assert (=> d!26021 (=> res!49311 e!63855)))

(assert (=> d!26021 (= res!49311 (and ((_ is Cons!1582) (toList!772 lt!48641)) (= (_1!1174 (h!2176 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26021 (= (containsKey!152 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!63855)))

(declare-fun b!97951 () Bool)

(declare-fun e!63856 () Bool)

(assert (=> b!97951 (= e!63855 e!63856)))

(declare-fun res!49312 () Bool)

(assert (=> b!97951 (=> (not res!49312) (not e!63856))))

(assert (=> b!97951 (= res!49312 (and (or (not ((_ is Cons!1582) (toList!772 lt!48641))) (bvsle (_1!1174 (h!2176 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1582) (toList!772 lt!48641)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!97952 () Bool)

(assert (=> b!97952 (= e!63856 (containsKey!152 (t!5531 (toList!772 lt!48641)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26021 (not res!49311)) b!97951))

(assert (= (and b!97951 res!49312) b!97952))

(assert (=> b!97952 m!106105))

(declare-fun m!106883 () Bool)

(assert (=> b!97952 m!106883))

(assert (=> d!25887 d!26021))

(assert (=> b!97551 d!25911))

(declare-fun d!26023 () Bool)

(declare-fun e!63857 () Bool)

(assert (=> d!26023 e!63857))

(declare-fun res!49313 () Bool)

(assert (=> d!26023 (=> res!49313 e!63857)))

(declare-fun lt!49140 () Bool)

(assert (=> d!26023 (= res!49313 (not lt!49140))))

(declare-fun lt!49141 () Bool)

(assert (=> d!26023 (= lt!49140 lt!49141)))

(declare-fun lt!49139 () Unit!2934)

(declare-fun e!63858 () Unit!2934)

(assert (=> d!26023 (= lt!49139 e!63858)))

(declare-fun c!16599 () Bool)

(assert (=> d!26023 (= c!16599 lt!49141)))

(assert (=> d!26023 (= lt!49141 (containsKey!152 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (=> d!26023 (= (contains!796 call!9941 (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))) lt!49140)))

(declare-fun b!97953 () Bool)

(declare-fun lt!49142 () Unit!2934)

(assert (=> b!97953 (= e!63858 lt!49142)))

(assert (=> b!97953 (= lt!49142 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (=> b!97953 (isDefined!102 (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(declare-fun b!97954 () Bool)

(declare-fun Unit!2955 () Unit!2934)

(assert (=> b!97954 (= e!63858 Unit!2955)))

(declare-fun b!97955 () Bool)

(assert (=> b!97955 (= e!63857 (isDefined!102 (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))))

(assert (= (and d!26023 c!16599) b!97953))

(assert (= (and d!26023 (not c!16599)) b!97954))

(assert (= (and d!26023 (not res!49313)) b!97955))

(assert (=> d!26023 m!106323))

(declare-fun m!106885 () Bool)

(assert (=> d!26023 m!106885))

(assert (=> b!97953 m!106323))

(declare-fun m!106887 () Bool)

(assert (=> b!97953 m!106887))

(assert (=> b!97953 m!106323))

(declare-fun m!106889 () Bool)

(assert (=> b!97953 m!106889))

(assert (=> b!97953 m!106889))

(declare-fun m!106891 () Bool)

(assert (=> b!97953 m!106891))

(assert (=> b!97955 m!106323))

(assert (=> b!97955 m!106889))

(assert (=> b!97955 m!106889))

(assert (=> b!97955 m!106891))

(assert (=> b!97567 d!26023))

(declare-fun d!26025 () Bool)

(declare-fun e!63861 () Bool)

(assert (=> d!26025 e!63861))

(declare-fun res!49316 () Bool)

(assert (=> d!26025 (=> (not res!49316) (not e!63861))))

(assert (=> d!26025 (= res!49316 (and (bvsge (index!3168 lt!48847) #b00000000000000000000000000000000) (bvslt (index!3168 lt!48847) (size!2253 (_keys!4169 newMap!16)))))))

(declare-fun lt!49145 () Unit!2934)

(declare-fun choose!602 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) Unit!2934)

(assert (=> d!26025 (= lt!49145 (choose!602 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26025 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26025 (= (lemmaValidKeyInArrayIsInListMap!100 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (defaultEntry!2480 newMap!16)) lt!49145)))

(declare-fun b!97958 () Bool)

(assert (=> b!97958 (= e!63861 (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (= (and d!26025 res!49316) b!97958))

(declare-fun m!106893 () Bool)

(assert (=> d!26025 m!106893))

(assert (=> d!26025 m!106427))

(declare-fun m!106895 () Bool)

(assert (=> b!97958 m!106895))

(assert (=> b!97958 m!106323))

(assert (=> b!97958 m!106895))

(assert (=> b!97958 m!106323))

(declare-fun m!106897 () Bool)

(assert (=> b!97958 m!106897))

(assert (=> b!97567 d!26025))

(declare-fun d!26027 () Bool)

(declare-fun e!63864 () Bool)

(assert (=> d!26027 e!63864))

(declare-fun res!49319 () Bool)

(assert (=> d!26027 (=> (not res!49319) (not e!63864))))

(assert (=> d!26027 (= res!49319 (and (bvsge (index!3168 lt!48847) #b00000000000000000000000000000000) (bvslt (index!3168 lt!48847) (size!2254 (_values!2463 newMap!16)))))))

(declare-fun lt!49148 () Unit!2934)

(declare-fun choose!603 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2934)

(assert (=> d!26027 (= lt!49148 (choose!603 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26027 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26027 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!49148)))

(declare-fun b!97961 () Bool)

(assert (=> b!97961 (= e!63864 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))))

(assert (= (and d!26027 res!49319) b!97961))

(assert (=> d!26027 m!106105))

(assert (=> d!26027 m!106121))

(declare-fun m!106899 () Bool)

(assert (=> d!26027 m!106899))

(assert (=> d!26027 m!106427))

(assert (=> b!97961 m!106217))

(assert (=> b!97961 m!106217))

(assert (=> b!97961 m!106831))

(assert (=> b!97961 m!106327))

(declare-fun m!106901 () Bool)

(assert (=> b!97961 m!106901))

(assert (=> b!97567 d!26027))

(declare-fun d!26029 () Bool)

(declare-fun e!63865 () Bool)

(assert (=> d!26029 e!63865))

(declare-fun res!49320 () Bool)

(assert (=> d!26029 (=> res!49320 e!63865)))

(declare-fun lt!49150 () Bool)

(assert (=> d!26029 (= res!49320 (not lt!49150))))

(declare-fun lt!49151 () Bool)

(assert (=> d!26029 (= lt!49150 lt!49151)))

(declare-fun lt!49149 () Unit!2934)

(declare-fun e!63866 () Unit!2934)

(assert (=> d!26029 (= lt!49149 e!63866)))

(declare-fun c!16600 () Bool)

(assert (=> d!26029 (= c!16600 lt!49151)))

(assert (=> d!26029 (= lt!49151 (containsKey!152 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26029 (= (contains!796 lt!48747 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49150)))

(declare-fun b!97962 () Bool)

(declare-fun lt!49152 () Unit!2934)

(assert (=> b!97962 (= e!63866 lt!49152)))

(assert (=> b!97962 (= lt!49152 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97962 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97963 () Bool)

(declare-fun Unit!2956 () Unit!2934)

(assert (=> b!97963 (= e!63866 Unit!2956)))

(declare-fun b!97964 () Bool)

(assert (=> b!97964 (= e!63865 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26029 c!16600) b!97962))

(assert (= (and d!26029 (not c!16600)) b!97963))

(assert (= (and d!26029 (not res!49320)) b!97964))

(declare-fun m!106903 () Bool)

(assert (=> d!26029 m!106903))

(declare-fun m!106905 () Bool)

(assert (=> b!97962 m!106905))

(assert (=> b!97962 m!106791))

(assert (=> b!97962 m!106791))

(declare-fun m!106907 () Bool)

(assert (=> b!97962 m!106907))

(assert (=> b!97964 m!106791))

(assert (=> b!97964 m!106791))

(assert (=> b!97964 m!106907))

(assert (=> bm!9861 d!26029))

(declare-fun d!26031 () Bool)

(assert (=> d!26031 (= (get!1287 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97581 d!26031))

(assert (=> bm!9919 d!25883))

(declare-fun d!26033 () Bool)

(declare-fun e!63867 () Bool)

(assert (=> d!26033 e!63867))

(declare-fun res!49321 () Bool)

(assert (=> d!26033 (=> res!49321 e!63867)))

(declare-fun lt!49154 () Bool)

(assert (=> d!26033 (= res!49321 (not lt!49154))))

(declare-fun lt!49155 () Bool)

(assert (=> d!26033 (= lt!49154 lt!49155)))

(declare-fun lt!49153 () Unit!2934)

(declare-fun e!63868 () Unit!2934)

(assert (=> d!26033 (= lt!49153 e!63868)))

(declare-fun c!16601 () Bool)

(assert (=> d!26033 (= c!16601 lt!49155)))

(assert (=> d!26033 (= lt!49155 (containsKey!152 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26033 (= (contains!796 call!9918 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49154)))

(declare-fun b!97965 () Bool)

(declare-fun lt!49156 () Unit!2934)

(assert (=> b!97965 (= e!63868 lt!49156)))

(assert (=> b!97965 (= lt!49156 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!97965 (isDefined!102 (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97966 () Bool)

(declare-fun Unit!2957 () Unit!2934)

(assert (=> b!97966 (= e!63868 Unit!2957)))

(declare-fun b!97967 () Bool)

(assert (=> b!97967 (= e!63867 (isDefined!102 (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!26033 c!16601) b!97965))

(assert (= (and d!26033 (not c!16601)) b!97966))

(assert (= (and d!26033 (not res!49321)) b!97967))

(assert (=> d!26033 m!106105))

(declare-fun m!106909 () Bool)

(assert (=> d!26033 m!106909))

(assert (=> b!97965 m!106105))

(declare-fun m!106911 () Bool)

(assert (=> b!97965 m!106911))

(assert (=> b!97965 m!106105))

(declare-fun m!106913 () Bool)

(assert (=> b!97965 m!106913))

(assert (=> b!97965 m!106913))

(declare-fun m!106915 () Bool)

(assert (=> b!97965 m!106915))

(assert (=> b!97967 m!106105))

(assert (=> b!97967 m!106913))

(assert (=> b!97967 m!106913))

(assert (=> b!97967 m!106915))

(assert (=> b!97566 d!26033))

(declare-fun d!26035 () Bool)

(declare-fun e!63869 () Bool)

(assert (=> d!26035 e!63869))

(declare-fun res!49322 () Bool)

(assert (=> d!26035 (=> res!49322 e!63869)))

(declare-fun lt!49158 () Bool)

(assert (=> d!26035 (= res!49322 (not lt!49158))))

(declare-fun lt!49159 () Bool)

(assert (=> d!26035 (= lt!49158 lt!49159)))

(declare-fun lt!49157 () Unit!2934)

(declare-fun e!63870 () Unit!2934)

(assert (=> d!26035 (= lt!49157 e!63870)))

(declare-fun c!16602 () Bool)

(assert (=> d!26035 (= c!16602 lt!49159)))

(assert (=> d!26035 (= lt!49159 (containsKey!152 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26035 (= (contains!796 e!63619 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49158)))

(declare-fun b!97968 () Bool)

(declare-fun lt!49160 () Unit!2934)

(assert (=> b!97968 (= e!63870 lt!49160)))

(assert (=> b!97968 (= lt!49160 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!97968 (isDefined!102 (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!97969 () Bool)

(declare-fun Unit!2958 () Unit!2934)

(assert (=> b!97969 (= e!63870 Unit!2958)))

(declare-fun b!97970 () Bool)

(assert (=> b!97970 (= e!63869 (isDefined!102 (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!26035 c!16602) b!97968))

(assert (= (and d!26035 (not c!16602)) b!97969))

(assert (= (and d!26035 (not res!49322)) b!97970))

(assert (=> d!26035 m!106105))

(declare-fun m!106917 () Bool)

(assert (=> d!26035 m!106917))

(assert (=> b!97968 m!106105))

(declare-fun m!106919 () Bool)

(assert (=> b!97968 m!106919))

(assert (=> b!97968 m!106105))

(declare-fun m!106921 () Bool)

(assert (=> b!97968 m!106921))

(assert (=> b!97968 m!106921))

(declare-fun m!106923 () Bool)

(assert (=> b!97968 m!106923))

(assert (=> b!97970 m!106105))

(assert (=> b!97970 m!106921))

(assert (=> b!97970 m!106921))

(assert (=> b!97970 m!106923))

(assert (=> bm!9918 d!26035))

(declare-fun mapIsEmpty!3757 () Bool)

(declare-fun mapRes!3757 () Bool)

(assert (=> mapIsEmpty!3757 mapRes!3757))

(declare-fun b!97971 () Bool)

(declare-fun e!63872 () Bool)

(assert (=> b!97971 (= e!63872 tp_is_empty!2629)))

(declare-fun condMapEmpty!3757 () Bool)

(declare-fun mapDefault!3757 () ValueCell!971)

(assert (=> mapNonEmpty!3755 (= condMapEmpty!3757 (= mapRest!3755 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3757)))))

(declare-fun e!63871 () Bool)

(assert (=> mapNonEmpty!3755 (= tp!9587 (and e!63871 mapRes!3757))))

(declare-fun b!97972 () Bool)

(assert (=> b!97972 (= e!63871 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3757 () Bool)

(declare-fun tp!9589 () Bool)

(assert (=> mapNonEmpty!3757 (= mapRes!3757 (and tp!9589 e!63872))))

(declare-fun mapKey!3757 () (_ BitVec 32))

(declare-fun mapRest!3757 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3757 () ValueCell!971)

(assert (=> mapNonEmpty!3757 (= mapRest!3755 (store mapRest!3757 mapKey!3757 mapValue!3757))))

(assert (= (and mapNonEmpty!3755 condMapEmpty!3757) mapIsEmpty!3757))

(assert (= (and mapNonEmpty!3755 (not condMapEmpty!3757)) mapNonEmpty!3757))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!971) mapValue!3757)) b!97971))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!971) mapDefault!3757)) b!97972))

(declare-fun m!106925 () Bool)

(assert (=> mapNonEmpty!3757 m!106925))

(declare-fun mapIsEmpty!3758 () Bool)

(declare-fun mapRes!3758 () Bool)

(assert (=> mapIsEmpty!3758 mapRes!3758))

(declare-fun b!97973 () Bool)

(declare-fun e!63874 () Bool)

(assert (=> b!97973 (= e!63874 tp_is_empty!2629)))

(declare-fun condMapEmpty!3758 () Bool)

(declare-fun mapDefault!3758 () ValueCell!971)

(assert (=> mapNonEmpty!3756 (= condMapEmpty!3758 (= mapRest!3756 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3758)))))

(declare-fun e!63873 () Bool)

(assert (=> mapNonEmpty!3756 (= tp!9588 (and e!63873 mapRes!3758))))

(declare-fun b!97974 () Bool)

(assert (=> b!97974 (= e!63873 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3758 () Bool)

(declare-fun tp!9590 () Bool)

(assert (=> mapNonEmpty!3758 (= mapRes!3758 (and tp!9590 e!63874))))

(declare-fun mapRest!3758 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapKey!3758 () (_ BitVec 32))

(declare-fun mapValue!3758 () ValueCell!971)

(assert (=> mapNonEmpty!3758 (= mapRest!3756 (store mapRest!3758 mapKey!3758 mapValue!3758))))

(assert (= (and mapNonEmpty!3756 condMapEmpty!3758) mapIsEmpty!3758))

(assert (= (and mapNonEmpty!3756 (not condMapEmpty!3758)) mapNonEmpty!3758))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!971) mapValue!3758)) b!97973))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!971) mapDefault!3758)) b!97974))

(declare-fun m!106927 () Bool)

(assert (=> mapNonEmpty!3758 m!106927))

(declare-fun b_lambda!4339 () Bool)

(assert (= b_lambda!4331 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4339)))

(declare-fun b_lambda!4341 () Bool)

(assert (= b_lambda!4337 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4341)))

(declare-fun b_lambda!4343 () Bool)

(assert (= b_lambda!4329 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4343)))

(declare-fun b_lambda!4345 () Bool)

(assert (= b_lambda!4333 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4345)))

(declare-fun b_lambda!4347 () Bool)

(assert (= b_lambda!4335 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4347)))

(check-sat (not b!97864) (not b!97724) (not d!25963) (not b!97631) (not bm!9957) (not b!97968) (not b!97806) (not d!26023) (not b!97970) (not d!25957) (not d!25945) (not b!97952) (not mapNonEmpty!3757) (not d!25927) b_and!6001 (not d!25985) (not bm!9991) (not d!25921) (not d!25965) (not b!97804) (not b!97785) (not b!97833) (not b!97919) (not d!25975) (not d!25995) (not b!97799) (not b!97821) (not b!97630) (not b_lambda!4339) (not b!97807) (not bm!9987) (not bm!9942) (not b!97931) (not bm!9975) (not b!97916) (not d!25939) (not b!97797) (not b_lambda!4345) (not b_lambda!4343) (not d!26029) (not b_lambda!4347) (not bm!9956) (not b!97680) (not b!97666) (not bm!9985) (not d!25933) (not d!26015) (not b!97652) (not bm!9988) (not d!25955) (not bm!9946) (not b!97793) (not b!97628) (not b!97642) (not b!97716) (not b!97679) (not b!97930) (not bm!9943) (not d!26011) (not b_next!2425) (not b!97669) (not b!97629) (not b!97855) (not b!97849) (not b!97822) (not b!97965) (not d!25961) (not bm!9952) (not d!26035) (not b!97707) (not b!97653) (not b!97637) (not mapNonEmpty!3758) (not b!97787) (not b!97967) (not d!25979) (not b!97713) (not bm!9974) (not d!25959) (not b!97961) (not d!25943) (not b!97857) (not bm!9950) (not d!26005) (not d!25941) (not d!25929) (not b!97661) (not b!97704) (not b!97837) (not d!25987) (not b!97677) (not b!97718) (not d!25973) (not b!97802) (not bm!9949) (not d!25967) (not b!97927) (not b!97824) (not bm!9960) (not b_lambda!4341) (not b!97923) (not d!25911) (not b!97929) (not d!25953) (not b!97721) (not b!97645) (not d!25909) (not b!97924) (not b!97720) (not bm!9959) (not b!97663) (not b!97780) (not b!97706) (not b!97859) (not bm!9953) (not b!97644) (not d!25989) (not b!97858) (not b_lambda!4323) (not b!97665) (not bm!9968) (not b!97820) (not b!97796) (not d!25983) (not d!25969) (not bm!9967) (not b!97870) (not b!97803) (not d!25917) (not b!97875) (not b!97790) (not b!97946) (not b!97648) (not d!25935) (not b!97795) (not b!97693) (not bm!9945) (not b!97953) (not b!97848) (not d!25913) (not d!25923) (not d!25949) (not b!97708) (not b!97872) (not d!25951) (not d!25997) (not b!97964) (not d!25993) (not b!97958) (not bm!9986) (not b!97658) (not b!97921) (not d!26025) (not d!26033) (not b!97861) (not b!97703) (not b!97791) (not b!97834) (not d!26013) (not b!97781) (not d!26007) (not b!97926) (not b!97818) (not b!97801) (not b!97871) (not b!97838) tp_is_empty!2629 (not b!97962) (not b!97632) (not d!26027) (not b!97800) (not b!97640) (not b!97782) (not d!25947) (not d!25937) (not b_lambda!4327) (not b!97934) (not d!26003) b_and!6003 (not b_next!2427) (not b!97955) (not bm!9971) (not b!97783))
(check-sat b_and!6001 b_and!6003 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun b!97976 () Bool)

(declare-fun e!63875 () Option!154)

(declare-fun e!63876 () Option!154)

(assert (=> b!97976 (= e!63875 e!63876)))

(declare-fun c!16604 () Bool)

(assert (=> b!97976 (= c!16604 (and ((_ is Cons!1582) (toList!772 lt!49002)) (not (= (_1!1174 (h!2176 (toList!772 lt!49002))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!97977 () Bool)

(assert (=> b!97977 (= e!63876 (getValueByKey!148 (t!5531 (toList!772 lt!49002)) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97975 () Bool)

(assert (=> b!97975 (= e!63875 (Some!153 (_2!1174 (h!2176 (toList!772 lt!49002)))))))

(declare-fun d!26037 () Bool)

(declare-fun c!16603 () Bool)

(assert (=> d!26037 (= c!16603 (and ((_ is Cons!1582) (toList!772 lt!49002)) (= (_1!1174 (h!2176 (toList!772 lt!49002))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26037 (= (getValueByKey!148 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!63875)))

(declare-fun b!97978 () Bool)

(assert (=> b!97978 (= e!63876 None!152)))

(assert (= (and d!26037 c!16603) b!97975))

(assert (= (and d!26037 (not c!16603)) b!97976))

(assert (= (and b!97976 c!16604) b!97977))

(assert (= (and b!97976 (not c!16604)) b!97978))

(declare-fun m!106929 () Bool)

(assert (=> b!97977 m!106929))

(assert (=> b!97806 d!26037))

(declare-fun b!97980 () Bool)

(declare-fun e!63877 () Option!154)

(declare-fun e!63878 () Option!154)

(assert (=> b!97980 (= e!63877 e!63878)))

(declare-fun c!16606 () Bool)

(assert (=> b!97980 (= c!16606 (and ((_ is Cons!1582) (toList!772 lt!49006)) (not (= (_1!1174 (h!2176 (toList!772 lt!49006))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!97981 () Bool)

(assert (=> b!97981 (= e!63878 (getValueByKey!148 (t!5531 (toList!772 lt!49006)) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!97979 () Bool)

(assert (=> b!97979 (= e!63877 (Some!153 (_2!1174 (h!2176 (toList!772 lt!49006)))))))

(declare-fun d!26039 () Bool)

(declare-fun c!16605 () Bool)

(assert (=> d!26039 (= c!16605 (and ((_ is Cons!1582) (toList!772 lt!49006)) (= (_1!1174 (h!2176 (toList!772 lt!49006))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26039 (= (getValueByKey!148 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!63877)))

(declare-fun b!97982 () Bool)

(assert (=> b!97982 (= e!63878 None!152)))

(assert (= (and d!26039 c!16605) b!97979))

(assert (= (and d!26039 (not c!16605)) b!97980))

(assert (= (and b!97980 c!16606) b!97981))

(assert (= (and b!97980 (not c!16606)) b!97982))

(declare-fun m!106931 () Bool)

(assert (=> b!97981 m!106931))

(assert (=> b!97820 d!26039))

(declare-fun d!26041 () Bool)

(assert (=> d!26041 (= (apply!92 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48735) (apply!92 lt!48743 lt!48735))))

(assert (=> d!26041 true))

(declare-fun _$34!863 () Unit!2934)

(assert (=> d!26041 (= (choose!596 lt!48743 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48735) _$34!863)))

(declare-fun bs!4029 () Bool)

(assert (= bs!4029 d!26041))

(assert (=> bs!4029 m!106235))

(assert (=> bs!4029 m!106235))

(assert (=> bs!4029 m!106237))

(assert (=> bs!4029 m!106251))

(assert (=> d!25963 d!26041))

(declare-fun d!26043 () Bool)

(declare-fun e!63879 () Bool)

(assert (=> d!26043 e!63879))

(declare-fun res!49323 () Bool)

(assert (=> d!26043 (=> res!49323 e!63879)))

(declare-fun lt!49162 () Bool)

(assert (=> d!26043 (= res!49323 (not lt!49162))))

(declare-fun lt!49163 () Bool)

(assert (=> d!26043 (= lt!49162 lt!49163)))

(declare-fun lt!49161 () Unit!2934)

(declare-fun e!63880 () Unit!2934)

(assert (=> d!26043 (= lt!49161 e!63880)))

(declare-fun c!16607 () Bool)

(assert (=> d!26043 (= c!16607 lt!49163)))

(assert (=> d!26043 (= lt!49163 (containsKey!152 (toList!772 lt!48743) lt!48735))))

(assert (=> d!26043 (= (contains!796 lt!48743 lt!48735) lt!49162)))

(declare-fun b!97984 () Bool)

(declare-fun lt!49164 () Unit!2934)

(assert (=> b!97984 (= e!63880 lt!49164)))

(assert (=> b!97984 (= lt!49164 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48743) lt!48735))))

(assert (=> b!97984 (isDefined!102 (getValueByKey!148 (toList!772 lt!48743) lt!48735))))

(declare-fun b!97985 () Bool)

(declare-fun Unit!2959 () Unit!2934)

(assert (=> b!97985 (= e!63880 Unit!2959)))

(declare-fun b!97986 () Bool)

(assert (=> b!97986 (= e!63879 (isDefined!102 (getValueByKey!148 (toList!772 lt!48743) lt!48735)))))

(assert (= (and d!26043 c!16607) b!97984))

(assert (= (and d!26043 (not c!16607)) b!97985))

(assert (= (and d!26043 (not res!49323)) b!97986))

(declare-fun m!106933 () Bool)

(assert (=> d!26043 m!106933))

(declare-fun m!106935 () Bool)

(assert (=> b!97984 m!106935))

(assert (=> b!97984 m!106701))

(assert (=> b!97984 m!106701))

(declare-fun m!106937 () Bool)

(assert (=> b!97984 m!106937))

(assert (=> b!97986 m!106701))

(assert (=> b!97986 m!106701))

(assert (=> b!97986 m!106937))

(assert (=> d!25963 d!26043))

(assert (=> d!25963 d!25961))

(assert (=> d!25963 d!25949))

(assert (=> d!25963 d!25965))

(declare-fun d!26045 () Bool)

(assert (=> d!26045 (= (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97724 d!26045))

(declare-fun d!26047 () Bool)

(declare-fun e!63881 () Bool)

(assert (=> d!26047 e!63881))

(declare-fun res!49324 () Bool)

(assert (=> d!26047 (=> res!49324 e!63881)))

(declare-fun lt!49166 () Bool)

(assert (=> d!26047 (= res!49324 (not lt!49166))))

(declare-fun lt!49167 () Bool)

(assert (=> d!26047 (= lt!49166 lt!49167)))

(declare-fun lt!49165 () Unit!2934)

(declare-fun e!63882 () Unit!2934)

(assert (=> d!26047 (= lt!49165 e!63882)))

(declare-fun c!16608 () Bool)

(assert (=> d!26047 (= c!16608 lt!49167)))

(assert (=> d!26047 (= lt!49167 (containsKey!152 (toList!772 lt!48936) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26047 (= (contains!796 lt!48936 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49166)))

(declare-fun b!97987 () Bool)

(declare-fun lt!49168 () Unit!2934)

(assert (=> b!97987 (= e!63882 lt!49168)))

(assert (=> b!97987 (= lt!49168 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48936) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97987 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97988 () Bool)

(declare-fun Unit!2960 () Unit!2934)

(assert (=> b!97988 (= e!63882 Unit!2960)))

(declare-fun b!97989 () Bool)

(assert (=> b!97989 (= e!63881 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26047 c!16608) b!97987))

(assert (= (and d!26047 (not c!16608)) b!97988))

(assert (= (and d!26047 (not res!49324)) b!97989))

(declare-fun m!106939 () Bool)

(assert (=> d!26047 m!106939))

(declare-fun m!106941 () Bool)

(assert (=> b!97987 m!106941))

(declare-fun m!106943 () Bool)

(assert (=> b!97987 m!106943))

(assert (=> b!97987 m!106943))

(declare-fun m!106945 () Bool)

(assert (=> b!97987 m!106945))

(assert (=> b!97989 m!106943))

(assert (=> b!97989 m!106943))

(assert (=> b!97989 m!106945))

(assert (=> bm!9956 d!26047))

(declare-fun b!98008 () Bool)

(declare-fun e!63893 () SeekEntryResult!256)

(declare-fun e!63894 () SeekEntryResult!256)

(assert (=> b!98008 (= e!63893 e!63894)))

(declare-fun lt!49173 () (_ BitVec 64))

(declare-fun c!16615 () Bool)

(assert (=> b!98008 (= c!16615 (or (= lt!49173 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (= (bvadd lt!49173 lt!49173) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98009 () Bool)

(declare-fun lt!49174 () SeekEntryResult!256)

(assert (=> b!98009 (and (bvsge (index!3169 lt!49174) #b00000000000000000000000000000000) (bvslt (index!3169 lt!49174) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49333 () Bool)

(assert (=> b!98009 (= res!49333 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!49174)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63897 () Bool)

(assert (=> b!98009 (=> res!49333 e!63897)))

(declare-fun e!63895 () Bool)

(assert (=> b!98009 (= e!63895 e!63897)))

(declare-fun b!98010 () Bool)

(assert (=> b!98010 (and (bvsge (index!3169 lt!49174) #b00000000000000000000000000000000) (bvslt (index!3169 lt!49174) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> b!98010 (= e!63897 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!49174)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98011 () Bool)

(declare-fun e!63896 () Bool)

(assert (=> b!98011 (= e!63896 (bvsge (x!12961 lt!49174) #b01111111111111111111111111111110))))

(declare-fun b!98012 () Bool)

(assert (=> b!98012 (and (bvsge (index!3169 lt!49174) #b00000000000000000000000000000000) (bvslt (index!3169 lt!49174) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49332 () Bool)

(assert (=> b!98012 (= res!49332 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!49174)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98012 (=> res!49332 e!63897)))

(declare-fun d!26049 () Bool)

(assert (=> d!26049 e!63896))

(declare-fun c!16617 () Bool)

(assert (=> d!26049 (= c!16617 (and ((_ is Intermediate!256) lt!49174) (undefined!1068 lt!49174)))))

(assert (=> d!26049 (= lt!49174 e!63893)))

(declare-fun c!16616 () Bool)

(assert (=> d!26049 (= c!16616 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!26049 (= lt!49173 (select (arr!2002 (_keys!4169 newMap!16)) (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16))))))

(assert (=> d!26049 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26049 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)) lt!49174)))

(declare-fun b!98013 () Bool)

(assert (=> b!98013 (= e!63896 e!63895)))

(declare-fun res!49331 () Bool)

(assert (=> b!98013 (= res!49331 (and ((_ is Intermediate!256) lt!49174) (not (undefined!1068 lt!49174)) (bvslt (x!12961 lt!49174) #b01111111111111111111111111111110) (bvsge (x!12961 lt!49174) #b00000000000000000000000000000000) (bvsge (x!12961 lt!49174) #b00000000000000000000000000000000)))))

(assert (=> b!98013 (=> (not res!49331) (not e!63895))))

(declare-fun b!98014 () Bool)

(assert (=> b!98014 (= e!63894 (Intermediate!256 false (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!98015 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!98015 (= e!63894 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) #b00000000000000000000000000000000 (mask!6576 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun b!98016 () Bool)

(assert (=> b!98016 (= e!63893 (Intermediate!256 true (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!26049 c!16616) b!98016))

(assert (= (and d!26049 (not c!16616)) b!98008))

(assert (= (and b!98008 c!16615) b!98014))

(assert (= (and b!98008 (not c!16615)) b!98015))

(assert (= (and d!26049 c!16617) b!98011))

(assert (= (and d!26049 (not c!16617)) b!98013))

(assert (= (and b!98013 res!49331) b!98009))

(assert (= (and b!98009 (not res!49333)) b!98012))

(assert (= (and b!98012 (not res!49332)) b!98010))

(assert (=> b!98015 m!106497))

(declare-fun m!106947 () Bool)

(assert (=> b!98015 m!106947))

(assert (=> b!98015 m!106947))

(assert (=> b!98015 m!106105))

(declare-fun m!106949 () Bool)

(assert (=> b!98015 m!106949))

(assert (=> d!26049 m!106497))

(declare-fun m!106951 () Bool)

(assert (=> d!26049 m!106951))

(assert (=> d!26049 m!106427))

(declare-fun m!106953 () Bool)

(assert (=> b!98009 m!106953))

(assert (=> b!98010 m!106953))

(assert (=> b!98012 m!106953))

(assert (=> d!25921 d!26049))

(declare-fun d!26051 () Bool)

(declare-fun lt!49180 () (_ BitVec 32))

(declare-fun lt!49179 () (_ BitVec 32))

(assert (=> d!26051 (= lt!49180 (bvmul (bvxor lt!49179 (bvlshr lt!49179 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26051 (= lt!49179 ((_ extract 31 0) (bvand (bvxor (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvlshr (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26051 (and (bvsge (mask!6576 newMap!16) #b00000000000000000000000000000000) (let ((res!49334 (let ((h!2180 ((_ extract 31 0) (bvand (bvxor (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvlshr (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13064 (bvmul (bvxor h!2180 (bvlshr h!2180 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13064 (bvlshr x!13064 #b00000000000000000000000000001101)) (mask!6576 newMap!16)))))) (and (bvslt res!49334 (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001)) (bvsge res!49334 #b00000000000000000000000000000000))))))

(assert (=> d!26051 (= (toIndex!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (mask!6576 newMap!16)) (bvand (bvxor lt!49180 (bvlshr lt!49180 #b00000000000000000000000000001101)) (mask!6576 newMap!16)))))

(assert (=> d!25921 d!26051))

(declare-fun d!26053 () Bool)

(assert (=> d!26053 (= (validMask!0 (mask!6576 newMap!16)) (and (or (= (mask!6576 newMap!16) #b00000000000000000000000000000111) (= (mask!6576 newMap!16) #b00000000000000000000000000001111) (= (mask!6576 newMap!16) #b00000000000000000000000000011111) (= (mask!6576 newMap!16) #b00000000000000000000000000111111) (= (mask!6576 newMap!16) #b00000000000000000000000001111111) (= (mask!6576 newMap!16) #b00000000000000000000000011111111) (= (mask!6576 newMap!16) #b00000000000000000000000111111111) (= (mask!6576 newMap!16) #b00000000000000000000001111111111) (= (mask!6576 newMap!16) #b00000000000000000000011111111111) (= (mask!6576 newMap!16) #b00000000000000000000111111111111) (= (mask!6576 newMap!16) #b00000000000000000001111111111111) (= (mask!6576 newMap!16) #b00000000000000000011111111111111) (= (mask!6576 newMap!16) #b00000000000000000111111111111111) (= (mask!6576 newMap!16) #b00000000000000001111111111111111) (= (mask!6576 newMap!16) #b00000000000000011111111111111111) (= (mask!6576 newMap!16) #b00000000000000111111111111111111) (= (mask!6576 newMap!16) #b00000000000001111111111111111111) (= (mask!6576 newMap!16) #b00000000000011111111111111111111) (= (mask!6576 newMap!16) #b00000000000111111111111111111111) (= (mask!6576 newMap!16) #b00000000001111111111111111111111) (= (mask!6576 newMap!16) #b00000000011111111111111111111111) (= (mask!6576 newMap!16) #b00000000111111111111111111111111) (= (mask!6576 newMap!16) #b00000001111111111111111111111111) (= (mask!6576 newMap!16) #b00000011111111111111111111111111) (= (mask!6576 newMap!16) #b00000111111111111111111111111111) (= (mask!6576 newMap!16) #b00001111111111111111111111111111) (= (mask!6576 newMap!16) #b00011111111111111111111111111111) (= (mask!6576 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6576 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!25921 d!26053))

(declare-fun d!26055 () Bool)

(assert (=> d!26055 (= (get!1288 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2797 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25917 d!26055))

(declare-fun b!98018 () Bool)

(declare-fun e!63898 () Option!154)

(declare-fun e!63899 () Option!154)

(assert (=> b!98018 (= e!63898 e!63899)))

(declare-fun c!16619 () Bool)

(assert (=> b!98018 (= c!16619 (and ((_ is Cons!1582) (toList!772 lt!48747)) (not (= (_1!1174 (h!2176 (toList!772 lt!48747))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!98019 () Bool)

(assert (=> b!98019 (= e!63899 (getValueByKey!148 (t!5531 (toList!772 lt!48747)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98017 () Bool)

(assert (=> b!98017 (= e!63898 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48747)))))))

(declare-fun c!16618 () Bool)

(declare-fun d!26057 () Bool)

(assert (=> d!26057 (= c!16618 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26057 (= (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!63898)))

(declare-fun b!98020 () Bool)

(assert (=> b!98020 (= e!63899 None!152)))

(assert (= (and d!26057 c!16618) b!98017))

(assert (= (and d!26057 (not c!16618)) b!98018))

(assert (= (and b!98018 c!16619) b!98019))

(assert (= (and b!98018 (not c!16619)) b!98020))

(assert (=> b!98019 m!106219))

(declare-fun m!106955 () Bool)

(assert (=> b!98019 m!106955))

(assert (=> d!25917 d!26057))

(assert (=> b!97946 d!26045))

(declare-fun d!26059 () Bool)

(assert (=> d!26059 (= (apply!92 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48744) (apply!92 lt!48746 lt!48744))))

(assert (=> d!26059 true))

(declare-fun _$34!864 () Unit!2934)

(assert (=> d!26059 (= (choose!596 lt!48746 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48744) _$34!864)))

(declare-fun bs!4030 () Bool)

(assert (= bs!4030 d!26059))

(assert (=> bs!4030 m!106241))

(assert (=> bs!4030 m!106241))

(assert (=> bs!4030 m!106243))

(assert (=> bs!4030 m!106231))

(assert (=> d!25937 d!26059))

(assert (=> d!25937 d!25939))

(assert (=> d!25937 d!25957))

(assert (=> d!25937 d!25959))

(declare-fun d!26061 () Bool)

(declare-fun e!63900 () Bool)

(assert (=> d!26061 e!63900))

(declare-fun res!49335 () Bool)

(assert (=> d!26061 (=> res!49335 e!63900)))

(declare-fun lt!49182 () Bool)

(assert (=> d!26061 (= res!49335 (not lt!49182))))

(declare-fun lt!49183 () Bool)

(assert (=> d!26061 (= lt!49182 lt!49183)))

(declare-fun lt!49181 () Unit!2934)

(declare-fun e!63901 () Unit!2934)

(assert (=> d!26061 (= lt!49181 e!63901)))

(declare-fun c!16620 () Bool)

(assert (=> d!26061 (= c!16620 lt!49183)))

(assert (=> d!26061 (= lt!49183 (containsKey!152 (toList!772 lt!48746) lt!48744))))

(assert (=> d!26061 (= (contains!796 lt!48746 lt!48744) lt!49182)))

(declare-fun b!98021 () Bool)

(declare-fun lt!49184 () Unit!2934)

(assert (=> b!98021 (= e!63901 lt!49184)))

(assert (=> b!98021 (= lt!49184 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48746) lt!48744))))

(assert (=> b!98021 (isDefined!102 (getValueByKey!148 (toList!772 lt!48746) lt!48744))))

(declare-fun b!98022 () Bool)

(declare-fun Unit!2961 () Unit!2934)

(assert (=> b!98022 (= e!63901 Unit!2961)))

(declare-fun b!98023 () Bool)

(assert (=> b!98023 (= e!63900 (isDefined!102 (getValueByKey!148 (toList!772 lt!48746) lt!48744)))))

(assert (= (and d!26061 c!16620) b!98021))

(assert (= (and d!26061 (not c!16620)) b!98022))

(assert (= (and d!26061 (not res!49335)) b!98023))

(declare-fun m!106957 () Bool)

(assert (=> d!26061 m!106957))

(declare-fun m!106959 () Bool)

(assert (=> b!98021 m!106959))

(assert (=> b!98021 m!106597))

(assert (=> b!98021 m!106597))

(declare-fun m!106961 () Bool)

(assert (=> b!98021 m!106961))

(assert (=> b!98023 m!106597))

(assert (=> b!98023 m!106597))

(assert (=> b!98023 m!106961))

(assert (=> d!25937 d!26061))

(declare-fun d!26063 () Bool)

(assert (=> d!26063 (= (get!1288 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2797 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25927 d!26063))

(declare-fun b!98025 () Bool)

(declare-fun e!63902 () Option!154)

(declare-fun e!63903 () Option!154)

(assert (=> b!98025 (= e!63902 e!63903)))

(declare-fun c!16622 () Bool)

(assert (=> b!98025 (= c!16622 (and ((_ is Cons!1582) (toList!772 lt!48747)) (not (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98026 () Bool)

(assert (=> b!98026 (= e!63903 (getValueByKey!148 (t!5531 (toList!772 lt!48747)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98024 () Bool)

(assert (=> b!98024 (= e!63902 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48747)))))))

(declare-fun d!26065 () Bool)

(declare-fun c!16621 () Bool)

(assert (=> d!26065 (= c!16621 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26065 (= (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000) e!63902)))

(declare-fun b!98027 () Bool)

(assert (=> b!98027 (= e!63903 None!152)))

(assert (= (and d!26065 c!16621) b!98024))

(assert (= (and d!26065 (not c!16621)) b!98025))

(assert (= (and b!98025 c!16622) b!98026))

(assert (= (and b!98025 (not c!16622)) b!98027))

(declare-fun m!106963 () Bool)

(assert (=> b!98026 m!106963))

(assert (=> d!25927 d!26065))

(declare-fun d!26067 () Bool)

(declare-fun e!63904 () Bool)

(assert (=> d!26067 e!63904))

(declare-fun res!49336 () Bool)

(assert (=> d!26067 (=> res!49336 e!63904)))

(declare-fun lt!49186 () Bool)

(assert (=> d!26067 (= res!49336 (not lt!49186))))

(declare-fun lt!49187 () Bool)

(assert (=> d!26067 (= lt!49186 lt!49187)))

(declare-fun lt!49185 () Unit!2934)

(declare-fun e!63905 () Unit!2934)

(assert (=> d!26067 (= lt!49185 e!63905)))

(declare-fun c!16623 () Bool)

(assert (=> d!26067 (= c!16623 lt!49187)))

(assert (=> d!26067 (= lt!49187 (containsKey!152 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26067 (= (contains!796 lt!49023 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49186)))

(declare-fun b!98028 () Bool)

(declare-fun lt!49188 () Unit!2934)

(assert (=> b!98028 (= e!63905 lt!49188)))

(assert (=> b!98028 (= lt!49188 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98028 (isDefined!102 (getValueByKey!148 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98029 () Bool)

(declare-fun Unit!2962 () Unit!2934)

(assert (=> b!98029 (= e!63905 Unit!2962)))

(declare-fun b!98030 () Bool)

(assert (=> b!98030 (= e!63904 (isDefined!102 (getValueByKey!148 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26067 c!16623) b!98028))

(assert (= (and d!26067 (not c!16623)) b!98029))

(assert (= (and d!26067 (not res!49336)) b!98030))

(declare-fun m!106965 () Bool)

(assert (=> d!26067 m!106965))

(declare-fun m!106967 () Bool)

(assert (=> b!98028 m!106967))

(assert (=> b!98028 m!106757))

(assert (=> b!98028 m!106757))

(declare-fun m!106969 () Bool)

(assert (=> b!98028 m!106969))

(assert (=> b!98030 m!106757))

(assert (=> b!98030 m!106757))

(assert (=> b!98030 m!106969))

(assert (=> d!25983 d!26067))

(declare-fun b!98032 () Bool)

(declare-fun e!63906 () Option!154)

(declare-fun e!63907 () Option!154)

(assert (=> b!98032 (= e!63906 e!63907)))

(declare-fun c!16625 () Bool)

(assert (=> b!98032 (= c!16625 (and ((_ is Cons!1582) lt!49021) (not (= (_1!1174 (h!2176 lt!49021)) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!98033 () Bool)

(assert (=> b!98033 (= e!63907 (getValueByKey!148 (t!5531 lt!49021) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98031 () Bool)

(assert (=> b!98031 (= e!63906 (Some!153 (_2!1174 (h!2176 lt!49021))))))

(declare-fun d!26069 () Bool)

(declare-fun c!16624 () Bool)

(assert (=> d!26069 (= c!16624 (and ((_ is Cons!1582) lt!49021) (= (_1!1174 (h!2176 lt!49021)) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26069 (= (getValueByKey!148 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!63906)))

(declare-fun b!98034 () Bool)

(assert (=> b!98034 (= e!63907 None!152)))

(assert (= (and d!26069 c!16624) b!98031))

(assert (= (and d!26069 (not c!16624)) b!98032))

(assert (= (and b!98032 c!16625) b!98033))

(assert (= (and b!98032 (not c!16625)) b!98034))

(declare-fun m!106971 () Bool)

(assert (=> b!98033 m!106971))

(assert (=> d!25983 d!26069))

(declare-fun d!26071 () Bool)

(assert (=> d!26071 (= (getValueByKey!148 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49191 () Unit!2934)

(declare-fun choose!604 (List!1586 (_ BitVec 64) V!3153) Unit!2934)

(assert (=> d!26071 (= lt!49191 (choose!604 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!63910 () Bool)

(assert (=> d!26071 e!63910))

(declare-fun res!49341 () Bool)

(assert (=> d!26071 (=> (not res!49341) (not e!63910))))

(assert (=> d!26071 (= res!49341 (isStrictlySorted!299 lt!49021))))

(assert (=> d!26071 (= (lemmaContainsTupThenGetReturnValue!67 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49191)))

(declare-fun b!98039 () Bool)

(declare-fun res!49342 () Bool)

(assert (=> b!98039 (=> (not res!49342) (not e!63910))))

(assert (=> b!98039 (= res!49342 (containsKey!152 lt!49021 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98040 () Bool)

(assert (=> b!98040 (= e!63910 (contains!798 lt!49021 (tuple2!2327 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26071 res!49341) b!98039))

(assert (= (and b!98039 res!49342) b!98040))

(assert (=> d!26071 m!106751))

(declare-fun m!106973 () Bool)

(assert (=> d!26071 m!106973))

(declare-fun m!106975 () Bool)

(assert (=> d!26071 m!106975))

(declare-fun m!106977 () Bool)

(assert (=> b!98039 m!106977))

(declare-fun m!106979 () Bool)

(assert (=> b!98040 m!106979))

(assert (=> d!25983 d!26071))

(declare-fun bm!9998 () Bool)

(declare-fun call!10003 () List!1586)

(declare-fun call!10002 () List!1586)

(assert (=> bm!9998 (= call!10003 call!10002)))

(declare-fun b!98062 () Bool)

(declare-fun e!63921 () List!1586)

(assert (=> b!98062 (= e!63921 call!10003)))

(declare-fun c!16635 () Bool)

(declare-fun b!98063 () Bool)

(assert (=> b!98063 (= c!16635 (and ((_ is Cons!1582) (toList!772 e!63621)) (bvsgt (_1!1174 (h!2176 (toList!772 e!63621))) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!63925 () List!1586)

(assert (=> b!98063 (= e!63925 e!63921)))

(declare-fun bm!9999 () Bool)

(declare-fun call!10001 () List!1586)

(assert (=> bm!9999 (= call!10002 call!10001)))

(declare-fun e!63922 () List!1586)

(declare-fun bm!10000 () Bool)

(declare-fun c!16636 () Bool)

(declare-fun $colon$colon!77 (List!1586 tuple2!2326) List!1586)

(assert (=> bm!10000 (= call!10001 ($colon$colon!77 e!63922 (ite c!16636 (h!2176 (toList!772 e!63621)) (tuple2!2327 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16637 () Bool)

(assert (=> bm!10000 (= c!16637 c!16636)))

(declare-fun b!98064 () Bool)

(assert (=> b!98064 (= e!63925 call!10002)))

(declare-fun b!98065 () Bool)

(declare-fun e!63923 () List!1586)

(assert (=> b!98065 (= e!63923 e!63925)))

(declare-fun c!16634 () Bool)

(assert (=> b!98065 (= c!16634 (and ((_ is Cons!1582) (toList!772 e!63621)) (= (_1!1174 (h!2176 (toList!772 e!63621))) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98066 () Bool)

(assert (=> b!98066 (= e!63923 call!10001)))

(declare-fun b!98067 () Bool)

(declare-fun res!49348 () Bool)

(declare-fun e!63924 () Bool)

(assert (=> b!98067 (=> (not res!49348) (not e!63924))))

(declare-fun lt!49194 () List!1586)

(assert (=> b!98067 (= res!49348 (containsKey!152 lt!49194 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98068 () Bool)

(assert (=> b!98068 (= e!63924 (contains!798 lt!49194 (tuple2!2327 (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!26073 () Bool)

(assert (=> d!26073 e!63924))

(declare-fun res!49347 () Bool)

(assert (=> d!26073 (=> (not res!49347) (not e!63924))))

(assert (=> d!26073 (= res!49347 (isStrictlySorted!299 lt!49194))))

(assert (=> d!26073 (= lt!49194 e!63923)))

(assert (=> d!26073 (= c!16636 (and ((_ is Cons!1582) (toList!772 e!63621)) (bvslt (_1!1174 (h!2176 (toList!772 e!63621))) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26073 (isStrictlySorted!299 (toList!772 e!63621))))

(assert (=> d!26073 (= (insertStrictlySorted!70 (toList!772 e!63621) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49194)))

(declare-fun b!98061 () Bool)

(assert (=> b!98061 (= e!63922 (ite c!16634 (t!5531 (toList!772 e!63621)) (ite c!16635 (Cons!1582 (h!2176 (toList!772 e!63621)) (t!5531 (toList!772 e!63621))) Nil!1583)))))

(declare-fun b!98069 () Bool)

(assert (=> b!98069 (= e!63921 call!10003)))

(declare-fun b!98070 () Bool)

(assert (=> b!98070 (= e!63922 (insertStrictlySorted!70 (t!5531 (toList!772 e!63621)) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26073 c!16636) b!98066))

(assert (= (and d!26073 (not c!16636)) b!98065))

(assert (= (and b!98065 c!16634) b!98064))

(assert (= (and b!98065 (not c!16634)) b!98063))

(assert (= (and b!98063 c!16635) b!98062))

(assert (= (and b!98063 (not c!16635)) b!98069))

(assert (= (or b!98062 b!98069) bm!9998))

(assert (= (or b!98064 bm!9998) bm!9999))

(assert (= (or b!98066 bm!9999) bm!10000))

(assert (= (and bm!10000 c!16637) b!98070))

(assert (= (and bm!10000 (not c!16637)) b!98061))

(assert (= (and d!26073 res!49347) b!98067))

(assert (= (and b!98067 res!49348) b!98068))

(declare-fun m!106981 () Bool)

(assert (=> b!98067 m!106981))

(declare-fun m!106983 () Bool)

(assert (=> b!98068 m!106983))

(declare-fun m!106985 () Bool)

(assert (=> bm!10000 m!106985))

(declare-fun m!106987 () Bool)

(assert (=> d!26073 m!106987))

(declare-fun m!106989 () Bool)

(assert (=> d!26073 m!106989))

(declare-fun m!106991 () Bool)

(assert (=> b!98070 m!106991))

(assert (=> d!25983 d!26073))

(declare-fun lt!49197 () Bool)

(declare-fun d!26075 () Bool)

(declare-fun content!102 (List!1586) (InoxSet tuple2!2326))

(assert (=> d!26075 (= lt!49197 (select (content!102 (toList!772 lt!48989)) (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!63930 () Bool)

(assert (=> d!26075 (= lt!49197 e!63930)))

(declare-fun res!49354 () Bool)

(assert (=> d!26075 (=> (not res!49354) (not e!63930))))

(assert (=> d!26075 (= res!49354 ((_ is Cons!1582) (toList!772 lt!48989)))))

(assert (=> d!26075 (= (contains!798 (toList!772 lt!48989) (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49197)))

(declare-fun b!98075 () Bool)

(declare-fun e!63931 () Bool)

(assert (=> b!98075 (= e!63930 e!63931)))

(declare-fun res!49353 () Bool)

(assert (=> b!98075 (=> res!49353 e!63931)))

(assert (=> b!98075 (= res!49353 (= (h!2176 (toList!772 lt!48989)) (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98076 () Bool)

(assert (=> b!98076 (= e!63931 (contains!798 (t!5531 (toList!772 lt!48989)) (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!26075 res!49354) b!98075))

(assert (= (and b!98075 (not res!49353)) b!98076))

(declare-fun m!106993 () Bool)

(assert (=> d!26075 m!106993))

(declare-fun m!106995 () Bool)

(assert (=> d!26075 m!106995))

(declare-fun m!106997 () Bool)

(assert (=> b!98076 m!106997))

(assert (=> b!97800 d!26075))

(declare-fun d!26077 () Bool)

(assert (=> d!26077 (= (apply!92 lt!48936 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48936) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4031 () Bool)

(assert (= bs!4031 d!26077))

(declare-fun m!106999 () Bool)

(assert (=> bs!4031 m!106999))

(assert (=> bs!4031 m!106999))

(declare-fun m!107001 () Bool)

(assert (=> bs!4031 m!107001))

(assert (=> b!97721 d!26077))

(declare-fun d!26079 () Bool)

(assert (=> d!26079 (= (inRange!0 (ite c!16588 (index!3168 lt!49102) (ite c!16587 (index!3167 lt!49119) (index!3170 lt!49119))) (mask!6576 newMap!16)) (and (bvsge (ite c!16588 (index!3168 lt!49102) (ite c!16587 (index!3167 lt!49119) (index!3170 lt!49119))) #b00000000000000000000000000000000) (bvslt (ite c!16588 (index!3168 lt!49102) (ite c!16587 (index!3167 lt!49119) (index!3170 lt!49119))) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9987 d!26079))

(declare-fun d!26081 () Bool)

(declare-fun e!63932 () Bool)

(assert (=> d!26081 e!63932))

(declare-fun res!49355 () Bool)

(assert (=> d!26081 (=> res!49355 e!63932)))

(declare-fun lt!49199 () Bool)

(assert (=> d!26081 (= res!49355 (not lt!49199))))

(declare-fun lt!49200 () Bool)

(assert (=> d!26081 (= lt!49199 lt!49200)))

(declare-fun lt!49198 () Unit!2934)

(declare-fun e!63933 () Unit!2934)

(assert (=> d!26081 (= lt!49198 e!63933)))

(declare-fun c!16638 () Bool)

(assert (=> d!26081 (= c!16638 lt!49200)))

(assert (=> d!26081 (= lt!49200 (containsKey!152 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26081 (= (contains!796 lt!49002 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49199)))

(declare-fun b!98077 () Bool)

(declare-fun lt!49201 () Unit!2934)

(assert (=> b!98077 (= e!63933 lt!49201)))

(assert (=> b!98077 (= lt!49201 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!98077 (isDefined!102 (getValueByKey!148 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98078 () Bool)

(declare-fun Unit!2963 () Unit!2934)

(assert (=> b!98078 (= e!63933 Unit!2963)))

(declare-fun b!98079 () Bool)

(assert (=> b!98079 (= e!63932 (isDefined!102 (getValueByKey!148 (toList!772 lt!49002) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26081 c!16638) b!98077))

(assert (= (and d!26081 (not c!16638)) b!98078))

(assert (= (and d!26081 (not res!49355)) b!98079))

(declare-fun m!107003 () Bool)

(assert (=> d!26081 m!107003))

(declare-fun m!107005 () Bool)

(assert (=> b!98077 m!107005))

(assert (=> b!98077 m!106713))

(assert (=> b!98077 m!106713))

(declare-fun m!107007 () Bool)

(assert (=> b!98077 m!107007))

(assert (=> b!98079 m!106713))

(assert (=> b!98079 m!106713))

(assert (=> b!98079 m!107007))

(assert (=> d!25967 d!26081))

(declare-fun b!98081 () Bool)

(declare-fun e!63934 () Option!154)

(declare-fun e!63935 () Option!154)

(assert (=> b!98081 (= e!63934 e!63935)))

(declare-fun c!16640 () Bool)

(assert (=> b!98081 (= c!16640 (and ((_ is Cons!1582) lt!49000) (not (= (_1!1174 (h!2176 lt!49000)) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98082 () Bool)

(assert (=> b!98082 (= e!63935 (getValueByKey!148 (t!5531 lt!49000) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98080 () Bool)

(assert (=> b!98080 (= e!63934 (Some!153 (_2!1174 (h!2176 lt!49000))))))

(declare-fun c!16639 () Bool)

(declare-fun d!26083 () Bool)

(assert (=> d!26083 (= c!16639 (and ((_ is Cons!1582) lt!49000) (= (_1!1174 (h!2176 lt!49000)) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26083 (= (getValueByKey!148 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!63934)))

(declare-fun b!98083 () Bool)

(assert (=> b!98083 (= e!63935 None!152)))

(assert (= (and d!26083 c!16639) b!98080))

(assert (= (and d!26083 (not c!16639)) b!98081))

(assert (= (and b!98081 c!16640) b!98082))

(assert (= (and b!98081 (not c!16640)) b!98083))

(declare-fun m!107009 () Bool)

(assert (=> b!98082 m!107009))

(assert (=> d!25967 d!26083))

(declare-fun d!26085 () Bool)

(assert (=> d!26085 (= (getValueByKey!148 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49202 () Unit!2934)

(assert (=> d!26085 (= lt!49202 (choose!604 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63936 () Bool)

(assert (=> d!26085 e!63936))

(declare-fun res!49356 () Bool)

(assert (=> d!26085 (=> (not res!49356) (not e!63936))))

(assert (=> d!26085 (= res!49356 (isStrictlySorted!299 lt!49000))))

(assert (=> d!26085 (= (lemmaContainsTupThenGetReturnValue!67 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49202)))

(declare-fun b!98084 () Bool)

(declare-fun res!49357 () Bool)

(assert (=> b!98084 (=> (not res!49357) (not e!63936))))

(assert (=> b!98084 (= res!49357 (containsKey!152 lt!49000 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98085 () Bool)

(assert (=> b!98085 (= e!63936 (contains!798 lt!49000 (tuple2!2327 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26085 res!49356) b!98084))

(assert (= (and b!98084 res!49357) b!98085))

(assert (=> d!26085 m!106707))

(declare-fun m!107011 () Bool)

(assert (=> d!26085 m!107011))

(declare-fun m!107013 () Bool)

(assert (=> d!26085 m!107013))

(declare-fun m!107015 () Bool)

(assert (=> b!98084 m!107015))

(declare-fun m!107017 () Bool)

(assert (=> b!98085 m!107017))

(assert (=> d!25967 d!26085))

(declare-fun bm!10001 () Bool)

(declare-fun call!10006 () List!1586)

(declare-fun call!10005 () List!1586)

(assert (=> bm!10001 (= call!10006 call!10005)))

(declare-fun b!98087 () Bool)

(declare-fun e!63937 () List!1586)

(assert (=> b!98087 (= e!63937 call!10006)))

(declare-fun c!16642 () Bool)

(declare-fun b!98088 () Bool)

(assert (=> b!98088 (= c!16642 (and ((_ is Cons!1582) (toList!772 call!9920)) (bvsgt (_1!1174 (h!2176 (toList!772 call!9920))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!63941 () List!1586)

(assert (=> b!98088 (= e!63941 e!63937)))

(declare-fun bm!10002 () Bool)

(declare-fun call!10004 () List!1586)

(assert (=> bm!10002 (= call!10005 call!10004)))

(declare-fun c!16643 () Bool)

(declare-fun bm!10003 () Bool)

(declare-fun e!63938 () List!1586)

(assert (=> bm!10003 (= call!10004 ($colon$colon!77 e!63938 (ite c!16643 (h!2176 (toList!772 call!9920)) (tuple2!2327 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16644 () Bool)

(assert (=> bm!10003 (= c!16644 c!16643)))

(declare-fun b!98089 () Bool)

(assert (=> b!98089 (= e!63941 call!10005)))

(declare-fun b!98090 () Bool)

(declare-fun e!63939 () List!1586)

(assert (=> b!98090 (= e!63939 e!63941)))

(declare-fun c!16641 () Bool)

(assert (=> b!98090 (= c!16641 (and ((_ is Cons!1582) (toList!772 call!9920)) (= (_1!1174 (h!2176 (toList!772 call!9920))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98091 () Bool)

(assert (=> b!98091 (= e!63939 call!10004)))

(declare-fun b!98092 () Bool)

(declare-fun res!49359 () Bool)

(declare-fun e!63940 () Bool)

(assert (=> b!98092 (=> (not res!49359) (not e!63940))))

(declare-fun lt!49203 () List!1586)

(assert (=> b!98092 (= res!49359 (containsKey!152 lt!49203 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98093 () Bool)

(assert (=> b!98093 (= e!63940 (contains!798 lt!49203 (tuple2!2327 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!26087 () Bool)

(assert (=> d!26087 e!63940))

(declare-fun res!49358 () Bool)

(assert (=> d!26087 (=> (not res!49358) (not e!63940))))

(assert (=> d!26087 (= res!49358 (isStrictlySorted!299 lt!49203))))

(assert (=> d!26087 (= lt!49203 e!63939)))

(assert (=> d!26087 (= c!16643 (and ((_ is Cons!1582) (toList!772 call!9920)) (bvslt (_1!1174 (h!2176 (toList!772 call!9920))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26087 (isStrictlySorted!299 (toList!772 call!9920))))

(assert (=> d!26087 (= (insertStrictlySorted!70 (toList!772 call!9920) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49203)))

(declare-fun b!98086 () Bool)

(assert (=> b!98086 (= e!63938 (ite c!16641 (t!5531 (toList!772 call!9920)) (ite c!16642 (Cons!1582 (h!2176 (toList!772 call!9920)) (t!5531 (toList!772 call!9920))) Nil!1583)))))

(declare-fun b!98094 () Bool)

(assert (=> b!98094 (= e!63937 call!10006)))

(declare-fun b!98095 () Bool)

(assert (=> b!98095 (= e!63938 (insertStrictlySorted!70 (t!5531 (toList!772 call!9920)) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26087 c!16643) b!98091))

(assert (= (and d!26087 (not c!16643)) b!98090))

(assert (= (and b!98090 c!16641) b!98089))

(assert (= (and b!98090 (not c!16641)) b!98088))

(assert (= (and b!98088 c!16642) b!98087))

(assert (= (and b!98088 (not c!16642)) b!98094))

(assert (= (or b!98087 b!98094) bm!10001))

(assert (= (or b!98089 bm!10001) bm!10002))

(assert (= (or b!98091 bm!10002) bm!10003))

(assert (= (and bm!10003 c!16644) b!98095))

(assert (= (and bm!10003 (not c!16644)) b!98086))

(assert (= (and d!26087 res!49358) b!98092))

(assert (= (and b!98092 res!49359) b!98093))

(declare-fun m!107019 () Bool)

(assert (=> b!98092 m!107019))

(declare-fun m!107021 () Bool)

(assert (=> b!98093 m!107021))

(declare-fun m!107023 () Bool)

(assert (=> bm!10003 m!107023))

(declare-fun m!107025 () Bool)

(assert (=> d!26087 m!107025))

(declare-fun m!107027 () Bool)

(assert (=> d!26087 m!107027))

(declare-fun m!107029 () Bool)

(assert (=> b!98095 m!107029))

(assert (=> d!25967 d!26087))

(declare-fun bm!10004 () Bool)

(declare-fun call!10007 () (_ BitVec 32))

(assert (=> bm!10004 (= call!10007 (arrayCountValidKeys!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98096 () Bool)

(declare-fun e!63942 () (_ BitVec 32))

(assert (=> b!98096 (= e!63942 call!10007)))

(declare-fun b!98097 () Bool)

(declare-fun e!63943 () (_ BitVec 32))

(assert (=> b!98097 (= e!63943 #b00000000000000000000000000000000)))

(declare-fun b!98098 () Bool)

(assert (=> b!98098 (= e!63942 (bvadd #b00000000000000000000000000000001 call!10007))))

(declare-fun b!98099 () Bool)

(assert (=> b!98099 (= e!63943 e!63942)))

(declare-fun c!16646 () Bool)

(assert (=> b!98099 (= c!16646 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!26089 () Bool)

(declare-fun lt!49204 () (_ BitVec 32))

(assert (=> d!26089 (and (bvsge lt!49204 #b00000000000000000000000000000000) (bvsle lt!49204 (bvsub (size!2253 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!26089 (= lt!49204 e!63943)))

(declare-fun c!16645 () Bool)

(assert (=> d!26089 (= c!16645 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26089 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2253 (_keys!4169 newMap!16)) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26089 (= (arrayCountValidKeys!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))) lt!49204)))

(assert (= (and d!26089 c!16645) b!98097))

(assert (= (and d!26089 (not c!16645)) b!98099))

(assert (= (and b!98099 c!16646) b!98098))

(assert (= (and b!98099 (not c!16646)) b!98096))

(assert (= (or b!98098 b!98096) bm!10004))

(declare-fun m!107031 () Bool)

(assert (=> bm!10004 m!107031))

(declare-fun m!107033 () Bool)

(assert (=> b!98099 m!107033))

(assert (=> b!98099 m!107033))

(declare-fun m!107035 () Bool)

(assert (=> b!98099 m!107035))

(assert (=> bm!9991 d!26089))

(declare-fun d!26091 () Bool)

(declare-fun e!63944 () Bool)

(assert (=> d!26091 e!63944))

(declare-fun res!49360 () Bool)

(assert (=> d!26091 (=> res!49360 e!63944)))

(declare-fun lt!49206 () Bool)

(assert (=> d!26091 (= res!49360 (not lt!49206))))

(declare-fun lt!49207 () Bool)

(assert (=> d!26091 (= lt!49206 lt!49207)))

(declare-fun lt!49205 () Unit!2934)

(declare-fun e!63945 () Unit!2934)

(assert (=> d!26091 (= lt!49205 e!63945)))

(declare-fun c!16647 () Bool)

(assert (=> d!26091 (= c!16647 lt!49207)))

(assert (=> d!26091 (= lt!49207 (containsKey!152 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!26091 (= (contains!796 lt!49006 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49206)))

(declare-fun b!98100 () Bool)

(declare-fun lt!49208 () Unit!2934)

(assert (=> b!98100 (= e!63945 lt!49208)))

(assert (=> b!98100 (= lt!49208 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> b!98100 (isDefined!102 (getValueByKey!148 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98101 () Bool)

(declare-fun Unit!2964 () Unit!2934)

(assert (=> b!98101 (= e!63945 Unit!2964)))

(declare-fun b!98102 () Bool)

(assert (=> b!98102 (= e!63944 (isDefined!102 (getValueByKey!148 (toList!772 lt!49006) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26091 c!16647) b!98100))

(assert (= (and d!26091 (not c!16647)) b!98101))

(assert (= (and d!26091 (not res!49360)) b!98102))

(declare-fun m!107037 () Bool)

(assert (=> d!26091 m!107037))

(declare-fun m!107039 () Bool)

(assert (=> b!98100 m!107039))

(assert (=> b!98100 m!106729))

(assert (=> b!98100 m!106729))

(declare-fun m!107041 () Bool)

(assert (=> b!98100 m!107041))

(assert (=> b!98102 m!106729))

(assert (=> b!98102 m!106729))

(assert (=> b!98102 m!107041))

(assert (=> d!25973 d!26091))

(declare-fun b!98104 () Bool)

(declare-fun e!63946 () Option!154)

(declare-fun e!63947 () Option!154)

(assert (=> b!98104 (= e!63946 e!63947)))

(declare-fun c!16649 () Bool)

(assert (=> b!98104 (= c!16649 (and ((_ is Cons!1582) lt!49004) (not (= (_1!1174 (h!2176 lt!49004)) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98105 () Bool)

(assert (=> b!98105 (= e!63947 (getValueByKey!148 (t!5531 lt!49004) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98103 () Bool)

(assert (=> b!98103 (= e!63946 (Some!153 (_2!1174 (h!2176 lt!49004))))))

(declare-fun d!26093 () Bool)

(declare-fun c!16648 () Bool)

(assert (=> d!26093 (= c!16648 (and ((_ is Cons!1582) lt!49004) (= (_1!1174 (h!2176 lt!49004)) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26093 (= (getValueByKey!148 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!63946)))

(declare-fun b!98106 () Bool)

(assert (=> b!98106 (= e!63947 None!152)))

(assert (= (and d!26093 c!16648) b!98103))

(assert (= (and d!26093 (not c!16648)) b!98104))

(assert (= (and b!98104 c!16649) b!98105))

(assert (= (and b!98104 (not c!16649)) b!98106))

(declare-fun m!107043 () Bool)

(assert (=> b!98105 m!107043))

(assert (=> d!25973 d!26093))

(declare-fun d!26095 () Bool)

(assert (=> d!26095 (= (getValueByKey!148 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49209 () Unit!2934)

(assert (=> d!26095 (= lt!49209 (choose!604 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!63948 () Bool)

(assert (=> d!26095 e!63948))

(declare-fun res!49361 () Bool)

(assert (=> d!26095 (=> (not res!49361) (not e!63948))))

(assert (=> d!26095 (= res!49361 (isStrictlySorted!299 lt!49004))))

(assert (=> d!26095 (= (lemmaContainsTupThenGetReturnValue!67 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49209)))

(declare-fun b!98107 () Bool)

(declare-fun res!49362 () Bool)

(assert (=> b!98107 (=> (not res!49362) (not e!63948))))

(assert (=> b!98107 (= res!49362 (containsKey!152 lt!49004 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98108 () Bool)

(assert (=> b!98108 (= e!63948 (contains!798 lt!49004 (tuple2!2327 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26095 res!49361) b!98107))

(assert (= (and b!98107 res!49362) b!98108))

(assert (=> d!26095 m!106723))

(declare-fun m!107045 () Bool)

(assert (=> d!26095 m!107045))

(declare-fun m!107047 () Bool)

(assert (=> d!26095 m!107047))

(declare-fun m!107049 () Bool)

(assert (=> b!98107 m!107049))

(declare-fun m!107051 () Bool)

(assert (=> b!98108 m!107051))

(assert (=> d!25973 d!26095))

(declare-fun bm!10005 () Bool)

(declare-fun call!10010 () List!1586)

(declare-fun call!10009 () List!1586)

(assert (=> bm!10005 (= call!10010 call!10009)))

(declare-fun b!98110 () Bool)

(declare-fun e!63949 () List!1586)

(assert (=> b!98110 (= e!63949 call!10010)))

(declare-fun b!98111 () Bool)

(declare-fun c!16651 () Bool)

(assert (=> b!98111 (= c!16651 (and ((_ is Cons!1582) (toList!772 call!9868)) (bvsgt (_1!1174 (h!2176 (toList!772 call!9868))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!63953 () List!1586)

(assert (=> b!98111 (= e!63953 e!63949)))

(declare-fun bm!10006 () Bool)

(declare-fun call!10008 () List!1586)

(assert (=> bm!10006 (= call!10009 call!10008)))

(declare-fun bm!10007 () Bool)

(declare-fun e!63950 () List!1586)

(declare-fun c!16652 () Bool)

(assert (=> bm!10007 (= call!10008 ($colon$colon!77 e!63950 (ite c!16652 (h!2176 (toList!772 call!9868)) (tuple2!2327 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun c!16653 () Bool)

(assert (=> bm!10007 (= c!16653 c!16652)))

(declare-fun b!98112 () Bool)

(assert (=> b!98112 (= e!63953 call!10009)))

(declare-fun b!98113 () Bool)

(declare-fun e!63951 () List!1586)

(assert (=> b!98113 (= e!63951 e!63953)))

(declare-fun c!16650 () Bool)

(assert (=> b!98113 (= c!16650 (and ((_ is Cons!1582) (toList!772 call!9868)) (= (_1!1174 (h!2176 (toList!772 call!9868))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98114 () Bool)

(assert (=> b!98114 (= e!63951 call!10008)))

(declare-fun b!98115 () Bool)

(declare-fun res!49364 () Bool)

(declare-fun e!63952 () Bool)

(assert (=> b!98115 (=> (not res!49364) (not e!63952))))

(declare-fun lt!49210 () List!1586)

(assert (=> b!98115 (= res!49364 (containsKey!152 lt!49210 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98116 () Bool)

(assert (=> b!98116 (= e!63952 (contains!798 lt!49210 (tuple2!2327 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun d!26097 () Bool)

(assert (=> d!26097 e!63952))

(declare-fun res!49363 () Bool)

(assert (=> d!26097 (=> (not res!49363) (not e!63952))))

(assert (=> d!26097 (= res!49363 (isStrictlySorted!299 lt!49210))))

(assert (=> d!26097 (= lt!49210 e!63951)))

(assert (=> d!26097 (= c!16652 (and ((_ is Cons!1582) (toList!772 call!9868)) (bvslt (_1!1174 (h!2176 (toList!772 call!9868))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26097 (isStrictlySorted!299 (toList!772 call!9868))))

(assert (=> d!26097 (= (insertStrictlySorted!70 (toList!772 call!9868) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49210)))

(declare-fun b!98109 () Bool)

(assert (=> b!98109 (= e!63950 (ite c!16650 (t!5531 (toList!772 call!9868)) (ite c!16651 (Cons!1582 (h!2176 (toList!772 call!9868)) (t!5531 (toList!772 call!9868))) Nil!1583)))))

(declare-fun b!98117 () Bool)

(assert (=> b!98117 (= e!63949 call!10010)))

(declare-fun b!98118 () Bool)

(assert (=> b!98118 (= e!63950 (insertStrictlySorted!70 (t!5531 (toList!772 call!9868)) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26097 c!16652) b!98114))

(assert (= (and d!26097 (not c!16652)) b!98113))

(assert (= (and b!98113 c!16650) b!98112))

(assert (= (and b!98113 (not c!16650)) b!98111))

(assert (= (and b!98111 c!16651) b!98110))

(assert (= (and b!98111 (not c!16651)) b!98117))

(assert (= (or b!98110 b!98117) bm!10005))

(assert (= (or b!98112 bm!10005) bm!10006))

(assert (= (or b!98114 bm!10006) bm!10007))

(assert (= (and bm!10007 c!16653) b!98118))

(assert (= (and bm!10007 (not c!16653)) b!98109))

(assert (= (and d!26097 res!49363) b!98115))

(assert (= (and b!98115 res!49364) b!98116))

(declare-fun m!107053 () Bool)

(assert (=> b!98115 m!107053))

(declare-fun m!107055 () Bool)

(assert (=> b!98116 m!107055))

(declare-fun m!107057 () Bool)

(assert (=> bm!10007 m!107057))

(declare-fun m!107059 () Bool)

(assert (=> d!26097 m!107059))

(declare-fun m!107061 () Bool)

(assert (=> d!26097 m!107061))

(declare-fun m!107063 () Bool)

(assert (=> b!98118 m!107063))

(assert (=> d!25973 d!26097))

(declare-fun d!26099 () Bool)

(assert (=> d!26099 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(declare-fun lt!49211 () Unit!2934)

(assert (=> d!26099 (= lt!49211 (choose!601 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(declare-fun e!63954 () Bool)

(assert (=> d!26099 e!63954))

(declare-fun res!49365 () Bool)

(assert (=> d!26099 (=> (not res!49365) (not e!63954))))

(assert (=> d!26099 (= res!49365 (isStrictlySorted!299 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26099 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733) lt!49211)))

(declare-fun b!98119 () Bool)

(assert (=> b!98119 (= e!63954 (containsKey!152 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))

(assert (= (and d!26099 res!49365) b!98119))

(assert (=> d!26099 m!106633))

(assert (=> d!26099 m!106633))

(assert (=> d!26099 m!106635))

(declare-fun m!107065 () Bool)

(assert (=> d!26099 m!107065))

(declare-fun m!107067 () Bool)

(assert (=> d!26099 m!107067))

(assert (=> b!98119 m!106629))

(assert (=> b!97793 d!26099))

(declare-fun d!26101 () Bool)

(assert (=> d!26101 (= (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733)) (not (isEmpty!361 (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733))))))

(declare-fun bs!4032 () Bool)

(assert (= bs!4032 d!26101))

(assert (=> bs!4032 m!106633))

(declare-fun m!107069 () Bool)

(assert (=> bs!4032 m!107069))

(assert (=> b!97793 d!26101))

(declare-fun b!98121 () Bool)

(declare-fun e!63955 () Option!154)

(declare-fun e!63956 () Option!154)

(assert (=> b!98121 (= e!63955 e!63956)))

(declare-fun c!16655 () Bool)

(assert (=> b!98121 (= c!16655 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (not (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48733))))))

(declare-fun b!98122 () Bool)

(assert (=> b!98122 (= e!63956 (getValueByKey!148 (t!5531 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!48733))))

(declare-fun b!98120 () Bool)

(assert (=> b!98120 (= e!63955 (Some!153 (_2!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun c!16654 () Bool)

(declare-fun d!26103 () Bool)

(assert (=> d!26103 (= c!16654 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48733)))))

(assert (=> d!26103 (= (getValueByKey!148 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733) e!63955)))

(declare-fun b!98123 () Bool)

(assert (=> b!98123 (= e!63956 None!152)))

(assert (= (and d!26103 c!16654) b!98120))

(assert (= (and d!26103 (not c!16654)) b!98121))

(assert (= (and b!98121 c!16655) b!98122))

(assert (= (and b!98121 (not c!16655)) b!98123))

(declare-fun m!107071 () Bool)

(assert (=> b!98122 m!107071))

(assert (=> b!97793 d!26103))

(assert (=> d!25953 d!25947))

(assert (=> d!25953 d!25951))

(declare-fun d!26105 () Bool)

(assert (=> d!26105 (contains!796 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48733)))

(assert (=> d!26105 true))

(declare-fun _$35!339 () Unit!2934)

(assert (=> d!26105 (= (choose!597 lt!48736 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48733) _$35!339)))

(declare-fun bs!4033 () Bool)

(assert (= bs!4033 d!26105))

(assert (=> bs!4033 m!106225))

(assert (=> bs!4033 m!106225))

(assert (=> bs!4033 m!106239))

(assert (=> d!25953 d!26105))

(declare-fun d!26107 () Bool)

(declare-fun e!63957 () Bool)

(assert (=> d!26107 e!63957))

(declare-fun res!49366 () Bool)

(assert (=> d!26107 (=> res!49366 e!63957)))

(declare-fun lt!49213 () Bool)

(assert (=> d!26107 (= res!49366 (not lt!49213))))

(declare-fun lt!49214 () Bool)

(assert (=> d!26107 (= lt!49213 lt!49214)))

(declare-fun lt!49212 () Unit!2934)

(declare-fun e!63958 () Unit!2934)

(assert (=> d!26107 (= lt!49212 e!63958)))

(declare-fun c!16656 () Bool)

(assert (=> d!26107 (= c!16656 lt!49214)))

(assert (=> d!26107 (= lt!49214 (containsKey!152 (toList!772 lt!48736) lt!48733))))

(assert (=> d!26107 (= (contains!796 lt!48736 lt!48733) lt!49213)))

(declare-fun b!98125 () Bool)

(declare-fun lt!49215 () Unit!2934)

(assert (=> b!98125 (= e!63958 lt!49215)))

(assert (=> b!98125 (= lt!49215 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48736) lt!48733))))

(assert (=> b!98125 (isDefined!102 (getValueByKey!148 (toList!772 lt!48736) lt!48733))))

(declare-fun b!98126 () Bool)

(declare-fun Unit!2965 () Unit!2934)

(assert (=> b!98126 (= e!63958 Unit!2965)))

(declare-fun b!98127 () Bool)

(assert (=> b!98127 (= e!63957 (isDefined!102 (getValueByKey!148 (toList!772 lt!48736) lt!48733)))))

(assert (= (and d!26107 c!16656) b!98125))

(assert (= (and d!26107 (not c!16656)) b!98126))

(assert (= (and d!26107 (not res!49366)) b!98127))

(declare-fun m!107073 () Bool)

(assert (=> d!26107 m!107073))

(declare-fun m!107075 () Bool)

(assert (=> b!98125 m!107075))

(declare-fun m!107077 () Bool)

(assert (=> b!98125 m!107077))

(assert (=> b!98125 m!107077))

(declare-fun m!107079 () Bool)

(assert (=> b!98125 m!107079))

(assert (=> b!98127 m!107077))

(assert (=> b!98127 m!107077))

(assert (=> b!98127 m!107079))

(assert (=> d!25953 d!26107))

(declare-fun d!26109 () Bool)

(declare-fun e!63959 () Bool)

(assert (=> d!26109 e!63959))

(declare-fun res!49367 () Bool)

(assert (=> d!26109 (=> res!49367 e!63959)))

(declare-fun lt!49217 () Bool)

(assert (=> d!26109 (= res!49367 (not lt!49217))))

(declare-fun lt!49218 () Bool)

(assert (=> d!26109 (= lt!49217 lt!49218)))

(declare-fun lt!49216 () Unit!2934)

(declare-fun e!63960 () Unit!2934)

(assert (=> d!26109 (= lt!49216 e!63960)))

(declare-fun c!16657 () Bool)

(assert (=> d!26109 (= c!16657 lt!49218)))

(assert (=> d!26109 (= lt!49218 (containsKey!152 (toList!772 lt!48893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26109 (= (contains!796 lt!48893 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49217)))

(declare-fun b!98128 () Bool)

(declare-fun lt!49219 () Unit!2934)

(assert (=> b!98128 (= e!63960 lt!49219)))

(assert (=> b!98128 (= lt!49219 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98128 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98129 () Bool)

(declare-fun Unit!2966 () Unit!2934)

(assert (=> b!98129 (= e!63960 Unit!2966)))

(declare-fun b!98130 () Bool)

(assert (=> b!98130 (= e!63959 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26109 c!16657) b!98128))

(assert (= (and d!26109 (not c!16657)) b!98129))

(assert (= (and d!26109 (not res!49367)) b!98130))

(declare-fun m!107081 () Bool)

(assert (=> d!26109 m!107081))

(declare-fun m!107083 () Bool)

(assert (=> b!98128 m!107083))

(declare-fun m!107085 () Bool)

(assert (=> b!98128 m!107085))

(assert (=> b!98128 m!107085))

(declare-fun m!107087 () Bool)

(assert (=> b!98128 m!107087))

(assert (=> b!98130 m!107085))

(assert (=> b!98130 m!107085))

(assert (=> b!98130 m!107087))

(assert (=> bm!9949 d!26109))

(declare-fun d!26111 () Bool)

(declare-fun lt!49220 () Bool)

(assert (=> d!26111 (= lt!49220 (select (content!102 (toList!772 lt!48921)) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!63961 () Bool)

(assert (=> d!26111 (= lt!49220 e!63961)))

(declare-fun res!49369 () Bool)

(assert (=> d!26111 (=> (not res!49369) (not e!63961))))

(assert (=> d!26111 (= res!49369 ((_ is Cons!1582) (toList!772 lt!48921)))))

(assert (=> d!26111 (= (contains!798 (toList!772 lt!48921) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49220)))

(declare-fun b!98131 () Bool)

(declare-fun e!63962 () Bool)

(assert (=> b!98131 (= e!63961 e!63962)))

(declare-fun res!49368 () Bool)

(assert (=> b!98131 (=> res!49368 e!63962)))

(assert (=> b!98131 (= res!49368 (= (h!2176 (toList!772 lt!48921)) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98132 () Bool)

(assert (=> b!98132 (= e!63962 (contains!798 (t!5531 (toList!772 lt!48921)) (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26111 res!49369) b!98131))

(assert (= (and b!98131 (not res!49368)) b!98132))

(declare-fun m!107089 () Bool)

(assert (=> d!26111 m!107089))

(declare-fun m!107091 () Bool)

(assert (=> d!26111 m!107091))

(declare-fun m!107093 () Bool)

(assert (=> b!98132 m!107093))

(assert (=> b!97704 d!26111))

(declare-fun d!26113 () Bool)

(assert (=> d!26113 (= (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!361 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4034 () Bool)

(assert (= bs!4034 d!26113))

(assert (=> bs!4034 m!106525))

(declare-fun m!107095 () Bool)

(assert (=> bs!4034 m!107095))

(assert (=> b!97824 d!26113))

(assert (=> b!97824 d!26065))

(assert (=> bm!9986 d!26001))

(declare-fun d!26115 () Bool)

(declare-fun e!63963 () Bool)

(assert (=> d!26115 e!63963))

(declare-fun res!49370 () Bool)

(assert (=> d!26115 (=> res!49370 e!63963)))

(declare-fun lt!49222 () Bool)

(assert (=> d!26115 (= res!49370 (not lt!49222))))

(declare-fun lt!49223 () Bool)

(assert (=> d!26115 (= lt!49222 lt!49223)))

(declare-fun lt!49221 () Unit!2934)

(declare-fun e!63964 () Unit!2934)

(assert (=> d!26115 (= lt!49221 e!63964)))

(declare-fun c!16658 () Bool)

(assert (=> d!26115 (= c!16658 lt!49223)))

(assert (=> d!26115 (= lt!49223 (containsKey!152 (toList!772 lt!48893) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26115 (= (contains!796 lt!48893 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) lt!49222)))

(declare-fun b!98133 () Bool)

(declare-fun lt!49224 () Unit!2934)

(assert (=> b!98133 (= e!63964 lt!49224)))

(assert (=> b!98133 (= lt!49224 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48893) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98133 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98134 () Bool)

(declare-fun Unit!2967 () Unit!2934)

(assert (=> b!98134 (= e!63964 Unit!2967)))

(declare-fun b!98135 () Bool)

(assert (=> b!98135 (= e!63963 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26115 c!16658) b!98133))

(assert (= (and d!26115 (not c!16658)) b!98134))

(assert (= (and d!26115 (not res!49370)) b!98135))

(assert (=> d!26115 m!106375))

(declare-fun m!107097 () Bool)

(assert (=> d!26115 m!107097))

(assert (=> b!98133 m!106375))

(declare-fun m!107099 () Bool)

(assert (=> b!98133 m!107099))

(assert (=> b!98133 m!106375))

(declare-fun m!107101 () Bool)

(assert (=> b!98133 m!107101))

(assert (=> b!98133 m!107101))

(declare-fun m!107103 () Bool)

(assert (=> b!98133 m!107103))

(assert (=> b!98135 m!106375))

(assert (=> b!98135 m!107101))

(assert (=> b!98135 m!107101))

(assert (=> b!98135 m!107103))

(assert (=> b!97653 d!26115))

(declare-fun d!26117 () Bool)

(declare-fun res!49371 () Bool)

(declare-fun e!63965 () Bool)

(assert (=> d!26117 (=> res!49371 e!63965)))

(assert (=> d!26117 (= res!49371 (= (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26117 (= (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!63965)))

(declare-fun b!98136 () Bool)

(declare-fun e!63966 () Bool)

(assert (=> b!98136 (= e!63965 e!63966)))

(declare-fun res!49372 () Bool)

(assert (=> b!98136 (=> (not res!49372) (not e!63966))))

(assert (=> b!98136 (= res!49372 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98137 () Bool)

(assert (=> b!98137 (= e!63966 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26117 (not res!49371)) b!98136))

(assert (= (and b!98136 res!49372) b!98137))

(assert (=> d!26117 m!107033))

(assert (=> b!98137 m!106105))

(declare-fun m!107105 () Bool)

(assert (=> b!98137 m!107105))

(assert (=> b!97861 d!26117))

(declare-fun d!26119 () Bool)

(declare-fun res!49374 () Bool)

(declare-fun e!63968 () Bool)

(assert (=> d!26119 (=> res!49374 e!63968)))

(assert (=> d!26119 (= res!49374 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (=> d!26119 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824))) e!63968)))

(declare-fun b!98138 () Bool)

(declare-fun e!63967 () Bool)

(assert (=> b!98138 (= e!63968 e!63967)))

(declare-fun c!16659 () Bool)

(assert (=> b!98138 (= c!16659 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun b!98139 () Bool)

(declare-fun e!63969 () Bool)

(assert (=> b!98139 (= e!63967 e!63969)))

(declare-fun lt!49226 () (_ BitVec 64))

(assert (=> b!98139 (= lt!49226 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000))))

(declare-fun lt!49227 () Unit!2934)

(assert (=> b!98139 (= lt!49227 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4169 (_2!1175 lt!48824)) lt!49226 #b00000000000000000000000000000000))))

(assert (=> b!98139 (arrayContainsKey!0 (_keys!4169 (_2!1175 lt!48824)) lt!49226 #b00000000000000000000000000000000)))

(declare-fun lt!49225 () Unit!2934)

(assert (=> b!98139 (= lt!49225 lt!49227)))

(declare-fun res!49373 () Bool)

(assert (=> b!98139 (= res!49373 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000) (_keys!4169 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824))) (Found!256 #b00000000000000000000000000000000)))))

(assert (=> b!98139 (=> (not res!49373) (not e!63969))))

(declare-fun b!98140 () Bool)

(declare-fun call!10011 () Bool)

(assert (=> b!98140 (= e!63967 call!10011)))

(declare-fun b!98141 () Bool)

(assert (=> b!98141 (= e!63969 call!10011)))

(declare-fun bm!10008 () Bool)

(assert (=> bm!10008 (= call!10011 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4169 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824))))))

(assert (= (and d!26119 (not res!49374)) b!98138))

(assert (= (and b!98138 c!16659) b!98139))

(assert (= (and b!98138 (not c!16659)) b!98140))

(assert (= (and b!98139 res!49373) b!98141))

(assert (= (or b!98141 b!98140) bm!10008))

(declare-fun m!107107 () Bool)

(assert (=> b!98138 m!107107))

(assert (=> b!98138 m!107107))

(declare-fun m!107109 () Bool)

(assert (=> b!98138 m!107109))

(assert (=> b!98139 m!107107))

(declare-fun m!107111 () Bool)

(assert (=> b!98139 m!107111))

(declare-fun m!107113 () Bool)

(assert (=> b!98139 m!107113))

(assert (=> b!98139 m!107107))

(declare-fun m!107115 () Bool)

(assert (=> b!98139 m!107115))

(declare-fun m!107117 () Bool)

(assert (=> bm!10008 m!107117))

(assert (=> b!97629 d!26119))

(declare-fun d!26121 () Bool)

(assert (=> d!26121 (= (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48744)) (v!2797 (getValueByKey!148 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48744)))))

(assert (=> d!25959 d!26121))

(declare-fun b!98143 () Bool)

(declare-fun e!63970 () Option!154)

(declare-fun e!63971 () Option!154)

(assert (=> b!98143 (= e!63970 e!63971)))

(declare-fun c!16661 () Bool)

(assert (=> b!98143 (= c!16661 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (not (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48744))))))

(declare-fun b!98144 () Bool)

(assert (=> b!98144 (= e!63971 (getValueByKey!148 (t!5531 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!48744))))

(declare-fun b!98142 () Bool)

(assert (=> b!98142 (= e!63970 (Some!153 (_2!1174 (h!2176 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun c!16660 () Bool)

(declare-fun d!26123 () Bool)

(assert (=> d!26123 (= c!16660 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48744)))))

(assert (=> d!26123 (= (getValueByKey!148 (toList!772 (+!128 lt!48746 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48744) e!63970)))

(declare-fun b!98145 () Bool)

(assert (=> b!98145 (= e!63971 None!152)))

(assert (= (and d!26123 c!16660) b!98142))

(assert (= (and d!26123 (not c!16660)) b!98143))

(assert (= (and b!98143 c!16661) b!98144))

(assert (= (and b!98143 (not c!16661)) b!98145))

(declare-fun m!107119 () Bool)

(assert (=> b!98144 m!107119))

(assert (=> d!25959 d!26123))

(declare-fun d!26125 () Bool)

(assert (=> d!26125 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49228 () Unit!2934)

(assert (=> d!26125 (= lt!49228 (choose!601 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63972 () Bool)

(assert (=> d!26125 e!63972))

(declare-fun res!49375 () Bool)

(assert (=> d!26125 (=> (not res!49375) (not e!63972))))

(assert (=> d!26125 (= res!49375 (isStrictlySorted!299 (toList!772 lt!48747)))))

(assert (=> d!26125 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000) lt!49228)))

(declare-fun b!98146 () Bool)

(assert (=> b!98146 (= e!63972 (containsKey!152 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26125 res!49375) b!98146))

(assert (=> d!26125 m!106791))

(assert (=> d!26125 m!106791))

(assert (=> d!26125 m!106907))

(declare-fun m!107121 () Bool)

(assert (=> d!26125 m!107121))

(declare-fun m!107123 () Bool)

(assert (=> d!26125 m!107123))

(assert (=> b!98146 m!106903))

(assert (=> b!97962 d!26125))

(declare-fun d!26127 () Bool)

(assert (=> d!26127 (= (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!361 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4035 () Bool)

(assert (= bs!4035 d!26127))

(assert (=> bs!4035 m!106791))

(declare-fun m!107125 () Bool)

(assert (=> bs!4035 m!107125))

(assert (=> b!97962 d!26127))

(declare-fun b!98148 () Bool)

(declare-fun e!63973 () Option!154)

(declare-fun e!63974 () Option!154)

(assert (=> b!98148 (= e!63973 e!63974)))

(declare-fun c!16663 () Bool)

(assert (=> b!98148 (= c!16663 (and ((_ is Cons!1582) (toList!772 lt!48747)) (not (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98149 () Bool)

(assert (=> b!98149 (= e!63974 (getValueByKey!148 (t!5531 (toList!772 lt!48747)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98147 () Bool)

(assert (=> b!98147 (= e!63973 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48747)))))))

(declare-fun d!26129 () Bool)

(declare-fun c!16662 () Bool)

(assert (=> d!26129 (= c!16662 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26129 (= (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000) e!63973)))

(declare-fun b!98150 () Bool)

(assert (=> b!98150 (= e!63974 None!152)))

(assert (= (and d!26129 c!16662) b!98147))

(assert (= (and d!26129 (not c!16662)) b!98148))

(assert (= (and b!98148 c!16663) b!98149))

(assert (= (and b!98148 (not c!16663)) b!98150))

(declare-fun m!107127 () Bool)

(assert (=> b!98149 m!107127))

(assert (=> b!97962 d!26129))

(declare-fun b!98151 () Bool)

(declare-fun e!63979 () ListLongMap!1513)

(declare-fun e!63978 () ListLongMap!1513)

(assert (=> b!98151 (= e!63979 e!63978)))

(declare-fun c!16666 () Bool)

(assert (=> b!98151 (= c!16666 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98152 () Bool)

(declare-fun e!63977 () Bool)

(assert (=> b!98152 (= e!63977 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98152 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98153 () Bool)

(declare-fun e!63981 () Bool)

(declare-fun lt!49233 () ListLongMap!1513)

(assert (=> b!98153 (= e!63981 (isEmpty!360 lt!49233))))

(declare-fun b!98154 () Bool)

(assert (=> b!98154 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> b!98154 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (_values!2463 newMap!16))))))

(declare-fun e!63975 () Bool)

(assert (=> b!98154 (= e!63975 (= (apply!92 lt!49233 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98155 () Bool)

(assert (=> b!98155 (= e!63979 (ListLongMap!1514 Nil!1583))))

(declare-fun b!98156 () Bool)

(declare-fun res!49378 () Bool)

(declare-fun e!63980 () Bool)

(assert (=> b!98156 (=> (not res!49378) (not e!63980))))

(assert (=> b!98156 (= res!49378 (not (contains!796 lt!49233 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98157 () Bool)

(declare-fun e!63976 () Bool)

(assert (=> b!98157 (= e!63980 e!63976)))

(declare-fun c!16667 () Bool)

(assert (=> b!98157 (= c!16667 e!63977)))

(declare-fun res!49376 () Bool)

(assert (=> b!98157 (=> (not res!49376) (not e!63977))))

(assert (=> b!98157 (= res!49376 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun d!26131 () Bool)

(assert (=> d!26131 e!63980))

(declare-fun res!49379 () Bool)

(assert (=> d!26131 (=> (not res!49379) (not e!63980))))

(assert (=> d!26131 (= res!49379 (not (contains!796 lt!49233 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26131 (= lt!49233 e!63979)))

(declare-fun c!16665 () Bool)

(assert (=> d!26131 (= c!16665 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26131 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26131 (= (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49233)))

(declare-fun b!98158 () Bool)

(assert (=> b!98158 (= e!63981 (= lt!49233 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun b!98159 () Bool)

(declare-fun call!10012 () ListLongMap!1513)

(assert (=> b!98159 (= e!63978 call!10012)))

(declare-fun b!98160 () Bool)

(assert (=> b!98160 (= e!63976 e!63981)))

(declare-fun c!16664 () Bool)

(assert (=> b!98160 (= c!16664 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98161 () Bool)

(declare-fun lt!49231 () Unit!2934)

(declare-fun lt!49234 () Unit!2934)

(assert (=> b!98161 (= lt!49231 lt!49234)))

(declare-fun lt!49235 () (_ BitVec 64))

(declare-fun lt!49232 () V!3153)

(declare-fun lt!49230 () ListLongMap!1513)

(declare-fun lt!49229 () (_ BitVec 64))

(assert (=> b!98161 (not (contains!796 (+!128 lt!49230 (tuple2!2327 lt!49229 lt!49232)) lt!49235))))

(assert (=> b!98161 (= lt!49234 (addStillNotContains!41 lt!49230 lt!49229 lt!49232 lt!49235))))

(assert (=> b!98161 (= lt!49235 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98161 (= lt!49232 (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98161 (= lt!49229 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98161 (= lt!49230 call!10012)))

(assert (=> b!98161 (= e!63978 (+!128 call!10012 (tuple2!2327 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98162 () Bool)

(assert (=> b!98162 (= e!63976 e!63975)))

(assert (=> b!98162 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49377 () Bool)

(assert (=> b!98162 (= res!49377 (contains!796 lt!49233 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98162 (=> (not res!49377) (not e!63975))))

(declare-fun bm!10009 () Bool)

(assert (=> bm!10009 (= call!10012 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26131 c!16665) b!98155))

(assert (= (and d!26131 (not c!16665)) b!98151))

(assert (= (and b!98151 c!16666) b!98161))

(assert (= (and b!98151 (not c!16666)) b!98159))

(assert (= (or b!98161 b!98159) bm!10009))

(assert (= (and d!26131 res!49379) b!98156))

(assert (= (and b!98156 res!49378) b!98157))

(assert (= (and b!98157 res!49376) b!98152))

(assert (= (and b!98157 c!16667) b!98162))

(assert (= (and b!98157 (not c!16667)) b!98160))

(assert (= (and b!98162 res!49377) b!98154))

(assert (= (and b!98160 c!16664) b!98158))

(assert (= (and b!98160 (not c!16664)) b!98153))

(declare-fun b_lambda!4349 () Bool)

(assert (=> (not b_lambda!4349) (not b!98154)))

(assert (=> b!98154 t!5544))

(declare-fun b_and!6005 () Bool)

(assert (= b_and!6001 (and (=> t!5544 result!3271) b_and!6005)))

(assert (=> b!98154 t!5546))

(declare-fun b_and!6007 () Bool)

(assert (= b_and!6003 (and (=> t!5546 result!3273) b_and!6007)))

(declare-fun b_lambda!4351 () Bool)

(assert (=> (not b_lambda!4351) (not b!98161)))

(assert (=> b!98161 t!5544))

(declare-fun b_and!6009 () Bool)

(assert (= b_and!6005 (and (=> t!5544 result!3271) b_and!6009)))

(assert (=> b!98161 t!5546))

(declare-fun b_and!6011 () Bool)

(assert (= b_and!6007 (and (=> t!5546 result!3273) b_and!6011)))

(assert (=> b!98154 m!106375))

(assert (=> b!98154 m!106421))

(assert (=> b!98154 m!106419))

(assert (=> b!98154 m!106375))

(declare-fun m!107129 () Bool)

(assert (=> b!98154 m!107129))

(assert (=> b!98154 m!106419))

(assert (=> b!98154 m!106421))

(assert (=> b!98154 m!106423))

(declare-fun m!107131 () Bool)

(assert (=> bm!10009 m!107131))

(assert (=> b!98158 m!107131))

(declare-fun m!107133 () Bool)

(assert (=> b!98153 m!107133))

(assert (=> b!98152 m!106375))

(assert (=> b!98152 m!106375))

(assert (=> b!98152 m!106431))

(assert (=> b!98161 m!106375))

(assert (=> b!98161 m!106421))

(declare-fun m!107135 () Bool)

(assert (=> b!98161 m!107135))

(declare-fun m!107137 () Bool)

(assert (=> b!98161 m!107137))

(assert (=> b!98161 m!106419))

(declare-fun m!107139 () Bool)

(assert (=> b!98161 m!107139))

(assert (=> b!98161 m!107137))

(declare-fun m!107141 () Bool)

(assert (=> b!98161 m!107141))

(assert (=> b!98161 m!106419))

(assert (=> b!98161 m!106421))

(assert (=> b!98161 m!106423))

(declare-fun m!107143 () Bool)

(assert (=> d!26131 m!107143))

(assert (=> d!26131 m!106427))

(assert (=> b!98151 m!106375))

(assert (=> b!98151 m!106375))

(assert (=> b!98151 m!106431))

(declare-fun m!107145 () Bool)

(assert (=> b!98156 m!107145))

(assert (=> b!98162 m!106375))

(assert (=> b!98162 m!106375))

(declare-fun m!107147 () Bool)

(assert (=> b!98162 m!107147))

(assert (=> bm!9946 d!26131))

(declare-fun d!26133 () Bool)

(declare-fun e!63982 () Bool)

(assert (=> d!26133 e!63982))

(declare-fun res!49381 () Bool)

(assert (=> d!26133 (=> (not res!49381) (not e!63982))))

(declare-fun lt!49239 () ListLongMap!1513)

(assert (=> d!26133 (= res!49381 (contains!796 lt!49239 (_1!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun lt!49237 () List!1586)

(assert (=> d!26133 (= lt!49239 (ListLongMap!1514 lt!49237))))

(declare-fun lt!49238 () Unit!2934)

(declare-fun lt!49236 () Unit!2934)

(assert (=> d!26133 (= lt!49238 lt!49236)))

(assert (=> d!26133 (= (getValueByKey!148 lt!49237 (_1!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))) (Some!153 (_2!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26133 (= lt!49236 (lemmaContainsTupThenGetReturnValue!67 lt!49237 (_1!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (_2!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26133 (= lt!49237 (insertStrictlySorted!70 (toList!772 (ite c!16546 call!9959 (ite c!16545 call!9960 call!9965))) (_1!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (_2!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26133 (= (+!128 (ite c!16546 call!9959 (ite c!16545 call!9960 call!9965)) (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!49239)))

(declare-fun b!98163 () Bool)

(declare-fun res!49380 () Bool)

(assert (=> b!98163 (=> (not res!49380) (not e!63982))))

(assert (=> b!98163 (= res!49380 (= (getValueByKey!148 (toList!772 lt!49239) (_1!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))) (Some!153 (_2!1174 (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))))

(declare-fun b!98164 () Bool)

(assert (=> b!98164 (= e!63982 (contains!798 (toList!772 lt!49239) (ite (or c!16546 c!16545) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (= (and d!26133 res!49381) b!98163))

(assert (= (and b!98163 res!49380) b!98164))

(declare-fun m!107149 () Bool)

(assert (=> d!26133 m!107149))

(declare-fun m!107151 () Bool)

(assert (=> d!26133 m!107151))

(declare-fun m!107153 () Bool)

(assert (=> d!26133 m!107153))

(declare-fun m!107155 () Bool)

(assert (=> d!26133 m!107155))

(declare-fun m!107157 () Bool)

(assert (=> b!98163 m!107157))

(declare-fun m!107159 () Bool)

(assert (=> b!98164 m!107159))

(assert (=> bm!9959 d!26133))

(assert (=> d!25995 d!25901))

(declare-fun d!26135 () Bool)

(assert (=> d!26135 (= (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48745)) (v!2797 (getValueByKey!148 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48745)))))

(assert (=> d!25943 d!26135))

(declare-fun b!98166 () Bool)

(declare-fun e!63983 () Option!154)

(declare-fun e!63984 () Option!154)

(assert (=> b!98166 (= e!63983 e!63984)))

(declare-fun c!16669 () Bool)

(assert (=> b!98166 (= c!16669 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (not (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48745))))))

(declare-fun b!98167 () Bool)

(assert (=> b!98167 (= e!63984 (getValueByKey!148 (t!5531 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!48745))))

(declare-fun b!98165 () Bool)

(assert (=> b!98165 (= e!63983 (Some!153 (_2!1174 (h!2176 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun c!16668 () Bool)

(declare-fun d!26137 () Bool)

(assert (=> d!26137 (= c!16668 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48745)))))

(assert (=> d!26137 (= (getValueByKey!148 (toList!772 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48745) e!63983)))

(declare-fun b!98168 () Bool)

(assert (=> b!98168 (= e!63984 None!152)))

(assert (= (and d!26137 c!16668) b!98165))

(assert (= (and d!26137 (not c!16668)) b!98166))

(assert (= (and b!98166 c!16669) b!98167))

(assert (= (and b!98166 (not c!16669)) b!98168))

(declare-fun m!107161 () Bool)

(assert (=> b!98167 m!107161))

(assert (=> d!25943 d!26137))

(declare-fun b!98170 () Bool)

(declare-fun e!63985 () Option!154)

(declare-fun e!63986 () Option!154)

(assert (=> b!98170 (= e!63985 e!63986)))

(declare-fun c!16671 () Bool)

(assert (=> b!98170 (= c!16671 (and ((_ is Cons!1582) (t!5531 (toList!772 lt!48641))) (not (= (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641)))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun b!98171 () Bool)

(assert (=> b!98171 (= e!63986 (getValueByKey!148 (t!5531 (t!5531 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98169 () Bool)

(assert (=> b!98169 (= e!63985 (Some!153 (_2!1174 (h!2176 (t!5531 (toList!772 lt!48641))))))))

(declare-fun d!26139 () Bool)

(declare-fun c!16670 () Bool)

(assert (=> d!26139 (= c!16670 (and ((_ is Cons!1582) (t!5531 (toList!772 lt!48641))) (= (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641)))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26139 (= (getValueByKey!148 (t!5531 (toList!772 lt!48641)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!63985)))

(declare-fun b!98172 () Bool)

(assert (=> b!98172 (= e!63986 None!152)))

(assert (= (and d!26139 c!16670) b!98169))

(assert (= (and d!26139 (not c!16670)) b!98170))

(assert (= (and b!98170 c!16671) b!98171))

(assert (= (and b!98170 (not c!16671)) b!98172))

(assert (=> b!98171 m!106105))

(declare-fun m!107163 () Bool)

(assert (=> b!98171 m!107163))

(assert (=> b!97818 d!26139))

(assert (=> bm!9985 d!25921))

(declare-fun d!26141 () Bool)

(declare-fun e!63987 () Bool)

(assert (=> d!26141 e!63987))

(declare-fun res!49382 () Bool)

(assert (=> d!26141 (=> res!49382 e!63987)))

(declare-fun lt!49241 () Bool)

(assert (=> d!26141 (= res!49382 (not lt!49241))))

(declare-fun lt!49242 () Bool)

(assert (=> d!26141 (= lt!49241 lt!49242)))

(declare-fun lt!49240 () Unit!2934)

(declare-fun e!63988 () Unit!2934)

(assert (=> d!26141 (= lt!49240 e!63988)))

(declare-fun c!16672 () Bool)

(assert (=> d!26141 (= c!16672 lt!49242)))

(assert (=> d!26141 (= lt!49242 (containsKey!152 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!26141 (= (contains!796 lt!48989 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49241)))

(declare-fun b!98173 () Bool)

(declare-fun lt!49243 () Unit!2934)

(assert (=> b!98173 (= e!63988 lt!49243)))

(assert (=> b!98173 (= lt!49243 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> b!98173 (isDefined!102 (getValueByKey!148 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98174 () Bool)

(declare-fun Unit!2968 () Unit!2934)

(assert (=> b!98174 (= e!63988 Unit!2968)))

(declare-fun b!98175 () Bool)

(assert (=> b!98175 (= e!63987 (isDefined!102 (getValueByKey!148 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26141 c!16672) b!98173))

(assert (= (and d!26141 (not c!16672)) b!98174))

(assert (= (and d!26141 (not res!49382)) b!98175))

(declare-fun m!107165 () Bool)

(assert (=> d!26141 m!107165))

(declare-fun m!107167 () Bool)

(assert (=> b!98173 m!107167))

(assert (=> b!98173 m!106665))

(assert (=> b!98173 m!106665))

(declare-fun m!107169 () Bool)

(assert (=> b!98173 m!107169))

(assert (=> b!98175 m!106665))

(assert (=> b!98175 m!106665))

(assert (=> b!98175 m!107169))

(assert (=> d!25955 d!26141))

(declare-fun b!98177 () Bool)

(declare-fun e!63989 () Option!154)

(declare-fun e!63990 () Option!154)

(assert (=> b!98177 (= e!63989 e!63990)))

(declare-fun c!16674 () Bool)

(assert (=> b!98177 (= c!16674 (and ((_ is Cons!1582) lt!48987) (not (= (_1!1174 (h!2176 lt!48987)) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98178 () Bool)

(assert (=> b!98178 (= e!63990 (getValueByKey!148 (t!5531 lt!48987) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98176 () Bool)

(assert (=> b!98176 (= e!63989 (Some!153 (_2!1174 (h!2176 lt!48987))))))

(declare-fun c!16673 () Bool)

(declare-fun d!26143 () Bool)

(assert (=> d!26143 (= c!16673 (and ((_ is Cons!1582) lt!48987) (= (_1!1174 (h!2176 lt!48987)) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26143 (= (getValueByKey!148 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!63989)))

(declare-fun b!98179 () Bool)

(assert (=> b!98179 (= e!63990 None!152)))

(assert (= (and d!26143 c!16673) b!98176))

(assert (= (and d!26143 (not c!16673)) b!98177))

(assert (= (and b!98177 c!16674) b!98178))

(assert (= (and b!98177 (not c!16674)) b!98179))

(declare-fun m!107171 () Bool)

(assert (=> b!98178 m!107171))

(assert (=> d!25955 d!26143))

(declare-fun d!26145 () Bool)

(assert (=> d!26145 (= (getValueByKey!148 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49244 () Unit!2934)

(assert (=> d!26145 (= lt!49244 (choose!604 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!63991 () Bool)

(assert (=> d!26145 e!63991))

(declare-fun res!49383 () Bool)

(assert (=> d!26145 (=> (not res!49383) (not e!63991))))

(assert (=> d!26145 (= res!49383 (isStrictlySorted!299 lt!48987))))

(assert (=> d!26145 (= (lemmaContainsTupThenGetReturnValue!67 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49244)))

(declare-fun b!98180 () Bool)

(declare-fun res!49384 () Bool)

(assert (=> b!98180 (=> (not res!49384) (not e!63991))))

(assert (=> b!98180 (= res!49384 (containsKey!152 lt!48987 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98181 () Bool)

(assert (=> b!98181 (= e!63991 (contains!798 lt!48987 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26145 res!49383) b!98180))

(assert (= (and b!98180 res!49384) b!98181))

(assert (=> d!26145 m!106659))

(declare-fun m!107173 () Bool)

(assert (=> d!26145 m!107173))

(declare-fun m!107175 () Bool)

(assert (=> d!26145 m!107175))

(declare-fun m!107177 () Bool)

(assert (=> b!98180 m!107177))

(declare-fun m!107179 () Bool)

(assert (=> b!98181 m!107179))

(assert (=> d!25955 d!26145))

(declare-fun bm!10010 () Bool)

(declare-fun call!10015 () List!1586)

(declare-fun call!10014 () List!1586)

(assert (=> bm!10010 (= call!10015 call!10014)))

(declare-fun b!98183 () Bool)

(declare-fun e!63992 () List!1586)

(assert (=> b!98183 (= e!63992 call!10015)))

(declare-fun c!16676 () Bool)

(declare-fun b!98184 () Bool)

(assert (=> b!98184 (= c!16676 (and ((_ is Cons!1582) (toList!772 lt!48749)) (bvsgt (_1!1174 (h!2176 (toList!772 lt!48749))) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!63996 () List!1586)

(assert (=> b!98184 (= e!63996 e!63992)))

(declare-fun bm!10011 () Bool)

(declare-fun call!10013 () List!1586)

(assert (=> bm!10011 (= call!10014 call!10013)))

(declare-fun e!63993 () List!1586)

(declare-fun bm!10012 () Bool)

(declare-fun c!16677 () Bool)

(assert (=> bm!10012 (= call!10013 ($colon$colon!77 e!63993 (ite c!16677 (h!2176 (toList!772 lt!48749)) (tuple2!2327 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun c!16678 () Bool)

(assert (=> bm!10012 (= c!16678 c!16677)))

(declare-fun b!98185 () Bool)

(assert (=> b!98185 (= e!63996 call!10014)))

(declare-fun b!98186 () Bool)

(declare-fun e!63994 () List!1586)

(assert (=> b!98186 (= e!63994 e!63996)))

(declare-fun c!16675 () Bool)

(assert (=> b!98186 (= c!16675 (and ((_ is Cons!1582) (toList!772 lt!48749)) (= (_1!1174 (h!2176 (toList!772 lt!48749))) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98187 () Bool)

(assert (=> b!98187 (= e!63994 call!10013)))

(declare-fun b!98188 () Bool)

(declare-fun res!49386 () Bool)

(declare-fun e!63995 () Bool)

(assert (=> b!98188 (=> (not res!49386) (not e!63995))))

(declare-fun lt!49245 () List!1586)

(assert (=> b!98188 (= res!49386 (containsKey!152 lt!49245 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98189 () Bool)

(assert (=> b!98189 (= e!63995 (contains!798 lt!49245 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun d!26147 () Bool)

(assert (=> d!26147 e!63995))

(declare-fun res!49385 () Bool)

(assert (=> d!26147 (=> (not res!49385) (not e!63995))))

(assert (=> d!26147 (= res!49385 (isStrictlySorted!299 lt!49245))))

(assert (=> d!26147 (= lt!49245 e!63994)))

(assert (=> d!26147 (= c!16677 (and ((_ is Cons!1582) (toList!772 lt!48749)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48749))) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26147 (isStrictlySorted!299 (toList!772 lt!48749))))

(assert (=> d!26147 (= (insertStrictlySorted!70 (toList!772 lt!48749) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49245)))

(declare-fun b!98182 () Bool)

(assert (=> b!98182 (= e!63993 (ite c!16675 (t!5531 (toList!772 lt!48749)) (ite c!16676 (Cons!1582 (h!2176 (toList!772 lt!48749)) (t!5531 (toList!772 lt!48749))) Nil!1583)))))

(declare-fun b!98190 () Bool)

(assert (=> b!98190 (= e!63992 call!10015)))

(declare-fun b!98191 () Bool)

(assert (=> b!98191 (= e!63993 (insertStrictlySorted!70 (t!5531 (toList!772 lt!48749)) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26147 c!16677) b!98187))

(assert (= (and d!26147 (not c!16677)) b!98186))

(assert (= (and b!98186 c!16675) b!98185))

(assert (= (and b!98186 (not c!16675)) b!98184))

(assert (= (and b!98184 c!16676) b!98183))

(assert (= (and b!98184 (not c!16676)) b!98190))

(assert (= (or b!98183 b!98190) bm!10010))

(assert (= (or b!98185 bm!10010) bm!10011))

(assert (= (or b!98187 bm!10011) bm!10012))

(assert (= (and bm!10012 c!16678) b!98191))

(assert (= (and bm!10012 (not c!16678)) b!98182))

(assert (= (and d!26147 res!49385) b!98188))

(assert (= (and b!98188 res!49386) b!98189))

(declare-fun m!107181 () Bool)

(assert (=> b!98188 m!107181))

(declare-fun m!107183 () Bool)

(assert (=> b!98189 m!107183))

(declare-fun m!107185 () Bool)

(assert (=> bm!10012 m!107185))

(declare-fun m!107187 () Bool)

(assert (=> d!26147 m!107187))

(declare-fun m!107189 () Bool)

(assert (=> d!26147 m!107189))

(declare-fun m!107191 () Bool)

(assert (=> b!98191 m!107191))

(assert (=> d!25955 d!26147))

(declare-fun d!26149 () Bool)

(assert (=> d!26149 (= (apply!92 (+!128 lt!48892 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) lt!48890) (apply!92 lt!48892 lt!48890))))

(declare-fun lt!49246 () Unit!2934)

(assert (=> d!26149 (= lt!49246 (choose!596 lt!48892 lt!48899 (zeroValue!2363 newMap!16) lt!48890))))

(declare-fun e!63997 () Bool)

(assert (=> d!26149 e!63997))

(declare-fun res!49387 () Bool)

(assert (=> d!26149 (=> (not res!49387) (not e!63997))))

(assert (=> d!26149 (= res!49387 (contains!796 lt!48892 lt!48890))))

(assert (=> d!26149 (= (addApplyDifferent!68 lt!48892 lt!48899 (zeroValue!2363 newMap!16) lt!48890) lt!49246)))

(declare-fun b!98192 () Bool)

(assert (=> b!98192 (= e!63997 (not (= lt!48890 lt!48899)))))

(assert (= (and d!26149 res!49387) b!98192))

(declare-fun m!107193 () Bool)

(assert (=> d!26149 m!107193))

(declare-fun m!107195 () Bool)

(assert (=> d!26149 m!107195))

(assert (=> d!26149 m!106455))

(assert (=> d!26149 m!106455))

(assert (=> d!26149 m!106457))

(assert (=> d!26149 m!106445))

(assert (=> b!97665 d!26149))

(declare-fun d!26151 () Bool)

(assert (=> d!26151 (= (apply!92 lt!48892 lt!48890) (get!1288 (getValueByKey!148 (toList!772 lt!48892) lt!48890)))))

(declare-fun bs!4036 () Bool)

(assert (= bs!4036 d!26151))

(declare-fun m!107197 () Bool)

(assert (=> bs!4036 m!107197))

(assert (=> bs!4036 m!107197))

(declare-fun m!107199 () Bool)

(assert (=> bs!4036 m!107199))

(assert (=> b!97665 d!26151))

(declare-fun b!98193 () Bool)

(declare-fun e!64002 () ListLongMap!1513)

(declare-fun e!64001 () ListLongMap!1513)

(assert (=> b!98193 (= e!64002 e!64001)))

(declare-fun c!16681 () Bool)

(assert (=> b!98193 (= c!16681 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98194 () Bool)

(declare-fun e!64000 () Bool)

(assert (=> b!98194 (= e!64000 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98194 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98195 () Bool)

(declare-fun e!64004 () Bool)

(declare-fun lt!49251 () ListLongMap!1513)

(assert (=> b!98195 (= e!64004 (isEmpty!360 lt!49251))))

(declare-fun b!98196 () Bool)

(assert (=> b!98196 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> b!98196 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (ite c!16508 (_values!2463 newMap!16) lt!48825))))))

(declare-fun e!63998 () Bool)

(assert (=> b!98196 (= e!63998 (= (apply!92 lt!49251 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98197 () Bool)

(assert (=> b!98197 (= e!64002 (ListLongMap!1514 Nil!1583))))

(declare-fun b!98198 () Bool)

(declare-fun res!49390 () Bool)

(declare-fun e!64003 () Bool)

(assert (=> b!98198 (=> (not res!49390) (not e!64003))))

(assert (=> b!98198 (= res!49390 (not (contains!796 lt!49251 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98199 () Bool)

(declare-fun e!63999 () Bool)

(assert (=> b!98199 (= e!64003 e!63999)))

(declare-fun c!16682 () Bool)

(assert (=> b!98199 (= c!16682 e!64000)))

(declare-fun res!49388 () Bool)

(assert (=> b!98199 (=> (not res!49388) (not e!64000))))

(assert (=> b!98199 (= res!49388 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun d!26153 () Bool)

(assert (=> d!26153 e!64003))

(declare-fun res!49391 () Bool)

(assert (=> d!26153 (=> (not res!49391) (not e!64003))))

(assert (=> d!26153 (= res!49391 (not (contains!796 lt!49251 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26153 (= lt!49251 e!64002)))

(declare-fun c!16680 () Bool)

(assert (=> d!26153 (= c!16680 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26153 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26153 (= (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49251)))

(declare-fun b!98200 () Bool)

(assert (=> b!98200 (= e!64004 (= lt!49251 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun b!98201 () Bool)

(declare-fun call!10016 () ListLongMap!1513)

(assert (=> b!98201 (= e!64001 call!10016)))

(declare-fun b!98202 () Bool)

(assert (=> b!98202 (= e!63999 e!64004)))

(declare-fun c!16679 () Bool)

(assert (=> b!98202 (= c!16679 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98203 () Bool)

(declare-fun lt!49249 () Unit!2934)

(declare-fun lt!49252 () Unit!2934)

(assert (=> b!98203 (= lt!49249 lt!49252)))

(declare-fun lt!49250 () V!3153)

(declare-fun lt!49248 () ListLongMap!1513)

(declare-fun lt!49253 () (_ BitVec 64))

(declare-fun lt!49247 () (_ BitVec 64))

(assert (=> b!98203 (not (contains!796 (+!128 lt!49248 (tuple2!2327 lt!49247 lt!49250)) lt!49253))))

(assert (=> b!98203 (= lt!49252 (addStillNotContains!41 lt!49248 lt!49247 lt!49250 lt!49253))))

(assert (=> b!98203 (= lt!49253 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98203 (= lt!49250 (get!1285 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98203 (= lt!49247 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98203 (= lt!49248 call!10016)))

(assert (=> b!98203 (= e!64001 (+!128 call!10016 (tuple2!2327 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (get!1285 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98204 () Bool)

(assert (=> b!98204 (= e!63999 e!63998)))

(assert (=> b!98204 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49389 () Bool)

(assert (=> b!98204 (= res!49389 (contains!796 lt!49251 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98204 (=> (not res!49389) (not e!63998))))

(declare-fun bm!10013 () Bool)

(assert (=> bm!10013 (= call!10016 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite c!16508 (_values!2463 newMap!16) lt!48825) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26153 c!16680) b!98197))

(assert (= (and d!26153 (not c!16680)) b!98193))

(assert (= (and b!98193 c!16681) b!98203))

(assert (= (and b!98193 (not c!16681)) b!98201))

(assert (= (or b!98203 b!98201) bm!10013))

(assert (= (and d!26153 res!49391) b!98198))

(assert (= (and b!98198 res!49390) b!98199))

(assert (= (and b!98199 res!49388) b!98194))

(assert (= (and b!98199 c!16682) b!98204))

(assert (= (and b!98199 (not c!16682)) b!98202))

(assert (= (and b!98204 res!49389) b!98196))

(assert (= (and b!98202 c!16679) b!98200))

(assert (= (and b!98202 (not c!16679)) b!98195))

(declare-fun b_lambda!4353 () Bool)

(assert (=> (not b_lambda!4353) (not b!98196)))

(assert (=> b!98196 t!5544))

(declare-fun b_and!6013 () Bool)

(assert (= b_and!6009 (and (=> t!5544 result!3271) b_and!6013)))

(assert (=> b!98196 t!5546))

(declare-fun b_and!6015 () Bool)

(assert (= b_and!6011 (and (=> t!5546 result!3273) b_and!6015)))

(declare-fun b_lambda!4355 () Bool)

(assert (=> (not b_lambda!4355) (not b!98203)))

(assert (=> b!98203 t!5544))

(declare-fun b_and!6017 () Bool)

(assert (= b_and!6013 (and (=> t!5544 result!3271) b_and!6017)))

(assert (=> b!98203 t!5546))

(declare-fun b_and!6019 () Bool)

(assert (= b_and!6015 (and (=> t!5546 result!3273) b_and!6019)))

(assert (=> b!98196 m!106375))

(assert (=> b!98196 m!106421))

(assert (=> b!98196 m!106477))

(assert (=> b!98196 m!106375))

(declare-fun m!107201 () Bool)

(assert (=> b!98196 m!107201))

(assert (=> b!98196 m!106477))

(assert (=> b!98196 m!106421))

(assert (=> b!98196 m!106479))

(declare-fun m!107203 () Bool)

(assert (=> bm!10013 m!107203))

(assert (=> b!98200 m!107203))

(declare-fun m!107205 () Bool)

(assert (=> b!98195 m!107205))

(assert (=> b!98194 m!106375))

(assert (=> b!98194 m!106375))

(assert (=> b!98194 m!106431))

(assert (=> b!98203 m!106375))

(assert (=> b!98203 m!106421))

(declare-fun m!107207 () Bool)

(assert (=> b!98203 m!107207))

(declare-fun m!107209 () Bool)

(assert (=> b!98203 m!107209))

(assert (=> b!98203 m!106477))

(declare-fun m!107211 () Bool)

(assert (=> b!98203 m!107211))

(assert (=> b!98203 m!107209))

(declare-fun m!107213 () Bool)

(assert (=> b!98203 m!107213))

(assert (=> b!98203 m!106477))

(assert (=> b!98203 m!106421))

(assert (=> b!98203 m!106479))

(declare-fun m!107215 () Bool)

(assert (=> d!26153 m!107215))

(assert (=> d!26153 m!106427))

(assert (=> b!98193 m!106375))

(assert (=> b!98193 m!106375))

(assert (=> b!98193 m!106431))

(declare-fun m!107217 () Bool)

(assert (=> b!98198 m!107217))

(assert (=> b!98204 m!106375))

(assert (=> b!98204 m!106375))

(declare-fun m!107219 () Bool)

(assert (=> b!98204 m!107219))

(assert (=> b!97665 d!26153))

(declare-fun d!26155 () Bool)

(assert (=> d!26155 (= (apply!92 (+!128 lt!48889 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) lt!48881) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48889 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))) lt!48881)))))

(declare-fun bs!4037 () Bool)

(assert (= bs!4037 d!26155))

(declare-fun m!107221 () Bool)

(assert (=> bs!4037 m!107221))

(assert (=> bs!4037 m!107221))

(declare-fun m!107223 () Bool)

(assert (=> bs!4037 m!107223))

(assert (=> b!97665 d!26155))

(declare-fun d!26157 () Bool)

(declare-fun e!64005 () Bool)

(assert (=> d!26157 e!64005))

(declare-fun res!49393 () Bool)

(assert (=> d!26157 (=> (not res!49393) (not e!64005))))

(declare-fun lt!49257 () ListLongMap!1513)

(assert (=> d!26157 (= res!49393 (contains!796 lt!49257 (_1!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))))))

(declare-fun lt!49255 () List!1586)

(assert (=> d!26157 (= lt!49257 (ListLongMap!1514 lt!49255))))

(declare-fun lt!49256 () Unit!2934)

(declare-fun lt!49254 () Unit!2934)

(assert (=> d!26157 (= lt!49256 lt!49254)))

(assert (=> d!26157 (= (getValueByKey!148 lt!49255 (_1!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))))))

(assert (=> d!26157 (= lt!49254 (lemmaContainsTupThenGetReturnValue!67 lt!49255 (_1!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))))))

(assert (=> d!26157 (= lt!49255 (insertStrictlySorted!70 (toList!772 lt!48889) (_1!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))))))

(assert (=> d!26157 (= (+!128 lt!48889 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) lt!49257)))

(declare-fun b!98205 () Bool)

(declare-fun res!49392 () Bool)

(assert (=> b!98205 (=> (not res!49392) (not e!64005))))

(assert (=> b!98205 (= res!49392 (= (getValueByKey!148 (toList!772 lt!49257) (_1!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))))))))

(declare-fun b!98206 () Bool)

(assert (=> b!98206 (= e!64005 (contains!798 (toList!772 lt!49257) (tuple2!2327 lt!48880 (minValue!2363 newMap!16))))))

(assert (= (and d!26157 res!49393) b!98205))

(assert (= (and b!98205 res!49392) b!98206))

(declare-fun m!107225 () Bool)

(assert (=> d!26157 m!107225))

(declare-fun m!107227 () Bool)

(assert (=> d!26157 m!107227))

(declare-fun m!107229 () Bool)

(assert (=> d!26157 m!107229))

(declare-fun m!107231 () Bool)

(assert (=> d!26157 m!107231))

(declare-fun m!107233 () Bool)

(assert (=> b!98205 m!107233))

(declare-fun m!107235 () Bool)

(assert (=> b!98206 m!107235))

(assert (=> b!97665 d!26157))

(declare-fun d!26159 () Bool)

(assert (=> d!26159 (= (apply!92 lt!48895 lt!48891) (get!1288 (getValueByKey!148 (toList!772 lt!48895) lt!48891)))))

(declare-fun bs!4038 () Bool)

(assert (= bs!4038 d!26159))

(declare-fun m!107237 () Bool)

(assert (=> bs!4038 m!107237))

(assert (=> bs!4038 m!107237))

(declare-fun m!107239 () Bool)

(assert (=> bs!4038 m!107239))

(assert (=> b!97665 d!26159))

(declare-fun d!26161 () Bool)

(assert (=> d!26161 (= (apply!92 (+!128 lt!48895 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) lt!48891) (apply!92 lt!48895 lt!48891))))

(declare-fun lt!49258 () Unit!2934)

(assert (=> d!26161 (= lt!49258 (choose!596 lt!48895 lt!48886 (minValue!2363 newMap!16) lt!48891))))

(declare-fun e!64006 () Bool)

(assert (=> d!26161 e!64006))

(declare-fun res!49394 () Bool)

(assert (=> d!26161 (=> (not res!49394) (not e!64006))))

(assert (=> d!26161 (= res!49394 (contains!796 lt!48895 lt!48891))))

(assert (=> d!26161 (= (addApplyDifferent!68 lt!48895 lt!48886 (minValue!2363 newMap!16) lt!48891) lt!49258)))

(declare-fun b!98207 () Bool)

(assert (=> b!98207 (= e!64006 (not (= lt!48891 lt!48886)))))

(assert (= (and d!26161 res!49394) b!98207))

(declare-fun m!107241 () Bool)

(assert (=> d!26161 m!107241))

(declare-fun m!107243 () Bool)

(assert (=> d!26161 m!107243))

(assert (=> d!26161 m!106441))

(assert (=> d!26161 m!106441))

(assert (=> d!26161 m!106443))

(assert (=> d!26161 m!106447))

(assert (=> b!97665 d!26161))

(declare-fun d!26163 () Bool)

(assert (=> d!26163 (= (apply!92 (+!128 lt!48895 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) lt!48891) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48895 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))) lt!48891)))))

(declare-fun bs!4039 () Bool)

(assert (= bs!4039 d!26163))

(declare-fun m!107245 () Bool)

(assert (=> bs!4039 m!107245))

(assert (=> bs!4039 m!107245))

(declare-fun m!107247 () Bool)

(assert (=> bs!4039 m!107247))

(assert (=> b!97665 d!26163))

(declare-fun d!26165 () Bool)

(declare-fun e!64007 () Bool)

(assert (=> d!26165 e!64007))

(declare-fun res!49396 () Bool)

(assert (=> d!26165 (=> (not res!49396) (not e!64007))))

(declare-fun lt!49262 () ListLongMap!1513)

(assert (=> d!26165 (= res!49396 (contains!796 lt!49262 (_1!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49260 () List!1586)

(assert (=> d!26165 (= lt!49262 (ListLongMap!1514 lt!49260))))

(declare-fun lt!49261 () Unit!2934)

(declare-fun lt!49259 () Unit!2934)

(assert (=> d!26165 (= lt!49261 lt!49259)))

(assert (=> d!26165 (= (getValueByKey!148 lt!49260 (_1!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26165 (= lt!49259 (lemmaContainsTupThenGetReturnValue!67 lt!49260 (_1!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26165 (= lt!49260 (insertStrictlySorted!70 (toList!772 lt!48882) (_1!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26165 (= (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) lt!49262)))

(declare-fun b!98208 () Bool)

(declare-fun res!49395 () Bool)

(assert (=> b!98208 (=> (not res!49395) (not e!64007))))

(assert (=> b!98208 (= res!49395 (= (getValueByKey!148 (toList!772 lt!49262) (_1!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98209 () Bool)

(assert (=> b!98209 (= e!64007 (contains!798 (toList!772 lt!49262) (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26165 res!49396) b!98208))

(assert (= (and b!98208 res!49395) b!98209))

(declare-fun m!107249 () Bool)

(assert (=> d!26165 m!107249))

(declare-fun m!107251 () Bool)

(assert (=> d!26165 m!107251))

(declare-fun m!107253 () Bool)

(assert (=> d!26165 m!107253))

(declare-fun m!107255 () Bool)

(assert (=> d!26165 m!107255))

(declare-fun m!107257 () Bool)

(assert (=> b!98208 m!107257))

(declare-fun m!107259 () Bool)

(assert (=> b!98209 m!107259))

(assert (=> b!97665 d!26165))

(declare-fun d!26167 () Bool)

(assert (=> d!26167 (= (apply!92 lt!48889 lt!48881) (get!1288 (getValueByKey!148 (toList!772 lt!48889) lt!48881)))))

(declare-fun bs!4040 () Bool)

(assert (= bs!4040 d!26167))

(declare-fun m!107261 () Bool)

(assert (=> bs!4040 m!107261))

(assert (=> bs!4040 m!107261))

(declare-fun m!107263 () Bool)

(assert (=> bs!4040 m!107263))

(assert (=> b!97665 d!26167))

(declare-fun d!26169 () Bool)

(declare-fun e!64008 () Bool)

(assert (=> d!26169 e!64008))

(declare-fun res!49398 () Bool)

(assert (=> d!26169 (=> (not res!49398) (not e!64008))))

(declare-fun lt!49266 () ListLongMap!1513)

(assert (=> d!26169 (= res!49398 (contains!796 lt!49266 (_1!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))))))

(declare-fun lt!49264 () List!1586)

(assert (=> d!26169 (= lt!49266 (ListLongMap!1514 lt!49264))))

(declare-fun lt!49265 () Unit!2934)

(declare-fun lt!49263 () Unit!2934)

(assert (=> d!26169 (= lt!49265 lt!49263)))

(assert (=> d!26169 (= (getValueByKey!148 lt!49264 (_1!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))))))

(assert (=> d!26169 (= lt!49263 (lemmaContainsTupThenGetReturnValue!67 lt!49264 (_1!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))))))

(assert (=> d!26169 (= lt!49264 (insertStrictlySorted!70 (toList!772 lt!48895) (_1!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))))))

(assert (=> d!26169 (= (+!128 lt!48895 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))) lt!49266)))

(declare-fun b!98210 () Bool)

(declare-fun res!49397 () Bool)

(assert (=> b!98210 (=> (not res!49397) (not e!64008))))

(assert (=> b!98210 (= res!49397 (= (getValueByKey!148 (toList!772 lt!49266) (_1!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48886 (minValue!2363 newMap!16))))))))

(declare-fun b!98211 () Bool)

(assert (=> b!98211 (= e!64008 (contains!798 (toList!772 lt!49266) (tuple2!2327 lt!48886 (minValue!2363 newMap!16))))))

(assert (= (and d!26169 res!49398) b!98210))

(assert (= (and b!98210 res!49397) b!98211))

(declare-fun m!107265 () Bool)

(assert (=> d!26169 m!107265))

(declare-fun m!107267 () Bool)

(assert (=> d!26169 m!107267))

(declare-fun m!107269 () Bool)

(assert (=> d!26169 m!107269))

(declare-fun m!107271 () Bool)

(assert (=> d!26169 m!107271))

(declare-fun m!107273 () Bool)

(assert (=> b!98210 m!107273))

(declare-fun m!107275 () Bool)

(assert (=> b!98211 m!107275))

(assert (=> b!97665 d!26169))

(declare-fun d!26171 () Bool)

(declare-fun e!64009 () Bool)

(assert (=> d!26171 e!64009))

(declare-fun res!49400 () Bool)

(assert (=> d!26171 (=> (not res!49400) (not e!64009))))

(declare-fun lt!49270 () ListLongMap!1513)

(assert (=> d!26171 (= res!49400 (contains!796 lt!49270 (_1!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49268 () List!1586)

(assert (=> d!26171 (= lt!49270 (ListLongMap!1514 lt!49268))))

(declare-fun lt!49269 () Unit!2934)

(declare-fun lt!49267 () Unit!2934)

(assert (=> d!26171 (= lt!49269 lt!49267)))

(assert (=> d!26171 (= (getValueByKey!148 lt!49268 (_1!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26171 (= lt!49267 (lemmaContainsTupThenGetReturnValue!67 lt!49268 (_1!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26171 (= lt!49268 (insertStrictlySorted!70 (toList!772 lt!48892) (_1!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26171 (= (+!128 lt!48892 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) lt!49270)))

(declare-fun b!98212 () Bool)

(declare-fun res!49399 () Bool)

(assert (=> b!98212 (=> (not res!49399) (not e!64009))))

(assert (=> b!98212 (= res!49399 (= (getValueByKey!148 (toList!772 lt!49270) (_1!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98213 () Bool)

(assert (=> b!98213 (= e!64009 (contains!798 (toList!772 lt!49270) (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26171 res!49400) b!98212))

(assert (= (and b!98212 res!49399) b!98213))

(declare-fun m!107277 () Bool)

(assert (=> d!26171 m!107277))

(declare-fun m!107279 () Bool)

(assert (=> d!26171 m!107279))

(declare-fun m!107281 () Bool)

(assert (=> d!26171 m!107281))

(declare-fun m!107283 () Bool)

(assert (=> d!26171 m!107283))

(declare-fun m!107285 () Bool)

(assert (=> b!98212 m!107285))

(declare-fun m!107287 () Bool)

(assert (=> b!98213 m!107287))

(assert (=> b!97665 d!26171))

(declare-fun d!26173 () Bool)

(assert (=> d!26173 (contains!796 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) lt!48879)))

(declare-fun lt!49271 () Unit!2934)

(assert (=> d!26173 (= lt!49271 (choose!597 lt!48882 lt!48897 (zeroValue!2363 newMap!16) lt!48879))))

(assert (=> d!26173 (contains!796 lt!48882 lt!48879)))

(assert (=> d!26173 (= (addStillContains!68 lt!48882 lt!48897 (zeroValue!2363 newMap!16) lt!48879) lt!49271)))

(declare-fun bs!4041 () Bool)

(assert (= bs!4041 d!26173))

(assert (=> bs!4041 m!106439))

(assert (=> bs!4041 m!106439))

(assert (=> bs!4041 m!106453))

(declare-fun m!107289 () Bool)

(assert (=> bs!4041 m!107289))

(declare-fun m!107291 () Bool)

(assert (=> bs!4041 m!107291))

(assert (=> b!97665 d!26173))

(declare-fun d!26175 () Bool)

(assert (=> d!26175 (= (apply!92 (+!128 lt!48889 (tuple2!2327 lt!48880 (minValue!2363 newMap!16))) lt!48881) (apply!92 lt!48889 lt!48881))))

(declare-fun lt!49272 () Unit!2934)

(assert (=> d!26175 (= lt!49272 (choose!596 lt!48889 lt!48880 (minValue!2363 newMap!16) lt!48881))))

(declare-fun e!64010 () Bool)

(assert (=> d!26175 e!64010))

(declare-fun res!49401 () Bool)

(assert (=> d!26175 (=> (not res!49401) (not e!64010))))

(assert (=> d!26175 (= res!49401 (contains!796 lt!48889 lt!48881))))

(assert (=> d!26175 (= (addApplyDifferent!68 lt!48889 lt!48880 (minValue!2363 newMap!16) lt!48881) lt!49272)))

(declare-fun b!98214 () Bool)

(assert (=> b!98214 (= e!64010 (not (= lt!48881 lt!48880)))))

(assert (= (and d!26175 res!49401) b!98214))

(declare-fun m!107293 () Bool)

(assert (=> d!26175 m!107293))

(declare-fun m!107295 () Bool)

(assert (=> d!26175 m!107295))

(assert (=> d!26175 m!106449))

(assert (=> d!26175 m!106449))

(assert (=> d!26175 m!106451))

(assert (=> d!26175 m!106465))

(assert (=> b!97665 d!26175))

(declare-fun d!26177 () Bool)

(declare-fun e!64011 () Bool)

(assert (=> d!26177 e!64011))

(declare-fun res!49402 () Bool)

(assert (=> d!26177 (=> res!49402 e!64011)))

(declare-fun lt!49274 () Bool)

(assert (=> d!26177 (= res!49402 (not lt!49274))))

(declare-fun lt!49275 () Bool)

(assert (=> d!26177 (= lt!49274 lt!49275)))

(declare-fun lt!49273 () Unit!2934)

(declare-fun e!64012 () Unit!2934)

(assert (=> d!26177 (= lt!49273 e!64012)))

(declare-fun c!16683 () Bool)

(assert (=> d!26177 (= c!16683 lt!49275)))

(assert (=> d!26177 (= lt!49275 (containsKey!152 (toList!772 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) lt!48879))))

(assert (=> d!26177 (= (contains!796 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16))) lt!48879) lt!49274)))

(declare-fun b!98215 () Bool)

(declare-fun lt!49276 () Unit!2934)

(assert (=> b!98215 (= e!64012 lt!49276)))

(assert (=> b!98215 (= lt!49276 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) lt!48879))))

(assert (=> b!98215 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) lt!48879))))

(declare-fun b!98216 () Bool)

(declare-fun Unit!2969 () Unit!2934)

(assert (=> b!98216 (= e!64012 Unit!2969)))

(declare-fun b!98217 () Bool)

(assert (=> b!98217 (= e!64011 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48882 (tuple2!2327 lt!48897 (zeroValue!2363 newMap!16)))) lt!48879)))))

(assert (= (and d!26177 c!16683) b!98215))

(assert (= (and d!26177 (not c!16683)) b!98216))

(assert (= (and d!26177 (not res!49402)) b!98217))

(declare-fun m!107297 () Bool)

(assert (=> d!26177 m!107297))

(declare-fun m!107299 () Bool)

(assert (=> b!98215 m!107299))

(declare-fun m!107301 () Bool)

(assert (=> b!98215 m!107301))

(assert (=> b!98215 m!107301))

(declare-fun m!107303 () Bool)

(assert (=> b!98215 m!107303))

(assert (=> b!98217 m!107301))

(assert (=> b!98217 m!107301))

(assert (=> b!98217 m!107303))

(assert (=> b!97665 d!26177))

(declare-fun d!26179 () Bool)

(assert (=> d!26179 (= (apply!92 (+!128 lt!48892 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16))) lt!48890) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48892 (tuple2!2327 lt!48899 (zeroValue!2363 newMap!16)))) lt!48890)))))

(declare-fun bs!4042 () Bool)

(assert (= bs!4042 d!26179))

(declare-fun m!107305 () Bool)

(assert (=> bs!4042 m!107305))

(assert (=> bs!4042 m!107305))

(declare-fun m!107307 () Bool)

(assert (=> bs!4042 m!107307))

(assert (=> b!97665 d!26179))

(assert (=> b!97780 d!25977))

(declare-fun b!98218 () Bool)

(declare-fun res!49406 () Bool)

(declare-fun e!64013 () Bool)

(assert (=> b!98218 (=> (not res!49406) (not e!64013))))

(assert (=> b!98218 (= res!49406 (and (= (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001)) (= (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992))))) (bvsge (_size!474 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!474 (v!2791 (underlying!331 thiss!992))) (bvadd (mask!6576 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!98219 () Bool)

(declare-fun res!49405 () Bool)

(assert (=> b!98219 (=> (not res!49405) (not e!64013))))

(assert (=> b!98219 (= res!49405 (bvsge (size!2259 (v!2791 (underlying!331 thiss!992))) (_size!474 (v!2791 (underlying!331 thiss!992)))))))

(declare-fun b!98221 () Bool)

(assert (=> b!98221 (= e!64013 (and (bvsge (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!474 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!98220 () Bool)

(declare-fun res!49404 () Bool)

(assert (=> b!98220 (=> (not res!49404) (not e!64013))))

(assert (=> b!98220 (= res!49404 (= (size!2259 (v!2791 (underlying!331 thiss!992))) (bvadd (_size!474 (v!2791 (underlying!331 thiss!992))) (bvsdiv (bvadd (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!26181 () Bool)

(declare-fun res!49403 () Bool)

(assert (=> d!26181 (=> (not res!49403) (not e!64013))))

(assert (=> d!26181 (= res!49403 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992)))))))

(assert (=> d!26181 (= (simpleValid!68 (v!2791 (underlying!331 thiss!992))) e!64013)))

(assert (= (and d!26181 res!49403) b!98218))

(assert (= (and b!98218 res!49406) b!98219))

(assert (= (and b!98219 res!49405) b!98220))

(assert (= (and b!98220 res!49404) b!98221))

(declare-fun m!107309 () Bool)

(assert (=> b!98219 m!107309))

(assert (=> b!98220 m!107309))

(assert (=> d!26181 m!106083))

(assert (=> d!25989 d!26181))

(declare-fun d!26183 () Bool)

(assert (=> d!26183 (= (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48735)) (v!2797 (getValueByKey!148 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48735)))))

(assert (=> d!25949 d!26183))

(declare-fun b!98223 () Bool)

(declare-fun e!64014 () Option!154)

(declare-fun e!64015 () Option!154)

(assert (=> b!98223 (= e!64014 e!64015)))

(declare-fun c!16685 () Bool)

(assert (=> b!98223 (= c!16685 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (not (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48735))))))

(declare-fun b!98224 () Bool)

(assert (=> b!98224 (= e!64015 (getValueByKey!148 (t!5531 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!48735))))

(declare-fun b!98222 () Bool)

(assert (=> b!98222 (= e!64014 (Some!153 (_2!1174 (h!2176 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun d!26185 () Bool)

(declare-fun c!16684 () Bool)

(assert (=> d!26185 (= c!16684 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48735)))))

(assert (=> d!26185 (= (getValueByKey!148 (toList!772 (+!128 lt!48743 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48735) e!64014)))

(declare-fun b!98225 () Bool)

(assert (=> b!98225 (= e!64015 None!152)))

(assert (= (and d!26185 c!16684) b!98222))

(assert (= (and d!26185 (not c!16684)) b!98223))

(assert (= (and b!98223 c!16685) b!98224))

(assert (= (and b!98223 (not c!16685)) b!98225))

(declare-fun m!107311 () Bool)

(assert (=> b!98224 m!107311))

(assert (=> d!25949 d!26185))

(declare-fun d!26187 () Bool)

(declare-fun res!49407 () Bool)

(declare-fun e!64016 () Bool)

(assert (=> d!26187 (=> res!49407 e!64016)))

(assert (=> d!26187 (= res!49407 (and ((_ is Cons!1582) (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (= (_1!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48733)))))

(assert (=> d!26187 (= (containsKey!152 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!48733) e!64016)))

(declare-fun b!98226 () Bool)

(declare-fun e!64017 () Bool)

(assert (=> b!98226 (= e!64016 e!64017)))

(declare-fun res!49408 () Bool)

(assert (=> b!98226 (=> (not res!49408) (not e!64017))))

(assert (=> b!98226 (= res!49408 (and (or (not ((_ is Cons!1582) (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) (bvsle (_1!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48733)) ((_ is Cons!1582) (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) (bvslt (_1!1174 (h!2176 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))) lt!48733)))))

(declare-fun b!98227 () Bool)

(assert (=> b!98227 (= e!64017 (containsKey!152 (t!5531 (toList!772 (+!128 lt!48736 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!48733))))

(assert (= (and d!26187 (not res!49407)) b!98226))

(assert (= (and b!98226 res!49408) b!98227))

(declare-fun m!107313 () Bool)

(assert (=> b!98227 m!107313))

(assert (=> d!25947 d!26187))

(declare-fun d!26189 () Bool)

(assert (=> d!26189 (= (map!1243 (_2!1175 lt!49116)) (getCurrentListMap!453 (_keys!4169 (_2!1175 lt!49116)) (_values!2463 (_2!1175 lt!49116)) (mask!6576 (_2!1175 lt!49116)) (extraKeys!2301 (_2!1175 lt!49116)) (zeroValue!2363 (_2!1175 lt!49116)) (minValue!2363 (_2!1175 lt!49116)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!49116))))))

(declare-fun bs!4043 () Bool)

(assert (= bs!4043 d!26189))

(declare-fun m!107315 () Bool)

(assert (=> bs!4043 m!107315))

(assert (=> b!97916 d!26189))

(declare-fun d!26191 () Bool)

(declare-fun e!64018 () Bool)

(assert (=> d!26191 e!64018))

(declare-fun res!49410 () Bool)

(assert (=> d!26191 (=> (not res!49410) (not e!64018))))

(declare-fun lt!49280 () ListLongMap!1513)

(assert (=> d!26191 (= res!49410 (contains!796 lt!49280 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49278 () List!1586)

(assert (=> d!26191 (= lt!49280 (ListLongMap!1514 lt!49278))))

(declare-fun lt!49279 () Unit!2934)

(declare-fun lt!49277 () Unit!2934)

(assert (=> d!26191 (= lt!49279 lt!49277)))

(assert (=> d!26191 (= (getValueByKey!148 lt!49278 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26191 (= lt!49277 (lemmaContainsTupThenGetReturnValue!67 lt!49278 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26191 (= lt!49278 (insertStrictlySorted!70 (toList!772 (map!1243 newMap!16)) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26191 (= (+!128 (map!1243 newMap!16) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49280)))

(declare-fun b!98228 () Bool)

(declare-fun res!49409 () Bool)

(assert (=> b!98228 (=> (not res!49409) (not e!64018))))

(assert (=> b!98228 (= res!49409 (= (getValueByKey!148 (toList!772 lt!49280) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98229 () Bool)

(assert (=> b!98229 (= e!64018 (contains!798 (toList!772 lt!49280) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26191 res!49410) b!98228))

(assert (= (and b!98228 res!49409) b!98229))

(declare-fun m!107317 () Bool)

(assert (=> d!26191 m!107317))

(declare-fun m!107319 () Bool)

(assert (=> d!26191 m!107319))

(declare-fun m!107321 () Bool)

(assert (=> d!26191 m!107321))

(declare-fun m!107323 () Bool)

(assert (=> d!26191 m!107323))

(declare-fun m!107325 () Bool)

(assert (=> b!98228 m!107325))

(declare-fun m!107327 () Bool)

(assert (=> b!98229 m!107327))

(assert (=> b!97916 d!26191))

(assert (=> b!97916 d!25883))

(declare-fun d!26193 () Bool)

(assert (=> d!26193 (arrayContainsKey!0 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000)))

(declare-fun lt!49283 () Unit!2934)

(declare-fun choose!13 (array!4217 (_ BitVec 64) (_ BitVec 32)) Unit!2934)

(assert (=> d!26193 (= lt!49283 (choose!13 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000))))

(assert (=> d!26193 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26193 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000) lt!49283)))

(declare-fun bs!4044 () Bool)

(assert (= bs!4044 d!26193))

(assert (=> bs!4044 m!106743))

(declare-fun m!107329 () Bool)

(assert (=> bs!4044 m!107329))

(assert (=> b!97834 d!26193))

(declare-fun d!26195 () Bool)

(declare-fun res!49411 () Bool)

(declare-fun e!64019 () Bool)

(assert (=> d!26195 (=> res!49411 e!64019)))

(assert (=> d!26195 (= res!49411 (= (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) lt!49018))))

(assert (=> d!26195 (= (arrayContainsKey!0 (_keys!4169 newMap!16) lt!49018 #b00000000000000000000000000000000) e!64019)))

(declare-fun b!98230 () Bool)

(declare-fun e!64020 () Bool)

(assert (=> b!98230 (= e!64019 e!64020)))

(declare-fun res!49412 () Bool)

(assert (=> b!98230 (=> (not res!49412) (not e!64020))))

(assert (=> b!98230 (= res!49412 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98231 () Bool)

(assert (=> b!98231 (= e!64020 (arrayContainsKey!0 (_keys!4169 newMap!16) lt!49018 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26195 (not res!49411)) b!98230))

(assert (= (and b!98230 res!49412) b!98231))

(assert (=> d!26195 m!106375))

(declare-fun m!107331 () Bool)

(assert (=> b!98231 m!107331))

(assert (=> b!97834 d!26195))

(declare-fun b!98232 () Bool)

(declare-fun e!64022 () SeekEntryResult!256)

(declare-fun lt!49286 () SeekEntryResult!256)

(assert (=> b!98232 (= e!64022 (seekKeyOrZeroReturnVacant!0 (x!12961 lt!49286) (index!3169 lt!49286) (index!3169 lt!49286) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun d!26197 () Bool)

(declare-fun lt!49284 () SeekEntryResult!256)

(assert (=> d!26197 (and (or ((_ is Undefined!256) lt!49284) (not ((_ is Found!256) lt!49284)) (and (bvsge (index!3168 lt!49284) #b00000000000000000000000000000000) (bvslt (index!3168 lt!49284) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!49284) ((_ is Found!256) lt!49284) (not ((_ is MissingZero!256) lt!49284)) (and (bvsge (index!3167 lt!49284) #b00000000000000000000000000000000) (bvslt (index!3167 lt!49284) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!49284) ((_ is Found!256) lt!49284) ((_ is MissingZero!256) lt!49284) (not ((_ is MissingVacant!256) lt!49284)) (and (bvsge (index!3170 lt!49284) #b00000000000000000000000000000000) (bvslt (index!3170 lt!49284) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!49284) (ite ((_ is Found!256) lt!49284) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!49284)) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!256) lt!49284) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!49284)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!256) lt!49284) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!49284)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64021 () SeekEntryResult!256)

(assert (=> d!26197 (= lt!49284 e!64021)))

(declare-fun c!16687 () Bool)

(assert (=> d!26197 (= c!16687 (and ((_ is Intermediate!256) lt!49286) (undefined!1068 lt!49286)))))

(assert (=> d!26197 (= lt!49286 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (mask!6576 newMap!16)) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (=> d!26197 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26197 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (_keys!4169 newMap!16) (mask!6576 newMap!16)) lt!49284)))

(declare-fun b!98233 () Bool)

(declare-fun c!16686 () Bool)

(declare-fun lt!49285 () (_ BitVec 64))

(assert (=> b!98233 (= c!16686 (= lt!49285 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64023 () SeekEntryResult!256)

(assert (=> b!98233 (= e!64023 e!64022)))

(declare-fun b!98234 () Bool)

(assert (=> b!98234 (= e!64023 (Found!256 (index!3169 lt!49286)))))

(declare-fun b!98235 () Bool)

(assert (=> b!98235 (= e!64021 e!64023)))

(assert (=> b!98235 (= lt!49285 (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!49286)))))

(declare-fun c!16688 () Bool)

(assert (=> b!98235 (= c!16688 (= lt!49285 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98236 () Bool)

(assert (=> b!98236 (= e!64021 Undefined!256)))

(declare-fun b!98237 () Bool)

(assert (=> b!98237 (= e!64022 (MissingZero!256 (index!3169 lt!49286)))))

(assert (= (and d!26197 c!16687) b!98236))

(assert (= (and d!26197 (not c!16687)) b!98235))

(assert (= (and b!98235 c!16688) b!98234))

(assert (= (and b!98235 (not c!16688)) b!98233))

(assert (= (and b!98233 c!16686) b!98237))

(assert (= (and b!98233 (not c!16686)) b!98232))

(assert (=> b!98232 m!106375))

(declare-fun m!107333 () Bool)

(assert (=> b!98232 m!107333))

(assert (=> d!26197 m!106427))

(assert (=> d!26197 m!106375))

(declare-fun m!107335 () Bool)

(assert (=> d!26197 m!107335))

(declare-fun m!107337 () Bool)

(assert (=> d!26197 m!107337))

(assert (=> d!26197 m!107335))

(assert (=> d!26197 m!106375))

(declare-fun m!107339 () Bool)

(assert (=> d!26197 m!107339))

(declare-fun m!107341 () Bool)

(assert (=> d!26197 m!107341))

(declare-fun m!107343 () Bool)

(assert (=> d!26197 m!107343))

(declare-fun m!107345 () Bool)

(assert (=> b!98235 m!107345))

(assert (=> b!97834 d!26197))

(declare-fun d!26199 () Bool)

(declare-fun e!64024 () Bool)

(assert (=> d!26199 e!64024))

(declare-fun res!49414 () Bool)

(assert (=> d!26199 (=> (not res!49414) (not e!64024))))

(declare-fun lt!49290 () ListLongMap!1513)

(assert (=> d!26199 (= res!49414 (contains!796 lt!49290 (_1!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun lt!49288 () List!1586)

(assert (=> d!26199 (= lt!49290 (ListLongMap!1514 lt!49288))))

(declare-fun lt!49289 () Unit!2934)

(declare-fun lt!49287 () Unit!2934)

(assert (=> d!26199 (= lt!49289 lt!49287)))

(assert (=> d!26199 (= (getValueByKey!148 lt!49288 (_1!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= lt!49287 (lemmaContainsTupThenGetReturnValue!67 lt!49288 (_1!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= lt!49288 (insertStrictlySorted!70 (toList!772 (ite c!16527 call!9952 (ite c!16526 call!9953 call!9958))) (_1!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= (+!128 (ite c!16527 call!9952 (ite c!16526 call!9953 call!9958)) (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) lt!49290)))

(declare-fun b!98238 () Bool)

(declare-fun res!49413 () Bool)

(assert (=> b!98238 (=> (not res!49413) (not e!64024))))

(assert (=> b!98238 (= res!49413 (= (getValueByKey!148 (toList!772 lt!49290) (_1!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))))

(declare-fun b!98239 () Bool)

(assert (=> b!98239 (= e!64024 (contains!798 (toList!772 lt!49290) (ite (or c!16527 c!16526) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (= (and d!26199 res!49414) b!98238))

(assert (= (and b!98238 res!49413) b!98239))

(declare-fun m!107347 () Bool)

(assert (=> d!26199 m!107347))

(declare-fun m!107349 () Bool)

(assert (=> d!26199 m!107349))

(declare-fun m!107351 () Bool)

(assert (=> d!26199 m!107351))

(declare-fun m!107353 () Bool)

(assert (=> d!26199 m!107353))

(declare-fun m!107355 () Bool)

(assert (=> b!98238 m!107355))

(declare-fun m!107357 () Bool)

(assert (=> b!98239 m!107357))

(assert (=> bm!9952 d!26199))

(declare-fun b!98241 () Bool)

(declare-fun e!64025 () Option!154)

(declare-fun e!64026 () Option!154)

(assert (=> b!98241 (= e!64025 e!64026)))

(declare-fun c!16690 () Bool)

(assert (=> b!98241 (= c!16690 (and ((_ is Cons!1582) (toList!772 lt!49023)) (not (= (_1!1174 (h!2176 (toList!772 lt!49023))) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!98242 () Bool)

(assert (=> b!98242 (= e!64026 (getValueByKey!148 (t!5531 (toList!772 lt!49023)) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98240 () Bool)

(assert (=> b!98240 (= e!64025 (Some!153 (_2!1174 (h!2176 (toList!772 lt!49023)))))))

(declare-fun c!16689 () Bool)

(declare-fun d!26201 () Bool)

(assert (=> d!26201 (= c!16689 (and ((_ is Cons!1582) (toList!772 lt!49023)) (= (_1!1174 (h!2176 (toList!772 lt!49023))) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26201 (= (getValueByKey!148 (toList!772 lt!49023) (_1!1174 (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64025)))

(declare-fun b!98243 () Bool)

(assert (=> b!98243 (= e!64026 None!152)))

(assert (= (and d!26201 c!16689) b!98240))

(assert (= (and d!26201 (not c!16689)) b!98241))

(assert (= (and b!98241 c!16690) b!98242))

(assert (= (and b!98241 (not c!16690)) b!98243))

(declare-fun m!107359 () Bool)

(assert (=> b!98242 m!107359))

(assert (=> b!97837 d!26201))

(declare-fun d!26203 () Bool)

(assert (=> d!26203 (= (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97871 d!26203))

(declare-fun d!26205 () Bool)

(declare-fun e!64027 () Bool)

(assert (=> d!26205 e!64027))

(declare-fun res!49415 () Bool)

(assert (=> d!26205 (=> res!49415 e!64027)))

(declare-fun lt!49292 () Bool)

(assert (=> d!26205 (= res!49415 (not lt!49292))))

(declare-fun lt!49293 () Bool)

(assert (=> d!26205 (= lt!49292 lt!49293)))

(declare-fun lt!49291 () Unit!2934)

(declare-fun e!64028 () Unit!2934)

(assert (=> d!26205 (= lt!49291 e!64028)))

(declare-fun c!16691 () Bool)

(assert (=> d!26205 (= c!16691 lt!49293)))

(assert (=> d!26205 (= lt!49293 (containsKey!152 (toList!772 lt!48871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26205 (= (contains!796 lt!48871 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49292)))

(declare-fun b!98244 () Bool)

(declare-fun lt!49294 () Unit!2934)

(assert (=> b!98244 (= e!64028 lt!49294)))

(assert (=> b!98244 (= lt!49294 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98244 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98245 () Bool)

(declare-fun Unit!2970 () Unit!2934)

(assert (=> b!98245 (= e!64028 Unit!2970)))

(declare-fun b!98246 () Bool)

(assert (=> b!98246 (= e!64027 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26205 c!16691) b!98244))

(assert (= (and d!26205 (not c!16691)) b!98245))

(assert (= (and d!26205 (not res!49415)) b!98246))

(declare-fun m!107361 () Bool)

(assert (=> d!26205 m!107361))

(declare-fun m!107363 () Bool)

(assert (=> b!98244 m!107363))

(declare-fun m!107365 () Bool)

(assert (=> b!98244 m!107365))

(assert (=> b!98244 m!107365))

(declare-fun m!107367 () Bool)

(assert (=> b!98244 m!107367))

(assert (=> b!98246 m!107365))

(assert (=> b!98246 m!107365))

(assert (=> b!98246 m!107367))

(assert (=> bm!9943 d!26205))

(declare-fun d!26207 () Bool)

(declare-fun res!49416 () Bool)

(declare-fun e!64029 () Bool)

(assert (=> d!26207 (=> res!49416 e!64029)))

(assert (=> d!26207 (= res!49416 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26207 (= (containsKey!152 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000) e!64029)))

(declare-fun b!98247 () Bool)

(declare-fun e!64030 () Bool)

(assert (=> b!98247 (= e!64029 e!64030)))

(declare-fun res!49417 () Bool)

(assert (=> b!98247 (=> (not res!49417) (not e!64030))))

(assert (=> b!98247 (= res!49417 (and (or (not ((_ is Cons!1582) (toList!772 lt!48747))) (bvsle (_1!1174 (h!2176 (toList!772 lt!48747))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1582) (toList!772 lt!48747)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48747))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98248 () Bool)

(assert (=> b!98248 (= e!64030 (containsKey!152 (t!5531 (toList!772 lt!48747)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26207 (not res!49416)) b!98247))

(assert (= (and b!98247 res!49417) b!98248))

(declare-fun m!107369 () Bool)

(assert (=> b!98248 m!107369))

(assert (=> d!25979 d!26207))

(declare-fun d!26209 () Bool)

(declare-fun lt!49295 () Bool)

(assert (=> d!26209 (= lt!49295 (select (content!102 (toList!772 lt!49006)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!64031 () Bool)

(assert (=> d!26209 (= lt!49295 e!64031)))

(declare-fun res!49419 () Bool)

(assert (=> d!26209 (=> (not res!49419) (not e!64031))))

(assert (=> d!26209 (= res!49419 ((_ is Cons!1582) (toList!772 lt!49006)))))

(assert (=> d!26209 (= (contains!798 (toList!772 lt!49006) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49295)))

(declare-fun b!98249 () Bool)

(declare-fun e!64032 () Bool)

(assert (=> b!98249 (= e!64031 e!64032)))

(declare-fun res!49418 () Bool)

(assert (=> b!98249 (=> res!49418 e!64032)))

(assert (=> b!98249 (= res!49418 (= (h!2176 (toList!772 lt!49006)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98250 () Bool)

(assert (=> b!98250 (= e!64032 (contains!798 (t!5531 (toList!772 lt!49006)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!26209 res!49419) b!98249))

(assert (= (and b!98249 (not res!49418)) b!98250))

(declare-fun m!107371 () Bool)

(assert (=> d!26209 m!107371))

(declare-fun m!107373 () Bool)

(assert (=> d!26209 m!107373))

(declare-fun m!107375 () Bool)

(assert (=> b!98250 m!107375))

(assert (=> b!97821 d!26209))

(declare-fun d!26211 () Bool)

(declare-fun res!49420 () Bool)

(declare-fun e!64033 () Bool)

(assert (=> d!26211 (=> res!49420 e!64033)))

(assert (=> d!26211 (= res!49420 (and ((_ is Cons!1582) (t!5531 (toList!772 lt!48641))) (= (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641)))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26211 (= (containsKey!152 (t!5531 (toList!772 lt!48641)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!64033)))

(declare-fun b!98251 () Bool)

(declare-fun e!64034 () Bool)

(assert (=> b!98251 (= e!64033 e!64034)))

(declare-fun res!49421 () Bool)

(assert (=> b!98251 (=> (not res!49421) (not e!64034))))

(assert (=> b!98251 (= res!49421 (and (or (not ((_ is Cons!1582) (t!5531 (toList!772 lt!48641)))) (bvsle (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641)))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1582) (t!5531 (toList!772 lt!48641))) (bvslt (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641)))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!98252 () Bool)

(assert (=> b!98252 (= e!64034 (containsKey!152 (t!5531 (t!5531 (toList!772 lt!48641))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26211 (not res!49420)) b!98251))

(assert (= (and b!98251 res!49421) b!98252))

(assert (=> b!98252 m!106105))

(declare-fun m!107377 () Bool)

(assert (=> b!98252 m!107377))

(assert (=> b!97952 d!26211))

(assert (=> b!97864 d!26021))

(assert (=> bm!9967 d!26001))

(declare-fun d!26213 () Bool)

(declare-fun e!64035 () Bool)

(assert (=> d!26213 e!64035))

(declare-fun res!49422 () Bool)

(assert (=> d!26213 (=> res!49422 e!64035)))

(declare-fun lt!49297 () Bool)

(assert (=> d!26213 (= res!49422 (not lt!49297))))

(declare-fun lt!49298 () Bool)

(assert (=> d!26213 (= lt!49297 lt!49298)))

(declare-fun lt!49296 () Unit!2934)

(declare-fun e!64036 () Unit!2934)

(assert (=> d!26213 (= lt!49296 e!64036)))

(declare-fun c!16692 () Bool)

(assert (=> d!26213 (= c!16692 lt!49298)))

(assert (=> d!26213 (= lt!49298 (containsKey!152 (toList!772 lt!48893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26213 (= (contains!796 lt!48893 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49297)))

(declare-fun b!98253 () Bool)

(declare-fun lt!49299 () Unit!2934)

(assert (=> b!98253 (= e!64036 lt!49299)))

(assert (=> b!98253 (= lt!49299 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98253 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98254 () Bool)

(declare-fun Unit!2971 () Unit!2934)

(assert (=> b!98254 (= e!64036 Unit!2971)))

(declare-fun b!98255 () Bool)

(assert (=> b!98255 (= e!64035 (isDefined!102 (getValueByKey!148 (toList!772 lt!48893) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26213 c!16692) b!98253))

(assert (= (and d!26213 (not c!16692)) b!98254))

(assert (= (and d!26213 (not res!49422)) b!98255))

(declare-fun m!107379 () Bool)

(assert (=> d!26213 m!107379))

(declare-fun m!107381 () Bool)

(assert (=> b!98253 m!107381))

(declare-fun m!107383 () Bool)

(assert (=> b!98253 m!107383))

(assert (=> b!98253 m!107383))

(declare-fun m!107385 () Bool)

(assert (=> b!98253 m!107385))

(assert (=> b!98255 m!107383))

(assert (=> b!98255 m!107383))

(assert (=> b!98255 m!107385))

(assert (=> bm!9950 d!26213))

(declare-fun d!26215 () Bool)

(assert (=> d!26215 (= (isDefined!102 (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!4045 () Bool)

(assert (= bs!4045 d!26215))

(assert (=> bs!4045 m!106913))

(declare-fun m!107387 () Bool)

(assert (=> bs!4045 m!107387))

(assert (=> b!97967 d!26215))

(declare-fun b!98257 () Bool)

(declare-fun e!64037 () Option!154)

(declare-fun e!64038 () Option!154)

(assert (=> b!98257 (= e!64037 e!64038)))

(declare-fun c!16694 () Bool)

(assert (=> b!98257 (= c!16694 (and ((_ is Cons!1582) (toList!772 call!9918)) (not (= (_1!1174 (h!2176 (toList!772 call!9918))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun b!98258 () Bool)

(assert (=> b!98258 (= e!64038 (getValueByKey!148 (t!5531 (toList!772 call!9918)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98256 () Bool)

(assert (=> b!98256 (= e!64037 (Some!153 (_2!1174 (h!2176 (toList!772 call!9918)))))))

(declare-fun c!16693 () Bool)

(declare-fun d!26217 () Bool)

(assert (=> d!26217 (= c!16693 (and ((_ is Cons!1582) (toList!772 call!9918)) (= (_1!1174 (h!2176 (toList!772 call!9918))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26217 (= (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!64037)))

(declare-fun b!98259 () Bool)

(assert (=> b!98259 (= e!64038 None!152)))

(assert (= (and d!26217 c!16693) b!98256))

(assert (= (and d!26217 (not c!16693)) b!98257))

(assert (= (and b!98257 c!16694) b!98258))

(assert (= (and b!98257 (not c!16694)) b!98259))

(assert (=> b!98258 m!106105))

(declare-fun m!107389 () Bool)

(assert (=> b!98258 m!107389))

(assert (=> b!97967 d!26217))

(declare-fun b!98261 () Bool)

(declare-fun e!64039 () Option!154)

(declare-fun e!64040 () Option!154)

(assert (=> b!98261 (= e!64039 e!64040)))

(declare-fun c!16696 () Bool)

(assert (=> b!98261 (= c!16696 (and ((_ is Cons!1582) (toList!772 lt!48993)) (not (= (_1!1174 (h!2176 (toList!772 lt!48993))) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98262 () Bool)

(assert (=> b!98262 (= e!64040 (getValueByKey!148 (t!5531 (toList!772 lt!48993)) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98260 () Bool)

(assert (=> b!98260 (= e!64039 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48993)))))))

(declare-fun c!16695 () Bool)

(declare-fun d!26219 () Bool)

(assert (=> d!26219 (= c!16695 (and ((_ is Cons!1582) (toList!772 lt!48993)) (= (_1!1174 (h!2176 (toList!772 lt!48993))) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26219 (= (getValueByKey!148 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64039)))

(declare-fun b!98263 () Bool)

(assert (=> b!98263 (= e!64040 None!152)))

(assert (= (and d!26219 c!16695) b!98260))

(assert (= (and d!26219 (not c!16695)) b!98261))

(assert (= (and b!98261 c!16696) b!98262))

(assert (= (and b!98261 (not c!16696)) b!98263))

(declare-fun m!107391 () Bool)

(assert (=> b!98262 m!107391))

(assert (=> b!97801 d!26219))

(declare-fun d!26221 () Bool)

(declare-fun e!64041 () Bool)

(assert (=> d!26221 e!64041))

(declare-fun res!49424 () Bool)

(assert (=> d!26221 (=> (not res!49424) (not e!64041))))

(declare-fun lt!49303 () ListLongMap!1513)

(assert (=> d!26221 (= res!49424 (contains!796 lt!49303 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49301 () List!1586)

(assert (=> d!26221 (= lt!49303 (ListLongMap!1514 lt!49301))))

(declare-fun lt!49302 () Unit!2934)

(declare-fun lt!49300 () Unit!2934)

(assert (=> d!26221 (= lt!49302 lt!49300)))

(assert (=> d!26221 (= (getValueByKey!148 lt!49301 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26221 (= lt!49300 (lemmaContainsTupThenGetReturnValue!67 lt!49301 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26221 (= lt!49301 (insertStrictlySorted!70 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26221 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49303)))

(declare-fun b!98264 () Bool)

(declare-fun res!49423 () Bool)

(assert (=> b!98264 (=> (not res!49423) (not e!64041))))

(assert (=> b!98264 (= res!49423 (= (getValueByKey!148 (toList!772 lt!49303) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98265 () Bool)

(assert (=> b!98265 (= e!64041 (contains!798 (toList!772 lt!49303) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26221 res!49424) b!98264))

(assert (= (and b!98264 res!49423) b!98265))

(declare-fun m!107393 () Bool)

(assert (=> d!26221 m!107393))

(declare-fun m!107395 () Bool)

(assert (=> d!26221 m!107395))

(declare-fun m!107397 () Bool)

(assert (=> d!26221 m!107397))

(declare-fun m!107399 () Bool)

(assert (=> d!26221 m!107399))

(declare-fun m!107401 () Bool)

(assert (=> b!98264 m!107401))

(declare-fun m!107403 () Bool)

(assert (=> b!98265 m!107403))

(assert (=> b!97961 d!26221))

(assert (=> b!97961 d!25911))

(declare-fun b!98266 () Bool)

(declare-fun e!64054 () ListLongMap!1513)

(declare-fun call!10022 () ListLongMap!1513)

(assert (=> b!98266 (= e!64054 (+!128 call!10022 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98267 () Bool)

(declare-fun e!64043 () Bool)

(declare-fun e!64052 () Bool)

(assert (=> b!98267 (= e!64043 e!64052)))

(declare-fun res!49428 () Bool)

(assert (=> b!98267 (=> (not res!49428) (not e!64052))))

(declare-fun lt!49318 () ListLongMap!1513)

(assert (=> b!98267 (= res!49428 (contains!796 lt!49318 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98267 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!10014 () Bool)

(declare-fun call!10021 () Bool)

(assert (=> bm!10014 (= call!10021 (contains!796 lt!49318 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98268 () Bool)

(declare-fun e!64051 () Bool)

(declare-fun call!10019 () Bool)

(assert (=> b!98268 (= e!64051 (not call!10019))))

(declare-fun b!98269 () Bool)

(declare-fun e!64048 () Bool)

(assert (=> b!98269 (= e!64048 (not call!10021))))

(declare-fun b!98270 () Bool)

(declare-fun e!64047 () Bool)

(assert (=> b!98270 (= e!64048 e!64047)))

(declare-fun res!49429 () Bool)

(assert (=> b!98270 (= res!49429 call!10021)))

(assert (=> b!98270 (=> (not res!49429) (not e!64047))))

(declare-fun b!98271 () Bool)

(declare-fun e!64050 () Bool)

(assert (=> b!98271 (= e!64050 e!64051)))

(declare-fun c!16697 () Bool)

(assert (=> b!98271 (= c!16697 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10015 () Bool)

(assert (=> bm!10015 (= call!10019 (contains!796 lt!49318 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98272 () Bool)

(declare-fun e!64045 () Bool)

(assert (=> b!98272 (= e!64045 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10016 () Bool)

(declare-fun call!10018 () ListLongMap!1513)

(declare-fun call!10017 () ListLongMap!1513)

(assert (=> bm!10016 (= call!10018 call!10017)))

(declare-fun b!98273 () Bool)

(declare-fun e!64049 () ListLongMap!1513)

(declare-fun call!10020 () ListLongMap!1513)

(assert (=> b!98273 (= e!64049 call!10020)))

(declare-fun b!98274 () Bool)

(declare-fun c!16701 () Bool)

(assert (=> b!98274 (= c!16701 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64044 () ListLongMap!1513)

(assert (=> b!98274 (= e!64049 e!64044)))

(declare-fun b!98275 () Bool)

(assert (=> b!98275 (= e!64052 (= (apply!92 lt!49318 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98275 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))))))

(assert (=> b!98275 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98276 () Bool)

(assert (=> b!98276 (= e!64054 e!64049)))

(declare-fun c!16699 () Bool)

(assert (=> b!98276 (= c!16699 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!10023 () ListLongMap!1513)

(declare-fun bm!10017 () Bool)

(declare-fun c!16700 () Bool)

(assert (=> bm!10017 (= call!10022 (+!128 (ite c!16700 call!10017 (ite c!16699 call!10018 call!10023)) (ite (or c!16700 c!16699) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!10018 () Bool)

(assert (=> bm!10018 (= call!10017 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98277 () Bool)

(assert (=> b!98277 (= e!64047 (= (apply!92 lt!49318 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98278 () Bool)

(assert (=> b!98278 (= e!64044 call!10020)))

(declare-fun b!98279 () Bool)

(declare-fun e!64046 () Unit!2934)

(declare-fun lt!49321 () Unit!2934)

(assert (=> b!98279 (= e!64046 lt!49321)))

(declare-fun lt!49307 () ListLongMap!1513)

(assert (=> b!98279 (= lt!49307 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49322 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49322 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49304 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49304 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49313 () Unit!2934)

(assert (=> b!98279 (= lt!49313 (addStillContains!68 lt!49307 lt!49322 (zeroValue!2363 newMap!16) lt!49304))))

(assert (=> b!98279 (contains!796 (+!128 lt!49307 (tuple2!2327 lt!49322 (zeroValue!2363 newMap!16))) lt!49304)))

(declare-fun lt!49319 () Unit!2934)

(assert (=> b!98279 (= lt!49319 lt!49313)))

(declare-fun lt!49320 () ListLongMap!1513)

(assert (=> b!98279 (= lt!49320 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49311 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49311 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49316 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49316 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49310 () Unit!2934)

(assert (=> b!98279 (= lt!49310 (addApplyDifferent!68 lt!49320 lt!49311 (minValue!2363 newMap!16) lt!49316))))

(assert (=> b!98279 (= (apply!92 (+!128 lt!49320 (tuple2!2327 lt!49311 (minValue!2363 newMap!16))) lt!49316) (apply!92 lt!49320 lt!49316))))

(declare-fun lt!49312 () Unit!2934)

(assert (=> b!98279 (= lt!49312 lt!49310)))

(declare-fun lt!49317 () ListLongMap!1513)

(assert (=> b!98279 (= lt!49317 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49324 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49324 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49315 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49315 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49323 () Unit!2934)

(assert (=> b!98279 (= lt!49323 (addApplyDifferent!68 lt!49317 lt!49324 (zeroValue!2363 newMap!16) lt!49315))))

(assert (=> b!98279 (= (apply!92 (+!128 lt!49317 (tuple2!2327 lt!49324 (zeroValue!2363 newMap!16))) lt!49315) (apply!92 lt!49317 lt!49315))))

(declare-fun lt!49325 () Unit!2934)

(assert (=> b!98279 (= lt!49325 lt!49323)))

(declare-fun lt!49314 () ListLongMap!1513)

(assert (=> b!98279 (= lt!49314 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49305 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49305 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49306 () (_ BitVec 64))

(assert (=> b!98279 (= lt!49306 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98279 (= lt!49321 (addApplyDifferent!68 lt!49314 lt!49305 (minValue!2363 newMap!16) lt!49306))))

(assert (=> b!98279 (= (apply!92 (+!128 lt!49314 (tuple2!2327 lt!49305 (minValue!2363 newMap!16))) lt!49306) (apply!92 lt!49314 lt!49306))))

(declare-fun b!98280 () Bool)

(declare-fun e!64053 () Bool)

(assert (=> b!98280 (= e!64053 (= (apply!92 lt!49318 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!10019 () Bool)

(assert (=> bm!10019 (= call!10020 call!10022)))

(declare-fun b!98281 () Bool)

(assert (=> b!98281 (= e!64044 call!10023)))

(declare-fun b!98282 () Bool)

(declare-fun Unit!2972 () Unit!2934)

(assert (=> b!98282 (= e!64046 Unit!2972)))

(declare-fun b!98283 () Bool)

(declare-fun e!64042 () Bool)

(assert (=> b!98283 (= e!64042 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98284 () Bool)

(declare-fun res!49427 () Bool)

(assert (=> b!98284 (=> (not res!49427) (not e!64050))))

(assert (=> b!98284 (= res!49427 e!64048)))

(declare-fun c!16698 () Bool)

(assert (=> b!98284 (= c!16698 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26223 () Bool)

(assert (=> d!26223 e!64050))

(declare-fun res!49430 () Bool)

(assert (=> d!26223 (=> (not res!49430) (not e!64050))))

(assert (=> d!26223 (= res!49430 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!49309 () ListLongMap!1513)

(assert (=> d!26223 (= lt!49318 lt!49309)))

(declare-fun lt!49308 () Unit!2934)

(assert (=> d!26223 (= lt!49308 e!64046)))

(declare-fun c!16702 () Bool)

(assert (=> d!26223 (= c!16702 e!64042)))

(declare-fun res!49426 () Bool)

(assert (=> d!26223 (=> (not res!49426) (not e!64042))))

(assert (=> d!26223 (= res!49426 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26223 (= lt!49309 e!64054)))

(assert (=> d!26223 (= c!16700 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26223 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26223 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49318)))

(declare-fun bm!10020 () Bool)

(assert (=> bm!10020 (= call!10023 call!10018)))

(declare-fun b!98285 () Bool)

(assert (=> b!98285 (= e!64051 e!64053)))

(declare-fun res!49431 () Bool)

(assert (=> b!98285 (= res!49431 call!10019)))

(assert (=> b!98285 (=> (not res!49431) (not e!64053))))

(declare-fun b!98286 () Bool)

(declare-fun res!49432 () Bool)

(assert (=> b!98286 (=> (not res!49432) (not e!64050))))

(assert (=> b!98286 (= res!49432 e!64043)))

(declare-fun res!49433 () Bool)

(assert (=> b!98286 (=> res!49433 e!64043)))

(assert (=> b!98286 (= res!49433 (not e!64045))))

(declare-fun res!49425 () Bool)

(assert (=> b!98286 (=> (not res!49425) (not e!64045))))

(assert (=> b!98286 (= res!49425 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!26223 c!16700) b!98266))

(assert (= (and d!26223 (not c!16700)) b!98276))

(assert (= (and b!98276 c!16699) b!98273))

(assert (= (and b!98276 (not c!16699)) b!98274))

(assert (= (and b!98274 c!16701) b!98278))

(assert (= (and b!98274 (not c!16701)) b!98281))

(assert (= (or b!98278 b!98281) bm!10020))

(assert (= (or b!98273 bm!10020) bm!10016))

(assert (= (or b!98273 b!98278) bm!10019))

(assert (= (or b!98266 bm!10016) bm!10018))

(assert (= (or b!98266 bm!10019) bm!10017))

(assert (= (and d!26223 res!49426) b!98283))

(assert (= (and d!26223 c!16702) b!98279))

(assert (= (and d!26223 (not c!16702)) b!98282))

(assert (= (and d!26223 res!49430) b!98286))

(assert (= (and b!98286 res!49425) b!98272))

(assert (= (and b!98286 (not res!49433)) b!98267))

(assert (= (and b!98267 res!49428) b!98275))

(assert (= (and b!98286 res!49432) b!98284))

(assert (= (and b!98284 c!16698) b!98270))

(assert (= (and b!98284 (not c!16698)) b!98269))

(assert (= (and b!98270 res!49429) b!98277))

(assert (= (or b!98270 b!98269) bm!10014))

(assert (= (and b!98284 res!49427) b!98271))

(assert (= (and b!98271 c!16697) b!98285))

(assert (= (and b!98271 (not c!16697)) b!98268))

(assert (= (and b!98285 res!49431) b!98280))

(assert (= (or b!98285 b!98268) bm!10015))

(declare-fun b_lambda!4357 () Bool)

(assert (=> (not b_lambda!4357) (not b!98275)))

(assert (=> b!98275 t!5544))

(declare-fun b_and!6021 () Bool)

(assert (= b_and!6017 (and (=> t!5544 result!3271) b_and!6021)))

(assert (=> b!98275 t!5546))

(declare-fun b_and!6023 () Bool)

(assert (= b_and!6019 (and (=> t!5546 result!3273) b_and!6023)))

(assert (=> b!98267 m!106375))

(assert (=> b!98267 m!106375))

(declare-fun m!107405 () Bool)

(assert (=> b!98267 m!107405))

(declare-fun m!107407 () Bool)

(assert (=> b!98279 m!107407))

(declare-fun m!107409 () Bool)

(assert (=> b!98279 m!107409))

(declare-fun m!107411 () Bool)

(assert (=> b!98279 m!107411))

(assert (=> b!98279 m!107411))

(declare-fun m!107413 () Bool)

(assert (=> b!98279 m!107413))

(declare-fun m!107415 () Bool)

(assert (=> b!98279 m!107415))

(declare-fun m!107417 () Bool)

(assert (=> b!98279 m!107417))

(declare-fun m!107419 () Bool)

(assert (=> b!98279 m!107419))

(declare-fun m!107421 () Bool)

(assert (=> b!98279 m!107421))

(assert (=> b!98279 m!107409))

(declare-fun m!107423 () Bool)

(assert (=> b!98279 m!107423))

(declare-fun m!107425 () Bool)

(assert (=> b!98279 m!107425))

(declare-fun m!107427 () Bool)

(assert (=> b!98279 m!107427))

(declare-fun m!107429 () Bool)

(assert (=> b!98279 m!107429))

(assert (=> b!98279 m!106375))

(assert (=> b!98279 m!107419))

(declare-fun m!107431 () Bool)

(assert (=> b!98279 m!107431))

(declare-fun m!107433 () Bool)

(assert (=> b!98279 m!107433))

(declare-fun m!107435 () Bool)

(assert (=> b!98279 m!107435))

(declare-fun m!107437 () Bool)

(assert (=> b!98279 m!107437))

(assert (=> b!98279 m!107425))

(declare-fun m!107439 () Bool)

(assert (=> bm!10014 m!107439))

(declare-fun m!107441 () Bool)

(assert (=> b!98266 m!107441))

(declare-fun m!107443 () Bool)

(assert (=> bm!10015 m!107443))

(declare-fun m!107445 () Bool)

(assert (=> b!98280 m!107445))

(assert (=> b!98275 m!106375))

(declare-fun m!107447 () Bool)

(assert (=> b!98275 m!107447))

(assert (=> b!98275 m!106421))

(declare-fun m!107449 () Bool)

(assert (=> b!98275 m!107449))

(assert (=> b!98275 m!106375))

(declare-fun m!107451 () Bool)

(assert (=> b!98275 m!107451))

(assert (=> b!98275 m!107447))

(assert (=> b!98275 m!106421))

(assert (=> d!26223 m!106427))

(declare-fun m!107453 () Bool)

(assert (=> bm!10017 m!107453))

(assert (=> b!98272 m!106375))

(assert (=> b!98272 m!106375))

(assert (=> b!98272 m!106431))

(assert (=> bm!10018 m!107431))

(assert (=> b!98283 m!106375))

(assert (=> b!98283 m!106375))

(assert (=> b!98283 m!106431))

(declare-fun m!107455 () Bool)

(assert (=> b!98277 m!107455))

(assert (=> b!97961 d!26223))

(declare-fun d!26225 () Bool)

(declare-fun res!49434 () Bool)

(declare-fun e!64055 () Bool)

(assert (=> d!26225 (=> (not res!49434) (not e!64055))))

(assert (=> d!26225 (= res!49434 (simpleValid!68 (_2!1175 lt!49116)))))

(assert (=> d!26225 (= (valid!391 (_2!1175 lt!49116)) e!64055)))

(declare-fun b!98287 () Bool)

(declare-fun res!49435 () Bool)

(assert (=> b!98287 (=> (not res!49435) (not e!64055))))

(assert (=> b!98287 (= res!49435 (= (arrayCountValidKeys!0 (_keys!4169 (_2!1175 lt!49116)) #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!49116)))) (_size!474 (_2!1175 lt!49116))))))

(declare-fun b!98288 () Bool)

(declare-fun res!49436 () Bool)

(assert (=> b!98288 (=> (not res!49436) (not e!64055))))

(assert (=> b!98288 (= res!49436 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 (_2!1175 lt!49116)) (mask!6576 (_2!1175 lt!49116))))))

(declare-fun b!98289 () Bool)

(assert (=> b!98289 (= e!64055 (arrayNoDuplicates!0 (_keys!4169 (_2!1175 lt!49116)) #b00000000000000000000000000000000 Nil!1584))))

(assert (= (and d!26225 res!49434) b!98287))

(assert (= (and b!98287 res!49435) b!98288))

(assert (= (and b!98288 res!49436) b!98289))

(declare-fun m!107457 () Bool)

(assert (=> d!26225 m!107457))

(declare-fun m!107459 () Bool)

(assert (=> b!98287 m!107459))

(declare-fun m!107461 () Bool)

(assert (=> b!98288 m!107461))

(declare-fun m!107463 () Bool)

(assert (=> b!98289 m!107463))

(assert (=> b!97926 d!26225))

(declare-fun d!26227 () Bool)

(declare-fun e!64056 () Bool)

(assert (=> d!26227 e!64056))

(declare-fun res!49438 () Bool)

(assert (=> d!26227 (=> (not res!49438) (not e!64056))))

(declare-fun lt!49329 () ListLongMap!1513)

(assert (=> d!26227 (= res!49438 (contains!796 lt!49329 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun lt!49327 () List!1586)

(assert (=> d!26227 (= lt!49329 (ListLongMap!1514 lt!49327))))

(declare-fun lt!49328 () Unit!2934)

(declare-fun lt!49326 () Unit!2934)

(assert (=> d!26227 (= lt!49328 lt!49326)))

(assert (=> d!26227 (= (getValueByKey!148 lt!49327 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26227 (= lt!49326 (lemmaContainsTupThenGetReturnValue!67 lt!49327 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26227 (= lt!49327 (insertStrictlySorted!70 (toList!772 call!9950) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26227 (= (+!128 call!9950 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) lt!49329)))

(declare-fun b!98290 () Bool)

(declare-fun res!49437 () Bool)

(assert (=> b!98290 (=> (not res!49437) (not e!64056))))

(assert (=> b!98290 (= res!49437 (= (getValueByKey!148 (toList!772 lt!49329) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun b!98291 () Bool)

(assert (=> b!98291 (= e!64056 (contains!798 (toList!772 lt!49329) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(assert (= (and d!26227 res!49438) b!98290))

(assert (= (and b!98290 res!49437) b!98291))

(declare-fun m!107465 () Bool)

(assert (=> d!26227 m!107465))

(declare-fun m!107467 () Bool)

(assert (=> d!26227 m!107467))

(declare-fun m!107469 () Bool)

(assert (=> d!26227 m!107469))

(declare-fun m!107471 () Bool)

(assert (=> d!26227 m!107471))

(declare-fun m!107473 () Bool)

(assert (=> b!98290 m!107473))

(declare-fun m!107475 () Bool)

(assert (=> b!98291 m!107475))

(assert (=> b!97631 d!26227))

(assert (=> b!97677 d!25897))

(declare-fun d!26229 () Bool)

(assert (=> d!26229 (not (contains!796 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970)) lt!48973))))

(declare-fun lt!49332 () Unit!2934)

(declare-fun choose!605 (ListLongMap!1513 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2934)

(assert (=> d!26229 (= lt!49332 (choose!605 lt!48968 lt!48967 lt!48970 lt!48973))))

(declare-fun e!64059 () Bool)

(assert (=> d!26229 e!64059))

(declare-fun res!49441 () Bool)

(assert (=> d!26229 (=> (not res!49441) (not e!64059))))

(assert (=> d!26229 (= res!49441 (not (contains!796 lt!48968 lt!48973)))))

(assert (=> d!26229 (= (addStillNotContains!41 lt!48968 lt!48967 lt!48970 lt!48973) lt!49332)))

(declare-fun b!98295 () Bool)

(assert (=> b!98295 (= e!64059 (not (= lt!48967 lt!48973)))))

(assert (= (and d!26229 res!49441) b!98295))

(assert (=> d!26229 m!106609))

(assert (=> d!26229 m!106609))

(assert (=> d!26229 m!106613))

(declare-fun m!107477 () Bool)

(assert (=> d!26229 m!107477))

(declare-fun m!107479 () Bool)

(assert (=> d!26229 m!107479))

(assert (=> b!97790 d!26229))

(assert (=> b!97790 d!25919))

(declare-fun d!26231 () Bool)

(declare-fun e!64060 () Bool)

(assert (=> d!26231 e!64060))

(declare-fun res!49442 () Bool)

(assert (=> d!26231 (=> res!49442 e!64060)))

(declare-fun lt!49334 () Bool)

(assert (=> d!26231 (= res!49442 (not lt!49334))))

(declare-fun lt!49335 () Bool)

(assert (=> d!26231 (= lt!49334 lt!49335)))

(declare-fun lt!49333 () Unit!2934)

(declare-fun e!64061 () Unit!2934)

(assert (=> d!26231 (= lt!49333 e!64061)))

(declare-fun c!16703 () Bool)

(assert (=> d!26231 (= c!16703 lt!49335)))

(assert (=> d!26231 (= lt!49335 (containsKey!152 (toList!772 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970))) lt!48973))))

(assert (=> d!26231 (= (contains!796 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970)) lt!48973) lt!49334)))

(declare-fun b!98296 () Bool)

(declare-fun lt!49336 () Unit!2934)

(assert (=> b!98296 (= e!64061 lt!49336)))

(assert (=> b!98296 (= lt!49336 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970))) lt!48973))))

(assert (=> b!98296 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970))) lt!48973))))

(declare-fun b!98297 () Bool)

(declare-fun Unit!2973 () Unit!2934)

(assert (=> b!98297 (= e!64061 Unit!2973)))

(declare-fun b!98298 () Bool)

(assert (=> b!98298 (= e!64060 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970))) lt!48973)))))

(assert (= (and d!26231 c!16703) b!98296))

(assert (= (and d!26231 (not c!16703)) b!98297))

(assert (= (and d!26231 (not res!49442)) b!98298))

(declare-fun m!107481 () Bool)

(assert (=> d!26231 m!107481))

(declare-fun m!107483 () Bool)

(assert (=> b!98296 m!107483))

(declare-fun m!107485 () Bool)

(assert (=> b!98296 m!107485))

(assert (=> b!98296 m!107485))

(declare-fun m!107487 () Bool)

(assert (=> b!98296 m!107487))

(assert (=> b!98298 m!107485))

(assert (=> b!98298 m!107485))

(assert (=> b!98298 m!107487))

(assert (=> b!97790 d!26231))

(declare-fun d!26233 () Bool)

(declare-fun e!64062 () Bool)

(assert (=> d!26233 e!64062))

(declare-fun res!49444 () Bool)

(assert (=> d!26233 (=> (not res!49444) (not e!64062))))

(declare-fun lt!49340 () ListLongMap!1513)

(assert (=> d!26233 (= res!49444 (contains!796 lt!49340 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49338 () List!1586)

(assert (=> d!26233 (= lt!49340 (ListLongMap!1514 lt!49338))))

(declare-fun lt!49339 () Unit!2934)

(declare-fun lt!49337 () Unit!2934)

(assert (=> d!26233 (= lt!49339 lt!49337)))

(assert (=> d!26233 (= (getValueByKey!148 lt!49338 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26233 (= lt!49337 (lemmaContainsTupThenGetReturnValue!67 lt!49338 (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26233 (= lt!49338 (insertStrictlySorted!70 (toList!772 call!9974) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26233 (= (+!128 call!9974 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49340)))

(declare-fun b!98299 () Bool)

(declare-fun res!49443 () Bool)

(assert (=> b!98299 (=> (not res!49443) (not e!64062))))

(assert (=> b!98299 (= res!49443 (= (getValueByKey!148 (toList!772 lt!49340) (_1!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98300 () Bool)

(assert (=> b!98300 (= e!64062 (contains!798 (toList!772 lt!49340) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26233 res!49444) b!98299))

(assert (= (and b!98299 res!49443) b!98300))

(declare-fun m!107489 () Bool)

(assert (=> d!26233 m!107489))

(declare-fun m!107491 () Bool)

(assert (=> d!26233 m!107491))

(declare-fun m!107493 () Bool)

(assert (=> d!26233 m!107493))

(declare-fun m!107495 () Bool)

(assert (=> d!26233 m!107495))

(declare-fun m!107497 () Bool)

(assert (=> b!98299 m!107497))

(declare-fun m!107499 () Bool)

(assert (=> b!98300 m!107499))

(assert (=> b!97790 d!26233))

(declare-fun d!26235 () Bool)

(declare-fun e!64063 () Bool)

(assert (=> d!26235 e!64063))

(declare-fun res!49446 () Bool)

(assert (=> d!26235 (=> (not res!49446) (not e!64063))))

(declare-fun lt!49344 () ListLongMap!1513)

(assert (=> d!26235 (= res!49446 (contains!796 lt!49344 (_1!1174 (tuple2!2327 lt!48967 lt!48970))))))

(declare-fun lt!49342 () List!1586)

(assert (=> d!26235 (= lt!49344 (ListLongMap!1514 lt!49342))))

(declare-fun lt!49343 () Unit!2934)

(declare-fun lt!49341 () Unit!2934)

(assert (=> d!26235 (= lt!49343 lt!49341)))

(assert (=> d!26235 (= (getValueByKey!148 lt!49342 (_1!1174 (tuple2!2327 lt!48967 lt!48970))) (Some!153 (_2!1174 (tuple2!2327 lt!48967 lt!48970))))))

(assert (=> d!26235 (= lt!49341 (lemmaContainsTupThenGetReturnValue!67 lt!49342 (_1!1174 (tuple2!2327 lt!48967 lt!48970)) (_2!1174 (tuple2!2327 lt!48967 lt!48970))))))

(assert (=> d!26235 (= lt!49342 (insertStrictlySorted!70 (toList!772 lt!48968) (_1!1174 (tuple2!2327 lt!48967 lt!48970)) (_2!1174 (tuple2!2327 lt!48967 lt!48970))))))

(assert (=> d!26235 (= (+!128 lt!48968 (tuple2!2327 lt!48967 lt!48970)) lt!49344)))

(declare-fun b!98301 () Bool)

(declare-fun res!49445 () Bool)

(assert (=> b!98301 (=> (not res!49445) (not e!64063))))

(assert (=> b!98301 (= res!49445 (= (getValueByKey!148 (toList!772 lt!49344) (_1!1174 (tuple2!2327 lt!48967 lt!48970))) (Some!153 (_2!1174 (tuple2!2327 lt!48967 lt!48970)))))))

(declare-fun b!98302 () Bool)

(assert (=> b!98302 (= e!64063 (contains!798 (toList!772 lt!49344) (tuple2!2327 lt!48967 lt!48970)))))

(assert (= (and d!26235 res!49446) b!98301))

(assert (= (and b!98301 res!49445) b!98302))

(declare-fun m!107501 () Bool)

(assert (=> d!26235 m!107501))

(declare-fun m!107503 () Bool)

(assert (=> d!26235 m!107503))

(declare-fun m!107505 () Bool)

(assert (=> d!26235 m!107505))

(declare-fun m!107507 () Bool)

(assert (=> d!26235 m!107507))

(declare-fun m!107509 () Bool)

(assert (=> b!98301 m!107509))

(declare-fun m!107511 () Bool)

(assert (=> b!98302 m!107511))

(assert (=> b!97790 d!26235))

(declare-fun d!26237 () Bool)

(assert (=> d!26237 (= (isDefined!102 (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!4046 () Bool)

(assert (= bs!4046 d!26237))

(assert (=> bs!4046 m!106921))

(declare-fun m!107513 () Bool)

(assert (=> bs!4046 m!107513))

(assert (=> b!97970 d!26237))

(declare-fun b!98304 () Bool)

(declare-fun e!64064 () Option!154)

(declare-fun e!64065 () Option!154)

(assert (=> b!98304 (= e!64064 e!64065)))

(declare-fun c!16705 () Bool)

(assert (=> b!98304 (= c!16705 (and ((_ is Cons!1582) (toList!772 e!63619)) (not (= (_1!1174 (h!2176 (toList!772 e!63619))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun b!98305 () Bool)

(assert (=> b!98305 (= e!64065 (getValueByKey!148 (t!5531 (toList!772 e!63619)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98303 () Bool)

(assert (=> b!98303 (= e!64064 (Some!153 (_2!1174 (h!2176 (toList!772 e!63619)))))))

(declare-fun c!16704 () Bool)

(declare-fun d!26239 () Bool)

(assert (=> d!26239 (= c!16704 (and ((_ is Cons!1582) (toList!772 e!63619)) (= (_1!1174 (h!2176 (toList!772 e!63619))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26239 (= (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!64064)))

(declare-fun b!98306 () Bool)

(assert (=> b!98306 (= e!64065 None!152)))

(assert (= (and d!26239 c!16704) b!98303))

(assert (= (and d!26239 (not c!16704)) b!98304))

(assert (= (and b!98304 c!16705) b!98305))

(assert (= (and b!98304 (not c!16705)) b!98306))

(assert (=> b!98305 m!106105))

(declare-fun m!107515 () Bool)

(assert (=> b!98305 m!107515))

(assert (=> b!97970 d!26239))

(declare-fun d!26241 () Bool)

(assert (=> d!26241 (isDefined!102 (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(declare-fun lt!49345 () Unit!2934)

(assert (=> d!26241 (= lt!49345 (choose!601 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(declare-fun e!64066 () Bool)

(assert (=> d!26241 e!64066))

(declare-fun res!49447 () Bool)

(assert (=> d!26241 (=> (not res!49447) (not e!64066))))

(assert (=> d!26241 (= res!49447 (isStrictlySorted!299 (toList!772 call!9941)))))

(assert (=> d!26241 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))) lt!49345)))

(declare-fun b!98307 () Bool)

(assert (=> b!98307 (= e!64066 (containsKey!152 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (= (and d!26241 res!49447) b!98307))

(assert (=> d!26241 m!106323))

(assert (=> d!26241 m!106889))

(assert (=> d!26241 m!106889))

(assert (=> d!26241 m!106891))

(assert (=> d!26241 m!106323))

(declare-fun m!107517 () Bool)

(assert (=> d!26241 m!107517))

(declare-fun m!107519 () Bool)

(assert (=> d!26241 m!107519))

(assert (=> b!98307 m!106323))

(assert (=> b!98307 m!106885))

(assert (=> b!97953 d!26241))

(declare-fun d!26243 () Bool)

(assert (=> d!26243 (= (isDefined!102 (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))) (not (isEmpty!361 (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))))

(declare-fun bs!4047 () Bool)

(assert (= bs!4047 d!26243))

(assert (=> bs!4047 m!106889))

(declare-fun m!107521 () Bool)

(assert (=> bs!4047 m!107521))

(assert (=> b!97953 d!26243))

(declare-fun b!98309 () Bool)

(declare-fun e!64067 () Option!154)

(declare-fun e!64068 () Option!154)

(assert (=> b!98309 (= e!64067 e!64068)))

(declare-fun c!16707 () Bool)

(assert (=> b!98309 (= c!16707 (and ((_ is Cons!1582) (toList!772 call!9941)) (not (= (_1!1174 (h!2176 (toList!772 call!9941))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))))

(declare-fun b!98310 () Bool)

(assert (=> b!98310 (= e!64068 (getValueByKey!148 (t!5531 (toList!772 call!9941)) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(declare-fun b!98308 () Bool)

(assert (=> b!98308 (= e!64067 (Some!153 (_2!1174 (h!2176 (toList!772 call!9941)))))))

(declare-fun d!26245 () Bool)

(declare-fun c!16706 () Bool)

(assert (=> d!26245 (= c!16706 (and ((_ is Cons!1582) (toList!772 call!9941)) (= (_1!1174 (h!2176 (toList!772 call!9941))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))))

(assert (=> d!26245 (= (getValueByKey!148 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))) e!64067)))

(declare-fun b!98311 () Bool)

(assert (=> b!98311 (= e!64068 None!152)))

(assert (= (and d!26245 c!16706) b!98308))

(assert (= (and d!26245 (not c!16706)) b!98309))

(assert (= (and b!98309 c!16707) b!98310))

(assert (= (and b!98309 (not c!16707)) b!98311))

(assert (=> b!98310 m!106323))

(declare-fun m!107523 () Bool)

(assert (=> b!98310 m!107523))

(assert (=> b!97953 d!26245))

(assert (=> b!97964 d!26127))

(assert (=> b!97964 d!26129))

(declare-fun d!26247 () Bool)

(assert (=> d!26247 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26247 true))

(declare-fun _$5!101 () Unit!2934)

(assert (=> d!26247 (= (choose!603 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) _$5!101)))

(declare-fun bs!4048 () Bool)

(assert (= bs!4048 d!26247))

(assert (=> bs!4048 m!106217))

(assert (=> bs!4048 m!106217))

(assert (=> bs!4048 m!106831))

(assert (=> bs!4048 m!106327))

(assert (=> bs!4048 m!106901))

(assert (=> d!26027 d!26247))

(assert (=> d!26027 d!26053))

(assert (=> b!97923 d!25933))

(assert (=> b!97669 d!26045))

(declare-fun b!98312 () Bool)

(declare-fun e!64070 () Bool)

(declare-fun e!64072 () Bool)

(assert (=> b!98312 (= e!64070 e!64072)))

(declare-fun c!16708 () Bool)

(assert (=> b!98312 (= c!16708 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun d!26249 () Bool)

(declare-fun res!49450 () Bool)

(declare-fun e!64069 () Bool)

(assert (=> d!26249 (=> res!49450 e!64069)))

(assert (=> d!26249 (= res!49450 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (=> d!26249 (= (arrayNoDuplicates!0 (_keys!4169 (_2!1175 lt!48824)) #b00000000000000000000000000000000 Nil!1584) e!64069)))

(declare-fun bm!10021 () Bool)

(declare-fun call!10024 () Bool)

(assert (=> bm!10021 (= call!10024 (arrayNoDuplicates!0 (_keys!4169 (_2!1175 lt!48824)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16708 (Cons!1583 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000) Nil!1584) Nil!1584)))))

(declare-fun b!98313 () Bool)

(declare-fun e!64071 () Bool)

(assert (=> b!98313 (= e!64071 (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun b!98314 () Bool)

(assert (=> b!98314 (= e!64072 call!10024)))

(declare-fun b!98315 () Bool)

(assert (=> b!98315 (= e!64072 call!10024)))

(declare-fun b!98316 () Bool)

(assert (=> b!98316 (= e!64069 e!64070)))

(declare-fun res!49449 () Bool)

(assert (=> b!98316 (=> (not res!49449) (not e!64070))))

(assert (=> b!98316 (= res!49449 (not e!64071))))

(declare-fun res!49448 () Bool)

(assert (=> b!98316 (=> (not res!49448) (not e!64071))))

(assert (=> b!98316 (= res!49448 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(assert (= (and d!26249 (not res!49450)) b!98316))

(assert (= (and b!98316 res!49448) b!98313))

(assert (= (and b!98316 res!49449) b!98312))

(assert (= (and b!98312 c!16708) b!98314))

(assert (= (and b!98312 (not c!16708)) b!98315))

(assert (= (or b!98314 b!98315) bm!10021))

(assert (=> b!98312 m!107107))

(assert (=> b!98312 m!107107))

(assert (=> b!98312 m!107109))

(assert (=> bm!10021 m!107107))

(declare-fun m!107525 () Bool)

(assert (=> bm!10021 m!107525))

(assert (=> b!98313 m!107107))

(assert (=> b!98313 m!107107))

(declare-fun m!107527 () Bool)

(assert (=> b!98313 m!107527))

(assert (=> b!98316 m!107107))

(assert (=> b!98316 m!107107))

(assert (=> b!98316 m!107109))

(assert (=> b!97630 d!26249))

(declare-fun b!98317 () Bool)

(declare-fun e!64077 () ListLongMap!1513)

(declare-fun e!64076 () ListLongMap!1513)

(assert (=> b!98317 (= e!64077 e!64076)))

(declare-fun c!16711 () Bool)

(assert (=> b!98317 (= c!16711 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98318 () Bool)

(declare-fun e!64075 () Bool)

(assert (=> b!98318 (= e!64075 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98318 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98319 () Bool)

(declare-fun e!64079 () Bool)

(declare-fun lt!49350 () ListLongMap!1513)

(assert (=> b!98319 (= e!64079 (isEmpty!360 lt!49350))))

(declare-fun b!98320 () Bool)

(assert (=> b!98320 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> b!98320 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))))))))

(declare-fun e!64073 () Bool)

(assert (=> b!98320 (= e!64073 (= (apply!92 lt!49350 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98321 () Bool)

(assert (=> b!98321 (= e!64077 (ListLongMap!1514 Nil!1583))))

(declare-fun b!98322 () Bool)

(declare-fun res!49453 () Bool)

(declare-fun e!64078 () Bool)

(assert (=> b!98322 (=> (not res!49453) (not e!64078))))

(assert (=> b!98322 (= res!49453 (not (contains!796 lt!49350 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98323 () Bool)

(declare-fun e!64074 () Bool)

(assert (=> b!98323 (= e!64078 e!64074)))

(declare-fun c!16712 () Bool)

(assert (=> b!98323 (= c!16712 e!64075)))

(declare-fun res!49451 () Bool)

(assert (=> b!98323 (=> (not res!49451) (not e!64075))))

(assert (=> b!98323 (= res!49451 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun d!26251 () Bool)

(assert (=> d!26251 e!64078))

(declare-fun res!49454 () Bool)

(assert (=> d!26251 (=> (not res!49454) (not e!64078))))

(assert (=> d!26251 (= res!49454 (not (contains!796 lt!49350 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26251 (= lt!49350 e!64077)))

(declare-fun c!16710 () Bool)

(assert (=> d!26251 (= c!16710 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26251 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26251 (= (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49350)))

(declare-fun b!98324 () Bool)

(assert (=> b!98324 (= e!64079 (= lt!49350 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun b!98325 () Bool)

(declare-fun call!10025 () ListLongMap!1513)

(assert (=> b!98325 (= e!64076 call!10025)))

(declare-fun b!98326 () Bool)

(assert (=> b!98326 (= e!64074 e!64079)))

(declare-fun c!16709 () Bool)

(assert (=> b!98326 (= c!16709 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98327 () Bool)

(declare-fun lt!49348 () Unit!2934)

(declare-fun lt!49351 () Unit!2934)

(assert (=> b!98327 (= lt!49348 lt!49351)))

(declare-fun lt!49346 () (_ BitVec 64))

(declare-fun lt!49347 () ListLongMap!1513)

(declare-fun lt!49349 () V!3153)

(declare-fun lt!49352 () (_ BitVec 64))

(assert (=> b!98327 (not (contains!796 (+!128 lt!49347 (tuple2!2327 lt!49346 lt!49349)) lt!49352))))

(assert (=> b!98327 (= lt!49351 (addStillNotContains!41 lt!49347 lt!49346 lt!49349 lt!49352))))

(assert (=> b!98327 (= lt!49352 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98327 (= lt!49349 (get!1285 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98327 (= lt!49346 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98327 (= lt!49347 call!10025)))

(assert (=> b!98327 (= e!64076 (+!128 call!10025 (tuple2!2327 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) (get!1285 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98328 () Bool)

(assert (=> b!98328 (= e!64074 e!64073)))

(assert (=> b!98328 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun res!49452 () Bool)

(assert (=> b!98328 (= res!49452 (contains!796 lt!49350 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98328 (=> (not res!49452) (not e!64073))))

(declare-fun bm!10022 () Bool)

(assert (=> bm!10022 (= call!10025 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) (mask!6576 newMap!16) (ite c!16508 (ite c!16499 lt!48828 lt!48837) (extraKeys!2301 newMap!16)) (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26251 c!16710) b!98321))

(assert (= (and d!26251 (not c!16710)) b!98317))

(assert (= (and b!98317 c!16711) b!98327))

(assert (= (and b!98317 (not c!16711)) b!98325))

(assert (= (or b!98327 b!98325) bm!10022))

(assert (= (and d!26251 res!49454) b!98322))

(assert (= (and b!98322 res!49453) b!98323))

(assert (= (and b!98323 res!49451) b!98318))

(assert (= (and b!98323 c!16712) b!98328))

(assert (= (and b!98323 (not c!16712)) b!98326))

(assert (= (and b!98328 res!49452) b!98320))

(assert (= (and b!98326 c!16709) b!98324))

(assert (= (and b!98326 (not c!16709)) b!98319))

(declare-fun b_lambda!4359 () Bool)

(assert (=> (not b_lambda!4359) (not b!98320)))

(assert (=> b!98320 t!5544))

(declare-fun b_and!6025 () Bool)

(assert (= b_and!6021 (and (=> t!5544 result!3271) b_and!6025)))

(assert (=> b!98320 t!5546))

(declare-fun b_and!6027 () Bool)

(assert (= b_and!6023 (and (=> t!5546 result!3273) b_and!6027)))

(declare-fun b_lambda!4361 () Bool)

(assert (=> (not b_lambda!4361) (not b!98327)))

(assert (=> b!98327 t!5544))

(declare-fun b_and!6029 () Bool)

(assert (= b_and!6025 (and (=> t!5544 result!3271) b_and!6029)))

(assert (=> b!98327 t!5546))

(declare-fun b_and!6031 () Bool)

(assert (= b_and!6027 (and (=> t!5546 result!3273) b_and!6031)))

(assert (=> b!98320 m!106375))

(assert (=> b!98320 m!106421))

(assert (=> b!98320 m!106571))

(assert (=> b!98320 m!106375))

(declare-fun m!107529 () Bool)

(assert (=> b!98320 m!107529))

(assert (=> b!98320 m!106571))

(assert (=> b!98320 m!106421))

(assert (=> b!98320 m!106573))

(declare-fun m!107531 () Bool)

(assert (=> bm!10022 m!107531))

(assert (=> b!98324 m!107531))

(declare-fun m!107533 () Bool)

(assert (=> b!98319 m!107533))

(assert (=> b!98318 m!106375))

(assert (=> b!98318 m!106375))

(assert (=> b!98318 m!106431))

(assert (=> b!98327 m!106375))

(assert (=> b!98327 m!106421))

(declare-fun m!107535 () Bool)

(assert (=> b!98327 m!107535))

(declare-fun m!107537 () Bool)

(assert (=> b!98327 m!107537))

(assert (=> b!98327 m!106571))

(declare-fun m!107539 () Bool)

(assert (=> b!98327 m!107539))

(assert (=> b!98327 m!107537))

(declare-fun m!107541 () Bool)

(assert (=> b!98327 m!107541))

(assert (=> b!98327 m!106571))

(assert (=> b!98327 m!106421))

(assert (=> b!98327 m!106573))

(declare-fun m!107543 () Bool)

(assert (=> d!26251 m!107543))

(assert (=> d!26251 m!106427))

(assert (=> b!98317 m!106375))

(assert (=> b!98317 m!106375))

(assert (=> b!98317 m!106431))

(declare-fun m!107545 () Bool)

(assert (=> b!98322 m!107545))

(assert (=> b!98328 m!106375))

(assert (=> b!98328 m!106375))

(declare-fun m!107547 () Bool)

(assert (=> b!98328 m!107547))

(assert (=> bm!9960 d!26251))

(declare-fun d!26253 () Bool)

(assert (=> d!26253 (= (apply!92 lt!48871 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48871) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4049 () Bool)

(assert (= bs!4049 d!26253))

(declare-fun m!107549 () Bool)

(assert (=> bs!4049 m!107549))

(assert (=> bs!4049 m!107549))

(declare-fun m!107551 () Bool)

(assert (=> bs!4049 m!107551))

(assert (=> b!97642 d!26253))

(assert (=> d!26015 d!25897))

(declare-fun d!26255 () Bool)

(declare-fun e!64080 () Bool)

(assert (=> d!26255 e!64080))

(declare-fun res!49455 () Bool)

(assert (=> d!26255 (=> res!49455 e!64080)))

(declare-fun lt!49354 () Bool)

(assert (=> d!26255 (= res!49455 (not lt!49354))))

(declare-fun lt!49355 () Bool)

(assert (=> d!26255 (= lt!49354 lt!49355)))

(declare-fun lt!49353 () Unit!2934)

(declare-fun e!64081 () Unit!2934)

(assert (=> d!26255 (= lt!49353 e!64081)))

(declare-fun c!16713 () Bool)

(assert (=> d!26255 (= c!16713 lt!49355)))

(assert (=> d!26255 (= lt!49355 (containsKey!152 (toList!772 lt!48971) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26255 (= (contains!796 lt!48971 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49354)))

(declare-fun b!98329 () Bool)

(declare-fun lt!49356 () Unit!2934)

(assert (=> b!98329 (= e!64081 lt!49356)))

(assert (=> b!98329 (= lt!49356 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48971) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98329 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98330 () Bool)

(declare-fun Unit!2974 () Unit!2934)

(assert (=> b!98330 (= e!64081 Unit!2974)))

(declare-fun b!98331 () Bool)

(assert (=> b!98331 (= e!64080 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26255 c!16713) b!98329))

(assert (= (and d!26255 (not c!16713)) b!98330))

(assert (= (and d!26255 (not res!49455)) b!98331))

(declare-fun m!107553 () Bool)

(assert (=> d!26255 m!107553))

(declare-fun m!107555 () Bool)

(assert (=> b!98329 m!107555))

(declare-fun m!107557 () Bool)

(assert (=> b!98329 m!107557))

(assert (=> b!98329 m!107557))

(declare-fun m!107559 () Bool)

(assert (=> b!98329 m!107559))

(assert (=> b!98331 m!107557))

(assert (=> b!98331 m!107557))

(assert (=> b!98331 m!107559))

(assert (=> b!97785 d!26255))

(declare-fun bm!10023 () Bool)

(declare-fun call!10026 () (_ BitVec 32))

(assert (=> bm!10023 (= call!10026 (arrayCountValidKeys!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98332 () Bool)

(declare-fun e!64082 () (_ BitVec 32))

(assert (=> b!98332 (= e!64082 call!10026)))

(declare-fun b!98333 () Bool)

(declare-fun e!64083 () (_ BitVec 32))

(assert (=> b!98333 (= e!64083 #b00000000000000000000000000000000)))

(declare-fun b!98334 () Bool)

(assert (=> b!98334 (= e!64082 (bvadd #b00000000000000000000000000000001 call!10026))))

(declare-fun b!98335 () Bool)

(assert (=> b!98335 (= e!64083 e!64082)))

(declare-fun c!16715 () Bool)

(assert (=> b!98335 (= c!16715 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26257 () Bool)

(declare-fun lt!49357 () (_ BitVec 32))

(assert (=> d!26257 (and (bvsge lt!49357 #b00000000000000000000000000000000) (bvsle lt!49357 (bvsub (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!26257 (= lt!49357 e!64083)))

(declare-fun c!16714 () Bool)

(assert (=> d!26257 (= c!16714 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26257 (and (bvsle #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26257 (= (arrayCountValidKeys!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))) lt!49357)))

(assert (= (and d!26257 c!16714) b!98333))

(assert (= (and d!26257 (not c!16714)) b!98335))

(assert (= (and b!98335 c!16715) b!98334))

(assert (= (and b!98335 (not c!16715)) b!98332))

(assert (= (or b!98334 b!98332) bm!10023))

(declare-fun m!107561 () Bool)

(assert (=> bm!10023 m!107561))

(declare-fun m!107563 () Bool)

(assert (=> b!98335 m!107563))

(assert (=> b!98335 m!107563))

(declare-fun m!107565 () Bool)

(assert (=> b!98335 m!107565))

(assert (=> b!97857 d!26257))

(declare-fun d!26259 () Bool)

(assert (=> d!26259 (= (apply!92 lt!48893 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48893) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4050 () Bool)

(assert (= bs!4050 d!26259))

(assert (=> bs!4050 m!107383))

(assert (=> bs!4050 m!107383))

(declare-fun m!107567 () Bool)

(assert (=> bs!4050 m!107567))

(assert (=> b!97666 d!26259))

(assert (=> b!97919 d!25987))

(assert (=> b!97875 d!26203))

(declare-fun d!26261 () Bool)

(assert (=> d!26261 (= (apply!92 lt!48871 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (getValueByKey!148 (toList!772 lt!48871) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4051 () Bool)

(assert (= bs!4051 d!26261))

(assert (=> bs!4051 m!106375))

(declare-fun m!107569 () Bool)

(assert (=> bs!4051 m!107569))

(assert (=> bs!4051 m!107569))

(declare-fun m!107571 () Bool)

(assert (=> bs!4051 m!107571))

(assert (=> b!97640 d!26261))

(declare-fun d!26263 () Bool)

(declare-fun c!16716 () Bool)

(assert (=> d!26263 (= c!16716 ((_ is ValueCellFull!971) (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64084 () V!3153)

(assert (=> d!26263 (= (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64084)))

(declare-fun b!98336 () Bool)

(assert (=> b!98336 (= e!64084 (get!1286 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98337 () Bool)

(assert (=> b!98337 (= e!64084 (get!1287 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26263 c!16716) b!98336))

(assert (= (and d!26263 (not c!16716)) b!98337))

(assert (=> b!98336 m!106419))

(assert (=> b!98336 m!106421))

(declare-fun m!107573 () Bool)

(assert (=> b!98336 m!107573))

(assert (=> b!98337 m!106419))

(assert (=> b!98337 m!106421))

(declare-fun m!107575 () Bool)

(assert (=> b!98337 m!107575))

(assert (=> b!97640 d!26263))

(assert (=> b!97781 d!25977))

(declare-fun d!26265 () Bool)

(assert (=> d!26265 (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))

(assert (=> d!26265 true))

(declare-fun _$16!117 () Unit!2934)

(assert (=> d!26265 (= (choose!602 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3168 lt!48847) (defaultEntry!2480 newMap!16)) _$16!117)))

(declare-fun bs!4052 () Bool)

(assert (= bs!4052 d!26265))

(assert (=> bs!4052 m!106895))

(assert (=> bs!4052 m!106323))

(assert (=> bs!4052 m!106895))

(assert (=> bs!4052 m!106323))

(assert (=> bs!4052 m!106897))

(assert (=> d!26025 d!26265))

(assert (=> d!26025 d!26053))

(declare-fun d!26267 () Bool)

(declare-fun res!49456 () Bool)

(declare-fun e!64085 () Bool)

(assert (=> d!26267 (=> res!49456 e!64085)))

(assert (=> d!26267 (= res!49456 (and ((_ is Cons!1582) (toList!772 call!9941)) (= (_1!1174 (h!2176 (toList!772 call!9941))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))))

(assert (=> d!26267 (= (containsKey!152 (toList!772 call!9941) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))) e!64085)))

(declare-fun b!98338 () Bool)

(declare-fun e!64086 () Bool)

(assert (=> b!98338 (= e!64085 e!64086)))

(declare-fun res!49457 () Bool)

(assert (=> b!98338 (=> (not res!49457) (not e!64086))))

(assert (=> b!98338 (= res!49457 (and (or (not ((_ is Cons!1582) (toList!772 call!9941))) (bvsle (_1!1174 (h!2176 (toList!772 call!9941))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))) ((_ is Cons!1582) (toList!772 call!9941)) (bvslt (_1!1174 (h!2176 (toList!772 call!9941))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))))

(declare-fun b!98339 () Bool)

(assert (=> b!98339 (= e!64086 (containsKey!152 (t!5531 (toList!772 call!9941)) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (= (and d!26267 (not res!49456)) b!98338))

(assert (= (and b!98338 res!49457) b!98339))

(assert (=> b!98339 m!106323))

(declare-fun m!107577 () Bool)

(assert (=> b!98339 m!107577))

(assert (=> d!26023 d!26267))

(assert (=> bm!9953 d!26153))

(declare-fun d!26269 () Bool)

(declare-fun lt!49358 () Bool)

(assert (=> d!26269 (= lt!49358 (select (content!102 (toList!772 lt!49023)) (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64087 () Bool)

(assert (=> d!26269 (= lt!49358 e!64087)))

(declare-fun res!49459 () Bool)

(assert (=> d!26269 (=> (not res!49459) (not e!64087))))

(assert (=> d!26269 (= res!49459 ((_ is Cons!1582) (toList!772 lt!49023)))))

(assert (=> d!26269 (= (contains!798 (toList!772 lt!49023) (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49358)))

(declare-fun b!98340 () Bool)

(declare-fun e!64088 () Bool)

(assert (=> b!98340 (= e!64087 e!64088)))

(declare-fun res!49458 () Bool)

(assert (=> b!98340 (=> res!49458 e!64088)))

(assert (=> b!98340 (= res!49458 (= (h!2176 (toList!772 lt!49023)) (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98341 () Bool)

(assert (=> b!98341 (= e!64088 (contains!798 (t!5531 (toList!772 lt!49023)) (ite c!16508 (ite c!16499 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26269 res!49459) b!98340))

(assert (= (and b!98340 (not res!49458)) b!98341))

(declare-fun m!107579 () Bool)

(assert (=> d!26269 m!107579))

(declare-fun m!107581 () Bool)

(assert (=> d!26269 m!107581))

(declare-fun m!107583 () Bool)

(assert (=> b!98341 m!107583))

(assert (=> b!97838 d!26269))

(declare-fun d!26271 () Bool)

(assert (=> d!26271 (= (size!2259 newMap!16) (bvadd (_size!474 newMap!16) (bvsdiv (bvadd (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!97848 d!26271))

(declare-fun d!26273 () Bool)

(declare-fun e!64089 () Bool)

(assert (=> d!26273 e!64089))

(declare-fun res!49460 () Bool)

(assert (=> d!26273 (=> res!49460 e!64089)))

(declare-fun lt!49360 () Bool)

(assert (=> d!26273 (= res!49460 (not lt!49360))))

(declare-fun lt!49361 () Bool)

(assert (=> d!26273 (= lt!49360 lt!49361)))

(declare-fun lt!49359 () Unit!2934)

(declare-fun e!64090 () Unit!2934)

(assert (=> d!26273 (= lt!49359 e!64090)))

(declare-fun c!16717 () Bool)

(assert (=> d!26273 (= c!16717 lt!49361)))

(assert (=> d!26273 (= lt!49361 (containsKey!152 (toList!772 lt!48936) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26273 (= (contains!796 lt!48936 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49360)))

(declare-fun b!98342 () Bool)

(declare-fun lt!49362 () Unit!2934)

(assert (=> b!98342 (= e!64090 lt!49362)))

(assert (=> b!98342 (= lt!49362 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48936) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98342 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98343 () Bool)

(declare-fun Unit!2975 () Unit!2934)

(assert (=> b!98343 (= e!64090 Unit!2975)))

(declare-fun b!98344 () Bool)

(assert (=> b!98344 (= e!64089 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26273 c!16717) b!98342))

(assert (= (and d!26273 (not c!16717)) b!98343))

(assert (= (and d!26273 (not res!49460)) b!98344))

(declare-fun m!107585 () Bool)

(assert (=> d!26273 m!107585))

(declare-fun m!107587 () Bool)

(assert (=> b!98342 m!107587))

(assert (=> b!98342 m!106999))

(assert (=> b!98342 m!106999))

(declare-fun m!107589 () Bool)

(assert (=> b!98342 m!107589))

(assert (=> b!98344 m!106999))

(assert (=> b!98344 m!106999))

(assert (=> b!98344 m!107589))

(assert (=> bm!9957 d!26273))

(declare-fun b!98345 () Bool)

(declare-fun e!64092 () Bool)

(declare-fun e!64094 () Bool)

(assert (=> b!98345 (= e!64092 e!64094)))

(declare-fun c!16718 () Bool)

(assert (=> b!98345 (= c!16718 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!26275 () Bool)

(declare-fun res!49463 () Bool)

(declare-fun e!64091 () Bool)

(assert (=> d!26275 (=> res!49463 e!64091)))

(assert (=> d!26275 (= res!49463 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26275 (= (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16578 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584))) e!64091)))

(declare-fun bm!10024 () Bool)

(declare-fun call!10027 () Bool)

(assert (=> bm!10024 (= call!10027 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16718 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16578 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584))) (ite c!16578 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)))))))

(declare-fun b!98346 () Bool)

(declare-fun e!64093 () Bool)

(assert (=> b!98346 (= e!64093 (contains!797 (ite c!16578 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!98347 () Bool)

(assert (=> b!98347 (= e!64094 call!10027)))

(declare-fun b!98348 () Bool)

(assert (=> b!98348 (= e!64094 call!10027)))

(declare-fun b!98349 () Bool)

(assert (=> b!98349 (= e!64091 e!64092)))

(declare-fun res!49462 () Bool)

(assert (=> b!98349 (=> (not res!49462) (not e!64092))))

(assert (=> b!98349 (= res!49462 (not e!64093))))

(declare-fun res!49461 () Bool)

(assert (=> b!98349 (=> (not res!49461) (not e!64093))))

(assert (=> b!98349 (= res!49461 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!26275 (not res!49463)) b!98349))

(assert (= (and b!98349 res!49461) b!98346))

(assert (= (and b!98349 res!49462) b!98345))

(assert (= (and b!98345 c!16718) b!98347))

(assert (= (and b!98345 (not c!16718)) b!98348))

(assert (= (or b!98347 b!98348) bm!10024))

(declare-fun m!107591 () Bool)

(assert (=> b!98345 m!107591))

(assert (=> b!98345 m!107591))

(declare-fun m!107593 () Bool)

(assert (=> b!98345 m!107593))

(assert (=> bm!10024 m!107591))

(declare-fun m!107595 () Bool)

(assert (=> bm!10024 m!107595))

(assert (=> b!98346 m!107591))

(assert (=> b!98346 m!107591))

(declare-fun m!107597 () Bool)

(assert (=> b!98346 m!107597))

(assert (=> b!98349 m!107591))

(assert (=> b!98349 m!107591))

(assert (=> b!98349 m!107593))

(assert (=> bm!9975 d!26275))

(assert (=> b!97637 d!26045))

(declare-fun lt!49363 () Bool)

(declare-fun d!26277 () Bool)

(assert (=> d!26277 (= lt!49363 (select (content!102 (toList!772 lt!49002)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64095 () Bool)

(assert (=> d!26277 (= lt!49363 e!64095)))

(declare-fun res!49465 () Bool)

(assert (=> d!26277 (=> (not res!49465) (not e!64095))))

(assert (=> d!26277 (= res!49465 ((_ is Cons!1582) (toList!772 lt!49002)))))

(assert (=> d!26277 (= (contains!798 (toList!772 lt!49002) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49363)))

(declare-fun b!98350 () Bool)

(declare-fun e!64096 () Bool)

(assert (=> b!98350 (= e!64095 e!64096)))

(declare-fun res!49464 () Bool)

(assert (=> b!98350 (=> res!49464 e!64096)))

(assert (=> b!98350 (= res!49464 (= (h!2176 (toList!772 lt!49002)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98351 () Bool)

(assert (=> b!98351 (= e!64096 (contains!798 (t!5531 (toList!772 lt!49002)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26277 res!49465) b!98350))

(assert (= (and b!98350 (not res!49464)) b!98351))

(declare-fun m!107599 () Bool)

(assert (=> d!26277 m!107599))

(declare-fun m!107601 () Bool)

(assert (=> d!26277 m!107601))

(declare-fun m!107603 () Bool)

(assert (=> b!98351 m!107603))

(assert (=> b!97807 d!26277))

(declare-fun d!26279 () Bool)

(assert (=> d!26279 (= (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!361 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4053 () Bool)

(assert (= bs!4053 d!26279))

(assert (=> bs!4053 m!106487))

(declare-fun m!107605 () Bool)

(assert (=> bs!4053 m!107605))

(assert (=> b!97929 d!26279))

(assert (=> b!97929 d!26057))

(declare-fun d!26281 () Bool)

(assert (=> d!26281 (= (apply!92 lt!48893 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (getValueByKey!148 (toList!772 lt!48893) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4054 () Bool)

(assert (= bs!4054 d!26281))

(assert (=> bs!4054 m!106375))

(assert (=> bs!4054 m!107101))

(assert (=> bs!4054 m!107101))

(declare-fun m!107607 () Bool)

(assert (=> bs!4054 m!107607))

(assert (=> b!97661 d!26281))

(declare-fun d!26283 () Bool)

(declare-fun c!16719 () Bool)

(assert (=> d!26283 (= c!16719 ((_ is ValueCellFull!971) (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000)))))

(declare-fun e!64097 () V!3153)

(assert (=> d!26283 (= (get!1285 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64097)))

(declare-fun b!98352 () Bool)

(assert (=> b!98352 (= e!64097 (get!1286 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98353 () Bool)

(assert (=> b!98353 (= e!64097 (get!1287 (select (arr!2003 (ite c!16508 (_values!2463 newMap!16) lt!48825)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26283 c!16719) b!98352))

(assert (= (and d!26283 (not c!16719)) b!98353))

(assert (=> b!98352 m!106477))

(assert (=> b!98352 m!106421))

(declare-fun m!107609 () Bool)

(assert (=> b!98352 m!107609))

(assert (=> b!98353 m!106477))

(assert (=> b!98353 m!106421))

(declare-fun m!107611 () Bool)

(assert (=> b!98353 m!107611))

(assert (=> b!97661 d!26283))

(assert (=> d!25911 d!26053))

(declare-fun d!26285 () Bool)

(declare-fun e!64098 () Bool)

(assert (=> d!26285 e!64098))

(declare-fun res!49467 () Bool)

(assert (=> d!26285 (=> (not res!49467) (not e!64098))))

(declare-fun lt!49367 () ListLongMap!1513)

(assert (=> d!26285 (= res!49467 (contains!796 lt!49367 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49365 () List!1586)

(assert (=> d!26285 (= lt!49367 (ListLongMap!1514 lt!49365))))

(declare-fun lt!49366 () Unit!2934)

(declare-fun lt!49364 () Unit!2934)

(assert (=> d!26285 (= lt!49366 lt!49364)))

(assert (=> d!26285 (= (getValueByKey!148 lt!49365 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26285 (= lt!49364 (lemmaContainsTupThenGetReturnValue!67 lt!49365 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26285 (= lt!49365 (insertStrictlySorted!70 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26285 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49367)))

(declare-fun b!98354 () Bool)

(declare-fun res!49466 () Bool)

(assert (=> b!98354 (=> (not res!49466) (not e!64098))))

(assert (=> b!98354 (= res!49466 (= (getValueByKey!148 (toList!772 lt!49367) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98355 () Bool)

(assert (=> b!98355 (= e!64098 (contains!798 (toList!772 lt!49367) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26285 res!49467) b!98354))

(assert (= (and b!98354 res!49466) b!98355))

(declare-fun m!107613 () Bool)

(assert (=> d!26285 m!107613))

(declare-fun m!107615 () Bool)

(assert (=> d!26285 m!107615))

(declare-fun m!107617 () Bool)

(assert (=> d!26285 m!107617))

(declare-fun m!107619 () Bool)

(assert (=> d!26285 m!107619))

(declare-fun m!107621 () Bool)

(assert (=> b!98354 m!107621))

(declare-fun m!107623 () Bool)

(assert (=> b!98355 m!107623))

(assert (=> d!25997 d!26285))

(assert (=> d!25997 d!25911))

(declare-fun d!26287 () Bool)

(assert (=> d!26287 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26287 true))

(declare-fun _$8!85 () Unit!2934)

(assert (=> d!26287 (= (choose!600 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) _$8!85)))

(declare-fun bs!4055 () Bool)

(assert (= bs!4055 d!26287))

(assert (=> bs!4055 m!106217))

(assert (=> bs!4055 m!106217))

(assert (=> bs!4055 m!106783))

(assert (=> bs!4055 m!106121))

(assert (=> bs!4055 m!106787))

(assert (=> d!25997 d!26287))

(assert (=> d!25997 d!26053))

(declare-fun e!64111 () ListLongMap!1513)

(declare-fun call!10033 () ListLongMap!1513)

(declare-fun b!98356 () Bool)

(assert (=> b!98356 (= e!64111 (+!128 call!10033 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98357 () Bool)

(declare-fun e!64100 () Bool)

(declare-fun e!64109 () Bool)

(assert (=> b!98357 (= e!64100 e!64109)))

(declare-fun res!49471 () Bool)

(assert (=> b!98357 (=> (not res!49471) (not e!64109))))

(declare-fun lt!49382 () ListLongMap!1513)

(assert (=> b!98357 (= res!49471 (contains!796 lt!49382 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98357 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!10025 () Bool)

(declare-fun call!10032 () Bool)

(assert (=> bm!10025 (= call!10032 (contains!796 lt!49382 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98358 () Bool)

(declare-fun e!64108 () Bool)

(declare-fun call!10030 () Bool)

(assert (=> b!98358 (= e!64108 (not call!10030))))

(declare-fun b!98359 () Bool)

(declare-fun e!64105 () Bool)

(assert (=> b!98359 (= e!64105 (not call!10032))))

(declare-fun b!98360 () Bool)

(declare-fun e!64104 () Bool)

(assert (=> b!98360 (= e!64105 e!64104)))

(declare-fun res!49472 () Bool)

(assert (=> b!98360 (= res!49472 call!10032)))

(assert (=> b!98360 (=> (not res!49472) (not e!64104))))

(declare-fun b!98361 () Bool)

(declare-fun e!64107 () Bool)

(assert (=> b!98361 (= e!64107 e!64108)))

(declare-fun c!16720 () Bool)

(assert (=> b!98361 (= c!16720 (not (= (bvand lt!48837 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10026 () Bool)

(assert (=> bm!10026 (= call!10030 (contains!796 lt!49382 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98362 () Bool)

(declare-fun e!64102 () Bool)

(assert (=> b!98362 (= e!64102 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10027 () Bool)

(declare-fun call!10029 () ListLongMap!1513)

(declare-fun call!10028 () ListLongMap!1513)

(assert (=> bm!10027 (= call!10029 call!10028)))

(declare-fun b!98363 () Bool)

(declare-fun e!64106 () ListLongMap!1513)

(declare-fun call!10031 () ListLongMap!1513)

(assert (=> b!98363 (= e!64106 call!10031)))

(declare-fun b!98364 () Bool)

(declare-fun c!16724 () Bool)

(assert (=> b!98364 (= c!16724 (and (not (= (bvand lt!48837 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48837 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64101 () ListLongMap!1513)

(assert (=> b!98364 (= e!64106 e!64101)))

(declare-fun b!98365 () Bool)

(assert (=> b!98365 (= e!64109 (= (apply!92 lt!49382 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98365 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (_values!2463 newMap!16))))))

(assert (=> b!98365 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98366 () Bool)

(assert (=> b!98366 (= e!64111 e!64106)))

(declare-fun c!16722 () Bool)

(assert (=> b!98366 (= c!16722 (and (not (= (bvand lt!48837 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48837 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10028 () Bool)

(declare-fun call!10034 () ListLongMap!1513)

(declare-fun c!16723 () Bool)

(assert (=> bm!10028 (= call!10033 (+!128 (ite c!16723 call!10028 (ite c!16722 call!10029 call!10034)) (ite (or c!16723 c!16722) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10029 () Bool)

(assert (=> bm!10029 (= call!10028 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98367 () Bool)

(assert (=> b!98367 (= e!64104 (= (apply!92 lt!49382 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98368 () Bool)

(assert (=> b!98368 (= e!64101 call!10031)))

(declare-fun b!98369 () Bool)

(declare-fun e!64103 () Unit!2934)

(declare-fun lt!49385 () Unit!2934)

(assert (=> b!98369 (= e!64103 lt!49385)))

(declare-fun lt!49371 () ListLongMap!1513)

(assert (=> b!98369 (= lt!49371 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49386 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49386 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49368 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49368 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49377 () Unit!2934)

(assert (=> b!98369 (= lt!49377 (addStillContains!68 lt!49371 lt!49386 (zeroValue!2363 newMap!16) lt!49368))))

(assert (=> b!98369 (contains!796 (+!128 lt!49371 (tuple2!2327 lt!49386 (zeroValue!2363 newMap!16))) lt!49368)))

(declare-fun lt!49383 () Unit!2934)

(assert (=> b!98369 (= lt!49383 lt!49377)))

(declare-fun lt!49384 () ListLongMap!1513)

(assert (=> b!98369 (= lt!49384 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49375 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49375 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49380 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49380 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49374 () Unit!2934)

(assert (=> b!98369 (= lt!49374 (addApplyDifferent!68 lt!49384 lt!49375 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49380))))

(assert (=> b!98369 (= (apply!92 (+!128 lt!49384 (tuple2!2327 lt!49375 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49380) (apply!92 lt!49384 lt!49380))))

(declare-fun lt!49376 () Unit!2934)

(assert (=> b!98369 (= lt!49376 lt!49374)))

(declare-fun lt!49381 () ListLongMap!1513)

(assert (=> b!98369 (= lt!49381 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49388 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49388 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49379 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49379 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49387 () Unit!2934)

(assert (=> b!98369 (= lt!49387 (addApplyDifferent!68 lt!49381 lt!49388 (zeroValue!2363 newMap!16) lt!49379))))

(assert (=> b!98369 (= (apply!92 (+!128 lt!49381 (tuple2!2327 lt!49388 (zeroValue!2363 newMap!16))) lt!49379) (apply!92 lt!49381 lt!49379))))

(declare-fun lt!49389 () Unit!2934)

(assert (=> b!98369 (= lt!49389 lt!49387)))

(declare-fun lt!49378 () ListLongMap!1513)

(assert (=> b!98369 (= lt!49378 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49369 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49369 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49370 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49370 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98369 (= lt!49385 (addApplyDifferent!68 lt!49378 lt!49369 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49370))))

(assert (=> b!98369 (= (apply!92 (+!128 lt!49378 (tuple2!2327 lt!49369 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49370) (apply!92 lt!49378 lt!49370))))

(declare-fun b!98370 () Bool)

(declare-fun e!64110 () Bool)

(assert (=> b!98370 (= e!64110 (= (apply!92 lt!49382 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10030 () Bool)

(assert (=> bm!10030 (= call!10031 call!10033)))

(declare-fun b!98371 () Bool)

(assert (=> b!98371 (= e!64101 call!10034)))

(declare-fun b!98372 () Bool)

(declare-fun Unit!2976 () Unit!2934)

(assert (=> b!98372 (= e!64103 Unit!2976)))

(declare-fun b!98373 () Bool)

(declare-fun e!64099 () Bool)

(assert (=> b!98373 (= e!64099 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98374 () Bool)

(declare-fun res!49470 () Bool)

(assert (=> b!98374 (=> (not res!49470) (not e!64107))))

(assert (=> b!98374 (= res!49470 e!64105)))

(declare-fun c!16721 () Bool)

(assert (=> b!98374 (= c!16721 (not (= (bvand lt!48837 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26289 () Bool)

(assert (=> d!26289 e!64107))

(declare-fun res!49473 () Bool)

(assert (=> d!26289 (=> (not res!49473) (not e!64107))))

(assert (=> d!26289 (= res!49473 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!49373 () ListLongMap!1513)

(assert (=> d!26289 (= lt!49382 lt!49373)))

(declare-fun lt!49372 () Unit!2934)

(assert (=> d!26289 (= lt!49372 e!64103)))

(declare-fun c!16725 () Bool)

(assert (=> d!26289 (= c!16725 e!64099)))

(declare-fun res!49469 () Bool)

(assert (=> d!26289 (=> (not res!49469) (not e!64099))))

(assert (=> d!26289 (= res!49469 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26289 (= lt!49373 e!64111)))

(assert (=> d!26289 (= c!16723 (and (not (= (bvand lt!48837 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48837 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26289 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26289 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48837 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49382)))

(declare-fun bm!10031 () Bool)

(assert (=> bm!10031 (= call!10034 call!10029)))

(declare-fun b!98375 () Bool)

(assert (=> b!98375 (= e!64108 e!64110)))

(declare-fun res!49474 () Bool)

(assert (=> b!98375 (= res!49474 call!10030)))

(assert (=> b!98375 (=> (not res!49474) (not e!64110))))

(declare-fun b!98376 () Bool)

(declare-fun res!49475 () Bool)

(assert (=> b!98376 (=> (not res!49475) (not e!64107))))

(assert (=> b!98376 (= res!49475 e!64100)))

(declare-fun res!49476 () Bool)

(assert (=> b!98376 (=> res!49476 e!64100)))

(assert (=> b!98376 (= res!49476 (not e!64102))))

(declare-fun res!49468 () Bool)

(assert (=> b!98376 (=> (not res!49468) (not e!64102))))

(assert (=> b!98376 (= res!49468 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!26289 c!16723) b!98356))

(assert (= (and d!26289 (not c!16723)) b!98366))

(assert (= (and b!98366 c!16722) b!98363))

(assert (= (and b!98366 (not c!16722)) b!98364))

(assert (= (and b!98364 c!16724) b!98368))

(assert (= (and b!98364 (not c!16724)) b!98371))

(assert (= (or b!98368 b!98371) bm!10031))

(assert (= (or b!98363 bm!10031) bm!10027))

(assert (= (or b!98363 b!98368) bm!10030))

(assert (= (or b!98356 bm!10027) bm!10029))

(assert (= (or b!98356 bm!10030) bm!10028))

(assert (= (and d!26289 res!49469) b!98373))

(assert (= (and d!26289 c!16725) b!98369))

(assert (= (and d!26289 (not c!16725)) b!98372))

(assert (= (and d!26289 res!49473) b!98376))

(assert (= (and b!98376 res!49468) b!98362))

(assert (= (and b!98376 (not res!49476)) b!98357))

(assert (= (and b!98357 res!49471) b!98365))

(assert (= (and b!98376 res!49475) b!98374))

(assert (= (and b!98374 c!16721) b!98360))

(assert (= (and b!98374 (not c!16721)) b!98359))

(assert (= (and b!98360 res!49472) b!98367))

(assert (= (or b!98360 b!98359) bm!10025))

(assert (= (and b!98374 res!49470) b!98361))

(assert (= (and b!98361 c!16720) b!98375))

(assert (= (and b!98361 (not c!16720)) b!98358))

(assert (= (and b!98375 res!49474) b!98370))

(assert (= (or b!98375 b!98358) bm!10026))

(declare-fun b_lambda!4363 () Bool)

(assert (=> (not b_lambda!4363) (not b!98365)))

(assert (=> b!98365 t!5544))

(declare-fun b_and!6033 () Bool)

(assert (= b_and!6029 (and (=> t!5544 result!3271) b_and!6033)))

(assert (=> b!98365 t!5546))

(declare-fun b_and!6035 () Bool)

(assert (= b_and!6031 (and (=> t!5546 result!3273) b_and!6035)))

(assert (=> b!98357 m!106375))

(assert (=> b!98357 m!106375))

(declare-fun m!107625 () Bool)

(assert (=> b!98357 m!107625))

(declare-fun m!107627 () Bool)

(assert (=> b!98369 m!107627))

(declare-fun m!107629 () Bool)

(assert (=> b!98369 m!107629))

(declare-fun m!107631 () Bool)

(assert (=> b!98369 m!107631))

(assert (=> b!98369 m!107631))

(declare-fun m!107633 () Bool)

(assert (=> b!98369 m!107633))

(declare-fun m!107635 () Bool)

(assert (=> b!98369 m!107635))

(declare-fun m!107637 () Bool)

(assert (=> b!98369 m!107637))

(declare-fun m!107639 () Bool)

(assert (=> b!98369 m!107639))

(declare-fun m!107641 () Bool)

(assert (=> b!98369 m!107641))

(assert (=> b!98369 m!107629))

(declare-fun m!107643 () Bool)

(assert (=> b!98369 m!107643))

(declare-fun m!107645 () Bool)

(assert (=> b!98369 m!107645))

(declare-fun m!107647 () Bool)

(assert (=> b!98369 m!107647))

(assert (=> b!98369 m!106121))

(declare-fun m!107649 () Bool)

(assert (=> b!98369 m!107649))

(assert (=> b!98369 m!106375))

(assert (=> b!98369 m!107639))

(assert (=> b!98369 m!106121))

(declare-fun m!107651 () Bool)

(assert (=> b!98369 m!107651))

(assert (=> b!98369 m!106121))

(declare-fun m!107653 () Bool)

(assert (=> b!98369 m!107653))

(declare-fun m!107655 () Bool)

(assert (=> b!98369 m!107655))

(declare-fun m!107657 () Bool)

(assert (=> b!98369 m!107657))

(assert (=> b!98369 m!107645))

(declare-fun m!107659 () Bool)

(assert (=> bm!10025 m!107659))

(declare-fun m!107661 () Bool)

(assert (=> b!98356 m!107661))

(declare-fun m!107663 () Bool)

(assert (=> bm!10026 m!107663))

(declare-fun m!107665 () Bool)

(assert (=> b!98370 m!107665))

(assert (=> b!98365 m!106375))

(assert (=> b!98365 m!106419))

(assert (=> b!98365 m!106421))

(assert (=> b!98365 m!106423))

(assert (=> b!98365 m!106375))

(declare-fun m!107667 () Bool)

(assert (=> b!98365 m!107667))

(assert (=> b!98365 m!106419))

(assert (=> b!98365 m!106421))

(assert (=> d!26289 m!106427))

(declare-fun m!107669 () Bool)

(assert (=> bm!10028 m!107669))

(assert (=> b!98362 m!106375))

(assert (=> b!98362 m!106375))

(assert (=> b!98362 m!106431))

(assert (=> bm!10029 m!106121))

(assert (=> bm!10029 m!107651))

(assert (=> b!98373 m!106375))

(assert (=> b!98373 m!106375))

(assert (=> b!98373 m!106431))

(declare-fun m!107671 () Bool)

(assert (=> b!98367 m!107671))

(assert (=> d!25997 d!26289))

(assert (=> b!97658 d!26045))

(declare-fun b!98378 () Bool)

(declare-fun e!64112 () Option!154)

(declare-fun e!64113 () Option!154)

(assert (=> b!98378 (= e!64112 e!64113)))

(declare-fun c!16727 () Bool)

(assert (=> b!98378 (= c!16727 (and ((_ is Cons!1582) (toList!772 lt!48982)) (not (= (_1!1174 (h!2176 (toList!772 lt!48982))) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98379 () Bool)

(assert (=> b!98379 (= e!64113 (getValueByKey!148 (t!5531 (toList!772 lt!48982)) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98377 () Bool)

(assert (=> b!98377 (= e!64112 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48982)))))))

(declare-fun c!16726 () Bool)

(declare-fun d!26291 () Bool)

(assert (=> d!26291 (= c!16726 (and ((_ is Cons!1582) (toList!772 lt!48982)) (= (_1!1174 (h!2176 (toList!772 lt!48982))) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26291 (= (getValueByKey!148 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64112)))

(declare-fun b!98380 () Bool)

(assert (=> b!98380 (= e!64113 None!152)))

(assert (= (and d!26291 c!16726) b!98377))

(assert (= (and d!26291 (not c!16726)) b!98378))

(assert (= (and b!98378 c!16727) b!98379))

(assert (= (and b!98378 (not c!16727)) b!98380))

(declare-fun m!107673 () Bool)

(assert (=> b!98379 m!107673))

(assert (=> b!97796 d!26291))

(assert (=> d!26011 d!26221))

(declare-fun d!26293 () Bool)

(declare-fun res!49477 () Bool)

(declare-fun e!64114 () Bool)

(assert (=> d!26293 (=> res!49477 e!64114)))

(assert (=> d!26293 (= res!49477 (= (select (arr!2002 lt!49126) #b00000000000000000000000000000000) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26293 (= (arrayContainsKey!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64114)))

(declare-fun b!98381 () Bool)

(declare-fun e!64115 () Bool)

(assert (=> b!98381 (= e!64114 e!64115)))

(declare-fun res!49478 () Bool)

(assert (=> b!98381 (=> (not res!49478) (not e!64115))))

(assert (=> b!98381 (= res!49478 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 lt!49126)))))

(declare-fun b!98382 () Bool)

(assert (=> b!98382 (= e!64115 (arrayContainsKey!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26293 (not res!49477)) b!98381))

(assert (= (and b!98381 res!49478) b!98382))

(declare-fun m!107675 () Bool)

(assert (=> d!26293 m!107675))

(assert (=> b!98382 m!106105))

(declare-fun m!107677 () Bool)

(assert (=> b!98382 m!107677))

(assert (=> d!26011 d!26293))

(declare-fun d!26295 () Bool)

(assert (=> d!26295 (= (arrayCountValidKeys!0 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!49392 () Unit!2934)

(declare-fun choose!2 (array!4217 (_ BitVec 32)) Unit!2934)

(assert (=> d!26295 (= lt!49392 (choose!2 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(declare-fun e!64118 () Bool)

(assert (=> d!26295 e!64118))

(declare-fun res!49483 () Bool)

(assert (=> d!26295 (=> (not res!49483) (not e!64118))))

(assert (=> d!26295 (= res!49483 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 lt!49120))))))

(assert (=> d!26295 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))) lt!49392)))

(declare-fun b!98387 () Bool)

(declare-fun res!49484 () Bool)

(assert (=> b!98387 (=> (not res!49484) (not e!64118))))

(assert (=> b!98387 (= res!49484 (validKeyInArray!0 (select (arr!2002 lt!49120) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(declare-fun b!98388 () Bool)

(assert (=> b!98388 (= e!64118 (bvslt (size!2253 lt!49120) #b01111111111111111111111111111111))))

(assert (= (and d!26295 res!49483) b!98387))

(assert (= (and b!98387 res!49484) b!98388))

(assert (=> d!26295 m!106827))

(declare-fun m!107679 () Bool)

(assert (=> d!26295 m!107679))

(declare-fun m!107681 () Bool)

(assert (=> b!98387 m!107681))

(assert (=> b!98387 m!107681))

(declare-fun m!107683 () Bool)

(assert (=> b!98387 m!107683))

(assert (=> d!26011 d!26295))

(declare-fun b!98389 () Bool)

(declare-fun e!64120 () Bool)

(declare-fun e!64122 () Bool)

(assert (=> b!98389 (= e!64120 e!64122)))

(declare-fun c!16728 () Bool)

(assert (=> b!98389 (= c!16728 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) lt!49109)))))

(declare-fun d!26297 () Bool)

(declare-fun res!49487 () Bool)

(declare-fun e!64119 () Bool)

(assert (=> d!26297 (=> res!49487 e!64119)))

(assert (=> d!26297 (= res!49487 (bvsge lt!49109 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(assert (=> d!26297 (= (arrayNoDuplicates!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) lt!49109 lt!49105) e!64119)))

(declare-fun bm!10032 () Bool)

(declare-fun call!10035 () Bool)

(assert (=> bm!10032 (= call!10035 (arrayNoDuplicates!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (bvadd lt!49109 #b00000000000000000000000000000001) (ite c!16728 (Cons!1583 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) lt!49109) lt!49105) lt!49105)))))

(declare-fun b!98390 () Bool)

(declare-fun e!64121 () Bool)

(assert (=> b!98390 (= e!64121 (contains!797 lt!49105 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) lt!49109)))))

(declare-fun b!98391 () Bool)

(assert (=> b!98391 (= e!64122 call!10035)))

(declare-fun b!98392 () Bool)

(assert (=> b!98392 (= e!64122 call!10035)))

(declare-fun b!98393 () Bool)

(assert (=> b!98393 (= e!64119 e!64120)))

(declare-fun res!49486 () Bool)

(assert (=> b!98393 (=> (not res!49486) (not e!64120))))

(assert (=> b!98393 (= res!49486 (not e!64121))))

(declare-fun res!49485 () Bool)

(assert (=> b!98393 (=> (not res!49485) (not e!64121))))

(assert (=> b!98393 (= res!49485 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) lt!49109)))))

(assert (= (and d!26297 (not res!49487)) b!98393))

(assert (= (and b!98393 res!49485) b!98390))

(assert (= (and b!98393 res!49486) b!98389))

(assert (= (and b!98389 c!16728) b!98391))

(assert (= (and b!98389 (not c!16728)) b!98392))

(assert (= (or b!98391 b!98392) bm!10032))

(declare-fun m!107685 () Bool)

(assert (=> b!98389 m!107685))

(assert (=> b!98389 m!107685))

(declare-fun m!107687 () Bool)

(assert (=> b!98389 m!107687))

(assert (=> bm!10032 m!107685))

(declare-fun m!107689 () Bool)

(assert (=> bm!10032 m!107689))

(assert (=> b!98390 m!107685))

(assert (=> b!98390 m!107685))

(declare-fun m!107691 () Bool)

(assert (=> b!98390 m!107691))

(assert (=> b!98393 m!107685))

(assert (=> b!98393 m!107685))

(assert (=> b!98393 m!107687))

(assert (=> d!26011 d!26297))

(declare-fun d!26299 () Bool)

(assert (=> d!26299 (arrayContainsKey!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!49393 () Unit!2934)

(assert (=> d!26299 (= lt!49393 (choose!13 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))

(assert (=> d!26299 (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000)))

(assert (=> d!26299 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49126 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))) lt!49393)))

(declare-fun bs!4056 () Bool)

(assert (= bs!4056 d!26299))

(assert (=> bs!4056 m!106105))

(assert (=> bs!4056 m!106857))

(assert (=> bs!4056 m!106105))

(declare-fun m!107693 () Bool)

(assert (=> bs!4056 m!107693))

(assert (=> d!26011 d!26299))

(declare-fun d!26301 () Bool)

(declare-fun e!64123 () Bool)

(assert (=> d!26301 e!64123))

(declare-fun res!49488 () Bool)

(assert (=> d!26301 (=> res!49488 e!64123)))

(declare-fun lt!49395 () Bool)

(assert (=> d!26301 (= res!49488 (not lt!49395))))

(declare-fun lt!49396 () Bool)

(assert (=> d!26301 (= lt!49395 lt!49396)))

(declare-fun lt!49394 () Unit!2934)

(declare-fun e!64124 () Unit!2934)

(assert (=> d!26301 (= lt!49394 e!64124)))

(declare-fun c!16729 () Bool)

(assert (=> d!26301 (= c!16729 lt!49396)))

(assert (=> d!26301 (= lt!49396 (containsKey!152 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26301 (= (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49395)))

(declare-fun b!98394 () Bool)

(declare-fun lt!49397 () Unit!2934)

(assert (=> b!98394 (= e!64124 lt!49397)))

(assert (=> b!98394 (= lt!49397 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!98394 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98395 () Bool)

(declare-fun Unit!2977 () Unit!2934)

(assert (=> b!98395 (= e!64124 Unit!2977)))

(declare-fun b!98396 () Bool)

(assert (=> b!98396 (= e!64123 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!26301 c!16729) b!98394))

(assert (= (and d!26301 (not c!16729)) b!98395))

(assert (= (and d!26301 (not res!49488)) b!98396))

(assert (=> d!26301 m!106105))

(declare-fun m!107695 () Bool)

(assert (=> d!26301 m!107695))

(assert (=> b!98394 m!106105))

(declare-fun m!107697 () Bool)

(assert (=> b!98394 m!107697))

(assert (=> b!98394 m!106105))

(declare-fun m!107699 () Bool)

(assert (=> b!98394 m!107699))

(assert (=> b!98394 m!107699))

(declare-fun m!107701 () Bool)

(assert (=> b!98394 m!107701))

(assert (=> b!98396 m!106105))

(assert (=> b!98396 m!107699))

(assert (=> b!98396 m!107699))

(assert (=> b!98396 m!107701))

(assert (=> d!26011 d!26301))

(assert (=> d!26011 d!25911))

(assert (=> d!26011 d!25907))

(assert (=> d!26011 d!26001))

(declare-fun d!26303 () Bool)

(declare-fun e!64127 () Bool)

(assert (=> d!26303 e!64127))

(declare-fun res!49491 () Bool)

(assert (=> d!26303 (=> (not res!49491) (not e!64127))))

(assert (=> d!26303 (= res!49491 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 (_keys!4169 newMap!16))) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2254 (_values!2463 newMap!16)))))))

(declare-fun lt!49400 () Unit!2934)

(declare-fun choose!606 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2934)

(assert (=> d!26303 (= lt!49400 (choose!606 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26303 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26303 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!49400)))

(declare-fun b!98399 () Bool)

(assert (=> b!98399 (= e!64127 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))))

(assert (= (and d!26303 res!49491) b!98399))

(assert (=> d!26303 m!106105))

(assert (=> d!26303 m!106121))

(declare-fun m!107703 () Bool)

(assert (=> d!26303 m!107703))

(assert (=> d!26303 m!106427))

(assert (=> b!98399 m!106217))

(assert (=> b!98399 m!106831))

(assert (=> b!98399 m!106853))

(assert (=> b!98399 m!106851))

(assert (=> b!98399 m!106217))

(assert (=> b!98399 m!106845))

(assert (=> d!26011 d!26303))

(declare-fun d!26305 () Bool)

(declare-fun e!64130 () Bool)

(assert (=> d!26305 e!64130))

(declare-fun res!49494 () Bool)

(assert (=> d!26305 (=> (not res!49494) (not e!64130))))

(assert (=> d!26305 (= res!49494 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 (_keys!4169 newMap!16)))))))

(declare-fun lt!49403 () Unit!2934)

(declare-fun choose!102 ((_ BitVec 64) array!4217 (_ BitVec 32) (_ BitVec 32)) Unit!2934)

(assert (=> d!26305 (= lt!49403 (choose!102 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (mask!6576 newMap!16)))))

(assert (=> d!26305 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26305 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (mask!6576 newMap!16)) lt!49403)))

(declare-fun b!98402 () Bool)

(assert (=> b!98402 (= e!64130 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (mask!6576 newMap!16)))))

(assert (= (and d!26305 res!49494) b!98402))

(assert (=> d!26305 m!106105))

(declare-fun m!107705 () Bool)

(assert (=> d!26305 m!107705))

(assert (=> d!26305 m!106427))

(assert (=> b!98402 m!106845))

(assert (=> b!98402 m!106843))

(assert (=> d!26011 d!26305))

(declare-fun d!26307 () Bool)

(declare-fun e!64131 () Bool)

(assert (=> d!26307 e!64131))

(declare-fun res!49495 () Bool)

(assert (=> d!26307 (=> (not res!49495) (not e!64131))))

(assert (=> d!26307 (= res!49495 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 lt!49131))))))

(declare-fun lt!49404 () Unit!2934)

(assert (=> d!26307 (= lt!49404 (choose!602 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26307 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26307 (= (lemmaValidKeyInArrayIsInListMap!100 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (defaultEntry!2480 newMap!16)) lt!49404)))

(declare-fun b!98403 () Bool)

(assert (=> b!98403 (= e!64131 (contains!796 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 lt!49131) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(assert (= (and d!26307 res!49495) b!98403))

(declare-fun m!107707 () Bool)

(assert (=> d!26307 m!107707))

(assert (=> d!26307 m!106427))

(assert (=> b!98403 m!106833))

(declare-fun m!107709 () Bool)

(assert (=> b!98403 m!107709))

(assert (=> b!98403 m!106833))

(assert (=> b!98403 m!107709))

(declare-fun m!107711 () Bool)

(assert (=> b!98403 m!107711))

(assert (=> d!26011 d!26307))

(declare-fun b!98414 () Bool)

(declare-fun e!64137 () Bool)

(assert (=> b!98414 (= e!64137 (bvslt (size!2253 (_keys!4169 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!98412 () Bool)

(declare-fun res!49506 () Bool)

(assert (=> b!98412 (=> (not res!49506) (not e!64137))))

(assert (=> b!98412 (= res!49506 (not (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))))

(declare-fun b!98413 () Bool)

(declare-fun res!49504 () Bool)

(assert (=> b!98413 (=> (not res!49504) (not e!64137))))

(assert (=> b!98413 (= res!49504 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98415 () Bool)

(declare-fun e!64136 () Bool)

(assert (=> b!98415 (= e!64136 (= (arrayCountValidKeys!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4169 newMap!16) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun d!26309 () Bool)

(assert (=> d!26309 e!64136))

(declare-fun res!49507 () Bool)

(assert (=> d!26309 (=> (not res!49507) (not e!64136))))

(assert (=> d!26309 (= res!49507 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 (_keys!4169 newMap!16)))))))

(declare-fun lt!49407 () Unit!2934)

(declare-fun choose!1 (array!4217 (_ BitVec 32) (_ BitVec 64)) Unit!2934)

(assert (=> d!26309 (= lt!49407 (choose!1 (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26309 e!64137))

(declare-fun res!49505 () Bool)

(assert (=> d!26309 (=> (not res!49505) (not e!64137))))

(assert (=> d!26309 (= res!49505 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 (_keys!4169 newMap!16)))))))

(assert (=> d!26309 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4169 newMap!16) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49407)))

(assert (= (and d!26309 res!49505) b!98412))

(assert (= (and b!98412 res!49506) b!98413))

(assert (= (and b!98413 res!49504) b!98414))

(assert (= (and d!26309 res!49507) b!98415))

(declare-fun m!107713 () Bool)

(assert (=> b!98412 m!107713))

(assert (=> b!98412 m!107713))

(declare-fun m!107715 () Bool)

(assert (=> b!98412 m!107715))

(assert (=> b!98413 m!106105))

(assert (=> b!98413 m!106349))

(assert (=> b!98415 m!106845))

(assert (=> b!98415 m!106839))

(assert (=> b!98415 m!106357))

(assert (=> d!26309 m!106105))

(declare-fun m!107717 () Bool)

(assert (=> d!26309 m!107717))

(assert (=> d!26011 d!26309))

(declare-fun bm!10033 () Bool)

(declare-fun call!10036 () (_ BitVec 32))

(assert (=> bm!10033 (= call!10036 (arrayCountValidKeys!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98416 () Bool)

(declare-fun e!64138 () (_ BitVec 32))

(assert (=> b!98416 (= e!64138 call!10036)))

(declare-fun b!98417 () Bool)

(declare-fun e!64139 () (_ BitVec 32))

(assert (=> b!98417 (= e!64139 #b00000000000000000000000000000000)))

(declare-fun b!98418 () Bool)

(assert (=> b!98418 (= e!64138 (bvadd #b00000000000000000000000000000001 call!10036))))

(declare-fun b!98419 () Bool)

(assert (=> b!98419 (= e!64139 e!64138)))

(declare-fun c!16731 () Bool)

(assert (=> b!98419 (= c!16731 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun lt!49408 () (_ BitVec 32))

(declare-fun d!26311 () Bool)

(assert (=> d!26311 (and (bvsge lt!49408 #b00000000000000000000000000000000) (bvsle lt!49408 (bvsub (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!26311 (= lt!49408 e!64139)))

(declare-fun c!16730 () Bool)

(assert (=> d!26311 (= c!16730 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26311 (and (bvsle #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2253 (_keys!4169 newMap!16)) (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(assert (=> d!26311 (= (arrayCountValidKeys!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) lt!49408)))

(assert (= (and d!26311 c!16730) b!98417))

(assert (= (and d!26311 (not c!16730)) b!98419))

(assert (= (and b!98419 c!16731) b!98418))

(assert (= (and b!98419 (not c!16731)) b!98416))

(assert (= (or b!98418 b!98416) bm!10033))

(declare-fun m!107719 () Bool)

(assert (=> bm!10033 m!107719))

(declare-fun m!107721 () Bool)

(assert (=> b!98419 m!107721))

(assert (=> b!98419 m!107721))

(declare-fun m!107723 () Bool)

(assert (=> b!98419 m!107723))

(assert (=> d!26011 d!26311))

(assert (=> d!26011 d!26019))

(declare-fun d!26313 () Bool)

(declare-fun res!49509 () Bool)

(declare-fun e!64141 () Bool)

(assert (=> d!26313 (=> res!49509 e!64141)))

(assert (=> d!26313 (= res!49509 (bvsge #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(assert (=> d!26313 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (mask!6576 newMap!16)) e!64141)))

(declare-fun b!98420 () Bool)

(declare-fun e!64140 () Bool)

(assert (=> b!98420 (= e!64141 e!64140)))

(declare-fun c!16732 () Bool)

(assert (=> b!98420 (= c!16732 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98421 () Bool)

(declare-fun e!64142 () Bool)

(assert (=> b!98421 (= e!64140 e!64142)))

(declare-fun lt!49410 () (_ BitVec 64))

(assert (=> b!98421 (= lt!49410 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49411 () Unit!2934)

(assert (=> b!98421 (= lt!49411 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) lt!49410 #b00000000000000000000000000000000))))

(assert (=> b!98421 (arrayContainsKey!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) lt!49410 #b00000000000000000000000000000000)))

(declare-fun lt!49409 () Unit!2934)

(assert (=> b!98421 (= lt!49409 lt!49411)))

(declare-fun res!49508 () Bool)

(assert (=> b!98421 (= res!49508 (= (seekEntryOrOpen!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000) (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (mask!6576 newMap!16)) (Found!256 #b00000000000000000000000000000000)))))

(assert (=> b!98421 (=> (not res!49508) (not e!64142))))

(declare-fun b!98422 () Bool)

(declare-fun call!10037 () Bool)

(assert (=> b!98422 (= e!64140 call!10037)))

(declare-fun b!98423 () Bool)

(assert (=> b!98423 (= e!64142 call!10037)))

(declare-fun bm!10034 () Bool)

(assert (=> bm!10034 (= call!10037 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (mask!6576 newMap!16)))))

(assert (= (and d!26313 (not res!49509)) b!98420))

(assert (= (and b!98420 c!16732) b!98421))

(assert (= (and b!98420 (not c!16732)) b!98422))

(assert (= (and b!98421 res!49508) b!98423))

(assert (= (or b!98423 b!98422) bm!10034))

(assert (=> b!98420 m!107721))

(assert (=> b!98420 m!107721))

(assert (=> b!98420 m!107723))

(assert (=> b!98421 m!107721))

(declare-fun m!107725 () Bool)

(assert (=> b!98421 m!107725))

(declare-fun m!107727 () Bool)

(assert (=> b!98421 m!107727))

(assert (=> b!98421 m!107721))

(declare-fun m!107729 () Bool)

(assert (=> b!98421 m!107729))

(declare-fun m!107731 () Bool)

(assert (=> bm!10034 m!107731))

(assert (=> d!26011 d!26313))

(declare-fun b!98424 () Bool)

(declare-fun e!64155 () ListLongMap!1513)

(declare-fun call!10043 () ListLongMap!1513)

(assert (=> b!98424 (= e!64155 (+!128 call!10043 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98425 () Bool)

(declare-fun e!64144 () Bool)

(declare-fun e!64153 () Bool)

(assert (=> b!98425 (= e!64144 e!64153)))

(declare-fun res!49513 () Bool)

(assert (=> b!98425 (=> (not res!49513) (not e!64153))))

(declare-fun lt!49426 () ListLongMap!1513)

(assert (=> b!98425 (= res!49513 (contains!796 lt!49426 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!98425 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun bm!10035 () Bool)

(declare-fun call!10042 () Bool)

(assert (=> bm!10035 (= call!10042 (contains!796 lt!49426 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98426 () Bool)

(declare-fun e!64152 () Bool)

(declare-fun call!10040 () Bool)

(assert (=> b!98426 (= e!64152 (not call!10040))))

(declare-fun b!98427 () Bool)

(declare-fun e!64149 () Bool)

(assert (=> b!98427 (= e!64149 (not call!10042))))

(declare-fun b!98428 () Bool)

(declare-fun e!64148 () Bool)

(assert (=> b!98428 (= e!64149 e!64148)))

(declare-fun res!49514 () Bool)

(assert (=> b!98428 (= res!49514 call!10042)))

(assert (=> b!98428 (=> (not res!49514) (not e!64148))))

(declare-fun b!98429 () Bool)

(declare-fun e!64151 () Bool)

(assert (=> b!98429 (= e!64151 e!64152)))

(declare-fun c!16733 () Bool)

(assert (=> b!98429 (= c!16733 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10036 () Bool)

(assert (=> bm!10036 (= call!10040 (contains!796 lt!49426 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64146 () Bool)

(declare-fun b!98430 () Bool)

(assert (=> b!98430 (= e!64146 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10037 () Bool)

(declare-fun call!10039 () ListLongMap!1513)

(declare-fun call!10038 () ListLongMap!1513)

(assert (=> bm!10037 (= call!10039 call!10038)))

(declare-fun b!98431 () Bool)

(declare-fun e!64150 () ListLongMap!1513)

(declare-fun call!10041 () ListLongMap!1513)

(assert (=> b!98431 (= e!64150 call!10041)))

(declare-fun b!98432 () Bool)

(declare-fun c!16737 () Bool)

(assert (=> b!98432 (= c!16737 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64145 () ListLongMap!1513)

(assert (=> b!98432 (= e!64150 e!64145)))

(declare-fun b!98433 () Bool)

(assert (=> b!98433 (= e!64153 (= (apply!92 lt!49426 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98433 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))))))

(assert (=> b!98433 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun b!98434 () Bool)

(assert (=> b!98434 (= e!64155 e!64150)))

(declare-fun c!16735 () Bool)

(assert (=> b!98434 (= c!16735 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!10044 () ListLongMap!1513)

(declare-fun c!16736 () Bool)

(declare-fun bm!10038 () Bool)

(assert (=> bm!10038 (= call!10043 (+!128 (ite c!16736 call!10038 (ite c!16735 call!10039 call!10044)) (ite (or c!16736 c!16735) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!10039 () Bool)

(assert (=> bm!10039 (= call!10038 (getCurrentListMapNoExtraKeys!92 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98435 () Bool)

(assert (=> b!98435 (= e!64148 (= (apply!92 lt!49426 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98436 () Bool)

(assert (=> b!98436 (= e!64145 call!10041)))

(declare-fun b!98437 () Bool)

(declare-fun e!64147 () Unit!2934)

(declare-fun lt!49429 () Unit!2934)

(assert (=> b!98437 (= e!64147 lt!49429)))

(declare-fun lt!49415 () ListLongMap!1513)

(assert (=> b!98437 (= lt!49415 (getCurrentListMapNoExtraKeys!92 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49430 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49430 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49412 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49412 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49421 () Unit!2934)

(assert (=> b!98437 (= lt!49421 (addStillContains!68 lt!49415 lt!49430 (zeroValue!2363 newMap!16) lt!49412))))

(assert (=> b!98437 (contains!796 (+!128 lt!49415 (tuple2!2327 lt!49430 (zeroValue!2363 newMap!16))) lt!49412)))

(declare-fun lt!49427 () Unit!2934)

(assert (=> b!98437 (= lt!49427 lt!49421)))

(declare-fun lt!49428 () ListLongMap!1513)

(assert (=> b!98437 (= lt!49428 (getCurrentListMapNoExtraKeys!92 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49419 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49419 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49424 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49424 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49418 () Unit!2934)

(assert (=> b!98437 (= lt!49418 (addApplyDifferent!68 lt!49428 lt!49419 (minValue!2363 newMap!16) lt!49424))))

(assert (=> b!98437 (= (apply!92 (+!128 lt!49428 (tuple2!2327 lt!49419 (minValue!2363 newMap!16))) lt!49424) (apply!92 lt!49428 lt!49424))))

(declare-fun lt!49420 () Unit!2934)

(assert (=> b!98437 (= lt!49420 lt!49418)))

(declare-fun lt!49425 () ListLongMap!1513)

(assert (=> b!98437 (= lt!49425 (getCurrentListMapNoExtraKeys!92 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49432 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49432 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49423 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49423 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49431 () Unit!2934)

(assert (=> b!98437 (= lt!49431 (addApplyDifferent!68 lt!49425 lt!49432 (zeroValue!2363 newMap!16) lt!49423))))

(assert (=> b!98437 (= (apply!92 (+!128 lt!49425 (tuple2!2327 lt!49432 (zeroValue!2363 newMap!16))) lt!49423) (apply!92 lt!49425 lt!49423))))

(declare-fun lt!49433 () Unit!2934)

(assert (=> b!98437 (= lt!49433 lt!49431)))

(declare-fun lt!49422 () ListLongMap!1513)

(assert (=> b!98437 (= lt!49422 (getCurrentListMapNoExtraKeys!92 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49413 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49413 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49414 () (_ BitVec 64))

(assert (=> b!98437 (= lt!49414 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!98437 (= lt!49429 (addApplyDifferent!68 lt!49422 lt!49413 (minValue!2363 newMap!16) lt!49414))))

(assert (=> b!98437 (= (apply!92 (+!128 lt!49422 (tuple2!2327 lt!49413 (minValue!2363 newMap!16))) lt!49414) (apply!92 lt!49422 lt!49414))))

(declare-fun b!98438 () Bool)

(declare-fun e!64154 () Bool)

(assert (=> b!98438 (= e!64154 (= (apply!92 lt!49426 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!10040 () Bool)

(assert (=> bm!10040 (= call!10041 call!10043)))

(declare-fun b!98439 () Bool)

(assert (=> b!98439 (= e!64145 call!10044)))

(declare-fun b!98440 () Bool)

(declare-fun Unit!2978 () Unit!2934)

(assert (=> b!98440 (= e!64147 Unit!2978)))

(declare-fun b!98441 () Bool)

(declare-fun e!64143 () Bool)

(assert (=> b!98441 (= e!64143 (validKeyInArray!0 (select (arr!2002 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98442 () Bool)

(declare-fun res!49512 () Bool)

(assert (=> b!98442 (=> (not res!49512) (not e!64151))))

(assert (=> b!98442 (= res!49512 e!64149)))

(declare-fun c!16734 () Bool)

(assert (=> b!98442 (= c!16734 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26315 () Bool)

(assert (=> d!26315 e!64151))

(declare-fun res!49515 () Bool)

(assert (=> d!26315 (=> (not res!49515) (not e!64151))))

(assert (=> d!26315 (= res!49515 (or (bvsge #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))))

(declare-fun lt!49417 () ListLongMap!1513)

(assert (=> d!26315 (= lt!49426 lt!49417)))

(declare-fun lt!49416 () Unit!2934)

(assert (=> d!26315 (= lt!49416 e!64147)))

(declare-fun c!16738 () Bool)

(assert (=> d!26315 (= c!16738 e!64143)))

(declare-fun res!49511 () Bool)

(assert (=> d!26315 (=> (not res!49511) (not e!64143))))

(assert (=> d!26315 (= res!49511 (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(assert (=> d!26315 (= lt!49417 e!64155)))

(assert (=> d!26315 (= c!16736 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26315 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26315 (= (getCurrentListMap!453 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49426)))

(declare-fun bm!10041 () Bool)

(assert (=> bm!10041 (= call!10044 call!10039)))

(declare-fun b!98443 () Bool)

(assert (=> b!98443 (= e!64152 e!64154)))

(declare-fun res!49516 () Bool)

(assert (=> b!98443 (= res!49516 call!10040)))

(assert (=> b!98443 (=> (not res!49516) (not e!64154))))

(declare-fun b!98444 () Bool)

(declare-fun res!49517 () Bool)

(assert (=> b!98444 (=> (not res!49517) (not e!64151))))

(assert (=> b!98444 (= res!49517 e!64144)))

(declare-fun res!49518 () Bool)

(assert (=> b!98444 (=> res!49518 e!64144)))

(assert (=> b!98444 (= res!49518 (not e!64146))))

(declare-fun res!49510 () Bool)

(assert (=> b!98444 (=> (not res!49510) (not e!64146))))

(assert (=> b!98444 (= res!49510 (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))))))))

(assert (= (and d!26315 c!16736) b!98424))

(assert (= (and d!26315 (not c!16736)) b!98434))

(assert (= (and b!98434 c!16735) b!98431))

(assert (= (and b!98434 (not c!16735)) b!98432))

(assert (= (and b!98432 c!16737) b!98436))

(assert (= (and b!98432 (not c!16737)) b!98439))

(assert (= (or b!98436 b!98439) bm!10041))

(assert (= (or b!98431 bm!10041) bm!10037))

(assert (= (or b!98431 b!98436) bm!10040))

(assert (= (or b!98424 bm!10037) bm!10039))

(assert (= (or b!98424 bm!10040) bm!10038))

(assert (= (and d!26315 res!49511) b!98441))

(assert (= (and d!26315 c!16738) b!98437))

(assert (= (and d!26315 (not c!16738)) b!98440))

(assert (= (and d!26315 res!49515) b!98444))

(assert (= (and b!98444 res!49510) b!98430))

(assert (= (and b!98444 (not res!49518)) b!98425))

(assert (= (and b!98425 res!49513) b!98433))

(assert (= (and b!98444 res!49517) b!98442))

(assert (= (and b!98442 c!16734) b!98428))

(assert (= (and b!98442 (not c!16734)) b!98427))

(assert (= (and b!98428 res!49514) b!98435))

(assert (= (or b!98428 b!98427) bm!10035))

(assert (= (and b!98442 res!49512) b!98429))

(assert (= (and b!98429 c!16733) b!98443))

(assert (= (and b!98429 (not c!16733)) b!98426))

(assert (= (and b!98443 res!49516) b!98438))

(assert (= (or b!98443 b!98426) bm!10036))

(declare-fun b_lambda!4365 () Bool)

(assert (=> (not b_lambda!4365) (not b!98433)))

(assert (=> b!98433 t!5544))

(declare-fun b_and!6037 () Bool)

(assert (= b_and!6033 (and (=> t!5544 result!3271) b_and!6037)))

(assert (=> b!98433 t!5546))

(declare-fun b_and!6039 () Bool)

(assert (= b_and!6035 (and (=> t!5546 result!3273) b_and!6039)))

(assert (=> b!98425 m!107721))

(assert (=> b!98425 m!107721))

(declare-fun m!107733 () Bool)

(assert (=> b!98425 m!107733))

(declare-fun m!107735 () Bool)

(assert (=> b!98437 m!107735))

(declare-fun m!107737 () Bool)

(assert (=> b!98437 m!107737))

(declare-fun m!107739 () Bool)

(assert (=> b!98437 m!107739))

(assert (=> b!98437 m!107739))

(declare-fun m!107741 () Bool)

(assert (=> b!98437 m!107741))

(declare-fun m!107743 () Bool)

(assert (=> b!98437 m!107743))

(declare-fun m!107745 () Bool)

(assert (=> b!98437 m!107745))

(declare-fun m!107747 () Bool)

(assert (=> b!98437 m!107747))

(declare-fun m!107749 () Bool)

(assert (=> b!98437 m!107749))

(assert (=> b!98437 m!107737))

(declare-fun m!107751 () Bool)

(assert (=> b!98437 m!107751))

(declare-fun m!107753 () Bool)

(assert (=> b!98437 m!107753))

(declare-fun m!107755 () Bool)

(assert (=> b!98437 m!107755))

(declare-fun m!107757 () Bool)

(assert (=> b!98437 m!107757))

(assert (=> b!98437 m!107721))

(assert (=> b!98437 m!107747))

(declare-fun m!107759 () Bool)

(assert (=> b!98437 m!107759))

(declare-fun m!107761 () Bool)

(assert (=> b!98437 m!107761))

(declare-fun m!107763 () Bool)

(assert (=> b!98437 m!107763))

(declare-fun m!107765 () Bool)

(assert (=> b!98437 m!107765))

(assert (=> b!98437 m!107753))

(declare-fun m!107767 () Bool)

(assert (=> bm!10035 m!107767))

(declare-fun m!107769 () Bool)

(assert (=> b!98424 m!107769))

(declare-fun m!107771 () Bool)

(assert (=> bm!10036 m!107771))

(declare-fun m!107773 () Bool)

(assert (=> b!98438 m!107773))

(assert (=> b!98433 m!107721))

(declare-fun m!107775 () Bool)

(assert (=> b!98433 m!107775))

(assert (=> b!98433 m!106421))

(declare-fun m!107777 () Bool)

(assert (=> b!98433 m!107777))

(assert (=> b!98433 m!107721))

(declare-fun m!107779 () Bool)

(assert (=> b!98433 m!107779))

(assert (=> b!98433 m!107775))

(assert (=> b!98433 m!106421))

(assert (=> d!26315 m!106427))

(declare-fun m!107781 () Bool)

(assert (=> bm!10038 m!107781))

(assert (=> b!98430 m!107721))

(assert (=> b!98430 m!107721))

(assert (=> b!98430 m!107723))

(assert (=> bm!10039 m!107759))

(assert (=> b!98441 m!107721))

(assert (=> b!98441 m!107721))

(assert (=> b!98441 m!107723))

(declare-fun m!107783 () Bool)

(assert (=> b!98435 m!107783))

(assert (=> d!26011 d!26315))

(declare-fun call!10045 () (_ BitVec 32))

(declare-fun bm!10042 () Bool)

(assert (=> bm!10042 (= call!10045 (arrayCountValidKeys!0 lt!49120 (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)))))

(declare-fun b!98445 () Bool)

(declare-fun e!64156 () (_ BitVec 32))

(assert (=> b!98445 (= e!64156 call!10045)))

(declare-fun b!98446 () Bool)

(declare-fun e!64157 () (_ BitVec 32))

(assert (=> b!98446 (= e!64157 #b00000000000000000000000000000000)))

(declare-fun b!98447 () Bool)

(assert (=> b!98447 (= e!64156 (bvadd #b00000000000000000000000000000001 call!10045))))

(declare-fun b!98448 () Bool)

(assert (=> b!98448 (= e!64157 e!64156)))

(declare-fun c!16740 () Bool)

(assert (=> b!98448 (= c!16740 (validKeyInArray!0 (select (arr!2002 lt!49120) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(declare-fun lt!49434 () (_ BitVec 32))

(declare-fun d!26317 () Bool)

(assert (=> d!26317 (and (bvsge lt!49434 #b00000000000000000000000000000000) (bvsle lt!49434 (bvsub (size!2253 lt!49120) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(assert (=> d!26317 (= lt!49434 e!64157)))

(declare-fun c!16739 () Bool)

(assert (=> d!26317 (= c!16739 (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)))))

(assert (=> d!26317 (and (bvsle (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)) (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001) (size!2253 lt!49120)))))

(assert (=> d!26317 (= (arrayCountValidKeys!0 lt!49120 (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (bvadd (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000001)) lt!49434)))

(assert (= (and d!26317 c!16739) b!98446))

(assert (= (and d!26317 (not c!16739)) b!98448))

(assert (= (and b!98448 c!16740) b!98447))

(assert (= (and b!98448 (not c!16740)) b!98445))

(assert (= (or b!98447 b!98445) bm!10042))

(declare-fun m!107785 () Bool)

(assert (=> bm!10042 m!107785))

(assert (=> b!98448 m!107681))

(assert (=> b!98448 m!107681))

(assert (=> b!98448 m!107683))

(assert (=> d!26011 d!26317))

(declare-fun d!26319 () Bool)

(declare-fun e!64160 () Bool)

(assert (=> d!26319 e!64160))

(declare-fun res!49521 () Bool)

(assert (=> d!26319 (=> (not res!49521) (not e!64160))))

(assert (=> d!26319 (= res!49521 (and (bvsge (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) #b00000000000000000000000000000000) (bvslt (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (size!2253 (_keys!4169 newMap!16)))))))

(declare-fun lt!49437 () Unit!2934)

(declare-fun choose!41 (array!4217 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1587) Unit!2934)

(assert (=> d!26319 (= lt!49437 (choose!41 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) lt!49109 lt!49105))))

(assert (=> d!26319 (bvslt (size!2253 (_keys!4169 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26319 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) lt!49109 lt!49105) lt!49437)))

(declare-fun b!98451 () Bool)

(assert (=> b!98451 (= e!64160 (arrayNoDuplicates!0 (array!4218 (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (size!2253 (_keys!4169 newMap!16))) lt!49109 lt!49105))))

(assert (= (and d!26319 res!49521) b!98451))

(assert (=> d!26319 m!106105))

(declare-fun m!107787 () Bool)

(assert (=> d!26319 m!107787))

(assert (=> b!98451 m!106845))

(assert (=> b!98451 m!106835))

(assert (=> d!26011 d!26319))

(declare-fun d!26321 () Bool)

(declare-fun e!64161 () Bool)

(assert (=> d!26321 e!64161))

(declare-fun res!49522 () Bool)

(assert (=> d!26321 (=> res!49522 e!64161)))

(declare-fun lt!49439 () Bool)

(assert (=> d!26321 (= res!49522 (not lt!49439))))

(declare-fun lt!49440 () Bool)

(assert (=> d!26321 (= lt!49439 lt!49440)))

(declare-fun lt!49438 () Unit!2934)

(declare-fun e!64162 () Unit!2934)

(assert (=> d!26321 (= lt!49438 e!64162)))

(declare-fun c!16741 () Bool)

(assert (=> d!26321 (= c!16741 lt!49440)))

(assert (=> d!26321 (= lt!49440 (containsKey!152 (toList!772 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(assert (=> d!26321 (= (contains!796 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))) lt!49439)))

(declare-fun b!98452 () Bool)

(declare-fun lt!49441 () Unit!2934)

(assert (=> b!98452 (= e!64162 lt!49441)))

(assert (=> b!98452 (= lt!49441 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(assert (=> b!98452 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)))))))

(declare-fun b!98453 () Bool)

(declare-fun Unit!2979 () Unit!2934)

(assert (=> b!98453 (= e!64162 Unit!2979)))

(declare-fun b!98454 () Bool)

(assert (=> b!98454 (= e!64161 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2002 (_keys!4169 newMap!16)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (ite c!16507 (index!3170 lt!48847) (index!3167 lt!48847))))))))

(assert (= (and d!26321 c!16741) b!98452))

(assert (= (and d!26321 (not c!16741)) b!98453))

(assert (= (and d!26321 (not res!49522)) b!98454))

(assert (=> d!26321 m!106859))

(declare-fun m!107789 () Bool)

(assert (=> d!26321 m!107789))

(assert (=> b!98452 m!106859))

(declare-fun m!107791 () Bool)

(assert (=> b!98452 m!107791))

(assert (=> b!98452 m!106859))

(declare-fun m!107793 () Bool)

(assert (=> b!98452 m!107793))

(assert (=> b!98452 m!107793))

(declare-fun m!107795 () Bool)

(assert (=> b!98452 m!107795))

(assert (=> b!98454 m!106859))

(assert (=> b!98454 m!107793))

(assert (=> b!98454 m!107793))

(assert (=> b!98454 m!107795))

(assert (=> d!26011 d!26321))

(declare-fun b!98455 () Bool)

(declare-fun e!64175 () ListLongMap!1513)

(declare-fun call!10051 () ListLongMap!1513)

(assert (=> b!98455 (= e!64175 (+!128 call!10051 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98456 () Bool)

(declare-fun e!64164 () Bool)

(declare-fun e!64173 () Bool)

(assert (=> b!98456 (= e!64164 e!64173)))

(declare-fun res!49526 () Bool)

(assert (=> b!98456 (=> (not res!49526) (not e!64173))))

(declare-fun lt!49456 () ListLongMap!1513)

(assert (=> b!98456 (= res!49526 (contains!796 lt!49456 (select (arr!2002 lt!49131) #b00000000000000000000000000000000)))))

(assert (=> b!98456 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 lt!49131)))))

(declare-fun bm!10043 () Bool)

(declare-fun call!10050 () Bool)

(assert (=> bm!10043 (= call!10050 (contains!796 lt!49456 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98457 () Bool)

(declare-fun e!64172 () Bool)

(declare-fun call!10048 () Bool)

(assert (=> b!98457 (= e!64172 (not call!10048))))

(declare-fun b!98458 () Bool)

(declare-fun e!64169 () Bool)

(assert (=> b!98458 (= e!64169 (not call!10050))))

(declare-fun b!98459 () Bool)

(declare-fun e!64168 () Bool)

(assert (=> b!98459 (= e!64169 e!64168)))

(declare-fun res!49527 () Bool)

(assert (=> b!98459 (= res!49527 call!10050)))

(assert (=> b!98459 (=> (not res!49527) (not e!64168))))

(declare-fun b!98460 () Bool)

(declare-fun e!64171 () Bool)

(assert (=> b!98460 (= e!64171 e!64172)))

(declare-fun c!16742 () Bool)

(assert (=> b!98460 (= c!16742 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10044 () Bool)

(assert (=> bm!10044 (= call!10048 (contains!796 lt!49456 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98461 () Bool)

(declare-fun e!64166 () Bool)

(assert (=> b!98461 (= e!64166 (validKeyInArray!0 (select (arr!2002 lt!49131) #b00000000000000000000000000000000)))))

(declare-fun bm!10045 () Bool)

(declare-fun call!10047 () ListLongMap!1513)

(declare-fun call!10046 () ListLongMap!1513)

(assert (=> bm!10045 (= call!10047 call!10046)))

(declare-fun b!98462 () Bool)

(declare-fun e!64170 () ListLongMap!1513)

(declare-fun call!10049 () ListLongMap!1513)

(assert (=> b!98462 (= e!64170 call!10049)))

(declare-fun b!98463 () Bool)

(declare-fun c!16746 () Bool)

(assert (=> b!98463 (= c!16746 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64165 () ListLongMap!1513)

(assert (=> b!98463 (= e!64170 e!64165)))

(declare-fun b!98464 () Bool)

(assert (=> b!98464 (= e!64173 (= (apply!92 lt!49456 (select (arr!2002 lt!49131) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 lt!49121) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98464 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 lt!49121)))))

(assert (=> b!98464 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 lt!49131)))))

(declare-fun b!98465 () Bool)

(assert (=> b!98465 (= e!64175 e!64170)))

(declare-fun c!16744 () Bool)

(assert (=> b!98465 (= c!16744 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!16745 () Bool)

(declare-fun call!10052 () ListLongMap!1513)

(declare-fun bm!10046 () Bool)

(assert (=> bm!10046 (= call!10051 (+!128 (ite c!16745 call!10046 (ite c!16744 call!10047 call!10052)) (ite (or c!16745 c!16744) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!10047 () Bool)

(assert (=> bm!10047 (= call!10046 (getCurrentListMapNoExtraKeys!92 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98466 () Bool)

(assert (=> b!98466 (= e!64168 (= (apply!92 lt!49456 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98467 () Bool)

(assert (=> b!98467 (= e!64165 call!10049)))

(declare-fun b!98468 () Bool)

(declare-fun e!64167 () Unit!2934)

(declare-fun lt!49459 () Unit!2934)

(assert (=> b!98468 (= e!64167 lt!49459)))

(declare-fun lt!49445 () ListLongMap!1513)

(assert (=> b!98468 (= lt!49445 (getCurrentListMapNoExtraKeys!92 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49460 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49460 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49442 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49442 (select (arr!2002 lt!49131) #b00000000000000000000000000000000))))

(declare-fun lt!49451 () Unit!2934)

(assert (=> b!98468 (= lt!49451 (addStillContains!68 lt!49445 lt!49460 (zeroValue!2363 newMap!16) lt!49442))))

(assert (=> b!98468 (contains!796 (+!128 lt!49445 (tuple2!2327 lt!49460 (zeroValue!2363 newMap!16))) lt!49442)))

(declare-fun lt!49457 () Unit!2934)

(assert (=> b!98468 (= lt!49457 lt!49451)))

(declare-fun lt!49458 () ListLongMap!1513)

(assert (=> b!98468 (= lt!49458 (getCurrentListMapNoExtraKeys!92 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49449 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49449 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49454 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49454 (select (arr!2002 lt!49131) #b00000000000000000000000000000000))))

(declare-fun lt!49448 () Unit!2934)

(assert (=> b!98468 (= lt!49448 (addApplyDifferent!68 lt!49458 lt!49449 (minValue!2363 newMap!16) lt!49454))))

(assert (=> b!98468 (= (apply!92 (+!128 lt!49458 (tuple2!2327 lt!49449 (minValue!2363 newMap!16))) lt!49454) (apply!92 lt!49458 lt!49454))))

(declare-fun lt!49450 () Unit!2934)

(assert (=> b!98468 (= lt!49450 lt!49448)))

(declare-fun lt!49455 () ListLongMap!1513)

(assert (=> b!98468 (= lt!49455 (getCurrentListMapNoExtraKeys!92 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49462 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49462 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49453 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49453 (select (arr!2002 lt!49131) #b00000000000000000000000000000000))))

(declare-fun lt!49461 () Unit!2934)

(assert (=> b!98468 (= lt!49461 (addApplyDifferent!68 lt!49455 lt!49462 (zeroValue!2363 newMap!16) lt!49453))))

(assert (=> b!98468 (= (apply!92 (+!128 lt!49455 (tuple2!2327 lt!49462 (zeroValue!2363 newMap!16))) lt!49453) (apply!92 lt!49455 lt!49453))))

(declare-fun lt!49463 () Unit!2934)

(assert (=> b!98468 (= lt!49463 lt!49461)))

(declare-fun lt!49452 () ListLongMap!1513)

(assert (=> b!98468 (= lt!49452 (getCurrentListMapNoExtraKeys!92 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49443 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49443 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49444 () (_ BitVec 64))

(assert (=> b!98468 (= lt!49444 (select (arr!2002 lt!49131) #b00000000000000000000000000000000))))

(assert (=> b!98468 (= lt!49459 (addApplyDifferent!68 lt!49452 lt!49443 (minValue!2363 newMap!16) lt!49444))))

(assert (=> b!98468 (= (apply!92 (+!128 lt!49452 (tuple2!2327 lt!49443 (minValue!2363 newMap!16))) lt!49444) (apply!92 lt!49452 lt!49444))))

(declare-fun b!98469 () Bool)

(declare-fun e!64174 () Bool)

(assert (=> b!98469 (= e!64174 (= (apply!92 lt!49456 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!10048 () Bool)

(assert (=> bm!10048 (= call!10049 call!10051)))

(declare-fun b!98470 () Bool)

(assert (=> b!98470 (= e!64165 call!10052)))

(declare-fun b!98471 () Bool)

(declare-fun Unit!2980 () Unit!2934)

(assert (=> b!98471 (= e!64167 Unit!2980)))

(declare-fun b!98472 () Bool)

(declare-fun e!64163 () Bool)

(assert (=> b!98472 (= e!64163 (validKeyInArray!0 (select (arr!2002 lt!49131) #b00000000000000000000000000000000)))))

(declare-fun b!98473 () Bool)

(declare-fun res!49525 () Bool)

(assert (=> b!98473 (=> (not res!49525) (not e!64171))))

(assert (=> b!98473 (= res!49525 e!64169)))

(declare-fun c!16743 () Bool)

(assert (=> b!98473 (= c!16743 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26323 () Bool)

(assert (=> d!26323 e!64171))

(declare-fun res!49528 () Bool)

(assert (=> d!26323 (=> (not res!49528) (not e!64171))))

(assert (=> d!26323 (= res!49528 (or (bvsge #b00000000000000000000000000000000 (size!2253 lt!49131)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 lt!49131)))))))

(declare-fun lt!49447 () ListLongMap!1513)

(assert (=> d!26323 (= lt!49456 lt!49447)))

(declare-fun lt!49446 () Unit!2934)

(assert (=> d!26323 (= lt!49446 e!64167)))

(declare-fun c!16747 () Bool)

(assert (=> d!26323 (= c!16747 e!64163)))

(declare-fun res!49524 () Bool)

(assert (=> d!26323 (=> (not res!49524) (not e!64163))))

(assert (=> d!26323 (= res!49524 (bvslt #b00000000000000000000000000000000 (size!2253 lt!49131)))))

(assert (=> d!26323 (= lt!49447 e!64175)))

(assert (=> d!26323 (= c!16745 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26323 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26323 (= (getCurrentListMap!453 lt!49131 lt!49121 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49456)))

(declare-fun bm!10049 () Bool)

(assert (=> bm!10049 (= call!10052 call!10047)))

(declare-fun b!98474 () Bool)

(assert (=> b!98474 (= e!64172 e!64174)))

(declare-fun res!49529 () Bool)

(assert (=> b!98474 (= res!49529 call!10048)))

(assert (=> b!98474 (=> (not res!49529) (not e!64174))))

(declare-fun b!98475 () Bool)

(declare-fun res!49530 () Bool)

(assert (=> b!98475 (=> (not res!49530) (not e!64171))))

(assert (=> b!98475 (= res!49530 e!64164)))

(declare-fun res!49531 () Bool)

(assert (=> b!98475 (=> res!49531 e!64164)))

(assert (=> b!98475 (= res!49531 (not e!64166))))

(declare-fun res!49523 () Bool)

(assert (=> b!98475 (=> (not res!49523) (not e!64166))))

(assert (=> b!98475 (= res!49523 (bvslt #b00000000000000000000000000000000 (size!2253 lt!49131)))))

(assert (= (and d!26323 c!16745) b!98455))

(assert (= (and d!26323 (not c!16745)) b!98465))

(assert (= (and b!98465 c!16744) b!98462))

(assert (= (and b!98465 (not c!16744)) b!98463))

(assert (= (and b!98463 c!16746) b!98467))

(assert (= (and b!98463 (not c!16746)) b!98470))

(assert (= (or b!98467 b!98470) bm!10049))

(assert (= (or b!98462 bm!10049) bm!10045))

(assert (= (or b!98462 b!98467) bm!10048))

(assert (= (or b!98455 bm!10045) bm!10047))

(assert (= (or b!98455 bm!10048) bm!10046))

(assert (= (and d!26323 res!49524) b!98472))

(assert (= (and d!26323 c!16747) b!98468))

(assert (= (and d!26323 (not c!16747)) b!98471))

(assert (= (and d!26323 res!49528) b!98475))

(assert (= (and b!98475 res!49523) b!98461))

(assert (= (and b!98475 (not res!49531)) b!98456))

(assert (= (and b!98456 res!49526) b!98464))

(assert (= (and b!98475 res!49530) b!98473))

(assert (= (and b!98473 c!16743) b!98459))

(assert (= (and b!98473 (not c!16743)) b!98458))

(assert (= (and b!98459 res!49527) b!98466))

(assert (= (or b!98459 b!98458) bm!10043))

(assert (= (and b!98473 res!49525) b!98460))

(assert (= (and b!98460 c!16742) b!98474))

(assert (= (and b!98460 (not c!16742)) b!98457))

(assert (= (and b!98474 res!49529) b!98469))

(assert (= (or b!98474 b!98457) bm!10044))

(declare-fun b_lambda!4367 () Bool)

(assert (=> (not b_lambda!4367) (not b!98464)))

(assert (=> b!98464 t!5544))

(declare-fun b_and!6041 () Bool)

(assert (= b_and!6037 (and (=> t!5544 result!3271) b_and!6041)))

(assert (=> b!98464 t!5546))

(declare-fun b_and!6043 () Bool)

(assert (= b_and!6039 (and (=> t!5546 result!3273) b_and!6043)))

(declare-fun m!107797 () Bool)

(assert (=> b!98456 m!107797))

(assert (=> b!98456 m!107797))

(declare-fun m!107799 () Bool)

(assert (=> b!98456 m!107799))

(declare-fun m!107801 () Bool)

(assert (=> b!98468 m!107801))

(declare-fun m!107803 () Bool)

(assert (=> b!98468 m!107803))

(declare-fun m!107805 () Bool)

(assert (=> b!98468 m!107805))

(assert (=> b!98468 m!107805))

(declare-fun m!107807 () Bool)

(assert (=> b!98468 m!107807))

(declare-fun m!107809 () Bool)

(assert (=> b!98468 m!107809))

(declare-fun m!107811 () Bool)

(assert (=> b!98468 m!107811))

(declare-fun m!107813 () Bool)

(assert (=> b!98468 m!107813))

(declare-fun m!107815 () Bool)

(assert (=> b!98468 m!107815))

(assert (=> b!98468 m!107803))

(declare-fun m!107817 () Bool)

(assert (=> b!98468 m!107817))

(declare-fun m!107819 () Bool)

(assert (=> b!98468 m!107819))

(declare-fun m!107821 () Bool)

(assert (=> b!98468 m!107821))

(declare-fun m!107823 () Bool)

(assert (=> b!98468 m!107823))

(assert (=> b!98468 m!107797))

(assert (=> b!98468 m!107813))

(declare-fun m!107825 () Bool)

(assert (=> b!98468 m!107825))

(declare-fun m!107827 () Bool)

(assert (=> b!98468 m!107827))

(declare-fun m!107829 () Bool)

(assert (=> b!98468 m!107829))

(declare-fun m!107831 () Bool)

(assert (=> b!98468 m!107831))

(assert (=> b!98468 m!107819))

(declare-fun m!107833 () Bool)

(assert (=> bm!10043 m!107833))

(declare-fun m!107835 () Bool)

(assert (=> b!98455 m!107835))

(declare-fun m!107837 () Bool)

(assert (=> bm!10044 m!107837))

(declare-fun m!107839 () Bool)

(assert (=> b!98469 m!107839))

(assert (=> b!98464 m!107797))

(declare-fun m!107841 () Bool)

(assert (=> b!98464 m!107841))

(assert (=> b!98464 m!106421))

(declare-fun m!107843 () Bool)

(assert (=> b!98464 m!107843))

(assert (=> b!98464 m!107797))

(declare-fun m!107845 () Bool)

(assert (=> b!98464 m!107845))

(assert (=> b!98464 m!107841))

(assert (=> b!98464 m!106421))

(assert (=> d!26323 m!106427))

(declare-fun m!107847 () Bool)

(assert (=> bm!10046 m!107847))

(assert (=> b!98461 m!107797))

(assert (=> b!98461 m!107797))

(declare-fun m!107849 () Bool)

(assert (=> b!98461 m!107849))

(assert (=> bm!10047 m!107825))

(assert (=> b!98472 m!107797))

(assert (=> b!98472 m!107797))

(assert (=> b!98472 m!107849))

(declare-fun m!107851 () Bool)

(assert (=> b!98466 m!107851))

(assert (=> d!26011 d!26323))

(assert (=> d!25985 d!26053))

(declare-fun d!26325 () Bool)

(declare-fun lt!49464 () Bool)

(assert (=> d!26325 (= lt!49464 (select (content!102 (toList!772 lt!48993)) (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!64176 () Bool)

(assert (=> d!26325 (= lt!49464 e!64176)))

(declare-fun res!49533 () Bool)

(assert (=> d!26325 (=> (not res!49533) (not e!64176))))

(assert (=> d!26325 (= res!49533 ((_ is Cons!1582) (toList!772 lt!48993)))))

(assert (=> d!26325 (= (contains!798 (toList!772 lt!48993) (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49464)))

(declare-fun b!98476 () Bool)

(declare-fun e!64177 () Bool)

(assert (=> b!98476 (= e!64176 e!64177)))

(declare-fun res!49532 () Bool)

(assert (=> b!98476 (=> res!49532 e!64177)))

(assert (=> b!98476 (= res!49532 (= (h!2176 (toList!772 lt!48993)) (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98477 () Bool)

(assert (=> b!98477 (= e!64177 (contains!798 (t!5531 (toList!772 lt!48993)) (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!26325 res!49533) b!98476))

(assert (= (and b!98476 (not res!49532)) b!98477))

(declare-fun m!107853 () Bool)

(assert (=> d!26325 m!107853))

(declare-fun m!107855 () Bool)

(assert (=> d!26325 m!107855))

(declare-fun m!107857 () Bool)

(assert (=> b!98477 m!107857))

(assert (=> b!97802 d!26325))

(declare-fun d!26327 () Bool)

(declare-fun e!64178 () Bool)

(assert (=> d!26327 e!64178))

(declare-fun res!49534 () Bool)

(assert (=> d!26327 (=> res!49534 e!64178)))

(declare-fun lt!49466 () Bool)

(assert (=> d!26327 (= res!49534 (not lt!49466))))

(declare-fun lt!49467 () Bool)

(assert (=> d!26327 (= lt!49466 lt!49467)))

(declare-fun lt!49465 () Unit!2934)

(declare-fun e!64179 () Unit!2934)

(assert (=> d!26327 (= lt!49465 e!64179)))

(declare-fun c!16748 () Bool)

(assert (=> d!26327 (= c!16748 lt!49467)))

(assert (=> d!26327 (= lt!49467 (containsKey!152 (toList!772 lt!48871) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26327 (= (contains!796 lt!48871 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) lt!49466)))

(declare-fun b!98478 () Bool)

(declare-fun lt!49468 () Unit!2934)

(assert (=> b!98478 (= e!64179 lt!49468)))

(assert (=> b!98478 (= lt!49468 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48871) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98478 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98479 () Bool)

(declare-fun Unit!2981 () Unit!2934)

(assert (=> b!98479 (= e!64179 Unit!2981)))

(declare-fun b!98480 () Bool)

(assert (=> b!98480 (= e!64178 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26327 c!16748) b!98478))

(assert (= (and d!26327 (not c!16748)) b!98479))

(assert (= (and d!26327 (not res!49534)) b!98480))

(assert (=> d!26327 m!106375))

(declare-fun m!107859 () Bool)

(assert (=> d!26327 m!107859))

(assert (=> b!98478 m!106375))

(declare-fun m!107861 () Bool)

(assert (=> b!98478 m!107861))

(assert (=> b!98478 m!106375))

(assert (=> b!98478 m!107569))

(assert (=> b!98478 m!107569))

(declare-fun m!107863 () Bool)

(assert (=> b!98478 m!107863))

(assert (=> b!98480 m!106375))

(assert (=> b!98480 m!107569))

(assert (=> b!98480 m!107569))

(assert (=> b!98480 m!107863))

(assert (=> b!97632 d!26327))

(declare-fun d!26329 () Bool)

(declare-fun e!64180 () Bool)

(assert (=> d!26329 e!64180))

(declare-fun res!49535 () Bool)

(assert (=> d!26329 (=> res!49535 e!64180)))

(declare-fun lt!49470 () Bool)

(assert (=> d!26329 (= res!49535 (not lt!49470))))

(declare-fun lt!49471 () Bool)

(assert (=> d!26329 (= lt!49470 lt!49471)))

(declare-fun lt!49469 () Unit!2934)

(declare-fun e!64181 () Unit!2934)

(assert (=> d!26329 (= lt!49469 e!64181)))

(declare-fun c!16749 () Bool)

(assert (=> d!26329 (= c!16749 lt!49471)))

(assert (=> d!26329 (= lt!49471 (containsKey!152 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!26329 (= (contains!796 lt!48997 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49470)))

(declare-fun b!98481 () Bool)

(declare-fun lt!49472 () Unit!2934)

(assert (=> b!98481 (= e!64181 lt!49472)))

(assert (=> b!98481 (= lt!49472 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> b!98481 (isDefined!102 (getValueByKey!148 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98482 () Bool)

(declare-fun Unit!2982 () Unit!2934)

(assert (=> b!98482 (= e!64181 Unit!2982)))

(declare-fun b!98483 () Bool)

(assert (=> b!98483 (= e!64180 (isDefined!102 (getValueByKey!148 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26329 c!16749) b!98481))

(assert (= (and d!26329 (not c!16749)) b!98482))

(assert (= (and d!26329 (not res!49535)) b!98483))

(declare-fun m!107865 () Bool)

(assert (=> d!26329 m!107865))

(declare-fun m!107867 () Bool)

(assert (=> b!98481 m!107867))

(assert (=> b!98481 m!106693))

(assert (=> b!98481 m!106693))

(declare-fun m!107869 () Bool)

(assert (=> b!98481 m!107869))

(assert (=> b!98483 m!106693))

(assert (=> b!98483 m!106693))

(assert (=> b!98483 m!107869))

(assert (=> d!25961 d!26329))

(declare-fun b!98485 () Bool)

(declare-fun e!64182 () Option!154)

(declare-fun e!64183 () Option!154)

(assert (=> b!98485 (= e!64182 e!64183)))

(declare-fun c!16751 () Bool)

(assert (=> b!98485 (= c!16751 (and ((_ is Cons!1582) lt!48995) (not (= (_1!1174 (h!2176 lt!48995)) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98486 () Bool)

(assert (=> b!98486 (= e!64183 (getValueByKey!148 (t!5531 lt!48995) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98484 () Bool)

(assert (=> b!98484 (= e!64182 (Some!153 (_2!1174 (h!2176 lt!48995))))))

(declare-fun d!26331 () Bool)

(declare-fun c!16750 () Bool)

(assert (=> d!26331 (= c!16750 (and ((_ is Cons!1582) lt!48995) (= (_1!1174 (h!2176 lt!48995)) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26331 (= (getValueByKey!148 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64182)))

(declare-fun b!98487 () Bool)

(assert (=> b!98487 (= e!64183 None!152)))

(assert (= (and d!26331 c!16750) b!98484))

(assert (= (and d!26331 (not c!16750)) b!98485))

(assert (= (and b!98485 c!16751) b!98486))

(assert (= (and b!98485 (not c!16751)) b!98487))

(declare-fun m!107871 () Bool)

(assert (=> b!98486 m!107871))

(assert (=> d!25961 d!26331))

(declare-fun d!26333 () Bool)

(assert (=> d!26333 (= (getValueByKey!148 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49473 () Unit!2934)

(assert (=> d!26333 (= lt!49473 (choose!604 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!64184 () Bool)

(assert (=> d!26333 e!64184))

(declare-fun res!49536 () Bool)

(assert (=> d!26333 (=> (not res!49536) (not e!64184))))

(assert (=> d!26333 (= res!49536 (isStrictlySorted!299 lt!48995))))

(assert (=> d!26333 (= (lemmaContainsTupThenGetReturnValue!67 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49473)))

(declare-fun b!98488 () Bool)

(declare-fun res!49537 () Bool)

(assert (=> b!98488 (=> (not res!49537) (not e!64184))))

(assert (=> b!98488 (= res!49537 (containsKey!152 lt!48995 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98489 () Bool)

(assert (=> b!98489 (= e!64184 (contains!798 lt!48995 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26333 res!49536) b!98488))

(assert (= (and b!98488 res!49537) b!98489))

(assert (=> d!26333 m!106687))

(declare-fun m!107873 () Bool)

(assert (=> d!26333 m!107873))

(declare-fun m!107875 () Bool)

(assert (=> d!26333 m!107875))

(declare-fun m!107877 () Bool)

(assert (=> b!98488 m!107877))

(declare-fun m!107879 () Bool)

(assert (=> b!98489 m!107879))

(assert (=> d!25961 d!26333))

(declare-fun bm!10050 () Bool)

(declare-fun call!10055 () List!1586)

(declare-fun call!10054 () List!1586)

(assert (=> bm!10050 (= call!10055 call!10054)))

(declare-fun b!98491 () Bool)

(declare-fun e!64185 () List!1586)

(assert (=> b!98491 (= e!64185 call!10055)))

(declare-fun c!16753 () Bool)

(declare-fun b!98492 () Bool)

(assert (=> b!98492 (= c!16753 (and ((_ is Cons!1582) (toList!772 lt!48743)) (bvsgt (_1!1174 (h!2176 (toList!772 lt!48743))) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!64189 () List!1586)

(assert (=> b!98492 (= e!64189 e!64185)))

(declare-fun bm!10051 () Bool)

(declare-fun call!10053 () List!1586)

(assert (=> bm!10051 (= call!10054 call!10053)))

(declare-fun c!16754 () Bool)

(declare-fun e!64186 () List!1586)

(declare-fun bm!10052 () Bool)

(assert (=> bm!10052 (= call!10053 ($colon$colon!77 e!64186 (ite c!16754 (h!2176 (toList!772 lt!48743)) (tuple2!2327 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun c!16755 () Bool)

(assert (=> bm!10052 (= c!16755 c!16754)))

(declare-fun b!98493 () Bool)

(assert (=> b!98493 (= e!64189 call!10054)))

(declare-fun b!98494 () Bool)

(declare-fun e!64187 () List!1586)

(assert (=> b!98494 (= e!64187 e!64189)))

(declare-fun c!16752 () Bool)

(assert (=> b!98494 (= c!16752 (and ((_ is Cons!1582) (toList!772 lt!48743)) (= (_1!1174 (h!2176 (toList!772 lt!48743))) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98495 () Bool)

(assert (=> b!98495 (= e!64187 call!10053)))

(declare-fun b!98496 () Bool)

(declare-fun res!49539 () Bool)

(declare-fun e!64188 () Bool)

(assert (=> b!98496 (=> (not res!49539) (not e!64188))))

(declare-fun lt!49474 () List!1586)

(assert (=> b!98496 (= res!49539 (containsKey!152 lt!49474 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98497 () Bool)

(assert (=> b!98497 (= e!64188 (contains!798 lt!49474 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun d!26335 () Bool)

(assert (=> d!26335 e!64188))

(declare-fun res!49538 () Bool)

(assert (=> d!26335 (=> (not res!49538) (not e!64188))))

(assert (=> d!26335 (= res!49538 (isStrictlySorted!299 lt!49474))))

(assert (=> d!26335 (= lt!49474 e!64187)))

(assert (=> d!26335 (= c!16754 (and ((_ is Cons!1582) (toList!772 lt!48743)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48743))) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26335 (isStrictlySorted!299 (toList!772 lt!48743))))

(assert (=> d!26335 (= (insertStrictlySorted!70 (toList!772 lt!48743) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49474)))

(declare-fun b!98490 () Bool)

(assert (=> b!98490 (= e!64186 (ite c!16752 (t!5531 (toList!772 lt!48743)) (ite c!16753 (Cons!1582 (h!2176 (toList!772 lt!48743)) (t!5531 (toList!772 lt!48743))) Nil!1583)))))

(declare-fun b!98498 () Bool)

(assert (=> b!98498 (= e!64185 call!10055)))

(declare-fun b!98499 () Bool)

(assert (=> b!98499 (= e!64186 (insertStrictlySorted!70 (t!5531 (toList!772 lt!48743)) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26335 c!16754) b!98495))

(assert (= (and d!26335 (not c!16754)) b!98494))

(assert (= (and b!98494 c!16752) b!98493))

(assert (= (and b!98494 (not c!16752)) b!98492))

(assert (= (and b!98492 c!16753) b!98491))

(assert (= (and b!98492 (not c!16753)) b!98498))

(assert (= (or b!98491 b!98498) bm!10050))

(assert (= (or b!98493 bm!10050) bm!10051))

(assert (= (or b!98495 bm!10051) bm!10052))

(assert (= (and bm!10052 c!16755) b!98499))

(assert (= (and bm!10052 (not c!16755)) b!98490))

(assert (= (and d!26335 res!49538) b!98496))

(assert (= (and b!98496 res!49539) b!98497))

(declare-fun m!107881 () Bool)

(assert (=> b!98496 m!107881))

(declare-fun m!107883 () Bool)

(assert (=> b!98497 m!107883))

(declare-fun m!107885 () Bool)

(assert (=> bm!10052 m!107885))

(declare-fun m!107887 () Bool)

(assert (=> d!26335 m!107887))

(declare-fun m!107889 () Bool)

(assert (=> d!26335 m!107889))

(declare-fun m!107891 () Bool)

(assert (=> b!98499 m!107891))

(assert (=> d!25961 d!26335))

(declare-fun d!26337 () Bool)

(declare-fun e!64190 () Bool)

(assert (=> d!26337 e!64190))

(declare-fun res!49541 () Bool)

(assert (=> d!26337 (=> (not res!49541) (not e!64190))))

(declare-fun lt!49478 () ListLongMap!1513)

(assert (=> d!26337 (= res!49541 (contains!796 lt!49478 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49476 () List!1586)

(assert (=> d!26337 (= lt!49478 (ListLongMap!1514 lt!49476))))

(declare-fun lt!49477 () Unit!2934)

(declare-fun lt!49475 () Unit!2934)

(assert (=> d!26337 (= lt!49477 lt!49475)))

(assert (=> d!26337 (= (getValueByKey!148 lt!49476 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26337 (= lt!49475 (lemmaContainsTupThenGetReturnValue!67 lt!49476 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26337 (= lt!49476 (insertStrictlySorted!70 (toList!772 call!9964) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26337 (= (+!128 call!9964 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49478)))

(declare-fun b!98500 () Bool)

(declare-fun res!49540 () Bool)

(assert (=> b!98500 (=> (not res!49540) (not e!64190))))

(assert (=> b!98500 (= res!49540 (= (getValueByKey!148 (toList!772 lt!49478) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98501 () Bool)

(assert (=> b!98501 (= e!64190 (contains!798 (toList!772 lt!49478) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26337 res!49541) b!98500))

(assert (= (and b!98500 res!49540) b!98501))

(declare-fun m!107893 () Bool)

(assert (=> d!26337 m!107893))

(declare-fun m!107895 () Bool)

(assert (=> d!26337 m!107895))

(declare-fun m!107897 () Bool)

(assert (=> d!26337 m!107897))

(declare-fun m!107899 () Bool)

(assert (=> d!26337 m!107899))

(declare-fun m!107901 () Bool)

(assert (=> b!98500 m!107901))

(declare-fun m!107903 () Bool)

(assert (=> b!98501 m!107903))

(assert (=> b!97707 d!26337))

(assert (=> b!97934 d!26045))

(declare-fun d!26339 () Bool)

(assert (=> d!26339 (= (isEmpty!361 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) (not ((_ is Some!153) (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))))

(assert (=> d!25969 d!26339))

(declare-fun d!26341 () Bool)

(declare-fun e!64191 () Bool)

(assert (=> d!26341 e!64191))

(declare-fun res!49542 () Bool)

(assert (=> d!26341 (=> res!49542 e!64191)))

(declare-fun lt!49480 () Bool)

(assert (=> d!26341 (= res!49542 (not lt!49480))))

(declare-fun lt!49481 () Bool)

(assert (=> d!26341 (= lt!49480 lt!49481)))

(declare-fun lt!49479 () Unit!2934)

(declare-fun e!64192 () Unit!2934)

(assert (=> d!26341 (= lt!49479 e!64192)))

(declare-fun c!16756 () Bool)

(assert (=> d!26341 (= c!16756 lt!49481)))

(assert (=> d!26341 (= lt!49481 (containsKey!152 (toList!772 lt!48971) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26341 (= (contains!796 lt!48971 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49480)))

(declare-fun b!98502 () Bool)

(declare-fun lt!49482 () Unit!2934)

(assert (=> b!98502 (= e!64192 lt!49482)))

(assert (=> b!98502 (= lt!49482 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48971) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98502 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98503 () Bool)

(declare-fun Unit!2983 () Unit!2934)

(assert (=> b!98503 (= e!64192 Unit!2983)))

(declare-fun b!98504 () Bool)

(assert (=> b!98504 (= e!64191 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26341 c!16756) b!98502))

(assert (= (and d!26341 (not c!16756)) b!98503))

(assert (= (and d!26341 (not res!49542)) b!98504))

(assert (=> d!26341 m!106219))

(declare-fun m!107905 () Bool)

(assert (=> d!26341 m!107905))

(assert (=> b!98502 m!106219))

(declare-fun m!107907 () Bool)

(assert (=> b!98502 m!107907))

(assert (=> b!98502 m!106219))

(declare-fun m!107909 () Bool)

(assert (=> b!98502 m!107909))

(assert (=> b!98502 m!107909))

(declare-fun m!107911 () Bool)

(assert (=> b!98502 m!107911))

(assert (=> b!98504 m!106219))

(assert (=> b!98504 m!107909))

(assert (=> b!98504 m!107909))

(assert (=> b!98504 m!107911))

(assert (=> b!97791 d!26341))

(assert (=> b!97795 d!26101))

(assert (=> b!97795 d!26103))

(declare-fun b!98505 () Bool)

(declare-fun e!64205 () ListLongMap!1513)

(declare-fun call!10061 () ListLongMap!1513)

(assert (=> b!98505 (= e!64205 (+!128 call!10061 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (_2!1175 lt!48824)))))))

(declare-fun b!98506 () Bool)

(declare-fun e!64194 () Bool)

(declare-fun e!64203 () Bool)

(assert (=> b!98506 (= e!64194 e!64203)))

(declare-fun res!49546 () Bool)

(assert (=> b!98506 (=> (not res!49546) (not e!64203))))

(declare-fun lt!49497 () ListLongMap!1513)

(assert (=> b!98506 (= res!49546 (contains!796 lt!49497 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(assert (=> b!98506 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(declare-fun bm!10053 () Bool)

(declare-fun call!10060 () Bool)

(assert (=> bm!10053 (= call!10060 (contains!796 lt!49497 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98507 () Bool)

(declare-fun e!64202 () Bool)

(declare-fun call!10058 () Bool)

(assert (=> b!98507 (= e!64202 (not call!10058))))

(declare-fun b!98508 () Bool)

(declare-fun e!64199 () Bool)

(assert (=> b!98508 (= e!64199 (not call!10060))))

(declare-fun b!98509 () Bool)

(declare-fun e!64198 () Bool)

(assert (=> b!98509 (= e!64199 e!64198)))

(declare-fun res!49547 () Bool)

(assert (=> b!98509 (= res!49547 call!10060)))

(assert (=> b!98509 (=> (not res!49547) (not e!64198))))

(declare-fun b!98510 () Bool)

(declare-fun e!64201 () Bool)

(assert (=> b!98510 (= e!64201 e!64202)))

(declare-fun c!16757 () Bool)

(assert (=> b!98510 (= c!16757 (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10054 () Bool)

(assert (=> bm!10054 (= call!10058 (contains!796 lt!49497 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98511 () Bool)

(declare-fun e!64196 () Bool)

(assert (=> b!98511 (= e!64196 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun bm!10055 () Bool)

(declare-fun call!10057 () ListLongMap!1513)

(declare-fun call!10056 () ListLongMap!1513)

(assert (=> bm!10055 (= call!10057 call!10056)))

(declare-fun b!98512 () Bool)

(declare-fun e!64200 () ListLongMap!1513)

(declare-fun call!10059 () ListLongMap!1513)

(assert (=> b!98512 (= e!64200 call!10059)))

(declare-fun b!98513 () Bool)

(declare-fun c!16761 () Bool)

(assert (=> b!98513 (= c!16761 (and (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64195 () ListLongMap!1513)

(assert (=> b!98513 (= e!64200 e!64195)))

(declare-fun b!98514 () Bool)

(assert (=> b!98514 (= e!64203 (= (apply!92 lt!49497 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (_values!2463 (_2!1175 lt!48824))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 (_2!1175 lt!48824)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98514 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (_values!2463 (_2!1175 lt!48824)))))))

(assert (=> b!98514 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(declare-fun b!98515 () Bool)

(assert (=> b!98515 (= e!64205 e!64200)))

(declare-fun c!16759 () Bool)

(assert (=> b!98515 (= c!16759 (and (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!16760 () Bool)

(declare-fun bm!10056 () Bool)

(declare-fun call!10062 () ListLongMap!1513)

(assert (=> bm!10056 (= call!10061 (+!128 (ite c!16760 call!10056 (ite c!16759 call!10057 call!10062)) (ite (or c!16760 c!16759) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (_2!1175 lt!48824))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (_2!1175 lt!48824))))))))

(declare-fun bm!10057 () Bool)

(assert (=> bm!10057 (= call!10056 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun b!98516 () Bool)

(assert (=> b!98516 (= e!64198 (= (apply!92 lt!49497 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 (_2!1175 lt!48824))))))

(declare-fun b!98517 () Bool)

(assert (=> b!98517 (= e!64195 call!10059)))

(declare-fun b!98518 () Bool)

(declare-fun e!64197 () Unit!2934)

(declare-fun lt!49500 () Unit!2934)

(assert (=> b!98518 (= e!64197 lt!49500)))

(declare-fun lt!49486 () ListLongMap!1513)

(assert (=> b!98518 (= lt!49486 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun lt!49501 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49501 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49483 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49483 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000))))

(declare-fun lt!49492 () Unit!2934)

(assert (=> b!98518 (= lt!49492 (addStillContains!68 lt!49486 lt!49501 (zeroValue!2363 (_2!1175 lt!48824)) lt!49483))))

(assert (=> b!98518 (contains!796 (+!128 lt!49486 (tuple2!2327 lt!49501 (zeroValue!2363 (_2!1175 lt!48824)))) lt!49483)))

(declare-fun lt!49498 () Unit!2934)

(assert (=> b!98518 (= lt!49498 lt!49492)))

(declare-fun lt!49499 () ListLongMap!1513)

(assert (=> b!98518 (= lt!49499 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun lt!49490 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49490 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49495 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49495 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000))))

(declare-fun lt!49489 () Unit!2934)

(assert (=> b!98518 (= lt!49489 (addApplyDifferent!68 lt!49499 lt!49490 (minValue!2363 (_2!1175 lt!48824)) lt!49495))))

(assert (=> b!98518 (= (apply!92 (+!128 lt!49499 (tuple2!2327 lt!49490 (minValue!2363 (_2!1175 lt!48824)))) lt!49495) (apply!92 lt!49499 lt!49495))))

(declare-fun lt!49491 () Unit!2934)

(assert (=> b!98518 (= lt!49491 lt!49489)))

(declare-fun lt!49496 () ListLongMap!1513)

(assert (=> b!98518 (= lt!49496 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun lt!49503 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49503 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49494 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49494 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000))))

(declare-fun lt!49502 () Unit!2934)

(assert (=> b!98518 (= lt!49502 (addApplyDifferent!68 lt!49496 lt!49503 (zeroValue!2363 (_2!1175 lt!48824)) lt!49494))))

(assert (=> b!98518 (= (apply!92 (+!128 lt!49496 (tuple2!2327 lt!49503 (zeroValue!2363 (_2!1175 lt!48824)))) lt!49494) (apply!92 lt!49496 lt!49494))))

(declare-fun lt!49504 () Unit!2934)

(assert (=> b!98518 (= lt!49504 lt!49502)))

(declare-fun lt!49493 () ListLongMap!1513)

(assert (=> b!98518 (= lt!49493 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))))))

(declare-fun lt!49484 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49484 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49485 () (_ BitVec 64))

(assert (=> b!98518 (= lt!49485 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000))))

(assert (=> b!98518 (= lt!49500 (addApplyDifferent!68 lt!49493 lt!49484 (minValue!2363 (_2!1175 lt!48824)) lt!49485))))

(assert (=> b!98518 (= (apply!92 (+!128 lt!49493 (tuple2!2327 lt!49484 (minValue!2363 (_2!1175 lt!48824)))) lt!49485) (apply!92 lt!49493 lt!49485))))

(declare-fun b!98519 () Bool)

(declare-fun e!64204 () Bool)

(assert (=> b!98519 (= e!64204 (= (apply!92 lt!49497 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 (_2!1175 lt!48824))))))

(declare-fun bm!10058 () Bool)

(assert (=> bm!10058 (= call!10059 call!10061)))

(declare-fun b!98520 () Bool)

(assert (=> b!98520 (= e!64195 call!10062)))

(declare-fun b!98521 () Bool)

(declare-fun Unit!2984 () Unit!2934)

(assert (=> b!98521 (= e!64197 Unit!2984)))

(declare-fun b!98522 () Bool)

(declare-fun e!64193 () Bool)

(assert (=> b!98522 (= e!64193 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun b!98523 () Bool)

(declare-fun res!49545 () Bool)

(assert (=> b!98523 (=> (not res!49545) (not e!64201))))

(assert (=> b!98523 (= res!49545 e!64199)))

(declare-fun c!16758 () Bool)

(assert (=> b!98523 (= c!16758 (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26343 () Bool)

(assert (=> d!26343 e!64201))

(declare-fun res!49548 () Bool)

(assert (=> d!26343 (=> (not res!49548) (not e!64201))))

(assert (=> d!26343 (= res!49548 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))))

(declare-fun lt!49488 () ListLongMap!1513)

(assert (=> d!26343 (= lt!49497 lt!49488)))

(declare-fun lt!49487 () Unit!2934)

(assert (=> d!26343 (= lt!49487 e!64197)))

(declare-fun c!16762 () Bool)

(assert (=> d!26343 (= c!16762 e!64193)))

(declare-fun res!49544 () Bool)

(assert (=> d!26343 (=> (not res!49544) (not e!64193))))

(assert (=> d!26343 (= res!49544 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (=> d!26343 (= lt!49488 e!64205)))

(assert (=> d!26343 (= c!16760 (and (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26343 (validMask!0 (mask!6576 (_2!1175 lt!48824)))))

(assert (=> d!26343 (= (getCurrentListMap!453 (_keys!4169 (_2!1175 lt!48824)) (_values!2463 (_2!1175 lt!48824)) (mask!6576 (_2!1175 lt!48824)) (extraKeys!2301 (_2!1175 lt!48824)) (zeroValue!2363 (_2!1175 lt!48824)) (minValue!2363 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1175 lt!48824))) lt!49497)))

(declare-fun bm!10059 () Bool)

(assert (=> bm!10059 (= call!10062 call!10057)))

(declare-fun b!98524 () Bool)

(assert (=> b!98524 (= e!64202 e!64204)))

(declare-fun res!49549 () Bool)

(assert (=> b!98524 (= res!49549 call!10058)))

(assert (=> b!98524 (=> (not res!49549) (not e!64204))))

(declare-fun b!98525 () Bool)

(declare-fun res!49550 () Bool)

(assert (=> b!98525 (=> (not res!49550) (not e!64201))))

(assert (=> b!98525 (= res!49550 e!64194)))

(declare-fun res!49551 () Bool)

(assert (=> b!98525 (=> res!49551 e!64194)))

(assert (=> b!98525 (= res!49551 (not e!64196))))

(declare-fun res!49543 () Bool)

(assert (=> b!98525 (=> (not res!49543) (not e!64196))))

(assert (=> b!98525 (= res!49543 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (= (and d!26343 c!16760) b!98505))

(assert (= (and d!26343 (not c!16760)) b!98515))

(assert (= (and b!98515 c!16759) b!98512))

(assert (= (and b!98515 (not c!16759)) b!98513))

(assert (= (and b!98513 c!16761) b!98517))

(assert (= (and b!98513 (not c!16761)) b!98520))

(assert (= (or b!98517 b!98520) bm!10059))

(assert (= (or b!98512 bm!10059) bm!10055))

(assert (= (or b!98512 b!98517) bm!10058))

(assert (= (or b!98505 bm!10055) bm!10057))

(assert (= (or b!98505 bm!10058) bm!10056))

(assert (= (and d!26343 res!49544) b!98522))

(assert (= (and d!26343 c!16762) b!98518))

(assert (= (and d!26343 (not c!16762)) b!98521))

(assert (= (and d!26343 res!49548) b!98525))

(assert (= (and b!98525 res!49543) b!98511))

(assert (= (and b!98525 (not res!49551)) b!98506))

(assert (= (and b!98506 res!49546) b!98514))

(assert (= (and b!98525 res!49550) b!98523))

(assert (= (and b!98523 c!16758) b!98509))

(assert (= (and b!98523 (not c!16758)) b!98508))

(assert (= (and b!98509 res!49547) b!98516))

(assert (= (or b!98509 b!98508) bm!10053))

(assert (= (and b!98523 res!49545) b!98510))

(assert (= (and b!98510 c!16757) b!98524))

(assert (= (and b!98510 (not c!16757)) b!98507))

(assert (= (and b!98524 res!49549) b!98519))

(assert (= (or b!98524 b!98507) bm!10054))

(declare-fun b_lambda!4369 () Bool)

(assert (=> (not b_lambda!4369) (not b!98514)))

(declare-fun t!5548 () Bool)

(declare-fun tb!1929 () Bool)

(assert (=> (and b!97245 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 (_2!1175 lt!48824))) t!5548) tb!1929))

(declare-fun result!3275 () Bool)

(assert (=> tb!1929 (= result!3275 tp_is_empty!2629)))

(assert (=> b!98514 t!5548))

(declare-fun b_and!6045 () Bool)

(assert (= b_and!6041 (and (=> t!5548 result!3275) b_and!6045)))

(declare-fun tb!1931 () Bool)

(declare-fun t!5550 () Bool)

(assert (=> (and b!97251 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (_2!1175 lt!48824))) t!5550) tb!1931))

(declare-fun result!3277 () Bool)

(assert (= result!3277 result!3275))

(assert (=> b!98514 t!5550))

(declare-fun b_and!6047 () Bool)

(assert (= b_and!6043 (and (=> t!5550 result!3277) b_and!6047)))

(assert (=> b!98506 m!107107))

(assert (=> b!98506 m!107107))

(declare-fun m!107913 () Bool)

(assert (=> b!98506 m!107913))

(declare-fun m!107915 () Bool)

(assert (=> b!98518 m!107915))

(declare-fun m!107917 () Bool)

(assert (=> b!98518 m!107917))

(declare-fun m!107919 () Bool)

(assert (=> b!98518 m!107919))

(assert (=> b!98518 m!107919))

(declare-fun m!107921 () Bool)

(assert (=> b!98518 m!107921))

(declare-fun m!107923 () Bool)

(assert (=> b!98518 m!107923))

(declare-fun m!107925 () Bool)

(assert (=> b!98518 m!107925))

(declare-fun m!107927 () Bool)

(assert (=> b!98518 m!107927))

(declare-fun m!107929 () Bool)

(assert (=> b!98518 m!107929))

(assert (=> b!98518 m!107917))

(declare-fun m!107931 () Bool)

(assert (=> b!98518 m!107931))

(declare-fun m!107933 () Bool)

(assert (=> b!98518 m!107933))

(declare-fun m!107935 () Bool)

(assert (=> b!98518 m!107935))

(declare-fun m!107937 () Bool)

(assert (=> b!98518 m!107937))

(assert (=> b!98518 m!107107))

(assert (=> b!98518 m!107927))

(declare-fun m!107939 () Bool)

(assert (=> b!98518 m!107939))

(declare-fun m!107941 () Bool)

(assert (=> b!98518 m!107941))

(declare-fun m!107943 () Bool)

(assert (=> b!98518 m!107943))

(declare-fun m!107945 () Bool)

(assert (=> b!98518 m!107945))

(assert (=> b!98518 m!107933))

(declare-fun m!107947 () Bool)

(assert (=> bm!10053 m!107947))

(declare-fun m!107949 () Bool)

(assert (=> b!98505 m!107949))

(declare-fun m!107951 () Bool)

(assert (=> bm!10054 m!107951))

(declare-fun m!107953 () Bool)

(assert (=> b!98519 m!107953))

(assert (=> b!98514 m!107107))

(declare-fun m!107955 () Bool)

(assert (=> b!98514 m!107955))

(declare-fun m!107957 () Bool)

(assert (=> b!98514 m!107957))

(declare-fun m!107959 () Bool)

(assert (=> b!98514 m!107959))

(assert (=> b!98514 m!107107))

(declare-fun m!107961 () Bool)

(assert (=> b!98514 m!107961))

(assert (=> b!98514 m!107955))

(assert (=> b!98514 m!107957))

(declare-fun m!107963 () Bool)

(assert (=> d!26343 m!107963))

(declare-fun m!107965 () Bool)

(assert (=> bm!10056 m!107965))

(assert (=> b!98511 m!107107))

(assert (=> b!98511 m!107107))

(assert (=> b!98511 m!107109))

(assert (=> bm!10057 m!107939))

(assert (=> b!98522 m!107107))

(assert (=> b!98522 m!107107))

(assert (=> b!98522 m!107109))

(declare-fun m!107967 () Bool)

(assert (=> b!98516 m!107967))

(assert (=> d!25975 d!26343))

(assert (=> d!25945 d!25935))

(declare-fun d!26345 () Bool)

(assert (=> d!26345 (= (apply!92 (+!128 lt!48749 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!48745) (apply!92 lt!48749 lt!48745))))

(assert (=> d!26345 true))

(declare-fun _$34!865 () Unit!2934)

(assert (=> d!26345 (= (choose!596 lt!48749 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))) lt!48745) _$34!865)))

(declare-fun bs!4057 () Bool)

(assert (= bs!4057 d!26345))

(assert (=> bs!4057 m!106227))

(assert (=> bs!4057 m!106227))

(assert (=> bs!4057 m!106229))

(assert (=> bs!4057 m!106233))

(assert (=> d!25945 d!26345))

(assert (=> d!25945 d!25943))

(declare-fun d!26347 () Bool)

(declare-fun e!64206 () Bool)

(assert (=> d!26347 e!64206))

(declare-fun res!49552 () Bool)

(assert (=> d!26347 (=> res!49552 e!64206)))

(declare-fun lt!49506 () Bool)

(assert (=> d!26347 (= res!49552 (not lt!49506))))

(declare-fun lt!49507 () Bool)

(assert (=> d!26347 (= lt!49506 lt!49507)))

(declare-fun lt!49505 () Unit!2934)

(declare-fun e!64207 () Unit!2934)

(assert (=> d!26347 (= lt!49505 e!64207)))

(declare-fun c!16763 () Bool)

(assert (=> d!26347 (= c!16763 lt!49507)))

(assert (=> d!26347 (= lt!49507 (containsKey!152 (toList!772 lt!48749) lt!48745))))

(assert (=> d!26347 (= (contains!796 lt!48749 lt!48745) lt!49506)))

(declare-fun b!98526 () Bool)

(declare-fun lt!49508 () Unit!2934)

(assert (=> b!98526 (= e!64207 lt!49508)))

(assert (=> b!98526 (= lt!49508 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48749) lt!48745))))

(assert (=> b!98526 (isDefined!102 (getValueByKey!148 (toList!772 lt!48749) lt!48745))))

(declare-fun b!98527 () Bool)

(declare-fun Unit!2985 () Unit!2934)

(assert (=> b!98527 (= e!64207 Unit!2985)))

(declare-fun b!98528 () Bool)

(assert (=> b!98528 (= e!64206 (isDefined!102 (getValueByKey!148 (toList!772 lt!48749) lt!48745)))))

(assert (= (and d!26347 c!16763) b!98526))

(assert (= (and d!26347 (not c!16763)) b!98527))

(assert (= (and d!26347 (not res!49552)) b!98528))

(declare-fun m!107969 () Bool)

(assert (=> d!26347 m!107969))

(declare-fun m!107971 () Bool)

(assert (=> b!98526 m!107971))

(assert (=> b!98526 m!106589))

(assert (=> b!98526 m!106589))

(declare-fun m!107973 () Bool)

(assert (=> b!98526 m!107973))

(assert (=> b!98528 m!106589))

(assert (=> b!98528 m!106589))

(assert (=> b!98528 m!107973))

(assert (=> d!25945 d!26347))

(assert (=> d!25945 d!25955))

(declare-fun d!26349 () Bool)

(declare-fun e!64208 () Bool)

(assert (=> d!26349 e!64208))

(declare-fun res!49553 () Bool)

(assert (=> d!26349 (=> res!49553 e!64208)))

(declare-fun lt!49510 () Bool)

(assert (=> d!26349 (= res!49553 (not lt!49510))))

(declare-fun lt!49511 () Bool)

(assert (=> d!26349 (= lt!49510 lt!49511)))

(declare-fun lt!49509 () Unit!2934)

(declare-fun e!64209 () Unit!2934)

(assert (=> d!26349 (= lt!49509 e!64209)))

(declare-fun c!16764 () Bool)

(assert (=> d!26349 (= c!16764 lt!49511)))

(assert (=> d!26349 (= lt!49511 (containsKey!152 (toList!772 (map!1243 (_2!1175 lt!49116))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26349 (= (contains!796 (map!1243 (_2!1175 lt!49116)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49510)))

(declare-fun b!98529 () Bool)

(declare-fun lt!49512 () Unit!2934)

(assert (=> b!98529 (= e!64209 lt!49512)))

(assert (=> b!98529 (= lt!49512 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (map!1243 (_2!1175 lt!49116))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!98529 (isDefined!102 (getValueByKey!148 (toList!772 (map!1243 (_2!1175 lt!49116))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!98530 () Bool)

(declare-fun Unit!2986 () Unit!2934)

(assert (=> b!98530 (= e!64209 Unit!2986)))

(declare-fun b!98531 () Bool)

(assert (=> b!98531 (= e!64208 (isDefined!102 (getValueByKey!148 (toList!772 (map!1243 (_2!1175 lt!49116))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!26349 c!16764) b!98529))

(assert (= (and d!26349 (not c!16764)) b!98530))

(assert (= (and d!26349 (not res!49553)) b!98531))

(assert (=> d!26349 m!106105))

(declare-fun m!107975 () Bool)

(assert (=> d!26349 m!107975))

(assert (=> b!98529 m!106105))

(declare-fun m!107977 () Bool)

(assert (=> b!98529 m!107977))

(assert (=> b!98529 m!106105))

(declare-fun m!107979 () Bool)

(assert (=> b!98529 m!107979))

(assert (=> b!98529 m!107979))

(declare-fun m!107981 () Bool)

(assert (=> b!98529 m!107981))

(assert (=> b!98531 m!106105))

(assert (=> b!98531 m!107979))

(assert (=> b!98531 m!107979))

(assert (=> b!98531 m!107981))

(assert (=> b!97924 d!26349))

(assert (=> b!97924 d!26189))

(declare-fun b!98532 () Bool)

(declare-fun e!64211 () Bool)

(declare-fun e!64213 () Bool)

(assert (=> b!98532 (= e!64211 e!64213)))

(declare-fun c!16765 () Bool)

(assert (=> b!98532 (= c!16765 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!26351 () Bool)

(declare-fun res!49556 () Bool)

(declare-fun e!64210 () Bool)

(assert (=> d!26351 (=> res!49556 e!64210)))

(assert (=> d!26351 (= res!49556 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26351 (= (arrayNoDuplicates!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16592 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) Nil!1584) Nil!1584)) e!64210)))

(declare-fun call!10063 () Bool)

(declare-fun bm!10060 () Bool)

(assert (=> bm!10060 (= call!10063 (arrayNoDuplicates!0 (_keys!4169 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16765 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16592 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) Nil!1584) Nil!1584)) (ite c!16592 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) Nil!1584) Nil!1584))))))

(declare-fun b!98533 () Bool)

(declare-fun e!64212 () Bool)

(assert (=> b!98533 (= e!64212 (contains!797 (ite c!16592 (Cons!1583 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000) Nil!1584) Nil!1584) (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98534 () Bool)

(assert (=> b!98534 (= e!64213 call!10063)))

(declare-fun b!98535 () Bool)

(assert (=> b!98535 (= e!64213 call!10063)))

(declare-fun b!98536 () Bool)

(assert (=> b!98536 (= e!64210 e!64211)))

(declare-fun res!49555 () Bool)

(assert (=> b!98536 (=> (not res!49555) (not e!64211))))

(assert (=> b!98536 (= res!49555 (not e!64212))))

(declare-fun res!49554 () Bool)

(assert (=> b!98536 (=> (not res!49554) (not e!64212))))

(assert (=> b!98536 (= res!49554 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!26351 (not res!49556)) b!98536))

(assert (= (and b!98536 res!49554) b!98533))

(assert (= (and b!98536 res!49555) b!98532))

(assert (= (and b!98532 c!16765) b!98534))

(assert (= (and b!98532 (not c!16765)) b!98535))

(assert (= (or b!98534 b!98535) bm!10060))

(assert (=> b!98532 m!107033))

(assert (=> b!98532 m!107033))

(assert (=> b!98532 m!107035))

(assert (=> bm!10060 m!107033))

(declare-fun m!107983 () Bool)

(assert (=> bm!10060 m!107983))

(assert (=> b!98533 m!107033))

(assert (=> b!98533 m!107033))

(declare-fun m!107985 () Bool)

(assert (=> b!98533 m!107985))

(assert (=> b!98536 m!107033))

(assert (=> b!98536 m!107033))

(assert (=> b!98536 m!107035))

(assert (=> bm!9988 d!26351))

(declare-fun b!98537 () Bool)

(declare-fun e!64215 () Bool)

(declare-fun e!64217 () Bool)

(assert (=> b!98537 (= e!64215 e!64217)))

(declare-fun c!16766 () Bool)

(assert (=> b!98537 (= c!16766 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26353 () Bool)

(declare-fun res!49559 () Bool)

(declare-fun e!64214 () Bool)

(assert (=> d!26353 (=> res!49559 e!64214)))

(assert (=> d!26353 (= res!49559 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26353 (= (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) #b00000000000000000000000000000000 Nil!1584) e!64214)))

(declare-fun bm!10061 () Bool)

(declare-fun call!10064 () Bool)

(assert (=> bm!10061 (= call!10064 (arrayNoDuplicates!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16766 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000) Nil!1584) Nil!1584)))))

(declare-fun b!98538 () Bool)

(declare-fun e!64216 () Bool)

(assert (=> b!98538 (= e!64216 (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98539 () Bool)

(assert (=> b!98539 (= e!64217 call!10064)))

(declare-fun b!98540 () Bool)

(assert (=> b!98540 (= e!64217 call!10064)))

(declare-fun b!98541 () Bool)

(assert (=> b!98541 (= e!64214 e!64215)))

(declare-fun res!49558 () Bool)

(assert (=> b!98541 (=> (not res!49558) (not e!64215))))

(assert (=> b!98541 (= res!49558 (not e!64216))))

(declare-fun res!49557 () Bool)

(assert (=> b!98541 (=> (not res!49557) (not e!64216))))

(assert (=> b!98541 (= res!49557 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26353 (not res!49559)) b!98541))

(assert (= (and b!98541 res!49557) b!98538))

(assert (= (and b!98541 res!49558) b!98537))

(assert (= (and b!98537 c!16766) b!98539))

(assert (= (and b!98537 (not c!16766)) b!98540))

(assert (= (or b!98539 b!98540) bm!10061))

(assert (=> b!98537 m!107563))

(assert (=> b!98537 m!107563))

(assert (=> b!98537 m!107565))

(assert (=> bm!10061 m!107563))

(declare-fun m!107987 () Bool)

(assert (=> bm!10061 m!107987))

(assert (=> b!98538 m!107563))

(assert (=> b!98538 m!107563))

(declare-fun m!107989 () Bool)

(assert (=> b!98538 m!107989))

(assert (=> b!98541 m!107563))

(assert (=> b!98541 m!107563))

(assert (=> b!98541 m!107565))

(assert (=> b!97859 d!26353))

(declare-fun d!26355 () Bool)

(assert (=> d!26355 (= (apply!92 lt!48873 lt!48869) (get!1288 (getValueByKey!148 (toList!772 lt!48873) lt!48869)))))

(declare-fun bs!4058 () Bool)

(assert (= bs!4058 d!26355))

(declare-fun m!107991 () Bool)

(assert (=> bs!4058 m!107991))

(assert (=> bs!4058 m!107991))

(declare-fun m!107993 () Bool)

(assert (=> bs!4058 m!107993))

(assert (=> b!97644 d!26355))

(declare-fun d!26357 () Bool)

(declare-fun e!64218 () Bool)

(assert (=> d!26357 e!64218))

(declare-fun res!49560 () Bool)

(assert (=> d!26357 (=> res!49560 e!64218)))

(declare-fun lt!49514 () Bool)

(assert (=> d!26357 (= res!49560 (not lt!49514))))

(declare-fun lt!49515 () Bool)

(assert (=> d!26357 (= lt!49514 lt!49515)))

(declare-fun lt!49513 () Unit!2934)

(declare-fun e!64219 () Unit!2934)

(assert (=> d!26357 (= lt!49513 e!64219)))

(declare-fun c!16767 () Bool)

(assert (=> d!26357 (= c!16767 lt!49515)))

(assert (=> d!26357 (= lt!49515 (containsKey!152 (toList!772 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) lt!48857))))

(assert (=> d!26357 (= (contains!796 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) lt!48857) lt!49514)))

(declare-fun b!98542 () Bool)

(declare-fun lt!49516 () Unit!2934)

(assert (=> b!98542 (= e!64219 lt!49516)))

(assert (=> b!98542 (= lt!49516 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) lt!48857))))

(assert (=> b!98542 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) lt!48857))))

(declare-fun b!98543 () Bool)

(declare-fun Unit!2987 () Unit!2934)

(assert (=> b!98543 (= e!64219 Unit!2987)))

(declare-fun b!98544 () Bool)

(assert (=> b!98544 (= e!64218 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) lt!48857)))))

(assert (= (and d!26357 c!16767) b!98542))

(assert (= (and d!26357 (not c!16767)) b!98543))

(assert (= (and d!26357 (not res!49560)) b!98544))

(declare-fun m!107995 () Bool)

(assert (=> d!26357 m!107995))

(declare-fun m!107997 () Bool)

(assert (=> b!98542 m!107997))

(declare-fun m!107999 () Bool)

(assert (=> b!98542 m!107999))

(assert (=> b!98542 m!107999))

(declare-fun m!108001 () Bool)

(assert (=> b!98542 m!108001))

(assert (=> b!98544 m!107999))

(assert (=> b!98544 m!107999))

(assert (=> b!98544 m!108001))

(assert (=> b!97644 d!26357))

(declare-fun d!26359 () Bool)

(declare-fun e!64220 () Bool)

(assert (=> d!26359 e!64220))

(declare-fun res!49562 () Bool)

(assert (=> d!26359 (=> (not res!49562) (not e!64220))))

(declare-fun lt!49520 () ListLongMap!1513)

(assert (=> d!26359 (= res!49562 (contains!796 lt!49520 (_1!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49518 () List!1586)

(assert (=> d!26359 (= lt!49520 (ListLongMap!1514 lt!49518))))

(declare-fun lt!49519 () Unit!2934)

(declare-fun lt!49517 () Unit!2934)

(assert (=> d!26359 (= lt!49519 lt!49517)))

(assert (=> d!26359 (= (getValueByKey!148 lt!49518 (_1!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26359 (= lt!49517 (lemmaContainsTupThenGetReturnValue!67 lt!49518 (_1!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26359 (= lt!49518 (insertStrictlySorted!70 (toList!772 lt!48860) (_1!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26359 (= (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) lt!49520)))

(declare-fun b!98545 () Bool)

(declare-fun res!49561 () Bool)

(assert (=> b!98545 (=> (not res!49561) (not e!64220))))

(assert (=> b!98545 (= res!49561 (= (getValueByKey!148 (toList!772 lt!49520) (_1!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98546 () Bool)

(assert (=> b!98546 (= e!64220 (contains!798 (toList!772 lt!49520) (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26359 res!49562) b!98545))

(assert (= (and b!98545 res!49561) b!98546))

(declare-fun m!108003 () Bool)

(assert (=> d!26359 m!108003))

(declare-fun m!108005 () Bool)

(assert (=> d!26359 m!108005))

(declare-fun m!108007 () Bool)

(assert (=> d!26359 m!108007))

(declare-fun m!108009 () Bool)

(assert (=> d!26359 m!108009))

(declare-fun m!108011 () Bool)

(assert (=> b!98545 m!108011))

(declare-fun m!108013 () Bool)

(assert (=> b!98546 m!108013))

(assert (=> b!97644 d!26359))

(declare-fun d!26361 () Bool)

(assert (=> d!26361 (= (apply!92 (+!128 lt!48867 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) lt!48859) (apply!92 lt!48867 lt!48859))))

(declare-fun lt!49521 () Unit!2934)

(assert (=> d!26361 (= lt!49521 (choose!596 lt!48867 lt!48858 (minValue!2363 newMap!16) lt!48859))))

(declare-fun e!64221 () Bool)

(assert (=> d!26361 e!64221))

(declare-fun res!49563 () Bool)

(assert (=> d!26361 (=> (not res!49563) (not e!64221))))

(assert (=> d!26361 (= res!49563 (contains!796 lt!48867 lt!48859))))

(assert (=> d!26361 (= (addApplyDifferent!68 lt!48867 lt!48858 (minValue!2363 newMap!16) lt!48859) lt!49521)))

(declare-fun b!98547 () Bool)

(assert (=> b!98547 (= e!64221 (not (= lt!48859 lt!48858)))))

(assert (= (and d!26361 res!49563) b!98547))

(declare-fun m!108015 () Bool)

(assert (=> d!26361 m!108015))

(declare-fun m!108017 () Bool)

(assert (=> d!26361 m!108017))

(assert (=> d!26361 m!106391))

(assert (=> d!26361 m!106391))

(assert (=> d!26361 m!106393))

(assert (=> d!26361 m!106407))

(assert (=> b!97644 d!26361))

(declare-fun d!26363 () Bool)

(assert (=> d!26363 (= (apply!92 (+!128 lt!48867 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) lt!48859) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48867 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))) lt!48859)))))

(declare-fun bs!4059 () Bool)

(assert (= bs!4059 d!26363))

(declare-fun m!108019 () Bool)

(assert (=> bs!4059 m!108019))

(assert (=> bs!4059 m!108019))

(declare-fun m!108021 () Bool)

(assert (=> bs!4059 m!108021))

(assert (=> b!97644 d!26363))

(declare-fun d!26365 () Bool)

(assert (=> d!26365 (= (apply!92 (+!128 lt!48873 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) lt!48869) (apply!92 lt!48873 lt!48869))))

(declare-fun lt!49522 () Unit!2934)

(assert (=> d!26365 (= lt!49522 (choose!596 lt!48873 lt!48864 (minValue!2363 newMap!16) lt!48869))))

(declare-fun e!64222 () Bool)

(assert (=> d!26365 e!64222))

(declare-fun res!49564 () Bool)

(assert (=> d!26365 (=> (not res!49564) (not e!64222))))

(assert (=> d!26365 (= res!49564 (contains!796 lt!48873 lt!48869))))

(assert (=> d!26365 (= (addApplyDifferent!68 lt!48873 lt!48864 (minValue!2363 newMap!16) lt!48869) lt!49522)))

(declare-fun b!98548 () Bool)

(assert (=> b!98548 (= e!64222 (not (= lt!48869 lt!48864)))))

(assert (= (and d!26365 res!49564) b!98548))

(declare-fun m!108023 () Bool)

(assert (=> d!26365 m!108023))

(declare-fun m!108025 () Bool)

(assert (=> d!26365 m!108025))

(assert (=> d!26365 m!106383))

(assert (=> d!26365 m!106383))

(assert (=> d!26365 m!106385))

(assert (=> d!26365 m!106389))

(assert (=> b!97644 d!26365))

(declare-fun d!26367 () Bool)

(declare-fun e!64223 () Bool)

(assert (=> d!26367 e!64223))

(declare-fun res!49566 () Bool)

(assert (=> d!26367 (=> (not res!49566) (not e!64223))))

(declare-fun lt!49526 () ListLongMap!1513)

(assert (=> d!26367 (= res!49566 (contains!796 lt!49526 (_1!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49524 () List!1586)

(assert (=> d!26367 (= lt!49526 (ListLongMap!1514 lt!49524))))

(declare-fun lt!49525 () Unit!2934)

(declare-fun lt!49523 () Unit!2934)

(assert (=> d!26367 (= lt!49525 lt!49523)))

(assert (=> d!26367 (= (getValueByKey!148 lt!49524 (_1!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26367 (= lt!49523 (lemmaContainsTupThenGetReturnValue!67 lt!49524 (_1!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26367 (= lt!49524 (insertStrictlySorted!70 (toList!772 lt!48870) (_1!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26367 (= (+!128 lt!48870 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) lt!49526)))

(declare-fun b!98549 () Bool)

(declare-fun res!49565 () Bool)

(assert (=> b!98549 (=> (not res!49565) (not e!64223))))

(assert (=> b!98549 (= res!49565 (= (getValueByKey!148 (toList!772 lt!49526) (_1!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98550 () Bool)

(assert (=> b!98550 (= e!64223 (contains!798 (toList!772 lt!49526) (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26367 res!49566) b!98549))

(assert (= (and b!98549 res!49565) b!98550))

(declare-fun m!108027 () Bool)

(assert (=> d!26367 m!108027))

(declare-fun m!108029 () Bool)

(assert (=> d!26367 m!108029))

(declare-fun m!108031 () Bool)

(assert (=> d!26367 m!108031))

(declare-fun m!108033 () Bool)

(assert (=> d!26367 m!108033))

(declare-fun m!108035 () Bool)

(assert (=> b!98549 m!108035))

(declare-fun m!108037 () Bool)

(assert (=> b!98550 m!108037))

(assert (=> b!97644 d!26367))

(declare-fun d!26369 () Bool)

(assert (=> d!26369 (= (apply!92 lt!48867 lt!48859) (get!1288 (getValueByKey!148 (toList!772 lt!48867) lt!48859)))))

(declare-fun bs!4060 () Bool)

(assert (= bs!4060 d!26369))

(declare-fun m!108039 () Bool)

(assert (=> bs!4060 m!108039))

(assert (=> bs!4060 m!108039))

(declare-fun m!108041 () Bool)

(assert (=> bs!4060 m!108041))

(assert (=> b!97644 d!26369))

(declare-fun d!26371 () Bool)

(declare-fun e!64224 () Bool)

(assert (=> d!26371 e!64224))

(declare-fun res!49568 () Bool)

(assert (=> d!26371 (=> (not res!49568) (not e!64224))))

(declare-fun lt!49530 () ListLongMap!1513)

(assert (=> d!26371 (= res!49568 (contains!796 lt!49530 (_1!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))))))

(declare-fun lt!49528 () List!1586)

(assert (=> d!26371 (= lt!49530 (ListLongMap!1514 lt!49528))))

(declare-fun lt!49529 () Unit!2934)

(declare-fun lt!49527 () Unit!2934)

(assert (=> d!26371 (= lt!49529 lt!49527)))

(assert (=> d!26371 (= (getValueByKey!148 lt!49528 (_1!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))))))

(assert (=> d!26371 (= lt!49527 (lemmaContainsTupThenGetReturnValue!67 lt!49528 (_1!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))))))

(assert (=> d!26371 (= lt!49528 (insertStrictlySorted!70 (toList!772 lt!48873) (_1!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))))))

(assert (=> d!26371 (= (+!128 lt!48873 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) lt!49530)))

(declare-fun b!98551 () Bool)

(declare-fun res!49567 () Bool)

(assert (=> b!98551 (=> (not res!49567) (not e!64224))))

(assert (=> b!98551 (= res!49567 (= (getValueByKey!148 (toList!772 lt!49530) (_1!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))))))))

(declare-fun b!98552 () Bool)

(assert (=> b!98552 (= e!64224 (contains!798 (toList!772 lt!49530) (tuple2!2327 lt!48864 (minValue!2363 newMap!16))))))

(assert (= (and d!26371 res!49568) b!98551))

(assert (= (and b!98551 res!49567) b!98552))

(declare-fun m!108043 () Bool)

(assert (=> d!26371 m!108043))

(declare-fun m!108045 () Bool)

(assert (=> d!26371 m!108045))

(declare-fun m!108047 () Bool)

(assert (=> d!26371 m!108047))

(declare-fun m!108049 () Bool)

(assert (=> d!26371 m!108049))

(declare-fun m!108051 () Bool)

(assert (=> b!98551 m!108051))

(declare-fun m!108053 () Bool)

(assert (=> b!98552 m!108053))

(assert (=> b!97644 d!26371))

(declare-fun d!26373 () Bool)

(assert (=> d!26373 (= (apply!92 (+!128 lt!48870 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) lt!48868) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48870 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16)))) lt!48868)))))

(declare-fun bs!4061 () Bool)

(assert (= bs!4061 d!26373))

(declare-fun m!108055 () Bool)

(assert (=> bs!4061 m!108055))

(assert (=> bs!4061 m!108055))

(declare-fun m!108057 () Bool)

(assert (=> bs!4061 m!108057))

(assert (=> b!97644 d!26373))

(declare-fun d!26375 () Bool)

(assert (=> d!26375 (contains!796 (+!128 lt!48860 (tuple2!2327 lt!48875 (zeroValue!2363 newMap!16))) lt!48857)))

(declare-fun lt!49531 () Unit!2934)

(assert (=> d!26375 (= lt!49531 (choose!597 lt!48860 lt!48875 (zeroValue!2363 newMap!16) lt!48857))))

(assert (=> d!26375 (contains!796 lt!48860 lt!48857)))

(assert (=> d!26375 (= (addStillContains!68 lt!48860 lt!48875 (zeroValue!2363 newMap!16) lt!48857) lt!49531)))

(declare-fun bs!4062 () Bool)

(assert (= bs!4062 d!26375))

(assert (=> bs!4062 m!106381))

(assert (=> bs!4062 m!106381))

(assert (=> bs!4062 m!106395))

(declare-fun m!108059 () Bool)

(assert (=> bs!4062 m!108059))

(declare-fun m!108061 () Bool)

(assert (=> bs!4062 m!108061))

(assert (=> b!97644 d!26375))

(declare-fun d!26377 () Bool)

(declare-fun e!64225 () Bool)

(assert (=> d!26377 e!64225))

(declare-fun res!49570 () Bool)

(assert (=> d!26377 (=> (not res!49570) (not e!64225))))

(declare-fun lt!49535 () ListLongMap!1513)

(assert (=> d!26377 (= res!49570 (contains!796 lt!49535 (_1!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))))))

(declare-fun lt!49533 () List!1586)

(assert (=> d!26377 (= lt!49535 (ListLongMap!1514 lt!49533))))

(declare-fun lt!49534 () Unit!2934)

(declare-fun lt!49532 () Unit!2934)

(assert (=> d!26377 (= lt!49534 lt!49532)))

(assert (=> d!26377 (= (getValueByKey!148 lt!49533 (_1!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))))))

(assert (=> d!26377 (= lt!49532 (lemmaContainsTupThenGetReturnValue!67 lt!49533 (_1!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))))))

(assert (=> d!26377 (= lt!49533 (insertStrictlySorted!70 (toList!772 lt!48867) (_1!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))))))

(assert (=> d!26377 (= (+!128 lt!48867 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))) lt!49535)))

(declare-fun b!98553 () Bool)

(declare-fun res!49569 () Bool)

(assert (=> b!98553 (=> (not res!49569) (not e!64225))))

(assert (=> b!98553 (= res!49569 (= (getValueByKey!148 (toList!772 lt!49535) (_1!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 lt!48858 (minValue!2363 newMap!16))))))))

(declare-fun b!98554 () Bool)

(assert (=> b!98554 (= e!64225 (contains!798 (toList!772 lt!49535) (tuple2!2327 lt!48858 (minValue!2363 newMap!16))))))

(assert (= (and d!26377 res!49570) b!98553))

(assert (= (and b!98553 res!49569) b!98554))

(declare-fun m!108063 () Bool)

(assert (=> d!26377 m!108063))

(declare-fun m!108065 () Bool)

(assert (=> d!26377 m!108065))

(declare-fun m!108067 () Bool)

(assert (=> d!26377 m!108067))

(declare-fun m!108069 () Bool)

(assert (=> d!26377 m!108069))

(declare-fun m!108071 () Bool)

(assert (=> b!98553 m!108071))

(declare-fun m!108073 () Bool)

(assert (=> b!98554 m!108073))

(assert (=> b!97644 d!26377))

(assert (=> b!97644 d!26131))

(declare-fun d!26379 () Bool)

(assert (=> d!26379 (= (apply!92 (+!128 lt!48873 (tuple2!2327 lt!48864 (minValue!2363 newMap!16))) lt!48869) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48873 (tuple2!2327 lt!48864 (minValue!2363 newMap!16)))) lt!48869)))))

(declare-fun bs!4063 () Bool)

(assert (= bs!4063 d!26379))

(declare-fun m!108075 () Bool)

(assert (=> bs!4063 m!108075))

(assert (=> bs!4063 m!108075))

(declare-fun m!108077 () Bool)

(assert (=> bs!4063 m!108077))

(assert (=> b!97644 d!26379))

(declare-fun d!26381 () Bool)

(assert (=> d!26381 (= (apply!92 lt!48870 lt!48868) (get!1288 (getValueByKey!148 (toList!772 lt!48870) lt!48868)))))

(declare-fun bs!4064 () Bool)

(assert (= bs!4064 d!26381))

(declare-fun m!108079 () Bool)

(assert (=> bs!4064 m!108079))

(assert (=> bs!4064 m!108079))

(declare-fun m!108081 () Bool)

(assert (=> bs!4064 m!108081))

(assert (=> b!97644 d!26381))

(declare-fun d!26383 () Bool)

(assert (=> d!26383 (= (apply!92 (+!128 lt!48870 (tuple2!2327 lt!48877 (zeroValue!2363 newMap!16))) lt!48868) (apply!92 lt!48870 lt!48868))))

(declare-fun lt!49536 () Unit!2934)

(assert (=> d!26383 (= lt!49536 (choose!596 lt!48870 lt!48877 (zeroValue!2363 newMap!16) lt!48868))))

(declare-fun e!64226 () Bool)

(assert (=> d!26383 e!64226))

(declare-fun res!49571 () Bool)

(assert (=> d!26383 (=> (not res!49571) (not e!64226))))

(assert (=> d!26383 (= res!49571 (contains!796 lt!48870 lt!48868))))

(assert (=> d!26383 (= (addApplyDifferent!68 lt!48870 lt!48877 (zeroValue!2363 newMap!16) lt!48868) lt!49536)))

(declare-fun b!98555 () Bool)

(assert (=> b!98555 (= e!64226 (not (= lt!48868 lt!48877)))))

(assert (= (and d!26383 res!49571) b!98555))

(declare-fun m!108083 () Bool)

(assert (=> d!26383 m!108083))

(declare-fun m!108085 () Bool)

(assert (=> d!26383 m!108085))

(assert (=> d!26383 m!106397))

(assert (=> d!26383 m!106397))

(assert (=> d!26383 m!106399))

(assert (=> d!26383 m!106387))

(assert (=> b!97644 d!26383))

(declare-fun d!26385 () Bool)

(assert (=> d!26385 (= (get!1287 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97680 d!26385))

(declare-fun d!26387 () Bool)

(declare-fun res!49572 () Bool)

(declare-fun e!64227 () Bool)

(assert (=> d!26387 (=> res!49572 e!64227)))

(assert (=> d!26387 (= res!49572 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26387 (= (containsKey!152 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64227)))

(declare-fun b!98556 () Bool)

(declare-fun e!64228 () Bool)

(assert (=> b!98556 (= e!64227 e!64228)))

(declare-fun res!49573 () Bool)

(assert (=> b!98556 (=> (not res!49573) (not e!64228))))

(assert (=> b!98556 (= res!49573 (and (or (not ((_ is Cons!1582) (toList!772 lt!48747))) (bvsle (_1!1174 (h!2176 (toList!772 lt!48747))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1582) (toList!772 lt!48747)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48747))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!98557 () Bool)

(assert (=> b!98557 (= e!64228 (containsKey!152 (t!5531 (toList!772 lt!48747)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26387 (not res!49572)) b!98556))

(assert (= (and b!98556 res!49573) b!98557))

(assert (=> b!98557 m!106219))

(declare-fun m!108087 () Bool)

(assert (=> b!98557 m!108087))

(assert (=> d!26013 d!26387))

(assert (=> b!97930 d!26045))

(declare-fun d!26389 () Bool)

(declare-fun res!49575 () Bool)

(declare-fun e!64230 () Bool)

(assert (=> d!26389 (=> res!49575 e!64230)))

(assert (=> d!26389 (= res!49575 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26389 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992)))) e!64230)))

(declare-fun b!98558 () Bool)

(declare-fun e!64229 () Bool)

(assert (=> b!98558 (= e!64230 e!64229)))

(declare-fun c!16768 () Bool)

(assert (=> b!98558 (= c!16768 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98559 () Bool)

(declare-fun e!64231 () Bool)

(assert (=> b!98559 (= e!64229 e!64231)))

(declare-fun lt!49538 () (_ BitVec 64))

(assert (=> b!98559 (= lt!49538 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!49539 () Unit!2934)

(assert (=> b!98559 (= lt!49539 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) lt!49538 #b00000000000000000000000000000000))))

(assert (=> b!98559 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) lt!49538 #b00000000000000000000000000000000)))

(declare-fun lt!49537 () Unit!2934)

(assert (=> b!98559 (= lt!49537 lt!49539)))

(declare-fun res!49574 () Bool)

(assert (=> b!98559 (= res!49574 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) #b00000000000000000000000000000000) (_keys!4169 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992)))) (Found!256 #b00000000000000000000000000000000)))))

(assert (=> b!98559 (=> (not res!49574) (not e!64231))))

(declare-fun b!98560 () Bool)

(declare-fun call!10065 () Bool)

(assert (=> b!98560 (= e!64229 call!10065)))

(declare-fun b!98561 () Bool)

(assert (=> b!98561 (= e!64231 call!10065)))

(declare-fun bm!10062 () Bool)

(assert (=> bm!10062 (= call!10065 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4169 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992)))))))

(assert (= (and d!26389 (not res!49575)) b!98558))

(assert (= (and b!98558 c!16768) b!98559))

(assert (= (and b!98558 (not c!16768)) b!98560))

(assert (= (and b!98559 res!49574) b!98561))

(assert (= (or b!98561 b!98560) bm!10062))

(assert (=> b!98558 m!107563))

(assert (=> b!98558 m!107563))

(assert (=> b!98558 m!107565))

(assert (=> b!98559 m!107563))

(declare-fun m!108089 () Bool)

(assert (=> b!98559 m!108089))

(declare-fun m!108091 () Bool)

(assert (=> b!98559 m!108091))

(assert (=> b!98559 m!107563))

(declare-fun m!108093 () Bool)

(assert (=> b!98559 m!108093))

(declare-fun m!108095 () Bool)

(assert (=> bm!10062 m!108095))

(assert (=> b!97858 d!26389))

(declare-fun d!26391 () Bool)

(assert (=> d!26391 (= (apply!92 lt!48936 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48936) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4065 () Bool)

(assert (= bs!4065 d!26391))

(assert (=> bs!4065 m!106943))

(assert (=> bs!4065 m!106943))

(declare-fun m!108097 () Bool)

(assert (=> bs!4065 m!108097))

(assert (=> b!97718 d!26391))

(declare-fun d!26393 () Bool)

(assert (=> d!26393 (= (get!1286 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2790 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97679 d!26393))

(declare-fun d!26395 () Bool)

(assert (=> d!26395 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49540 () Unit!2934)

(assert (=> d!26395 (= lt!49540 (choose!601 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64232 () Bool)

(assert (=> d!26395 e!64232))

(declare-fun res!49576 () Bool)

(assert (=> d!26395 (=> (not res!49576) (not e!64232))))

(assert (=> d!26395 (= res!49576 (isStrictlySorted!299 (toList!772 lt!48747)))))

(assert (=> d!26395 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000) lt!49540)))

(declare-fun b!98562 () Bool)

(assert (=> b!98562 (= e!64232 (containsKey!152 (toList!772 lt!48747) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26395 res!49576) b!98562))

(assert (=> d!26395 m!106525))

(assert (=> d!26395 m!106525))

(assert (=> d!26395 m!106739))

(declare-fun m!108099 () Bool)

(assert (=> d!26395 m!108099))

(assert (=> d!26395 m!107123))

(assert (=> b!98562 m!106735))

(assert (=> b!97822 d!26395))

(assert (=> b!97822 d!26113))

(assert (=> b!97822 d!26065))

(declare-fun d!26397 () Bool)

(assert (=> d!26397 (= (get!1288 (getValueByKey!148 (toList!772 lt!48749) lt!48745)) (v!2797 (getValueByKey!148 (toList!772 lt!48749) lt!48745)))))

(assert (=> d!25935 d!26397))

(declare-fun b!98564 () Bool)

(declare-fun e!64233 () Option!154)

(declare-fun e!64234 () Option!154)

(assert (=> b!98564 (= e!64233 e!64234)))

(declare-fun c!16770 () Bool)

(assert (=> b!98564 (= c!16770 (and ((_ is Cons!1582) (toList!772 lt!48749)) (not (= (_1!1174 (h!2176 (toList!772 lt!48749))) lt!48745))))))

(declare-fun b!98565 () Bool)

(assert (=> b!98565 (= e!64234 (getValueByKey!148 (t!5531 (toList!772 lt!48749)) lt!48745))))

(declare-fun b!98563 () Bool)

(assert (=> b!98563 (= e!64233 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48749)))))))

(declare-fun d!26399 () Bool)

(declare-fun c!16769 () Bool)

(assert (=> d!26399 (= c!16769 (and ((_ is Cons!1582) (toList!772 lt!48749)) (= (_1!1174 (h!2176 (toList!772 lt!48749))) lt!48745)))))

(assert (=> d!26399 (= (getValueByKey!148 (toList!772 lt!48749) lt!48745) e!64233)))

(declare-fun b!98566 () Bool)

(assert (=> b!98566 (= e!64234 None!152)))

(assert (= (and d!26399 c!16769) b!98563))

(assert (= (and d!26399 (not c!16769)) b!98564))

(assert (= (and b!98564 c!16770) b!98565))

(assert (= (and b!98564 (not c!16770)) b!98566))

(declare-fun m!108101 () Bool)

(assert (=> b!98565 m!108101))

(assert (=> d!25935 d!26399))

(declare-fun d!26401 () Bool)

(declare-fun e!64235 () Bool)

(assert (=> d!26401 e!64235))

(declare-fun res!49577 () Bool)

(assert (=> d!26401 (=> res!49577 e!64235)))

(declare-fun lt!49542 () Bool)

(assert (=> d!26401 (= res!49577 (not lt!49542))))

(declare-fun lt!49543 () Bool)

(assert (=> d!26401 (= lt!49542 lt!49543)))

(declare-fun lt!49541 () Unit!2934)

(declare-fun e!64236 () Unit!2934)

(assert (=> d!26401 (= lt!49541 e!64236)))

(declare-fun c!16771 () Bool)

(assert (=> d!26401 (= c!16771 lt!49543)))

(assert (=> d!26401 (= lt!49543 (containsKey!152 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!26401 (= (contains!796 lt!48993 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49542)))

(declare-fun b!98567 () Bool)

(declare-fun lt!49544 () Unit!2934)

(assert (=> b!98567 (= e!64236 lt!49544)))

(assert (=> b!98567 (= lt!49544 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> b!98567 (isDefined!102 (getValueByKey!148 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98568 () Bool)

(declare-fun Unit!2988 () Unit!2934)

(assert (=> b!98568 (= e!64236 Unit!2988)))

(declare-fun b!98569 () Bool)

(assert (=> b!98569 (= e!64235 (isDefined!102 (getValueByKey!148 (toList!772 lt!48993) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26401 c!16771) b!98567))

(assert (= (and d!26401 (not c!16771)) b!98568))

(assert (= (and d!26401 (not res!49577)) b!98569))

(declare-fun m!108103 () Bool)

(assert (=> d!26401 m!108103))

(declare-fun m!108105 () Bool)

(assert (=> b!98567 m!108105))

(assert (=> b!98567 m!106677))

(assert (=> b!98567 m!106677))

(declare-fun m!108107 () Bool)

(assert (=> b!98567 m!108107))

(assert (=> b!98569 m!106677))

(assert (=> b!98569 m!106677))

(assert (=> b!98569 m!108107))

(assert (=> d!25957 d!26401))

(declare-fun b!98571 () Bool)

(declare-fun e!64237 () Option!154)

(declare-fun e!64238 () Option!154)

(assert (=> b!98571 (= e!64237 e!64238)))

(declare-fun c!16773 () Bool)

(assert (=> b!98571 (= c!16773 (and ((_ is Cons!1582) lt!48991) (not (= (_1!1174 (h!2176 lt!48991)) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98572 () Bool)

(assert (=> b!98572 (= e!64238 (getValueByKey!148 (t!5531 lt!48991) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98570 () Bool)

(assert (=> b!98570 (= e!64237 (Some!153 (_2!1174 (h!2176 lt!48991))))))

(declare-fun c!16772 () Bool)

(declare-fun d!26403 () Bool)

(assert (=> d!26403 (= c!16772 (and ((_ is Cons!1582) lt!48991) (= (_1!1174 (h!2176 lt!48991)) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26403 (= (getValueByKey!148 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64237)))

(declare-fun b!98573 () Bool)

(assert (=> b!98573 (= e!64238 None!152)))

(assert (= (and d!26403 c!16772) b!98570))

(assert (= (and d!26403 (not c!16772)) b!98571))

(assert (= (and b!98571 c!16773) b!98572))

(assert (= (and b!98571 (not c!16773)) b!98573))

(declare-fun m!108109 () Bool)

(assert (=> b!98572 m!108109))

(assert (=> d!25957 d!26403))

(declare-fun d!26405 () Bool)

(assert (=> d!26405 (= (getValueByKey!148 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49545 () Unit!2934)

(assert (=> d!26405 (= lt!49545 (choose!604 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!64239 () Bool)

(assert (=> d!26405 e!64239))

(declare-fun res!49578 () Bool)

(assert (=> d!26405 (=> (not res!49578) (not e!64239))))

(assert (=> d!26405 (= res!49578 (isStrictlySorted!299 lt!48991))))

(assert (=> d!26405 (= (lemmaContainsTupThenGetReturnValue!67 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49545)))

(declare-fun b!98574 () Bool)

(declare-fun res!49579 () Bool)

(assert (=> b!98574 (=> (not res!49579) (not e!64239))))

(assert (=> b!98574 (= res!49579 (containsKey!152 lt!48991 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98575 () Bool)

(assert (=> b!98575 (= e!64239 (contains!798 lt!48991 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26405 res!49578) b!98574))

(assert (= (and b!98574 res!49579) b!98575))

(assert (=> d!26405 m!106671))

(declare-fun m!108111 () Bool)

(assert (=> d!26405 m!108111))

(declare-fun m!108113 () Bool)

(assert (=> d!26405 m!108113))

(declare-fun m!108115 () Bool)

(assert (=> b!98574 m!108115))

(declare-fun m!108117 () Bool)

(assert (=> b!98575 m!108117))

(assert (=> d!25957 d!26405))

(declare-fun bm!10063 () Bool)

(declare-fun call!10068 () List!1586)

(declare-fun call!10067 () List!1586)

(assert (=> bm!10063 (= call!10068 call!10067)))

(declare-fun b!98577 () Bool)

(declare-fun e!64240 () List!1586)

(assert (=> b!98577 (= e!64240 call!10068)))

(declare-fun b!98578 () Bool)

(declare-fun c!16775 () Bool)

(assert (=> b!98578 (= c!16775 (and ((_ is Cons!1582) (toList!772 lt!48746)) (bvsgt (_1!1174 (h!2176 (toList!772 lt!48746))) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!64244 () List!1586)

(assert (=> b!98578 (= e!64244 e!64240)))

(declare-fun bm!10064 () Bool)

(declare-fun call!10066 () List!1586)

(assert (=> bm!10064 (= call!10067 call!10066)))

(declare-fun e!64241 () List!1586)

(declare-fun c!16776 () Bool)

(declare-fun bm!10065 () Bool)

(assert (=> bm!10065 (= call!10066 ($colon$colon!77 e!64241 (ite c!16776 (h!2176 (toList!772 lt!48746)) (tuple2!2327 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun c!16777 () Bool)

(assert (=> bm!10065 (= c!16777 c!16776)))

(declare-fun b!98579 () Bool)

(assert (=> b!98579 (= e!64244 call!10067)))

(declare-fun b!98580 () Bool)

(declare-fun e!64242 () List!1586)

(assert (=> b!98580 (= e!64242 e!64244)))

(declare-fun c!16774 () Bool)

(assert (=> b!98580 (= c!16774 (and ((_ is Cons!1582) (toList!772 lt!48746)) (= (_1!1174 (h!2176 (toList!772 lt!48746))) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98581 () Bool)

(assert (=> b!98581 (= e!64242 call!10066)))

(declare-fun b!98582 () Bool)

(declare-fun res!49581 () Bool)

(declare-fun e!64243 () Bool)

(assert (=> b!98582 (=> (not res!49581) (not e!64243))))

(declare-fun lt!49546 () List!1586)

(assert (=> b!98582 (= res!49581 (containsKey!152 lt!49546 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98583 () Bool)

(assert (=> b!98583 (= e!64243 (contains!798 lt!49546 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun d!26407 () Bool)

(assert (=> d!26407 e!64243))

(declare-fun res!49580 () Bool)

(assert (=> d!26407 (=> (not res!49580) (not e!64243))))

(assert (=> d!26407 (= res!49580 (isStrictlySorted!299 lt!49546))))

(assert (=> d!26407 (= lt!49546 e!64242)))

(assert (=> d!26407 (= c!16776 (and ((_ is Cons!1582) (toList!772 lt!48746)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48746))) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26407 (isStrictlySorted!299 (toList!772 lt!48746))))

(assert (=> d!26407 (= (insertStrictlySorted!70 (toList!772 lt!48746) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49546)))

(declare-fun b!98576 () Bool)

(assert (=> b!98576 (= e!64241 (ite c!16774 (t!5531 (toList!772 lt!48746)) (ite c!16775 (Cons!1582 (h!2176 (toList!772 lt!48746)) (t!5531 (toList!772 lt!48746))) Nil!1583)))))

(declare-fun b!98584 () Bool)

(assert (=> b!98584 (= e!64240 call!10068)))

(declare-fun b!98585 () Bool)

(assert (=> b!98585 (= e!64241 (insertStrictlySorted!70 (t!5531 (toList!772 lt!48746)) (_1!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48753 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26407 c!16776) b!98581))

(assert (= (and d!26407 (not c!16776)) b!98580))

(assert (= (and b!98580 c!16774) b!98579))

(assert (= (and b!98580 (not c!16774)) b!98578))

(assert (= (and b!98578 c!16775) b!98577))

(assert (= (and b!98578 (not c!16775)) b!98584))

(assert (= (or b!98577 b!98584) bm!10063))

(assert (= (or b!98579 bm!10063) bm!10064))

(assert (= (or b!98581 bm!10064) bm!10065))

(assert (= (and bm!10065 c!16777) b!98585))

(assert (= (and bm!10065 (not c!16777)) b!98576))

(assert (= (and d!26407 res!49580) b!98582))

(assert (= (and b!98582 res!49581) b!98583))

(declare-fun m!108119 () Bool)

(assert (=> b!98582 m!108119))

(declare-fun m!108121 () Bool)

(assert (=> b!98583 m!108121))

(declare-fun m!108123 () Bool)

(assert (=> bm!10065 m!108123))

(declare-fun m!108125 () Bool)

(assert (=> d!26407 m!108125))

(declare-fun m!108127 () Bool)

(assert (=> d!26407 m!108127))

(declare-fun m!108129 () Bool)

(assert (=> b!98585 m!108129))

(assert (=> d!25957 d!26407))

(declare-fun d!26409 () Bool)

(assert (=> d!26409 (= (get!1288 (getValueByKey!148 (toList!772 lt!48743) lt!48735)) (v!2797 (getValueByKey!148 (toList!772 lt!48743) lt!48735)))))

(assert (=> d!25965 d!26409))

(declare-fun b!98587 () Bool)

(declare-fun e!64245 () Option!154)

(declare-fun e!64246 () Option!154)

(assert (=> b!98587 (= e!64245 e!64246)))

(declare-fun c!16779 () Bool)

(assert (=> b!98587 (= c!16779 (and ((_ is Cons!1582) (toList!772 lt!48743)) (not (= (_1!1174 (h!2176 (toList!772 lt!48743))) lt!48735))))))

(declare-fun b!98588 () Bool)

(assert (=> b!98588 (= e!64246 (getValueByKey!148 (t!5531 (toList!772 lt!48743)) lt!48735))))

(declare-fun b!98586 () Bool)

(assert (=> b!98586 (= e!64245 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48743)))))))

(declare-fun d!26411 () Bool)

(declare-fun c!16778 () Bool)

(assert (=> d!26411 (= c!16778 (and ((_ is Cons!1582) (toList!772 lt!48743)) (= (_1!1174 (h!2176 (toList!772 lt!48743))) lt!48735)))))

(assert (=> d!26411 (= (getValueByKey!148 (toList!772 lt!48743) lt!48735) e!64245)))

(declare-fun b!98589 () Bool)

(assert (=> b!98589 (= e!64246 None!152)))

(assert (= (and d!26411 c!16778) b!98586))

(assert (= (and d!26411 (not c!16778)) b!98587))

(assert (= (and b!98587 c!16779) b!98588))

(assert (= (and b!98587 (not c!16779)) b!98589))

(declare-fun m!108131 () Bool)

(assert (=> b!98588 m!108131))

(assert (=> d!25965 d!26411))

(declare-fun d!26413 () Bool)

(assert (=> d!26413 (= (apply!92 lt!48936 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (getValueByKey!148 (toList!772 lt!48936) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4066 () Bool)

(assert (= bs!4066 d!26413))

(assert (=> bs!4066 m!106375))

(declare-fun m!108133 () Bool)

(assert (=> bs!4066 m!108133))

(assert (=> bs!4066 m!108133))

(declare-fun m!108135 () Bool)

(assert (=> bs!4066 m!108135))

(assert (=> b!97716 d!26413))

(declare-fun d!26415 () Bool)

(declare-fun c!16780 () Bool)

(assert (=> d!26415 (= c!16780 ((_ is ValueCellFull!971) (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!64247 () V!3153)

(assert (=> d!26415 (= (get!1285 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64247)))

(declare-fun b!98590 () Bool)

(assert (=> b!98590 (= e!64247 (get!1286 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98591 () Bool)

(assert (=> b!98591 (= e!64247 (get!1287 (select (arr!2003 (ite (or c!16508 c!16500) (_values!2463 newMap!16) (array!4220 (store (arr!2003 (_values!2463 newMap!16)) (index!3168 lt!48847) (ValueCellFull!971 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2254 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26415 c!16780) b!98590))

(assert (= (and d!26415 (not c!16780)) b!98591))

(assert (=> b!98590 m!106571))

(assert (=> b!98590 m!106421))

(declare-fun m!108137 () Bool)

(assert (=> b!98590 m!108137))

(assert (=> b!98591 m!106571))

(assert (=> b!98591 m!106421))

(declare-fun m!108139 () Bool)

(assert (=> b!98591 m!108139))

(assert (=> b!97716 d!26415))

(declare-fun d!26417 () Bool)

(declare-fun e!64248 () Bool)

(assert (=> d!26417 e!64248))

(declare-fun res!49583 () Bool)

(assert (=> d!26417 (=> (not res!49583) (not e!64248))))

(declare-fun lt!49550 () ListLongMap!1513)

(assert (=> d!26417 (= res!49583 (contains!796 lt!49550 (_1!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49548 () List!1586)

(assert (=> d!26417 (= lt!49550 (ListLongMap!1514 lt!49548))))

(declare-fun lt!49549 () Unit!2934)

(declare-fun lt!49547 () Unit!2934)

(assert (=> d!26417 (= lt!49549 lt!49547)))

(assert (=> d!26417 (= (getValueByKey!148 lt!49548 (_1!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26417 (= lt!49547 (lemmaContainsTupThenGetReturnValue!67 lt!49548 (_1!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26417 (= lt!49548 (insertStrictlySorted!70 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26417 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49550)))

(declare-fun b!98592 () Bool)

(declare-fun res!49582 () Bool)

(assert (=> b!98592 (=> (not res!49582) (not e!64248))))

(assert (=> b!98592 (= res!49582 (= (getValueByKey!148 (toList!772 lt!49550) (_1!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1174 (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98593 () Bool)

(assert (=> b!98593 (= e!64248 (contains!798 (toList!772 lt!49550) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26417 res!49583) b!98592))

(assert (= (and b!98592 res!49582) b!98593))

(declare-fun m!108141 () Bool)

(assert (=> d!26417 m!108141))

(declare-fun m!108143 () Bool)

(assert (=> d!26417 m!108143))

(declare-fun m!108145 () Bool)

(assert (=> d!26417 m!108145))

(declare-fun m!108147 () Bool)

(assert (=> d!26417 m!108147))

(declare-fun m!108149 () Bool)

(assert (=> b!98592 m!108149))

(declare-fun m!108151 () Bool)

(assert (=> b!98593 m!108151))

(assert (=> d!25993 d!26417))

(declare-fun d!26419 () Bool)

(assert (=> d!26419 (= (+!128 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26419 true))

(declare-fun _$7!83 () Unit!2934)

(assert (=> d!26419 (= (choose!599 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) lt!48828 (zeroValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)) _$7!83)))

(declare-fun bs!4067 () Bool)

(assert (= bs!4067 d!26419))

(assert (=> bs!4067 m!106217))

(assert (=> bs!4067 m!106217))

(assert (=> bs!4067 m!106781))

(assert (=> bs!4067 m!106121))

(assert (=> bs!4067 m!106779))

(assert (=> d!25993 d!26419))

(declare-fun b!98594 () Bool)

(declare-fun e!64261 () ListLongMap!1513)

(declare-fun call!10074 () ListLongMap!1513)

(assert (=> b!98594 (= e!64261 (+!128 call!10074 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98595 () Bool)

(declare-fun e!64250 () Bool)

(declare-fun e!64259 () Bool)

(assert (=> b!98595 (= e!64250 e!64259)))

(declare-fun res!49587 () Bool)

(assert (=> b!98595 (=> (not res!49587) (not e!64259))))

(declare-fun lt!49565 () ListLongMap!1513)

(assert (=> b!98595 (= res!49587 (contains!796 lt!49565 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98595 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!10066 () Bool)

(declare-fun call!10073 () Bool)

(assert (=> bm!10066 (= call!10073 (contains!796 lt!49565 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98596 () Bool)

(declare-fun e!64258 () Bool)

(declare-fun call!10071 () Bool)

(assert (=> b!98596 (= e!64258 (not call!10071))))

(declare-fun b!98597 () Bool)

(declare-fun e!64255 () Bool)

(assert (=> b!98597 (= e!64255 (not call!10073))))

(declare-fun b!98598 () Bool)

(declare-fun e!64254 () Bool)

(assert (=> b!98598 (= e!64255 e!64254)))

(declare-fun res!49588 () Bool)

(assert (=> b!98598 (= res!49588 call!10073)))

(assert (=> b!98598 (=> (not res!49588) (not e!64254))))

(declare-fun b!98599 () Bool)

(declare-fun e!64257 () Bool)

(assert (=> b!98599 (= e!64257 e!64258)))

(declare-fun c!16781 () Bool)

(assert (=> b!98599 (= c!16781 (not (= (bvand lt!48828 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10067 () Bool)

(assert (=> bm!10067 (= call!10071 (contains!796 lt!49565 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98600 () Bool)

(declare-fun e!64252 () Bool)

(assert (=> b!98600 (= e!64252 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10068 () Bool)

(declare-fun call!10070 () ListLongMap!1513)

(declare-fun call!10069 () ListLongMap!1513)

(assert (=> bm!10068 (= call!10070 call!10069)))

(declare-fun b!98601 () Bool)

(declare-fun e!64256 () ListLongMap!1513)

(declare-fun call!10072 () ListLongMap!1513)

(assert (=> b!98601 (= e!64256 call!10072)))

(declare-fun b!98602 () Bool)

(declare-fun c!16785 () Bool)

(assert (=> b!98602 (= c!16785 (and (not (= (bvand lt!48828 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48828 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64251 () ListLongMap!1513)

(assert (=> b!98602 (= e!64256 e!64251)))

(declare-fun b!98603 () Bool)

(assert (=> b!98603 (= e!64259 (= (apply!92 lt!49565 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98603 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 (_values!2463 newMap!16))))))

(assert (=> b!98603 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98604 () Bool)

(assert (=> b!98604 (= e!64261 e!64256)))

(declare-fun c!16783 () Bool)

(assert (=> b!98604 (= c!16783 (and (not (= (bvand lt!48828 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48828 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10069 () Bool)

(declare-fun call!10075 () ListLongMap!1513)

(declare-fun c!16784 () Bool)

(assert (=> bm!10069 (= call!10074 (+!128 (ite c!16784 call!10069 (ite c!16783 call!10070 call!10075)) (ite (or c!16784 c!16783) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!10070 () Bool)

(assert (=> bm!10070 (= call!10069 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98605 () Bool)

(assert (=> b!98605 (= e!64254 (= (apply!92 lt!49565 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98606 () Bool)

(assert (=> b!98606 (= e!64251 call!10072)))

(declare-fun b!98607 () Bool)

(declare-fun e!64253 () Unit!2934)

(declare-fun lt!49568 () Unit!2934)

(assert (=> b!98607 (= e!64253 lt!49568)))

(declare-fun lt!49554 () ListLongMap!1513)

(assert (=> b!98607 (= lt!49554 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49569 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49569 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49551 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49551 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49560 () Unit!2934)

(assert (=> b!98607 (= lt!49560 (addStillContains!68 lt!49554 lt!49569 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49551))))

(assert (=> b!98607 (contains!796 (+!128 lt!49554 (tuple2!2327 lt!49569 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49551)))

(declare-fun lt!49566 () Unit!2934)

(assert (=> b!98607 (= lt!49566 lt!49560)))

(declare-fun lt!49567 () ListLongMap!1513)

(assert (=> b!98607 (= lt!49567 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49558 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49558 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49563 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49563 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49557 () Unit!2934)

(assert (=> b!98607 (= lt!49557 (addApplyDifferent!68 lt!49567 lt!49558 (minValue!2363 newMap!16) lt!49563))))

(assert (=> b!98607 (= (apply!92 (+!128 lt!49567 (tuple2!2327 lt!49558 (minValue!2363 newMap!16))) lt!49563) (apply!92 lt!49567 lt!49563))))

(declare-fun lt!49559 () Unit!2934)

(assert (=> b!98607 (= lt!49559 lt!49557)))

(declare-fun lt!49564 () ListLongMap!1513)

(assert (=> b!98607 (= lt!49564 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49571 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49571 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49562 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49562 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49570 () Unit!2934)

(assert (=> b!98607 (= lt!49570 (addApplyDifferent!68 lt!49564 lt!49571 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49562))))

(assert (=> b!98607 (= (apply!92 (+!128 lt!49564 (tuple2!2327 lt!49571 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49562) (apply!92 lt!49564 lt!49562))))

(declare-fun lt!49572 () Unit!2934)

(assert (=> b!98607 (= lt!49572 lt!49570)))

(declare-fun lt!49561 () ListLongMap!1513)

(assert (=> b!98607 (= lt!49561 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49552 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49552 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49553 () (_ BitVec 64))

(assert (=> b!98607 (= lt!49553 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98607 (= lt!49568 (addApplyDifferent!68 lt!49561 lt!49552 (minValue!2363 newMap!16) lt!49553))))

(assert (=> b!98607 (= (apply!92 (+!128 lt!49561 (tuple2!2327 lt!49552 (minValue!2363 newMap!16))) lt!49553) (apply!92 lt!49561 lt!49553))))

(declare-fun b!98608 () Bool)

(declare-fun e!64260 () Bool)

(assert (=> b!98608 (= e!64260 (= (apply!92 lt!49565 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!10071 () Bool)

(assert (=> bm!10071 (= call!10072 call!10074)))

(declare-fun b!98609 () Bool)

(assert (=> b!98609 (= e!64251 call!10075)))

(declare-fun b!98610 () Bool)

(declare-fun Unit!2989 () Unit!2934)

(assert (=> b!98610 (= e!64253 Unit!2989)))

(declare-fun b!98611 () Bool)

(declare-fun e!64249 () Bool)

(assert (=> b!98611 (= e!64249 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98612 () Bool)

(declare-fun res!49586 () Bool)

(assert (=> b!98612 (=> (not res!49586) (not e!64257))))

(assert (=> b!98612 (= res!49586 e!64255)))

(declare-fun c!16782 () Bool)

(assert (=> b!98612 (= c!16782 (not (= (bvand lt!48828 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26421 () Bool)

(assert (=> d!26421 e!64257))

(declare-fun res!49589 () Bool)

(assert (=> d!26421 (=> (not res!49589) (not e!64257))))

(assert (=> d!26421 (= res!49589 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!49556 () ListLongMap!1513)

(assert (=> d!26421 (= lt!49565 lt!49556)))

(declare-fun lt!49555 () Unit!2934)

(assert (=> d!26421 (= lt!49555 e!64253)))

(declare-fun c!16786 () Bool)

(assert (=> d!26421 (= c!16786 e!64249)))

(declare-fun res!49585 () Bool)

(assert (=> d!26421 (=> (not res!49585) (not e!64249))))

(assert (=> d!26421 (= res!49585 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26421 (= lt!49556 e!64261)))

(assert (=> d!26421 (= c!16784 (and (not (= (bvand lt!48828 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48828 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26421 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26421 (= (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) lt!48828 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49565)))

(declare-fun bm!10072 () Bool)

(assert (=> bm!10072 (= call!10075 call!10070)))

(declare-fun b!98613 () Bool)

(assert (=> b!98613 (= e!64258 e!64260)))

(declare-fun res!49590 () Bool)

(assert (=> b!98613 (= res!49590 call!10071)))

(assert (=> b!98613 (=> (not res!49590) (not e!64260))))

(declare-fun b!98614 () Bool)

(declare-fun res!49591 () Bool)

(assert (=> b!98614 (=> (not res!49591) (not e!64257))))

(assert (=> b!98614 (= res!49591 e!64250)))

(declare-fun res!49592 () Bool)

(assert (=> b!98614 (=> res!49592 e!64250)))

(assert (=> b!98614 (= res!49592 (not e!64252))))

(declare-fun res!49584 () Bool)

(assert (=> b!98614 (=> (not res!49584) (not e!64252))))

(assert (=> b!98614 (= res!49584 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!26421 c!16784) b!98594))

(assert (= (and d!26421 (not c!16784)) b!98604))

(assert (= (and b!98604 c!16783) b!98601))

(assert (= (and b!98604 (not c!16783)) b!98602))

(assert (= (and b!98602 c!16785) b!98606))

(assert (= (and b!98602 (not c!16785)) b!98609))

(assert (= (or b!98606 b!98609) bm!10072))

(assert (= (or b!98601 bm!10072) bm!10068))

(assert (= (or b!98601 b!98606) bm!10071))

(assert (= (or b!98594 bm!10068) bm!10070))

(assert (= (or b!98594 bm!10071) bm!10069))

(assert (= (and d!26421 res!49585) b!98611))

(assert (= (and d!26421 c!16786) b!98607))

(assert (= (and d!26421 (not c!16786)) b!98610))

(assert (= (and d!26421 res!49589) b!98614))

(assert (= (and b!98614 res!49584) b!98600))

(assert (= (and b!98614 (not res!49592)) b!98595))

(assert (= (and b!98595 res!49587) b!98603))

(assert (= (and b!98614 res!49591) b!98612))

(assert (= (and b!98612 c!16782) b!98598))

(assert (= (and b!98612 (not c!16782)) b!98597))

(assert (= (and b!98598 res!49588) b!98605))

(assert (= (or b!98598 b!98597) bm!10066))

(assert (= (and b!98612 res!49586) b!98599))

(assert (= (and b!98599 c!16781) b!98613))

(assert (= (and b!98599 (not c!16781)) b!98596))

(assert (= (and b!98613 res!49590) b!98608))

(assert (= (or b!98613 b!98596) bm!10067))

(declare-fun b_lambda!4371 () Bool)

(assert (=> (not b_lambda!4371) (not b!98603)))

(assert (=> b!98603 t!5544))

(declare-fun b_and!6049 () Bool)

(assert (= b_and!6045 (and (=> t!5544 result!3271) b_and!6049)))

(assert (=> b!98603 t!5546))

(declare-fun b_and!6051 () Bool)

(assert (= b_and!6047 (and (=> t!5546 result!3273) b_and!6051)))

(assert (=> b!98595 m!106375))

(assert (=> b!98595 m!106375))

(declare-fun m!108153 () Bool)

(assert (=> b!98595 m!108153))

(assert (=> b!98607 m!106121))

(declare-fun m!108155 () Bool)

(assert (=> b!98607 m!108155))

(declare-fun m!108157 () Bool)

(assert (=> b!98607 m!108157))

(declare-fun m!108159 () Bool)

(assert (=> b!98607 m!108159))

(assert (=> b!98607 m!108159))

(declare-fun m!108161 () Bool)

(assert (=> b!98607 m!108161))

(declare-fun m!108163 () Bool)

(assert (=> b!98607 m!108163))

(declare-fun m!108165 () Bool)

(assert (=> b!98607 m!108165))

(declare-fun m!108167 () Bool)

(assert (=> b!98607 m!108167))

(declare-fun m!108169 () Bool)

(assert (=> b!98607 m!108169))

(assert (=> b!98607 m!108157))

(declare-fun m!108171 () Bool)

(assert (=> b!98607 m!108171))

(declare-fun m!108173 () Bool)

(assert (=> b!98607 m!108173))

(declare-fun m!108175 () Bool)

(assert (=> b!98607 m!108175))

(declare-fun m!108177 () Bool)

(assert (=> b!98607 m!108177))

(assert (=> b!98607 m!106375))

(assert (=> b!98607 m!108167))

(assert (=> b!98607 m!106121))

(declare-fun m!108179 () Bool)

(assert (=> b!98607 m!108179))

(declare-fun m!108181 () Bool)

(assert (=> b!98607 m!108181))

(declare-fun m!108183 () Bool)

(assert (=> b!98607 m!108183))

(assert (=> b!98607 m!106121))

(declare-fun m!108185 () Bool)

(assert (=> b!98607 m!108185))

(assert (=> b!98607 m!108173))

(declare-fun m!108187 () Bool)

(assert (=> bm!10066 m!108187))

(declare-fun m!108189 () Bool)

(assert (=> b!98594 m!108189))

(declare-fun m!108191 () Bool)

(assert (=> bm!10067 m!108191))

(declare-fun m!108193 () Bool)

(assert (=> b!98608 m!108193))

(assert (=> b!98603 m!106375))

(assert (=> b!98603 m!106419))

(assert (=> b!98603 m!106421))

(assert (=> b!98603 m!106423))

(assert (=> b!98603 m!106375))

(declare-fun m!108195 () Bool)

(assert (=> b!98603 m!108195))

(assert (=> b!98603 m!106419))

(assert (=> b!98603 m!106421))

(assert (=> d!26421 m!106427))

(declare-fun m!108197 () Bool)

(assert (=> bm!10069 m!108197))

(assert (=> b!98600 m!106375))

(assert (=> b!98600 m!106375))

(assert (=> b!98600 m!106431))

(assert (=> bm!10070 m!106121))

(assert (=> bm!10070 m!108179))

(assert (=> b!98611 m!106375))

(assert (=> b!98611 m!106375))

(assert (=> b!98611 m!106431))

(declare-fun m!108199 () Bool)

(assert (=> b!98605 m!108199))

(assert (=> d!25993 d!26421))

(assert (=> d!25993 d!25911))

(assert (=> d!25993 d!26053))

(declare-fun d!26423 () Bool)

(declare-fun isEmpty!362 (List!1586) Bool)

(assert (=> d!26423 (= (isEmpty!360 lt!48971) (isEmpty!362 (toList!772 lt!48971)))))

(declare-fun bs!4068 () Bool)

(assert (= bs!4068 d!26423))

(declare-fun m!108201 () Bool)

(assert (=> bs!4068 m!108201))

(assert (=> b!97782 d!26423))

(declare-fun lt!49573 () Bool)

(declare-fun d!26425 () Bool)

(assert (=> d!26425 (= lt!49573 (select (content!101 (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!64262 () Bool)

(assert (=> d!26425 (= lt!49573 e!64262)))

(declare-fun res!49593 () Bool)

(assert (=> d!26425 (=> (not res!49593) (not e!64262))))

(assert (=> d!26425 (= res!49593 ((_ is Cons!1583) (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)))))

(assert (=> d!26425 (= (contains!797 (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!49573)))

(declare-fun b!98615 () Bool)

(declare-fun e!64263 () Bool)

(assert (=> b!98615 (= e!64262 e!64263)))

(declare-fun res!49594 () Bool)

(assert (=> b!98615 (=> res!49594 e!64263)))

(assert (=> b!98615 (= res!49594 (= (h!2177 (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98616 () Bool)

(assert (=> b!98616 (= e!64263 (contains!797 (t!5532 (ite c!16517 (Cons!1583 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) Nil!1584) Nil!1584)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26425 res!49593) b!98615))

(assert (= (and b!98615 (not res!49594)) b!98616))

(declare-fun m!108203 () Bool)

(assert (=> d!26425 m!108203))

(assert (=> d!26425 m!106805))

(declare-fun m!108205 () Bool)

(assert (=> d!26425 m!108205))

(assert (=> b!98616 m!106805))

(declare-fun m!108207 () Bool)

(assert (=> b!98616 m!108207))

(assert (=> b!97872 d!26425))

(declare-fun d!26427 () Bool)

(assert (=> d!26427 (= (apply!92 lt!48893 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48893) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4069 () Bool)

(assert (= bs!4069 d!26427))

(assert (=> bs!4069 m!107085))

(assert (=> bs!4069 m!107085))

(declare-fun m!108209 () Bool)

(assert (=> bs!4069 m!108209))

(assert (=> b!97663 d!26427))

(declare-fun b!98617 () Bool)

(declare-fun res!49598 () Bool)

(declare-fun e!64264 () Bool)

(assert (=> b!98617 (=> (not res!49598) (not e!64264))))

(assert (=> b!98617 (= res!49598 (and (= (size!2254 (_values!2463 (_2!1175 lt!48824))) (bvadd (mask!6576 (_2!1175 lt!48824)) #b00000000000000000000000000000001)) (= (size!2253 (_keys!4169 (_2!1175 lt!48824))) (size!2254 (_values!2463 (_2!1175 lt!48824)))) (bvsge (_size!474 (_2!1175 lt!48824)) #b00000000000000000000000000000000) (bvsle (_size!474 (_2!1175 lt!48824)) (bvadd (mask!6576 (_2!1175 lt!48824)) #b00000000000000000000000000000001))))))

(declare-fun b!98618 () Bool)

(declare-fun res!49597 () Bool)

(assert (=> b!98618 (=> (not res!49597) (not e!64264))))

(assert (=> b!98618 (= res!49597 (bvsge (size!2259 (_2!1175 lt!48824)) (_size!474 (_2!1175 lt!48824))))))

(declare-fun b!98620 () Bool)

(assert (=> b!98620 (= e!64264 (and (bvsge (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000011) (bvsge (_vacant!474 (_2!1175 lt!48824)) #b00000000000000000000000000000000)))))

(declare-fun b!98619 () Bool)

(declare-fun res!49596 () Bool)

(assert (=> b!98619 (=> (not res!49596) (not e!64264))))

(assert (=> b!98619 (= res!49596 (= (size!2259 (_2!1175 lt!48824)) (bvadd (_size!474 (_2!1175 lt!48824)) (bvsdiv (bvadd (extraKeys!2301 (_2!1175 lt!48824)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!26429 () Bool)

(declare-fun res!49595 () Bool)

(assert (=> d!26429 (=> (not res!49595) (not e!64264))))

(assert (=> d!26429 (= res!49595 (validMask!0 (mask!6576 (_2!1175 lt!48824))))))

(assert (=> d!26429 (= (simpleValid!68 (_2!1175 lt!48824)) e!64264)))

(assert (= (and d!26429 res!49595) b!98617))

(assert (= (and b!98617 res!49598) b!98618))

(assert (= (and b!98618 res!49597) b!98619))

(assert (= (and b!98619 res!49596) b!98620))

(declare-fun m!108211 () Bool)

(assert (=> b!98618 m!108211))

(assert (=> b!98619 m!108211))

(assert (=> d!26429 m!107963))

(assert (=> d!25909 d!26429))

(declare-fun d!26431 () Bool)

(declare-fun e!64265 () Bool)

(assert (=> d!26431 e!64265))

(declare-fun res!49599 () Bool)

(assert (=> d!26431 (=> res!49599 e!64265)))

(declare-fun lt!49575 () Bool)

(assert (=> d!26431 (= res!49599 (not lt!49575))))

(declare-fun lt!49576 () Bool)

(assert (=> d!26431 (= lt!49575 lt!49576)))

(declare-fun lt!49574 () Unit!2934)

(declare-fun e!64266 () Unit!2934)

(assert (=> d!26431 (= lt!49574 e!64266)))

(declare-fun c!16787 () Bool)

(assert (=> d!26431 (= c!16787 lt!49576)))

(assert (=> d!26431 (= lt!49576 (containsKey!152 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (=> d!26431 (= (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))) lt!49575)))

(declare-fun b!98621 () Bool)

(declare-fun lt!49577 () Unit!2934)

(assert (=> b!98621 (= e!64266 lt!49577)))

(assert (=> b!98621 (= lt!49577 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(assert (=> b!98621 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847))))))

(declare-fun b!98622 () Bool)

(declare-fun Unit!2990 () Unit!2934)

(assert (=> b!98622 (= e!64266 Unit!2990)))

(declare-fun b!98623 () Bool)

(assert (=> b!98623 (= e!64265 (isDefined!102 (getValueByKey!148 (toList!772 (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!48847)))))))

(assert (= (and d!26431 c!16787) b!98621))

(assert (= (and d!26431 (not c!16787)) b!98622))

(assert (= (and d!26431 (not res!49599)) b!98623))

(assert (=> d!26431 m!106323))

(declare-fun m!108213 () Bool)

(assert (=> d!26431 m!108213))

(assert (=> b!98621 m!106323))

(declare-fun m!108215 () Bool)

(assert (=> b!98621 m!108215))

(assert (=> b!98621 m!106323))

(declare-fun m!108217 () Bool)

(assert (=> b!98621 m!108217))

(assert (=> b!98621 m!108217))

(declare-fun m!108219 () Bool)

(assert (=> b!98621 m!108219))

(assert (=> b!98623 m!106323))

(assert (=> b!98623 m!108217))

(assert (=> b!98623 m!108217))

(assert (=> b!98623 m!108219))

(assert (=> b!97958 d!26431))

(declare-fun b!98624 () Bool)

(declare-fun e!64279 () ListLongMap!1513)

(declare-fun call!10081 () ListLongMap!1513)

(assert (=> b!98624 (= e!64279 (+!128 call!10081 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98625 () Bool)

(declare-fun e!64268 () Bool)

(declare-fun e!64277 () Bool)

(assert (=> b!98625 (= e!64268 e!64277)))

(declare-fun res!49603 () Bool)

(assert (=> b!98625 (=> (not res!49603) (not e!64277))))

(declare-fun lt!49592 () ListLongMap!1513)

(assert (=> b!98625 (= res!49603 (contains!796 lt!49592 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98625 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun bm!10073 () Bool)

(declare-fun call!10080 () Bool)

(assert (=> bm!10073 (= call!10080 (contains!796 lt!49592 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98626 () Bool)

(declare-fun e!64276 () Bool)

(declare-fun call!10078 () Bool)

(assert (=> b!98626 (= e!64276 (not call!10078))))

(declare-fun b!98627 () Bool)

(declare-fun e!64273 () Bool)

(assert (=> b!98627 (= e!64273 (not call!10080))))

(declare-fun b!98628 () Bool)

(declare-fun e!64272 () Bool)

(assert (=> b!98628 (= e!64273 e!64272)))

(declare-fun res!49604 () Bool)

(assert (=> b!98628 (= res!49604 call!10080)))

(assert (=> b!98628 (=> (not res!49604) (not e!64272))))

(declare-fun b!98629 () Bool)

(declare-fun e!64275 () Bool)

(assert (=> b!98629 (= e!64275 e!64276)))

(declare-fun c!16788 () Bool)

(assert (=> b!98629 (= c!16788 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10074 () Bool)

(assert (=> bm!10074 (= call!10078 (contains!796 lt!49592 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98630 () Bool)

(declare-fun e!64270 () Bool)

(assert (=> b!98630 (= e!64270 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10075 () Bool)

(declare-fun call!10077 () ListLongMap!1513)

(declare-fun call!10076 () ListLongMap!1513)

(assert (=> bm!10075 (= call!10077 call!10076)))

(declare-fun b!98631 () Bool)

(declare-fun e!64274 () ListLongMap!1513)

(declare-fun call!10079 () ListLongMap!1513)

(assert (=> b!98631 (= e!64274 call!10079)))

(declare-fun b!98632 () Bool)

(declare-fun c!16792 () Bool)

(assert (=> b!98632 (= c!16792 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64269 () ListLongMap!1513)

(assert (=> b!98632 (= e!64274 e!64269)))

(declare-fun b!98633 () Bool)

(assert (=> b!98633 (= e!64277 (= (apply!92 lt!49592 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) (get!1285 (select (arr!2003 lt!48825) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98633 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2254 lt!48825)))))

(assert (=> b!98633 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(declare-fun b!98634 () Bool)

(assert (=> b!98634 (= e!64279 e!64274)))

(declare-fun c!16790 () Bool)

(assert (=> b!98634 (= c!16790 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!10082 () ListLongMap!1513)

(declare-fun bm!10076 () Bool)

(declare-fun c!16791 () Bool)

(assert (=> bm!10076 (= call!10081 (+!128 (ite c!16791 call!10076 (ite c!16790 call!10077 call!10082)) (ite (or c!16791 c!16790) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun bm!10077 () Bool)

(assert (=> bm!10077 (= call!10076 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98635 () Bool)

(assert (=> b!98635 (= e!64272 (= (apply!92 lt!49592 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98636 () Bool)

(assert (=> b!98636 (= e!64269 call!10079)))

(declare-fun b!98637 () Bool)

(declare-fun e!64271 () Unit!2934)

(declare-fun lt!49595 () Unit!2934)

(assert (=> b!98637 (= e!64271 lt!49595)))

(declare-fun lt!49581 () ListLongMap!1513)

(assert (=> b!98637 (= lt!49581 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49596 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49596 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49578 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49578 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49587 () Unit!2934)

(assert (=> b!98637 (= lt!49587 (addStillContains!68 lt!49581 lt!49596 (zeroValue!2363 newMap!16) lt!49578))))

(assert (=> b!98637 (contains!796 (+!128 lt!49581 (tuple2!2327 lt!49596 (zeroValue!2363 newMap!16))) lt!49578)))

(declare-fun lt!49593 () Unit!2934)

(assert (=> b!98637 (= lt!49593 lt!49587)))

(declare-fun lt!49594 () ListLongMap!1513)

(assert (=> b!98637 (= lt!49594 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49585 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49585 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49590 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49590 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49584 () Unit!2934)

(assert (=> b!98637 (= lt!49584 (addApplyDifferent!68 lt!49594 lt!49585 (minValue!2363 newMap!16) lt!49590))))

(assert (=> b!98637 (= (apply!92 (+!128 lt!49594 (tuple2!2327 lt!49585 (minValue!2363 newMap!16))) lt!49590) (apply!92 lt!49594 lt!49590))))

(declare-fun lt!49586 () Unit!2934)

(assert (=> b!98637 (= lt!49586 lt!49584)))

(declare-fun lt!49591 () ListLongMap!1513)

(assert (=> b!98637 (= lt!49591 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49598 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49598 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49589 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49589 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49597 () Unit!2934)

(assert (=> b!98637 (= lt!49597 (addApplyDifferent!68 lt!49591 lt!49598 (zeroValue!2363 newMap!16) lt!49589))))

(assert (=> b!98637 (= (apply!92 (+!128 lt!49591 (tuple2!2327 lt!49598 (zeroValue!2363 newMap!16))) lt!49589) (apply!92 lt!49591 lt!49589))))

(declare-fun lt!49599 () Unit!2934)

(assert (=> b!98637 (= lt!49599 lt!49597)))

(declare-fun lt!49588 () ListLongMap!1513)

(assert (=> b!98637 (= lt!49588 (getCurrentListMapNoExtraKeys!92 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49579 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49579 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49580 () (_ BitVec 64))

(assert (=> b!98637 (= lt!49580 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98637 (= lt!49595 (addApplyDifferent!68 lt!49588 lt!49579 (minValue!2363 newMap!16) lt!49580))))

(assert (=> b!98637 (= (apply!92 (+!128 lt!49588 (tuple2!2327 lt!49579 (minValue!2363 newMap!16))) lt!49580) (apply!92 lt!49588 lt!49580))))

(declare-fun b!98638 () Bool)

(declare-fun e!64278 () Bool)

(assert (=> b!98638 (= e!64278 (= (apply!92 lt!49592 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun bm!10078 () Bool)

(assert (=> bm!10078 (= call!10079 call!10081)))

(declare-fun b!98639 () Bool)

(assert (=> b!98639 (= e!64269 call!10082)))

(declare-fun b!98640 () Bool)

(declare-fun Unit!2991 () Unit!2934)

(assert (=> b!98640 (= e!64271 Unit!2991)))

(declare-fun b!98641 () Bool)

(declare-fun e!64267 () Bool)

(assert (=> b!98641 (= e!64267 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98642 () Bool)

(declare-fun res!49602 () Bool)

(assert (=> b!98642 (=> (not res!49602) (not e!64275))))

(assert (=> b!98642 (= res!49602 e!64273)))

(declare-fun c!16789 () Bool)

(assert (=> b!98642 (= c!16789 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26433 () Bool)

(assert (=> d!26433 e!64275))

(declare-fun res!49605 () Bool)

(assert (=> d!26433 (=> (not res!49605) (not e!64275))))

(assert (=> d!26433 (= res!49605 (or (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))))

(declare-fun lt!49583 () ListLongMap!1513)

(assert (=> d!26433 (= lt!49592 lt!49583)))

(declare-fun lt!49582 () Unit!2934)

(assert (=> d!26433 (= lt!49582 e!64271)))

(declare-fun c!16793 () Bool)

(assert (=> d!26433 (= c!16793 e!64267)))

(declare-fun res!49601 () Bool)

(assert (=> d!26433 (=> (not res!49601) (not e!64267))))

(assert (=> d!26433 (= res!49601 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26433 (= lt!49583 e!64279)))

(assert (=> d!26433 (= c!16791 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26433 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26433 (= (getCurrentListMap!453 (_keys!4169 newMap!16) lt!48825 (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49592)))

(declare-fun bm!10079 () Bool)

(assert (=> bm!10079 (= call!10082 call!10077)))

(declare-fun b!98643 () Bool)

(assert (=> b!98643 (= e!64276 e!64278)))

(declare-fun res!49606 () Bool)

(assert (=> b!98643 (= res!49606 call!10078)))

(assert (=> b!98643 (=> (not res!49606) (not e!64278))))

(declare-fun b!98644 () Bool)

(declare-fun res!49607 () Bool)

(assert (=> b!98644 (=> (not res!49607) (not e!64275))))

(assert (=> b!98644 (= res!49607 e!64268)))

(declare-fun res!49608 () Bool)

(assert (=> b!98644 (=> res!49608 e!64268)))

(assert (=> b!98644 (= res!49608 (not e!64270))))

(declare-fun res!49600 () Bool)

(assert (=> b!98644 (=> (not res!49600) (not e!64270))))

(assert (=> b!98644 (= res!49600 (bvslt #b00000000000000000000000000000000 (size!2253 (_keys!4169 newMap!16))))))

(assert (= (and d!26433 c!16791) b!98624))

(assert (= (and d!26433 (not c!16791)) b!98634))

(assert (= (and b!98634 c!16790) b!98631))

(assert (= (and b!98634 (not c!16790)) b!98632))

(assert (= (and b!98632 c!16792) b!98636))

(assert (= (and b!98632 (not c!16792)) b!98639))

(assert (= (or b!98636 b!98639) bm!10079))

(assert (= (or b!98631 bm!10079) bm!10075))

(assert (= (or b!98631 b!98636) bm!10078))

(assert (= (or b!98624 bm!10075) bm!10077))

(assert (= (or b!98624 bm!10078) bm!10076))

(assert (= (and d!26433 res!49601) b!98641))

(assert (= (and d!26433 c!16793) b!98637))

(assert (= (and d!26433 (not c!16793)) b!98640))

(assert (= (and d!26433 res!49605) b!98644))

(assert (= (and b!98644 res!49600) b!98630))

(assert (= (and b!98644 (not res!49608)) b!98625))

(assert (= (and b!98625 res!49603) b!98633))

(assert (= (and b!98644 res!49607) b!98642))

(assert (= (and b!98642 c!16789) b!98628))

(assert (= (and b!98642 (not c!16789)) b!98627))

(assert (= (and b!98628 res!49604) b!98635))

(assert (= (or b!98628 b!98627) bm!10073))

(assert (= (and b!98642 res!49602) b!98629))

(assert (= (and b!98629 c!16788) b!98643))

(assert (= (and b!98629 (not c!16788)) b!98626))

(assert (= (and b!98643 res!49606) b!98638))

(assert (= (or b!98643 b!98626) bm!10074))

(declare-fun b_lambda!4373 () Bool)

(assert (=> (not b_lambda!4373) (not b!98633)))

(assert (=> b!98633 t!5544))

(declare-fun b_and!6053 () Bool)

(assert (= b_and!6049 (and (=> t!5544 result!3271) b_and!6053)))

(assert (=> b!98633 t!5546))

(declare-fun b_and!6055 () Bool)

(assert (= b_and!6051 (and (=> t!5546 result!3273) b_and!6055)))

(assert (=> b!98625 m!106375))

(assert (=> b!98625 m!106375))

(declare-fun m!108221 () Bool)

(assert (=> b!98625 m!108221))

(declare-fun m!108223 () Bool)

(assert (=> b!98637 m!108223))

(declare-fun m!108225 () Bool)

(assert (=> b!98637 m!108225))

(declare-fun m!108227 () Bool)

(assert (=> b!98637 m!108227))

(assert (=> b!98637 m!108227))

(declare-fun m!108229 () Bool)

(assert (=> b!98637 m!108229))

(declare-fun m!108231 () Bool)

(assert (=> b!98637 m!108231))

(declare-fun m!108233 () Bool)

(assert (=> b!98637 m!108233))

(declare-fun m!108235 () Bool)

(assert (=> b!98637 m!108235))

(declare-fun m!108237 () Bool)

(assert (=> b!98637 m!108237))

(assert (=> b!98637 m!108225))

(declare-fun m!108239 () Bool)

(assert (=> b!98637 m!108239))

(declare-fun m!108241 () Bool)

(assert (=> b!98637 m!108241))

(declare-fun m!108243 () Bool)

(assert (=> b!98637 m!108243))

(declare-fun m!108245 () Bool)

(assert (=> b!98637 m!108245))

(assert (=> b!98637 m!106375))

(assert (=> b!98637 m!108235))

(declare-fun m!108247 () Bool)

(assert (=> b!98637 m!108247))

(declare-fun m!108249 () Bool)

(assert (=> b!98637 m!108249))

(declare-fun m!108251 () Bool)

(assert (=> b!98637 m!108251))

(declare-fun m!108253 () Bool)

(assert (=> b!98637 m!108253))

(assert (=> b!98637 m!108241))

(declare-fun m!108255 () Bool)

(assert (=> bm!10073 m!108255))

(declare-fun m!108257 () Bool)

(assert (=> b!98624 m!108257))

(declare-fun m!108259 () Bool)

(assert (=> bm!10074 m!108259))

(declare-fun m!108261 () Bool)

(assert (=> b!98638 m!108261))

(assert (=> b!98633 m!106375))

(declare-fun m!108263 () Bool)

(assert (=> b!98633 m!108263))

(assert (=> b!98633 m!106421))

(declare-fun m!108265 () Bool)

(assert (=> b!98633 m!108265))

(assert (=> b!98633 m!106375))

(declare-fun m!108267 () Bool)

(assert (=> b!98633 m!108267))

(assert (=> b!98633 m!108263))

(assert (=> b!98633 m!106421))

(assert (=> d!26433 m!106427))

(declare-fun m!108269 () Bool)

(assert (=> bm!10076 m!108269))

(assert (=> b!98630 m!106375))

(assert (=> b!98630 m!106375))

(assert (=> b!98630 m!106431))

(assert (=> bm!10077 m!108247))

(assert (=> b!98641 m!106375))

(assert (=> b!98641 m!106375))

(assert (=> b!98641 m!106431))

(declare-fun m!108271 () Bool)

(assert (=> b!98635 m!108271))

(assert (=> b!97958 d!26433))

(declare-fun d!26435 () Bool)

(declare-fun e!64280 () Bool)

(assert (=> d!26435 e!64280))

(declare-fun res!49609 () Bool)

(assert (=> d!26435 (=> res!49609 e!64280)))

(declare-fun lt!49601 () Bool)

(assert (=> d!26435 (= res!49609 (not lt!49601))))

(declare-fun lt!49602 () Bool)

(assert (=> d!26435 (= lt!49601 lt!49602)))

(declare-fun lt!49600 () Unit!2934)

(declare-fun e!64281 () Unit!2934)

(assert (=> d!26435 (= lt!49600 e!64281)))

(declare-fun c!16794 () Bool)

(assert (=> d!26435 (= c!16794 lt!49602)))

(assert (=> d!26435 (= lt!49602 (containsKey!152 (toList!772 lt!48971) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26435 (= (contains!796 lt!48971 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49601)))

(declare-fun b!98645 () Bool)

(declare-fun lt!49603 () Unit!2934)

(assert (=> b!98645 (= e!64281 lt!49603)))

(assert (=> b!98645 (= lt!49603 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48971) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98645 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98646 () Bool)

(declare-fun Unit!2992 () Unit!2934)

(assert (=> b!98646 (= e!64281 Unit!2992)))

(declare-fun b!98647 () Bool)

(assert (=> b!98647 (= e!64280 (isDefined!102 (getValueByKey!148 (toList!772 lt!48971) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26435 c!16794) b!98645))

(assert (= (and d!26435 (not c!16794)) b!98646))

(assert (= (and d!26435 (not res!49609)) b!98647))

(declare-fun m!108273 () Bool)

(assert (=> d!26435 m!108273))

(declare-fun m!108275 () Bool)

(assert (=> b!98645 m!108275))

(declare-fun m!108277 () Bool)

(assert (=> b!98645 m!108277))

(assert (=> b!98645 m!108277))

(declare-fun m!108279 () Bool)

(assert (=> b!98645 m!108279))

(assert (=> b!98647 m!108277))

(assert (=> b!98647 m!108277))

(assert (=> b!98647 m!108279))

(assert (=> d!25941 d!26435))

(assert (=> d!25941 d!25881))

(assert (=> b!97849 d!26271))

(declare-fun b!98649 () Bool)

(declare-fun e!64282 () Option!154)

(declare-fun e!64283 () Option!154)

(assert (=> b!98649 (= e!64282 e!64283)))

(declare-fun c!16796 () Bool)

(assert (=> b!98649 (= c!16796 (and ((_ is Cons!1582) (toList!772 lt!48997)) (not (= (_1!1174 (h!2176 (toList!772 lt!48997))) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98650 () Bool)

(assert (=> b!98650 (= e!64283 (getValueByKey!148 (t!5531 (toList!772 lt!48997)) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98648 () Bool)

(assert (=> b!98648 (= e!64282 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48997)))))))

(declare-fun d!26437 () Bool)

(declare-fun c!16795 () Bool)

(assert (=> d!26437 (= c!16795 (and ((_ is Cons!1582) (toList!772 lt!48997)) (= (_1!1174 (h!2176 (toList!772 lt!48997))) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26437 (= (getValueByKey!148 (toList!772 lt!48997) (_1!1174 (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64282)))

(declare-fun b!98651 () Bool)

(assert (=> b!98651 (= e!64283 None!152)))

(assert (= (and d!26437 c!16795) b!98648))

(assert (= (and d!26437 (not c!16795)) b!98649))

(assert (= (and b!98649 c!16796) b!98650))

(assert (= (and b!98649 (not c!16796)) b!98651))

(declare-fun m!108281 () Bool)

(assert (=> b!98650 m!108281))

(assert (=> b!97803 d!26437))

(assert (=> b!97713 d!26045))

(declare-fun b!98664 () Bool)

(declare-fun e!64292 () SeekEntryResult!256)

(assert (=> b!98664 (= e!64292 Undefined!256)))

(declare-fun b!98666 () Bool)

(declare-fun e!64291 () SeekEntryResult!256)

(assert (=> b!98666 (= e!64291 (Found!256 (index!3169 lt!48909)))))

(declare-fun b!98667 () Bool)

(declare-fun e!64290 () SeekEntryResult!256)

(assert (=> b!98667 (= e!64290 (MissingVacant!256 (index!3169 lt!48909)))))

(declare-fun b!98668 () Bool)

(declare-fun c!16803 () Bool)

(declare-fun lt!49609 () (_ BitVec 64))

(assert (=> b!98668 (= c!16803 (= lt!49609 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98668 (= e!64291 e!64290)))

(declare-fun b!98669 () Bool)

(assert (=> b!98669 (= e!64290 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12961 lt!48909) #b00000000000000000000000000000001) (nextIndex!0 (index!3169 lt!48909) (x!12961 lt!48909) (mask!6576 newMap!16)) (index!3169 lt!48909) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(declare-fun d!26439 () Bool)

(declare-fun lt!49608 () SeekEntryResult!256)

(assert (=> d!26439 (and (or ((_ is Undefined!256) lt!49608) (not ((_ is Found!256) lt!49608)) (and (bvsge (index!3168 lt!49608) #b00000000000000000000000000000000) (bvslt (index!3168 lt!49608) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!49608) ((_ is Found!256) lt!49608) (not ((_ is MissingVacant!256) lt!49608)) (not (= (index!3170 lt!49608) (index!3169 lt!48909))) (and (bvsge (index!3170 lt!49608) #b00000000000000000000000000000000) (bvslt (index!3170 lt!49608) (size!2253 (_keys!4169 newMap!16))))) (or ((_ is Undefined!256) lt!49608) (ite ((_ is Found!256) lt!49608) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!49608)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) (and ((_ is MissingVacant!256) lt!49608) (= (index!3170 lt!49608) (index!3169 lt!48909)) (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!49608)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26439 (= lt!49608 e!64292)))

(declare-fun c!16805 () Bool)

(assert (=> d!26439 (= c!16805 (bvsge (x!12961 lt!48909) #b01111111111111111111111111111110))))

(assert (=> d!26439 (= lt!49609 (select (arr!2002 (_keys!4169 newMap!16)) (index!3169 lt!48909)))))

(assert (=> d!26439 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26439 (= (seekKeyOrZeroReturnVacant!0 (x!12961 lt!48909) (index!3169 lt!48909) (index!3169 lt!48909) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)) lt!49608)))

(declare-fun b!98665 () Bool)

(assert (=> b!98665 (= e!64292 e!64291)))

(declare-fun c!16804 () Bool)

(assert (=> b!98665 (= c!16804 (= lt!49609 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26439 c!16805) b!98664))

(assert (= (and d!26439 (not c!16805)) b!98665))

(assert (= (and b!98665 c!16804) b!98666))

(assert (= (and b!98665 (not c!16804)) b!98668))

(assert (= (and b!98668 c!16803) b!98667))

(assert (= (and b!98668 (not c!16803)) b!98669))

(declare-fun m!108283 () Bool)

(assert (=> b!98669 m!108283))

(assert (=> b!98669 m!108283))

(assert (=> b!98669 m!106105))

(declare-fun m!108285 () Bool)

(assert (=> b!98669 m!108285))

(declare-fun m!108287 () Bool)

(assert (=> d!26439 m!108287))

(declare-fun m!108289 () Bool)

(assert (=> d!26439 m!108289))

(assert (=> d!26439 m!106507))

(assert (=> d!26439 m!106427))

(assert (=> b!97693 d!26439))

(assert (=> d!25933 d!25921))

(declare-fun call!10087 () Bool)

(declare-fun lt!49612 () SeekEntryResult!256)

(declare-fun c!16811 () Bool)

(declare-fun bm!10084 () Bool)

(assert (=> bm!10084 (= call!10087 (inRange!0 (ite c!16811 (index!3167 lt!49612) (index!3170 lt!49612)) (mask!6576 newMap!16)))))

(declare-fun b!98686 () Bool)

(declare-fun e!64303 () Bool)

(declare-fun call!10088 () Bool)

(assert (=> b!98686 (= e!64303 (not call!10088))))

(declare-fun b!98687 () Bool)

(declare-fun e!64302 () Bool)

(assert (=> b!98687 (= e!64302 (not call!10088))))

(declare-fun b!98688 () Bool)

(declare-fun res!49620 () Bool)

(assert (=> b!98688 (= res!49620 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3167 lt!49612)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98688 (=> (not res!49620) (not e!64303))))

(declare-fun d!26441 () Bool)

(declare-fun e!64301 () Bool)

(assert (=> d!26441 e!64301))

(assert (=> d!26441 (= c!16811 ((_ is MissingZero!256) lt!49612))))

(assert (=> d!26441 (= lt!49612 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (=> d!26441 true))

(declare-fun _$34!868 () Unit!2934)

(assert (=> d!26441 (= (choose!595 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) _$34!868)))

(declare-fun b!98689 () Bool)

(declare-fun e!64304 () Bool)

(assert (=> b!98689 (= e!64304 ((_ is Undefined!256) lt!49612))))

(declare-fun b!98690 () Bool)

(assert (=> b!98690 (= e!64301 e!64304)))

(declare-fun c!16810 () Bool)

(assert (=> b!98690 (= c!16810 ((_ is MissingVacant!256) lt!49612))))

(declare-fun b!98691 () Bool)

(declare-fun res!49618 () Bool)

(assert (=> b!98691 (=> (not res!49618) (not e!64302))))

(assert (=> b!98691 (= res!49618 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3170 lt!49612)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10085 () Bool)

(assert (=> bm!10085 (= call!10088 (arrayContainsKey!0 (_keys!4169 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98692 () Bool)

(declare-fun res!49621 () Bool)

(assert (=> b!98692 (=> (not res!49621) (not e!64302))))

(assert (=> b!98692 (= res!49621 call!10087)))

(assert (=> b!98692 (= e!64304 e!64302)))

(declare-fun b!98693 () Bool)

(assert (=> b!98693 (= e!64301 e!64303)))

(declare-fun res!49619 () Bool)

(assert (=> b!98693 (= res!49619 call!10087)))

(assert (=> b!98693 (=> (not res!49619) (not e!64303))))

(assert (= (and d!26441 c!16811) b!98693))

(assert (= (and d!26441 (not c!16811)) b!98690))

(assert (= (and b!98693 res!49619) b!98688))

(assert (= (and b!98688 res!49620) b!98686))

(assert (= (and b!98690 c!16810) b!98692))

(assert (= (and b!98690 (not c!16810)) b!98689))

(assert (= (and b!98692 res!49621) b!98691))

(assert (= (and b!98691 res!49618) b!98687))

(assert (= (or b!98693 b!98692) bm!10084))

(assert (= (or b!98686 b!98687) bm!10085))

(declare-fun m!108291 () Bool)

(assert (=> bm!10084 m!108291))

(declare-fun m!108293 () Bool)

(assert (=> b!98691 m!108293))

(assert (=> d!26441 m!106105))

(assert (=> d!26441 m!106297))

(assert (=> bm!10085 m!106105))

(assert (=> bm!10085 m!106291))

(declare-fun m!108295 () Bool)

(assert (=> b!98688 m!108295))

(assert (=> d!25933 d!26441))

(assert (=> d!25933 d!26053))

(assert (=> d!26005 d!25969))

(assert (=> d!26005 d!25971))

(declare-fun d!26443 () Bool)

(assert (=> d!26443 (isDefined!102 (getValueByKey!148 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26443 true))

(declare-fun _$12!344 () Unit!2934)

(assert (=> d!26443 (= (choose!601 (toList!772 lt!48641) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) _$12!344)))

(declare-fun bs!4070 () Bool)

(assert (= bs!4070 d!26443))

(assert (=> bs!4070 m!106105))

(assert (=> bs!4070 m!106279))

(assert (=> bs!4070 m!106279))

(assert (=> bs!4070 m!106281))

(assert (=> d!26005 d!26443))

(declare-fun d!26445 () Bool)

(declare-fun res!49626 () Bool)

(declare-fun e!64309 () Bool)

(assert (=> d!26445 (=> res!49626 e!64309)))

(assert (=> d!26445 (= res!49626 (or ((_ is Nil!1583) (toList!772 lt!48641)) ((_ is Nil!1583) (t!5531 (toList!772 lt!48641)))))))

(assert (=> d!26445 (= (isStrictlySorted!299 (toList!772 lt!48641)) e!64309)))

(declare-fun b!98698 () Bool)

(declare-fun e!64310 () Bool)

(assert (=> b!98698 (= e!64309 e!64310)))

(declare-fun res!49627 () Bool)

(assert (=> b!98698 (=> (not res!49627) (not e!64310))))

(assert (=> b!98698 (= res!49627 (bvslt (_1!1174 (h!2176 (toList!772 lt!48641))) (_1!1174 (h!2176 (t!5531 (toList!772 lt!48641))))))))

(declare-fun b!98699 () Bool)

(assert (=> b!98699 (= e!64310 (isStrictlySorted!299 (t!5531 (toList!772 lt!48641))))))

(assert (= (and d!26445 (not res!49626)) b!98698))

(assert (= (and b!98698 res!49627) b!98699))

(declare-fun m!108297 () Bool)

(assert (=> b!98699 m!108297))

(assert (=> d!26005 d!26445))

(declare-fun d!26447 () Bool)

(declare-fun e!64311 () Bool)

(assert (=> d!26447 e!64311))

(declare-fun res!49628 () Bool)

(assert (=> d!26447 (=> res!49628 e!64311)))

(declare-fun lt!49614 () Bool)

(assert (=> d!26447 (= res!49628 (not lt!49614))))

(declare-fun lt!49615 () Bool)

(assert (=> d!26447 (= lt!49614 lt!49615)))

(declare-fun lt!49613 () Unit!2934)

(declare-fun e!64312 () Unit!2934)

(assert (=> d!26447 (= lt!49613 e!64312)))

(declare-fun c!16812 () Bool)

(assert (=> d!26447 (= c!16812 lt!49615)))

(assert (=> d!26447 (= lt!49615 (containsKey!152 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26447 (= (contains!796 lt!48921 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!49614)))

(declare-fun b!98700 () Bool)

(declare-fun lt!49616 () Unit!2934)

(assert (=> b!98700 (= e!64312 lt!49616)))

(assert (=> b!98700 (= lt!49616 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> b!98700 (isDefined!102 (getValueByKey!148 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98701 () Bool)

(declare-fun Unit!2993 () Unit!2934)

(assert (=> b!98701 (= e!64312 Unit!2993)))

(declare-fun b!98702 () Bool)

(assert (=> b!98702 (= e!64311 (isDefined!102 (getValueByKey!148 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(assert (= (and d!26447 c!16812) b!98700))

(assert (= (and d!26447 (not c!16812)) b!98701))

(assert (= (and d!26447 (not res!49628)) b!98702))

(declare-fun m!108299 () Bool)

(assert (=> d!26447 m!108299))

(declare-fun m!108301 () Bool)

(assert (=> b!98700 m!108301))

(assert (=> b!98700 m!106517))

(assert (=> b!98700 m!106517))

(declare-fun m!108303 () Bool)

(assert (=> b!98700 m!108303))

(assert (=> b!98702 m!106517))

(assert (=> b!98702 m!106517))

(assert (=> b!98702 m!108303))

(assert (=> d!25923 d!26447))

(declare-fun b!98704 () Bool)

(declare-fun e!64313 () Option!154)

(declare-fun e!64314 () Option!154)

(assert (=> b!98704 (= e!64313 e!64314)))

(declare-fun c!16814 () Bool)

(assert (=> b!98704 (= c!16814 (and ((_ is Cons!1582) lt!48919) (not (= (_1!1174 (h!2176 lt!48919)) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun b!98705 () Bool)

(assert (=> b!98705 (= e!64314 (getValueByKey!148 (t!5531 lt!48919) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98703 () Bool)

(assert (=> b!98703 (= e!64313 (Some!153 (_2!1174 (h!2176 lt!48919))))))

(declare-fun d!26449 () Bool)

(declare-fun c!16813 () Bool)

(assert (=> d!26449 (= c!16813 (and ((_ is Cons!1582) lt!48919) (= (_1!1174 (h!2176 lt!48919)) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(assert (=> d!26449 (= (getValueByKey!148 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) e!64313)))

(declare-fun b!98706 () Bool)

(assert (=> b!98706 (= e!64314 None!152)))

(assert (= (and d!26449 c!16813) b!98703))

(assert (= (and d!26449 (not c!16813)) b!98704))

(assert (= (and b!98704 c!16814) b!98705))

(assert (= (and b!98704 (not c!16814)) b!98706))

(declare-fun m!108305 () Bool)

(assert (=> b!98705 m!108305))

(assert (=> d!25923 d!26449))

(declare-fun d!26451 () Bool)

(assert (=> d!26451 (= (getValueByKey!148 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) (Some!153 (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun lt!49617 () Unit!2934)

(assert (=> d!26451 (= lt!49617 (choose!604 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!64315 () Bool)

(assert (=> d!26451 e!64315))

(declare-fun res!49629 () Bool)

(assert (=> d!26451 (=> (not res!49629) (not e!64315))))

(assert (=> d!26451 (= res!49629 (isStrictlySorted!299 lt!48919))))

(assert (=> d!26451 (= (lemmaContainsTupThenGetReturnValue!67 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!49617)))

(declare-fun b!98707 () Bool)

(declare-fun res!49630 () Bool)

(assert (=> b!98707 (=> (not res!49630) (not e!64315))))

(assert (=> b!98707 (= res!49630 (containsKey!152 lt!48919 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98708 () Bool)

(assert (=> b!98708 (= e!64315 (contains!798 lt!48919 (tuple2!2327 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(assert (= (and d!26451 res!49629) b!98707))

(assert (= (and b!98707 res!49630) b!98708))

(assert (=> d!26451 m!106511))

(declare-fun m!108307 () Bool)

(assert (=> d!26451 m!108307))

(declare-fun m!108309 () Bool)

(assert (=> d!26451 m!108309))

(declare-fun m!108311 () Bool)

(assert (=> b!98707 m!108311))

(declare-fun m!108313 () Bool)

(assert (=> b!98708 m!108313))

(assert (=> d!25923 d!26451))

(declare-fun bm!10086 () Bool)

(declare-fun call!10091 () List!1586)

(declare-fun call!10090 () List!1586)

(assert (=> bm!10086 (= call!10091 call!10090)))

(declare-fun b!98710 () Bool)

(declare-fun e!64316 () List!1586)

(assert (=> b!98710 (= e!64316 call!10091)))

(declare-fun c!16816 () Bool)

(declare-fun b!98711 () Bool)

(assert (=> b!98711 (= c!16816 (and ((_ is Cons!1582) (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (bvsgt (_1!1174 (h!2176 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun e!64320 () List!1586)

(assert (=> b!98711 (= e!64320 e!64316)))

(declare-fun bm!10087 () Bool)

(declare-fun call!10089 () List!1586)

(assert (=> bm!10087 (= call!10090 call!10089)))

(declare-fun e!64317 () List!1586)

(declare-fun c!16817 () Bool)

(declare-fun bm!10088 () Bool)

(assert (=> bm!10088 (= call!10089 ($colon$colon!77 e!64317 (ite c!16817 (h!2176 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (tuple2!2327 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun c!16818 () Bool)

(assert (=> bm!10088 (= c!16818 c!16817)))

(declare-fun b!98712 () Bool)

(assert (=> b!98712 (= e!64320 call!10090)))

(declare-fun b!98713 () Bool)

(declare-fun e!64318 () List!1586)

(assert (=> b!98713 (= e!64318 e!64320)))

(declare-fun c!16815 () Bool)

(assert (=> b!98713 (= c!16815 (and ((_ is Cons!1582) (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (= (_1!1174 (h!2176 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98714 () Bool)

(assert (=> b!98714 (= e!64318 call!10089)))

(declare-fun b!98715 () Bool)

(declare-fun res!49632 () Bool)

(declare-fun e!64319 () Bool)

(assert (=> b!98715 (=> (not res!49632) (not e!64319))))

(declare-fun lt!49618 () List!1586)

(assert (=> b!98715 (= res!49632 (containsKey!152 lt!49618 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98716 () Bool)

(assert (=> b!98716 (= e!64319 (contains!798 lt!49618 (tuple2!2327 (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun d!26453 () Bool)

(assert (=> d!26453 e!64319))

(declare-fun res!49631 () Bool)

(assert (=> d!26453 (=> (not res!49631) (not e!64319))))

(assert (=> d!26453 (= res!49631 (isStrictlySorted!299 lt!49618))))

(assert (=> d!26453 (= lt!49618 e!64318)))

(assert (=> d!26453 (= c!16817 (and ((_ is Cons!1582) (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (bvslt (_1!1174 (h!2176 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(assert (=> d!26453 (isStrictlySorted!299 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))))))

(assert (=> d!26453 (= (insertStrictlySorted!70 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) lt!49618)))

(declare-fun b!98709 () Bool)

(assert (=> b!98709 (= e!64317 (ite c!16815 (t!5531 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (ite c!16816 (Cons!1582 (h!2176 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (t!5531 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869))))) Nil!1583)))))

(declare-fun b!98717 () Bool)

(assert (=> b!98717 (= e!64316 call!10091)))

(declare-fun b!98718 () Bool)

(assert (=> b!98718 (= e!64317 (insertStrictlySorted!70 (t!5531 (toList!772 (ite c!16461 call!9863 (ite c!16460 call!9864 call!9869)))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) (_2!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26453 c!16817) b!98714))

(assert (= (and d!26453 (not c!16817)) b!98713))

(assert (= (and b!98713 c!16815) b!98712))

(assert (= (and b!98713 (not c!16815)) b!98711))

(assert (= (and b!98711 c!16816) b!98710))

(assert (= (and b!98711 (not c!16816)) b!98717))

(assert (= (or b!98710 b!98717) bm!10086))

(assert (= (or b!98712 bm!10086) bm!10087))

(assert (= (or b!98714 bm!10087) bm!10088))

(assert (= (and bm!10088 c!16818) b!98718))

(assert (= (and bm!10088 (not c!16818)) b!98709))

(assert (= (and d!26453 res!49631) b!98715))

(assert (= (and b!98715 res!49632) b!98716))

(declare-fun m!108315 () Bool)

(assert (=> b!98715 m!108315))

(declare-fun m!108317 () Bool)

(assert (=> b!98716 m!108317))

(declare-fun m!108319 () Bool)

(assert (=> bm!10088 m!108319))

(declare-fun m!108321 () Bool)

(assert (=> d!26453 m!108321))

(declare-fun m!108323 () Bool)

(assert (=> d!26453 m!108323))

(declare-fun m!108325 () Bool)

(assert (=> b!98718 m!108325))

(assert (=> d!25923 d!26453))

(declare-fun d!26455 () Bool)

(assert (=> d!26455 (isDefined!102 (getValueByKey!148 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!49619 () Unit!2934)

(assert (=> d!26455 (= lt!49619 (choose!601 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64321 () Bool)

(assert (=> d!26455 e!64321))

(declare-fun res!49633 () Bool)

(assert (=> d!26455 (=> (not res!49633) (not e!64321))))

(assert (=> d!26455 (= res!49633 (isStrictlySorted!299 (toList!772 lt!48747)))))

(assert (=> d!26455 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49619)))

(declare-fun b!98719 () Bool)

(assert (=> b!98719 (= e!64321 (containsKey!152 (toList!772 lt!48747) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26455 res!49633) b!98719))

(assert (=> d!26455 m!106219))

(assert (=> d!26455 m!106487))

(assert (=> d!26455 m!106487))

(assert (=> d!26455 m!106875))

(assert (=> d!26455 m!106219))

(declare-fun m!108327 () Bool)

(assert (=> d!26455 m!108327))

(assert (=> d!26455 m!107123))

(assert (=> b!98719 m!106219))

(assert (=> b!98719 m!106871))

(assert (=> b!97927 d!26455))

(assert (=> b!97927 d!26279))

(assert (=> b!97927 d!26057))

(declare-fun d!26457 () Bool)

(declare-fun lt!49620 () Bool)

(assert (=> d!26457 (= lt!49620 (select (content!102 (toList!772 lt!48982)) (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!64322 () Bool)

(assert (=> d!26457 (= lt!49620 e!64322)))

(declare-fun res!49635 () Bool)

(assert (=> d!26457 (=> (not res!49635) (not e!64322))))

(assert (=> d!26457 (= res!49635 ((_ is Cons!1582) (toList!772 lt!48982)))))

(assert (=> d!26457 (= (contains!798 (toList!772 lt!48982) (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49620)))

(declare-fun b!98720 () Bool)

(declare-fun e!64323 () Bool)

(assert (=> b!98720 (= e!64322 e!64323)))

(declare-fun res!49634 () Bool)

(assert (=> b!98720 (=> res!49634 e!64323)))

(assert (=> b!98720 (= res!49634 (= (h!2176 (toList!772 lt!48982)) (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98721 () Bool)

(assert (=> b!98721 (= e!64323 (contains!798 (t!5531 (toList!772 lt!48982)) (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!26457 res!49635) b!98720))

(assert (= (and b!98720 (not res!49634)) b!98721))

(declare-fun m!108329 () Bool)

(assert (=> d!26457 m!108329))

(declare-fun m!108331 () Bool)

(assert (=> d!26457 m!108331))

(declare-fun m!108333 () Bool)

(assert (=> b!98721 m!108333))

(assert (=> b!97797 d!26457))

(declare-fun d!26459 () Bool)

(assert (=> d!26459 (= (inRange!0 (ite c!16554 (index!3167 lt!48949) (index!3170 lt!48949)) (mask!6576 newMap!16)) (and (bvsge (ite c!16554 (index!3167 lt!48949) (index!3170 lt!48949)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3167 lt!48949) (index!3170 lt!48949)) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9968 d!26459))

(declare-fun d!26461 () Bool)

(assert (=> d!26461 (= (get!1288 (getValueByKey!148 (toList!772 lt!48746) lt!48744)) (v!2797 (getValueByKey!148 (toList!772 lt!48746) lt!48744)))))

(assert (=> d!25939 d!26461))

(declare-fun b!98723 () Bool)

(declare-fun e!64324 () Option!154)

(declare-fun e!64325 () Option!154)

(assert (=> b!98723 (= e!64324 e!64325)))

(declare-fun c!16820 () Bool)

(assert (=> b!98723 (= c!16820 (and ((_ is Cons!1582) (toList!772 lt!48746)) (not (= (_1!1174 (h!2176 (toList!772 lt!48746))) lt!48744))))))

(declare-fun b!98724 () Bool)

(assert (=> b!98724 (= e!64325 (getValueByKey!148 (t!5531 (toList!772 lt!48746)) lt!48744))))

(declare-fun b!98722 () Bool)

(assert (=> b!98722 (= e!64324 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48746)))))))

(declare-fun d!26463 () Bool)

(declare-fun c!16819 () Bool)

(assert (=> d!26463 (= c!16819 (and ((_ is Cons!1582) (toList!772 lt!48746)) (= (_1!1174 (h!2176 (toList!772 lt!48746))) lt!48744)))))

(assert (=> d!26463 (= (getValueByKey!148 (toList!772 lt!48746) lt!48744) e!64324)))

(declare-fun b!98725 () Bool)

(assert (=> b!98725 (= e!64325 None!152)))

(assert (= (and d!26463 c!16819) b!98722))

(assert (= (and d!26463 (not c!16819)) b!98723))

(assert (= (and b!98723 c!16820) b!98724))

(assert (= (and b!98723 (not c!16820)) b!98725))

(declare-fun m!108335 () Bool)

(assert (=> b!98724 m!108335))

(assert (=> d!25939 d!26463))

(declare-fun d!26465 () Bool)

(declare-fun e!64326 () Bool)

(assert (=> d!26465 e!64326))

(declare-fun res!49636 () Bool)

(assert (=> d!26465 (=> res!49636 e!64326)))

(declare-fun lt!49622 () Bool)

(assert (=> d!26465 (= res!49636 (not lt!49622))))

(declare-fun lt!49623 () Bool)

(assert (=> d!26465 (= lt!49622 lt!49623)))

(declare-fun lt!49621 () Unit!2934)

(declare-fun e!64327 () Unit!2934)

(assert (=> d!26465 (= lt!49621 e!64327)))

(declare-fun c!16821 () Bool)

(assert (=> d!26465 (= c!16821 lt!49623)))

(assert (=> d!26465 (= lt!49623 (containsKey!152 (toList!772 lt!48936) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26465 (= (contains!796 lt!48936 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) lt!49622)))

(declare-fun b!98726 () Bool)

(declare-fun lt!49624 () Unit!2934)

(assert (=> b!98726 (= e!64327 lt!49624)))

(assert (=> b!98726 (= lt!49624 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48936) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98726 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98727 () Bool)

(declare-fun Unit!2994 () Unit!2934)

(assert (=> b!98727 (= e!64327 Unit!2994)))

(declare-fun b!98728 () Bool)

(assert (=> b!98728 (= e!64326 (isDefined!102 (getValueByKey!148 (toList!772 lt!48936) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26465 c!16821) b!98726))

(assert (= (and d!26465 (not c!16821)) b!98727))

(assert (= (and d!26465 (not res!49636)) b!98728))

(assert (=> d!26465 m!106375))

(declare-fun m!108337 () Bool)

(assert (=> d!26465 m!108337))

(assert (=> b!98726 m!106375))

(declare-fun m!108339 () Bool)

(assert (=> b!98726 m!108339))

(assert (=> b!98726 m!106375))

(assert (=> b!98726 m!108133))

(assert (=> b!98726 m!108133))

(declare-fun m!108341 () Bool)

(assert (=> b!98726 m!108341))

(assert (=> b!98728 m!106375))

(assert (=> b!98728 m!108133))

(assert (=> b!98728 m!108133))

(assert (=> b!98728 m!108341))

(assert (=> b!97708 d!26465))

(declare-fun d!26467 () Bool)

(declare-fun e!64328 () Bool)

(assert (=> d!26467 e!64328))

(declare-fun res!49637 () Bool)

(assert (=> d!26467 (=> res!49637 e!64328)))

(declare-fun lt!49626 () Bool)

(assert (=> d!26467 (= res!49637 (not lt!49626))))

(declare-fun lt!49627 () Bool)

(assert (=> d!26467 (= lt!49626 lt!49627)))

(declare-fun lt!49625 () Unit!2934)

(declare-fun e!64329 () Unit!2934)

(assert (=> d!26467 (= lt!49625 e!64329)))

(declare-fun c!16822 () Bool)

(assert (=> d!26467 (= c!16822 lt!49627)))

(assert (=> d!26467 (= lt!49627 (containsKey!152 (toList!772 lt!48871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26467 (= (contains!796 lt!48871 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49626)))

(declare-fun b!98729 () Bool)

(declare-fun lt!49628 () Unit!2934)

(assert (=> b!98729 (= e!64329 lt!49628)))

(assert (=> b!98729 (= lt!49628 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98729 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98730 () Bool)

(declare-fun Unit!2995 () Unit!2934)

(assert (=> b!98730 (= e!64329 Unit!2995)))

(declare-fun b!98731 () Bool)

(assert (=> b!98731 (= e!64328 (isDefined!102 (getValueByKey!148 (toList!772 lt!48871) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26467 c!16822) b!98729))

(assert (= (and d!26467 (not c!16822)) b!98730))

(assert (= (and d!26467 (not res!49637)) b!98731))

(declare-fun m!108343 () Bool)

(assert (=> d!26467 m!108343))

(declare-fun m!108345 () Bool)

(assert (=> b!98729 m!108345))

(assert (=> b!98729 m!107549))

(assert (=> b!98729 m!107549))

(declare-fun m!108347 () Bool)

(assert (=> b!98729 m!108347))

(assert (=> b!98731 m!107549))

(assert (=> b!98731 m!107549))

(assert (=> b!98731 m!108347))

(assert (=> bm!9942 d!26467))

(declare-fun d!26469 () Bool)

(assert (=> d!26469 (= (inRange!0 (index!3168 lt!49029) (mask!6576 newMap!16)) (and (bvsge (index!3168 lt!49029) #b00000000000000000000000000000000) (bvslt (index!3168 lt!49029) (bvadd (mask!6576 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!97855 d!26469))

(assert (=> b!97648 d!26045))

(declare-fun b!98732 () Bool)

(declare-fun e!64334 () ListLongMap!1513)

(declare-fun e!64333 () ListLongMap!1513)

(assert (=> b!98732 (= e!64334 e!64333)))

(declare-fun c!16825 () Bool)

(assert (=> b!98732 (= c!16825 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98733 () Bool)

(declare-fun e!64332 () Bool)

(assert (=> b!98733 (= e!64332 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98733 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!98734 () Bool)

(declare-fun e!64336 () Bool)

(declare-fun lt!49633 () ListLongMap!1513)

(assert (=> b!98734 (= e!64336 (isEmpty!360 lt!49633))))

(declare-fun b!98735 () Bool)

(assert (=> b!98735 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> b!98735 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2254 (_values!2463 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!64330 () Bool)

(assert (=> b!98735 (= e!64330 (= (apply!92 lt!49633 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98736 () Bool)

(assert (=> b!98736 (= e!64334 (ListLongMap!1514 Nil!1583))))

(declare-fun b!98737 () Bool)

(declare-fun res!49640 () Bool)

(declare-fun e!64335 () Bool)

(assert (=> b!98737 (=> (not res!49640) (not e!64335))))

(assert (=> b!98737 (= res!49640 (not (contains!796 lt!49633 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98738 () Bool)

(declare-fun e!64331 () Bool)

(assert (=> b!98738 (= e!64335 e!64331)))

(declare-fun c!16826 () Bool)

(assert (=> b!98738 (= c!16826 e!64332)))

(declare-fun res!49638 () Bool)

(assert (=> b!98738 (=> (not res!49638) (not e!64332))))

(assert (=> b!98738 (= res!49638 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun d!26471 () Bool)

(assert (=> d!26471 e!64335))

(declare-fun res!49641 () Bool)

(assert (=> d!26471 (=> (not res!49641) (not e!64335))))

(assert (=> d!26471 (= res!49641 (not (contains!796 lt!49633 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26471 (= lt!49633 e!64334)))

(declare-fun c!16824 () Bool)

(assert (=> d!26471 (= c!16824 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(assert (=> d!26471 (validMask!0 (mask!6576 (v!2791 (underlying!331 thiss!992))))))

(assert (=> d!26471 (= (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))) lt!49633)))

(declare-fun b!98739 () Bool)

(assert (=> b!98739 (= e!64336 (= lt!49633 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98740 () Bool)

(declare-fun call!10092 () ListLongMap!1513)

(assert (=> b!98740 (= e!64333 call!10092)))

(declare-fun b!98741 () Bool)

(assert (=> b!98741 (= e!64331 e!64336)))

(declare-fun c!16823 () Bool)

(assert (=> b!98741 (= c!16823 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98742 () Bool)

(declare-fun lt!49631 () Unit!2934)

(declare-fun lt!49634 () Unit!2934)

(assert (=> b!98742 (= lt!49631 lt!49634)))

(declare-fun lt!49635 () (_ BitVec 64))

(declare-fun lt!49629 () (_ BitVec 64))

(declare-fun lt!49630 () ListLongMap!1513)

(declare-fun lt!49632 () V!3153)

(assert (=> b!98742 (not (contains!796 (+!128 lt!49630 (tuple2!2327 lt!49629 lt!49632)) lt!49635))))

(assert (=> b!98742 (= lt!49634 (addStillNotContains!41 lt!49630 lt!49629 lt!49632 lt!49635))))

(assert (=> b!98742 (= lt!49635 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98742 (= lt!49632 (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98742 (= lt!49629 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!98742 (= lt!49630 call!10092)))

(assert (=> b!98742 (= e!64333 (+!128 call!10092 (tuple2!2327 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98743 () Bool)

(assert (=> b!98743 (= e!64331 e!64330)))

(assert (=> b!98743 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun res!49639 () Bool)

(assert (=> b!98743 (= res!49639 (contains!796 lt!49633 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98743 (=> (not res!49639) (not e!64330))))

(declare-fun bm!10089 () Bool)

(assert (=> bm!10089 (= call!10092 (getCurrentListMapNoExtraKeys!92 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (_values!2463 (v!2791 (underlying!331 thiss!992))) (mask!6576 (v!2791 (underlying!331 thiss!992))) (extraKeys!2301 (v!2791 (underlying!331 thiss!992))) (zeroValue!2363 (v!2791 (underlying!331 thiss!992))) (minValue!2363 (v!2791 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992)))))))

(assert (= (and d!26471 c!16824) b!98736))

(assert (= (and d!26471 (not c!16824)) b!98732))

(assert (= (and b!98732 c!16825) b!98742))

(assert (= (and b!98732 (not c!16825)) b!98740))

(assert (= (or b!98742 b!98740) bm!10089))

(assert (= (and d!26471 res!49641) b!98737))

(assert (= (and b!98737 res!49640) b!98738))

(assert (= (and b!98738 res!49638) b!98733))

(assert (= (and b!98738 c!16826) b!98743))

(assert (= (and b!98738 (not c!16826)) b!98741))

(assert (= (and b!98743 res!49639) b!98735))

(assert (= (and b!98741 c!16823) b!98739))

(assert (= (and b!98741 (not c!16823)) b!98734))

(declare-fun b_lambda!4375 () Bool)

(assert (=> (not b_lambda!4375) (not b!98735)))

(assert (=> b!98735 t!5528))

(declare-fun b_and!6057 () Bool)

(assert (= b_and!6053 (and (=> t!5528 result!3251) b_and!6057)))

(assert (=> b!98735 t!5530))

(declare-fun b_and!6059 () Bool)

(assert (= b_and!6055 (and (=> t!5530 result!3255) b_and!6059)))

(declare-fun b_lambda!4377 () Bool)

(assert (=> (not b_lambda!4377) (not b!98742)))

(assert (=> b!98742 t!5528))

(declare-fun b_and!6061 () Bool)

(assert (= b_and!6057 (and (=> t!5528 result!3251) b_and!6061)))

(assert (=> b!98742 t!5530))

(declare-fun b_and!6063 () Bool)

(assert (= b_and!6059 (and (=> t!5530 result!3255) b_and!6063)))

(assert (=> b!98735 m!106521))

(assert (=> b!98735 m!106119))

(declare-fun m!108349 () Bool)

(assert (=> b!98735 m!108349))

(assert (=> b!98735 m!106521))

(declare-fun m!108351 () Bool)

(assert (=> b!98735 m!108351))

(assert (=> b!98735 m!108349))

(assert (=> b!98735 m!106119))

(declare-fun m!108353 () Bool)

(assert (=> b!98735 m!108353))

(declare-fun m!108355 () Bool)

(assert (=> bm!10089 m!108355))

(assert (=> b!98739 m!108355))

(declare-fun m!108357 () Bool)

(assert (=> b!98734 m!108357))

(assert (=> b!98733 m!106521))

(assert (=> b!98733 m!106521))

(declare-fun m!108359 () Bool)

(assert (=> b!98733 m!108359))

(assert (=> b!98742 m!106521))

(assert (=> b!98742 m!106119))

(declare-fun m!108361 () Bool)

(assert (=> b!98742 m!108361))

(declare-fun m!108363 () Bool)

(assert (=> b!98742 m!108363))

(assert (=> b!98742 m!108349))

(declare-fun m!108365 () Bool)

(assert (=> b!98742 m!108365))

(assert (=> b!98742 m!108363))

(declare-fun m!108367 () Bool)

(assert (=> b!98742 m!108367))

(assert (=> b!98742 m!108349))

(assert (=> b!98742 m!106119))

(assert (=> b!98742 m!108353))

(declare-fun m!108369 () Bool)

(assert (=> d!26471 m!108369))

(assert (=> d!26471 m!106083))

(assert (=> b!98732 m!106521))

(assert (=> b!98732 m!106521))

(assert (=> b!98732 m!108359))

(declare-fun m!108371 () Bool)

(assert (=> b!98737 m!108371))

(assert (=> b!98743 m!106521))

(assert (=> b!98743 m!106521))

(declare-fun m!108373 () Bool)

(assert (=> b!98743 m!108373))

(assert (=> bm!9971 d!26471))

(assert (=> d!25913 d!26053))

(declare-fun b!98745 () Bool)

(declare-fun e!64337 () Option!154)

(declare-fun e!64338 () Option!154)

(assert (=> b!98745 (= e!64337 e!64338)))

(declare-fun c!16828 () Bool)

(assert (=> b!98745 (= c!16828 (and ((_ is Cons!1582) (toList!772 lt!48989)) (not (= (_1!1174 (h!2176 (toList!772 lt!48989))) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98746 () Bool)

(assert (=> b!98746 (= e!64338 (getValueByKey!148 (t!5531 (toList!772 lt!48989)) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98744 () Bool)

(assert (=> b!98744 (= e!64337 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48989)))))))

(declare-fun d!26473 () Bool)

(declare-fun c!16827 () Bool)

(assert (=> d!26473 (= c!16827 (and ((_ is Cons!1582) (toList!772 lt!48989)) (= (_1!1174 (h!2176 (toList!772 lt!48989))) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26473 (= (getValueByKey!148 (toList!772 lt!48989) (_1!1174 (tuple2!2327 lt!48740 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64337)))

(declare-fun b!98747 () Bool)

(assert (=> b!98747 (= e!64338 None!152)))

(assert (= (and d!26473 c!16827) b!98744))

(assert (= (and d!26473 (not c!16827)) b!98745))

(assert (= (and b!98745 c!16828) b!98746))

(assert (= (and b!98745 (not c!16828)) b!98747))

(declare-fun m!108375 () Bool)

(assert (=> b!98746 m!108375))

(assert (=> b!97799 d!26473))

(assert (=> b!97955 d!26243))

(assert (=> b!97955 d!26245))

(declare-fun d!26475 () Bool)

(assert (=> d!26475 (= (get!1288 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2797 (getValueByKey!148 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26003 d!26475))

(assert (=> d!26003 d!26129))

(declare-fun d!26477 () Bool)

(assert (=> d!26477 (isDefined!102 (getValueByKey!148 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!49636 () Unit!2934)

(assert (=> d!26477 (= lt!49636 (choose!601 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!64339 () Bool)

(assert (=> d!26477 e!64339))

(declare-fun res!49642 () Bool)

(assert (=> d!26477 (=> (not res!49642) (not e!64339))))

(assert (=> d!26477 (= res!49642 (isStrictlySorted!299 (toList!772 e!63619)))))

(assert (=> d!26477 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49636)))

(declare-fun b!98748 () Bool)

(assert (=> b!98748 (= e!64339 (containsKey!152 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26477 res!49642) b!98748))

(assert (=> d!26477 m!106105))

(assert (=> d!26477 m!106921))

(assert (=> d!26477 m!106921))

(assert (=> d!26477 m!106923))

(assert (=> d!26477 m!106105))

(declare-fun m!108377 () Bool)

(assert (=> d!26477 m!108377))

(declare-fun m!108379 () Bool)

(assert (=> d!26477 m!108379))

(assert (=> b!98748 m!106105))

(assert (=> b!98748 m!106917))

(assert (=> b!97968 d!26477))

(assert (=> b!97968 d!26237))

(assert (=> b!97968 d!26239))

(declare-fun d!26479 () Bool)

(assert (=> d!26479 (= (apply!92 lt!48871 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1288 (getValueByKey!148 (toList!772 lt!48871) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4071 () Bool)

(assert (= bs!4071 d!26479))

(assert (=> bs!4071 m!107365))

(assert (=> bs!4071 m!107365))

(declare-fun m!108381 () Bool)

(assert (=> bs!4071 m!108381))

(assert (=> b!97645 d!26479))

(declare-fun d!26481 () Bool)

(assert (=> d!26481 (contains!796 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48922)))

(declare-fun lt!49637 () Unit!2934)

(assert (=> d!26481 (= lt!49637 (choose!597 lt!48925 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48922))))

(assert (=> d!26481 (contains!796 lt!48925 lt!48922)))

(assert (=> d!26481 (= (addStillContains!68 lt!48925 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48922) lt!49637)))

(declare-fun bs!4072 () Bool)

(assert (= bs!4072 d!26481))

(assert (=> bs!4072 m!106533))

(assert (=> bs!4072 m!106533))

(assert (=> bs!4072 m!106547))

(declare-fun m!108383 () Bool)

(assert (=> bs!4072 m!108383))

(declare-fun m!108385 () Bool)

(assert (=> bs!4072 m!108385))

(assert (=> b!97720 d!26481))

(declare-fun d!26483 () Bool)

(declare-fun e!64340 () Bool)

(assert (=> d!26483 e!64340))

(declare-fun res!49644 () Bool)

(assert (=> d!26483 (=> (not res!49644) (not e!64340))))

(declare-fun lt!49641 () ListLongMap!1513)

(assert (=> d!26483 (= res!49644 (contains!796 lt!49641 (_1!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49639 () List!1586)

(assert (=> d!26483 (= lt!49641 (ListLongMap!1514 lt!49639))))

(declare-fun lt!49640 () Unit!2934)

(declare-fun lt!49638 () Unit!2934)

(assert (=> d!26483 (= lt!49640 lt!49638)))

(assert (=> d!26483 (= (getValueByKey!148 lt!49639 (_1!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26483 (= lt!49638 (lemmaContainsTupThenGetReturnValue!67 lt!49639 (_1!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26483 (= lt!49639 (insertStrictlySorted!70 (toList!772 lt!48932) (_1!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26483 (= (+!128 lt!48932 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49641)))

(declare-fun b!98749 () Bool)

(declare-fun res!49643 () Bool)

(assert (=> b!98749 (=> (not res!49643) (not e!64340))))

(assert (=> b!98749 (= res!49643 (= (getValueByKey!148 (toList!772 lt!49641) (_1!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98750 () Bool)

(assert (=> b!98750 (= e!64340 (contains!798 (toList!772 lt!49641) (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26483 res!49644) b!98749))

(assert (= (and b!98749 res!49643) b!98750))

(declare-fun m!108387 () Bool)

(assert (=> d!26483 m!108387))

(declare-fun m!108389 () Bool)

(assert (=> d!26483 m!108389))

(declare-fun m!108391 () Bool)

(assert (=> d!26483 m!108391))

(declare-fun m!108393 () Bool)

(assert (=> d!26483 m!108393))

(declare-fun m!108395 () Bool)

(assert (=> b!98749 m!108395))

(declare-fun m!108397 () Bool)

(assert (=> b!98750 m!108397))

(assert (=> b!97720 d!26483))

(declare-fun d!26485 () Bool)

(assert (=> d!26485 (= (apply!92 (+!128 lt!48932 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48924) (apply!92 lt!48932 lt!48924))))

(declare-fun lt!49642 () Unit!2934)

(assert (=> d!26485 (= lt!49642 (choose!596 lt!48932 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48924))))

(declare-fun e!64341 () Bool)

(assert (=> d!26485 e!64341))

(declare-fun res!49645 () Bool)

(assert (=> d!26485 (=> (not res!49645) (not e!64341))))

(assert (=> d!26485 (= res!49645 (contains!796 lt!48932 lt!48924))))

(assert (=> d!26485 (= (addApplyDifferent!68 lt!48932 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48924) lt!49642)))

(declare-fun b!98751 () Bool)

(assert (=> b!98751 (= e!64341 (not (= lt!48924 lt!48923)))))

(assert (= (and d!26485 res!49645) b!98751))

(declare-fun m!108399 () Bool)

(assert (=> d!26485 m!108399))

(declare-fun m!108401 () Bool)

(assert (=> d!26485 m!108401))

(assert (=> d!26485 m!106543))

(assert (=> d!26485 m!106543))

(assert (=> d!26485 m!106545))

(assert (=> d!26485 m!106559))

(assert (=> b!97720 d!26485))

(declare-fun d!26487 () Bool)

(assert (=> d!26487 (= (apply!92 (+!128 lt!48932 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48924) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48932 (tuple2!2327 lt!48923 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!48924)))))

(declare-fun bs!4073 () Bool)

(assert (= bs!4073 d!26487))

(declare-fun m!108403 () Bool)

(assert (=> bs!4073 m!108403))

(assert (=> bs!4073 m!108403))

(declare-fun m!108405 () Bool)

(assert (=> bs!4073 m!108405))

(assert (=> b!97720 d!26487))

(declare-fun d!26489 () Bool)

(assert (=> d!26489 (= (apply!92 lt!48935 lt!48933) (get!1288 (getValueByKey!148 (toList!772 lt!48935) lt!48933)))))

(declare-fun bs!4074 () Bool)

(assert (= bs!4074 d!26489))

(declare-fun m!108407 () Bool)

(assert (=> bs!4074 m!108407))

(assert (=> bs!4074 m!108407))

(declare-fun m!108409 () Bool)

(assert (=> bs!4074 m!108409))

(assert (=> b!97720 d!26489))

(declare-fun d!26491 () Bool)

(declare-fun e!64342 () Bool)

(assert (=> d!26491 e!64342))

(declare-fun res!49646 () Bool)

(assert (=> d!26491 (=> res!49646 e!64342)))

(declare-fun lt!49644 () Bool)

(assert (=> d!26491 (= res!49646 (not lt!49644))))

(declare-fun lt!49645 () Bool)

(assert (=> d!26491 (= lt!49644 lt!49645)))

(declare-fun lt!49643 () Unit!2934)

(declare-fun e!64343 () Unit!2934)

(assert (=> d!26491 (= lt!49643 e!64343)))

(declare-fun c!16829 () Bool)

(assert (=> d!26491 (= c!16829 lt!49645)))

(assert (=> d!26491 (= lt!49645 (containsKey!152 (toList!772 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48922))))

(assert (=> d!26491 (= (contains!796 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48922) lt!49644)))

(declare-fun b!98752 () Bool)

(declare-fun lt!49646 () Unit!2934)

(assert (=> b!98752 (= e!64343 lt!49646)))

(assert (=> b!98752 (= lt!49646 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48922))))

(assert (=> b!98752 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48922))))

(declare-fun b!98753 () Bool)

(declare-fun Unit!2996 () Unit!2934)

(assert (=> b!98753 (= e!64343 Unit!2996)))

(declare-fun b!98754 () Bool)

(assert (=> b!98754 (= e!64342 (isDefined!102 (getValueByKey!148 (toList!772 (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48922)))))

(assert (= (and d!26491 c!16829) b!98752))

(assert (= (and d!26491 (not c!16829)) b!98753))

(assert (= (and d!26491 (not res!49646)) b!98754))

(declare-fun m!108411 () Bool)

(assert (=> d!26491 m!108411))

(declare-fun m!108413 () Bool)

(assert (=> b!98752 m!108413))

(declare-fun m!108415 () Bool)

(assert (=> b!98752 m!108415))

(assert (=> b!98752 m!108415))

(declare-fun m!108417 () Bool)

(assert (=> b!98752 m!108417))

(assert (=> b!98754 m!108415))

(assert (=> b!98754 m!108415))

(assert (=> b!98754 m!108417))

(assert (=> b!97720 d!26491))

(declare-fun d!26493 () Bool)

(assert (=> d!26493 (= (apply!92 lt!48938 lt!48934) (get!1288 (getValueByKey!148 (toList!772 lt!48938) lt!48934)))))

(declare-fun bs!4075 () Bool)

(assert (= bs!4075 d!26493))

(declare-fun m!108419 () Bool)

(assert (=> bs!4075 m!108419))

(assert (=> bs!4075 m!108419))

(declare-fun m!108421 () Bool)

(assert (=> bs!4075 m!108421))

(assert (=> b!97720 d!26493))

(declare-fun d!26495 () Bool)

(assert (=> d!26495 (= (apply!92 (+!128 lt!48935 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48933) (apply!92 lt!48935 lt!48933))))

(declare-fun lt!49647 () Unit!2934)

(assert (=> d!26495 (= lt!49647 (choose!596 lt!48935 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48933))))

(declare-fun e!64344 () Bool)

(assert (=> d!26495 e!64344))

(declare-fun res!49647 () Bool)

(assert (=> d!26495 (=> (not res!49647) (not e!64344))))

(assert (=> d!26495 (= res!49647 (contains!796 lt!48935 lt!48933))))

(assert (=> d!26495 (= (addApplyDifferent!68 lt!48935 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48933) lt!49647)))

(declare-fun b!98755 () Bool)

(assert (=> b!98755 (= e!64344 (not (= lt!48933 lt!48942)))))

(assert (= (and d!26495 res!49647) b!98755))

(declare-fun m!108423 () Bool)

(assert (=> d!26495 m!108423))

(declare-fun m!108425 () Bool)

(assert (=> d!26495 m!108425))

(assert (=> d!26495 m!106549))

(assert (=> d!26495 m!106549))

(assert (=> d!26495 m!106551))

(assert (=> d!26495 m!106539))

(assert (=> b!97720 d!26495))

(declare-fun d!26497 () Bool)

(declare-fun e!64345 () Bool)

(assert (=> d!26497 e!64345))

(declare-fun res!49649 () Bool)

(assert (=> d!26497 (=> (not res!49649) (not e!64345))))

(declare-fun lt!49651 () ListLongMap!1513)

(assert (=> d!26497 (= res!49649 (contains!796 lt!49651 (_1!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49649 () List!1586)

(assert (=> d!26497 (= lt!49651 (ListLongMap!1514 lt!49649))))

(declare-fun lt!49650 () Unit!2934)

(declare-fun lt!49648 () Unit!2934)

(assert (=> d!26497 (= lt!49650 lt!49648)))

(assert (=> d!26497 (= (getValueByKey!148 lt!49649 (_1!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26497 (= lt!49648 (lemmaContainsTupThenGetReturnValue!67 lt!49649 (_1!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26497 (= lt!49649 (insertStrictlySorted!70 (toList!772 lt!48938) (_1!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26497 (= (+!128 lt!48938 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49651)))

(declare-fun b!98756 () Bool)

(declare-fun res!49648 () Bool)

(assert (=> b!98756 (=> (not res!49648) (not e!64345))))

(assert (=> b!98756 (= res!49648 (= (getValueByKey!148 (toList!772 lt!49651) (_1!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98757 () Bool)

(assert (=> b!98757 (= e!64345 (contains!798 (toList!772 lt!49651) (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26497 res!49649) b!98756))

(assert (= (and b!98756 res!49648) b!98757))

(declare-fun m!108427 () Bool)

(assert (=> d!26497 m!108427))

(declare-fun m!108429 () Bool)

(assert (=> d!26497 m!108429))

(declare-fun m!108431 () Bool)

(assert (=> d!26497 m!108431))

(declare-fun m!108433 () Bool)

(assert (=> d!26497 m!108433))

(declare-fun m!108435 () Bool)

(assert (=> b!98756 m!108435))

(declare-fun m!108437 () Bool)

(assert (=> b!98757 m!108437))

(assert (=> b!97720 d!26497))

(declare-fun d!26499 () Bool)

(assert (=> d!26499 (= (apply!92 (+!128 lt!48935 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48933) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48935 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48933)))))

(declare-fun bs!4076 () Bool)

(assert (= bs!4076 d!26499))

(declare-fun m!108439 () Bool)

(assert (=> bs!4076 m!108439))

(assert (=> bs!4076 m!108439))

(declare-fun m!108441 () Bool)

(assert (=> bs!4076 m!108441))

(assert (=> b!97720 d!26499))

(declare-fun d!26501 () Bool)

(declare-fun e!64346 () Bool)

(assert (=> d!26501 e!64346))

(declare-fun res!49651 () Bool)

(assert (=> d!26501 (=> (not res!49651) (not e!64346))))

(declare-fun lt!49655 () ListLongMap!1513)

(assert (=> d!26501 (= res!49651 (contains!796 lt!49655 (_1!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(declare-fun lt!49653 () List!1586)

(assert (=> d!26501 (= lt!49655 (ListLongMap!1514 lt!49653))))

(declare-fun lt!49654 () Unit!2934)

(declare-fun lt!49652 () Unit!2934)

(assert (=> d!26501 (= lt!49654 lt!49652)))

(assert (=> d!26501 (= (getValueByKey!148 lt!49653 (_1!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26501 (= lt!49652 (lemmaContainsTupThenGetReturnValue!67 lt!49653 (_1!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26501 (= lt!49653 (insertStrictlySorted!70 (toList!772 lt!48925) (_1!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26501 (= (+!128 lt!48925 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!49655)))

(declare-fun b!98758 () Bool)

(declare-fun res!49650 () Bool)

(assert (=> b!98758 (=> (not res!49650) (not e!64346))))

(assert (=> b!98758 (= res!49650 (= (getValueByKey!148 (toList!772 lt!49655) (_1!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))))

(declare-fun b!98759 () Bool)

(assert (=> b!98759 (= e!64346 (contains!798 (toList!772 lt!49655) (tuple2!2327 lt!48940 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))

(assert (= (and d!26501 res!49651) b!98758))

(assert (= (and b!98758 res!49650) b!98759))

(declare-fun m!108443 () Bool)

(assert (=> d!26501 m!108443))

(declare-fun m!108445 () Bool)

(assert (=> d!26501 m!108445))

(declare-fun m!108447 () Bool)

(assert (=> d!26501 m!108447))

(declare-fun m!108449 () Bool)

(assert (=> d!26501 m!108449))

(declare-fun m!108451 () Bool)

(assert (=> b!98758 m!108451))

(declare-fun m!108453 () Bool)

(assert (=> b!98759 m!108453))

(assert (=> b!97720 d!26501))

(declare-fun d!26503 () Bool)

(assert (=> d!26503 (= (apply!92 lt!48932 lt!48924) (get!1288 (getValueByKey!148 (toList!772 lt!48932) lt!48924)))))

(declare-fun bs!4077 () Bool)

(assert (= bs!4077 d!26503))

(declare-fun m!108455 () Bool)

(assert (=> bs!4077 m!108455))

(assert (=> bs!4077 m!108455))

(declare-fun m!108457 () Bool)

(assert (=> bs!4077 m!108457))

(assert (=> b!97720 d!26503))

(declare-fun d!26505 () Bool)

(assert (=> d!26505 (= (apply!92 (+!128 lt!48938 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48934) (apply!92 lt!48938 lt!48934))))

(declare-fun lt!49656 () Unit!2934)

(assert (=> d!26505 (= lt!49656 (choose!596 lt!48938 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48934))))

(declare-fun e!64347 () Bool)

(assert (=> d!26505 e!64347))

(declare-fun res!49652 () Bool)

(assert (=> d!26505 (=> (not res!49652) (not e!64347))))

(assert (=> d!26505 (= res!49652 (contains!796 lt!48938 lt!48934))))

(assert (=> d!26505 (= (addApplyDifferent!68 lt!48938 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48934) lt!49656)))

(declare-fun b!98760 () Bool)

(assert (=> b!98760 (= e!64347 (not (= lt!48934 lt!48929)))))

(assert (= (and d!26505 res!49652) b!98760))

(declare-fun m!108459 () Bool)

(assert (=> d!26505 m!108459))

(declare-fun m!108461 () Bool)

(assert (=> d!26505 m!108461))

(assert (=> d!26505 m!106535))

(assert (=> d!26505 m!106535))

(assert (=> d!26505 m!106537))

(assert (=> d!26505 m!106541))

(assert (=> b!97720 d!26505))

(declare-fun d!26507 () Bool)

(declare-fun e!64348 () Bool)

(assert (=> d!26507 e!64348))

(declare-fun res!49654 () Bool)

(assert (=> d!26507 (=> (not res!49654) (not e!64348))))

(declare-fun lt!49660 () ListLongMap!1513)

(assert (=> d!26507 (= res!49654 (contains!796 lt!49660 (_1!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(declare-fun lt!49658 () List!1586)

(assert (=> d!26507 (= lt!49660 (ListLongMap!1514 lt!49658))))

(declare-fun lt!49659 () Unit!2934)

(declare-fun lt!49657 () Unit!2934)

(assert (=> d!26507 (= lt!49659 lt!49657)))

(assert (=> d!26507 (= (getValueByKey!148 lt!49658 (_1!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26507 (= lt!49657 (lemmaContainsTupThenGetReturnValue!67 lt!49658 (_1!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26507 (= lt!49658 (insertStrictlySorted!70 (toList!772 lt!48935) (_1!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26507 (= (+!128 lt!48935 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!49660)))

(declare-fun b!98761 () Bool)

(declare-fun res!49653 () Bool)

(assert (=> b!98761 (=> (not res!49653) (not e!64348))))

(assert (=> b!98761 (= res!49653 (= (getValueByKey!148 (toList!772 lt!49660) (_1!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!153 (_2!1174 (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))))

(declare-fun b!98762 () Bool)

(assert (=> b!98762 (= e!64348 (contains!798 (toList!772 lt!49660) (tuple2!2327 lt!48942 (ite (and c!16508 c!16499) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))

(assert (= (and d!26507 res!49654) b!98761))

(assert (= (and b!98761 res!49653) b!98762))

(declare-fun m!108463 () Bool)

(assert (=> d!26507 m!108463))

(declare-fun m!108465 () Bool)

(assert (=> d!26507 m!108465))

(declare-fun m!108467 () Bool)

(assert (=> d!26507 m!108467))

(declare-fun m!108469 () Bool)

(assert (=> d!26507 m!108469))

(declare-fun m!108471 () Bool)

(assert (=> b!98761 m!108471))

(declare-fun m!108473 () Bool)

(assert (=> b!98762 m!108473))

(assert (=> b!97720 d!26507))

(assert (=> b!97720 d!26251))

(declare-fun d!26509 () Bool)

(assert (=> d!26509 (= (apply!92 (+!128 lt!48938 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48934) (get!1288 (getValueByKey!148 (toList!772 (+!128 lt!48938 (tuple2!2327 lt!48929 (ite c!16508 (ite c!16499 (minValue!2363 newMap!16) (get!1285 (select (arr!2003 (_values!2463 (v!2791 (underlying!331 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!48934)))))

(declare-fun bs!4078 () Bool)

(assert (= bs!4078 d!26509))

(declare-fun m!108475 () Bool)

(assert (=> bs!4078 m!108475))

(assert (=> bs!4078 m!108475))

(declare-fun m!108477 () Bool)

(assert (=> bs!4078 m!108477))

(assert (=> b!97720 d!26509))

(declare-fun d!26511 () Bool)

(assert (=> d!26511 (isDefined!102 (getValueByKey!148 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!49661 () Unit!2934)

(assert (=> d!26511 (= lt!49661 (choose!601 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!64349 () Bool)

(assert (=> d!26511 e!64349))

(declare-fun res!49655 () Bool)

(assert (=> d!26511 (=> (not res!49655) (not e!64349))))

(assert (=> d!26511 (= res!49655 (isStrictlySorted!299 (toList!772 call!9918)))))

(assert (=> d!26511 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) lt!49661)))

(declare-fun b!98763 () Bool)

(assert (=> b!98763 (= e!64349 (containsKey!152 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26511 res!49655) b!98763))

(assert (=> d!26511 m!106105))

(assert (=> d!26511 m!106913))

(assert (=> d!26511 m!106913))

(assert (=> d!26511 m!106915))

(assert (=> d!26511 m!106105))

(declare-fun m!108479 () Bool)

(assert (=> d!26511 m!108479))

(declare-fun m!108481 () Bool)

(assert (=> d!26511 m!108481))

(assert (=> b!98763 m!106105))

(assert (=> b!98763 m!106909))

(assert (=> b!97965 d!26511))

(assert (=> b!97965 d!26215))

(assert (=> b!97965 d!26217))

(declare-fun d!26513 () Bool)

(declare-fun lt!49662 () Bool)

(assert (=> d!26513 (= lt!49662 (select (content!101 Nil!1584) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64350 () Bool)

(assert (=> d!26513 (= lt!49662 e!64350)))

(declare-fun res!49656 () Bool)

(assert (=> d!26513 (=> (not res!49656) (not e!64350))))

(assert (=> d!26513 (= res!49656 ((_ is Cons!1583) Nil!1584))))

(assert (=> d!26513 (= (contains!797 Nil!1584 (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)) lt!49662)))

(declare-fun b!98764 () Bool)

(declare-fun e!64351 () Bool)

(assert (=> b!98764 (= e!64350 e!64351)))

(declare-fun res!49657 () Bool)

(assert (=> b!98764 (=> res!49657 e!64351)))

(assert (=> b!98764 (= res!49657 (= (h!2177 Nil!1584) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98765 () Bool)

(assert (=> b!98765 (= e!64351 (contains!797 (t!5532 Nil!1584) (select (arr!2002 (_keys!4169 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26513 res!49656) b!98764))

(assert (= (and b!98764 (not res!49657)) b!98765))

(assert (=> d!26513 m!106799))

(assert (=> d!26513 m!106375))

(declare-fun m!108483 () Bool)

(assert (=> d!26513 m!108483))

(assert (=> b!98765 m!106375))

(declare-fun m!108485 () Bool)

(assert (=> b!98765 m!108485))

(assert (=> b!97931 d!26513))

(assert (=> b!97787 d!26471))

(declare-fun d!26515 () Bool)

(declare-fun res!49658 () Bool)

(declare-fun e!64352 () Bool)

(assert (=> d!26515 (=> res!49658 e!64352)))

(assert (=> d!26515 (= res!49658 (= (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!26515 (= (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!64352)))

(declare-fun b!98766 () Bool)

(declare-fun e!64353 () Bool)

(assert (=> b!98766 (= e!64352 e!64353)))

(declare-fun res!49659 () Bool)

(assert (=> b!98766 (=> (not res!49659) (not e!64353))))

(assert (=> b!98766 (= res!49659 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98767 () Bool)

(assert (=> b!98767 (= e!64353 (arrayContainsKey!0 (_keys!4169 (v!2791 (underlying!331 thiss!992))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26515 (not res!49658)) b!98766))

(assert (= (and b!98766 res!49659) b!98767))

(declare-fun m!108487 () Bool)

(assert (=> d!26515 m!108487))

(assert (=> b!98767 m!106105))

(declare-fun m!108489 () Bool)

(assert (=> b!98767 m!108489))

(assert (=> b!97706 d!26515))

(declare-fun d!26517 () Bool)

(assert (=> d!26517 (contains!796 (getCurrentListMap!453 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))

(declare-fun lt!49665 () Unit!2934)

(declare-fun choose!607 (array!4217 array!4219 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2934)

(assert (=> d!26517 (= lt!49665 (choose!607 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26517 (validMask!0 (mask!6576 newMap!16))))

(assert (=> d!26517 (= (lemmaArrayContainsKeyThenInListMap!25 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49665)))

(declare-fun bs!4079 () Bool)

(assert (= bs!4079 d!26517))

(assert (=> bs!4079 m!106217))

(assert (=> bs!4079 m!106217))

(assert (=> bs!4079 m!106105))

(assert (=> bs!4079 m!106825))

(assert (=> bs!4079 m!106105))

(declare-fun m!108491 () Bool)

(assert (=> bs!4079 m!108491))

(assert (=> bs!4079 m!106427))

(assert (=> b!97921 d!26517))

(assert (=> b!97921 d!26301))

(assert (=> b!97921 d!25911))

(declare-fun d!26519 () Bool)

(declare-fun e!64354 () Bool)

(assert (=> d!26519 e!64354))

(declare-fun res!49661 () Bool)

(assert (=> d!26519 (=> (not res!49661) (not e!64354))))

(declare-fun lt!49669 () ListLongMap!1513)

(assert (=> d!26519 (= res!49661 (contains!796 lt!49669 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun lt!49667 () List!1586)

(assert (=> d!26519 (= lt!49669 (ListLongMap!1514 lt!49667))))

(declare-fun lt!49668 () Unit!2934)

(declare-fun lt!49666 () Unit!2934)

(assert (=> d!26519 (= lt!49668 lt!49666)))

(assert (=> d!26519 (= (getValueByKey!148 lt!49667 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26519 (= lt!49666 (lemmaContainsTupThenGetReturnValue!67 lt!49667 (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26519 (= lt!49667 (insertStrictlySorted!70 (toList!772 call!9957) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26519 (= (+!128 call!9957 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) lt!49669)))

(declare-fun b!98768 () Bool)

(declare-fun res!49660 () Bool)

(assert (=> b!98768 (=> (not res!49660) (not e!64354))))

(assert (=> b!98768 (= res!49660 (= (getValueByKey!148 (toList!772 lt!49669) (_1!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!153 (_2!1174 (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun b!98769 () Bool)

(assert (=> b!98769 (= e!64354 (contains!798 (toList!772 lt!49669) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(assert (= (and d!26519 res!49661) b!98768))

(assert (= (and b!98768 res!49660) b!98769))

(declare-fun m!108493 () Bool)

(assert (=> d!26519 m!108493))

(declare-fun m!108495 () Bool)

(assert (=> d!26519 m!108495))

(declare-fun m!108497 () Bool)

(assert (=> d!26519 m!108497))

(declare-fun m!108499 () Bool)

(assert (=> d!26519 m!108499))

(declare-fun m!108501 () Bool)

(assert (=> b!98768 m!108501))

(declare-fun m!108503 () Bool)

(assert (=> b!98769 m!108503))

(assert (=> b!97652 d!26519))

(declare-fun d!26521 () Bool)

(declare-fun e!64355 () Bool)

(assert (=> d!26521 e!64355))

(declare-fun res!49662 () Bool)

(assert (=> d!26521 (=> res!49662 e!64355)))

(declare-fun lt!49671 () Bool)

(assert (=> d!26521 (= res!49662 (not lt!49671))))

(declare-fun lt!49672 () Bool)

(assert (=> d!26521 (= lt!49671 lt!49672)))

(declare-fun lt!49670 () Unit!2934)

(declare-fun e!64356 () Unit!2934)

(assert (=> d!26521 (= lt!49670 e!64356)))

(declare-fun c!16830 () Bool)

(assert (=> d!26521 (= c!16830 lt!49672)))

(assert (=> d!26521 (= lt!49672 (containsKey!152 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> d!26521 (= (contains!796 lt!48982 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49671)))

(declare-fun b!98770 () Bool)

(declare-fun lt!49673 () Unit!2934)

(assert (=> b!98770 (= e!64356 lt!49673)))

(assert (=> b!98770 (= lt!49673 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (=> b!98770 (isDefined!102 (getValueByKey!148 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98771 () Bool)

(declare-fun Unit!2997 () Unit!2934)

(assert (=> b!98771 (= e!64356 Unit!2997)))

(declare-fun b!98772 () Bool)

(assert (=> b!98772 (= e!64355 (isDefined!102 (getValueByKey!148 (toList!772 lt!48982) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26521 c!16830) b!98770))

(assert (= (and d!26521 (not c!16830)) b!98771))

(assert (= (and d!26521 (not res!49662)) b!98772))

(declare-fun m!108505 () Bool)

(assert (=> d!26521 m!108505))

(declare-fun m!108507 () Bool)

(assert (=> b!98770 m!108507))

(assert (=> b!98770 m!106649))

(assert (=> b!98770 m!106649))

(declare-fun m!108509 () Bool)

(assert (=> b!98770 m!108509))

(assert (=> b!98772 m!106649))

(assert (=> b!98772 m!106649))

(assert (=> b!98772 m!108509))

(assert (=> d!25951 d!26521))

(declare-fun b!98774 () Bool)

(declare-fun e!64357 () Option!154)

(declare-fun e!64358 () Option!154)

(assert (=> b!98774 (= e!64357 e!64358)))

(declare-fun c!16832 () Bool)

(assert (=> b!98774 (= c!16832 (and ((_ is Cons!1582) lt!48980) (not (= (_1!1174 (h!2176 lt!48980)) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun b!98775 () Bool)

(assert (=> b!98775 (= e!64358 (getValueByKey!148 (t!5531 lt!48980) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98773 () Bool)

(assert (=> b!98773 (= e!64357 (Some!153 (_2!1174 (h!2176 lt!48980))))))

(declare-fun d!26523 () Bool)

(declare-fun c!16831 () Bool)

(assert (=> d!26523 (= c!16831 (and ((_ is Cons!1582) lt!48980) (= (_1!1174 (h!2176 lt!48980)) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26523 (= (getValueByKey!148 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) e!64357)))

(declare-fun b!98776 () Bool)

(assert (=> b!98776 (= e!64358 None!152)))

(assert (= (and d!26523 c!16831) b!98773))

(assert (= (and d!26523 (not c!16831)) b!98774))

(assert (= (and b!98774 c!16832) b!98775))

(assert (= (and b!98774 (not c!16832)) b!98776))

(declare-fun m!108511 () Bool)

(assert (=> b!98775 m!108511))

(assert (=> d!25951 d!26523))

(declare-fun d!26525 () Bool)

(assert (=> d!26525 (= (getValueByKey!148 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) (Some!153 (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun lt!49674 () Unit!2934)

(assert (=> d!26525 (= lt!49674 (choose!604 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun e!64359 () Bool)

(assert (=> d!26525 e!64359))

(declare-fun res!49663 () Bool)

(assert (=> d!26525 (=> (not res!49663) (not e!64359))))

(assert (=> d!26525 (= res!49663 (isStrictlySorted!299 lt!48980))))

(assert (=> d!26525 (= (lemmaContainsTupThenGetReturnValue!67 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49674)))

(declare-fun b!98777 () Bool)

(declare-fun res!49664 () Bool)

(assert (=> b!98777 (=> (not res!49664) (not e!64359))))

(assert (=> b!98777 (= res!49664 (containsKey!152 lt!48980 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98778 () Bool)

(assert (=> b!98778 (= e!64359 (contains!798 lt!48980 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (= (and d!26525 res!49663) b!98777))

(assert (= (and b!98777 res!49664) b!98778))

(assert (=> d!26525 m!106643))

(declare-fun m!108513 () Bool)

(assert (=> d!26525 m!108513))

(declare-fun m!108515 () Bool)

(assert (=> d!26525 m!108515))

(declare-fun m!108517 () Bool)

(assert (=> b!98777 m!108517))

(declare-fun m!108519 () Bool)

(assert (=> b!98778 m!108519))

(assert (=> d!25951 d!26525))

(declare-fun bm!10090 () Bool)

(declare-fun call!10095 () List!1586)

(declare-fun call!10094 () List!1586)

(assert (=> bm!10090 (= call!10095 call!10094)))

(declare-fun b!98780 () Bool)

(declare-fun e!64360 () List!1586)

(assert (=> b!98780 (= e!64360 call!10095)))

(declare-fun b!98781 () Bool)

(declare-fun c!16834 () Bool)

(assert (=> b!98781 (= c!16834 (and ((_ is Cons!1582) (toList!772 lt!48736)) (bvsgt (_1!1174 (h!2176 (toList!772 lt!48736))) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun e!64364 () List!1586)

(assert (=> b!98781 (= e!64364 e!64360)))

(declare-fun bm!10091 () Bool)

(declare-fun call!10093 () List!1586)

(assert (=> bm!10091 (= call!10094 call!10093)))

(declare-fun e!64361 () List!1586)

(declare-fun c!16835 () Bool)

(declare-fun bm!10092 () Bool)

(assert (=> bm!10092 (= call!10093 ($colon$colon!77 e!64361 (ite c!16835 (h!2176 (toList!772 lt!48736)) (tuple2!2327 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(declare-fun c!16836 () Bool)

(assert (=> bm!10092 (= c!16836 c!16835)))

(declare-fun b!98782 () Bool)

(assert (=> b!98782 (= e!64364 call!10094)))

(declare-fun b!98783 () Bool)

(declare-fun e!64362 () List!1586)

(assert (=> b!98783 (= e!64362 e!64364)))

(declare-fun c!16833 () Bool)

(assert (=> b!98783 (= c!16833 (and ((_ is Cons!1582) (toList!772 lt!48736)) (= (_1!1174 (h!2176 (toList!772 lt!48736))) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98784 () Bool)

(assert (=> b!98784 (= e!64362 call!10093)))

(declare-fun b!98785 () Bool)

(declare-fun res!49666 () Bool)

(declare-fun e!64363 () Bool)

(assert (=> b!98785 (=> (not res!49666) (not e!64363))))

(declare-fun lt!49675 () List!1586)

(assert (=> b!98785 (= res!49666 (containsKey!152 lt!49675 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(declare-fun b!98786 () Bool)

(assert (=> b!98786 (= e!64363 (contains!798 lt!49675 (tuple2!2327 (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun d!26527 () Bool)

(assert (=> d!26527 e!64363))

(declare-fun res!49665 () Bool)

(assert (=> d!26527 (=> (not res!49665) (not e!64363))))

(assert (=> d!26527 (= res!49665 (isStrictlySorted!299 lt!49675))))

(assert (=> d!26527 (= lt!49675 e!64362)))

(assert (=> d!26527 (= c!16835 (and ((_ is Cons!1582) (toList!772 lt!48736)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48736))) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(assert (=> d!26527 (isStrictlySorted!299 (toList!772 lt!48736))))

(assert (=> d!26527 (= (insertStrictlySorted!70 (toList!772 lt!48736) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))) lt!49675)))

(declare-fun b!98779 () Bool)

(assert (=> b!98779 (= e!64361 (ite c!16833 (t!5531 (toList!772 lt!48736)) (ite c!16834 (Cons!1582 (h!2176 (toList!772 lt!48736)) (t!5531 (toList!772 lt!48736))) Nil!1583)))))

(declare-fun b!98787 () Bool)

(assert (=> b!98787 (= e!64360 call!10095)))

(declare-fun b!98788 () Bool)

(assert (=> b!98788 (= e!64361 (insertStrictlySorted!70 (t!5531 (toList!772 lt!48736)) (_1!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992))))) (_2!1174 (tuple2!2327 lt!48751 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))))))))

(assert (= (and d!26527 c!16835) b!98784))

(assert (= (and d!26527 (not c!16835)) b!98783))

(assert (= (and b!98783 c!16833) b!98782))

(assert (= (and b!98783 (not c!16833)) b!98781))

(assert (= (and b!98781 c!16834) b!98780))

(assert (= (and b!98781 (not c!16834)) b!98787))

(assert (= (or b!98780 b!98787) bm!10090))

(assert (= (or b!98782 bm!10090) bm!10091))

(assert (= (or b!98784 bm!10091) bm!10092))

(assert (= (and bm!10092 c!16836) b!98788))

(assert (= (and bm!10092 (not c!16836)) b!98779))

(assert (= (and d!26527 res!49665) b!98785))

(assert (= (and b!98785 res!49666) b!98786))

(declare-fun m!108521 () Bool)

(assert (=> b!98785 m!108521))

(declare-fun m!108523 () Bool)

(assert (=> b!98786 m!108523))

(declare-fun m!108525 () Bool)

(assert (=> bm!10092 m!108525))

(declare-fun m!108527 () Bool)

(assert (=> d!26527 m!108527))

(declare-fun m!108529 () Bool)

(assert (=> d!26527 m!108529))

(declare-fun m!108531 () Bool)

(assert (=> b!98788 m!108531))

(assert (=> d!25951 d!26527))

(declare-fun b!98790 () Bool)

(declare-fun e!64365 () Option!154)

(declare-fun e!64366 () Option!154)

(assert (=> b!98790 (= e!64365 e!64366)))

(declare-fun c!16838 () Bool)

(assert (=> b!98790 (= c!16838 (and ((_ is Cons!1582) (toList!772 lt!48921)) (not (= (_1!1174 (h!2176 (toList!772 lt!48921))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))))

(declare-fun b!98791 () Bool)

(assert (=> b!98791 (= e!64366 (getValueByKey!148 (t!5531 (toList!772 lt!48921)) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))))

(declare-fun b!98789 () Bool)

(assert (=> b!98789 (= e!64365 (Some!153 (_2!1174 (h!2176 (toList!772 lt!48921)))))))

(declare-fun c!16837 () Bool)

(declare-fun d!26529 () Bool)

(assert (=> d!26529 (= c!16837 (and ((_ is Cons!1582) (toList!772 lt!48921)) (= (_1!1174 (h!2176 (toList!772 lt!48921))) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992)))))))))))

(assert (=> d!26529 (= (getValueByKey!148 (toList!772 lt!48921) (_1!1174 (ite (or c!16461 c!16460) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2791 (underlying!331 thiss!992)))) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))) e!64365)))

(declare-fun b!98792 () Bool)

(assert (=> b!98792 (= e!64366 None!152)))

(assert (= (and d!26529 c!16837) b!98789))

(assert (= (and d!26529 (not c!16837)) b!98790))

(assert (= (and b!98790 c!16838) b!98791))

(assert (= (and b!98790 (not c!16838)) b!98792))

(declare-fun m!108533 () Bool)

(assert (=> b!98791 m!108533))

(assert (=> b!97703 d!26529))

(declare-fun bm!10093 () Bool)

(declare-fun call!10096 () (_ BitVec 32))

(assert (=> bm!10093 (= call!10096 (arrayCountValidKeys!0 (_keys!4169 (_2!1175 lt!48824)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(declare-fun b!98793 () Bool)

(declare-fun e!64367 () (_ BitVec 32))

(assert (=> b!98793 (= e!64367 call!10096)))

(declare-fun b!98794 () Bool)

(declare-fun e!64368 () (_ BitVec 32))

(assert (=> b!98794 (= e!64368 #b00000000000000000000000000000000)))

(declare-fun b!98795 () Bool)

(assert (=> b!98795 (= e!64367 (bvadd #b00000000000000000000000000000001 call!10096))))

(declare-fun b!98796 () Bool)

(assert (=> b!98796 (= e!64368 e!64367)))

(declare-fun c!16840 () Bool)

(assert (=> b!98796 (= c!16840 (validKeyInArray!0 (select (arr!2002 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(declare-fun d!26531 () Bool)

(declare-fun lt!49676 () (_ BitVec 32))

(assert (=> d!26531 (and (bvsge lt!49676 #b00000000000000000000000000000000) (bvsle lt!49676 (bvsub (size!2253 (_keys!4169 (_2!1175 lt!48824))) #b00000000000000000000000000000000)))))

(assert (=> d!26531 (= lt!49676 e!64368)))

(declare-fun c!16839 () Bool)

(assert (=> d!26531 (= c!16839 (bvsge #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (=> d!26531 (and (bvsle #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2253 (_keys!4169 (_2!1175 lt!48824))) (size!2253 (_keys!4169 (_2!1175 lt!48824)))))))

(assert (=> d!26531 (= (arrayCountValidKeys!0 (_keys!4169 (_2!1175 lt!48824)) #b00000000000000000000000000000000 (size!2253 (_keys!4169 (_2!1175 lt!48824)))) lt!49676)))

(assert (= (and d!26531 c!16839) b!98794))

(assert (= (and d!26531 (not c!16839)) b!98796))

(assert (= (and b!98796 c!16840) b!98795))

(assert (= (and b!98796 (not c!16840)) b!98793))

(assert (= (or b!98795 b!98793) bm!10093))

(declare-fun m!108535 () Bool)

(assert (=> bm!10093 m!108535))

(assert (=> b!98796 m!107107))

(assert (=> b!98796 m!107107))

(assert (=> b!98796 m!107109))

(assert (=> b!97628 d!26531))

(assert (=> d!25987 d!25921))

(declare-fun d!26533 () Bool)

(declare-fun e!64371 () Bool)

(assert (=> d!26533 e!64371))

(declare-fun res!49671 () Bool)

(assert (=> d!26533 (=> (not res!49671) (not e!64371))))

(declare-fun lt!49679 () SeekEntryResult!256)

(assert (=> d!26533 (= res!49671 ((_ is Found!256) lt!49679))))

(assert (=> d!26533 (= lt!49679 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (=> d!26533 true))

(declare-fun _$33!81 () Unit!2934)

(assert (=> d!26533 (= (choose!598 (_keys!4169 newMap!16) (_values!2463 newMap!16) (mask!6576 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) _$33!81)))

(declare-fun b!98801 () Bool)

(declare-fun res!49672 () Bool)

(assert (=> b!98801 (=> (not res!49672) (not e!64371))))

(assert (=> b!98801 (= res!49672 (inRange!0 (index!3168 lt!49679) (mask!6576 newMap!16)))))

(declare-fun b!98802 () Bool)

(assert (=> b!98802 (= e!64371 (= (select (arr!2002 (_keys!4169 newMap!16)) (index!3168 lt!49679)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26533 res!49671) b!98801))

(assert (= (and b!98801 res!49672) b!98802))

(assert (=> d!26533 m!106105))

(assert (=> d!26533 m!106297))

(declare-fun m!108537 () Bool)

(assert (=> b!98801 m!108537))

(declare-fun m!108539 () Bool)

(assert (=> b!98802 m!108539))

(assert (=> d!25987 d!26533))

(assert (=> d!25987 d!26053))

(declare-fun d!26535 () Bool)

(declare-fun e!64372 () Bool)

(assert (=> d!26535 e!64372))

(declare-fun res!49674 () Bool)

(assert (=> d!26535 (=> (not res!49674) (not e!64372))))

(declare-fun lt!49683 () ListLongMap!1513)

(assert (=> d!26535 (= res!49674 (contains!796 lt!49683 (_1!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun lt!49681 () List!1586)

(assert (=> d!26535 (= lt!49683 (ListLongMap!1514 lt!49681))))

(declare-fun lt!49682 () Unit!2934)

(declare-fun lt!49680 () Unit!2934)

(assert (=> d!26535 (= lt!49682 lt!49680)))

(assert (=> d!26535 (= (getValueByKey!148 lt!49681 (_1!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26535 (= lt!49680 (lemmaContainsTupThenGetReturnValue!67 lt!49681 (_1!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26535 (= lt!49681 (insertStrictlySorted!70 (toList!772 (ite c!16521 call!9945 (ite c!16520 call!9946 call!9951))) (_1!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26535 (= (+!128 (ite c!16521 call!9945 (ite c!16520 call!9946 call!9951)) (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) lt!49683)))

(declare-fun b!98803 () Bool)

(declare-fun res!49673 () Bool)

(assert (=> b!98803 (=> (not res!49673) (not e!64372))))

(assert (=> b!98803 (= res!49673 (= (getValueByKey!148 (toList!772 lt!49683) (_1!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!153 (_2!1174 (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))))

(declare-fun b!98804 () Bool)

(assert (=> b!98804 (= e!64372 (contains!798 (toList!772 lt!49683) (ite (or c!16521 c!16520) (tuple2!2327 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2327 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (= (and d!26535 res!49674) b!98803))

(assert (= (and b!98803 res!49673) b!98804))

(declare-fun m!108541 () Bool)

(assert (=> d!26535 m!108541))

(declare-fun m!108543 () Bool)

(assert (=> d!26535 m!108543))

(declare-fun m!108545 () Bool)

(assert (=> d!26535 m!108545))

(declare-fun m!108547 () Bool)

(assert (=> d!26535 m!108547))

(declare-fun m!108549 () Bool)

(assert (=> b!98803 m!108549))

(declare-fun m!108551 () Bool)

(assert (=> b!98804 m!108551))

(assert (=> bm!9945 d!26535))

(declare-fun d!26537 () Bool)

(assert (=> d!26537 (= (apply!92 lt!48971 (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1288 (getValueByKey!148 (toList!772 lt!48971) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4080 () Bool)

(assert (= bs!4080 d!26537))

(assert (=> bs!4080 m!106219))

(assert (=> bs!4080 m!107909))

(assert (=> bs!4080 m!107909))

(declare-fun m!108553 () Bool)

(assert (=> bs!4080 m!108553))

(assert (=> b!97783 d!26537))

(assert (=> b!97783 d!25919))

(declare-fun d!26539 () Bool)

(assert (not d!26539))

(assert (=> b!97870 d!26539))

(declare-fun d!26541 () Bool)

(declare-fun res!49676 () Bool)

(declare-fun e!64374 () Bool)

(assert (=> d!26541 (=> res!49676 e!64374)))

(assert (=> d!26541 (= res!49676 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2253 (_keys!4169 newMap!16))))))

(assert (=> d!26541 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4169 newMap!16) (mask!6576 newMap!16)) e!64374)))

(declare-fun b!98805 () Bool)

(declare-fun e!64373 () Bool)

(assert (=> b!98805 (= e!64374 e!64373)))

(declare-fun c!16841 () Bool)

(assert (=> b!98805 (= c!16841 (validKeyInArray!0 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98806 () Bool)

(declare-fun e!64375 () Bool)

(assert (=> b!98806 (= e!64373 e!64375)))

(declare-fun lt!49685 () (_ BitVec 64))

(assert (=> b!98806 (= lt!49685 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!49686 () Unit!2934)

(assert (=> b!98806 (= lt!49686 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4169 newMap!16) lt!49685 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!98806 (arrayContainsKey!0 (_keys!4169 newMap!16) lt!49685 #b00000000000000000000000000000000)))

(declare-fun lt!49684 () Unit!2934)

(assert (=> b!98806 (= lt!49684 lt!49686)))

(declare-fun res!49675 () Bool)

(assert (=> b!98806 (= res!49675 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4169 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4169 newMap!16) (mask!6576 newMap!16)) (Found!256 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!98806 (=> (not res!49675) (not e!64375))))

(declare-fun b!98807 () Bool)

(declare-fun call!10097 () Bool)

(assert (=> b!98807 (= e!64373 call!10097)))

(declare-fun b!98808 () Bool)

(assert (=> b!98808 (= e!64375 call!10097)))

(declare-fun bm!10094 () Bool)

(assert (=> bm!10094 (= call!10097 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4169 newMap!16) (mask!6576 newMap!16)))))

(assert (= (and d!26541 (not res!49676)) b!98805))

(assert (= (and b!98805 c!16841) b!98806))

(assert (= (and b!98805 (not c!16841)) b!98807))

(assert (= (and b!98806 res!49675) b!98808))

(assert (= (or b!98808 b!98807) bm!10094))

(assert (=> b!98805 m!107033))

(assert (=> b!98805 m!107033))

(assert (=> b!98805 m!107035))

(assert (=> b!98806 m!107033))

(declare-fun m!108555 () Bool)

(assert (=> b!98806 m!108555))

(declare-fun m!108557 () Bool)

(assert (=> b!98806 m!108557))

(assert (=> b!98806 m!107033))

(declare-fun m!108559 () Bool)

(assert (=> b!98806 m!108559))

(declare-fun m!108561 () Bool)

(assert (=> bm!10094 m!108561))

(assert (=> bm!9974 d!26541))

(declare-fun d!26543 () Bool)

(declare-fun lt!49687 () Bool)

(assert (=> d!26543 (= lt!49687 (select (content!102 (toList!772 lt!48997)) (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun e!64376 () Bool)

(assert (=> d!26543 (= lt!49687 e!64376)))

(declare-fun res!49678 () Bool)

(assert (=> d!26543 (=> (not res!49678) (not e!64376))))

(assert (=> d!26543 (= res!49678 ((_ is Cons!1582) (toList!772 lt!48997)))))

(assert (=> d!26543 (= (contains!798 (toList!772 lt!48997) (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))) lt!49687)))

(declare-fun b!98809 () Bool)

(declare-fun e!64377 () Bool)

(assert (=> b!98809 (= e!64376 e!64377)))

(declare-fun res!49677 () Bool)

(assert (=> b!98809 (=> res!49677 e!64377)))

(assert (=> b!98809 (= res!49677 (= (h!2176 (toList!772 lt!48997)) (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(declare-fun b!98810 () Bool)

(assert (=> b!98810 (= e!64377 (contains!798 (t!5531 (toList!772 lt!48997)) (tuple2!2327 lt!48734 (minValue!2363 (v!2791 (underlying!331 thiss!992))))))))

(assert (= (and d!26543 res!49678) b!98809))

(assert (= (and b!98809 (not res!49677)) b!98810))

(declare-fun m!108563 () Bool)

(assert (=> d!26543 m!108563))

(declare-fun m!108565 () Bool)

(assert (=> d!26543 m!108565))

(declare-fun m!108567 () Bool)

(assert (=> b!98810 m!108567))

(assert (=> b!97804 d!26543))

(declare-fun d!26545 () Bool)

(declare-fun res!49679 () Bool)

(declare-fun e!64378 () Bool)

(assert (=> d!26545 (=> res!49679 e!64378)))

(assert (=> d!26545 (= res!49679 (and ((_ is Cons!1582) (toList!772 call!9918)) (= (_1!1174 (h!2176 (toList!772 call!9918))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26545 (= (containsKey!152 (toList!772 call!9918) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!64378)))

(declare-fun b!98811 () Bool)

(declare-fun e!64379 () Bool)

(assert (=> b!98811 (= e!64378 e!64379)))

(declare-fun res!49680 () Bool)

(assert (=> b!98811 (=> (not res!49680) (not e!64379))))

(assert (=> b!98811 (= res!49680 (and (or (not ((_ is Cons!1582) (toList!772 call!9918))) (bvsle (_1!1174 (h!2176 (toList!772 call!9918))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1582) (toList!772 call!9918)) (bvslt (_1!1174 (h!2176 (toList!772 call!9918))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!98812 () Bool)

(assert (=> b!98812 (= e!64379 (containsKey!152 (t!5531 (toList!772 call!9918)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26545 (not res!49679)) b!98811))

(assert (= (and b!98811 res!49680) b!98812))

(assert (=> b!98812 m!106105))

(declare-fun m!108569 () Bool)

(assert (=> b!98812 m!108569))

(assert (=> d!26033 d!26545))

(declare-fun d!26547 () Bool)

(declare-fun res!49681 () Bool)

(declare-fun e!64380 () Bool)

(assert (=> d!26547 (=> res!49681 e!64380)))

(assert (=> d!26547 (= res!49681 (and ((_ is Cons!1582) (toList!772 e!63619)) (= (_1!1174 (h!2176 (toList!772 e!63619))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!26547 (= (containsKey!152 (toList!772 e!63619) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)) e!64380)))

(declare-fun b!98813 () Bool)

(declare-fun e!64381 () Bool)

(assert (=> b!98813 (= e!64380 e!64381)))

(declare-fun res!49682 () Bool)

(assert (=> b!98813 (=> (not res!49682) (not e!64381))))

(assert (=> b!98813 (= res!49682 (and (or (not ((_ is Cons!1582) (toList!772 e!63619))) (bvsle (_1!1174 (h!2176 (toList!772 e!63619))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1582) (toList!772 e!63619)) (bvslt (_1!1174 (h!2176 (toList!772 e!63619))) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!98814 () Bool)

(assert (=> b!98814 (= e!64381 (containsKey!152 (t!5531 (toList!772 e!63619)) (select (arr!2002 (_keys!4169 (v!2791 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!26547 (not res!49681)) b!98813))

(assert (= (and b!98813 res!49682) b!98814))

(assert (=> b!98814 m!106105))

(declare-fun m!108571 () Bool)

(assert (=> b!98814 m!108571))

(assert (=> d!26035 d!26547))

(declare-fun d!26549 () Bool)

(declare-fun res!49683 () Bool)

(declare-fun e!64382 () Bool)

(assert (=> d!26549 (=> res!49683 e!64382)))

(assert (=> d!26549 (= res!49683 (and ((_ is Cons!1582) (toList!772 lt!48747)) (= (_1!1174 (h!2176 (toList!772 lt!48747))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26549 (= (containsKey!152 (toList!772 lt!48747) #b1000000000000000000000000000000000000000000000000000000000000000) e!64382)))

(declare-fun b!98815 () Bool)

(declare-fun e!64383 () Bool)

(assert (=> b!98815 (= e!64382 e!64383)))

(declare-fun res!49684 () Bool)

(assert (=> b!98815 (=> (not res!49684) (not e!64383))))

(assert (=> b!98815 (= res!49684 (and (or (not ((_ is Cons!1582) (toList!772 lt!48747))) (bvsle (_1!1174 (h!2176 (toList!772 lt!48747))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1582) (toList!772 lt!48747)) (bvslt (_1!1174 (h!2176 (toList!772 lt!48747))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98816 () Bool)

(assert (=> b!98816 (= e!64383 (containsKey!152 (t!5531 (toList!772 lt!48747)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26549 (not res!49683)) b!98815))

(assert (= (and b!98815 res!49684) b!98816))

(declare-fun m!108573 () Bool)

(assert (=> b!98816 m!108573))

(assert (=> d!26029 d!26549))

(assert (=> b!97833 d!26045))

(assert (=> d!25929 d!26053))

(declare-fun d!26551 () Bool)

(assert (=> d!26551 (= (content!101 Nil!1584) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26007 d!26551))

(declare-fun mapIsEmpty!3759 () Bool)

(declare-fun mapRes!3759 () Bool)

(assert (=> mapIsEmpty!3759 mapRes!3759))

(declare-fun b!98817 () Bool)

(declare-fun e!64385 () Bool)

(assert (=> b!98817 (= e!64385 tp_is_empty!2629)))

(declare-fun condMapEmpty!3759 () Bool)

(declare-fun mapDefault!3759 () ValueCell!971)

(assert (=> mapNonEmpty!3757 (= condMapEmpty!3759 (= mapRest!3757 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3759)))))

(declare-fun e!64384 () Bool)

(assert (=> mapNonEmpty!3757 (= tp!9589 (and e!64384 mapRes!3759))))

(declare-fun b!98818 () Bool)

(assert (=> b!98818 (= e!64384 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3759 () Bool)

(declare-fun tp!9591 () Bool)

(assert (=> mapNonEmpty!3759 (= mapRes!3759 (and tp!9591 e!64385))))

(declare-fun mapRest!3759 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3759 () ValueCell!971)

(declare-fun mapKey!3759 () (_ BitVec 32))

(assert (=> mapNonEmpty!3759 (= mapRest!3757 (store mapRest!3759 mapKey!3759 mapValue!3759))))

(assert (= (and mapNonEmpty!3757 condMapEmpty!3759) mapIsEmpty!3759))

(assert (= (and mapNonEmpty!3757 (not condMapEmpty!3759)) mapNonEmpty!3759))

(assert (= (and mapNonEmpty!3759 ((_ is ValueCellFull!971) mapValue!3759)) b!98817))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!971) mapDefault!3759)) b!98818))

(declare-fun m!108575 () Bool)

(assert (=> mapNonEmpty!3759 m!108575))

(declare-fun mapIsEmpty!3760 () Bool)

(declare-fun mapRes!3760 () Bool)

(assert (=> mapIsEmpty!3760 mapRes!3760))

(declare-fun b!98819 () Bool)

(declare-fun e!64387 () Bool)

(assert (=> b!98819 (= e!64387 tp_is_empty!2629)))

(declare-fun condMapEmpty!3760 () Bool)

(declare-fun mapDefault!3760 () ValueCell!971)

(assert (=> mapNonEmpty!3758 (= condMapEmpty!3760 (= mapRest!3758 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3760)))))

(declare-fun e!64386 () Bool)

(assert (=> mapNonEmpty!3758 (= tp!9590 (and e!64386 mapRes!3760))))

(declare-fun b!98820 () Bool)

(assert (=> b!98820 (= e!64386 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3760 () Bool)

(declare-fun tp!9592 () Bool)

(assert (=> mapNonEmpty!3760 (= mapRes!3760 (and tp!9592 e!64387))))

(declare-fun mapValue!3760 () ValueCell!971)

(declare-fun mapRest!3760 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapKey!3760 () (_ BitVec 32))

(assert (=> mapNonEmpty!3760 (= mapRest!3758 (store mapRest!3760 mapKey!3760 mapValue!3760))))

(assert (= (and mapNonEmpty!3758 condMapEmpty!3760) mapIsEmpty!3760))

(assert (= (and mapNonEmpty!3758 (not condMapEmpty!3760)) mapNonEmpty!3760))

(assert (= (and mapNonEmpty!3760 ((_ is ValueCellFull!971) mapValue!3760)) b!98819))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!971) mapDefault!3760)) b!98820))

(declare-fun m!108577 () Bool)

(assert (=> mapNonEmpty!3760 m!108577))

(declare-fun b_lambda!4379 () Bool)

(assert (= b_lambda!4353 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4379)))

(declare-fun b_lambda!4381 () Bool)

(assert (= b_lambda!4373 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4381)))

(declare-fun b_lambda!4383 () Bool)

(assert (= b_lambda!4377 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4383)))

(declare-fun b_lambda!4385 () Bool)

(assert (= b_lambda!4365 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4385)))

(declare-fun b_lambda!4387 () Bool)

(assert (= b_lambda!4375 (or (and b!97245 b_free!2425) (and b!97251 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))))) b_lambda!4387)))

(declare-fun b_lambda!4389 () Bool)

(assert (= b_lambda!4349 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4389)))

(declare-fun b_lambda!4391 () Bool)

(assert (= b_lambda!4371 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4391)))

(declare-fun b_lambda!4393 () Bool)

(assert (= b_lambda!4357 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4393)))

(declare-fun b_lambda!4395 () Bool)

(assert (= b_lambda!4359 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4395)))

(declare-fun b_lambda!4397 () Bool)

(assert (= b_lambda!4351 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4397)))

(declare-fun b_lambda!4399 () Bool)

(assert (= b_lambda!4361 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4399)))

(declare-fun b_lambda!4401 () Bool)

(assert (= b_lambda!4355 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4401)))

(declare-fun b_lambda!4403 () Bool)

(assert (= b_lambda!4363 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4403)))

(declare-fun b_lambda!4405 () Bool)

(assert (= b_lambda!4367 (or (and b!97245 b_free!2425 (= (defaultEntry!2480 (v!2791 (underlying!331 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97251 b_free!2427) b_lambda!4405)))

(check-sat (not b!98575) (not b!98287) (not d!26465) (not bm!10024) (not bm!10070) (not b!98033) (not b!98253) (not d!26229) (not b!97987) (not b_lambda!4379) (not bm!10054) (not b!98454) (not b!98625) (not b!98758) (not d!26209) (not d!26295) (not b!98718) (not b!98715) (not d!26309) (not b!97986) (not d!26041) (not b!98231) (not b_lambda!4387) (not bm!10028) (not bm!10093) (not b!98205) (not b!98499) (not bm!10038) (not d!26111) (not b!98729) (not b!98258) (not b!98128) (not bm!10032) (not b!98619) (not b!98316) (not b!98067) (not b!98452) (not bm!10084) (not b!98224) (not b!98554) (not d!26255) (not d!26167) (not d!26231) (not d!26273) (not b!98728) (not b!98549) (not d!26365) (not b!98189) (not bm!10039) (not b!98167) (not b!98595) b_and!6063 (not b!98220) (not d!26481) (not d!26169) (not bm!10035) (not d!26287) (not bm!10043) (not d!26193) (not bm!10009) (not b!98209) (not bm!10033) (not d!26519) (not b!98533) (not b!98607) (not b!98590) (not d!26453) (not b_lambda!4405) (not b!98021) (not b!98544) (not d!26147) (not b!98699) (not d!26443) (not d!26049) (not b!98754) (not b_lambda!4403) (not bm!10089) (not b!98419) (not d!26247) (not b!98785) (not b!98514) (not b!98151) (not d!26419) (not d!26171) (not b!98228) (not d!26527) (not b!98266) (not b!98529) (not b_lambda!4385) (not b!98133) (not b!98194) (not b!98504) (not b!98804) (not b!98516) (not d!26533) (not bm!10021) (not d!26043) (not bm!10092) (not b!98538) (not b!98759) (not b!98641) (not b!98320) (not d!26451) (not b!98480) (not b!98305) (not b_lambda!4339) (not b!98425) (not b!98227) (not b!98208) (not bm!10036) (not d!26413) (not d!26179) (not b!98175) (not d!26303) (not d!26181) (not b!98262) (not b!98396) (not d!26383) (not b_lambda!4345) (not d!26151) (not b!98130) (not b!98537) (not b!98468) (not b!98313) (not b_lambda!4347) (not b!98559) (not b!98248) (not d!26391) (not b_lambda!4343) (not b!98546) (not d!26321) (not b!98015) (not b!98565) (not b!98108) (not bm!10007) (not b!98093) (not d!26323) (not b!98552) (not b!98283) (not b!98026) (not d!26503) (not b!98181) (not bm!10042) (not d!26125) (not b!98115) (not b!98739) (not b!98204) (not bm!10018) (not b!98814) (not b!98502) (not d!26087) (not d!26427) (not b!98733) (not b!98550) (not b!98229) (not bm!10017) (not b!98195) (not d!26543) (not bm!10015) (not b!98594) (not b_lambda!4397) (not b!98455) (not b!98600) (not d!26371) (not d!26329) (not b!98328) (not d!26441) (not d!26537) (not bm!10067) (not b!98213) (not d!26455) (not b!98158) (not b!98082) (not d!26511) (not d!26425) (not d!26199) (not d!26067) (not d!26157) (not d!26227) (not d!26337) (not b!98203) (not b!98805) (not b!98669) (not b!98217) (not b!98153) (not b!98077) (not b!98084) (not b!98424) (not b!98403) (not b!98164) (not b!98280) (not b!98778) (not bm!10057) (not d!26289) (not d!26071) (not b_lambda!4389) (not b!98574) (not b!98357) (not b!98394) (not d!26047) (not b!98105) (not b!98735) (not d!26477) (not b!98742) (not b!98719) (not bm!10000) (not d!26091) (not b_next!2425) (not b!98116) (not d!26281) (not b!98567) (not b!98342) (not b!98770) (not b!98178) (not b!98746) (not b!98393) (not b!98102) (not b!98708) (not d!26301) (not b!98483) (not d!26105) (not b!98252) (not d!26347) (not b!98481) (not b!98146) (not b!98724) (not bm!10066) (not b!98585) (not b!98329) (not bm!10060) (not b!98532) (not d!26471) (not b!98390) (not b!98762) (not d!26407) (not d!26359) (not b!98583) (not d!26367) (not d!26509) (not bm!10044) (not b!98402) (not b!98275) (not b!97977) (not b!98301) (not d!26197) (not b!98144) (not b!98430) (not b!98553) (not b!98289) (not b!98210) (not b!98265) (not b!98608) (not b!98255) (not b!98127) (not b!98302) (not b!98162) (not d!26161) (not b!98107) (not b!98362) (not d!26159) (not b!98171) (not b!98352) b_and!6061 (not d!26343) (not b!98149) (not b!98161) (not bm!10023) (not d!26097) (not d!26373) (not d!26107) (not d!26369) (not bm!10077) (not b!98488) (not d!26221) (not bm!10073) (not bm!10053) (not b!98621) (not b!98324) (not bm!10062) (not b!98356) (not b!98786) (not d!26495) (not b!98267) (not d!26497) (not b!98721) (not bm!10014) (not b!98092) (not d!26333) (not d!26145) (not d!26377) (not b!98421) (not d!26485) (not d!26431) (not b!98588) (not bm!10052) (not d!26149) (not bm!10013) (not b!98810) (not b!98028) (not b!98232) (not b!98132) (not bm!10047) (not b!98592) (not b!98137) (not b!98611) (not d!26467) (not b!98803) (not d!26299) (not d!26243) (not d!26489) (not d!26177) (not b!98732) (not b!98415) (not d!26505) (not b!98344) (not b!98399) (not b!98545) (not d!26307) (not b!98633) (not d!26253) (not d!26077) (not d!26113) (not d!26513) (not b_lambda!4401) (not b!98806) (not b!98349) (not d!26225) (not d!26213) (not b_lambda!4341) (not d!26265) (not b!98345) (not b!98125) (not d!26327) (not d!26525) (not b!98772) (not b!98551) (not b!98319) (not b!98518) (not mapNonEmpty!3759) (not bm!10061) (not b!98250) (not b!98749) (not b!98702) (not b!98618) (not b!98734) (not b!98412) (not b!98238) (not b!98370) (not b!98307) (not d!26405) (not b_lambda!4383) (not d!26379) (not b!98767) (not b!98206) (not d!26059) (not b!98119) (not b!98331) (not b!98624) (not d!26233) (not b!98757) (not b!98635) (not d!26325) (not b!98464) (not b!98456) (not b!98382) (not bm!10065) (not d!26381) (not b!98630) (not bm!10012) (not b!98310) (not b!98317) (not b!98437) (not b!98239) (not b_lambda!4323) (not b!98750) (not b!98351) (not b!98788) (not d!26457) (not b!98389) (not b!98367) (not b!98522) (not b!98365) (not b!98135) (not d!26517) (not b!98616) (not d!26507) (not b!98582) (not b!98489) (not b!98300) (not b!98193) (not b!98743) (not d!26101) (not b!98180) (not b!98435) (not d!26277) (not b!98466) (not b!98298) (not b!98796) (not b!98163) (not b!97989) (not b!98215) (not bm!10069) (not d!26141) (not d!26349) (not b!98605) (not b!98650) (not bm!10085) (not b!98413) (not b!98497) (not b!97981) (not b!98353) (not b!98085) (not d!26435) (not b!98312) (not bm!10025) (not d!26421) (not d!26127) (not b!98030) (not mapNonEmpty!3760) (not b!98451) (not b_lambda!4393) (not b!98557) (not b!98536) (not d!26269) (not d!26535) (not d!26521) (not d!26175) (not bm!10022) (not b!98336) (not d!26241) (not d!26447) (not bm!10056) (not d!26375) (not b!98379) (not b!98506) (not b!98100) (not d!26499) (not b_lambda!4395) (not b!98277) (not b!98438) (not b!98154) (not d!26259) (not b!98511) (not b!98152) (not d!26395) (not b!98731) (not bm!10076) (not b!98769) (not b!98272) (not b!98076) (not b!98505) (not b!98603) (not d!26173) (not b!98519) (not d!26501) (not b!98196) (not d!26401) (not d!26479) (not b!98156) (not b!98279) (not b!98637) (not bm!10034) (not b!98288) (not b!98763) (not b!98765) (not d!26163) (not b!98264) (not b!98569) (not d!26341) (not b!98477) (not b!98593) (not d!26095) (not b!98761) (not b!98528) (not b!98801) (not d!26073) (not b!98118) (not d!26131) (not d!26251) (not d!26357) (not b!98623) (not b!98768) (not b!98387) (not b!98448) (not b!98752) (not bm!10003) (not b!98812) (not d!26205) (not d!26223) (not b!98775) (not d!26315) (not b!98645) (not b!98756) (not b_lambda!4369) (not b!97984) (not d!26153) (not bm!10008) (not b!98068) (not bm!10026) (not b!98122) (not d!26439) (not b!98541) (not d!26429) (not b!98244) (not b!98705) (not b!98558) (not d!26285) (not b!98327) (not d!26215) (not b!98070) (not d!26491) (not b!98526) (not bm!10094) (not b!98500) (not b!98478) (not bm!10046) (not b!98355) (not bm!10088) (not b!98039) (not d!26433) (not b!98099) (not d!26345) (not d!26363) (not b!98290) (not d!26417) (not b!98219) (not d!26361) (not b!98572) (not b!98299) (not b!98461) tp_is_empty!2629 (not d!26085) (not b!98496) (not d!26235) (not b!98531) (not b!98173) (not d!26189) (not d!26423) (not b!98211) (not b!98469) (not d!26155) (not b!98542) (not b!98716) (not b_lambda!4381) (not b!98019) (not d!26483) (not b!98591) (not d!26075) (not b!98354) (not d!26355) (not b!98346) (not b!98335) (not d!26487) (not d!26279) (not b!98791) (not b!98748) (not d!26109) (not b!98337) (not bm!10029) (not d!26319) (not b!98095) (not b!98023) (not b!98040) (not b!98138) (not b!98139) (not b!98441) (not d!26493) (not b!98079) (not b!98700) (not b!98486) (not b!98339) (not d!26261) (not b!98198) (not b!98246) (not d!26061) (not b!98200) (not b!98322) (not b!98647) (not b_lambda!4327) (not d!26305) (not b_lambda!4391) (not d!26133) (not bm!10074) (not b!98777) (not b!98191) (not d!26115) (not d!26191) (not b!98737) (not b!98291) (not b!98318) (not d!26335) (not b!98472) (not b!98242) (not b!98341) (not b!98369) (not b!98726) (not b!98296) (not d!26099) (not b!98638) (not b!98420) (not bm!10004) (not b!98212) (not b!98707) (not d!26081) (not b!98373) (not b!98188) (not b_next!2427) (not b_lambda!4399) (not d!26237) (not b!98562) (not b!98501) (not d!26165) (not b!98433) (not b!98816))
(check-sat b_and!6061 b_and!6063 (not b_next!2425) (not b_next!2427))
