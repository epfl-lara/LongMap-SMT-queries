; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11654 () Bool)

(assert start!11654)

(declare-fun b!97322 () Bool)

(declare-fun b_free!2425 () Bool)

(declare-fun b_next!2425 () Bool)

(assert (=> b!97322 (= b_free!2425 (not b_next!2425))))

(declare-fun tp!9558 () Bool)

(declare-fun b_and!5965 () Bool)

(assert (=> b!97322 (= tp!9558 b_and!5965)))

(declare-fun b!97318 () Bool)

(declare-fun b_free!2427 () Bool)

(declare-fun b_next!2427 () Bool)

(assert (=> b!97318 (= b_free!2427 (not b_next!2427))))

(declare-fun tp!9559 () Bool)

(declare-fun b_and!5967 () Bool)

(assert (=> b!97318 (= tp!9559 b_and!5967)))

(declare-fun b!97317 () Bool)

(declare-fun res!49034 () Bool)

(declare-fun e!63474 () Bool)

(assert (=> b!97317 (=> (not res!49034) (not e!63474))))

(declare-datatypes ((V!3153 0))(
  ( (V!3154 (val!1359 Int)) )
))
(declare-datatypes ((array!4223 0))(
  ( (array!4224 (arr!2006 (Array (_ BitVec 32) (_ BitVec 64))) (size!2256 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!971 0))(
  ( (ValueCellFull!971 (v!2800 V!3153)) (EmptyCell!971) )
))
(declare-datatypes ((array!4225 0))(
  ( (array!4226 (arr!2007 (Array (_ BitVec 32) ValueCell!971)) (size!2257 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!850 0))(
  ( (LongMapFixedSize!851 (defaultEntry!2480 Int) (mask!6577 (_ BitVec 32)) (extraKeys!2301 (_ BitVec 32)) (zeroValue!2363 V!3153) (minValue!2363 V!3153) (_size!474 (_ BitVec 32)) (_keys!4170 array!4223) (_values!2463 array!4225) (_vacant!474 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!850)

(declare-fun valid!392 (LongMapFixedSize!850) Bool)

(assert (=> b!97317 (= res!49034 (valid!392 newMap!16))))

(declare-fun e!63470 () Bool)

(declare-fun e!63463 () Bool)

(declare-fun tp_is_empty!2629 () Bool)

(declare-fun array_inv!1235 (array!4223) Bool)

(declare-fun array_inv!1236 (array!4225) Bool)

(assert (=> b!97318 (= e!63470 (and tp!9559 tp_is_empty!2629 (array_inv!1235 (_keys!4170 newMap!16)) (array_inv!1236 (_values!2463 newMap!16)) e!63463))))

(declare-fun b!97319 () Bool)

(declare-fun e!63468 () Bool)

(assert (=> b!97319 (= e!63468 tp_is_empty!2629)))

(declare-fun b!97320 () Bool)

(declare-datatypes ((Unit!2917 0))(
  ( (Unit!2918) )
))
(declare-fun e!63469 () Unit!2917)

(declare-fun Unit!2919 () Unit!2917)

(assert (=> b!97320 (= e!63469 Unit!2919)))

(declare-fun b!97321 () Bool)

(declare-fun res!49035 () Bool)

(declare-fun e!63465 () Bool)

(assert (=> b!97321 (=> (not res!49035) (not e!63465))))

(declare-datatypes ((Cell!654 0))(
  ( (Cell!655 (v!2801 LongMapFixedSize!850)) )
))
(declare-datatypes ((LongMap!654 0))(
  ( (LongMap!655 (underlying!338 Cell!654)) )
))
(declare-fun thiss!992 () LongMap!654)

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!97321 (= res!49035 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun e!63473 () Bool)

(declare-fun e!63472 () Bool)

(assert (=> b!97322 (= e!63472 (and tp!9558 tp_is_empty!2629 (array_inv!1235 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (array_inv!1236 (_values!2463 (v!2801 (underlying!338 thiss!992)))) e!63473))))

(declare-fun b!97323 () Bool)

(declare-fun e!63460 () Bool)

(declare-fun e!63461 () Bool)

(assert (=> b!97323 (= e!63460 e!63461)))

(declare-fun b!97325 () Bool)

(declare-fun e!63462 () Bool)

(assert (=> b!97325 (= e!63462 e!63465)))

(declare-fun res!49036 () Bool)

(assert (=> b!97325 (=> (not res!49036) (not e!63465))))

(declare-datatypes ((tuple2!2298 0))(
  ( (tuple2!2299 (_1!1160 Bool) (_2!1160 LongMapFixedSize!850)) )
))
(declare-fun lt!48686 () tuple2!2298)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!97325 (= res!49036 (and (_1!1160 lt!48686) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!48684 () Unit!2917)

(assert (=> b!97325 (= lt!48684 e!63469)))

(declare-fun c!16465 () Bool)

(declare-datatypes ((tuple2!2300 0))(
  ( (tuple2!2301 (_1!1161 (_ BitVec 64)) (_2!1161 V!3153)) )
))
(declare-datatypes ((List!1564 0))(
  ( (Nil!1561) (Cons!1560 (h!2154 tuple2!2300) (t!5510 List!1564)) )
))
(declare-datatypes ((ListLongMap!1499 0))(
  ( (ListLongMap!1500 (toList!765 List!1564)) )
))
(declare-fun lt!48683 () ListLongMap!1499)

(declare-fun contains!788 (ListLongMap!1499 (_ BitVec 64)) Bool)

(assert (=> b!97325 (= c!16465 (contains!788 lt!48683 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun update!145 (LongMapFixedSize!850 (_ BitVec 64) V!3153) tuple2!2298)

(declare-fun get!1288 (ValueCell!971 V!3153) V!3153)

(declare-fun dynLambda!370 (Int (_ BitVec 64)) V!3153)

(assert (=> b!97325 (= lt!48686 (update!145 newMap!16 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!97326 () Bool)

(declare-fun e!63475 () Bool)

(declare-fun mapRes!3739 () Bool)

(assert (=> b!97326 (= e!63473 (and e!63475 mapRes!3739))))

(declare-fun condMapEmpty!3740 () Bool)

(declare-fun mapDefault!3739 () ValueCell!971)

(assert (=> b!97326 (= condMapEmpty!3740 (= (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3739)))))

(declare-fun mapIsEmpty!3739 () Bool)

(assert (=> mapIsEmpty!3739 mapRes!3739))

(declare-fun b!97327 () Bool)

(declare-fun e!63467 () Bool)

(assert (=> b!97327 (= e!63467 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3739 () Bool)

(declare-fun mapRes!3740 () Bool)

(declare-fun tp!9557 () Bool)

(assert (=> mapNonEmpty!3739 (= mapRes!3740 (and tp!9557 e!63467))))

(declare-fun mapRest!3739 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3740 () ValueCell!971)

(declare-fun mapKey!3740 () (_ BitVec 32))

(assert (=> mapNonEmpty!3739 (= (arr!2007 (_values!2463 newMap!16)) (store mapRest!3739 mapKey!3740 mapValue!3740))))

(declare-fun mapIsEmpty!3740 () Bool)

(assert (=> mapIsEmpty!3740 mapRes!3740))

(declare-fun b!97328 () Bool)

(assert (=> b!97328 (= e!63461 e!63472)))

(declare-fun b!97329 () Bool)

(assert (=> b!97329 (= e!63474 e!63462)))

(declare-fun res!49037 () Bool)

(assert (=> b!97329 (=> (not res!49037) (not e!63462))))

(declare-fun lt!48682 () ListLongMap!1499)

(assert (=> b!97329 (= res!49037 (and (= lt!48682 lt!48683) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1253 (LongMapFixedSize!850) ListLongMap!1499)

(assert (=> b!97329 (= lt!48683 (map!1253 newMap!16))))

(declare-fun getCurrentListMap!455 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) ListLongMap!1499)

(assert (=> b!97329 (= lt!48682 (getCurrentListMap!455 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97330 () Bool)

(assert (=> b!97330 (= e!63463 (and e!63468 mapRes!3740))))

(declare-fun condMapEmpty!3739 () Bool)

(declare-fun mapDefault!3740 () ValueCell!971)

(assert (=> b!97330 (= condMapEmpty!3739 (= (arr!2007 (_values!2463 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3740)))))

(declare-fun b!97331 () Bool)

(declare-fun res!49039 () Bool)

(assert (=> b!97331 (=> (not res!49039) (not e!63474))))

(assert (=> b!97331 (= res!49039 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6577 newMap!16)) (_size!474 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97332 () Bool)

(declare-fun Unit!2920 () Unit!2917)

(assert (=> b!97332 (= e!63469 Unit!2920)))

(declare-fun lt!48688 () Unit!2917)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!86 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2917)

(assert (=> b!97332 (= lt!48688 (lemmaListMapContainsThenArrayContainsFrom!86 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4223 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!97332 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!48687 () Unit!2917)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4223 (_ BitVec 32) (_ BitVec 32)) Unit!2917)

(assert (=> b!97332 (= lt!48687 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1565 0))(
  ( (Nil!1562) (Cons!1561 (h!2155 (_ BitVec 64)) (t!5511 List!1565)) )
))
(declare-fun arrayNoDuplicates!0 (array!4223 (_ BitVec 32) List!1565) Bool)

(assert (=> b!97332 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) from!355 Nil!1562)))

(declare-fun lt!48685 () Unit!2917)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4223 (_ BitVec 32) (_ BitVec 64) List!1565) Unit!2917)

(assert (=> b!97332 (= lt!48685 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562)))))

(assert (=> b!97332 false))

(declare-fun b!97333 () Bool)

(declare-fun res!49033 () Bool)

(assert (=> b!97333 (=> (not res!49033) (not e!63474))))

(assert (=> b!97333 (= res!49033 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!97334 () Bool)

(declare-fun e!63464 () Bool)

(assert (=> b!97334 (= e!63464 tp_is_empty!2629)))

(declare-fun mapNonEmpty!3740 () Bool)

(declare-fun tp!9560 () Bool)

(assert (=> mapNonEmpty!3740 (= mapRes!3739 (and tp!9560 e!63464))))

(declare-fun mapRest!3740 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3739 () ValueCell!971)

(declare-fun mapKey!3739 () (_ BitVec 32))

(assert (=> mapNonEmpty!3740 (= (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (store mapRest!3740 mapKey!3739 mapValue!3739))))

(declare-fun b!97335 () Bool)

(assert (=> b!97335 (= e!63475 tp_is_empty!2629)))

(declare-fun res!49038 () Bool)

(assert (=> start!11654 (=> (not res!49038) (not e!63474))))

(declare-fun valid!393 (LongMap!654) Bool)

(assert (=> start!11654 (= res!49038 (valid!393 thiss!992))))

(assert (=> start!11654 e!63474))

(assert (=> start!11654 e!63460))

(assert (=> start!11654 true))

(assert (=> start!11654 e!63470))

(declare-fun b!97324 () Bool)

(assert (=> b!97324 (= e!63465 (and (= (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6577 (v!2801 (underlying!338 thiss!992))))) (= (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992))))) (bvsge (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000)))))

(assert (= (and start!11654 res!49038) b!97333))

(assert (= (and b!97333 res!49033) b!97317))

(assert (= (and b!97317 res!49034) b!97331))

(assert (= (and b!97331 res!49039) b!97329))

(assert (= (and b!97329 res!49037) b!97325))

(assert (= (and b!97325 c!16465) b!97332))

(assert (= (and b!97325 (not c!16465)) b!97320))

(assert (= (and b!97325 res!49036) b!97321))

(assert (= (and b!97321 res!49035) b!97324))

(assert (= (and b!97326 condMapEmpty!3740) mapIsEmpty!3739))

(assert (= (and b!97326 (not condMapEmpty!3740)) mapNonEmpty!3740))

(get-info :version)

(assert (= (and mapNonEmpty!3740 ((_ is ValueCellFull!971) mapValue!3739)) b!97334))

(assert (= (and b!97326 ((_ is ValueCellFull!971) mapDefault!3739)) b!97335))

(assert (= b!97322 b!97326))

(assert (= b!97328 b!97322))

(assert (= b!97323 b!97328))

(assert (= start!11654 b!97323))

(assert (= (and b!97330 condMapEmpty!3739) mapIsEmpty!3740))

(assert (= (and b!97330 (not condMapEmpty!3739)) mapNonEmpty!3739))

(assert (= (and mapNonEmpty!3739 ((_ is ValueCellFull!971) mapValue!3740)) b!97327))

(assert (= (and b!97330 ((_ is ValueCellFull!971) mapDefault!3740)) b!97319))

(assert (= b!97318 b!97330))

(assert (= start!11654 b!97318))

(declare-fun b_lambda!4325 () Bool)

(assert (=> (not b_lambda!4325) (not b!97325)))

(declare-fun t!5507 () Bool)

(declare-fun tb!1913 () Bool)

(assert (=> (and b!97322 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) t!5507) tb!1913))

(declare-fun result!3251 () Bool)

(assert (=> tb!1913 (= result!3251 tp_is_empty!2629)))

(assert (=> b!97325 t!5507))

(declare-fun b_and!5969 () Bool)

(assert (= b_and!5965 (and (=> t!5507 result!3251) b_and!5969)))

(declare-fun tb!1915 () Bool)

(declare-fun t!5509 () Bool)

(assert (=> (and b!97318 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) t!5509) tb!1915))

(declare-fun result!3255 () Bool)

(assert (= result!3255 result!3251))

(assert (=> b!97325 t!5509))

(declare-fun b_and!5971 () Bool)

(assert (= b_and!5967 (and (=> t!5509 result!3255) b_and!5971)))

(declare-fun m!106245 () Bool)

(assert (=> start!11654 m!106245))

(declare-fun m!106247 () Bool)

(assert (=> b!97332 m!106247))

(declare-fun m!106249 () Bool)

(assert (=> b!97332 m!106249))

(declare-fun m!106251 () Bool)

(assert (=> b!97332 m!106251))

(declare-fun m!106253 () Bool)

(assert (=> b!97332 m!106253))

(assert (=> b!97332 m!106251))

(assert (=> b!97332 m!106251))

(declare-fun m!106255 () Bool)

(assert (=> b!97332 m!106255))

(assert (=> b!97332 m!106251))

(declare-fun m!106257 () Bool)

(assert (=> b!97332 m!106257))

(declare-fun m!106259 () Bool)

(assert (=> mapNonEmpty!3739 m!106259))

(declare-fun m!106261 () Bool)

(assert (=> mapNonEmpty!3740 m!106261))

(declare-fun m!106263 () Bool)

(assert (=> b!97322 m!106263))

(declare-fun m!106265 () Bool)

(assert (=> b!97322 m!106265))

(declare-fun m!106267 () Bool)

(assert (=> b!97321 m!106267))

(declare-fun m!106269 () Bool)

(assert (=> b!97318 m!106269))

(declare-fun m!106271 () Bool)

(assert (=> b!97318 m!106271))

(declare-fun m!106273 () Bool)

(assert (=> b!97325 m!106273))

(declare-fun m!106275 () Bool)

(assert (=> b!97325 m!106275))

(declare-fun m!106277 () Bool)

(assert (=> b!97325 m!106277))

(assert (=> b!97325 m!106251))

(assert (=> b!97325 m!106251))

(declare-fun m!106279 () Bool)

(assert (=> b!97325 m!106279))

(assert (=> b!97325 m!106275))

(assert (=> b!97325 m!106251))

(assert (=> b!97325 m!106277))

(declare-fun m!106281 () Bool)

(assert (=> b!97325 m!106281))

(assert (=> b!97325 m!106273))

(declare-fun m!106283 () Bool)

(assert (=> b!97317 m!106283))

(assert (=> b!97329 m!106251))

(declare-fun m!106285 () Bool)

(assert (=> b!97329 m!106285))

(declare-fun m!106287 () Bool)

(assert (=> b!97329 m!106287))

(check-sat (not b!97321) (not b_next!2427) (not b_lambda!4325) (not mapNonEmpty!3739) (not b!97329) b_and!5969 (not b!97317) tp_is_empty!2629 (not b!97332) (not b!97318) (not mapNonEmpty!3740) (not b!97325) b_and!5971 (not b_next!2425) (not start!11654) (not b!97322))
(check-sat b_and!5969 b_and!5971 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun b_lambda!4331 () Bool)

(assert (= b_lambda!4325 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4331)))

(check-sat (not b!97321) (not b_next!2427) (not mapNonEmpty!3739) (not b!97329) b_and!5969 tp_is_empty!2629 (not b!97332) (not b!97318) (not mapNonEmpty!3740) (not b!97325) b_and!5971 (not b_next!2425) (not start!11654) (not b!97322) (not b!97317) (not b_lambda!4331))
(check-sat b_and!5969 b_and!5971 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun d!25933 () Bool)

(assert (=> d!25933 (= (array_inv!1235 (_keys!4170 newMap!16)) (bvsge (size!2256 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97318 d!25933))

(declare-fun d!25935 () Bool)

(assert (=> d!25935 (= (array_inv!1236 (_values!2463 newMap!16)) (bvsge (size!2257 (_values!2463 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97318 d!25935))

(declare-fun d!25937 () Bool)

(assert (=> d!25937 (not (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48733 () Unit!2917)

(declare-fun choose!68 (array!4223 (_ BitVec 32) (_ BitVec 64) List!1565) Unit!2917)

(assert (=> d!25937 (= lt!48733 (choose!68 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562)))))

(assert (=> d!25937 (bvslt (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25937 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562)) lt!48733)))

(declare-fun bs!4020 () Bool)

(assert (= bs!4020 d!25937))

(assert (=> bs!4020 m!106251))

(assert (=> bs!4020 m!106255))

(assert (=> bs!4020 m!106251))

(declare-fun m!106377 () Bool)

(assert (=> bs!4020 m!106377))

(assert (=> b!97332 d!25937))

(declare-fun d!25939 () Bool)

(assert (=> d!25939 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) from!355 Nil!1562)))

(declare-fun lt!48736 () Unit!2917)

(declare-fun choose!39 (array!4223 (_ BitVec 32) (_ BitVec 32)) Unit!2917)

(assert (=> d!25939 (= lt!48736 (choose!39 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!25939 (bvslt (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25939 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 from!355) lt!48736)))

(declare-fun bs!4021 () Bool)

(assert (= bs!4021 d!25939))

(assert (=> bs!4021 m!106249))

(declare-fun m!106379 () Bool)

(assert (=> bs!4021 m!106379))

(assert (=> b!97332 d!25939))

(declare-fun d!25941 () Bool)

(declare-fun res!49086 () Bool)

(declare-fun e!63576 () Bool)

(assert (=> d!25941 (=> res!49086 e!63576)))

(assert (=> d!25941 (= res!49086 (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!25941 (= (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!63576)))

(declare-fun b!97460 () Bool)

(declare-fun e!63577 () Bool)

(assert (=> b!97460 (= e!63576 e!63577)))

(declare-fun res!49087 () Bool)

(assert (=> b!97460 (=> (not res!49087) (not e!63577))))

(assert (=> b!97460 (= res!49087 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97461 () Bool)

(assert (=> b!97461 (= e!63577 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!25941 (not res!49086)) b!97460))

(assert (= (and b!97460 res!49087) b!97461))

(declare-fun m!106381 () Bool)

(assert (=> d!25941 m!106381))

(assert (=> b!97461 m!106251))

(declare-fun m!106383 () Bool)

(assert (=> b!97461 m!106383))

(assert (=> b!97332 d!25941))

(declare-fun d!25943 () Bool)

(declare-fun e!63580 () Bool)

(assert (=> d!25943 e!63580))

(declare-fun c!16474 () Bool)

(assert (=> d!25943 (= c!16474 (and (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!48739 () Unit!2917)

(declare-fun choose!594 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2917)

(assert (=> d!25943 (= lt!48739 (choose!594 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(assert (=> d!25943 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992))))))

(assert (=> d!25943 (= (lemmaListMapContainsThenArrayContainsFrom!86 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) lt!48739)))

(declare-fun b!97466 () Bool)

(assert (=> b!97466 (= e!63580 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97467 () Bool)

(assert (=> b!97467 (= e!63580 (ite (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25943 c!16474) b!97466))

(assert (= (and d!25943 (not c!16474)) b!97467))

(assert (=> d!25943 m!106251))

(declare-fun m!106385 () Bool)

(assert (=> d!25943 m!106385))

(assert (=> d!25943 m!106267))

(assert (=> b!97466 m!106251))

(assert (=> b!97466 m!106255))

(assert (=> b!97332 d!25943))

(declare-fun b!97478 () Bool)

(declare-fun e!63591 () Bool)

(declare-fun call!9846 () Bool)

(assert (=> b!97478 (= e!63591 call!9846)))

(declare-fun b!97479 () Bool)

(assert (=> b!97479 (= e!63591 call!9846)))

(declare-fun b!97480 () Bool)

(declare-fun e!63590 () Bool)

(declare-fun e!63592 () Bool)

(assert (=> b!97480 (= e!63590 e!63592)))

(declare-fun res!49094 () Bool)

(assert (=> b!97480 (=> (not res!49094) (not e!63592))))

(declare-fun e!63589 () Bool)

(assert (=> b!97480 (= res!49094 (not e!63589))))

(declare-fun res!49095 () Bool)

(assert (=> b!97480 (=> (not res!49095) (not e!63589))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!97480 (= res!49095 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun c!16477 () Bool)

(declare-fun bm!9843 () Bool)

(assert (=> bm!9843 (= call!9846 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)))))

(declare-fun b!97482 () Bool)

(assert (=> b!97482 (= e!63592 e!63591)))

(assert (=> b!97482 (= c!16477 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun d!25945 () Bool)

(declare-fun res!49096 () Bool)

(assert (=> d!25945 (=> res!49096 e!63590)))

(assert (=> d!25945 (= res!49096 (bvsge from!355 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!25945 (= (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) from!355 Nil!1562) e!63590)))

(declare-fun b!97481 () Bool)

(declare-fun contains!790 (List!1565 (_ BitVec 64)) Bool)

(assert (=> b!97481 (= e!63589 (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!25945 (not res!49096)) b!97480))

(assert (= (and b!97480 res!49095) b!97481))

(assert (= (and b!97480 res!49094) b!97482))

(assert (= (and b!97482 c!16477) b!97478))

(assert (= (and b!97482 (not c!16477)) b!97479))

(assert (= (or b!97478 b!97479) bm!9843))

(assert (=> b!97480 m!106251))

(assert (=> b!97480 m!106251))

(declare-fun m!106387 () Bool)

(assert (=> b!97480 m!106387))

(assert (=> bm!9843 m!106251))

(declare-fun m!106389 () Bool)

(assert (=> bm!9843 m!106389))

(assert (=> b!97482 m!106251))

(assert (=> b!97482 m!106251))

(assert (=> b!97482 m!106387))

(assert (=> b!97481 m!106251))

(assert (=> b!97481 m!106251))

(declare-fun m!106391 () Bool)

(assert (=> b!97481 m!106391))

(assert (=> b!97332 d!25945))

(declare-fun d!25947 () Bool)

(assert (=> d!25947 (= (valid!393 thiss!992) (valid!392 (v!2801 (underlying!338 thiss!992))))))

(declare-fun bs!4022 () Bool)

(assert (= bs!4022 d!25947))

(declare-fun m!106393 () Bool)

(assert (=> bs!4022 m!106393))

(assert (=> start!11654 d!25947))

(declare-fun d!25949 () Bool)

(declare-fun e!63597 () Bool)

(assert (=> d!25949 e!63597))

(declare-fun res!49099 () Bool)

(assert (=> d!25949 (=> res!49099 e!63597)))

(declare-fun lt!48748 () Bool)

(assert (=> d!25949 (= res!49099 (not lt!48748))))

(declare-fun lt!48751 () Bool)

(assert (=> d!25949 (= lt!48748 lt!48751)))

(declare-fun lt!48749 () Unit!2917)

(declare-fun e!63598 () Unit!2917)

(assert (=> d!25949 (= lt!48749 e!63598)))

(declare-fun c!16480 () Bool)

(assert (=> d!25949 (= c!16480 lt!48751)))

(declare-fun containsKey!154 (List!1564 (_ BitVec 64)) Bool)

(assert (=> d!25949 (= lt!48751 (containsKey!154 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!25949 (= (contains!788 lt!48683 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!48748)))

(declare-fun b!97489 () Bool)

(declare-fun lt!48750 () Unit!2917)

(assert (=> b!97489 (= e!63598 lt!48750)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!102 (List!1564 (_ BitVec 64)) Unit!2917)

(assert (=> b!97489 (= lt!48750 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-datatypes ((Option!157 0))(
  ( (Some!156 (v!2807 V!3153)) (None!155) )
))
(declare-fun isDefined!103 (Option!157) Bool)

(declare-fun getValueByKey!151 (List!1564 (_ BitVec 64)) Option!157)

(assert (=> b!97489 (isDefined!103 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!97490 () Bool)

(declare-fun Unit!2927 () Unit!2917)

(assert (=> b!97490 (= e!63598 Unit!2927)))

(declare-fun b!97491 () Bool)

(assert (=> b!97491 (= e!63597 (isDefined!103 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (= (and d!25949 c!16480) b!97489))

(assert (= (and d!25949 (not c!16480)) b!97490))

(assert (= (and d!25949 (not res!49099)) b!97491))

(assert (=> d!25949 m!106251))

(declare-fun m!106395 () Bool)

(assert (=> d!25949 m!106395))

(assert (=> b!97489 m!106251))

(declare-fun m!106397 () Bool)

(assert (=> b!97489 m!106397))

(assert (=> b!97489 m!106251))

(declare-fun m!106399 () Bool)

(assert (=> b!97489 m!106399))

(assert (=> b!97489 m!106399))

(declare-fun m!106401 () Bool)

(assert (=> b!97489 m!106401))

(assert (=> b!97491 m!106251))

(assert (=> b!97491 m!106399))

(assert (=> b!97491 m!106399))

(assert (=> b!97491 m!106401))

(assert (=> b!97325 d!25949))

(declare-fun bm!9892 () Bool)

(declare-fun call!9895 () ListLongMap!1499)

(declare-fun call!9913 () ListLongMap!1499)

(assert (=> bm!9892 (= call!9895 call!9913)))

(declare-fun b!97572 () Bool)

(declare-fun e!63649 () tuple2!2298)

(declare-fun e!63641 () tuple2!2298)

(assert (=> b!97572 (= e!63649 e!63641)))

(declare-datatypes ((SeekEntryResult!247 0))(
  ( (MissingZero!247 (index!3131 (_ BitVec 32))) (Found!247 (index!3132 (_ BitVec 32))) (Intermediate!247 (undefined!1059 Bool) (index!3133 (_ BitVec 32)) (x!12953 (_ BitVec 32))) (Undefined!247) (MissingVacant!247 (index!3134 (_ BitVec 32))) )
))
(declare-fun lt!48821 () SeekEntryResult!247)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4223 (_ BitVec 32)) SeekEntryResult!247)

(assert (=> b!97572 (= lt!48821 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun c!16514 () Bool)

(assert (=> b!97572 (= c!16514 ((_ is Undefined!247) lt!48821))))

(declare-fun bm!9893 () Bool)

(declare-fun call!9908 () Bool)

(declare-fun call!9900 () Bool)

(assert (=> bm!9893 (= call!9908 call!9900)))

(declare-fun bm!9894 () Bool)

(declare-fun call!9917 () ListLongMap!1499)

(declare-fun call!9898 () ListLongMap!1499)

(assert (=> bm!9894 (= call!9917 call!9898)))

(declare-fun b!97573 () Bool)

(declare-fun e!63652 () Bool)

(assert (=> b!97573 (= e!63652 (not call!9908))))

(declare-fun b!97574 () Bool)

(declare-fun e!63647 () tuple2!2298)

(declare-fun e!63653 () tuple2!2298)

(assert (=> b!97574 (= e!63647 e!63653)))

(declare-fun c!16516 () Bool)

(assert (=> b!97574 (= c!16516 ((_ is MissingZero!247) lt!48821))))

(declare-fun call!9904 () Unit!2917)

(declare-fun bm!9895 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2917)

(assert (=> bm!9895 (= call!9904 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(declare-fun bm!9896 () Bool)

(declare-fun call!9897 () ListLongMap!1499)

(declare-fun call!9911 () ListLongMap!1499)

(assert (=> bm!9896 (= call!9897 call!9911)))

(declare-fun bm!9897 () Bool)

(declare-fun call!9899 () Bool)

(declare-fun call!9915 () Bool)

(assert (=> bm!9897 (= call!9899 call!9915)))

(declare-fun b!97575 () Bool)

(declare-fun res!49132 () Bool)

(declare-fun e!63659 () Bool)

(assert (=> b!97575 (=> (not res!49132) (not e!63659))))

(assert (=> b!97575 (= res!49132 call!9899)))

(declare-fun e!63657 () Bool)

(assert (=> b!97575 (= e!63657 e!63659)))

(declare-fun b!97576 () Bool)

(declare-fun res!49134 () Bool)

(declare-fun e!63646 () Bool)

(assert (=> b!97576 (=> (not res!49134) (not e!63646))))

(declare-fun call!9910 () Bool)

(assert (=> b!97576 (= res!49134 call!9910)))

(declare-fun e!63650 () Bool)

(assert (=> b!97576 (= e!63650 e!63646)))

(declare-fun call!9905 () Bool)

(declare-fun call!9912 () ListLongMap!1499)

(declare-fun bm!9898 () Bool)

(assert (=> bm!9898 (= call!9905 (contains!788 call!9912 (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(declare-fun b!97578 () Bool)

(declare-fun lt!48822 () tuple2!2298)

(assert (=> b!97578 (= e!63647 (tuple2!2299 (_1!1160 lt!48822) (_2!1160 lt!48822)))))

(declare-fun call!9902 () tuple2!2298)

(assert (=> b!97578 (= lt!48822 call!9902)))

(declare-fun d!25951 () Bool)

(declare-fun e!63648 () Bool)

(assert (=> d!25951 e!63648))

(declare-fun res!49133 () Bool)

(assert (=> d!25951 (=> (not res!49133) (not e!63648))))

(declare-fun lt!48807 () tuple2!2298)

(assert (=> d!25951 (= res!49133 (valid!392 (_2!1160 lt!48807)))))

(assert (=> d!25951 (= lt!48807 e!63649)))

(declare-fun c!16512 () Bool)

(assert (=> d!25951 (= c!16512 (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvneg (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!25951 (valid!392 newMap!16)))

(assert (=> d!25951 (= (update!145 newMap!16 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!48807)))

(declare-fun b!97577 () Bool)

(declare-fun e!63656 () tuple2!2298)

(assert (=> b!97577 (= e!63649 e!63656)))

(declare-fun c!16518 () Bool)

(assert (=> b!97577 (= c!16518 (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9899 () Bool)

(declare-fun call!9909 () ListLongMap!1499)

(assert (=> bm!9899 (= call!9909 (map!1253 newMap!16))))

(declare-fun b!97579 () Bool)

(declare-fun e!63658 () Bool)

(assert (=> b!97579 (= e!63648 e!63658)))

(declare-fun c!16507 () Bool)

(assert (=> b!97579 (= c!16507 (_1!1160 lt!48807))))

(declare-fun b!97580 () Bool)

(declare-fun c!16511 () Bool)

(declare-fun lt!48828 () SeekEntryResult!247)

(assert (=> b!97580 (= c!16511 ((_ is MissingVacant!247) lt!48828))))

(declare-fun e!63642 () Bool)

(assert (=> b!97580 (= e!63657 e!63642)))

(declare-fun b!97581 () Bool)

(declare-fun res!49139 () Bool)

(assert (=> b!97581 (=> (not res!49139) (not e!63659))))

(assert (=> b!97581 (= res!49139 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!48828)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97582 () Bool)

(assert (=> b!97582 (= e!63659 (not call!9908))))

(declare-fun e!63661 () ListLongMap!1499)

(declare-fun bm!9900 () Bool)

(declare-fun +!130 (ListLongMap!1499 tuple2!2300) ListLongMap!1499)

(assert (=> bm!9900 (= call!9898 (+!130 e!63661 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16519 () Bool)

(assert (=> bm!9900 (= c!16519 c!16512)))

(declare-fun bm!9901 () Bool)

(declare-fun call!9914 () SeekEntryResult!247)

(declare-fun call!9896 () SeekEntryResult!247)

(assert (=> bm!9901 (= call!9914 call!9896)))

(declare-fun lt!48816 () array!4225)

(declare-fun bm!9902 () Bool)

(assert (=> bm!9902 (= call!9913 (getCurrentListMap!455 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97583 () Bool)

(declare-fun e!63651 () Bool)

(declare-fun e!63643 () Bool)

(assert (=> b!97583 (= e!63651 e!63643)))

(declare-fun res!49135 () Bool)

(assert (=> b!97583 (= res!49135 call!9910)))

(assert (=> b!97583 (=> (not res!49135) (not e!63643))))

(declare-fun e!63660 () Bool)

(declare-fun call!9918 () ListLongMap!1499)

(declare-fun b!97584 () Bool)

(assert (=> b!97584 (= e!63660 (= call!9918 (+!130 call!9909 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97585 () Bool)

(assert (=> b!97585 (= e!63658 e!63660)))

(declare-fun res!49136 () Bool)

(assert (=> b!97585 (= res!49136 (contains!788 call!9918 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!97585 (=> (not res!49136) (not e!63660))))

(declare-fun b!97586 () Bool)

(declare-fun lt!48819 () SeekEntryResult!247)

(assert (=> b!97586 (= e!63651 ((_ is Undefined!247) lt!48819))))

(declare-fun b!97587 () Bool)

(declare-fun e!63654 () Unit!2917)

(declare-fun lt!48806 () Unit!2917)

(assert (=> b!97587 (= e!63654 lt!48806)))

(assert (=> b!97587 (= lt!48806 call!9904)))

(declare-fun lt!48832 () SeekEntryResult!247)

(declare-fun call!9903 () SeekEntryResult!247)

(assert (=> b!97587 (= lt!48832 call!9903)))

(declare-fun res!49128 () Bool)

(assert (=> b!97587 (= res!49128 ((_ is Found!247) lt!48832))))

(declare-fun e!63645 () Bool)

(assert (=> b!97587 (=> (not res!49128) (not e!63645))))

(assert (=> b!97587 e!63645))

(declare-fun bm!9903 () Bool)

(assert (=> bm!9903 (= call!9896 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun b!97588 () Bool)

(declare-fun res!49131 () Bool)

(assert (=> b!97588 (= res!49131 call!9915)))

(assert (=> b!97588 (=> (not res!49131) (not e!63645))))

(declare-fun bm!9904 () Bool)

(assert (=> bm!9904 (= call!9918 (map!1253 (_2!1160 lt!48807)))))

(declare-fun b!97589 () Bool)

(declare-fun lt!48815 () Unit!2917)

(declare-fun e!63655 () Unit!2917)

(assert (=> b!97589 (= lt!48815 e!63655)))

(declare-fun c!16517 () Bool)

(assert (=> b!97589 (= c!16517 call!9905)))

(assert (=> b!97589 (= e!63641 (tuple2!2299 false newMap!16))))

(declare-fun bm!9905 () Bool)

(assert (=> bm!9905 (= call!9903 call!9896)))

(declare-fun b!97590 () Bool)

(declare-fun res!49138 () Bool)

(assert (=> b!97590 (= res!49138 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!48819)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97590 (=> (not res!49138) (not e!63643))))

(declare-fun b!97591 () Bool)

(assert (=> b!97591 (= e!63642 ((_ is Undefined!247) lt!48828))))

(declare-fun bm!9906 () Bool)

(declare-fun c!16508 () Bool)

(declare-fun updateHelperNewKey!41 (LongMapFixedSize!850 (_ BitVec 64) V!3153 (_ BitVec 32)) tuple2!2298)

(assert (=> bm!9906 (= call!9902 (updateHelperNewKey!41 newMap!16 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(declare-fun b!97592 () Bool)

(declare-fun res!49141 () Bool)

(assert (=> b!97592 (= res!49141 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!48828)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97592 (=> (not res!49141) (not e!63652))))

(declare-fun lt!48831 () SeekEntryResult!247)

(declare-fun b!97593 () Bool)

(declare-fun e!63644 () Bool)

(assert (=> b!97593 (= e!63644 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48831)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun lt!48809 () (_ BitVec 32))

(declare-fun lt!48810 () (_ BitVec 32))

(declare-fun bm!9907 () Bool)

(assert (=> bm!9907 (= call!9911 (getCurrentListMap!455 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97594 () Bool)

(assert (=> b!97594 (= e!63642 e!63652)))

(declare-fun res!49137 () Bool)

(assert (=> b!97594 (= res!49137 call!9899)))

(assert (=> b!97594 (=> (not res!49137) (not e!63652))))

(declare-fun b!97595 () Bool)

(declare-fun res!49129 () Bool)

(declare-fun call!9916 () Bool)

(assert (=> b!97595 (= res!49129 call!9916)))

(assert (=> b!97595 (=> (not res!49129) (not e!63644))))

(declare-fun b!97596 () Bool)

(declare-fun res!49140 () Bool)

(assert (=> b!97596 (=> (not res!49140) (not e!63646))))

(assert (=> b!97596 (= res!49140 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!48819)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97597 () Bool)

(declare-fun call!9901 () Bool)

(assert (=> b!97597 (= e!63643 (not call!9901))))

(declare-fun b!97598 () Bool)

(assert (=> b!97598 (= e!63645 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48832)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun bm!9908 () Bool)

(declare-fun call!9907 () Bool)

(assert (=> bm!9908 (= call!9915 call!9907)))

(declare-fun b!97599 () Bool)

(declare-fun Unit!2928 () Unit!2917)

(assert (=> b!97599 (= e!63654 Unit!2928)))

(declare-fun lt!48813 () Unit!2917)

(declare-fun call!9906 () Unit!2917)

(assert (=> b!97599 (= lt!48813 call!9906)))

(assert (=> b!97599 (= lt!48828 call!9903)))

(declare-fun c!16509 () Bool)

(assert (=> b!97599 (= c!16509 ((_ is MissingZero!247) lt!48828))))

(assert (=> b!97599 e!63657))

(declare-fun lt!48818 () Unit!2917)

(assert (=> b!97599 (= lt!48818 lt!48813)))

(assert (=> b!97599 false))

(declare-fun b!97600 () Bool)

(declare-fun lt!48826 () Unit!2917)

(declare-fun lt!48824 () Unit!2917)

(assert (=> b!97600 (= lt!48826 lt!48824)))

(assert (=> b!97600 (= call!9917 call!9897)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!41 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2917)

(assert (=> b!97600 (= lt!48824 (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48809 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97600 (= lt!48809 (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!97600 (= e!63656 (tuple2!2299 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6577 newMap!16) (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (_size!474 newMap!16) (_keys!4170 newMap!16) (_values!2463 newMap!16) (_vacant!474 newMap!16))))))

(declare-fun bm!9909 () Bool)

(assert (=> bm!9909 (= call!9901 call!9900)))

(declare-fun bm!9910 () Bool)

(assert (=> bm!9910 (= call!9916 call!9907)))

(declare-fun b!97601 () Bool)

(declare-fun Unit!2929 () Unit!2917)

(assert (=> b!97601 (= e!63655 Unit!2929)))

(declare-fun lt!48817 () Unit!2917)

(assert (=> b!97601 (= lt!48817 call!9904)))

(assert (=> b!97601 (= lt!48831 call!9914)))

(declare-fun res!49130 () Bool)

(assert (=> b!97601 (= res!49130 ((_ is Found!247) lt!48831))))

(assert (=> b!97601 (=> (not res!49130) (not e!63644))))

(assert (=> b!97601 e!63644))

(declare-fun lt!48829 () Unit!2917)

(assert (=> b!97601 (= lt!48829 lt!48817)))

(assert (=> b!97601 false))

(declare-fun bm!9911 () Bool)

(assert (=> bm!9911 (= call!9900 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!9912 () Bool)

(assert (=> bm!9912 (= call!9912 call!9913)))

(declare-fun b!97602 () Bool)

(assert (=> b!97602 (= e!63661 call!9895)))

(declare-fun b!97603 () Bool)

(declare-fun lt!48823 () tuple2!2298)

(assert (=> b!97603 (= lt!48823 call!9902)))

(assert (=> b!97603 (= e!63653 (tuple2!2299 (_1!1160 lt!48823) (_2!1160 lt!48823)))))

(declare-fun b!97604 () Bool)

(declare-fun c!16515 () Bool)

(assert (=> b!97604 (= c!16515 ((_ is MissingVacant!247) lt!48819))))

(assert (=> b!97604 (= e!63650 e!63651)))

(declare-fun b!97605 () Bool)

(assert (=> b!97605 (= e!63658 (= call!9918 call!9909))))

(declare-fun bm!9913 () Bool)

(assert (=> bm!9913 (= call!9910 call!9916)))

(declare-fun bm!9914 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2917)

(assert (=> bm!9914 (= call!9906 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(declare-fun b!97606 () Bool)

(assert (=> b!97606 (= c!16508 ((_ is MissingVacant!247) lt!48821))))

(assert (=> b!97606 (= e!63641 e!63647)))

(declare-fun b!97607 () Bool)

(declare-fun lt!48820 () Unit!2917)

(declare-fun lt!48825 () Unit!2917)

(assert (=> b!97607 (= lt!48820 lt!48825)))

(assert (=> b!97607 call!9905))

(declare-fun lemmaValidKeyInArrayIsInListMap!101 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) Unit!2917)

(assert (=> b!97607 (= lt!48825 (lemmaValidKeyInArrayIsInListMap!101 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97607 (= lt!48816 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))))

(declare-fun lt!48827 () Unit!2917)

(declare-fun lt!48811 () Unit!2917)

(assert (=> b!97607 (= lt!48827 lt!48811)))

(assert (=> b!97607 (= call!9898 call!9911)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2917)

(assert (=> b!97607 (= lt!48811 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48830 () Unit!2917)

(assert (=> b!97607 (= lt!48830 e!63654)))

(declare-fun c!16510 () Bool)

(assert (=> b!97607 (= c!16510 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!97607 (= e!63653 (tuple2!2299 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (_size!474 newMap!16) (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (_vacant!474 newMap!16))))))

(declare-fun b!97608 () Bool)

(declare-fun lt!48808 () Unit!2917)

(assert (=> b!97608 (= e!63655 lt!48808)))

(assert (=> b!97608 (= lt!48808 call!9906)))

(assert (=> b!97608 (= lt!48819 call!9914)))

(declare-fun c!16513 () Bool)

(assert (=> b!97608 (= c!16513 ((_ is MissingZero!247) lt!48819))))

(assert (=> b!97608 e!63650))

(declare-fun b!97609 () Bool)

(declare-fun lt!48812 () Unit!2917)

(declare-fun lt!48814 () Unit!2917)

(assert (=> b!97609 (= lt!48812 lt!48814)))

(assert (=> b!97609 (= call!9917 call!9897)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2917)

(assert (=> b!97609 (= lt!48814 (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> b!97609 (= lt!48810 (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!97609 (= e!63656 (tuple2!2299 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6577 newMap!16) (bvor (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!474 newMap!16) (_keys!4170 newMap!16) (_values!2463 newMap!16) (_vacant!474 newMap!16))))))

(declare-fun b!97610 () Bool)

(assert (=> b!97610 (= e!63646 (not call!9901))))

(declare-fun b!97611 () Bool)

(assert (=> b!97611 (= e!63661 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun bm!9915 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9915 (= call!9907 (inRange!0 (ite c!16514 (ite c!16517 (index!3132 lt!48831) (ite c!16513 (index!3131 lt!48819) (index!3134 lt!48819))) (ite c!16510 (index!3132 lt!48832) (ite c!16509 (index!3131 lt!48828) (index!3134 lt!48828)))) (mask!6577 newMap!16)))))

(assert (= (and d!25951 c!16512) b!97577))

(assert (= (and d!25951 (not c!16512)) b!97572))

(assert (= (and b!97577 c!16518) b!97600))

(assert (= (and b!97577 (not c!16518)) b!97609))

(assert (= (or b!97600 b!97609) bm!9892))

(assert (= (or b!97600 b!97609) bm!9896))

(assert (= (or b!97600 b!97609) bm!9894))

(assert (= (and b!97572 c!16514) b!97589))

(assert (= (and b!97572 (not c!16514)) b!97606))

(assert (= (and b!97589 c!16517) b!97601))

(assert (= (and b!97589 (not c!16517)) b!97608))

(assert (= (and b!97601 res!49130) b!97595))

(assert (= (and b!97595 res!49129) b!97593))

(assert (= (and b!97608 c!16513) b!97576))

(assert (= (and b!97608 (not c!16513)) b!97604))

(assert (= (and b!97576 res!49134) b!97596))

(assert (= (and b!97596 res!49140) b!97610))

(assert (= (and b!97604 c!16515) b!97583))

(assert (= (and b!97604 (not c!16515)) b!97586))

(assert (= (and b!97583 res!49135) b!97590))

(assert (= (and b!97590 res!49138) b!97597))

(assert (= (or b!97576 b!97583) bm!9913))

(assert (= (or b!97610 b!97597) bm!9909))

(assert (= (or b!97595 bm!9913) bm!9910))

(assert (= (or b!97601 b!97608) bm!9901))

(assert (= (and b!97606 c!16508) b!97578))

(assert (= (and b!97606 (not c!16508)) b!97574))

(assert (= (and b!97574 c!16516) b!97603))

(assert (= (and b!97574 (not c!16516)) b!97607))

(assert (= (and b!97607 c!16510) b!97587))

(assert (= (and b!97607 (not c!16510)) b!97599))

(assert (= (and b!97587 res!49128) b!97588))

(assert (= (and b!97588 res!49131) b!97598))

(assert (= (and b!97599 c!16509) b!97575))

(assert (= (and b!97599 (not c!16509)) b!97580))

(assert (= (and b!97575 res!49132) b!97581))

(assert (= (and b!97581 res!49139) b!97582))

(assert (= (and b!97580 c!16511) b!97594))

(assert (= (and b!97580 (not c!16511)) b!97591))

(assert (= (and b!97594 res!49137) b!97592))

(assert (= (and b!97592 res!49141) b!97573))

(assert (= (or b!97575 b!97594) bm!9897))

(assert (= (or b!97582 b!97573) bm!9893))

(assert (= (or b!97588 bm!9897) bm!9908))

(assert (= (or b!97587 b!97599) bm!9905))

(assert (= (or b!97578 b!97603) bm!9906))

(assert (= (or b!97589 b!97607) bm!9912))

(assert (= (or b!97608 b!97599) bm!9914))

(assert (= (or b!97601 b!97587) bm!9895))

(assert (= (or bm!9909 bm!9893) bm!9911))

(assert (= (or bm!9910 bm!9908) bm!9915))

(assert (= (or bm!9901 bm!9905) bm!9903))

(assert (= (or b!97589 b!97607) bm!9898))

(assert (= (or bm!9896 b!97607) bm!9907))

(assert (= (or bm!9892 bm!9912) bm!9902))

(assert (= (or bm!9894 b!97607) bm!9900))

(assert (= (and bm!9900 c!16519) b!97602))

(assert (= (and bm!9900 (not c!16519)) b!97611))

(assert (= (and d!25951 res!49133) b!97579))

(assert (= (and b!97579 c!16507) b!97585))

(assert (= (and b!97579 (not c!16507)) b!97605))

(assert (= (and b!97585 res!49136) b!97584))

(assert (= (or b!97585 b!97584 b!97605) bm!9904))

(assert (= (or b!97584 b!97605) bm!9899))

(assert (=> b!97609 m!106277))

(declare-fun m!106403 () Bool)

(assert (=> b!97609 m!106403))

(declare-fun m!106405 () Bool)

(assert (=> b!97593 m!106405))

(declare-fun m!106407 () Bool)

(assert (=> b!97581 m!106407))

(assert (=> b!97585 m!106251))

(declare-fun m!106409 () Bool)

(assert (=> b!97585 m!106409))

(assert (=> bm!9911 m!106251))

(declare-fun m!106411 () Bool)

(assert (=> bm!9911 m!106411))

(declare-fun m!106413 () Bool)

(assert (=> b!97607 m!106413))

(assert (=> b!97607 m!106251))

(declare-fun m!106415 () Bool)

(assert (=> b!97607 m!106415))

(assert (=> b!97607 m!106413))

(declare-fun m!106417 () Bool)

(assert (=> b!97607 m!106417))

(assert (=> b!97607 m!106251))

(assert (=> b!97607 m!106277))

(declare-fun m!106419 () Bool)

(assert (=> b!97607 m!106419))

(declare-fun m!106421 () Bool)

(assert (=> b!97607 m!106421))

(assert (=> b!97572 m!106251))

(declare-fun m!106423 () Bool)

(assert (=> b!97572 m!106423))

(declare-fun m!106425 () Bool)

(assert (=> b!97590 m!106425))

(assert (=> b!97611 m!106413))

(assert (=> b!97600 m!106277))

(declare-fun m!106427 () Bool)

(assert (=> b!97600 m!106427))

(declare-fun m!106429 () Bool)

(assert (=> bm!9900 m!106429))

(declare-fun m!106431 () Bool)

(assert (=> d!25951 m!106431))

(assert (=> d!25951 m!106283))

(declare-fun m!106433 () Bool)

(assert (=> bm!9904 m!106433))

(assert (=> bm!9895 m!106251))

(declare-fun m!106435 () Bool)

(assert (=> bm!9895 m!106435))

(declare-fun m!106437 () Bool)

(assert (=> b!97596 m!106437))

(assert (=> bm!9914 m!106251))

(declare-fun m!106439 () Bool)

(assert (=> bm!9914 m!106439))

(assert (=> bm!9899 m!106285))

(assert (=> bm!9903 m!106251))

(assert (=> bm!9903 m!106423))

(declare-fun m!106441 () Bool)

(assert (=> b!97592 m!106441))

(declare-fun m!106443 () Bool)

(assert (=> b!97584 m!106443))

(declare-fun m!106445 () Bool)

(assert (=> bm!9902 m!106445))

(assert (=> bm!9907 m!106417))

(declare-fun m!106447 () Bool)

(assert (=> bm!9907 m!106447))

(declare-fun m!106449 () Bool)

(assert (=> b!97598 m!106449))

(declare-fun m!106451 () Bool)

(assert (=> bm!9915 m!106451))

(declare-fun m!106453 () Bool)

(assert (=> bm!9898 m!106453))

(declare-fun m!106455 () Bool)

(assert (=> bm!9898 m!106455))

(assert (=> bm!9906 m!106251))

(assert (=> bm!9906 m!106277))

(declare-fun m!106457 () Bool)

(assert (=> bm!9906 m!106457))

(assert (=> b!97325 d!25951))

(declare-fun d!25953 () Bool)

(declare-fun c!16522 () Bool)

(assert (=> d!25953 (= c!16522 ((_ is ValueCellFull!971) (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!63664 () V!3153)

(assert (=> d!25953 (= (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63664)))

(declare-fun b!97616 () Bool)

(declare-fun get!1290 (ValueCell!971 V!3153) V!3153)

(assert (=> b!97616 (= e!63664 (get!1290 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97617 () Bool)

(declare-fun get!1291 (ValueCell!971 V!3153) V!3153)

(assert (=> b!97617 (= e!63664 (get!1291 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25953 c!16522) b!97616))

(assert (= (and d!25953 (not c!16522)) b!97617))

(assert (=> b!97616 m!106273))

(assert (=> b!97616 m!106275))

(declare-fun m!106459 () Bool)

(assert (=> b!97616 m!106459))

(assert (=> b!97617 m!106273))

(assert (=> b!97617 m!106275))

(declare-fun m!106461 () Bool)

(assert (=> b!97617 m!106461))

(assert (=> b!97325 d!25953))

(declare-fun d!25955 () Bool)

(assert (=> d!25955 (= (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992)))) (and (or (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000001111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000011111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000001111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000011111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000001111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000011111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000001111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000011111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000001111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000011111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000001111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000011111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000001111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000011111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000001111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000011111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000111111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00001111111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00011111111111111111111111111111) (= (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!97321 d!25955))

(declare-fun d!25957 () Bool)

(assert (=> d!25957 (= (map!1253 newMap!16) (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun bs!4023 () Bool)

(assert (= bs!4023 d!25957))

(assert (=> bs!4023 m!106413))

(assert (=> b!97329 d!25957))

(declare-fun b!97660 () Bool)

(declare-fun e!63693 () Bool)

(declare-fun call!9939 () Bool)

(assert (=> b!97660 (= e!63693 (not call!9939))))

(declare-fun b!97661 () Bool)

(declare-fun e!63698 () Bool)

(declare-fun e!63695 () Bool)

(assert (=> b!97661 (= e!63698 e!63695)))

(declare-fun res!49165 () Bool)

(assert (=> b!97661 (=> (not res!49165) (not e!63695))))

(declare-fun lt!48882 () ListLongMap!1499)

(assert (=> b!97661 (= res!49165 (contains!788 lt!48882 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97661 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97662 () Bool)

(declare-fun apply!92 (ListLongMap!1499 (_ BitVec 64)) V!3153)

(assert (=> b!97662 (= e!63695 (= (apply!92 lt!48882 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97662 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> b!97662 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun bm!9930 () Bool)

(declare-fun call!9933 () Bool)

(assert (=> bm!9930 (= call!9933 (contains!788 lt!48882 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97663 () Bool)

(declare-fun e!63700 () ListLongMap!1499)

(declare-fun call!9938 () ListLongMap!1499)

(assert (=> b!97663 (= e!63700 (+!130 call!9938 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97664 () Bool)

(declare-fun e!63692 () Unit!2917)

(declare-fun lt!48897 () Unit!2917)

(assert (=> b!97664 (= e!63692 lt!48897)))

(declare-fun lt!48894 () ListLongMap!1499)

(declare-fun getCurrentListMapNoExtraKeys!95 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) ListLongMap!1499)

(assert (=> b!97664 (= lt!48894 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun lt!48890 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48890 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48888 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48888 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48884 () Unit!2917)

(declare-fun addStillContains!68 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> b!97664 (= lt!48884 (addStillContains!68 lt!48894 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48888))))

(assert (=> b!97664 (contains!788 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48888)))

(declare-fun lt!48893 () Unit!2917)

(assert (=> b!97664 (= lt!48893 lt!48884)))

(declare-fun lt!48883 () ListLongMap!1499)

(assert (=> b!97664 (= lt!48883 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun lt!48895 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48895 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48885 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48885 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48891 () Unit!2917)

(declare-fun addApplyDifferent!68 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> b!97664 (= lt!48891 (addApplyDifferent!68 lt!48883 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48885))))

(assert (=> b!97664 (= (apply!92 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48885) (apply!92 lt!48883 lt!48885))))

(declare-fun lt!48887 () Unit!2917)

(assert (=> b!97664 (= lt!48887 lt!48891)))

(declare-fun lt!48898 () ListLongMap!1499)

(assert (=> b!97664 (= lt!48898 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun lt!48881 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48881 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48892 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48892 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48880 () Unit!2917)

(assert (=> b!97664 (= lt!48880 (addApplyDifferent!68 lt!48898 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48892))))

(assert (=> b!97664 (= (apply!92 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48892) (apply!92 lt!48898 lt!48892))))

(declare-fun lt!48878 () Unit!2917)

(assert (=> b!97664 (= lt!48878 lt!48880)))

(declare-fun lt!48889 () ListLongMap!1499)

(assert (=> b!97664 (= lt!48889 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun lt!48879 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48879 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48886 () (_ BitVec 64))

(assert (=> b!97664 (= lt!48886 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97664 (= lt!48897 (addApplyDifferent!68 lt!48889 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48886))))

(assert (=> b!97664 (= (apply!92 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48886) (apply!92 lt!48889 lt!48886))))

(declare-fun b!97665 () Bool)

(declare-fun c!16535 () Bool)

(assert (=> b!97665 (= c!16535 (and (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63691 () ListLongMap!1499)

(declare-fun e!63696 () ListLongMap!1499)

(assert (=> b!97665 (= e!63691 e!63696)))

(declare-fun b!97666 () Bool)

(declare-fun e!63702 () Bool)

(assert (=> b!97666 (= e!63702 (= (apply!92 lt!48882 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97667 () Bool)

(declare-fun e!63694 () Bool)

(assert (=> b!97667 (= e!63694 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97668 () Bool)

(declare-fun res!49166 () Bool)

(declare-fun e!63701 () Bool)

(assert (=> b!97668 (=> (not res!49166) (not e!63701))))

(declare-fun e!63703 () Bool)

(assert (=> b!97668 (= res!49166 e!63703)))

(declare-fun c!16538 () Bool)

(assert (=> b!97668 (= c!16538 (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!97669 () Bool)

(declare-fun call!9937 () ListLongMap!1499)

(assert (=> b!97669 (= e!63691 call!9937)))

(declare-fun bm!9931 () Bool)

(assert (=> bm!9931 (= call!9937 call!9938)))

(declare-fun b!97670 () Bool)

(assert (=> b!97670 (= e!63703 (not call!9933))))

(declare-fun b!97671 () Bool)

(declare-fun e!63699 () Bool)

(assert (=> b!97671 (= e!63699 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!9932 () Bool)

(declare-fun call!9935 () ListLongMap!1499)

(declare-fun call!9934 () ListLongMap!1499)

(assert (=> bm!9932 (= call!9935 call!9934)))

(declare-fun bm!9933 () Bool)

(assert (=> bm!9933 (= call!9939 (contains!788 lt!48882 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97672 () Bool)

(assert (=> b!97672 (= e!63701 e!63693)))

(declare-fun c!16537 () Bool)

(assert (=> b!97672 (= c!16537 (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97673 () Bool)

(assert (=> b!97673 (= e!63703 e!63702)))

(declare-fun res!49167 () Bool)

(assert (=> b!97673 (= res!49167 call!9933)))

(assert (=> b!97673 (=> (not res!49167) (not e!63702))))

(declare-fun b!97674 () Bool)

(declare-fun e!63697 () Bool)

(assert (=> b!97674 (= e!63693 e!63697)))

(declare-fun res!49164 () Bool)

(assert (=> b!97674 (= res!49164 call!9939)))

(assert (=> b!97674 (=> (not res!49164) (not e!63697))))

(declare-fun b!97675 () Bool)

(declare-fun res!49160 () Bool)

(assert (=> b!97675 (=> (not res!49160) (not e!63701))))

(assert (=> b!97675 (= res!49160 e!63698)))

(declare-fun res!49161 () Bool)

(assert (=> b!97675 (=> res!49161 e!63698)))

(assert (=> b!97675 (= res!49161 (not e!63699))))

(declare-fun res!49163 () Bool)

(assert (=> b!97675 (=> (not res!49163) (not e!63699))))

(assert (=> b!97675 (= res!49163 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun bm!9934 () Bool)

(declare-fun call!9936 () ListLongMap!1499)

(assert (=> bm!9934 (= call!9936 call!9935)))

(declare-fun b!97676 () Bool)

(assert (=> b!97676 (= e!63697 (= (apply!92 lt!48882 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97677 () Bool)

(assert (=> b!97677 (= e!63700 e!63691)))

(declare-fun c!16536 () Bool)

(assert (=> b!97677 (= c!16536 (and (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9935 () Bool)

(assert (=> bm!9935 (= call!9934 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97678 () Bool)

(declare-fun Unit!2930 () Unit!2917)

(assert (=> b!97678 (= e!63692 Unit!2930)))

(declare-fun b!97679 () Bool)

(assert (=> b!97679 (= e!63696 call!9936)))

(declare-fun b!97680 () Bool)

(assert (=> b!97680 (= e!63696 call!9937)))

(declare-fun bm!9936 () Bool)

(declare-fun c!16540 () Bool)

(assert (=> bm!9936 (= call!9938 (+!130 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun d!25959 () Bool)

(assert (=> d!25959 e!63701))

(declare-fun res!49168 () Bool)

(assert (=> d!25959 (=> (not res!49168) (not e!63701))))

(assert (=> d!25959 (= res!49168 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun lt!48896 () ListLongMap!1499)

(assert (=> d!25959 (= lt!48882 lt!48896)))

(declare-fun lt!48877 () Unit!2917)

(assert (=> d!25959 (= lt!48877 e!63692)))

(declare-fun c!16539 () Bool)

(assert (=> d!25959 (= c!16539 e!63694)))

(declare-fun res!49162 () Bool)

(assert (=> d!25959 (=> (not res!49162) (not e!63694))))

(assert (=> d!25959 (= res!49162 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!25959 (= lt!48896 e!63700)))

(assert (=> d!25959 (= c!16540 (and (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25959 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992))))))

(assert (=> d!25959 (= (getCurrentListMap!455 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) lt!48882)))

(assert (= (and d!25959 c!16540) b!97663))

(assert (= (and d!25959 (not c!16540)) b!97677))

(assert (= (and b!97677 c!16536) b!97669))

(assert (= (and b!97677 (not c!16536)) b!97665))

(assert (= (and b!97665 c!16535) b!97680))

(assert (= (and b!97665 (not c!16535)) b!97679))

(assert (= (or b!97680 b!97679) bm!9934))

(assert (= (or b!97669 bm!9934) bm!9932))

(assert (= (or b!97669 b!97680) bm!9931))

(assert (= (or b!97663 bm!9932) bm!9935))

(assert (= (or b!97663 bm!9931) bm!9936))

(assert (= (and d!25959 res!49162) b!97667))

(assert (= (and d!25959 c!16539) b!97664))

(assert (= (and d!25959 (not c!16539)) b!97678))

(assert (= (and d!25959 res!49168) b!97675))

(assert (= (and b!97675 res!49163) b!97671))

(assert (= (and b!97675 (not res!49161)) b!97661))

(assert (= (and b!97661 res!49165) b!97662))

(assert (= (and b!97675 res!49160) b!97668))

(assert (= (and b!97668 c!16538) b!97673))

(assert (= (and b!97668 (not c!16538)) b!97670))

(assert (= (and b!97673 res!49167) b!97666))

(assert (= (or b!97673 b!97670) bm!9930))

(assert (= (and b!97668 res!49166) b!97672))

(assert (= (and b!97672 c!16537) b!97674))

(assert (= (and b!97672 (not c!16537)) b!97660))

(assert (= (and b!97674 res!49164) b!97676))

(assert (= (or b!97674 b!97660) bm!9933))

(declare-fun b_lambda!4333 () Bool)

(assert (=> (not b_lambda!4333) (not b!97662)))

(assert (=> b!97662 t!5507))

(declare-fun b_and!5989 () Bool)

(assert (= b_and!5969 (and (=> t!5507 result!3251) b_and!5989)))

(assert (=> b!97662 t!5509))

(declare-fun b_and!5991 () Bool)

(assert (= b_and!5971 (and (=> t!5509 result!3255) b_and!5991)))

(declare-fun m!106463 () Bool)

(assert (=> b!97666 m!106463))

(declare-fun m!106465 () Bool)

(assert (=> bm!9936 m!106465))

(declare-fun m!106467 () Bool)

(assert (=> b!97663 m!106467))

(assert (=> b!97661 m!106381))

(assert (=> b!97661 m!106381))

(declare-fun m!106469 () Bool)

(assert (=> b!97661 m!106469))

(assert (=> b!97662 m!106381))

(declare-fun m!106471 () Bool)

(assert (=> b!97662 m!106471))

(assert (=> b!97662 m!106275))

(assert (=> b!97662 m!106381))

(declare-fun m!106473 () Bool)

(assert (=> b!97662 m!106473))

(assert (=> b!97662 m!106471))

(assert (=> b!97662 m!106275))

(declare-fun m!106475 () Bool)

(assert (=> b!97662 m!106475))

(declare-fun m!106477 () Bool)

(assert (=> bm!9935 m!106477))

(declare-fun m!106479 () Bool)

(assert (=> b!97664 m!106479))

(declare-fun m!106481 () Bool)

(assert (=> b!97664 m!106481))

(assert (=> b!97664 m!106381))

(declare-fun m!106483 () Bool)

(assert (=> b!97664 m!106483))

(assert (=> b!97664 m!106477))

(declare-fun m!106485 () Bool)

(assert (=> b!97664 m!106485))

(declare-fun m!106487 () Bool)

(assert (=> b!97664 m!106487))

(declare-fun m!106489 () Bool)

(assert (=> b!97664 m!106489))

(declare-fun m!106491 () Bool)

(assert (=> b!97664 m!106491))

(declare-fun m!106493 () Bool)

(assert (=> b!97664 m!106493))

(declare-fun m!106495 () Bool)

(assert (=> b!97664 m!106495))

(declare-fun m!106497 () Bool)

(assert (=> b!97664 m!106497))

(declare-fun m!106499 () Bool)

(assert (=> b!97664 m!106499))

(declare-fun m!106501 () Bool)

(assert (=> b!97664 m!106501))

(assert (=> b!97664 m!106501))

(declare-fun m!106503 () Bool)

(assert (=> b!97664 m!106503))

(assert (=> b!97664 m!106493))

(declare-fun m!106505 () Bool)

(assert (=> b!97664 m!106505))

(declare-fun m!106507 () Bool)

(assert (=> b!97664 m!106507))

(assert (=> b!97664 m!106479))

(assert (=> b!97664 m!106485))

(declare-fun m!106509 () Bool)

(assert (=> bm!9933 m!106509))

(assert (=> d!25959 m!106267))

(declare-fun m!106511 () Bool)

(assert (=> bm!9930 m!106511))

(assert (=> b!97671 m!106381))

(assert (=> b!97671 m!106381))

(declare-fun m!106513 () Bool)

(assert (=> b!97671 m!106513))

(declare-fun m!106515 () Bool)

(assert (=> b!97676 m!106515))

(assert (=> b!97667 m!106381))

(assert (=> b!97667 m!106381))

(assert (=> b!97667 m!106513))

(assert (=> b!97329 d!25959))

(declare-fun d!25961 () Bool)

(declare-fun res!49175 () Bool)

(declare-fun e!63706 () Bool)

(assert (=> d!25961 (=> (not res!49175) (not e!63706))))

(declare-fun simpleValid!68 (LongMapFixedSize!850) Bool)

(assert (=> d!25961 (= res!49175 (simpleValid!68 newMap!16))))

(assert (=> d!25961 (= (valid!392 newMap!16) e!63706)))

(declare-fun b!97687 () Bool)

(declare-fun res!49176 () Bool)

(assert (=> b!97687 (=> (not res!49176) (not e!63706))))

(declare-fun arrayCountValidKeys!0 (array!4223 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!97687 (= res!49176 (= (arrayCountValidKeys!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (_size!474 newMap!16)))))

(declare-fun b!97688 () Bool)

(declare-fun res!49177 () Bool)

(assert (=> b!97688 (=> (not res!49177) (not e!63706))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4223 (_ BitVec 32)) Bool)

(assert (=> b!97688 (= res!49177 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun b!97689 () Bool)

(assert (=> b!97689 (= e!63706 (arrayNoDuplicates!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 Nil!1562))))

(assert (= (and d!25961 res!49175) b!97687))

(assert (= (and b!97687 res!49176) b!97688))

(assert (= (and b!97688 res!49177) b!97689))

(declare-fun m!106517 () Bool)

(assert (=> d!25961 m!106517))

(declare-fun m!106519 () Bool)

(assert (=> b!97687 m!106519))

(declare-fun m!106521 () Bool)

(assert (=> b!97688 m!106521))

(declare-fun m!106523 () Bool)

(assert (=> b!97689 m!106523))

(assert (=> b!97317 d!25961))

(declare-fun d!25963 () Bool)

(assert (=> d!25963 (= (array_inv!1235 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvsge (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97322 d!25963))

(declare-fun d!25965 () Bool)

(assert (=> d!25965 (= (array_inv!1236 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvsge (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97322 d!25965))

(declare-fun mapIsEmpty!3755 () Bool)

(declare-fun mapRes!3755 () Bool)

(assert (=> mapIsEmpty!3755 mapRes!3755))

(declare-fun mapNonEmpty!3755 () Bool)

(declare-fun tp!9587 () Bool)

(declare-fun e!63712 () Bool)

(assert (=> mapNonEmpty!3755 (= mapRes!3755 (and tp!9587 e!63712))))

(declare-fun mapValue!3755 () ValueCell!971)

(declare-fun mapRest!3755 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapKey!3755 () (_ BitVec 32))

(assert (=> mapNonEmpty!3755 (= mapRest!3739 (store mapRest!3755 mapKey!3755 mapValue!3755))))

(declare-fun condMapEmpty!3755 () Bool)

(declare-fun mapDefault!3755 () ValueCell!971)

(assert (=> mapNonEmpty!3739 (= condMapEmpty!3755 (= mapRest!3739 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3755)))))

(declare-fun e!63711 () Bool)

(assert (=> mapNonEmpty!3739 (= tp!9557 (and e!63711 mapRes!3755))))

(declare-fun b!97696 () Bool)

(assert (=> b!97696 (= e!63712 tp_is_empty!2629)))

(declare-fun b!97697 () Bool)

(assert (=> b!97697 (= e!63711 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3739 condMapEmpty!3755) mapIsEmpty!3755))

(assert (= (and mapNonEmpty!3739 (not condMapEmpty!3755)) mapNonEmpty!3755))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!971) mapValue!3755)) b!97696))

(assert (= (and mapNonEmpty!3739 ((_ is ValueCellFull!971) mapDefault!3755)) b!97697))

(declare-fun m!106525 () Bool)

(assert (=> mapNonEmpty!3755 m!106525))

(declare-fun mapIsEmpty!3756 () Bool)

(declare-fun mapRes!3756 () Bool)

(assert (=> mapIsEmpty!3756 mapRes!3756))

(declare-fun mapNonEmpty!3756 () Bool)

(declare-fun tp!9588 () Bool)

(declare-fun e!63714 () Bool)

(assert (=> mapNonEmpty!3756 (= mapRes!3756 (and tp!9588 e!63714))))

(declare-fun mapKey!3756 () (_ BitVec 32))

(declare-fun mapValue!3756 () ValueCell!971)

(declare-fun mapRest!3756 () (Array (_ BitVec 32) ValueCell!971))

(assert (=> mapNonEmpty!3756 (= mapRest!3740 (store mapRest!3756 mapKey!3756 mapValue!3756))))

(declare-fun condMapEmpty!3756 () Bool)

(declare-fun mapDefault!3756 () ValueCell!971)

(assert (=> mapNonEmpty!3740 (= condMapEmpty!3756 (= mapRest!3740 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3756)))))

(declare-fun e!63713 () Bool)

(assert (=> mapNonEmpty!3740 (= tp!9560 (and e!63713 mapRes!3756))))

(declare-fun b!97698 () Bool)

(assert (=> b!97698 (= e!63714 tp_is_empty!2629)))

(declare-fun b!97699 () Bool)

(assert (=> b!97699 (= e!63713 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3740 condMapEmpty!3756) mapIsEmpty!3756))

(assert (= (and mapNonEmpty!3740 (not condMapEmpty!3756)) mapNonEmpty!3756))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!971) mapValue!3756)) b!97698))

(assert (= (and mapNonEmpty!3740 ((_ is ValueCellFull!971) mapDefault!3756)) b!97699))

(declare-fun m!106527 () Bool)

(assert (=> mapNonEmpty!3756 m!106527))

(declare-fun b_lambda!4335 () Bool)

(assert (= b_lambda!4333 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4335)))

(check-sat b_and!5991 (not b!97466) (not b!97617) (not mapNonEmpty!3756) (not d!25937) (not b!97607) (not bm!9903) b_and!5989 (not bm!9907) (not d!25957) (not d!25947) (not b!97616) (not d!25943) (not bm!9911) (not b!97688) (not b_next!2427) (not b!97482) (not b!97663) (not d!25951) (not b!97664) (not b_lambda!4335) (not d!25959) (not b_next!2425) (not b!97480) (not b!97481) (not bm!9914) (not bm!9898) (not bm!9843) (not b!97676) (not b!97585) (not bm!9935) (not d!25961) (not bm!9900) (not b!97611) (not bm!9899) (not bm!9930) (not b!97609) (not b!97662) (not b!97666) (not b!97461) (not bm!9936) (not b_lambda!4331) (not bm!9906) tp_is_empty!2629 (not bm!9902) (not bm!9904) (not d!25939) (not b!97584) (not b!97687) (not b!97491) (not bm!9915) (not b!97661) (not mapNonEmpty!3755) (not b!97489) (not b!97671) (not d!25949) (not b!97667) (not bm!9933) (not b!97689) (not bm!9895) (not b!97572) (not b!97600))
(check-sat b_and!5989 b_and!5991 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun d!25967 () Bool)

(declare-fun e!63717 () Bool)

(assert (=> d!25967 e!63717))

(declare-fun c!16543 () Bool)

(assert (=> d!25967 (= c!16543 (and (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!25967 true))

(declare-fun _$29!126 () Unit!2917)

(assert (=> d!25967 (= (choose!594 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) _$29!126)))

(declare-fun b!97704 () Bool)

(assert (=> b!97704 (= e!63717 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97705 () Bool)

(assert (=> b!97705 (= e!63717 (ite (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25967 c!16543) b!97704))

(assert (= (and d!25967 (not c!16543)) b!97705))

(assert (=> b!97704 m!106251))

(assert (=> b!97704 m!106255))

(assert (=> d!25943 d!25967))

(assert (=> d!25943 d!25955))

(declare-fun b!97718 () Bool)

(declare-fun e!63725 () SeekEntryResult!247)

(declare-fun lt!48907 () SeekEntryResult!247)

(assert (=> b!97718 (= e!63725 (Found!247 (index!3133 lt!48907)))))

(declare-fun b!97719 () Bool)

(declare-fun c!16550 () Bool)

(declare-fun lt!48905 () (_ BitVec 64))

(assert (=> b!97719 (= c!16550 (= lt!48905 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63724 () SeekEntryResult!247)

(assert (=> b!97719 (= e!63725 e!63724)))

(declare-fun b!97720 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4223 (_ BitVec 32)) SeekEntryResult!247)

(assert (=> b!97720 (= e!63724 (seekKeyOrZeroReturnVacant!0 (x!12953 lt!48907) (index!3133 lt!48907) (index!3133 lt!48907) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun lt!48906 () SeekEntryResult!247)

(declare-fun d!25969 () Bool)

(assert (=> d!25969 (and (or ((_ is Undefined!247) lt!48906) (not ((_ is Found!247) lt!48906)) (and (bvsge (index!3132 lt!48906) #b00000000000000000000000000000000) (bvslt (index!3132 lt!48906) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!48906) ((_ is Found!247) lt!48906) (not ((_ is MissingZero!247) lt!48906)) (and (bvsge (index!3131 lt!48906) #b00000000000000000000000000000000) (bvslt (index!3131 lt!48906) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!48906) ((_ is Found!247) lt!48906) ((_ is MissingZero!247) lt!48906) (not ((_ is MissingVacant!247) lt!48906)) (and (bvsge (index!3134 lt!48906) #b00000000000000000000000000000000) (bvslt (index!3134 lt!48906) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!48906) (ite ((_ is Found!247) lt!48906) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48906)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite ((_ is MissingZero!247) lt!48906) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!48906)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!247) lt!48906) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!48906)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63726 () SeekEntryResult!247)

(assert (=> d!25969 (= lt!48906 e!63726)))

(declare-fun c!16551 () Bool)

(assert (=> d!25969 (= c!16551 (and ((_ is Intermediate!247) lt!48907) (undefined!1059 lt!48907)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4223 (_ BitVec 32)) SeekEntryResult!247)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!25969 (= lt!48907 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (=> d!25969 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25969 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)) lt!48906)))

(declare-fun b!97721 () Bool)

(assert (=> b!97721 (= e!63726 Undefined!247)))

(declare-fun b!97722 () Bool)

(assert (=> b!97722 (= e!63724 (MissingZero!247 (index!3133 lt!48907)))))

(declare-fun b!97723 () Bool)

(assert (=> b!97723 (= e!63726 e!63725)))

(assert (=> b!97723 (= lt!48905 (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!48907)))))

(declare-fun c!16552 () Bool)

(assert (=> b!97723 (= c!16552 (= lt!48905 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!25969 c!16551) b!97721))

(assert (= (and d!25969 (not c!16551)) b!97723))

(assert (= (and b!97723 c!16552) b!97718))

(assert (= (and b!97723 (not c!16552)) b!97719))

(assert (= (and b!97719 c!16550) b!97722))

(assert (= (and b!97719 (not c!16550)) b!97720))

(assert (=> b!97720 m!106251))

(declare-fun m!106529 () Bool)

(assert (=> b!97720 m!106529))

(declare-fun m!106531 () Bool)

(assert (=> d!25969 m!106531))

(assert (=> d!25969 m!106251))

(declare-fun m!106533 () Bool)

(assert (=> d!25969 m!106533))

(declare-fun m!106535 () Bool)

(assert (=> d!25969 m!106535))

(declare-fun m!106537 () Bool)

(assert (=> d!25969 m!106537))

(declare-fun m!106539 () Bool)

(assert (=> d!25969 m!106539))

(assert (=> d!25969 m!106533))

(assert (=> d!25969 m!106251))

(declare-fun m!106541 () Bool)

(assert (=> d!25969 m!106541))

(declare-fun m!106543 () Bool)

(assert (=> b!97723 m!106543))

(assert (=> b!97572 d!25969))

(assert (=> d!25939 d!25945))

(declare-fun d!25971 () Bool)

(assert (=> d!25971 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) from!355 Nil!1562)))

(assert (=> d!25971 true))

(declare-fun _$71!132 () Unit!2917)

(assert (=> d!25971 (= (choose!39 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!132)))

(declare-fun bs!4024 () Bool)

(assert (= bs!4024 d!25971))

(assert (=> bs!4024 m!106249))

(assert (=> d!25939 d!25971))

(declare-fun b!97724 () Bool)

(declare-fun e!63729 () Bool)

(declare-fun call!9946 () Bool)

(assert (=> b!97724 (= e!63729 (not call!9946))))

(declare-fun b!97725 () Bool)

(declare-fun e!63734 () Bool)

(declare-fun e!63731 () Bool)

(assert (=> b!97725 (= e!63734 e!63731)))

(declare-fun res!49183 () Bool)

(assert (=> b!97725 (=> (not res!49183) (not e!63731))))

(declare-fun lt!48913 () ListLongMap!1499)

(assert (=> b!97725 (= res!49183 (contains!788 lt!48913 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97725 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!97726 () Bool)

(assert (=> b!97726 (= e!63731 (= (apply!92 lt!48913 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97726 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (_values!2463 newMap!16))))))

(assert (=> b!97726 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9937 () Bool)

(declare-fun call!9940 () Bool)

(assert (=> bm!9937 (= call!9940 (contains!788 lt!48913 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97727 () Bool)

(declare-fun e!63736 () ListLongMap!1499)

(declare-fun call!9945 () ListLongMap!1499)

(assert (=> b!97727 (= e!63736 (+!130 call!9945 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!97728 () Bool)

(declare-fun e!63728 () Unit!2917)

(declare-fun lt!48928 () Unit!2917)

(assert (=> b!97728 (= e!63728 lt!48928)))

(declare-fun lt!48925 () ListLongMap!1499)

(assert (=> b!97728 (= lt!48925 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48921 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48921 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48919 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48919 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48915 () Unit!2917)

(assert (=> b!97728 (= lt!48915 (addStillContains!68 lt!48925 lt!48921 (zeroValue!2363 newMap!16) lt!48919))))

(assert (=> b!97728 (contains!788 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) lt!48919)))

(declare-fun lt!48924 () Unit!2917)

(assert (=> b!97728 (= lt!48924 lt!48915)))

(declare-fun lt!48914 () ListLongMap!1499)

(assert (=> b!97728 (= lt!48914 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48926 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48926 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48916 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48916 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48922 () Unit!2917)

(assert (=> b!97728 (= lt!48922 (addApplyDifferent!68 lt!48914 lt!48926 (minValue!2363 newMap!16) lt!48916))))

(assert (=> b!97728 (= (apply!92 (+!130 lt!48914 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) lt!48916) (apply!92 lt!48914 lt!48916))))

(declare-fun lt!48918 () Unit!2917)

(assert (=> b!97728 (= lt!48918 lt!48922)))

(declare-fun lt!48929 () ListLongMap!1499)

(assert (=> b!97728 (= lt!48929 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48912 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48912 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48923 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48923 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48911 () Unit!2917)

(assert (=> b!97728 (= lt!48911 (addApplyDifferent!68 lt!48929 lt!48912 (zeroValue!2363 newMap!16) lt!48923))))

(assert (=> b!97728 (= (apply!92 (+!130 lt!48929 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) lt!48923) (apply!92 lt!48929 lt!48923))))

(declare-fun lt!48909 () Unit!2917)

(assert (=> b!97728 (= lt!48909 lt!48911)))

(declare-fun lt!48920 () ListLongMap!1499)

(assert (=> b!97728 (= lt!48920 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48910 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48910 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48917 () (_ BitVec 64))

(assert (=> b!97728 (= lt!48917 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97728 (= lt!48928 (addApplyDifferent!68 lt!48920 lt!48910 (minValue!2363 newMap!16) lt!48917))))

(assert (=> b!97728 (= (apply!92 (+!130 lt!48920 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) lt!48917) (apply!92 lt!48920 lt!48917))))

(declare-fun b!97729 () Bool)

(declare-fun c!16553 () Bool)

(assert (=> b!97729 (= c!16553 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63727 () ListLongMap!1499)

(declare-fun e!63732 () ListLongMap!1499)

(assert (=> b!97729 (= e!63727 e!63732)))

(declare-fun b!97730 () Bool)

(declare-fun e!63738 () Bool)

(assert (=> b!97730 (= e!63738 (= (apply!92 lt!48913 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!97731 () Bool)

(declare-fun e!63730 () Bool)

(assert (=> b!97731 (= e!63730 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97732 () Bool)

(declare-fun res!49184 () Bool)

(declare-fun e!63737 () Bool)

(assert (=> b!97732 (=> (not res!49184) (not e!63737))))

(declare-fun e!63739 () Bool)

(assert (=> b!97732 (= res!49184 e!63739)))

(declare-fun c!16556 () Bool)

(assert (=> b!97732 (= c!16556 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!97733 () Bool)

(declare-fun call!9944 () ListLongMap!1499)

(assert (=> b!97733 (= e!63727 call!9944)))

(declare-fun bm!9938 () Bool)

(assert (=> bm!9938 (= call!9944 call!9945)))

(declare-fun b!97734 () Bool)

(assert (=> b!97734 (= e!63739 (not call!9940))))

(declare-fun b!97735 () Bool)

(declare-fun e!63735 () Bool)

(assert (=> b!97735 (= e!63735 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9939 () Bool)

(declare-fun call!9942 () ListLongMap!1499)

(declare-fun call!9941 () ListLongMap!1499)

(assert (=> bm!9939 (= call!9942 call!9941)))

(declare-fun bm!9940 () Bool)

(assert (=> bm!9940 (= call!9946 (contains!788 lt!48913 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97736 () Bool)

(assert (=> b!97736 (= e!63737 e!63729)))

(declare-fun c!16555 () Bool)

(assert (=> b!97736 (= c!16555 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97737 () Bool)

(assert (=> b!97737 (= e!63739 e!63738)))

(declare-fun res!49185 () Bool)

(assert (=> b!97737 (= res!49185 call!9940)))

(assert (=> b!97737 (=> (not res!49185) (not e!63738))))

(declare-fun b!97738 () Bool)

(declare-fun e!63733 () Bool)

(assert (=> b!97738 (= e!63729 e!63733)))

(declare-fun res!49182 () Bool)

(assert (=> b!97738 (= res!49182 call!9946)))

(assert (=> b!97738 (=> (not res!49182) (not e!63733))))

(declare-fun b!97739 () Bool)

(declare-fun res!49178 () Bool)

(assert (=> b!97739 (=> (not res!49178) (not e!63737))))

(assert (=> b!97739 (= res!49178 e!63734)))

(declare-fun res!49179 () Bool)

(assert (=> b!97739 (=> res!49179 e!63734)))

(assert (=> b!97739 (= res!49179 (not e!63735))))

(declare-fun res!49181 () Bool)

(assert (=> b!97739 (=> (not res!49181) (not e!63735))))

(assert (=> b!97739 (= res!49181 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9941 () Bool)

(declare-fun call!9943 () ListLongMap!1499)

(assert (=> bm!9941 (= call!9943 call!9942)))

(declare-fun b!97740 () Bool)

(assert (=> b!97740 (= e!63733 (= (apply!92 lt!48913 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!97741 () Bool)

(assert (=> b!97741 (= e!63736 e!63727)))

(declare-fun c!16554 () Bool)

(assert (=> b!97741 (= c!16554 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9942 () Bool)

(assert (=> bm!9942 (= call!9941 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97742 () Bool)

(declare-fun Unit!2931 () Unit!2917)

(assert (=> b!97742 (= e!63728 Unit!2931)))

(declare-fun b!97743 () Bool)

(assert (=> b!97743 (= e!63732 call!9943)))

(declare-fun b!97744 () Bool)

(assert (=> b!97744 (= e!63732 call!9944)))

(declare-fun bm!9943 () Bool)

(declare-fun c!16558 () Bool)

(assert (=> bm!9943 (= call!9945 (+!130 (ite c!16558 call!9941 (ite c!16554 call!9942 call!9943)) (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!25973 () Bool)

(assert (=> d!25973 e!63737))

(declare-fun res!49186 () Bool)

(assert (=> d!25973 (=> (not res!49186) (not e!63737))))

(assert (=> d!25973 (= res!49186 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!48927 () ListLongMap!1499)

(assert (=> d!25973 (= lt!48913 lt!48927)))

(declare-fun lt!48908 () Unit!2917)

(assert (=> d!25973 (= lt!48908 e!63728)))

(declare-fun c!16557 () Bool)

(assert (=> d!25973 (= c!16557 e!63730)))

(declare-fun res!49180 () Bool)

(assert (=> d!25973 (=> (not res!49180) (not e!63730))))

(assert (=> d!25973 (= res!49180 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!25973 (= lt!48927 e!63736)))

(assert (=> d!25973 (= c!16558 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25973 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25973 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!48913)))

(assert (= (and d!25973 c!16558) b!97727))

(assert (= (and d!25973 (not c!16558)) b!97741))

(assert (= (and b!97741 c!16554) b!97733))

(assert (= (and b!97741 (not c!16554)) b!97729))

(assert (= (and b!97729 c!16553) b!97744))

(assert (= (and b!97729 (not c!16553)) b!97743))

(assert (= (or b!97744 b!97743) bm!9941))

(assert (= (or b!97733 bm!9941) bm!9939))

(assert (= (or b!97733 b!97744) bm!9938))

(assert (= (or b!97727 bm!9939) bm!9942))

(assert (= (or b!97727 bm!9938) bm!9943))

(assert (= (and d!25973 res!49180) b!97731))

(assert (= (and d!25973 c!16557) b!97728))

(assert (= (and d!25973 (not c!16557)) b!97742))

(assert (= (and d!25973 res!49186) b!97739))

(assert (= (and b!97739 res!49181) b!97735))

(assert (= (and b!97739 (not res!49179)) b!97725))

(assert (= (and b!97725 res!49183) b!97726))

(assert (= (and b!97739 res!49178) b!97732))

(assert (= (and b!97732 c!16556) b!97737))

(assert (= (and b!97732 (not c!16556)) b!97734))

(assert (= (and b!97737 res!49185) b!97730))

(assert (= (or b!97737 b!97734) bm!9937))

(assert (= (and b!97732 res!49184) b!97736))

(assert (= (and b!97736 c!16555) b!97738))

(assert (= (and b!97736 (not c!16555)) b!97724))

(assert (= (and b!97738 res!49182) b!97740))

(assert (= (or b!97738 b!97724) bm!9940))

(declare-fun b_lambda!4337 () Bool)

(assert (=> (not b_lambda!4337) (not b!97726)))

(declare-fun tb!1925 () Bool)

(declare-fun t!5523 () Bool)

(assert (=> (and b!97322 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16)) t!5523) tb!1925))

(declare-fun result!3271 () Bool)

(assert (=> tb!1925 (= result!3271 tp_is_empty!2629)))

(assert (=> b!97726 t!5523))

(declare-fun b_and!5993 () Bool)

(assert (= b_and!5989 (and (=> t!5523 result!3271) b_and!5993)))

(declare-fun t!5525 () Bool)

(declare-fun tb!1927 () Bool)

(assert (=> (and b!97318 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 newMap!16)) t!5525) tb!1927))

(declare-fun result!3273 () Bool)

(assert (= result!3273 result!3271))

(assert (=> b!97726 t!5525))

(declare-fun b_and!5995 () Bool)

(assert (= b_and!5991 (and (=> t!5525 result!3273) b_and!5995)))

(declare-fun m!106545 () Bool)

(assert (=> b!97730 m!106545))

(declare-fun m!106547 () Bool)

(assert (=> bm!9943 m!106547))

(declare-fun m!106549 () Bool)

(assert (=> b!97727 m!106549))

(declare-fun m!106551 () Bool)

(assert (=> b!97725 m!106551))

(assert (=> b!97725 m!106551))

(declare-fun m!106553 () Bool)

(assert (=> b!97725 m!106553))

(assert (=> b!97726 m!106551))

(declare-fun m!106555 () Bool)

(assert (=> b!97726 m!106555))

(declare-fun m!106557 () Bool)

(assert (=> b!97726 m!106557))

(assert (=> b!97726 m!106551))

(declare-fun m!106559 () Bool)

(assert (=> b!97726 m!106559))

(assert (=> b!97726 m!106555))

(assert (=> b!97726 m!106557))

(declare-fun m!106561 () Bool)

(assert (=> b!97726 m!106561))

(declare-fun m!106563 () Bool)

(assert (=> bm!9942 m!106563))

(declare-fun m!106565 () Bool)

(assert (=> b!97728 m!106565))

(declare-fun m!106567 () Bool)

(assert (=> b!97728 m!106567))

(assert (=> b!97728 m!106551))

(declare-fun m!106569 () Bool)

(assert (=> b!97728 m!106569))

(assert (=> b!97728 m!106563))

(declare-fun m!106571 () Bool)

(assert (=> b!97728 m!106571))

(declare-fun m!106573 () Bool)

(assert (=> b!97728 m!106573))

(declare-fun m!106575 () Bool)

(assert (=> b!97728 m!106575))

(declare-fun m!106577 () Bool)

(assert (=> b!97728 m!106577))

(declare-fun m!106579 () Bool)

(assert (=> b!97728 m!106579))

(declare-fun m!106581 () Bool)

(assert (=> b!97728 m!106581))

(declare-fun m!106583 () Bool)

(assert (=> b!97728 m!106583))

(declare-fun m!106585 () Bool)

(assert (=> b!97728 m!106585))

(declare-fun m!106587 () Bool)

(assert (=> b!97728 m!106587))

(assert (=> b!97728 m!106587))

(declare-fun m!106589 () Bool)

(assert (=> b!97728 m!106589))

(assert (=> b!97728 m!106579))

(declare-fun m!106591 () Bool)

(assert (=> b!97728 m!106591))

(declare-fun m!106593 () Bool)

(assert (=> b!97728 m!106593))

(assert (=> b!97728 m!106565))

(assert (=> b!97728 m!106571))

(declare-fun m!106595 () Bool)

(assert (=> bm!9940 m!106595))

(assert (=> d!25973 m!106537))

(declare-fun m!106597 () Bool)

(assert (=> bm!9937 m!106597))

(assert (=> b!97735 m!106551))

(assert (=> b!97735 m!106551))

(declare-fun m!106599 () Bool)

(assert (=> b!97735 m!106599))

(declare-fun m!106601 () Bool)

(assert (=> b!97740 m!106601))

(assert (=> b!97731 m!106551))

(assert (=> b!97731 m!106551))

(assert (=> b!97731 m!106599))

(assert (=> d!25957 d!25973))

(declare-fun d!25975 () Bool)

(declare-fun res!49187 () Bool)

(declare-fun e!63740 () Bool)

(assert (=> d!25975 (=> (not res!49187) (not e!63740))))

(assert (=> d!25975 (= res!49187 (simpleValid!68 (v!2801 (underlying!338 thiss!992))))))

(assert (=> d!25975 (= (valid!392 (v!2801 (underlying!338 thiss!992))) e!63740)))

(declare-fun b!97745 () Bool)

(declare-fun res!49188 () Bool)

(assert (=> b!97745 (=> (not res!49188) (not e!63740))))

(assert (=> b!97745 (= res!49188 (= (arrayCountValidKeys!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))) (_size!474 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97746 () Bool)

(declare-fun res!49189 () Bool)

(assert (=> b!97746 (=> (not res!49189) (not e!63740))))

(assert (=> b!97746 (= res!49189 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!97747 () Bool)

(assert (=> b!97747 (= e!63740 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 Nil!1562))))

(assert (= (and d!25975 res!49187) b!97745))

(assert (= (and b!97745 res!49188) b!97746))

(assert (= (and b!97746 res!49189) b!97747))

(declare-fun m!106603 () Bool)

(assert (=> d!25975 m!106603))

(declare-fun m!106605 () Bool)

(assert (=> b!97745 m!106605))

(declare-fun m!106607 () Bool)

(assert (=> b!97746 m!106607))

(declare-fun m!106609 () Bool)

(assert (=> b!97747 m!106609))

(assert (=> d!25947 d!25975))

(assert (=> b!97611 d!25973))

(assert (=> b!97466 d!25941))

(declare-fun d!25977 () Bool)

(assert (=> d!25977 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48932 () Unit!2917)

(declare-fun choose!595 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2917)

(assert (=> d!25977 (= lt!48932 (choose!595 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25977 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25977 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!48932)))

(declare-fun bs!4025 () Bool)

(assert (= bs!4025 d!25977))

(assert (=> bs!4025 m!106413))

(declare-fun m!106611 () Bool)

(assert (=> bs!4025 m!106611))

(assert (=> bs!4025 m!106277))

(declare-fun m!106613 () Bool)

(assert (=> bs!4025 m!106613))

(assert (=> bs!4025 m!106277))

(declare-fun m!106615 () Bool)

(assert (=> bs!4025 m!106615))

(assert (=> bs!4025 m!106413))

(assert (=> bs!4025 m!106537))

(assert (=> b!97609 d!25977))

(declare-fun d!25979 () Bool)

(assert (=> d!25979 (= (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97667 d!25979))

(declare-fun b!97748 () Bool)

(declare-fun e!63743 () Bool)

(declare-fun call!9953 () Bool)

(assert (=> b!97748 (= e!63743 (not call!9953))))

(declare-fun b!97749 () Bool)

(declare-fun e!63748 () Bool)

(declare-fun e!63745 () Bool)

(assert (=> b!97749 (= e!63748 e!63745)))

(declare-fun res!49195 () Bool)

(assert (=> b!97749 (=> (not res!49195) (not e!63745))))

(declare-fun lt!48938 () ListLongMap!1499)

(assert (=> b!97749 (= res!49195 (contains!788 lt!48938 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97749 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!97750 () Bool)

(assert (=> b!97750 (= e!63745 (= (apply!92 lt!48938 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97750 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))))))))

(assert (=> b!97750 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9944 () Bool)

(declare-fun call!9947 () Bool)

(assert (=> bm!9944 (= call!9947 (contains!788 lt!48938 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63750 () ListLongMap!1499)

(declare-fun b!97751 () Bool)

(declare-fun call!9952 () ListLongMap!1499)

(assert (=> b!97751 (= e!63750 (+!130 call!9952 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(declare-fun b!97752 () Bool)

(declare-fun e!63742 () Unit!2917)

(declare-fun lt!48953 () Unit!2917)

(assert (=> b!97752 (= e!63742 lt!48953)))

(declare-fun lt!48950 () ListLongMap!1499)

(assert (=> b!97752 (= lt!48950 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48946 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48946 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48944 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48944 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48940 () Unit!2917)

(assert (=> b!97752 (= lt!48940 (addStillContains!68 lt!48950 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48944))))

(assert (=> b!97752 (contains!788 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48944)))

(declare-fun lt!48949 () Unit!2917)

(assert (=> b!97752 (= lt!48949 lt!48940)))

(declare-fun lt!48939 () ListLongMap!1499)

(assert (=> b!97752 (= lt!48939 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48951 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48951 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48941 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48941 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48947 () Unit!2917)

(assert (=> b!97752 (= lt!48947 (addApplyDifferent!68 lt!48939 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48941))))

(assert (=> b!97752 (= (apply!92 (+!130 lt!48939 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48941) (apply!92 lt!48939 lt!48941))))

(declare-fun lt!48943 () Unit!2917)

(assert (=> b!97752 (= lt!48943 lt!48947)))

(declare-fun lt!48954 () ListLongMap!1499)

(assert (=> b!97752 (= lt!48954 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48937 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48937 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48948 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48948 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48936 () Unit!2917)

(assert (=> b!97752 (= lt!48936 (addApplyDifferent!68 lt!48954 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48948))))

(assert (=> b!97752 (= (apply!92 (+!130 lt!48954 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48948) (apply!92 lt!48954 lt!48948))))

(declare-fun lt!48934 () Unit!2917)

(assert (=> b!97752 (= lt!48934 lt!48936)))

(declare-fun lt!48945 () ListLongMap!1499)

(assert (=> b!97752 (= lt!48945 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!48935 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48935 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48942 () (_ BitVec 64))

(assert (=> b!97752 (= lt!48942 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97752 (= lt!48953 (addApplyDifferent!68 lt!48945 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48942))))

(assert (=> b!97752 (= (apply!92 (+!130 lt!48945 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48942) (apply!92 lt!48945 lt!48942))))

(declare-fun b!97753 () Bool)

(declare-fun c!16559 () Bool)

(assert (=> b!97753 (= c!16559 (and (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63741 () ListLongMap!1499)

(declare-fun e!63746 () ListLongMap!1499)

(assert (=> b!97753 (= e!63741 e!63746)))

(declare-fun b!97754 () Bool)

(declare-fun e!63752 () Bool)

(assert (=> b!97754 (= e!63752 (= (apply!92 lt!48938 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))

(declare-fun b!97755 () Bool)

(declare-fun e!63744 () Bool)

(assert (=> b!97755 (= e!63744 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97756 () Bool)

(declare-fun res!49196 () Bool)

(declare-fun e!63751 () Bool)

(assert (=> b!97756 (=> (not res!49196) (not e!63751))))

(declare-fun e!63753 () Bool)

(assert (=> b!97756 (= res!49196 e!63753)))

(declare-fun c!16562 () Bool)

(assert (=> b!97756 (= c!16562 (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!97757 () Bool)

(declare-fun call!9951 () ListLongMap!1499)

(assert (=> b!97757 (= e!63741 call!9951)))

(declare-fun bm!9945 () Bool)

(assert (=> bm!9945 (= call!9951 call!9952)))

(declare-fun b!97758 () Bool)

(assert (=> b!97758 (= e!63753 (not call!9947))))

(declare-fun b!97759 () Bool)

(declare-fun e!63749 () Bool)

(assert (=> b!97759 (= e!63749 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9946 () Bool)

(declare-fun call!9949 () ListLongMap!1499)

(declare-fun call!9948 () ListLongMap!1499)

(assert (=> bm!9946 (= call!9949 call!9948)))

(declare-fun bm!9947 () Bool)

(assert (=> bm!9947 (= call!9953 (contains!788 lt!48938 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97760 () Bool)

(assert (=> b!97760 (= e!63751 e!63743)))

(declare-fun c!16561 () Bool)

(assert (=> b!97760 (= c!16561 (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97761 () Bool)

(assert (=> b!97761 (= e!63753 e!63752)))

(declare-fun res!49197 () Bool)

(assert (=> b!97761 (= res!49197 call!9947)))

(assert (=> b!97761 (=> (not res!49197) (not e!63752))))

(declare-fun b!97762 () Bool)

(declare-fun e!63747 () Bool)

(assert (=> b!97762 (= e!63743 e!63747)))

(declare-fun res!49194 () Bool)

(assert (=> b!97762 (= res!49194 call!9953)))

(assert (=> b!97762 (=> (not res!49194) (not e!63747))))

(declare-fun b!97763 () Bool)

(declare-fun res!49190 () Bool)

(assert (=> b!97763 (=> (not res!49190) (not e!63751))))

(assert (=> b!97763 (= res!49190 e!63748)))

(declare-fun res!49191 () Bool)

(assert (=> b!97763 (=> res!49191 e!63748)))

(assert (=> b!97763 (= res!49191 (not e!63749))))

(declare-fun res!49193 () Bool)

(assert (=> b!97763 (=> (not res!49193) (not e!63749))))

(assert (=> b!97763 (= res!49193 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9948 () Bool)

(declare-fun call!9950 () ListLongMap!1499)

(assert (=> bm!9948 (= call!9950 call!9949)))

(declare-fun b!97764 () Bool)

(assert (=> b!97764 (= e!63747 (= (apply!92 lt!48938 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))

(declare-fun b!97765 () Bool)

(assert (=> b!97765 (= e!63750 e!63741)))

(declare-fun c!16560 () Bool)

(assert (=> b!97765 (= c!16560 (and (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9949 () Bool)

(assert (=> bm!9949 (= call!9948 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97766 () Bool)

(declare-fun Unit!2932 () Unit!2917)

(assert (=> b!97766 (= e!63742 Unit!2932)))

(declare-fun b!97767 () Bool)

(assert (=> b!97767 (= e!63746 call!9950)))

(declare-fun b!97768 () Bool)

(assert (=> b!97768 (= e!63746 call!9951)))

(declare-fun c!16564 () Bool)

(declare-fun bm!9950 () Bool)

(assert (=> bm!9950 (= call!9952 (+!130 (ite c!16564 call!9948 (ite c!16560 call!9949 call!9950)) (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun d!25981 () Bool)

(assert (=> d!25981 e!63751))

(declare-fun res!49198 () Bool)

(assert (=> d!25981 (=> (not res!49198) (not e!63751))))

(assert (=> d!25981 (= res!49198 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!48952 () ListLongMap!1499)

(assert (=> d!25981 (= lt!48938 lt!48952)))

(declare-fun lt!48933 () Unit!2917)

(assert (=> d!25981 (= lt!48933 e!63742)))

(declare-fun c!16563 () Bool)

(assert (=> d!25981 (= c!16563 e!63744)))

(declare-fun res!49192 () Bool)

(assert (=> d!25981 (=> (not res!49192) (not e!63744))))

(assert (=> d!25981 (= res!49192 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!25981 (= lt!48952 e!63750)))

(assert (=> d!25981 (= c!16564 (and (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25981 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25981 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!48938)))

(assert (= (and d!25981 c!16564) b!97751))

(assert (= (and d!25981 (not c!16564)) b!97765))

(assert (= (and b!97765 c!16560) b!97757))

(assert (= (and b!97765 (not c!16560)) b!97753))

(assert (= (and b!97753 c!16559) b!97768))

(assert (= (and b!97753 (not c!16559)) b!97767))

(assert (= (or b!97768 b!97767) bm!9948))

(assert (= (or b!97757 bm!9948) bm!9946))

(assert (= (or b!97757 b!97768) bm!9945))

(assert (= (or b!97751 bm!9946) bm!9949))

(assert (= (or b!97751 bm!9945) bm!9950))

(assert (= (and d!25981 res!49192) b!97755))

(assert (= (and d!25981 c!16563) b!97752))

(assert (= (and d!25981 (not c!16563)) b!97766))

(assert (= (and d!25981 res!49198) b!97763))

(assert (= (and b!97763 res!49193) b!97759))

(assert (= (and b!97763 (not res!49191)) b!97749))

(assert (= (and b!97749 res!49195) b!97750))

(assert (= (and b!97763 res!49190) b!97756))

(assert (= (and b!97756 c!16562) b!97761))

(assert (= (and b!97756 (not c!16562)) b!97758))

(assert (= (and b!97761 res!49197) b!97754))

(assert (= (or b!97761 b!97758) bm!9944))

(assert (= (and b!97756 res!49196) b!97760))

(assert (= (and b!97760 c!16561) b!97762))

(assert (= (and b!97760 (not c!16561)) b!97748))

(assert (= (and b!97762 res!49194) b!97764))

(assert (= (or b!97762 b!97748) bm!9947))

(declare-fun b_lambda!4339 () Bool)

(assert (=> (not b_lambda!4339) (not b!97750)))

(assert (=> b!97750 t!5523))

(declare-fun b_and!5997 () Bool)

(assert (= b_and!5993 (and (=> t!5523 result!3271) b_and!5997)))

(assert (=> b!97750 t!5525))

(declare-fun b_and!5999 () Bool)

(assert (= b_and!5995 (and (=> t!5525 result!3273) b_and!5999)))

(declare-fun m!106617 () Bool)

(assert (=> b!97754 m!106617))

(declare-fun m!106619 () Bool)

(assert (=> bm!9950 m!106619))

(declare-fun m!106621 () Bool)

(assert (=> b!97751 m!106621))

(assert (=> b!97749 m!106551))

(assert (=> b!97749 m!106551))

(declare-fun m!106623 () Bool)

(assert (=> b!97749 m!106623))

(assert (=> b!97750 m!106551))

(declare-fun m!106625 () Bool)

(assert (=> b!97750 m!106625))

(assert (=> b!97750 m!106557))

(assert (=> b!97750 m!106551))

(declare-fun m!106627 () Bool)

(assert (=> b!97750 m!106627))

(assert (=> b!97750 m!106625))

(assert (=> b!97750 m!106557))

(declare-fun m!106629 () Bool)

(assert (=> b!97750 m!106629))

(declare-fun m!106631 () Bool)

(assert (=> bm!9949 m!106631))

(declare-fun m!106633 () Bool)

(assert (=> b!97752 m!106633))

(declare-fun m!106635 () Bool)

(assert (=> b!97752 m!106635))

(assert (=> b!97752 m!106551))

(declare-fun m!106637 () Bool)

(assert (=> b!97752 m!106637))

(assert (=> b!97752 m!106631))

(declare-fun m!106639 () Bool)

(assert (=> b!97752 m!106639))

(declare-fun m!106641 () Bool)

(assert (=> b!97752 m!106641))

(declare-fun m!106643 () Bool)

(assert (=> b!97752 m!106643))

(declare-fun m!106645 () Bool)

(assert (=> b!97752 m!106645))

(declare-fun m!106647 () Bool)

(assert (=> b!97752 m!106647))

(declare-fun m!106649 () Bool)

(assert (=> b!97752 m!106649))

(declare-fun m!106651 () Bool)

(assert (=> b!97752 m!106651))

(declare-fun m!106653 () Bool)

(assert (=> b!97752 m!106653))

(declare-fun m!106655 () Bool)

(assert (=> b!97752 m!106655))

(assert (=> b!97752 m!106655))

(declare-fun m!106657 () Bool)

(assert (=> b!97752 m!106657))

(assert (=> b!97752 m!106647))

(declare-fun m!106659 () Bool)

(assert (=> b!97752 m!106659))

(declare-fun m!106661 () Bool)

(assert (=> b!97752 m!106661))

(assert (=> b!97752 m!106633))

(assert (=> b!97752 m!106639))

(declare-fun m!106663 () Bool)

(assert (=> bm!9947 m!106663))

(assert (=> d!25981 m!106537))

(declare-fun m!106665 () Bool)

(assert (=> bm!9944 m!106665))

(assert (=> b!97759 m!106551))

(assert (=> b!97759 m!106551))

(assert (=> b!97759 m!106599))

(declare-fun m!106667 () Bool)

(assert (=> b!97764 m!106667))

(assert (=> b!97755 m!106551))

(assert (=> b!97755 m!106551))

(assert (=> b!97755 m!106599))

(assert (=> bm!9907 d!25981))

(declare-fun d!25983 () Bool)

(declare-fun e!63756 () Bool)

(assert (=> d!25983 e!63756))

(declare-fun res!49201 () Bool)

(assert (=> d!25983 (=> (not res!49201) (not e!63756))))

(assert (=> d!25983 (= res!49201 (and (bvsge (index!3132 lt!48821) #b00000000000000000000000000000000) (bvslt (index!3132 lt!48821) (size!2256 (_keys!4170 newMap!16)))))))

(declare-fun lt!48957 () Unit!2917)

(declare-fun choose!596 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) Int) Unit!2917)

(assert (=> d!25983 (= lt!48957 (choose!596 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25983 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25983 (= (lemmaValidKeyInArrayIsInListMap!101 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (defaultEntry!2480 newMap!16)) lt!48957)))

(declare-fun b!97771 () Bool)

(assert (=> b!97771 (= e!63756 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))

(assert (= (and d!25983 res!49201) b!97771))

(declare-fun m!106669 () Bool)

(assert (=> d!25983 m!106669))

(assert (=> d!25983 m!106537))

(declare-fun m!106671 () Bool)

(assert (=> b!97771 m!106671))

(assert (=> b!97771 m!106453))

(assert (=> b!97771 m!106671))

(assert (=> b!97771 m!106453))

(declare-fun m!106673 () Bool)

(assert (=> b!97771 m!106673))

(assert (=> b!97607 d!25983))

(declare-fun d!25985 () Bool)

(declare-fun e!63759 () Bool)

(assert (=> d!25985 e!63759))

(declare-fun res!49204 () Bool)

(assert (=> d!25985 (=> (not res!49204) (not e!63759))))

(assert (=> d!25985 (= res!49204 (and (bvsge (index!3132 lt!48821) #b00000000000000000000000000000000) (bvslt (index!3132 lt!48821) (size!2257 (_values!2463 newMap!16)))))))

(declare-fun lt!48960 () Unit!2917)

(declare-fun choose!597 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2917)

(assert (=> d!25985 (= lt!48960 (choose!597 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25985 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25985 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!48960)))

(declare-fun b!97774 () Bool)

(assert (=> b!97774 (= e!63759 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))))

(assert (= (and d!25985 res!49204) b!97774))

(assert (=> d!25985 m!106251))

(assert (=> d!25985 m!106277))

(declare-fun m!106675 () Bool)

(assert (=> d!25985 m!106675))

(assert (=> d!25985 m!106537))

(assert (=> b!97774 m!106413))

(assert (=> b!97774 m!106413))

(declare-fun m!106677 () Bool)

(assert (=> b!97774 m!106677))

(assert (=> b!97774 m!106417))

(declare-fun m!106679 () Bool)

(assert (=> b!97774 m!106679))

(assert (=> b!97607 d!25985))

(declare-fun d!25987 () Bool)

(declare-fun e!63760 () Bool)

(assert (=> d!25987 e!63760))

(declare-fun res!49205 () Bool)

(assert (=> d!25987 (=> res!49205 e!63760)))

(declare-fun lt!48961 () Bool)

(assert (=> d!25987 (= res!49205 (not lt!48961))))

(declare-fun lt!48964 () Bool)

(assert (=> d!25987 (= lt!48961 lt!48964)))

(declare-fun lt!48962 () Unit!2917)

(declare-fun e!63761 () Unit!2917)

(assert (=> d!25987 (= lt!48962 e!63761)))

(declare-fun c!16565 () Bool)

(assert (=> d!25987 (= c!16565 lt!48964)))

(assert (=> d!25987 (= lt!48964 (containsKey!154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!25987 (= (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!48961)))

(declare-fun b!97775 () Bool)

(declare-fun lt!48963 () Unit!2917)

(assert (=> b!97775 (= e!63761 lt!48963)))

(assert (=> b!97775 (= lt!48963 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!97775 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!97776 () Bool)

(declare-fun Unit!2933 () Unit!2917)

(assert (=> b!97776 (= e!63761 Unit!2933)))

(declare-fun b!97777 () Bool)

(assert (=> b!97777 (= e!63760 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (= (and d!25987 c!16565) b!97775))

(assert (= (and d!25987 (not c!16565)) b!97776))

(assert (= (and d!25987 (not res!49205)) b!97777))

(assert (=> d!25987 m!106251))

(declare-fun m!106681 () Bool)

(assert (=> d!25987 m!106681))

(assert (=> b!97775 m!106251))

(declare-fun m!106683 () Bool)

(assert (=> b!97775 m!106683))

(assert (=> b!97775 m!106251))

(declare-fun m!106685 () Bool)

(assert (=> b!97775 m!106685))

(assert (=> b!97775 m!106685))

(declare-fun m!106687 () Bool)

(assert (=> b!97775 m!106687))

(assert (=> b!97777 m!106251))

(assert (=> b!97777 m!106685))

(assert (=> b!97777 m!106685))

(assert (=> b!97777 m!106687))

(assert (=> b!97607 d!25987))

(assert (=> b!97607 d!25973))

(declare-fun b!97778 () Bool)

(declare-fun e!63764 () Bool)

(declare-fun call!9954 () Bool)

(assert (=> b!97778 (= e!63764 call!9954)))

(declare-fun b!97779 () Bool)

(assert (=> b!97779 (= e!63764 call!9954)))

(declare-fun b!97780 () Bool)

(declare-fun e!63763 () Bool)

(declare-fun e!63765 () Bool)

(assert (=> b!97780 (= e!63763 e!63765)))

(declare-fun res!49206 () Bool)

(assert (=> b!97780 (=> (not res!49206) (not e!63765))))

(declare-fun e!63762 () Bool)

(assert (=> b!97780 (= res!49206 (not e!63762))))

(declare-fun res!49207 () Bool)

(assert (=> b!97780 (=> (not res!49207) (not e!63762))))

(assert (=> b!97780 (= res!49207 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9951 () Bool)

(declare-fun c!16566 () Bool)

(assert (=> bm!9951 (= call!9954 (arrayNoDuplicates!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16566 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) Nil!1562) Nil!1562)))))

(declare-fun b!97782 () Bool)

(assert (=> b!97782 (= e!63765 e!63764)))

(assert (=> b!97782 (= c!16566 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!25989 () Bool)

(declare-fun res!49208 () Bool)

(assert (=> d!25989 (=> res!49208 e!63763)))

(assert (=> d!25989 (= res!49208 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!25989 (= (arrayNoDuplicates!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 Nil!1562) e!63763)))

(declare-fun b!97781 () Bool)

(assert (=> b!97781 (= e!63762 (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!25989 (not res!49208)) b!97780))

(assert (= (and b!97780 res!49207) b!97781))

(assert (= (and b!97780 res!49206) b!97782))

(assert (= (and b!97782 c!16566) b!97778))

(assert (= (and b!97782 (not c!16566)) b!97779))

(assert (= (or b!97778 b!97779) bm!9951))

(assert (=> b!97780 m!106551))

(assert (=> b!97780 m!106551))

(assert (=> b!97780 m!106599))

(assert (=> bm!9951 m!106551))

(declare-fun m!106689 () Bool)

(assert (=> bm!9951 m!106689))

(assert (=> b!97782 m!106551))

(assert (=> b!97782 m!106551))

(assert (=> b!97782 m!106599))

(assert (=> b!97781 m!106551))

(assert (=> b!97781 m!106551))

(declare-fun m!106691 () Bool)

(assert (=> b!97781 m!106691))

(assert (=> b!97689 d!25989))

(assert (=> bm!9899 d!25957))

(declare-fun d!25991 () Bool)

(declare-fun e!63768 () Bool)

(assert (=> d!25991 e!63768))

(declare-fun res!49214 () Bool)

(assert (=> d!25991 (=> (not res!49214) (not e!63768))))

(declare-fun lt!48973 () ListLongMap!1499)

(assert (=> d!25991 (= res!49214 (contains!788 lt!48973 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun lt!48974 () List!1564)

(assert (=> d!25991 (= lt!48973 (ListLongMap!1500 lt!48974))))

(declare-fun lt!48976 () Unit!2917)

(declare-fun lt!48975 () Unit!2917)

(assert (=> d!25991 (= lt!48976 lt!48975)))

(assert (=> d!25991 (= (getValueByKey!151 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (Some!156 (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!67 (List!1564 (_ BitVec 64) V!3153) Unit!2917)

(assert (=> d!25991 (= lt!48975 (lemmaContainsTupThenGetReturnValue!67 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun insertStrictlySorted!70 (List!1564 (_ BitVec 64) V!3153) List!1564)

(assert (=> d!25991 (= lt!48974 (insertStrictlySorted!70 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!25991 (= (+!130 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48973)))

(declare-fun b!97787 () Bool)

(declare-fun res!49213 () Bool)

(assert (=> b!97787 (=> (not res!49213) (not e!63768))))

(assert (=> b!97787 (= res!49213 (= (getValueByKey!151 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (Some!156 (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun b!97788 () Bool)

(declare-fun contains!791 (List!1564 tuple2!2300) Bool)

(assert (=> b!97788 (= e!63768 (contains!791 (toList!765 lt!48973) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!25991 res!49214) b!97787))

(assert (= (and b!97787 res!49213) b!97788))

(declare-fun m!106693 () Bool)

(assert (=> d!25991 m!106693))

(declare-fun m!106695 () Bool)

(assert (=> d!25991 m!106695))

(declare-fun m!106697 () Bool)

(assert (=> d!25991 m!106697))

(declare-fun m!106699 () Bool)

(assert (=> d!25991 m!106699))

(declare-fun m!106701 () Bool)

(assert (=> b!97787 m!106701))

(declare-fun m!106703 () Bool)

(assert (=> b!97788 m!106703))

(assert (=> bm!9936 d!25991))

(declare-fun b!97805 () Bool)

(declare-fun e!63777 () Bool)

(declare-fun e!63780 () Bool)

(assert (=> b!97805 (= e!63777 e!63780)))

(declare-fun res!49226 () Bool)

(declare-fun call!9960 () Bool)

(assert (=> b!97805 (= res!49226 call!9960)))

(assert (=> b!97805 (=> (not res!49226) (not e!63780))))

(declare-fun b!97806 () Bool)

(declare-fun e!63779 () Bool)

(declare-fun lt!48982 () SeekEntryResult!247)

(assert (=> b!97806 (= e!63779 ((_ is Undefined!247) lt!48982))))

(declare-fun b!97807 () Bool)

(declare-fun call!9959 () Bool)

(assert (=> b!97807 (= e!63780 (not call!9959))))

(declare-fun b!97808 () Bool)

(assert (=> b!97808 (and (bvsge (index!3131 lt!48982) #b00000000000000000000000000000000) (bvslt (index!3131 lt!48982) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49225 () Bool)

(assert (=> b!97808 (= res!49225 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!48982)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97808 (=> (not res!49225) (not e!63780))))

(declare-fun b!97809 () Bool)

(declare-fun res!49224 () Bool)

(declare-fun e!63778 () Bool)

(assert (=> b!97809 (=> (not res!49224) (not e!63778))))

(assert (=> b!97809 (= res!49224 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!48982)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97809 (and (bvsge (index!3134 lt!48982) #b00000000000000000000000000000000) (bvslt (index!3134 lt!48982) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun c!16571 () Bool)

(declare-fun bm!9956 () Bool)

(assert (=> bm!9956 (= call!9960 (inRange!0 (ite c!16571 (index!3131 lt!48982) (index!3134 lt!48982)) (mask!6577 newMap!16)))))

(declare-fun bm!9957 () Bool)

(assert (=> bm!9957 (= call!9959 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97811 () Bool)

(declare-fun res!49223 () Bool)

(assert (=> b!97811 (=> (not res!49223) (not e!63778))))

(assert (=> b!97811 (= res!49223 call!9960)))

(assert (=> b!97811 (= e!63779 e!63778)))

(declare-fun b!97812 () Bool)

(assert (=> b!97812 (= e!63778 (not call!9959))))

(declare-fun b!97810 () Bool)

(assert (=> b!97810 (= e!63777 e!63779)))

(declare-fun c!16572 () Bool)

(assert (=> b!97810 (= c!16572 ((_ is MissingVacant!247) lt!48982))))

(declare-fun d!25993 () Bool)

(assert (=> d!25993 e!63777))

(assert (=> d!25993 (= c!16571 ((_ is MissingZero!247) lt!48982))))

(assert (=> d!25993 (= lt!48982 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun lt!48981 () Unit!2917)

(declare-fun choose!598 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2917)

(assert (=> d!25993 (= lt!48981 (choose!598 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> d!25993 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!25993 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) lt!48981)))

(assert (= (and d!25993 c!16571) b!97805))

(assert (= (and d!25993 (not c!16571)) b!97810))

(assert (= (and b!97805 res!49226) b!97808))

(assert (= (and b!97808 res!49225) b!97807))

(assert (= (and b!97810 c!16572) b!97811))

(assert (= (and b!97810 (not c!16572)) b!97806))

(assert (= (and b!97811 res!49223) b!97809))

(assert (= (and b!97809 res!49224) b!97812))

(assert (= (or b!97805 b!97811) bm!9956))

(assert (= (or b!97807 b!97812) bm!9957))

(declare-fun m!106705 () Bool)

(assert (=> b!97809 m!106705))

(assert (=> d!25993 m!106251))

(assert (=> d!25993 m!106423))

(assert (=> d!25993 m!106251))

(declare-fun m!106707 () Bool)

(assert (=> d!25993 m!106707))

(assert (=> d!25993 m!106537))

(declare-fun m!106709 () Bool)

(assert (=> b!97808 m!106709))

(declare-fun m!106711 () Bool)

(assert (=> bm!9956 m!106711))

(assert (=> bm!9957 m!106251))

(assert (=> bm!9957 m!106411))

(assert (=> bm!9914 d!25993))

(declare-fun b!97821 () Bool)

(declare-fun e!63786 () (_ BitVec 32))

(assert (=> b!97821 (= e!63786 #b00000000000000000000000000000000)))

(declare-fun b!97822 () Bool)

(declare-fun e!63785 () (_ BitVec 32))

(declare-fun call!9963 () (_ BitVec 32))

(assert (=> b!97822 (= e!63785 call!9963)))

(declare-fun b!97823 () Bool)

(assert (=> b!97823 (= e!63785 (bvadd #b00000000000000000000000000000001 call!9963))))

(declare-fun d!25995 () Bool)

(declare-fun lt!48985 () (_ BitVec 32))

(assert (=> d!25995 (and (bvsge lt!48985 #b00000000000000000000000000000000) (bvsle lt!48985 (bvsub (size!2256 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25995 (= lt!48985 e!63786)))

(declare-fun c!16578 () Bool)

(assert (=> d!25995 (= c!16578 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!25995 (and (bvsle #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2256 (_keys!4170 newMap!16)) (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!25995 (= (arrayCountValidKeys!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) lt!48985)))

(declare-fun bm!9960 () Bool)

(assert (=> bm!9960 (= call!9963 (arrayCountValidKeys!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!97824 () Bool)

(assert (=> b!97824 (= e!63786 e!63785)))

(declare-fun c!16577 () Bool)

(assert (=> b!97824 (= c!16577 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!25995 c!16578) b!97821))

(assert (= (and d!25995 (not c!16578)) b!97824))

(assert (= (and b!97824 c!16577) b!97823))

(assert (= (and b!97824 (not c!16577)) b!97822))

(assert (= (or b!97823 b!97822) bm!9960))

(declare-fun m!106713 () Bool)

(assert (=> bm!9960 m!106713))

(assert (=> b!97824 m!106551))

(assert (=> b!97824 m!106551))

(assert (=> b!97824 m!106599))

(assert (=> b!97687 d!25995))

(declare-fun b!97836 () Bool)

(declare-fun e!63789 () Bool)

(assert (=> b!97836 (= e!63789 (and (bvsge (extraKeys!2301 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!474 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!97835 () Bool)

(declare-fun res!49238 () Bool)

(assert (=> b!97835 (=> (not res!49238) (not e!63789))))

(declare-fun size!2262 (LongMapFixedSize!850) (_ BitVec 32))

(assert (=> b!97835 (= res!49238 (= (size!2262 newMap!16) (bvadd (_size!474 newMap!16) (bvsdiv (bvadd (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!97834 () Bool)

(declare-fun res!49236 () Bool)

(assert (=> b!97834 (=> (not res!49236) (not e!63789))))

(assert (=> b!97834 (= res!49236 (bvsge (size!2262 newMap!16) (_size!474 newMap!16)))))

(declare-fun b!97833 () Bool)

(declare-fun res!49235 () Bool)

(assert (=> b!97833 (=> (not res!49235) (not e!63789))))

(assert (=> b!97833 (= res!49235 (and (= (size!2257 (_values!2463 newMap!16)) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001)) (= (size!2256 (_keys!4170 newMap!16)) (size!2257 (_values!2463 newMap!16))) (bvsge (_size!474 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!474 newMap!16) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun d!25997 () Bool)

(declare-fun res!49237 () Bool)

(assert (=> d!25997 (=> (not res!49237) (not e!63789))))

(assert (=> d!25997 (= res!49237 (validMask!0 (mask!6577 newMap!16)))))

(assert (=> d!25997 (= (simpleValid!68 newMap!16) e!63789)))

(assert (= (and d!25997 res!49237) b!97833))

(assert (= (and b!97833 res!49235) b!97834))

(assert (= (and b!97834 res!49236) b!97835))

(assert (= (and b!97835 res!49238) b!97836))

(declare-fun m!106715 () Bool)

(assert (=> b!97835 m!106715))

(assert (=> b!97834 m!106715))

(assert (=> d!25997 m!106537))

(assert (=> d!25961 d!25997))

(declare-fun d!25999 () Bool)

(declare-fun e!63790 () Bool)

(assert (=> d!25999 e!63790))

(declare-fun res!49239 () Bool)

(assert (=> d!25999 (=> res!49239 e!63790)))

(declare-fun lt!48986 () Bool)

(assert (=> d!25999 (= res!49239 (not lt!48986))))

(declare-fun lt!48989 () Bool)

(assert (=> d!25999 (= lt!48986 lt!48989)))

(declare-fun lt!48987 () Unit!2917)

(declare-fun e!63791 () Unit!2917)

(assert (=> d!25999 (= lt!48987 e!63791)))

(declare-fun c!16579 () Bool)

(assert (=> d!25999 (= c!16579 lt!48989)))

(assert (=> d!25999 (= lt!48989 (containsKey!154 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25999 (= (contains!788 lt!48882 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48986)))

(declare-fun b!97837 () Bool)

(declare-fun lt!48988 () Unit!2917)

(assert (=> b!97837 (= e!63791 lt!48988)))

(assert (=> b!97837 (= lt!48988 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97837 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97838 () Bool)

(declare-fun Unit!2934 () Unit!2917)

(assert (=> b!97838 (= e!63791 Unit!2934)))

(declare-fun b!97839 () Bool)

(assert (=> b!97839 (= e!63790 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25999 c!16579) b!97837))

(assert (= (and d!25999 (not c!16579)) b!97838))

(assert (= (and d!25999 (not res!49239)) b!97839))

(declare-fun m!106717 () Bool)

(assert (=> d!25999 m!106717))

(declare-fun m!106719 () Bool)

(assert (=> b!97837 m!106719))

(declare-fun m!106721 () Bool)

(assert (=> b!97837 m!106721))

(assert (=> b!97837 m!106721))

(declare-fun m!106723 () Bool)

(assert (=> b!97837 m!106723))

(assert (=> b!97839 m!106721))

(assert (=> b!97839 m!106721))

(assert (=> b!97839 m!106723))

(assert (=> bm!9930 d!25999))

(declare-fun d!26001 () Bool)

(declare-fun e!63792 () Bool)

(assert (=> d!26001 e!63792))

(declare-fun res!49240 () Bool)

(assert (=> d!26001 (=> res!49240 e!63792)))

(declare-fun lt!48990 () Bool)

(assert (=> d!26001 (= res!49240 (not lt!48990))))

(declare-fun lt!48993 () Bool)

(assert (=> d!26001 (= lt!48990 lt!48993)))

(declare-fun lt!48991 () Unit!2917)

(declare-fun e!63793 () Unit!2917)

(assert (=> d!26001 (= lt!48991 e!63793)))

(declare-fun c!16580 () Bool)

(assert (=> d!26001 (= c!16580 lt!48993)))

(assert (=> d!26001 (= lt!48993 (containsKey!154 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26001 (= (contains!788 lt!48882 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!48990)))

(declare-fun b!97840 () Bool)

(declare-fun lt!48992 () Unit!2917)

(assert (=> b!97840 (= e!63793 lt!48992)))

(assert (=> b!97840 (= lt!48992 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97840 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97841 () Bool)

(declare-fun Unit!2935 () Unit!2917)

(assert (=> b!97841 (= e!63793 Unit!2935)))

(declare-fun b!97842 () Bool)

(assert (=> b!97842 (= e!63792 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26001 c!16580) b!97840))

(assert (= (and d!26001 (not c!16580)) b!97841))

(assert (= (and d!26001 (not res!49240)) b!97842))

(assert (=> d!26001 m!106381))

(declare-fun m!106725 () Bool)

(assert (=> d!26001 m!106725))

(assert (=> b!97840 m!106381))

(declare-fun m!106727 () Bool)

(assert (=> b!97840 m!106727))

(assert (=> b!97840 m!106381))

(declare-fun m!106729 () Bool)

(assert (=> b!97840 m!106729))

(assert (=> b!97840 m!106729))

(declare-fun m!106731 () Bool)

(assert (=> b!97840 m!106731))

(assert (=> b!97842 m!106381))

(assert (=> b!97842 m!106729))

(assert (=> b!97842 m!106729))

(assert (=> b!97842 m!106731))

(assert (=> b!97661 d!26001))

(declare-fun d!26003 () Bool)

(assert (=> d!26003 (= (get!1291 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97617 d!26003))

(declare-fun d!26005 () Bool)

(declare-fun lt!48996 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!102 (List!1565) (InoxSet (_ BitVec 64)))

(assert (=> d!26005 (= lt!48996 (select (content!102 Nil!1562) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!63799 () Bool)

(assert (=> d!26005 (= lt!48996 e!63799)))

(declare-fun res!49245 () Bool)

(assert (=> d!26005 (=> (not res!49245) (not e!63799))))

(assert (=> d!26005 (= res!49245 ((_ is Cons!1561) Nil!1562))))

(assert (=> d!26005 (= (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!48996)))

(declare-fun b!97847 () Bool)

(declare-fun e!63798 () Bool)

(assert (=> b!97847 (= e!63799 e!63798)))

(declare-fun res!49246 () Bool)

(assert (=> b!97847 (=> res!49246 e!63798)))

(assert (=> b!97847 (= res!49246 (= (h!2155 Nil!1562) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!97848 () Bool)

(assert (=> b!97848 (= e!63798 (contains!790 (t!5511 Nil!1562) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26005 res!49245) b!97847))

(assert (= (and b!97847 (not res!49246)) b!97848))

(declare-fun m!106733 () Bool)

(assert (=> d!26005 m!106733))

(assert (=> d!26005 m!106251))

(declare-fun m!106735 () Bool)

(assert (=> d!26005 m!106735))

(assert (=> b!97848 m!106251))

(declare-fun m!106737 () Bool)

(assert (=> b!97848 m!106737))

(assert (=> b!97481 d!26005))

(declare-fun d!26007 () Bool)

(declare-fun res!49247 () Bool)

(declare-fun e!63800 () Bool)

(assert (=> d!26007 (=> (not res!49247) (not e!63800))))

(assert (=> d!26007 (= res!49247 (simpleValid!68 (_2!1160 lt!48807)))))

(assert (=> d!26007 (= (valid!392 (_2!1160 lt!48807)) e!63800)))

(declare-fun b!97849 () Bool)

(declare-fun res!49248 () Bool)

(assert (=> b!97849 (=> (not res!49248) (not e!63800))))

(assert (=> b!97849 (= res!49248 (= (arrayCountValidKeys!0 (_keys!4170 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))) (_size!474 (_2!1160 lt!48807))))))

(declare-fun b!97850 () Bool)

(declare-fun res!49249 () Bool)

(assert (=> b!97850 (=> (not res!49249) (not e!63800))))

(assert (=> b!97850 (= res!49249 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807))))))

(declare-fun b!97851 () Bool)

(assert (=> b!97851 (= e!63800 (arrayNoDuplicates!0 (_keys!4170 (_2!1160 lt!48807)) #b00000000000000000000000000000000 Nil!1562))))

(assert (= (and d!26007 res!49247) b!97849))

(assert (= (and b!97849 res!49248) b!97850))

(assert (= (and b!97850 res!49249) b!97851))

(declare-fun m!106739 () Bool)

(assert (=> d!26007 m!106739))

(declare-fun m!106741 () Bool)

(assert (=> b!97849 m!106741))

(declare-fun m!106743 () Bool)

(assert (=> b!97850 m!106743))

(declare-fun m!106745 () Bool)

(assert (=> b!97851 m!106745))

(assert (=> d!25951 d!26007))

(assert (=> d!25951 d!25961))

(declare-fun d!26009 () Bool)

(declare-fun res!49250 () Bool)

(declare-fun e!63801 () Bool)

(assert (=> d!26009 (=> res!49250 e!63801)))

(assert (=> d!26009 (= res!49250 (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26009 (= (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!63801)))

(declare-fun b!97852 () Bool)

(declare-fun e!63802 () Bool)

(assert (=> b!97852 (= e!63801 e!63802)))

(declare-fun res!49251 () Bool)

(assert (=> b!97852 (=> (not res!49251) (not e!63802))))

(assert (=> b!97852 (= res!49251 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97853 () Bool)

(assert (=> b!97853 (= e!63802 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26009 (not res!49250)) b!97852))

(assert (= (and b!97852 res!49251) b!97853))

(declare-fun m!106747 () Bool)

(assert (=> d!26009 m!106747))

(assert (=> b!97853 m!106251))

(declare-fun m!106749 () Bool)

(assert (=> b!97853 m!106749))

(assert (=> b!97461 d!26009))

(declare-fun d!26011 () Bool)

(assert (=> d!26011 (= (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (and (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97482 d!26011))

(declare-fun d!26013 () Bool)

(declare-fun res!49252 () Bool)

(declare-fun e!63803 () Bool)

(assert (=> d!26013 (=> res!49252 e!63803)))

(assert (=> d!26013 (= res!49252 (= (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26013 (= (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000) e!63803)))

(declare-fun b!97854 () Bool)

(declare-fun e!63804 () Bool)

(assert (=> b!97854 (= e!63803 e!63804)))

(declare-fun res!49253 () Bool)

(assert (=> b!97854 (=> (not res!49253) (not e!63804))))

(assert (=> b!97854 (= res!49253 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!97855 () Bool)

(assert (=> b!97855 (= e!63804 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26013 (not res!49252)) b!97854))

(assert (= (and b!97854 res!49253) b!97855))

(assert (=> d!26013 m!106551))

(assert (=> b!97855 m!106251))

(declare-fun m!106751 () Bool)

(assert (=> b!97855 m!106751))

(assert (=> bm!9911 d!26013))

(assert (=> d!25959 d!25955))

(declare-fun d!26015 () Bool)

(declare-fun e!63805 () Bool)

(assert (=> d!26015 e!63805))

(declare-fun res!49254 () Bool)

(assert (=> d!26015 (=> res!49254 e!63805)))

(declare-fun lt!48997 () Bool)

(assert (=> d!26015 (= res!49254 (not lt!48997))))

(declare-fun lt!49000 () Bool)

(assert (=> d!26015 (= lt!48997 lt!49000)))

(declare-fun lt!48998 () Unit!2917)

(declare-fun e!63806 () Unit!2917)

(assert (=> d!26015 (= lt!48998 e!63806)))

(declare-fun c!16581 () Bool)

(assert (=> d!26015 (= c!16581 lt!49000)))

(assert (=> d!26015 (= lt!49000 (containsKey!154 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26015 (= (contains!788 call!9918 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!48997)))

(declare-fun b!97856 () Bool)

(declare-fun lt!48999 () Unit!2917)

(assert (=> b!97856 (= e!63806 lt!48999)))

(assert (=> b!97856 (= lt!48999 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!97856 (isDefined!103 (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!97857 () Bool)

(declare-fun Unit!2936 () Unit!2917)

(assert (=> b!97857 (= e!63806 Unit!2936)))

(declare-fun b!97858 () Bool)

(assert (=> b!97858 (= e!63805 (isDefined!103 (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (= (and d!26015 c!16581) b!97856))

(assert (= (and d!26015 (not c!16581)) b!97857))

(assert (= (and d!26015 (not res!49254)) b!97858))

(assert (=> d!26015 m!106251))

(declare-fun m!106753 () Bool)

(assert (=> d!26015 m!106753))

(assert (=> b!97856 m!106251))

(declare-fun m!106755 () Bool)

(assert (=> b!97856 m!106755))

(assert (=> b!97856 m!106251))

(declare-fun m!106757 () Bool)

(assert (=> b!97856 m!106757))

(assert (=> b!97856 m!106757))

(declare-fun m!106759 () Bool)

(assert (=> b!97856 m!106759))

(assert (=> b!97858 m!106251))

(assert (=> b!97858 m!106757))

(assert (=> b!97858 m!106757))

(assert (=> b!97858 m!106759))

(assert (=> b!97585 d!26015))

(declare-fun d!26017 () Bool)

(assert (=> d!26017 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49003 () Unit!2917)

(declare-fun choose!599 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 V!3153 Int) Unit!2917)

(assert (=> d!26017 (= lt!49003 (choose!599 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48809 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26017 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26017 (= (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48809 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)) lt!49003)))

(declare-fun bs!4026 () Bool)

(assert (= bs!4026 d!26017))

(assert (=> bs!4026 m!106413))

(declare-fun m!106761 () Bool)

(assert (=> bs!4026 m!106761))

(assert (=> bs!4026 m!106277))

(declare-fun m!106763 () Bool)

(assert (=> bs!4026 m!106763))

(assert (=> bs!4026 m!106277))

(declare-fun m!106765 () Bool)

(assert (=> bs!4026 m!106765))

(assert (=> bs!4026 m!106413))

(assert (=> bs!4026 m!106537))

(assert (=> b!97600 d!26017))

(assert (=> b!97671 d!25979))

(declare-fun b!97859 () Bool)

(declare-fun e!63809 () Bool)

(declare-fun call!9970 () Bool)

(assert (=> b!97859 (= e!63809 (not call!9970))))

(declare-fun b!97860 () Bool)

(declare-fun e!63814 () Bool)

(declare-fun e!63811 () Bool)

(assert (=> b!97860 (= e!63814 e!63811)))

(declare-fun res!49260 () Bool)

(assert (=> b!97860 (=> (not res!49260) (not e!63811))))

(declare-fun lt!49009 () ListLongMap!1499)

(assert (=> b!97860 (= res!49260 (contains!788 lt!49009 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97860 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!97861 () Bool)

(assert (=> b!97861 (= e!63811 (= (apply!92 lt!49009 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97861 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816))))))

(assert (=> b!97861 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9961 () Bool)

(declare-fun call!9964 () Bool)

(assert (=> bm!9961 (= call!9964 (contains!788 lt!49009 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97862 () Bool)

(declare-fun e!63816 () ListLongMap!1499)

(declare-fun call!9969 () ListLongMap!1499)

(assert (=> b!97862 (= e!63816 (+!130 call!9969 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!97863 () Bool)

(declare-fun e!63808 () Unit!2917)

(declare-fun lt!49024 () Unit!2917)

(assert (=> b!97863 (= e!63808 lt!49024)))

(declare-fun lt!49021 () ListLongMap!1499)

(assert (=> b!97863 (= lt!49021 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49017 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49017 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49015 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49015 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49011 () Unit!2917)

(assert (=> b!97863 (= lt!49011 (addStillContains!68 lt!49021 lt!49017 (zeroValue!2363 newMap!16) lt!49015))))

(assert (=> b!97863 (contains!788 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) lt!49015)))

(declare-fun lt!49020 () Unit!2917)

(assert (=> b!97863 (= lt!49020 lt!49011)))

(declare-fun lt!49010 () ListLongMap!1499)

(assert (=> b!97863 (= lt!49010 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49022 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49022 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49012 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49012 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49018 () Unit!2917)

(assert (=> b!97863 (= lt!49018 (addApplyDifferent!68 lt!49010 lt!49022 (minValue!2363 newMap!16) lt!49012))))

(assert (=> b!97863 (= (apply!92 (+!130 lt!49010 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) lt!49012) (apply!92 lt!49010 lt!49012))))

(declare-fun lt!49014 () Unit!2917)

(assert (=> b!97863 (= lt!49014 lt!49018)))

(declare-fun lt!49025 () ListLongMap!1499)

(assert (=> b!97863 (= lt!49025 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49008 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49008 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49019 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49019 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49007 () Unit!2917)

(assert (=> b!97863 (= lt!49007 (addApplyDifferent!68 lt!49025 lt!49008 (zeroValue!2363 newMap!16) lt!49019))))

(assert (=> b!97863 (= (apply!92 (+!130 lt!49025 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) lt!49019) (apply!92 lt!49025 lt!49019))))

(declare-fun lt!49005 () Unit!2917)

(assert (=> b!97863 (= lt!49005 lt!49007)))

(declare-fun lt!49016 () ListLongMap!1499)

(assert (=> b!97863 (= lt!49016 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49006 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49006 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49013 () (_ BitVec 64))

(assert (=> b!97863 (= lt!49013 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97863 (= lt!49024 (addApplyDifferent!68 lt!49016 lt!49006 (minValue!2363 newMap!16) lt!49013))))

(assert (=> b!97863 (= (apply!92 (+!130 lt!49016 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) lt!49013) (apply!92 lt!49016 lt!49013))))

(declare-fun b!97864 () Bool)

(declare-fun c!16582 () Bool)

(assert (=> b!97864 (= c!16582 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63807 () ListLongMap!1499)

(declare-fun e!63812 () ListLongMap!1499)

(assert (=> b!97864 (= e!63807 e!63812)))

(declare-fun b!97865 () Bool)

(declare-fun e!63818 () Bool)

(assert (=> b!97865 (= e!63818 (= (apply!92 lt!49009 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!97866 () Bool)

(declare-fun e!63810 () Bool)

(assert (=> b!97866 (= e!63810 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97867 () Bool)

(declare-fun res!49261 () Bool)

(declare-fun e!63817 () Bool)

(assert (=> b!97867 (=> (not res!49261) (not e!63817))))

(declare-fun e!63819 () Bool)

(assert (=> b!97867 (= res!49261 e!63819)))

(declare-fun c!16585 () Bool)

(assert (=> b!97867 (= c!16585 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!97868 () Bool)

(declare-fun call!9968 () ListLongMap!1499)

(assert (=> b!97868 (= e!63807 call!9968)))

(declare-fun bm!9962 () Bool)

(assert (=> bm!9962 (= call!9968 call!9969)))

(declare-fun b!97869 () Bool)

(assert (=> b!97869 (= e!63819 (not call!9964))))

(declare-fun b!97870 () Bool)

(declare-fun e!63815 () Bool)

(assert (=> b!97870 (= e!63815 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9963 () Bool)

(declare-fun call!9966 () ListLongMap!1499)

(declare-fun call!9965 () ListLongMap!1499)

(assert (=> bm!9963 (= call!9966 call!9965)))

(declare-fun bm!9964 () Bool)

(assert (=> bm!9964 (= call!9970 (contains!788 lt!49009 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97871 () Bool)

(assert (=> b!97871 (= e!63817 e!63809)))

(declare-fun c!16584 () Bool)

(assert (=> b!97871 (= c!16584 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97872 () Bool)

(assert (=> b!97872 (= e!63819 e!63818)))

(declare-fun res!49262 () Bool)

(assert (=> b!97872 (= res!49262 call!9964)))

(assert (=> b!97872 (=> (not res!49262) (not e!63818))))

(declare-fun b!97873 () Bool)

(declare-fun e!63813 () Bool)

(assert (=> b!97873 (= e!63809 e!63813)))

(declare-fun res!49259 () Bool)

(assert (=> b!97873 (= res!49259 call!9970)))

(assert (=> b!97873 (=> (not res!49259) (not e!63813))))

(declare-fun b!97874 () Bool)

(declare-fun res!49255 () Bool)

(assert (=> b!97874 (=> (not res!49255) (not e!63817))))

(assert (=> b!97874 (= res!49255 e!63814)))

(declare-fun res!49256 () Bool)

(assert (=> b!97874 (=> res!49256 e!63814)))

(assert (=> b!97874 (= res!49256 (not e!63815))))

(declare-fun res!49258 () Bool)

(assert (=> b!97874 (=> (not res!49258) (not e!63815))))

(assert (=> b!97874 (= res!49258 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9965 () Bool)

(declare-fun call!9967 () ListLongMap!1499)

(assert (=> bm!9965 (= call!9967 call!9966)))

(declare-fun b!97875 () Bool)

(assert (=> b!97875 (= e!63813 (= (apply!92 lt!49009 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!97876 () Bool)

(assert (=> b!97876 (= e!63816 e!63807)))

(declare-fun c!16583 () Bool)

(assert (=> b!97876 (= c!16583 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9966 () Bool)

(assert (=> bm!9966 (= call!9965 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!97877 () Bool)

(declare-fun Unit!2937 () Unit!2917)

(assert (=> b!97877 (= e!63808 Unit!2937)))

(declare-fun b!97878 () Bool)

(assert (=> b!97878 (= e!63812 call!9967)))

(declare-fun b!97879 () Bool)

(assert (=> b!97879 (= e!63812 call!9968)))

(declare-fun c!16587 () Bool)

(declare-fun bm!9967 () Bool)

(assert (=> bm!9967 (= call!9969 (+!130 (ite c!16587 call!9965 (ite c!16583 call!9966 call!9967)) (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26019 () Bool)

(assert (=> d!26019 e!63817))

(declare-fun res!49263 () Bool)

(assert (=> d!26019 (=> (not res!49263) (not e!63817))))

(assert (=> d!26019 (= res!49263 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!49023 () ListLongMap!1499)

(assert (=> d!26019 (= lt!49009 lt!49023)))

(declare-fun lt!49004 () Unit!2917)

(assert (=> d!26019 (= lt!49004 e!63808)))

(declare-fun c!16586 () Bool)

(assert (=> d!26019 (= c!16586 e!63810)))

(declare-fun res!49257 () Bool)

(assert (=> d!26019 (=> (not res!49257) (not e!63810))))

(assert (=> d!26019 (= res!49257 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26019 (= lt!49023 e!63816)))

(assert (=> d!26019 (= c!16587 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26019 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26019 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49009)))

(assert (= (and d!26019 c!16587) b!97862))

(assert (= (and d!26019 (not c!16587)) b!97876))

(assert (= (and b!97876 c!16583) b!97868))

(assert (= (and b!97876 (not c!16583)) b!97864))

(assert (= (and b!97864 c!16582) b!97879))

(assert (= (and b!97864 (not c!16582)) b!97878))

(assert (= (or b!97879 b!97878) bm!9965))

(assert (= (or b!97868 bm!9965) bm!9963))

(assert (= (or b!97868 b!97879) bm!9962))

(assert (= (or b!97862 bm!9963) bm!9966))

(assert (= (or b!97862 bm!9962) bm!9967))

(assert (= (and d!26019 res!49257) b!97866))

(assert (= (and d!26019 c!16586) b!97863))

(assert (= (and d!26019 (not c!16586)) b!97877))

(assert (= (and d!26019 res!49263) b!97874))

(assert (= (and b!97874 res!49258) b!97870))

(assert (= (and b!97874 (not res!49256)) b!97860))

(assert (= (and b!97860 res!49260) b!97861))

(assert (= (and b!97874 res!49255) b!97867))

(assert (= (and b!97867 c!16585) b!97872))

(assert (= (and b!97867 (not c!16585)) b!97869))

(assert (= (and b!97872 res!49262) b!97865))

(assert (= (or b!97872 b!97869) bm!9961))

(assert (= (and b!97867 res!49261) b!97871))

(assert (= (and b!97871 c!16584) b!97873))

(assert (= (and b!97871 (not c!16584)) b!97859))

(assert (= (and b!97873 res!49259) b!97875))

(assert (= (or b!97873 b!97859) bm!9964))

(declare-fun b_lambda!4341 () Bool)

(assert (=> (not b_lambda!4341) (not b!97861)))

(assert (=> b!97861 t!5523))

(declare-fun b_and!6001 () Bool)

(assert (= b_and!5997 (and (=> t!5523 result!3271) b_and!6001)))

(assert (=> b!97861 t!5525))

(declare-fun b_and!6003 () Bool)

(assert (= b_and!5999 (and (=> t!5525 result!3273) b_and!6003)))

(declare-fun m!106767 () Bool)

(assert (=> b!97865 m!106767))

(declare-fun m!106769 () Bool)

(assert (=> bm!9967 m!106769))

(declare-fun m!106771 () Bool)

(assert (=> b!97862 m!106771))

(assert (=> b!97860 m!106551))

(assert (=> b!97860 m!106551))

(declare-fun m!106773 () Bool)

(assert (=> b!97860 m!106773))

(assert (=> b!97861 m!106551))

(declare-fun m!106775 () Bool)

(assert (=> b!97861 m!106775))

(assert (=> b!97861 m!106557))

(assert (=> b!97861 m!106551))

(declare-fun m!106777 () Bool)

(assert (=> b!97861 m!106777))

(assert (=> b!97861 m!106775))

(assert (=> b!97861 m!106557))

(declare-fun m!106779 () Bool)

(assert (=> b!97861 m!106779))

(declare-fun m!106781 () Bool)

(assert (=> bm!9966 m!106781))

(declare-fun m!106783 () Bool)

(assert (=> b!97863 m!106783))

(declare-fun m!106785 () Bool)

(assert (=> b!97863 m!106785))

(assert (=> b!97863 m!106551))

(declare-fun m!106787 () Bool)

(assert (=> b!97863 m!106787))

(assert (=> b!97863 m!106781))

(declare-fun m!106789 () Bool)

(assert (=> b!97863 m!106789))

(declare-fun m!106791 () Bool)

(assert (=> b!97863 m!106791))

(declare-fun m!106793 () Bool)

(assert (=> b!97863 m!106793))

(declare-fun m!106795 () Bool)

(assert (=> b!97863 m!106795))

(declare-fun m!106797 () Bool)

(assert (=> b!97863 m!106797))

(declare-fun m!106799 () Bool)

(assert (=> b!97863 m!106799))

(declare-fun m!106801 () Bool)

(assert (=> b!97863 m!106801))

(declare-fun m!106803 () Bool)

(assert (=> b!97863 m!106803))

(declare-fun m!106805 () Bool)

(assert (=> b!97863 m!106805))

(assert (=> b!97863 m!106805))

(declare-fun m!106807 () Bool)

(assert (=> b!97863 m!106807))

(assert (=> b!97863 m!106797))

(declare-fun m!106809 () Bool)

(assert (=> b!97863 m!106809))

(declare-fun m!106811 () Bool)

(assert (=> b!97863 m!106811))

(assert (=> b!97863 m!106783))

(assert (=> b!97863 m!106789))

(declare-fun m!106813 () Bool)

(assert (=> bm!9964 m!106813))

(assert (=> d!26019 m!106537))

(declare-fun m!106815 () Bool)

(assert (=> bm!9961 m!106815))

(assert (=> b!97870 m!106551))

(assert (=> b!97870 m!106551))

(assert (=> b!97870 m!106599))

(declare-fun m!106817 () Bool)

(assert (=> b!97875 m!106817))

(assert (=> b!97866 m!106551))

(assert (=> b!97866 m!106551))

(assert (=> b!97866 m!106599))

(assert (=> bm!9902 d!26019))

(declare-fun d!26021 () Bool)

(assert (=> d!26021 (= (inRange!0 (ite c!16514 (ite c!16517 (index!3132 lt!48831) (ite c!16513 (index!3131 lt!48819) (index!3134 lt!48819))) (ite c!16510 (index!3132 lt!48832) (ite c!16509 (index!3131 lt!48828) (index!3134 lt!48828)))) (mask!6577 newMap!16)) (and (bvsge (ite c!16514 (ite c!16517 (index!3132 lt!48831) (ite c!16513 (index!3131 lt!48819) (index!3134 lt!48819))) (ite c!16510 (index!3132 lt!48832) (ite c!16509 (index!3131 lt!48828) (index!3134 lt!48828)))) #b00000000000000000000000000000000) (bvslt (ite c!16514 (ite c!16517 (index!3132 lt!48831) (ite c!16513 (index!3131 lt!48819) (index!3134 lt!48819))) (ite c!16510 (index!3132 lt!48832) (ite c!16509 (index!3131 lt!48828) (index!3134 lt!48828)))) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9915 d!26021))

(declare-fun d!26023 () Bool)

(assert (=> d!26023 (isDefined!103 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun lt!49028 () Unit!2917)

(declare-fun choose!600 (List!1564 (_ BitVec 64)) Unit!2917)

(assert (=> d!26023 (= lt!49028 (choose!600 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!63822 () Bool)

(assert (=> d!26023 e!63822))

(declare-fun res!49266 () Bool)

(assert (=> d!26023 (=> (not res!49266) (not e!63822))))

(declare-fun isStrictlySorted!291 (List!1564) Bool)

(assert (=> d!26023 (= res!49266 (isStrictlySorted!291 (toList!765 lt!48683)))))

(assert (=> d!26023 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!49028)))

(declare-fun b!97882 () Bool)

(assert (=> b!97882 (= e!63822 (containsKey!154 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26023 res!49266) b!97882))

(assert (=> d!26023 m!106251))

(assert (=> d!26023 m!106399))

(assert (=> d!26023 m!106399))

(assert (=> d!26023 m!106401))

(assert (=> d!26023 m!106251))

(declare-fun m!106819 () Bool)

(assert (=> d!26023 m!106819))

(declare-fun m!106821 () Bool)

(assert (=> d!26023 m!106821))

(assert (=> b!97882 m!106251))

(assert (=> b!97882 m!106395))

(assert (=> b!97489 d!26023))

(declare-fun d!26025 () Bool)

(declare-fun isEmpty!362 (Option!157) Bool)

(assert (=> d!26025 (= (isDefined!103 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) (not (isEmpty!362 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun bs!4027 () Bool)

(assert (= bs!4027 d!26025))

(assert (=> bs!4027 m!106399))

(declare-fun m!106823 () Bool)

(assert (=> bs!4027 m!106823))

(assert (=> b!97489 d!26025))

(declare-fun b!97891 () Bool)

(declare-fun e!63827 () Option!157)

(assert (=> b!97891 (= e!63827 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48683)))))))

(declare-fun b!97894 () Bool)

(declare-fun e!63828 () Option!157)

(assert (=> b!97894 (= e!63828 None!155)))

(declare-fun b!97892 () Bool)

(assert (=> b!97892 (= e!63827 e!63828)))

(declare-fun c!16593 () Bool)

(assert (=> b!97892 (= c!16593 (and ((_ is Cons!1560) (toList!765 lt!48683)) (not (= (_1!1161 (h!2154 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun d!26027 () Bool)

(declare-fun c!16592 () Bool)

(assert (=> d!26027 (= c!16592 (and ((_ is Cons!1560) (toList!765 lt!48683)) (= (_1!1161 (h!2154 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26027 (= (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!63827)))

(declare-fun b!97893 () Bool)

(assert (=> b!97893 (= e!63828 (getValueByKey!151 (t!5510 (toList!765 lt!48683)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26027 c!16592) b!97891))

(assert (= (and d!26027 (not c!16592)) b!97892))

(assert (= (and b!97892 c!16593) b!97893))

(assert (= (and b!97892 (not c!16593)) b!97894))

(assert (=> b!97893 m!106251))

(declare-fun m!106825 () Bool)

(assert (=> b!97893 m!106825))

(assert (=> b!97489 d!26027))

(declare-fun d!26029 () Bool)

(declare-fun e!63829 () Bool)

(assert (=> d!26029 e!63829))

(declare-fun res!49268 () Bool)

(assert (=> d!26029 (=> (not res!49268) (not e!63829))))

(declare-fun lt!49029 () ListLongMap!1499)

(assert (=> d!26029 (= res!49268 (contains!788 lt!49029 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49030 () List!1564)

(assert (=> d!26029 (= lt!49029 (ListLongMap!1500 lt!49030))))

(declare-fun lt!49032 () Unit!2917)

(declare-fun lt!49031 () Unit!2917)

(assert (=> d!26029 (= lt!49032 lt!49031)))

(assert (=> d!26029 (= (getValueByKey!151 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26029 (= lt!49031 (lemmaContainsTupThenGetReturnValue!67 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26029 (= lt!49030 (insertStrictlySorted!70 (toList!765 e!63661) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26029 (= (+!130 e!63661 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49029)))

(declare-fun b!97895 () Bool)

(declare-fun res!49267 () Bool)

(assert (=> b!97895 (=> (not res!49267) (not e!63829))))

(assert (=> b!97895 (= res!49267 (= (getValueByKey!151 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!97896 () Bool)

(assert (=> b!97896 (= e!63829 (contains!791 (toList!765 lt!49029) (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26029 res!49268) b!97895))

(assert (= (and b!97895 res!49267) b!97896))

(declare-fun m!106827 () Bool)

(assert (=> d!26029 m!106827))

(declare-fun m!106829 () Bool)

(assert (=> d!26029 m!106829))

(declare-fun m!106831 () Bool)

(assert (=> d!26029 m!106831))

(declare-fun m!106833 () Bool)

(assert (=> d!26029 m!106833))

(declare-fun m!106835 () Bool)

(assert (=> b!97895 m!106835))

(declare-fun m!106837 () Bool)

(assert (=> b!97896 m!106837))

(assert (=> bm!9900 d!26029))

(assert (=> b!97491 d!26025))

(assert (=> b!97491 d!26027))

(declare-fun d!26031 () Bool)

(declare-fun get!1292 (Option!157) V!3153)

(assert (=> d!26031 (= (apply!92 lt!48882 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4028 () Bool)

(assert (= bs!4028 d!26031))

(assert (=> bs!4028 m!106721))

(assert (=> bs!4028 m!106721))

(declare-fun m!106839 () Bool)

(assert (=> bs!4028 m!106839))

(assert (=> b!97666 d!26031))

(assert (=> d!25937 d!25941))

(declare-fun d!26033 () Bool)

(assert (=> d!26033 (not (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26033 true))

(declare-fun _$68!91 () Unit!2917)

(assert (=> d!26033 (= (choose!68 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562)) _$68!91)))

(declare-fun bs!4029 () Bool)

(assert (= bs!4029 d!26033))

(assert (=> bs!4029 m!106251))

(assert (=> bs!4029 m!106255))

(assert (=> d!25937 d!26033))

(declare-fun b!97905 () Bool)

(declare-fun e!63838 () Bool)

(declare-fun e!63836 () Bool)

(assert (=> b!97905 (= e!63838 e!63836)))

(declare-fun lt!49039 () (_ BitVec 64))

(assert (=> b!97905 (= lt!49039 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49040 () Unit!2917)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4223 (_ BitVec 64) (_ BitVec 32)) Unit!2917)

(assert (=> b!97905 (= lt!49040 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000))))

(assert (=> b!97905 (arrayContainsKey!0 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000)))

(declare-fun lt!49041 () Unit!2917)

(assert (=> b!97905 (= lt!49041 lt!49040)))

(declare-fun res!49273 () Bool)

(assert (=> b!97905 (= res!49273 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (_keys!4170 newMap!16) (mask!6577 newMap!16)) (Found!247 #b00000000000000000000000000000000)))))

(assert (=> b!97905 (=> (not res!49273) (not e!63836))))

(declare-fun b!97906 () Bool)

(declare-fun call!9973 () Bool)

(assert (=> b!97906 (= e!63836 call!9973)))

(declare-fun b!97907 () Bool)

(assert (=> b!97907 (= e!63838 call!9973)))

(declare-fun d!26035 () Bool)

(declare-fun res!49274 () Bool)

(declare-fun e!63837 () Bool)

(assert (=> d!26035 (=> res!49274 e!63837)))

(assert (=> d!26035 (= res!49274 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26035 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 newMap!16) (mask!6577 newMap!16)) e!63837)))

(declare-fun b!97908 () Bool)

(assert (=> b!97908 (= e!63837 e!63838)))

(declare-fun c!16596 () Bool)

(assert (=> b!97908 (= c!16596 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9970 () Bool)

(assert (=> bm!9970 (= call!9973 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (= (and d!26035 (not res!49274)) b!97908))

(assert (= (and b!97908 c!16596) b!97905))

(assert (= (and b!97908 (not c!16596)) b!97907))

(assert (= (and b!97905 res!49273) b!97906))

(assert (= (or b!97906 b!97907) bm!9970))

(assert (=> b!97905 m!106551))

(declare-fun m!106841 () Bool)

(assert (=> b!97905 m!106841))

(declare-fun m!106843 () Bool)

(assert (=> b!97905 m!106843))

(assert (=> b!97905 m!106551))

(declare-fun m!106845 () Bool)

(assert (=> b!97905 m!106845))

(assert (=> b!97908 m!106551))

(assert (=> b!97908 m!106551))

(assert (=> b!97908 m!106599))

(declare-fun m!106847 () Bool)

(assert (=> bm!9970 m!106847))

(assert (=> b!97688 d!26035))

(declare-fun d!26037 () Bool)

(declare-fun e!63839 () Bool)

(assert (=> d!26037 e!63839))

(declare-fun res!49276 () Bool)

(assert (=> d!26037 (=> (not res!49276) (not e!63839))))

(declare-fun lt!49042 () ListLongMap!1499)

(assert (=> d!26037 (= res!49276 (contains!788 lt!49042 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49043 () List!1564)

(assert (=> d!26037 (= lt!49042 (ListLongMap!1500 lt!49043))))

(declare-fun lt!49045 () Unit!2917)

(declare-fun lt!49044 () Unit!2917)

(assert (=> d!26037 (= lt!49045 lt!49044)))

(assert (=> d!26037 (= (getValueByKey!151 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26037 (= lt!49044 (lemmaContainsTupThenGetReturnValue!67 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26037 (= lt!49043 (insertStrictlySorted!70 (toList!765 lt!48898) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26037 (= (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49042)))

(declare-fun b!97909 () Bool)

(declare-fun res!49275 () Bool)

(assert (=> b!97909 (=> (not res!49275) (not e!63839))))

(assert (=> b!97909 (= res!49275 (= (getValueByKey!151 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!97910 () Bool)

(assert (=> b!97910 (= e!63839 (contains!791 (toList!765 lt!49042) (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26037 res!49276) b!97909))

(assert (= (and b!97909 res!49275) b!97910))

(declare-fun m!106849 () Bool)

(assert (=> d!26037 m!106849))

(declare-fun m!106851 () Bool)

(assert (=> d!26037 m!106851))

(declare-fun m!106853 () Bool)

(assert (=> d!26037 m!106853))

(declare-fun m!106855 () Bool)

(assert (=> d!26037 m!106855))

(declare-fun m!106857 () Bool)

(assert (=> b!97909 m!106857))

(declare-fun m!106859 () Bool)

(assert (=> b!97910 m!106859))

(assert (=> b!97664 d!26037))

(declare-fun d!26039 () Bool)

(declare-fun e!63840 () Bool)

(assert (=> d!26039 e!63840))

(declare-fun res!49278 () Bool)

(assert (=> d!26039 (=> (not res!49278) (not e!63840))))

(declare-fun lt!49046 () ListLongMap!1499)

(assert (=> d!26039 (= res!49278 (contains!788 lt!49046 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49047 () List!1564)

(assert (=> d!26039 (= lt!49046 (ListLongMap!1500 lt!49047))))

(declare-fun lt!49049 () Unit!2917)

(declare-fun lt!49048 () Unit!2917)

(assert (=> d!26039 (= lt!49049 lt!49048)))

(assert (=> d!26039 (= (getValueByKey!151 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26039 (= lt!49048 (lemmaContainsTupThenGetReturnValue!67 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26039 (= lt!49047 (insertStrictlySorted!70 (toList!765 lt!48894) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26039 (= (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49046)))

(declare-fun b!97911 () Bool)

(declare-fun res!49277 () Bool)

(assert (=> b!97911 (=> (not res!49277) (not e!63840))))

(assert (=> b!97911 (= res!49277 (= (getValueByKey!151 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!97912 () Bool)

(assert (=> b!97912 (= e!63840 (contains!791 (toList!765 lt!49046) (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26039 res!49278) b!97911))

(assert (= (and b!97911 res!49277) b!97912))

(declare-fun m!106861 () Bool)

(assert (=> d!26039 m!106861))

(declare-fun m!106863 () Bool)

(assert (=> d!26039 m!106863))

(declare-fun m!106865 () Bool)

(assert (=> d!26039 m!106865))

(declare-fun m!106867 () Bool)

(assert (=> d!26039 m!106867))

(declare-fun m!106869 () Bool)

(assert (=> b!97911 m!106869))

(declare-fun m!106871 () Bool)

(assert (=> b!97912 m!106871))

(assert (=> b!97664 d!26039))

(declare-fun b!97937 () Bool)

(assert (=> b!97937 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> b!97937 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun lt!49066 () ListLongMap!1499)

(declare-fun e!63857 () Bool)

(assert (=> b!97937 (= e!63857 (= (apply!92 lt!49066 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!97938 () Bool)

(declare-fun e!63860 () Bool)

(declare-fun e!63859 () Bool)

(assert (=> b!97938 (= e!63860 e!63859)))

(declare-fun c!16606 () Bool)

(assert (=> b!97938 (= c!16606 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97939 () Bool)

(assert (=> b!97939 (= e!63860 e!63857)))

(assert (=> b!97939 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun res!49290 () Bool)

(assert (=> b!97939 (= res!49290 (contains!788 lt!49066 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97939 (=> (not res!49290) (not e!63857))))

(declare-fun b!97940 () Bool)

(declare-fun e!63856 () ListLongMap!1499)

(declare-fun call!9976 () ListLongMap!1499)

(assert (=> b!97940 (= e!63856 call!9976)))

(declare-fun b!97941 () Bool)

(declare-fun e!63858 () Bool)

(assert (=> b!97941 (= e!63858 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97941 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun d!26041 () Bool)

(declare-fun e!63861 () Bool)

(assert (=> d!26041 e!63861))

(declare-fun res!49289 () Bool)

(assert (=> d!26041 (=> (not res!49289) (not e!63861))))

(assert (=> d!26041 (= res!49289 (not (contains!788 lt!49066 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!63855 () ListLongMap!1499)

(assert (=> d!26041 (= lt!49066 e!63855)))

(declare-fun c!16607 () Bool)

(assert (=> d!26041 (= c!16607 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26041 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992))))))

(assert (=> d!26041 (= (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) lt!49066)))

(declare-fun b!97942 () Bool)

(declare-fun isEmpty!363 (ListLongMap!1499) Bool)

(assert (=> b!97942 (= e!63859 (isEmpty!363 lt!49066))))

(declare-fun b!97943 () Bool)

(assert (=> b!97943 (= e!63855 (ListLongMap!1500 Nil!1561))))

(declare-fun b!97944 () Bool)

(assert (=> b!97944 (= e!63861 e!63860)))

(declare-fun c!16605 () Bool)

(assert (=> b!97944 (= c!16605 e!63858)))

(declare-fun res!49288 () Bool)

(assert (=> b!97944 (=> (not res!49288) (not e!63858))))

(assert (=> b!97944 (= res!49288 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!97945 () Bool)

(declare-fun res!49287 () Bool)

(assert (=> b!97945 (=> (not res!49287) (not e!63861))))

(assert (=> b!97945 (= res!49287 (not (contains!788 lt!49066 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97946 () Bool)

(declare-fun lt!49068 () Unit!2917)

(declare-fun lt!49065 () Unit!2917)

(assert (=> b!97946 (= lt!49068 lt!49065)))

(declare-fun lt!49067 () (_ BitVec 64))

(declare-fun lt!49064 () V!3153)

(declare-fun lt!49069 () ListLongMap!1499)

(declare-fun lt!49070 () (_ BitVec 64))

(assert (=> b!97946 (not (contains!788 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064)) lt!49067))))

(declare-fun addStillNotContains!42 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> b!97946 (= lt!49065 (addStillNotContains!42 lt!49069 lt!49070 lt!49064 lt!49067))))

(assert (=> b!97946 (= lt!49067 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!97946 (= lt!49064 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!97946 (= lt!49070 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97946 (= lt!49069 call!9976)))

(assert (=> b!97946 (= e!63856 (+!130 call!9976 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!97947 () Bool)

(assert (=> b!97947 (= e!63855 e!63856)))

(declare-fun c!16608 () Bool)

(assert (=> b!97947 (= c!16608 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97948 () Bool)

(assert (=> b!97948 (= e!63859 (= lt!49066 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun bm!9973 () Bool)

(assert (=> bm!9973 (= call!9976 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(assert (= (and d!26041 c!16607) b!97943))

(assert (= (and d!26041 (not c!16607)) b!97947))

(assert (= (and b!97947 c!16608) b!97946))

(assert (= (and b!97947 (not c!16608)) b!97940))

(assert (= (or b!97946 b!97940) bm!9973))

(assert (= (and d!26041 res!49289) b!97945))

(assert (= (and b!97945 res!49287) b!97944))

(assert (= (and b!97944 res!49288) b!97941))

(assert (= (and b!97944 c!16605) b!97939))

(assert (= (and b!97944 (not c!16605)) b!97938))

(assert (= (and b!97939 res!49290) b!97937))

(assert (= (and b!97938 c!16606) b!97948))

(assert (= (and b!97938 (not c!16606)) b!97942))

(declare-fun b_lambda!4343 () Bool)

(assert (=> (not b_lambda!4343) (not b!97937)))

(assert (=> b!97937 t!5507))

(declare-fun b_and!6005 () Bool)

(assert (= b_and!6001 (and (=> t!5507 result!3251) b_and!6005)))

(assert (=> b!97937 t!5509))

(declare-fun b_and!6007 () Bool)

(assert (= b_and!6003 (and (=> t!5509 result!3255) b_and!6007)))

(declare-fun b_lambda!4345 () Bool)

(assert (=> (not b_lambda!4345) (not b!97946)))

(assert (=> b!97946 t!5507))

(declare-fun b_and!6009 () Bool)

(assert (= b_and!6005 (and (=> t!5507 result!3251) b_and!6009)))

(assert (=> b!97946 t!5509))

(declare-fun b_and!6011 () Bool)

(assert (= b_and!6007 (and (=> t!5509 result!3255) b_and!6011)))

(declare-fun m!106873 () Bool)

(assert (=> bm!9973 m!106873))

(declare-fun m!106875 () Bool)

(assert (=> d!26041 m!106875))

(assert (=> d!26041 m!106267))

(assert (=> b!97947 m!106381))

(assert (=> b!97947 m!106381))

(assert (=> b!97947 m!106513))

(declare-fun m!106877 () Bool)

(assert (=> b!97945 m!106877))

(assert (=> b!97948 m!106873))

(declare-fun m!106879 () Bool)

(assert (=> b!97942 m!106879))

(assert (=> b!97937 m!106471))

(assert (=> b!97937 m!106275))

(assert (=> b!97937 m!106475))

(assert (=> b!97937 m!106381))

(declare-fun m!106881 () Bool)

(assert (=> b!97937 m!106881))

(assert (=> b!97937 m!106381))

(assert (=> b!97937 m!106275))

(assert (=> b!97937 m!106471))

(assert (=> b!97939 m!106381))

(assert (=> b!97939 m!106381))

(declare-fun m!106883 () Bool)

(assert (=> b!97939 m!106883))

(declare-fun m!106885 () Bool)

(assert (=> b!97946 m!106885))

(declare-fun m!106887 () Bool)

(assert (=> b!97946 m!106887))

(assert (=> b!97946 m!106885))

(declare-fun m!106889 () Bool)

(assert (=> b!97946 m!106889))

(assert (=> b!97946 m!106381))

(assert (=> b!97946 m!106275))

(assert (=> b!97946 m!106471))

(assert (=> b!97946 m!106471))

(assert (=> b!97946 m!106275))

(assert (=> b!97946 m!106475))

(declare-fun m!106891 () Bool)

(assert (=> b!97946 m!106891))

(assert (=> b!97941 m!106381))

(assert (=> b!97941 m!106381))

(assert (=> b!97941 m!106513))

(assert (=> b!97664 d!26041))

(declare-fun d!26043 () Bool)

(assert (=> d!26043 (= (apply!92 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48892) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48892)))))

(declare-fun bs!4030 () Bool)

(assert (= bs!4030 d!26043))

(declare-fun m!106893 () Bool)

(assert (=> bs!4030 m!106893))

(assert (=> bs!4030 m!106893))

(declare-fun m!106895 () Bool)

(assert (=> bs!4030 m!106895))

(assert (=> b!97664 d!26043))

(declare-fun d!26045 () Bool)

(assert (=> d!26045 (= (apply!92 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48886) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48886)))))

(declare-fun bs!4031 () Bool)

(assert (= bs!4031 d!26045))

(declare-fun m!106897 () Bool)

(assert (=> bs!4031 m!106897))

(assert (=> bs!4031 m!106897))

(declare-fun m!106899 () Bool)

(assert (=> bs!4031 m!106899))

(assert (=> b!97664 d!26045))

(declare-fun d!26047 () Bool)

(declare-fun e!63862 () Bool)

(assert (=> d!26047 e!63862))

(declare-fun res!49292 () Bool)

(assert (=> d!26047 (=> (not res!49292) (not e!63862))))

(declare-fun lt!49071 () ListLongMap!1499)

(assert (=> d!26047 (= res!49292 (contains!788 lt!49071 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49072 () List!1564)

(assert (=> d!26047 (= lt!49071 (ListLongMap!1500 lt!49072))))

(declare-fun lt!49074 () Unit!2917)

(declare-fun lt!49073 () Unit!2917)

(assert (=> d!26047 (= lt!49074 lt!49073)))

(assert (=> d!26047 (= (getValueByKey!151 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26047 (= lt!49073 (lemmaContainsTupThenGetReturnValue!67 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26047 (= lt!49072 (insertStrictlySorted!70 (toList!765 lt!48883) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26047 (= (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49071)))

(declare-fun b!97949 () Bool)

(declare-fun res!49291 () Bool)

(assert (=> b!97949 (=> (not res!49291) (not e!63862))))

(assert (=> b!97949 (= res!49291 (= (getValueByKey!151 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!97950 () Bool)

(assert (=> b!97950 (= e!63862 (contains!791 (toList!765 lt!49071) (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26047 res!49292) b!97949))

(assert (= (and b!97949 res!49291) b!97950))

(declare-fun m!106901 () Bool)

(assert (=> d!26047 m!106901))

(declare-fun m!106903 () Bool)

(assert (=> d!26047 m!106903))

(declare-fun m!106905 () Bool)

(assert (=> d!26047 m!106905))

(declare-fun m!106907 () Bool)

(assert (=> d!26047 m!106907))

(declare-fun m!106909 () Bool)

(assert (=> b!97949 m!106909))

(declare-fun m!106911 () Bool)

(assert (=> b!97950 m!106911))

(assert (=> b!97664 d!26047))

(declare-fun d!26049 () Bool)

(assert (=> d!26049 (= (apply!92 lt!48898 lt!48892) (get!1292 (getValueByKey!151 (toList!765 lt!48898) lt!48892)))))

(declare-fun bs!4032 () Bool)

(assert (= bs!4032 d!26049))

(declare-fun m!106913 () Bool)

(assert (=> bs!4032 m!106913))

(assert (=> bs!4032 m!106913))

(declare-fun m!106915 () Bool)

(assert (=> bs!4032 m!106915))

(assert (=> b!97664 d!26049))

(declare-fun d!26051 () Bool)

(assert (=> d!26051 (contains!788 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48888)))

(declare-fun lt!49077 () Unit!2917)

(declare-fun choose!601 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> d!26051 (= lt!49077 (choose!601 lt!48894 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48888))))

(assert (=> d!26051 (contains!788 lt!48894 lt!48888)))

(assert (=> d!26051 (= (addStillContains!68 lt!48894 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48888) lt!49077)))

(declare-fun bs!4033 () Bool)

(assert (= bs!4033 d!26051))

(assert (=> bs!4033 m!106485))

(assert (=> bs!4033 m!106485))

(assert (=> bs!4033 m!106487))

(declare-fun m!106917 () Bool)

(assert (=> bs!4033 m!106917))

(declare-fun m!106919 () Bool)

(assert (=> bs!4033 m!106919))

(assert (=> b!97664 d!26051))

(declare-fun d!26053 () Bool)

(assert (=> d!26053 (= (apply!92 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48885) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48885)))))

(declare-fun bs!4034 () Bool)

(assert (= bs!4034 d!26053))

(declare-fun m!106921 () Bool)

(assert (=> bs!4034 m!106921))

(assert (=> bs!4034 m!106921))

(declare-fun m!106923 () Bool)

(assert (=> bs!4034 m!106923))

(assert (=> b!97664 d!26053))

(declare-fun d!26055 () Bool)

(declare-fun e!63863 () Bool)

(assert (=> d!26055 e!63863))

(declare-fun res!49293 () Bool)

(assert (=> d!26055 (=> res!49293 e!63863)))

(declare-fun lt!49078 () Bool)

(assert (=> d!26055 (= res!49293 (not lt!49078))))

(declare-fun lt!49081 () Bool)

(assert (=> d!26055 (= lt!49078 lt!49081)))

(declare-fun lt!49079 () Unit!2917)

(declare-fun e!63864 () Unit!2917)

(assert (=> d!26055 (= lt!49079 e!63864)))

(declare-fun c!16609 () Bool)

(assert (=> d!26055 (= c!16609 lt!49081)))

(assert (=> d!26055 (= lt!49081 (containsKey!154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(assert (=> d!26055 (= (contains!788 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48888) lt!49078)))

(declare-fun b!97952 () Bool)

(declare-fun lt!49080 () Unit!2917)

(assert (=> b!97952 (= e!63864 lt!49080)))

(assert (=> b!97952 (= lt!49080 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(assert (=> b!97952 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(declare-fun b!97953 () Bool)

(declare-fun Unit!2938 () Unit!2917)

(assert (=> b!97953 (= e!63864 Unit!2938)))

(declare-fun b!97954 () Bool)

(assert (=> b!97954 (= e!63863 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888)))))

(assert (= (and d!26055 c!16609) b!97952))

(assert (= (and d!26055 (not c!16609)) b!97953))

(assert (= (and d!26055 (not res!49293)) b!97954))

(declare-fun m!106925 () Bool)

(assert (=> d!26055 m!106925))

(declare-fun m!106927 () Bool)

(assert (=> b!97952 m!106927))

(declare-fun m!106929 () Bool)

(assert (=> b!97952 m!106929))

(assert (=> b!97952 m!106929))

(declare-fun m!106931 () Bool)

(assert (=> b!97952 m!106931))

(assert (=> b!97954 m!106929))

(assert (=> b!97954 m!106929))

(assert (=> b!97954 m!106931))

(assert (=> b!97664 d!26055))

(declare-fun d!26057 () Bool)

(assert (=> d!26057 (= (apply!92 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48892) (apply!92 lt!48898 lt!48892))))

(declare-fun lt!49084 () Unit!2917)

(declare-fun choose!602 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> d!26057 (= lt!49084 (choose!602 lt!48898 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48892))))

(declare-fun e!63867 () Bool)

(assert (=> d!26057 e!63867))

(declare-fun res!49296 () Bool)

(assert (=> d!26057 (=> (not res!49296) (not e!63867))))

(assert (=> d!26057 (= res!49296 (contains!788 lt!48898 lt!48892))))

(assert (=> d!26057 (= (addApplyDifferent!68 lt!48898 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48892) lt!49084)))

(declare-fun b!97958 () Bool)

(assert (=> b!97958 (= e!63867 (not (= lt!48892 lt!48881)))))

(assert (= (and d!26057 res!49296) b!97958))

(declare-fun m!106933 () Bool)

(assert (=> d!26057 m!106933))

(assert (=> d!26057 m!106501))

(assert (=> d!26057 m!106503))

(assert (=> d!26057 m!106501))

(declare-fun m!106935 () Bool)

(assert (=> d!26057 m!106935))

(assert (=> d!26057 m!106499))

(assert (=> b!97664 d!26057))

(declare-fun d!26059 () Bool)

(assert (=> d!26059 (= (apply!92 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48885) (apply!92 lt!48883 lt!48885))))

(declare-fun lt!49085 () Unit!2917)

(assert (=> d!26059 (= lt!49085 (choose!602 lt!48883 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48885))))

(declare-fun e!63868 () Bool)

(assert (=> d!26059 e!63868))

(declare-fun res!49297 () Bool)

(assert (=> d!26059 (=> (not res!49297) (not e!63868))))

(assert (=> d!26059 (= res!49297 (contains!788 lt!48883 lt!48885))))

(assert (=> d!26059 (= (addApplyDifferent!68 lt!48883 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48885) lt!49085)))

(declare-fun b!97959 () Bool)

(assert (=> b!97959 (= e!63868 (not (= lt!48885 lt!48895)))))

(assert (= (and d!26059 res!49297) b!97959))

(declare-fun m!106937 () Bool)

(assert (=> d!26059 m!106937))

(assert (=> d!26059 m!106493))

(assert (=> d!26059 m!106495))

(assert (=> d!26059 m!106493))

(declare-fun m!106939 () Bool)

(assert (=> d!26059 m!106939))

(assert (=> d!26059 m!106497))

(assert (=> b!97664 d!26059))

(declare-fun d!26061 () Bool)

(assert (=> d!26061 (= (apply!92 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48886) (apply!92 lt!48889 lt!48886))))

(declare-fun lt!49086 () Unit!2917)

(assert (=> d!26061 (= lt!49086 (choose!602 lt!48889 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48886))))

(declare-fun e!63869 () Bool)

(assert (=> d!26061 e!63869))

(declare-fun res!49298 () Bool)

(assert (=> d!26061 (=> (not res!49298) (not e!63869))))

(assert (=> d!26061 (= res!49298 (contains!788 lt!48889 lt!48886))))

(assert (=> d!26061 (= (addApplyDifferent!68 lt!48889 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48886) lt!49086)))

(declare-fun b!97960 () Bool)

(assert (=> b!97960 (= e!63869 (not (= lt!48886 lt!48879)))))

(assert (= (and d!26061 res!49298) b!97960))

(declare-fun m!106941 () Bool)

(assert (=> d!26061 m!106941))

(assert (=> d!26061 m!106479))

(assert (=> d!26061 m!106481))

(assert (=> d!26061 m!106479))

(declare-fun m!106943 () Bool)

(assert (=> d!26061 m!106943))

(assert (=> d!26061 m!106507))

(assert (=> b!97664 d!26061))

(declare-fun d!26063 () Bool)

(assert (=> d!26063 (= (apply!92 lt!48883 lt!48885) (get!1292 (getValueByKey!151 (toList!765 lt!48883) lt!48885)))))

(declare-fun bs!4035 () Bool)

(assert (= bs!4035 d!26063))

(declare-fun m!106945 () Bool)

(assert (=> bs!4035 m!106945))

(assert (=> bs!4035 m!106945))

(declare-fun m!106947 () Bool)

(assert (=> bs!4035 m!106947))

(assert (=> b!97664 d!26063))

(declare-fun d!26065 () Bool)

(assert (=> d!26065 (= (apply!92 lt!48889 lt!48886) (get!1292 (getValueByKey!151 (toList!765 lt!48889) lt!48886)))))

(declare-fun bs!4036 () Bool)

(assert (= bs!4036 d!26065))

(declare-fun m!106949 () Bool)

(assert (=> bs!4036 m!106949))

(assert (=> bs!4036 m!106949))

(declare-fun m!106951 () Bool)

(assert (=> bs!4036 m!106951))

(assert (=> b!97664 d!26065))

(declare-fun d!26067 () Bool)

(declare-fun e!63870 () Bool)

(assert (=> d!26067 e!63870))

(declare-fun res!49300 () Bool)

(assert (=> d!26067 (=> (not res!49300) (not e!63870))))

(declare-fun lt!49087 () ListLongMap!1499)

(assert (=> d!26067 (= res!49300 (contains!788 lt!49087 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49088 () List!1564)

(assert (=> d!26067 (= lt!49087 (ListLongMap!1500 lt!49088))))

(declare-fun lt!49090 () Unit!2917)

(declare-fun lt!49089 () Unit!2917)

(assert (=> d!26067 (= lt!49090 lt!49089)))

(assert (=> d!26067 (= (getValueByKey!151 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26067 (= lt!49089 (lemmaContainsTupThenGetReturnValue!67 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26067 (= lt!49088 (insertStrictlySorted!70 (toList!765 lt!48889) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26067 (= (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49087)))

(declare-fun b!97961 () Bool)

(declare-fun res!49299 () Bool)

(assert (=> b!97961 (=> (not res!49299) (not e!63870))))

(assert (=> b!97961 (= res!49299 (= (getValueByKey!151 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!97962 () Bool)

(assert (=> b!97962 (= e!63870 (contains!791 (toList!765 lt!49087) (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26067 res!49300) b!97961))

(assert (= (and b!97961 res!49299) b!97962))

(declare-fun m!106953 () Bool)

(assert (=> d!26067 m!106953))

(declare-fun m!106955 () Bool)

(assert (=> d!26067 m!106955))

(declare-fun m!106957 () Bool)

(assert (=> d!26067 m!106957))

(declare-fun m!106959 () Bool)

(assert (=> d!26067 m!106959))

(declare-fun m!106961 () Bool)

(assert (=> b!97961 m!106961))

(declare-fun m!106963 () Bool)

(assert (=> b!97962 m!106963))

(assert (=> b!97664 d!26067))

(declare-fun b!97997 () Bool)

(declare-fun e!63892 () Unit!2917)

(declare-fun lt!49165 () Unit!2917)

(assert (=> b!97997 (= e!63892 lt!49165)))

(assert (=> b!97997 (= lt!49165 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49177 () SeekEntryResult!247)

(declare-fun call!9988 () SeekEntryResult!247)

(assert (=> b!97997 (= lt!49177 call!9988)))

(declare-fun c!16620 () Bool)

(assert (=> b!97997 (= c!16620 ((_ is MissingZero!247) lt!49177))))

(declare-fun e!63893 () Bool)

(assert (=> b!97997 e!63893))

(declare-fun b!97998 () Bool)

(declare-fun e!63888 () Bool)

(declare-fun e!63887 () Bool)

(assert (=> b!97998 (= e!63888 e!63887)))

(declare-fun res!49321 () Bool)

(declare-fun call!9986 () Bool)

(assert (=> b!97998 (= res!49321 call!9986)))

(assert (=> b!97998 (=> (not res!49321) (not e!63887))))

(declare-fun b!97999 () Bool)

(declare-fun res!49326 () Bool)

(declare-fun e!63891 () Bool)

(assert (=> b!97999 (=> (not res!49326) (not e!63891))))

(assert (=> b!97999 (= res!49326 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!49177)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!26069 () Bool)

(declare-fun e!63890 () Bool)

(assert (=> d!26069 e!63890))

(declare-fun res!49325 () Bool)

(assert (=> d!26069 (=> (not res!49325) (not e!63890))))

(declare-fun lt!49157 () tuple2!2298)

(assert (=> d!26069 (= res!49325 (_1!1160 lt!49157))))

(assert (=> d!26069 (= lt!49157 (tuple2!2299 true (LongMapFixedSize!851 (defaultEntry!2480 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd (_size!474 newMap!16) #b00000000000000000000000000000001) (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (_vacant!474 newMap!16))))))

(declare-fun lt!49160 () Unit!2917)

(declare-fun lt!49171 () Unit!2917)

(assert (=> d!26069 (= lt!49160 lt!49171)))

(declare-fun lt!49156 () array!4223)

(declare-fun lt!49174 () array!4225)

(assert (=> d!26069 (contains!788 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(assert (=> d!26069 (= lt!49171 (lemmaValidKeyInArrayIsInListMap!101 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26069 (= lt!49174 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))))

(assert (=> d!26069 (= lt!49156 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun lt!49170 () Unit!2917)

(declare-fun lt!49168 () Unit!2917)

(assert (=> d!26069 (= lt!49170 lt!49168)))

(declare-fun lt!49180 () array!4223)

(assert (=> d!26069 (= (arrayCountValidKeys!0 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4223 (_ BitVec 32)) Unit!2917)

(assert (=> d!26069 (= lt!49168 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(assert (=> d!26069 (= lt!49180 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun lt!49175 () Unit!2917)

(declare-fun lt!49176 () Unit!2917)

(assert (=> d!26069 (= lt!49175 lt!49176)))

(declare-fun lt!49172 () array!4223)

(assert (=> d!26069 (arrayContainsKey!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26069 (= lt!49176 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(assert (=> d!26069 (= lt!49172 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun lt!49159 () Unit!2917)

(declare-fun lt!49162 () Unit!2917)

(assert (=> d!26069 (= lt!49159 lt!49162)))

(assert (=> d!26069 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!25 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2917)

(assert (=> d!26069 (= lt!49162 (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49163 () Unit!2917)

(declare-fun lt!49153 () Unit!2917)

(assert (=> d!26069 (= lt!49163 lt!49153)))

(assert (=> d!26069 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (mask!6577 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4223 (_ BitVec 32) (_ BitVec 32)) Unit!2917)

(assert (=> d!26069 (= lt!49153 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (mask!6577 newMap!16)))))

(declare-fun lt!49167 () Unit!2917)

(declare-fun lt!49161 () Unit!2917)

(assert (=> d!26069 (= lt!49167 lt!49161)))

(assert (=> d!26069 (= (arrayCountValidKeys!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4223 (_ BitVec 32) (_ BitVec 64)) Unit!2917)

(assert (=> d!26069 (= lt!49161 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun lt!49154 () Unit!2917)

(declare-fun lt!49164 () Unit!2917)

(assert (=> d!26069 (= lt!49154 lt!49164)))

(declare-fun lt!49166 () (_ BitVec 32))

(declare-fun lt!49173 () List!1565)

(assert (=> d!26069 (arrayNoDuplicates!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) lt!49166 lt!49173)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4223 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1565) Unit!2917)

(assert (=> d!26069 (= lt!49164 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) lt!49166 lt!49173))))

(assert (=> d!26069 (= lt!49173 Nil!1562)))

(assert (=> d!26069 (= lt!49166 #b00000000000000000000000000000000)))

(declare-fun lt!49158 () Unit!2917)

(declare-fun e!63889 () Unit!2917)

(assert (=> d!26069 (= lt!49158 e!63889)))

(declare-fun c!16621 () Bool)

(assert (=> d!26069 (= c!16621 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!49152 () Unit!2917)

(assert (=> d!26069 (= lt!49152 e!63892)))

(declare-fun c!16618 () Bool)

(assert (=> d!26069 (= c!16618 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26069 (valid!392 newMap!16)))

(assert (=> d!26069 (= (updateHelperNewKey!41 newMap!16 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))) lt!49157)))

(declare-fun e!63894 () Bool)

(declare-fun b!98000 () Bool)

(declare-fun lt!49179 () SeekEntryResult!247)

(assert (=> b!98000 (= e!63894 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!49179)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!98001 () Bool)

(assert (=> b!98001 (= e!63888 ((_ is Undefined!247) lt!49177))))

(declare-fun b!98002 () Bool)

(declare-fun call!9987 () Bool)

(assert (=> b!98002 (= e!63891 (not call!9987))))

(declare-fun bm!9982 () Bool)

(declare-fun call!9985 () Bool)

(assert (=> bm!9982 (= call!9985 (inRange!0 (ite c!16618 (index!3132 lt!49179) (ite c!16620 (index!3131 lt!49177) (index!3134 lt!49177))) (mask!6577 newMap!16)))))

(declare-fun b!98003 () Bool)

(declare-fun res!49322 () Bool)

(assert (=> b!98003 (=> (not res!49322) (not e!63891))))

(assert (=> b!98003 (= res!49322 call!9986)))

(assert (=> b!98003 (= e!63893 e!63891)))

(declare-fun b!98004 () Bool)

(assert (=> b!98004 (= e!63890 (= (map!1253 (_2!1160 lt!49157)) (+!130 (map!1253 newMap!16) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98005 () Bool)

(declare-fun Unit!2939 () Unit!2917)

(assert (=> b!98005 (= e!63889 Unit!2939)))

(declare-fun lt!49169 () Unit!2917)

(declare-fun lemmaArrayContainsKeyThenInListMap!25 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2917)

(assert (=> b!98005 (= lt!49169 (lemmaArrayContainsKeyThenInListMap!25 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> b!98005 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))

(declare-fun lt!49151 () Unit!2917)

(assert (=> b!98005 (= lt!49151 lt!49169)))

(assert (=> b!98005 false))

(declare-fun bm!9983 () Bool)

(assert (=> bm!9983 (= call!9987 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98006 () Bool)

(declare-fun Unit!2940 () Unit!2917)

(assert (=> b!98006 (= e!63892 Unit!2940)))

(declare-fun lt!49155 () Unit!2917)

(assert (=> b!98006 (= lt!49155 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> b!98006 (= lt!49179 call!9988)))

(declare-fun res!49319 () Bool)

(assert (=> b!98006 (= res!49319 ((_ is Found!247) lt!49179))))

(assert (=> b!98006 (=> (not res!49319) (not e!63894))))

(assert (=> b!98006 e!63894))

(declare-fun lt!49178 () Unit!2917)

(assert (=> b!98006 (= lt!49178 lt!49155)))

(assert (=> b!98006 false))

(declare-fun b!98007 () Bool)

(declare-fun res!49324 () Bool)

(assert (=> b!98007 (=> (not res!49324) (not e!63890))))

(assert (=> b!98007 (= res!49324 (valid!392 (_2!1160 lt!49157)))))

(declare-fun b!98008 () Bool)

(declare-fun res!49323 () Bool)

(assert (=> b!98008 (= res!49323 call!9985)))

(assert (=> b!98008 (=> (not res!49323) (not e!63894))))

(declare-fun b!98009 () Bool)

(declare-fun res!49327 () Bool)

(assert (=> b!98009 (=> (not res!49327) (not e!63890))))

(assert (=> b!98009 (= res!49327 (contains!788 (map!1253 (_2!1160 lt!49157)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!98010 () Bool)

(declare-fun Unit!2941 () Unit!2917)

(assert (=> b!98010 (= e!63889 Unit!2941)))

(declare-fun bm!9984 () Bool)

(assert (=> bm!9984 (= call!9986 call!9985)))

(declare-fun b!98011 () Bool)

(declare-fun c!16619 () Bool)

(assert (=> b!98011 (= c!16619 ((_ is MissingVacant!247) lt!49177))))

(assert (=> b!98011 (= e!63893 e!63888)))

(declare-fun b!98012 () Bool)

(declare-fun res!49320 () Bool)

(assert (=> b!98012 (= res!49320 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!49177)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98012 (=> (not res!49320) (not e!63887))))

(declare-fun b!98013 () Bool)

(assert (=> b!98013 (= e!63887 (not call!9987))))

(declare-fun bm!9985 () Bool)

(assert (=> bm!9985 (= call!9988 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (= (and d!26069 c!16618) b!98006))

(assert (= (and d!26069 (not c!16618)) b!97997))

(assert (= (and b!98006 res!49319) b!98008))

(assert (= (and b!98008 res!49323) b!98000))

(assert (= (and b!97997 c!16620) b!98003))

(assert (= (and b!97997 (not c!16620)) b!98011))

(assert (= (and b!98003 res!49322) b!97999))

(assert (= (and b!97999 res!49326) b!98002))

(assert (= (and b!98011 c!16619) b!97998))

(assert (= (and b!98011 (not c!16619)) b!98001))

(assert (= (and b!97998 res!49321) b!98012))

(assert (= (and b!98012 res!49320) b!98013))

(assert (= (or b!98003 b!97998) bm!9984))

(assert (= (or b!98002 b!98013) bm!9983))

(assert (= (or b!98008 bm!9984) bm!9982))

(assert (= (or b!98006 b!97997) bm!9985))

(assert (= (and d!26069 c!16621) b!98005))

(assert (= (and d!26069 (not c!16621)) b!98010))

(assert (= (and d!26069 res!49325) b!98007))

(assert (= (and b!98007 res!49324) b!98009))

(assert (= (and b!98009 res!49327) b!98004))

(assert (=> bm!9985 m!106251))

(assert (=> bm!9985 m!106423))

(assert (=> b!97997 m!106251))

(assert (=> b!97997 m!106439))

(assert (=> b!98005 m!106251))

(declare-fun m!106965 () Bool)

(assert (=> b!98005 m!106965))

(assert (=> b!98005 m!106413))

(assert (=> b!98005 m!106413))

(assert (=> b!98005 m!106251))

(assert (=> b!98005 m!106415))

(declare-fun m!106967 () Bool)

(assert (=> b!98000 m!106967))

(declare-fun m!106969 () Bool)

(assert (=> bm!9982 m!106969))

(declare-fun m!106971 () Bool)

(assert (=> b!98004 m!106971))

(assert (=> b!98004 m!106285))

(assert (=> b!98004 m!106285))

(declare-fun m!106973 () Bool)

(assert (=> b!98004 m!106973))

(declare-fun m!106975 () Bool)

(assert (=> b!98007 m!106975))

(declare-fun m!106977 () Bool)

(assert (=> b!97999 m!106977))

(assert (=> b!98009 m!106971))

(assert (=> b!98009 m!106971))

(assert (=> b!98009 m!106251))

(declare-fun m!106979 () Bool)

(assert (=> b!98009 m!106979))

(assert (=> bm!9983 m!106251))

(assert (=> bm!9983 m!106411))

(declare-fun m!106981 () Bool)

(assert (=> d!26069 m!106981))

(declare-fun m!106983 () Bool)

(assert (=> d!26069 m!106983))

(assert (=> d!26069 m!106251))

(declare-fun m!106985 () Bool)

(assert (=> d!26069 m!106985))

(declare-fun m!106987 () Bool)

(assert (=> d!26069 m!106987))

(assert (=> d!26069 m!106251))

(declare-fun m!106989 () Bool)

(assert (=> d!26069 m!106989))

(assert (=> d!26069 m!106413))

(assert (=> d!26069 m!106251))

(assert (=> d!26069 m!106415))

(assert (=> d!26069 m!106413))

(assert (=> d!26069 m!106677))

(assert (=> d!26069 m!106251))

(declare-fun m!106991 () Bool)

(assert (=> d!26069 m!106991))

(assert (=> d!26069 m!106251))

(assert (=> d!26069 m!106277))

(declare-fun m!106993 () Bool)

(assert (=> d!26069 m!106993))

(declare-fun m!106995 () Bool)

(assert (=> d!26069 m!106995))

(assert (=> d!26069 m!106251))

(assert (=> d!26069 m!106411))

(declare-fun m!106997 () Bool)

(assert (=> d!26069 m!106997))

(declare-fun m!106999 () Bool)

(assert (=> d!26069 m!106999))

(assert (=> d!26069 m!106251))

(declare-fun m!107001 () Bool)

(assert (=> d!26069 m!107001))

(declare-fun m!107003 () Bool)

(assert (=> d!26069 m!107003))

(assert (=> d!26069 m!106981))

(assert (=> d!26069 m!106995))

(declare-fun m!107005 () Bool)

(assert (=> d!26069 m!107005))

(assert (=> d!26069 m!106251))

(declare-fun m!107007 () Bool)

(assert (=> d!26069 m!107007))

(declare-fun m!107009 () Bool)

(assert (=> d!26069 m!107009))

(declare-fun m!107011 () Bool)

(assert (=> d!26069 m!107011))

(assert (=> d!26069 m!106519))

(assert (=> d!26069 m!106413))

(declare-fun m!107013 () Bool)

(assert (=> d!26069 m!107013))

(assert (=> d!26069 m!106283))

(declare-fun m!107015 () Bool)

(assert (=> d!26069 m!107015))

(declare-fun m!107017 () Bool)

(assert (=> b!98012 m!107017))

(assert (=> b!98006 m!106251))

(assert (=> b!98006 m!106435))

(assert (=> bm!9906 d!26069))

(declare-fun d!26071 () Bool)

(declare-fun e!63895 () Bool)

(assert (=> d!26071 e!63895))

(declare-fun res!49329 () Bool)

(assert (=> d!26071 (=> (not res!49329) (not e!63895))))

(declare-fun lt!49181 () ListLongMap!1499)

(assert (=> d!26071 (= res!49329 (contains!788 lt!49181 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49182 () List!1564)

(assert (=> d!26071 (= lt!49181 (ListLongMap!1500 lt!49182))))

(declare-fun lt!49184 () Unit!2917)

(declare-fun lt!49183 () Unit!2917)

(assert (=> d!26071 (= lt!49184 lt!49183)))

(assert (=> d!26071 (= (getValueByKey!151 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26071 (= lt!49183 (lemmaContainsTupThenGetReturnValue!67 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26071 (= lt!49182 (insertStrictlySorted!70 (toList!765 call!9938) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26071 (= (+!130 call!9938 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49181)))

(declare-fun b!98014 () Bool)

(declare-fun res!49328 () Bool)

(assert (=> b!98014 (=> (not res!49328) (not e!63895))))

(assert (=> b!98014 (= res!49328 (= (getValueByKey!151 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98015 () Bool)

(assert (=> b!98015 (= e!63895 (contains!791 (toList!765 lt!49181) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26071 res!49329) b!98014))

(assert (= (and b!98014 res!49328) b!98015))

(declare-fun m!107019 () Bool)

(assert (=> d!26071 m!107019))

(declare-fun m!107021 () Bool)

(assert (=> d!26071 m!107021))

(declare-fun m!107023 () Bool)

(assert (=> d!26071 m!107023))

(declare-fun m!107025 () Bool)

(assert (=> d!26071 m!107025))

(declare-fun m!107027 () Bool)

(assert (=> b!98014 m!107027))

(declare-fun m!107029 () Bool)

(assert (=> b!98015 m!107029))

(assert (=> b!97663 d!26071))

(declare-fun d!26073 () Bool)

(declare-fun e!63896 () Bool)

(assert (=> d!26073 e!63896))

(declare-fun res!49330 () Bool)

(assert (=> d!26073 (=> res!49330 e!63896)))

(declare-fun lt!49185 () Bool)

(assert (=> d!26073 (= res!49330 (not lt!49185))))

(declare-fun lt!49188 () Bool)

(assert (=> d!26073 (= lt!49185 lt!49188)))

(declare-fun lt!49186 () Unit!2917)

(declare-fun e!63897 () Unit!2917)

(assert (=> d!26073 (= lt!49186 e!63897)))

(declare-fun c!16622 () Bool)

(assert (=> d!26073 (= c!16622 lt!49188)))

(assert (=> d!26073 (= lt!49188 (containsKey!154 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (=> d!26073 (= (contains!788 call!9912 (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))) lt!49185)))

(declare-fun b!98016 () Bool)

(declare-fun lt!49187 () Unit!2917)

(assert (=> b!98016 (= e!63897 lt!49187)))

(assert (=> b!98016 (= lt!49187 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (=> b!98016 (isDefined!103 (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(declare-fun b!98017 () Bool)

(declare-fun Unit!2942 () Unit!2917)

(assert (=> b!98017 (= e!63897 Unit!2942)))

(declare-fun b!98018 () Bool)

(assert (=> b!98018 (= e!63896 (isDefined!103 (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))))

(assert (= (and d!26073 c!16622) b!98016))

(assert (= (and d!26073 (not c!16622)) b!98017))

(assert (= (and d!26073 (not res!49330)) b!98018))

(declare-fun m!107031 () Bool)

(assert (=> d!26073 m!107031))

(declare-fun m!107033 () Bool)

(assert (=> b!98016 m!107033))

(declare-fun m!107035 () Bool)

(assert (=> b!98016 m!107035))

(assert (=> b!98016 m!107035))

(declare-fun m!107037 () Bool)

(assert (=> b!98016 m!107037))

(assert (=> b!98018 m!107035))

(assert (=> b!98018 m!107035))

(assert (=> b!98018 m!107037))

(assert (=> bm!9898 d!26073))

(declare-fun d!26075 () Bool)

(declare-fun res!49335 () Bool)

(declare-fun e!63902 () Bool)

(assert (=> d!26075 (=> res!49335 e!63902)))

(assert (=> d!26075 (= res!49335 (and ((_ is Cons!1560) (toList!765 lt!48683)) (= (_1!1161 (h!2154 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26075 (= (containsKey!154 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!63902)))

(declare-fun b!98023 () Bool)

(declare-fun e!63903 () Bool)

(assert (=> b!98023 (= e!63902 e!63903)))

(declare-fun res!49336 () Bool)

(assert (=> b!98023 (=> (not res!49336) (not e!63903))))

(assert (=> b!98023 (= res!49336 (and (or (not ((_ is Cons!1560) (toList!765 lt!48683))) (bvsle (_1!1161 (h!2154 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) ((_ is Cons!1560) (toList!765 lt!48683)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(declare-fun b!98024 () Bool)

(assert (=> b!98024 (= e!63903 (containsKey!154 (t!5510 (toList!765 lt!48683)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26075 (not res!49335)) b!98023))

(assert (= (and b!98023 res!49336) b!98024))

(assert (=> b!98024 m!106251))

(declare-fun m!107039 () Bool)

(assert (=> b!98024 m!107039))

(assert (=> d!25949 d!26075))

(declare-fun d!26077 () Bool)

(assert (=> d!26077 (= (apply!92 lt!48882 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1292 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4037 () Bool)

(assert (= bs!4037 d!26077))

(assert (=> bs!4037 m!106381))

(assert (=> bs!4037 m!106729))

(assert (=> bs!4037 m!106729))

(declare-fun m!107041 () Bool)

(assert (=> bs!4037 m!107041))

(assert (=> b!97662 d!26077))

(declare-fun d!26079 () Bool)

(declare-fun c!16623 () Bool)

(assert (=> d!26079 (= c!16623 ((_ is ValueCellFull!971) (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63904 () V!3153)

(assert (=> d!26079 (= (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63904)))

(declare-fun b!98025 () Bool)

(assert (=> b!98025 (= e!63904 (get!1290 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98026 () Bool)

(assert (=> b!98026 (= e!63904 (get!1291 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26079 c!16623) b!98025))

(assert (= (and d!26079 (not c!16623)) b!98026))

(assert (=> b!98025 m!106471))

(assert (=> b!98025 m!106275))

(declare-fun m!107043 () Bool)

(assert (=> b!98025 m!107043))

(assert (=> b!98026 m!106471))

(assert (=> b!98026 m!106275))

(declare-fun m!107045 () Bool)

(assert (=> b!98026 m!107045))

(assert (=> b!97662 d!26079))

(assert (=> bm!9935 d!26041))

(assert (=> b!97480 d!26011))

(declare-fun d!26081 () Bool)

(assert (=> d!26081 (= (get!1290 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2800 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!97616 d!26081))

(declare-fun d!26083 () Bool)

(assert (=> d!26083 (= (apply!92 lt!48882 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4038 () Bool)

(assert (= bs!4038 d!26083))

(declare-fun m!107047 () Bool)

(assert (=> bs!4038 m!107047))

(assert (=> bs!4038 m!107047))

(declare-fun m!107049 () Bool)

(assert (=> bs!4038 m!107049))

(assert (=> b!97676 d!26083))

(declare-fun d!26085 () Bool)

(assert (=> d!26085 (= (map!1253 (_2!1160 lt!48807)) (getCurrentListMap!455 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun bs!4039 () Bool)

(assert (= bs!4039 d!26085))

(declare-fun m!107051 () Bool)

(assert (=> bs!4039 m!107051))

(assert (=> bm!9904 d!26085))

(declare-fun b!98027 () Bool)

(declare-fun e!63907 () Bool)

(declare-fun call!9989 () Bool)

(assert (=> b!98027 (= e!63907 call!9989)))

(declare-fun b!98028 () Bool)

(assert (=> b!98028 (= e!63907 call!9989)))

(declare-fun b!98029 () Bool)

(declare-fun e!63906 () Bool)

(declare-fun e!63908 () Bool)

(assert (=> b!98029 (= e!63906 e!63908)))

(declare-fun res!49337 () Bool)

(assert (=> b!98029 (=> (not res!49337) (not e!63908))))

(declare-fun e!63905 () Bool)

(assert (=> b!98029 (= res!49337 (not e!63905))))

(declare-fun res!49338 () Bool)

(assert (=> b!98029 (=> (not res!49338) (not e!63905))))

(assert (=> b!98029 (= res!49338 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun c!16624 () Bool)

(declare-fun bm!9986 () Bool)

(assert (=> bm!9986 (= call!9989 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16624 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562))))))

(declare-fun b!98031 () Bool)

(assert (=> b!98031 (= e!63908 e!63907)))

(assert (=> b!98031 (= c!16624 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!26087 () Bool)

(declare-fun res!49339 () Bool)

(assert (=> d!26087 (=> res!49339 e!63906)))

(assert (=> d!26087 (= res!49339 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26087 (= (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) e!63906)))

(declare-fun b!98030 () Bool)

(assert (=> b!98030 (= e!63905 (contains!790 (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26087 (not res!49339)) b!98029))

(assert (= (and b!98029 res!49338) b!98030))

(assert (= (and b!98029 res!49337) b!98031))

(assert (= (and b!98031 c!16624) b!98027))

(assert (= (and b!98031 (not c!16624)) b!98028))

(assert (= (or b!98027 b!98028) bm!9986))

(declare-fun m!107053 () Bool)

(assert (=> b!98029 m!107053))

(assert (=> b!98029 m!107053))

(declare-fun m!107055 () Bool)

(assert (=> b!98029 m!107055))

(assert (=> bm!9986 m!107053))

(declare-fun m!107057 () Bool)

(assert (=> bm!9986 m!107057))

(assert (=> b!98031 m!107053))

(assert (=> b!98031 m!107053))

(assert (=> b!98031 m!107055))

(assert (=> b!98030 m!107053))

(assert (=> b!98030 m!107053))

(declare-fun m!107059 () Bool)

(assert (=> b!98030 m!107059))

(assert (=> bm!9843 d!26087))

(declare-fun d!26089 () Bool)

(declare-fun e!63911 () Bool)

(assert (=> d!26089 e!63911))

(declare-fun res!49344 () Bool)

(assert (=> d!26089 (=> (not res!49344) (not e!63911))))

(declare-fun lt!49194 () SeekEntryResult!247)

(assert (=> d!26089 (= res!49344 ((_ is Found!247) lt!49194))))

(assert (=> d!26089 (= lt!49194 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun lt!49193 () Unit!2917)

(declare-fun choose!603 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) Int) Unit!2917)

(assert (=> d!26089 (= lt!49193 (choose!603 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26089 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26089 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) lt!49193)))

(declare-fun b!98036 () Bool)

(declare-fun res!49345 () Bool)

(assert (=> b!98036 (=> (not res!49345) (not e!63911))))

(assert (=> b!98036 (= res!49345 (inRange!0 (index!3132 lt!49194) (mask!6577 newMap!16)))))

(declare-fun b!98037 () Bool)

(assert (=> b!98037 (= e!63911 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!49194)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!98037 (and (bvsge (index!3132 lt!49194) #b00000000000000000000000000000000) (bvslt (index!3132 lt!49194) (size!2256 (_keys!4170 newMap!16))))))

(assert (= (and d!26089 res!49344) b!98036))

(assert (= (and b!98036 res!49345) b!98037))

(assert (=> d!26089 m!106251))

(assert (=> d!26089 m!106423))

(assert (=> d!26089 m!106251))

(declare-fun m!107061 () Bool)

(assert (=> d!26089 m!107061))

(assert (=> d!26089 m!106537))

(declare-fun m!107063 () Bool)

(assert (=> b!98036 m!107063))

(declare-fun m!107065 () Bool)

(assert (=> b!98037 m!107065))

(assert (=> bm!9895 d!26089))

(assert (=> bm!9903 d!25969))

(declare-fun d!26091 () Bool)

(declare-fun e!63912 () Bool)

(assert (=> d!26091 e!63912))

(declare-fun res!49346 () Bool)

(assert (=> d!26091 (=> res!49346 e!63912)))

(declare-fun lt!49195 () Bool)

(assert (=> d!26091 (= res!49346 (not lt!49195))))

(declare-fun lt!49198 () Bool)

(assert (=> d!26091 (= lt!49195 lt!49198)))

(declare-fun lt!49196 () Unit!2917)

(declare-fun e!63913 () Unit!2917)

(assert (=> d!26091 (= lt!49196 e!63913)))

(declare-fun c!16625 () Bool)

(assert (=> d!26091 (= c!16625 lt!49198)))

(assert (=> d!26091 (= lt!49198 (containsKey!154 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26091 (= (contains!788 lt!48882 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49195)))

(declare-fun b!98038 () Bool)

(declare-fun lt!49197 () Unit!2917)

(assert (=> b!98038 (= e!63913 lt!49197)))

(assert (=> b!98038 (= lt!49197 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98038 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98039 () Bool)

(declare-fun Unit!2943 () Unit!2917)

(assert (=> b!98039 (= e!63913 Unit!2943)))

(declare-fun b!98040 () Bool)

(assert (=> b!98040 (= e!63912 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26091 c!16625) b!98038))

(assert (= (and d!26091 (not c!16625)) b!98039))

(assert (= (and d!26091 (not res!49346)) b!98040))

(declare-fun m!107067 () Bool)

(assert (=> d!26091 m!107067))

(declare-fun m!107069 () Bool)

(assert (=> b!98038 m!107069))

(assert (=> b!98038 m!107047))

(assert (=> b!98038 m!107047))

(declare-fun m!107071 () Bool)

(assert (=> b!98038 m!107071))

(assert (=> b!98040 m!107047))

(assert (=> b!98040 m!107047))

(assert (=> b!98040 m!107071))

(assert (=> bm!9933 d!26091))

(declare-fun d!26093 () Bool)

(declare-fun e!63914 () Bool)

(assert (=> d!26093 e!63914))

(declare-fun res!49348 () Bool)

(assert (=> d!26093 (=> (not res!49348) (not e!63914))))

(declare-fun lt!49199 () ListLongMap!1499)

(assert (=> d!26093 (= res!49348 (contains!788 lt!49199 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49200 () List!1564)

(assert (=> d!26093 (= lt!49199 (ListLongMap!1500 lt!49200))))

(declare-fun lt!49202 () Unit!2917)

(declare-fun lt!49201 () Unit!2917)

(assert (=> d!26093 (= lt!49202 lt!49201)))

(assert (=> d!26093 (= (getValueByKey!151 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26093 (= lt!49201 (lemmaContainsTupThenGetReturnValue!67 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26093 (= lt!49200 (insertStrictlySorted!70 (toList!765 call!9909) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26093 (= (+!130 call!9909 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49199)))

(declare-fun b!98041 () Bool)

(declare-fun res!49347 () Bool)

(assert (=> b!98041 (=> (not res!49347) (not e!63914))))

(assert (=> b!98041 (= res!49347 (= (getValueByKey!151 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98042 () Bool)

(assert (=> b!98042 (= e!63914 (contains!791 (toList!765 lt!49199) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26093 res!49348) b!98041))

(assert (= (and b!98041 res!49347) b!98042))

(declare-fun m!107073 () Bool)

(assert (=> d!26093 m!107073))

(declare-fun m!107075 () Bool)

(assert (=> d!26093 m!107075))

(declare-fun m!107077 () Bool)

(assert (=> d!26093 m!107077))

(declare-fun m!107079 () Bool)

(assert (=> d!26093 m!107079))

(declare-fun m!107081 () Bool)

(assert (=> b!98041 m!107081))

(declare-fun m!107083 () Bool)

(assert (=> b!98042 m!107083))

(assert (=> b!97584 d!26093))

(declare-fun mapIsEmpty!3757 () Bool)

(declare-fun mapRes!3757 () Bool)

(assert (=> mapIsEmpty!3757 mapRes!3757))

(declare-fun mapNonEmpty!3757 () Bool)

(declare-fun tp!9589 () Bool)

(declare-fun e!63916 () Bool)

(assert (=> mapNonEmpty!3757 (= mapRes!3757 (and tp!9589 e!63916))))

(declare-fun mapRest!3757 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapKey!3757 () (_ BitVec 32))

(declare-fun mapValue!3757 () ValueCell!971)

(assert (=> mapNonEmpty!3757 (= mapRest!3755 (store mapRest!3757 mapKey!3757 mapValue!3757))))

(declare-fun condMapEmpty!3757 () Bool)

(declare-fun mapDefault!3757 () ValueCell!971)

(assert (=> mapNonEmpty!3755 (= condMapEmpty!3757 (= mapRest!3755 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3757)))))

(declare-fun e!63915 () Bool)

(assert (=> mapNonEmpty!3755 (= tp!9587 (and e!63915 mapRes!3757))))

(declare-fun b!98043 () Bool)

(assert (=> b!98043 (= e!63916 tp_is_empty!2629)))

(declare-fun b!98044 () Bool)

(assert (=> b!98044 (= e!63915 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3755 condMapEmpty!3757) mapIsEmpty!3757))

(assert (= (and mapNonEmpty!3755 (not condMapEmpty!3757)) mapNonEmpty!3757))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!971) mapValue!3757)) b!98043))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!971) mapDefault!3757)) b!98044))

(declare-fun m!107085 () Bool)

(assert (=> mapNonEmpty!3757 m!107085))

(declare-fun mapIsEmpty!3758 () Bool)

(declare-fun mapRes!3758 () Bool)

(assert (=> mapIsEmpty!3758 mapRes!3758))

(declare-fun mapNonEmpty!3758 () Bool)

(declare-fun tp!9590 () Bool)

(declare-fun e!63918 () Bool)

(assert (=> mapNonEmpty!3758 (= mapRes!3758 (and tp!9590 e!63918))))

(declare-fun mapRest!3758 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3758 () ValueCell!971)

(declare-fun mapKey!3758 () (_ BitVec 32))

(assert (=> mapNonEmpty!3758 (= mapRest!3756 (store mapRest!3758 mapKey!3758 mapValue!3758))))

(declare-fun condMapEmpty!3758 () Bool)

(declare-fun mapDefault!3758 () ValueCell!971)

(assert (=> mapNonEmpty!3756 (= condMapEmpty!3758 (= mapRest!3756 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3758)))))

(declare-fun e!63917 () Bool)

(assert (=> mapNonEmpty!3756 (= tp!9588 (and e!63917 mapRes!3758))))

(declare-fun b!98045 () Bool)

(assert (=> b!98045 (= e!63918 tp_is_empty!2629)))

(declare-fun b!98046 () Bool)

(assert (=> b!98046 (= e!63917 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3756 condMapEmpty!3758) mapIsEmpty!3758))

(assert (= (and mapNonEmpty!3756 (not condMapEmpty!3758)) mapNonEmpty!3758))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!971) mapValue!3758)) b!98045))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!971) mapDefault!3758)) b!98046))

(declare-fun m!107087 () Bool)

(assert (=> mapNonEmpty!3758 m!107087))

(declare-fun b_lambda!4347 () Bool)

(assert (= b_lambda!4337 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4347)))

(declare-fun b_lambda!4349 () Bool)

(assert (= b_lambda!4341 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4349)))

(declare-fun b_lambda!4351 () Bool)

(assert (= b_lambda!4343 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4351)))

(declare-fun b_lambda!4353 () Bool)

(assert (= b_lambda!4339 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4353)))

(declare-fun b_lambda!4355 () Bool)

(assert (= b_lambda!4345 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4355)))

(check-sat (not d!25993) (not b!97850) (not b!97745) (not b_lambda!4347) (not b_lambda!4351) (not d!26091) (not bm!9956) (not b!97997) (not b!97945) (not d!25973) (not b!97754) (not b!98004) (not b!97949) (not b!97851) (not d!26019) (not b!97835) (not b_next!2427) (not bm!9942) (not b!98007) (not b!97848) (not d!25981) (not b!97853) (not b!97912) (not b!97824) (not b!97908) (not b!97755) (not b!97858) (not d!26067) (not d!26093) (not d!26001) (not b!97728) (not b!97860) (not b!97952) (not b!97882) (not b_lambda!4335) (not d!26057) b_and!6011 (not b!97759) (not b!97782) (not b!97774) (not b!98016) (not b_next!2425) (not b!98029) (not b!97775) (not bm!9940) (not d!26059) (not b!97937) (not bm!9966) (not d!25977) (not bm!9949) (not b!97740) (not b!97905) (not bm!9947) (not d!26007) (not d!26033) (not d!26053) (not d!26069) (not b!97839) (not b!97875) (not b!98026) (not d!25987) (not b!97764) (not b!97855) (not b!98015) (not bm!9985) (not d!26071) (not b!97726) (not bm!9964) (not b!97866) (not bm!9967) (not b!97896) (not d!25999) (not d!25969) (not b!97870) (not bm!9951) (not b!97946) (not d!26041) (not d!26073) (not bm!9983) (not bm!9950) (not b!98030) b_and!6009 (not d!26055) (not b!97788) (not b!97895) (not b!97727) (not b!98014) (not d!26065) (not b!97731) (not bm!9982) (not b!97954) (not d!25971) (not b!98036) (not b!97751) (not b!98031) (not d!26029) (not b!97746) (not b!97849) (not b!97752) (not b!98025) (not b!97704) (not b!97842) (not b!97834) (not d!26077) (not d!25983) (not b_lambda!4331) (not b!98042) (not d!26039) (not b!97720) tp_is_empty!2629 (not b!97840) (not b!97781) (not b_lambda!4349) (not d!26031) (not b!97780) (not b_lambda!4353) (not b!97863) (not b!97939) (not b!97725) (not b!97862) (not d!26049) (not b!97837) (not d!26061) (not b!97749) (not b!97730) (not d!26043) (not bm!9943) (not d!26051) (not d!26085) (not bm!9944) (not b!97910) (not bm!9973) (not d!26037) (not b!97771) (not mapNonEmpty!3757) (not b!97962) (not bm!9970) (not d!25985) (not b!98038) (not d!26023) (not b!97865) (not bm!9937) (not b!97961) (not d!26063) (not b!97861) (not b!97941) (not bm!9960) (not b!97735) (not b!97787) (not b!98041) (not d!26025) (not b!97947) (not b!97942) (not bm!9986) (not b!98009) (not b!98005) (not d!26015) (not d!26083) (not b!97948) (not d!26047) (not b!97950) (not d!25975) (not b!97750) (not d!25991) (not b!98040) (not d!26005) (not mapNonEmpty!3758) (not b!98018) (not b!97777) (not b!97856) (not bm!9957) (not b!97909) (not b!98024) (not d!26017) (not d!26089) (not b_lambda!4355) (not b!97911) (not b!97893) (not d!26045) (not b!98006) (not d!25997) (not b!97747) (not bm!9961))
(check-sat b_and!6009 b_and!6011 (not b_next!2425) (not b_next!2427))
(get-model)

(declare-fun d!26095 () Bool)

(assert (=> d!26095 (= (get!1292 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2807 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26083 d!26095))

(declare-fun b!98047 () Bool)

(declare-fun e!63919 () Option!157)

(assert (=> b!98047 (= e!63919 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48882)))))))

(declare-fun b!98050 () Bool)

(declare-fun e!63920 () Option!157)

(assert (=> b!98050 (= e!63920 None!155)))

(declare-fun b!98048 () Bool)

(assert (=> b!98048 (= e!63919 e!63920)))

(declare-fun c!16627 () Bool)

(assert (=> b!98048 (= c!16627 (and ((_ is Cons!1560) (toList!765 lt!48882)) (not (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26097 () Bool)

(declare-fun c!16626 () Bool)

(assert (=> d!26097 (= c!16626 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26097 (= (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000) e!63919)))

(declare-fun b!98049 () Bool)

(assert (=> b!98049 (= e!63920 (getValueByKey!151 (t!5510 (toList!765 lt!48882)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26097 c!16626) b!98047))

(assert (= (and d!26097 (not c!16626)) b!98048))

(assert (= (and b!98048 c!16627) b!98049))

(assert (= (and b!98048 (not c!16627)) b!98050))

(declare-fun m!107089 () Bool)

(assert (=> b!98049 m!107089))

(assert (=> d!26083 d!26097))

(declare-fun d!26099 () Bool)

(assert (=> d!26099 (= (validMask!0 (mask!6577 newMap!16)) (and (or (= (mask!6577 newMap!16) #b00000000000000000000000000000111) (= (mask!6577 newMap!16) #b00000000000000000000000000001111) (= (mask!6577 newMap!16) #b00000000000000000000000000011111) (= (mask!6577 newMap!16) #b00000000000000000000000000111111) (= (mask!6577 newMap!16) #b00000000000000000000000001111111) (= (mask!6577 newMap!16) #b00000000000000000000000011111111) (= (mask!6577 newMap!16) #b00000000000000000000000111111111) (= (mask!6577 newMap!16) #b00000000000000000000001111111111) (= (mask!6577 newMap!16) #b00000000000000000000011111111111) (= (mask!6577 newMap!16) #b00000000000000000000111111111111) (= (mask!6577 newMap!16) #b00000000000000000001111111111111) (= (mask!6577 newMap!16) #b00000000000000000011111111111111) (= (mask!6577 newMap!16) #b00000000000000000111111111111111) (= (mask!6577 newMap!16) #b00000000000000001111111111111111) (= (mask!6577 newMap!16) #b00000000000000011111111111111111) (= (mask!6577 newMap!16) #b00000000000000111111111111111111) (= (mask!6577 newMap!16) #b00000000000001111111111111111111) (= (mask!6577 newMap!16) #b00000000000011111111111111111111) (= (mask!6577 newMap!16) #b00000000000111111111111111111111) (= (mask!6577 newMap!16) #b00000000001111111111111111111111) (= (mask!6577 newMap!16) #b00000000011111111111111111111111) (= (mask!6577 newMap!16) #b00000000111111111111111111111111) (= (mask!6577 newMap!16) #b00000001111111111111111111111111) (= (mask!6577 newMap!16) #b00000011111111111111111111111111) (= (mask!6577 newMap!16) #b00000111111111111111111111111111) (= (mask!6577 newMap!16) #b00001111111111111111111111111111) (= (mask!6577 newMap!16) #b00011111111111111111111111111111) (= (mask!6577 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6577 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26019 d!26099))

(declare-fun d!26101 () Bool)

(assert (=> d!26101 (= (apply!92 lt!49010 lt!49012) (get!1292 (getValueByKey!151 (toList!765 lt!49010) lt!49012)))))

(declare-fun bs!4040 () Bool)

(assert (= bs!4040 d!26101))

(declare-fun m!107091 () Bool)

(assert (=> bs!4040 m!107091))

(assert (=> bs!4040 m!107091))

(declare-fun m!107093 () Bool)

(assert (=> bs!4040 m!107093))

(assert (=> b!97863 d!26101))

(declare-fun d!26103 () Bool)

(declare-fun e!63921 () Bool)

(assert (=> d!26103 e!63921))

(declare-fun res!49350 () Bool)

(assert (=> d!26103 (=> (not res!49350) (not e!63921))))

(declare-fun lt!49203 () ListLongMap!1499)

(assert (=> d!26103 (= res!49350 (contains!788 lt!49203 (_1!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49204 () List!1564)

(assert (=> d!26103 (= lt!49203 (ListLongMap!1500 lt!49204))))

(declare-fun lt!49206 () Unit!2917)

(declare-fun lt!49205 () Unit!2917)

(assert (=> d!26103 (= lt!49206 lt!49205)))

(assert (=> d!26103 (= (getValueByKey!151 lt!49204 (_1!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26103 (= lt!49205 (lemmaContainsTupThenGetReturnValue!67 lt!49204 (_1!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26103 (= lt!49204 (insertStrictlySorted!70 (toList!765 lt!49025) (_1!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26103 (= (+!130 lt!49025 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) lt!49203)))

(declare-fun b!98051 () Bool)

(declare-fun res!49349 () Bool)

(assert (=> b!98051 (=> (not res!49349) (not e!63921))))

(assert (=> b!98051 (= res!49349 (= (getValueByKey!151 (toList!765 lt!49203) (_1!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98052 () Bool)

(assert (=> b!98052 (= e!63921 (contains!791 (toList!765 lt!49203) (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26103 res!49350) b!98051))

(assert (= (and b!98051 res!49349) b!98052))

(declare-fun m!107095 () Bool)

(assert (=> d!26103 m!107095))

(declare-fun m!107097 () Bool)

(assert (=> d!26103 m!107097))

(declare-fun m!107099 () Bool)

(assert (=> d!26103 m!107099))

(declare-fun m!107101 () Bool)

(assert (=> d!26103 m!107101))

(declare-fun m!107103 () Bool)

(assert (=> b!98051 m!107103))

(declare-fun m!107105 () Bool)

(assert (=> b!98052 m!107105))

(assert (=> b!97863 d!26103))

(declare-fun d!26105 () Bool)

(assert (=> d!26105 (contains!788 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) lt!49015)))

(declare-fun lt!49207 () Unit!2917)

(assert (=> d!26105 (= lt!49207 (choose!601 lt!49021 lt!49017 (zeroValue!2363 newMap!16) lt!49015))))

(assert (=> d!26105 (contains!788 lt!49021 lt!49015)))

(assert (=> d!26105 (= (addStillContains!68 lt!49021 lt!49017 (zeroValue!2363 newMap!16) lt!49015) lt!49207)))

(declare-fun bs!4041 () Bool)

(assert (= bs!4041 d!26105))

(assert (=> bs!4041 m!106789))

(assert (=> bs!4041 m!106789))

(assert (=> bs!4041 m!106791))

(declare-fun m!107107 () Bool)

(assert (=> bs!4041 m!107107))

(declare-fun m!107109 () Bool)

(assert (=> bs!4041 m!107109))

(assert (=> b!97863 d!26105))

(declare-fun d!26107 () Bool)

(assert (=> d!26107 (= (apply!92 lt!49016 lt!49013) (get!1292 (getValueByKey!151 (toList!765 lt!49016) lt!49013)))))

(declare-fun bs!4042 () Bool)

(assert (= bs!4042 d!26107))

(declare-fun m!107111 () Bool)

(assert (=> bs!4042 m!107111))

(assert (=> bs!4042 m!107111))

(declare-fun m!107113 () Bool)

(assert (=> bs!4042 m!107113))

(assert (=> b!97863 d!26107))

(declare-fun d!26109 () Bool)

(assert (=> d!26109 (= (apply!92 lt!49025 lt!49019) (get!1292 (getValueByKey!151 (toList!765 lt!49025) lt!49019)))))

(declare-fun bs!4043 () Bool)

(assert (= bs!4043 d!26109))

(declare-fun m!107115 () Bool)

(assert (=> bs!4043 m!107115))

(assert (=> bs!4043 m!107115))

(declare-fun m!107117 () Bool)

(assert (=> bs!4043 m!107117))

(assert (=> b!97863 d!26109))

(declare-fun d!26111 () Bool)

(assert (=> d!26111 (= (apply!92 (+!130 lt!49025 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) lt!49019) (apply!92 lt!49025 lt!49019))))

(declare-fun lt!49208 () Unit!2917)

(assert (=> d!26111 (= lt!49208 (choose!602 lt!49025 lt!49008 (zeroValue!2363 newMap!16) lt!49019))))

(declare-fun e!63922 () Bool)

(assert (=> d!26111 e!63922))

(declare-fun res!49351 () Bool)

(assert (=> d!26111 (=> (not res!49351) (not e!63922))))

(assert (=> d!26111 (= res!49351 (contains!788 lt!49025 lt!49019))))

(assert (=> d!26111 (= (addApplyDifferent!68 lt!49025 lt!49008 (zeroValue!2363 newMap!16) lt!49019) lt!49208)))

(declare-fun b!98053 () Bool)

(assert (=> b!98053 (= e!63922 (not (= lt!49019 lt!49008)))))

(assert (= (and d!26111 res!49351) b!98053))

(declare-fun m!107119 () Bool)

(assert (=> d!26111 m!107119))

(assert (=> d!26111 m!106805))

(assert (=> d!26111 m!106807))

(assert (=> d!26111 m!106805))

(declare-fun m!107121 () Bool)

(assert (=> d!26111 m!107121))

(assert (=> d!26111 m!106803))

(assert (=> b!97863 d!26111))

(declare-fun d!26113 () Bool)

(assert (=> d!26113 (= (apply!92 (+!130 lt!49016 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) lt!49013) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!49016 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))) lt!49013)))))

(declare-fun bs!4044 () Bool)

(assert (= bs!4044 d!26113))

(declare-fun m!107123 () Bool)

(assert (=> bs!4044 m!107123))

(assert (=> bs!4044 m!107123))

(declare-fun m!107125 () Bool)

(assert (=> bs!4044 m!107125))

(assert (=> b!97863 d!26113))

(declare-fun d!26115 () Bool)

(assert (=> d!26115 (= (apply!92 (+!130 lt!49010 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) lt!49012) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!49010 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))) lt!49012)))))

(declare-fun bs!4045 () Bool)

(assert (= bs!4045 d!26115))

(declare-fun m!107127 () Bool)

(assert (=> bs!4045 m!107127))

(assert (=> bs!4045 m!107127))

(declare-fun m!107129 () Bool)

(assert (=> bs!4045 m!107129))

(assert (=> b!97863 d!26115))

(declare-fun b!98054 () Bool)

(assert (=> b!98054 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> b!98054 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816))))))

(declare-fun e!63925 () Bool)

(declare-fun lt!49211 () ListLongMap!1499)

(assert (=> b!98054 (= e!63925 (= (apply!92 lt!49211 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98055 () Bool)

(declare-fun e!63928 () Bool)

(declare-fun e!63927 () Bool)

(assert (=> b!98055 (= e!63928 e!63927)))

(declare-fun c!16629 () Bool)

(assert (=> b!98055 (= c!16629 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98056 () Bool)

(assert (=> b!98056 (= e!63928 e!63925)))

(assert (=> b!98056 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49355 () Bool)

(assert (=> b!98056 (= res!49355 (contains!788 lt!49211 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98056 (=> (not res!49355) (not e!63925))))

(declare-fun b!98057 () Bool)

(declare-fun e!63924 () ListLongMap!1499)

(declare-fun call!9990 () ListLongMap!1499)

(assert (=> b!98057 (= e!63924 call!9990)))

(declare-fun b!98058 () Bool)

(declare-fun e!63926 () Bool)

(assert (=> b!98058 (= e!63926 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98058 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26117 () Bool)

(declare-fun e!63929 () Bool)

(assert (=> d!26117 e!63929))

(declare-fun res!49354 () Bool)

(assert (=> d!26117 (=> (not res!49354) (not e!63929))))

(assert (=> d!26117 (= res!49354 (not (contains!788 lt!49211 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!63923 () ListLongMap!1499)

(assert (=> d!26117 (= lt!49211 e!63923)))

(declare-fun c!16630 () Bool)

(assert (=> d!26117 (= c!16630 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26117 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26117 (= (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49211)))

(declare-fun b!98059 () Bool)

(assert (=> b!98059 (= e!63927 (isEmpty!363 lt!49211))))

(declare-fun b!98060 () Bool)

(assert (=> b!98060 (= e!63923 (ListLongMap!1500 Nil!1561))))

(declare-fun b!98061 () Bool)

(assert (=> b!98061 (= e!63929 e!63928)))

(declare-fun c!16628 () Bool)

(assert (=> b!98061 (= c!16628 e!63926)))

(declare-fun res!49353 () Bool)

(assert (=> b!98061 (=> (not res!49353) (not e!63926))))

(assert (=> b!98061 (= res!49353 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98062 () Bool)

(declare-fun res!49352 () Bool)

(assert (=> b!98062 (=> (not res!49352) (not e!63929))))

(assert (=> b!98062 (= res!49352 (not (contains!788 lt!49211 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98063 () Bool)

(declare-fun lt!49213 () Unit!2917)

(declare-fun lt!49210 () Unit!2917)

(assert (=> b!98063 (= lt!49213 lt!49210)))

(declare-fun lt!49214 () ListLongMap!1499)

(declare-fun lt!49212 () (_ BitVec 64))

(declare-fun lt!49209 () V!3153)

(declare-fun lt!49215 () (_ BitVec 64))

(assert (=> b!98063 (not (contains!788 (+!130 lt!49214 (tuple2!2301 lt!49215 lt!49209)) lt!49212))))

(assert (=> b!98063 (= lt!49210 (addStillNotContains!42 lt!49214 lt!49215 lt!49209 lt!49212))))

(assert (=> b!98063 (= lt!49212 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98063 (= lt!49209 (get!1288 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98063 (= lt!49215 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98063 (= lt!49214 call!9990)))

(assert (=> b!98063 (= e!63924 (+!130 call!9990 (tuple2!2301 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (get!1288 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98064 () Bool)

(assert (=> b!98064 (= e!63923 e!63924)))

(declare-fun c!16631 () Bool)

(assert (=> b!98064 (= c!16631 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98065 () Bool)

(assert (=> b!98065 (= e!63927 (= lt!49211 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun bm!9987 () Bool)

(assert (=> bm!9987 (= call!9990 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26117 c!16630) b!98060))

(assert (= (and d!26117 (not c!16630)) b!98064))

(assert (= (and b!98064 c!16631) b!98063))

(assert (= (and b!98064 (not c!16631)) b!98057))

(assert (= (or b!98063 b!98057) bm!9987))

(assert (= (and d!26117 res!49354) b!98062))

(assert (= (and b!98062 res!49352) b!98061))

(assert (= (and b!98061 res!49353) b!98058))

(assert (= (and b!98061 c!16628) b!98056))

(assert (= (and b!98061 (not c!16628)) b!98055))

(assert (= (and b!98056 res!49355) b!98054))

(assert (= (and b!98055 c!16629) b!98065))

(assert (= (and b!98055 (not c!16629)) b!98059))

(declare-fun b_lambda!4357 () Bool)

(assert (=> (not b_lambda!4357) (not b!98054)))

(assert (=> b!98054 t!5523))

(declare-fun b_and!6013 () Bool)

(assert (= b_and!6009 (and (=> t!5523 result!3271) b_and!6013)))

(assert (=> b!98054 t!5525))

(declare-fun b_and!6015 () Bool)

(assert (= b_and!6011 (and (=> t!5525 result!3273) b_and!6015)))

(declare-fun b_lambda!4359 () Bool)

(assert (=> (not b_lambda!4359) (not b!98063)))

(assert (=> b!98063 t!5523))

(declare-fun b_and!6017 () Bool)

(assert (= b_and!6013 (and (=> t!5523 result!3271) b_and!6017)))

(assert (=> b!98063 t!5525))

(declare-fun b_and!6019 () Bool)

(assert (= b_and!6015 (and (=> t!5525 result!3273) b_and!6019)))

(declare-fun m!107131 () Bool)

(assert (=> bm!9987 m!107131))

(declare-fun m!107133 () Bool)

(assert (=> d!26117 m!107133))

(assert (=> d!26117 m!106537))

(assert (=> b!98064 m!106551))

(assert (=> b!98064 m!106551))

(assert (=> b!98064 m!106599))

(declare-fun m!107135 () Bool)

(assert (=> b!98062 m!107135))

(assert (=> b!98065 m!107131))

(declare-fun m!107137 () Bool)

(assert (=> b!98059 m!107137))

(assert (=> b!98054 m!106775))

(assert (=> b!98054 m!106557))

(assert (=> b!98054 m!106779))

(assert (=> b!98054 m!106551))

(declare-fun m!107139 () Bool)

(assert (=> b!98054 m!107139))

(assert (=> b!98054 m!106551))

(assert (=> b!98054 m!106557))

(assert (=> b!98054 m!106775))

(assert (=> b!98056 m!106551))

(assert (=> b!98056 m!106551))

(declare-fun m!107141 () Bool)

(assert (=> b!98056 m!107141))

(declare-fun m!107143 () Bool)

(assert (=> b!98063 m!107143))

(declare-fun m!107145 () Bool)

(assert (=> b!98063 m!107145))

(assert (=> b!98063 m!107143))

(declare-fun m!107147 () Bool)

(assert (=> b!98063 m!107147))

(assert (=> b!98063 m!106551))

(assert (=> b!98063 m!106557))

(assert (=> b!98063 m!106775))

(assert (=> b!98063 m!106775))

(assert (=> b!98063 m!106557))

(assert (=> b!98063 m!106779))

(declare-fun m!107149 () Bool)

(assert (=> b!98063 m!107149))

(assert (=> b!98058 m!106551))

(assert (=> b!98058 m!106551))

(assert (=> b!98058 m!106599))

(assert (=> b!97863 d!26117))

(declare-fun d!26119 () Bool)

(declare-fun e!63930 () Bool)

(assert (=> d!26119 e!63930))

(declare-fun res!49357 () Bool)

(assert (=> d!26119 (=> (not res!49357) (not e!63930))))

(declare-fun lt!49216 () ListLongMap!1499)

(assert (=> d!26119 (= res!49357 (contains!788 lt!49216 (_1!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))))))

(declare-fun lt!49217 () List!1564)

(assert (=> d!26119 (= lt!49216 (ListLongMap!1500 lt!49217))))

(declare-fun lt!49219 () Unit!2917)

(declare-fun lt!49218 () Unit!2917)

(assert (=> d!26119 (= lt!49219 lt!49218)))

(assert (=> d!26119 (= (getValueByKey!151 lt!49217 (_1!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))))))

(assert (=> d!26119 (= lt!49218 (lemmaContainsTupThenGetReturnValue!67 lt!49217 (_1!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))))))

(assert (=> d!26119 (= lt!49217 (insertStrictlySorted!70 (toList!765 lt!49010) (_1!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))))))

(assert (=> d!26119 (= (+!130 lt!49010 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) lt!49216)))

(declare-fun b!98066 () Bool)

(declare-fun res!49356 () Bool)

(assert (=> b!98066 (=> (not res!49356) (not e!63930))))

(assert (=> b!98066 (= res!49356 (= (getValueByKey!151 (toList!765 lt!49216) (_1!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))))))))

(declare-fun b!98067 () Bool)

(assert (=> b!98067 (= e!63930 (contains!791 (toList!765 lt!49216) (tuple2!2301 lt!49022 (minValue!2363 newMap!16))))))

(assert (= (and d!26119 res!49357) b!98066))

(assert (= (and b!98066 res!49356) b!98067))

(declare-fun m!107151 () Bool)

(assert (=> d!26119 m!107151))

(declare-fun m!107153 () Bool)

(assert (=> d!26119 m!107153))

(declare-fun m!107155 () Bool)

(assert (=> d!26119 m!107155))

(declare-fun m!107157 () Bool)

(assert (=> d!26119 m!107157))

(declare-fun m!107159 () Bool)

(assert (=> b!98066 m!107159))

(declare-fun m!107161 () Bool)

(assert (=> b!98067 m!107161))

(assert (=> b!97863 d!26119))

(declare-fun d!26121 () Bool)

(declare-fun e!63931 () Bool)

(assert (=> d!26121 e!63931))

(declare-fun res!49358 () Bool)

(assert (=> d!26121 (=> res!49358 e!63931)))

(declare-fun lt!49220 () Bool)

(assert (=> d!26121 (= res!49358 (not lt!49220))))

(declare-fun lt!49223 () Bool)

(assert (=> d!26121 (= lt!49220 lt!49223)))

(declare-fun lt!49221 () Unit!2917)

(declare-fun e!63932 () Unit!2917)

(assert (=> d!26121 (= lt!49221 e!63932)))

(declare-fun c!16632 () Bool)

(assert (=> d!26121 (= c!16632 lt!49223)))

(assert (=> d!26121 (= lt!49223 (containsKey!154 (toList!765 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) lt!49015))))

(assert (=> d!26121 (= (contains!788 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) lt!49015) lt!49220)))

(declare-fun b!98068 () Bool)

(declare-fun lt!49222 () Unit!2917)

(assert (=> b!98068 (= e!63932 lt!49222)))

(assert (=> b!98068 (= lt!49222 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) lt!49015))))

(assert (=> b!98068 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) lt!49015))))

(declare-fun b!98069 () Bool)

(declare-fun Unit!2944 () Unit!2917)

(assert (=> b!98069 (= e!63932 Unit!2944)))

(declare-fun b!98070 () Bool)

(assert (=> b!98070 (= e!63931 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) lt!49015)))))

(assert (= (and d!26121 c!16632) b!98068))

(assert (= (and d!26121 (not c!16632)) b!98069))

(assert (= (and d!26121 (not res!49358)) b!98070))

(declare-fun m!107163 () Bool)

(assert (=> d!26121 m!107163))

(declare-fun m!107165 () Bool)

(assert (=> b!98068 m!107165))

(declare-fun m!107167 () Bool)

(assert (=> b!98068 m!107167))

(assert (=> b!98068 m!107167))

(declare-fun m!107169 () Bool)

(assert (=> b!98068 m!107169))

(assert (=> b!98070 m!107167))

(assert (=> b!98070 m!107167))

(assert (=> b!98070 m!107169))

(assert (=> b!97863 d!26121))

(declare-fun d!26123 () Bool)

(declare-fun e!63933 () Bool)

(assert (=> d!26123 e!63933))

(declare-fun res!49360 () Bool)

(assert (=> d!26123 (=> (not res!49360) (not e!63933))))

(declare-fun lt!49224 () ListLongMap!1499)

(assert (=> d!26123 (= res!49360 (contains!788 lt!49224 (_1!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49225 () List!1564)

(assert (=> d!26123 (= lt!49224 (ListLongMap!1500 lt!49225))))

(declare-fun lt!49227 () Unit!2917)

(declare-fun lt!49226 () Unit!2917)

(assert (=> d!26123 (= lt!49227 lt!49226)))

(assert (=> d!26123 (= (getValueByKey!151 lt!49225 (_1!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26123 (= lt!49226 (lemmaContainsTupThenGetReturnValue!67 lt!49225 (_1!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26123 (= lt!49225 (insertStrictlySorted!70 (toList!765 lt!49021) (_1!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26123 (= (+!130 lt!49021 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))) lt!49224)))

(declare-fun b!98071 () Bool)

(declare-fun res!49359 () Bool)

(assert (=> b!98071 (=> (not res!49359) (not e!63933))))

(assert (=> b!98071 (= res!49359 (= (getValueByKey!151 (toList!765 lt!49224) (_1!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98072 () Bool)

(assert (=> b!98072 (= e!63933 (contains!791 (toList!765 lt!49224) (tuple2!2301 lt!49017 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26123 res!49360) b!98071))

(assert (= (and b!98071 res!49359) b!98072))

(declare-fun m!107171 () Bool)

(assert (=> d!26123 m!107171))

(declare-fun m!107173 () Bool)

(assert (=> d!26123 m!107173))

(declare-fun m!107175 () Bool)

(assert (=> d!26123 m!107175))

(declare-fun m!107177 () Bool)

(assert (=> d!26123 m!107177))

(declare-fun m!107179 () Bool)

(assert (=> b!98071 m!107179))

(declare-fun m!107181 () Bool)

(assert (=> b!98072 m!107181))

(assert (=> b!97863 d!26123))

(declare-fun d!26125 () Bool)

(assert (=> d!26125 (= (apply!92 (+!130 lt!49025 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16))) lt!49019) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!49025 (tuple2!2301 lt!49008 (zeroValue!2363 newMap!16)))) lt!49019)))))

(declare-fun bs!4046 () Bool)

(assert (= bs!4046 d!26125))

(declare-fun m!107183 () Bool)

(assert (=> bs!4046 m!107183))

(assert (=> bs!4046 m!107183))

(declare-fun m!107185 () Bool)

(assert (=> bs!4046 m!107185))

(assert (=> b!97863 d!26125))

(declare-fun d!26127 () Bool)

(assert (=> d!26127 (= (apply!92 (+!130 lt!49016 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) lt!49013) (apply!92 lt!49016 lt!49013))))

(declare-fun lt!49228 () Unit!2917)

(assert (=> d!26127 (= lt!49228 (choose!602 lt!49016 lt!49006 (minValue!2363 newMap!16) lt!49013))))

(declare-fun e!63934 () Bool)

(assert (=> d!26127 e!63934))

(declare-fun res!49361 () Bool)

(assert (=> d!26127 (=> (not res!49361) (not e!63934))))

(assert (=> d!26127 (= res!49361 (contains!788 lt!49016 lt!49013))))

(assert (=> d!26127 (= (addApplyDifferent!68 lt!49016 lt!49006 (minValue!2363 newMap!16) lt!49013) lt!49228)))

(declare-fun b!98073 () Bool)

(assert (=> b!98073 (= e!63934 (not (= lt!49013 lt!49006)))))

(assert (= (and d!26127 res!49361) b!98073))

(declare-fun m!107187 () Bool)

(assert (=> d!26127 m!107187))

(assert (=> d!26127 m!106783))

(assert (=> d!26127 m!106785))

(assert (=> d!26127 m!106783))

(declare-fun m!107189 () Bool)

(assert (=> d!26127 m!107189))

(assert (=> d!26127 m!106811))

(assert (=> b!97863 d!26127))

(declare-fun d!26129 () Bool)

(declare-fun e!63935 () Bool)

(assert (=> d!26129 e!63935))

(declare-fun res!49363 () Bool)

(assert (=> d!26129 (=> (not res!49363) (not e!63935))))

(declare-fun lt!49229 () ListLongMap!1499)

(assert (=> d!26129 (= res!49363 (contains!788 lt!49229 (_1!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))))))

(declare-fun lt!49230 () List!1564)

(assert (=> d!26129 (= lt!49229 (ListLongMap!1500 lt!49230))))

(declare-fun lt!49232 () Unit!2917)

(declare-fun lt!49231 () Unit!2917)

(assert (=> d!26129 (= lt!49232 lt!49231)))

(assert (=> d!26129 (= (getValueByKey!151 lt!49230 (_1!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))))))

(assert (=> d!26129 (= lt!49231 (lemmaContainsTupThenGetReturnValue!67 lt!49230 (_1!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))))))

(assert (=> d!26129 (= lt!49230 (insertStrictlySorted!70 (toList!765 lt!49016) (_1!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))))))

(assert (=> d!26129 (= (+!130 lt!49016 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))) lt!49229)))

(declare-fun b!98074 () Bool)

(declare-fun res!49362 () Bool)

(assert (=> b!98074 (=> (not res!49362) (not e!63935))))

(assert (=> b!98074 (= res!49362 (= (getValueByKey!151 (toList!765 lt!49229) (_1!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!49006 (minValue!2363 newMap!16))))))))

(declare-fun b!98075 () Bool)

(assert (=> b!98075 (= e!63935 (contains!791 (toList!765 lt!49229) (tuple2!2301 lt!49006 (minValue!2363 newMap!16))))))

(assert (= (and d!26129 res!49363) b!98074))

(assert (= (and b!98074 res!49362) b!98075))

(declare-fun m!107191 () Bool)

(assert (=> d!26129 m!107191))

(declare-fun m!107193 () Bool)

(assert (=> d!26129 m!107193))

(declare-fun m!107195 () Bool)

(assert (=> d!26129 m!107195))

(declare-fun m!107197 () Bool)

(assert (=> d!26129 m!107197))

(declare-fun m!107199 () Bool)

(assert (=> b!98074 m!107199))

(declare-fun m!107201 () Bool)

(assert (=> b!98075 m!107201))

(assert (=> b!97863 d!26129))

(declare-fun d!26131 () Bool)

(assert (=> d!26131 (= (apply!92 (+!130 lt!49010 (tuple2!2301 lt!49022 (minValue!2363 newMap!16))) lt!49012) (apply!92 lt!49010 lt!49012))))

(declare-fun lt!49233 () Unit!2917)

(assert (=> d!26131 (= lt!49233 (choose!602 lt!49010 lt!49022 (minValue!2363 newMap!16) lt!49012))))

(declare-fun e!63936 () Bool)

(assert (=> d!26131 e!63936))

(declare-fun res!49364 () Bool)

(assert (=> d!26131 (=> (not res!49364) (not e!63936))))

(assert (=> d!26131 (= res!49364 (contains!788 lt!49010 lt!49012))))

(assert (=> d!26131 (= (addApplyDifferent!68 lt!49010 lt!49022 (minValue!2363 newMap!16) lt!49012) lt!49233)))

(declare-fun b!98076 () Bool)

(assert (=> b!98076 (= e!63936 (not (= lt!49012 lt!49022)))))

(assert (= (and d!26131 res!49364) b!98076))

(declare-fun m!107203 () Bool)

(assert (=> d!26131 m!107203))

(assert (=> d!26131 m!106797))

(assert (=> d!26131 m!106799))

(assert (=> d!26131 m!106797))

(declare-fun m!107205 () Bool)

(assert (=> d!26131 m!107205))

(assert (=> d!26131 m!106801))

(assert (=> b!97863 d!26131))

(declare-fun d!26133 () Bool)

(assert (=> d!26133 (= (get!1292 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2807 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26077 d!26133))

(declare-fun b!98077 () Bool)

(declare-fun e!63937 () Option!157)

(assert (=> b!98077 (= e!63937 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48882)))))))

(declare-fun b!98080 () Bool)

(declare-fun e!63938 () Option!157)

(assert (=> b!98080 (= e!63938 None!155)))

(declare-fun b!98078 () Bool)

(assert (=> b!98078 (= e!63937 e!63938)))

(declare-fun c!16634 () Bool)

(assert (=> b!98078 (= c!16634 (and ((_ is Cons!1560) (toList!765 lt!48882)) (not (= (_1!1161 (h!2154 (toList!765 lt!48882))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun d!26135 () Bool)

(declare-fun c!16633 () Bool)

(assert (=> d!26135 (= c!16633 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26135 (= (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!63937)))

(declare-fun b!98079 () Bool)

(assert (=> b!98079 (= e!63938 (getValueByKey!151 (t!5510 (toList!765 lt!48882)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26135 c!16633) b!98077))

(assert (= (and d!26135 (not c!16633)) b!98078))

(assert (= (and b!98078 c!16634) b!98079))

(assert (= (and b!98078 (not c!16634)) b!98080))

(assert (=> b!98079 m!106381))

(declare-fun m!107207 () Bool)

(assert (=> b!98079 m!107207))

(assert (=> d!26077 d!26135))

(declare-fun d!26137 () Bool)

(declare-fun e!63939 () Bool)

(assert (=> d!26137 e!63939))

(declare-fun res!49365 () Bool)

(assert (=> d!26137 (=> res!49365 e!63939)))

(declare-fun lt!49234 () Bool)

(assert (=> d!26137 (= res!49365 (not lt!49234))))

(declare-fun lt!49237 () Bool)

(assert (=> d!26137 (= lt!49234 lt!49237)))

(declare-fun lt!49235 () Unit!2917)

(declare-fun e!63940 () Unit!2917)

(assert (=> d!26137 (= lt!49235 e!63940)))

(declare-fun c!16635 () Bool)

(assert (=> d!26137 (= c!16635 lt!49237)))

(assert (=> d!26137 (= lt!49237 (containsKey!154 (toList!765 lt!48889) lt!48886))))

(assert (=> d!26137 (= (contains!788 lt!48889 lt!48886) lt!49234)))

(declare-fun b!98081 () Bool)

(declare-fun lt!49236 () Unit!2917)

(assert (=> b!98081 (= e!63940 lt!49236)))

(assert (=> b!98081 (= lt!49236 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48889) lt!48886))))

(assert (=> b!98081 (isDefined!103 (getValueByKey!151 (toList!765 lt!48889) lt!48886))))

(declare-fun b!98082 () Bool)

(declare-fun Unit!2945 () Unit!2917)

(assert (=> b!98082 (= e!63940 Unit!2945)))

(declare-fun b!98083 () Bool)

(assert (=> b!98083 (= e!63939 (isDefined!103 (getValueByKey!151 (toList!765 lt!48889) lt!48886)))))

(assert (= (and d!26137 c!16635) b!98081))

(assert (= (and d!26137 (not c!16635)) b!98082))

(assert (= (and d!26137 (not res!49365)) b!98083))

(declare-fun m!107209 () Bool)

(assert (=> d!26137 m!107209))

(declare-fun m!107211 () Bool)

(assert (=> b!98081 m!107211))

(assert (=> b!98081 m!106949))

(assert (=> b!98081 m!106949))

(declare-fun m!107213 () Bool)

(assert (=> b!98081 m!107213))

(assert (=> b!98083 m!106949))

(assert (=> b!98083 m!106949))

(assert (=> b!98083 m!107213))

(assert (=> d!26061 d!26137))

(assert (=> d!26061 d!26045))

(declare-fun d!26139 () Bool)

(assert (=> d!26139 (= (apply!92 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48886) (apply!92 lt!48889 lt!48886))))

(assert (=> d!26139 true))

(declare-fun _$34!863 () Unit!2917)

(assert (=> d!26139 (= (choose!602 lt!48889 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48886) _$34!863)))

(declare-fun bs!4047 () Bool)

(assert (= bs!4047 d!26139))

(assert (=> bs!4047 m!106479))

(assert (=> bs!4047 m!106479))

(assert (=> bs!4047 m!106481))

(assert (=> bs!4047 m!106507))

(assert (=> d!26061 d!26139))

(assert (=> d!26061 d!26065))

(assert (=> d!26061 d!26067))

(declare-fun b!98103 () Bool)

(declare-fun e!63955 () SeekEntryResult!247)

(declare-fun e!63951 () SeekEntryResult!247)

(assert (=> b!98103 (= e!63955 e!63951)))

(declare-fun lt!49242 () (_ BitVec 64))

(declare-fun c!16643 () Bool)

(assert (=> b!98103 (= c!16643 (or (= lt!49242 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (= (bvadd lt!49242 lt!49242) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98104 () Bool)

(assert (=> b!98104 (= e!63951 (Intermediate!247 false (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!98106 () Bool)

(declare-fun lt!49243 () SeekEntryResult!247)

(assert (=> b!98106 (and (bvsge (index!3133 lt!49243) #b00000000000000000000000000000000) (bvslt (index!3133 lt!49243) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun e!63953 () Bool)

(assert (=> b!98106 (= e!63953 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!49243)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98107 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!98107 (= e!63951 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!6577 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun b!98108 () Bool)

(assert (=> b!98108 (and (bvsge (index!3133 lt!49243) #b00000000000000000000000000000000) (bvslt (index!3133 lt!49243) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49372 () Bool)

(assert (=> b!98108 (= res!49372 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!49243)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!98108 (=> res!49372 e!63953)))

(declare-fun e!63954 () Bool)

(assert (=> b!98108 (= e!63954 e!63953)))

(declare-fun b!98109 () Bool)

(assert (=> b!98109 (and (bvsge (index!3133 lt!49243) #b00000000000000000000000000000000) (bvslt (index!3133 lt!49243) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49373 () Bool)

(assert (=> b!98109 (= res!49373 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!49243)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98109 (=> res!49373 e!63953)))

(declare-fun b!98110 () Bool)

(declare-fun e!63952 () Bool)

(assert (=> b!98110 (= e!63952 (bvsge (x!12953 lt!49243) #b01111111111111111111111111111110))))

(declare-fun b!98111 () Bool)

(assert (=> b!98111 (= e!63955 (Intermediate!247 true (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!98105 () Bool)

(assert (=> b!98105 (= e!63952 e!63954)))

(declare-fun res!49374 () Bool)

(assert (=> b!98105 (= res!49374 (and ((_ is Intermediate!247) lt!49243) (not (undefined!1059 lt!49243)) (bvslt (x!12953 lt!49243) #b01111111111111111111111111111110) (bvsge (x!12953 lt!49243) #b00000000000000000000000000000000) (bvsge (x!12953 lt!49243) #b00000000000000000000000000000000)))))

(assert (=> b!98105 (=> (not res!49374) (not e!63954))))

(declare-fun d!26141 () Bool)

(assert (=> d!26141 e!63952))

(declare-fun c!16642 () Bool)

(assert (=> d!26141 (= c!16642 (and ((_ is Intermediate!247) lt!49243) (undefined!1059 lt!49243)))))

(assert (=> d!26141 (= lt!49243 e!63955)))

(declare-fun c!16644 () Bool)

(assert (=> d!26141 (= c!16644 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!26141 (= lt!49242 (select (arr!2006 (_keys!4170 newMap!16)) (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16))))))

(assert (=> d!26141 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26141 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)) lt!49243)))

(assert (= (and d!26141 c!16644) b!98111))

(assert (= (and d!26141 (not c!16644)) b!98103))

(assert (= (and b!98103 c!16643) b!98104))

(assert (= (and b!98103 (not c!16643)) b!98107))

(assert (= (and d!26141 c!16642) b!98110))

(assert (= (and d!26141 (not c!16642)) b!98105))

(assert (= (and b!98105 res!49374) b!98108))

(assert (= (and b!98108 (not res!49372)) b!98109))

(assert (= (and b!98109 (not res!49373)) b!98106))

(declare-fun m!107215 () Bool)

(assert (=> b!98109 m!107215))

(assert (=> b!98107 m!106533))

(declare-fun m!107217 () Bool)

(assert (=> b!98107 m!107217))

(assert (=> b!98107 m!107217))

(assert (=> b!98107 m!106251))

(declare-fun m!107219 () Bool)

(assert (=> b!98107 m!107219))

(assert (=> b!98106 m!107215))

(assert (=> b!98108 m!107215))

(assert (=> d!26141 m!106533))

(declare-fun m!107221 () Bool)

(assert (=> d!26141 m!107221))

(assert (=> d!26141 m!106537))

(assert (=> d!25969 d!26141))

(declare-fun d!26143 () Bool)

(declare-fun lt!49249 () (_ BitVec 32))

(declare-fun lt!49248 () (_ BitVec 32))

(assert (=> d!26143 (= lt!49249 (bvmul (bvxor lt!49248 (bvlshr lt!49248 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26143 (= lt!49248 ((_ extract 31 0) (bvand (bvxor (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvlshr (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26143 (and (bvsge (mask!6577 newMap!16) #b00000000000000000000000000000000) (let ((res!49375 (let ((h!2158 ((_ extract 31 0) (bvand (bvxor (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvlshr (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13056 (bvmul (bvxor h!2158 (bvlshr h!2158 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13056 (bvlshr x!13056 #b00000000000000000000000000001101)) (mask!6577 newMap!16)))))) (and (bvslt res!49375 (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001)) (bvsge res!49375 #b00000000000000000000000000000000))))))

(assert (=> d!26143 (= (toIndex!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (mask!6577 newMap!16)) (bvand (bvxor lt!49249 (bvlshr lt!49249 #b00000000000000000000000000001101)) (mask!6577 newMap!16)))))

(assert (=> d!25969 d!26143))

(assert (=> d!25969 d!26099))

(declare-fun d!26145 () Bool)

(assert (=> d!26145 (= (size!2262 newMap!16) (bvadd (_size!474 newMap!16) (bvsdiv (bvadd (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!97834 d!26145))

(declare-fun d!26147 () Bool)

(declare-fun e!63956 () Bool)

(assert (=> d!26147 e!63956))

(declare-fun res!49376 () Bool)

(assert (=> d!26147 (=> res!49376 e!63956)))

(declare-fun lt!49250 () Bool)

(assert (=> d!26147 (= res!49376 (not lt!49250))))

(declare-fun lt!49253 () Bool)

(assert (=> d!26147 (= lt!49250 lt!49253)))

(declare-fun lt!49251 () Unit!2917)

(declare-fun e!63957 () Unit!2917)

(assert (=> d!26147 (= lt!49251 e!63957)))

(declare-fun c!16645 () Bool)

(assert (=> d!26147 (= c!16645 lt!49253)))

(assert (=> d!26147 (= lt!49253 (containsKey!154 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26147 (= (contains!788 lt!49046 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49250)))

(declare-fun b!98112 () Bool)

(declare-fun lt!49252 () Unit!2917)

(assert (=> b!98112 (= e!63957 lt!49252)))

(assert (=> b!98112 (= lt!49252 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> b!98112 (isDefined!103 (getValueByKey!151 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98113 () Bool)

(declare-fun Unit!2946 () Unit!2917)

(assert (=> b!98113 (= e!63957 Unit!2946)))

(declare-fun b!98114 () Bool)

(assert (=> b!98114 (= e!63956 (isDefined!103 (getValueByKey!151 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26147 c!16645) b!98112))

(assert (= (and d!26147 (not c!16645)) b!98113))

(assert (= (and d!26147 (not res!49376)) b!98114))

(declare-fun m!107223 () Bool)

(assert (=> d!26147 m!107223))

(declare-fun m!107225 () Bool)

(assert (=> b!98112 m!107225))

(assert (=> b!98112 m!106869))

(assert (=> b!98112 m!106869))

(declare-fun m!107227 () Bool)

(assert (=> b!98112 m!107227))

(assert (=> b!98114 m!106869))

(assert (=> b!98114 m!106869))

(assert (=> b!98114 m!107227))

(assert (=> d!26039 d!26147))

(declare-fun b!98115 () Bool)

(declare-fun e!63958 () Option!157)

(assert (=> b!98115 (= e!63958 (Some!156 (_2!1161 (h!2154 lt!49047))))))

(declare-fun b!98118 () Bool)

(declare-fun e!63959 () Option!157)

(assert (=> b!98118 (= e!63959 None!155)))

(declare-fun b!98116 () Bool)

(assert (=> b!98116 (= e!63958 e!63959)))

(declare-fun c!16647 () Bool)

(assert (=> b!98116 (= c!16647 (and ((_ is Cons!1560) lt!49047) (not (= (_1!1161 (h!2154 lt!49047)) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16646 () Bool)

(declare-fun d!26149 () Bool)

(assert (=> d!26149 (= c!16646 (and ((_ is Cons!1560) lt!49047) (= (_1!1161 (h!2154 lt!49047)) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26149 (= (getValueByKey!151 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!63958)))

(declare-fun b!98117 () Bool)

(assert (=> b!98117 (= e!63959 (getValueByKey!151 (t!5510 lt!49047) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26149 c!16646) b!98115))

(assert (= (and d!26149 (not c!16646)) b!98116))

(assert (= (and b!98116 c!16647) b!98117))

(assert (= (and b!98116 (not c!16647)) b!98118))

(declare-fun m!107229 () Bool)

(assert (=> b!98117 m!107229))

(assert (=> d!26039 d!26149))

(declare-fun d!26151 () Bool)

(assert (=> d!26151 (= (getValueByKey!151 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49256 () Unit!2917)

(declare-fun choose!604 (List!1564 (_ BitVec 64) V!3153) Unit!2917)

(assert (=> d!26151 (= lt!49256 (choose!604 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!63962 () Bool)

(assert (=> d!26151 e!63962))

(declare-fun res!49381 () Bool)

(assert (=> d!26151 (=> (not res!49381) (not e!63962))))

(assert (=> d!26151 (= res!49381 (isStrictlySorted!291 lt!49047))))

(assert (=> d!26151 (= (lemmaContainsTupThenGetReturnValue!67 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49256)))

(declare-fun b!98123 () Bool)

(declare-fun res!49382 () Bool)

(assert (=> b!98123 (=> (not res!49382) (not e!63962))))

(assert (=> b!98123 (= res!49382 (containsKey!154 lt!49047 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98124 () Bool)

(assert (=> b!98124 (= e!63962 (contains!791 lt!49047 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26151 res!49381) b!98123))

(assert (= (and b!98123 res!49382) b!98124))

(assert (=> d!26151 m!106863))

(declare-fun m!107231 () Bool)

(assert (=> d!26151 m!107231))

(declare-fun m!107233 () Bool)

(assert (=> d!26151 m!107233))

(declare-fun m!107235 () Bool)

(assert (=> b!98123 m!107235))

(declare-fun m!107237 () Bool)

(assert (=> b!98124 m!107237))

(assert (=> d!26039 d!26151))

(declare-fun b!98145 () Bool)

(declare-fun e!63976 () List!1564)

(declare-fun call!9997 () List!1564)

(assert (=> b!98145 (= e!63976 call!9997)))

(declare-fun b!98146 () Bool)

(declare-fun e!63974 () List!1564)

(declare-fun e!63977 () List!1564)

(assert (=> b!98146 (= e!63974 e!63977)))

(declare-fun c!16659 () Bool)

(assert (=> b!98146 (= c!16659 (and ((_ is Cons!1560) (toList!765 lt!48894)) (= (_1!1161 (h!2154 (toList!765 lt!48894))) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98147 () Bool)

(declare-fun res!49387 () Bool)

(declare-fun e!63973 () Bool)

(assert (=> b!98147 (=> (not res!49387) (not e!63973))))

(declare-fun lt!49259 () List!1564)

(assert (=> b!98147 (= res!49387 (containsKey!154 lt!49259 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun bm!9994 () Bool)

(declare-fun call!9999 () List!1564)

(declare-fun call!9998 () List!1564)

(assert (=> bm!9994 (= call!9999 call!9998)))

(declare-fun bm!9995 () Bool)

(declare-fun c!16657 () Bool)

(declare-fun e!63975 () List!1564)

(declare-fun $colon$colon!77 (List!1564 tuple2!2300) List!1564)

(assert (=> bm!9995 (= call!9998 ($colon$colon!77 e!63975 (ite c!16657 (h!2154 (toList!765 lt!48894)) (tuple2!2301 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16658 () Bool)

(assert (=> bm!9995 (= c!16658 c!16657)))

(declare-fun b!98148 () Bool)

(declare-fun c!16656 () Bool)

(assert (=> b!98148 (= c!16656 (and ((_ is Cons!1560) (toList!765 lt!48894)) (bvsgt (_1!1161 (h!2154 (toList!765 lt!48894))) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98148 (= e!63977 e!63976)))

(declare-fun d!26153 () Bool)

(assert (=> d!26153 e!63973))

(declare-fun res!49388 () Bool)

(assert (=> d!26153 (=> (not res!49388) (not e!63973))))

(assert (=> d!26153 (= res!49388 (isStrictlySorted!291 lt!49259))))

(assert (=> d!26153 (= lt!49259 e!63974)))

(assert (=> d!26153 (= c!16657 (and ((_ is Cons!1560) (toList!765 lt!48894)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48894))) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26153 (isStrictlySorted!291 (toList!765 lt!48894))))

(assert (=> d!26153 (= (insertStrictlySorted!70 (toList!765 lt!48894) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49259)))

(declare-fun b!98149 () Bool)

(assert (=> b!98149 (= e!63977 call!9999)))

(declare-fun b!98150 () Bool)

(assert (=> b!98150 (= e!63975 (insertStrictlySorted!70 (t!5510 (toList!765 lt!48894)) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98151 () Bool)

(assert (=> b!98151 (= e!63975 (ite c!16659 (t!5510 (toList!765 lt!48894)) (ite c!16656 (Cons!1560 (h!2154 (toList!765 lt!48894)) (t!5510 (toList!765 lt!48894))) Nil!1561)))))

(declare-fun b!98152 () Bool)

(assert (=> b!98152 (= e!63974 call!9998)))

(declare-fun b!98153 () Bool)

(assert (=> b!98153 (= e!63976 call!9997)))

(declare-fun b!98154 () Bool)

(assert (=> b!98154 (= e!63973 (contains!791 lt!49259 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!9996 () Bool)

(assert (=> bm!9996 (= call!9997 call!9999)))

(assert (= (and d!26153 c!16657) b!98152))

(assert (= (and d!26153 (not c!16657)) b!98146))

(assert (= (and b!98146 c!16659) b!98149))

(assert (= (and b!98146 (not c!16659)) b!98148))

(assert (= (and b!98148 c!16656) b!98153))

(assert (= (and b!98148 (not c!16656)) b!98145))

(assert (= (or b!98153 b!98145) bm!9996))

(assert (= (or b!98149 bm!9996) bm!9994))

(assert (= (or b!98152 bm!9994) bm!9995))

(assert (= (and bm!9995 c!16658) b!98150))

(assert (= (and bm!9995 (not c!16658)) b!98151))

(assert (= (and d!26153 res!49388) b!98147))

(assert (= (and b!98147 res!49387) b!98154))

(declare-fun m!107239 () Bool)

(assert (=> bm!9995 m!107239))

(declare-fun m!107241 () Bool)

(assert (=> d!26153 m!107241))

(declare-fun m!107243 () Bool)

(assert (=> d!26153 m!107243))

(declare-fun m!107245 () Bool)

(assert (=> b!98154 m!107245))

(declare-fun m!107247 () Bool)

(assert (=> b!98147 m!107247))

(declare-fun m!107249 () Bool)

(assert (=> b!98150 m!107249))

(assert (=> d!26039 d!26153))

(declare-fun b!98155 () Bool)

(declare-fun e!63980 () Bool)

(declare-fun call!10000 () Bool)

(assert (=> b!98155 (= e!63980 call!10000)))

(declare-fun b!98156 () Bool)

(assert (=> b!98156 (= e!63980 call!10000)))

(declare-fun b!98157 () Bool)

(declare-fun e!63979 () Bool)

(declare-fun e!63981 () Bool)

(assert (=> b!98157 (= e!63979 e!63981)))

(declare-fun res!49389 () Bool)

(assert (=> b!98157 (=> (not res!49389) (not e!63981))))

(declare-fun e!63978 () Bool)

(assert (=> b!98157 (= res!49389 (not e!63978))))

(declare-fun res!49390 () Bool)

(assert (=> b!98157 (=> (not res!49390) (not e!63978))))

(assert (=> b!98157 (= res!49390 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!9997 () Bool)

(declare-fun c!16660 () Bool)

(assert (=> bm!9997 (= call!10000 (arrayNoDuplicates!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16660 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16566 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) Nil!1562) Nil!1562)) (ite c!16566 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) Nil!1562) Nil!1562))))))

(declare-fun b!98159 () Bool)

(assert (=> b!98159 (= e!63981 e!63980)))

(assert (=> b!98159 (= c!16660 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!26155 () Bool)

(declare-fun res!49391 () Bool)

(assert (=> d!26155 (=> res!49391 e!63979)))

(assert (=> d!26155 (= res!49391 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26155 (= (arrayNoDuplicates!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16566 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) Nil!1562) Nil!1562)) e!63979)))

(declare-fun b!98158 () Bool)

(assert (=> b!98158 (= e!63978 (contains!790 (ite c!16566 (Cons!1561 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) Nil!1562) Nil!1562) (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!26155 (not res!49391)) b!98157))

(assert (= (and b!98157 res!49390) b!98158))

(assert (= (and b!98157 res!49389) b!98159))

(assert (= (and b!98159 c!16660) b!98155))

(assert (= (and b!98159 (not c!16660)) b!98156))

(assert (= (or b!98155 b!98156) bm!9997))

(declare-fun m!107251 () Bool)

(assert (=> b!98157 m!107251))

(assert (=> b!98157 m!107251))

(declare-fun m!107253 () Bool)

(assert (=> b!98157 m!107253))

(assert (=> bm!9997 m!107251))

(declare-fun m!107255 () Bool)

(assert (=> bm!9997 m!107255))

(assert (=> b!98159 m!107251))

(assert (=> b!98159 m!107251))

(assert (=> b!98159 m!107253))

(assert (=> b!98158 m!107251))

(assert (=> b!98158 m!107251))

(declare-fun m!107257 () Bool)

(assert (=> b!98158 m!107257))

(assert (=> bm!9951 d!26155))

(declare-fun d!26157 () Bool)

(assert (=> d!26157 (= (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97759 d!26157))

(declare-fun d!26159 () Bool)

(assert (=> d!26159 (= (apply!92 lt!48913 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48913) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4048 () Bool)

(assert (= bs!4048 d!26159))

(declare-fun m!107259 () Bool)

(assert (=> bs!4048 m!107259))

(assert (=> bs!4048 m!107259))

(declare-fun m!107261 () Bool)

(assert (=> bs!4048 m!107261))

(assert (=> b!97730 d!26159))

(declare-fun d!26161 () Bool)

(declare-fun e!63982 () Bool)

(assert (=> d!26161 e!63982))

(declare-fun res!49392 () Bool)

(assert (=> d!26161 (=> res!49392 e!63982)))

(declare-fun lt!49260 () Bool)

(assert (=> d!26161 (= res!49392 (not lt!49260))))

(declare-fun lt!49263 () Bool)

(assert (=> d!26161 (= lt!49260 lt!49263)))

(declare-fun lt!49261 () Unit!2917)

(declare-fun e!63983 () Unit!2917)

(assert (=> d!26161 (= lt!49261 e!63983)))

(declare-fun c!16661 () Bool)

(assert (=> d!26161 (= c!16661 lt!49263)))

(assert (=> d!26161 (= lt!49263 (containsKey!154 (toList!765 lt!49009) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26161 (= (contains!788 lt!49009 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) lt!49260)))

(declare-fun b!98160 () Bool)

(declare-fun lt!49262 () Unit!2917)

(assert (=> b!98160 (= e!63983 lt!49262)))

(assert (=> b!98160 (= lt!49262 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49009) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98160 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98161 () Bool)

(declare-fun Unit!2947 () Unit!2917)

(assert (=> b!98161 (= e!63983 Unit!2947)))

(declare-fun b!98162 () Bool)

(assert (=> b!98162 (= e!63982 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26161 c!16661) b!98160))

(assert (= (and d!26161 (not c!16661)) b!98161))

(assert (= (and d!26161 (not res!49392)) b!98162))

(assert (=> d!26161 m!106551))

(declare-fun m!107263 () Bool)

(assert (=> d!26161 m!107263))

(assert (=> b!98160 m!106551))

(declare-fun m!107265 () Bool)

(assert (=> b!98160 m!107265))

(assert (=> b!98160 m!106551))

(declare-fun m!107267 () Bool)

(assert (=> b!98160 m!107267))

(assert (=> b!98160 m!107267))

(declare-fun m!107269 () Bool)

(assert (=> b!98160 m!107269))

(assert (=> b!98162 m!106551))

(assert (=> b!98162 m!107267))

(assert (=> b!98162 m!107267))

(assert (=> b!98162 m!107269))

(assert (=> b!97860 d!26161))

(declare-fun d!26163 () Bool)

(declare-fun res!49393 () Bool)

(declare-fun e!63984 () Bool)

(assert (=> d!26163 (=> res!49393 e!63984)))

(assert (=> d!26163 (= res!49393 (and ((_ is Cons!1560) (t!5510 (toList!765 lt!48683))) (= (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26163 (= (containsKey!154 (t!5510 (toList!765 lt!48683)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!63984)))

(declare-fun b!98163 () Bool)

(declare-fun e!63985 () Bool)

(assert (=> b!98163 (= e!63984 e!63985)))

(declare-fun res!49394 () Bool)

(assert (=> b!98163 (=> (not res!49394) (not e!63985))))

(assert (=> b!98163 (= res!49394 (and (or (not ((_ is Cons!1560) (t!5510 (toList!765 lt!48683)))) (bvsle (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) ((_ is Cons!1560) (t!5510 (toList!765 lt!48683))) (bvslt (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(declare-fun b!98164 () Bool)

(assert (=> b!98164 (= e!63985 (containsKey!154 (t!5510 (t!5510 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26163 (not res!49393)) b!98163))

(assert (= (and b!98163 res!49394) b!98164))

(assert (=> b!98164 m!106251))

(declare-fun m!107271 () Bool)

(assert (=> b!98164 m!107271))

(assert (=> b!98024 d!26163))

(declare-fun d!26165 () Bool)

(assert (=> d!26165 (= (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!362 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4049 () Bool)

(assert (= bs!4049 d!26165))

(assert (=> bs!4049 m!106721))

(declare-fun m!107273 () Bool)

(assert (=> bs!4049 m!107273))

(assert (=> b!97839 d!26165))

(declare-fun b!98165 () Bool)

(declare-fun e!63986 () Option!157)

(assert (=> b!98165 (= e!63986 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48882)))))))

(declare-fun b!98168 () Bool)

(declare-fun e!63987 () Option!157)

(assert (=> b!98168 (= e!63987 None!155)))

(declare-fun b!98166 () Bool)

(assert (=> b!98166 (= e!63986 e!63987)))

(declare-fun c!16663 () Bool)

(assert (=> b!98166 (= c!16663 (and ((_ is Cons!1560) (toList!765 lt!48882)) (not (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26167 () Bool)

(declare-fun c!16662 () Bool)

(assert (=> d!26167 (= c!16662 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26167 (= (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000) e!63986)))

(declare-fun b!98167 () Bool)

(assert (=> b!98167 (= e!63987 (getValueByKey!151 (t!5510 (toList!765 lt!48882)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26167 c!16662) b!98165))

(assert (= (and d!26167 (not c!16662)) b!98166))

(assert (= (and b!98166 c!16663) b!98167))

(assert (= (and b!98166 (not c!16663)) b!98168))

(declare-fun m!107275 () Bool)

(assert (=> b!98167 m!107275))

(assert (=> b!97839 d!26167))

(declare-fun b!98169 () Bool)

(declare-fun e!63990 () Bool)

(declare-fun call!10001 () Bool)

(assert (=> b!98169 (= e!63990 call!10001)))

(declare-fun b!98170 () Bool)

(assert (=> b!98170 (= e!63990 call!10001)))

(declare-fun b!98171 () Bool)

(declare-fun e!63989 () Bool)

(declare-fun e!63991 () Bool)

(assert (=> b!98171 (= e!63989 e!63991)))

(declare-fun res!49395 () Bool)

(assert (=> b!98171 (=> (not res!49395) (not e!63991))))

(declare-fun e!63988 () Bool)

(assert (=> b!98171 (= res!49395 (not e!63988))))

(declare-fun res!49396 () Bool)

(assert (=> b!98171 (=> (not res!49396) (not e!63988))))

(assert (=> b!98171 (= res!49396 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!9998 () Bool)

(declare-fun c!16664 () Bool)

(assert (=> bm!9998 (= call!10001 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16664 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000) Nil!1562) Nil!1562)))))

(declare-fun b!98173 () Bool)

(assert (=> b!98173 (= e!63991 e!63990)))

(assert (=> b!98173 (= c!16664 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26169 () Bool)

(declare-fun res!49397 () Bool)

(assert (=> d!26169 (=> res!49397 e!63989)))

(assert (=> d!26169 (= res!49397 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26169 (= (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 Nil!1562) e!63989)))

(declare-fun b!98172 () Bool)

(assert (=> b!98172 (= e!63988 (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26169 (not res!49397)) b!98171))

(assert (= (and b!98171 res!49396) b!98172))

(assert (= (and b!98171 res!49395) b!98173))

(assert (= (and b!98173 c!16664) b!98169))

(assert (= (and b!98173 (not c!16664)) b!98170))

(assert (= (or b!98169 b!98170) bm!9998))

(declare-fun m!107277 () Bool)

(assert (=> b!98171 m!107277))

(assert (=> b!98171 m!107277))

(declare-fun m!107279 () Bool)

(assert (=> b!98171 m!107279))

(assert (=> bm!9998 m!107277))

(declare-fun m!107281 () Bool)

(assert (=> bm!9998 m!107281))

(assert (=> b!98173 m!107277))

(assert (=> b!98173 m!107277))

(assert (=> b!98173 m!107279))

(assert (=> b!98172 m!107277))

(assert (=> b!98172 m!107277))

(declare-fun m!107283 () Bool)

(assert (=> b!98172 m!107283))

(assert (=> b!97747 d!26169))

(declare-fun d!26171 () Bool)

(declare-fun res!49398 () Bool)

(declare-fun e!63992 () Bool)

(assert (=> d!26171 (=> (not res!49398) (not e!63992))))

(assert (=> d!26171 (= res!49398 (simpleValid!68 (_2!1160 lt!49157)))))

(assert (=> d!26171 (= (valid!392 (_2!1160 lt!49157)) e!63992)))

(declare-fun b!98174 () Bool)

(declare-fun res!49399 () Bool)

(assert (=> b!98174 (=> (not res!49399) (not e!63992))))

(assert (=> b!98174 (= res!49399 (= (arrayCountValidKeys!0 (_keys!4170 (_2!1160 lt!49157)) #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!49157)))) (_size!474 (_2!1160 lt!49157))))))

(declare-fun b!98175 () Bool)

(declare-fun res!49400 () Bool)

(assert (=> b!98175 (=> (not res!49400) (not e!63992))))

(assert (=> b!98175 (= res!49400 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 (_2!1160 lt!49157)) (mask!6577 (_2!1160 lt!49157))))))

(declare-fun b!98176 () Bool)

(assert (=> b!98176 (= e!63992 (arrayNoDuplicates!0 (_keys!4170 (_2!1160 lt!49157)) #b00000000000000000000000000000000 Nil!1562))))

(assert (= (and d!26171 res!49398) b!98174))

(assert (= (and b!98174 res!49399) b!98175))

(assert (= (and b!98175 res!49400) b!98176))

(declare-fun m!107285 () Bool)

(assert (=> d!26171 m!107285))

(declare-fun m!107287 () Bool)

(assert (=> b!98174 m!107287))

(declare-fun m!107289 () Bool)

(assert (=> b!98175 m!107289))

(declare-fun m!107291 () Bool)

(assert (=> b!98176 m!107291))

(assert (=> b!98007 d!26171))

(declare-fun d!26173 () Bool)

(assert (=> d!26173 (= (get!1292 (getValueByKey!151 (toList!765 lt!48889) lt!48886)) (v!2807 (getValueByKey!151 (toList!765 lt!48889) lt!48886)))))

(assert (=> d!26065 d!26173))

(declare-fun b!98177 () Bool)

(declare-fun e!63993 () Option!157)

(assert (=> b!98177 (= e!63993 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48889)))))))

(declare-fun b!98180 () Bool)

(declare-fun e!63994 () Option!157)

(assert (=> b!98180 (= e!63994 None!155)))

(declare-fun b!98178 () Bool)

(assert (=> b!98178 (= e!63993 e!63994)))

(declare-fun c!16666 () Bool)

(assert (=> b!98178 (= c!16666 (and ((_ is Cons!1560) (toList!765 lt!48889)) (not (= (_1!1161 (h!2154 (toList!765 lt!48889))) lt!48886))))))

(declare-fun d!26175 () Bool)

(declare-fun c!16665 () Bool)

(assert (=> d!26175 (= c!16665 (and ((_ is Cons!1560) (toList!765 lt!48889)) (= (_1!1161 (h!2154 (toList!765 lt!48889))) lt!48886)))))

(assert (=> d!26175 (= (getValueByKey!151 (toList!765 lt!48889) lt!48886) e!63993)))

(declare-fun b!98179 () Bool)

(assert (=> b!98179 (= e!63994 (getValueByKey!151 (t!5510 (toList!765 lt!48889)) lt!48886))))

(assert (= (and d!26175 c!16665) b!98177))

(assert (= (and d!26175 (not c!16665)) b!98178))

(assert (= (and b!98178 c!16666) b!98179))

(assert (= (and b!98178 (not c!16666)) b!98180))

(declare-fun m!107293 () Bool)

(assert (=> b!98179 m!107293))

(assert (=> d!26065 d!26175))

(declare-fun d!26177 () Bool)

(assert (=> d!26177 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(declare-fun lt!49264 () Unit!2917)

(assert (=> d!26177 (= lt!49264 (choose!600 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(declare-fun e!63995 () Bool)

(assert (=> d!26177 e!63995))

(declare-fun res!49401 () Bool)

(assert (=> d!26177 (=> (not res!49401) (not e!63995))))

(assert (=> d!26177 (= res!49401 (isStrictlySorted!291 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26177 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888) lt!49264)))

(declare-fun b!98181 () Bool)

(assert (=> b!98181 (= e!63995 (containsKey!154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))

(assert (= (and d!26177 res!49401) b!98181))

(assert (=> d!26177 m!106929))

(assert (=> d!26177 m!106929))

(assert (=> d!26177 m!106931))

(declare-fun m!107295 () Bool)

(assert (=> d!26177 m!107295))

(declare-fun m!107297 () Bool)

(assert (=> d!26177 m!107297))

(assert (=> b!98181 m!106925))

(assert (=> b!97952 d!26177))

(declare-fun d!26179 () Bool)

(assert (=> d!26179 (= (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888)) (not (isEmpty!362 (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888))))))

(declare-fun bs!4050 () Bool)

(assert (= bs!4050 d!26179))

(assert (=> bs!4050 m!106929))

(declare-fun m!107299 () Bool)

(assert (=> bs!4050 m!107299))

(assert (=> b!97952 d!26179))

(declare-fun e!63996 () Option!157)

(declare-fun b!98182 () Bool)

(assert (=> b!98182 (= e!63996 (Some!156 (_2!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun b!98185 () Bool)

(declare-fun e!63997 () Option!157)

(assert (=> b!98185 (= e!63997 None!155)))

(declare-fun b!98183 () Bool)

(assert (=> b!98183 (= e!63996 e!63997)))

(declare-fun c!16668 () Bool)

(assert (=> b!98183 (= c!16668 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (not (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48888))))))

(declare-fun c!16667 () Bool)

(declare-fun d!26181 () Bool)

(assert (=> d!26181 (= c!16667 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48888)))))

(assert (=> d!26181 (= (getValueByKey!151 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888) e!63996)))

(declare-fun b!98184 () Bool)

(assert (=> b!98184 (= e!63997 (getValueByKey!151 (t!5510 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!48888))))

(assert (= (and d!26181 c!16667) b!98182))

(assert (= (and d!26181 (not c!16667)) b!98183))

(assert (= (and b!98183 c!16668) b!98184))

(assert (= (and b!98183 (not c!16668)) b!98185))

(declare-fun m!107301 () Bool)

(assert (=> b!98184 m!107301))

(assert (=> b!97952 d!26181))

(declare-fun d!26183 () Bool)

(assert (=> d!26183 (= (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!362 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4051 () Bool)

(assert (= bs!4051 d!26183))

(assert (=> bs!4051 m!106729))

(declare-fun m!107303 () Bool)

(assert (=> bs!4051 m!107303))

(assert (=> b!97842 d!26183))

(assert (=> b!97842 d!26135))

(declare-fun d!26185 () Bool)

(declare-fun lt!49267 () Bool)

(declare-fun content!103 (List!1564) (InoxSet tuple2!2300))

(assert (=> d!26185 (= lt!49267 (select (content!103 (toList!765 lt!48973)) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!64002 () Bool)

(assert (=> d!26185 (= lt!49267 e!64002)))

(declare-fun res!49406 () Bool)

(assert (=> d!26185 (=> (not res!49406) (not e!64002))))

(assert (=> d!26185 (= res!49406 ((_ is Cons!1560) (toList!765 lt!48973)))))

(assert (=> d!26185 (= (contains!791 (toList!765 lt!48973) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49267)))

(declare-fun b!98190 () Bool)

(declare-fun e!64003 () Bool)

(assert (=> b!98190 (= e!64002 e!64003)))

(declare-fun res!49407 () Bool)

(assert (=> b!98190 (=> res!49407 e!64003)))

(assert (=> b!98190 (= res!49407 (= (h!2154 (toList!765 lt!48973)) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98191 () Bool)

(assert (=> b!98191 (= e!64003 (contains!791 (t!5510 (toList!765 lt!48973)) (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26185 res!49406) b!98190))

(assert (= (and b!98190 (not res!49407)) b!98191))

(declare-fun m!107305 () Bool)

(assert (=> d!26185 m!107305))

(declare-fun m!107307 () Bool)

(assert (=> d!26185 m!107307))

(declare-fun m!107309 () Bool)

(assert (=> b!98191 m!107309))

(assert (=> b!97788 d!26185))

(declare-fun d!26187 () Bool)

(declare-fun e!64004 () Bool)

(assert (=> d!26187 e!64004))

(declare-fun res!49408 () Bool)

(assert (=> d!26187 (=> res!49408 e!64004)))

(declare-fun lt!49268 () Bool)

(assert (=> d!26187 (= res!49408 (not lt!49268))))

(declare-fun lt!49271 () Bool)

(assert (=> d!26187 (= lt!49268 lt!49271)))

(declare-fun lt!49269 () Unit!2917)

(declare-fun e!64005 () Unit!2917)

(assert (=> d!26187 (= lt!49269 e!64005)))

(declare-fun c!16669 () Bool)

(assert (=> d!26187 (= c!16669 lt!49271)))

(assert (=> d!26187 (= lt!49271 (containsKey!154 (toList!765 lt!48913) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26187 (= (contains!788 lt!48913 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49268)))

(declare-fun b!98192 () Bool)

(declare-fun lt!49270 () Unit!2917)

(assert (=> b!98192 (= e!64005 lt!49270)))

(assert (=> b!98192 (= lt!49270 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48913) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98192 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98193 () Bool)

(declare-fun Unit!2948 () Unit!2917)

(assert (=> b!98193 (= e!64005 Unit!2948)))

(declare-fun b!98194 () Bool)

(assert (=> b!98194 (= e!64004 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26187 c!16669) b!98192))

(assert (= (and d!26187 (not c!16669)) b!98193))

(assert (= (and d!26187 (not res!49408)) b!98194))

(declare-fun m!107311 () Bool)

(assert (=> d!26187 m!107311))

(declare-fun m!107313 () Bool)

(assert (=> b!98192 m!107313))

(assert (=> b!98192 m!107259))

(assert (=> b!98192 m!107259))

(declare-fun m!107315 () Bool)

(assert (=> b!98192 m!107315))

(assert (=> b!98194 m!107259))

(assert (=> b!98194 m!107259))

(assert (=> b!98194 m!107315))

(assert (=> bm!9937 d!26187))

(declare-fun d!26189 () Bool)

(declare-fun res!49409 () Bool)

(declare-fun e!64006 () Bool)

(assert (=> d!26189 (=> res!49409 e!64006)))

(assert (=> d!26189 (= res!49409 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26189 (= (containsKey!154 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000) e!64006)))

(declare-fun b!98195 () Bool)

(declare-fun e!64007 () Bool)

(assert (=> b!98195 (= e!64006 e!64007)))

(declare-fun res!49410 () Bool)

(assert (=> b!98195 (=> (not res!49410) (not e!64007))))

(assert (=> b!98195 (= res!49410 (and (or (not ((_ is Cons!1560) (toList!765 lt!48882))) (bvsle (_1!1161 (h!2154 (toList!765 lt!48882))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1560) (toList!765 lt!48882)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48882))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98196 () Bool)

(assert (=> b!98196 (= e!64007 (containsKey!154 (t!5510 (toList!765 lt!48882)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26189 (not res!49409)) b!98195))

(assert (= (and b!98195 res!49410) b!98196))

(declare-fun m!107317 () Bool)

(assert (=> b!98196 m!107317))

(assert (=> d!26091 d!26189))

(declare-fun d!26191 () Bool)

(assert (=> d!26191 (= (map!1253 (_2!1160 lt!49157)) (getCurrentListMap!455 (_keys!4170 (_2!1160 lt!49157)) (_values!2463 (_2!1160 lt!49157)) (mask!6577 (_2!1160 lt!49157)) (extraKeys!2301 (_2!1160 lt!49157)) (zeroValue!2363 (_2!1160 lt!49157)) (minValue!2363 (_2!1160 lt!49157)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!49157))))))

(declare-fun bs!4052 () Bool)

(assert (= bs!4052 d!26191))

(declare-fun m!107319 () Bool)

(assert (=> bs!4052 m!107319))

(assert (=> b!98004 d!26191))

(declare-fun d!26193 () Bool)

(declare-fun e!64008 () Bool)

(assert (=> d!26193 e!64008))

(declare-fun res!49412 () Bool)

(assert (=> d!26193 (=> (not res!49412) (not e!64008))))

(declare-fun lt!49272 () ListLongMap!1499)

(assert (=> d!26193 (= res!49412 (contains!788 lt!49272 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49273 () List!1564)

(assert (=> d!26193 (= lt!49272 (ListLongMap!1500 lt!49273))))

(declare-fun lt!49275 () Unit!2917)

(declare-fun lt!49274 () Unit!2917)

(assert (=> d!26193 (= lt!49275 lt!49274)))

(assert (=> d!26193 (= (getValueByKey!151 lt!49273 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26193 (= lt!49274 (lemmaContainsTupThenGetReturnValue!67 lt!49273 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26193 (= lt!49273 (insertStrictlySorted!70 (toList!765 (map!1253 newMap!16)) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26193 (= (+!130 (map!1253 newMap!16) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49272)))

(declare-fun b!98197 () Bool)

(declare-fun res!49411 () Bool)

(assert (=> b!98197 (=> (not res!49411) (not e!64008))))

(assert (=> b!98197 (= res!49411 (= (getValueByKey!151 (toList!765 lt!49272) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98198 () Bool)

(assert (=> b!98198 (= e!64008 (contains!791 (toList!765 lt!49272) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26193 res!49412) b!98197))

(assert (= (and b!98197 res!49411) b!98198))

(declare-fun m!107321 () Bool)

(assert (=> d!26193 m!107321))

(declare-fun m!107323 () Bool)

(assert (=> d!26193 m!107323))

(declare-fun m!107325 () Bool)

(assert (=> d!26193 m!107325))

(declare-fun m!107327 () Bool)

(assert (=> d!26193 m!107327))

(declare-fun m!107329 () Bool)

(assert (=> b!98197 m!107329))

(declare-fun m!107331 () Bool)

(assert (=> b!98198 m!107331))

(assert (=> b!98004 d!26193))

(assert (=> b!98004 d!25957))

(assert (=> d!25981 d!26099))

(declare-fun lt!49276 () Bool)

(declare-fun d!26195 () Bool)

(assert (=> d!26195 (= lt!49276 (select (content!103 (toList!765 lt!49087)) (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun e!64009 () Bool)

(assert (=> d!26195 (= lt!49276 e!64009)))

(declare-fun res!49413 () Bool)

(assert (=> d!26195 (=> (not res!49413) (not e!64009))))

(assert (=> d!26195 (= res!49413 ((_ is Cons!1560) (toList!765 lt!49087)))))

(assert (=> d!26195 (= (contains!791 (toList!765 lt!49087) (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49276)))

(declare-fun b!98199 () Bool)

(declare-fun e!64010 () Bool)

(assert (=> b!98199 (= e!64009 e!64010)))

(declare-fun res!49414 () Bool)

(assert (=> b!98199 (=> res!49414 e!64010)))

(assert (=> b!98199 (= res!49414 (= (h!2154 (toList!765 lt!49087)) (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98200 () Bool)

(assert (=> b!98200 (= e!64010 (contains!791 (t!5510 (toList!765 lt!49087)) (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26195 res!49413) b!98199))

(assert (= (and b!98199 (not res!49414)) b!98200))

(declare-fun m!107333 () Bool)

(assert (=> d!26195 m!107333))

(declare-fun m!107335 () Bool)

(assert (=> d!26195 m!107335))

(declare-fun m!107337 () Bool)

(assert (=> b!98200 m!107337))

(assert (=> b!97962 d!26195))

(declare-fun d!26197 () Bool)

(assert (=> d!26197 (= (content!102 Nil!1562) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26005 d!26197))

(declare-fun d!26199 () Bool)

(declare-fun e!64011 () Bool)

(assert (=> d!26199 e!64011))

(declare-fun res!49416 () Bool)

(assert (=> d!26199 (=> (not res!49416) (not e!64011))))

(declare-fun lt!49277 () ListLongMap!1499)

(assert (=> d!26199 (= res!49416 (contains!788 lt!49277 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49278 () List!1564)

(assert (=> d!26199 (= lt!49277 (ListLongMap!1500 lt!49278))))

(declare-fun lt!49280 () Unit!2917)

(declare-fun lt!49279 () Unit!2917)

(assert (=> d!26199 (= lt!49280 lt!49279)))

(assert (=> d!26199 (= (getValueByKey!151 lt!49278 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= lt!49279 (lemmaContainsTupThenGetReturnValue!67 lt!49278 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= lt!49278 (insertStrictlySorted!70 (toList!765 call!9952) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26199 (= (+!130 call!9952 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49277)))

(declare-fun b!98201 () Bool)

(declare-fun res!49415 () Bool)

(assert (=> b!98201 (=> (not res!49415) (not e!64011))))

(assert (=> b!98201 (= res!49415 (= (getValueByKey!151 (toList!765 lt!49277) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98202 () Bool)

(assert (=> b!98202 (= e!64011 (contains!791 (toList!765 lt!49277) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26199 res!49416) b!98201))

(assert (= (and b!98201 res!49415) b!98202))

(declare-fun m!107339 () Bool)

(assert (=> d!26199 m!107339))

(declare-fun m!107341 () Bool)

(assert (=> d!26199 m!107341))

(declare-fun m!107343 () Bool)

(assert (=> d!26199 m!107343))

(declare-fun m!107345 () Bool)

(assert (=> d!26199 m!107345))

(declare-fun m!107347 () Bool)

(assert (=> b!98201 m!107347))

(declare-fun m!107349 () Bool)

(assert (=> b!98202 m!107349))

(assert (=> b!97751 d!26199))

(declare-fun d!26201 () Bool)

(declare-fun e!64012 () Bool)

(assert (=> d!26201 e!64012))

(declare-fun res!49417 () Bool)

(assert (=> d!26201 (=> res!49417 e!64012)))

(declare-fun lt!49281 () Bool)

(assert (=> d!26201 (= res!49417 (not lt!49281))))

(declare-fun lt!49284 () Bool)

(assert (=> d!26201 (= lt!49281 lt!49284)))

(declare-fun lt!49282 () Unit!2917)

(declare-fun e!64013 () Unit!2917)

(assert (=> d!26201 (= lt!49282 e!64013)))

(declare-fun c!16670 () Bool)

(assert (=> d!26201 (= c!16670 lt!49284)))

(assert (=> d!26201 (= lt!49284 (containsKey!154 (toList!765 lt!49066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26201 (= (contains!788 lt!49066 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49281)))

(declare-fun b!98203 () Bool)

(declare-fun lt!49283 () Unit!2917)

(assert (=> b!98203 (= e!64013 lt!49283)))

(assert (=> b!98203 (= lt!49283 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98203 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98204 () Bool)

(declare-fun Unit!2949 () Unit!2917)

(assert (=> b!98204 (= e!64013 Unit!2949)))

(declare-fun b!98205 () Bool)

(assert (=> b!98205 (= e!64012 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26201 c!16670) b!98203))

(assert (= (and d!26201 (not c!16670)) b!98204))

(assert (= (and d!26201 (not res!49417)) b!98205))

(declare-fun m!107351 () Bool)

(assert (=> d!26201 m!107351))

(declare-fun m!107353 () Bool)

(assert (=> b!98203 m!107353))

(declare-fun m!107355 () Bool)

(assert (=> b!98203 m!107355))

(assert (=> b!98203 m!107355))

(declare-fun m!107357 () Bool)

(assert (=> b!98203 m!107357))

(assert (=> b!98205 m!107355))

(assert (=> b!98205 m!107355))

(assert (=> b!98205 m!107357))

(assert (=> b!97945 d!26201))

(declare-fun lt!49285 () Bool)

(declare-fun d!26203 () Bool)

(assert (=> d!26203 (= lt!49285 (select (content!103 (toList!765 lt!49029)) (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64014 () Bool)

(assert (=> d!26203 (= lt!49285 e!64014)))

(declare-fun res!49418 () Bool)

(assert (=> d!26203 (=> (not res!49418) (not e!64014))))

(assert (=> d!26203 (= res!49418 ((_ is Cons!1560) (toList!765 lt!49029)))))

(assert (=> d!26203 (= (contains!791 (toList!765 lt!49029) (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49285)))

(declare-fun b!98206 () Bool)

(declare-fun e!64015 () Bool)

(assert (=> b!98206 (= e!64014 e!64015)))

(declare-fun res!49419 () Bool)

(assert (=> b!98206 (=> res!49419 e!64015)))

(assert (=> b!98206 (= res!49419 (= (h!2154 (toList!765 lt!49029)) (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98207 () Bool)

(assert (=> b!98207 (= e!64015 (contains!791 (t!5510 (toList!765 lt!49029)) (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26203 res!49418) b!98206))

(assert (= (and b!98206 (not res!49419)) b!98207))

(declare-fun m!107359 () Bool)

(assert (=> d!26203 m!107359))

(declare-fun m!107361 () Bool)

(assert (=> d!26203 m!107361))

(declare-fun m!107363 () Bool)

(assert (=> b!98207 m!107363))

(assert (=> b!97896 d!26203))

(assert (=> b!97908 d!26157))

(declare-fun d!26205 () Bool)

(declare-fun res!49420 () Bool)

(declare-fun e!64016 () Bool)

(assert (=> d!26205 (=> res!49420 e!64016)))

(assert (=> d!26205 (= res!49420 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48888)))))

(assert (=> d!26205 (= (containsKey!154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48888) e!64016)))

(declare-fun b!98208 () Bool)

(declare-fun e!64017 () Bool)

(assert (=> b!98208 (= e!64016 e!64017)))

(declare-fun res!49421 () Bool)

(assert (=> b!98208 (=> (not res!49421) (not e!64017))))

(assert (=> b!98208 (= res!49421 (and (or (not ((_ is Cons!1560) (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) (bvsle (_1!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48888)) ((_ is Cons!1560) (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (bvslt (_1!1161 (h!2154 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48888)))))

(declare-fun b!98209 () Bool)

(assert (=> b!98209 (= e!64017 (containsKey!154 (t!5510 (toList!765 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!48888))))

(assert (= (and d!26205 (not res!49420)) b!98208))

(assert (= (and b!98208 res!49421) b!98209))

(declare-fun m!107365 () Bool)

(assert (=> b!98209 m!107365))

(assert (=> d!26055 d!26205))

(assert (=> b!97870 d!26157))

(declare-fun d!26207 () Bool)

(declare-fun e!64018 () Bool)

(assert (=> d!26207 e!64018))

(declare-fun res!49422 () Bool)

(assert (=> d!26207 (=> res!49422 e!64018)))

(declare-fun lt!49286 () Bool)

(assert (=> d!26207 (= res!49422 (not lt!49286))))

(declare-fun lt!49289 () Bool)

(assert (=> d!26207 (= lt!49286 lt!49289)))

(declare-fun lt!49287 () Unit!2917)

(declare-fun e!64019 () Unit!2917)

(assert (=> d!26207 (= lt!49287 e!64019)))

(declare-fun c!16671 () Bool)

(assert (=> d!26207 (= c!16671 lt!49289)))

(assert (=> d!26207 (= lt!49289 (containsKey!154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))

(assert (=> d!26207 (= (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))) lt!49286)))

(declare-fun b!98210 () Bool)

(declare-fun lt!49288 () Unit!2917)

(assert (=> b!98210 (= e!64019 lt!49288)))

(assert (=> b!98210 (= lt!49288 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))

(assert (=> b!98210 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))

(declare-fun b!98211 () Bool)

(declare-fun Unit!2950 () Unit!2917)

(assert (=> b!98211 (= e!64019 Unit!2950)))

(declare-fun b!98212 () Bool)

(assert (=> b!98212 (= e!64018 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (= (and d!26207 c!16671) b!98210))

(assert (= (and d!26207 (not c!16671)) b!98211))

(assert (= (and d!26207 (not res!49422)) b!98212))

(assert (=> d!26207 m!106453))

(declare-fun m!107367 () Bool)

(assert (=> d!26207 m!107367))

(assert (=> b!98210 m!106453))

(declare-fun m!107369 () Bool)

(assert (=> b!98210 m!107369))

(assert (=> b!98210 m!106453))

(declare-fun m!107371 () Bool)

(assert (=> b!98210 m!107371))

(assert (=> b!98210 m!107371))

(declare-fun m!107373 () Bool)

(assert (=> b!98210 m!107373))

(assert (=> b!98212 m!106453))

(assert (=> b!98212 m!107371))

(assert (=> b!98212 m!107371))

(assert (=> b!98212 m!107373))

(assert (=> b!97771 d!26207))

(declare-fun b!98213 () Bool)

(declare-fun e!64022 () Bool)

(declare-fun call!10008 () Bool)

(assert (=> b!98213 (= e!64022 (not call!10008))))

(declare-fun b!98214 () Bool)

(declare-fun e!64027 () Bool)

(declare-fun e!64024 () Bool)

(assert (=> b!98214 (= e!64027 e!64024)))

(declare-fun res!49428 () Bool)

(assert (=> b!98214 (=> (not res!49428) (not e!64024))))

(declare-fun lt!49295 () ListLongMap!1499)

(assert (=> b!98214 (= res!49428 (contains!788 lt!49295 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98214 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98215 () Bool)

(assert (=> b!98215 (= e!64024 (= (apply!92 lt!49295 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 lt!48816) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98215 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 lt!48816)))))

(assert (=> b!98215 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!9999 () Bool)

(declare-fun call!10002 () Bool)

(assert (=> bm!9999 (= call!10002 (contains!788 lt!49295 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98216 () Bool)

(declare-fun e!64029 () ListLongMap!1499)

(declare-fun call!10007 () ListLongMap!1499)

(assert (=> b!98216 (= e!64029 (+!130 call!10007 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98217 () Bool)

(declare-fun e!64021 () Unit!2917)

(declare-fun lt!49310 () Unit!2917)

(assert (=> b!98217 (= e!64021 lt!49310)))

(declare-fun lt!49307 () ListLongMap!1499)

(assert (=> b!98217 (= lt!49307 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49303 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49303 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49301 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49301 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49297 () Unit!2917)

(assert (=> b!98217 (= lt!49297 (addStillContains!68 lt!49307 lt!49303 (zeroValue!2363 newMap!16) lt!49301))))

(assert (=> b!98217 (contains!788 (+!130 lt!49307 (tuple2!2301 lt!49303 (zeroValue!2363 newMap!16))) lt!49301)))

(declare-fun lt!49306 () Unit!2917)

(assert (=> b!98217 (= lt!49306 lt!49297)))

(declare-fun lt!49296 () ListLongMap!1499)

(assert (=> b!98217 (= lt!49296 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49308 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49308 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49298 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49298 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49304 () Unit!2917)

(assert (=> b!98217 (= lt!49304 (addApplyDifferent!68 lt!49296 lt!49308 (minValue!2363 newMap!16) lt!49298))))

(assert (=> b!98217 (= (apply!92 (+!130 lt!49296 (tuple2!2301 lt!49308 (minValue!2363 newMap!16))) lt!49298) (apply!92 lt!49296 lt!49298))))

(declare-fun lt!49300 () Unit!2917)

(assert (=> b!98217 (= lt!49300 lt!49304)))

(declare-fun lt!49311 () ListLongMap!1499)

(assert (=> b!98217 (= lt!49311 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49294 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49294 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49305 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49305 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49293 () Unit!2917)

(assert (=> b!98217 (= lt!49293 (addApplyDifferent!68 lt!49311 lt!49294 (zeroValue!2363 newMap!16) lt!49305))))

(assert (=> b!98217 (= (apply!92 (+!130 lt!49311 (tuple2!2301 lt!49294 (zeroValue!2363 newMap!16))) lt!49305) (apply!92 lt!49311 lt!49305))))

(declare-fun lt!49291 () Unit!2917)

(assert (=> b!98217 (= lt!49291 lt!49293)))

(declare-fun lt!49302 () ListLongMap!1499)

(assert (=> b!98217 (= lt!49302 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49292 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49292 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49299 () (_ BitVec 64))

(assert (=> b!98217 (= lt!49299 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98217 (= lt!49310 (addApplyDifferent!68 lt!49302 lt!49292 (minValue!2363 newMap!16) lt!49299))))

(assert (=> b!98217 (= (apply!92 (+!130 lt!49302 (tuple2!2301 lt!49292 (minValue!2363 newMap!16))) lt!49299) (apply!92 lt!49302 lt!49299))))

(declare-fun b!98218 () Bool)

(declare-fun c!16672 () Bool)

(assert (=> b!98218 (= c!16672 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64020 () ListLongMap!1499)

(declare-fun e!64025 () ListLongMap!1499)

(assert (=> b!98218 (= e!64020 e!64025)))

(declare-fun b!98219 () Bool)

(declare-fun e!64031 () Bool)

(assert (=> b!98219 (= e!64031 (= (apply!92 lt!49295 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98220 () Bool)

(declare-fun e!64023 () Bool)

(assert (=> b!98220 (= e!64023 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98221 () Bool)

(declare-fun res!49429 () Bool)

(declare-fun e!64030 () Bool)

(assert (=> b!98221 (=> (not res!49429) (not e!64030))))

(declare-fun e!64032 () Bool)

(assert (=> b!98221 (= res!49429 e!64032)))

(declare-fun c!16675 () Bool)

(assert (=> b!98221 (= c!16675 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98222 () Bool)

(declare-fun call!10006 () ListLongMap!1499)

(assert (=> b!98222 (= e!64020 call!10006)))

(declare-fun bm!10000 () Bool)

(assert (=> bm!10000 (= call!10006 call!10007)))

(declare-fun b!98223 () Bool)

(assert (=> b!98223 (= e!64032 (not call!10002))))

(declare-fun b!98224 () Bool)

(declare-fun e!64028 () Bool)

(assert (=> b!98224 (= e!64028 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10001 () Bool)

(declare-fun call!10004 () ListLongMap!1499)

(declare-fun call!10003 () ListLongMap!1499)

(assert (=> bm!10001 (= call!10004 call!10003)))

(declare-fun bm!10002 () Bool)

(assert (=> bm!10002 (= call!10008 (contains!788 lt!49295 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98225 () Bool)

(assert (=> b!98225 (= e!64030 e!64022)))

(declare-fun c!16674 () Bool)

(assert (=> b!98225 (= c!16674 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98226 () Bool)

(assert (=> b!98226 (= e!64032 e!64031)))

(declare-fun res!49430 () Bool)

(assert (=> b!98226 (= res!49430 call!10002)))

(assert (=> b!98226 (=> (not res!49430) (not e!64031))))

(declare-fun b!98227 () Bool)

(declare-fun e!64026 () Bool)

(assert (=> b!98227 (= e!64022 e!64026)))

(declare-fun res!49427 () Bool)

(assert (=> b!98227 (= res!49427 call!10008)))

(assert (=> b!98227 (=> (not res!49427) (not e!64026))))

(declare-fun b!98228 () Bool)

(declare-fun res!49423 () Bool)

(assert (=> b!98228 (=> (not res!49423) (not e!64030))))

(assert (=> b!98228 (= res!49423 e!64027)))

(declare-fun res!49424 () Bool)

(assert (=> b!98228 (=> res!49424 e!64027)))

(assert (=> b!98228 (= res!49424 (not e!64028))))

(declare-fun res!49426 () Bool)

(assert (=> b!98228 (=> (not res!49426) (not e!64028))))

(assert (=> b!98228 (= res!49426 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10003 () Bool)

(declare-fun call!10005 () ListLongMap!1499)

(assert (=> bm!10003 (= call!10005 call!10004)))

(declare-fun b!98229 () Bool)

(assert (=> b!98229 (= e!64026 (= (apply!92 lt!49295 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!98230 () Bool)

(assert (=> b!98230 (= e!64029 e!64020)))

(declare-fun c!16673 () Bool)

(assert (=> b!98230 (= c!16673 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10004 () Bool)

(assert (=> bm!10004 (= call!10003 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98231 () Bool)

(declare-fun Unit!2951 () Unit!2917)

(assert (=> b!98231 (= e!64021 Unit!2951)))

(declare-fun b!98232 () Bool)

(assert (=> b!98232 (= e!64025 call!10005)))

(declare-fun b!98233 () Bool)

(assert (=> b!98233 (= e!64025 call!10006)))

(declare-fun bm!10005 () Bool)

(declare-fun c!16677 () Bool)

(assert (=> bm!10005 (= call!10007 (+!130 (ite c!16677 call!10003 (ite c!16673 call!10004 call!10005)) (ite (or c!16677 c!16673) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26209 () Bool)

(assert (=> d!26209 e!64030))

(declare-fun res!49431 () Bool)

(assert (=> d!26209 (=> (not res!49431) (not e!64030))))

(assert (=> d!26209 (= res!49431 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!49309 () ListLongMap!1499)

(assert (=> d!26209 (= lt!49295 lt!49309)))

(declare-fun lt!49290 () Unit!2917)

(assert (=> d!26209 (= lt!49290 e!64021)))

(declare-fun c!16676 () Bool)

(assert (=> d!26209 (= c!16676 e!64023)))

(declare-fun res!49425 () Bool)

(assert (=> d!26209 (=> (not res!49425) (not e!64023))))

(assert (=> d!26209 (= res!49425 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26209 (= lt!49309 e!64029)))

(assert (=> d!26209 (= c!16677 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26209 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26209 (= (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49295)))

(assert (= (and d!26209 c!16677) b!98216))

(assert (= (and d!26209 (not c!16677)) b!98230))

(assert (= (and b!98230 c!16673) b!98222))

(assert (= (and b!98230 (not c!16673)) b!98218))

(assert (= (and b!98218 c!16672) b!98233))

(assert (= (and b!98218 (not c!16672)) b!98232))

(assert (= (or b!98233 b!98232) bm!10003))

(assert (= (or b!98222 bm!10003) bm!10001))

(assert (= (or b!98222 b!98233) bm!10000))

(assert (= (or b!98216 bm!10001) bm!10004))

(assert (= (or b!98216 bm!10000) bm!10005))

(assert (= (and d!26209 res!49425) b!98220))

(assert (= (and d!26209 c!16676) b!98217))

(assert (= (and d!26209 (not c!16676)) b!98231))

(assert (= (and d!26209 res!49431) b!98228))

(assert (= (and b!98228 res!49426) b!98224))

(assert (= (and b!98228 (not res!49424)) b!98214))

(assert (= (and b!98214 res!49428) b!98215))

(assert (= (and b!98228 res!49423) b!98221))

(assert (= (and b!98221 c!16675) b!98226))

(assert (= (and b!98221 (not c!16675)) b!98223))

(assert (= (and b!98226 res!49430) b!98219))

(assert (= (or b!98226 b!98223) bm!9999))

(assert (= (and b!98221 res!49429) b!98225))

(assert (= (and b!98225 c!16674) b!98227))

(assert (= (and b!98225 (not c!16674)) b!98213))

(assert (= (and b!98227 res!49427) b!98229))

(assert (= (or b!98227 b!98213) bm!10002))

(declare-fun b_lambda!4361 () Bool)

(assert (=> (not b_lambda!4361) (not b!98215)))

(assert (=> b!98215 t!5523))

(declare-fun b_and!6021 () Bool)

(assert (= b_and!6017 (and (=> t!5523 result!3271) b_and!6021)))

(assert (=> b!98215 t!5525))

(declare-fun b_and!6023 () Bool)

(assert (= b_and!6019 (and (=> t!5525 result!3273) b_and!6023)))

(declare-fun m!107375 () Bool)

(assert (=> b!98219 m!107375))

(declare-fun m!107377 () Bool)

(assert (=> bm!10005 m!107377))

(declare-fun m!107379 () Bool)

(assert (=> b!98216 m!107379))

(assert (=> b!98214 m!106551))

(assert (=> b!98214 m!106551))

(declare-fun m!107381 () Bool)

(assert (=> b!98214 m!107381))

(assert (=> b!98215 m!106551))

(declare-fun m!107383 () Bool)

(assert (=> b!98215 m!107383))

(assert (=> b!98215 m!106557))

(assert (=> b!98215 m!106551))

(declare-fun m!107385 () Bool)

(assert (=> b!98215 m!107385))

(assert (=> b!98215 m!107383))

(assert (=> b!98215 m!106557))

(declare-fun m!107387 () Bool)

(assert (=> b!98215 m!107387))

(declare-fun m!107389 () Bool)

(assert (=> bm!10004 m!107389))

(declare-fun m!107391 () Bool)

(assert (=> b!98217 m!107391))

(declare-fun m!107393 () Bool)

(assert (=> b!98217 m!107393))

(assert (=> b!98217 m!106551))

(declare-fun m!107395 () Bool)

(assert (=> b!98217 m!107395))

(assert (=> b!98217 m!107389))

(declare-fun m!107397 () Bool)

(assert (=> b!98217 m!107397))

(declare-fun m!107399 () Bool)

(assert (=> b!98217 m!107399))

(declare-fun m!107401 () Bool)

(assert (=> b!98217 m!107401))

(declare-fun m!107403 () Bool)

(assert (=> b!98217 m!107403))

(declare-fun m!107405 () Bool)

(assert (=> b!98217 m!107405))

(declare-fun m!107407 () Bool)

(assert (=> b!98217 m!107407))

(declare-fun m!107409 () Bool)

(assert (=> b!98217 m!107409))

(declare-fun m!107411 () Bool)

(assert (=> b!98217 m!107411))

(declare-fun m!107413 () Bool)

(assert (=> b!98217 m!107413))

(assert (=> b!98217 m!107413))

(declare-fun m!107415 () Bool)

(assert (=> b!98217 m!107415))

(assert (=> b!98217 m!107405))

(declare-fun m!107417 () Bool)

(assert (=> b!98217 m!107417))

(declare-fun m!107419 () Bool)

(assert (=> b!98217 m!107419))

(assert (=> b!98217 m!107391))

(assert (=> b!98217 m!107397))

(declare-fun m!107421 () Bool)

(assert (=> bm!10002 m!107421))

(assert (=> d!26209 m!106537))

(declare-fun m!107423 () Bool)

(assert (=> bm!9999 m!107423))

(assert (=> b!98224 m!106551))

(assert (=> b!98224 m!106551))

(assert (=> b!98224 m!106599))

(declare-fun m!107425 () Bool)

(assert (=> b!98229 m!107425))

(assert (=> b!98220 m!106551))

(assert (=> b!98220 m!106551))

(assert (=> b!98220 m!106599))

(assert (=> b!97771 d!26209))

(declare-fun d!26211 () Bool)

(assert (=> d!26211 (= (get!1290 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2800 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98025 d!26211))

(assert (=> d!26057 d!26037))

(assert (=> d!26057 d!26043))

(assert (=> d!26057 d!26049))

(declare-fun d!26213 () Bool)

(declare-fun e!64033 () Bool)

(assert (=> d!26213 e!64033))

(declare-fun res!49432 () Bool)

(assert (=> d!26213 (=> res!49432 e!64033)))

(declare-fun lt!49312 () Bool)

(assert (=> d!26213 (= res!49432 (not lt!49312))))

(declare-fun lt!49315 () Bool)

(assert (=> d!26213 (= lt!49312 lt!49315)))

(declare-fun lt!49313 () Unit!2917)

(declare-fun e!64034 () Unit!2917)

(assert (=> d!26213 (= lt!49313 e!64034)))

(declare-fun c!16678 () Bool)

(assert (=> d!26213 (= c!16678 lt!49315)))

(assert (=> d!26213 (= lt!49315 (containsKey!154 (toList!765 lt!48898) lt!48892))))

(assert (=> d!26213 (= (contains!788 lt!48898 lt!48892) lt!49312)))

(declare-fun b!98234 () Bool)

(declare-fun lt!49314 () Unit!2917)

(assert (=> b!98234 (= e!64034 lt!49314)))

(assert (=> b!98234 (= lt!49314 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48898) lt!48892))))

(assert (=> b!98234 (isDefined!103 (getValueByKey!151 (toList!765 lt!48898) lt!48892))))

(declare-fun b!98235 () Bool)

(declare-fun Unit!2952 () Unit!2917)

(assert (=> b!98235 (= e!64034 Unit!2952)))

(declare-fun b!98236 () Bool)

(assert (=> b!98236 (= e!64033 (isDefined!103 (getValueByKey!151 (toList!765 lt!48898) lt!48892)))))

(assert (= (and d!26213 c!16678) b!98234))

(assert (= (and d!26213 (not c!16678)) b!98235))

(assert (= (and d!26213 (not res!49432)) b!98236))

(declare-fun m!107427 () Bool)

(assert (=> d!26213 m!107427))

(declare-fun m!107429 () Bool)

(assert (=> b!98234 m!107429))

(assert (=> b!98234 m!106913))

(assert (=> b!98234 m!106913))

(declare-fun m!107431 () Bool)

(assert (=> b!98234 m!107431))

(assert (=> b!98236 m!106913))

(assert (=> b!98236 m!106913))

(assert (=> b!98236 m!107431))

(assert (=> d!26057 d!26213))

(declare-fun d!26215 () Bool)

(assert (=> d!26215 (= (apply!92 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48892) (apply!92 lt!48898 lt!48892))))

(assert (=> d!26215 true))

(declare-fun _$34!864 () Unit!2917)

(assert (=> d!26215 (= (choose!602 lt!48898 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48892) _$34!864)))

(declare-fun bs!4053 () Bool)

(assert (= bs!4053 d!26215))

(assert (=> bs!4053 m!106501))

(assert (=> bs!4053 m!106501))

(assert (=> bs!4053 m!106503))

(assert (=> bs!4053 m!106499))

(assert (=> d!26057 d!26215))

(declare-fun b!98237 () Bool)

(declare-fun e!64035 () Option!157)

(assert (=> b!98237 (= e!64035 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49046)))))))

(declare-fun b!98240 () Bool)

(declare-fun e!64036 () Option!157)

(assert (=> b!98240 (= e!64036 None!155)))

(declare-fun b!98238 () Bool)

(assert (=> b!98238 (= e!64035 e!64036)))

(declare-fun c!16680 () Bool)

(assert (=> b!98238 (= c!16680 (and ((_ is Cons!1560) (toList!765 lt!49046)) (not (= (_1!1161 (h!2154 (toList!765 lt!49046))) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun d!26217 () Bool)

(declare-fun c!16679 () Bool)

(assert (=> d!26217 (= c!16679 (and ((_ is Cons!1560) (toList!765 lt!49046)) (= (_1!1161 (h!2154 (toList!765 lt!49046))) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26217 (= (getValueByKey!151 (toList!765 lt!49046) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64035)))

(declare-fun b!98239 () Bool)

(assert (=> b!98239 (= e!64036 (getValueByKey!151 (t!5510 (toList!765 lt!49046)) (_1!1161 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26217 c!16679) b!98237))

(assert (= (and d!26217 (not c!16679)) b!98238))

(assert (= (and b!98238 c!16680) b!98239))

(assert (= (and b!98238 (not c!16680)) b!98240))

(declare-fun m!107433 () Bool)

(assert (=> b!98239 m!107433))

(assert (=> b!97911 d!26217))

(declare-fun b!98253 () Bool)

(declare-fun e!64044 () SeekEntryResult!247)

(assert (=> b!98253 (= e!64044 (Found!247 (index!3133 lt!48907)))))

(declare-fun d!26219 () Bool)

(declare-fun lt!49320 () SeekEntryResult!247)

(assert (=> d!26219 (and (or ((_ is Undefined!247) lt!49320) (not ((_ is Found!247) lt!49320)) (and (bvsge (index!3132 lt!49320) #b00000000000000000000000000000000) (bvslt (index!3132 lt!49320) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!49320) ((_ is Found!247) lt!49320) (not ((_ is MissingVacant!247) lt!49320)) (not (= (index!3134 lt!49320) (index!3133 lt!48907))) (and (bvsge (index!3134 lt!49320) #b00000000000000000000000000000000) (bvslt (index!3134 lt!49320) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!49320) (ite ((_ is Found!247) lt!49320) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!49320)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (and ((_ is MissingVacant!247) lt!49320) (= (index!3134 lt!49320) (index!3133 lt!48907)) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!49320)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64045 () SeekEntryResult!247)

(assert (=> d!26219 (= lt!49320 e!64045)))

(declare-fun c!16689 () Bool)

(assert (=> d!26219 (= c!16689 (bvsge (x!12953 lt!48907) #b01111111111111111111111111111110))))

(declare-fun lt!49321 () (_ BitVec 64))

(assert (=> d!26219 (= lt!49321 (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!48907)))))

(assert (=> d!26219 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26219 (= (seekKeyOrZeroReturnVacant!0 (x!12953 lt!48907) (index!3133 lt!48907) (index!3133 lt!48907) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)) lt!49320)))

(declare-fun b!98254 () Bool)

(declare-fun e!64043 () SeekEntryResult!247)

(assert (=> b!98254 (= e!64043 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12953 lt!48907) #b00000000000000000000000000000001) (nextIndex!0 (index!3133 lt!48907) (bvadd (x!12953 lt!48907) #b00000000000000000000000000000001) (mask!6577 newMap!16)) (index!3133 lt!48907) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun b!98255 () Bool)

(assert (=> b!98255 (= e!64045 Undefined!247)))

(declare-fun b!98256 () Bool)

(assert (=> b!98256 (= e!64045 e!64044)))

(declare-fun c!16688 () Bool)

(assert (=> b!98256 (= c!16688 (= lt!49321 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!98257 () Bool)

(assert (=> b!98257 (= e!64043 (MissingVacant!247 (index!3133 lt!48907)))))

(declare-fun b!98258 () Bool)

(declare-fun c!16687 () Bool)

(assert (=> b!98258 (= c!16687 (= lt!49321 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98258 (= e!64044 e!64043)))

(assert (= (and d!26219 c!16689) b!98255))

(assert (= (and d!26219 (not c!16689)) b!98256))

(assert (= (and b!98256 c!16688) b!98253))

(assert (= (and b!98256 (not c!16688)) b!98258))

(assert (= (and b!98258 c!16687) b!98257))

(assert (= (and b!98258 (not c!16687)) b!98254))

(declare-fun m!107435 () Bool)

(assert (=> d!26219 m!107435))

(declare-fun m!107437 () Bool)

(assert (=> d!26219 m!107437))

(assert (=> d!26219 m!106543))

(assert (=> d!26219 m!106537))

(declare-fun m!107439 () Bool)

(assert (=> b!98254 m!107439))

(assert (=> b!98254 m!107439))

(assert (=> b!98254 m!106251))

(declare-fun m!107441 () Bool)

(assert (=> b!98254 m!107441))

(assert (=> b!97720 d!26219))

(assert (=> d!25971 d!25945))

(assert (=> b!97941 d!25979))

(declare-fun b!98259 () Bool)

(declare-fun e!64047 () (_ BitVec 32))

(assert (=> b!98259 (= e!64047 #b00000000000000000000000000000000)))

(declare-fun b!98260 () Bool)

(declare-fun e!64046 () (_ BitVec 32))

(declare-fun call!10009 () (_ BitVec 32))

(assert (=> b!98260 (= e!64046 call!10009)))

(declare-fun b!98261 () Bool)

(assert (=> b!98261 (= e!64046 (bvadd #b00000000000000000000000000000001 call!10009))))

(declare-fun d!26221 () Bool)

(declare-fun lt!49322 () (_ BitVec 32))

(assert (=> d!26221 (and (bvsge lt!49322 #b00000000000000000000000000000000) (bvsle lt!49322 (bvsub (size!2256 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(assert (=> d!26221 (= lt!49322 e!64047)))

(declare-fun c!16691 () Bool)

(assert (=> d!26221 (= c!16691 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(assert (=> d!26221 (and (bvsle #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2256 (_keys!4170 (_2!1160 lt!48807))) (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(assert (=> d!26221 (= (arrayCountValidKeys!0 (_keys!4170 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))) lt!49322)))

(declare-fun bm!10006 () Bool)

(assert (=> bm!10006 (= call!10009 (arrayCountValidKeys!0 (_keys!4170 (_2!1160 lt!48807)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(declare-fun b!98262 () Bool)

(assert (=> b!98262 (= e!64047 e!64046)))

(declare-fun c!16690 () Bool)

(assert (=> b!98262 (= c!16690 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(assert (= (and d!26221 c!16691) b!98259))

(assert (= (and d!26221 (not c!16691)) b!98262))

(assert (= (and b!98262 c!16690) b!98261))

(assert (= (and b!98262 (not c!16690)) b!98260))

(assert (= (or b!98261 b!98260) bm!10006))

(declare-fun m!107443 () Bool)

(assert (=> bm!10006 m!107443))

(declare-fun m!107445 () Bool)

(assert (=> b!98262 m!107445))

(assert (=> b!98262 m!107445))

(declare-fun m!107447 () Bool)

(assert (=> b!98262 m!107447))

(assert (=> b!97849 d!26221))

(declare-fun d!26223 () Bool)

(assert (=> d!26223 (isDefined!103 (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(declare-fun lt!49323 () Unit!2917)

(assert (=> d!26223 (= lt!49323 (choose!600 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(declare-fun e!64048 () Bool)

(assert (=> d!26223 e!64048))

(declare-fun res!49433 () Bool)

(assert (=> d!26223 (=> (not res!49433) (not e!64048))))

(assert (=> d!26223 (= res!49433 (isStrictlySorted!291 (toList!765 call!9912)))))

(assert (=> d!26223 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))) lt!49323)))

(declare-fun b!98263 () Bool)

(assert (=> b!98263 (= e!64048 (containsKey!154 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (= (and d!26223 res!49433) b!98263))

(assert (=> d!26223 m!107035))

(assert (=> d!26223 m!107035))

(assert (=> d!26223 m!107037))

(declare-fun m!107449 () Bool)

(assert (=> d!26223 m!107449))

(declare-fun m!107451 () Bool)

(assert (=> d!26223 m!107451))

(assert (=> b!98263 m!107031))

(assert (=> b!98016 d!26223))

(declare-fun d!26225 () Bool)

(assert (=> d!26225 (= (isDefined!103 (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))) (not (isEmpty!362 (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))))

(declare-fun bs!4054 () Bool)

(assert (= bs!4054 d!26225))

(assert (=> bs!4054 m!107035))

(declare-fun m!107453 () Bool)

(assert (=> bs!4054 m!107453))

(assert (=> b!98016 d!26225))

(declare-fun b!98264 () Bool)

(declare-fun e!64049 () Option!157)

(assert (=> b!98264 (= e!64049 (Some!156 (_2!1161 (h!2154 (toList!765 call!9912)))))))

(declare-fun b!98267 () Bool)

(declare-fun e!64050 () Option!157)

(assert (=> b!98267 (= e!64050 None!155)))

(declare-fun b!98265 () Bool)

(assert (=> b!98265 (= e!64049 e!64050)))

(declare-fun c!16693 () Bool)

(assert (=> b!98265 (= c!16693 (and ((_ is Cons!1560) (toList!765 call!9912)) (not (= (_1!1161 (h!2154 (toList!765 call!9912))) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))))

(declare-fun d!26227 () Bool)

(declare-fun c!16692 () Bool)

(assert (=> d!26227 (= c!16692 (and ((_ is Cons!1560) (toList!765 call!9912)) (= (_1!1161 (h!2154 (toList!765 call!9912))) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))))

(assert (=> d!26227 (= (getValueByKey!151 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))) e!64049)))

(declare-fun b!98266 () Bool)

(assert (=> b!98266 (= e!64050 (getValueByKey!151 (t!5510 (toList!765 call!9912)) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (= (and d!26227 c!16692) b!98264))

(assert (= (and d!26227 (not c!16692)) b!98265))

(assert (= (and b!98265 c!16693) b!98266))

(assert (= (and b!98265 (not c!16693)) b!98267))

(declare-fun m!107455 () Bool)

(assert (=> b!98266 m!107455))

(assert (=> b!98016 d!26227))

(declare-fun d!26229 () Bool)

(assert (=> d!26229 (= (apply!92 lt!48938 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48938) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4055 () Bool)

(assert (= bs!4055 d!26229))

(declare-fun m!107457 () Bool)

(assert (=> bs!4055 m!107457))

(assert (=> bs!4055 m!107457))

(declare-fun m!107459 () Bool)

(assert (=> bs!4055 m!107459))

(assert (=> b!97764 d!26229))

(declare-fun d!26231 () Bool)

(declare-fun e!64051 () Bool)

(assert (=> d!26231 e!64051))

(declare-fun res!49434 () Bool)

(assert (=> d!26231 (=> res!49434 e!64051)))

(declare-fun lt!49324 () Bool)

(assert (=> d!26231 (= res!49434 (not lt!49324))))

(declare-fun lt!49327 () Bool)

(assert (=> d!26231 (= lt!49324 lt!49327)))

(declare-fun lt!49325 () Unit!2917)

(declare-fun e!64052 () Unit!2917)

(assert (=> d!26231 (= lt!49325 e!64052)))

(declare-fun c!16694 () Bool)

(assert (=> d!26231 (= c!16694 lt!49327)))

(assert (=> d!26231 (= lt!49327 (containsKey!154 (toList!765 lt!48913) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26231 (= (contains!788 lt!48913 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49324)))

(declare-fun b!98268 () Bool)

(declare-fun lt!49326 () Unit!2917)

(assert (=> b!98268 (= e!64052 lt!49326)))

(assert (=> b!98268 (= lt!49326 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48913) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98268 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98269 () Bool)

(declare-fun Unit!2953 () Unit!2917)

(assert (=> b!98269 (= e!64052 Unit!2953)))

(declare-fun b!98270 () Bool)

(assert (=> b!98270 (= e!64051 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26231 c!16694) b!98268))

(assert (= (and d!26231 (not c!16694)) b!98269))

(assert (= (and d!26231 (not res!49434)) b!98270))

(declare-fun m!107461 () Bool)

(assert (=> d!26231 m!107461))

(declare-fun m!107463 () Bool)

(assert (=> b!98268 m!107463))

(declare-fun m!107465 () Bool)

(assert (=> b!98268 m!107465))

(assert (=> b!98268 m!107465))

(declare-fun m!107467 () Bool)

(assert (=> b!98268 m!107467))

(assert (=> b!98270 m!107465))

(assert (=> b!98270 m!107465))

(assert (=> b!98270 m!107467))

(assert (=> bm!9940 d!26231))

(declare-fun d!26233 () Bool)

(declare-fun lt!49328 () Bool)

(assert (=> d!26233 (= lt!49328 (select (content!102 (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!64054 () Bool)

(assert (=> d!26233 (= lt!49328 e!64054)))

(declare-fun res!49435 () Bool)

(assert (=> d!26233 (=> (not res!49435) (not e!64054))))

(assert (=> d!26233 (= res!49435 ((_ is Cons!1561) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)))))

(assert (=> d!26233 (= (contains!790 (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!49328)))

(declare-fun b!98271 () Bool)

(declare-fun e!64053 () Bool)

(assert (=> b!98271 (= e!64054 e!64053)))

(declare-fun res!49436 () Bool)

(assert (=> b!98271 (=> res!49436 e!64053)))

(assert (=> b!98271 (= res!49436 (= (h!2155 (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98272 () Bool)

(assert (=> b!98272 (= e!64053 (contains!790 (t!5511 (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26233 res!49435) b!98271))

(assert (= (and b!98271 (not res!49436)) b!98272))

(declare-fun m!107469 () Bool)

(assert (=> d!26233 m!107469))

(assert (=> d!26233 m!107053))

(declare-fun m!107471 () Bool)

(assert (=> d!26233 m!107471))

(assert (=> b!98272 m!107053))

(declare-fun m!107473 () Bool)

(assert (=> b!98272 m!107473))

(assert (=> b!98030 d!26233))

(declare-fun d!26235 () Bool)

(assert (=> d!26235 (= (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48892)) (v!2807 (getValueByKey!151 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48892)))))

(assert (=> d!26043 d!26235))

(declare-fun e!64055 () Option!157)

(declare-fun b!98273 () Bool)

(assert (=> b!98273 (= e!64055 (Some!156 (_2!1161 (h!2154 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun b!98276 () Bool)

(declare-fun e!64056 () Option!157)

(assert (=> b!98276 (= e!64056 None!155)))

(declare-fun b!98274 () Bool)

(assert (=> b!98274 (= e!64055 e!64056)))

(declare-fun c!16696 () Bool)

(assert (=> b!98274 (= c!16696 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (not (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48892))))))

(declare-fun d!26237 () Bool)

(declare-fun c!16695 () Bool)

(assert (=> d!26237 (= c!16695 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48892)))))

(assert (=> d!26237 (= (getValueByKey!151 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48892) e!64055)))

(declare-fun b!98275 () Bool)

(assert (=> b!98275 (= e!64056 (getValueByKey!151 (t!5510 (toList!765 (+!130 lt!48898 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!48892))))

(assert (= (and d!26237 c!16695) b!98273))

(assert (= (and d!26237 (not c!16695)) b!98274))

(assert (= (and b!98274 c!16696) b!98275))

(assert (= (and b!98274 (not c!16696)) b!98276))

(declare-fun m!107475 () Bool)

(assert (=> b!98275 m!107475))

(assert (=> d!26043 d!26237))

(assert (=> bm!9985 d!25969))

(assert (=> d!26023 d!26025))

(assert (=> d!26023 d!26027))

(declare-fun d!26239 () Bool)

(assert (=> d!26239 (isDefined!103 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26239 true))

(declare-fun _$12!344 () Unit!2917)

(assert (=> d!26239 (= (choose!600 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) _$12!344)))

(declare-fun bs!4056 () Bool)

(assert (= bs!4056 d!26239))

(assert (=> bs!4056 m!106251))

(assert (=> bs!4056 m!106399))

(assert (=> bs!4056 m!106399))

(assert (=> bs!4056 m!106401))

(assert (=> d!26023 d!26239))

(declare-fun d!26241 () Bool)

(declare-fun res!49441 () Bool)

(declare-fun e!64061 () Bool)

(assert (=> d!26241 (=> res!49441 e!64061)))

(assert (=> d!26241 (= res!49441 (or ((_ is Nil!1561) (toList!765 lt!48683)) ((_ is Nil!1561) (t!5510 (toList!765 lt!48683)))))))

(assert (=> d!26241 (= (isStrictlySorted!291 (toList!765 lt!48683)) e!64061)))

(declare-fun b!98281 () Bool)

(declare-fun e!64062 () Bool)

(assert (=> b!98281 (= e!64061 e!64062)))

(declare-fun res!49442 () Bool)

(assert (=> b!98281 (=> (not res!49442) (not e!64062))))

(assert (=> b!98281 (= res!49442 (bvslt (_1!1161 (h!2154 (toList!765 lt!48683))) (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683))))))))

(declare-fun b!98282 () Bool)

(assert (=> b!98282 (= e!64062 (isStrictlySorted!291 (t!5510 (toList!765 lt!48683))))))

(assert (= (and d!26241 (not res!49441)) b!98281))

(assert (= (and b!98281 res!49442) b!98282))

(declare-fun m!107477 () Bool)

(assert (=> b!98282 m!107477))

(assert (=> d!26023 d!26241))

(declare-fun d!26243 () Bool)

(assert (=> d!26243 (= (inRange!0 (index!3132 lt!49194) (mask!6577 newMap!16)) (and (bvsge (index!3132 lt!49194) #b00000000000000000000000000000000) (bvslt (index!3132 lt!49194) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!98036 d!26243))

(declare-fun d!26245 () Bool)

(assert (=> d!26245 (= (apply!92 lt!49066 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1292 (getValueByKey!151 (toList!765 lt!49066) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4057 () Bool)

(assert (= bs!4057 d!26245))

(assert (=> bs!4057 m!106381))

(declare-fun m!107479 () Bool)

(assert (=> bs!4057 m!107479))

(assert (=> bs!4057 m!107479))

(declare-fun m!107481 () Bool)

(assert (=> bs!4057 m!107481))

(assert (=> b!97937 d!26245))

(assert (=> b!97937 d!26079))

(declare-fun d!26247 () Bool)

(declare-fun e!64063 () Bool)

(assert (=> d!26247 e!64063))

(declare-fun res!49444 () Bool)

(assert (=> d!26247 (=> (not res!49444) (not e!64063))))

(declare-fun lt!49329 () ListLongMap!1499)

(assert (=> d!26247 (= res!49444 (contains!788 lt!49329 (_1!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun lt!49330 () List!1564)

(assert (=> d!26247 (= lt!49329 (ListLongMap!1500 lt!49330))))

(declare-fun lt!49332 () Unit!2917)

(declare-fun lt!49331 () Unit!2917)

(assert (=> d!26247 (= lt!49332 lt!49331)))

(assert (=> d!26247 (= (getValueByKey!151 lt!49330 (_1!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26247 (= lt!49331 (lemmaContainsTupThenGetReturnValue!67 lt!49330 (_1!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26247 (= lt!49330 (insertStrictlySorted!70 (toList!765 (ite c!16587 call!9965 (ite c!16583 call!9966 call!9967))) (_1!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26247 (= (+!130 (ite c!16587 call!9965 (ite c!16583 call!9966 call!9967)) (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) lt!49329)))

(declare-fun b!98283 () Bool)

(declare-fun res!49443 () Bool)

(assert (=> b!98283 (=> (not res!49443) (not e!64063))))

(assert (=> b!98283 (= res!49443 (= (getValueByKey!151 (toList!765 lt!49329) (_1!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))))

(declare-fun b!98284 () Bool)

(assert (=> b!98284 (= e!64063 (contains!791 (toList!765 lt!49329) (ite (or c!16587 c!16583) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (= (and d!26247 res!49444) b!98283))

(assert (= (and b!98283 res!49443) b!98284))

(declare-fun m!107483 () Bool)

(assert (=> d!26247 m!107483))

(declare-fun m!107485 () Bool)

(assert (=> d!26247 m!107485))

(declare-fun m!107487 () Bool)

(assert (=> d!26247 m!107487))

(declare-fun m!107489 () Bool)

(assert (=> d!26247 m!107489))

(declare-fun m!107491 () Bool)

(assert (=> b!98283 m!107491))

(declare-fun m!107493 () Bool)

(assert (=> b!98284 m!107493))

(assert (=> bm!9967 d!26247))

(assert (=> b!97835 d!26145))

(declare-fun d!26249 () Bool)

(assert (=> d!26249 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49333 () Unit!2917)

(assert (=> d!26249 (= lt!49333 (choose!600 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64064 () Bool)

(assert (=> d!26249 e!64064))

(declare-fun res!49445 () Bool)

(assert (=> d!26249 (=> (not res!49445) (not e!64064))))

(assert (=> d!26249 (= res!49445 (isStrictlySorted!291 (toList!765 lt!48882)))))

(assert (=> d!26249 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000) lt!49333)))

(declare-fun b!98285 () Bool)

(assert (=> b!98285 (= e!64064 (containsKey!154 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26249 res!49445) b!98285))

(assert (=> d!26249 m!107047))

(assert (=> d!26249 m!107047))

(assert (=> d!26249 m!107071))

(declare-fun m!107495 () Bool)

(assert (=> d!26249 m!107495))

(declare-fun m!107497 () Bool)

(assert (=> d!26249 m!107497))

(assert (=> b!98285 m!107067))

(assert (=> b!98038 d!26249))

(declare-fun d!26251 () Bool)

(assert (=> d!26251 (= (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!362 (getValueByKey!151 (toList!765 lt!48882) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4058 () Bool)

(assert (= bs!4058 d!26251))

(assert (=> bs!4058 m!107047))

(declare-fun m!107499 () Bool)

(assert (=> bs!4058 m!107499))

(assert (=> b!98038 d!26251))

(assert (=> b!98038 d!26097))

(assert (=> b!97782 d!26157))

(declare-fun d!26253 () Bool)

(assert (=> d!26253 (= (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48885)) (v!2807 (getValueByKey!151 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48885)))))

(assert (=> d!26053 d!26253))

(declare-fun b!98286 () Bool)

(declare-fun e!64065 () Option!157)

(assert (=> b!98286 (= e!64065 (Some!156 (_2!1161 (h!2154 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun b!98289 () Bool)

(declare-fun e!64066 () Option!157)

(assert (=> b!98289 (= e!64066 None!155)))

(declare-fun b!98287 () Bool)

(assert (=> b!98287 (= e!64065 e!64066)))

(declare-fun c!16698 () Bool)

(assert (=> b!98287 (= c!16698 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (not (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48885))))))

(declare-fun d!26255 () Bool)

(declare-fun c!16697 () Bool)

(assert (=> d!26255 (= c!16697 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48885)))))

(assert (=> d!26255 (= (getValueByKey!151 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48885) e!64065)))

(declare-fun b!98288 () Bool)

(assert (=> b!98288 (= e!64066 (getValueByKey!151 (t!5510 (toList!765 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!48885))))

(assert (= (and d!26255 c!16697) b!98286))

(assert (= (and d!26255 (not c!16697)) b!98287))

(assert (= (and b!98287 c!16698) b!98288))

(assert (= (and b!98287 (not c!16698)) b!98289))

(declare-fun m!107501 () Bool)

(assert (=> b!98288 m!107501))

(assert (=> d!26053 d!26255))

(assert (=> b!97731 d!26157))

(declare-fun d!26257 () Bool)

(declare-fun e!64067 () Bool)

(assert (=> d!26257 e!64067))

(declare-fun res!49446 () Bool)

(assert (=> d!26257 (=> res!49446 e!64067)))

(declare-fun lt!49334 () Bool)

(assert (=> d!26257 (= res!49446 (not lt!49334))))

(declare-fun lt!49337 () Bool)

(assert (=> d!26257 (= lt!49334 lt!49337)))

(declare-fun lt!49335 () Unit!2917)

(declare-fun e!64068 () Unit!2917)

(assert (=> d!26257 (= lt!49335 e!64068)))

(declare-fun c!16699 () Bool)

(assert (=> d!26257 (= c!16699 lt!49337)))

(assert (=> d!26257 (= lt!49337 (containsKey!154 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26257 (= (contains!788 lt!49071 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49334)))

(declare-fun b!98290 () Bool)

(declare-fun lt!49336 () Unit!2917)

(assert (=> b!98290 (= e!64068 lt!49336)))

(assert (=> b!98290 (= lt!49336 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> b!98290 (isDefined!103 (getValueByKey!151 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98291 () Bool)

(declare-fun Unit!2954 () Unit!2917)

(assert (=> b!98291 (= e!64068 Unit!2954)))

(declare-fun b!98292 () Bool)

(assert (=> b!98292 (= e!64067 (isDefined!103 (getValueByKey!151 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26257 c!16699) b!98290))

(assert (= (and d!26257 (not c!16699)) b!98291))

(assert (= (and d!26257 (not res!49446)) b!98292))

(declare-fun m!107503 () Bool)

(assert (=> d!26257 m!107503))

(declare-fun m!107505 () Bool)

(assert (=> b!98290 m!107505))

(assert (=> b!98290 m!106909))

(assert (=> b!98290 m!106909))

(declare-fun m!107507 () Bool)

(assert (=> b!98290 m!107507))

(assert (=> b!98292 m!106909))

(assert (=> b!98292 m!106909))

(assert (=> b!98292 m!107507))

(assert (=> d!26047 d!26257))

(declare-fun b!98293 () Bool)

(declare-fun e!64069 () Option!157)

(assert (=> b!98293 (= e!64069 (Some!156 (_2!1161 (h!2154 lt!49072))))))

(declare-fun b!98296 () Bool)

(declare-fun e!64070 () Option!157)

(assert (=> b!98296 (= e!64070 None!155)))

(declare-fun b!98294 () Bool)

(assert (=> b!98294 (= e!64069 e!64070)))

(declare-fun c!16701 () Bool)

(assert (=> b!98294 (= c!16701 (and ((_ is Cons!1560) lt!49072) (not (= (_1!1161 (h!2154 lt!49072)) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16700 () Bool)

(declare-fun d!26259 () Bool)

(assert (=> d!26259 (= c!16700 (and ((_ is Cons!1560) lt!49072) (= (_1!1161 (h!2154 lt!49072)) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26259 (= (getValueByKey!151 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64069)))

(declare-fun b!98295 () Bool)

(assert (=> b!98295 (= e!64070 (getValueByKey!151 (t!5510 lt!49072) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26259 c!16700) b!98293))

(assert (= (and d!26259 (not c!16700)) b!98294))

(assert (= (and b!98294 c!16701) b!98295))

(assert (= (and b!98294 (not c!16701)) b!98296))

(declare-fun m!107509 () Bool)

(assert (=> b!98295 m!107509))

(assert (=> d!26047 d!26259))

(declare-fun d!26261 () Bool)

(assert (=> d!26261 (= (getValueByKey!151 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49338 () Unit!2917)

(assert (=> d!26261 (= lt!49338 (choose!604 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!64071 () Bool)

(assert (=> d!26261 e!64071))

(declare-fun res!49447 () Bool)

(assert (=> d!26261 (=> (not res!49447) (not e!64071))))

(assert (=> d!26261 (= res!49447 (isStrictlySorted!291 lt!49072))))

(assert (=> d!26261 (= (lemmaContainsTupThenGetReturnValue!67 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49338)))

(declare-fun b!98297 () Bool)

(declare-fun res!49448 () Bool)

(assert (=> b!98297 (=> (not res!49448) (not e!64071))))

(assert (=> b!98297 (= res!49448 (containsKey!154 lt!49072 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98298 () Bool)

(assert (=> b!98298 (= e!64071 (contains!791 lt!49072 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26261 res!49447) b!98297))

(assert (= (and b!98297 res!49448) b!98298))

(assert (=> d!26261 m!106903))

(declare-fun m!107511 () Bool)

(assert (=> d!26261 m!107511))

(declare-fun m!107513 () Bool)

(assert (=> d!26261 m!107513))

(declare-fun m!107515 () Bool)

(assert (=> b!98297 m!107515))

(declare-fun m!107517 () Bool)

(assert (=> b!98298 m!107517))

(assert (=> d!26047 d!26261))

(declare-fun b!98299 () Bool)

(declare-fun e!64075 () List!1564)

(declare-fun call!10010 () List!1564)

(assert (=> b!98299 (= e!64075 call!10010)))

(declare-fun b!98300 () Bool)

(declare-fun e!64073 () List!1564)

(declare-fun e!64076 () List!1564)

(assert (=> b!98300 (= e!64073 e!64076)))

(declare-fun c!16705 () Bool)

(assert (=> b!98300 (= c!16705 (and ((_ is Cons!1560) (toList!765 lt!48883)) (= (_1!1161 (h!2154 (toList!765 lt!48883))) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98301 () Bool)

(declare-fun res!49449 () Bool)

(declare-fun e!64072 () Bool)

(assert (=> b!98301 (=> (not res!49449) (not e!64072))))

(declare-fun lt!49339 () List!1564)

(assert (=> b!98301 (= res!49449 (containsKey!154 lt!49339 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun bm!10007 () Bool)

(declare-fun call!10012 () List!1564)

(declare-fun call!10011 () List!1564)

(assert (=> bm!10007 (= call!10012 call!10011)))

(declare-fun c!16703 () Bool)

(declare-fun e!64074 () List!1564)

(declare-fun bm!10008 () Bool)

(assert (=> bm!10008 (= call!10011 ($colon$colon!77 e!64074 (ite c!16703 (h!2154 (toList!765 lt!48883)) (tuple2!2301 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16704 () Bool)

(assert (=> bm!10008 (= c!16704 c!16703)))

(declare-fun b!98302 () Bool)

(declare-fun c!16702 () Bool)

(assert (=> b!98302 (= c!16702 (and ((_ is Cons!1560) (toList!765 lt!48883)) (bvsgt (_1!1161 (h!2154 (toList!765 lt!48883))) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98302 (= e!64076 e!64075)))

(declare-fun d!26263 () Bool)

(assert (=> d!26263 e!64072))

(declare-fun res!49450 () Bool)

(assert (=> d!26263 (=> (not res!49450) (not e!64072))))

(assert (=> d!26263 (= res!49450 (isStrictlySorted!291 lt!49339))))

(assert (=> d!26263 (= lt!49339 e!64073)))

(assert (=> d!26263 (= c!16703 (and ((_ is Cons!1560) (toList!765 lt!48883)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48883))) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26263 (isStrictlySorted!291 (toList!765 lt!48883))))

(assert (=> d!26263 (= (insertStrictlySorted!70 (toList!765 lt!48883) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49339)))

(declare-fun b!98303 () Bool)

(assert (=> b!98303 (= e!64076 call!10012)))

(declare-fun b!98304 () Bool)

(assert (=> b!98304 (= e!64074 (insertStrictlySorted!70 (t!5510 (toList!765 lt!48883)) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98305 () Bool)

(assert (=> b!98305 (= e!64074 (ite c!16705 (t!5510 (toList!765 lt!48883)) (ite c!16702 (Cons!1560 (h!2154 (toList!765 lt!48883)) (t!5510 (toList!765 lt!48883))) Nil!1561)))))

(declare-fun b!98306 () Bool)

(assert (=> b!98306 (= e!64073 call!10011)))

(declare-fun b!98307 () Bool)

(assert (=> b!98307 (= e!64075 call!10010)))

(declare-fun b!98308 () Bool)

(assert (=> b!98308 (= e!64072 (contains!791 lt!49339 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!10009 () Bool)

(assert (=> bm!10009 (= call!10010 call!10012)))

(assert (= (and d!26263 c!16703) b!98306))

(assert (= (and d!26263 (not c!16703)) b!98300))

(assert (= (and b!98300 c!16705) b!98303))

(assert (= (and b!98300 (not c!16705)) b!98302))

(assert (= (and b!98302 c!16702) b!98307))

(assert (= (and b!98302 (not c!16702)) b!98299))

(assert (= (or b!98307 b!98299) bm!10009))

(assert (= (or b!98303 bm!10009) bm!10007))

(assert (= (or b!98306 bm!10007) bm!10008))

(assert (= (and bm!10008 c!16704) b!98304))

(assert (= (and bm!10008 (not c!16704)) b!98305))

(assert (= (and d!26263 res!49450) b!98301))

(assert (= (and b!98301 res!49449) b!98308))

(declare-fun m!107519 () Bool)

(assert (=> bm!10008 m!107519))

(declare-fun m!107521 () Bool)

(assert (=> d!26263 m!107521))

(declare-fun m!107523 () Bool)

(assert (=> d!26263 m!107523))

(declare-fun m!107525 () Bool)

(assert (=> b!98308 m!107525))

(declare-fun m!107527 () Bool)

(assert (=> b!98301 m!107527))

(declare-fun m!107529 () Bool)

(assert (=> b!98304 m!107529))

(assert (=> d!26047 d!26263))

(assert (=> bm!9966 d!26117))

(declare-fun d!26265 () Bool)

(assert (=> d!26265 (= (apply!92 lt!49009 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1292 (getValueByKey!151 (toList!765 lt!49009) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4059 () Bool)

(assert (= bs!4059 d!26265))

(assert (=> bs!4059 m!106551))

(assert (=> bs!4059 m!107267))

(assert (=> bs!4059 m!107267))

(declare-fun m!107531 () Bool)

(assert (=> bs!4059 m!107531))

(assert (=> b!97861 d!26265))

(declare-fun d!26267 () Bool)

(declare-fun c!16706 () Bool)

(assert (=> d!26267 (= c!16706 ((_ is ValueCellFull!971) (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000)))))

(declare-fun e!64077 () V!3153)

(assert (=> d!26267 (= (get!1288 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64077)))

(declare-fun b!98309 () Bool)

(assert (=> b!98309 (= e!64077 (get!1290 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98310 () Bool)

(assert (=> b!98310 (= e!64077 (get!1291 (select (arr!2007 (ite (or c!16512 c!16514) (_values!2463 newMap!16) lt!48816)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26267 c!16706) b!98309))

(assert (= (and d!26267 (not c!16706)) b!98310))

(assert (=> b!98309 m!106775))

(assert (=> b!98309 m!106557))

(declare-fun m!107533 () Bool)

(assert (=> b!98309 m!107533))

(assert (=> b!98310 m!106775))

(assert (=> b!98310 m!106557))

(declare-fun m!107535 () Bool)

(assert (=> b!98310 m!107535))

(assert (=> b!97861 d!26267))

(assert (=> b!97704 d!25941))

(declare-fun d!26269 () Bool)

(assert (=> d!26269 (= (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) (not (isEmpty!362 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun bs!4060 () Bool)

(assert (= bs!4060 d!26269))

(assert (=> bs!4060 m!106685))

(declare-fun m!107537 () Bool)

(assert (=> bs!4060 m!107537))

(assert (=> b!97777 d!26269))

(declare-fun b!98311 () Bool)

(declare-fun e!64078 () Option!157)

(assert (=> b!98311 (= e!64078 (Some!156 (_2!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))))))

(declare-fun b!98314 () Bool)

(declare-fun e!64079 () Option!157)

(assert (=> b!98314 (= e!64079 None!155)))

(declare-fun b!98312 () Bool)

(assert (=> b!98312 (= e!64078 e!64079)))

(declare-fun c!16708 () Bool)

(assert (=> b!98312 (= c!16708 (and ((_ is Cons!1560) (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (not (= (_1!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun c!16707 () Bool)

(declare-fun d!26271 () Bool)

(assert (=> d!26271 (= c!16707 (and ((_ is Cons!1560) (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (= (_1!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26271 (= (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!64078)))

(declare-fun b!98313 () Bool)

(assert (=> b!98313 (= e!64079 (getValueByKey!151 (t!5510 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26271 c!16707) b!98311))

(assert (= (and d!26271 (not c!16707)) b!98312))

(assert (= (and b!98312 c!16708) b!98313))

(assert (= (and b!98312 (not c!16708)) b!98314))

(assert (=> b!98313 m!106251))

(declare-fun m!107539 () Bool)

(assert (=> b!98313 m!107539))

(assert (=> b!97777 d!26271))

(declare-fun d!26273 () Bool)

(declare-fun e!64080 () Bool)

(assert (=> d!26273 e!64080))

(declare-fun res!49451 () Bool)

(assert (=> d!26273 (=> res!49451 e!64080)))

(declare-fun lt!49340 () Bool)

(assert (=> d!26273 (= res!49451 (not lt!49340))))

(declare-fun lt!49343 () Bool)

(assert (=> d!26273 (= lt!49340 lt!49343)))

(declare-fun lt!49341 () Unit!2917)

(declare-fun e!64081 () Unit!2917)

(assert (=> d!26273 (= lt!49341 e!64081)))

(declare-fun c!16709 () Bool)

(assert (=> d!26273 (= c!16709 lt!49343)))

(assert (=> d!26273 (= lt!49343 (containsKey!154 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26273 (= (contains!788 lt!49181 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49340)))

(declare-fun b!98315 () Bool)

(declare-fun lt!49342 () Unit!2917)

(assert (=> b!98315 (= e!64081 lt!49342)))

(assert (=> b!98315 (= lt!49342 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> b!98315 (isDefined!103 (getValueByKey!151 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98316 () Bool)

(declare-fun Unit!2955 () Unit!2917)

(assert (=> b!98316 (= e!64081 Unit!2955)))

(declare-fun b!98317 () Bool)

(assert (=> b!98317 (= e!64080 (isDefined!103 (getValueByKey!151 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26273 c!16709) b!98315))

(assert (= (and d!26273 (not c!16709)) b!98316))

(assert (= (and d!26273 (not res!49451)) b!98317))

(declare-fun m!107541 () Bool)

(assert (=> d!26273 m!107541))

(declare-fun m!107543 () Bool)

(assert (=> b!98315 m!107543))

(assert (=> b!98315 m!107027))

(assert (=> b!98315 m!107027))

(declare-fun m!107545 () Bool)

(assert (=> b!98315 m!107545))

(assert (=> b!98317 m!107027))

(assert (=> b!98317 m!107027))

(assert (=> b!98317 m!107545))

(assert (=> d!26071 d!26273))

(declare-fun b!98318 () Bool)

(declare-fun e!64082 () Option!157)

(assert (=> b!98318 (= e!64082 (Some!156 (_2!1161 (h!2154 lt!49182))))))

(declare-fun b!98321 () Bool)

(declare-fun e!64083 () Option!157)

(assert (=> b!98321 (= e!64083 None!155)))

(declare-fun b!98319 () Bool)

(assert (=> b!98319 (= e!64082 e!64083)))

(declare-fun c!16711 () Bool)

(assert (=> b!98319 (= c!16711 (and ((_ is Cons!1560) lt!49182) (not (= (_1!1161 (h!2154 lt!49182)) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun d!26275 () Bool)

(declare-fun c!16710 () Bool)

(assert (=> d!26275 (= c!16710 (and ((_ is Cons!1560) lt!49182) (= (_1!1161 (h!2154 lt!49182)) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26275 (= (getValueByKey!151 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64082)))

(declare-fun b!98320 () Bool)

(assert (=> b!98320 (= e!64083 (getValueByKey!151 (t!5510 lt!49182) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26275 c!16710) b!98318))

(assert (= (and d!26275 (not c!16710)) b!98319))

(assert (= (and b!98319 c!16711) b!98320))

(assert (= (and b!98319 (not c!16711)) b!98321))

(declare-fun m!107547 () Bool)

(assert (=> b!98320 m!107547))

(assert (=> d!26071 d!26275))

(declare-fun d!26277 () Bool)

(assert (=> d!26277 (= (getValueByKey!151 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49344 () Unit!2917)

(assert (=> d!26277 (= lt!49344 (choose!604 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!64084 () Bool)

(assert (=> d!26277 e!64084))

(declare-fun res!49452 () Bool)

(assert (=> d!26277 (=> (not res!49452) (not e!64084))))

(assert (=> d!26277 (= res!49452 (isStrictlySorted!291 lt!49182))))

(assert (=> d!26277 (= (lemmaContainsTupThenGetReturnValue!67 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49344)))

(declare-fun b!98322 () Bool)

(declare-fun res!49453 () Bool)

(assert (=> b!98322 (=> (not res!49453) (not e!64084))))

(assert (=> b!98322 (= res!49453 (containsKey!154 lt!49182 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98323 () Bool)

(assert (=> b!98323 (= e!64084 (contains!791 lt!49182 (tuple2!2301 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26277 res!49452) b!98322))

(assert (= (and b!98322 res!49453) b!98323))

(assert (=> d!26277 m!107021))

(declare-fun m!107549 () Bool)

(assert (=> d!26277 m!107549))

(declare-fun m!107551 () Bool)

(assert (=> d!26277 m!107551))

(declare-fun m!107553 () Bool)

(assert (=> b!98322 m!107553))

(declare-fun m!107555 () Bool)

(assert (=> b!98323 m!107555))

(assert (=> d!26071 d!26277))

(declare-fun b!98324 () Bool)

(declare-fun e!64088 () List!1564)

(declare-fun call!10013 () List!1564)

(assert (=> b!98324 (= e!64088 call!10013)))

(declare-fun b!98325 () Bool)

(declare-fun e!64086 () List!1564)

(declare-fun e!64089 () List!1564)

(assert (=> b!98325 (= e!64086 e!64089)))

(declare-fun c!16715 () Bool)

(assert (=> b!98325 (= c!16715 (and ((_ is Cons!1560) (toList!765 call!9938)) (= (_1!1161 (h!2154 (toList!765 call!9938))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98326 () Bool)

(declare-fun res!49454 () Bool)

(declare-fun e!64085 () Bool)

(assert (=> b!98326 (=> (not res!49454) (not e!64085))))

(declare-fun lt!49345 () List!1564)

(assert (=> b!98326 (= res!49454 (containsKey!154 lt!49345 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun bm!10010 () Bool)

(declare-fun call!10015 () List!1564)

(declare-fun call!10014 () List!1564)

(assert (=> bm!10010 (= call!10015 call!10014)))

(declare-fun bm!10011 () Bool)

(declare-fun c!16713 () Bool)

(declare-fun e!64087 () List!1564)

(assert (=> bm!10011 (= call!10014 ($colon$colon!77 e!64087 (ite c!16713 (h!2154 (toList!765 call!9938)) (tuple2!2301 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16714 () Bool)

(assert (=> bm!10011 (= c!16714 c!16713)))

(declare-fun b!98327 () Bool)

(declare-fun c!16712 () Bool)

(assert (=> b!98327 (= c!16712 (and ((_ is Cons!1560) (toList!765 call!9938)) (bvsgt (_1!1161 (h!2154 (toList!765 call!9938))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98327 (= e!64089 e!64088)))

(declare-fun d!26279 () Bool)

(assert (=> d!26279 e!64085))

(declare-fun res!49455 () Bool)

(assert (=> d!26279 (=> (not res!49455) (not e!64085))))

(assert (=> d!26279 (= res!49455 (isStrictlySorted!291 lt!49345))))

(assert (=> d!26279 (= lt!49345 e!64086)))

(assert (=> d!26279 (= c!16713 (and ((_ is Cons!1560) (toList!765 call!9938)) (bvslt (_1!1161 (h!2154 (toList!765 call!9938))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26279 (isStrictlySorted!291 (toList!765 call!9938))))

(assert (=> d!26279 (= (insertStrictlySorted!70 (toList!765 call!9938) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49345)))

(declare-fun b!98328 () Bool)

(assert (=> b!98328 (= e!64089 call!10015)))

(declare-fun b!98329 () Bool)

(assert (=> b!98329 (= e!64087 (insertStrictlySorted!70 (t!5510 (toList!765 call!9938)) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98330 () Bool)

(assert (=> b!98330 (= e!64087 (ite c!16715 (t!5510 (toList!765 call!9938)) (ite c!16712 (Cons!1560 (h!2154 (toList!765 call!9938)) (t!5510 (toList!765 call!9938))) Nil!1561)))))

(declare-fun b!98331 () Bool)

(assert (=> b!98331 (= e!64086 call!10014)))

(declare-fun b!98332 () Bool)

(assert (=> b!98332 (= e!64088 call!10013)))

(declare-fun b!98333 () Bool)

(assert (=> b!98333 (= e!64085 (contains!791 lt!49345 (tuple2!2301 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!10012 () Bool)

(assert (=> bm!10012 (= call!10013 call!10015)))

(assert (= (and d!26279 c!16713) b!98331))

(assert (= (and d!26279 (not c!16713)) b!98325))

(assert (= (and b!98325 c!16715) b!98328))

(assert (= (and b!98325 (not c!16715)) b!98327))

(assert (= (and b!98327 c!16712) b!98332))

(assert (= (and b!98327 (not c!16712)) b!98324))

(assert (= (or b!98332 b!98324) bm!10012))

(assert (= (or b!98328 bm!10012) bm!10010))

(assert (= (or b!98331 bm!10010) bm!10011))

(assert (= (and bm!10011 c!16714) b!98329))

(assert (= (and bm!10011 (not c!16714)) b!98330))

(assert (= (and d!26279 res!49455) b!98326))

(assert (= (and b!98326 res!49454) b!98333))

(declare-fun m!107557 () Bool)

(assert (=> bm!10011 m!107557))

(declare-fun m!107559 () Bool)

(assert (=> d!26279 m!107559))

(declare-fun m!107561 () Bool)

(assert (=> d!26279 m!107561))

(declare-fun m!107563 () Bool)

(assert (=> b!98333 m!107563))

(declare-fun m!107565 () Bool)

(assert (=> b!98326 m!107565))

(declare-fun m!107567 () Bool)

(assert (=> b!98329 m!107567))

(assert (=> d!26071 d!26279))

(declare-fun d!26281 () Bool)

(declare-fun e!64090 () Bool)

(assert (=> d!26281 e!64090))

(declare-fun res!49457 () Bool)

(assert (=> d!26281 (=> (not res!49457) (not e!64090))))

(declare-fun lt!49346 () ListLongMap!1499)

(assert (=> d!26281 (= res!49457 (contains!788 lt!49346 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun lt!49347 () List!1564)

(assert (=> d!26281 (= lt!49346 (ListLongMap!1500 lt!49347))))

(declare-fun lt!49349 () Unit!2917)

(declare-fun lt!49348 () Unit!2917)

(assert (=> d!26281 (= lt!49349 lt!49348)))

(assert (=> d!26281 (= (getValueByKey!151 lt!49347 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26281 (= lt!49348 (lemmaContainsTupThenGetReturnValue!67 lt!49347 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26281 (= lt!49347 (insertStrictlySorted!70 (toList!765 call!9945) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26281 (= (+!130 call!9945 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) lt!49346)))

(declare-fun b!98334 () Bool)

(declare-fun res!49456 () Bool)

(assert (=> b!98334 (=> (not res!49456) (not e!64090))))

(assert (=> b!98334 (= res!49456 (= (getValueByKey!151 (toList!765 lt!49346) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun b!98335 () Bool)

(assert (=> b!98335 (= e!64090 (contains!791 (toList!765 lt!49346) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(assert (= (and d!26281 res!49457) b!98334))

(assert (= (and b!98334 res!49456) b!98335))

(declare-fun m!107569 () Bool)

(assert (=> d!26281 m!107569))

(declare-fun m!107571 () Bool)

(assert (=> d!26281 m!107571))

(declare-fun m!107573 () Bool)

(assert (=> d!26281 m!107573))

(declare-fun m!107575 () Bool)

(assert (=> d!26281 m!107575))

(declare-fun m!107577 () Bool)

(assert (=> b!98334 m!107577))

(declare-fun m!107579 () Bool)

(assert (=> b!98335 m!107579))

(assert (=> b!97727 d!26281))

(assert (=> d!25997 d!26099))

(declare-fun d!26283 () Bool)

(assert (=> d!26283 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))

(declare-fun lt!49352 () Unit!2917)

(declare-fun choose!605 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 64) (_ BitVec 32) Int) Unit!2917)

(assert (=> d!26283 (= lt!49352 (choose!605 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26283 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26283 (= (lemmaArrayContainsKeyThenInListMap!25 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49352)))

(declare-fun bs!4061 () Bool)

(assert (= bs!4061 d!26283))

(assert (=> bs!4061 m!106413))

(assert (=> bs!4061 m!106413))

(assert (=> bs!4061 m!106251))

(assert (=> bs!4061 m!106415))

(assert (=> bs!4061 m!106251))

(declare-fun m!107581 () Bool)

(assert (=> bs!4061 m!107581))

(assert (=> bs!4061 m!106537))

(assert (=> b!98005 d!26283))

(assert (=> b!98005 d!25987))

(assert (=> b!98005 d!25973))

(assert (=> b!97946 d!26079))

(declare-fun d!26285 () Bool)

(declare-fun e!64091 () Bool)

(assert (=> d!26285 e!64091))

(declare-fun res!49458 () Bool)

(assert (=> d!26285 (=> res!49458 e!64091)))

(declare-fun lt!49353 () Bool)

(assert (=> d!26285 (= res!49458 (not lt!49353))))

(declare-fun lt!49356 () Bool)

(assert (=> d!26285 (= lt!49353 lt!49356)))

(declare-fun lt!49354 () Unit!2917)

(declare-fun e!64092 () Unit!2917)

(assert (=> d!26285 (= lt!49354 e!64092)))

(declare-fun c!16716 () Bool)

(assert (=> d!26285 (= c!16716 lt!49356)))

(assert (=> d!26285 (= lt!49356 (containsKey!154 (toList!765 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064))) lt!49067))))

(assert (=> d!26285 (= (contains!788 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064)) lt!49067) lt!49353)))

(declare-fun b!98336 () Bool)

(declare-fun lt!49355 () Unit!2917)

(assert (=> b!98336 (= e!64092 lt!49355)))

(assert (=> b!98336 (= lt!49355 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064))) lt!49067))))

(assert (=> b!98336 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064))) lt!49067))))

(declare-fun b!98337 () Bool)

(declare-fun Unit!2956 () Unit!2917)

(assert (=> b!98337 (= e!64092 Unit!2956)))

(declare-fun b!98338 () Bool)

(assert (=> b!98338 (= e!64091 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064))) lt!49067)))))

(assert (= (and d!26285 c!16716) b!98336))

(assert (= (and d!26285 (not c!16716)) b!98337))

(assert (= (and d!26285 (not res!49458)) b!98338))

(declare-fun m!107583 () Bool)

(assert (=> d!26285 m!107583))

(declare-fun m!107585 () Bool)

(assert (=> b!98336 m!107585))

(declare-fun m!107587 () Bool)

(assert (=> b!98336 m!107587))

(assert (=> b!98336 m!107587))

(declare-fun m!107589 () Bool)

(assert (=> b!98336 m!107589))

(assert (=> b!98338 m!107587))

(assert (=> b!98338 m!107587))

(assert (=> b!98338 m!107589))

(assert (=> b!97946 d!26285))

(declare-fun d!26287 () Bool)

(declare-fun e!64093 () Bool)

(assert (=> d!26287 e!64093))

(declare-fun res!49460 () Bool)

(assert (=> d!26287 (=> (not res!49460) (not e!64093))))

(declare-fun lt!49357 () ListLongMap!1499)

(assert (=> d!26287 (= res!49460 (contains!788 lt!49357 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49358 () List!1564)

(assert (=> d!26287 (= lt!49357 (ListLongMap!1500 lt!49358))))

(declare-fun lt!49360 () Unit!2917)

(declare-fun lt!49359 () Unit!2917)

(assert (=> d!26287 (= lt!49360 lt!49359)))

(assert (=> d!26287 (= (getValueByKey!151 lt!49358 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= lt!49359 (lemmaContainsTupThenGetReturnValue!67 lt!49358 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= lt!49358 (insertStrictlySorted!70 (toList!765 call!9976) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= (+!130 call!9976 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49357)))

(declare-fun b!98339 () Bool)

(declare-fun res!49459 () Bool)

(assert (=> b!98339 (=> (not res!49459) (not e!64093))))

(assert (=> b!98339 (= res!49459 (= (getValueByKey!151 (toList!765 lt!49357) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98340 () Bool)

(assert (=> b!98340 (= e!64093 (contains!791 (toList!765 lt!49357) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26287 res!49460) b!98339))

(assert (= (and b!98339 res!49459) b!98340))

(declare-fun m!107591 () Bool)

(assert (=> d!26287 m!107591))

(declare-fun m!107593 () Bool)

(assert (=> d!26287 m!107593))

(declare-fun m!107595 () Bool)

(assert (=> d!26287 m!107595))

(declare-fun m!107597 () Bool)

(assert (=> d!26287 m!107597))

(declare-fun m!107599 () Bool)

(assert (=> b!98339 m!107599))

(declare-fun m!107601 () Bool)

(assert (=> b!98340 m!107601))

(assert (=> b!97946 d!26287))

(declare-fun d!26289 () Bool)

(declare-fun e!64094 () Bool)

(assert (=> d!26289 e!64094))

(declare-fun res!49462 () Bool)

(assert (=> d!26289 (=> (not res!49462) (not e!64094))))

(declare-fun lt!49361 () ListLongMap!1499)

(assert (=> d!26289 (= res!49462 (contains!788 lt!49361 (_1!1161 (tuple2!2301 lt!49070 lt!49064))))))

(declare-fun lt!49362 () List!1564)

(assert (=> d!26289 (= lt!49361 (ListLongMap!1500 lt!49362))))

(declare-fun lt!49364 () Unit!2917)

(declare-fun lt!49363 () Unit!2917)

(assert (=> d!26289 (= lt!49364 lt!49363)))

(assert (=> d!26289 (= (getValueByKey!151 lt!49362 (_1!1161 (tuple2!2301 lt!49070 lt!49064))) (Some!156 (_2!1161 (tuple2!2301 lt!49070 lt!49064))))))

(assert (=> d!26289 (= lt!49363 (lemmaContainsTupThenGetReturnValue!67 lt!49362 (_1!1161 (tuple2!2301 lt!49070 lt!49064)) (_2!1161 (tuple2!2301 lt!49070 lt!49064))))))

(assert (=> d!26289 (= lt!49362 (insertStrictlySorted!70 (toList!765 lt!49069) (_1!1161 (tuple2!2301 lt!49070 lt!49064)) (_2!1161 (tuple2!2301 lt!49070 lt!49064))))))

(assert (=> d!26289 (= (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064)) lt!49361)))

(declare-fun b!98341 () Bool)

(declare-fun res!49461 () Bool)

(assert (=> b!98341 (=> (not res!49461) (not e!64094))))

(assert (=> b!98341 (= res!49461 (= (getValueByKey!151 (toList!765 lt!49361) (_1!1161 (tuple2!2301 lt!49070 lt!49064))) (Some!156 (_2!1161 (tuple2!2301 lt!49070 lt!49064)))))))

(declare-fun b!98342 () Bool)

(assert (=> b!98342 (= e!64094 (contains!791 (toList!765 lt!49361) (tuple2!2301 lt!49070 lt!49064)))))

(assert (= (and d!26289 res!49462) b!98341))

(assert (= (and b!98341 res!49461) b!98342))

(declare-fun m!107603 () Bool)

(assert (=> d!26289 m!107603))

(declare-fun m!107605 () Bool)

(assert (=> d!26289 m!107605))

(declare-fun m!107607 () Bool)

(assert (=> d!26289 m!107607))

(declare-fun m!107609 () Bool)

(assert (=> d!26289 m!107609))

(declare-fun m!107611 () Bool)

(assert (=> b!98341 m!107611))

(declare-fun m!107613 () Bool)

(assert (=> b!98342 m!107613))

(assert (=> b!97946 d!26289))

(declare-fun d!26291 () Bool)

(assert (=> d!26291 (not (contains!788 (+!130 lt!49069 (tuple2!2301 lt!49070 lt!49064)) lt!49067))))

(declare-fun lt!49367 () Unit!2917)

(declare-fun choose!606 (ListLongMap!1499 (_ BitVec 64) V!3153 (_ BitVec 64)) Unit!2917)

(assert (=> d!26291 (= lt!49367 (choose!606 lt!49069 lt!49070 lt!49064 lt!49067))))

(declare-fun e!64097 () Bool)

(assert (=> d!26291 e!64097))

(declare-fun res!49465 () Bool)

(assert (=> d!26291 (=> (not res!49465) (not e!64097))))

(assert (=> d!26291 (= res!49465 (not (contains!788 lt!49069 lt!49067)))))

(assert (=> d!26291 (= (addStillNotContains!42 lt!49069 lt!49070 lt!49064 lt!49067) lt!49367)))

(declare-fun b!98346 () Bool)

(assert (=> b!98346 (= e!64097 (not (= lt!49070 lt!49067)))))

(assert (= (and d!26291 res!49465) b!98346))

(assert (=> d!26291 m!106885))

(assert (=> d!26291 m!106885))

(assert (=> d!26291 m!106889))

(declare-fun m!107615 () Bool)

(assert (=> d!26291 m!107615))

(declare-fun m!107617 () Bool)

(assert (=> d!26291 m!107617))

(assert (=> b!97946 d!26291))

(declare-fun d!26293 () Bool)

(assert (=> d!26293 (= (isDefined!103 (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) (not (isEmpty!362 (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun bs!4062 () Bool)

(assert (= bs!4062 d!26293))

(assert (=> bs!4062 m!106757))

(declare-fun m!107619 () Bool)

(assert (=> bs!4062 m!107619))

(assert (=> b!97858 d!26293))

(declare-fun b!98347 () Bool)

(declare-fun e!64098 () Option!157)

(assert (=> b!98347 (= e!64098 (Some!156 (_2!1161 (h!2154 (toList!765 call!9918)))))))

(declare-fun b!98350 () Bool)

(declare-fun e!64099 () Option!157)

(assert (=> b!98350 (= e!64099 None!155)))

(declare-fun b!98348 () Bool)

(assert (=> b!98348 (= e!64098 e!64099)))

(declare-fun c!16718 () Bool)

(assert (=> b!98348 (= c!16718 (and ((_ is Cons!1560) (toList!765 call!9918)) (not (= (_1!1161 (h!2154 (toList!765 call!9918))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun c!16717 () Bool)

(declare-fun d!26295 () Bool)

(assert (=> d!26295 (= c!16717 (and ((_ is Cons!1560) (toList!765 call!9918)) (= (_1!1161 (h!2154 (toList!765 call!9918))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26295 (= (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!64098)))

(declare-fun b!98349 () Bool)

(assert (=> b!98349 (= e!64099 (getValueByKey!151 (t!5510 (toList!765 call!9918)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26295 c!16717) b!98347))

(assert (= (and d!26295 (not c!16717)) b!98348))

(assert (= (and b!98348 c!16718) b!98349))

(assert (= (and b!98348 (not c!16718)) b!98350))

(assert (=> b!98349 m!106251))

(declare-fun m!107621 () Bool)

(assert (=> b!98349 m!107621))

(assert (=> b!97858 d!26295))

(declare-fun d!26297 () Bool)

(declare-fun e!64100 () Bool)

(assert (=> d!26297 e!64100))

(declare-fun res!49466 () Bool)

(assert (=> d!26297 (=> res!49466 e!64100)))

(declare-fun lt!49368 () Bool)

(assert (=> d!26297 (= res!49466 (not lt!49368))))

(declare-fun lt!49371 () Bool)

(assert (=> d!26297 (= lt!49368 lt!49371)))

(declare-fun lt!49369 () Unit!2917)

(declare-fun e!64101 () Unit!2917)

(assert (=> d!26297 (= lt!49369 e!64101)))

(declare-fun c!16719 () Bool)

(assert (=> d!26297 (= c!16719 lt!49371)))

(assert (=> d!26297 (= lt!49371 (containsKey!154 (toList!765 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48944))))

(assert (=> d!26297 (= (contains!788 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48944) lt!49368)))

(declare-fun b!98351 () Bool)

(declare-fun lt!49370 () Unit!2917)

(assert (=> b!98351 (= e!64101 lt!49370)))

(assert (=> b!98351 (= lt!49370 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48944))))

(assert (=> b!98351 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48944))))

(declare-fun b!98352 () Bool)

(declare-fun Unit!2957 () Unit!2917)

(assert (=> b!98352 (= e!64101 Unit!2957)))

(declare-fun b!98353 () Bool)

(assert (=> b!98353 (= e!64100 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48944)))))

(assert (= (and d!26297 c!16719) b!98351))

(assert (= (and d!26297 (not c!16719)) b!98352))

(assert (= (and d!26297 (not res!49466)) b!98353))

(declare-fun m!107623 () Bool)

(assert (=> d!26297 m!107623))

(declare-fun m!107625 () Bool)

(assert (=> b!98351 m!107625))

(declare-fun m!107627 () Bool)

(assert (=> b!98351 m!107627))

(assert (=> b!98351 m!107627))

(declare-fun m!107629 () Bool)

(assert (=> b!98351 m!107629))

(assert (=> b!98353 m!107627))

(assert (=> b!98353 m!107627))

(assert (=> b!98353 m!107629))

(assert (=> b!97752 d!26297))

(declare-fun d!26299 () Bool)

(declare-fun e!64102 () Bool)

(assert (=> d!26299 e!64102))

(declare-fun res!49468 () Bool)

(assert (=> d!26299 (=> (not res!49468) (not e!64102))))

(declare-fun lt!49372 () ListLongMap!1499)

(assert (=> d!26299 (= res!49468 (contains!788 lt!49372 (_1!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(declare-fun lt!49373 () List!1564)

(assert (=> d!26299 (= lt!49372 (ListLongMap!1500 lt!49373))))

(declare-fun lt!49375 () Unit!2917)

(declare-fun lt!49374 () Unit!2917)

(assert (=> d!26299 (= lt!49375 lt!49374)))

(assert (=> d!26299 (= (getValueByKey!151 lt!49373 (_1!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26299 (= lt!49374 (lemmaContainsTupThenGetReturnValue!67 lt!49373 (_1!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26299 (= lt!49373 (insertStrictlySorted!70 (toList!765 lt!48950) (_1!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26299 (= (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!49372)))

(declare-fun b!98354 () Bool)

(declare-fun res!49467 () Bool)

(assert (=> b!98354 (=> (not res!49467) (not e!64102))))

(assert (=> b!98354 (= res!49467 (= (getValueByKey!151 (toList!765 lt!49372) (_1!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))))

(declare-fun b!98355 () Bool)

(assert (=> b!98355 (= e!64102 (contains!791 (toList!765 lt!49372) (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))

(assert (= (and d!26299 res!49468) b!98354))

(assert (= (and b!98354 res!49467) b!98355))

(declare-fun m!107631 () Bool)

(assert (=> d!26299 m!107631))

(declare-fun m!107633 () Bool)

(assert (=> d!26299 m!107633))

(declare-fun m!107635 () Bool)

(assert (=> d!26299 m!107635))

(declare-fun m!107637 () Bool)

(assert (=> d!26299 m!107637))

(declare-fun m!107639 () Bool)

(assert (=> b!98354 m!107639))

(declare-fun m!107641 () Bool)

(assert (=> b!98355 m!107641))

(assert (=> b!97752 d!26299))

(declare-fun b!98356 () Bool)

(assert (=> b!98356 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> b!98356 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))))))))

(declare-fun lt!49378 () ListLongMap!1499)

(declare-fun e!64105 () Bool)

(assert (=> b!98356 (= e!64105 (= (apply!92 lt!49378 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98357 () Bool)

(declare-fun e!64108 () Bool)

(declare-fun e!64107 () Bool)

(assert (=> b!98357 (= e!64108 e!64107)))

(declare-fun c!16721 () Bool)

(assert (=> b!98357 (= c!16721 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98358 () Bool)

(assert (=> b!98358 (= e!64108 e!64105)))

(assert (=> b!98358 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49472 () Bool)

(assert (=> b!98358 (= res!49472 (contains!788 lt!49378 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98358 (=> (not res!49472) (not e!64105))))

(declare-fun b!98359 () Bool)

(declare-fun e!64104 () ListLongMap!1499)

(declare-fun call!10016 () ListLongMap!1499)

(assert (=> b!98359 (= e!64104 call!10016)))

(declare-fun b!98360 () Bool)

(declare-fun e!64106 () Bool)

(assert (=> b!98360 (= e!64106 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98360 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26301 () Bool)

(declare-fun e!64109 () Bool)

(assert (=> d!26301 e!64109))

(declare-fun res!49471 () Bool)

(assert (=> d!26301 (=> (not res!49471) (not e!64109))))

(assert (=> d!26301 (= res!49471 (not (contains!788 lt!49378 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!64103 () ListLongMap!1499)

(assert (=> d!26301 (= lt!49378 e!64103)))

(declare-fun c!16722 () Bool)

(assert (=> d!26301 (= c!16722 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26301 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26301 (= (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49378)))

(declare-fun b!98361 () Bool)

(assert (=> b!98361 (= e!64107 (isEmpty!363 lt!49378))))

(declare-fun b!98362 () Bool)

(assert (=> b!98362 (= e!64103 (ListLongMap!1500 Nil!1561))))

(declare-fun b!98363 () Bool)

(assert (=> b!98363 (= e!64109 e!64108)))

(declare-fun c!16720 () Bool)

(assert (=> b!98363 (= c!16720 e!64106)))

(declare-fun res!49470 () Bool)

(assert (=> b!98363 (=> (not res!49470) (not e!64106))))

(assert (=> b!98363 (= res!49470 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98364 () Bool)

(declare-fun res!49469 () Bool)

(assert (=> b!98364 (=> (not res!49469) (not e!64109))))

(assert (=> b!98364 (= res!49469 (not (contains!788 lt!49378 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98365 () Bool)

(declare-fun lt!49380 () Unit!2917)

(declare-fun lt!49377 () Unit!2917)

(assert (=> b!98365 (= lt!49380 lt!49377)))

(declare-fun lt!49381 () ListLongMap!1499)

(declare-fun lt!49379 () (_ BitVec 64))

(declare-fun lt!49382 () (_ BitVec 64))

(declare-fun lt!49376 () V!3153)

(assert (=> b!98365 (not (contains!788 (+!130 lt!49381 (tuple2!2301 lt!49382 lt!49376)) lt!49379))))

(assert (=> b!98365 (= lt!49377 (addStillNotContains!42 lt!49381 lt!49382 lt!49376 lt!49379))))

(assert (=> b!98365 (= lt!49379 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98365 (= lt!49376 (get!1288 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98365 (= lt!49382 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98365 (= lt!49381 call!10016)))

(assert (=> b!98365 (= e!64104 (+!130 call!10016 (tuple2!2301 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (get!1288 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98366 () Bool)

(assert (=> b!98366 (= e!64103 e!64104)))

(declare-fun c!16723 () Bool)

(assert (=> b!98366 (= c!16723 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98367 () Bool)

(assert (=> b!98367 (= e!64107 (= lt!49378 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun bm!10013 () Bool)

(assert (=> bm!10013 (= call!10016 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) (mask!6577 newMap!16) (ite c!16512 (ite c!16518 lt!48809 lt!48810) (extraKeys!2301 newMap!16)) (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26301 c!16722) b!98362))

(assert (= (and d!26301 (not c!16722)) b!98366))

(assert (= (and b!98366 c!16723) b!98365))

(assert (= (and b!98366 (not c!16723)) b!98359))

(assert (= (or b!98365 b!98359) bm!10013))

(assert (= (and d!26301 res!49471) b!98364))

(assert (= (and b!98364 res!49469) b!98363))

(assert (= (and b!98363 res!49470) b!98360))

(assert (= (and b!98363 c!16720) b!98358))

(assert (= (and b!98363 (not c!16720)) b!98357))

(assert (= (and b!98358 res!49472) b!98356))

(assert (= (and b!98357 c!16721) b!98367))

(assert (= (and b!98357 (not c!16721)) b!98361))

(declare-fun b_lambda!4363 () Bool)

(assert (=> (not b_lambda!4363) (not b!98356)))

(assert (=> b!98356 t!5523))

(declare-fun b_and!6025 () Bool)

(assert (= b_and!6021 (and (=> t!5523 result!3271) b_and!6025)))

(assert (=> b!98356 t!5525))

(declare-fun b_and!6027 () Bool)

(assert (= b_and!6023 (and (=> t!5525 result!3273) b_and!6027)))

(declare-fun b_lambda!4365 () Bool)

(assert (=> (not b_lambda!4365) (not b!98365)))

(assert (=> b!98365 t!5523))

(declare-fun b_and!6029 () Bool)

(assert (= b_and!6025 (and (=> t!5523 result!3271) b_and!6029)))

(assert (=> b!98365 t!5525))

(declare-fun b_and!6031 () Bool)

(assert (= b_and!6027 (and (=> t!5525 result!3273) b_and!6031)))

(declare-fun m!107643 () Bool)

(assert (=> bm!10013 m!107643))

(declare-fun m!107645 () Bool)

(assert (=> d!26301 m!107645))

(assert (=> d!26301 m!106537))

(assert (=> b!98366 m!106551))

(assert (=> b!98366 m!106551))

(assert (=> b!98366 m!106599))

(declare-fun m!107647 () Bool)

(assert (=> b!98364 m!107647))

(assert (=> b!98367 m!107643))

(declare-fun m!107649 () Bool)

(assert (=> b!98361 m!107649))

(assert (=> b!98356 m!106625))

(assert (=> b!98356 m!106557))

(assert (=> b!98356 m!106629))

(assert (=> b!98356 m!106551))

(declare-fun m!107651 () Bool)

(assert (=> b!98356 m!107651))

(assert (=> b!98356 m!106551))

(assert (=> b!98356 m!106557))

(assert (=> b!98356 m!106625))

(assert (=> b!98358 m!106551))

(assert (=> b!98358 m!106551))

(declare-fun m!107653 () Bool)

(assert (=> b!98358 m!107653))

(declare-fun m!107655 () Bool)

(assert (=> b!98365 m!107655))

(declare-fun m!107657 () Bool)

(assert (=> b!98365 m!107657))

(assert (=> b!98365 m!107655))

(declare-fun m!107659 () Bool)

(assert (=> b!98365 m!107659))

(assert (=> b!98365 m!106551))

(assert (=> b!98365 m!106557))

(assert (=> b!98365 m!106625))

(assert (=> b!98365 m!106625))

(assert (=> b!98365 m!106557))

(assert (=> b!98365 m!106629))

(declare-fun m!107661 () Bool)

(assert (=> b!98365 m!107661))

(assert (=> b!98360 m!106551))

(assert (=> b!98360 m!106551))

(assert (=> b!98360 m!106599))

(assert (=> b!97752 d!26301))

(declare-fun d!26303 () Bool)

(assert (=> d!26303 (= (apply!92 (+!130 lt!48954 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48948) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48954 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) lt!48948)))))

(declare-fun bs!4063 () Bool)

(assert (= bs!4063 d!26303))

(declare-fun m!107663 () Bool)

(assert (=> bs!4063 m!107663))

(assert (=> bs!4063 m!107663))

(declare-fun m!107665 () Bool)

(assert (=> bs!4063 m!107665))

(assert (=> b!97752 d!26303))

(declare-fun d!26305 () Bool)

(assert (=> d!26305 (= (apply!92 lt!48945 lt!48942) (get!1292 (getValueByKey!151 (toList!765 lt!48945) lt!48942)))))

(declare-fun bs!4064 () Bool)

(assert (= bs!4064 d!26305))

(declare-fun m!107667 () Bool)

(assert (=> bs!4064 m!107667))

(assert (=> bs!4064 m!107667))

(declare-fun m!107669 () Bool)

(assert (=> bs!4064 m!107669))

(assert (=> b!97752 d!26305))

(declare-fun d!26307 () Bool)

(assert (=> d!26307 (= (apply!92 (+!130 lt!48945 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48942) (apply!92 lt!48945 lt!48942))))

(declare-fun lt!49383 () Unit!2917)

(assert (=> d!26307 (= lt!49383 (choose!602 lt!48945 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48942))))

(declare-fun e!64110 () Bool)

(assert (=> d!26307 e!64110))

(declare-fun res!49473 () Bool)

(assert (=> d!26307 (=> (not res!49473) (not e!64110))))

(assert (=> d!26307 (= res!49473 (contains!788 lt!48945 lt!48942))))

(assert (=> d!26307 (= (addApplyDifferent!68 lt!48945 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48942) lt!49383)))

(declare-fun b!98368 () Bool)

(assert (=> b!98368 (= e!64110 (not (= lt!48942 lt!48935)))))

(assert (= (and d!26307 res!49473) b!98368))

(declare-fun m!107671 () Bool)

(assert (=> d!26307 m!107671))

(assert (=> d!26307 m!106633))

(assert (=> d!26307 m!106635))

(assert (=> d!26307 m!106633))

(declare-fun m!107673 () Bool)

(assert (=> d!26307 m!107673))

(assert (=> d!26307 m!106661))

(assert (=> b!97752 d!26307))

(declare-fun d!26309 () Bool)

(assert (=> d!26309 (= (apply!92 (+!130 lt!48939 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48941) (apply!92 lt!48939 lt!48941))))

(declare-fun lt!49384 () Unit!2917)

(assert (=> d!26309 (= lt!49384 (choose!602 lt!48939 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48941))))

(declare-fun e!64111 () Bool)

(assert (=> d!26309 e!64111))

(declare-fun res!49474 () Bool)

(assert (=> d!26309 (=> (not res!49474) (not e!64111))))

(assert (=> d!26309 (= res!49474 (contains!788 lt!48939 lt!48941))))

(assert (=> d!26309 (= (addApplyDifferent!68 lt!48939 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)) lt!48941) lt!49384)))

(declare-fun b!98369 () Bool)

(assert (=> b!98369 (= e!64111 (not (= lt!48941 lt!48951)))))

(assert (= (and d!26309 res!49474) b!98369))

(declare-fun m!107675 () Bool)

(assert (=> d!26309 m!107675))

(assert (=> d!26309 m!106647))

(assert (=> d!26309 m!106649))

(assert (=> d!26309 m!106647))

(declare-fun m!107677 () Bool)

(assert (=> d!26309 m!107677))

(assert (=> d!26309 m!106651))

(assert (=> b!97752 d!26309))

(declare-fun d!26311 () Bool)

(declare-fun e!64112 () Bool)

(assert (=> d!26311 e!64112))

(declare-fun res!49476 () Bool)

(assert (=> d!26311 (=> (not res!49476) (not e!64112))))

(declare-fun lt!49385 () ListLongMap!1499)

(assert (=> d!26311 (= res!49476 (contains!788 lt!49385 (_1!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(declare-fun lt!49386 () List!1564)

(assert (=> d!26311 (= lt!49385 (ListLongMap!1500 lt!49386))))

(declare-fun lt!49388 () Unit!2917)

(declare-fun lt!49387 () Unit!2917)

(assert (=> d!26311 (= lt!49388 lt!49387)))

(assert (=> d!26311 (= (getValueByKey!151 lt!49386 (_1!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26311 (= lt!49387 (lemmaContainsTupThenGetReturnValue!67 lt!49386 (_1!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26311 (= lt!49386 (insertStrictlySorted!70 (toList!765 lt!48954) (_1!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))))))

(assert (=> d!26311 (= (+!130 lt!48954 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!49385)))

(declare-fun b!98370 () Bool)

(declare-fun res!49475 () Bool)

(assert (=> b!98370 (=> (not res!49475) (not e!64112))))

(assert (=> b!98370 (= res!49475 (= (getValueByKey!151 (toList!765 lt!49385) (_1!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))))

(declare-fun b!98371 () Bool)

(assert (=> b!98371 (= e!64112 (contains!791 (toList!765 lt!49385) (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))))))

(assert (= (and d!26311 res!49476) b!98370))

(assert (= (and b!98370 res!49475) b!98371))

(declare-fun m!107679 () Bool)

(assert (=> d!26311 m!107679))

(declare-fun m!107681 () Bool)

(assert (=> d!26311 m!107681))

(declare-fun m!107683 () Bool)

(assert (=> d!26311 m!107683))

(declare-fun m!107685 () Bool)

(assert (=> d!26311 m!107685))

(declare-fun m!107687 () Bool)

(assert (=> b!98370 m!107687))

(declare-fun m!107689 () Bool)

(assert (=> b!98371 m!107689))

(assert (=> b!97752 d!26311))

(declare-fun d!26313 () Bool)

(assert (=> d!26313 (= (apply!92 (+!130 lt!48939 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48941) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48939 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!48941)))))

(declare-fun bs!4065 () Bool)

(assert (= bs!4065 d!26313))

(declare-fun m!107691 () Bool)

(assert (=> bs!4065 m!107691))

(assert (=> bs!4065 m!107691))

(declare-fun m!107693 () Bool)

(assert (=> bs!4065 m!107693))

(assert (=> b!97752 d!26313))

(declare-fun d!26315 () Bool)

(assert (=> d!26315 (= (apply!92 (+!130 lt!48945 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!48942) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48945 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!48942)))))

(declare-fun bs!4066 () Bool)

(assert (= bs!4066 d!26315))

(declare-fun m!107695 () Bool)

(assert (=> bs!4066 m!107695))

(assert (=> bs!4066 m!107695))

(declare-fun m!107697 () Bool)

(assert (=> bs!4066 m!107697))

(assert (=> b!97752 d!26315))

(declare-fun d!26317 () Bool)

(declare-fun e!64113 () Bool)

(assert (=> d!26317 e!64113))

(declare-fun res!49478 () Bool)

(assert (=> d!26317 (=> (not res!49478) (not e!64113))))

(declare-fun lt!49389 () ListLongMap!1499)

(assert (=> d!26317 (= res!49478 (contains!788 lt!49389 (_1!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49390 () List!1564)

(assert (=> d!26317 (= lt!49389 (ListLongMap!1500 lt!49390))))

(declare-fun lt!49392 () Unit!2917)

(declare-fun lt!49391 () Unit!2917)

(assert (=> d!26317 (= lt!49392 lt!49391)))

(assert (=> d!26317 (= (getValueByKey!151 lt!49390 (_1!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26317 (= lt!49391 (lemmaContainsTupThenGetReturnValue!67 lt!49390 (_1!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26317 (= lt!49390 (insertStrictlySorted!70 (toList!765 lt!48939) (_1!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26317 (= (+!130 lt!48939 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49389)))

(declare-fun b!98372 () Bool)

(declare-fun res!49477 () Bool)

(assert (=> b!98372 (=> (not res!49477) (not e!64113))))

(assert (=> b!98372 (= res!49477 (= (getValueByKey!151 (toList!765 lt!49389) (_1!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98373 () Bool)

(assert (=> b!98373 (= e!64113 (contains!791 (toList!765 lt!49389) (tuple2!2301 lt!48951 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26317 res!49478) b!98372))

(assert (= (and b!98372 res!49477) b!98373))

(declare-fun m!107699 () Bool)

(assert (=> d!26317 m!107699))

(declare-fun m!107701 () Bool)

(assert (=> d!26317 m!107701))

(declare-fun m!107703 () Bool)

(assert (=> d!26317 m!107703))

(declare-fun m!107705 () Bool)

(assert (=> d!26317 m!107705))

(declare-fun m!107707 () Bool)

(assert (=> b!98372 m!107707))

(declare-fun m!107709 () Bool)

(assert (=> b!98373 m!107709))

(assert (=> b!97752 d!26317))

(declare-fun d!26319 () Bool)

(assert (=> d!26319 (= (apply!92 (+!130 lt!48954 (tuple2!2301 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48948) (apply!92 lt!48954 lt!48948))))

(declare-fun lt!49393 () Unit!2917)

(assert (=> d!26319 (= lt!49393 (choose!602 lt!48954 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48948))))

(declare-fun e!64114 () Bool)

(assert (=> d!26319 e!64114))

(declare-fun res!49479 () Bool)

(assert (=> d!26319 (=> (not res!49479) (not e!64114))))

(assert (=> d!26319 (= res!49479 (contains!788 lt!48954 lt!48948))))

(assert (=> d!26319 (= (addApplyDifferent!68 lt!48954 lt!48937 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48948) lt!49393)))

(declare-fun b!98374 () Bool)

(assert (=> b!98374 (= e!64114 (not (= lt!48948 lt!48937)))))

(assert (= (and d!26319 res!49479) b!98374))

(declare-fun m!107711 () Bool)

(assert (=> d!26319 m!107711))

(assert (=> d!26319 m!106655))

(assert (=> d!26319 m!106657))

(assert (=> d!26319 m!106655))

(declare-fun m!107713 () Bool)

(assert (=> d!26319 m!107713))

(assert (=> d!26319 m!106653))

(assert (=> b!97752 d!26319))

(declare-fun d!26321 () Bool)

(assert (=> d!26321 (= (apply!92 lt!48954 lt!48948) (get!1292 (getValueByKey!151 (toList!765 lt!48954) lt!48948)))))

(declare-fun bs!4067 () Bool)

(assert (= bs!4067 d!26321))

(declare-fun m!107715 () Bool)

(assert (=> bs!4067 m!107715))

(assert (=> bs!4067 m!107715))

(declare-fun m!107717 () Bool)

(assert (=> bs!4067 m!107717))

(assert (=> b!97752 d!26321))

(declare-fun d!26323 () Bool)

(declare-fun e!64115 () Bool)

(assert (=> d!26323 e!64115))

(declare-fun res!49481 () Bool)

(assert (=> d!26323 (=> (not res!49481) (not e!64115))))

(declare-fun lt!49394 () ListLongMap!1499)

(assert (=> d!26323 (= res!49481 (contains!788 lt!49394 (_1!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(declare-fun lt!49395 () List!1564)

(assert (=> d!26323 (= lt!49394 (ListLongMap!1500 lt!49395))))

(declare-fun lt!49397 () Unit!2917)

(declare-fun lt!49396 () Unit!2917)

(assert (=> d!26323 (= lt!49397 lt!49396)))

(assert (=> d!26323 (= (getValueByKey!151 lt!49395 (_1!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26323 (= lt!49396 (lemmaContainsTupThenGetReturnValue!67 lt!49395 (_1!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26323 (= lt!49395 (insertStrictlySorted!70 (toList!765 lt!48945) (_1!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) (_2!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (=> d!26323 (= (+!130 lt!48945 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))) lt!49394)))

(declare-fun b!98375 () Bool)

(declare-fun res!49480 () Bool)

(assert (=> b!98375 (=> (not res!49480) (not e!64115))))

(assert (=> b!98375 (= res!49480 (= (getValueByKey!151 (toList!765 lt!49394) (_1!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun b!98376 () Bool)

(assert (=> b!98376 (= e!64115 (contains!791 (toList!765 lt!49394) (tuple2!2301 lt!48935 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))

(assert (= (and d!26323 res!49481) b!98375))

(assert (= (and b!98375 res!49480) b!98376))

(declare-fun m!107719 () Bool)

(assert (=> d!26323 m!107719))

(declare-fun m!107721 () Bool)

(assert (=> d!26323 m!107721))

(declare-fun m!107723 () Bool)

(assert (=> d!26323 m!107723))

(declare-fun m!107725 () Bool)

(assert (=> d!26323 m!107725))

(declare-fun m!107727 () Bool)

(assert (=> b!98375 m!107727))

(declare-fun m!107729 () Bool)

(assert (=> b!98376 m!107729))

(assert (=> b!97752 d!26323))

(declare-fun d!26325 () Bool)

(assert (=> d!26325 (= (apply!92 lt!48939 lt!48941) (get!1292 (getValueByKey!151 (toList!765 lt!48939) lt!48941)))))

(declare-fun bs!4068 () Bool)

(assert (= bs!4068 d!26325))

(declare-fun m!107731 () Bool)

(assert (=> bs!4068 m!107731))

(assert (=> bs!4068 m!107731))

(declare-fun m!107733 () Bool)

(assert (=> bs!4068 m!107733))

(assert (=> b!97752 d!26325))

(declare-fun d!26327 () Bool)

(assert (=> d!26327 (contains!788 (+!130 lt!48950 (tuple2!2301 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)))) lt!48944)))

(declare-fun lt!49398 () Unit!2917)

(assert (=> d!26327 (= lt!49398 (choose!601 lt!48950 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48944))))

(assert (=> d!26327 (contains!788 lt!48950 lt!48944)))

(assert (=> d!26327 (= (addStillContains!68 lt!48950 lt!48946 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16)) lt!48944) lt!49398)))

(declare-fun bs!4069 () Bool)

(assert (= bs!4069 d!26327))

(assert (=> bs!4069 m!106639))

(assert (=> bs!4069 m!106639))

(assert (=> bs!4069 m!106641))

(declare-fun m!107735 () Bool)

(assert (=> bs!4069 m!107735))

(declare-fun m!107737 () Bool)

(assert (=> bs!4069 m!107737))

(assert (=> b!97752 d!26327))

(declare-fun d!26329 () Bool)

(assert (=> d!26329 (= (get!1291 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98026 d!26329))

(declare-fun b!98377 () Bool)

(declare-fun e!64118 () Bool)

(declare-fun e!64116 () Bool)

(assert (=> b!98377 (= e!64118 e!64116)))

(declare-fun lt!49399 () (_ BitVec 64))

(assert (=> b!98377 (= lt!49399 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!49400 () Unit!2917)

(assert (=> b!98377 (= lt!49400 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4170 newMap!16) lt!49399 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!98377 (arrayContainsKey!0 (_keys!4170 newMap!16) lt!49399 #b00000000000000000000000000000000)))

(declare-fun lt!49401 () Unit!2917)

(assert (=> b!98377 (= lt!49401 lt!49400)))

(declare-fun res!49482 () Bool)

(assert (=> b!98377 (= res!49482 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4170 newMap!16) (mask!6577 newMap!16)) (Found!247 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!98377 (=> (not res!49482) (not e!64116))))

(declare-fun b!98378 () Bool)

(declare-fun call!10017 () Bool)

(assert (=> b!98378 (= e!64116 call!10017)))

(declare-fun b!98379 () Bool)

(assert (=> b!98379 (= e!64118 call!10017)))

(declare-fun d!26331 () Bool)

(declare-fun res!49483 () Bool)

(declare-fun e!64117 () Bool)

(assert (=> d!26331 (=> res!49483 e!64117)))

(assert (=> d!26331 (= res!49483 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26331 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4170 newMap!16) (mask!6577 newMap!16)) e!64117)))

(declare-fun b!98380 () Bool)

(assert (=> b!98380 (= e!64117 e!64118)))

(declare-fun c!16724 () Bool)

(assert (=> b!98380 (= c!16724 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10014 () Bool)

(assert (=> bm!10014 (= call!10017 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (= (and d!26331 (not res!49483)) b!98380))

(assert (= (and b!98380 c!16724) b!98377))

(assert (= (and b!98380 (not c!16724)) b!98379))

(assert (= (and b!98377 res!49482) b!98378))

(assert (= (or b!98378 b!98379) bm!10014))

(assert (=> b!98377 m!107251))

(declare-fun m!107739 () Bool)

(assert (=> b!98377 m!107739))

(declare-fun m!107741 () Bool)

(assert (=> b!98377 m!107741))

(assert (=> b!98377 m!107251))

(declare-fun m!107743 () Bool)

(assert (=> b!98377 m!107743))

(assert (=> b!98380 m!107251))

(assert (=> b!98380 m!107251))

(assert (=> b!98380 m!107253))

(declare-fun m!107745 () Bool)

(assert (=> bm!10014 m!107745))

(assert (=> bm!9970 d!26331))

(declare-fun b!98381 () Bool)

(declare-fun e!64120 () (_ BitVec 32))

(assert (=> b!98381 (= e!64120 #b00000000000000000000000000000000)))

(declare-fun b!98382 () Bool)

(declare-fun e!64119 () (_ BitVec 32))

(declare-fun call!10018 () (_ BitVec 32))

(assert (=> b!98382 (= e!64119 call!10018)))

(declare-fun b!98383 () Bool)

(assert (=> b!98383 (= e!64119 (bvadd #b00000000000000000000000000000001 call!10018))))

(declare-fun d!26333 () Bool)

(declare-fun lt!49402 () (_ BitVec 32))

(assert (=> d!26333 (and (bvsge lt!49402 #b00000000000000000000000000000000) (bvsle lt!49402 (bvsub (size!2256 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!26333 (= lt!49402 e!64120)))

(declare-fun c!16726 () Bool)

(assert (=> d!26333 (= c!16726 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26333 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2256 (_keys!4170 newMap!16)) (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26333 (= (arrayCountValidKeys!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))) lt!49402)))

(declare-fun bm!10015 () Bool)

(assert (=> bm!10015 (= call!10018 (arrayCountValidKeys!0 (_keys!4170 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98384 () Bool)

(assert (=> b!98384 (= e!64120 e!64119)))

(declare-fun c!16725 () Bool)

(assert (=> b!98384 (= c!16725 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!26333 c!16726) b!98381))

(assert (= (and d!26333 (not c!16726)) b!98384))

(assert (= (and b!98384 c!16725) b!98383))

(assert (= (and b!98384 (not c!16725)) b!98382))

(assert (= (or b!98383 b!98382) bm!10015))

(declare-fun m!107747 () Bool)

(assert (=> bm!10015 m!107747))

(assert (=> b!98384 m!107251))

(assert (=> b!98384 m!107251))

(assert (=> b!98384 m!107253))

(assert (=> bm!9960 d!26333))

(declare-fun lt!49403 () Bool)

(declare-fun d!26335 () Bool)

(assert (=> d!26335 (= lt!49403 (select (content!103 (toList!765 lt!49046)) (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun e!64121 () Bool)

(assert (=> d!26335 (= lt!49403 e!64121)))

(declare-fun res!49484 () Bool)

(assert (=> d!26335 (=> (not res!49484) (not e!64121))))

(assert (=> d!26335 (= res!49484 ((_ is Cons!1560) (toList!765 lt!49046)))))

(assert (=> d!26335 (= (contains!791 (toList!765 lt!49046) (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49403)))

(declare-fun b!98385 () Bool)

(declare-fun e!64122 () Bool)

(assert (=> b!98385 (= e!64121 e!64122)))

(declare-fun res!49485 () Bool)

(assert (=> b!98385 (=> res!49485 e!64122)))

(assert (=> b!98385 (= res!49485 (= (h!2154 (toList!765 lt!49046)) (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98386 () Bool)

(assert (=> b!98386 (= e!64122 (contains!791 (t!5510 (toList!765 lt!49046)) (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26335 res!49484) b!98385))

(assert (= (and b!98385 (not res!49485)) b!98386))

(declare-fun m!107749 () Bool)

(assert (=> d!26335 m!107749))

(declare-fun m!107751 () Bool)

(assert (=> d!26335 m!107751))

(declare-fun m!107753 () Bool)

(assert (=> b!98386 m!107753))

(assert (=> b!97912 d!26335))

(declare-fun b!98387 () Bool)

(declare-fun e!64125 () Bool)

(declare-fun e!64123 () Bool)

(assert (=> b!98387 (= e!64125 e!64123)))

(declare-fun lt!49404 () (_ BitVec 64))

(assert (=> b!98387 (= lt!49404 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000))))

(declare-fun lt!49405 () Unit!2917)

(assert (=> b!98387 (= lt!49405 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4170 (_2!1160 lt!48807)) lt!49404 #b00000000000000000000000000000000))))

(assert (=> b!98387 (arrayContainsKey!0 (_keys!4170 (_2!1160 lt!48807)) lt!49404 #b00000000000000000000000000000000)))

(declare-fun lt!49406 () Unit!2917)

(assert (=> b!98387 (= lt!49406 lt!49405)))

(declare-fun res!49486 () Bool)

(assert (=> b!98387 (= res!49486 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000) (_keys!4170 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807))) (Found!247 #b00000000000000000000000000000000)))))

(assert (=> b!98387 (=> (not res!49486) (not e!64123))))

(declare-fun b!98388 () Bool)

(declare-fun call!10019 () Bool)

(assert (=> b!98388 (= e!64123 call!10019)))

(declare-fun b!98389 () Bool)

(assert (=> b!98389 (= e!64125 call!10019)))

(declare-fun d!26337 () Bool)

(declare-fun res!49487 () Bool)

(declare-fun e!64124 () Bool)

(assert (=> d!26337 (=> res!49487 e!64124)))

(assert (=> d!26337 (= res!49487 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(assert (=> d!26337 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807))) e!64124)))

(declare-fun b!98390 () Bool)

(assert (=> b!98390 (= e!64124 e!64125)))

(declare-fun c!16727 () Bool)

(assert (=> b!98390 (= c!16727 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(declare-fun bm!10016 () Bool)

(assert (=> bm!10016 (= call!10019 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4170 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807))))))

(assert (= (and d!26337 (not res!49487)) b!98390))

(assert (= (and b!98390 c!16727) b!98387))

(assert (= (and b!98390 (not c!16727)) b!98389))

(assert (= (and b!98387 res!49486) b!98388))

(assert (= (or b!98388 b!98389) bm!10016))

(assert (=> b!98387 m!107445))

(declare-fun m!107755 () Bool)

(assert (=> b!98387 m!107755))

(declare-fun m!107757 () Bool)

(assert (=> b!98387 m!107757))

(assert (=> b!98387 m!107445))

(declare-fun m!107759 () Bool)

(assert (=> b!98387 m!107759))

(assert (=> b!98390 m!107445))

(assert (=> b!98390 m!107445))

(assert (=> b!98390 m!107447))

(declare-fun m!107761 () Bool)

(assert (=> bm!10016 m!107761))

(assert (=> b!97850 d!26337))

(declare-fun d!26339 () Bool)

(declare-fun isEmpty!364 (List!1564) Bool)

(assert (=> d!26339 (= (isEmpty!363 lt!49066) (isEmpty!364 (toList!765 lt!49066)))))

(declare-fun bs!4070 () Bool)

(assert (= bs!4070 d!26339))

(declare-fun m!107763 () Bool)

(assert (=> bs!4070 m!107763))

(assert (=> b!97942 d!26339))

(declare-fun d!26341 () Bool)

(declare-fun e!64126 () Bool)

(assert (=> d!26341 e!64126))

(declare-fun res!49488 () Bool)

(assert (=> d!26341 (=> res!49488 e!64126)))

(declare-fun lt!49407 () Bool)

(assert (=> d!26341 (= res!49488 (not lt!49407))))

(declare-fun lt!49410 () Bool)

(assert (=> d!26341 (= lt!49407 lt!49410)))

(declare-fun lt!49408 () Unit!2917)

(declare-fun e!64127 () Unit!2917)

(assert (=> d!26341 (= lt!49408 e!64127)))

(declare-fun c!16728 () Bool)

(assert (=> d!26341 (= c!16728 lt!49410)))

(assert (=> d!26341 (= lt!49410 (containsKey!154 (toList!765 lt!48938) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26341 (= (contains!788 lt!48938 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) lt!49407)))

(declare-fun b!98391 () Bool)

(declare-fun lt!49409 () Unit!2917)

(assert (=> b!98391 (= e!64127 lt!49409)))

(assert (=> b!98391 (= lt!49409 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48938) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98391 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98392 () Bool)

(declare-fun Unit!2958 () Unit!2917)

(assert (=> b!98392 (= e!64127 Unit!2958)))

(declare-fun b!98393 () Bool)

(assert (=> b!98393 (= e!64126 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26341 c!16728) b!98391))

(assert (= (and d!26341 (not c!16728)) b!98392))

(assert (= (and d!26341 (not res!49488)) b!98393))

(assert (=> d!26341 m!106551))

(declare-fun m!107765 () Bool)

(assert (=> d!26341 m!107765))

(assert (=> b!98391 m!106551))

(declare-fun m!107767 () Bool)

(assert (=> b!98391 m!107767))

(assert (=> b!98391 m!106551))

(declare-fun m!107769 () Bool)

(assert (=> b!98391 m!107769))

(assert (=> b!98391 m!107769))

(declare-fun m!107771 () Bool)

(assert (=> b!98391 m!107771))

(assert (=> b!98393 m!106551))

(assert (=> b!98393 m!107769))

(assert (=> b!98393 m!107769))

(assert (=> b!98393 m!107771))

(assert (=> b!97749 d!26341))

(declare-fun b!98394 () Bool)

(declare-fun e!64128 () Option!157)

(assert (=> b!98394 (= e!64128 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49071)))))))

(declare-fun b!98397 () Bool)

(declare-fun e!64129 () Option!157)

(assert (=> b!98397 (= e!64129 None!155)))

(declare-fun b!98395 () Bool)

(assert (=> b!98395 (= e!64128 e!64129)))

(declare-fun c!16730 () Bool)

(assert (=> b!98395 (= c!16730 (and ((_ is Cons!1560) (toList!765 lt!49071)) (not (= (_1!1161 (h!2154 (toList!765 lt!49071))) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16729 () Bool)

(declare-fun d!26343 () Bool)

(assert (=> d!26343 (= c!16729 (and ((_ is Cons!1560) (toList!765 lt!49071)) (= (_1!1161 (h!2154 (toList!765 lt!49071))) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26343 (= (getValueByKey!151 (toList!765 lt!49071) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64128)))

(declare-fun b!98396 () Bool)

(assert (=> b!98396 (= e!64129 (getValueByKey!151 (t!5510 (toList!765 lt!49071)) (_1!1161 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26343 c!16729) b!98394))

(assert (= (and d!26343 (not c!16729)) b!98395))

(assert (= (and b!98395 c!16730) b!98396))

(assert (= (and b!98395 (not c!16730)) b!98397))

(declare-fun m!107773 () Bool)

(assert (=> b!98396 m!107773))

(assert (=> b!97949 d!26343))

(declare-fun d!26345 () Bool)

(assert (=> d!26345 (arrayContainsKey!0 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000)))

(declare-fun lt!49413 () Unit!2917)

(declare-fun choose!13 (array!4223 (_ BitVec 64) (_ BitVec 32)) Unit!2917)

(assert (=> d!26345 (= lt!49413 (choose!13 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000))))

(assert (=> d!26345 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26345 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000) lt!49413)))

(declare-fun bs!4071 () Bool)

(assert (= bs!4071 d!26345))

(assert (=> bs!4071 m!106843))

(declare-fun m!107775 () Bool)

(assert (=> bs!4071 m!107775))

(assert (=> b!97905 d!26345))

(declare-fun d!26347 () Bool)

(declare-fun res!49489 () Bool)

(declare-fun e!64130 () Bool)

(assert (=> d!26347 (=> res!49489 e!64130)))

(assert (=> d!26347 (= res!49489 (= (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) lt!49039))))

(assert (=> d!26347 (= (arrayContainsKey!0 (_keys!4170 newMap!16) lt!49039 #b00000000000000000000000000000000) e!64130)))

(declare-fun b!98398 () Bool)

(declare-fun e!64131 () Bool)

(assert (=> b!98398 (= e!64130 e!64131)))

(declare-fun res!49490 () Bool)

(assert (=> b!98398 (=> (not res!49490) (not e!64131))))

(assert (=> b!98398 (= res!49490 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98399 () Bool)

(assert (=> b!98399 (= e!64131 (arrayContainsKey!0 (_keys!4170 newMap!16) lt!49039 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26347 (not res!49489)) b!98398))

(assert (= (and b!98398 res!49490) b!98399))

(assert (=> d!26347 m!106551))

(declare-fun m!107777 () Bool)

(assert (=> b!98399 m!107777))

(assert (=> b!97905 d!26347))

(declare-fun b!98400 () Bool)

(declare-fun e!64133 () SeekEntryResult!247)

(declare-fun lt!49416 () SeekEntryResult!247)

(assert (=> b!98400 (= e!64133 (Found!247 (index!3133 lt!49416)))))

(declare-fun b!98401 () Bool)

(declare-fun c!16731 () Bool)

(declare-fun lt!49414 () (_ BitVec 64))

(assert (=> b!98401 (= c!16731 (= lt!49414 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64132 () SeekEntryResult!247)

(assert (=> b!98401 (= e!64133 e!64132)))

(declare-fun b!98402 () Bool)

(assert (=> b!98402 (= e!64132 (seekKeyOrZeroReturnVacant!0 (x!12953 lt!49416) (index!3133 lt!49416) (index!3133 lt!49416) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(declare-fun d!26349 () Bool)

(declare-fun lt!49415 () SeekEntryResult!247)

(assert (=> d!26349 (and (or ((_ is Undefined!247) lt!49415) (not ((_ is Found!247) lt!49415)) (and (bvsge (index!3132 lt!49415) #b00000000000000000000000000000000) (bvslt (index!3132 lt!49415) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!49415) ((_ is Found!247) lt!49415) (not ((_ is MissingZero!247) lt!49415)) (and (bvsge (index!3131 lt!49415) #b00000000000000000000000000000000) (bvslt (index!3131 lt!49415) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!49415) ((_ is Found!247) lt!49415) ((_ is MissingZero!247) lt!49415) (not ((_ is MissingVacant!247) lt!49415)) (and (bvsge (index!3134 lt!49415) #b00000000000000000000000000000000) (bvslt (index!3134 lt!49415) (size!2256 (_keys!4170 newMap!16))))) (or ((_ is Undefined!247) lt!49415) (ite ((_ is Found!247) lt!49415) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!49415)) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!247) lt!49415) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!49415)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!247) lt!49415) (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!49415)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64134 () SeekEntryResult!247)

(assert (=> d!26349 (= lt!49415 e!64134)))

(declare-fun c!16732 () Bool)

(assert (=> d!26349 (= c!16732 (and ((_ is Intermediate!247) lt!49416) (undefined!1059 lt!49416)))))

(assert (=> d!26349 (= lt!49416 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (mask!6577 newMap!16)) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (=> d!26349 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26349 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (_keys!4170 newMap!16) (mask!6577 newMap!16)) lt!49415)))

(declare-fun b!98403 () Bool)

(assert (=> b!98403 (= e!64134 Undefined!247)))

(declare-fun b!98404 () Bool)

(assert (=> b!98404 (= e!64132 (MissingZero!247 (index!3133 lt!49416)))))

(declare-fun b!98405 () Bool)

(assert (=> b!98405 (= e!64134 e!64133)))

(assert (=> b!98405 (= lt!49414 (select (arr!2006 (_keys!4170 newMap!16)) (index!3133 lt!49416)))))

(declare-fun c!16733 () Bool)

(assert (=> b!98405 (= c!16733 (= lt!49414 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26349 c!16732) b!98403))

(assert (= (and d!26349 (not c!16732)) b!98405))

(assert (= (and b!98405 c!16733) b!98400))

(assert (= (and b!98405 (not c!16733)) b!98401))

(assert (= (and b!98401 c!16731) b!98404))

(assert (= (and b!98401 (not c!16731)) b!98402))

(assert (=> b!98402 m!106551))

(declare-fun m!107779 () Bool)

(assert (=> b!98402 m!107779))

(declare-fun m!107781 () Bool)

(assert (=> d!26349 m!107781))

(assert (=> d!26349 m!106551))

(declare-fun m!107783 () Bool)

(assert (=> d!26349 m!107783))

(declare-fun m!107785 () Bool)

(assert (=> d!26349 m!107785))

(assert (=> d!26349 m!106537))

(declare-fun m!107787 () Bool)

(assert (=> d!26349 m!107787))

(assert (=> d!26349 m!107783))

(assert (=> d!26349 m!106551))

(declare-fun m!107789 () Bool)

(assert (=> d!26349 m!107789))

(declare-fun m!107791 () Bool)

(assert (=> b!98405 m!107791))

(assert (=> b!97905 d!26349))

(assert (=> b!97997 d!25993))

(declare-fun b!98406 () Bool)

(declare-fun e!64137 () Bool)

(declare-fun call!10020 () Bool)

(assert (=> b!98406 (= e!64137 call!10020)))

(declare-fun b!98407 () Bool)

(assert (=> b!98407 (= e!64137 call!10020)))

(declare-fun b!98408 () Bool)

(declare-fun e!64136 () Bool)

(declare-fun e!64138 () Bool)

(assert (=> b!98408 (= e!64136 e!64138)))

(declare-fun res!49491 () Bool)

(assert (=> b!98408 (=> (not res!49491) (not e!64138))))

(declare-fun e!64135 () Bool)

(assert (=> b!98408 (= res!49491 (not e!64135))))

(declare-fun res!49492 () Bool)

(assert (=> b!98408 (=> (not res!49492) (not e!64135))))

(assert (=> b!98408 (= res!49492 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!10017 () Bool)

(declare-fun c!16734 () Bool)

(assert (=> bm!10017 (= call!10020 (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16734 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16624 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562))) (ite c!16624 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)))))))

(declare-fun b!98410 () Bool)

(assert (=> b!98410 (= e!64138 e!64137)))

(assert (=> b!98410 (= c!16734 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!26351 () Bool)

(declare-fun res!49493 () Bool)

(assert (=> d!26351 (=> res!49493 e!64136)))

(assert (=> d!26351 (= res!49493 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26351 (= (arrayNoDuplicates!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16624 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562))) e!64136)))

(declare-fun b!98409 () Bool)

(assert (=> b!98409 (= e!64135 (contains!790 (ite c!16624 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (ite c!16477 (Cons!1561 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) Nil!1562) Nil!1562)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!26351 (not res!49493)) b!98408))

(assert (= (and b!98408 res!49492) b!98409))

(assert (= (and b!98408 res!49491) b!98410))

(assert (= (and b!98410 c!16734) b!98406))

(assert (= (and b!98410 (not c!16734)) b!98407))

(assert (= (or b!98406 b!98407) bm!10017))

(declare-fun m!107793 () Bool)

(assert (=> b!98408 m!107793))

(assert (=> b!98408 m!107793))

(declare-fun m!107795 () Bool)

(assert (=> b!98408 m!107795))

(assert (=> bm!10017 m!107793))

(declare-fun m!107797 () Bool)

(assert (=> bm!10017 m!107797))

(assert (=> b!98410 m!107793))

(assert (=> b!98410 m!107793))

(assert (=> b!98410 m!107795))

(assert (=> b!98409 m!107793))

(assert (=> b!98409 m!107793))

(declare-fun m!107799 () Bool)

(assert (=> b!98409 m!107799))

(assert (=> bm!9986 d!26351))

(declare-fun d!26353 () Bool)

(assert (=> d!26353 (= (isEmpty!362 (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) (not ((_ is Some!156) (getValueByKey!151 (toList!765 lt!48683) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(assert (=> d!26025 d!26353))

(declare-fun b!98411 () Bool)

(declare-fun e!64139 () Option!157)

(assert (=> b!98411 (= e!64139 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49181)))))))

(declare-fun b!98414 () Bool)

(declare-fun e!64140 () Option!157)

(assert (=> b!98414 (= e!64140 None!155)))

(declare-fun b!98412 () Bool)

(assert (=> b!98412 (= e!64139 e!64140)))

(declare-fun c!16736 () Bool)

(assert (=> b!98412 (= c!16736 (and ((_ is Cons!1560) (toList!765 lt!49181)) (not (= (_1!1161 (h!2154 (toList!765 lt!49181))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun d!26355 () Bool)

(declare-fun c!16735 () Bool)

(assert (=> d!26355 (= c!16735 (and ((_ is Cons!1560) (toList!765 lt!49181)) (= (_1!1161 (h!2154 (toList!765 lt!49181))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26355 (= (getValueByKey!151 (toList!765 lt!49181) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64139)))

(declare-fun b!98413 () Bool)

(assert (=> b!98413 (= e!64140 (getValueByKey!151 (t!5510 (toList!765 lt!49181)) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26355 c!16735) b!98411))

(assert (= (and d!26355 (not c!16735)) b!98412))

(assert (= (and b!98412 c!16736) b!98413))

(assert (= (and b!98412 (not c!16736)) b!98414))

(declare-fun m!107801 () Bool)

(assert (=> b!98413 m!107801))

(assert (=> b!98014 d!26355))

(declare-fun d!26357 () Bool)

(declare-fun res!49494 () Bool)

(declare-fun e!64141 () Bool)

(assert (=> d!26357 (=> res!49494 e!64141)))

(assert (=> d!26357 (= res!49494 (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26357 (= (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!64141)))

(declare-fun b!98415 () Bool)

(declare-fun e!64142 () Bool)

(assert (=> b!98415 (= e!64141 e!64142)))

(declare-fun res!49495 () Bool)

(assert (=> b!98415 (=> (not res!49495) (not e!64142))))

(assert (=> b!98415 (= res!49495 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98416 () Bool)

(assert (=> b!98416 (= e!64142 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26357 (not res!49494)) b!98415))

(assert (= (and b!98415 res!49495) b!98416))

(declare-fun m!107803 () Bool)

(assert (=> d!26357 m!107803))

(assert (=> b!98416 m!106251))

(declare-fun m!107805 () Bool)

(assert (=> b!98416 m!107805))

(assert (=> b!97853 d!26357))

(declare-fun d!26359 () Bool)

(declare-fun e!64143 () Bool)

(assert (=> d!26359 e!64143))

(declare-fun res!49497 () Bool)

(assert (=> d!26359 (=> (not res!49497) (not e!64143))))

(declare-fun lt!49417 () ListLongMap!1499)

(assert (=> d!26359 (= res!49497 (contains!788 lt!49417 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49418 () List!1564)

(assert (=> d!26359 (= lt!49417 (ListLongMap!1500 lt!49418))))

(declare-fun lt!49420 () Unit!2917)

(declare-fun lt!49419 () Unit!2917)

(assert (=> d!26359 (= lt!49420 lt!49419)))

(assert (=> d!26359 (= (getValueByKey!151 lt!49418 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26359 (= lt!49419 (lemmaContainsTupThenGetReturnValue!67 lt!49418 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26359 (= lt!49418 (insertStrictlySorted!70 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26359 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49417)))

(declare-fun b!98417 () Bool)

(declare-fun res!49496 () Bool)

(assert (=> b!98417 (=> (not res!49496) (not e!64143))))

(assert (=> b!98417 (= res!49496 (= (getValueByKey!151 (toList!765 lt!49417) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98418 () Bool)

(assert (=> b!98418 (= e!64143 (contains!791 (toList!765 lt!49417) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26359 res!49497) b!98417))

(assert (= (and b!98417 res!49496) b!98418))

(declare-fun m!107807 () Bool)

(assert (=> d!26359 m!107807))

(declare-fun m!107809 () Bool)

(assert (=> d!26359 m!107809))

(declare-fun m!107811 () Bool)

(assert (=> d!26359 m!107811))

(declare-fun m!107813 () Bool)

(assert (=> d!26359 m!107813))

(declare-fun m!107815 () Bool)

(assert (=> b!98417 m!107815))

(declare-fun m!107817 () Bool)

(assert (=> b!98418 m!107817))

(assert (=> d!26069 d!26359))

(declare-fun d!26361 () Bool)

(declare-fun e!64144 () Bool)

(assert (=> d!26361 e!64144))

(declare-fun res!49498 () Bool)

(assert (=> d!26361 (=> (not res!49498) (not e!64144))))

(assert (=> d!26361 (= res!49498 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 lt!49156))))))

(declare-fun lt!49421 () Unit!2917)

(assert (=> d!26361 (= lt!49421 (choose!596 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26361 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26361 (= (lemmaValidKeyInArrayIsInListMap!101 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (defaultEntry!2480 newMap!16)) lt!49421)))

(declare-fun b!98419 () Bool)

(assert (=> b!98419 (= e!64144 (contains!788 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 lt!49156) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(assert (= (and d!26361 res!49498) b!98419))

(declare-fun m!107819 () Bool)

(assert (=> d!26361 m!107819))

(assert (=> d!26361 m!106537))

(assert (=> b!98419 m!106981))

(declare-fun m!107821 () Bool)

(assert (=> b!98419 m!107821))

(assert (=> b!98419 m!106981))

(assert (=> b!98419 m!107821))

(declare-fun m!107823 () Bool)

(assert (=> b!98419 m!107823))

(assert (=> d!26069 d!26361))

(declare-fun d!26363 () Bool)

(declare-fun e!64147 () Bool)

(assert (=> d!26363 e!64147))

(declare-fun res!49501 () Bool)

(assert (=> d!26363 (=> (not res!49501) (not e!64147))))

(assert (=> d!26363 (= res!49501 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 (_keys!4170 newMap!16)))))))

(declare-fun lt!49424 () Unit!2917)

(declare-fun choose!102 ((_ BitVec 64) array!4223 (_ BitVec 32) (_ BitVec 32)) Unit!2917)

(assert (=> d!26363 (= lt!49424 (choose!102 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (mask!6577 newMap!16)))))

(assert (=> d!26363 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26363 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (mask!6577 newMap!16)) lt!49424)))

(declare-fun b!98422 () Bool)

(assert (=> b!98422 (= e!64147 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (mask!6577 newMap!16)))))

(assert (= (and d!26363 res!49501) b!98422))

(assert (=> d!26363 m!106251))

(declare-fun m!107825 () Bool)

(assert (=> d!26363 m!107825))

(assert (=> d!26363 m!106537))

(assert (=> b!98422 m!106999))

(assert (=> b!98422 m!106987))

(assert (=> d!26069 d!26363))

(assert (=> d!26069 d!25987))

(assert (=> d!26069 d!25973))

(assert (=> d!26069 d!25961))

(declare-fun d!26365 () Bool)

(assert (=> d!26365 (= (arrayCountValidKeys!0 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!49427 () Unit!2917)

(declare-fun choose!2 (array!4223 (_ BitVec 32)) Unit!2917)

(assert (=> d!26365 (= lt!49427 (choose!2 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(declare-fun e!64150 () Bool)

(assert (=> d!26365 e!64150))

(declare-fun res!49506 () Bool)

(assert (=> d!26365 (=> (not res!49506) (not e!64150))))

(assert (=> d!26365 (= res!49506 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 lt!49180))))))

(assert (=> d!26365 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))) lt!49427)))

(declare-fun b!98427 () Bool)

(declare-fun res!49507 () Bool)

(assert (=> b!98427 (=> (not res!49507) (not e!64150))))

(assert (=> b!98427 (= res!49507 (validKeyInArray!0 (select (arr!2006 lt!49180) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(declare-fun b!98428 () Bool)

(assert (=> b!98428 (= e!64150 (bvslt (size!2256 lt!49180) #b01111111111111111111111111111111))))

(assert (= (and d!26365 res!49506) b!98427))

(assert (= (and b!98427 res!49507) b!98428))

(assert (=> d!26365 m!107011))

(declare-fun m!107827 () Bool)

(assert (=> d!26365 m!107827))

(declare-fun m!107829 () Bool)

(assert (=> b!98427 m!107829))

(assert (=> b!98427 m!107829))

(declare-fun m!107831 () Bool)

(assert (=> b!98427 m!107831))

(assert (=> d!26069 d!26365))

(declare-fun d!26367 () Bool)

(declare-fun e!64153 () Bool)

(assert (=> d!26367 e!64153))

(declare-fun res!49510 () Bool)

(assert (=> d!26367 (=> (not res!49510) (not e!64153))))

(assert (=> d!26367 (= res!49510 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 (_keys!4170 newMap!16)))))))

(declare-fun lt!49430 () Unit!2917)

(declare-fun choose!41 (array!4223 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1565) Unit!2917)

(assert (=> d!26367 (= lt!49430 (choose!41 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) lt!49166 lt!49173))))

(assert (=> d!26367 (bvslt (size!2256 (_keys!4170 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26367 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) lt!49166 lt!49173) lt!49430)))

(declare-fun b!98431 () Bool)

(assert (=> b!98431 (= e!64153 (arrayNoDuplicates!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) lt!49166 lt!49173))))

(assert (= (and d!26367 res!49510) b!98431))

(assert (=> d!26367 m!106251))

(declare-fun m!107833 () Bool)

(assert (=> d!26367 m!107833))

(assert (=> b!98431 m!106999))

(assert (=> b!98431 m!106983))

(assert (=> d!26069 d!26367))

(assert (=> d!26069 d!25995))

(declare-fun b!98432 () Bool)

(declare-fun e!64155 () (_ BitVec 32))

(assert (=> b!98432 (= e!64155 #b00000000000000000000000000000000)))

(declare-fun b!98433 () Bool)

(declare-fun e!64154 () (_ BitVec 32))

(declare-fun call!10021 () (_ BitVec 32))

(assert (=> b!98433 (= e!64154 call!10021)))

(declare-fun b!98434 () Bool)

(assert (=> b!98434 (= e!64154 (bvadd #b00000000000000000000000000000001 call!10021))))

(declare-fun lt!49431 () (_ BitVec 32))

(declare-fun d!26369 () Bool)

(assert (=> d!26369 (and (bvsge lt!49431 #b00000000000000000000000000000000) (bvsle lt!49431 (bvsub (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!26369 (= lt!49431 e!64155)))

(declare-fun c!16738 () Bool)

(assert (=> d!26369 (= c!16738 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26369 (and (bvsle #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2256 (_keys!4170 newMap!16)) (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(assert (=> d!26369 (= (arrayCountValidKeys!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) lt!49431)))

(declare-fun bm!10018 () Bool)

(assert (=> bm!10018 (= call!10021 (arrayCountValidKeys!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98435 () Bool)

(assert (=> b!98435 (= e!64155 e!64154)))

(declare-fun c!16737 () Bool)

(assert (=> b!98435 (= c!16737 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26369 c!16738) b!98432))

(assert (= (and d!26369 (not c!16738)) b!98435))

(assert (= (and b!98435 c!16737) b!98434))

(assert (= (and b!98435 (not c!16737)) b!98433))

(assert (= (or b!98434 b!98433) bm!10018))

(declare-fun m!107835 () Bool)

(assert (=> bm!10018 m!107835))

(declare-fun m!107837 () Bool)

(assert (=> b!98435 m!107837))

(assert (=> b!98435 m!107837))

(declare-fun m!107839 () Bool)

(assert (=> b!98435 m!107839))

(assert (=> d!26069 d!26369))

(declare-fun d!26371 () Bool)

(declare-fun res!49511 () Bool)

(declare-fun e!64156 () Bool)

(assert (=> d!26371 (=> res!49511 e!64156)))

(assert (=> d!26371 (= res!49511 (= (select (arr!2006 lt!49172) #b00000000000000000000000000000000) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26371 (= (arrayContainsKey!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64156)))

(declare-fun b!98436 () Bool)

(declare-fun e!64157 () Bool)

(assert (=> b!98436 (= e!64156 e!64157)))

(declare-fun res!49512 () Bool)

(assert (=> b!98436 (=> (not res!49512) (not e!64157))))

(assert (=> b!98436 (= res!49512 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 lt!49172)))))

(declare-fun b!98437 () Bool)

(assert (=> b!98437 (= e!64157 (arrayContainsKey!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26371 (not res!49511)) b!98436))

(assert (= (and b!98436 res!49512) b!98437))

(declare-fun m!107841 () Bool)

(assert (=> d!26371 m!107841))

(assert (=> b!98437 m!106251))

(declare-fun m!107843 () Bool)

(assert (=> b!98437 m!107843))

(assert (=> d!26069 d!26371))

(declare-fun b!98438 () Bool)

(declare-fun e!64160 () Bool)

(declare-fun call!10022 () Bool)

(assert (=> b!98438 (= e!64160 call!10022)))

(declare-fun b!98439 () Bool)

(assert (=> b!98439 (= e!64160 call!10022)))

(declare-fun b!98440 () Bool)

(declare-fun e!64159 () Bool)

(declare-fun e!64161 () Bool)

(assert (=> b!98440 (= e!64159 e!64161)))

(declare-fun res!49513 () Bool)

(assert (=> b!98440 (=> (not res!49513) (not e!64161))))

(declare-fun e!64158 () Bool)

(assert (=> b!98440 (= res!49513 (not e!64158))))

(declare-fun res!49514 () Bool)

(assert (=> b!98440 (=> (not res!49514) (not e!64158))))

(assert (=> b!98440 (= res!49514 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) lt!49166)))))

(declare-fun c!16739 () Bool)

(declare-fun bm!10019 () Bool)

(assert (=> bm!10019 (= call!10022 (arrayNoDuplicates!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (bvadd lt!49166 #b00000000000000000000000000000001) (ite c!16739 (Cons!1561 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) lt!49166) lt!49173) lt!49173)))))

(declare-fun b!98442 () Bool)

(assert (=> b!98442 (= e!64161 e!64160)))

(assert (=> b!98442 (= c!16739 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) lt!49166)))))

(declare-fun d!26373 () Bool)

(declare-fun res!49515 () Bool)

(assert (=> d!26373 (=> res!49515 e!64159)))

(assert (=> d!26373 (= res!49515 (bvsge lt!49166 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(assert (=> d!26373 (= (arrayNoDuplicates!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) lt!49166 lt!49173) e!64159)))

(declare-fun b!98441 () Bool)

(assert (=> b!98441 (= e!64158 (contains!790 lt!49173 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) lt!49166)))))

(assert (= (and d!26373 (not res!49515)) b!98440))

(assert (= (and b!98440 res!49514) b!98441))

(assert (= (and b!98440 res!49513) b!98442))

(assert (= (and b!98442 c!16739) b!98438))

(assert (= (and b!98442 (not c!16739)) b!98439))

(assert (= (or b!98438 b!98439) bm!10019))

(declare-fun m!107845 () Bool)

(assert (=> b!98440 m!107845))

(assert (=> b!98440 m!107845))

(declare-fun m!107847 () Bool)

(assert (=> b!98440 m!107847))

(assert (=> bm!10019 m!107845))

(declare-fun m!107849 () Bool)

(assert (=> bm!10019 m!107849))

(assert (=> b!98442 m!107845))

(assert (=> b!98442 m!107845))

(assert (=> b!98442 m!107847))

(assert (=> b!98441 m!107845))

(assert (=> b!98441 m!107845))

(declare-fun m!107851 () Bool)

(assert (=> b!98441 m!107851))

(assert (=> d!26069 d!26373))

(declare-fun d!26375 () Bool)

(declare-fun e!64164 () Bool)

(assert (=> d!26375 e!64164))

(declare-fun res!49518 () Bool)

(assert (=> d!26375 (=> (not res!49518) (not e!64164))))

(assert (=> d!26375 (= res!49518 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 (_keys!4170 newMap!16))) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2257 (_values!2463 newMap!16)))))))

(declare-fun lt!49434 () Unit!2917)

(declare-fun choose!607 (array!4223 array!4225 (_ BitVec 32) (_ BitVec 32) V!3153 V!3153 (_ BitVec 32) (_ BitVec 64) V!3153 Int) Unit!2917)

(assert (=> d!26375 (= lt!49434 (choose!607 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)))))

(assert (=> d!26375 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26375 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) lt!49434)))

(declare-fun b!98445 () Bool)

(assert (=> b!98445 (= e!64164 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))))

(assert (= (and d!26375 res!49518) b!98445))

(assert (=> d!26375 m!106251))

(assert (=> d!26375 m!106277))

(declare-fun m!107853 () Bool)

(assert (=> d!26375 m!107853))

(assert (=> d!26375 m!106537))

(assert (=> b!98445 m!107015))

(assert (=> b!98445 m!106413))

(assert (=> b!98445 m!106677))

(assert (=> b!98445 m!106999))

(assert (=> b!98445 m!106997))

(assert (=> b!98445 m!106413))

(assert (=> d!26069 d!26375))

(declare-fun d!26377 () Bool)

(declare-fun e!64170 () Bool)

(assert (=> d!26377 e!64170))

(declare-fun res!49528 () Bool)

(assert (=> d!26377 (=> (not res!49528) (not e!64170))))

(assert (=> d!26377 (= res!49528 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 (_keys!4170 newMap!16)))))))

(declare-fun lt!49437 () Unit!2917)

(declare-fun choose!1 (array!4223 (_ BitVec 32) (_ BitVec 64)) Unit!2917)

(assert (=> d!26377 (= lt!49437 (choose!1 (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!64169 () Bool)

(assert (=> d!26377 e!64169))

(declare-fun res!49530 () Bool)

(assert (=> d!26377 (=> (not res!49530) (not e!64169))))

(assert (=> d!26377 (= res!49530 (and (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvslt (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (size!2256 (_keys!4170 newMap!16)))))))

(assert (=> d!26377 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4170 newMap!16) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!49437)))

(declare-fun b!98457 () Bool)

(assert (=> b!98457 (= e!64170 (= (arrayCountValidKeys!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4170 newMap!16) #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!98455 () Bool)

(declare-fun res!49527 () Bool)

(assert (=> b!98455 (=> (not res!49527) (not e!64169))))

(assert (=> b!98455 (= res!49527 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!98456 () Bool)

(assert (=> b!98456 (= e!64169 (bvslt (size!2256 (_keys!4170 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!98454 () Bool)

(declare-fun res!49529 () Bool)

(assert (=> b!98454 (=> (not res!49529) (not e!64169))))

(assert (=> b!98454 (= res!49529 (not (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))))

(assert (= (and d!26377 res!49530) b!98454))

(assert (= (and b!98454 res!49529) b!98455))

(assert (= (and b!98455 res!49527) b!98456))

(assert (= (and d!26377 res!49528) b!98457))

(assert (=> d!26377 m!106251))

(declare-fun m!107855 () Bool)

(assert (=> d!26377 m!107855))

(assert (=> b!98457 m!106999))

(assert (=> b!98457 m!107003))

(assert (=> b!98457 m!106519))

(assert (=> b!98455 m!106251))

(assert (=> b!98455 m!106387))

(declare-fun m!107857 () Bool)

(assert (=> b!98454 m!107857))

(assert (=> b!98454 m!107857))

(declare-fun m!107859 () Bool)

(assert (=> b!98454 m!107859))

(assert (=> d!26069 d!26377))

(declare-fun b!98458 () Bool)

(declare-fun e!64173 () Bool)

(declare-fun call!10029 () Bool)

(assert (=> b!98458 (= e!64173 (not call!10029))))

(declare-fun b!98459 () Bool)

(declare-fun e!64178 () Bool)

(declare-fun e!64175 () Bool)

(assert (=> b!98459 (= e!64178 e!64175)))

(declare-fun res!49536 () Bool)

(assert (=> b!98459 (=> (not res!49536) (not e!64175))))

(declare-fun lt!49443 () ListLongMap!1499)

(assert (=> b!98459 (= res!49536 (contains!788 lt!49443 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!98459 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun b!98460 () Bool)

(assert (=> b!98460 (= e!64175 (= (apply!92 lt!49443 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))))))

(assert (=> b!98460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun bm!10020 () Bool)

(declare-fun call!10023 () Bool)

(assert (=> bm!10020 (= call!10023 (contains!788 lt!49443 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98461 () Bool)

(declare-fun e!64180 () ListLongMap!1499)

(declare-fun call!10028 () ListLongMap!1499)

(assert (=> b!98461 (= e!64180 (+!130 call!10028 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98462 () Bool)

(declare-fun e!64172 () Unit!2917)

(declare-fun lt!49458 () Unit!2917)

(assert (=> b!98462 (= e!64172 lt!49458)))

(declare-fun lt!49455 () ListLongMap!1499)

(assert (=> b!98462 (= lt!49455 (getCurrentListMapNoExtraKeys!95 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49451 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49451 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49449 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49449 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49445 () Unit!2917)

(assert (=> b!98462 (= lt!49445 (addStillContains!68 lt!49455 lt!49451 (zeroValue!2363 newMap!16) lt!49449))))

(assert (=> b!98462 (contains!788 (+!130 lt!49455 (tuple2!2301 lt!49451 (zeroValue!2363 newMap!16))) lt!49449)))

(declare-fun lt!49454 () Unit!2917)

(assert (=> b!98462 (= lt!49454 lt!49445)))

(declare-fun lt!49444 () ListLongMap!1499)

(assert (=> b!98462 (= lt!49444 (getCurrentListMapNoExtraKeys!95 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49456 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49456 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49446 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49446 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49452 () Unit!2917)

(assert (=> b!98462 (= lt!49452 (addApplyDifferent!68 lt!49444 lt!49456 (minValue!2363 newMap!16) lt!49446))))

(assert (=> b!98462 (= (apply!92 (+!130 lt!49444 (tuple2!2301 lt!49456 (minValue!2363 newMap!16))) lt!49446) (apply!92 lt!49444 lt!49446))))

(declare-fun lt!49448 () Unit!2917)

(assert (=> b!98462 (= lt!49448 lt!49452)))

(declare-fun lt!49459 () ListLongMap!1499)

(assert (=> b!98462 (= lt!49459 (getCurrentListMapNoExtraKeys!95 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49442 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49442 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49453 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49453 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49441 () Unit!2917)

(assert (=> b!98462 (= lt!49441 (addApplyDifferent!68 lt!49459 lt!49442 (zeroValue!2363 newMap!16) lt!49453))))

(assert (=> b!98462 (= (apply!92 (+!130 lt!49459 (tuple2!2301 lt!49442 (zeroValue!2363 newMap!16))) lt!49453) (apply!92 lt!49459 lt!49453))))

(declare-fun lt!49439 () Unit!2917)

(assert (=> b!98462 (= lt!49439 lt!49441)))

(declare-fun lt!49450 () ListLongMap!1499)

(assert (=> b!98462 (= lt!49450 (getCurrentListMapNoExtraKeys!95 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49440 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49440 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49447 () (_ BitVec 64))

(assert (=> b!98462 (= lt!49447 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!98462 (= lt!49458 (addApplyDifferent!68 lt!49450 lt!49440 (minValue!2363 newMap!16) lt!49447))))

(assert (=> b!98462 (= (apply!92 (+!130 lt!49450 (tuple2!2301 lt!49440 (minValue!2363 newMap!16))) lt!49447) (apply!92 lt!49450 lt!49447))))

(declare-fun b!98463 () Bool)

(declare-fun c!16740 () Bool)

(assert (=> b!98463 (= c!16740 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64171 () ListLongMap!1499)

(declare-fun e!64176 () ListLongMap!1499)

(assert (=> b!98463 (= e!64171 e!64176)))

(declare-fun b!98464 () Bool)

(declare-fun e!64182 () Bool)

(assert (=> b!98464 (= e!64182 (= (apply!92 lt!49443 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun e!64174 () Bool)

(declare-fun b!98465 () Bool)

(assert (=> b!98465 (= e!64174 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98466 () Bool)

(declare-fun res!49537 () Bool)

(declare-fun e!64181 () Bool)

(assert (=> b!98466 (=> (not res!49537) (not e!64181))))

(declare-fun e!64183 () Bool)

(assert (=> b!98466 (= res!49537 e!64183)))

(declare-fun c!16743 () Bool)

(assert (=> b!98466 (= c!16743 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98467 () Bool)

(declare-fun call!10027 () ListLongMap!1499)

(assert (=> b!98467 (= e!64171 call!10027)))

(declare-fun bm!10021 () Bool)

(assert (=> bm!10021 (= call!10027 call!10028)))

(declare-fun b!98468 () Bool)

(assert (=> b!98468 (= e!64183 (not call!10023))))

(declare-fun b!98469 () Bool)

(declare-fun e!64179 () Bool)

(assert (=> b!98469 (= e!64179 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10022 () Bool)

(declare-fun call!10025 () ListLongMap!1499)

(declare-fun call!10024 () ListLongMap!1499)

(assert (=> bm!10022 (= call!10025 call!10024)))

(declare-fun bm!10023 () Bool)

(assert (=> bm!10023 (= call!10029 (contains!788 lt!49443 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98470 () Bool)

(assert (=> b!98470 (= e!64181 e!64173)))

(declare-fun c!16742 () Bool)

(assert (=> b!98470 (= c!16742 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98471 () Bool)

(assert (=> b!98471 (= e!64183 e!64182)))

(declare-fun res!49538 () Bool)

(assert (=> b!98471 (= res!49538 call!10023)))

(assert (=> b!98471 (=> (not res!49538) (not e!64182))))

(declare-fun b!98472 () Bool)

(declare-fun e!64177 () Bool)

(assert (=> b!98472 (= e!64173 e!64177)))

(declare-fun res!49535 () Bool)

(assert (=> b!98472 (= res!49535 call!10029)))

(assert (=> b!98472 (=> (not res!49535) (not e!64177))))

(declare-fun b!98473 () Bool)

(declare-fun res!49531 () Bool)

(assert (=> b!98473 (=> (not res!49531) (not e!64181))))

(assert (=> b!98473 (= res!49531 e!64178)))

(declare-fun res!49532 () Bool)

(assert (=> b!98473 (=> res!49532 e!64178)))

(assert (=> b!98473 (= res!49532 (not e!64179))))

(declare-fun res!49534 () Bool)

(assert (=> b!98473 (=> (not res!49534) (not e!64179))))

(assert (=> b!98473 (= res!49534 (bvslt #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun bm!10024 () Bool)

(declare-fun call!10026 () ListLongMap!1499)

(assert (=> bm!10024 (= call!10026 call!10025)))

(declare-fun b!98474 () Bool)

(assert (=> b!98474 (= e!64177 (= (apply!92 lt!49443 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!98475 () Bool)

(assert (=> b!98475 (= e!64180 e!64171)))

(declare-fun c!16741 () Bool)

(assert (=> b!98475 (= c!16741 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10025 () Bool)

(assert (=> bm!10025 (= call!10024 (getCurrentListMapNoExtraKeys!95 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98476 () Bool)

(declare-fun Unit!2959 () Unit!2917)

(assert (=> b!98476 (= e!64172 Unit!2959)))

(declare-fun b!98477 () Bool)

(assert (=> b!98477 (= e!64176 call!10026)))

(declare-fun b!98478 () Bool)

(assert (=> b!98478 (= e!64176 call!10027)))

(declare-fun c!16745 () Bool)

(declare-fun bm!10026 () Bool)

(assert (=> bm!10026 (= call!10028 (+!130 (ite c!16745 call!10024 (ite c!16741 call!10025 call!10026)) (ite (or c!16745 c!16741) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26379 () Bool)

(assert (=> d!26379 e!64181))

(declare-fun res!49539 () Bool)

(assert (=> d!26379 (=> (not res!49539) (not e!64181))))

(assert (=> d!26379 (= res!49539 (or (bvsge #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))))

(declare-fun lt!49457 () ListLongMap!1499)

(assert (=> d!26379 (= lt!49443 lt!49457)))

(declare-fun lt!49438 () Unit!2917)

(assert (=> d!26379 (= lt!49438 e!64172)))

(declare-fun c!16744 () Bool)

(assert (=> d!26379 (= c!16744 e!64174)))

(declare-fun res!49533 () Bool)

(assert (=> d!26379 (=> (not res!49533) (not e!64174))))

(assert (=> d!26379 (= res!49533 (bvslt #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(assert (=> d!26379 (= lt!49457 e!64180)))

(assert (=> d!26379 (= c!16745 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26379 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26379 (= (getCurrentListMap!455 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49443)))

(assert (= (and d!26379 c!16745) b!98461))

(assert (= (and d!26379 (not c!16745)) b!98475))

(assert (= (and b!98475 c!16741) b!98467))

(assert (= (and b!98475 (not c!16741)) b!98463))

(assert (= (and b!98463 c!16740) b!98478))

(assert (= (and b!98463 (not c!16740)) b!98477))

(assert (= (or b!98478 b!98477) bm!10024))

(assert (= (or b!98467 bm!10024) bm!10022))

(assert (= (or b!98467 b!98478) bm!10021))

(assert (= (or b!98461 bm!10022) bm!10025))

(assert (= (or b!98461 bm!10021) bm!10026))

(assert (= (and d!26379 res!49533) b!98465))

(assert (= (and d!26379 c!16744) b!98462))

(assert (= (and d!26379 (not c!16744)) b!98476))

(assert (= (and d!26379 res!49539) b!98473))

(assert (= (and b!98473 res!49534) b!98469))

(assert (= (and b!98473 (not res!49532)) b!98459))

(assert (= (and b!98459 res!49536) b!98460))

(assert (= (and b!98473 res!49531) b!98466))

(assert (= (and b!98466 c!16743) b!98471))

(assert (= (and b!98466 (not c!16743)) b!98468))

(assert (= (and b!98471 res!49538) b!98464))

(assert (= (or b!98471 b!98468) bm!10020))

(assert (= (and b!98466 res!49537) b!98470))

(assert (= (and b!98470 c!16742) b!98472))

(assert (= (and b!98470 (not c!16742)) b!98458))

(assert (= (and b!98472 res!49535) b!98474))

(assert (= (or b!98472 b!98458) bm!10023))

(declare-fun b_lambda!4367 () Bool)

(assert (=> (not b_lambda!4367) (not b!98460)))

(assert (=> b!98460 t!5523))

(declare-fun b_and!6033 () Bool)

(assert (= b_and!6029 (and (=> t!5523 result!3271) b_and!6033)))

(assert (=> b!98460 t!5525))

(declare-fun b_and!6035 () Bool)

(assert (= b_and!6031 (and (=> t!5525 result!3273) b_and!6035)))

(declare-fun m!107861 () Bool)

(assert (=> b!98464 m!107861))

(declare-fun m!107863 () Bool)

(assert (=> bm!10026 m!107863))

(declare-fun m!107865 () Bool)

(assert (=> b!98461 m!107865))

(assert (=> b!98459 m!107837))

(assert (=> b!98459 m!107837))

(declare-fun m!107867 () Bool)

(assert (=> b!98459 m!107867))

(assert (=> b!98460 m!107837))

(declare-fun m!107869 () Bool)

(assert (=> b!98460 m!107869))

(assert (=> b!98460 m!106557))

(assert (=> b!98460 m!107837))

(declare-fun m!107871 () Bool)

(assert (=> b!98460 m!107871))

(assert (=> b!98460 m!107869))

(assert (=> b!98460 m!106557))

(declare-fun m!107873 () Bool)

(assert (=> b!98460 m!107873))

(declare-fun m!107875 () Bool)

(assert (=> bm!10025 m!107875))

(declare-fun m!107877 () Bool)

(assert (=> b!98462 m!107877))

(declare-fun m!107879 () Bool)

(assert (=> b!98462 m!107879))

(assert (=> b!98462 m!107837))

(declare-fun m!107881 () Bool)

(assert (=> b!98462 m!107881))

(assert (=> b!98462 m!107875))

(declare-fun m!107883 () Bool)

(assert (=> b!98462 m!107883))

(declare-fun m!107885 () Bool)

(assert (=> b!98462 m!107885))

(declare-fun m!107887 () Bool)

(assert (=> b!98462 m!107887))

(declare-fun m!107889 () Bool)

(assert (=> b!98462 m!107889))

(declare-fun m!107891 () Bool)

(assert (=> b!98462 m!107891))

(declare-fun m!107893 () Bool)

(assert (=> b!98462 m!107893))

(declare-fun m!107895 () Bool)

(assert (=> b!98462 m!107895))

(declare-fun m!107897 () Bool)

(assert (=> b!98462 m!107897))

(declare-fun m!107899 () Bool)

(assert (=> b!98462 m!107899))

(assert (=> b!98462 m!107899))

(declare-fun m!107901 () Bool)

(assert (=> b!98462 m!107901))

(assert (=> b!98462 m!107891))

(declare-fun m!107903 () Bool)

(assert (=> b!98462 m!107903))

(declare-fun m!107905 () Bool)

(assert (=> b!98462 m!107905))

(assert (=> b!98462 m!107877))

(assert (=> b!98462 m!107883))

(declare-fun m!107907 () Bool)

(assert (=> bm!10023 m!107907))

(assert (=> d!26379 m!106537))

(declare-fun m!107909 () Bool)

(assert (=> bm!10020 m!107909))

(assert (=> b!98469 m!107837))

(assert (=> b!98469 m!107837))

(assert (=> b!98469 m!107839))

(declare-fun m!107911 () Bool)

(assert (=> b!98474 m!107911))

(assert (=> b!98465 m!107837))

(assert (=> b!98465 m!107837))

(assert (=> b!98465 m!107839))

(assert (=> d!26069 d!26379))

(declare-fun b!98479 () Bool)

(declare-fun e!64185 () (_ BitVec 32))

(assert (=> b!98479 (= e!64185 #b00000000000000000000000000000000)))

(declare-fun b!98480 () Bool)

(declare-fun e!64184 () (_ BitVec 32))

(declare-fun call!10030 () (_ BitVec 32))

(assert (=> b!98480 (= e!64184 call!10030)))

(declare-fun b!98481 () Bool)

(assert (=> b!98481 (= e!64184 (bvadd #b00000000000000000000000000000001 call!10030))))

(declare-fun d!26381 () Bool)

(declare-fun lt!49460 () (_ BitVec 32))

(assert (=> d!26381 (and (bvsge lt!49460 #b00000000000000000000000000000000) (bvsle lt!49460 (bvsub (size!2256 lt!49180) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(assert (=> d!26381 (= lt!49460 e!64185)))

(declare-fun c!16747 () Bool)

(assert (=> d!26381 (= c!16747 (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)))))

(assert (=> d!26381 (and (bvsle (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)) (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001) (size!2256 lt!49180)))))

(assert (=> d!26381 (= (arrayCountValidKeys!0 lt!49180 (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)) lt!49460)))

(declare-fun bm!10027 () Bool)

(assert (=> bm!10027 (= call!10030 (arrayCountValidKeys!0 lt!49180 (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001) (bvadd (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000001)))))

(declare-fun b!98482 () Bool)

(assert (=> b!98482 (= e!64185 e!64184)))

(declare-fun c!16746 () Bool)

(assert (=> b!98482 (= c!16746 (validKeyInArray!0 (select (arr!2006 lt!49180) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(assert (= (and d!26381 c!16747) b!98479))

(assert (= (and d!26381 (not c!16747)) b!98482))

(assert (= (and b!98482 c!16746) b!98481))

(assert (= (and b!98482 (not c!16746)) b!98480))

(assert (= (or b!98481 b!98480) bm!10027))

(declare-fun m!107913 () Bool)

(assert (=> bm!10027 m!107913))

(assert (=> b!98482 m!107829))

(assert (=> b!98482 m!107829))

(assert (=> b!98482 m!107831))

(assert (=> d!26069 d!26381))

(declare-fun b!98483 () Bool)

(declare-fun e!64188 () Bool)

(declare-fun call!10037 () Bool)

(assert (=> b!98483 (= e!64188 (not call!10037))))

(declare-fun b!98484 () Bool)

(declare-fun e!64193 () Bool)

(declare-fun e!64190 () Bool)

(assert (=> b!98484 (= e!64193 e!64190)))

(declare-fun res!49545 () Bool)

(assert (=> b!98484 (=> (not res!49545) (not e!64190))))

(declare-fun lt!49466 () ListLongMap!1499)

(assert (=> b!98484 (= res!49545 (contains!788 lt!49466 (select (arr!2006 lt!49156) #b00000000000000000000000000000000)))))

(assert (=> b!98484 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 lt!49156)))))

(declare-fun b!98485 () Bool)

(assert (=> b!98485 (= e!64190 (= (apply!92 lt!49466 (select (arr!2006 lt!49156) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 lt!49174) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98485 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 lt!49174)))))

(assert (=> b!98485 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 lt!49156)))))

(declare-fun bm!10028 () Bool)

(declare-fun call!10031 () Bool)

(assert (=> bm!10028 (= call!10031 (contains!788 lt!49466 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98486 () Bool)

(declare-fun e!64195 () ListLongMap!1499)

(declare-fun call!10036 () ListLongMap!1499)

(assert (=> b!98486 (= e!64195 (+!130 call!10036 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98487 () Bool)

(declare-fun e!64187 () Unit!2917)

(declare-fun lt!49481 () Unit!2917)

(assert (=> b!98487 (= e!64187 lt!49481)))

(declare-fun lt!49478 () ListLongMap!1499)

(assert (=> b!98487 (= lt!49478 (getCurrentListMapNoExtraKeys!95 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49474 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49474 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49472 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49472 (select (arr!2006 lt!49156) #b00000000000000000000000000000000))))

(declare-fun lt!49468 () Unit!2917)

(assert (=> b!98487 (= lt!49468 (addStillContains!68 lt!49478 lt!49474 (zeroValue!2363 newMap!16) lt!49472))))

(assert (=> b!98487 (contains!788 (+!130 lt!49478 (tuple2!2301 lt!49474 (zeroValue!2363 newMap!16))) lt!49472)))

(declare-fun lt!49477 () Unit!2917)

(assert (=> b!98487 (= lt!49477 lt!49468)))

(declare-fun lt!49467 () ListLongMap!1499)

(assert (=> b!98487 (= lt!49467 (getCurrentListMapNoExtraKeys!95 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49479 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49479 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49469 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49469 (select (arr!2006 lt!49156) #b00000000000000000000000000000000))))

(declare-fun lt!49475 () Unit!2917)

(assert (=> b!98487 (= lt!49475 (addApplyDifferent!68 lt!49467 lt!49479 (minValue!2363 newMap!16) lt!49469))))

(assert (=> b!98487 (= (apply!92 (+!130 lt!49467 (tuple2!2301 lt!49479 (minValue!2363 newMap!16))) lt!49469) (apply!92 lt!49467 lt!49469))))

(declare-fun lt!49471 () Unit!2917)

(assert (=> b!98487 (= lt!49471 lt!49475)))

(declare-fun lt!49482 () ListLongMap!1499)

(assert (=> b!98487 (= lt!49482 (getCurrentListMapNoExtraKeys!95 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49465 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49465 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49476 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49476 (select (arr!2006 lt!49156) #b00000000000000000000000000000000))))

(declare-fun lt!49464 () Unit!2917)

(assert (=> b!98487 (= lt!49464 (addApplyDifferent!68 lt!49482 lt!49465 (zeroValue!2363 newMap!16) lt!49476))))

(assert (=> b!98487 (= (apply!92 (+!130 lt!49482 (tuple2!2301 lt!49465 (zeroValue!2363 newMap!16))) lt!49476) (apply!92 lt!49482 lt!49476))))

(declare-fun lt!49462 () Unit!2917)

(assert (=> b!98487 (= lt!49462 lt!49464)))

(declare-fun lt!49473 () ListLongMap!1499)

(assert (=> b!98487 (= lt!49473 (getCurrentListMapNoExtraKeys!95 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49463 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49463 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49470 () (_ BitVec 64))

(assert (=> b!98487 (= lt!49470 (select (arr!2006 lt!49156) #b00000000000000000000000000000000))))

(assert (=> b!98487 (= lt!49481 (addApplyDifferent!68 lt!49473 lt!49463 (minValue!2363 newMap!16) lt!49470))))

(assert (=> b!98487 (= (apply!92 (+!130 lt!49473 (tuple2!2301 lt!49463 (minValue!2363 newMap!16))) lt!49470) (apply!92 lt!49473 lt!49470))))

(declare-fun b!98488 () Bool)

(declare-fun c!16748 () Bool)

(assert (=> b!98488 (= c!16748 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64186 () ListLongMap!1499)

(declare-fun e!64191 () ListLongMap!1499)

(assert (=> b!98488 (= e!64186 e!64191)))

(declare-fun b!98489 () Bool)

(declare-fun e!64197 () Bool)

(assert (=> b!98489 (= e!64197 (= (apply!92 lt!49466 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98490 () Bool)

(declare-fun e!64189 () Bool)

(assert (=> b!98490 (= e!64189 (validKeyInArray!0 (select (arr!2006 lt!49156) #b00000000000000000000000000000000)))))

(declare-fun b!98491 () Bool)

(declare-fun res!49546 () Bool)

(declare-fun e!64196 () Bool)

(assert (=> b!98491 (=> (not res!49546) (not e!64196))))

(declare-fun e!64198 () Bool)

(assert (=> b!98491 (= res!49546 e!64198)))

(declare-fun c!16751 () Bool)

(assert (=> b!98491 (= c!16751 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98492 () Bool)

(declare-fun call!10035 () ListLongMap!1499)

(assert (=> b!98492 (= e!64186 call!10035)))

(declare-fun bm!10029 () Bool)

(assert (=> bm!10029 (= call!10035 call!10036)))

(declare-fun b!98493 () Bool)

(assert (=> b!98493 (= e!64198 (not call!10031))))

(declare-fun b!98494 () Bool)

(declare-fun e!64194 () Bool)

(assert (=> b!98494 (= e!64194 (validKeyInArray!0 (select (arr!2006 lt!49156) #b00000000000000000000000000000000)))))

(declare-fun bm!10030 () Bool)

(declare-fun call!10033 () ListLongMap!1499)

(declare-fun call!10032 () ListLongMap!1499)

(assert (=> bm!10030 (= call!10033 call!10032)))

(declare-fun bm!10031 () Bool)

(assert (=> bm!10031 (= call!10037 (contains!788 lt!49466 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98495 () Bool)

(assert (=> b!98495 (= e!64196 e!64188)))

(declare-fun c!16750 () Bool)

(assert (=> b!98495 (= c!16750 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98496 () Bool)

(assert (=> b!98496 (= e!64198 e!64197)))

(declare-fun res!49547 () Bool)

(assert (=> b!98496 (= res!49547 call!10031)))

(assert (=> b!98496 (=> (not res!49547) (not e!64197))))

(declare-fun b!98497 () Bool)

(declare-fun e!64192 () Bool)

(assert (=> b!98497 (= e!64188 e!64192)))

(declare-fun res!49544 () Bool)

(assert (=> b!98497 (= res!49544 call!10037)))

(assert (=> b!98497 (=> (not res!49544) (not e!64192))))

(declare-fun b!98498 () Bool)

(declare-fun res!49540 () Bool)

(assert (=> b!98498 (=> (not res!49540) (not e!64196))))

(assert (=> b!98498 (= res!49540 e!64193)))

(declare-fun res!49541 () Bool)

(assert (=> b!98498 (=> res!49541 e!64193)))

(assert (=> b!98498 (= res!49541 (not e!64194))))

(declare-fun res!49543 () Bool)

(assert (=> b!98498 (=> (not res!49543) (not e!64194))))

(assert (=> b!98498 (= res!49543 (bvslt #b00000000000000000000000000000000 (size!2256 lt!49156)))))

(declare-fun bm!10032 () Bool)

(declare-fun call!10034 () ListLongMap!1499)

(assert (=> bm!10032 (= call!10034 call!10033)))

(declare-fun b!98499 () Bool)

(assert (=> b!98499 (= e!64192 (= (apply!92 lt!49466 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!98500 () Bool)

(assert (=> b!98500 (= e!64195 e!64186)))

(declare-fun c!16749 () Bool)

(assert (=> b!98500 (= c!16749 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10033 () Bool)

(assert (=> bm!10033 (= call!10032 (getCurrentListMapNoExtraKeys!95 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98501 () Bool)

(declare-fun Unit!2960 () Unit!2917)

(assert (=> b!98501 (= e!64187 Unit!2960)))

(declare-fun b!98502 () Bool)

(assert (=> b!98502 (= e!64191 call!10034)))

(declare-fun b!98503 () Bool)

(assert (=> b!98503 (= e!64191 call!10035)))

(declare-fun bm!10034 () Bool)

(declare-fun c!16753 () Bool)

(assert (=> bm!10034 (= call!10036 (+!130 (ite c!16753 call!10032 (ite c!16749 call!10033 call!10034)) (ite (or c!16753 c!16749) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26383 () Bool)

(assert (=> d!26383 e!64196))

(declare-fun res!49548 () Bool)

(assert (=> d!26383 (=> (not res!49548) (not e!64196))))

(assert (=> d!26383 (= res!49548 (or (bvsge #b00000000000000000000000000000000 (size!2256 lt!49156)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 lt!49156)))))))

(declare-fun lt!49480 () ListLongMap!1499)

(assert (=> d!26383 (= lt!49466 lt!49480)))

(declare-fun lt!49461 () Unit!2917)

(assert (=> d!26383 (= lt!49461 e!64187)))

(declare-fun c!16752 () Bool)

(assert (=> d!26383 (= c!16752 e!64189)))

(declare-fun res!49542 () Bool)

(assert (=> d!26383 (=> (not res!49542) (not e!64189))))

(assert (=> d!26383 (= res!49542 (bvslt #b00000000000000000000000000000000 (size!2256 lt!49156)))))

(assert (=> d!26383 (= lt!49480 e!64195)))

(assert (=> d!26383 (= c!16753 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26383 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26383 (= (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49466)))

(assert (= (and d!26383 c!16753) b!98486))

(assert (= (and d!26383 (not c!16753)) b!98500))

(assert (= (and b!98500 c!16749) b!98492))

(assert (= (and b!98500 (not c!16749)) b!98488))

(assert (= (and b!98488 c!16748) b!98503))

(assert (= (and b!98488 (not c!16748)) b!98502))

(assert (= (or b!98503 b!98502) bm!10032))

(assert (= (or b!98492 bm!10032) bm!10030))

(assert (= (or b!98492 b!98503) bm!10029))

(assert (= (or b!98486 bm!10030) bm!10033))

(assert (= (or b!98486 bm!10029) bm!10034))

(assert (= (and d!26383 res!49542) b!98490))

(assert (= (and d!26383 c!16752) b!98487))

(assert (= (and d!26383 (not c!16752)) b!98501))

(assert (= (and d!26383 res!49548) b!98498))

(assert (= (and b!98498 res!49543) b!98494))

(assert (= (and b!98498 (not res!49541)) b!98484))

(assert (= (and b!98484 res!49545) b!98485))

(assert (= (and b!98498 res!49540) b!98491))

(assert (= (and b!98491 c!16751) b!98496))

(assert (= (and b!98491 (not c!16751)) b!98493))

(assert (= (and b!98496 res!49547) b!98489))

(assert (= (or b!98496 b!98493) bm!10028))

(assert (= (and b!98491 res!49546) b!98495))

(assert (= (and b!98495 c!16750) b!98497))

(assert (= (and b!98495 (not c!16750)) b!98483))

(assert (= (and b!98497 res!49544) b!98499))

(assert (= (or b!98497 b!98483) bm!10031))

(declare-fun b_lambda!4369 () Bool)

(assert (=> (not b_lambda!4369) (not b!98485)))

(assert (=> b!98485 t!5523))

(declare-fun b_and!6037 () Bool)

(assert (= b_and!6033 (and (=> t!5523 result!3271) b_and!6037)))

(assert (=> b!98485 t!5525))

(declare-fun b_and!6039 () Bool)

(assert (= b_and!6035 (and (=> t!5525 result!3273) b_and!6039)))

(declare-fun m!107915 () Bool)

(assert (=> b!98489 m!107915))

(declare-fun m!107917 () Bool)

(assert (=> bm!10034 m!107917))

(declare-fun m!107919 () Bool)

(assert (=> b!98486 m!107919))

(declare-fun m!107921 () Bool)

(assert (=> b!98484 m!107921))

(assert (=> b!98484 m!107921))

(declare-fun m!107923 () Bool)

(assert (=> b!98484 m!107923))

(assert (=> b!98485 m!107921))

(declare-fun m!107925 () Bool)

(assert (=> b!98485 m!107925))

(assert (=> b!98485 m!106557))

(assert (=> b!98485 m!107921))

(declare-fun m!107927 () Bool)

(assert (=> b!98485 m!107927))

(assert (=> b!98485 m!107925))

(assert (=> b!98485 m!106557))

(declare-fun m!107929 () Bool)

(assert (=> b!98485 m!107929))

(declare-fun m!107931 () Bool)

(assert (=> bm!10033 m!107931))

(declare-fun m!107933 () Bool)

(assert (=> b!98487 m!107933))

(declare-fun m!107935 () Bool)

(assert (=> b!98487 m!107935))

(assert (=> b!98487 m!107921))

(declare-fun m!107937 () Bool)

(assert (=> b!98487 m!107937))

(assert (=> b!98487 m!107931))

(declare-fun m!107939 () Bool)

(assert (=> b!98487 m!107939))

(declare-fun m!107941 () Bool)

(assert (=> b!98487 m!107941))

(declare-fun m!107943 () Bool)

(assert (=> b!98487 m!107943))

(declare-fun m!107945 () Bool)

(assert (=> b!98487 m!107945))

(declare-fun m!107947 () Bool)

(assert (=> b!98487 m!107947))

(declare-fun m!107949 () Bool)

(assert (=> b!98487 m!107949))

(declare-fun m!107951 () Bool)

(assert (=> b!98487 m!107951))

(declare-fun m!107953 () Bool)

(assert (=> b!98487 m!107953))

(declare-fun m!107955 () Bool)

(assert (=> b!98487 m!107955))

(assert (=> b!98487 m!107955))

(declare-fun m!107957 () Bool)

(assert (=> b!98487 m!107957))

(assert (=> b!98487 m!107947))

(declare-fun m!107959 () Bool)

(assert (=> b!98487 m!107959))

(declare-fun m!107961 () Bool)

(assert (=> b!98487 m!107961))

(assert (=> b!98487 m!107933))

(assert (=> b!98487 m!107939))

(declare-fun m!107963 () Bool)

(assert (=> bm!10031 m!107963))

(assert (=> d!26383 m!106537))

(declare-fun m!107965 () Bool)

(assert (=> bm!10028 m!107965))

(assert (=> b!98494 m!107921))

(assert (=> b!98494 m!107921))

(declare-fun m!107967 () Bool)

(assert (=> b!98494 m!107967))

(declare-fun m!107969 () Bool)

(assert (=> b!98499 m!107969))

(assert (=> b!98490 m!107921))

(assert (=> b!98490 m!107921))

(assert (=> b!98490 m!107967))

(assert (=> d!26069 d!26383))

(declare-fun b!98504 () Bool)

(declare-fun e!64201 () Bool)

(declare-fun e!64199 () Bool)

(assert (=> b!98504 (= e!64201 e!64199)))

(declare-fun lt!49483 () (_ BitVec 64))

(assert (=> b!98504 (= lt!49483 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49484 () Unit!2917)

(assert (=> b!98504 (= lt!49484 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) lt!49483 #b00000000000000000000000000000000))))

(assert (=> b!98504 (arrayContainsKey!0 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) lt!49483 #b00000000000000000000000000000000)))

(declare-fun lt!49485 () Unit!2917)

(assert (=> b!98504 (= lt!49485 lt!49484)))

(declare-fun res!49549 () Bool)

(assert (=> b!98504 (= res!49549 (= (seekEntryOrOpen!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000) (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (mask!6577 newMap!16)) (Found!247 #b00000000000000000000000000000000)))))

(assert (=> b!98504 (=> (not res!49549) (not e!64199))))

(declare-fun b!98505 () Bool)

(declare-fun call!10038 () Bool)

(assert (=> b!98505 (= e!64199 call!10038)))

(declare-fun b!98506 () Bool)

(assert (=> b!98506 (= e!64201 call!10038)))

(declare-fun d!26385 () Bool)

(declare-fun res!49550 () Bool)

(declare-fun e!64200 () Bool)

(assert (=> d!26385 (=> res!49550 e!64200)))

(assert (=> d!26385 (= res!49550 (bvsge #b00000000000000000000000000000000 (size!2256 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))))))))

(assert (=> d!26385 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (mask!6577 newMap!16)) e!64200)))

(declare-fun b!98507 () Bool)

(assert (=> b!98507 (= e!64200 e!64201)))

(declare-fun c!16754 () Bool)

(assert (=> b!98507 (= c!16754 (validKeyInArray!0 (select (arr!2006 (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10035 () Bool)

(assert (=> bm!10035 (= call!10038 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4224 (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (size!2256 (_keys!4170 newMap!16))) (mask!6577 newMap!16)))))

(assert (= (and d!26385 (not res!49550)) b!98507))

(assert (= (and b!98507 c!16754) b!98504))

(assert (= (and b!98507 (not c!16754)) b!98506))

(assert (= (and b!98504 res!49549) b!98505))

(assert (= (or b!98505 b!98506) bm!10035))

(assert (=> b!98504 m!107837))

(declare-fun m!107971 () Bool)

(assert (=> b!98504 m!107971))

(declare-fun m!107973 () Bool)

(assert (=> b!98504 m!107973))

(assert (=> b!98504 m!107837))

(declare-fun m!107975 () Bool)

(assert (=> b!98504 m!107975))

(assert (=> b!98507 m!107837))

(assert (=> b!98507 m!107837))

(assert (=> b!98507 m!107839))

(declare-fun m!107977 () Bool)

(assert (=> bm!10035 m!107977))

(assert (=> d!26069 d!26385))

(declare-fun d!26387 () Bool)

(assert (=> d!26387 (arrayContainsKey!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!49486 () Unit!2917)

(assert (=> d!26387 (= lt!49486 (choose!13 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))

(assert (=> d!26387 (bvsge (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) #b00000000000000000000000000000000)))

(assert (=> d!26387 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49172 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))) lt!49486)))

(declare-fun bs!4072 () Bool)

(assert (= bs!4072 d!26387))

(assert (=> bs!4072 m!106251))

(assert (=> bs!4072 m!106989))

(assert (=> bs!4072 m!106251))

(declare-fun m!107979 () Bool)

(assert (=> bs!4072 m!107979))

(assert (=> d!26069 d!26387))

(assert (=> d!26069 d!26013))

(declare-fun d!26389 () Bool)

(declare-fun e!64202 () Bool)

(assert (=> d!26389 e!64202))

(declare-fun res!49551 () Bool)

(assert (=> d!26389 (=> res!49551 e!64202)))

(declare-fun lt!49487 () Bool)

(assert (=> d!26389 (= res!49551 (not lt!49487))))

(declare-fun lt!49490 () Bool)

(assert (=> d!26389 (= lt!49487 lt!49490)))

(declare-fun lt!49488 () Unit!2917)

(declare-fun e!64203 () Unit!2917)

(assert (=> d!26389 (= lt!49488 e!64203)))

(declare-fun c!16755 () Bool)

(assert (=> d!26389 (= c!16755 lt!49490)))

(assert (=> d!26389 (= lt!49490 (containsKey!154 (toList!765 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(assert (=> d!26389 (= (contains!788 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))) lt!49487)))

(declare-fun b!98508 () Bool)

(declare-fun lt!49489 () Unit!2917)

(assert (=> b!98508 (= e!64203 lt!49489)))

(assert (=> b!98508 (= lt!49489 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(assert (=> b!98508 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)))))))

(declare-fun b!98509 () Bool)

(declare-fun Unit!2961 () Unit!2917)

(assert (=> b!98509 (= e!64203 Unit!2961)))

(declare-fun b!98510 () Bool)

(assert (=> b!98510 (= e!64202 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 lt!49156 lt!49174 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (store (arr!2006 (_keys!4170 newMap!16)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) (ite c!16508 (index!3134 lt!48821) (index!3131 lt!48821))))))))

(assert (= (and d!26389 c!16755) b!98508))

(assert (= (and d!26389 (not c!16755)) b!98509))

(assert (= (and d!26389 (not res!49551)) b!98510))

(assert (=> d!26389 m!106995))

(declare-fun m!107981 () Bool)

(assert (=> d!26389 m!107981))

(assert (=> b!98508 m!106995))

(declare-fun m!107983 () Bool)

(assert (=> b!98508 m!107983))

(assert (=> b!98508 m!106995))

(declare-fun m!107985 () Bool)

(assert (=> b!98508 m!107985))

(assert (=> b!98508 m!107985))

(declare-fun m!107987 () Bool)

(assert (=> b!98508 m!107987))

(assert (=> b!98510 m!106995))

(assert (=> b!98510 m!107985))

(assert (=> b!98510 m!107985))

(assert (=> b!98510 m!107987))

(assert (=> d!26069 d!26389))

(declare-fun d!26391 () Bool)

(assert (=> d!26391 (= (inRange!0 (ite c!16571 (index!3131 lt!48982) (index!3134 lt!48982)) (mask!6577 newMap!16)) (and (bvsge (ite c!16571 (index!3131 lt!48982) (index!3134 lt!48982)) #b00000000000000000000000000000000) (bvslt (ite c!16571 (index!3131 lt!48982) (index!3134 lt!48982)) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9956 d!26391))

(declare-fun d!26393 () Bool)

(assert (=> d!26393 (= (get!1292 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2807 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26031 d!26393))

(assert (=> d!26031 d!26167))

(declare-fun d!26395 () Bool)

(declare-fun e!64204 () Bool)

(assert (=> d!26395 e!64204))

(declare-fun res!49553 () Bool)

(assert (=> d!26395 (=> (not res!49553) (not e!64204))))

(declare-fun lt!49491 () ListLongMap!1499)

(assert (=> d!26395 (= res!49553 (contains!788 lt!49491 (_1!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49492 () List!1564)

(assert (=> d!26395 (= lt!49491 (ListLongMap!1500 lt!49492))))

(declare-fun lt!49494 () Unit!2917)

(declare-fun lt!49493 () Unit!2917)

(assert (=> d!26395 (= lt!49494 lt!49493)))

(assert (=> d!26395 (= (getValueByKey!151 lt!49492 (_1!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26395 (= lt!49493 (lemmaContainsTupThenGetReturnValue!67 lt!49492 (_1!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26395 (= lt!49492 (insertStrictlySorted!70 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26395 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49491)))

(declare-fun b!98511 () Bool)

(declare-fun res!49552 () Bool)

(assert (=> b!98511 (=> (not res!49552) (not e!64204))))

(assert (=> b!98511 (= res!49552 (= (getValueByKey!151 (toList!765 lt!49491) (_1!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98512 () Bool)

(assert (=> b!98512 (= e!64204 (contains!791 (toList!765 lt!49491) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26395 res!49553) b!98511))

(assert (= (and b!98511 res!49552) b!98512))

(declare-fun m!107989 () Bool)

(assert (=> d!26395 m!107989))

(declare-fun m!107991 () Bool)

(assert (=> d!26395 m!107991))

(declare-fun m!107993 () Bool)

(assert (=> d!26395 m!107993))

(declare-fun m!107995 () Bool)

(assert (=> d!26395 m!107995))

(declare-fun m!107997 () Bool)

(assert (=> b!98511 m!107997))

(declare-fun m!107999 () Bool)

(assert (=> b!98512 m!107999))

(assert (=> d!26017 d!26395))

(assert (=> d!26017 d!25973))

(declare-fun b!98513 () Bool)

(declare-fun e!64207 () Bool)

(declare-fun call!10045 () Bool)

(assert (=> b!98513 (= e!64207 (not call!10045))))

(declare-fun b!98514 () Bool)

(declare-fun e!64212 () Bool)

(declare-fun e!64209 () Bool)

(assert (=> b!98514 (= e!64212 e!64209)))

(declare-fun res!49559 () Bool)

(assert (=> b!98514 (=> (not res!49559) (not e!64209))))

(declare-fun lt!49500 () ListLongMap!1499)

(assert (=> b!98514 (= res!49559 (contains!788 lt!49500 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98514 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98515 () Bool)

(assert (=> b!98515 (= e!64209 (= (apply!92 lt!49500 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98515 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (_values!2463 newMap!16))))))

(assert (=> b!98515 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10036 () Bool)

(declare-fun call!10039 () Bool)

(assert (=> bm!10036 (= call!10039 (contains!788 lt!49500 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98516 () Bool)

(declare-fun e!64214 () ListLongMap!1499)

(declare-fun call!10044 () ListLongMap!1499)

(assert (=> b!98516 (= e!64214 (+!130 call!10044 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98517 () Bool)

(declare-fun e!64206 () Unit!2917)

(declare-fun lt!49515 () Unit!2917)

(assert (=> b!98517 (= e!64206 lt!49515)))

(declare-fun lt!49512 () ListLongMap!1499)

(assert (=> b!98517 (= lt!49512 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49508 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49508 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49506 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49506 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49502 () Unit!2917)

(assert (=> b!98517 (= lt!49502 (addStillContains!68 lt!49512 lt!49508 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49506))))

(assert (=> b!98517 (contains!788 (+!130 lt!49512 (tuple2!2301 lt!49508 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49506)))

(declare-fun lt!49511 () Unit!2917)

(assert (=> b!98517 (= lt!49511 lt!49502)))

(declare-fun lt!49501 () ListLongMap!1499)

(assert (=> b!98517 (= lt!49501 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49513 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49513 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49503 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49503 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49509 () Unit!2917)

(assert (=> b!98517 (= lt!49509 (addApplyDifferent!68 lt!49501 lt!49513 (minValue!2363 newMap!16) lt!49503))))

(assert (=> b!98517 (= (apply!92 (+!130 lt!49501 (tuple2!2301 lt!49513 (minValue!2363 newMap!16))) lt!49503) (apply!92 lt!49501 lt!49503))))

(declare-fun lt!49505 () Unit!2917)

(assert (=> b!98517 (= lt!49505 lt!49509)))

(declare-fun lt!49516 () ListLongMap!1499)

(assert (=> b!98517 (= lt!49516 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49499 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49499 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49510 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49510 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49498 () Unit!2917)

(assert (=> b!98517 (= lt!49498 (addApplyDifferent!68 lt!49516 lt!49499 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49510))))

(assert (=> b!98517 (= (apply!92 (+!130 lt!49516 (tuple2!2301 lt!49499 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49510) (apply!92 lt!49516 lt!49510))))

(declare-fun lt!49496 () Unit!2917)

(assert (=> b!98517 (= lt!49496 lt!49498)))

(declare-fun lt!49507 () ListLongMap!1499)

(assert (=> b!98517 (= lt!49507 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49497 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49497 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49504 () (_ BitVec 64))

(assert (=> b!98517 (= lt!49504 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98517 (= lt!49515 (addApplyDifferent!68 lt!49507 lt!49497 (minValue!2363 newMap!16) lt!49504))))

(assert (=> b!98517 (= (apply!92 (+!130 lt!49507 (tuple2!2301 lt!49497 (minValue!2363 newMap!16))) lt!49504) (apply!92 lt!49507 lt!49504))))

(declare-fun b!98518 () Bool)

(declare-fun c!16756 () Bool)

(assert (=> b!98518 (= c!16756 (and (not (= (bvand lt!48809 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48809 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64205 () ListLongMap!1499)

(declare-fun e!64210 () ListLongMap!1499)

(assert (=> b!98518 (= e!64205 e!64210)))

(declare-fun b!98519 () Bool)

(declare-fun e!64216 () Bool)

(assert (=> b!98519 (= e!64216 (= (apply!92 lt!49500 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98520 () Bool)

(declare-fun e!64208 () Bool)

(assert (=> b!98520 (= e!64208 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98521 () Bool)

(declare-fun res!49560 () Bool)

(declare-fun e!64215 () Bool)

(assert (=> b!98521 (=> (not res!49560) (not e!64215))))

(declare-fun e!64217 () Bool)

(assert (=> b!98521 (= res!49560 e!64217)))

(declare-fun c!16759 () Bool)

(assert (=> b!98521 (= c!16759 (not (= (bvand lt!48809 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98522 () Bool)

(declare-fun call!10043 () ListLongMap!1499)

(assert (=> b!98522 (= e!64205 call!10043)))

(declare-fun bm!10037 () Bool)

(assert (=> bm!10037 (= call!10043 call!10044)))

(declare-fun b!98523 () Bool)

(assert (=> b!98523 (= e!64217 (not call!10039))))

(declare-fun b!98524 () Bool)

(declare-fun e!64213 () Bool)

(assert (=> b!98524 (= e!64213 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10038 () Bool)

(declare-fun call!10041 () ListLongMap!1499)

(declare-fun call!10040 () ListLongMap!1499)

(assert (=> bm!10038 (= call!10041 call!10040)))

(declare-fun bm!10039 () Bool)

(assert (=> bm!10039 (= call!10045 (contains!788 lt!49500 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98525 () Bool)

(assert (=> b!98525 (= e!64215 e!64207)))

(declare-fun c!16758 () Bool)

(assert (=> b!98525 (= c!16758 (not (= (bvand lt!48809 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98526 () Bool)

(assert (=> b!98526 (= e!64217 e!64216)))

(declare-fun res!49561 () Bool)

(assert (=> b!98526 (= res!49561 call!10039)))

(assert (=> b!98526 (=> (not res!49561) (not e!64216))))

(declare-fun b!98527 () Bool)

(declare-fun e!64211 () Bool)

(assert (=> b!98527 (= e!64207 e!64211)))

(declare-fun res!49558 () Bool)

(assert (=> b!98527 (= res!49558 call!10045)))

(assert (=> b!98527 (=> (not res!49558) (not e!64211))))

(declare-fun b!98528 () Bool)

(declare-fun res!49554 () Bool)

(assert (=> b!98528 (=> (not res!49554) (not e!64215))))

(assert (=> b!98528 (= res!49554 e!64212)))

(declare-fun res!49555 () Bool)

(assert (=> b!98528 (=> res!49555 e!64212)))

(assert (=> b!98528 (= res!49555 (not e!64213))))

(declare-fun res!49557 () Bool)

(assert (=> b!98528 (=> (not res!49557) (not e!64213))))

(assert (=> b!98528 (= res!49557 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10040 () Bool)

(declare-fun call!10042 () ListLongMap!1499)

(assert (=> bm!10040 (= call!10042 call!10041)))

(declare-fun b!98529 () Bool)

(assert (=> b!98529 (= e!64211 (= (apply!92 lt!49500 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!98530 () Bool)

(assert (=> b!98530 (= e!64214 e!64205)))

(declare-fun c!16757 () Bool)

(assert (=> b!98530 (= c!16757 (and (not (= (bvand lt!48809 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48809 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10041 () Bool)

(assert (=> bm!10041 (= call!10040 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98531 () Bool)

(declare-fun Unit!2962 () Unit!2917)

(assert (=> b!98531 (= e!64206 Unit!2962)))

(declare-fun b!98532 () Bool)

(assert (=> b!98532 (= e!64210 call!10042)))

(declare-fun b!98533 () Bool)

(assert (=> b!98533 (= e!64210 call!10043)))

(declare-fun c!16761 () Bool)

(declare-fun bm!10042 () Bool)

(assert (=> bm!10042 (= call!10044 (+!130 (ite c!16761 call!10040 (ite c!16757 call!10041 call!10042)) (ite (or c!16761 c!16757) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26397 () Bool)

(assert (=> d!26397 e!64215))

(declare-fun res!49562 () Bool)

(assert (=> d!26397 (=> (not res!49562) (not e!64215))))

(assert (=> d!26397 (= res!49562 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!49514 () ListLongMap!1499)

(assert (=> d!26397 (= lt!49500 lt!49514)))

(declare-fun lt!49495 () Unit!2917)

(assert (=> d!26397 (= lt!49495 e!64206)))

(declare-fun c!16760 () Bool)

(assert (=> d!26397 (= c!16760 e!64208)))

(declare-fun res!49556 () Bool)

(assert (=> d!26397 (=> (not res!49556) (not e!64208))))

(assert (=> d!26397 (= res!49556 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26397 (= lt!49514 e!64214)))

(assert (=> d!26397 (= c!16761 (and (not (= (bvand lt!48809 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48809 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26397 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26397 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49500)))

(assert (= (and d!26397 c!16761) b!98516))

(assert (= (and d!26397 (not c!16761)) b!98530))

(assert (= (and b!98530 c!16757) b!98522))

(assert (= (and b!98530 (not c!16757)) b!98518))

(assert (= (and b!98518 c!16756) b!98533))

(assert (= (and b!98518 (not c!16756)) b!98532))

(assert (= (or b!98533 b!98532) bm!10040))

(assert (= (or b!98522 bm!10040) bm!10038))

(assert (= (or b!98522 b!98533) bm!10037))

(assert (= (or b!98516 bm!10038) bm!10041))

(assert (= (or b!98516 bm!10037) bm!10042))

(assert (= (and d!26397 res!49556) b!98520))

(assert (= (and d!26397 c!16760) b!98517))

(assert (= (and d!26397 (not c!16760)) b!98531))

(assert (= (and d!26397 res!49562) b!98528))

(assert (= (and b!98528 res!49557) b!98524))

(assert (= (and b!98528 (not res!49555)) b!98514))

(assert (= (and b!98514 res!49559) b!98515))

(assert (= (and b!98528 res!49554) b!98521))

(assert (= (and b!98521 c!16759) b!98526))

(assert (= (and b!98521 (not c!16759)) b!98523))

(assert (= (and b!98526 res!49561) b!98519))

(assert (= (or b!98526 b!98523) bm!10036))

(assert (= (and b!98521 res!49560) b!98525))

(assert (= (and b!98525 c!16758) b!98527))

(assert (= (and b!98525 (not c!16758)) b!98513))

(assert (= (and b!98527 res!49558) b!98529))

(assert (= (or b!98527 b!98513) bm!10039))

(declare-fun b_lambda!4371 () Bool)

(assert (=> (not b_lambda!4371) (not b!98515)))

(assert (=> b!98515 t!5523))

(declare-fun b_and!6041 () Bool)

(assert (= b_and!6037 (and (=> t!5523 result!3271) b_and!6041)))

(assert (=> b!98515 t!5525))

(declare-fun b_and!6043 () Bool)

(assert (= b_and!6039 (and (=> t!5525 result!3273) b_and!6043)))

(declare-fun m!108001 () Bool)

(assert (=> b!98519 m!108001))

(declare-fun m!108003 () Bool)

(assert (=> bm!10042 m!108003))

(declare-fun m!108005 () Bool)

(assert (=> b!98516 m!108005))

(assert (=> b!98514 m!106551))

(assert (=> b!98514 m!106551))

(declare-fun m!108007 () Bool)

(assert (=> b!98514 m!108007))

(assert (=> b!98515 m!106551))

(assert (=> b!98515 m!106555))

(assert (=> b!98515 m!106557))

(assert (=> b!98515 m!106551))

(declare-fun m!108009 () Bool)

(assert (=> b!98515 m!108009))

(assert (=> b!98515 m!106555))

(assert (=> b!98515 m!106557))

(assert (=> b!98515 m!106561))

(assert (=> bm!10041 m!106277))

(declare-fun m!108011 () Bool)

(assert (=> bm!10041 m!108011))

(declare-fun m!108013 () Bool)

(assert (=> b!98517 m!108013))

(declare-fun m!108015 () Bool)

(assert (=> b!98517 m!108015))

(assert (=> b!98517 m!106551))

(declare-fun m!108017 () Bool)

(assert (=> b!98517 m!108017))

(assert (=> b!98517 m!106277))

(assert (=> b!98517 m!108011))

(declare-fun m!108019 () Bool)

(assert (=> b!98517 m!108019))

(declare-fun m!108021 () Bool)

(assert (=> b!98517 m!108021))

(declare-fun m!108023 () Bool)

(assert (=> b!98517 m!108023))

(assert (=> b!98517 m!106277))

(declare-fun m!108025 () Bool)

(assert (=> b!98517 m!108025))

(declare-fun m!108027 () Bool)

(assert (=> b!98517 m!108027))

(declare-fun m!108029 () Bool)

(assert (=> b!98517 m!108029))

(declare-fun m!108031 () Bool)

(assert (=> b!98517 m!108031))

(declare-fun m!108033 () Bool)

(assert (=> b!98517 m!108033))

(declare-fun m!108035 () Bool)

(assert (=> b!98517 m!108035))

(assert (=> b!98517 m!108035))

(declare-fun m!108037 () Bool)

(assert (=> b!98517 m!108037))

(assert (=> b!98517 m!108027))

(assert (=> b!98517 m!106277))

(declare-fun m!108039 () Bool)

(assert (=> b!98517 m!108039))

(declare-fun m!108041 () Bool)

(assert (=> b!98517 m!108041))

(assert (=> b!98517 m!108013))

(assert (=> b!98517 m!108019))

(declare-fun m!108043 () Bool)

(assert (=> bm!10039 m!108043))

(assert (=> d!26397 m!106537))

(declare-fun m!108045 () Bool)

(assert (=> bm!10036 m!108045))

(assert (=> b!98524 m!106551))

(assert (=> b!98524 m!106551))

(assert (=> b!98524 m!106599))

(declare-fun m!108047 () Bool)

(assert (=> b!98529 m!108047))

(assert (=> b!98520 m!106551))

(assert (=> b!98520 m!106551))

(assert (=> b!98520 m!106599))

(assert (=> d!26017 d!26397))

(assert (=> d!26017 d!26099))

(declare-fun d!26399 () Bool)

(assert (=> d!26399 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48809 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26399 true))

(declare-fun _$7!83 () Unit!2917)

(assert (=> d!26399 (= (choose!599 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48809 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2363 newMap!16) (defaultEntry!2480 newMap!16)) _$7!83)))

(declare-fun bs!4073 () Bool)

(assert (= bs!4073 d!26399))

(assert (=> bs!4073 m!106413))

(assert (=> bs!4073 m!106413))

(assert (=> bs!4073 m!106761))

(assert (=> bs!4073 m!106277))

(assert (=> bs!4073 m!106765))

(assert (=> d!26017 d!26399))

(declare-fun d!26401 () Bool)

(declare-fun res!49563 () Bool)

(declare-fun e!64218 () Bool)

(assert (=> d!26401 (=> res!49563 e!64218)))

(assert (=> d!26401 (= res!49563 (and ((_ is Cons!1560) (toList!765 call!9918)) (= (_1!1161 (h!2154 (toList!765 call!9918))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26401 (= (containsKey!154 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!64218)))

(declare-fun b!98534 () Bool)

(declare-fun e!64219 () Bool)

(assert (=> b!98534 (= e!64218 e!64219)))

(declare-fun res!49564 () Bool)

(assert (=> b!98534 (=> (not res!49564) (not e!64219))))

(assert (=> b!98534 (= res!49564 (and (or (not ((_ is Cons!1560) (toList!765 call!9918))) (bvsle (_1!1161 (h!2154 (toList!765 call!9918))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) ((_ is Cons!1560) (toList!765 call!9918)) (bvslt (_1!1161 (h!2154 (toList!765 call!9918))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(declare-fun b!98535 () Bool)

(assert (=> b!98535 (= e!64219 (containsKey!154 (t!5510 (toList!765 call!9918)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26401 (not res!49563)) b!98534))

(assert (= (and b!98534 res!49564) b!98535))

(assert (=> b!98535 m!106251))

(declare-fun m!108049 () Bool)

(assert (=> b!98535 m!108049))

(assert (=> d!26015 d!26401))

(declare-fun d!26403 () Bool)

(declare-fun e!64220 () Bool)

(assert (=> d!26403 e!64220))

(declare-fun res!49565 () Bool)

(assert (=> d!26403 (=> res!49565 e!64220)))

(declare-fun lt!49517 () Bool)

(assert (=> d!26403 (= res!49565 (not lt!49517))))

(declare-fun lt!49520 () Bool)

(assert (=> d!26403 (= lt!49517 lt!49520)))

(declare-fun lt!49518 () Unit!2917)

(declare-fun e!64221 () Unit!2917)

(assert (=> d!26403 (= lt!49518 e!64221)))

(declare-fun c!16762 () Bool)

(assert (=> d!26403 (= c!16762 lt!49520)))

(assert (=> d!26403 (= lt!49520 (containsKey!154 (toList!765 lt!48938) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26403 (= (contains!788 lt!48938 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49517)))

(declare-fun b!98536 () Bool)

(declare-fun lt!49519 () Unit!2917)

(assert (=> b!98536 (= e!64221 lt!49519)))

(assert (=> b!98536 (= lt!49519 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48938) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98536 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98537 () Bool)

(declare-fun Unit!2963 () Unit!2917)

(assert (=> b!98537 (= e!64221 Unit!2963)))

(declare-fun b!98538 () Bool)

(assert (=> b!98538 (= e!64220 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26403 c!16762) b!98536))

(assert (= (and d!26403 (not c!16762)) b!98537))

(assert (= (and d!26403 (not res!49565)) b!98538))

(declare-fun m!108051 () Bool)

(assert (=> d!26403 m!108051))

(declare-fun m!108053 () Bool)

(assert (=> b!98536 m!108053))

(assert (=> b!98536 m!107457))

(assert (=> b!98536 m!107457))

(declare-fun m!108055 () Bool)

(assert (=> b!98536 m!108055))

(assert (=> b!98538 m!107457))

(assert (=> b!98538 m!107457))

(assert (=> b!98538 m!108055))

(assert (=> bm!9947 d!26403))

(declare-fun d!26405 () Bool)

(declare-fun e!64222 () Bool)

(assert (=> d!26405 e!64222))

(declare-fun res!49566 () Bool)

(assert (=> d!26405 (=> res!49566 e!64222)))

(declare-fun lt!49521 () Bool)

(assert (=> d!26405 (= res!49566 (not lt!49521))))

(declare-fun lt!49524 () Bool)

(assert (=> d!26405 (= lt!49521 lt!49524)))

(declare-fun lt!49522 () Unit!2917)

(declare-fun e!64223 () Unit!2917)

(assert (=> d!26405 (= lt!49522 e!64223)))

(declare-fun c!16763 () Bool)

(assert (=> d!26405 (= c!16763 lt!49524)))

(assert (=> d!26405 (= lt!49524 (containsKey!154 (toList!765 lt!49009) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26405 (= (contains!788 lt!49009 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49521)))

(declare-fun b!98539 () Bool)

(declare-fun lt!49523 () Unit!2917)

(assert (=> b!98539 (= e!64223 lt!49523)))

(assert (=> b!98539 (= lt!49523 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49009) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98539 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98540 () Bool)

(declare-fun Unit!2964 () Unit!2917)

(assert (=> b!98540 (= e!64223 Unit!2964)))

(declare-fun b!98541 () Bool)

(assert (=> b!98541 (= e!64222 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26405 c!16763) b!98539))

(assert (= (and d!26405 (not c!16763)) b!98540))

(assert (= (and d!26405 (not res!49566)) b!98541))

(declare-fun m!108057 () Bool)

(assert (=> d!26405 m!108057))

(declare-fun m!108059 () Bool)

(assert (=> b!98539 m!108059))

(declare-fun m!108061 () Bool)

(assert (=> b!98539 m!108061))

(assert (=> b!98539 m!108061))

(declare-fun m!108063 () Bool)

(assert (=> b!98539 m!108063))

(assert (=> b!98541 m!108061))

(assert (=> b!98541 m!108061))

(assert (=> b!98541 m!108063))

(assert (=> bm!9961 d!26405))

(assert (=> b!97954 d!26179))

(assert (=> b!97954 d!26181))

(declare-fun d!26407 () Bool)

(declare-fun e!64224 () Bool)

(assert (=> d!26407 e!64224))

(declare-fun res!49567 () Bool)

(assert (=> d!26407 (=> res!49567 e!64224)))

(declare-fun lt!49525 () Bool)

(assert (=> d!26407 (= res!49567 (not lt!49525))))

(declare-fun lt!49528 () Bool)

(assert (=> d!26407 (= lt!49525 lt!49528)))

(declare-fun lt!49526 () Unit!2917)

(declare-fun e!64225 () Unit!2917)

(assert (=> d!26407 (= lt!49526 e!64225)))

(declare-fun c!16764 () Bool)

(assert (=> d!26407 (= c!16764 lt!49528)))

(assert (=> d!26407 (= lt!49528 (containsKey!154 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26407 (= (contains!788 lt!49042 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49525)))

(declare-fun b!98542 () Bool)

(declare-fun lt!49527 () Unit!2917)

(assert (=> b!98542 (= e!64225 lt!49527)))

(assert (=> b!98542 (= lt!49527 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> b!98542 (isDefined!103 (getValueByKey!151 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98543 () Bool)

(declare-fun Unit!2965 () Unit!2917)

(assert (=> b!98543 (= e!64225 Unit!2965)))

(declare-fun b!98544 () Bool)

(assert (=> b!98544 (= e!64224 (isDefined!103 (getValueByKey!151 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26407 c!16764) b!98542))

(assert (= (and d!26407 (not c!16764)) b!98543))

(assert (= (and d!26407 (not res!49567)) b!98544))

(declare-fun m!108065 () Bool)

(assert (=> d!26407 m!108065))

(declare-fun m!108067 () Bool)

(assert (=> b!98542 m!108067))

(assert (=> b!98542 m!106857))

(assert (=> b!98542 m!106857))

(declare-fun m!108069 () Bool)

(assert (=> b!98542 m!108069))

(assert (=> b!98544 m!106857))

(assert (=> b!98544 m!106857))

(assert (=> b!98544 m!108069))

(assert (=> d!26037 d!26407))

(declare-fun b!98545 () Bool)

(declare-fun e!64226 () Option!157)

(assert (=> b!98545 (= e!64226 (Some!156 (_2!1161 (h!2154 lt!49043))))))

(declare-fun b!98548 () Bool)

(declare-fun e!64227 () Option!157)

(assert (=> b!98548 (= e!64227 None!155)))

(declare-fun b!98546 () Bool)

(assert (=> b!98546 (= e!64226 e!64227)))

(declare-fun c!16766 () Bool)

(assert (=> b!98546 (= c!16766 (and ((_ is Cons!1560) lt!49043) (not (= (_1!1161 (h!2154 lt!49043)) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16765 () Bool)

(declare-fun d!26409 () Bool)

(assert (=> d!26409 (= c!16765 (and ((_ is Cons!1560) lt!49043) (= (_1!1161 (h!2154 lt!49043)) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26409 (= (getValueByKey!151 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64226)))

(declare-fun b!98547 () Bool)

(assert (=> b!98547 (= e!64227 (getValueByKey!151 (t!5510 lt!49043) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26409 c!16765) b!98545))

(assert (= (and d!26409 (not c!16765)) b!98546))

(assert (= (and b!98546 c!16766) b!98547))

(assert (= (and b!98546 (not c!16766)) b!98548))

(declare-fun m!108071 () Bool)

(assert (=> b!98547 m!108071))

(assert (=> d!26037 d!26409))

(declare-fun d!26411 () Bool)

(assert (=> d!26411 (= (getValueByKey!151 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49529 () Unit!2917)

(assert (=> d!26411 (= lt!49529 (choose!604 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!64228 () Bool)

(assert (=> d!26411 e!64228))

(declare-fun res!49568 () Bool)

(assert (=> d!26411 (=> (not res!49568) (not e!64228))))

(assert (=> d!26411 (= res!49568 (isStrictlySorted!291 lt!49043))))

(assert (=> d!26411 (= (lemmaContainsTupThenGetReturnValue!67 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49529)))

(declare-fun b!98549 () Bool)

(declare-fun res!49569 () Bool)

(assert (=> b!98549 (=> (not res!49569) (not e!64228))))

(assert (=> b!98549 (= res!49569 (containsKey!154 lt!49043 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98550 () Bool)

(assert (=> b!98550 (= e!64228 (contains!791 lt!49043 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26411 res!49568) b!98549))

(assert (= (and b!98549 res!49569) b!98550))

(assert (=> d!26411 m!106851))

(declare-fun m!108073 () Bool)

(assert (=> d!26411 m!108073))

(declare-fun m!108075 () Bool)

(assert (=> d!26411 m!108075))

(declare-fun m!108077 () Bool)

(assert (=> b!98549 m!108077))

(declare-fun m!108079 () Bool)

(assert (=> b!98550 m!108079))

(assert (=> d!26037 d!26411))

(declare-fun b!98551 () Bool)

(declare-fun e!64232 () List!1564)

(declare-fun call!10046 () List!1564)

(assert (=> b!98551 (= e!64232 call!10046)))

(declare-fun b!98552 () Bool)

(declare-fun e!64230 () List!1564)

(declare-fun e!64233 () List!1564)

(assert (=> b!98552 (= e!64230 e!64233)))

(declare-fun c!16770 () Bool)

(assert (=> b!98552 (= c!16770 (and ((_ is Cons!1560) (toList!765 lt!48898)) (= (_1!1161 (h!2154 (toList!765 lt!48898))) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98553 () Bool)

(declare-fun res!49570 () Bool)

(declare-fun e!64229 () Bool)

(assert (=> b!98553 (=> (not res!49570) (not e!64229))))

(declare-fun lt!49530 () List!1564)

(assert (=> b!98553 (= res!49570 (containsKey!154 lt!49530 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun bm!10043 () Bool)

(declare-fun call!10048 () List!1564)

(declare-fun call!10047 () List!1564)

(assert (=> bm!10043 (= call!10048 call!10047)))

(declare-fun c!16768 () Bool)

(declare-fun bm!10044 () Bool)

(declare-fun e!64231 () List!1564)

(assert (=> bm!10044 (= call!10047 ($colon$colon!77 e!64231 (ite c!16768 (h!2154 (toList!765 lt!48898)) (tuple2!2301 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16769 () Bool)

(assert (=> bm!10044 (= c!16769 c!16768)))

(declare-fun b!98554 () Bool)

(declare-fun c!16767 () Bool)

(assert (=> b!98554 (= c!16767 (and ((_ is Cons!1560) (toList!765 lt!48898)) (bvsgt (_1!1161 (h!2154 (toList!765 lt!48898))) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98554 (= e!64233 e!64232)))

(declare-fun d!26413 () Bool)

(assert (=> d!26413 e!64229))

(declare-fun res!49571 () Bool)

(assert (=> d!26413 (=> (not res!49571) (not e!64229))))

(assert (=> d!26413 (= res!49571 (isStrictlySorted!291 lt!49530))))

(assert (=> d!26413 (= lt!49530 e!64230)))

(assert (=> d!26413 (= c!16768 (and ((_ is Cons!1560) (toList!765 lt!48898)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48898))) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26413 (isStrictlySorted!291 (toList!765 lt!48898))))

(assert (=> d!26413 (= (insertStrictlySorted!70 (toList!765 lt!48898) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49530)))

(declare-fun b!98555 () Bool)

(assert (=> b!98555 (= e!64233 call!10048)))

(declare-fun b!98556 () Bool)

(assert (=> b!98556 (= e!64231 (insertStrictlySorted!70 (t!5510 (toList!765 lt!48898)) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98557 () Bool)

(assert (=> b!98557 (= e!64231 (ite c!16770 (t!5510 (toList!765 lt!48898)) (ite c!16767 (Cons!1560 (h!2154 (toList!765 lt!48898)) (t!5510 (toList!765 lt!48898))) Nil!1561)))))

(declare-fun b!98558 () Bool)

(assert (=> b!98558 (= e!64230 call!10047)))

(declare-fun b!98559 () Bool)

(assert (=> b!98559 (= e!64232 call!10046)))

(declare-fun b!98560 () Bool)

(assert (=> b!98560 (= e!64229 (contains!791 lt!49530 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!10045 () Bool)

(assert (=> bm!10045 (= call!10046 call!10048)))

(assert (= (and d!26413 c!16768) b!98558))

(assert (= (and d!26413 (not c!16768)) b!98552))

(assert (= (and b!98552 c!16770) b!98555))

(assert (= (and b!98552 (not c!16770)) b!98554))

(assert (= (and b!98554 c!16767) b!98559))

(assert (= (and b!98554 (not c!16767)) b!98551))

(assert (= (or b!98559 b!98551) bm!10045))

(assert (= (or b!98555 bm!10045) bm!10043))

(assert (= (or b!98558 bm!10043) bm!10044))

(assert (= (and bm!10044 c!16769) b!98556))

(assert (= (and bm!10044 (not c!16769)) b!98557))

(assert (= (and d!26413 res!49571) b!98553))

(assert (= (and b!98553 res!49570) b!98560))

(declare-fun m!108081 () Bool)

(assert (=> bm!10044 m!108081))

(declare-fun m!108083 () Bool)

(assert (=> d!26413 m!108083))

(declare-fun m!108085 () Bool)

(assert (=> d!26413 m!108085))

(declare-fun m!108087 () Bool)

(assert (=> b!98560 m!108087))

(declare-fun m!108089 () Bool)

(assert (=> b!98553 m!108089))

(declare-fun m!108091 () Bool)

(assert (=> b!98556 m!108091))

(assert (=> d!26037 d!26413))

(assert (=> b!97780 d!26157))

(assert (=> d!25973 d!26099))

(declare-fun b!98561 () Bool)

(declare-fun e!64234 () Option!157)

(assert (=> b!98561 (= e!64234 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49199)))))))

(declare-fun b!98564 () Bool)

(declare-fun e!64235 () Option!157)

(assert (=> b!98564 (= e!64235 None!155)))

(declare-fun b!98562 () Bool)

(assert (=> b!98562 (= e!64234 e!64235)))

(declare-fun c!16772 () Bool)

(assert (=> b!98562 (= c!16772 (and ((_ is Cons!1560) (toList!765 lt!49199)) (not (= (_1!1161 (h!2154 (toList!765 lt!49199))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16771 () Bool)

(declare-fun d!26415 () Bool)

(assert (=> d!26415 (= c!16771 (and ((_ is Cons!1560) (toList!765 lt!49199)) (= (_1!1161 (h!2154 (toList!765 lt!49199))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26415 (= (getValueByKey!151 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64234)))

(declare-fun b!98563 () Bool)

(assert (=> b!98563 (= e!64235 (getValueByKey!151 (t!5510 (toList!765 lt!49199)) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26415 c!16771) b!98561))

(assert (= (and d!26415 (not c!16771)) b!98562))

(assert (= (and b!98562 c!16772) b!98563))

(assert (= (and b!98562 (not c!16772)) b!98564))

(declare-fun m!108093 () Bool)

(assert (=> b!98563 m!108093))

(assert (=> b!98041 d!26415))

(declare-fun d!26417 () Bool)

(declare-fun e!64236 () Bool)

(assert (=> d!26417 e!64236))

(declare-fun res!49572 () Bool)

(assert (=> d!26417 (=> res!49572 e!64236)))

(declare-fun lt!49531 () Bool)

(assert (=> d!26417 (= res!49572 (not lt!49531))))

(declare-fun lt!49534 () Bool)

(assert (=> d!26417 (= lt!49531 lt!49534)))

(declare-fun lt!49532 () Unit!2917)

(declare-fun e!64237 () Unit!2917)

(assert (=> d!26417 (= lt!49532 e!64237)))

(declare-fun c!16773 () Bool)

(assert (=> d!26417 (= c!16773 lt!49534)))

(assert (=> d!26417 (= lt!49534 (containsKey!154 (toList!765 (map!1253 (_2!1160 lt!49157))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26417 (= (contains!788 (map!1253 (_2!1160 lt!49157)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!49531)))

(declare-fun b!98565 () Bool)

(declare-fun lt!49533 () Unit!2917)

(assert (=> b!98565 (= e!64237 lt!49533)))

(assert (=> b!98565 (= lt!49533 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (map!1253 (_2!1160 lt!49157))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> b!98565 (isDefined!103 (getValueByKey!151 (toList!765 (map!1253 (_2!1160 lt!49157))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun b!98566 () Bool)

(declare-fun Unit!2966 () Unit!2917)

(assert (=> b!98566 (= e!64237 Unit!2966)))

(declare-fun b!98567 () Bool)

(assert (=> b!98567 (= e!64236 (isDefined!103 (getValueByKey!151 (toList!765 (map!1253 (_2!1160 lt!49157))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (= (and d!26417 c!16773) b!98565))

(assert (= (and d!26417 (not c!16773)) b!98566))

(assert (= (and d!26417 (not res!49572)) b!98567))

(assert (=> d!26417 m!106251))

(declare-fun m!108095 () Bool)

(assert (=> d!26417 m!108095))

(assert (=> b!98565 m!106251))

(declare-fun m!108097 () Bool)

(assert (=> b!98565 m!108097))

(assert (=> b!98565 m!106251))

(declare-fun m!108099 () Bool)

(assert (=> b!98565 m!108099))

(assert (=> b!98565 m!108099))

(declare-fun m!108101 () Bool)

(assert (=> b!98565 m!108101))

(assert (=> b!98567 m!106251))

(assert (=> b!98567 m!108099))

(assert (=> b!98567 m!108099))

(assert (=> b!98567 m!108101))

(assert (=> b!98009 d!26417))

(assert (=> b!98009 d!26191))

(declare-fun b!98568 () Bool)

(declare-fun e!64238 () Option!157)

(assert (=> b!98568 (= e!64238 (Some!156 (_2!1161 (h!2154 (t!5510 (toList!765 lt!48683))))))))

(declare-fun b!98571 () Bool)

(declare-fun e!64239 () Option!157)

(assert (=> b!98571 (= e!64239 None!155)))

(declare-fun b!98569 () Bool)

(assert (=> b!98569 (= e!64238 e!64239)))

(declare-fun c!16775 () Bool)

(assert (=> b!98569 (= c!16775 (and ((_ is Cons!1560) (t!5510 (toList!765 lt!48683))) (not (= (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))))

(declare-fun d!26419 () Bool)

(declare-fun c!16774 () Bool)

(assert (=> d!26419 (= c!16774 (and ((_ is Cons!1560) (t!5510 (toList!765 lt!48683))) (= (_1!1161 (h!2154 (t!5510 (toList!765 lt!48683)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26419 (= (getValueByKey!151 (t!5510 (toList!765 lt!48683)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!64238)))

(declare-fun b!98570 () Bool)

(assert (=> b!98570 (= e!64239 (getValueByKey!151 (t!5510 (t!5510 (toList!765 lt!48683))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26419 c!16774) b!98568))

(assert (= (and d!26419 (not c!16774)) b!98569))

(assert (= (and b!98569 c!16775) b!98570))

(assert (= (and b!98569 (not c!16775)) b!98571))

(assert (=> b!98570 m!106251))

(declare-fun m!108103 () Bool)

(assert (=> b!98570 m!108103))

(assert (=> b!97893 d!26419))

(declare-fun d!26421 () Bool)

(declare-fun res!49573 () Bool)

(declare-fun e!64240 () Bool)

(assert (=> d!26421 (=> res!49573 e!64240)))

(assert (=> d!26421 (= res!49573 (= (select (arr!2006 (_keys!4170 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (=> d!26421 (= (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!64240)))

(declare-fun b!98572 () Bool)

(declare-fun e!64241 () Bool)

(assert (=> b!98572 (= e!64240 e!64241)))

(declare-fun res!49574 () Bool)

(assert (=> b!98572 (=> (not res!49574) (not e!64241))))

(assert (=> b!98572 (= res!49574 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98573 () Bool)

(assert (=> b!98573 (= e!64241 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26421 (not res!49573)) b!98572))

(assert (= (and b!98572 res!49574) b!98573))

(assert (=> d!26421 m!107251))

(assert (=> b!98573 m!106251))

(declare-fun m!108105 () Bool)

(assert (=> b!98573 m!108105))

(assert (=> b!97855 d!26421))

(declare-fun d!26423 () Bool)

(assert (=> d!26423 (contains!788 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) lt!48919)))

(declare-fun lt!49535 () Unit!2917)

(assert (=> d!26423 (= lt!49535 (choose!601 lt!48925 lt!48921 (zeroValue!2363 newMap!16) lt!48919))))

(assert (=> d!26423 (contains!788 lt!48925 lt!48919)))

(assert (=> d!26423 (= (addStillContains!68 lt!48925 lt!48921 (zeroValue!2363 newMap!16) lt!48919) lt!49535)))

(declare-fun bs!4074 () Bool)

(assert (= bs!4074 d!26423))

(assert (=> bs!4074 m!106571))

(assert (=> bs!4074 m!106571))

(assert (=> bs!4074 m!106573))

(declare-fun m!108107 () Bool)

(assert (=> bs!4074 m!108107))

(declare-fun m!108109 () Bool)

(assert (=> bs!4074 m!108109))

(assert (=> b!97728 d!26423))

(declare-fun d!26425 () Bool)

(assert (=> d!26425 (= (apply!92 lt!48914 lt!48916) (get!1292 (getValueByKey!151 (toList!765 lt!48914) lt!48916)))))

(declare-fun bs!4075 () Bool)

(assert (= bs!4075 d!26425))

(declare-fun m!108111 () Bool)

(assert (=> bs!4075 m!108111))

(assert (=> bs!4075 m!108111))

(declare-fun m!108113 () Bool)

(assert (=> bs!4075 m!108113))

(assert (=> b!97728 d!26425))

(declare-fun d!26427 () Bool)

(declare-fun e!64242 () Bool)

(assert (=> d!26427 e!64242))

(declare-fun res!49575 () Bool)

(assert (=> d!26427 (=> res!49575 e!64242)))

(declare-fun lt!49536 () Bool)

(assert (=> d!26427 (= res!49575 (not lt!49536))))

(declare-fun lt!49539 () Bool)

(assert (=> d!26427 (= lt!49536 lt!49539)))

(declare-fun lt!49537 () Unit!2917)

(declare-fun e!64243 () Unit!2917)

(assert (=> d!26427 (= lt!49537 e!64243)))

(declare-fun c!16776 () Bool)

(assert (=> d!26427 (= c!16776 lt!49539)))

(assert (=> d!26427 (= lt!49539 (containsKey!154 (toList!765 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) lt!48919))))

(assert (=> d!26427 (= (contains!788 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) lt!48919) lt!49536)))

(declare-fun b!98574 () Bool)

(declare-fun lt!49538 () Unit!2917)

(assert (=> b!98574 (= e!64243 lt!49538)))

(assert (=> b!98574 (= lt!49538 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) lt!48919))))

(assert (=> b!98574 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) lt!48919))))

(declare-fun b!98575 () Bool)

(declare-fun Unit!2967 () Unit!2917)

(assert (=> b!98575 (= e!64243 Unit!2967)))

(declare-fun b!98576 () Bool)

(assert (=> b!98576 (= e!64242 (isDefined!103 (getValueByKey!151 (toList!765 (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) lt!48919)))))

(assert (= (and d!26427 c!16776) b!98574))

(assert (= (and d!26427 (not c!16776)) b!98575))

(assert (= (and d!26427 (not res!49575)) b!98576))

(declare-fun m!108115 () Bool)

(assert (=> d!26427 m!108115))

(declare-fun m!108117 () Bool)

(assert (=> b!98574 m!108117))

(declare-fun m!108119 () Bool)

(assert (=> b!98574 m!108119))

(assert (=> b!98574 m!108119))

(declare-fun m!108121 () Bool)

(assert (=> b!98574 m!108121))

(assert (=> b!98576 m!108119))

(assert (=> b!98576 m!108119))

(assert (=> b!98576 m!108121))

(assert (=> b!97728 d!26427))

(declare-fun d!26429 () Bool)

(declare-fun e!64244 () Bool)

(assert (=> d!26429 e!64244))

(declare-fun res!49577 () Bool)

(assert (=> d!26429 (=> (not res!49577) (not e!64244))))

(declare-fun lt!49540 () ListLongMap!1499)

(assert (=> d!26429 (= res!49577 (contains!788 lt!49540 (_1!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49541 () List!1564)

(assert (=> d!26429 (= lt!49540 (ListLongMap!1500 lt!49541))))

(declare-fun lt!49543 () Unit!2917)

(declare-fun lt!49542 () Unit!2917)

(assert (=> d!26429 (= lt!49543 lt!49542)))

(assert (=> d!26429 (= (getValueByKey!151 lt!49541 (_1!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26429 (= lt!49542 (lemmaContainsTupThenGetReturnValue!67 lt!49541 (_1!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26429 (= lt!49541 (insertStrictlySorted!70 (toList!765 lt!48925) (_1!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26429 (= (+!130 lt!48925 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))) lt!49540)))

(declare-fun b!98577 () Bool)

(declare-fun res!49576 () Bool)

(assert (=> b!98577 (=> (not res!49576) (not e!64244))))

(assert (=> b!98577 (= res!49576 (= (getValueByKey!151 (toList!765 lt!49540) (_1!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98578 () Bool)

(assert (=> b!98578 (= e!64244 (contains!791 (toList!765 lt!49540) (tuple2!2301 lt!48921 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26429 res!49577) b!98577))

(assert (= (and b!98577 res!49576) b!98578))

(declare-fun m!108123 () Bool)

(assert (=> d!26429 m!108123))

(declare-fun m!108125 () Bool)

(assert (=> d!26429 m!108125))

(declare-fun m!108127 () Bool)

(assert (=> d!26429 m!108127))

(declare-fun m!108129 () Bool)

(assert (=> d!26429 m!108129))

(declare-fun m!108131 () Bool)

(assert (=> b!98577 m!108131))

(declare-fun m!108133 () Bool)

(assert (=> b!98578 m!108133))

(assert (=> b!97728 d!26429))

(declare-fun d!26431 () Bool)

(declare-fun e!64245 () Bool)

(assert (=> d!26431 e!64245))

(declare-fun res!49579 () Bool)

(assert (=> d!26431 (=> (not res!49579) (not e!64245))))

(declare-fun lt!49544 () ListLongMap!1499)

(assert (=> d!26431 (= res!49579 (contains!788 lt!49544 (_1!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))))))

(declare-fun lt!49545 () List!1564)

(assert (=> d!26431 (= lt!49544 (ListLongMap!1500 lt!49545))))

(declare-fun lt!49547 () Unit!2917)

(declare-fun lt!49546 () Unit!2917)

(assert (=> d!26431 (= lt!49547 lt!49546)))

(assert (=> d!26431 (= (getValueByKey!151 lt!49545 (_1!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))))))

(assert (=> d!26431 (= lt!49546 (lemmaContainsTupThenGetReturnValue!67 lt!49545 (_1!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))))))

(assert (=> d!26431 (= lt!49545 (insertStrictlySorted!70 (toList!765 lt!48914) (_1!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))))))

(assert (=> d!26431 (= (+!130 lt!48914 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) lt!49544)))

(declare-fun b!98579 () Bool)

(declare-fun res!49578 () Bool)

(assert (=> b!98579 (=> (not res!49578) (not e!64245))))

(assert (=> b!98579 (= res!49578 (= (getValueByKey!151 (toList!765 lt!49544) (_1!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))))))))

(declare-fun b!98580 () Bool)

(assert (=> b!98580 (= e!64245 (contains!791 (toList!765 lt!49544) (tuple2!2301 lt!48926 (minValue!2363 newMap!16))))))

(assert (= (and d!26431 res!49579) b!98579))

(assert (= (and b!98579 res!49578) b!98580))

(declare-fun m!108135 () Bool)

(assert (=> d!26431 m!108135))

(declare-fun m!108137 () Bool)

(assert (=> d!26431 m!108137))

(declare-fun m!108139 () Bool)

(assert (=> d!26431 m!108139))

(declare-fun m!108141 () Bool)

(assert (=> d!26431 m!108141))

(declare-fun m!108143 () Bool)

(assert (=> b!98579 m!108143))

(declare-fun m!108145 () Bool)

(assert (=> b!98580 m!108145))

(assert (=> b!97728 d!26431))

(declare-fun d!26433 () Bool)

(assert (=> d!26433 (= (apply!92 (+!130 lt!48914 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) lt!48916) (apply!92 lt!48914 lt!48916))))

(declare-fun lt!49548 () Unit!2917)

(assert (=> d!26433 (= lt!49548 (choose!602 lt!48914 lt!48926 (minValue!2363 newMap!16) lt!48916))))

(declare-fun e!64246 () Bool)

(assert (=> d!26433 e!64246))

(declare-fun res!49580 () Bool)

(assert (=> d!26433 (=> (not res!49580) (not e!64246))))

(assert (=> d!26433 (= res!49580 (contains!788 lt!48914 lt!48916))))

(assert (=> d!26433 (= (addApplyDifferent!68 lt!48914 lt!48926 (minValue!2363 newMap!16) lt!48916) lt!49548)))

(declare-fun b!98581 () Bool)

(assert (=> b!98581 (= e!64246 (not (= lt!48916 lt!48926)))))

(assert (= (and d!26433 res!49580) b!98581))

(declare-fun m!108147 () Bool)

(assert (=> d!26433 m!108147))

(assert (=> d!26433 m!106579))

(assert (=> d!26433 m!106581))

(assert (=> d!26433 m!106579))

(declare-fun m!108149 () Bool)

(assert (=> d!26433 m!108149))

(assert (=> d!26433 m!106583))

(assert (=> b!97728 d!26433))

(declare-fun d!26435 () Bool)

(assert (=> d!26435 (= (apply!92 (+!130 lt!48929 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) lt!48923) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48929 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))) lt!48923)))))

(declare-fun bs!4076 () Bool)

(assert (= bs!4076 d!26435))

(declare-fun m!108151 () Bool)

(assert (=> bs!4076 m!108151))

(assert (=> bs!4076 m!108151))

(declare-fun m!108153 () Bool)

(assert (=> bs!4076 m!108153))

(assert (=> b!97728 d!26435))

(declare-fun d!26437 () Bool)

(assert (=> d!26437 (= (apply!92 (+!130 lt!48914 (tuple2!2301 lt!48926 (minValue!2363 newMap!16))) lt!48916) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48914 (tuple2!2301 lt!48926 (minValue!2363 newMap!16)))) lt!48916)))))

(declare-fun bs!4077 () Bool)

(assert (= bs!4077 d!26437))

(declare-fun m!108155 () Bool)

(assert (=> bs!4077 m!108155))

(assert (=> bs!4077 m!108155))

(declare-fun m!108157 () Bool)

(assert (=> bs!4077 m!108157))

(assert (=> b!97728 d!26437))

(declare-fun d!26439 () Bool)

(declare-fun e!64247 () Bool)

(assert (=> d!26439 e!64247))

(declare-fun res!49582 () Bool)

(assert (=> d!26439 (=> (not res!49582) (not e!64247))))

(declare-fun lt!49549 () ListLongMap!1499)

(assert (=> d!26439 (= res!49582 (contains!788 lt!49549 (_1!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))))))

(declare-fun lt!49550 () List!1564)

(assert (=> d!26439 (= lt!49549 (ListLongMap!1500 lt!49550))))

(declare-fun lt!49552 () Unit!2917)

(declare-fun lt!49551 () Unit!2917)

(assert (=> d!26439 (= lt!49552 lt!49551)))

(assert (=> d!26439 (= (getValueByKey!151 lt!49550 (_1!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))))))

(assert (=> d!26439 (= lt!49551 (lemmaContainsTupThenGetReturnValue!67 lt!49550 (_1!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))))))

(assert (=> d!26439 (= lt!49550 (insertStrictlySorted!70 (toList!765 lt!48920) (_1!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))))))

(assert (=> d!26439 (= (+!130 lt!48920 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) lt!49549)))

(declare-fun b!98582 () Bool)

(declare-fun res!49581 () Bool)

(assert (=> b!98582 (=> (not res!49581) (not e!64247))))

(assert (=> b!98582 (= res!49581 (= (getValueByKey!151 (toList!765 lt!49549) (_1!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))))))))

(declare-fun b!98583 () Bool)

(assert (=> b!98583 (= e!64247 (contains!791 (toList!765 lt!49549) (tuple2!2301 lt!48910 (minValue!2363 newMap!16))))))

(assert (= (and d!26439 res!49582) b!98582))

(assert (= (and b!98582 res!49581) b!98583))

(declare-fun m!108159 () Bool)

(assert (=> d!26439 m!108159))

(declare-fun m!108161 () Bool)

(assert (=> d!26439 m!108161))

(declare-fun m!108163 () Bool)

(assert (=> d!26439 m!108163))

(declare-fun m!108165 () Bool)

(assert (=> d!26439 m!108165))

(declare-fun m!108167 () Bool)

(assert (=> b!98582 m!108167))

(declare-fun m!108169 () Bool)

(assert (=> b!98583 m!108169))

(assert (=> b!97728 d!26439))

(declare-fun d!26441 () Bool)

(declare-fun e!64248 () Bool)

(assert (=> d!26441 e!64248))

(declare-fun res!49584 () Bool)

(assert (=> d!26441 (=> (not res!49584) (not e!64248))))

(declare-fun lt!49553 () ListLongMap!1499)

(assert (=> d!26441 (= res!49584 (contains!788 lt!49553 (_1!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))))))

(declare-fun lt!49554 () List!1564)

(assert (=> d!26441 (= lt!49553 (ListLongMap!1500 lt!49554))))

(declare-fun lt!49556 () Unit!2917)

(declare-fun lt!49555 () Unit!2917)

(assert (=> d!26441 (= lt!49556 lt!49555)))

(assert (=> d!26441 (= (getValueByKey!151 lt!49554 (_1!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26441 (= lt!49555 (lemmaContainsTupThenGetReturnValue!67 lt!49554 (_1!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26441 (= lt!49554 (insertStrictlySorted!70 (toList!765 lt!48929) (_1!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) (_2!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))))))

(assert (=> d!26441 (= (+!130 lt!48929 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) lt!49553)))

(declare-fun b!98584 () Bool)

(declare-fun res!49583 () Bool)

(assert (=> b!98584 (=> (not res!49583) (not e!64248))))

(assert (=> b!98584 (= res!49583 (= (getValueByKey!151 (toList!765 lt!49553) (_1!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))))))))

(declare-fun b!98585 () Bool)

(assert (=> b!98585 (= e!64248 (contains!791 (toList!765 lt!49553) (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))))))

(assert (= (and d!26441 res!49584) b!98584))

(assert (= (and b!98584 res!49583) b!98585))

(declare-fun m!108171 () Bool)

(assert (=> d!26441 m!108171))

(declare-fun m!108173 () Bool)

(assert (=> d!26441 m!108173))

(declare-fun m!108175 () Bool)

(assert (=> d!26441 m!108175))

(declare-fun m!108177 () Bool)

(assert (=> d!26441 m!108177))

(declare-fun m!108179 () Bool)

(assert (=> b!98584 m!108179))

(declare-fun m!108181 () Bool)

(assert (=> b!98585 m!108181))

(assert (=> b!97728 d!26441))

(declare-fun b!98586 () Bool)

(assert (=> b!98586 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> b!98586 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (_values!2463 newMap!16))))))

(declare-fun e!64251 () Bool)

(declare-fun lt!49559 () ListLongMap!1499)

(assert (=> b!98586 (= e!64251 (= (apply!92 lt!49559 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98587 () Bool)

(declare-fun e!64254 () Bool)

(declare-fun e!64253 () Bool)

(assert (=> b!98587 (= e!64254 e!64253)))

(declare-fun c!16778 () Bool)

(assert (=> b!98587 (= c!16778 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98588 () Bool)

(assert (=> b!98588 (= e!64254 e!64251)))

(assert (=> b!98588 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun res!49588 () Bool)

(assert (=> b!98588 (= res!49588 (contains!788 lt!49559 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98588 (=> (not res!49588) (not e!64251))))

(declare-fun b!98589 () Bool)

(declare-fun e!64250 () ListLongMap!1499)

(declare-fun call!10049 () ListLongMap!1499)

(assert (=> b!98589 (= e!64250 call!10049)))

(declare-fun b!98590 () Bool)

(declare-fun e!64252 () Bool)

(assert (=> b!98590 (= e!64252 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98590 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26443 () Bool)

(declare-fun e!64255 () Bool)

(assert (=> d!26443 e!64255))

(declare-fun res!49587 () Bool)

(assert (=> d!26443 (=> (not res!49587) (not e!64255))))

(assert (=> d!26443 (= res!49587 (not (contains!788 lt!49559 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!64249 () ListLongMap!1499)

(assert (=> d!26443 (= lt!49559 e!64249)))

(declare-fun c!16779 () Bool)

(assert (=> d!26443 (= c!16779 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26443 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26443 (= (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49559)))

(declare-fun b!98591 () Bool)

(assert (=> b!98591 (= e!64253 (isEmpty!363 lt!49559))))

(declare-fun b!98592 () Bool)

(assert (=> b!98592 (= e!64249 (ListLongMap!1500 Nil!1561))))

(declare-fun b!98593 () Bool)

(assert (=> b!98593 (= e!64255 e!64254)))

(declare-fun c!16777 () Bool)

(assert (=> b!98593 (= c!16777 e!64252)))

(declare-fun res!49586 () Bool)

(assert (=> b!98593 (=> (not res!49586) (not e!64252))))

(assert (=> b!98593 (= res!49586 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98594 () Bool)

(declare-fun res!49585 () Bool)

(assert (=> b!98594 (=> (not res!49585) (not e!64255))))

(assert (=> b!98594 (= res!49585 (not (contains!788 lt!49559 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98595 () Bool)

(declare-fun lt!49561 () Unit!2917)

(declare-fun lt!49558 () Unit!2917)

(assert (=> b!98595 (= lt!49561 lt!49558)))

(declare-fun lt!49560 () (_ BitVec 64))

(declare-fun lt!49563 () (_ BitVec 64))

(declare-fun lt!49557 () V!3153)

(declare-fun lt!49562 () ListLongMap!1499)

(assert (=> b!98595 (not (contains!788 (+!130 lt!49562 (tuple2!2301 lt!49563 lt!49557)) lt!49560))))

(assert (=> b!98595 (= lt!49558 (addStillNotContains!42 lt!49562 lt!49563 lt!49557 lt!49560))))

(assert (=> b!98595 (= lt!49560 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98595 (= lt!49557 (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98595 (= lt!49563 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98595 (= lt!49562 call!10049)))

(assert (=> b!98595 (= e!64250 (+!130 call!10049 (tuple2!2301 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000) (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98596 () Bool)

(assert (=> b!98596 (= e!64249 e!64250)))

(declare-fun c!16780 () Bool)

(assert (=> b!98596 (= c!16780 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98597 () Bool)

(assert (=> b!98597 (= e!64253 (= lt!49559 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16))))))

(declare-fun bm!10046 () Bool)

(assert (=> bm!10046 (= call!10049 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2480 newMap!16)))))

(assert (= (and d!26443 c!16779) b!98592))

(assert (= (and d!26443 (not c!16779)) b!98596))

(assert (= (and b!98596 c!16780) b!98595))

(assert (= (and b!98596 (not c!16780)) b!98589))

(assert (= (or b!98595 b!98589) bm!10046))

(assert (= (and d!26443 res!49587) b!98594))

(assert (= (and b!98594 res!49585) b!98593))

(assert (= (and b!98593 res!49586) b!98590))

(assert (= (and b!98593 c!16777) b!98588))

(assert (= (and b!98593 (not c!16777)) b!98587))

(assert (= (and b!98588 res!49588) b!98586))

(assert (= (and b!98587 c!16778) b!98597))

(assert (= (and b!98587 (not c!16778)) b!98591))

(declare-fun b_lambda!4373 () Bool)

(assert (=> (not b_lambda!4373) (not b!98586)))

(assert (=> b!98586 t!5523))

(declare-fun b_and!6045 () Bool)

(assert (= b_and!6041 (and (=> t!5523 result!3271) b_and!6045)))

(assert (=> b!98586 t!5525))

(declare-fun b_and!6047 () Bool)

(assert (= b_and!6043 (and (=> t!5525 result!3273) b_and!6047)))

(declare-fun b_lambda!4375 () Bool)

(assert (=> (not b_lambda!4375) (not b!98595)))

(assert (=> b!98595 t!5523))

(declare-fun b_and!6049 () Bool)

(assert (= b_and!6045 (and (=> t!5523 result!3271) b_and!6049)))

(assert (=> b!98595 t!5525))

(declare-fun b_and!6051 () Bool)

(assert (= b_and!6047 (and (=> t!5525 result!3273) b_and!6051)))

(declare-fun m!108183 () Bool)

(assert (=> bm!10046 m!108183))

(declare-fun m!108185 () Bool)

(assert (=> d!26443 m!108185))

(assert (=> d!26443 m!106537))

(assert (=> b!98596 m!106551))

(assert (=> b!98596 m!106551))

(assert (=> b!98596 m!106599))

(declare-fun m!108187 () Bool)

(assert (=> b!98594 m!108187))

(assert (=> b!98597 m!108183))

(declare-fun m!108189 () Bool)

(assert (=> b!98591 m!108189))

(assert (=> b!98586 m!106555))

(assert (=> b!98586 m!106557))

(assert (=> b!98586 m!106561))

(assert (=> b!98586 m!106551))

(declare-fun m!108191 () Bool)

(assert (=> b!98586 m!108191))

(assert (=> b!98586 m!106551))

(assert (=> b!98586 m!106557))

(assert (=> b!98586 m!106555))

(assert (=> b!98588 m!106551))

(assert (=> b!98588 m!106551))

(declare-fun m!108193 () Bool)

(assert (=> b!98588 m!108193))

(declare-fun m!108195 () Bool)

(assert (=> b!98595 m!108195))

(declare-fun m!108197 () Bool)

(assert (=> b!98595 m!108197))

(assert (=> b!98595 m!108195))

(declare-fun m!108199 () Bool)

(assert (=> b!98595 m!108199))

(assert (=> b!98595 m!106551))

(assert (=> b!98595 m!106557))

(assert (=> b!98595 m!106555))

(assert (=> b!98595 m!106555))

(assert (=> b!98595 m!106557))

(assert (=> b!98595 m!106561))

(declare-fun m!108201 () Bool)

(assert (=> b!98595 m!108201))

(assert (=> b!98590 m!106551))

(assert (=> b!98590 m!106551))

(assert (=> b!98590 m!106599))

(assert (=> b!97728 d!26443))

(declare-fun d!26445 () Bool)

(assert (=> d!26445 (= (apply!92 (+!130 lt!48920 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) lt!48917) (apply!92 lt!48920 lt!48917))))

(declare-fun lt!49564 () Unit!2917)

(assert (=> d!26445 (= lt!49564 (choose!602 lt!48920 lt!48910 (minValue!2363 newMap!16) lt!48917))))

(declare-fun e!64256 () Bool)

(assert (=> d!26445 e!64256))

(declare-fun res!49589 () Bool)

(assert (=> d!26445 (=> (not res!49589) (not e!64256))))

(assert (=> d!26445 (= res!49589 (contains!788 lt!48920 lt!48917))))

(assert (=> d!26445 (= (addApplyDifferent!68 lt!48920 lt!48910 (minValue!2363 newMap!16) lt!48917) lt!49564)))

(declare-fun b!98598 () Bool)

(assert (=> b!98598 (= e!64256 (not (= lt!48917 lt!48910)))))

(assert (= (and d!26445 res!49589) b!98598))

(declare-fun m!108203 () Bool)

(assert (=> d!26445 m!108203))

(assert (=> d!26445 m!106565))

(assert (=> d!26445 m!106567))

(assert (=> d!26445 m!106565))

(declare-fun m!108205 () Bool)

(assert (=> d!26445 m!108205))

(assert (=> d!26445 m!106593))

(assert (=> b!97728 d!26445))

(declare-fun d!26447 () Bool)

(assert (=> d!26447 (= (apply!92 (+!130 lt!48920 (tuple2!2301 lt!48910 (minValue!2363 newMap!16))) lt!48917) (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48920 (tuple2!2301 lt!48910 (minValue!2363 newMap!16)))) lt!48917)))))

(declare-fun bs!4078 () Bool)

(assert (= bs!4078 d!26447))

(declare-fun m!108207 () Bool)

(assert (=> bs!4078 m!108207))

(assert (=> bs!4078 m!108207))

(declare-fun m!108209 () Bool)

(assert (=> bs!4078 m!108209))

(assert (=> b!97728 d!26447))

(declare-fun d!26449 () Bool)

(assert (=> d!26449 (= (apply!92 (+!130 lt!48929 (tuple2!2301 lt!48912 (zeroValue!2363 newMap!16))) lt!48923) (apply!92 lt!48929 lt!48923))))

(declare-fun lt!49565 () Unit!2917)

(assert (=> d!26449 (= lt!49565 (choose!602 lt!48929 lt!48912 (zeroValue!2363 newMap!16) lt!48923))))

(declare-fun e!64257 () Bool)

(assert (=> d!26449 e!64257))

(declare-fun res!49590 () Bool)

(assert (=> d!26449 (=> (not res!49590) (not e!64257))))

(assert (=> d!26449 (= res!49590 (contains!788 lt!48929 lt!48923))))

(assert (=> d!26449 (= (addApplyDifferent!68 lt!48929 lt!48912 (zeroValue!2363 newMap!16) lt!48923) lt!49565)))

(declare-fun b!98599 () Bool)

(assert (=> b!98599 (= e!64257 (not (= lt!48923 lt!48912)))))

(assert (= (and d!26449 res!49590) b!98599))

(declare-fun m!108211 () Bool)

(assert (=> d!26449 m!108211))

(assert (=> d!26449 m!106587))

(assert (=> d!26449 m!106589))

(assert (=> d!26449 m!106587))

(declare-fun m!108213 () Bool)

(assert (=> d!26449 m!108213))

(assert (=> d!26449 m!106585))

(assert (=> b!97728 d!26449))

(declare-fun d!26451 () Bool)

(assert (=> d!26451 (= (apply!92 lt!48929 lt!48923) (get!1292 (getValueByKey!151 (toList!765 lt!48929) lt!48923)))))

(declare-fun bs!4079 () Bool)

(assert (= bs!4079 d!26451))

(declare-fun m!108215 () Bool)

(assert (=> bs!4079 m!108215))

(assert (=> bs!4079 m!108215))

(declare-fun m!108217 () Bool)

(assert (=> bs!4079 m!108217))

(assert (=> b!97728 d!26451))

(declare-fun d!26453 () Bool)

(assert (=> d!26453 (= (apply!92 lt!48920 lt!48917) (get!1292 (getValueByKey!151 (toList!765 lt!48920) lt!48917)))))

(declare-fun bs!4080 () Bool)

(assert (= bs!4080 d!26453))

(declare-fun m!108219 () Bool)

(assert (=> bs!4080 m!108219))

(assert (=> bs!4080 m!108219))

(declare-fun m!108221 () Bool)

(assert (=> bs!4080 m!108221))

(assert (=> b!97728 d!26453))

(declare-fun d!26455 () Bool)

(assert (=> d!26455 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49566 () Unit!2917)

(assert (=> d!26455 (= lt!49566 (choose!600 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64258 () Bool)

(assert (=> d!26455 e!64258))

(declare-fun res!49591 () Bool)

(assert (=> d!26455 (=> (not res!49591) (not e!64258))))

(assert (=> d!26455 (= res!49591 (isStrictlySorted!291 (toList!765 lt!48882)))))

(assert (=> d!26455 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000) lt!49566)))

(declare-fun b!98600 () Bool)

(assert (=> b!98600 (= e!64258 (containsKey!154 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26455 res!49591) b!98600))

(assert (=> d!26455 m!106721))

(assert (=> d!26455 m!106721))

(assert (=> d!26455 m!106723))

(declare-fun m!108223 () Bool)

(assert (=> d!26455 m!108223))

(assert (=> d!26455 m!107497))

(assert (=> b!98600 m!106717))

(assert (=> b!97837 d!26455))

(assert (=> b!97837 d!26165))

(assert (=> b!97837 d!26167))

(declare-fun b!98601 () Bool)

(declare-fun e!64260 () (_ BitVec 32))

(assert (=> b!98601 (= e!64260 #b00000000000000000000000000000000)))

(declare-fun b!98602 () Bool)

(declare-fun e!64259 () (_ BitVec 32))

(declare-fun call!10050 () (_ BitVec 32))

(assert (=> b!98602 (= e!64259 call!10050)))

(declare-fun b!98603 () Bool)

(assert (=> b!98603 (= e!64259 (bvadd #b00000000000000000000000000000001 call!10050))))

(declare-fun d!26457 () Bool)

(declare-fun lt!49567 () (_ BitVec 32))

(assert (=> d!26457 (and (bvsge lt!49567 #b00000000000000000000000000000000) (bvsle lt!49567 (bvsub (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!26457 (= lt!49567 e!64260)))

(declare-fun c!16782 () Bool)

(assert (=> d!26457 (= c!16782 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26457 (and (bvsle #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26457 (= (arrayCountValidKeys!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))) lt!49567)))

(declare-fun bm!10047 () Bool)

(assert (=> bm!10047 (= call!10050 (arrayCountValidKeys!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98604 () Bool)

(assert (=> b!98604 (= e!64260 e!64259)))

(declare-fun c!16781 () Bool)

(assert (=> b!98604 (= c!16781 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26457 c!16782) b!98601))

(assert (= (and d!26457 (not c!16782)) b!98604))

(assert (= (and b!98604 c!16781) b!98603))

(assert (= (and b!98604 (not c!16781)) b!98602))

(assert (= (or b!98603 b!98602) bm!10047))

(declare-fun m!108225 () Bool)

(assert (=> bm!10047 m!108225))

(assert (=> b!98604 m!107277))

(assert (=> b!98604 m!107277))

(assert (=> b!98604 m!107279))

(assert (=> b!97745 d!26457))

(declare-fun d!26459 () Bool)

(assert (=> d!26459 (isDefined!103 (getValueByKey!151 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!49568 () Unit!2917)

(assert (=> d!26459 (= lt!49568 (choose!600 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64261 () Bool)

(assert (=> d!26459 e!64261))

(declare-fun res!49592 () Bool)

(assert (=> d!26459 (=> (not res!49592) (not e!64261))))

(assert (=> d!26459 (= res!49592 (isStrictlySorted!291 (toList!765 lt!48882)))))

(assert (=> d!26459 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49568)))

(declare-fun b!98605 () Bool)

(assert (=> b!98605 (= e!64261 (containsKey!154 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26459 res!49592) b!98605))

(assert (=> d!26459 m!106381))

(assert (=> d!26459 m!106729))

(assert (=> d!26459 m!106729))

(assert (=> d!26459 m!106731))

(assert (=> d!26459 m!106381))

(declare-fun m!108227 () Bool)

(assert (=> d!26459 m!108227))

(assert (=> d!26459 m!107497))

(assert (=> b!98605 m!106381))

(assert (=> b!98605 m!106725))

(assert (=> b!97840 d!26459))

(assert (=> b!97840 d!26183))

(assert (=> b!97840 d!26135))

(assert (=> bm!9983 d!26013))

(declare-fun d!26461 () Bool)

(assert (=> d!26461 (= (apply!92 lt!48938 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48938) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4081 () Bool)

(assert (= bs!4081 d!26461))

(declare-fun m!108229 () Bool)

(assert (=> bs!4081 m!108229))

(assert (=> bs!4081 m!108229))

(declare-fun m!108231 () Bool)

(assert (=> bs!4081 m!108231))

(assert (=> b!97754 d!26461))

(declare-fun d!26463 () Bool)

(assert (=> d!26463 (= (get!1292 (getValueByKey!151 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48886)) (v!2807 (getValueByKey!151 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48886)))))

(assert (=> d!26045 d!26463))

(declare-fun b!98606 () Bool)

(declare-fun e!64262 () Option!157)

(assert (=> b!98606 (= e!64262 (Some!156 (_2!1161 (h!2154 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun b!98609 () Bool)

(declare-fun e!64263 () Option!157)

(assert (=> b!98609 (= e!64263 None!155)))

(declare-fun b!98607 () Bool)

(assert (=> b!98607 (= e!64262 e!64263)))

(declare-fun c!16784 () Bool)

(assert (=> b!98607 (= c!16784 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (not (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48886))))))

(declare-fun c!16783 () Bool)

(declare-fun d!26465 () Bool)

(assert (=> d!26465 (= c!16783 (and ((_ is Cons!1560) (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (= (_1!1161 (h!2154 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))) lt!48886)))))

(assert (=> d!26465 (= (getValueByKey!151 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!48886) e!64262)))

(declare-fun b!98608 () Bool)

(assert (=> b!98608 (= e!64263 (getValueByKey!151 (t!5510 (toList!765 (+!130 lt!48889 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!48886))))

(assert (= (and d!26465 c!16783) b!98606))

(assert (= (and d!26465 (not c!16783)) b!98607))

(assert (= (and b!98607 c!16784) b!98608))

(assert (= (and b!98607 (not c!16784)) b!98609))

(declare-fun m!108233 () Bool)

(assert (=> b!98608 m!108233))

(assert (=> d!26045 d!26465))

(declare-fun d!26467 () Bool)

(declare-fun e!64264 () Bool)

(assert (=> d!26467 e!64264))

(declare-fun res!49593 () Bool)

(assert (=> d!26467 (=> res!49593 e!64264)))

(declare-fun lt!49569 () Bool)

(assert (=> d!26467 (= res!49593 (not lt!49569))))

(declare-fun lt!49572 () Bool)

(assert (=> d!26467 (= lt!49569 lt!49572)))

(declare-fun lt!49570 () Unit!2917)

(declare-fun e!64265 () Unit!2917)

(assert (=> d!26467 (= lt!49570 e!64265)))

(declare-fun c!16785 () Bool)

(assert (=> d!26467 (= c!16785 lt!49572)))

(assert (=> d!26467 (= lt!49572 (containsKey!154 (toList!765 lt!48913) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26467 (= (contains!788 lt!48913 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) lt!49569)))

(declare-fun b!98610 () Bool)

(declare-fun lt!49571 () Unit!2917)

(assert (=> b!98610 (= e!64265 lt!49571)))

(assert (=> b!98610 (= lt!49571 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48913) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98610 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98611 () Bool)

(declare-fun Unit!2968 () Unit!2917)

(assert (=> b!98611 (= e!64265 Unit!2968)))

(declare-fun b!98612 () Bool)

(assert (=> b!98612 (= e!64264 (isDefined!103 (getValueByKey!151 (toList!765 lt!48913) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26467 c!16785) b!98610))

(assert (= (and d!26467 (not c!16785)) b!98611))

(assert (= (and d!26467 (not res!49593)) b!98612))

(assert (=> d!26467 m!106551))

(declare-fun m!108235 () Bool)

(assert (=> d!26467 m!108235))

(assert (=> b!98610 m!106551))

(declare-fun m!108237 () Bool)

(assert (=> b!98610 m!108237))

(assert (=> b!98610 m!106551))

(declare-fun m!108239 () Bool)

(assert (=> b!98610 m!108239))

(assert (=> b!98610 m!108239))

(declare-fun m!108241 () Bool)

(assert (=> b!98610 m!108241))

(assert (=> b!98612 m!106551))

(assert (=> b!98612 m!108239))

(assert (=> b!98612 m!108239))

(assert (=> b!98612 m!108241))

(assert (=> b!97725 d!26467))

(declare-fun b!98613 () Bool)

(assert (=> b!98613 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> b!98613 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun lt!49575 () ListLongMap!1499)

(declare-fun e!64268 () Bool)

(assert (=> b!98613 (= e!64268 (= (apply!92 lt!49575 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98614 () Bool)

(declare-fun e!64271 () Bool)

(declare-fun e!64270 () Bool)

(assert (=> b!98614 (= e!64271 e!64270)))

(declare-fun c!16787 () Bool)

(assert (=> b!98614 (= c!16787 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98615 () Bool)

(assert (=> b!98615 (= e!64271 e!64268)))

(assert (=> b!98615 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun res!49597 () Bool)

(assert (=> b!98615 (= res!49597 (contains!788 lt!49575 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98615 (=> (not res!49597) (not e!64268))))

(declare-fun b!98616 () Bool)

(declare-fun e!64267 () ListLongMap!1499)

(declare-fun call!10051 () ListLongMap!1499)

(assert (=> b!98616 (= e!64267 call!10051)))

(declare-fun b!98617 () Bool)

(declare-fun e!64269 () Bool)

(assert (=> b!98617 (= e!64269 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98617 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun d!26469 () Bool)

(declare-fun e!64272 () Bool)

(assert (=> d!26469 e!64272))

(declare-fun res!49596 () Bool)

(assert (=> d!26469 (=> (not res!49596) (not e!64272))))

(assert (=> d!26469 (= res!49596 (not (contains!788 lt!49575 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!64266 () ListLongMap!1499)

(assert (=> d!26469 (= lt!49575 e!64266)))

(declare-fun c!16788 () Bool)

(assert (=> d!26469 (= c!16788 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26469 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992))))))

(assert (=> d!26469 (= (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))) lt!49575)))

(declare-fun b!98618 () Bool)

(assert (=> b!98618 (= e!64270 (isEmpty!363 lt!49575))))

(declare-fun b!98619 () Bool)

(assert (=> b!98619 (= e!64266 (ListLongMap!1500 Nil!1561))))

(declare-fun b!98620 () Bool)

(assert (=> b!98620 (= e!64272 e!64271)))

(declare-fun c!16786 () Bool)

(assert (=> b!98620 (= c!16786 e!64269)))

(declare-fun res!49595 () Bool)

(assert (=> b!98620 (=> (not res!49595) (not e!64269))))

(assert (=> b!98620 (= res!49595 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98621 () Bool)

(declare-fun res!49594 () Bool)

(assert (=> b!98621 (=> (not res!49594) (not e!64272))))

(assert (=> b!98621 (= res!49594 (not (contains!788 lt!49575 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98622 () Bool)

(declare-fun lt!49577 () Unit!2917)

(declare-fun lt!49574 () Unit!2917)

(assert (=> b!98622 (= lt!49577 lt!49574)))

(declare-fun lt!49576 () (_ BitVec 64))

(declare-fun lt!49578 () ListLongMap!1499)

(declare-fun lt!49573 () V!3153)

(declare-fun lt!49579 () (_ BitVec 64))

(assert (=> b!98622 (not (contains!788 (+!130 lt!49578 (tuple2!2301 lt!49579 lt!49573)) lt!49576))))

(assert (=> b!98622 (= lt!49574 (addStillNotContains!42 lt!49578 lt!49579 lt!49573 lt!49576))))

(assert (=> b!98622 (= lt!49576 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98622 (= lt!49573 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98622 (= lt!49579 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!98622 (= lt!49578 call!10051)))

(assert (=> b!98622 (= e!64267 (+!130 call!10051 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98623 () Bool)

(assert (=> b!98623 (= e!64266 e!64267)))

(declare-fun c!16789 () Bool)

(assert (=> b!98623 (= c!16789 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98624 () Bool)

(assert (=> b!98624 (= e!64270 (= lt!49575 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun bm!10048 () Bool)

(assert (=> bm!10048 (= call!10051 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (_values!2463 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992))) (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) (minValue!2363 (v!2801 (underlying!338 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992)))))))

(assert (= (and d!26469 c!16788) b!98619))

(assert (= (and d!26469 (not c!16788)) b!98623))

(assert (= (and b!98623 c!16789) b!98622))

(assert (= (and b!98623 (not c!16789)) b!98616))

(assert (= (or b!98622 b!98616) bm!10048))

(assert (= (and d!26469 res!49596) b!98621))

(assert (= (and b!98621 res!49594) b!98620))

(assert (= (and b!98620 res!49595) b!98617))

(assert (= (and b!98620 c!16786) b!98615))

(assert (= (and b!98620 (not c!16786)) b!98614))

(assert (= (and b!98615 res!49597) b!98613))

(assert (= (and b!98614 c!16787) b!98624))

(assert (= (and b!98614 (not c!16787)) b!98618))

(declare-fun b_lambda!4377 () Bool)

(assert (=> (not b_lambda!4377) (not b!98613)))

(assert (=> b!98613 t!5507))

(declare-fun b_and!6053 () Bool)

(assert (= b_and!6049 (and (=> t!5507 result!3251) b_and!6053)))

(assert (=> b!98613 t!5509))

(declare-fun b_and!6055 () Bool)

(assert (= b_and!6051 (and (=> t!5509 result!3255) b_and!6055)))

(declare-fun b_lambda!4379 () Bool)

(assert (=> (not b_lambda!4379) (not b!98622)))

(assert (=> b!98622 t!5507))

(declare-fun b_and!6057 () Bool)

(assert (= b_and!6053 (and (=> t!5507 result!3251) b_and!6057)))

(assert (=> b!98622 t!5509))

(declare-fun b_and!6059 () Bool)

(assert (= b_and!6055 (and (=> t!5509 result!3255) b_and!6059)))

(declare-fun m!108243 () Bool)

(assert (=> bm!10048 m!108243))

(declare-fun m!108245 () Bool)

(assert (=> d!26469 m!108245))

(assert (=> d!26469 m!106267))

(assert (=> b!98623 m!106747))

(assert (=> b!98623 m!106747))

(declare-fun m!108247 () Bool)

(assert (=> b!98623 m!108247))

(declare-fun m!108249 () Bool)

(assert (=> b!98621 m!108249))

(assert (=> b!98624 m!108243))

(declare-fun m!108251 () Bool)

(assert (=> b!98618 m!108251))

(declare-fun m!108253 () Bool)

(assert (=> b!98613 m!108253))

(assert (=> b!98613 m!106275))

(declare-fun m!108255 () Bool)

(assert (=> b!98613 m!108255))

(assert (=> b!98613 m!106747))

(declare-fun m!108257 () Bool)

(assert (=> b!98613 m!108257))

(assert (=> b!98613 m!106747))

(assert (=> b!98613 m!106275))

(assert (=> b!98613 m!108253))

(assert (=> b!98615 m!106747))

(assert (=> b!98615 m!106747))

(declare-fun m!108259 () Bool)

(assert (=> b!98615 m!108259))

(declare-fun m!108261 () Bool)

(assert (=> b!98622 m!108261))

(declare-fun m!108263 () Bool)

(assert (=> b!98622 m!108263))

(assert (=> b!98622 m!108261))

(declare-fun m!108265 () Bool)

(assert (=> b!98622 m!108265))

(assert (=> b!98622 m!106747))

(assert (=> b!98622 m!106275))

(assert (=> b!98622 m!108253))

(assert (=> b!98622 m!108253))

(assert (=> b!98622 m!106275))

(assert (=> b!98622 m!108255))

(declare-fun m!108267 () Bool)

(assert (=> b!98622 m!108267))

(assert (=> b!98617 m!106747))

(assert (=> b!98617 m!106747))

(assert (=> b!98617 m!108247))

(assert (=> b!97948 d!26469))

(assert (=> d!26033 d!25941))

(declare-fun d!26471 () Bool)

(declare-fun e!64273 () Bool)

(assert (=> d!26471 e!64273))

(declare-fun res!49599 () Bool)

(assert (=> d!26471 (=> (not res!49599) (not e!64273))))

(declare-fun lt!49580 () ListLongMap!1499)

(assert (=> d!26471 (= res!49599 (contains!788 lt!49580 (_1!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(declare-fun lt!49581 () List!1564)

(assert (=> d!26471 (= lt!49580 (ListLongMap!1500 lt!49581))))

(declare-fun lt!49583 () Unit!2917)

(declare-fun lt!49582 () Unit!2917)

(assert (=> d!26471 (= lt!49583 lt!49582)))

(assert (=> d!26471 (= (getValueByKey!151 lt!49581 (_1!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))) (Some!156 (_2!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26471 (= lt!49582 (lemmaContainsTupThenGetReturnValue!67 lt!49581 (_1!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (_2!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26471 (= lt!49581 (insertStrictlySorted!70 (toList!765 (ite c!16564 call!9948 (ite c!16560 call!9949 call!9950))) (_1!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) (_2!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))))))

(assert (=> d!26471 (= (+!130 (ite c!16564 call!9948 (ite c!16560 call!9949 call!9950)) (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))) lt!49580)))

(declare-fun b!98625 () Bool)

(declare-fun res!49598 () Bool)

(assert (=> b!98625 (=> (not res!49598) (not e!64273))))

(assert (=> b!98625 (= res!49598 (= (getValueByKey!151 (toList!765 lt!49580) (_1!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16)))))) (Some!156 (_2!1161 (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))))

(declare-fun b!98626 () Bool)

(assert (=> b!98626 (= e!64273 (contains!791 (toList!765 lt!49580) (ite (or c!16564 c!16560) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16512 c!16518) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2363 newMap!16))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16512 (ite c!16518 (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2363 newMap!16))))))))

(assert (= (and d!26471 res!49599) b!98625))

(assert (= (and b!98625 res!49598) b!98626))

(declare-fun m!108269 () Bool)

(assert (=> d!26471 m!108269))

(declare-fun m!108271 () Bool)

(assert (=> d!26471 m!108271))

(declare-fun m!108273 () Bool)

(assert (=> d!26471 m!108273))

(declare-fun m!108275 () Bool)

(assert (=> d!26471 m!108275))

(declare-fun m!108277 () Bool)

(assert (=> b!98625 m!108277))

(declare-fun m!108279 () Bool)

(assert (=> b!98626 m!108279))

(assert (=> bm!9950 d!26471))

(assert (=> b!97947 d!25979))

(declare-fun d!26473 () Bool)

(assert (=> d!26473 (= (apply!92 lt!48913 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!48913) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4082 () Bool)

(assert (= bs!4082 d!26473))

(assert (=> bs!4082 m!107465))

(assert (=> bs!4082 m!107465))

(declare-fun m!108281 () Bool)

(assert (=> bs!4082 m!108281))

(assert (=> b!97740 d!26473))

(declare-fun d!26475 () Bool)

(declare-fun e!64274 () Bool)

(assert (=> d!26475 e!64274))

(declare-fun res!49600 () Bool)

(assert (=> d!26475 (=> res!49600 e!64274)))

(declare-fun lt!49584 () Bool)

(assert (=> d!26475 (= res!49600 (not lt!49584))))

(declare-fun lt!49587 () Bool)

(assert (=> d!26475 (= lt!49584 lt!49587)))

(declare-fun lt!49585 () Unit!2917)

(declare-fun e!64275 () Unit!2917)

(assert (=> d!26475 (= lt!49585 e!64275)))

(declare-fun c!16790 () Bool)

(assert (=> d!26475 (= c!16790 lt!49587)))

(assert (=> d!26475 (= lt!49587 (containsKey!154 (toList!765 lt!49009) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26475 (= (contains!788 lt!49009 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49584)))

(declare-fun b!98627 () Bool)

(declare-fun lt!49586 () Unit!2917)

(assert (=> b!98627 (= e!64275 lt!49586)))

(assert (=> b!98627 (= lt!49586 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49009) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98627 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98628 () Bool)

(declare-fun Unit!2969 () Unit!2917)

(assert (=> b!98628 (= e!64275 Unit!2969)))

(declare-fun b!98629 () Bool)

(assert (=> b!98629 (= e!64274 (isDefined!103 (getValueByKey!151 (toList!765 lt!49009) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26475 c!16790) b!98627))

(assert (= (and d!26475 (not c!16790)) b!98628))

(assert (= (and d!26475 (not res!49600)) b!98629))

(declare-fun m!108283 () Bool)

(assert (=> d!26475 m!108283))

(declare-fun m!108285 () Bool)

(assert (=> b!98627 m!108285))

(declare-fun m!108287 () Bool)

(assert (=> b!98627 m!108287))

(assert (=> b!98627 m!108287))

(declare-fun m!108289 () Bool)

(assert (=> b!98627 m!108289))

(assert (=> b!98629 m!108287))

(assert (=> b!98629 m!108287))

(assert (=> b!98629 m!108289))

(assert (=> bm!9964 d!26475))

(assert (=> b!97824 d!26157))

(declare-fun b!98633 () Bool)

(declare-fun e!64276 () Bool)

(assert (=> b!98633 (= e!64276 (and (bvsge (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!474 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!98632 () Bool)

(declare-fun res!49604 () Bool)

(assert (=> b!98632 (=> (not res!49604) (not e!64276))))

(assert (=> b!98632 (= res!49604 (= (size!2262 (v!2801 (underlying!338 thiss!992))) (bvadd (_size!474 (v!2801 (underlying!338 thiss!992))) (bvsdiv (bvadd (extraKeys!2301 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98631 () Bool)

(declare-fun res!49602 () Bool)

(assert (=> b!98631 (=> (not res!49602) (not e!64276))))

(assert (=> b!98631 (= res!49602 (bvsge (size!2262 (v!2801 (underlying!338 thiss!992))) (_size!474 (v!2801 (underlying!338 thiss!992)))))))

(declare-fun b!98630 () Bool)

(declare-fun res!49601 () Bool)

(assert (=> b!98630 (=> (not res!49601) (not e!64276))))

(assert (=> b!98630 (= res!49601 (and (= (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992)))) (bvadd (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001)) (= (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (size!2257 (_values!2463 (v!2801 (underlying!338 thiss!992))))) (bvsge (_size!474 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!474 (v!2801 (underlying!338 thiss!992))) (bvadd (mask!6577 (v!2801 (underlying!338 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun d!26477 () Bool)

(declare-fun res!49603 () Bool)

(assert (=> d!26477 (=> (not res!49603) (not e!64276))))

(assert (=> d!26477 (= res!49603 (validMask!0 (mask!6577 (v!2801 (underlying!338 thiss!992)))))))

(assert (=> d!26477 (= (simpleValid!68 (v!2801 (underlying!338 thiss!992))) e!64276)))

(assert (= (and d!26477 res!49603) b!98630))

(assert (= (and b!98630 res!49601) b!98631))

(assert (= (and b!98631 res!49602) b!98632))

(assert (= (and b!98632 res!49604) b!98633))

(declare-fun m!108291 () Bool)

(assert (=> b!98632 m!108291))

(assert (=> b!98631 m!108291))

(assert (=> d!26477 m!106267))

(assert (=> d!25975 d!26477))

(declare-fun d!26479 () Bool)

(assert (=> d!26479 (= (apply!92 lt!48938 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1292 (getValueByKey!151 (toList!765 lt!48938) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4083 () Bool)

(assert (= bs!4083 d!26479))

(assert (=> bs!4083 m!106551))

(assert (=> bs!4083 m!107769))

(assert (=> bs!4083 m!107769))

(declare-fun m!108293 () Bool)

(assert (=> bs!4083 m!108293))

(assert (=> b!97750 d!26479))

(declare-fun c!16791 () Bool)

(declare-fun d!26481 () Bool)

(assert (=> d!26481 (= c!16791 ((_ is ValueCellFull!971) (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!64277 () V!3153)

(assert (=> d!26481 (= (get!1288 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64277)))

(declare-fun b!98634 () Bool)

(assert (=> b!98634 (= e!64277 (get!1290 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98635 () Bool)

(assert (=> b!98635 (= e!64277 (get!1291 (select (arr!2007 (ite c!16512 (_values!2463 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26481 c!16791) b!98634))

(assert (= (and d!26481 (not c!16791)) b!98635))

(assert (=> b!98634 m!106625))

(assert (=> b!98634 m!106557))

(declare-fun m!108295 () Bool)

(assert (=> b!98634 m!108295))

(assert (=> b!98635 m!106625))

(assert (=> b!98635 m!106557))

(declare-fun m!108297 () Bool)

(assert (=> b!98635 m!108297))

(assert (=> b!97750 d!26481))

(declare-fun d!26483 () Bool)

(assert (=> d!26483 (= (get!1292 (getValueByKey!151 (toList!765 lt!48883) lt!48885)) (v!2807 (getValueByKey!151 (toList!765 lt!48883) lt!48885)))))

(assert (=> d!26063 d!26483))

(declare-fun b!98636 () Bool)

(declare-fun e!64278 () Option!157)

(assert (=> b!98636 (= e!64278 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48883)))))))

(declare-fun b!98639 () Bool)

(declare-fun e!64279 () Option!157)

(assert (=> b!98639 (= e!64279 None!155)))

(declare-fun b!98637 () Bool)

(assert (=> b!98637 (= e!64278 e!64279)))

(declare-fun c!16793 () Bool)

(assert (=> b!98637 (= c!16793 (and ((_ is Cons!1560) (toList!765 lt!48883)) (not (= (_1!1161 (h!2154 (toList!765 lt!48883))) lt!48885))))))

(declare-fun d!26485 () Bool)

(declare-fun c!16792 () Bool)

(assert (=> d!26485 (= c!16792 (and ((_ is Cons!1560) (toList!765 lt!48883)) (= (_1!1161 (h!2154 (toList!765 lt!48883))) lt!48885)))))

(assert (=> d!26485 (= (getValueByKey!151 (toList!765 lt!48883) lt!48885) e!64278)))

(declare-fun b!98638 () Bool)

(assert (=> b!98638 (= e!64279 (getValueByKey!151 (t!5510 (toList!765 lt!48883)) lt!48885))))

(assert (= (and d!26485 c!16792) b!98636))

(assert (= (and d!26485 (not c!16792)) b!98637))

(assert (= (and b!98637 c!16793) b!98638))

(assert (= (and b!98637 (not c!16793)) b!98639))

(declare-fun m!108299 () Bool)

(assert (=> b!98638 m!108299))

(assert (=> d!26063 d!26485))

(declare-fun b!98640 () Bool)

(declare-fun e!64282 () Bool)

(declare-fun call!10052 () Bool)

(assert (=> b!98640 (= e!64282 call!10052)))

(declare-fun b!98641 () Bool)

(assert (=> b!98641 (= e!64282 call!10052)))

(declare-fun b!98642 () Bool)

(declare-fun e!64281 () Bool)

(declare-fun e!64283 () Bool)

(assert (=> b!98642 (= e!64281 e!64283)))

(declare-fun res!49605 () Bool)

(assert (=> b!98642 (=> (not res!49605) (not e!64283))))

(declare-fun e!64280 () Bool)

(assert (=> b!98642 (= res!49605 (not e!64280))))

(declare-fun res!49606 () Bool)

(assert (=> b!98642 (=> (not res!49606) (not e!64280))))

(assert (=> b!98642 (= res!49606 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(declare-fun bm!10049 () Bool)

(declare-fun c!16794 () Bool)

(assert (=> bm!10049 (= call!10052 (arrayNoDuplicates!0 (_keys!4170 (_2!1160 lt!48807)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16794 (Cons!1561 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000) Nil!1562) Nil!1562)))))

(declare-fun b!98644 () Bool)

(assert (=> b!98644 (= e!64283 e!64282)))

(assert (=> b!98644 (= c!16794 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(declare-fun d!26487 () Bool)

(declare-fun res!49607 () Bool)

(assert (=> d!26487 (=> res!49607 e!64281)))

(assert (=> d!26487 (= res!49607 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(assert (=> d!26487 (= (arrayNoDuplicates!0 (_keys!4170 (_2!1160 lt!48807)) #b00000000000000000000000000000000 Nil!1562) e!64281)))

(declare-fun b!98643 () Bool)

(assert (=> b!98643 (= e!64280 (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(assert (= (and d!26487 (not res!49607)) b!98642))

(assert (= (and b!98642 res!49606) b!98643))

(assert (= (and b!98642 res!49605) b!98644))

(assert (= (and b!98644 c!16794) b!98640))

(assert (= (and b!98644 (not c!16794)) b!98641))

(assert (= (or b!98640 b!98641) bm!10049))

(assert (=> b!98642 m!107445))

(assert (=> b!98642 m!107445))

(assert (=> b!98642 m!107447))

(assert (=> bm!10049 m!107445))

(declare-fun m!108301 () Bool)

(assert (=> bm!10049 m!108301))

(assert (=> b!98644 m!107445))

(assert (=> b!98644 m!107445))

(assert (=> b!98644 m!107447))

(assert (=> b!98643 m!107445))

(assert (=> b!98643 m!107445))

(declare-fun m!108303 () Bool)

(assert (=> b!98643 m!108303))

(assert (=> b!97851 d!26487))

(assert (=> d!25993 d!25969))

(declare-fun lt!49590 () SeekEntryResult!247)

(declare-fun bm!10054 () Bool)

(declare-fun call!10058 () Bool)

(declare-fun c!16800 () Bool)

(assert (=> bm!10054 (= call!10058 (inRange!0 (ite c!16800 (index!3131 lt!49590) (index!3134 lt!49590)) (mask!6577 newMap!16)))))

(declare-fun d!26489 () Bool)

(declare-fun e!64292 () Bool)

(assert (=> d!26489 e!64292))

(assert (=> d!26489 (= c!16800 ((_ is MissingZero!247) lt!49590))))

(assert (=> d!26489 (= lt!49590 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (=> d!26489 true))

(declare-fun _$34!867 () Unit!2917)

(assert (=> d!26489 (= (choose!598 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) _$34!867)))

(declare-fun b!98661 () Bool)

(declare-fun e!64295 () Bool)

(assert (=> b!98661 (= e!64292 e!64295)))

(declare-fun res!49619 () Bool)

(assert (=> b!98661 (= res!49619 call!10058)))

(assert (=> b!98661 (=> (not res!49619) (not e!64295))))

(declare-fun bm!10055 () Bool)

(declare-fun call!10057 () Bool)

(assert (=> bm!10055 (= call!10057 (arrayContainsKey!0 (_keys!4170 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98662 () Bool)

(assert (=> b!98662 (= e!64295 (not call!10057))))

(declare-fun b!98663 () Bool)

(declare-fun res!49618 () Bool)

(declare-fun e!64293 () Bool)

(assert (=> b!98663 (=> (not res!49618) (not e!64293))))

(assert (=> b!98663 (= res!49618 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3134 lt!49590)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98664 () Bool)

(declare-fun e!64294 () Bool)

(assert (=> b!98664 (= e!64292 e!64294)))

(declare-fun c!16799 () Bool)

(assert (=> b!98664 (= c!16799 ((_ is MissingVacant!247) lt!49590))))

(declare-fun b!98665 () Bool)

(assert (=> b!98665 (= e!64293 (not call!10057))))

(declare-fun b!98666 () Bool)

(assert (=> b!98666 (= e!64294 ((_ is Undefined!247) lt!49590))))

(declare-fun b!98667 () Bool)

(declare-fun res!49617 () Bool)

(assert (=> b!98667 (= res!49617 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3131 lt!49590)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98667 (=> (not res!49617) (not e!64295))))

(declare-fun b!98668 () Bool)

(declare-fun res!49616 () Bool)

(assert (=> b!98668 (=> (not res!49616) (not e!64293))))

(assert (=> b!98668 (= res!49616 call!10058)))

(assert (=> b!98668 (= e!64294 e!64293)))

(assert (= (and d!26489 c!16800) b!98661))

(assert (= (and d!26489 (not c!16800)) b!98664))

(assert (= (and b!98661 res!49619) b!98667))

(assert (= (and b!98667 res!49617) b!98662))

(assert (= (and b!98664 c!16799) b!98668))

(assert (= (and b!98664 (not c!16799)) b!98666))

(assert (= (and b!98668 res!49616) b!98663))

(assert (= (and b!98663 res!49618) b!98665))

(assert (= (or b!98661 b!98668) bm!10054))

(assert (= (or b!98662 b!98665) bm!10055))

(declare-fun m!108305 () Bool)

(assert (=> b!98667 m!108305))

(declare-fun m!108307 () Bool)

(assert (=> bm!10054 m!108307))

(declare-fun m!108309 () Bool)

(assert (=> b!98663 m!108309))

(assert (=> bm!10055 m!106251))

(assert (=> bm!10055 m!106411))

(assert (=> d!26489 m!106251))

(assert (=> d!26489 m!106423))

(assert (=> d!25993 d!26489))

(assert (=> d!25993 d!26099))

(assert (=> bm!9949 d!26301))

(declare-fun d!26491 () Bool)

(declare-fun lt!49591 () Bool)

(assert (=> d!26491 (= lt!49591 (select (content!103 (toList!765 lt!49071)) (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun e!64296 () Bool)

(assert (=> d!26491 (= lt!49591 e!64296)))

(declare-fun res!49620 () Bool)

(assert (=> d!26491 (=> (not res!49620) (not e!64296))))

(assert (=> d!26491 (= res!49620 ((_ is Cons!1560) (toList!765 lt!49071)))))

(assert (=> d!26491 (= (contains!791 (toList!765 lt!49071) (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49591)))

(declare-fun b!98669 () Bool)

(declare-fun e!64297 () Bool)

(assert (=> b!98669 (= e!64296 e!64297)))

(declare-fun res!49621 () Bool)

(assert (=> b!98669 (=> res!49621 e!64297)))

(assert (=> b!98669 (= res!49621 (= (h!2154 (toList!765 lt!49071)) (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98670 () Bool)

(assert (=> b!98670 (= e!64297 (contains!791 (t!5510 (toList!765 lt!49071)) (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26491 res!49620) b!98669))

(assert (= (and b!98669 (not res!49621)) b!98670))

(declare-fun m!108311 () Bool)

(assert (=> d!26491 m!108311))

(declare-fun m!108313 () Bool)

(assert (=> d!26491 m!108313))

(declare-fun m!108315 () Bool)

(assert (=> b!98670 m!108315))

(assert (=> b!97950 d!26491))

(assert (=> b!98018 d!26225))

(assert (=> b!98018 d!26227))

(declare-fun d!26493 () Bool)

(declare-fun res!49622 () Bool)

(declare-fun e!64298 () Bool)

(assert (=> d!26493 (=> res!49622 e!64298)))

(assert (=> d!26493 (= res!49622 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26493 (= (containsKey!154 (toList!765 lt!48882) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64298)))

(declare-fun b!98671 () Bool)

(declare-fun e!64299 () Bool)

(assert (=> b!98671 (= e!64298 e!64299)))

(declare-fun res!49623 () Bool)

(assert (=> b!98671 (=> (not res!49623) (not e!64299))))

(assert (=> b!98671 (= res!49623 (and (or (not ((_ is Cons!1560) (toList!765 lt!48882))) (bvsle (_1!1161 (h!2154 (toList!765 lt!48882))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1560) (toList!765 lt!48882)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48882))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!98672 () Bool)

(assert (=> b!98672 (= e!64299 (containsKey!154 (t!5510 (toList!765 lt!48882)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26493 (not res!49622)) b!98671))

(assert (= (and b!98671 res!49623) b!98672))

(assert (=> b!98672 m!106381))

(declare-fun m!108317 () Bool)

(assert (=> b!98672 m!108317))

(assert (=> d!26001 d!26493))

(declare-fun b!98673 () Bool)

(declare-fun e!64302 () Bool)

(declare-fun call!10065 () Bool)

(assert (=> b!98673 (= e!64302 (not call!10065))))

(declare-fun b!98674 () Bool)

(declare-fun e!64307 () Bool)

(declare-fun e!64304 () Bool)

(assert (=> b!98674 (= e!64307 e!64304)))

(declare-fun res!49629 () Bool)

(assert (=> b!98674 (=> (not res!49629) (not e!64304))))

(declare-fun lt!49597 () ListLongMap!1499)

(assert (=> b!98674 (= res!49629 (contains!788 lt!49597 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98674 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98675 () Bool)

(assert (=> b!98675 (= e!64304 (= (apply!92 lt!49597 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98675 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (_values!2463 newMap!16))))))

(assert (=> b!98675 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10056 () Bool)

(declare-fun call!10059 () Bool)

(assert (=> bm!10056 (= call!10059 (contains!788 lt!49597 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun call!10064 () ListLongMap!1499)

(declare-fun b!98676 () Bool)

(declare-fun e!64309 () ListLongMap!1499)

(assert (=> b!98676 (= e!64309 (+!130 call!10064 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98677 () Bool)

(declare-fun e!64301 () Unit!2917)

(declare-fun lt!49612 () Unit!2917)

(assert (=> b!98677 (= e!64301 lt!49612)))

(declare-fun lt!49609 () ListLongMap!1499)

(assert (=> b!98677 (= lt!49609 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49605 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49605 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49603 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49603 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49599 () Unit!2917)

(assert (=> b!98677 (= lt!49599 (addStillContains!68 lt!49609 lt!49605 (zeroValue!2363 newMap!16) lt!49603))))

(assert (=> b!98677 (contains!788 (+!130 lt!49609 (tuple2!2301 lt!49605 (zeroValue!2363 newMap!16))) lt!49603)))

(declare-fun lt!49608 () Unit!2917)

(assert (=> b!98677 (= lt!49608 lt!49599)))

(declare-fun lt!49598 () ListLongMap!1499)

(assert (=> b!98677 (= lt!49598 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49610 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49610 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49600 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49600 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49606 () Unit!2917)

(assert (=> b!98677 (= lt!49606 (addApplyDifferent!68 lt!49598 lt!49610 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49600))))

(assert (=> b!98677 (= (apply!92 (+!130 lt!49598 (tuple2!2301 lt!49610 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49600) (apply!92 lt!49598 lt!49600))))

(declare-fun lt!49602 () Unit!2917)

(assert (=> b!98677 (= lt!49602 lt!49606)))

(declare-fun lt!49613 () ListLongMap!1499)

(assert (=> b!98677 (= lt!49613 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49596 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49596 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49607 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49607 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49595 () Unit!2917)

(assert (=> b!98677 (= lt!49595 (addApplyDifferent!68 lt!49613 lt!49596 (zeroValue!2363 newMap!16) lt!49607))))

(assert (=> b!98677 (= (apply!92 (+!130 lt!49613 (tuple2!2301 lt!49596 (zeroValue!2363 newMap!16))) lt!49607) (apply!92 lt!49613 lt!49607))))

(declare-fun lt!49593 () Unit!2917)

(assert (=> b!98677 (= lt!49593 lt!49595)))

(declare-fun lt!49604 () ListLongMap!1499)

(assert (=> b!98677 (= lt!49604 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49594 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49594 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49601 () (_ BitVec 64))

(assert (=> b!98677 (= lt!49601 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98677 (= lt!49612 (addApplyDifferent!68 lt!49604 lt!49594 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49601))))

(assert (=> b!98677 (= (apply!92 (+!130 lt!49604 (tuple2!2301 lt!49594 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49601) (apply!92 lt!49604 lt!49601))))

(declare-fun b!98678 () Bool)

(declare-fun c!16801 () Bool)

(assert (=> b!98678 (= c!16801 (and (not (= (bvand lt!48810 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48810 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64300 () ListLongMap!1499)

(declare-fun e!64305 () ListLongMap!1499)

(assert (=> b!98678 (= e!64300 e!64305)))

(declare-fun b!98679 () Bool)

(declare-fun e!64311 () Bool)

(assert (=> b!98679 (= e!64311 (= (apply!92 lt!49597 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98680 () Bool)

(declare-fun e!64303 () Bool)

(assert (=> b!98680 (= e!64303 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98681 () Bool)

(declare-fun res!49630 () Bool)

(declare-fun e!64310 () Bool)

(assert (=> b!98681 (=> (not res!49630) (not e!64310))))

(declare-fun e!64312 () Bool)

(assert (=> b!98681 (= res!49630 e!64312)))

(declare-fun c!16804 () Bool)

(assert (=> b!98681 (= c!16804 (not (= (bvand lt!48810 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98682 () Bool)

(declare-fun call!10063 () ListLongMap!1499)

(assert (=> b!98682 (= e!64300 call!10063)))

(declare-fun bm!10057 () Bool)

(assert (=> bm!10057 (= call!10063 call!10064)))

(declare-fun b!98683 () Bool)

(assert (=> b!98683 (= e!64312 (not call!10059))))

(declare-fun b!98684 () Bool)

(declare-fun e!64308 () Bool)

(assert (=> b!98684 (= e!64308 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10058 () Bool)

(declare-fun call!10061 () ListLongMap!1499)

(declare-fun call!10060 () ListLongMap!1499)

(assert (=> bm!10058 (= call!10061 call!10060)))

(declare-fun bm!10059 () Bool)

(assert (=> bm!10059 (= call!10065 (contains!788 lt!49597 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98685 () Bool)

(assert (=> b!98685 (= e!64310 e!64302)))

(declare-fun c!16803 () Bool)

(assert (=> b!98685 (= c!16803 (not (= (bvand lt!48810 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98686 () Bool)

(assert (=> b!98686 (= e!64312 e!64311)))

(declare-fun res!49631 () Bool)

(assert (=> b!98686 (= res!49631 call!10059)))

(assert (=> b!98686 (=> (not res!49631) (not e!64311))))

(declare-fun b!98687 () Bool)

(declare-fun e!64306 () Bool)

(assert (=> b!98687 (= e!64302 e!64306)))

(declare-fun res!49628 () Bool)

(assert (=> b!98687 (= res!49628 call!10065)))

(assert (=> b!98687 (=> (not res!49628) (not e!64306))))

(declare-fun b!98688 () Bool)

(declare-fun res!49624 () Bool)

(assert (=> b!98688 (=> (not res!49624) (not e!64310))))

(assert (=> b!98688 (= res!49624 e!64307)))

(declare-fun res!49625 () Bool)

(assert (=> b!98688 (=> res!49625 e!64307)))

(assert (=> b!98688 (= res!49625 (not e!64308))))

(declare-fun res!49627 () Bool)

(assert (=> b!98688 (=> (not res!49627) (not e!64308))))

(assert (=> b!98688 (= res!49627 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10060 () Bool)

(declare-fun call!10062 () ListLongMap!1499)

(assert (=> bm!10060 (= call!10062 call!10061)))

(declare-fun b!98689 () Bool)

(assert (=> b!98689 (= e!64306 (= (apply!92 lt!49597 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98690 () Bool)

(assert (=> b!98690 (= e!64309 e!64300)))

(declare-fun c!16802 () Bool)

(assert (=> b!98690 (= c!16802 (and (not (= (bvand lt!48810 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48810 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10061 () Bool)

(assert (=> bm!10061 (= call!10060 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98691 () Bool)

(declare-fun Unit!2970 () Unit!2917)

(assert (=> b!98691 (= e!64301 Unit!2970)))

(declare-fun b!98692 () Bool)

(assert (=> b!98692 (= e!64305 call!10062)))

(declare-fun b!98693 () Bool)

(assert (=> b!98693 (= e!64305 call!10063)))

(declare-fun bm!10062 () Bool)

(declare-fun c!16806 () Bool)

(assert (=> bm!10062 (= call!10064 (+!130 (ite c!16806 call!10060 (ite c!16802 call!10061 call!10062)) (ite (or c!16806 c!16802) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!26495 () Bool)

(assert (=> d!26495 e!64310))

(declare-fun res!49632 () Bool)

(assert (=> d!26495 (=> (not res!49632) (not e!64310))))

(assert (=> d!26495 (= res!49632 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!49611 () ListLongMap!1499)

(assert (=> d!26495 (= lt!49597 lt!49611)))

(declare-fun lt!49592 () Unit!2917)

(assert (=> d!26495 (= lt!49592 e!64301)))

(declare-fun c!16805 () Bool)

(assert (=> d!26495 (= c!16805 e!64303)))

(declare-fun res!49626 () Bool)

(assert (=> d!26495 (=> (not res!49626) (not e!64303))))

(assert (=> d!26495 (= res!49626 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26495 (= lt!49611 e!64309)))

(assert (=> d!26495 (= c!16806 (and (not (= (bvand lt!48810 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48810 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26495 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26495 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49597)))

(assert (= (and d!26495 c!16806) b!98676))

(assert (= (and d!26495 (not c!16806)) b!98690))

(assert (= (and b!98690 c!16802) b!98682))

(assert (= (and b!98690 (not c!16802)) b!98678))

(assert (= (and b!98678 c!16801) b!98693))

(assert (= (and b!98678 (not c!16801)) b!98692))

(assert (= (or b!98693 b!98692) bm!10060))

(assert (= (or b!98682 bm!10060) bm!10058))

(assert (= (or b!98682 b!98693) bm!10057))

(assert (= (or b!98676 bm!10058) bm!10061))

(assert (= (or b!98676 bm!10057) bm!10062))

(assert (= (and d!26495 res!49626) b!98680))

(assert (= (and d!26495 c!16805) b!98677))

(assert (= (and d!26495 (not c!16805)) b!98691))

(assert (= (and d!26495 res!49632) b!98688))

(assert (= (and b!98688 res!49627) b!98684))

(assert (= (and b!98688 (not res!49625)) b!98674))

(assert (= (and b!98674 res!49629) b!98675))

(assert (= (and b!98688 res!49624) b!98681))

(assert (= (and b!98681 c!16804) b!98686))

(assert (= (and b!98681 (not c!16804)) b!98683))

(assert (= (and b!98686 res!49631) b!98679))

(assert (= (or b!98686 b!98683) bm!10056))

(assert (= (and b!98681 res!49630) b!98685))

(assert (= (and b!98685 c!16803) b!98687))

(assert (= (and b!98685 (not c!16803)) b!98673))

(assert (= (and b!98687 res!49628) b!98689))

(assert (= (or b!98687 b!98673) bm!10059))

(declare-fun b_lambda!4381 () Bool)

(assert (=> (not b_lambda!4381) (not b!98675)))

(assert (=> b!98675 t!5523))

(declare-fun b_and!6061 () Bool)

(assert (= b_and!6057 (and (=> t!5523 result!3271) b_and!6061)))

(assert (=> b!98675 t!5525))

(declare-fun b_and!6063 () Bool)

(assert (= b_and!6059 (and (=> t!5525 result!3273) b_and!6063)))

(declare-fun m!108319 () Bool)

(assert (=> b!98679 m!108319))

(declare-fun m!108321 () Bool)

(assert (=> bm!10062 m!108321))

(declare-fun m!108323 () Bool)

(assert (=> b!98676 m!108323))

(assert (=> b!98674 m!106551))

(assert (=> b!98674 m!106551))

(declare-fun m!108325 () Bool)

(assert (=> b!98674 m!108325))

(assert (=> b!98675 m!106551))

(assert (=> b!98675 m!106555))

(assert (=> b!98675 m!106557))

(assert (=> b!98675 m!106551))

(declare-fun m!108327 () Bool)

(assert (=> b!98675 m!108327))

(assert (=> b!98675 m!106555))

(assert (=> b!98675 m!106557))

(assert (=> b!98675 m!106561))

(assert (=> bm!10061 m!106277))

(declare-fun m!108329 () Bool)

(assert (=> bm!10061 m!108329))

(declare-fun m!108331 () Bool)

(assert (=> b!98677 m!108331))

(declare-fun m!108333 () Bool)

(assert (=> b!98677 m!108333))

(assert (=> b!98677 m!106551))

(assert (=> b!98677 m!106277))

(declare-fun m!108335 () Bool)

(assert (=> b!98677 m!108335))

(assert (=> b!98677 m!106277))

(assert (=> b!98677 m!108329))

(declare-fun m!108337 () Bool)

(assert (=> b!98677 m!108337))

(declare-fun m!108339 () Bool)

(assert (=> b!98677 m!108339))

(assert (=> b!98677 m!106277))

(declare-fun m!108341 () Bool)

(assert (=> b!98677 m!108341))

(declare-fun m!108343 () Bool)

(assert (=> b!98677 m!108343))

(declare-fun m!108345 () Bool)

(assert (=> b!98677 m!108345))

(declare-fun m!108347 () Bool)

(assert (=> b!98677 m!108347))

(declare-fun m!108349 () Bool)

(assert (=> b!98677 m!108349))

(declare-fun m!108351 () Bool)

(assert (=> b!98677 m!108351))

(declare-fun m!108353 () Bool)

(assert (=> b!98677 m!108353))

(assert (=> b!98677 m!108353))

(declare-fun m!108355 () Bool)

(assert (=> b!98677 m!108355))

(assert (=> b!98677 m!108345))

(declare-fun m!108357 () Bool)

(assert (=> b!98677 m!108357))

(declare-fun m!108359 () Bool)

(assert (=> b!98677 m!108359))

(assert (=> b!98677 m!108331))

(assert (=> b!98677 m!108337))

(declare-fun m!108361 () Bool)

(assert (=> bm!10059 m!108361))

(assert (=> d!26495 m!106537))

(declare-fun m!108363 () Bool)

(assert (=> bm!10056 m!108363))

(assert (=> b!98684 m!106551))

(assert (=> b!98684 m!106551))

(assert (=> b!98684 m!106599))

(declare-fun m!108365 () Bool)

(assert (=> b!98689 m!108365))

(assert (=> b!98680 m!106551))

(assert (=> b!98680 m!106551))

(assert (=> b!98680 m!106599))

(assert (=> d!25977 d!26495))

(declare-fun d!26497 () Bool)

(declare-fun e!64313 () Bool)

(assert (=> d!26497 e!64313))

(declare-fun res!49634 () Bool)

(assert (=> d!26497 (=> (not res!49634) (not e!64313))))

(declare-fun lt!49614 () ListLongMap!1499)

(assert (=> d!26497 (= res!49634 (contains!788 lt!49614 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49615 () List!1564)

(assert (=> d!26497 (= lt!49614 (ListLongMap!1500 lt!49615))))

(declare-fun lt!49617 () Unit!2917)

(declare-fun lt!49616 () Unit!2917)

(assert (=> d!26497 (= lt!49617 lt!49616)))

(assert (=> d!26497 (= (getValueByKey!151 lt!49615 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= lt!49616 (lemmaContainsTupThenGetReturnValue!67 lt!49615 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= lt!49615 (insertStrictlySorted!70 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49614)))

(declare-fun b!98694 () Bool)

(declare-fun res!49633 () Bool)

(assert (=> b!98694 (=> (not res!49633) (not e!64313))))

(assert (=> b!98694 (= res!49633 (= (getValueByKey!151 (toList!765 lt!49614) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98695 () Bool)

(assert (=> b!98695 (= e!64313 (contains!791 (toList!765 lt!49614) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26497 res!49634) b!98694))

(assert (= (and b!98694 res!49633) b!98695))

(declare-fun m!108367 () Bool)

(assert (=> d!26497 m!108367))

(declare-fun m!108369 () Bool)

(assert (=> d!26497 m!108369))

(declare-fun m!108371 () Bool)

(assert (=> d!26497 m!108371))

(declare-fun m!108373 () Bool)

(assert (=> d!26497 m!108373))

(declare-fun m!108375 () Bool)

(assert (=> b!98694 m!108375))

(declare-fun m!108377 () Bool)

(assert (=> b!98695 m!108377))

(assert (=> d!25977 d!26497))

(assert (=> d!25977 d!25973))

(declare-fun d!26499 () Bool)

(assert (=> d!26499 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26499 true))

(declare-fun _$8!85 () Unit!2917)

(assert (=> d!26499 (= (choose!595 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) lt!48810 (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) _$8!85)))

(declare-fun bs!4084 () Bool)

(assert (= bs!4084 d!26499))

(assert (=> bs!4084 m!106413))

(assert (=> bs!4084 m!106413))

(assert (=> bs!4084 m!106611))

(assert (=> bs!4084 m!106277))

(assert (=> bs!4084 m!106613))

(assert (=> d!25977 d!26499))

(assert (=> d!25977 d!26099))

(assert (=> d!26051 d!26055))

(assert (=> d!26051 d!26039))

(declare-fun d!26501 () Bool)

(assert (=> d!26501 (contains!788 (+!130 lt!48894 (tuple2!2301 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48888)))

(assert (=> d!26501 true))

(declare-fun _$35!339 () Unit!2917)

(assert (=> d!26501 (= (choose!601 lt!48894 lt!48890 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48888) _$35!339)))

(declare-fun bs!4085 () Bool)

(assert (= bs!4085 d!26501))

(assert (=> bs!4085 m!106485))

(assert (=> bs!4085 m!106485))

(assert (=> bs!4085 m!106487))

(assert (=> d!26051 d!26501))

(declare-fun d!26503 () Bool)

(declare-fun e!64314 () Bool)

(assert (=> d!26503 e!64314))

(declare-fun res!49635 () Bool)

(assert (=> d!26503 (=> res!49635 e!64314)))

(declare-fun lt!49618 () Bool)

(assert (=> d!26503 (= res!49635 (not lt!49618))))

(declare-fun lt!49621 () Bool)

(assert (=> d!26503 (= lt!49618 lt!49621)))

(declare-fun lt!49619 () Unit!2917)

(declare-fun e!64315 () Unit!2917)

(assert (=> d!26503 (= lt!49619 e!64315)))

(declare-fun c!16807 () Bool)

(assert (=> d!26503 (= c!16807 lt!49621)))

(assert (=> d!26503 (= lt!49621 (containsKey!154 (toList!765 lt!48894) lt!48888))))

(assert (=> d!26503 (= (contains!788 lt!48894 lt!48888) lt!49618)))

(declare-fun b!98697 () Bool)

(declare-fun lt!49620 () Unit!2917)

(assert (=> b!98697 (= e!64315 lt!49620)))

(assert (=> b!98697 (= lt!49620 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48894) lt!48888))))

(assert (=> b!98697 (isDefined!103 (getValueByKey!151 (toList!765 lt!48894) lt!48888))))

(declare-fun b!98698 () Bool)

(declare-fun Unit!2971 () Unit!2917)

(assert (=> b!98698 (= e!64315 Unit!2971)))

(declare-fun b!98699 () Bool)

(assert (=> b!98699 (= e!64314 (isDefined!103 (getValueByKey!151 (toList!765 lt!48894) lt!48888)))))

(assert (= (and d!26503 c!16807) b!98697))

(assert (= (and d!26503 (not c!16807)) b!98698))

(assert (= (and d!26503 (not res!49635)) b!98699))

(declare-fun m!108379 () Bool)

(assert (=> d!26503 m!108379))

(declare-fun m!108381 () Bool)

(assert (=> b!98697 m!108381))

(declare-fun m!108383 () Bool)

(assert (=> b!98697 m!108383))

(assert (=> b!98697 m!108383))

(declare-fun m!108385 () Bool)

(assert (=> b!98697 m!108385))

(assert (=> b!98699 m!108383))

(assert (=> b!98699 m!108383))

(assert (=> b!98699 m!108385))

(assert (=> d!26051 d!26503))

(declare-fun d!26505 () Bool)

(declare-fun res!49636 () Bool)

(declare-fun e!64316 () Bool)

(assert (=> d!26505 (=> res!49636 e!64316)))

(assert (=> d!26505 (= res!49636 (and ((_ is Cons!1560) (toList!765 lt!48882)) (= (_1!1161 (h!2154 (toList!765 lt!48882))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26505 (= (containsKey!154 (toList!765 lt!48882) #b0000000000000000000000000000000000000000000000000000000000000000) e!64316)))

(declare-fun b!98700 () Bool)

(declare-fun e!64317 () Bool)

(assert (=> b!98700 (= e!64316 e!64317)))

(declare-fun res!49637 () Bool)

(assert (=> b!98700 (=> (not res!49637) (not e!64317))))

(assert (=> b!98700 (= res!49637 (and (or (not ((_ is Cons!1560) (toList!765 lt!48882))) (bvsle (_1!1161 (h!2154 (toList!765 lt!48882))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1560) (toList!765 lt!48882)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48882))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98701 () Bool)

(assert (=> b!98701 (= e!64317 (containsKey!154 (t!5510 (toList!765 lt!48882)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26505 (not res!49636)) b!98700))

(assert (= (and b!98700 res!49637) b!98701))

(declare-fun m!108387 () Bool)

(assert (=> b!98701 m!108387))

(assert (=> d!25999 d!26505))

(declare-fun d!26507 () Bool)

(assert (=> d!26507 (= (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98031 d!26507))

(declare-fun b!98702 () Bool)

(declare-fun e!64318 () Option!157)

(assert (=> b!98702 (= e!64318 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49042)))))))

(declare-fun b!98705 () Bool)

(declare-fun e!64319 () Option!157)

(assert (=> b!98705 (= e!64319 None!155)))

(declare-fun b!98703 () Bool)

(assert (=> b!98703 (= e!64318 e!64319)))

(declare-fun c!16809 () Bool)

(assert (=> b!98703 (= c!16809 (and ((_ is Cons!1560) (toList!765 lt!49042)) (not (= (_1!1161 (h!2154 (toList!765 lt!49042))) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16808 () Bool)

(declare-fun d!26509 () Bool)

(assert (=> d!26509 (= c!16808 (and ((_ is Cons!1560) (toList!765 lt!49042)) (= (_1!1161 (h!2154 (toList!765 lt!49042))) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26509 (= (getValueByKey!151 (toList!765 lt!49042) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64318)))

(declare-fun b!98704 () Bool)

(assert (=> b!98704 (= e!64319 (getValueByKey!151 (t!5510 (toList!765 lt!49042)) (_1!1161 (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26509 c!16808) b!98702))

(assert (= (and d!26509 (not c!16808)) b!98703))

(assert (= (and b!98703 c!16809) b!98704))

(assert (= (and b!98703 (not c!16809)) b!98705))

(declare-fun m!108389 () Bool)

(assert (=> b!98704 m!108389))

(assert (=> b!97909 d!26509))

(declare-fun d!26511 () Bool)

(declare-fun lt!49622 () Bool)

(assert (=> d!26511 (= lt!49622 (select (content!103 (toList!765 lt!49181)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun e!64320 () Bool)

(assert (=> d!26511 (= lt!49622 e!64320)))

(declare-fun res!49638 () Bool)

(assert (=> d!26511 (=> (not res!49638) (not e!64320))))

(assert (=> d!26511 (= res!49638 ((_ is Cons!1560) (toList!765 lt!49181)))))

(assert (=> d!26511 (= (contains!791 (toList!765 lt!49181) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49622)))

(declare-fun b!98706 () Bool)

(declare-fun e!64321 () Bool)

(assert (=> b!98706 (= e!64320 e!64321)))

(declare-fun res!49639 () Bool)

(assert (=> b!98706 (=> res!49639 e!64321)))

(assert (=> b!98706 (= res!49639 (= (h!2154 (toList!765 lt!49181)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98707 () Bool)

(assert (=> b!98707 (= e!64321 (contains!791 (t!5510 (toList!765 lt!49181)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26511 res!49638) b!98706))

(assert (= (and b!98706 (not res!49639)) b!98707))

(declare-fun m!108391 () Bool)

(assert (=> d!26511 m!108391))

(declare-fun m!108393 () Bool)

(assert (=> d!26511 m!108393))

(declare-fun m!108395 () Bool)

(assert (=> b!98707 m!108395))

(assert (=> b!98015 d!26511))

(declare-fun d!26513 () Bool)

(declare-fun e!64322 () Bool)

(assert (=> d!26513 e!64322))

(declare-fun res!49640 () Bool)

(assert (=> d!26513 (=> res!49640 e!64322)))

(declare-fun lt!49623 () Bool)

(assert (=> d!26513 (= res!49640 (not lt!49623))))

(declare-fun lt!49626 () Bool)

(assert (=> d!26513 (= lt!49623 lt!49626)))

(declare-fun lt!49624 () Unit!2917)

(declare-fun e!64323 () Unit!2917)

(assert (=> d!26513 (= lt!49624 e!64323)))

(declare-fun c!16810 () Bool)

(assert (=> d!26513 (= c!16810 lt!49626)))

(assert (=> d!26513 (= lt!49626 (containsKey!154 (toList!765 lt!49066) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26513 (= (contains!788 lt!49066 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49623)))

(declare-fun b!98708 () Bool)

(declare-fun lt!49625 () Unit!2917)

(assert (=> b!98708 (= e!64323 lt!49625)))

(assert (=> b!98708 (= lt!49625 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49066) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98708 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98709 () Bool)

(declare-fun Unit!2972 () Unit!2917)

(assert (=> b!98709 (= e!64323 Unit!2972)))

(declare-fun b!98710 () Bool)

(assert (=> b!98710 (= e!64322 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26513 c!16810) b!98708))

(assert (= (and d!26513 (not c!16810)) b!98709))

(assert (= (and d!26513 (not res!49640)) b!98710))

(assert (=> d!26513 m!106381))

(declare-fun m!108397 () Bool)

(assert (=> d!26513 m!108397))

(assert (=> b!98708 m!106381))

(declare-fun m!108399 () Bool)

(assert (=> b!98708 m!108399))

(assert (=> b!98708 m!106381))

(assert (=> b!98708 m!107479))

(assert (=> b!98708 m!107479))

(declare-fun m!108401 () Bool)

(assert (=> b!98708 m!108401))

(assert (=> b!98710 m!106381))

(assert (=> b!98710 m!107479))

(assert (=> b!98710 m!107479))

(assert (=> b!98710 m!108401))

(assert (=> b!97939 d!26513))

(assert (=> bm!9957 d!26013))

(assert (=> b!97735 d!26157))

(declare-fun d!26515 () Bool)

(assert (=> d!26515 (= (apply!92 lt!49009 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!49009) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4086 () Bool)

(assert (= bs!4086 d!26515))

(assert (=> bs!4086 m!108061))

(assert (=> bs!4086 m!108061))

(declare-fun m!108403 () Bool)

(assert (=> bs!4086 m!108403))

(assert (=> b!97865 d!26515))

(declare-fun d!26517 () Bool)

(declare-fun e!64324 () Bool)

(assert (=> d!26517 e!64324))

(declare-fun res!49641 () Bool)

(assert (=> d!26517 (=> res!49641 e!64324)))

(declare-fun lt!49627 () Bool)

(assert (=> d!26517 (= res!49641 (not lt!49627))))

(declare-fun lt!49630 () Bool)

(assert (=> d!26517 (= lt!49627 lt!49630)))

(declare-fun lt!49628 () Unit!2917)

(declare-fun e!64325 () Unit!2917)

(assert (=> d!26517 (= lt!49628 e!64325)))

(declare-fun c!16811 () Bool)

(assert (=> d!26517 (= c!16811 lt!49630)))

(assert (=> d!26517 (= lt!49630 (containsKey!154 (toList!765 lt!49066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26517 (= (contains!788 lt!49066 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49627)))

(declare-fun b!98711 () Bool)

(declare-fun lt!49629 () Unit!2917)

(assert (=> b!98711 (= e!64325 lt!49629)))

(assert (=> b!98711 (= lt!49629 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98711 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98712 () Bool)

(declare-fun Unit!2973 () Unit!2917)

(assert (=> b!98712 (= e!64325 Unit!2973)))

(declare-fun b!98713 () Bool)

(assert (=> b!98713 (= e!64324 (isDefined!103 (getValueByKey!151 (toList!765 lt!49066) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26517 c!16811) b!98711))

(assert (= (and d!26517 (not c!16811)) b!98712))

(assert (= (and d!26517 (not res!49641)) b!98713))

(declare-fun m!108405 () Bool)

(assert (=> d!26517 m!108405))

(declare-fun m!108407 () Bool)

(assert (=> b!98711 m!108407))

(declare-fun m!108409 () Bool)

(assert (=> b!98711 m!108409))

(assert (=> b!98711 m!108409))

(declare-fun m!108411 () Bool)

(assert (=> b!98711 m!108411))

(assert (=> b!98713 m!108409))

(assert (=> b!98713 m!108409))

(assert (=> b!98713 m!108411))

(assert (=> d!26041 d!26517))

(assert (=> d!26041 d!25955))

(declare-fun d!26519 () Bool)

(declare-fun e!64326 () Bool)

(assert (=> d!26519 e!64326))

(declare-fun res!49642 () Bool)

(assert (=> d!26519 (=> res!49642 e!64326)))

(declare-fun lt!49631 () Bool)

(assert (=> d!26519 (= res!49642 (not lt!49631))))

(declare-fun lt!49634 () Bool)

(assert (=> d!26519 (= lt!49631 lt!49634)))

(declare-fun lt!49632 () Unit!2917)

(declare-fun e!64327 () Unit!2917)

(assert (=> d!26519 (= lt!49632 e!64327)))

(declare-fun c!16812 () Bool)

(assert (=> d!26519 (= c!16812 lt!49634)))

(assert (=> d!26519 (= lt!49634 (containsKey!154 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26519 (= (contains!788 lt!49029 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49631)))

(declare-fun b!98714 () Bool)

(declare-fun lt!49633 () Unit!2917)

(assert (=> b!98714 (= e!64327 lt!49633)))

(assert (=> b!98714 (= lt!49633 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98714 (isDefined!103 (getValueByKey!151 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98715 () Bool)

(declare-fun Unit!2974 () Unit!2917)

(assert (=> b!98715 (= e!64327 Unit!2974)))

(declare-fun b!98716 () Bool)

(assert (=> b!98716 (= e!64326 (isDefined!103 (getValueByKey!151 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26519 c!16812) b!98714))

(assert (= (and d!26519 (not c!16812)) b!98715))

(assert (= (and d!26519 (not res!49642)) b!98716))

(declare-fun m!108413 () Bool)

(assert (=> d!26519 m!108413))

(declare-fun m!108415 () Bool)

(assert (=> b!98714 m!108415))

(assert (=> b!98714 m!106835))

(assert (=> b!98714 m!106835))

(declare-fun m!108417 () Bool)

(assert (=> b!98714 m!108417))

(assert (=> b!98716 m!106835))

(assert (=> b!98716 m!106835))

(assert (=> b!98716 m!108417))

(assert (=> d!26029 d!26519))

(declare-fun b!98717 () Bool)

(declare-fun e!64328 () Option!157)

(assert (=> b!98717 (= e!64328 (Some!156 (_2!1161 (h!2154 lt!49030))))))

(declare-fun b!98720 () Bool)

(declare-fun e!64329 () Option!157)

(assert (=> b!98720 (= e!64329 None!155)))

(declare-fun b!98718 () Bool)

(assert (=> b!98718 (= e!64328 e!64329)))

(declare-fun c!16814 () Bool)

(assert (=> b!98718 (= c!16814 (and ((_ is Cons!1560) lt!49030) (not (= (_1!1161 (h!2154 lt!49030)) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16813 () Bool)

(declare-fun d!26521 () Bool)

(assert (=> d!26521 (= c!16813 (and ((_ is Cons!1560) lt!49030) (= (_1!1161 (h!2154 lt!49030)) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26521 (= (getValueByKey!151 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64328)))

(declare-fun b!98719 () Bool)

(assert (=> b!98719 (= e!64329 (getValueByKey!151 (t!5510 lt!49030) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26521 c!16813) b!98717))

(assert (= (and d!26521 (not c!16813)) b!98718))

(assert (= (and b!98718 c!16814) b!98719))

(assert (= (and b!98718 (not c!16814)) b!98720))

(declare-fun m!108419 () Bool)

(assert (=> b!98719 m!108419))

(assert (=> d!26029 d!26521))

(declare-fun d!26523 () Bool)

(assert (=> d!26523 (= (getValueByKey!151 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49635 () Unit!2917)

(assert (=> d!26523 (= lt!49635 (choose!604 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!64330 () Bool)

(assert (=> d!26523 e!64330))

(declare-fun res!49643 () Bool)

(assert (=> d!26523 (=> (not res!49643) (not e!64330))))

(assert (=> d!26523 (= res!49643 (isStrictlySorted!291 lt!49030))))

(assert (=> d!26523 (= (lemmaContainsTupThenGetReturnValue!67 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49635)))

(declare-fun b!98721 () Bool)

(declare-fun res!49644 () Bool)

(assert (=> b!98721 (=> (not res!49644) (not e!64330))))

(assert (=> b!98721 (= res!49644 (containsKey!154 lt!49030 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98722 () Bool)

(assert (=> b!98722 (= e!64330 (contains!791 lt!49030 (tuple2!2301 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26523 res!49643) b!98721))

(assert (= (and b!98721 res!49644) b!98722))

(assert (=> d!26523 m!106829))

(declare-fun m!108421 () Bool)

(assert (=> d!26523 m!108421))

(declare-fun m!108423 () Bool)

(assert (=> d!26523 m!108423))

(declare-fun m!108425 () Bool)

(assert (=> b!98721 m!108425))

(declare-fun m!108427 () Bool)

(assert (=> b!98722 m!108427))

(assert (=> d!26029 d!26523))

(declare-fun b!98723 () Bool)

(declare-fun e!64334 () List!1564)

(declare-fun call!10066 () List!1564)

(assert (=> b!98723 (= e!64334 call!10066)))

(declare-fun b!98724 () Bool)

(declare-fun e!64332 () List!1564)

(declare-fun e!64335 () List!1564)

(assert (=> b!98724 (= e!64332 e!64335)))

(declare-fun c!16818 () Bool)

(assert (=> b!98724 (= c!16818 (and ((_ is Cons!1560) (toList!765 e!63661)) (= (_1!1161 (h!2154 (toList!765 e!63661))) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98725 () Bool)

(declare-fun res!49645 () Bool)

(declare-fun e!64331 () Bool)

(assert (=> b!98725 (=> (not res!49645) (not e!64331))))

(declare-fun lt!49636 () List!1564)

(assert (=> b!98725 (= res!49645 (containsKey!154 lt!49636 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10063 () Bool)

(declare-fun call!10068 () List!1564)

(declare-fun call!10067 () List!1564)

(assert (=> bm!10063 (= call!10068 call!10067)))

(declare-fun e!64333 () List!1564)

(declare-fun c!16816 () Bool)

(declare-fun bm!10064 () Bool)

(assert (=> bm!10064 (= call!10067 ($colon$colon!77 e!64333 (ite c!16816 (h!2154 (toList!765 e!63661)) (tuple2!2301 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16817 () Bool)

(assert (=> bm!10064 (= c!16817 c!16816)))

(declare-fun c!16815 () Bool)

(declare-fun b!98726 () Bool)

(assert (=> b!98726 (= c!16815 (and ((_ is Cons!1560) (toList!765 e!63661)) (bvsgt (_1!1161 (h!2154 (toList!765 e!63661))) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!98726 (= e!64335 e!64334)))

(declare-fun d!26525 () Bool)

(assert (=> d!26525 e!64331))

(declare-fun res!49646 () Bool)

(assert (=> d!26525 (=> (not res!49646) (not e!64331))))

(assert (=> d!26525 (= res!49646 (isStrictlySorted!291 lt!49636))))

(assert (=> d!26525 (= lt!49636 e!64332)))

(assert (=> d!26525 (= c!16816 (and ((_ is Cons!1560) (toList!765 e!63661)) (bvslt (_1!1161 (h!2154 (toList!765 e!63661))) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26525 (isStrictlySorted!291 (toList!765 e!63661))))

(assert (=> d!26525 (= (insertStrictlySorted!70 (toList!765 e!63661) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49636)))

(declare-fun b!98727 () Bool)

(assert (=> b!98727 (= e!64335 call!10068)))

(declare-fun b!98728 () Bool)

(assert (=> b!98728 (= e!64333 (insertStrictlySorted!70 (t!5510 (toList!765 e!63661)) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98729 () Bool)

(assert (=> b!98729 (= e!64333 (ite c!16818 (t!5510 (toList!765 e!63661)) (ite c!16815 (Cons!1560 (h!2154 (toList!765 e!63661)) (t!5510 (toList!765 e!63661))) Nil!1561)))))

(declare-fun b!98730 () Bool)

(assert (=> b!98730 (= e!64332 call!10067)))

(declare-fun b!98731 () Bool)

(assert (=> b!98731 (= e!64334 call!10066)))

(declare-fun b!98732 () Bool)

(assert (=> b!98732 (= e!64331 (contains!791 lt!49636 (tuple2!2301 (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!10065 () Bool)

(assert (=> bm!10065 (= call!10066 call!10068)))

(assert (= (and d!26525 c!16816) b!98730))

(assert (= (and d!26525 (not c!16816)) b!98724))

(assert (= (and b!98724 c!16818) b!98727))

(assert (= (and b!98724 (not c!16818)) b!98726))

(assert (= (and b!98726 c!16815) b!98731))

(assert (= (and b!98726 (not c!16815)) b!98723))

(assert (= (or b!98731 b!98723) bm!10065))

(assert (= (or b!98727 bm!10065) bm!10063))

(assert (= (or b!98730 bm!10063) bm!10064))

(assert (= (and bm!10064 c!16817) b!98728))

(assert (= (and bm!10064 (not c!16817)) b!98729))

(assert (= (and d!26525 res!49646) b!98725))

(assert (= (and b!98725 res!49645) b!98732))

(declare-fun m!108429 () Bool)

(assert (=> bm!10064 m!108429))

(declare-fun m!108431 () Bool)

(assert (=> d!26525 m!108431))

(declare-fun m!108433 () Bool)

(assert (=> d!26525 m!108433))

(declare-fun m!108435 () Bool)

(assert (=> b!98732 m!108435))

(declare-fun m!108437 () Bool)

(assert (=> b!98725 m!108437))

(declare-fun m!108439 () Bool)

(assert (=> b!98728 m!108439))

(assert (=> d!26029 d!26525))

(assert (=> b!97774 d!26359))

(assert (=> b!97774 d!25973))

(declare-fun b!98733 () Bool)

(declare-fun e!64338 () Bool)

(declare-fun call!10075 () Bool)

(assert (=> b!98733 (= e!64338 (not call!10075))))

(declare-fun b!98734 () Bool)

(declare-fun e!64343 () Bool)

(declare-fun e!64340 () Bool)

(assert (=> b!98734 (= e!64343 e!64340)))

(declare-fun res!49652 () Bool)

(assert (=> b!98734 (=> (not res!49652) (not e!64340))))

(declare-fun lt!49642 () ListLongMap!1499)

(assert (=> b!98734 (= res!49652 (contains!788 lt!49642 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98734 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun b!98735 () Bool)

(assert (=> b!98735 (= e!64340 (= (apply!92 lt!49642 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98735 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))))))))

(assert (=> b!98735 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10066 () Bool)

(declare-fun call!10069 () Bool)

(assert (=> bm!10066 (= call!10069 (contains!788 lt!49642 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98736 () Bool)

(declare-fun e!64345 () ListLongMap!1499)

(declare-fun call!10074 () ListLongMap!1499)

(assert (=> b!98736 (= e!64345 (+!130 call!10074 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(declare-fun b!98737 () Bool)

(declare-fun e!64337 () Unit!2917)

(declare-fun lt!49657 () Unit!2917)

(assert (=> b!98737 (= e!64337 lt!49657)))

(declare-fun lt!49654 () ListLongMap!1499)

(assert (=> b!98737 (= lt!49654 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49650 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49650 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49648 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49648 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49644 () Unit!2917)

(assert (=> b!98737 (= lt!49644 (addStillContains!68 lt!49654 lt!49650 (zeroValue!2363 newMap!16) lt!49648))))

(assert (=> b!98737 (contains!788 (+!130 lt!49654 (tuple2!2301 lt!49650 (zeroValue!2363 newMap!16))) lt!49648)))

(declare-fun lt!49653 () Unit!2917)

(assert (=> b!98737 (= lt!49653 lt!49644)))

(declare-fun lt!49643 () ListLongMap!1499)

(assert (=> b!98737 (= lt!49643 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49655 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49655 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49645 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49645 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49651 () Unit!2917)

(assert (=> b!98737 (= lt!49651 (addApplyDifferent!68 lt!49643 lt!49655 (minValue!2363 newMap!16) lt!49645))))

(assert (=> b!98737 (= (apply!92 (+!130 lt!49643 (tuple2!2301 lt!49655 (minValue!2363 newMap!16))) lt!49645) (apply!92 lt!49643 lt!49645))))

(declare-fun lt!49647 () Unit!2917)

(assert (=> b!98737 (= lt!49647 lt!49651)))

(declare-fun lt!49658 () ListLongMap!1499)

(assert (=> b!98737 (= lt!49658 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49641 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49641 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49652 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49652 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49640 () Unit!2917)

(assert (=> b!98737 (= lt!49640 (addApplyDifferent!68 lt!49658 lt!49641 (zeroValue!2363 newMap!16) lt!49652))))

(assert (=> b!98737 (= (apply!92 (+!130 lt!49658 (tuple2!2301 lt!49641 (zeroValue!2363 newMap!16))) lt!49652) (apply!92 lt!49658 lt!49652))))

(declare-fun lt!49638 () Unit!2917)

(assert (=> b!98737 (= lt!49638 lt!49640)))

(declare-fun lt!49649 () ListLongMap!1499)

(assert (=> b!98737 (= lt!49649 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun lt!49639 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49639 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49646 () (_ BitVec 64))

(assert (=> b!98737 (= lt!49646 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98737 (= lt!49657 (addApplyDifferent!68 lt!49649 lt!49639 (minValue!2363 newMap!16) lt!49646))))

(assert (=> b!98737 (= (apply!92 (+!130 lt!49649 (tuple2!2301 lt!49639 (minValue!2363 newMap!16))) lt!49646) (apply!92 lt!49649 lt!49646))))

(declare-fun b!98738 () Bool)

(declare-fun c!16819 () Bool)

(assert (=> b!98738 (= c!16819 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64336 () ListLongMap!1499)

(declare-fun e!64341 () ListLongMap!1499)

(assert (=> b!98738 (= e!64336 e!64341)))

(declare-fun b!98739 () Bool)

(declare-fun e!64347 () Bool)

(assert (=> b!98739 (= e!64347 (= (apply!92 lt!49642 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 newMap!16)))))

(declare-fun b!98740 () Bool)

(declare-fun e!64339 () Bool)

(assert (=> b!98740 (= e!64339 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98741 () Bool)

(declare-fun res!49653 () Bool)

(declare-fun e!64346 () Bool)

(assert (=> b!98741 (=> (not res!49653) (not e!64346))))

(declare-fun e!64348 () Bool)

(assert (=> b!98741 (= res!49653 e!64348)))

(declare-fun c!16822 () Bool)

(assert (=> b!98741 (= c!16822 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98742 () Bool)

(declare-fun call!10073 () ListLongMap!1499)

(assert (=> b!98742 (= e!64336 call!10073)))

(declare-fun bm!10067 () Bool)

(assert (=> bm!10067 (= call!10073 call!10074)))

(declare-fun b!98743 () Bool)

(assert (=> b!98743 (= e!64348 (not call!10069))))

(declare-fun b!98744 () Bool)

(declare-fun e!64344 () Bool)

(assert (=> b!98744 (= e!64344 (validKeyInArray!0 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10068 () Bool)

(declare-fun call!10071 () ListLongMap!1499)

(declare-fun call!10070 () ListLongMap!1499)

(assert (=> bm!10068 (= call!10071 call!10070)))

(declare-fun bm!10069 () Bool)

(assert (=> bm!10069 (= call!10075 (contains!788 lt!49642 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98745 () Bool)

(assert (=> b!98745 (= e!64346 e!64338)))

(declare-fun c!16821 () Bool)

(assert (=> b!98745 (= c!16821 (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98746 () Bool)

(assert (=> b!98746 (= e!64348 e!64347)))

(declare-fun res!49654 () Bool)

(assert (=> b!98746 (= res!49654 call!10069)))

(assert (=> b!98746 (=> (not res!49654) (not e!64347))))

(declare-fun b!98747 () Bool)

(declare-fun e!64342 () Bool)

(assert (=> b!98747 (= e!64338 e!64342)))

(declare-fun res!49651 () Bool)

(assert (=> b!98747 (= res!49651 call!10075)))

(assert (=> b!98747 (=> (not res!49651) (not e!64342))))

(declare-fun b!98748 () Bool)

(declare-fun res!49647 () Bool)

(assert (=> b!98748 (=> (not res!49647) (not e!64346))))

(assert (=> b!98748 (= res!49647 e!64343)))

(declare-fun res!49648 () Bool)

(assert (=> b!98748 (=> res!49648 e!64343)))

(assert (=> b!98748 (= res!49648 (not e!64344))))

(declare-fun res!49650 () Bool)

(assert (=> b!98748 (=> (not res!49650) (not e!64344))))

(assert (=> b!98748 (= res!49650 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(declare-fun bm!10070 () Bool)

(declare-fun call!10072 () ListLongMap!1499)

(assert (=> bm!10070 (= call!10072 call!10071)))

(declare-fun b!98749 () Bool)

(assert (=> b!98749 (= e!64342 (= (apply!92 lt!49642 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 newMap!16)))))

(declare-fun b!98750 () Bool)

(assert (=> b!98750 (= e!64345 e!64336)))

(declare-fun c!16820 () Bool)

(assert (=> b!98750 (= c!16820 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10071 () Bool)

(assert (=> bm!10071 (= call!10070 (getCurrentListMapNoExtraKeys!95 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(declare-fun b!98751 () Bool)

(declare-fun Unit!2975 () Unit!2917)

(assert (=> b!98751 (= e!64337 Unit!2975)))

(declare-fun b!98752 () Bool)

(assert (=> b!98752 (= e!64341 call!10072)))

(declare-fun b!98753 () Bool)

(assert (=> b!98753 (= e!64341 call!10073)))

(declare-fun bm!10072 () Bool)

(declare-fun c!16824 () Bool)

(assert (=> bm!10072 (= call!10074 (+!130 (ite c!16824 call!10070 (ite c!16820 call!10071 call!10072)) (ite (or c!16824 c!16820) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun d!26527 () Bool)

(assert (=> d!26527 e!64346))

(declare-fun res!49655 () Bool)

(assert (=> d!26527 (=> (not res!49655) (not e!64346))))

(assert (=> d!26527 (= res!49655 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))))

(declare-fun lt!49656 () ListLongMap!1499)

(assert (=> d!26527 (= lt!49642 lt!49656)))

(declare-fun lt!49637 () Unit!2917)

(assert (=> d!26527 (= lt!49637 e!64337)))

(declare-fun c!16823 () Bool)

(assert (=> d!26527 (= c!16823 e!64339)))

(declare-fun res!49649 () Bool)

(assert (=> d!26527 (=> (not res!49649) (not e!64339))))

(assert (=> d!26527 (= res!49649 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 newMap!16))))))

(assert (=> d!26527 (= lt!49656 e!64345)))

(assert (=> d!26527 (= c!16824 (and (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26527 (validMask!0 (mask!6577 newMap!16))))

(assert (=> d!26527 (= (getCurrentListMap!455 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) lt!49642)))

(assert (= (and d!26527 c!16824) b!98736))

(assert (= (and d!26527 (not c!16824)) b!98750))

(assert (= (and b!98750 c!16820) b!98742))

(assert (= (and b!98750 (not c!16820)) b!98738))

(assert (= (and b!98738 c!16819) b!98753))

(assert (= (and b!98738 (not c!16819)) b!98752))

(assert (= (or b!98753 b!98752) bm!10070))

(assert (= (or b!98742 bm!10070) bm!10068))

(assert (= (or b!98742 b!98753) bm!10067))

(assert (= (or b!98736 bm!10068) bm!10071))

(assert (= (or b!98736 bm!10067) bm!10072))

(assert (= (and d!26527 res!49649) b!98740))

(assert (= (and d!26527 c!16823) b!98737))

(assert (= (and d!26527 (not c!16823)) b!98751))

(assert (= (and d!26527 res!49655) b!98748))

(assert (= (and b!98748 res!49650) b!98744))

(assert (= (and b!98748 (not res!49648)) b!98734))

(assert (= (and b!98734 res!49652) b!98735))

(assert (= (and b!98748 res!49647) b!98741))

(assert (= (and b!98741 c!16822) b!98746))

(assert (= (and b!98741 (not c!16822)) b!98743))

(assert (= (and b!98746 res!49654) b!98739))

(assert (= (or b!98746 b!98743) bm!10066))

(assert (= (and b!98741 res!49653) b!98745))

(assert (= (and b!98745 c!16821) b!98747))

(assert (= (and b!98745 (not c!16821)) b!98733))

(assert (= (and b!98747 res!49651) b!98749))

(assert (= (or b!98747 b!98733) bm!10069))

(declare-fun b_lambda!4383 () Bool)

(assert (=> (not b_lambda!4383) (not b!98735)))

(assert (=> b!98735 t!5523))

(declare-fun b_and!6065 () Bool)

(assert (= b_and!6061 (and (=> t!5523 result!3271) b_and!6065)))

(assert (=> b!98735 t!5525))

(declare-fun b_and!6067 () Bool)

(assert (= b_and!6063 (and (=> t!5525 result!3273) b_and!6067)))

(declare-fun m!108441 () Bool)

(assert (=> b!98739 m!108441))

(declare-fun m!108443 () Bool)

(assert (=> bm!10072 m!108443))

(declare-fun m!108445 () Bool)

(assert (=> b!98736 m!108445))

(assert (=> b!98734 m!106551))

(assert (=> b!98734 m!106551))

(declare-fun m!108447 () Bool)

(assert (=> b!98734 m!108447))

(assert (=> b!98735 m!106551))

(declare-fun m!108449 () Bool)

(assert (=> b!98735 m!108449))

(assert (=> b!98735 m!106557))

(assert (=> b!98735 m!106551))

(declare-fun m!108451 () Bool)

(assert (=> b!98735 m!108451))

(assert (=> b!98735 m!108449))

(assert (=> b!98735 m!106557))

(declare-fun m!108453 () Bool)

(assert (=> b!98735 m!108453))

(declare-fun m!108455 () Bool)

(assert (=> bm!10071 m!108455))

(declare-fun m!108457 () Bool)

(assert (=> b!98737 m!108457))

(declare-fun m!108459 () Bool)

(assert (=> b!98737 m!108459))

(assert (=> b!98737 m!106551))

(declare-fun m!108461 () Bool)

(assert (=> b!98737 m!108461))

(assert (=> b!98737 m!108455))

(declare-fun m!108463 () Bool)

(assert (=> b!98737 m!108463))

(declare-fun m!108465 () Bool)

(assert (=> b!98737 m!108465))

(declare-fun m!108467 () Bool)

(assert (=> b!98737 m!108467))

(declare-fun m!108469 () Bool)

(assert (=> b!98737 m!108469))

(declare-fun m!108471 () Bool)

(assert (=> b!98737 m!108471))

(declare-fun m!108473 () Bool)

(assert (=> b!98737 m!108473))

(declare-fun m!108475 () Bool)

(assert (=> b!98737 m!108475))

(declare-fun m!108477 () Bool)

(assert (=> b!98737 m!108477))

(declare-fun m!108479 () Bool)

(assert (=> b!98737 m!108479))

(assert (=> b!98737 m!108479))

(declare-fun m!108481 () Bool)

(assert (=> b!98737 m!108481))

(assert (=> b!98737 m!108471))

(declare-fun m!108483 () Bool)

(assert (=> b!98737 m!108483))

(declare-fun m!108485 () Bool)

(assert (=> b!98737 m!108485))

(assert (=> b!98737 m!108457))

(assert (=> b!98737 m!108463))

(declare-fun m!108487 () Bool)

(assert (=> bm!10069 m!108487))

(assert (=> d!26527 m!106537))

(declare-fun m!108489 () Bool)

(assert (=> bm!10066 m!108489))

(assert (=> b!98744 m!106551))

(assert (=> b!98744 m!106551))

(assert (=> b!98744 m!106599))

(declare-fun m!108491 () Bool)

(assert (=> b!98749 m!108491))

(assert (=> b!98740 m!106551))

(assert (=> b!98740 m!106551))

(assert (=> b!98740 m!106599))

(assert (=> b!97774 d!26527))

(declare-fun d!26529 () Bool)

(declare-fun e!64349 () Bool)

(assert (=> d!26529 e!64349))

(declare-fun res!49657 () Bool)

(assert (=> d!26529 (=> (not res!49657) (not e!64349))))

(declare-fun lt!49659 () ListLongMap!1499)

(assert (=> d!26529 (= res!49657 (contains!788 lt!49659 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(declare-fun lt!49660 () List!1564)

(assert (=> d!26529 (= lt!49659 (ListLongMap!1500 lt!49660))))

(declare-fun lt!49662 () Unit!2917)

(declare-fun lt!49661 () Unit!2917)

(assert (=> d!26529 (= lt!49662 lt!49661)))

(assert (=> d!26529 (= (getValueByKey!151 lt!49660 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26529 (= lt!49661 (lemmaContainsTupThenGetReturnValue!67 lt!49660 (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26529 (= lt!49660 (insertStrictlySorted!70 (toList!765 call!9969) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (=> d!26529 (= (+!130 call!9969 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))) lt!49659)))

(declare-fun b!98754 () Bool)

(declare-fun res!49656 () Bool)

(assert (=> b!98754 (=> (not res!49656) (not e!64349))))

(assert (=> b!98754 (= res!49656 (= (getValueByKey!151 (toList!765 lt!49659) (_1!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (Some!156 (_2!1161 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun b!98755 () Bool)

(assert (=> b!98755 (= e!64349 (contains!791 (toList!765 lt!49659) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))

(assert (= (and d!26529 res!49657) b!98754))

(assert (= (and b!98754 res!49656) b!98755))

(declare-fun m!108493 () Bool)

(assert (=> d!26529 m!108493))

(declare-fun m!108495 () Bool)

(assert (=> d!26529 m!108495))

(declare-fun m!108497 () Bool)

(assert (=> d!26529 m!108497))

(declare-fun m!108499 () Bool)

(assert (=> d!26529 m!108499))

(declare-fun m!108501 () Bool)

(assert (=> b!98754 m!108501))

(declare-fun m!108503 () Bool)

(assert (=> b!98755 m!108503))

(assert (=> b!97862 d!26529))

(declare-fun d!26531 () Bool)

(assert (=> d!26531 (= (get!1292 (getValueByKey!151 (toList!765 lt!48898) lt!48892)) (v!2807 (getValueByKey!151 (toList!765 lt!48898) lt!48892)))))

(assert (=> d!26049 d!26531))

(declare-fun b!98756 () Bool)

(declare-fun e!64350 () Option!157)

(assert (=> b!98756 (= e!64350 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48898)))))))

(declare-fun b!98759 () Bool)

(declare-fun e!64351 () Option!157)

(assert (=> b!98759 (= e!64351 None!155)))

(declare-fun b!98757 () Bool)

(assert (=> b!98757 (= e!64350 e!64351)))

(declare-fun c!16826 () Bool)

(assert (=> b!98757 (= c!16826 (and ((_ is Cons!1560) (toList!765 lt!48898)) (not (= (_1!1161 (h!2154 (toList!765 lt!48898))) lt!48892))))))

(declare-fun d!26533 () Bool)

(declare-fun c!16825 () Bool)

(assert (=> d!26533 (= c!16825 (and ((_ is Cons!1560) (toList!765 lt!48898)) (= (_1!1161 (h!2154 (toList!765 lt!48898))) lt!48892)))))

(assert (=> d!26533 (= (getValueByKey!151 (toList!765 lt!48898) lt!48892) e!64350)))

(declare-fun b!98758 () Bool)

(assert (=> b!98758 (= e!64351 (getValueByKey!151 (t!5510 (toList!765 lt!48898)) lt!48892))))

(assert (= (and d!26533 c!16825) b!98756))

(assert (= (and d!26533 (not c!16825)) b!98757))

(assert (= (and b!98757 c!16826) b!98758))

(assert (= (and b!98757 (not c!16826)) b!98759))

(declare-fun m!108505 () Bool)

(assert (=> b!98758 m!108505))

(assert (=> d!26049 d!26533))

(declare-fun d!26535 () Bool)

(declare-fun lt!49663 () Bool)

(assert (=> d!26535 (= lt!49663 (select (content!102 Nil!1562) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64353 () Bool)

(assert (=> d!26535 (= lt!49663 e!64353)))

(declare-fun res!49658 () Bool)

(assert (=> d!26535 (=> (not res!49658) (not e!64353))))

(assert (=> d!26535 (= res!49658 ((_ is Cons!1561) Nil!1562))))

(assert (=> d!26535 (= (contains!790 Nil!1562 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) lt!49663)))

(declare-fun b!98760 () Bool)

(declare-fun e!64352 () Bool)

(assert (=> b!98760 (= e!64353 e!64352)))

(declare-fun res!49659 () Bool)

(assert (=> b!98760 (=> res!49659 e!64352)))

(assert (=> b!98760 (= res!49659 (= (h!2155 Nil!1562) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98761 () Bool)

(assert (=> b!98761 (= e!64352 (contains!790 (t!5511 Nil!1562) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26535 res!49658) b!98760))

(assert (= (and b!98760 (not res!49659)) b!98761))

(assert (=> d!26535 m!106733))

(assert (=> d!26535 m!106551))

(declare-fun m!108507 () Bool)

(assert (=> d!26535 m!108507))

(assert (=> b!98761 m!106551))

(declare-fun m!108509 () Bool)

(assert (=> b!98761 m!108509))

(assert (=> b!97781 d!26535))

(declare-fun d!26537 () Bool)

(declare-fun lt!49664 () Bool)

(assert (=> d!26537 (= lt!49664 (select (content!103 (toList!765 lt!49199)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64354 () Bool)

(assert (=> d!26537 (= lt!49664 e!64354)))

(declare-fun res!49660 () Bool)

(assert (=> d!26537 (=> (not res!49660) (not e!64354))))

(assert (=> d!26537 (= res!49660 ((_ is Cons!1560) (toList!765 lt!49199)))))

(assert (=> d!26537 (= (contains!791 (toList!765 lt!49199) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49664)))

(declare-fun b!98762 () Bool)

(declare-fun e!64355 () Bool)

(assert (=> b!98762 (= e!64354 e!64355)))

(declare-fun res!49661 () Bool)

(assert (=> b!98762 (=> res!49661 e!64355)))

(assert (=> b!98762 (= res!49661 (= (h!2154 (toList!765 lt!49199)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98763 () Bool)

(assert (=> b!98763 (= e!64355 (contains!791 (t!5510 (toList!765 lt!49199)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26537 res!49660) b!98762))

(assert (= (and b!98762 (not res!49661)) b!98763))

(declare-fun m!108511 () Bool)

(assert (=> d!26537 m!108511))

(declare-fun m!108513 () Bool)

(assert (=> d!26537 m!108513))

(declare-fun m!108515 () Bool)

(assert (=> b!98763 m!108515))

(assert (=> b!98042 d!26537))

(assert (=> b!97882 d!26075))

(declare-fun d!26539 () Bool)

(declare-fun res!49662 () Bool)

(declare-fun e!64356 () Bool)

(assert (=> d!26539 (=> res!49662 e!64356)))

(assert (=> d!26539 (= res!49662 (and ((_ is Cons!1560) (toList!765 call!9912)) (= (_1!1161 (h!2154 (toList!765 call!9912))) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))))

(assert (=> d!26539 (= (containsKey!154 (toList!765 call!9912) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))) e!64356)))

(declare-fun b!98764 () Bool)

(declare-fun e!64357 () Bool)

(assert (=> b!98764 (= e!64356 e!64357)))

(declare-fun res!49663 () Bool)

(assert (=> b!98764 (=> (not res!49663) (not e!64357))))

(assert (=> b!98764 (= res!49663 (and (or (not ((_ is Cons!1560) (toList!765 call!9912))) (bvsle (_1!1161 (h!2154 (toList!765 call!9912))) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))) ((_ is Cons!1560) (toList!765 call!9912)) (bvslt (_1!1161 (h!2154 (toList!765 call!9912))) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821))))))))

(declare-fun b!98765 () Bool)

(assert (=> b!98765 (= e!64357 (containsKey!154 (t!5510 (toList!765 call!9912)) (ite c!16514 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))))

(assert (= (and d!26539 (not res!49662)) b!98764))

(assert (= (and b!98764 res!49663) b!98765))

(declare-fun m!108517 () Bool)

(assert (=> b!98765 m!108517))

(assert (=> d!26073 d!26539))

(declare-fun d!26541 () Bool)

(declare-fun e!64358 () Bool)

(assert (=> d!26541 e!64358))

(declare-fun res!49665 () Bool)

(assert (=> d!26541 (=> (not res!49665) (not e!64358))))

(declare-fun lt!49665 () ListLongMap!1499)

(assert (=> d!26541 (= res!49665 (contains!788 lt!49665 (_1!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(declare-fun lt!49666 () List!1564)

(assert (=> d!26541 (= lt!49665 (ListLongMap!1500 lt!49666))))

(declare-fun lt!49668 () Unit!2917)

(declare-fun lt!49667 () Unit!2917)

(assert (=> d!26541 (= lt!49668 lt!49667)))

(assert (=> d!26541 (= (getValueByKey!151 lt!49666 (_1!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26541 (= lt!49667 (lemmaContainsTupThenGetReturnValue!67 lt!49666 (_1!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26541 (= lt!49666 (insertStrictlySorted!70 (toList!765 (ite c!16558 call!9941 (ite c!16554 call!9942 call!9943))) (_1!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) (_2!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))))))

(assert (=> d!26541 (= (+!130 (ite c!16558 call!9941 (ite c!16554 call!9942 call!9943)) (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))) lt!49665)))

(declare-fun b!98766 () Bool)

(declare-fun res!49664 () Bool)

(assert (=> b!98766 (=> (not res!49664) (not e!64358))))

(assert (=> b!98766 (= res!49664 (= (getValueByKey!151 (toList!765 lt!49665) (_1!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16))))) (Some!156 (_2!1161 (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))))

(declare-fun b!98767 () Bool)

(assert (=> b!98767 (= e!64358 (contains!791 (toList!765 lt!49665) (ite (or c!16558 c!16554) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 newMap!16)) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 newMap!16)))))))

(assert (= (and d!26541 res!49665) b!98766))

(assert (= (and b!98766 res!49664) b!98767))

(declare-fun m!108519 () Bool)

(assert (=> d!26541 m!108519))

(declare-fun m!108521 () Bool)

(assert (=> d!26541 m!108521))

(declare-fun m!108523 () Bool)

(assert (=> d!26541 m!108523))

(declare-fun m!108525 () Bool)

(assert (=> d!26541 m!108525))

(declare-fun m!108527 () Bool)

(assert (=> b!98766 m!108527))

(declare-fun m!108529 () Bool)

(assert (=> b!98767 m!108529))

(assert (=> bm!9943 d!26541))

(assert (=> d!26089 d!25969))

(declare-fun d!26543 () Bool)

(declare-fun e!64361 () Bool)

(assert (=> d!26543 e!64361))

(declare-fun res!49671 () Bool)

(assert (=> d!26543 (=> (not res!49671) (not e!64361))))

(declare-fun lt!49671 () SeekEntryResult!247)

(assert (=> d!26543 (= res!49671 ((_ is Found!247) lt!49671))))

(assert (=> d!26543 (= lt!49671 (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (_keys!4170 newMap!16) (mask!6577 newMap!16)))))

(assert (=> d!26543 true))

(declare-fun _$33!81 () Unit!2917)

(assert (=> d!26543 (= (choose!603 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (defaultEntry!2480 newMap!16)) _$33!81)))

(declare-fun b!98772 () Bool)

(declare-fun res!49670 () Bool)

(assert (=> b!98772 (=> (not res!49670) (not e!64361))))

(assert (=> b!98772 (= res!49670 (inRange!0 (index!3132 lt!49671) (mask!6577 newMap!16)))))

(declare-fun b!98773 () Bool)

(assert (=> b!98773 (= e!64361 (= (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!49671)) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26543 res!49671) b!98772))

(assert (= (and b!98772 res!49670) b!98773))

(assert (=> d!26543 m!106251))

(assert (=> d!26543 m!106423))

(declare-fun m!108531 () Bool)

(assert (=> b!98772 m!108531))

(declare-fun m!108533 () Bool)

(assert (=> b!98773 m!108533))

(assert (=> d!26089 d!26543))

(assert (=> d!26089 d!26099))

(declare-fun d!26545 () Bool)

(assert (=> d!26545 (= (apply!92 lt!49009 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1292 (getValueByKey!151 (toList!765 lt!49009) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4087 () Bool)

(assert (= bs!4087 d!26545))

(assert (=> bs!4087 m!108287))

(assert (=> bs!4087 m!108287))

(declare-fun m!108535 () Bool)

(assert (=> bs!4087 m!108535))

(assert (=> b!97875 d!26545))

(declare-fun d!26547 () Bool)

(assert (=> d!26547 (= (+!130 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4170 newMap!16) (array!4226 (store (arr!2007 (_values!2463 newMap!16)) (index!3132 lt!48821) (ValueCellFull!971 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2257 (_values!2463 newMap!16))) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))

(assert (=> d!26547 true))

(declare-fun _$5!101 () Unit!2917)

(assert (=> d!26547 (= (choose!597 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2480 newMap!16)) _$5!101)))

(declare-fun bs!4088 () Bool)

(assert (= bs!4088 d!26547))

(assert (=> bs!4088 m!106413))

(assert (=> bs!4088 m!106413))

(assert (=> bs!4088 m!106677))

(assert (=> bs!4088 m!106417))

(assert (=> bs!4088 m!106679))

(assert (=> d!25985 d!26547))

(assert (=> d!25985 d!26099))

(assert (=> b!98006 d!26089))

(declare-fun d!26549 () Bool)

(assert (=> d!26549 (isDefined!103 (getValueByKey!151 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun lt!49672 () Unit!2917)

(assert (=> d!26549 (= lt!49672 (choose!600 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!64362 () Bool)

(assert (=> d!26549 e!64362))

(declare-fun res!49672 () Bool)

(assert (=> d!26549 (=> (not res!49672) (not e!64362))))

(assert (=> d!26549 (= res!49672 (isStrictlySorted!291 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))))))

(assert (=> d!26549 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!49672)))

(declare-fun b!98774 () Bool)

(assert (=> b!98774 (= e!64362 (containsKey!154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26549 res!49672) b!98774))

(assert (=> d!26549 m!106251))

(assert (=> d!26549 m!106685))

(assert (=> d!26549 m!106685))

(assert (=> d!26549 m!106687))

(assert (=> d!26549 m!106251))

(declare-fun m!108537 () Bool)

(assert (=> d!26549 m!108537))

(declare-fun m!108539 () Bool)

(assert (=> d!26549 m!108539))

(assert (=> b!98774 m!106251))

(assert (=> b!98774 m!106681))

(assert (=> b!97775 d!26549))

(assert (=> b!97775 d!26269))

(assert (=> b!97775 d!26271))

(declare-fun b!98775 () Bool)

(declare-fun e!64365 () Bool)

(declare-fun e!64363 () Bool)

(assert (=> b!98775 (= e!64365 e!64363)))

(declare-fun lt!49673 () (_ BitVec 64))

(assert (=> b!98775 (= lt!49673 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!49674 () Unit!2917)

(assert (=> b!98775 (= lt!49674 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) lt!49673 #b00000000000000000000000000000000))))

(assert (=> b!98775 (arrayContainsKey!0 (_keys!4170 (v!2801 (underlying!338 thiss!992))) lt!49673 #b00000000000000000000000000000000)))

(declare-fun lt!49675 () Unit!2917)

(assert (=> b!98775 (= lt!49675 lt!49674)))

(declare-fun res!49673 () Bool)

(assert (=> b!98775 (= res!49673 (= (seekEntryOrOpen!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000) (_keys!4170 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992)))) (Found!247 #b00000000000000000000000000000000)))))

(assert (=> b!98775 (=> (not res!49673) (not e!64363))))

(declare-fun b!98776 () Bool)

(declare-fun call!10076 () Bool)

(assert (=> b!98776 (= e!64363 call!10076)))

(declare-fun b!98777 () Bool)

(assert (=> b!98777 (= e!64365 call!10076)))

(declare-fun d!26551 () Bool)

(declare-fun res!49674 () Bool)

(declare-fun e!64364 () Bool)

(assert (=> d!26551 (=> res!49674 e!64364)))

(assert (=> d!26551 (= res!49674 (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (v!2801 (underlying!338 thiss!992))))))))

(assert (=> d!26551 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4170 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992)))) e!64364)))

(declare-fun b!98778 () Bool)

(assert (=> b!98778 (= e!64364 e!64365)))

(declare-fun c!16827 () Bool)

(assert (=> b!98778 (= c!16827 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10073 () Bool)

(assert (=> bm!10073 (= call!10076 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4170 (v!2801 (underlying!338 thiss!992))) (mask!6577 (v!2801 (underlying!338 thiss!992)))))))

(assert (= (and d!26551 (not res!49674)) b!98778))

(assert (= (and b!98778 c!16827) b!98775))

(assert (= (and b!98778 (not c!16827)) b!98777))

(assert (= (and b!98775 res!49673) b!98776))

(assert (= (or b!98776 b!98777) bm!10073))

(assert (=> b!98775 m!107277))

(declare-fun m!108541 () Bool)

(assert (=> b!98775 m!108541))

(declare-fun m!108543 () Bool)

(assert (=> b!98775 m!108543))

(assert (=> b!98775 m!107277))

(declare-fun m!108545 () Bool)

(assert (=> b!98775 m!108545))

(assert (=> b!98778 m!107277))

(assert (=> b!98778 m!107277))

(assert (=> b!98778 m!107279))

(declare-fun m!108547 () Bool)

(assert (=> bm!10073 m!108547))

(assert (=> b!97746 d!26551))

(declare-fun d!26553 () Bool)

(assert (not d!26553))

(assert (=> b!97848 d!26553))

(declare-fun b!98779 () Bool)

(declare-fun e!64366 () Option!157)

(assert (=> b!98779 (= e!64366 (Some!156 (_2!1161 (h!2154 (toList!765 lt!48973)))))))

(declare-fun b!98782 () Bool)

(declare-fun e!64367 () Option!157)

(assert (=> b!98782 (= e!64367 None!155)))

(declare-fun b!98780 () Bool)

(assert (=> b!98780 (= e!64366 e!64367)))

(declare-fun c!16829 () Bool)

(assert (=> b!98780 (= c!16829 (and ((_ is Cons!1560) (toList!765 lt!48973)) (not (= (_1!1161 (h!2154 (toList!765 lt!48973))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun c!16828 () Bool)

(declare-fun d!26555 () Bool)

(assert (=> d!26555 (= c!16828 (and ((_ is Cons!1560) (toList!765 lt!48973)) (= (_1!1161 (h!2154 (toList!765 lt!48973))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (=> d!26555 (= (getValueByKey!151 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) e!64366)))

(declare-fun b!98781 () Bool)

(assert (=> b!98781 (= e!64367 (getValueByKey!151 (t!5510 (toList!765 lt!48973)) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26555 c!16828) b!98779))

(assert (= (and d!26555 (not c!16828)) b!98780))

(assert (= (and b!98780 c!16829) b!98781))

(assert (= (and b!98780 (not c!16829)) b!98782))

(declare-fun m!108549 () Bool)

(assert (=> b!98781 m!108549))

(assert (=> b!97787 d!26555))

(assert (=> b!97755 d!26157))

(assert (=> bm!9973 d!26469))

(declare-fun d!26557 () Bool)

(assert (=> d!26557 (= (apply!92 lt!48913 (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000)) (get!1292 (getValueByKey!151 (toList!765 lt!48913) (select (arr!2006 (_keys!4170 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4089 () Bool)

(assert (= bs!4089 d!26557))

(assert (=> bs!4089 m!106551))

(assert (=> bs!4089 m!108239))

(assert (=> bs!4089 m!108239))

(declare-fun m!108551 () Bool)

(assert (=> bs!4089 m!108551))

(assert (=> b!97726 d!26557))

(declare-fun d!26559 () Bool)

(declare-fun c!16830 () Bool)

(assert (=> d!26559 (= c!16830 ((_ is ValueCellFull!971) (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64368 () V!3153)

(assert (=> d!26559 (= (get!1288 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64368)))

(declare-fun b!98783 () Bool)

(assert (=> b!98783 (= e!64368 (get!1290 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98784 () Bool)

(assert (=> b!98784 (= e!64368 (get!1291 (select (arr!2007 (_values!2463 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26559 c!16830) b!98783))

(assert (= (and d!26559 (not c!16830)) b!98784))

(assert (=> b!98783 m!106555))

(assert (=> b!98783 m!106557))

(declare-fun m!108553 () Bool)

(assert (=> b!98783 m!108553))

(assert (=> b!98784 m!106555))

(assert (=> b!98784 m!106557))

(declare-fun m!108555 () Bool)

(assert (=> b!98784 m!108555))

(assert (=> b!97726 d!26559))

(assert (=> bm!9942 d!26443))

(declare-fun b!98785 () Bool)

(declare-fun e!64369 () Option!157)

(assert (=> b!98785 (= e!64369 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49087)))))))

(declare-fun b!98788 () Bool)

(declare-fun e!64370 () Option!157)

(assert (=> b!98788 (= e!64370 None!155)))

(declare-fun b!98786 () Bool)

(assert (=> b!98786 (= e!64369 e!64370)))

(declare-fun c!16832 () Bool)

(assert (=> b!98786 (= c!16832 (and ((_ is Cons!1560) (toList!765 lt!49087)) (not (= (_1!1161 (h!2154 (toList!765 lt!49087))) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16831 () Bool)

(declare-fun d!26561 () Bool)

(assert (=> d!26561 (= c!16831 (and ((_ is Cons!1560) (toList!765 lt!49087)) (= (_1!1161 (h!2154 (toList!765 lt!49087))) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26561 (= (getValueByKey!151 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64369)))

(declare-fun b!98787 () Bool)

(assert (=> b!98787 (= e!64370 (getValueByKey!151 (t!5510 (toList!765 lt!49087)) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26561 c!16831) b!98785))

(assert (= (and d!26561 (not c!16831)) b!98786))

(assert (= (and b!98786 c!16832) b!98787))

(assert (= (and b!98786 (not c!16832)) b!98788))

(declare-fun m!108557 () Bool)

(assert (=> b!98787 m!108557))

(assert (=> b!97961 d!26561))

(declare-fun d!26563 () Bool)

(declare-fun e!64371 () Bool)

(assert (=> d!26563 e!64371))

(declare-fun res!49675 () Bool)

(assert (=> d!26563 (=> res!49675 e!64371)))

(declare-fun lt!49676 () Bool)

(assert (=> d!26563 (= res!49675 (not lt!49676))))

(declare-fun lt!49679 () Bool)

(assert (=> d!26563 (= lt!49676 lt!49679)))

(declare-fun lt!49677 () Unit!2917)

(declare-fun e!64372 () Unit!2917)

(assert (=> d!26563 (= lt!49677 e!64372)))

(declare-fun c!16833 () Bool)

(assert (=> d!26563 (= c!16833 lt!49679)))

(assert (=> d!26563 (= lt!49679 (containsKey!154 (toList!765 lt!48883) lt!48885))))

(assert (=> d!26563 (= (contains!788 lt!48883 lt!48885) lt!49676)))

(declare-fun b!98789 () Bool)

(declare-fun lt!49678 () Unit!2917)

(assert (=> b!98789 (= e!64372 lt!49678)))

(assert (=> b!98789 (= lt!49678 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48883) lt!48885))))

(assert (=> b!98789 (isDefined!103 (getValueByKey!151 (toList!765 lt!48883) lt!48885))))

(declare-fun b!98790 () Bool)

(declare-fun Unit!2976 () Unit!2917)

(assert (=> b!98790 (= e!64372 Unit!2976)))

(declare-fun b!98791 () Bool)

(assert (=> b!98791 (= e!64371 (isDefined!103 (getValueByKey!151 (toList!765 lt!48883) lt!48885)))))

(assert (= (and d!26563 c!16833) b!98789))

(assert (= (and d!26563 (not c!16833)) b!98790))

(assert (= (and d!26563 (not res!49675)) b!98791))

(declare-fun m!108559 () Bool)

(assert (=> d!26563 m!108559))

(declare-fun m!108561 () Bool)

(assert (=> b!98789 m!108561))

(assert (=> b!98789 m!106945))

(assert (=> b!98789 m!106945))

(declare-fun m!108563 () Bool)

(assert (=> b!98789 m!108563))

(assert (=> b!98791 m!106945))

(assert (=> b!98791 m!106945))

(assert (=> b!98791 m!108563))

(assert (=> d!26059 d!26563))

(assert (=> d!26059 d!26047))

(assert (=> d!26059 d!26063))

(declare-fun d!26565 () Bool)

(assert (=> d!26565 (= (apply!92 (+!130 lt!48883 (tuple2!2301 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!48885) (apply!92 lt!48883 lt!48885))))

(assert (=> d!26565 true))

(declare-fun _$34!868 () Unit!2917)

(assert (=> d!26565 (= (choose!602 lt!48883 lt!48895 (minValue!2363 (v!2801 (underlying!338 thiss!992))) lt!48885) _$34!868)))

(declare-fun bs!4090 () Bool)

(assert (= bs!4090 d!26565))

(assert (=> bs!4090 m!106493))

(assert (=> bs!4090 m!106493))

(assert (=> bs!4090 m!106495))

(assert (=> bs!4090 m!106497))

(assert (=> d!26059 d!26565))

(assert (=> d!26059 d!26053))

(declare-fun d!26567 () Bool)

(declare-fun e!64373 () Bool)

(assert (=> d!26567 e!64373))

(declare-fun res!49676 () Bool)

(assert (=> d!26567 (=> res!49676 e!64373)))

(declare-fun lt!49680 () Bool)

(assert (=> d!26567 (= res!49676 (not lt!49680))))

(declare-fun lt!49683 () Bool)

(assert (=> d!26567 (= lt!49680 lt!49683)))

(declare-fun lt!49681 () Unit!2917)

(declare-fun e!64374 () Unit!2917)

(assert (=> d!26567 (= lt!49681 e!64374)))

(declare-fun c!16834 () Bool)

(assert (=> d!26567 (= c!16834 lt!49683)))

(assert (=> d!26567 (= lt!49683 (containsKey!154 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26567 (= (contains!788 lt!49199 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49680)))

(declare-fun b!98792 () Bool)

(declare-fun lt!49682 () Unit!2917)

(assert (=> b!98792 (= e!64374 lt!49682)))

(assert (=> b!98792 (= lt!49682 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!98792 (isDefined!103 (getValueByKey!151 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98793 () Bool)

(declare-fun Unit!2977 () Unit!2917)

(assert (=> b!98793 (= e!64374 Unit!2977)))

(declare-fun b!98794 () Bool)

(assert (=> b!98794 (= e!64373 (isDefined!103 (getValueByKey!151 (toList!765 lt!49199) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26567 c!16834) b!98792))

(assert (= (and d!26567 (not c!16834)) b!98793))

(assert (= (and d!26567 (not res!49676)) b!98794))

(declare-fun m!108565 () Bool)

(assert (=> d!26567 m!108565))

(declare-fun m!108567 () Bool)

(assert (=> b!98792 m!108567))

(assert (=> b!98792 m!107081))

(assert (=> b!98792 m!107081))

(declare-fun m!108569 () Bool)

(assert (=> b!98792 m!108569))

(assert (=> b!98794 m!107081))

(assert (=> b!98794 m!107081))

(assert (=> b!98794 m!108569))

(assert (=> d!26093 d!26567))

(declare-fun b!98795 () Bool)

(declare-fun e!64375 () Option!157)

(assert (=> b!98795 (= e!64375 (Some!156 (_2!1161 (h!2154 lt!49200))))))

(declare-fun b!98798 () Bool)

(declare-fun e!64376 () Option!157)

(assert (=> b!98798 (= e!64376 None!155)))

(declare-fun b!98796 () Bool)

(assert (=> b!98796 (= e!64375 e!64376)))

(declare-fun c!16836 () Bool)

(assert (=> b!98796 (= c!16836 (and ((_ is Cons!1560) lt!49200) (not (= (_1!1161 (h!2154 lt!49200)) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!26569 () Bool)

(declare-fun c!16835 () Bool)

(assert (=> d!26569 (= c!16835 (and ((_ is Cons!1560) lt!49200) (= (_1!1161 (h!2154 lt!49200)) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26569 (= (getValueByKey!151 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64375)))

(declare-fun b!98797 () Bool)

(assert (=> b!98797 (= e!64376 (getValueByKey!151 (t!5510 lt!49200) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26569 c!16835) b!98795))

(assert (= (and d!26569 (not c!16835)) b!98796))

(assert (= (and b!98796 c!16836) b!98797))

(assert (= (and b!98796 (not c!16836)) b!98798))

(declare-fun m!108571 () Bool)

(assert (=> b!98797 m!108571))

(assert (=> d!26093 d!26569))

(declare-fun d!26571 () Bool)

(assert (=> d!26571 (= (getValueByKey!151 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49684 () Unit!2917)

(assert (=> d!26571 (= lt!49684 (choose!604 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64377 () Bool)

(assert (=> d!26571 e!64377))

(declare-fun res!49677 () Bool)

(assert (=> d!26571 (=> (not res!49677) (not e!64377))))

(assert (=> d!26571 (= res!49677 (isStrictlySorted!291 lt!49200))))

(assert (=> d!26571 (= (lemmaContainsTupThenGetReturnValue!67 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49684)))

(declare-fun b!98799 () Bool)

(declare-fun res!49678 () Bool)

(assert (=> b!98799 (=> (not res!49678) (not e!64377))))

(assert (=> b!98799 (= res!49678 (containsKey!154 lt!49200 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98800 () Bool)

(assert (=> b!98800 (= e!64377 (contains!791 lt!49200 (tuple2!2301 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26571 res!49677) b!98799))

(assert (= (and b!98799 res!49678) b!98800))

(assert (=> d!26571 m!107075))

(declare-fun m!108573 () Bool)

(assert (=> d!26571 m!108573))

(declare-fun m!108575 () Bool)

(assert (=> d!26571 m!108575))

(declare-fun m!108577 () Bool)

(assert (=> b!98799 m!108577))

(declare-fun m!108579 () Bool)

(assert (=> b!98800 m!108579))

(assert (=> d!26093 d!26571))

(declare-fun b!98801 () Bool)

(declare-fun e!64381 () List!1564)

(declare-fun call!10077 () List!1564)

(assert (=> b!98801 (= e!64381 call!10077)))

(declare-fun b!98802 () Bool)

(declare-fun e!64379 () List!1564)

(declare-fun e!64382 () List!1564)

(assert (=> b!98802 (= e!64379 e!64382)))

(declare-fun c!16840 () Bool)

(assert (=> b!98802 (= c!16840 (and ((_ is Cons!1560) (toList!765 call!9909)) (= (_1!1161 (h!2154 (toList!765 call!9909))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98803 () Bool)

(declare-fun res!49679 () Bool)

(declare-fun e!64378 () Bool)

(assert (=> b!98803 (=> (not res!49679) (not e!64378))))

(declare-fun lt!49685 () List!1564)

(assert (=> b!98803 (= res!49679 (containsKey!154 lt!49685 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10074 () Bool)

(declare-fun call!10079 () List!1564)

(declare-fun call!10078 () List!1564)

(assert (=> bm!10074 (= call!10079 call!10078)))

(declare-fun e!64380 () List!1564)

(declare-fun bm!10075 () Bool)

(declare-fun c!16838 () Bool)

(assert (=> bm!10075 (= call!10078 ($colon$colon!77 e!64380 (ite c!16838 (h!2154 (toList!765 call!9909)) (tuple2!2301 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16839 () Bool)

(assert (=> bm!10075 (= c!16839 c!16838)))

(declare-fun c!16837 () Bool)

(declare-fun b!98804 () Bool)

(assert (=> b!98804 (= c!16837 (and ((_ is Cons!1560) (toList!765 call!9909)) (bvsgt (_1!1161 (h!2154 (toList!765 call!9909))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98804 (= e!64382 e!64381)))

(declare-fun d!26573 () Bool)

(assert (=> d!26573 e!64378))

(declare-fun res!49680 () Bool)

(assert (=> d!26573 (=> (not res!49680) (not e!64378))))

(assert (=> d!26573 (= res!49680 (isStrictlySorted!291 lt!49685))))

(assert (=> d!26573 (= lt!49685 e!64379)))

(assert (=> d!26573 (= c!16838 (and ((_ is Cons!1560) (toList!765 call!9909)) (bvslt (_1!1161 (h!2154 (toList!765 call!9909))) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26573 (isStrictlySorted!291 (toList!765 call!9909))))

(assert (=> d!26573 (= (insertStrictlySorted!70 (toList!765 call!9909) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49685)))

(declare-fun b!98805 () Bool)

(assert (=> b!98805 (= e!64382 call!10079)))

(declare-fun b!98806 () Bool)

(assert (=> b!98806 (= e!64380 (insertStrictlySorted!70 (t!5510 (toList!765 call!9909)) (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98807 () Bool)

(assert (=> b!98807 (= e!64380 (ite c!16840 (t!5510 (toList!765 call!9909)) (ite c!16837 (Cons!1560 (h!2154 (toList!765 call!9909)) (t!5510 (toList!765 call!9909))) Nil!1561)))))

(declare-fun b!98808 () Bool)

(assert (=> b!98808 (= e!64379 call!10078)))

(declare-fun b!98809 () Bool)

(assert (=> b!98809 (= e!64381 call!10077)))

(declare-fun b!98810 () Bool)

(assert (=> b!98810 (= e!64378 (contains!791 lt!49685 (tuple2!2301 (_1!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1161 (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10076 () Bool)

(assert (=> bm!10076 (= call!10077 call!10079)))

(assert (= (and d!26573 c!16838) b!98808))

(assert (= (and d!26573 (not c!16838)) b!98802))

(assert (= (and b!98802 c!16840) b!98805))

(assert (= (and b!98802 (not c!16840)) b!98804))

(assert (= (and b!98804 c!16837) b!98809))

(assert (= (and b!98804 (not c!16837)) b!98801))

(assert (= (or b!98809 b!98801) bm!10076))

(assert (= (or b!98805 bm!10076) bm!10074))

(assert (= (or b!98808 bm!10074) bm!10075))

(assert (= (and bm!10075 c!16839) b!98806))

(assert (= (and bm!10075 (not c!16839)) b!98807))

(assert (= (and d!26573 res!49680) b!98803))

(assert (= (and b!98803 res!49679) b!98810))

(declare-fun m!108581 () Bool)

(assert (=> bm!10075 m!108581))

(declare-fun m!108583 () Bool)

(assert (=> d!26573 m!108583))

(declare-fun m!108585 () Bool)

(assert (=> d!26573 m!108585))

(declare-fun m!108587 () Bool)

(assert (=> b!98810 m!108587))

(declare-fun m!108589 () Bool)

(assert (=> b!98803 m!108589))

(declare-fun m!108591 () Bool)

(assert (=> b!98806 m!108591))

(assert (=> d!26093 d!26573))

(declare-fun d!26575 () Bool)

(assert (=> d!26575 (= (inRange!0 (ite c!16618 (index!3132 lt!49179) (ite c!16620 (index!3131 lt!49177) (index!3134 lt!49177))) (mask!6577 newMap!16)) (and (bvsge (ite c!16618 (index!3132 lt!49179) (ite c!16620 (index!3131 lt!49177) (index!3134 lt!49177))) #b00000000000000000000000000000000) (bvslt (ite c!16618 (index!3132 lt!49179) (ite c!16620 (index!3131 lt!49177) (index!3134 lt!49177))) (bvadd (mask!6577 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9982 d!26575))

(declare-fun b!98811 () Bool)

(declare-fun e!64383 () Option!157)

(assert (=> b!98811 (= e!64383 (Some!156 (_2!1161 (h!2154 (toList!765 lt!49029)))))))

(declare-fun b!98814 () Bool)

(declare-fun e!64384 () Option!157)

(assert (=> b!98814 (= e!64384 None!155)))

(declare-fun b!98812 () Bool)

(assert (=> b!98812 (= e!64383 e!64384)))

(declare-fun c!16842 () Bool)

(assert (=> b!98812 (= c!16842 (and ((_ is Cons!1560) (toList!765 lt!49029)) (not (= (_1!1161 (h!2154 (toList!765 lt!49029))) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16841 () Bool)

(declare-fun d!26577 () Bool)

(assert (=> d!26577 (= c!16841 (and ((_ is Cons!1560) (toList!765 lt!49029)) (= (_1!1161 (h!2154 (toList!765 lt!49029))) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26577 (= (getValueByKey!151 (toList!765 lt!49029) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64383)))

(declare-fun b!98813 () Bool)

(assert (=> b!98813 (= e!64384 (getValueByKey!151 (t!5510 (toList!765 lt!49029)) (_1!1161 (ite c!16512 (ite c!16518 (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2301 (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355) (get!1288 (select (arr!2007 (_values!2463 (v!2801 (underlying!338 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26577 c!16841) b!98811))

(assert (= (and d!26577 (not c!16841)) b!98812))

(assert (= (and b!98812 c!16842) b!98813))

(assert (= (and b!98812 (not c!16842)) b!98814))

(declare-fun m!108593 () Bool)

(assert (=> b!98813 m!108593))

(assert (=> b!97895 d!26577))

(declare-fun d!26579 () Bool)

(assert (=> d!26579 (isDefined!103 (getValueByKey!151 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun lt!49686 () Unit!2917)

(assert (=> d!26579 (= lt!49686 (choose!600 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(declare-fun e!64385 () Bool)

(assert (=> d!26579 e!64385))

(declare-fun res!49681 () Bool)

(assert (=> d!26579 (=> (not res!49681) (not e!64385))))

(assert (=> d!26579 (= res!49681 (isStrictlySorted!291 (toList!765 call!9918)))))

(assert (=> d!26579 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) lt!49686)))

(declare-fun b!98815 () Bool)

(assert (=> b!98815 (= e!64385 (containsKey!154 (toList!765 call!9918) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26579 res!49681) b!98815))

(assert (=> d!26579 m!106251))

(assert (=> d!26579 m!106757))

(assert (=> d!26579 m!106757))

(assert (=> d!26579 m!106759))

(assert (=> d!26579 m!106251))

(declare-fun m!108595 () Bool)

(assert (=> d!26579 m!108595))

(declare-fun m!108597 () Bool)

(assert (=> d!26579 m!108597))

(assert (=> b!98815 m!106251))

(assert (=> b!98815 m!106753))

(assert (=> b!97856 d!26579))

(assert (=> b!97856 d!26293))

(assert (=> b!97856 d!26295))

(declare-fun d!26581 () Bool)

(declare-fun e!64386 () Bool)

(assert (=> d!26581 e!64386))

(declare-fun res!49682 () Bool)

(assert (=> d!26581 (=> res!49682 e!64386)))

(declare-fun lt!49687 () Bool)

(assert (=> d!26581 (= res!49682 (not lt!49687))))

(declare-fun lt!49690 () Bool)

(assert (=> d!26581 (= lt!49687 lt!49690)))

(declare-fun lt!49688 () Unit!2917)

(declare-fun e!64387 () Unit!2917)

(assert (=> d!26581 (= lt!49688 e!64387)))

(declare-fun c!16843 () Bool)

(assert (=> d!26581 (= c!16843 lt!49690)))

(assert (=> d!26581 (= lt!49690 (containsKey!154 (toList!765 lt!48938) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26581 (= (contains!788 lt!48938 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49687)))

(declare-fun b!98816 () Bool)

(declare-fun lt!49689 () Unit!2917)

(assert (=> b!98816 (= e!64387 lt!49689)))

(assert (=> b!98816 (= lt!49689 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48938) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98816 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98817 () Bool)

(declare-fun Unit!2978 () Unit!2917)

(assert (=> b!98817 (= e!64387 Unit!2978)))

(declare-fun b!98818 () Bool)

(assert (=> b!98818 (= e!64386 (isDefined!103 (getValueByKey!151 (toList!765 lt!48938) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26581 c!16843) b!98816))

(assert (= (and d!26581 (not c!16843)) b!98817))

(assert (= (and d!26581 (not res!49682)) b!98818))

(declare-fun m!108599 () Bool)

(assert (=> d!26581 m!108599))

(declare-fun m!108601 () Bool)

(assert (=> b!98816 m!108601))

(assert (=> b!98816 m!108229))

(assert (=> b!98816 m!108229))

(declare-fun m!108603 () Bool)

(assert (=> b!98816 m!108603))

(assert (=> b!98818 m!108229))

(assert (=> b!98818 m!108229))

(assert (=> b!98818 m!108603))

(assert (=> bm!9944 d!26581))

(declare-fun d!26583 () Bool)

(declare-fun lt!49691 () Bool)

(assert (=> d!26583 (= lt!49691 (select (content!103 (toList!765 lt!49042)) (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun e!64388 () Bool)

(assert (=> d!26583 (= lt!49691 e!64388)))

(declare-fun res!49683 () Bool)

(assert (=> d!26583 (=> (not res!49683) (not e!64388))))

(assert (=> d!26583 (= res!49683 ((_ is Cons!1560) (toList!765 lt!49042)))))

(assert (=> d!26583 (= (contains!791 (toList!765 lt!49042) (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))) lt!49691)))

(declare-fun b!98819 () Bool)

(declare-fun e!64389 () Bool)

(assert (=> b!98819 (= e!64388 e!64389)))

(declare-fun res!49684 () Bool)

(assert (=> b!98819 (=> res!49684 e!64389)))

(assert (=> b!98819 (= res!49684 (= (h!2154 (toList!765 lt!49042)) (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(declare-fun b!98820 () Bool)

(assert (=> b!98820 (= e!64389 (contains!791 (t!5510 (toList!765 lt!49042)) (tuple2!2301 lt!48881 (zeroValue!2363 (v!2801 (underlying!338 thiss!992))))))))

(assert (= (and d!26583 res!49683) b!98819))

(assert (= (and b!98819 (not res!49684)) b!98820))

(declare-fun m!108605 () Bool)

(assert (=> d!26583 m!108605))

(declare-fun m!108607 () Bool)

(assert (=> d!26583 m!108607))

(declare-fun m!108609 () Bool)

(assert (=> b!98820 m!108609))

(assert (=> b!97910 d!26583))

(declare-fun d!26585 () Bool)

(assert (=> d!26585 (contains!788 (getCurrentListMap!455 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)) (select (arr!2006 (_keys!4170 newMap!16)) (index!3132 lt!48821)))))

(assert (=> d!26585 true))

(declare-fun _$16!117 () Unit!2917)

(assert (=> d!26585 (= (choose!596 (_keys!4170 newMap!16) lt!48816 (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) (index!3132 lt!48821) (defaultEntry!2480 newMap!16)) _$16!117)))

(declare-fun bs!4091 () Bool)

(assert (= bs!4091 d!26585))

(assert (=> bs!4091 m!106671))

(assert (=> bs!4091 m!106453))

(assert (=> bs!4091 m!106671))

(assert (=> bs!4091 m!106453))

(assert (=> bs!4091 m!106673))

(assert (=> d!25983 d!26585))

(assert (=> d!25983 d!26099))

(declare-fun d!26587 () Bool)

(declare-fun res!49685 () Bool)

(declare-fun e!64390 () Bool)

(assert (=> d!26587 (=> res!49685 e!64390)))

(assert (=> d!26587 (= res!49685 (and ((_ is Cons!1560) (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (= (_1!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(assert (=> d!26587 (= (containsKey!154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)) e!64390)))

(declare-fun b!98821 () Bool)

(declare-fun e!64391 () Bool)

(assert (=> b!98821 (= e!64390 e!64391)))

(declare-fun res!49686 () Bool)

(assert (=> b!98821 (=> (not res!49686) (not e!64391))))

(assert (=> b!98821 (= res!49686 (and (or (not ((_ is Cons!1560) (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (bvsle (_1!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))) ((_ is Cons!1560) (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (bvslt (_1!1161 (h!2154 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16))))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355))))))

(declare-fun b!98822 () Bool)

(assert (=> b!98822 (= e!64391 (containsKey!154 (t!5510 (toList!765 (getCurrentListMap!455 (_keys!4170 newMap!16) (_values!2463 newMap!16) (mask!6577 newMap!16) (extraKeys!2301 newMap!16) (zeroValue!2363 newMap!16) (minValue!2363 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2480 newMap!16)))) (select (arr!2006 (_keys!4170 (v!2801 (underlying!338 thiss!992)))) from!355)))))

(assert (= (and d!26587 (not res!49685)) b!98821))

(assert (= (and b!98821 res!49686) b!98822))

(assert (=> b!98822 m!106251))

(declare-fun m!108611 () Bool)

(assert (=> b!98822 m!108611))

(assert (=> d!25987 d!26587))

(declare-fun b!98823 () Bool)

(declare-fun e!64394 () Bool)

(declare-fun call!10086 () Bool)

(assert (=> b!98823 (= e!64394 (not call!10086))))

(declare-fun b!98824 () Bool)

(declare-fun e!64399 () Bool)

(declare-fun e!64396 () Bool)

(assert (=> b!98824 (= e!64399 e!64396)))

(declare-fun res!49692 () Bool)

(assert (=> b!98824 (=> (not res!49692) (not e!64396))))

(declare-fun lt!49697 () ListLongMap!1499)

(assert (=> b!98824 (= res!49692 (contains!788 lt!49697 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(assert (=> b!98824 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(declare-fun b!98825 () Bool)

(assert (=> b!98825 (= e!64396 (= (apply!92 lt!49697 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)) (get!1288 (select (arr!2007 (_values!2463 (_2!1160 lt!48807))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2480 (_2!1160 lt!48807)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98825 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2257 (_values!2463 (_2!1160 lt!48807)))))))

(assert (=> b!98825 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(declare-fun bm!10077 () Bool)

(declare-fun call!10080 () Bool)

(assert (=> bm!10077 (= call!10080 (contains!788 lt!49697 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98826 () Bool)

(declare-fun e!64401 () ListLongMap!1499)

(declare-fun call!10085 () ListLongMap!1499)

(assert (=> b!98826 (= e!64401 (+!130 call!10085 (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (_2!1160 lt!48807)))))))

(declare-fun b!98827 () Bool)

(declare-fun e!64393 () Unit!2917)

(declare-fun lt!49712 () Unit!2917)

(assert (=> b!98827 (= e!64393 lt!49712)))

(declare-fun lt!49709 () ListLongMap!1499)

(assert (=> b!98827 (= lt!49709 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun lt!49705 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49705 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49703 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49703 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000))))

(declare-fun lt!49699 () Unit!2917)

(assert (=> b!98827 (= lt!49699 (addStillContains!68 lt!49709 lt!49705 (zeroValue!2363 (_2!1160 lt!48807)) lt!49703))))

(assert (=> b!98827 (contains!788 (+!130 lt!49709 (tuple2!2301 lt!49705 (zeroValue!2363 (_2!1160 lt!48807)))) lt!49703)))

(declare-fun lt!49708 () Unit!2917)

(assert (=> b!98827 (= lt!49708 lt!49699)))

(declare-fun lt!49698 () ListLongMap!1499)

(assert (=> b!98827 (= lt!49698 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun lt!49710 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49710 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49700 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49700 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000))))

(declare-fun lt!49706 () Unit!2917)

(assert (=> b!98827 (= lt!49706 (addApplyDifferent!68 lt!49698 lt!49710 (minValue!2363 (_2!1160 lt!48807)) lt!49700))))

(assert (=> b!98827 (= (apply!92 (+!130 lt!49698 (tuple2!2301 lt!49710 (minValue!2363 (_2!1160 lt!48807)))) lt!49700) (apply!92 lt!49698 lt!49700))))

(declare-fun lt!49702 () Unit!2917)

(assert (=> b!98827 (= lt!49702 lt!49706)))

(declare-fun lt!49713 () ListLongMap!1499)

(assert (=> b!98827 (= lt!49713 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun lt!49696 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49696 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49707 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49707 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000))))

(declare-fun lt!49695 () Unit!2917)

(assert (=> b!98827 (= lt!49695 (addApplyDifferent!68 lt!49713 lt!49696 (zeroValue!2363 (_2!1160 lt!48807)) lt!49707))))

(assert (=> b!98827 (= (apply!92 (+!130 lt!49713 (tuple2!2301 lt!49696 (zeroValue!2363 (_2!1160 lt!48807)))) lt!49707) (apply!92 lt!49713 lt!49707))))

(declare-fun lt!49693 () Unit!2917)

(assert (=> b!98827 (= lt!49693 lt!49695)))

(declare-fun lt!49704 () ListLongMap!1499)

(assert (=> b!98827 (= lt!49704 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun lt!49694 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49694 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49701 () (_ BitVec 64))

(assert (=> b!98827 (= lt!49701 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000))))

(assert (=> b!98827 (= lt!49712 (addApplyDifferent!68 lt!49704 lt!49694 (minValue!2363 (_2!1160 lt!48807)) lt!49701))))

(assert (=> b!98827 (= (apply!92 (+!130 lt!49704 (tuple2!2301 lt!49694 (minValue!2363 (_2!1160 lt!48807)))) lt!49701) (apply!92 lt!49704 lt!49701))))

(declare-fun b!98828 () Bool)

(declare-fun c!16844 () Bool)

(assert (=> b!98828 (= c!16844 (and (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64392 () ListLongMap!1499)

(declare-fun e!64397 () ListLongMap!1499)

(assert (=> b!98828 (= e!64392 e!64397)))

(declare-fun b!98829 () Bool)

(declare-fun e!64403 () Bool)

(assert (=> b!98829 (= e!64403 (= (apply!92 lt!49697 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2363 (_2!1160 lt!48807))))))

(declare-fun b!98830 () Bool)

(declare-fun e!64395 () Bool)

(assert (=> b!98830 (= e!64395 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(declare-fun b!98831 () Bool)

(declare-fun res!49693 () Bool)

(declare-fun e!64402 () Bool)

(assert (=> b!98831 (=> (not res!49693) (not e!64402))))

(declare-fun e!64404 () Bool)

(assert (=> b!98831 (= res!49693 e!64404)))

(declare-fun c!16847 () Bool)

(assert (=> b!98831 (= c!16847 (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!98832 () Bool)

(declare-fun call!10084 () ListLongMap!1499)

(assert (=> b!98832 (= e!64392 call!10084)))

(declare-fun bm!10078 () Bool)

(assert (=> bm!10078 (= call!10084 call!10085)))

(declare-fun b!98833 () Bool)

(assert (=> b!98833 (= e!64404 (not call!10080))))

(declare-fun b!98834 () Bool)

(declare-fun e!64400 () Bool)

(assert (=> b!98834 (= e!64400 (validKeyInArray!0 (select (arr!2006 (_keys!4170 (_2!1160 lt!48807))) #b00000000000000000000000000000000)))))

(declare-fun bm!10079 () Bool)

(declare-fun call!10082 () ListLongMap!1499)

(declare-fun call!10081 () ListLongMap!1499)

(assert (=> bm!10079 (= call!10082 call!10081)))

(declare-fun bm!10080 () Bool)

(assert (=> bm!10080 (= call!10086 (contains!788 lt!49697 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98835 () Bool)

(assert (=> b!98835 (= e!64402 e!64394)))

(declare-fun c!16846 () Bool)

(assert (=> b!98835 (= c!16846 (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98836 () Bool)

(assert (=> b!98836 (= e!64404 e!64403)))

(declare-fun res!49694 () Bool)

(assert (=> b!98836 (= res!49694 call!10080)))

(assert (=> b!98836 (=> (not res!49694) (not e!64403))))

(declare-fun b!98837 () Bool)

(declare-fun e!64398 () Bool)

(assert (=> b!98837 (= e!64394 e!64398)))

(declare-fun res!49691 () Bool)

(assert (=> b!98837 (= res!49691 call!10086)))

(assert (=> b!98837 (=> (not res!49691) (not e!64398))))

(declare-fun b!98838 () Bool)

(declare-fun res!49687 () Bool)

(assert (=> b!98838 (=> (not res!49687) (not e!64402))))

(assert (=> b!98838 (= res!49687 e!64399)))

(declare-fun res!49688 () Bool)

(assert (=> b!98838 (=> res!49688 e!64399)))

(assert (=> b!98838 (= res!49688 (not e!64400))))

(declare-fun res!49690 () Bool)

(assert (=> b!98838 (=> (not res!49690) (not e!64400))))

(assert (=> b!98838 (= res!49690 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(declare-fun bm!10081 () Bool)

(declare-fun call!10083 () ListLongMap!1499)

(assert (=> bm!10081 (= call!10083 call!10082)))

(declare-fun b!98839 () Bool)

(assert (=> b!98839 (= e!64398 (= (apply!92 lt!49697 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2363 (_2!1160 lt!48807))))))

(declare-fun b!98840 () Bool)

(assert (=> b!98840 (= e!64401 e!64392)))

(declare-fun c!16845 () Bool)

(assert (=> b!98840 (= c!16845 (and (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10082 () Bool)

(assert (=> bm!10082 (= call!10081 (getCurrentListMapNoExtraKeys!95 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))))))

(declare-fun b!98841 () Bool)

(declare-fun Unit!2979 () Unit!2917)

(assert (=> b!98841 (= e!64393 Unit!2979)))

(declare-fun b!98842 () Bool)

(assert (=> b!98842 (= e!64397 call!10083)))

(declare-fun b!98843 () Bool)

(assert (=> b!98843 (= e!64397 call!10084)))

(declare-fun bm!10083 () Bool)

(declare-fun c!16849 () Bool)

(assert (=> bm!10083 (= call!10085 (+!130 (ite c!16849 call!10081 (ite c!16845 call!10082 call!10083)) (ite (or c!16849 c!16845) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (_2!1160 lt!48807))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (_2!1160 lt!48807))))))))

(declare-fun d!26589 () Bool)

(assert (=> d!26589 e!64402))

(declare-fun res!49695 () Bool)

(assert (=> d!26589 (=> (not res!49695) (not e!64402))))

(assert (=> d!26589 (= res!49695 (or (bvsge #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))))

(declare-fun lt!49711 () ListLongMap!1499)

(assert (=> d!26589 (= lt!49697 lt!49711)))

(declare-fun lt!49692 () Unit!2917)

(assert (=> d!26589 (= lt!49692 e!64393)))

(declare-fun c!16848 () Bool)

(assert (=> d!26589 (= c!16848 e!64395)))

(declare-fun res!49689 () Bool)

(assert (=> d!26589 (=> (not res!49689) (not e!64395))))

(assert (=> d!26589 (= res!49689 (bvslt #b00000000000000000000000000000000 (size!2256 (_keys!4170 (_2!1160 lt!48807)))))))

(assert (=> d!26589 (= lt!49711 e!64401)))

(assert (=> d!26589 (= c!16849 (and (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26589 (validMask!0 (mask!6577 (_2!1160 lt!48807)))))

(assert (=> d!26589 (= (getCurrentListMap!455 (_keys!4170 (_2!1160 lt!48807)) (_values!2463 (_2!1160 lt!48807)) (mask!6577 (_2!1160 lt!48807)) (extraKeys!2301 (_2!1160 lt!48807)) (zeroValue!2363 (_2!1160 lt!48807)) (minValue!2363 (_2!1160 lt!48807)) #b00000000000000000000000000000000 (defaultEntry!2480 (_2!1160 lt!48807))) lt!49697)))

(assert (= (and d!26589 c!16849) b!98826))

(assert (= (and d!26589 (not c!16849)) b!98840))

(assert (= (and b!98840 c!16845) b!98832))

(assert (= (and b!98840 (not c!16845)) b!98828))

(assert (= (and b!98828 c!16844) b!98843))

(assert (= (and b!98828 (not c!16844)) b!98842))

(assert (= (or b!98843 b!98842) bm!10081))

(assert (= (or b!98832 bm!10081) bm!10079))

(assert (= (or b!98832 b!98843) bm!10078))

(assert (= (or b!98826 bm!10079) bm!10082))

(assert (= (or b!98826 bm!10078) bm!10083))

(assert (= (and d!26589 res!49689) b!98830))

(assert (= (and d!26589 c!16848) b!98827))

(assert (= (and d!26589 (not c!16848)) b!98841))

(assert (= (and d!26589 res!49695) b!98838))

(assert (= (and b!98838 res!49690) b!98834))

(assert (= (and b!98838 (not res!49688)) b!98824))

(assert (= (and b!98824 res!49692) b!98825))

(assert (= (and b!98838 res!49687) b!98831))

(assert (= (and b!98831 c!16847) b!98836))

(assert (= (and b!98831 (not c!16847)) b!98833))

(assert (= (and b!98836 res!49694) b!98829))

(assert (= (or b!98836 b!98833) bm!10077))

(assert (= (and b!98831 res!49693) b!98835))

(assert (= (and b!98835 c!16846) b!98837))

(assert (= (and b!98835 (not c!16846)) b!98823))

(assert (= (and b!98837 res!49691) b!98839))

(assert (= (or b!98837 b!98823) bm!10080))

(declare-fun b_lambda!4385 () Bool)

(assert (=> (not b_lambda!4385) (not b!98825)))

(declare-fun t!5527 () Bool)

(declare-fun tb!1929 () Bool)

(assert (=> (and b!97322 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 (_2!1160 lt!48807))) t!5527) tb!1929))

(declare-fun result!3275 () Bool)

(assert (=> tb!1929 (= result!3275 tp_is_empty!2629)))

(assert (=> b!98825 t!5527))

(declare-fun b_and!6069 () Bool)

(assert (= b_and!6065 (and (=> t!5527 result!3275) b_and!6069)))

(declare-fun t!5529 () Bool)

(declare-fun tb!1931 () Bool)

(assert (=> (and b!97318 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (_2!1160 lt!48807))) t!5529) tb!1931))

(declare-fun result!3277 () Bool)

(assert (= result!3277 result!3275))

(assert (=> b!98825 t!5529))

(declare-fun b_and!6071 () Bool)

(assert (= b_and!6067 (and (=> t!5529 result!3277) b_and!6071)))

(declare-fun m!108613 () Bool)

(assert (=> b!98829 m!108613))

(declare-fun m!108615 () Bool)

(assert (=> bm!10083 m!108615))

(declare-fun m!108617 () Bool)

(assert (=> b!98826 m!108617))

(assert (=> b!98824 m!107445))

(assert (=> b!98824 m!107445))

(declare-fun m!108619 () Bool)

(assert (=> b!98824 m!108619))

(assert (=> b!98825 m!107445))

(declare-fun m!108621 () Bool)

(assert (=> b!98825 m!108621))

(declare-fun m!108623 () Bool)

(assert (=> b!98825 m!108623))

(assert (=> b!98825 m!107445))

(declare-fun m!108625 () Bool)

(assert (=> b!98825 m!108625))

(assert (=> b!98825 m!108621))

(assert (=> b!98825 m!108623))

(declare-fun m!108627 () Bool)

(assert (=> b!98825 m!108627))

(declare-fun m!108629 () Bool)

(assert (=> bm!10082 m!108629))

(declare-fun m!108631 () Bool)

(assert (=> b!98827 m!108631))

(declare-fun m!108633 () Bool)

(assert (=> b!98827 m!108633))

(assert (=> b!98827 m!107445))

(declare-fun m!108635 () Bool)

(assert (=> b!98827 m!108635))

(assert (=> b!98827 m!108629))

(declare-fun m!108637 () Bool)

(assert (=> b!98827 m!108637))

(declare-fun m!108639 () Bool)

(assert (=> b!98827 m!108639))

(declare-fun m!108641 () Bool)

(assert (=> b!98827 m!108641))

(declare-fun m!108643 () Bool)

(assert (=> b!98827 m!108643))

(declare-fun m!108645 () Bool)

(assert (=> b!98827 m!108645))

(declare-fun m!108647 () Bool)

(assert (=> b!98827 m!108647))

(declare-fun m!108649 () Bool)

(assert (=> b!98827 m!108649))

(declare-fun m!108651 () Bool)

(assert (=> b!98827 m!108651))

(declare-fun m!108653 () Bool)

(assert (=> b!98827 m!108653))

(assert (=> b!98827 m!108653))

(declare-fun m!108655 () Bool)

(assert (=> b!98827 m!108655))

(assert (=> b!98827 m!108645))

(declare-fun m!108657 () Bool)

(assert (=> b!98827 m!108657))

(declare-fun m!108659 () Bool)

(assert (=> b!98827 m!108659))

(assert (=> b!98827 m!108631))

(assert (=> b!98827 m!108637))

(declare-fun m!108661 () Bool)

(assert (=> bm!10080 m!108661))

(declare-fun m!108663 () Bool)

(assert (=> d!26589 m!108663))

(declare-fun m!108665 () Bool)

(assert (=> bm!10077 m!108665))

(assert (=> b!98834 m!107445))

(assert (=> b!98834 m!107445))

(assert (=> b!98834 m!107447))

(declare-fun m!108667 () Bool)

(assert (=> b!98839 m!108667))

(assert (=> b!98830 m!107445))

(assert (=> b!98830 m!107445))

(assert (=> b!98830 m!107447))

(assert (=> d!26085 d!26589))

(declare-fun d!26591 () Bool)

(declare-fun e!64405 () Bool)

(assert (=> d!26591 e!64405))

(declare-fun res!49696 () Bool)

(assert (=> d!26591 (=> res!49696 e!64405)))

(declare-fun lt!49714 () Bool)

(assert (=> d!26591 (= res!49696 (not lt!49714))))

(declare-fun lt!49717 () Bool)

(assert (=> d!26591 (= lt!49714 lt!49717)))

(declare-fun lt!49715 () Unit!2917)

(declare-fun e!64406 () Unit!2917)

(assert (=> d!26591 (= lt!49715 e!64406)))

(declare-fun c!16850 () Bool)

(assert (=> d!26591 (= c!16850 lt!49717)))

(assert (=> d!26591 (= lt!49717 (containsKey!154 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26591 (= (contains!788 lt!48973 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!49714)))

(declare-fun b!98844 () Bool)

(declare-fun lt!49716 () Unit!2917)

(assert (=> b!98844 (= e!64406 lt!49716)))

(assert (=> b!98844 (= lt!49716 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98844 (isDefined!103 (getValueByKey!151 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98845 () Bool)

(declare-fun Unit!2980 () Unit!2917)

(assert (=> b!98845 (= e!64406 Unit!2980)))

(declare-fun b!98846 () Bool)

(assert (=> b!98846 (= e!64405 (isDefined!103 (getValueByKey!151 (toList!765 lt!48973) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (= (and d!26591 c!16850) b!98844))

(assert (= (and d!26591 (not c!16850)) b!98845))

(assert (= (and d!26591 (not res!49696)) b!98846))

(declare-fun m!108669 () Bool)

(assert (=> d!26591 m!108669))

(declare-fun m!108671 () Bool)

(assert (=> b!98844 m!108671))

(assert (=> b!98844 m!106701))

(assert (=> b!98844 m!106701))

(declare-fun m!108673 () Bool)

(assert (=> b!98844 m!108673))

(assert (=> b!98846 m!106701))

(assert (=> b!98846 m!106701))

(assert (=> b!98846 m!108673))

(assert (=> d!25991 d!26591))

(declare-fun b!98847 () Bool)

(declare-fun e!64407 () Option!157)

(assert (=> b!98847 (= e!64407 (Some!156 (_2!1161 (h!2154 lt!48974))))))

(declare-fun b!98850 () Bool)

(declare-fun e!64408 () Option!157)

(assert (=> b!98850 (= e!64408 None!155)))

(declare-fun b!98848 () Bool)

(assert (=> b!98848 (= e!64407 e!64408)))

(declare-fun c!16852 () Bool)

(assert (=> b!98848 (= c!16852 (and ((_ is Cons!1560) lt!48974) (not (= (_1!1161 (h!2154 lt!48974)) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun c!16851 () Bool)

(declare-fun d!26593 () Bool)

(assert (=> d!26593 (= c!16851 (and ((_ is Cons!1560) lt!48974) (= (_1!1161 (h!2154 lt!48974)) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (=> d!26593 (= (getValueByKey!151 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) e!64407)))

(declare-fun b!98849 () Bool)

(assert (=> b!98849 (= e!64408 (getValueByKey!151 (t!5510 lt!48974) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26593 c!16851) b!98847))

(assert (= (and d!26593 (not c!16851)) b!98848))

(assert (= (and b!98848 c!16852) b!98849))

(assert (= (and b!98848 (not c!16852)) b!98850))

(declare-fun m!108675 () Bool)

(assert (=> b!98849 m!108675))

(assert (=> d!25991 d!26593))

(declare-fun d!26595 () Bool)

(assert (=> d!26595 (= (getValueByKey!151 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) (Some!156 (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun lt!49718 () Unit!2917)

(assert (=> d!26595 (= lt!49718 (choose!604 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun e!64409 () Bool)

(assert (=> d!26595 e!64409))

(declare-fun res!49697 () Bool)

(assert (=> d!26595 (=> (not res!49697) (not e!64409))))

(assert (=> d!26595 (= res!49697 (isStrictlySorted!291 lt!48974))))

(assert (=> d!26595 (= (lemmaContainsTupThenGetReturnValue!67 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!49718)))

(declare-fun b!98851 () Bool)

(declare-fun res!49698 () Bool)

(assert (=> b!98851 (=> (not res!49698) (not e!64409))))

(assert (=> b!98851 (= res!49698 (containsKey!154 lt!48974 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98852 () Bool)

(assert (=> b!98852 (= e!64409 (contains!791 lt!48974 (tuple2!2301 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (= (and d!26595 res!49697) b!98851))

(assert (= (and b!98851 res!49698) b!98852))

(assert (=> d!26595 m!106695))

(declare-fun m!108677 () Bool)

(assert (=> d!26595 m!108677))

(declare-fun m!108679 () Bool)

(assert (=> d!26595 m!108679))

(declare-fun m!108681 () Bool)

(assert (=> b!98851 m!108681))

(declare-fun m!108683 () Bool)

(assert (=> b!98852 m!108683))

(assert (=> d!25991 d!26595))

(declare-fun b!98853 () Bool)

(declare-fun e!64413 () List!1564)

(declare-fun call!10087 () List!1564)

(assert (=> b!98853 (= e!64413 call!10087)))

(declare-fun b!98854 () Bool)

(declare-fun e!64411 () List!1564)

(declare-fun e!64414 () List!1564)

(assert (=> b!98854 (= e!64411 e!64414)))

(declare-fun c!16856 () Bool)

(assert (=> b!98854 (= c!16856 (and ((_ is Cons!1560) (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (= (_1!1161 (h!2154 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun b!98855 () Bool)

(declare-fun res!49699 () Bool)

(declare-fun e!64410 () Bool)

(assert (=> b!98855 (=> (not res!49699) (not e!64410))))

(declare-fun lt!49719 () List!1564)

(assert (=> b!98855 (= res!49699 (containsKey!154 lt!49719 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!10084 () Bool)

(declare-fun call!10089 () List!1564)

(declare-fun call!10088 () List!1564)

(assert (=> bm!10084 (= call!10089 call!10088)))

(declare-fun e!64412 () List!1564)

(declare-fun c!16854 () Bool)

(declare-fun bm!10085 () Bool)

(assert (=> bm!10085 (= call!10088 ($colon$colon!77 e!64412 (ite c!16854 (h!2154 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (tuple2!2301 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))))

(declare-fun c!16855 () Bool)

(assert (=> bm!10085 (= c!16855 c!16854)))

(declare-fun c!16853 () Bool)

(declare-fun b!98856 () Bool)

(assert (=> b!98856 (= c!16853 (and ((_ is Cons!1560) (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (bvsgt (_1!1161 (h!2154 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (=> b!98856 (= e!64414 e!64413)))

(declare-fun d!26597 () Bool)

(assert (=> d!26597 e!64410))

(declare-fun res!49700 () Bool)

(assert (=> d!26597 (=> (not res!49700) (not e!64410))))

(assert (=> d!26597 (= res!49700 (isStrictlySorted!291 lt!49719))))

(assert (=> d!26597 (= lt!49719 e!64411)))

(assert (=> d!26597 (= c!16854 (and ((_ is Cons!1560) (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (bvslt (_1!1161 (h!2154 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(assert (=> d!26597 (isStrictlySorted!291 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))))))

(assert (=> d!26597 (= (insertStrictlySorted!70 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))) lt!49719)))

(declare-fun b!98857 () Bool)

(assert (=> b!98857 (= e!64414 call!10089)))

(declare-fun b!98858 () Bool)

(assert (=> b!98858 (= e!64412 (insertStrictlySorted!70 (t!5510 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98859 () Bool)

(assert (=> b!98859 (= e!64412 (ite c!16856 (t!5510 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (ite c!16853 (Cons!1560 (h!2154 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936)))) (t!5510 (toList!765 (ite c!16540 call!9934 (ite c!16536 call!9935 call!9936))))) Nil!1561)))))

(declare-fun b!98860 () Bool)

(assert (=> b!98860 (= e!64411 call!10088)))

(declare-fun b!98861 () Bool)

(assert (=> b!98861 (= e!64413 call!10087)))

(declare-fun b!98862 () Bool)

(assert (=> b!98862 (= e!64410 (contains!791 lt!49719 (tuple2!2301 (_1!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (_2!1161 (ite (or c!16540 c!16536) (tuple2!2301 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2363 (v!2801 (underlying!338 thiss!992)))) (tuple2!2301 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun bm!10086 () Bool)

(assert (=> bm!10086 (= call!10087 call!10089)))

(assert (= (and d!26597 c!16854) b!98860))

(assert (= (and d!26597 (not c!16854)) b!98854))

(assert (= (and b!98854 c!16856) b!98857))

(assert (= (and b!98854 (not c!16856)) b!98856))

(assert (= (and b!98856 c!16853) b!98861))

(assert (= (and b!98856 (not c!16853)) b!98853))

(assert (= (or b!98861 b!98853) bm!10086))

(assert (= (or b!98857 bm!10086) bm!10084))

(assert (= (or b!98860 bm!10084) bm!10085))

(assert (= (and bm!10085 c!16855) b!98858))

(assert (= (and bm!10085 (not c!16855)) b!98859))

(assert (= (and d!26597 res!49700) b!98855))

(assert (= (and b!98855 res!49699) b!98862))

(declare-fun m!108685 () Bool)

(assert (=> bm!10085 m!108685))

(declare-fun m!108687 () Bool)

(assert (=> d!26597 m!108687))

(declare-fun m!108689 () Bool)

(assert (=> d!26597 m!108689))

(declare-fun m!108691 () Bool)

(assert (=> b!98862 m!108691))

(declare-fun m!108693 () Bool)

(assert (=> b!98855 m!108693))

(declare-fun m!108695 () Bool)

(assert (=> b!98858 m!108695))

(assert (=> d!25991 d!26597))

(assert (=> b!98029 d!26507))

(assert (=> b!97866 d!26157))

(declare-fun d!26599 () Bool)

(declare-fun e!64415 () Bool)

(assert (=> d!26599 e!64415))

(declare-fun res!49701 () Bool)

(assert (=> d!26599 (=> res!49701 e!64415)))

(declare-fun lt!49720 () Bool)

(assert (=> d!26599 (= res!49701 (not lt!49720))))

(declare-fun lt!49723 () Bool)

(assert (=> d!26599 (= lt!49720 lt!49723)))

(declare-fun lt!49721 () Unit!2917)

(declare-fun e!64416 () Unit!2917)

(assert (=> d!26599 (= lt!49721 e!64416)))

(declare-fun c!16857 () Bool)

(assert (=> d!26599 (= c!16857 lt!49723)))

(assert (=> d!26599 (= lt!49723 (containsKey!154 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> d!26599 (= (contains!788 lt!49087 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49720)))

(declare-fun b!98863 () Bool)

(declare-fun lt!49722 () Unit!2917)

(assert (=> b!98863 (= e!64416 lt!49722)))

(assert (=> b!98863 (= lt!49722 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (=> b!98863 (isDefined!103 (getValueByKey!151 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98864 () Bool)

(declare-fun Unit!2981 () Unit!2917)

(assert (=> b!98864 (= e!64416 Unit!2981)))

(declare-fun b!98865 () Bool)

(assert (=> b!98865 (= e!64415 (isDefined!103 (getValueByKey!151 (toList!765 lt!49087) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26599 c!16857) b!98863))

(assert (= (and d!26599 (not c!16857)) b!98864))

(assert (= (and d!26599 (not res!49701)) b!98865))

(declare-fun m!108697 () Bool)

(assert (=> d!26599 m!108697))

(declare-fun m!108699 () Bool)

(assert (=> b!98863 m!108699))

(assert (=> b!98863 m!106961))

(assert (=> b!98863 m!106961))

(declare-fun m!108701 () Bool)

(assert (=> b!98863 m!108701))

(assert (=> b!98865 m!106961))

(assert (=> b!98865 m!106961))

(assert (=> b!98865 m!108701))

(assert (=> d!26067 d!26599))

(declare-fun b!98866 () Bool)

(declare-fun e!64417 () Option!157)

(assert (=> b!98866 (= e!64417 (Some!156 (_2!1161 (h!2154 lt!49088))))))

(declare-fun b!98869 () Bool)

(declare-fun e!64418 () Option!157)

(assert (=> b!98869 (= e!64418 None!155)))

(declare-fun b!98867 () Bool)

(assert (=> b!98867 (= e!64417 e!64418)))

(declare-fun c!16859 () Bool)

(assert (=> b!98867 (= c!16859 (and ((_ is Cons!1560) lt!49088) (not (= (_1!1161 (h!2154 lt!49088)) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16858 () Bool)

(declare-fun d!26601 () Bool)

(assert (=> d!26601 (= c!16858 (and ((_ is Cons!1560) lt!49088) (= (_1!1161 (h!2154 lt!49088)) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26601 (= (getValueByKey!151 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) e!64417)))

(declare-fun b!98868 () Bool)

(assert (=> b!98868 (= e!64418 (getValueByKey!151 (t!5510 lt!49088) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(assert (= (and d!26601 c!16858) b!98866))

(assert (= (and d!26601 (not c!16858)) b!98867))

(assert (= (and b!98867 c!16859) b!98868))

(assert (= (and b!98867 (not c!16859)) b!98869))

(declare-fun m!108703 () Bool)

(assert (=> b!98868 m!108703))

(assert (=> d!26067 d!26601))

(declare-fun d!26603 () Bool)

(assert (=> d!26603 (= (getValueByKey!151 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) (Some!156 (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun lt!49724 () Unit!2917)

(assert (=> d!26603 (= lt!49724 (choose!604 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun e!64419 () Bool)

(assert (=> d!26603 e!64419))

(declare-fun res!49702 () Bool)

(assert (=> d!26603 (=> (not res!49702) (not e!64419))))

(assert (=> d!26603 (= res!49702 (isStrictlySorted!291 lt!49088))))

(assert (=> d!26603 (= (lemmaContainsTupThenGetReturnValue!67 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49724)))

(declare-fun b!98870 () Bool)

(declare-fun res!49703 () Bool)

(assert (=> b!98870 (=> (not res!49703) (not e!64419))))

(assert (=> b!98870 (= res!49703 (containsKey!154 lt!49088 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98871 () Bool)

(assert (=> b!98871 (= e!64419 (contains!791 lt!49088 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (= (and d!26603 res!49702) b!98870))

(assert (= (and b!98870 res!49703) b!98871))

(assert (=> d!26603 m!106955))

(declare-fun m!108705 () Bool)

(assert (=> d!26603 m!108705))

(declare-fun m!108707 () Bool)

(assert (=> d!26603 m!108707))

(declare-fun m!108709 () Bool)

(assert (=> b!98870 m!108709))

(declare-fun m!108711 () Bool)

(assert (=> b!98871 m!108711))

(assert (=> d!26067 d!26603))

(declare-fun b!98872 () Bool)

(declare-fun e!64423 () List!1564)

(declare-fun call!10090 () List!1564)

(assert (=> b!98872 (= e!64423 call!10090)))

(declare-fun b!98873 () Bool)

(declare-fun e!64421 () List!1564)

(declare-fun e!64424 () List!1564)

(assert (=> b!98873 (= e!64421 e!64424)))

(declare-fun c!16863 () Bool)

(assert (=> b!98873 (= c!16863 (and ((_ is Cons!1560) (toList!765 lt!48889)) (= (_1!1161 (h!2154 (toList!765 lt!48889))) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun b!98874 () Bool)

(declare-fun res!49704 () Bool)

(declare-fun e!64420 () Bool)

(assert (=> b!98874 (=> (not res!49704) (not e!64420))))

(declare-fun lt!49725 () List!1564)

(assert (=> b!98874 (= res!49704 (containsKey!154 lt!49725 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun bm!10087 () Bool)

(declare-fun call!10092 () List!1564)

(declare-fun call!10091 () List!1564)

(assert (=> bm!10087 (= call!10092 call!10091)))

(declare-fun c!16861 () Bool)

(declare-fun bm!10088 () Bool)

(declare-fun e!64422 () List!1564)

(assert (=> bm!10088 (= call!10091 ($colon$colon!77 e!64422 (ite c!16861 (h!2154 (toList!765 lt!48889)) (tuple2!2301 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))))

(declare-fun c!16862 () Bool)

(assert (=> bm!10088 (= c!16862 c!16861)))

(declare-fun c!16860 () Bool)

(declare-fun b!98875 () Bool)

(assert (=> b!98875 (= c!16860 (and ((_ is Cons!1560) (toList!765 lt!48889)) (bvsgt (_1!1161 (h!2154 (toList!765 lt!48889))) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> b!98875 (= e!64424 e!64423)))

(declare-fun d!26605 () Bool)

(assert (=> d!26605 e!64420))

(declare-fun res!49705 () Bool)

(assert (=> d!26605 (=> (not res!49705) (not e!64420))))

(assert (=> d!26605 (= res!49705 (isStrictlySorted!291 lt!49725))))

(assert (=> d!26605 (= lt!49725 e!64421)))

(assert (=> d!26605 (= c!16861 (and ((_ is Cons!1560) (toList!765 lt!48889)) (bvslt (_1!1161 (h!2154 (toList!765 lt!48889))) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(assert (=> d!26605 (isStrictlySorted!291 (toList!765 lt!48889))))

(assert (=> d!26605 (= (insertStrictlySorted!70 (toList!765 lt!48889) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))) lt!49725)))

(declare-fun b!98876 () Bool)

(assert (=> b!98876 (= e!64424 call!10092)))

(declare-fun b!98877 () Bool)

(assert (=> b!98877 (= e!64422 (insertStrictlySorted!70 (t!5510 (toList!765 lt!48889)) (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992)))))))))

(declare-fun b!98878 () Bool)

(assert (=> b!98878 (= e!64422 (ite c!16863 (t!5510 (toList!765 lt!48889)) (ite c!16860 (Cons!1560 (h!2154 (toList!765 lt!48889)) (t!5510 (toList!765 lt!48889))) Nil!1561)))))

(declare-fun b!98879 () Bool)

(assert (=> b!98879 (= e!64421 call!10091)))

(declare-fun b!98880 () Bool)

(assert (=> b!98880 (= e!64423 call!10090)))

(declare-fun b!98881 () Bool)

(assert (=> b!98881 (= e!64420 (contains!791 lt!49725 (tuple2!2301 (_1!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))) (_2!1161 (tuple2!2301 lt!48879 (minValue!2363 (v!2801 (underlying!338 thiss!992))))))))))

(declare-fun bm!10089 () Bool)

(assert (=> bm!10089 (= call!10090 call!10092)))

(assert (= (and d!26605 c!16861) b!98879))

(assert (= (and d!26605 (not c!16861)) b!98873))

(assert (= (and b!98873 c!16863) b!98876))

(assert (= (and b!98873 (not c!16863)) b!98875))

(assert (= (and b!98875 c!16860) b!98880))

(assert (= (and b!98875 (not c!16860)) b!98872))

(assert (= (or b!98880 b!98872) bm!10089))

(assert (= (or b!98876 bm!10089) bm!10087))

(assert (= (or b!98879 bm!10087) bm!10088))

(assert (= (and bm!10088 c!16862) b!98877))

(assert (= (and bm!10088 (not c!16862)) b!98878))

(assert (= (and d!26605 res!49705) b!98874))

(assert (= (and b!98874 res!49704) b!98881))

(declare-fun m!108713 () Bool)

(assert (=> bm!10088 m!108713))

(declare-fun m!108715 () Bool)

(assert (=> d!26605 m!108715))

(declare-fun m!108717 () Bool)

(assert (=> d!26605 m!108717))

(declare-fun m!108719 () Bool)

(assert (=> b!98881 m!108719))

(declare-fun m!108721 () Bool)

(assert (=> b!98874 m!108721))

(declare-fun m!108723 () Bool)

(assert (=> b!98877 m!108723))

(assert (=> d!26067 d!26605))

(declare-fun b!98885 () Bool)

(declare-fun e!64425 () Bool)

(assert (=> b!98885 (= e!64425 (and (bvsge (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000000) (bvsle (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000011) (bvsge (_vacant!474 (_2!1160 lt!48807)) #b00000000000000000000000000000000)))))

(declare-fun b!98884 () Bool)

(declare-fun res!49709 () Bool)

(assert (=> b!98884 (=> (not res!49709) (not e!64425))))

(assert (=> b!98884 (= res!49709 (= (size!2262 (_2!1160 lt!48807)) (bvadd (_size!474 (_2!1160 lt!48807)) (bvsdiv (bvadd (extraKeys!2301 (_2!1160 lt!48807)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98883 () Bool)

(declare-fun res!49707 () Bool)

(assert (=> b!98883 (=> (not res!49707) (not e!64425))))

(assert (=> b!98883 (= res!49707 (bvsge (size!2262 (_2!1160 lt!48807)) (_size!474 (_2!1160 lt!48807))))))

(declare-fun b!98882 () Bool)

(declare-fun res!49706 () Bool)

(assert (=> b!98882 (=> (not res!49706) (not e!64425))))

(assert (=> b!98882 (= res!49706 (and (= (size!2257 (_values!2463 (_2!1160 lt!48807))) (bvadd (mask!6577 (_2!1160 lt!48807)) #b00000000000000000000000000000001)) (= (size!2256 (_keys!4170 (_2!1160 lt!48807))) (size!2257 (_values!2463 (_2!1160 lt!48807)))) (bvsge (_size!474 (_2!1160 lt!48807)) #b00000000000000000000000000000000) (bvsle (_size!474 (_2!1160 lt!48807)) (bvadd (mask!6577 (_2!1160 lt!48807)) #b00000000000000000000000000000001))))))

(declare-fun d!26607 () Bool)

(declare-fun res!49708 () Bool)

(assert (=> d!26607 (=> (not res!49708) (not e!64425))))

(assert (=> d!26607 (= res!49708 (validMask!0 (mask!6577 (_2!1160 lt!48807))))))

(assert (=> d!26607 (= (simpleValid!68 (_2!1160 lt!48807)) e!64425)))

(assert (= (and d!26607 res!49708) b!98882))

(assert (= (and b!98882 res!49706) b!98883))

(assert (= (and b!98883 res!49707) b!98884))

(assert (= (and b!98884 res!49709) b!98885))

(declare-fun m!108725 () Bool)

(assert (=> b!98884 m!108725))

(assert (=> b!98883 m!108725))

(assert (=> d!26607 m!108663))

(assert (=> d!26007 d!26607))

(assert (=> b!98040 d!26251))

(assert (=> b!98040 d!26097))

(declare-fun mapIsEmpty!3759 () Bool)

(declare-fun mapRes!3759 () Bool)

(assert (=> mapIsEmpty!3759 mapRes!3759))

(declare-fun mapNonEmpty!3759 () Bool)

(declare-fun tp!9591 () Bool)

(declare-fun e!64427 () Bool)

(assert (=> mapNonEmpty!3759 (= mapRes!3759 (and tp!9591 e!64427))))

(declare-fun mapRest!3759 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3759 () ValueCell!971)

(declare-fun mapKey!3759 () (_ BitVec 32))

(assert (=> mapNonEmpty!3759 (= mapRest!3757 (store mapRest!3759 mapKey!3759 mapValue!3759))))

(declare-fun condMapEmpty!3759 () Bool)

(declare-fun mapDefault!3759 () ValueCell!971)

(assert (=> mapNonEmpty!3757 (= condMapEmpty!3759 (= mapRest!3757 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3759)))))

(declare-fun e!64426 () Bool)

(assert (=> mapNonEmpty!3757 (= tp!9589 (and e!64426 mapRes!3759))))

(declare-fun b!98886 () Bool)

(assert (=> b!98886 (= e!64427 tp_is_empty!2629)))

(declare-fun b!98887 () Bool)

(assert (=> b!98887 (= e!64426 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3757 condMapEmpty!3759) mapIsEmpty!3759))

(assert (= (and mapNonEmpty!3757 (not condMapEmpty!3759)) mapNonEmpty!3759))

(assert (= (and mapNonEmpty!3759 ((_ is ValueCellFull!971) mapValue!3759)) b!98886))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!971) mapDefault!3759)) b!98887))

(declare-fun m!108727 () Bool)

(assert (=> mapNonEmpty!3759 m!108727))

(declare-fun mapIsEmpty!3760 () Bool)

(declare-fun mapRes!3760 () Bool)

(assert (=> mapIsEmpty!3760 mapRes!3760))

(declare-fun mapNonEmpty!3760 () Bool)

(declare-fun tp!9592 () Bool)

(declare-fun e!64429 () Bool)

(assert (=> mapNonEmpty!3760 (= mapRes!3760 (and tp!9592 e!64429))))

(declare-fun mapRest!3760 () (Array (_ BitVec 32) ValueCell!971))

(declare-fun mapValue!3760 () ValueCell!971)

(declare-fun mapKey!3760 () (_ BitVec 32))

(assert (=> mapNonEmpty!3760 (= mapRest!3758 (store mapRest!3760 mapKey!3760 mapValue!3760))))

(declare-fun condMapEmpty!3760 () Bool)

(declare-fun mapDefault!3760 () ValueCell!971)

(assert (=> mapNonEmpty!3758 (= condMapEmpty!3760 (= mapRest!3758 ((as const (Array (_ BitVec 32) ValueCell!971)) mapDefault!3760)))))

(declare-fun e!64428 () Bool)

(assert (=> mapNonEmpty!3758 (= tp!9590 (and e!64428 mapRes!3760))))

(declare-fun b!98888 () Bool)

(assert (=> b!98888 (= e!64429 tp_is_empty!2629)))

(declare-fun b!98889 () Bool)

(assert (=> b!98889 (= e!64428 tp_is_empty!2629)))

(assert (= (and mapNonEmpty!3758 condMapEmpty!3760) mapIsEmpty!3760))

(assert (= (and mapNonEmpty!3758 (not condMapEmpty!3760)) mapNonEmpty!3760))

(assert (= (and mapNonEmpty!3760 ((_ is ValueCellFull!971) mapValue!3760)) b!98888))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!971) mapDefault!3760)) b!98889))

(declare-fun m!108729 () Bool)

(assert (=> mapNonEmpty!3760 m!108729))

(declare-fun b_lambda!4387 () Bool)

(assert (= b_lambda!4373 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4387)))

(declare-fun b_lambda!4389 () Bool)

(assert (= b_lambda!4361 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4389)))

(declare-fun b_lambda!4391 () Bool)

(assert (= b_lambda!4375 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4391)))

(declare-fun b_lambda!4393 () Bool)

(assert (= b_lambda!4377 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4393)))

(declare-fun b_lambda!4395 () Bool)

(assert (= b_lambda!4365 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4395)))

(declare-fun b_lambda!4397 () Bool)

(assert (= b_lambda!4371 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4397)))

(declare-fun b_lambda!4399 () Bool)

(assert (= b_lambda!4383 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4399)))

(declare-fun b_lambda!4401 () Bool)

(assert (= b_lambda!4359 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4401)))

(declare-fun b_lambda!4403 () Bool)

(assert (= b_lambda!4379 (or (and b!97322 b_free!2425) (and b!97318 b_free!2427 (= (defaultEntry!2480 newMap!16) (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))))) b_lambda!4403)))

(declare-fun b_lambda!4405 () Bool)

(assert (= b_lambda!4357 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4405)))

(declare-fun b_lambda!4407 () Bool)

(assert (= b_lambda!4369 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4407)))

(declare-fun b_lambda!4409 () Bool)

(assert (= b_lambda!4367 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4409)))

(declare-fun b_lambda!4411 () Bool)

(assert (= b_lambda!4363 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4411)))

(declare-fun b_lambda!4413 () Bool)

(assert (= b_lambda!4381 (or (and b!97322 b_free!2425 (= (defaultEntry!2480 (v!2801 (underlying!338 thiss!992))) (defaultEntry!2480 newMap!16))) (and b!97318 b_free!2427) b_lambda!4413)))

(check-sat (not b!98618) (not d!26283) (not d!26195) (not b!98461) (not d!26281) (not b!98763) (not b!98268) (not bm!9995) (not b_lambda!4347) (not b!98333) (not b!98595) (not b!98535) (not d!26595) (not d!26565) (not b!98484) (not d!26153) (not d!26161) (not b_lambda!4351) (not b_lambda!4403) (not b!98196) (not bm!10085) (not b!98670) (not bm!10017) (not b_lambda!4413) (not b!98081) (not b!98510) (not bm!10073) (not b!98672) (not b!98159) (not d!26407) (not b!98283) (not d!26123) (not b!98335) (not b!98373) (not b!98056) (not d!26113) (not b!98632) (not d!26477) (not b!98787) (not b!98524) (not b!98560) (not b!98416) (not b!98583) (not b!98441) (not b!98158) (not b!98638) (not b!98884) (not d!26441) (not bm!10023) (not bm!10031) (not b!98402) (not b_lambda!4401) (not b!98570) (not d!26115) (not b!98203) (not bm!10041) (not b!98708) (not b!98716) (not b!98354) (not b!98349) (not d!26537) (not b!98623) (not b!98586) (not b!98179) (not b!98579) (not d!26471) (not b!98160) (not b!98336) (not b!98699) (not b!98487) (not d!26365) (not b!98301) (not bm!10020) (not b_next!2427) (not b!98573) (not b!98725) (not b!98209) (not b!98437) (not bm!10071) (not b!98855) (not d!26523) (not b!98626) (not b!98239) (not d!26191) (not d!26607) (not d!26605) (not b!98486) (not b!98676) (not d!26455) (not d!26447) (not d!26251) (not d!26603) (not b!98064) (not b!98858) (not d!26475) (not bm!10048) (not b!98612) (not b!98766) (not b!98792) (not b!98150) (not bm!10039) (not b!98827) (not b!98191) (not b!98574) (not b!98830) (not bm!10018) (not d!26125) (not d!26321) (not d!26141) (not d!26139) (not b!98176) (not b!98234) (not d!26203) (not d!26325) (not d!26525) (not d!26263) (not b!98707) (not b_lambda!4335) (not bm!9987) (not d!26261) (not b!98427) (not b!98387) (not d!26297) (not b!98627) (not d!26389) (not b!98112) (not d!26503) (not d!26207) (not b!98490) (not b_next!2425) (not b!98445) (not b!98789) (not d!26121) (not d!26105) (not d!26213) (not b!98791) (not b!98075) (not b!98295) (not d!26579) (not b!98329) (not d!26179) (not b!98200) (not d!26341) (not b!98284) (not b!98697) (not b!98072) (not b!98584) (not b!98870) (not d!26185) (not b!98408) (not b!98079) (not d!26183) (not b!98229) (not b!98372) (not b!98517) (not b!98810) (not b!98713) (not b!98591) (not d!26313) (not d!26269) (not b!98409) (not b!98418) (not b!98216) (not b!98520) (not b!98489) (not d!26379) (not d!26395) (not bm!10042) (not d!26301) (not b!98704) (not b!98735) (not bm!9998) (not bm!10055) (not b!98058) (not d!26431) (not b!98550) (not b!98174) (not b!98322) (not d!26359) (not d!26589) (not d!26273) (not b!98862) (not b!98117) (not d!26231) (not b!98794) (not b_lambda!4397) (not d!26375) (not d!26299) (not d!26291) (not b!98282) (not b!98393) (not b!98711) (not b!98356) (not b!98464) (not d!26107) (not d!26131) (not b!98194) (not b!98767) (not b!98744) (not b!98435) (not b!98824) (not b!98167) (not b!98549) (not b!98740) (not b!98622) (not b!98615) (not bm!10069) (not b!98553) (not d!26597) (not b!98205) (not d!26599) (not b!98749) (not b!98883) (not b!98059) (not b!98375) (not d!26543) (not bm!10061) (not b!98590) (not mapNonEmpty!3759) (not b!98315) (not b!98881) (not b!98215) (not mapNonEmpty!3760) (not d!26147) (not b!98512) (not b!98224) (not d!26305) (not b!98192) (not bm!10016) (not d!26397) (not b!98818) (not b!98822) (not b!98485) (not d!26451) (not b!98386) (not b!98610) (not b!98154) (not b!98515) (not b!98732) (not d!26429) (not bm!10026) (not b!98580) (not d!26417) (not d!26247) (not b!98737) (not b!98643) (not d!26245) (not d!26469) (not b!98507) (not bm!10049) (not b!98556) (not d!26519) (not bm!10013) (not b!98544) (not b!98440) (not d!26317) (not b!98063) (not bm!10025) (not d!26427) (not b!98442) (not d!26489) (not d!26437) (not d!26541) (not b!98680) (not d!26501) (not d!26303) (not b!98625) (not b!98292) (not b!98460) (not d!26287) (not bm!10082) (not b!98834) (not b!98578) (not d!26219) (not b!98339) (not b_lambda!4407) (not b!98765) (not bm!10075) (not d!26289) (not b!98377) (not bm!10027) (not b!98797) (not b!98181) (not b!98124) (not b!98844) (not b!98465) (not d!26567) (not bm!10088) (not b!98734) (not b!98608) (not b!98504) (not bm!10034) (not d!26177) (not bm!10028) (not b!98538) (not b!98778) (not b!98621) (not b!98396) (not b!98304) (not d!26201) (not b!98074) (not b!98071) (not d!26433) (not b!98634) (not d!26151) (not b!98582) (not d!26171) (not d!26495) (not b!98384) (not b!98772) (not b!98728) (not d!26459) (not bm!10072) (not b!98739) (not b!98173) (not b!98849) (not d!26233) (not b!98419) (not b!98514) (not d!26239) (not b!98285) (not b!98677) (not b!98367) (not b!98066) (not b!98175) (not d!26545) (not b!98340) (not b_lambda!4405) (not bm!10014) (not b!98275) (not b!98758) (not b!98272) (not d!26311) (not d!26467) (not b!98355) (not b!98371) (not b!98494) (not b!98454) (not bm!10047) (not d!26499) (not d!26423) (not b!98710) (not d!26585) (not b!98519) (not bm!10064) (not b!98597) (not b!98784) (not d!26557) (not b!98775) (not b!98217) (not b!98695) (not d!26581) (not b!98604) (not b!98594) (not b_lambda!4331) (not b!98629) (not b!98236) (not b!98326) (not b!98341) (not bm!10054) (not d!26363) (not d!26573) (not b!98642) (not b!98577) (not b!98067) (not bm!10033) (not d!26315) (not d!26511) (not b!98774) (not b!98596) (not b!98051) (not b!98674) (not d!26103) (not d!26583) (not d!26257) (not b!98624) tp_is_empty!2629 (not d!26215) (not b!98874) (not b!98799) (not b!98164) (not b!98539) (not b!98781) (not b!98220) (not b!98547) b_and!6071 (not b!98290) (not bm!10080) (not b!98361) (not b!98054) (not d!26549) (not bm!9999) (not b!98806) (not b!98585) (not d!26535) (not b!98684) (not b_lambda!4349) (not b!98068) (not b!98162) (not b!98370) (not d!26129) (not b!98123) (not bm!10002) (not bm!10036) (not b!98410) (not d!26101) (not b_lambda!4353) (not b_lambda!4389) (not b!98754) (not d!26367) (not bm!10046) (not b!98803) (not b!98202) (not d!26443) (not b_lambda!4395) (not b!98365) (not b!98263) (not b!98820) (not b!98815) (not bm!10059) (not d!26413) (not b!98157) (not b!98863) (not d!26339) (not d!26109) (not b!98353) (not b!98516) (not bm!10066) (not b!98062) (not b!98499) (not b!98536) (not b!98482) (not b!98600) (not bm!10044) (not bm!10056) (not d!26571) (not d!26445) (not bm!10008) (not b!98254) (not b!98800) (not d!26405) (not b!98342) (not b!98310) (not b!98197) (not b!98877) (not d!26137) (not b!98391) (not b!98214) (not d!26425) (not d!26309) (not bm!10077) (not b!98714) (not b!98308) (not b!98783) (not b!98679) (not b!98813) (not bm!10062) (not b!98207) (not b!98736) (not d!26335) (not b_lambda!4411) (not b!98376) (not bm!10035) (not d!26277) (not b!98171) (not d!26349) (not b!98266) (not b!98360) (not d!26387) (not b!98871) (not d!26319) (not b!98288) (not b!98320) (not d!26529) (not b!98631) (not d!26117) (not b!98511) (not b!98201) (not d!26411) (not d!26265) (not b_lambda!4387) (not b!98351) (not b!98399) (not d!26377) (not b!98462) (not b_lambda!4399) (not b_lambda!4409) (not bm!10011) (not bm!10083) (not d!26383) (not d!26209) (not b!98588) (not bm!10019) (not d!26165) (not d!26279) (not d!26307) (not b!98422) (not b!98675) (not d!26127) (not b!98457) (not b!98542) (not d!26461) (not b!98567) (not d!26591) (not b!98317) (not b_lambda!4385) (not d!26193) (not d!26449) (not b!98829) (not d!26403) (not b!98644) (not b!98563) (not b!98070) (not b!98761) (not b!98198) (not b!98052) (not b!98107) (not b!98839) (not d!26327) (not b!98529) (not b!98469) (not b!98541) (not b!98701) (not d!26285) (not d!26563) (not b!98455) (not d!26293) (not b!98825) (not b!98270) (not d!26517) (not d!26119) (not b!98605) (not b!98114) (not b!98338) (not d!26229) (not b!98297) (not b!98049) (not b!98083) (not b!98719) (not b!98065) (not bm!10005) (not b!98413) (not b_lambda!4393) (not d!26225) (not b!98865) (not b!98613) (not b!98212) (not b!98576) (not b!98358) (not d!26439) (not b!98868) (not d!26479) (not b!98826) (not b!98721) (not b!98323) (not b!98147) (not d!26453) (not b!98508) (not d!26323) (not b!98689) (not d!26547) (not b!98635) (not d!26199) (not d!26187) (not d!26497) (not d!26513) (not d!26345) (not b!98334) (not b!98755) (not d!26361) (not b!98459) (not bm!10015) (not b!98366) (not d!26249) (not bm!10006) (not b!98431) (not b!98364) (not b!98313) (not b!98390) (not d!26111) (not b!98617) (not bm!10004) (not b!98474) (not b!98172) (not b!98219) b_and!6069 (not b!98816) (not b!98417) (not b!98722) (not b!98309) (not b!98694) (not d!26527) (not b_lambda!4391) (not d!26399) (not bm!9997) (not b!98846) (not d!26491) (not b!98184) (not b!98851) (not d!26223) (not b!98298) (not d!26473) (not b!98565) (not d!26435) (not b!98852) (not d!26515) (not b!98210) (not b!98262) (not b!98380) (not b_lambda!4355) (not d!26159))
(check-sat b_and!6069 b_and!6071 (not b_next!2425) (not b_next!2427))
