; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11652 () Bool)

(assert start!11652)

(declare-fun b!97466 () Bool)

(declare-fun b_free!2429 () Bool)

(declare-fun b_next!2429 () Bool)

(assert (=> b!97466 (= b_free!2429 (not b_next!2429))))

(declare-fun tp!9570 () Bool)

(declare-fun b_and!5987 () Bool)

(assert (=> b!97466 (= tp!9570 b_and!5987)))

(declare-fun b!97470 () Bool)

(declare-fun b_free!2431 () Bool)

(declare-fun b_next!2431 () Bool)

(assert (=> b!97470 (= b_free!2431 (not b_next!2431))))

(declare-fun tp!9571 () Bool)

(declare-fun b_and!5989 () Bool)

(assert (=> b!97470 (= tp!9571 b_and!5989)))

(declare-fun tp_is_empty!2631 () Bool)

(declare-datatypes ((V!3155 0))(
  ( (V!3156 (val!1360 Int)) )
))
(declare-datatypes ((array!4241 0))(
  ( (array!4242 (arr!2015 (Array (_ BitVec 32) (_ BitVec 64))) (size!2265 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!972 0))(
  ( (ValueCellFull!972 (v!2799 V!3155)) (EmptyCell!972) )
))
(declare-datatypes ((array!4243 0))(
  ( (array!4244 (arr!2016 (Array (_ BitVec 32) ValueCell!972)) (size!2266 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!852 0))(
  ( (LongMapFixedSize!853 (defaultEntry!2481 Int) (mask!6578 (_ BitVec 32)) (extraKeys!2302 (_ BitVec 32)) (zeroValue!2364 V!3155) (minValue!2364 V!3155) (_size!475 (_ BitVec 32)) (_keys!4171 array!4241) (_values!2464 array!4243) (_vacant!475 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!652 0))(
  ( (Cell!653 (v!2800 LongMapFixedSize!852)) )
))
(declare-datatypes ((LongMap!652 0))(
  ( (LongMap!653 (underlying!337 Cell!652)) )
))
(declare-fun thiss!992 () LongMap!652)

(declare-fun e!63580 () Bool)

(declare-fun e!63571 () Bool)

(declare-fun array_inv!1255 (array!4241) Bool)

(declare-fun array_inv!1256 (array!4243) Bool)

(assert (=> b!97466 (= e!63580 (and tp!9570 tp_is_empty!2631 (array_inv!1255 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (array_inv!1256 (_values!2464 (v!2800 (underlying!337 thiss!992)))) e!63571))))

(declare-fun mapIsEmpty!3745 () Bool)

(declare-fun mapRes!3746 () Bool)

(assert (=> mapIsEmpty!3745 mapRes!3746))

(declare-fun mapIsEmpty!3746 () Bool)

(declare-fun mapRes!3745 () Bool)

(assert (=> mapIsEmpty!3746 mapRes!3745))

(declare-fun b!97467 () Bool)

(declare-fun e!63570 () Bool)

(assert (=> b!97467 (= e!63570 e!63580)))

(declare-fun b!97468 () Bool)

(declare-fun res!49115 () Bool)

(declare-fun e!63578 () Bool)

(assert (=> b!97468 (=> (not res!49115) (not e!63578))))

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!97468 (= res!49115 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!97469 () Bool)

(declare-fun e!63573 () Bool)

(declare-fun e!63568 () Bool)

(assert (=> b!97469 (= e!63573 e!63568)))

(declare-fun res!49113 () Bool)

(assert (=> b!97469 (=> (not res!49113) (not e!63568))))

(declare-datatypes ((tuple2!2338 0))(
  ( (tuple2!2339 (_1!1180 Bool) (_2!1180 LongMapFixedSize!852)) )
))
(declare-fun lt!48816 () tuple2!2338)

(assert (=> b!97469 (= res!49113 (and (_1!1180 lt!48816) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-datatypes ((Unit!2937 0))(
  ( (Unit!2938) )
))
(declare-fun lt!48817 () Unit!2937)

(declare-fun e!63582 () Unit!2937)

(assert (=> b!97469 (= lt!48817 e!63582)))

(declare-datatypes ((tuple2!2340 0))(
  ( (tuple2!2341 (_1!1181 (_ BitVec 64)) (_2!1181 V!3155)) )
))
(declare-datatypes ((List!1580 0))(
  ( (Nil!1577) (Cons!1576 (h!2170 tuple2!2340) (t!5534 List!1580)) )
))
(declare-datatypes ((ListLongMap!1535 0))(
  ( (ListLongMap!1536 (toList!783 List!1580)) )
))
(declare-fun lt!48820 () ListLongMap!1535)

(declare-fun c!16485 () Bool)

(declare-fun contains!800 (ListLongMap!1535 (_ BitVec 64)) Bool)

(assert (=> b!97469 (= c!16485 (contains!800 lt!48820 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun newMap!16 () LongMapFixedSize!852)

(declare-fun update!140 (LongMapFixedSize!852 (_ BitVec 64) V!3155) tuple2!2338)

(declare-fun get!1280 (ValueCell!972 V!3155) V!3155)

(declare-fun dynLambda!368 (Int (_ BitVec 64)) V!3155)

(assert (=> b!97469 (= lt!48816 (update!140 newMap!16 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!63583 () Bool)

(declare-fun e!63579 () Bool)

(assert (=> b!97470 (= e!63579 (and tp!9571 tp_is_empty!2631 (array_inv!1255 (_keys!4171 newMap!16)) (array_inv!1256 (_values!2464 newMap!16)) e!63583))))

(declare-fun b!97471 () Bool)

(declare-fun res!49112 () Bool)

(assert (=> b!97471 (=> (not res!49112) (not e!63578))))

(declare-fun valid!384 (LongMapFixedSize!852) Bool)

(assert (=> b!97471 (= res!49112 (valid!384 newMap!16))))

(declare-fun b!97472 () Bool)

(declare-fun e!63569 () Bool)

(assert (=> b!97472 (= e!63583 (and e!63569 mapRes!3746))))

(declare-fun condMapEmpty!3745 () Bool)

(declare-fun mapDefault!3745 () ValueCell!972)

(assert (=> b!97472 (= condMapEmpty!3745 (= (arr!2016 (_values!2464 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3745)))))

(declare-fun res!49116 () Bool)

(assert (=> start!11652 (=> (not res!49116) (not e!63578))))

(declare-fun valid!385 (LongMap!652) Bool)

(assert (=> start!11652 (= res!49116 (valid!385 thiss!992))))

(assert (=> start!11652 e!63578))

(declare-fun e!63574 () Bool)

(assert (=> start!11652 e!63574))

(assert (=> start!11652 true))

(assert (=> start!11652 e!63579))

(declare-fun b!97473 () Bool)

(declare-fun e!63572 () Bool)

(assert (=> b!97473 (= e!63572 tp_is_empty!2631)))

(declare-fun b!97474 () Bool)

(assert (=> b!97474 (= e!63571 (and e!63572 mapRes!3745))))

(declare-fun condMapEmpty!3746 () Bool)

(declare-fun mapDefault!3746 () ValueCell!972)

(assert (=> b!97474 (= condMapEmpty!3746 (= (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3746)))))

(declare-fun mapNonEmpty!3745 () Bool)

(declare-fun tp!9569 () Bool)

(declare-fun e!63581 () Bool)

(assert (=> mapNonEmpty!3745 (= mapRes!3745 (and tp!9569 e!63581))))

(declare-fun mapValue!3746 () ValueCell!972)

(declare-fun mapKey!3746 () (_ BitVec 32))

(declare-fun mapRest!3745 () (Array (_ BitVec 32) ValueCell!972))

(assert (=> mapNonEmpty!3745 (= (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (store mapRest!3745 mapKey!3746 mapValue!3746))))

(declare-fun b!97475 () Bool)

(assert (=> b!97475 (= e!63578 e!63573)))

(declare-fun res!49110 () Bool)

(assert (=> b!97475 (=> (not res!49110) (not e!63573))))

(declare-fun lt!48821 () ListLongMap!1535)

(assert (=> b!97475 (= res!49110 (and (= lt!48821 lt!48820) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1255 (LongMapFixedSize!852) ListLongMap!1535)

(assert (=> b!97475 (= lt!48820 (map!1255 newMap!16))))

(declare-fun getCurrentListMap!474 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) ListLongMap!1535)

(assert (=> b!97475 (= lt!48821 (getCurrentListMap!474 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun mapNonEmpty!3746 () Bool)

(declare-fun tp!9572 () Bool)

(declare-fun e!63577 () Bool)

(assert (=> mapNonEmpty!3746 (= mapRes!3746 (and tp!9572 e!63577))))

(declare-fun mapKey!3745 () (_ BitVec 32))

(declare-fun mapRest!3746 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapValue!3745 () ValueCell!972)

(assert (=> mapNonEmpty!3746 (= (arr!2016 (_values!2464 newMap!16)) (store mapRest!3746 mapKey!3745 mapValue!3745))))

(declare-fun b!97476 () Bool)

(assert (=> b!97476 (= e!63568 (and (= (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6578 (v!2800 (underlying!337 thiss!992))))) (= (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992))))) (bvsge (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!97477 () Bool)

(declare-fun res!49114 () Bool)

(assert (=> b!97477 (=> (not res!49114) (not e!63568))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!97477 (= res!49114 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!97478 () Bool)

(assert (=> b!97478 (= e!63581 tp_is_empty!2631)))

(declare-fun b!97479 () Bool)

(assert (=> b!97479 (= e!63574 e!63570)))

(declare-fun b!97480 () Bool)

(declare-fun res!49111 () Bool)

(assert (=> b!97480 (=> (not res!49111) (not e!63578))))

(assert (=> b!97480 (= res!49111 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6578 newMap!16)) (_size!475 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!97481 () Bool)

(declare-fun Unit!2939 () Unit!2937)

(assert (=> b!97481 (= e!63582 Unit!2939)))

(declare-fun lt!48818 () Unit!2937)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!89 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2937)

(assert (=> b!97481 (= lt!48818 (lemmaListMapContainsThenArrayContainsFrom!89 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4241 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!97481 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!48819 () Unit!2937)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4241 (_ BitVec 32) (_ BitVec 32)) Unit!2937)

(assert (=> b!97481 (= lt!48819 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1581 0))(
  ( (Nil!1578) (Cons!1577 (h!2171 (_ BitVec 64)) (t!5535 List!1581)) )
))
(declare-fun arrayNoDuplicates!0 (array!4241 (_ BitVec 32) List!1581) Bool)

(assert (=> b!97481 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) from!355 Nil!1578)))

(declare-fun lt!48815 () Unit!2937)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4241 (_ BitVec 32) (_ BitVec 64) List!1581) Unit!2937)

(assert (=> b!97481 (= lt!48815 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578)))))

(assert (=> b!97481 false))

(declare-fun b!97482 () Bool)

(assert (=> b!97482 (= e!63577 tp_is_empty!2631)))

(declare-fun b!97483 () Bool)

(declare-fun Unit!2940 () Unit!2937)

(assert (=> b!97483 (= e!63582 Unit!2940)))

(declare-fun b!97484 () Bool)

(assert (=> b!97484 (= e!63569 tp_is_empty!2631)))

(assert (= (and start!11652 res!49116) b!97468))

(assert (= (and b!97468 res!49115) b!97471))

(assert (= (and b!97471 res!49112) b!97480))

(assert (= (and b!97480 res!49111) b!97475))

(assert (= (and b!97475 res!49110) b!97469))

(assert (= (and b!97469 c!16485) b!97481))

(assert (= (and b!97469 (not c!16485)) b!97483))

(assert (= (and b!97469 res!49113) b!97477))

(assert (= (and b!97477 res!49114) b!97476))

(assert (= (and b!97474 condMapEmpty!3746) mapIsEmpty!3746))

(assert (= (and b!97474 (not condMapEmpty!3746)) mapNonEmpty!3745))

(get-info :version)

(assert (= (and mapNonEmpty!3745 ((_ is ValueCellFull!972) mapValue!3746)) b!97478))

(assert (= (and b!97474 ((_ is ValueCellFull!972) mapDefault!3746)) b!97473))

(assert (= b!97466 b!97474))

(assert (= b!97467 b!97466))

(assert (= b!97479 b!97467))

(assert (= start!11652 b!97479))

(assert (= (and b!97472 condMapEmpty!3745) mapIsEmpty!3745))

(assert (= (and b!97472 (not condMapEmpty!3745)) mapNonEmpty!3746))

(assert (= (and mapNonEmpty!3746 ((_ is ValueCellFull!972) mapValue!3745)) b!97482))

(assert (= (and b!97472 ((_ is ValueCellFull!972) mapDefault!3745)) b!97484))

(assert (= b!97470 b!97472))

(assert (= start!11652 b!97470))

(declare-fun b_lambda!4337 () Bool)

(assert (=> (not b_lambda!4337) (not b!97469)))

(declare-fun t!5531 () Bool)

(declare-fun tb!1921 () Bool)

(assert (=> (and b!97466 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) t!5531) tb!1921))

(declare-fun result!3261 () Bool)

(assert (=> tb!1921 (= result!3261 tp_is_empty!2631)))

(assert (=> b!97469 t!5531))

(declare-fun b_and!5991 () Bool)

(assert (= b_and!5987 (and (=> t!5531 result!3261) b_and!5991)))

(declare-fun tb!1923 () Bool)

(declare-fun t!5533 () Bool)

(assert (=> (and b!97470 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) t!5533) tb!1923))

(declare-fun result!3265 () Bool)

(assert (= result!3265 result!3261))

(assert (=> b!97469 t!5533))

(declare-fun b_and!5993 () Bool)

(assert (= b_and!5989 (and (=> t!5533 result!3265) b_and!5993)))

(declare-fun m!106647 () Bool)

(assert (=> b!97475 m!106647))

(declare-fun m!106649 () Bool)

(assert (=> b!97475 m!106649))

(declare-fun m!106651 () Bool)

(assert (=> b!97475 m!106651))

(declare-fun m!106653 () Bool)

(assert (=> b!97481 m!106653))

(declare-fun m!106655 () Bool)

(assert (=> b!97481 m!106655))

(assert (=> b!97481 m!106647))

(declare-fun m!106657 () Bool)

(assert (=> b!97481 m!106657))

(assert (=> b!97481 m!106647))

(assert (=> b!97481 m!106647))

(declare-fun m!106659 () Bool)

(assert (=> b!97481 m!106659))

(assert (=> b!97481 m!106647))

(declare-fun m!106661 () Bool)

(assert (=> b!97481 m!106661))

(declare-fun m!106663 () Bool)

(assert (=> start!11652 m!106663))

(declare-fun m!106665 () Bool)

(assert (=> b!97471 m!106665))

(declare-fun m!106667 () Bool)

(assert (=> mapNonEmpty!3746 m!106667))

(declare-fun m!106669 () Bool)

(assert (=> b!97469 m!106669))

(declare-fun m!106671 () Bool)

(assert (=> b!97469 m!106671))

(declare-fun m!106673 () Bool)

(assert (=> b!97469 m!106673))

(assert (=> b!97469 m!106647))

(assert (=> b!97469 m!106671))

(assert (=> b!97469 m!106647))

(declare-fun m!106675 () Bool)

(assert (=> b!97469 m!106675))

(assert (=> b!97469 m!106647))

(assert (=> b!97469 m!106673))

(declare-fun m!106677 () Bool)

(assert (=> b!97469 m!106677))

(assert (=> b!97469 m!106669))

(declare-fun m!106679 () Bool)

(assert (=> mapNonEmpty!3745 m!106679))

(declare-fun m!106681 () Bool)

(assert (=> b!97477 m!106681))

(declare-fun m!106683 () Bool)

(assert (=> b!97470 m!106683))

(declare-fun m!106685 () Bool)

(assert (=> b!97470 m!106685))

(declare-fun m!106687 () Bool)

(assert (=> b!97466 m!106687))

(declare-fun m!106689 () Bool)

(assert (=> b!97466 m!106689))

(check-sat tp_is_empty!2631 (not start!11652) (not mapNonEmpty!3746) (not b!97469) (not mapNonEmpty!3745) (not b!97466) (not b!97470) (not b!97477) b_and!5991 (not b_lambda!4337) (not b!97475) (not b!97481) b_and!5993 (not b_next!2431) (not b!97471) (not b_next!2429))
(check-sat b_and!5991 b_and!5993 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun b_lambda!4341 () Bool)

(assert (= b_lambda!4337 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4341)))

(check-sat tp_is_empty!2631 (not start!11652) (not b_lambda!4341) (not mapNonEmpty!3746) (not b!97469) (not mapNonEmpty!3745) (not b!97466) (not b!97470) (not b!97477) b_and!5991 (not b!97475) (not b!97481) b_and!5993 (not b_next!2431) (not b!97471) (not b_next!2429))
(check-sat b_and!5991 b_and!5993 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun d!25997 () Bool)

(assert (=> d!25997 (not (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48845 () Unit!2937)

(declare-fun choose!68 (array!4241 (_ BitVec 32) (_ BitVec 64) List!1581) Unit!2937)

(assert (=> d!25997 (= lt!48845 (choose!68 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578)))))

(assert (=> d!25997 (bvslt (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25997 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578)) lt!48845)))

(declare-fun bs!4031 () Bool)

(assert (= bs!4031 d!25997))

(assert (=> bs!4031 m!106647))

(assert (=> bs!4031 m!106659))

(assert (=> bs!4031 m!106647))

(declare-fun m!106735 () Bool)

(assert (=> bs!4031 m!106735))

(assert (=> b!97481 d!25997))

(declare-fun d!25999 () Bool)

(assert (=> d!25999 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) from!355 Nil!1578)))

(declare-fun lt!48848 () Unit!2937)

(declare-fun choose!39 (array!4241 (_ BitVec 32) (_ BitVec 32)) Unit!2937)

(assert (=> d!25999 (= lt!48848 (choose!39 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!25999 (bvslt (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25999 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 from!355) lt!48848)))

(declare-fun bs!4032 () Bool)

(assert (= bs!4032 d!25999))

(assert (=> bs!4032 m!106655))

(declare-fun m!106737 () Bool)

(assert (=> bs!4032 m!106737))

(assert (=> b!97481 d!25999))

(declare-fun d!26001 () Bool)

(declare-fun res!49142 () Bool)

(declare-fun e!63636 () Bool)

(assert (=> d!26001 (=> res!49142 e!63636)))

(assert (=> d!26001 (= res!49142 (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26001 (= (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!63636)))

(declare-fun b!97550 () Bool)

(declare-fun e!63637 () Bool)

(assert (=> b!97550 (= e!63636 e!63637)))

(declare-fun res!49143 () Bool)

(assert (=> b!97550 (=> (not res!49143) (not e!63637))))

(assert (=> b!97550 (= res!49143 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!97551 () Bool)

(assert (=> b!97551 (= e!63637 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26001 (not res!49142)) b!97550))

(assert (= (and b!97550 res!49143) b!97551))

(declare-fun m!106739 () Bool)

(assert (=> d!26001 m!106739))

(assert (=> b!97551 m!106647))

(declare-fun m!106741 () Bool)

(assert (=> b!97551 m!106741))

(assert (=> b!97481 d!26001))

(declare-fun d!26003 () Bool)

(declare-fun e!63640 () Bool)

(assert (=> d!26003 e!63640))

(declare-fun c!16491 () Bool)

(assert (=> d!26003 (= c!16491 (and (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!48851 () Unit!2937)

(declare-fun choose!587 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2937)

(assert (=> d!26003 (= lt!48851 (choose!587 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(assert (=> d!26003 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992))))))

(assert (=> d!26003 (= (lemmaListMapContainsThenArrayContainsFrom!89 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) lt!48851)))

(declare-fun b!97556 () Bool)

(assert (=> b!97556 (= e!63640 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97557 () Bool)

(assert (=> b!97557 (= e!63640 (ite (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26003 c!16491) b!97556))

(assert (= (and d!26003 (not c!16491)) b!97557))

(assert (=> d!26003 m!106647))

(declare-fun m!106743 () Bool)

(assert (=> d!26003 m!106743))

(assert (=> d!26003 m!106681))

(assert (=> b!97556 m!106647))

(assert (=> b!97556 m!106659))

(assert (=> b!97481 d!26003))

(declare-fun b!97568 () Bool)

(declare-fun e!63652 () Bool)

(declare-fun e!63651 () Bool)

(assert (=> b!97568 (= e!63652 e!63651)))

(declare-fun c!16494 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!97568 (= c!16494 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun call!9868 () Bool)

(declare-fun bm!9865 () Bool)

(assert (=> bm!9865 (= call!9868 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)))))

(declare-fun b!97569 () Bool)

(declare-fun e!63650 () Bool)

(declare-fun contains!802 (List!1581 (_ BitVec 64)) Bool)

(assert (=> b!97569 (= e!63650 (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun d!26005 () Bool)

(declare-fun res!49150 () Bool)

(declare-fun e!63649 () Bool)

(assert (=> d!26005 (=> res!49150 e!63649)))

(assert (=> d!26005 (= res!49150 (bvsge from!355 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26005 (= (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) from!355 Nil!1578) e!63649)))

(declare-fun b!97570 () Bool)

(assert (=> b!97570 (= e!63649 e!63652)))

(declare-fun res!49152 () Bool)

(assert (=> b!97570 (=> (not res!49152) (not e!63652))))

(assert (=> b!97570 (= res!49152 (not e!63650))))

(declare-fun res!49151 () Bool)

(assert (=> b!97570 (=> (not res!49151) (not e!63650))))

(assert (=> b!97570 (= res!49151 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97571 () Bool)

(assert (=> b!97571 (= e!63651 call!9868)))

(declare-fun b!97572 () Bool)

(assert (=> b!97572 (= e!63651 call!9868)))

(assert (= (and d!26005 (not res!49150)) b!97570))

(assert (= (and b!97570 res!49151) b!97569))

(assert (= (and b!97570 res!49152) b!97568))

(assert (= (and b!97568 c!16494) b!97571))

(assert (= (and b!97568 (not c!16494)) b!97572))

(assert (= (or b!97571 b!97572) bm!9865))

(assert (=> b!97568 m!106647))

(assert (=> b!97568 m!106647))

(declare-fun m!106745 () Bool)

(assert (=> b!97568 m!106745))

(assert (=> bm!9865 m!106647))

(declare-fun m!106747 () Bool)

(assert (=> bm!9865 m!106747))

(assert (=> b!97569 m!106647))

(assert (=> b!97569 m!106647))

(declare-fun m!106749 () Bool)

(assert (=> b!97569 m!106749))

(assert (=> b!97570 m!106647))

(assert (=> b!97570 m!106647))

(assert (=> b!97570 m!106745))

(assert (=> b!97481 d!26005))

(declare-fun d!26007 () Bool)

(assert (=> d!26007 (= (valid!385 thiss!992) (valid!384 (v!2800 (underlying!337 thiss!992))))))

(declare-fun bs!4033 () Bool)

(assert (= bs!4033 d!26007))

(declare-fun m!106751 () Bool)

(assert (=> bs!4033 m!106751))

(assert (=> start!11652 d!26007))

(declare-fun d!26009 () Bool)

(declare-fun res!49159 () Bool)

(declare-fun e!63655 () Bool)

(assert (=> d!26009 (=> (not res!49159) (not e!63655))))

(declare-fun simpleValid!68 (LongMapFixedSize!852) Bool)

(assert (=> d!26009 (= res!49159 (simpleValid!68 newMap!16))))

(assert (=> d!26009 (= (valid!384 newMap!16) e!63655)))

(declare-fun b!97579 () Bool)

(declare-fun res!49160 () Bool)

(assert (=> b!97579 (=> (not res!49160) (not e!63655))))

(declare-fun arrayCountValidKeys!0 (array!4241 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!97579 (= res!49160 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (_size!475 newMap!16)))))

(declare-fun b!97580 () Bool)

(declare-fun res!49161 () Bool)

(assert (=> b!97580 (=> (not res!49161) (not e!63655))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4241 (_ BitVec 32)) Bool)

(assert (=> b!97580 (= res!49161 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!97581 () Bool)

(assert (=> b!97581 (= e!63655 (arrayNoDuplicates!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 Nil!1578))))

(assert (= (and d!26009 res!49159) b!97579))

(assert (= (and b!97579 res!49160) b!97580))

(assert (= (and b!97580 res!49161) b!97581))

(declare-fun m!106753 () Bool)

(assert (=> d!26009 m!106753))

(declare-fun m!106755 () Bool)

(assert (=> b!97579 m!106755))

(declare-fun m!106757 () Bool)

(assert (=> b!97580 m!106757))

(declare-fun m!106759 () Bool)

(assert (=> b!97581 m!106759))

(assert (=> b!97471 d!26009))

(declare-fun d!26011 () Bool)

(assert (=> d!26011 (= (map!1255 newMap!16) (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun bs!4034 () Bool)

(assert (= bs!4034 d!26011))

(declare-fun m!106761 () Bool)

(assert (=> bs!4034 m!106761))

(assert (=> b!97475 d!26011))

(declare-fun b!97624 () Bool)

(declare-fun e!63686 () Bool)

(declare-fun call!9887 () Bool)

(assert (=> b!97624 (= e!63686 (not call!9887))))

(declare-fun b!97625 () Bool)

(declare-fun e!63683 () ListLongMap!1535)

(declare-fun call!9888 () ListLongMap!1535)

(assert (=> b!97625 (= e!63683 call!9888)))

(declare-fun bm!9880 () Bool)

(declare-fun lt!48916 () ListLongMap!1535)

(assert (=> bm!9880 (= call!9887 (contains!800 lt!48916 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9881 () Bool)

(declare-fun call!9886 () Bool)

(assert (=> bm!9881 (= call!9886 (contains!800 lt!48916 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97626 () Bool)

(declare-fun res!49186 () Bool)

(declare-fun e!63693 () Bool)

(assert (=> b!97626 (=> (not res!49186) (not e!63693))))

(declare-fun e!63687 () Bool)

(assert (=> b!97626 (= res!49186 e!63687)))

(declare-fun res!49188 () Bool)

(assert (=> b!97626 (=> res!49188 e!63687)))

(declare-fun e!63685 () Bool)

(assert (=> b!97626 (= res!49188 (not e!63685))))

(declare-fun res!49185 () Bool)

(assert (=> b!97626 (=> (not res!49185) (not e!63685))))

(assert (=> b!97626 (= res!49185 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!97627 () Bool)

(declare-fun res!49182 () Bool)

(assert (=> b!97627 (=> (not res!49182) (not e!63693))))

(declare-fun e!63691 () Bool)

(assert (=> b!97627 (= res!49182 e!63691)))

(declare-fun c!16509 () Bool)

(assert (=> b!97627 (= c!16509 (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!9882 () Bool)

(declare-fun call!9889 () ListLongMap!1535)

(assert (=> bm!9882 (= call!9888 call!9889)))

(declare-fun b!97628 () Bool)

(declare-fun e!63684 () ListLongMap!1535)

(assert (=> b!97628 (= e!63684 call!9888)))

(declare-fun b!97629 () Bool)

(declare-fun e!63689 () Bool)

(declare-fun apply!92 (ListLongMap!1535 (_ BitVec 64)) V!3155)

(assert (=> b!97629 (= e!63689 (= (apply!92 lt!48916 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97629 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> b!97629 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!97630 () Bool)

(declare-fun e!63694 () Bool)

(assert (=> b!97630 (= e!63694 (= (apply!92 lt!48916 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!97631 () Bool)

(declare-fun e!63682 () Unit!2937)

(declare-fun lt!48917 () Unit!2937)

(assert (=> b!97631 (= e!63682 lt!48917)))

(declare-fun lt!48900 () ListLongMap!1535)

(declare-fun getCurrentListMapNoExtraKeys!100 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) ListLongMap!1535)

(assert (=> b!97631 (= lt!48900 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun lt!48901 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48901 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48910 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48910 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48913 () Unit!2937)

(declare-fun addStillContains!68 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> b!97631 (= lt!48913 (addStillContains!68 lt!48900 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48910))))

(declare-fun +!135 (ListLongMap!1535 tuple2!2340) ListLongMap!1535)

(assert (=> b!97631 (contains!800 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48910)))

(declare-fun lt!48899 () Unit!2937)

(assert (=> b!97631 (= lt!48899 lt!48913)))

(declare-fun lt!48912 () ListLongMap!1535)

(assert (=> b!97631 (= lt!48912 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun lt!48909 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48909 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48911 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48911 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48902 () Unit!2937)

(declare-fun addApplyDifferent!68 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> b!97631 (= lt!48902 (addApplyDifferent!68 lt!48912 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48911))))

(assert (=> b!97631 (= (apply!92 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48911) (apply!92 lt!48912 lt!48911))))

(declare-fun lt!48897 () Unit!2937)

(assert (=> b!97631 (= lt!48897 lt!48902)))

(declare-fun lt!48905 () ListLongMap!1535)

(assert (=> b!97631 (= lt!48905 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun lt!48904 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48904 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48906 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48906 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48898 () Unit!2937)

(assert (=> b!97631 (= lt!48898 (addApplyDifferent!68 lt!48905 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48906))))

(assert (=> b!97631 (= (apply!92 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48906) (apply!92 lt!48905 lt!48906))))

(declare-fun lt!48914 () Unit!2937)

(assert (=> b!97631 (= lt!48914 lt!48898)))

(declare-fun lt!48908 () ListLongMap!1535)

(assert (=> b!97631 (= lt!48908 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun lt!48915 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48915 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48907 () (_ BitVec 64))

(assert (=> b!97631 (= lt!48907 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97631 (= lt!48917 (addApplyDifferent!68 lt!48908 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48907))))

(assert (=> b!97631 (= (apply!92 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48907) (apply!92 lt!48908 lt!48907))))

(declare-fun b!97632 () Bool)

(declare-fun e!63692 () ListLongMap!1535)

(assert (=> b!97632 (= e!63692 (+!135 call!9889 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!97633 () Bool)

(declare-fun call!9885 () ListLongMap!1535)

(assert (=> b!97633 (= e!63684 call!9885)))

(declare-fun b!97634 () Bool)

(declare-fun e!63688 () Bool)

(assert (=> b!97634 (= e!63688 (= (apply!92 lt!48916 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun c!16508 () Bool)

(declare-fun bm!9884 () Bool)

(declare-fun call!9883 () ListLongMap!1535)

(declare-fun call!9884 () ListLongMap!1535)

(declare-fun c!16510 () Bool)

(assert (=> bm!9884 (= call!9889 (+!135 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!97635 () Bool)

(assert (=> b!97635 (= e!63686 e!63694)))

(declare-fun res!49183 () Bool)

(assert (=> b!97635 (= res!49183 call!9887)))

(assert (=> b!97635 (=> (not res!49183) (not e!63694))))

(declare-fun b!97636 () Bool)

(declare-fun Unit!2944 () Unit!2937)

(assert (=> b!97636 (= e!63682 Unit!2944)))

(declare-fun bm!9885 () Bool)

(assert (=> bm!9885 (= call!9884 call!9883)))

(declare-fun b!97637 () Bool)

(assert (=> b!97637 (= e!63692 e!63683)))

(assert (=> b!97637 (= c!16508 (and (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97638 () Bool)

(assert (=> b!97638 (= e!63691 (not call!9886))))

(declare-fun b!97639 () Bool)

(declare-fun c!16512 () Bool)

(assert (=> b!97639 (= c!16512 (and (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97639 (= e!63683 e!63684)))

(declare-fun b!97640 () Bool)

(assert (=> b!97640 (= e!63691 e!63688)))

(declare-fun res!49187 () Bool)

(assert (=> b!97640 (= res!49187 call!9886)))

(assert (=> b!97640 (=> (not res!49187) (not e!63688))))

(declare-fun b!97641 () Bool)

(assert (=> b!97641 (= e!63693 e!63686)))

(declare-fun c!16511 () Bool)

(assert (=> b!97641 (= c!16511 (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97642 () Bool)

(assert (=> b!97642 (= e!63685 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!9883 () Bool)

(assert (=> bm!9883 (= call!9883 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun d!26013 () Bool)

(assert (=> d!26013 e!63693))

(declare-fun res!49184 () Bool)

(assert (=> d!26013 (=> (not res!49184) (not e!63693))))

(assert (=> d!26013 (= res!49184 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun lt!48903 () ListLongMap!1535)

(assert (=> d!26013 (= lt!48916 lt!48903)))

(declare-fun lt!48896 () Unit!2937)

(assert (=> d!26013 (= lt!48896 e!63682)))

(declare-fun c!16507 () Bool)

(declare-fun e!63690 () Bool)

(assert (=> d!26013 (= c!16507 e!63690)))

(declare-fun res!49181 () Bool)

(assert (=> d!26013 (=> (not res!49181) (not e!63690))))

(assert (=> d!26013 (= res!49181 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26013 (= lt!48903 e!63692)))

(assert (=> d!26013 (= c!16510 (and (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26013 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992))))))

(assert (=> d!26013 (= (getCurrentListMap!474 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) lt!48916)))

(declare-fun b!97643 () Bool)

(assert (=> b!97643 (= e!63690 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!9886 () Bool)

(assert (=> bm!9886 (= call!9885 call!9884)))

(declare-fun b!97644 () Bool)

(assert (=> b!97644 (= e!63687 e!63689)))

(declare-fun res!49180 () Bool)

(assert (=> b!97644 (=> (not res!49180) (not e!63689))))

(assert (=> b!97644 (= res!49180 (contains!800 lt!48916 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97644 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26013 c!16510) b!97632))

(assert (= (and d!26013 (not c!16510)) b!97637))

(assert (= (and b!97637 c!16508) b!97625))

(assert (= (and b!97637 (not c!16508)) b!97639))

(assert (= (and b!97639 c!16512) b!97628))

(assert (= (and b!97639 (not c!16512)) b!97633))

(assert (= (or b!97628 b!97633) bm!9886))

(assert (= (or b!97625 bm!9886) bm!9885))

(assert (= (or b!97625 b!97628) bm!9882))

(assert (= (or b!97632 bm!9885) bm!9883))

(assert (= (or b!97632 bm!9882) bm!9884))

(assert (= (and d!26013 res!49181) b!97643))

(assert (= (and d!26013 c!16507) b!97631))

(assert (= (and d!26013 (not c!16507)) b!97636))

(assert (= (and d!26013 res!49184) b!97626))

(assert (= (and b!97626 res!49185) b!97642))

(assert (= (and b!97626 (not res!49188)) b!97644))

(assert (= (and b!97644 res!49180) b!97629))

(assert (= (and b!97626 res!49186) b!97627))

(assert (= (and b!97627 c!16509) b!97640))

(assert (= (and b!97627 (not c!16509)) b!97638))

(assert (= (and b!97640 res!49187) b!97634))

(assert (= (or b!97640 b!97638) bm!9881))

(assert (= (and b!97627 res!49182) b!97641))

(assert (= (and b!97641 c!16511) b!97635))

(assert (= (and b!97641 (not c!16511)) b!97624))

(assert (= (and b!97635 res!49183) b!97630))

(assert (= (or b!97635 b!97624) bm!9880))

(declare-fun b_lambda!4343 () Bool)

(assert (=> (not b_lambda!4343) (not b!97629)))

(assert (=> b!97629 t!5531))

(declare-fun b_and!6003 () Bool)

(assert (= b_and!5991 (and (=> t!5531 result!3261) b_and!6003)))

(assert (=> b!97629 t!5533))

(declare-fun b_and!6005 () Bool)

(assert (= b_and!5993 (and (=> t!5533 result!3265) b_and!6005)))

(declare-fun m!106763 () Bool)

(assert (=> b!97630 m!106763))

(declare-fun m!106765 () Bool)

(assert (=> bm!9881 m!106765))

(assert (=> b!97644 m!106739))

(assert (=> b!97644 m!106739))

(declare-fun m!106767 () Bool)

(assert (=> b!97644 m!106767))

(assert (=> d!26013 m!106681))

(declare-fun m!106769 () Bool)

(assert (=> b!97634 m!106769))

(declare-fun m!106771 () Bool)

(assert (=> bm!9884 m!106771))

(assert (=> b!97643 m!106739))

(assert (=> b!97643 m!106739))

(declare-fun m!106773 () Bool)

(assert (=> b!97643 m!106773))

(declare-fun m!106775 () Bool)

(assert (=> b!97632 m!106775))

(assert (=> b!97642 m!106739))

(assert (=> b!97642 m!106739))

(assert (=> b!97642 m!106773))

(declare-fun m!106777 () Bool)

(assert (=> b!97629 m!106777))

(assert (=> b!97629 m!106671))

(declare-fun m!106779 () Bool)

(assert (=> b!97629 m!106779))

(assert (=> b!97629 m!106739))

(declare-fun m!106781 () Bool)

(assert (=> b!97629 m!106781))

(assert (=> b!97629 m!106739))

(assert (=> b!97629 m!106777))

(assert (=> b!97629 m!106671))

(declare-fun m!106783 () Bool)

(assert (=> b!97631 m!106783))

(declare-fun m!106785 () Bool)

(assert (=> b!97631 m!106785))

(declare-fun m!106787 () Bool)

(assert (=> b!97631 m!106787))

(declare-fun m!106789 () Bool)

(assert (=> b!97631 m!106789))

(declare-fun m!106791 () Bool)

(assert (=> b!97631 m!106791))

(declare-fun m!106793 () Bool)

(assert (=> b!97631 m!106793))

(declare-fun m!106795 () Bool)

(assert (=> b!97631 m!106795))

(declare-fun m!106797 () Bool)

(assert (=> b!97631 m!106797))

(declare-fun m!106799 () Bool)

(assert (=> b!97631 m!106799))

(assert (=> b!97631 m!106739))

(assert (=> b!97631 m!106797))

(declare-fun m!106801 () Bool)

(assert (=> b!97631 m!106801))

(assert (=> b!97631 m!106785))

(declare-fun m!106803 () Bool)

(assert (=> b!97631 m!106803))

(declare-fun m!106805 () Bool)

(assert (=> b!97631 m!106805))

(declare-fun m!106807 () Bool)

(assert (=> b!97631 m!106807))

(declare-fun m!106809 () Bool)

(assert (=> b!97631 m!106809))

(assert (=> b!97631 m!106791))

(assert (=> b!97631 m!106783))

(declare-fun m!106811 () Bool)

(assert (=> b!97631 m!106811))

(declare-fun m!106813 () Bool)

(assert (=> b!97631 m!106813))

(assert (=> bm!9883 m!106801))

(declare-fun m!106815 () Bool)

(assert (=> bm!9880 m!106815))

(assert (=> b!97475 d!26013))

(declare-fun d!26015 () Bool)

(assert (=> d!26015 (= (array_inv!1255 (_keys!4171 newMap!16)) (bvsge (size!2265 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97470 d!26015))

(declare-fun d!26017 () Bool)

(assert (=> d!26017 (= (array_inv!1256 (_values!2464 newMap!16)) (bvsge (size!2266 (_values!2464 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97470 d!26017))

(declare-fun d!26019 () Bool)

(assert (=> d!26019 (= (array_inv!1255 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvsge (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97466 d!26019))

(declare-fun d!26021 () Bool)

(assert (=> d!26021 (= (array_inv!1256 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvsge (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97466 d!26021))

(declare-fun d!26023 () Bool)

(declare-fun e!63699 () Bool)

(assert (=> d!26023 e!63699))

(declare-fun res!49191 () Bool)

(assert (=> d!26023 (=> res!49191 e!63699)))

(declare-fun lt!48927 () Bool)

(assert (=> d!26023 (= res!49191 (not lt!48927))))

(declare-fun lt!48929 () Bool)

(assert (=> d!26023 (= lt!48927 lt!48929)))

(declare-fun lt!48926 () Unit!2937)

(declare-fun e!63700 () Unit!2937)

(assert (=> d!26023 (= lt!48926 e!63700)))

(declare-fun c!16515 () Bool)

(assert (=> d!26023 (= c!16515 lt!48929)))

(declare-fun containsKey!154 (List!1580 (_ BitVec 64)) Bool)

(assert (=> d!26023 (= lt!48929 (containsKey!154 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26023 (= (contains!800 lt!48820 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!48927)))

(declare-fun b!97651 () Bool)

(declare-fun lt!48928 () Unit!2937)

(assert (=> b!97651 (= e!63700 lt!48928)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!102 (List!1580 (_ BitVec 64)) Unit!2937)

(assert (=> b!97651 (= lt!48928 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-datatypes ((Option!156 0))(
  ( (Some!155 (v!2804 V!3155)) (None!154) )
))
(declare-fun isDefined!103 (Option!156) Bool)

(declare-fun getValueByKey!150 (List!1580 (_ BitVec 64)) Option!156)

(assert (=> b!97651 (isDefined!103 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97652 () Bool)

(declare-fun Unit!2945 () Unit!2937)

(assert (=> b!97652 (= e!63700 Unit!2945)))

(declare-fun b!97653 () Bool)

(assert (=> b!97653 (= e!63699 (isDefined!103 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (= (and d!26023 c!16515) b!97651))

(assert (= (and d!26023 (not c!16515)) b!97652))

(assert (= (and d!26023 (not res!49191)) b!97653))

(assert (=> d!26023 m!106647))

(declare-fun m!106817 () Bool)

(assert (=> d!26023 m!106817))

(assert (=> b!97651 m!106647))

(declare-fun m!106819 () Bool)

(assert (=> b!97651 m!106819))

(assert (=> b!97651 m!106647))

(declare-fun m!106821 () Bool)

(assert (=> b!97651 m!106821))

(assert (=> b!97651 m!106821))

(declare-fun m!106823 () Bool)

(assert (=> b!97651 m!106823))

(assert (=> b!97653 m!106647))

(assert (=> b!97653 m!106821))

(assert (=> b!97653 m!106821))

(assert (=> b!97653 m!106823))

(assert (=> b!97469 d!26023))

(declare-fun b!97734 () Bool)

(declare-fun e!63755 () Bool)

(declare-fun call!9957 () Bool)

(assert (=> b!97734 (= e!63755 (not call!9957))))

(declare-fun b!97735 () Bool)

(declare-fun e!63747 () tuple2!2338)

(declare-fun e!63754 () tuple2!2338)

(assert (=> b!97735 (= e!63747 e!63754)))

(declare-fun c!16553 () Bool)

(assert (=> b!97735 (= c!16553 (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9935 () Bool)

(declare-fun call!9938 () ListLongMap!1535)

(assert (=> bm!9935 (= call!9938 (map!1255 newMap!16))))

(declare-datatypes ((SeekEntryResult!253 0))(
  ( (MissingZero!253 (index!3155 (_ BitVec 32))) (Found!253 (index!3156 (_ BitVec 32))) (Intermediate!253 (undefined!1065 Bool) (index!3157 (_ BitVec 32)) (x!12959 (_ BitVec 32))) (Undefined!253) (MissingVacant!253 (index!3158 (_ BitVec 32))) )
))
(declare-fun lt!49003 () SeekEntryResult!253)

(declare-fun lt!49002 () SeekEntryResult!253)

(declare-fun bm!9936 () Bool)

(declare-fun c!16544 () Bool)

(declare-fun c!16548 () Bool)

(declare-fun lt!49009 () SeekEntryResult!253)

(declare-fun c!16550 () Bool)

(declare-fun c!16547 () Bool)

(declare-fun call!9945 () Bool)

(declare-fun lt!48994 () SeekEntryResult!253)

(declare-fun c!16545 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9936 (= call!9945 (inRange!0 (ite c!16544 (ite c!16547 (index!3156 lt!49003) (ite c!16550 (index!3155 lt!48994) (index!3158 lt!48994))) (ite c!16548 (index!3156 lt!49002) (ite c!16545 (index!3155 lt!49009) (index!3158 lt!49009)))) (mask!6578 newMap!16)))))

(declare-fun bm!9937 () Bool)

(declare-fun call!9952 () Bool)

(assert (=> bm!9937 (= call!9952 call!9945)))

(declare-fun b!97736 () Bool)

(declare-fun lt!48999 () Unit!2937)

(declare-fun lt!48996 () Unit!2937)

(assert (=> b!97736 (= lt!48999 lt!48996)))

(declare-fun call!9956 () ListLongMap!1535)

(declare-fun call!9959 () ListLongMap!1535)

(assert (=> b!97736 (= call!9956 call!9959)))

(declare-fun lt!49006 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2937)

(assert (=> b!97736 (= lt!48996 (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97736 (= lt!49006 (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!97736 (= e!63754 (tuple2!2339 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!475 newMap!16) (_keys!4171 newMap!16) (_values!2464 newMap!16) (_vacant!475 newMap!16))))))

(declare-fun bm!9938 () Bool)

(declare-fun call!9947 () SeekEntryResult!253)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4241 (_ BitVec 32)) SeekEntryResult!253)

(assert (=> bm!9938 (= call!9947 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!97737 () Bool)

(declare-fun e!63746 () Bool)

(declare-fun e!63762 () Bool)

(assert (=> b!97737 (= e!63746 e!63762)))

(declare-fun c!16549 () Bool)

(declare-fun lt!48997 () tuple2!2338)

(assert (=> b!97737 (= c!16549 (_1!1180 lt!48997))))

(declare-fun b!97738 () Bool)

(declare-fun lt!48988 () tuple2!2338)

(declare-fun call!9958 () tuple2!2338)

(assert (=> b!97738 (= lt!48988 call!9958)))

(declare-fun e!63753 () tuple2!2338)

(assert (=> b!97738 (= e!63753 (tuple2!2339 (_1!1180 lt!48988) (_2!1180 lt!48988)))))

(declare-fun bm!9939 () Bool)

(declare-fun call!9942 () Unit!2937)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2937)

(assert (=> bm!9939 (= call!9942 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(declare-fun call!9955 () Bool)

(declare-fun bm!9940 () Bool)

(assert (=> bm!9940 (= call!9955 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97739 () Bool)

(declare-fun res!49225 () Bool)

(declare-fun e!63758 () Bool)

(assert (=> b!97739 (=> (not res!49225) (not e!63758))))

(assert (=> b!97739 (= res!49225 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!48994)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9941 () Bool)

(declare-fun call!9939 () Bool)

(assert (=> bm!9941 (= call!9939 call!9955)))

(declare-fun call!9953 () Unit!2937)

(declare-fun bm!9942 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2937)

(assert (=> bm!9942 (= call!9953 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(declare-fun b!97740 () Bool)

(declare-fun e!63751 () Unit!2937)

(declare-fun Unit!2946 () Unit!2937)

(assert (=> b!97740 (= e!63751 Unit!2946)))

(declare-fun lt!48984 () Unit!2937)

(assert (=> b!97740 (= lt!48984 call!9953)))

(declare-fun call!9951 () SeekEntryResult!253)

(assert (=> b!97740 (= lt!49003 call!9951)))

(declare-fun res!49230 () Bool)

(assert (=> b!97740 (= res!49230 ((_ is Found!253) lt!49003))))

(declare-fun e!63744 () Bool)

(assert (=> b!97740 (=> (not res!49230) (not e!63744))))

(assert (=> b!97740 e!63744))

(declare-fun lt!49008 () Unit!2937)

(assert (=> b!97740 (= lt!49008 lt!48984)))

(assert (=> b!97740 false))

(declare-fun d!26025 () Bool)

(assert (=> d!26025 e!63746))

(declare-fun res!49227 () Bool)

(assert (=> d!26025 (=> (not res!49227) (not e!63746))))

(assert (=> d!26025 (= res!49227 (valid!384 (_2!1180 lt!48997)))))

(assert (=> d!26025 (= lt!48997 e!63747)))

(declare-fun c!16552 () Bool)

(assert (=> d!26025 (= c!16552 (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvneg (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26025 (valid!384 newMap!16)))

(assert (=> d!26025 (= (update!140 newMap!16 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!48997)))

(declare-fun bm!9943 () Bool)

(declare-fun call!9941 () ListLongMap!1535)

(assert (=> bm!9943 (= call!9956 call!9941)))

(declare-fun bm!9944 () Bool)

(declare-fun call!9943 () ListLongMap!1535)

(declare-fun call!9944 () ListLongMap!1535)

(assert (=> bm!9944 (= call!9943 call!9944)))

(declare-fun b!97741 () Bool)

(declare-fun c!16546 () Bool)

(assert (=> b!97741 (= c!16546 ((_ is MissingVacant!253) lt!49009))))

(declare-fun e!63760 () Bool)

(declare-fun e!63756 () Bool)

(assert (=> b!97741 (= e!63760 e!63756)))

(declare-fun bm!9945 () Bool)

(declare-fun call!9950 () SeekEntryResult!253)

(assert (=> bm!9945 (= call!9950 call!9947)))

(declare-fun b!97742 () Bool)

(declare-fun res!49224 () Bool)

(assert (=> b!97742 (=> (not res!49224) (not e!63755))))

(assert (=> b!97742 (= res!49224 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49009)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97743 () Bool)

(assert (=> b!97743 (= e!63758 (not call!9939))))

(declare-fun b!97744 () Bool)

(declare-fun e!63743 () Unit!2937)

(declare-fun lt!49010 () Unit!2937)

(assert (=> b!97744 (= e!63743 lt!49010)))

(assert (=> b!97744 (= lt!49010 call!9953)))

(assert (=> b!97744 (= lt!49002 call!9950)))

(declare-fun res!49223 () Bool)

(assert (=> b!97744 (= res!49223 ((_ is Found!253) lt!49002))))

(declare-fun e!63745 () Bool)

(assert (=> b!97744 (=> (not res!49223) (not e!63745))))

(assert (=> b!97744 e!63745))

(declare-fun bm!9946 () Bool)

(assert (=> bm!9946 (= call!9957 call!9955)))

(declare-fun b!97745 () Bool)

(declare-fun e!63752 () tuple2!2338)

(assert (=> b!97745 (= e!63752 e!63753)))

(declare-fun c!16543 () Bool)

(declare-fun lt!48986 () SeekEntryResult!253)

(assert (=> b!97745 (= c!16543 ((_ is MissingZero!253) lt!48986))))

(declare-fun bm!9947 () Bool)

(declare-fun call!9946 () ListLongMap!1535)

(assert (=> bm!9947 (= call!9959 call!9946)))

(declare-fun call!9940 () Bool)

(declare-fun call!9949 () ListLongMap!1535)

(declare-fun bm!9948 () Bool)

(assert (=> bm!9948 (= call!9940 (contains!800 call!9949 (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(declare-fun b!97746 () Bool)

(declare-fun e!63763 () ListLongMap!1535)

(assert (=> b!97746 (= e!63763 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97747 () Bool)

(declare-fun e!63750 () Bool)

(declare-fun e!63749 () Bool)

(assert (=> b!97747 (= e!63750 e!63749)))

(declare-fun res!49221 () Bool)

(declare-fun call!9948 () Bool)

(assert (=> b!97747 (= res!49221 call!9948)))

(assert (=> b!97747 (=> (not res!49221) (not e!63749))))

(declare-fun b!97748 () Bool)

(assert (=> b!97748 (= e!63750 ((_ is Undefined!253) lt!48994))))

(declare-fun b!97749 () Bool)

(declare-fun res!49232 () Bool)

(assert (=> b!97749 (=> (not res!49232) (not e!63755))))

(declare-fun call!9961 () Bool)

(assert (=> b!97749 (= res!49232 call!9961)))

(assert (=> b!97749 (= e!63760 e!63755)))

(declare-fun b!97750 () Bool)

(declare-fun lt!48992 () Unit!2937)

(declare-fun lt!48991 () Unit!2937)

(assert (=> b!97750 (= lt!48992 lt!48991)))

(assert (=> b!97750 call!9940))

(declare-fun lt!49004 () array!4243)

(declare-fun lemmaValidKeyInArrayIsInListMap!102 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) Unit!2937)

(assert (=> b!97750 (= lt!48991 (lemmaValidKeyInArrayIsInListMap!102 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97750 (= lt!49004 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))))

(declare-fun lt!49005 () Unit!2937)

(declare-fun lt!48989 () Unit!2937)

(assert (=> b!97750 (= lt!49005 lt!48989)))

(assert (=> b!97750 (= call!9941 call!9946)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2937)

(assert (=> b!97750 (= lt!48989 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(declare-fun lt!48998 () Unit!2937)

(assert (=> b!97750 (= lt!48998 e!63743)))

(assert (=> b!97750 (= c!16548 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!97750 (= e!63753 (tuple2!2339 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (_size!475 newMap!16) (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (_vacant!475 newMap!16))))))

(declare-fun b!97751 () Bool)

(declare-fun res!49231 () Bool)

(assert (=> b!97751 (=> (not res!49231) (not e!63758))))

(assert (=> b!97751 (= res!49231 call!9948)))

(declare-fun e!63757 () Bool)

(assert (=> b!97751 (= e!63757 e!63758)))

(declare-fun b!97752 () Bool)

(assert (=> b!97752 (= e!63744 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49003)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97753 () Bool)

(assert (=> b!97753 (= e!63745 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49002)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97754 () Bool)

(declare-fun lt!48995 () tuple2!2338)

(assert (=> b!97754 (= e!63752 (tuple2!2339 (_1!1180 lt!48995) (_2!1180 lt!48995)))))

(assert (=> b!97754 (= lt!48995 call!9958)))

(declare-fun b!97755 () Bool)

(declare-fun lt!49001 () Unit!2937)

(assert (=> b!97755 (= lt!49001 e!63751)))

(assert (=> b!97755 (= c!16547 call!9940)))

(declare-fun e!63761 () tuple2!2338)

(assert (=> b!97755 (= e!63761 (tuple2!2339 false newMap!16))))

(declare-fun b!97756 () Bool)

(assert (=> b!97756 (= e!63756 ((_ is Undefined!253) lt!49009))))

(declare-fun bm!9949 () Bool)

(assert (=> bm!9949 (= call!9951 call!9947)))

(declare-fun bm!9950 () Bool)

(assert (=> bm!9950 (= call!9949 call!9944)))

(declare-fun bm!9951 () Bool)

(declare-fun call!9954 () ListLongMap!1535)

(assert (=> bm!9951 (= call!9954 (map!1255 (_2!1180 lt!48997)))))

(declare-fun b!97757 () Bool)

(declare-fun res!49222 () Bool)

(assert (=> b!97757 (= res!49222 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49009)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63759 () Bool)

(assert (=> b!97757 (=> (not res!49222) (not e!63759))))

(declare-fun bm!9952 () Bool)

(declare-fun call!9960 () Bool)

(assert (=> bm!9952 (= call!9960 call!9945)))

(declare-fun b!97758 () Bool)

(declare-fun e!63748 () Bool)

(assert (=> b!97758 (= e!63762 e!63748)))

(declare-fun res!49233 () Bool)

(assert (=> b!97758 (= res!49233 (contains!800 call!9954 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!97758 (=> (not res!49233) (not e!63748))))

(declare-fun b!97759 () Bool)

(assert (=> b!97759 (= e!63749 (not call!9939))))

(declare-fun b!97760 () Bool)

(declare-fun Unit!2947 () Unit!2937)

(assert (=> b!97760 (= e!63743 Unit!2947)))

(declare-fun lt!48987 () Unit!2937)

(assert (=> b!97760 (= lt!48987 call!9942)))

(assert (=> b!97760 (= lt!49009 call!9950)))

(assert (=> b!97760 (= c!16545 ((_ is MissingZero!253) lt!49009))))

(assert (=> b!97760 e!63760))

(declare-fun lt!49000 () Unit!2937)

(assert (=> b!97760 (= lt!49000 lt!48987)))

(assert (=> b!97760 false))

(declare-fun b!97761 () Bool)

(declare-fun res!49229 () Bool)

(assert (=> b!97761 (= res!49229 call!9960)))

(assert (=> b!97761 (=> (not res!49229) (not e!63745))))

(declare-fun b!97762 () Bool)

(declare-fun lt!48985 () Unit!2937)

(assert (=> b!97762 (= e!63751 lt!48985)))

(assert (=> b!97762 (= lt!48985 call!9942)))

(assert (=> b!97762 (= lt!48994 call!9951)))

(assert (=> b!97762 (= c!16550 ((_ is MissingZero!253) lt!48994))))

(assert (=> b!97762 e!63757))

(declare-fun b!97763 () Bool)

(assert (=> b!97763 (= e!63759 (not call!9957))))

(declare-fun b!97764 () Bool)

(declare-fun res!49228 () Bool)

(assert (=> b!97764 (= res!49228 call!9952)))

(assert (=> b!97764 (=> (not res!49228) (not e!63744))))

(declare-fun b!97765 () Bool)

(assert (=> b!97765 (= e!63763 call!9943)))

(declare-fun b!97766 () Bool)

(assert (=> b!97766 (= e!63748 (= call!9954 (+!135 call!9938 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!9953 () Bool)

(assert (=> bm!9953 (= call!9944 (getCurrentListMap!474 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun c!16554 () Bool)

(declare-fun bm!9954 () Bool)

(declare-fun updateHelperNewKey!41 (LongMapFixedSize!852 (_ BitVec 64) V!3155 (_ BitVec 32)) tuple2!2338)

(assert (=> bm!9954 (= call!9958 (updateHelperNewKey!41 newMap!16 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(declare-fun b!97767 () Bool)

(declare-fun res!49220 () Bool)

(assert (=> b!97767 (= res!49220 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!48994)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97767 (=> (not res!49220) (not e!63749))))

(declare-fun b!97768 () Bool)

(declare-fun c!16542 () Bool)

(assert (=> b!97768 (= c!16542 ((_ is MissingVacant!253) lt!48994))))

(assert (=> b!97768 (= e!63757 e!63750)))

(declare-fun bm!9955 () Bool)

(assert (=> bm!9955 (= call!9961 call!9960)))

(declare-fun b!97769 () Bool)

(declare-fun lt!49007 () Unit!2937)

(declare-fun lt!48993 () Unit!2937)

(assert (=> b!97769 (= lt!49007 lt!48993)))

(assert (=> b!97769 (= call!9956 call!9959)))

(declare-fun lt!48990 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!41 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2937)

(assert (=> b!97769 (= lt!48993 (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48990 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97769 (= lt!48990 (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!97769 (= e!63754 (tuple2!2339 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (_size!475 newMap!16) (_keys!4171 newMap!16) (_values!2464 newMap!16) (_vacant!475 newMap!16))))))

(declare-fun bm!9956 () Bool)

(assert (=> bm!9956 (= call!9941 (+!135 e!63763 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16551 () Bool)

(assert (=> bm!9956 (= c!16551 c!16552)))

(declare-fun b!97770 () Bool)

(assert (=> b!97770 (= e!63762 (= call!9954 call!9938))))

(declare-fun b!97771 () Bool)

(assert (=> b!97771 (= e!63747 e!63761)))

(assert (=> b!97771 (= lt!48986 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> b!97771 (= c!16544 ((_ is Undefined!253) lt!48986))))

(declare-fun b!97772 () Bool)

(assert (=> b!97772 (= e!63756 e!63759)))

(declare-fun res!49226 () Bool)

(assert (=> b!97772 (= res!49226 call!9961)))

(assert (=> b!97772 (=> (not res!49226) (not e!63759))))

(declare-fun b!97773 () Bool)

(assert (=> b!97773 (= c!16554 ((_ is MissingVacant!253) lt!48986))))

(assert (=> b!97773 (= e!63761 e!63752)))

(declare-fun bm!9957 () Bool)

(assert (=> bm!9957 (= call!9946 (getCurrentListMap!474 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun bm!9958 () Bool)

(assert (=> bm!9958 (= call!9948 call!9952)))

(assert (= (and d!26025 c!16552) b!97735))

(assert (= (and d!26025 (not c!16552)) b!97771))

(assert (= (and b!97735 c!16553) b!97769))

(assert (= (and b!97735 (not c!16553)) b!97736))

(assert (= (or b!97769 b!97736) bm!9947))

(assert (= (or b!97769 b!97736) bm!9944))

(assert (= (or b!97769 b!97736) bm!9943))

(assert (= (and b!97771 c!16544) b!97755))

(assert (= (and b!97771 (not c!16544)) b!97773))

(assert (= (and b!97755 c!16547) b!97740))

(assert (= (and b!97755 (not c!16547)) b!97762))

(assert (= (and b!97740 res!49230) b!97764))

(assert (= (and b!97764 res!49228) b!97752))

(assert (= (and b!97762 c!16550) b!97751))

(assert (= (and b!97762 (not c!16550)) b!97768))

(assert (= (and b!97751 res!49231) b!97739))

(assert (= (and b!97739 res!49225) b!97743))

(assert (= (and b!97768 c!16542) b!97747))

(assert (= (and b!97768 (not c!16542)) b!97748))

(assert (= (and b!97747 res!49221) b!97767))

(assert (= (and b!97767 res!49220) b!97759))

(assert (= (or b!97751 b!97747) bm!9958))

(assert (= (or b!97743 b!97759) bm!9941))

(assert (= (or b!97764 bm!9958) bm!9937))

(assert (= (or b!97740 b!97762) bm!9949))

(assert (= (and b!97773 c!16554) b!97754))

(assert (= (and b!97773 (not c!16554)) b!97745))

(assert (= (and b!97745 c!16543) b!97738))

(assert (= (and b!97745 (not c!16543)) b!97750))

(assert (= (and b!97750 c!16548) b!97744))

(assert (= (and b!97750 (not c!16548)) b!97760))

(assert (= (and b!97744 res!49223) b!97761))

(assert (= (and b!97761 res!49229) b!97753))

(assert (= (and b!97760 c!16545) b!97749))

(assert (= (and b!97760 (not c!16545)) b!97741))

(assert (= (and b!97749 res!49232) b!97742))

(assert (= (and b!97742 res!49224) b!97734))

(assert (= (and b!97741 c!16546) b!97772))

(assert (= (and b!97741 (not c!16546)) b!97756))

(assert (= (and b!97772 res!49226) b!97757))

(assert (= (and b!97757 res!49222) b!97763))

(assert (= (or b!97749 b!97772) bm!9955))

(assert (= (or b!97734 b!97763) bm!9946))

(assert (= (or b!97761 bm!9955) bm!9952))

(assert (= (or b!97744 b!97760) bm!9945))

(assert (= (or b!97754 b!97738) bm!9954))

(assert (= (or b!97755 b!97750) bm!9950))

(assert (= (or bm!9949 bm!9945) bm!9938))

(assert (= (or bm!9937 bm!9952) bm!9936))

(assert (= (or b!97740 b!97744) bm!9942))

(assert (= (or bm!9941 bm!9946) bm!9940))

(assert (= (or b!97762 b!97760) bm!9939))

(assert (= (or b!97755 b!97750) bm!9948))

(assert (= (or bm!9947 b!97750) bm!9957))

(assert (= (or bm!9944 bm!9950) bm!9953))

(assert (= (or bm!9943 b!97750) bm!9956))

(assert (= (and bm!9956 c!16551) b!97765))

(assert (= (and bm!9956 (not c!16551)) b!97746))

(assert (= (and d!26025 res!49227) b!97737))

(assert (= (and b!97737 c!16549) b!97758))

(assert (= (and b!97737 (not c!16549)) b!97770))

(assert (= (and b!97758 res!49233) b!97766))

(assert (= (or b!97758 b!97766 b!97770) bm!9951))

(assert (= (or b!97766 b!97770) bm!9935))

(declare-fun m!106825 () Bool)

(assert (=> b!97757 m!106825))

(declare-fun m!106827 () Bool)

(assert (=> b!97753 m!106827))

(assert (=> b!97746 m!106761))

(assert (=> bm!9940 m!106647))

(declare-fun m!106829 () Bool)

(assert (=> bm!9940 m!106829))

(assert (=> bm!9935 m!106649))

(declare-fun m!106831 () Bool)

(assert (=> b!97739 m!106831))

(assert (=> b!97736 m!106673))

(declare-fun m!106833 () Bool)

(assert (=> b!97736 m!106833))

(assert (=> b!97771 m!106647))

(declare-fun m!106835 () Bool)

(assert (=> b!97771 m!106835))

(assert (=> b!97750 m!106761))

(assert (=> b!97750 m!106647))

(assert (=> b!97750 m!106673))

(declare-fun m!106837 () Bool)

(assert (=> b!97750 m!106837))

(declare-fun m!106839 () Bool)

(assert (=> b!97750 m!106839))

(assert (=> b!97750 m!106761))

(assert (=> b!97750 m!106647))

(declare-fun m!106841 () Bool)

(assert (=> b!97750 m!106841))

(declare-fun m!106843 () Bool)

(assert (=> b!97750 m!106843))

(assert (=> bm!9942 m!106647))

(declare-fun m!106845 () Bool)

(assert (=> bm!9942 m!106845))

(assert (=> b!97758 m!106647))

(declare-fun m!106847 () Bool)

(assert (=> b!97758 m!106847))

(declare-fun m!106849 () Bool)

(assert (=> b!97752 m!106849))

(assert (=> b!97769 m!106673))

(declare-fun m!106851 () Bool)

(assert (=> b!97769 m!106851))

(assert (=> bm!9938 m!106647))

(assert (=> bm!9938 m!106835))

(declare-fun m!106853 () Bool)

(assert (=> b!97742 m!106853))

(declare-fun m!106855 () Bool)

(assert (=> b!97766 m!106855))

(assert (=> bm!9939 m!106647))

(declare-fun m!106857 () Bool)

(assert (=> bm!9939 m!106857))

(assert (=> bm!9957 m!106839))

(declare-fun m!106859 () Bool)

(assert (=> bm!9957 m!106859))

(declare-fun m!106861 () Bool)

(assert (=> bm!9948 m!106861))

(declare-fun m!106863 () Bool)

(assert (=> bm!9948 m!106863))

(declare-fun m!106865 () Bool)

(assert (=> b!97767 m!106865))

(declare-fun m!106867 () Bool)

(assert (=> d!26025 m!106867))

(assert (=> d!26025 m!106665))

(assert (=> bm!9954 m!106647))

(assert (=> bm!9954 m!106673))

(declare-fun m!106869 () Bool)

(assert (=> bm!9954 m!106869))

(declare-fun m!106871 () Bool)

(assert (=> bm!9936 m!106871))

(declare-fun m!106873 () Bool)

(assert (=> bm!9953 m!106873))

(declare-fun m!106875 () Bool)

(assert (=> bm!9951 m!106875))

(declare-fun m!106877 () Bool)

(assert (=> bm!9956 m!106877))

(assert (=> b!97469 d!26025))

(declare-fun d!26027 () Bool)

(declare-fun c!16557 () Bool)

(assert (=> d!26027 (= c!16557 ((_ is ValueCellFull!972) (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun e!63766 () V!3155)

(assert (=> d!26027 (= (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63766)))

(declare-fun b!97778 () Bool)

(declare-fun get!1282 (ValueCell!972 V!3155) V!3155)

(assert (=> b!97778 (= e!63766 (get!1282 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97779 () Bool)

(declare-fun get!1283 (ValueCell!972 V!3155) V!3155)

(assert (=> b!97779 (= e!63766 (get!1283 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26027 c!16557) b!97778))

(assert (= (and d!26027 (not c!16557)) b!97779))

(assert (=> b!97778 m!106669))

(assert (=> b!97778 m!106671))

(declare-fun m!106879 () Bool)

(assert (=> b!97778 m!106879))

(assert (=> b!97779 m!106669))

(assert (=> b!97779 m!106671))

(declare-fun m!106881 () Bool)

(assert (=> b!97779 m!106881))

(assert (=> b!97469 d!26027))

(declare-fun d!26029 () Bool)

(assert (=> d!26029 (= (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992)))) (and (or (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000001111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000011111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000001111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000011111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000001111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000011111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000001111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000011111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000001111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000011111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000001111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000011111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000001111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000011111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000001111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000011111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000111111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00001111111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00011111111111111111111111111111) (= (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!97477 d!26029))

(declare-fun b!97786 () Bool)

(declare-fun e!63772 () Bool)

(assert (=> b!97786 (= e!63772 tp_is_empty!2631)))

(declare-fun condMapEmpty!3755 () Bool)

(declare-fun mapDefault!3755 () ValueCell!972)

(assert (=> mapNonEmpty!3746 (= condMapEmpty!3755 (= mapRest!3746 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3755)))))

(declare-fun e!63771 () Bool)

(declare-fun mapRes!3755 () Bool)

(assert (=> mapNonEmpty!3746 (= tp!9572 (and e!63771 mapRes!3755))))

(declare-fun mapIsEmpty!3755 () Bool)

(assert (=> mapIsEmpty!3755 mapRes!3755))

(declare-fun mapNonEmpty!3755 () Bool)

(declare-fun tp!9587 () Bool)

(assert (=> mapNonEmpty!3755 (= mapRes!3755 (and tp!9587 e!63772))))

(declare-fun mapKey!3755 () (_ BitVec 32))

(declare-fun mapValue!3755 () ValueCell!972)

(declare-fun mapRest!3755 () (Array (_ BitVec 32) ValueCell!972))

(assert (=> mapNonEmpty!3755 (= mapRest!3746 (store mapRest!3755 mapKey!3755 mapValue!3755))))

(declare-fun b!97787 () Bool)

(assert (=> b!97787 (= e!63771 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3746 condMapEmpty!3755) mapIsEmpty!3755))

(assert (= (and mapNonEmpty!3746 (not condMapEmpty!3755)) mapNonEmpty!3755))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!972) mapValue!3755)) b!97786))

(assert (= (and mapNonEmpty!3746 ((_ is ValueCellFull!972) mapDefault!3755)) b!97787))

(declare-fun m!106883 () Bool)

(assert (=> mapNonEmpty!3755 m!106883))

(declare-fun b!97788 () Bool)

(declare-fun e!63774 () Bool)

(assert (=> b!97788 (= e!63774 tp_is_empty!2631)))

(declare-fun condMapEmpty!3756 () Bool)

(declare-fun mapDefault!3756 () ValueCell!972)

(assert (=> mapNonEmpty!3745 (= condMapEmpty!3756 (= mapRest!3745 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3756)))))

(declare-fun e!63773 () Bool)

(declare-fun mapRes!3756 () Bool)

(assert (=> mapNonEmpty!3745 (= tp!9569 (and e!63773 mapRes!3756))))

(declare-fun mapIsEmpty!3756 () Bool)

(assert (=> mapIsEmpty!3756 mapRes!3756))

(declare-fun mapNonEmpty!3756 () Bool)

(declare-fun tp!9588 () Bool)

(assert (=> mapNonEmpty!3756 (= mapRes!3756 (and tp!9588 e!63774))))

(declare-fun mapValue!3756 () ValueCell!972)

(declare-fun mapKey!3756 () (_ BitVec 32))

(declare-fun mapRest!3756 () (Array (_ BitVec 32) ValueCell!972))

(assert (=> mapNonEmpty!3756 (= mapRest!3745 (store mapRest!3756 mapKey!3756 mapValue!3756))))

(declare-fun b!97789 () Bool)

(assert (=> b!97789 (= e!63773 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3745 condMapEmpty!3756) mapIsEmpty!3756))

(assert (= (and mapNonEmpty!3745 (not condMapEmpty!3756)) mapNonEmpty!3756))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!972) mapValue!3756)) b!97788))

(assert (= (and mapNonEmpty!3745 ((_ is ValueCellFull!972) mapDefault!3756)) b!97789))

(declare-fun m!106885 () Bool)

(assert (=> mapNonEmpty!3756 m!106885))

(declare-fun b_lambda!4345 () Bool)

(assert (= b_lambda!4343 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4345)))

(check-sat (not bm!9865) (not bm!9954) (not b!97581) (not b!97758) (not bm!9939) (not bm!9956) (not b!97630) (not b!97570) (not bm!9948) (not bm!9936) (not b!97771) (not b!97551) tp_is_empty!2631 (not d!26025) (not b!97746) (not b!97644) (not bm!9953) (not bm!9957) (not d!26003) (not d!25997) (not d!26007) (not b!97634) (not b!97736) (not b!97651) (not b_lambda!4341) (not bm!9940) (not d!25999) (not b!97769) (not b_lambda!4345) (not bm!9880) (not b!97779) (not b!97653) (not b_next!2431) (not b!97643) (not bm!9884) (not bm!9935) (not b!97632) (not mapNonEmpty!3756) (not b!97766) (not b!97629) (not b!97642) (not bm!9883) (not bm!9938) (not b!97778) (not b!97556) (not mapNonEmpty!3755) (not b!97631) (not d!26023) (not b!97580) (not d!26011) (not bm!9942) (not b!97750) (not b_next!2429) b_and!6005 (not b!97569) (not b!97579) (not d!26009) (not b!97568) (not bm!9881) b_and!6003 (not d!26013) (not bm!9951))
(check-sat b_and!6003 b_and!6005 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun d!26031 () Bool)

(assert (=> d!26031 (= (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97642 d!26031))

(declare-fun b!97790 () Bool)

(declare-fun e!63779 () Bool)

(declare-fun call!9966 () Bool)

(assert (=> b!97790 (= e!63779 (not call!9966))))

(declare-fun b!97791 () Bool)

(declare-fun e!63776 () ListLongMap!1535)

(declare-fun call!9967 () ListLongMap!1535)

(assert (=> b!97791 (= e!63776 call!9967)))

(declare-fun bm!9959 () Bool)

(declare-fun lt!49031 () ListLongMap!1535)

(assert (=> bm!9959 (= call!9966 (contains!800 lt!49031 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9960 () Bool)

(declare-fun call!9965 () Bool)

(assert (=> bm!9960 (= call!9965 (contains!800 lt!49031 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97792 () Bool)

(declare-fun res!49240 () Bool)

(declare-fun e!63786 () Bool)

(assert (=> b!97792 (=> (not res!49240) (not e!63786))))

(declare-fun e!63780 () Bool)

(assert (=> b!97792 (= res!49240 e!63780)))

(declare-fun res!49242 () Bool)

(assert (=> b!97792 (=> res!49242 e!63780)))

(declare-fun e!63778 () Bool)

(assert (=> b!97792 (= res!49242 (not e!63778))))

(declare-fun res!49239 () Bool)

(assert (=> b!97792 (=> (not res!49239) (not e!63778))))

(assert (=> b!97792 (= res!49239 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97793 () Bool)

(declare-fun res!49236 () Bool)

(assert (=> b!97793 (=> (not res!49236) (not e!63786))))

(declare-fun e!63784 () Bool)

(assert (=> b!97793 (= res!49236 e!63784)))

(declare-fun c!16560 () Bool)

(assert (=> b!97793 (= c!16560 (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!9961 () Bool)

(declare-fun call!9968 () ListLongMap!1535)

(assert (=> bm!9961 (= call!9967 call!9968)))

(declare-fun b!97794 () Bool)

(declare-fun e!63777 () ListLongMap!1535)

(assert (=> b!97794 (= e!63777 call!9967)))

(declare-fun b!97795 () Bool)

(declare-fun e!63782 () Bool)

(assert (=> b!97795 (= e!63782 (= (apply!92 lt!49031 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97795 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))))))))

(assert (=> b!97795 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97796 () Bool)

(declare-fun e!63787 () Bool)

(assert (=> b!97796 (= e!63787 (= (apply!92 lt!49031 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))

(declare-fun b!97797 () Bool)

(declare-fun e!63775 () Unit!2937)

(declare-fun lt!49032 () Unit!2937)

(assert (=> b!97797 (= e!63775 lt!49032)))

(declare-fun lt!49015 () ListLongMap!1535)

(assert (=> b!97797 (= lt!49015 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49016 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49016 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49025 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49025 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49028 () Unit!2937)

(assert (=> b!97797 (= lt!49028 (addStillContains!68 lt!49015 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49025))))

(assert (=> b!97797 (contains!800 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49025)))

(declare-fun lt!49014 () Unit!2937)

(assert (=> b!97797 (= lt!49014 lt!49028)))

(declare-fun lt!49027 () ListLongMap!1535)

(assert (=> b!97797 (= lt!49027 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49024 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49024 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49026 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49026 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49017 () Unit!2937)

(assert (=> b!97797 (= lt!49017 (addApplyDifferent!68 lt!49027 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49026))))

(assert (=> b!97797 (= (apply!92 (+!135 lt!49027 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49026) (apply!92 lt!49027 lt!49026))))

(declare-fun lt!49012 () Unit!2937)

(assert (=> b!97797 (= lt!49012 lt!49017)))

(declare-fun lt!49020 () ListLongMap!1535)

(assert (=> b!97797 (= lt!49020 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49019 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49019 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49021 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49021 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49013 () Unit!2937)

(assert (=> b!97797 (= lt!49013 (addApplyDifferent!68 lt!49020 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49021))))

(assert (=> b!97797 (= (apply!92 (+!135 lt!49020 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49021) (apply!92 lt!49020 lt!49021))))

(declare-fun lt!49029 () Unit!2937)

(assert (=> b!97797 (= lt!49029 lt!49013)))

(declare-fun lt!49023 () ListLongMap!1535)

(assert (=> b!97797 (= lt!49023 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49030 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49030 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49022 () (_ BitVec 64))

(assert (=> b!97797 (= lt!49022 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97797 (= lt!49032 (addApplyDifferent!68 lt!49023 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49022))))

(assert (=> b!97797 (= (apply!92 (+!135 lt!49023 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49022) (apply!92 lt!49023 lt!49022))))

(declare-fun b!97798 () Bool)

(declare-fun e!63785 () ListLongMap!1535)

(assert (=> b!97798 (= e!63785 (+!135 call!9968 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(declare-fun b!97799 () Bool)

(declare-fun call!9964 () ListLongMap!1535)

(assert (=> b!97799 (= e!63777 call!9964)))

(declare-fun b!97800 () Bool)

(declare-fun e!63781 () Bool)

(assert (=> b!97800 (= e!63781 (= (apply!92 lt!49031 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))

(declare-fun call!9963 () ListLongMap!1535)

(declare-fun c!16559 () Bool)

(declare-fun bm!9963 () Bool)

(declare-fun c!16561 () Bool)

(declare-fun call!9962 () ListLongMap!1535)

(assert (=> bm!9963 (= call!9968 (+!135 (ite c!16561 call!9962 (ite c!16559 call!9963 call!9964)) (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun b!97801 () Bool)

(assert (=> b!97801 (= e!63779 e!63787)))

(declare-fun res!49237 () Bool)

(assert (=> b!97801 (= res!49237 call!9966)))

(assert (=> b!97801 (=> (not res!49237) (not e!63787))))

(declare-fun b!97802 () Bool)

(declare-fun Unit!2948 () Unit!2937)

(assert (=> b!97802 (= e!63775 Unit!2948)))

(declare-fun bm!9964 () Bool)

(assert (=> bm!9964 (= call!9963 call!9962)))

(declare-fun b!97803 () Bool)

(assert (=> b!97803 (= e!63785 e!63776)))

(assert (=> b!97803 (= c!16559 (and (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97804 () Bool)

(assert (=> b!97804 (= e!63784 (not call!9965))))

(declare-fun b!97805 () Bool)

(declare-fun c!16563 () Bool)

(assert (=> b!97805 (= c!16563 (and (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97805 (= e!63776 e!63777)))

(declare-fun b!97806 () Bool)

(assert (=> b!97806 (= e!63784 e!63781)))

(declare-fun res!49241 () Bool)

(assert (=> b!97806 (= res!49241 call!9965)))

(assert (=> b!97806 (=> (not res!49241) (not e!63781))))

(declare-fun b!97807 () Bool)

(assert (=> b!97807 (= e!63786 e!63779)))

(declare-fun c!16562 () Bool)

(assert (=> b!97807 (= c!16562 (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97808 () Bool)

(assert (=> b!97808 (= e!63778 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9962 () Bool)

(assert (=> bm!9962 (= call!9962 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26033 () Bool)

(assert (=> d!26033 e!63786))

(declare-fun res!49238 () Bool)

(assert (=> d!26033 (=> (not res!49238) (not e!63786))))

(assert (=> d!26033 (= res!49238 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49018 () ListLongMap!1535)

(assert (=> d!26033 (= lt!49031 lt!49018)))

(declare-fun lt!49011 () Unit!2937)

(assert (=> d!26033 (= lt!49011 e!63775)))

(declare-fun c!16558 () Bool)

(declare-fun e!63783 () Bool)

(assert (=> d!26033 (= c!16558 e!63783)))

(declare-fun res!49235 () Bool)

(assert (=> d!26033 (=> (not res!49235) (not e!63783))))

(assert (=> d!26033 (= res!49235 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26033 (= lt!49018 e!63785)))

(assert (=> d!26033 (= c!16561 (and (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26033 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26033 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49031)))

(declare-fun b!97809 () Bool)

(assert (=> b!97809 (= e!63783 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9965 () Bool)

(assert (=> bm!9965 (= call!9964 call!9963)))

(declare-fun b!97810 () Bool)

(assert (=> b!97810 (= e!63780 e!63782)))

(declare-fun res!49234 () Bool)

(assert (=> b!97810 (=> (not res!49234) (not e!63782))))

(assert (=> b!97810 (= res!49234 (contains!800 lt!49031 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97810 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26033 c!16561) b!97798))

(assert (= (and d!26033 (not c!16561)) b!97803))

(assert (= (and b!97803 c!16559) b!97791))

(assert (= (and b!97803 (not c!16559)) b!97805))

(assert (= (and b!97805 c!16563) b!97794))

(assert (= (and b!97805 (not c!16563)) b!97799))

(assert (= (or b!97794 b!97799) bm!9965))

(assert (= (or b!97791 bm!9965) bm!9964))

(assert (= (or b!97791 b!97794) bm!9961))

(assert (= (or b!97798 bm!9964) bm!9962))

(assert (= (or b!97798 bm!9961) bm!9963))

(assert (= (and d!26033 res!49235) b!97809))

(assert (= (and d!26033 c!16558) b!97797))

(assert (= (and d!26033 (not c!16558)) b!97802))

(assert (= (and d!26033 res!49238) b!97792))

(assert (= (and b!97792 res!49239) b!97808))

(assert (= (and b!97792 (not res!49242)) b!97810))

(assert (= (and b!97810 res!49234) b!97795))

(assert (= (and b!97792 res!49240) b!97793))

(assert (= (and b!97793 c!16560) b!97806))

(assert (= (and b!97793 (not c!16560)) b!97804))

(assert (= (and b!97806 res!49241) b!97800))

(assert (= (or b!97806 b!97804) bm!9960))

(assert (= (and b!97793 res!49236) b!97807))

(assert (= (and b!97807 c!16562) b!97801))

(assert (= (and b!97807 (not c!16562)) b!97790))

(assert (= (and b!97801 res!49237) b!97796))

(assert (= (or b!97801 b!97790) bm!9959))

(declare-fun b_lambda!4347 () Bool)

(assert (=> (not b_lambda!4347) (not b!97795)))

(declare-fun tb!1929 () Bool)

(declare-fun t!5542 () Bool)

(assert (=> (and b!97466 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16)) t!5542) tb!1929))

(declare-fun result!3275 () Bool)

(assert (=> tb!1929 (= result!3275 tp_is_empty!2631)))

(assert (=> b!97795 t!5542))

(declare-fun b_and!6007 () Bool)

(assert (= b_and!6003 (and (=> t!5542 result!3275) b_and!6007)))

(declare-fun t!5544 () Bool)

(declare-fun tb!1931 () Bool)

(assert (=> (and b!97470 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 newMap!16)) t!5544) tb!1931))

(declare-fun result!3277 () Bool)

(assert (= result!3277 result!3275))

(assert (=> b!97795 t!5544))

(declare-fun b_and!6009 () Bool)

(assert (= b_and!6005 (and (=> t!5544 result!3277) b_and!6009)))

(declare-fun m!106887 () Bool)

(assert (=> b!97796 m!106887))

(declare-fun m!106889 () Bool)

(assert (=> bm!9960 m!106889))

(declare-fun m!106891 () Bool)

(assert (=> b!97810 m!106891))

(assert (=> b!97810 m!106891))

(declare-fun m!106893 () Bool)

(assert (=> b!97810 m!106893))

(declare-fun m!106895 () Bool)

(assert (=> d!26033 m!106895))

(declare-fun m!106897 () Bool)

(assert (=> b!97800 m!106897))

(declare-fun m!106899 () Bool)

(assert (=> bm!9963 m!106899))

(assert (=> b!97809 m!106891))

(assert (=> b!97809 m!106891))

(declare-fun m!106901 () Bool)

(assert (=> b!97809 m!106901))

(declare-fun m!106903 () Bool)

(assert (=> b!97798 m!106903))

(assert (=> b!97808 m!106891))

(assert (=> b!97808 m!106891))

(assert (=> b!97808 m!106901))

(declare-fun m!106905 () Bool)

(assert (=> b!97795 m!106905))

(declare-fun m!106907 () Bool)

(assert (=> b!97795 m!106907))

(declare-fun m!106909 () Bool)

(assert (=> b!97795 m!106909))

(assert (=> b!97795 m!106891))

(declare-fun m!106911 () Bool)

(assert (=> b!97795 m!106911))

(assert (=> b!97795 m!106891))

(assert (=> b!97795 m!106905))

(assert (=> b!97795 m!106907))

(declare-fun m!106913 () Bool)

(assert (=> b!97797 m!106913))

(declare-fun m!106915 () Bool)

(assert (=> b!97797 m!106915))

(declare-fun m!106917 () Bool)

(assert (=> b!97797 m!106917))

(declare-fun m!106919 () Bool)

(assert (=> b!97797 m!106919))

(declare-fun m!106921 () Bool)

(assert (=> b!97797 m!106921))

(declare-fun m!106923 () Bool)

(assert (=> b!97797 m!106923))

(declare-fun m!106925 () Bool)

(assert (=> b!97797 m!106925))

(declare-fun m!106927 () Bool)

(assert (=> b!97797 m!106927))

(declare-fun m!106929 () Bool)

(assert (=> b!97797 m!106929))

(assert (=> b!97797 m!106891))

(assert (=> b!97797 m!106927))

(declare-fun m!106931 () Bool)

(assert (=> b!97797 m!106931))

(assert (=> b!97797 m!106915))

(declare-fun m!106933 () Bool)

(assert (=> b!97797 m!106933))

(declare-fun m!106935 () Bool)

(assert (=> b!97797 m!106935))

(declare-fun m!106937 () Bool)

(assert (=> b!97797 m!106937))

(declare-fun m!106939 () Bool)

(assert (=> b!97797 m!106939))

(assert (=> b!97797 m!106921))

(assert (=> b!97797 m!106913))

(declare-fun m!106941 () Bool)

(assert (=> b!97797 m!106941))

(declare-fun m!106943 () Bool)

(assert (=> b!97797 m!106943))

(assert (=> bm!9962 m!106931))

(declare-fun m!106945 () Bool)

(assert (=> bm!9959 m!106945))

(assert (=> bm!9957 d!26033))

(declare-fun d!26035 () Bool)

(declare-fun e!63788 () Bool)

(assert (=> d!26035 e!63788))

(declare-fun res!49243 () Bool)

(assert (=> d!26035 (=> res!49243 e!63788)))

(declare-fun lt!49034 () Bool)

(assert (=> d!26035 (= res!49243 (not lt!49034))))

(declare-fun lt!49036 () Bool)

(assert (=> d!26035 (= lt!49034 lt!49036)))

(declare-fun lt!49033 () Unit!2937)

(declare-fun e!63789 () Unit!2937)

(assert (=> d!26035 (= lt!49033 e!63789)))

(declare-fun c!16564 () Bool)

(assert (=> d!26035 (= c!16564 lt!49036)))

(assert (=> d!26035 (= lt!49036 (containsKey!154 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26035 (= (contains!800 lt!48916 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49034)))

(declare-fun b!97811 () Bool)

(declare-fun lt!49035 () Unit!2937)

(assert (=> b!97811 (= e!63789 lt!49035)))

(assert (=> b!97811 (= lt!49035 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97811 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97812 () Bool)

(declare-fun Unit!2949 () Unit!2937)

(assert (=> b!97812 (= e!63789 Unit!2949)))

(declare-fun b!97813 () Bool)

(assert (=> b!97813 (= e!63788 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26035 c!16564) b!97811))

(assert (= (and d!26035 (not c!16564)) b!97812))

(assert (= (and d!26035 (not res!49243)) b!97813))

(declare-fun m!106947 () Bool)

(assert (=> d!26035 m!106947))

(declare-fun m!106949 () Bool)

(assert (=> b!97811 m!106949))

(declare-fun m!106951 () Bool)

(assert (=> b!97811 m!106951))

(assert (=> b!97811 m!106951))

(declare-fun m!106953 () Bool)

(assert (=> b!97811 m!106953))

(assert (=> b!97813 m!106951))

(assert (=> b!97813 m!106951))

(assert (=> b!97813 m!106953))

(assert (=> bm!9881 d!26035))

(declare-fun d!26037 () Bool)

(assert (=> d!26037 (= (map!1255 (_2!1180 lt!48997)) (getCurrentListMap!474 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun bs!4035 () Bool)

(assert (= bs!4035 d!26037))

(declare-fun m!106955 () Bool)

(assert (=> bs!4035 m!106955))

(assert (=> bm!9951 d!26037))

(declare-fun d!26039 () Bool)

(declare-fun res!49244 () Bool)

(declare-fun e!63790 () Bool)

(assert (=> d!26039 (=> (not res!49244) (not e!63790))))

(assert (=> d!26039 (= res!49244 (simpleValid!68 (_2!1180 lt!48997)))))

(assert (=> d!26039 (= (valid!384 (_2!1180 lt!48997)) e!63790)))

(declare-fun b!97814 () Bool)

(declare-fun res!49245 () Bool)

(assert (=> b!97814 (=> (not res!49245) (not e!63790))))

(assert (=> b!97814 (= res!49245 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))) (_size!475 (_2!1180 lt!48997))))))

(declare-fun b!97815 () Bool)

(declare-fun res!49246 () Bool)

(assert (=> b!97815 (=> (not res!49246) (not e!63790))))

(assert (=> b!97815 (= res!49246 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997))))))

(declare-fun b!97816 () Bool)

(assert (=> b!97816 (= e!63790 (arrayNoDuplicates!0 (_keys!4171 (_2!1180 lt!48997)) #b00000000000000000000000000000000 Nil!1578))))

(assert (= (and d!26039 res!49244) b!97814))

(assert (= (and b!97814 res!49245) b!97815))

(assert (= (and b!97815 res!49246) b!97816))

(declare-fun m!106957 () Bool)

(assert (=> d!26039 m!106957))

(declare-fun m!106959 () Bool)

(assert (=> b!97814 m!106959))

(declare-fun m!106961 () Bool)

(assert (=> b!97815 m!106961))

(declare-fun m!106963 () Bool)

(assert (=> b!97816 m!106963))

(assert (=> d!26025 d!26039))

(assert (=> d!26025 d!26009))

(declare-fun d!26041 () Bool)

(declare-fun lt!49039 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!101 (List!1581) (InoxSet (_ BitVec 64)))

(assert (=> d!26041 (= lt!49039 (select (content!101 Nil!1578) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun e!63795 () Bool)

(assert (=> d!26041 (= lt!49039 e!63795)))

(declare-fun res!49252 () Bool)

(assert (=> d!26041 (=> (not res!49252) (not e!63795))))

(assert (=> d!26041 (= res!49252 ((_ is Cons!1577) Nil!1578))))

(assert (=> d!26041 (= (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49039)))

(declare-fun b!97821 () Bool)

(declare-fun e!63796 () Bool)

(assert (=> b!97821 (= e!63795 e!63796)))

(declare-fun res!49251 () Bool)

(assert (=> b!97821 (=> res!49251 e!63796)))

(assert (=> b!97821 (= res!49251 (= (h!2171 Nil!1578) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97822 () Bool)

(assert (=> b!97822 (= e!63796 (contains!802 (t!5535 Nil!1578) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26041 res!49252) b!97821))

(assert (= (and b!97821 (not res!49251)) b!97822))

(declare-fun m!106965 () Bool)

(assert (=> d!26041 m!106965))

(assert (=> d!26041 m!106647))

(declare-fun m!106967 () Bool)

(assert (=> d!26041 m!106967))

(assert (=> b!97822 m!106647))

(declare-fun m!106969 () Bool)

(assert (=> b!97822 m!106969))

(assert (=> b!97569 d!26041))

(declare-fun b!97831 () Bool)

(declare-fun e!63804 () Bool)

(declare-fun call!9971 () Bool)

(assert (=> b!97831 (= e!63804 call!9971)))

(declare-fun b!97832 () Bool)

(declare-fun e!63803 () Bool)

(assert (=> b!97832 (= e!63803 call!9971)))

(declare-fun b!97833 () Bool)

(declare-fun e!63805 () Bool)

(assert (=> b!97833 (= e!63805 e!63803)))

(declare-fun c!16567 () Bool)

(assert (=> b!97833 (= c!16567 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97834 () Bool)

(assert (=> b!97834 (= e!63803 e!63804)))

(declare-fun lt!49048 () (_ BitVec 64))

(assert (=> b!97834 (= lt!49048 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49046 () Unit!2937)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4241 (_ BitVec 64) (_ BitVec 32)) Unit!2937)

(assert (=> b!97834 (= lt!49046 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000))))

(assert (=> b!97834 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000)))

(declare-fun lt!49047 () Unit!2937)

(assert (=> b!97834 (= lt!49047 lt!49046)))

(declare-fun res!49257 () Bool)

(assert (=> b!97834 (= res!49257 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)) (Found!253 #b00000000000000000000000000000000)))))

(assert (=> b!97834 (=> (not res!49257) (not e!63804))))

(declare-fun d!26043 () Bool)

(declare-fun res!49258 () Bool)

(assert (=> d!26043 (=> res!49258 e!63805)))

(assert (=> d!26043 (= res!49258 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26043 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 newMap!16) (mask!6578 newMap!16)) e!63805)))

(declare-fun bm!9968 () Bool)

(assert (=> bm!9968 (= call!9971 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (= (and d!26043 (not res!49258)) b!97833))

(assert (= (and b!97833 c!16567) b!97834))

(assert (= (and b!97833 (not c!16567)) b!97832))

(assert (= (and b!97834 res!49257) b!97831))

(assert (= (or b!97831 b!97832) bm!9968))

(assert (=> b!97833 m!106891))

(assert (=> b!97833 m!106891))

(assert (=> b!97833 m!106901))

(assert (=> b!97834 m!106891))

(declare-fun m!106971 () Bool)

(assert (=> b!97834 m!106971))

(declare-fun m!106973 () Bool)

(assert (=> b!97834 m!106973))

(assert (=> b!97834 m!106891))

(declare-fun m!106975 () Bool)

(assert (=> b!97834 m!106975))

(declare-fun m!106977 () Bool)

(assert (=> bm!9968 m!106977))

(assert (=> b!97580 d!26043))

(declare-fun d!26045 () Bool)

(assert (=> d!26045 (= (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (and (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97568 d!26045))

(declare-fun d!26047 () Bool)

(declare-fun res!49270 () Bool)

(declare-fun e!63808 () Bool)

(assert (=> d!26047 (=> (not res!49270) (not e!63808))))

(assert (=> d!26047 (= res!49270 (validMask!0 (mask!6578 newMap!16)))))

(assert (=> d!26047 (= (simpleValid!68 newMap!16) e!63808)))

(declare-fun b!97845 () Bool)

(declare-fun res!49268 () Bool)

(assert (=> b!97845 (=> (not res!49268) (not e!63808))))

(declare-fun size!2269 (LongMapFixedSize!852) (_ BitVec 32))

(assert (=> b!97845 (= res!49268 (= (size!2269 newMap!16) (bvadd (_size!475 newMap!16) (bvsdiv (bvadd (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!97843 () Bool)

(declare-fun res!49269 () Bool)

(assert (=> b!97843 (=> (not res!49269) (not e!63808))))

(assert (=> b!97843 (= res!49269 (and (= (size!2266 (_values!2464 newMap!16)) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001)) (= (size!2265 (_keys!4171 newMap!16)) (size!2266 (_values!2464 newMap!16))) (bvsge (_size!475 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!475 newMap!16) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!97846 () Bool)

(assert (=> b!97846 (= e!63808 (and (bvsge (extraKeys!2302 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!475 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!97844 () Bool)

(declare-fun res!49267 () Bool)

(assert (=> b!97844 (=> (not res!49267) (not e!63808))))

(assert (=> b!97844 (= res!49267 (bvsge (size!2269 newMap!16) (_size!475 newMap!16)))))

(assert (= (and d!26047 res!49270) b!97843))

(assert (= (and b!97843 res!49269) b!97844))

(assert (= (and b!97844 res!49267) b!97845))

(assert (= (and b!97845 res!49268) b!97846))

(assert (=> d!26047 m!106895))

(declare-fun m!106979 () Bool)

(assert (=> b!97845 m!106979))

(assert (=> b!97844 m!106979))

(assert (=> d!26009 d!26047))

(assert (=> d!26013 d!26029))

(declare-fun d!26049 () Bool)

(assert (=> d!26049 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49051 () Unit!2937)

(declare-fun choose!588 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2937)

(assert (=> d!26049 (= lt!49051 (choose!588 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48990 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26049 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26049 (= (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48990 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)) lt!49051)))

(declare-fun bs!4036 () Bool)

(assert (= bs!4036 d!26049))

(assert (=> bs!4036 m!106673))

(declare-fun m!106981 () Bool)

(assert (=> bs!4036 m!106981))

(assert (=> bs!4036 m!106895))

(assert (=> bs!4036 m!106761))

(declare-fun m!106983 () Bool)

(assert (=> bs!4036 m!106983))

(assert (=> bs!4036 m!106673))

(declare-fun m!106985 () Bool)

(assert (=> bs!4036 m!106985))

(assert (=> bs!4036 m!106761))

(assert (=> b!97769 d!26049))

(declare-fun d!26051 () Bool)

(declare-fun res!49271 () Bool)

(declare-fun e!63809 () Bool)

(assert (=> d!26051 (=> res!49271 e!63809)))

(assert (=> d!26051 (= res!49271 (= (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26051 (= (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000) e!63809)))

(declare-fun b!97847 () Bool)

(declare-fun e!63810 () Bool)

(assert (=> b!97847 (= e!63809 e!63810)))

(declare-fun res!49272 () Bool)

(assert (=> b!97847 (=> (not res!49272) (not e!63810))))

(assert (=> b!97847 (= res!49272 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97848 () Bool)

(assert (=> b!97848 (= e!63810 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26051 (not res!49271)) b!97847))

(assert (= (and b!97847 res!49272) b!97848))

(assert (=> d!26051 m!106891))

(assert (=> b!97848 m!106647))

(declare-fun m!106987 () Bool)

(assert (=> b!97848 m!106987))

(assert (=> bm!9940 d!26051))

(declare-fun d!26053 () Bool)

(declare-fun get!1284 (Option!156) V!3155)

(assert (=> d!26053 (= (apply!92 lt!48916 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4037 () Bool)

(assert (= bs!4037 d!26053))

(assert (=> bs!4037 m!106951))

(assert (=> bs!4037 m!106951))

(declare-fun m!106989 () Bool)

(assert (=> bs!4037 m!106989))

(assert (=> b!97634 d!26053))

(declare-fun b!97883 () Bool)

(declare-fun e!63832 () Bool)

(declare-fun lt!49136 () SeekEntryResult!253)

(assert (=> b!97883 (= e!63832 ((_ is Undefined!253) lt!49136))))

(declare-fun bm!9977 () Bool)

(declare-fun call!9982 () Bool)

(declare-fun call!9981 () Bool)

(assert (=> bm!9977 (= call!9982 call!9981)))

(declare-fun b!97884 () Bool)

(declare-fun e!63827 () Bool)

(declare-fun call!9983 () Bool)

(assert (=> b!97884 (= e!63827 (not call!9983))))

(declare-fun b!97885 () Bool)

(declare-fun e!63834 () Unit!2937)

(declare-fun Unit!2950 () Unit!2937)

(assert (=> b!97885 (= e!63834 Unit!2950)))

(declare-fun lt!49112 () Unit!2937)

(declare-fun lemmaArrayContainsKeyThenInListMap!25 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2937)

(assert (=> b!97885 (= lt!49112 (lemmaArrayContainsKeyThenInListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> b!97885 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))

(declare-fun lt!49129 () Unit!2937)

(assert (=> b!97885 (= lt!49129 lt!49112)))

(assert (=> b!97885 false))

(declare-fun b!97886 () Bool)

(declare-fun res!49291 () Bool)

(declare-fun e!63830 () Bool)

(assert (=> b!97886 (=> (not res!49291) (not e!63830))))

(declare-fun lt!49117 () tuple2!2338)

(assert (=> b!97886 (= res!49291 (valid!384 (_2!1180 lt!49117)))))

(declare-fun b!97887 () Bool)

(declare-fun res!49296 () Bool)

(assert (=> b!97887 (=> (not res!49296) (not e!63830))))

(assert (=> b!97887 (= res!49296 (contains!800 (map!1255 (_2!1180 lt!49117)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun d!26055 () Bool)

(assert (=> d!26055 e!63830))

(declare-fun res!49295 () Bool)

(assert (=> d!26055 (=> (not res!49295) (not e!63830))))

(assert (=> d!26055 (= res!49295 (_1!1180 lt!49117))))

(assert (=> d!26055 (= lt!49117 (tuple2!2339 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd (_size!475 newMap!16) #b00000000000000000000000000000001) (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (_vacant!475 newMap!16))))))

(declare-fun lt!49114 () Unit!2937)

(declare-fun lt!49137 () Unit!2937)

(assert (=> d!26055 (= lt!49114 lt!49137)))

(declare-fun lt!49130 () array!4243)

(declare-fun lt!49116 () array!4241)

(assert (=> d!26055 (contains!800 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(assert (=> d!26055 (= lt!49137 (lemmaValidKeyInArrayIsInListMap!102 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26055 (= lt!49130 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))))

(assert (=> d!26055 (= lt!49116 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun lt!49118 () Unit!2937)

(declare-fun lt!49132 () Unit!2937)

(assert (=> d!26055 (= lt!49118 lt!49132)))

(declare-fun lt!49115 () array!4241)

(assert (=> d!26055 (= (arrayCountValidKeys!0 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4241 (_ BitVec 32)) Unit!2937)

(assert (=> d!26055 (= lt!49132 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(assert (=> d!26055 (= lt!49115 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun lt!49140 () Unit!2937)

(declare-fun lt!49134 () Unit!2937)

(assert (=> d!26055 (= lt!49140 lt!49134)))

(declare-fun lt!49122 () array!4241)

(assert (=> d!26055 (arrayContainsKey!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26055 (= lt!49134 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(assert (=> d!26055 (= lt!49122 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun lt!49119 () Unit!2937)

(declare-fun lt!49135 () Unit!2937)

(assert (=> d!26055 (= lt!49119 lt!49135)))

(assert (=> d!26055 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!25 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2937)

(assert (=> d!26055 (= lt!49135 (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49123 () Unit!2937)

(declare-fun lt!49139 () Unit!2937)

(assert (=> d!26055 (= lt!49123 lt!49139)))

(assert (=> d!26055 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (mask!6578 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4241 (_ BitVec 32) (_ BitVec 32)) Unit!2937)

(assert (=> d!26055 (= lt!49139 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (mask!6578 newMap!16)))))

(declare-fun lt!49141 () Unit!2937)

(declare-fun lt!49120 () Unit!2937)

(assert (=> d!26055 (= lt!49141 lt!49120)))

(assert (=> d!26055 (= (arrayCountValidKeys!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4241 (_ BitVec 32) (_ BitVec 64)) Unit!2937)

(assert (=> d!26055 (= lt!49120 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun lt!49128 () Unit!2937)

(declare-fun lt!49113 () Unit!2937)

(assert (=> d!26055 (= lt!49128 lt!49113)))

(declare-fun lt!49126 () List!1581)

(declare-fun lt!49133 () (_ BitVec 32))

(assert (=> d!26055 (arrayNoDuplicates!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) lt!49133 lt!49126)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4241 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1581) Unit!2937)

(assert (=> d!26055 (= lt!49113 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) lt!49133 lt!49126))))

(assert (=> d!26055 (= lt!49126 Nil!1578)))

(assert (=> d!26055 (= lt!49133 #b00000000000000000000000000000000)))

(declare-fun lt!49124 () Unit!2937)

(assert (=> d!26055 (= lt!49124 e!63834)))

(declare-fun c!16577 () Bool)

(assert (=> d!26055 (= c!16577 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!49121 () Unit!2937)

(declare-fun e!63833 () Unit!2937)

(assert (=> d!26055 (= lt!49121 e!63833)))

(declare-fun c!16578 () Bool)

(assert (=> d!26055 (= c!16578 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26055 (valid!384 newMap!16)))

(assert (=> d!26055 (= (updateHelperNewKey!41 newMap!16 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))) lt!49117)))

(declare-fun b!97888 () Bool)

(declare-fun res!49297 () Bool)

(assert (=> b!97888 (= res!49297 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49136)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97888 (=> (not res!49297) (not e!63827))))

(declare-fun bm!9978 () Bool)

(assert (=> bm!9978 (= call!9983 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97889 () Bool)

(declare-fun res!49298 () Bool)

(declare-fun e!63831 () Bool)

(assert (=> b!97889 (=> (not res!49298) (not e!63831))))

(assert (=> b!97889 (= res!49298 call!9982)))

(declare-fun e!63828 () Bool)

(assert (=> b!97889 (= e!63828 e!63831)))

(declare-fun b!97890 () Bool)

(assert (=> b!97890 (= e!63831 (not call!9983))))

(declare-fun b!97891 () Bool)

(declare-fun res!49294 () Bool)

(assert (=> b!97891 (= res!49294 call!9981)))

(declare-fun e!63829 () Bool)

(assert (=> b!97891 (=> (not res!49294) (not e!63829))))

(declare-fun c!16579 () Bool)

(declare-fun bm!9979 () Bool)

(declare-fun lt!49138 () SeekEntryResult!253)

(assert (=> bm!9979 (= call!9981 (inRange!0 (ite c!16578 (index!3156 lt!49138) (ite c!16579 (index!3155 lt!49136) (index!3158 lt!49136))) (mask!6578 newMap!16)))))

(declare-fun b!97892 () Bool)

(declare-fun res!49292 () Bool)

(assert (=> b!97892 (=> (not res!49292) (not e!63831))))

(assert (=> b!97892 (= res!49292 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49136)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9980 () Bool)

(declare-fun call!9980 () SeekEntryResult!253)

(assert (=> bm!9980 (= call!9980 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!97893 () Bool)

(assert (=> b!97893 (= e!63832 e!63827)))

(declare-fun res!49293 () Bool)

(assert (=> b!97893 (= res!49293 call!9982)))

(assert (=> b!97893 (=> (not res!49293) (not e!63827))))

(declare-fun b!97894 () Bool)

(declare-fun c!16576 () Bool)

(assert (=> b!97894 (= c!16576 ((_ is MissingVacant!253) lt!49136))))

(assert (=> b!97894 (= e!63828 e!63832)))

(declare-fun b!97895 () Bool)

(declare-fun lt!49125 () Unit!2937)

(assert (=> b!97895 (= e!63833 lt!49125)))

(assert (=> b!97895 (= lt!49125 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97895 (= lt!49136 call!9980)))

(assert (=> b!97895 (= c!16579 ((_ is MissingZero!253) lt!49136))))

(assert (=> b!97895 e!63828))

(declare-fun b!97896 () Bool)

(assert (=> b!97896 (= e!63830 (= (map!1255 (_2!1180 lt!49117)) (+!135 (map!1255 newMap!16) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97897 () Bool)

(declare-fun Unit!2951 () Unit!2937)

(assert (=> b!97897 (= e!63833 Unit!2951)))

(declare-fun lt!49127 () Unit!2937)

(assert (=> b!97897 (= lt!49127 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97897 (= lt!49138 call!9980)))

(declare-fun res!49299 () Bool)

(assert (=> b!97897 (= res!49299 ((_ is Found!253) lt!49138))))

(assert (=> b!97897 (=> (not res!49299) (not e!63829))))

(assert (=> b!97897 e!63829))

(declare-fun lt!49131 () Unit!2937)

(assert (=> b!97897 (= lt!49131 lt!49127)))

(assert (=> b!97897 false))

(declare-fun b!97898 () Bool)

(declare-fun Unit!2952 () Unit!2937)

(assert (=> b!97898 (= e!63834 Unit!2952)))

(declare-fun b!97899 () Bool)

(assert (=> b!97899 (= e!63829 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49138)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26055 c!16578) b!97897))

(assert (= (and d!26055 (not c!16578)) b!97895))

(assert (= (and b!97897 res!49299) b!97891))

(assert (= (and b!97891 res!49294) b!97899))

(assert (= (and b!97895 c!16579) b!97889))

(assert (= (and b!97895 (not c!16579)) b!97894))

(assert (= (and b!97889 res!49298) b!97892))

(assert (= (and b!97892 res!49292) b!97890))

(assert (= (and b!97894 c!16576) b!97893))

(assert (= (and b!97894 (not c!16576)) b!97883))

(assert (= (and b!97893 res!49293) b!97888))

(assert (= (and b!97888 res!49297) b!97884))

(assert (= (or b!97889 b!97893) bm!9977))

(assert (= (or b!97890 b!97884) bm!9978))

(assert (= (or b!97891 bm!9977) bm!9979))

(assert (= (or b!97897 b!97895) bm!9980))

(assert (= (and d!26055 c!16577) b!97885))

(assert (= (and d!26055 (not c!16577)) b!97898))

(assert (= (and d!26055 res!49295) b!97886))

(assert (= (and b!97886 res!49291) b!97887))

(assert (= (and b!97887 res!49296) b!97896))

(assert (=> bm!9978 m!106647))

(assert (=> bm!9978 m!106829))

(declare-fun m!106991 () Bool)

(assert (=> bm!9979 m!106991))

(assert (=> b!97885 m!106647))

(declare-fun m!106993 () Bool)

(assert (=> b!97885 m!106993))

(assert (=> b!97885 m!106761))

(assert (=> b!97885 m!106761))

(assert (=> b!97885 m!106647))

(assert (=> b!97885 m!106841))

(assert (=> b!97895 m!106647))

(assert (=> b!97895 m!106857))

(declare-fun m!106995 () Bool)

(assert (=> b!97888 m!106995))

(declare-fun m!106997 () Bool)

(assert (=> b!97892 m!106997))

(declare-fun m!106999 () Bool)

(assert (=> d!26055 m!106999))

(declare-fun m!107001 () Bool)

(assert (=> d!26055 m!107001))

(declare-fun m!107003 () Bool)

(assert (=> d!26055 m!107003))

(declare-fun m!107005 () Bool)

(assert (=> d!26055 m!107005))

(assert (=> d!26055 m!106647))

(declare-fun m!107007 () Bool)

(assert (=> d!26055 m!107007))

(assert (=> d!26055 m!106647))

(declare-fun m!107009 () Bool)

(assert (=> d!26055 m!107009))

(assert (=> d!26055 m!106999))

(assert (=> d!26055 m!106647))

(assert (=> d!26055 m!106829))

(declare-fun m!107011 () Bool)

(assert (=> d!26055 m!107011))

(declare-fun m!107013 () Bool)

(assert (=> d!26055 m!107013))

(declare-fun m!107015 () Bool)

(assert (=> d!26055 m!107015))

(assert (=> d!26055 m!106647))

(declare-fun m!107017 () Bool)

(assert (=> d!26055 m!107017))

(assert (=> d!26055 m!106761))

(declare-fun m!107019 () Bool)

(assert (=> d!26055 m!107019))

(assert (=> d!26055 m!106755))

(assert (=> d!26055 m!106665))

(declare-fun m!107021 () Bool)

(assert (=> d!26055 m!107021))

(assert (=> d!26055 m!106647))

(declare-fun m!107023 () Bool)

(assert (=> d!26055 m!107023))

(assert (=> d!26055 m!106647))

(declare-fun m!107025 () Bool)

(assert (=> d!26055 m!107025))

(declare-fun m!107027 () Bool)

(assert (=> d!26055 m!107027))

(assert (=> d!26055 m!106761))

(assert (=> d!26055 m!106647))

(assert (=> d!26055 m!106841))

(assert (=> d!26055 m!106761))

(declare-fun m!107029 () Bool)

(assert (=> d!26055 m!107029))

(assert (=> d!26055 m!106647))

(assert (=> d!26055 m!106673))

(declare-fun m!107031 () Bool)

(assert (=> d!26055 m!107031))

(assert (=> d!26055 m!107001))

(declare-fun m!107033 () Bool)

(assert (=> d!26055 m!107033))

(declare-fun m!107035 () Bool)

(assert (=> d!26055 m!107035))

(declare-fun m!107037 () Bool)

(assert (=> b!97886 m!107037))

(assert (=> b!97897 m!106647))

(assert (=> b!97897 m!106845))

(declare-fun m!107039 () Bool)

(assert (=> b!97899 m!107039))

(declare-fun m!107041 () Bool)

(assert (=> b!97896 m!107041))

(assert (=> b!97896 m!106649))

(assert (=> b!97896 m!106649))

(declare-fun m!107043 () Bool)

(assert (=> b!97896 m!107043))

(assert (=> bm!9980 m!106647))

(assert (=> bm!9980 m!106835))

(assert (=> b!97887 m!107041))

(assert (=> b!97887 m!107041))

(assert (=> b!97887 m!106647))

(declare-fun m!107045 () Bool)

(assert (=> b!97887 m!107045))

(assert (=> bm!9954 d!26055))

(declare-fun b!97900 () Bool)

(declare-fun e!63839 () Bool)

(declare-fun call!9988 () Bool)

(assert (=> b!97900 (= e!63839 (not call!9988))))

(declare-fun b!97901 () Bool)

(declare-fun e!63836 () ListLongMap!1535)

(declare-fun call!9989 () ListLongMap!1535)

(assert (=> b!97901 (= e!63836 call!9989)))

(declare-fun bm!9981 () Bool)

(declare-fun lt!49162 () ListLongMap!1535)

(assert (=> bm!9981 (= call!9988 (contains!800 lt!49162 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9982 () Bool)

(declare-fun call!9987 () Bool)

(assert (=> bm!9982 (= call!9987 (contains!800 lt!49162 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97902 () Bool)

(declare-fun res!49306 () Bool)

(declare-fun e!63846 () Bool)

(assert (=> b!97902 (=> (not res!49306) (not e!63846))))

(declare-fun e!63840 () Bool)

(assert (=> b!97902 (= res!49306 e!63840)))

(declare-fun res!49308 () Bool)

(assert (=> b!97902 (=> res!49308 e!63840)))

(declare-fun e!63838 () Bool)

(assert (=> b!97902 (= res!49308 (not e!63838))))

(declare-fun res!49305 () Bool)

(assert (=> b!97902 (=> (not res!49305) (not e!63838))))

(assert (=> b!97902 (= res!49305 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97903 () Bool)

(declare-fun res!49302 () Bool)

(assert (=> b!97903 (=> (not res!49302) (not e!63846))))

(declare-fun e!63844 () Bool)

(assert (=> b!97903 (= res!49302 e!63844)))

(declare-fun c!16582 () Bool)

(assert (=> b!97903 (= c!16582 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!9983 () Bool)

(declare-fun call!9990 () ListLongMap!1535)

(assert (=> bm!9983 (= call!9989 call!9990)))

(declare-fun b!97904 () Bool)

(declare-fun e!63837 () ListLongMap!1535)

(assert (=> b!97904 (= e!63837 call!9989)))

(declare-fun e!63842 () Bool)

(declare-fun b!97905 () Bool)

(assert (=> b!97905 (= e!63842 (= (apply!92 lt!49162 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97905 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004))))))

(assert (=> b!97905 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97906 () Bool)

(declare-fun e!63847 () Bool)

(assert (=> b!97906 (= e!63847 (= (apply!92 lt!49162 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!97907 () Bool)

(declare-fun e!63835 () Unit!2937)

(declare-fun lt!49163 () Unit!2937)

(assert (=> b!97907 (= e!63835 lt!49163)))

(declare-fun lt!49146 () ListLongMap!1535)

(assert (=> b!97907 (= lt!49146 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49147 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49147 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49156 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49156 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49159 () Unit!2937)

(assert (=> b!97907 (= lt!49159 (addStillContains!68 lt!49146 lt!49147 (zeroValue!2364 newMap!16) lt!49156))))

(assert (=> b!97907 (contains!800 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) lt!49156)))

(declare-fun lt!49145 () Unit!2937)

(assert (=> b!97907 (= lt!49145 lt!49159)))

(declare-fun lt!49158 () ListLongMap!1535)

(assert (=> b!97907 (= lt!49158 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49155 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49155 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49157 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49157 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49148 () Unit!2937)

(assert (=> b!97907 (= lt!49148 (addApplyDifferent!68 lt!49158 lt!49155 (minValue!2364 newMap!16) lt!49157))))

(assert (=> b!97907 (= (apply!92 (+!135 lt!49158 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) lt!49157) (apply!92 lt!49158 lt!49157))))

(declare-fun lt!49143 () Unit!2937)

(assert (=> b!97907 (= lt!49143 lt!49148)))

(declare-fun lt!49151 () ListLongMap!1535)

(assert (=> b!97907 (= lt!49151 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49150 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49150 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49152 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49152 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49144 () Unit!2937)

(assert (=> b!97907 (= lt!49144 (addApplyDifferent!68 lt!49151 lt!49150 (zeroValue!2364 newMap!16) lt!49152))))

(assert (=> b!97907 (= (apply!92 (+!135 lt!49151 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) lt!49152) (apply!92 lt!49151 lt!49152))))

(declare-fun lt!49160 () Unit!2937)

(assert (=> b!97907 (= lt!49160 lt!49144)))

(declare-fun lt!49154 () ListLongMap!1535)

(assert (=> b!97907 (= lt!49154 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49161 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49161 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49153 () (_ BitVec 64))

(assert (=> b!97907 (= lt!49153 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97907 (= lt!49163 (addApplyDifferent!68 lt!49154 lt!49161 (minValue!2364 newMap!16) lt!49153))))

(assert (=> b!97907 (= (apply!92 (+!135 lt!49154 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) lt!49153) (apply!92 lt!49154 lt!49153))))

(declare-fun b!97908 () Bool)

(declare-fun e!63845 () ListLongMap!1535)

(assert (=> b!97908 (= e!63845 (+!135 call!9990 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!97909 () Bool)

(declare-fun call!9986 () ListLongMap!1535)

(assert (=> b!97909 (= e!63837 call!9986)))

(declare-fun b!97910 () Bool)

(declare-fun e!63841 () Bool)

(assert (=> b!97910 (= e!63841 (= (apply!92 lt!49162 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!9985 () ListLongMap!1535)

(declare-fun call!9984 () ListLongMap!1535)

(declare-fun bm!9985 () Bool)

(declare-fun c!16583 () Bool)

(declare-fun c!16581 () Bool)

(assert (=> bm!9985 (= call!9990 (+!135 (ite c!16583 call!9984 (ite c!16581 call!9985 call!9986)) (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!97911 () Bool)

(assert (=> b!97911 (= e!63839 e!63847)))

(declare-fun res!49303 () Bool)

(assert (=> b!97911 (= res!49303 call!9988)))

(assert (=> b!97911 (=> (not res!49303) (not e!63847))))

(declare-fun b!97912 () Bool)

(declare-fun Unit!2953 () Unit!2937)

(assert (=> b!97912 (= e!63835 Unit!2953)))

(declare-fun bm!9986 () Bool)

(assert (=> bm!9986 (= call!9985 call!9984)))

(declare-fun b!97913 () Bool)

(assert (=> b!97913 (= e!63845 e!63836)))

(assert (=> b!97913 (= c!16581 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97914 () Bool)

(assert (=> b!97914 (= e!63844 (not call!9987))))

(declare-fun b!97915 () Bool)

(declare-fun c!16585 () Bool)

(assert (=> b!97915 (= c!16585 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97915 (= e!63836 e!63837)))

(declare-fun b!97916 () Bool)

(assert (=> b!97916 (= e!63844 e!63841)))

(declare-fun res!49307 () Bool)

(assert (=> b!97916 (= res!49307 call!9987)))

(assert (=> b!97916 (=> (not res!49307) (not e!63841))))

(declare-fun b!97917 () Bool)

(assert (=> b!97917 (= e!63846 e!63839)))

(declare-fun c!16584 () Bool)

(assert (=> b!97917 (= c!16584 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97918 () Bool)

(assert (=> b!97918 (= e!63838 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9984 () Bool)

(assert (=> bm!9984 (= call!9984 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26057 () Bool)

(assert (=> d!26057 e!63846))

(declare-fun res!49304 () Bool)

(assert (=> d!26057 (=> (not res!49304) (not e!63846))))

(assert (=> d!26057 (= res!49304 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49149 () ListLongMap!1535)

(assert (=> d!26057 (= lt!49162 lt!49149)))

(declare-fun lt!49142 () Unit!2937)

(assert (=> d!26057 (= lt!49142 e!63835)))

(declare-fun c!16580 () Bool)

(declare-fun e!63843 () Bool)

(assert (=> d!26057 (= c!16580 e!63843)))

(declare-fun res!49301 () Bool)

(assert (=> d!26057 (=> (not res!49301) (not e!63843))))

(assert (=> d!26057 (= res!49301 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26057 (= lt!49149 e!63845)))

(assert (=> d!26057 (= c!16583 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26057 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26057 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49162)))

(declare-fun b!97919 () Bool)

(assert (=> b!97919 (= e!63843 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9987 () Bool)

(assert (=> bm!9987 (= call!9986 call!9985)))

(declare-fun b!97920 () Bool)

(assert (=> b!97920 (= e!63840 e!63842)))

(declare-fun res!49300 () Bool)

(assert (=> b!97920 (=> (not res!49300) (not e!63842))))

(assert (=> b!97920 (= res!49300 (contains!800 lt!49162 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26057 c!16583) b!97908))

(assert (= (and d!26057 (not c!16583)) b!97913))

(assert (= (and b!97913 c!16581) b!97901))

(assert (= (and b!97913 (not c!16581)) b!97915))

(assert (= (and b!97915 c!16585) b!97904))

(assert (= (and b!97915 (not c!16585)) b!97909))

(assert (= (or b!97904 b!97909) bm!9987))

(assert (= (or b!97901 bm!9987) bm!9986))

(assert (= (or b!97901 b!97904) bm!9983))

(assert (= (or b!97908 bm!9986) bm!9984))

(assert (= (or b!97908 bm!9983) bm!9985))

(assert (= (and d!26057 res!49301) b!97919))

(assert (= (and d!26057 c!16580) b!97907))

(assert (= (and d!26057 (not c!16580)) b!97912))

(assert (= (and d!26057 res!49304) b!97902))

(assert (= (and b!97902 res!49305) b!97918))

(assert (= (and b!97902 (not res!49308)) b!97920))

(assert (= (and b!97920 res!49300) b!97905))

(assert (= (and b!97902 res!49306) b!97903))

(assert (= (and b!97903 c!16582) b!97916))

(assert (= (and b!97903 (not c!16582)) b!97914))

(assert (= (and b!97916 res!49307) b!97910))

(assert (= (or b!97916 b!97914) bm!9982))

(assert (= (and b!97903 res!49302) b!97917))

(assert (= (and b!97917 c!16584) b!97911))

(assert (= (and b!97917 (not c!16584)) b!97900))

(assert (= (and b!97911 res!49303) b!97906))

(assert (= (or b!97911 b!97900) bm!9981))

(declare-fun b_lambda!4349 () Bool)

(assert (=> (not b_lambda!4349) (not b!97905)))

(assert (=> b!97905 t!5542))

(declare-fun b_and!6011 () Bool)

(assert (= b_and!6007 (and (=> t!5542 result!3275) b_and!6011)))

(assert (=> b!97905 t!5544))

(declare-fun b_and!6013 () Bool)

(assert (= b_and!6009 (and (=> t!5544 result!3277) b_and!6013)))

(declare-fun m!107047 () Bool)

(assert (=> b!97906 m!107047))

(declare-fun m!107049 () Bool)

(assert (=> bm!9982 m!107049))

(assert (=> b!97920 m!106891))

(assert (=> b!97920 m!106891))

(declare-fun m!107051 () Bool)

(assert (=> b!97920 m!107051))

(assert (=> d!26057 m!106895))

(declare-fun m!107053 () Bool)

(assert (=> b!97910 m!107053))

(declare-fun m!107055 () Bool)

(assert (=> bm!9985 m!107055))

(assert (=> b!97919 m!106891))

(assert (=> b!97919 m!106891))

(assert (=> b!97919 m!106901))

(declare-fun m!107057 () Bool)

(assert (=> b!97908 m!107057))

(assert (=> b!97918 m!106891))

(assert (=> b!97918 m!106891))

(assert (=> b!97918 m!106901))

(declare-fun m!107059 () Bool)

(assert (=> b!97905 m!107059))

(assert (=> b!97905 m!106907))

(declare-fun m!107061 () Bool)

(assert (=> b!97905 m!107061))

(assert (=> b!97905 m!106891))

(declare-fun m!107063 () Bool)

(assert (=> b!97905 m!107063))

(assert (=> b!97905 m!106891))

(assert (=> b!97905 m!107059))

(assert (=> b!97905 m!106907))

(declare-fun m!107065 () Bool)

(assert (=> b!97907 m!107065))

(declare-fun m!107067 () Bool)

(assert (=> b!97907 m!107067))

(declare-fun m!107069 () Bool)

(assert (=> b!97907 m!107069))

(declare-fun m!107071 () Bool)

(assert (=> b!97907 m!107071))

(declare-fun m!107073 () Bool)

(assert (=> b!97907 m!107073))

(declare-fun m!107075 () Bool)

(assert (=> b!97907 m!107075))

(declare-fun m!107077 () Bool)

(assert (=> b!97907 m!107077))

(declare-fun m!107079 () Bool)

(assert (=> b!97907 m!107079))

(declare-fun m!107081 () Bool)

(assert (=> b!97907 m!107081))

(assert (=> b!97907 m!106891))

(assert (=> b!97907 m!107079))

(declare-fun m!107083 () Bool)

(assert (=> b!97907 m!107083))

(assert (=> b!97907 m!107067))

(declare-fun m!107085 () Bool)

(assert (=> b!97907 m!107085))

(declare-fun m!107087 () Bool)

(assert (=> b!97907 m!107087))

(declare-fun m!107089 () Bool)

(assert (=> b!97907 m!107089))

(declare-fun m!107091 () Bool)

(assert (=> b!97907 m!107091))

(assert (=> b!97907 m!107073))

(assert (=> b!97907 m!107065))

(declare-fun m!107093 () Bool)

(assert (=> b!97907 m!107093))

(declare-fun m!107095 () Bool)

(assert (=> b!97907 m!107095))

(assert (=> bm!9984 m!107083))

(declare-fun m!107097 () Bool)

(assert (=> bm!9981 m!107097))

(assert (=> bm!9953 d!26057))

(declare-fun d!26059 () Bool)

(declare-fun e!63850 () Bool)

(assert (=> d!26059 e!63850))

(declare-fun res!49311 () Bool)

(assert (=> d!26059 (=> (not res!49311) (not e!63850))))

(assert (=> d!26059 (= res!49311 (and (bvsge (index!3156 lt!48986) #b00000000000000000000000000000000) (bvslt (index!3156 lt!48986) (size!2265 (_keys!4171 newMap!16)))))))

(declare-fun lt!49166 () Unit!2937)

(declare-fun choose!589 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) Unit!2937)

(assert (=> d!26059 (= lt!49166 (choose!589 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26059 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26059 (= (lemmaValidKeyInArrayIsInListMap!102 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (defaultEntry!2481 newMap!16)) lt!49166)))

(declare-fun b!97923 () Bool)

(assert (=> b!97923 (= e!63850 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))

(assert (= (and d!26059 res!49311) b!97923))

(declare-fun m!107099 () Bool)

(assert (=> d!26059 m!107099))

(assert (=> d!26059 m!106895))

(declare-fun m!107101 () Bool)

(assert (=> b!97923 m!107101))

(assert (=> b!97923 m!106861))

(assert (=> b!97923 m!107101))

(assert (=> b!97923 m!106861))

(declare-fun m!107103 () Bool)

(assert (=> b!97923 m!107103))

(assert (=> b!97750 d!26059))

(declare-fun d!26061 () Bool)

(declare-fun e!63853 () Bool)

(assert (=> d!26061 e!63853))

(declare-fun res!49314 () Bool)

(assert (=> d!26061 (=> (not res!49314) (not e!63853))))

(assert (=> d!26061 (= res!49314 (and (bvsge (index!3156 lt!48986) #b00000000000000000000000000000000) (bvslt (index!3156 lt!48986) (size!2266 (_values!2464 newMap!16)))))))

(declare-fun lt!49169 () Unit!2937)

(declare-fun choose!590 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2937)

(assert (=> d!26061 (= lt!49169 (choose!590 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26061 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26061 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49169)))

(declare-fun b!97926 () Bool)

(assert (=> b!97926 (= e!63853 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))))

(assert (= (and d!26061 res!49314) b!97926))

(assert (=> d!26061 m!106647))

(assert (=> d!26061 m!106673))

(declare-fun m!107105 () Bool)

(assert (=> d!26061 m!107105))

(assert (=> d!26061 m!106895))

(assert (=> b!97926 m!106761))

(assert (=> b!97926 m!106761))

(assert (=> b!97926 m!107029))

(assert (=> b!97926 m!106839))

(declare-fun m!107107 () Bool)

(assert (=> b!97926 m!107107))

(assert (=> b!97750 d!26061))

(declare-fun d!26063 () Bool)

(declare-fun e!63854 () Bool)

(assert (=> d!26063 e!63854))

(declare-fun res!49315 () Bool)

(assert (=> d!26063 (=> res!49315 e!63854)))

(declare-fun lt!49171 () Bool)

(assert (=> d!26063 (= res!49315 (not lt!49171))))

(declare-fun lt!49173 () Bool)

(assert (=> d!26063 (= lt!49171 lt!49173)))

(declare-fun lt!49170 () Unit!2937)

(declare-fun e!63855 () Unit!2937)

(assert (=> d!26063 (= lt!49170 e!63855)))

(declare-fun c!16586 () Bool)

(assert (=> d!26063 (= c!16586 lt!49173)))

(assert (=> d!26063 (= lt!49173 (containsKey!154 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26063 (= (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49171)))

(declare-fun b!97927 () Bool)

(declare-fun lt!49172 () Unit!2937)

(assert (=> b!97927 (= e!63855 lt!49172)))

(assert (=> b!97927 (= lt!49172 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!97927 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!97928 () Bool)

(declare-fun Unit!2954 () Unit!2937)

(assert (=> b!97928 (= e!63855 Unit!2954)))

(declare-fun b!97929 () Bool)

(assert (=> b!97929 (= e!63854 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (= (and d!26063 c!16586) b!97927))

(assert (= (and d!26063 (not c!16586)) b!97928))

(assert (= (and d!26063 (not res!49315)) b!97929))

(assert (=> d!26063 m!106647))

(declare-fun m!107109 () Bool)

(assert (=> d!26063 m!107109))

(assert (=> b!97927 m!106647))

(declare-fun m!107111 () Bool)

(assert (=> b!97927 m!107111))

(assert (=> b!97927 m!106647))

(declare-fun m!107113 () Bool)

(assert (=> b!97927 m!107113))

(assert (=> b!97927 m!107113))

(declare-fun m!107115 () Bool)

(assert (=> b!97927 m!107115))

(assert (=> b!97929 m!106647))

(assert (=> b!97929 m!107113))

(assert (=> b!97929 m!107113))

(assert (=> b!97929 m!107115))

(assert (=> b!97750 d!26063))

(declare-fun b!97930 () Bool)

(declare-fun e!63860 () Bool)

(declare-fun call!9995 () Bool)

(assert (=> b!97930 (= e!63860 (not call!9995))))

(declare-fun b!97931 () Bool)

(declare-fun e!63857 () ListLongMap!1535)

(declare-fun call!9996 () ListLongMap!1535)

(assert (=> b!97931 (= e!63857 call!9996)))

(declare-fun bm!9988 () Bool)

(declare-fun lt!49194 () ListLongMap!1535)

(assert (=> bm!9988 (= call!9995 (contains!800 lt!49194 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9989 () Bool)

(declare-fun call!9994 () Bool)

(assert (=> bm!9989 (= call!9994 (contains!800 lt!49194 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97932 () Bool)

(declare-fun res!49322 () Bool)

(declare-fun e!63867 () Bool)

(assert (=> b!97932 (=> (not res!49322) (not e!63867))))

(declare-fun e!63861 () Bool)

(assert (=> b!97932 (= res!49322 e!63861)))

(declare-fun res!49324 () Bool)

(assert (=> b!97932 (=> res!49324 e!63861)))

(declare-fun e!63859 () Bool)

(assert (=> b!97932 (= res!49324 (not e!63859))))

(declare-fun res!49321 () Bool)

(assert (=> b!97932 (=> (not res!49321) (not e!63859))))

(assert (=> b!97932 (= res!49321 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97933 () Bool)

(declare-fun res!49318 () Bool)

(assert (=> b!97933 (=> (not res!49318) (not e!63867))))

(declare-fun e!63865 () Bool)

(assert (=> b!97933 (= res!49318 e!63865)))

(declare-fun c!16589 () Bool)

(assert (=> b!97933 (= c!16589 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!9990 () Bool)

(declare-fun call!9997 () ListLongMap!1535)

(assert (=> bm!9990 (= call!9996 call!9997)))

(declare-fun b!97934 () Bool)

(declare-fun e!63858 () ListLongMap!1535)

(assert (=> b!97934 (= e!63858 call!9996)))

(declare-fun b!97935 () Bool)

(declare-fun e!63863 () Bool)

(assert (=> b!97935 (= e!63863 (= (apply!92 lt!49194 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97935 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (_values!2464 newMap!16))))))

(assert (=> b!97935 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!97936 () Bool)

(declare-fun e!63868 () Bool)

(assert (=> b!97936 (= e!63868 (= (apply!92 lt!49194 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!97937 () Bool)

(declare-fun e!63856 () Unit!2937)

(declare-fun lt!49195 () Unit!2937)

(assert (=> b!97937 (= e!63856 lt!49195)))

(declare-fun lt!49178 () ListLongMap!1535)

(assert (=> b!97937 (= lt!49178 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49179 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49179 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49188 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49188 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49191 () Unit!2937)

(assert (=> b!97937 (= lt!49191 (addStillContains!68 lt!49178 lt!49179 (zeroValue!2364 newMap!16) lt!49188))))

(assert (=> b!97937 (contains!800 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) lt!49188)))

(declare-fun lt!49177 () Unit!2937)

(assert (=> b!97937 (= lt!49177 lt!49191)))

(declare-fun lt!49190 () ListLongMap!1535)

(assert (=> b!97937 (= lt!49190 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49187 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49187 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49189 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49189 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49180 () Unit!2937)

(assert (=> b!97937 (= lt!49180 (addApplyDifferent!68 lt!49190 lt!49187 (minValue!2364 newMap!16) lt!49189))))

(assert (=> b!97937 (= (apply!92 (+!135 lt!49190 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) lt!49189) (apply!92 lt!49190 lt!49189))))

(declare-fun lt!49175 () Unit!2937)

(assert (=> b!97937 (= lt!49175 lt!49180)))

(declare-fun lt!49183 () ListLongMap!1535)

(assert (=> b!97937 (= lt!49183 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49182 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49182 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49184 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49184 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49176 () Unit!2937)

(assert (=> b!97937 (= lt!49176 (addApplyDifferent!68 lt!49183 lt!49182 (zeroValue!2364 newMap!16) lt!49184))))

(assert (=> b!97937 (= (apply!92 (+!135 lt!49183 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) lt!49184) (apply!92 lt!49183 lt!49184))))

(declare-fun lt!49192 () Unit!2937)

(assert (=> b!97937 (= lt!49192 lt!49176)))

(declare-fun lt!49186 () ListLongMap!1535)

(assert (=> b!97937 (= lt!49186 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49193 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49193 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49185 () (_ BitVec 64))

(assert (=> b!97937 (= lt!49185 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97937 (= lt!49195 (addApplyDifferent!68 lt!49186 lt!49193 (minValue!2364 newMap!16) lt!49185))))

(assert (=> b!97937 (= (apply!92 (+!135 lt!49186 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) lt!49185) (apply!92 lt!49186 lt!49185))))

(declare-fun b!97938 () Bool)

(declare-fun e!63866 () ListLongMap!1535)

(assert (=> b!97938 (= e!63866 (+!135 call!9997 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!97939 () Bool)

(declare-fun call!9993 () ListLongMap!1535)

(assert (=> b!97939 (= e!63858 call!9993)))

(declare-fun b!97940 () Bool)

(declare-fun e!63862 () Bool)

(assert (=> b!97940 (= e!63862 (= (apply!92 lt!49194 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!9992 () ListLongMap!1535)

(declare-fun call!9991 () ListLongMap!1535)

(declare-fun c!16588 () Bool)

(declare-fun bm!9992 () Bool)

(declare-fun c!16590 () Bool)

(assert (=> bm!9992 (= call!9997 (+!135 (ite c!16590 call!9991 (ite c!16588 call!9992 call!9993)) (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!97941 () Bool)

(assert (=> b!97941 (= e!63860 e!63868)))

(declare-fun res!49319 () Bool)

(assert (=> b!97941 (= res!49319 call!9995)))

(assert (=> b!97941 (=> (not res!49319) (not e!63868))))

(declare-fun b!97942 () Bool)

(declare-fun Unit!2955 () Unit!2937)

(assert (=> b!97942 (= e!63856 Unit!2955)))

(declare-fun bm!9993 () Bool)

(assert (=> bm!9993 (= call!9992 call!9991)))

(declare-fun b!97943 () Bool)

(assert (=> b!97943 (= e!63866 e!63857)))

(assert (=> b!97943 (= c!16588 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97944 () Bool)

(assert (=> b!97944 (= e!63865 (not call!9994))))

(declare-fun b!97945 () Bool)

(declare-fun c!16592 () Bool)

(assert (=> b!97945 (= c!16592 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97945 (= e!63857 e!63858)))

(declare-fun b!97946 () Bool)

(assert (=> b!97946 (= e!63865 e!63862)))

(declare-fun res!49323 () Bool)

(assert (=> b!97946 (= res!49323 call!9994)))

(assert (=> b!97946 (=> (not res!49323) (not e!63862))))

(declare-fun b!97947 () Bool)

(assert (=> b!97947 (= e!63867 e!63860)))

(declare-fun c!16591 () Bool)

(assert (=> b!97947 (= c!16591 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97948 () Bool)

(assert (=> b!97948 (= e!63859 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9991 () Bool)

(assert (=> bm!9991 (= call!9991 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26065 () Bool)

(assert (=> d!26065 e!63867))

(declare-fun res!49320 () Bool)

(assert (=> d!26065 (=> (not res!49320) (not e!63867))))

(assert (=> d!26065 (= res!49320 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49181 () ListLongMap!1535)

(assert (=> d!26065 (= lt!49194 lt!49181)))

(declare-fun lt!49174 () Unit!2937)

(assert (=> d!26065 (= lt!49174 e!63856)))

(declare-fun c!16587 () Bool)

(declare-fun e!63864 () Bool)

(assert (=> d!26065 (= c!16587 e!63864)))

(declare-fun res!49317 () Bool)

(assert (=> d!26065 (=> (not res!49317) (not e!63864))))

(assert (=> d!26065 (= res!49317 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26065 (= lt!49181 e!63866)))

(assert (=> d!26065 (= c!16590 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26065 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26065 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49194)))

(declare-fun b!97949 () Bool)

(assert (=> b!97949 (= e!63864 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9994 () Bool)

(assert (=> bm!9994 (= call!9993 call!9992)))

(declare-fun b!97950 () Bool)

(assert (=> b!97950 (= e!63861 e!63863)))

(declare-fun res!49316 () Bool)

(assert (=> b!97950 (=> (not res!49316) (not e!63863))))

(assert (=> b!97950 (= res!49316 (contains!800 lt!49194 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97950 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26065 c!16590) b!97938))

(assert (= (and d!26065 (not c!16590)) b!97943))

(assert (= (and b!97943 c!16588) b!97931))

(assert (= (and b!97943 (not c!16588)) b!97945))

(assert (= (and b!97945 c!16592) b!97934))

(assert (= (and b!97945 (not c!16592)) b!97939))

(assert (= (or b!97934 b!97939) bm!9994))

(assert (= (or b!97931 bm!9994) bm!9993))

(assert (= (or b!97931 b!97934) bm!9990))

(assert (= (or b!97938 bm!9993) bm!9991))

(assert (= (or b!97938 bm!9990) bm!9992))

(assert (= (and d!26065 res!49317) b!97949))

(assert (= (and d!26065 c!16587) b!97937))

(assert (= (and d!26065 (not c!16587)) b!97942))

(assert (= (and d!26065 res!49320) b!97932))

(assert (= (and b!97932 res!49321) b!97948))

(assert (= (and b!97932 (not res!49324)) b!97950))

(assert (= (and b!97950 res!49316) b!97935))

(assert (= (and b!97932 res!49322) b!97933))

(assert (= (and b!97933 c!16589) b!97946))

(assert (= (and b!97933 (not c!16589)) b!97944))

(assert (= (and b!97946 res!49323) b!97940))

(assert (= (or b!97946 b!97944) bm!9989))

(assert (= (and b!97933 res!49318) b!97947))

(assert (= (and b!97947 c!16591) b!97941))

(assert (= (and b!97947 (not c!16591)) b!97930))

(assert (= (and b!97941 res!49319) b!97936))

(assert (= (or b!97941 b!97930) bm!9988))

(declare-fun b_lambda!4351 () Bool)

(assert (=> (not b_lambda!4351) (not b!97935)))

(assert (=> b!97935 t!5542))

(declare-fun b_and!6015 () Bool)

(assert (= b_and!6011 (and (=> t!5542 result!3275) b_and!6015)))

(assert (=> b!97935 t!5544))

(declare-fun b_and!6017 () Bool)

(assert (= b_and!6013 (and (=> t!5544 result!3277) b_and!6017)))

(declare-fun m!107117 () Bool)

(assert (=> b!97936 m!107117))

(declare-fun m!107119 () Bool)

(assert (=> bm!9989 m!107119))

(assert (=> b!97950 m!106891))

(assert (=> b!97950 m!106891))

(declare-fun m!107121 () Bool)

(assert (=> b!97950 m!107121))

(assert (=> d!26065 m!106895))

(declare-fun m!107123 () Bool)

(assert (=> b!97940 m!107123))

(declare-fun m!107125 () Bool)

(assert (=> bm!9992 m!107125))

(assert (=> b!97949 m!106891))

(assert (=> b!97949 m!106891))

(assert (=> b!97949 m!106901))

(declare-fun m!107127 () Bool)

(assert (=> b!97938 m!107127))

(assert (=> b!97948 m!106891))

(assert (=> b!97948 m!106891))

(assert (=> b!97948 m!106901))

(declare-fun m!107129 () Bool)

(assert (=> b!97935 m!107129))

(assert (=> b!97935 m!106907))

(declare-fun m!107131 () Bool)

(assert (=> b!97935 m!107131))

(assert (=> b!97935 m!106891))

(declare-fun m!107133 () Bool)

(assert (=> b!97935 m!107133))

(assert (=> b!97935 m!106891))

(assert (=> b!97935 m!107129))

(assert (=> b!97935 m!106907))

(declare-fun m!107135 () Bool)

(assert (=> b!97937 m!107135))

(declare-fun m!107137 () Bool)

(assert (=> b!97937 m!107137))

(declare-fun m!107139 () Bool)

(assert (=> b!97937 m!107139))

(declare-fun m!107141 () Bool)

(assert (=> b!97937 m!107141))

(declare-fun m!107143 () Bool)

(assert (=> b!97937 m!107143))

(declare-fun m!107145 () Bool)

(assert (=> b!97937 m!107145))

(declare-fun m!107147 () Bool)

(assert (=> b!97937 m!107147))

(declare-fun m!107149 () Bool)

(assert (=> b!97937 m!107149))

(declare-fun m!107151 () Bool)

(assert (=> b!97937 m!107151))

(assert (=> b!97937 m!106891))

(assert (=> b!97937 m!107149))

(declare-fun m!107153 () Bool)

(assert (=> b!97937 m!107153))

(assert (=> b!97937 m!107137))

(declare-fun m!107155 () Bool)

(assert (=> b!97937 m!107155))

(declare-fun m!107157 () Bool)

(assert (=> b!97937 m!107157))

(declare-fun m!107159 () Bool)

(assert (=> b!97937 m!107159))

(declare-fun m!107161 () Bool)

(assert (=> b!97937 m!107161))

(assert (=> b!97937 m!107143))

(assert (=> b!97937 m!107135))

(declare-fun m!107163 () Bool)

(assert (=> b!97937 m!107163))

(declare-fun m!107165 () Bool)

(assert (=> b!97937 m!107165))

(assert (=> bm!9991 m!107153))

(declare-fun m!107167 () Bool)

(assert (=> bm!9988 m!107167))

(assert (=> b!97750 d!26065))

(declare-fun d!26067 () Bool)

(assert (=> d!26067 (= (get!1283 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97779 d!26067))

(declare-fun d!26069 () Bool)

(assert (=> d!26069 (= (apply!92 lt!48905 lt!48906) (get!1284 (getValueByKey!150 (toList!783 lt!48905) lt!48906)))))

(declare-fun bs!4038 () Bool)

(assert (= bs!4038 d!26069))

(declare-fun m!107169 () Bool)

(assert (=> bs!4038 m!107169))

(assert (=> bs!4038 m!107169))

(declare-fun m!107171 () Bool)

(assert (=> bs!4038 m!107171))

(assert (=> b!97631 d!26069))

(declare-fun d!26071 () Bool)

(assert (=> d!26071 (= (apply!92 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48906) (apply!92 lt!48905 lt!48906))))

(declare-fun lt!49198 () Unit!2937)

(declare-fun choose!591 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> d!26071 (= lt!49198 (choose!591 lt!48905 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48906))))

(declare-fun e!63871 () Bool)

(assert (=> d!26071 e!63871))

(declare-fun res!49327 () Bool)

(assert (=> d!26071 (=> (not res!49327) (not e!63871))))

(assert (=> d!26071 (= res!49327 (contains!800 lt!48905 lt!48906))))

(assert (=> d!26071 (= (addApplyDifferent!68 lt!48905 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48906) lt!49198)))

(declare-fun b!97954 () Bool)

(assert (=> b!97954 (= e!63871 (not (= lt!48906 lt!48904)))))

(assert (= (and d!26071 res!49327) b!97954))

(assert (=> d!26071 m!106809))

(declare-fun m!107173 () Bool)

(assert (=> d!26071 m!107173))

(assert (=> d!26071 m!106783))

(declare-fun m!107175 () Bool)

(assert (=> d!26071 m!107175))

(assert (=> d!26071 m!106783))

(assert (=> d!26071 m!106811))

(assert (=> b!97631 d!26071))

(declare-fun d!26073 () Bool)

(assert (=> d!26073 (= (apply!92 lt!48908 lt!48907) (get!1284 (getValueByKey!150 (toList!783 lt!48908) lt!48907)))))

(declare-fun bs!4039 () Bool)

(assert (= bs!4039 d!26073))

(declare-fun m!107177 () Bool)

(assert (=> bs!4039 m!107177))

(assert (=> bs!4039 m!107177))

(declare-fun m!107179 () Bool)

(assert (=> bs!4039 m!107179))

(assert (=> b!97631 d!26073))

(declare-fun d!26075 () Bool)

(declare-fun e!63874 () Bool)

(assert (=> d!26075 e!63874))

(declare-fun res!49333 () Bool)

(assert (=> d!26075 (=> (not res!49333) (not e!63874))))

(declare-fun lt!49208 () ListLongMap!1535)

(assert (=> d!26075 (= res!49333 (contains!800 lt!49208 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49210 () List!1580)

(assert (=> d!26075 (= lt!49208 (ListLongMap!1536 lt!49210))))

(declare-fun lt!49209 () Unit!2937)

(declare-fun lt!49207 () Unit!2937)

(assert (=> d!26075 (= lt!49209 lt!49207)))

(assert (=> d!26075 (= (getValueByKey!150 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!66 (List!1580 (_ BitVec 64) V!3155) Unit!2937)

(assert (=> d!26075 (= lt!49207 (lemmaContainsTupThenGetReturnValue!66 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun insertStrictlySorted!69 (List!1580 (_ BitVec 64) V!3155) List!1580)

(assert (=> d!26075 (= lt!49210 (insertStrictlySorted!69 (toList!783 lt!48912) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26075 (= (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49208)))

(declare-fun b!97959 () Bool)

(declare-fun res!49332 () Bool)

(assert (=> b!97959 (=> (not res!49332) (not e!63874))))

(assert (=> b!97959 (= res!49332 (= (getValueByKey!150 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!97960 () Bool)

(declare-fun contains!803 (List!1580 tuple2!2340) Bool)

(assert (=> b!97960 (= e!63874 (contains!803 (toList!783 lt!49208) (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26075 res!49333) b!97959))

(assert (= (and b!97959 res!49332) b!97960))

(declare-fun m!107181 () Bool)

(assert (=> d!26075 m!107181))

(declare-fun m!107183 () Bool)

(assert (=> d!26075 m!107183))

(declare-fun m!107185 () Bool)

(assert (=> d!26075 m!107185))

(declare-fun m!107187 () Bool)

(assert (=> d!26075 m!107187))

(declare-fun m!107189 () Bool)

(assert (=> b!97959 m!107189))

(declare-fun m!107191 () Bool)

(assert (=> b!97960 m!107191))

(assert (=> b!97631 d!26075))

(declare-fun d!26077 () Bool)

(assert (=> d!26077 (= (apply!92 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48906) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48906)))))

(declare-fun bs!4040 () Bool)

(assert (= bs!4040 d!26077))

(declare-fun m!107193 () Bool)

(assert (=> bs!4040 m!107193))

(assert (=> bs!4040 m!107193))

(declare-fun m!107195 () Bool)

(assert (=> bs!4040 m!107195))

(assert (=> b!97631 d!26077))

(declare-fun d!26079 () Bool)

(assert (=> d!26079 (= (apply!92 lt!48912 lt!48911) (get!1284 (getValueByKey!150 (toList!783 lt!48912) lt!48911)))))

(declare-fun bs!4041 () Bool)

(assert (= bs!4041 d!26079))

(declare-fun m!107197 () Bool)

(assert (=> bs!4041 m!107197))

(assert (=> bs!4041 m!107197))

(declare-fun m!107199 () Bool)

(assert (=> bs!4041 m!107199))

(assert (=> b!97631 d!26079))

(declare-fun d!26081 () Bool)

(declare-fun e!63875 () Bool)

(assert (=> d!26081 e!63875))

(declare-fun res!49335 () Bool)

(assert (=> d!26081 (=> (not res!49335) (not e!63875))))

(declare-fun lt!49212 () ListLongMap!1535)

(assert (=> d!26081 (= res!49335 (contains!800 lt!49212 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49214 () List!1580)

(assert (=> d!26081 (= lt!49212 (ListLongMap!1536 lt!49214))))

(declare-fun lt!49213 () Unit!2937)

(declare-fun lt!49211 () Unit!2937)

(assert (=> d!26081 (= lt!49213 lt!49211)))

(assert (=> d!26081 (= (getValueByKey!150 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26081 (= lt!49211 (lemmaContainsTupThenGetReturnValue!66 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26081 (= lt!49214 (insertStrictlySorted!69 (toList!783 lt!48900) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26081 (= (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49212)))

(declare-fun b!97961 () Bool)

(declare-fun res!49334 () Bool)

(assert (=> b!97961 (=> (not res!49334) (not e!63875))))

(assert (=> b!97961 (= res!49334 (= (getValueByKey!150 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!97962 () Bool)

(assert (=> b!97962 (= e!63875 (contains!803 (toList!783 lt!49212) (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26081 res!49335) b!97961))

(assert (= (and b!97961 res!49334) b!97962))

(declare-fun m!107201 () Bool)

(assert (=> d!26081 m!107201))

(declare-fun m!107203 () Bool)

(assert (=> d!26081 m!107203))

(declare-fun m!107205 () Bool)

(assert (=> d!26081 m!107205))

(declare-fun m!107207 () Bool)

(assert (=> d!26081 m!107207))

(declare-fun m!107209 () Bool)

(assert (=> b!97961 m!107209))

(declare-fun m!107211 () Bool)

(assert (=> b!97962 m!107211))

(assert (=> b!97631 d!26081))

(declare-fun d!26083 () Bool)

(declare-fun e!63876 () Bool)

(assert (=> d!26083 e!63876))

(declare-fun res!49336 () Bool)

(assert (=> d!26083 (=> res!49336 e!63876)))

(declare-fun lt!49216 () Bool)

(assert (=> d!26083 (= res!49336 (not lt!49216))))

(declare-fun lt!49218 () Bool)

(assert (=> d!26083 (= lt!49216 lt!49218)))

(declare-fun lt!49215 () Unit!2937)

(declare-fun e!63877 () Unit!2937)

(assert (=> d!26083 (= lt!49215 e!63877)))

(declare-fun c!16593 () Bool)

(assert (=> d!26083 (= c!16593 lt!49218)))

(assert (=> d!26083 (= lt!49218 (containsKey!154 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(assert (=> d!26083 (= (contains!800 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48910) lt!49216)))

(declare-fun b!97963 () Bool)

(declare-fun lt!49217 () Unit!2937)

(assert (=> b!97963 (= e!63877 lt!49217)))

(assert (=> b!97963 (= lt!49217 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(assert (=> b!97963 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(declare-fun b!97964 () Bool)

(declare-fun Unit!2956 () Unit!2937)

(assert (=> b!97964 (= e!63877 Unit!2956)))

(declare-fun b!97965 () Bool)

(assert (=> b!97965 (= e!63876 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910)))))

(assert (= (and d!26083 c!16593) b!97963))

(assert (= (and d!26083 (not c!16593)) b!97964))

(assert (= (and d!26083 (not res!49336)) b!97965))

(declare-fun m!107213 () Bool)

(assert (=> d!26083 m!107213))

(declare-fun m!107215 () Bool)

(assert (=> b!97963 m!107215))

(declare-fun m!107217 () Bool)

(assert (=> b!97963 m!107217))

(assert (=> b!97963 m!107217))

(declare-fun m!107219 () Bool)

(assert (=> b!97963 m!107219))

(assert (=> b!97965 m!107217))

(assert (=> b!97965 m!107217))

(assert (=> b!97965 m!107219))

(assert (=> b!97631 d!26083))

(declare-fun d!26085 () Bool)

(assert (=> d!26085 (contains!800 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48910)))

(declare-fun lt!49221 () Unit!2937)

(declare-fun choose!592 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> d!26085 (= lt!49221 (choose!592 lt!48900 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48910))))

(assert (=> d!26085 (contains!800 lt!48900 lt!48910)))

(assert (=> d!26085 (= (addStillContains!68 lt!48900 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48910) lt!49221)))

(declare-fun bs!4042 () Bool)

(assert (= bs!4042 d!26085))

(assert (=> bs!4042 m!106785))

(assert (=> bs!4042 m!106785))

(assert (=> bs!4042 m!106803))

(declare-fun m!107221 () Bool)

(assert (=> bs!4042 m!107221))

(declare-fun m!107223 () Bool)

(assert (=> bs!4042 m!107223))

(assert (=> b!97631 d!26085))

(declare-fun d!26087 () Bool)

(declare-fun e!63878 () Bool)

(assert (=> d!26087 e!63878))

(declare-fun res!49338 () Bool)

(assert (=> d!26087 (=> (not res!49338) (not e!63878))))

(declare-fun lt!49223 () ListLongMap!1535)

(assert (=> d!26087 (= res!49338 (contains!800 lt!49223 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49225 () List!1580)

(assert (=> d!26087 (= lt!49223 (ListLongMap!1536 lt!49225))))

(declare-fun lt!49224 () Unit!2937)

(declare-fun lt!49222 () Unit!2937)

(assert (=> d!26087 (= lt!49224 lt!49222)))

(assert (=> d!26087 (= (getValueByKey!150 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26087 (= lt!49222 (lemmaContainsTupThenGetReturnValue!66 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26087 (= lt!49225 (insertStrictlySorted!69 (toList!783 lt!48908) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26087 (= (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49223)))

(declare-fun b!97967 () Bool)

(declare-fun res!49337 () Bool)

(assert (=> b!97967 (=> (not res!49337) (not e!63878))))

(assert (=> b!97967 (= res!49337 (= (getValueByKey!150 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!97968 () Bool)

(assert (=> b!97968 (= e!63878 (contains!803 (toList!783 lt!49223) (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26087 res!49338) b!97967))

(assert (= (and b!97967 res!49337) b!97968))

(declare-fun m!107225 () Bool)

(assert (=> d!26087 m!107225))

(declare-fun m!107227 () Bool)

(assert (=> d!26087 m!107227))

(declare-fun m!107229 () Bool)

(assert (=> d!26087 m!107229))

(declare-fun m!107231 () Bool)

(assert (=> d!26087 m!107231))

(declare-fun m!107233 () Bool)

(assert (=> b!97967 m!107233))

(declare-fun m!107235 () Bool)

(assert (=> b!97968 m!107235))

(assert (=> b!97631 d!26087))

(declare-fun d!26089 () Bool)

(assert (=> d!26089 (= (apply!92 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48911) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48911)))))

(declare-fun bs!4043 () Bool)

(assert (= bs!4043 d!26089))

(declare-fun m!107237 () Bool)

(assert (=> bs!4043 m!107237))

(assert (=> bs!4043 m!107237))

(declare-fun m!107239 () Bool)

(assert (=> bs!4043 m!107239))

(assert (=> b!97631 d!26089))

(declare-fun d!26091 () Bool)

(assert (=> d!26091 (= (apply!92 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48907) (apply!92 lt!48908 lt!48907))))

(declare-fun lt!49226 () Unit!2937)

(assert (=> d!26091 (= lt!49226 (choose!591 lt!48908 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48907))))

(declare-fun e!63879 () Bool)

(assert (=> d!26091 e!63879))

(declare-fun res!49339 () Bool)

(assert (=> d!26091 (=> (not res!49339) (not e!63879))))

(assert (=> d!26091 (= res!49339 (contains!800 lt!48908 lt!48907))))

(assert (=> d!26091 (= (addApplyDifferent!68 lt!48908 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48907) lt!49226)))

(declare-fun b!97969 () Bool)

(assert (=> b!97969 (= e!63879 (not (= lt!48907 lt!48915)))))

(assert (= (and d!26091 res!49339) b!97969))

(assert (=> d!26091 m!106805))

(declare-fun m!107241 () Bool)

(assert (=> d!26091 m!107241))

(assert (=> d!26091 m!106791))

(declare-fun m!107243 () Bool)

(assert (=> d!26091 m!107243))

(assert (=> d!26091 m!106791))

(assert (=> d!26091 m!106793))

(assert (=> b!97631 d!26091))

(declare-fun d!26093 () Bool)

(declare-fun e!63880 () Bool)

(assert (=> d!26093 e!63880))

(declare-fun res!49341 () Bool)

(assert (=> d!26093 (=> (not res!49341) (not e!63880))))

(declare-fun lt!49228 () ListLongMap!1535)

(assert (=> d!26093 (= res!49341 (contains!800 lt!49228 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49230 () List!1580)

(assert (=> d!26093 (= lt!49228 (ListLongMap!1536 lt!49230))))

(declare-fun lt!49229 () Unit!2937)

(declare-fun lt!49227 () Unit!2937)

(assert (=> d!26093 (= lt!49229 lt!49227)))

(assert (=> d!26093 (= (getValueByKey!150 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26093 (= lt!49227 (lemmaContainsTupThenGetReturnValue!66 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26093 (= lt!49230 (insertStrictlySorted!69 (toList!783 lt!48905) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26093 (= (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49228)))

(declare-fun b!97970 () Bool)

(declare-fun res!49340 () Bool)

(assert (=> b!97970 (=> (not res!49340) (not e!63880))))

(assert (=> b!97970 (= res!49340 (= (getValueByKey!150 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!97971 () Bool)

(assert (=> b!97971 (= e!63880 (contains!803 (toList!783 lt!49228) (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26093 res!49341) b!97970))

(assert (= (and b!97970 res!49340) b!97971))

(declare-fun m!107245 () Bool)

(assert (=> d!26093 m!107245))

(declare-fun m!107247 () Bool)

(assert (=> d!26093 m!107247))

(declare-fun m!107249 () Bool)

(assert (=> d!26093 m!107249))

(declare-fun m!107251 () Bool)

(assert (=> d!26093 m!107251))

(declare-fun m!107253 () Bool)

(assert (=> b!97970 m!107253))

(declare-fun m!107255 () Bool)

(assert (=> b!97971 m!107255))

(assert (=> b!97631 d!26093))

(declare-fun b!97996 () Bool)

(declare-fun e!63899 () Bool)

(declare-fun e!63895 () Bool)

(assert (=> b!97996 (= e!63899 e!63895)))

(declare-fun c!16603 () Bool)

(declare-fun e!63900 () Bool)

(assert (=> b!97996 (= c!16603 e!63900)))

(declare-fun res!49352 () Bool)

(assert (=> b!97996 (=> (not res!49352) (not e!63900))))

(assert (=> b!97996 (= res!49352 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!97997 () Bool)

(declare-fun e!63897 () ListLongMap!1535)

(declare-fun call!10000 () ListLongMap!1535)

(assert (=> b!97997 (= e!63897 call!10000)))

(declare-fun b!97998 () Bool)

(declare-fun e!63901 () ListLongMap!1535)

(assert (=> b!97998 (= e!63901 (ListLongMap!1536 Nil!1577))))

(declare-fun b!97999 () Bool)

(declare-fun lt!49248 () Unit!2937)

(declare-fun lt!49247 () Unit!2937)

(assert (=> b!97999 (= lt!49248 lt!49247)))

(declare-fun lt!49250 () (_ BitVec 64))

(declare-fun lt!49249 () (_ BitVec 64))

(declare-fun lt!49245 () V!3155)

(declare-fun lt!49246 () ListLongMap!1535)

(assert (=> b!97999 (not (contains!800 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245)) lt!49250))))

(declare-fun addStillNotContains!40 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> b!97999 (= lt!49247 (addStillNotContains!40 lt!49246 lt!49249 lt!49245 lt!49250))))

(assert (=> b!97999 (= lt!49250 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!97999 (= lt!49245 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!97999 (= lt!49249 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97999 (= lt!49246 call!10000)))

(assert (=> b!97999 (= e!63897 (+!135 call!10000 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!63896 () Bool)

(declare-fun lt!49251 () ListLongMap!1535)

(declare-fun b!98000 () Bool)

(assert (=> b!98000 (= e!63896 (= lt!49251 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98001 () Bool)

(assert (=> b!98001 (= e!63900 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98001 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun d!26095 () Bool)

(assert (=> d!26095 e!63899))

(declare-fun res!49353 () Bool)

(assert (=> d!26095 (=> (not res!49353) (not e!63899))))

(assert (=> d!26095 (= res!49353 (not (contains!800 lt!49251 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26095 (= lt!49251 e!63901)))

(declare-fun c!16604 () Bool)

(assert (=> d!26095 (= c!16604 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26095 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992))))))

(assert (=> d!26095 (= (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) lt!49251)))

(declare-fun b!98002 () Bool)

(assert (=> b!98002 (= e!63901 e!63897)))

(declare-fun c!16605 () Bool)

(assert (=> b!98002 (= c!16605 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98003 () Bool)

(assert (=> b!98003 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> b!98003 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!63898 () Bool)

(assert (=> b!98003 (= e!63898 (= (apply!92 lt!49251 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98004 () Bool)

(declare-fun res!49350 () Bool)

(assert (=> b!98004 (=> (not res!49350) (not e!63899))))

(assert (=> b!98004 (= res!49350 (not (contains!800 lt!49251 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98005 () Bool)

(assert (=> b!98005 (= e!63895 e!63898)))

(assert (=> b!98005 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun res!49351 () Bool)

(assert (=> b!98005 (= res!49351 (contains!800 lt!49251 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98005 (=> (not res!49351) (not e!63898))))

(declare-fun b!98006 () Bool)

(declare-fun isEmpty!356 (ListLongMap!1535) Bool)

(assert (=> b!98006 (= e!63896 (isEmpty!356 lt!49251))))

(declare-fun bm!9997 () Bool)

(assert (=> bm!9997 (= call!10000 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!98007 () Bool)

(assert (=> b!98007 (= e!63895 e!63896)))

(declare-fun c!16602 () Bool)

(assert (=> b!98007 (= c!16602 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26095 c!16604) b!97998))

(assert (= (and d!26095 (not c!16604)) b!98002))

(assert (= (and b!98002 c!16605) b!97999))

(assert (= (and b!98002 (not c!16605)) b!97997))

(assert (= (or b!97999 b!97997) bm!9997))

(assert (= (and d!26095 res!49353) b!98004))

(assert (= (and b!98004 res!49350) b!97996))

(assert (= (and b!97996 res!49352) b!98001))

(assert (= (and b!97996 c!16603) b!98005))

(assert (= (and b!97996 (not c!16603)) b!98007))

(assert (= (and b!98005 res!49351) b!98003))

(assert (= (and b!98007 c!16602) b!98000))

(assert (= (and b!98007 (not c!16602)) b!98006))

(declare-fun b_lambda!4353 () Bool)

(assert (=> (not b_lambda!4353) (not b!97999)))

(assert (=> b!97999 t!5531))

(declare-fun b_and!6019 () Bool)

(assert (= b_and!6015 (and (=> t!5531 result!3261) b_and!6019)))

(assert (=> b!97999 t!5533))

(declare-fun b_and!6021 () Bool)

(assert (= b_and!6017 (and (=> t!5533 result!3265) b_and!6021)))

(declare-fun b_lambda!4355 () Bool)

(assert (=> (not b_lambda!4355) (not b!98003)))

(assert (=> b!98003 t!5531))

(declare-fun b_and!6023 () Bool)

(assert (= b_and!6019 (and (=> t!5531 result!3261) b_and!6023)))

(assert (=> b!98003 t!5533))

(declare-fun b_and!6025 () Bool)

(assert (= b_and!6021 (and (=> t!5533 result!3265) b_and!6025)))

(declare-fun m!107257 () Bool)

(assert (=> b!98004 m!107257))

(assert (=> b!98002 m!106739))

(assert (=> b!98002 m!106739))

(assert (=> b!98002 m!106773))

(assert (=> b!98005 m!106739))

(assert (=> b!98005 m!106739))

(declare-fun m!107259 () Bool)

(assert (=> b!98005 m!107259))

(declare-fun m!107261 () Bool)

(assert (=> b!98006 m!107261))

(declare-fun m!107263 () Bool)

(assert (=> bm!9997 m!107263))

(assert (=> b!98001 m!106739))

(assert (=> b!98001 m!106739))

(assert (=> b!98001 m!106773))

(assert (=> b!98003 m!106739))

(assert (=> b!98003 m!106671))

(assert (=> b!98003 m!106777))

(assert (=> b!98003 m!106739))

(declare-fun m!107265 () Bool)

(assert (=> b!98003 m!107265))

(assert (=> b!98003 m!106777))

(assert (=> b!98003 m!106671))

(assert (=> b!98003 m!106779))

(declare-fun m!107267 () Bool)

(assert (=> d!26095 m!107267))

(assert (=> d!26095 m!106681))

(assert (=> b!98000 m!107263))

(assert (=> b!97999 m!106739))

(assert (=> b!97999 m!106671))

(assert (=> b!97999 m!106777))

(declare-fun m!107269 () Bool)

(assert (=> b!97999 m!107269))

(declare-fun m!107271 () Bool)

(assert (=> b!97999 m!107271))

(assert (=> b!97999 m!106777))

(assert (=> b!97999 m!106671))

(assert (=> b!97999 m!106779))

(declare-fun m!107273 () Bool)

(assert (=> b!97999 m!107273))

(assert (=> b!97999 m!107269))

(declare-fun m!107275 () Bool)

(assert (=> b!97999 m!107275))

(assert (=> b!97631 d!26095))

(declare-fun d!26097 () Bool)

(assert (=> d!26097 (= (apply!92 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48907) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48907)))))

(declare-fun bs!4044 () Bool)

(assert (= bs!4044 d!26097))

(declare-fun m!107277 () Bool)

(assert (=> bs!4044 m!107277))

(assert (=> bs!4044 m!107277))

(declare-fun m!107279 () Bool)

(assert (=> bs!4044 m!107279))

(assert (=> b!97631 d!26097))

(declare-fun d!26099 () Bool)

(assert (=> d!26099 (= (apply!92 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48911) (apply!92 lt!48912 lt!48911))))

(declare-fun lt!49252 () Unit!2937)

(assert (=> d!26099 (= lt!49252 (choose!591 lt!48912 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48911))))

(declare-fun e!63902 () Bool)

(assert (=> d!26099 e!63902))

(declare-fun res!49354 () Bool)

(assert (=> d!26099 (=> (not res!49354) (not e!63902))))

(assert (=> d!26099 (= res!49354 (contains!800 lt!48912 lt!48911))))

(assert (=> d!26099 (= (addApplyDifferent!68 lt!48912 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48911) lt!49252)))

(declare-fun b!98008 () Bool)

(assert (=> b!98008 (= e!63902 (not (= lt!48911 lt!48909)))))

(assert (= (and d!26099 res!49354) b!98008))

(assert (=> d!26099 m!106789))

(declare-fun m!107281 () Bool)

(assert (=> d!26099 m!107281))

(assert (=> d!26099 m!106797))

(declare-fun m!107283 () Bool)

(assert (=> d!26099 m!107283))

(assert (=> d!26099 m!106797))

(assert (=> d!26099 m!106799))

(assert (=> b!97631 d!26099))

(declare-fun d!26101 () Bool)

(assert (=> d!26101 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49255 () Unit!2937)

(declare-fun choose!593 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2937)

(assert (=> d!26101 (= lt!49255 (choose!593 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26101 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26101 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49255)))

(declare-fun bs!4045 () Bool)

(assert (= bs!4045 d!26101))

(assert (=> bs!4045 m!106673))

(declare-fun m!107285 () Bool)

(assert (=> bs!4045 m!107285))

(assert (=> bs!4045 m!106761))

(declare-fun m!107287 () Bool)

(assert (=> bs!4045 m!107287))

(assert (=> bs!4045 m!106761))

(assert (=> bs!4045 m!106673))

(declare-fun m!107289 () Bool)

(assert (=> bs!4045 m!107289))

(assert (=> bs!4045 m!106895))

(assert (=> b!97736 d!26101))

(assert (=> b!97746 d!26065))

(declare-fun d!26103 () Bool)

(assert (=> d!26103 (= (apply!92 lt!48916 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1284 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4046 () Bool)

(assert (= bs!4046 d!26103))

(assert (=> bs!4046 m!106739))

(declare-fun m!107291 () Bool)

(assert (=> bs!4046 m!107291))

(assert (=> bs!4046 m!107291))

(declare-fun m!107293 () Bool)

(assert (=> bs!4046 m!107293))

(assert (=> b!97629 d!26103))

(declare-fun d!26105 () Bool)

(declare-fun c!16606 () Bool)

(assert (=> d!26105 (= c!16606 ((_ is ValueCellFull!972) (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63903 () V!3155)

(assert (=> d!26105 (= (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63903)))

(declare-fun b!98009 () Bool)

(assert (=> b!98009 (= e!63903 (get!1282 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98010 () Bool)

(assert (=> b!98010 (= e!63903 (get!1283 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26105 c!16606) b!98009))

(assert (= (and d!26105 (not c!16606)) b!98010))

(assert (=> b!98009 m!106777))

(assert (=> b!98009 m!106671))

(declare-fun m!107295 () Bool)

(assert (=> b!98009 m!107295))

(assert (=> b!98010 m!106777))

(assert (=> b!98010 m!106671))

(declare-fun m!107297 () Bool)

(assert (=> b!98010 m!107297))

(assert (=> b!97629 d!26105))

(declare-fun d!26107 () Bool)

(assert (=> d!26107 (= (inRange!0 (ite c!16544 (ite c!16547 (index!3156 lt!49003) (ite c!16550 (index!3155 lt!48994) (index!3158 lt!48994))) (ite c!16548 (index!3156 lt!49002) (ite c!16545 (index!3155 lt!49009) (index!3158 lt!49009)))) (mask!6578 newMap!16)) (and (bvsge (ite c!16544 (ite c!16547 (index!3156 lt!49003) (ite c!16550 (index!3155 lt!48994) (index!3158 lt!48994))) (ite c!16548 (index!3156 lt!49002) (ite c!16545 (index!3155 lt!49009) (index!3158 lt!49009)))) #b00000000000000000000000000000000) (bvslt (ite c!16544 (ite c!16547 (index!3156 lt!49003) (ite c!16550 (index!3155 lt!48994) (index!3158 lt!48994))) (ite c!16548 (index!3156 lt!49002) (ite c!16545 (index!3155 lt!49009) (index!3158 lt!49009)))) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9936 d!26107))

(assert (=> bm!9883 d!26095))

(declare-fun d!26109 () Bool)

(declare-fun e!63904 () Bool)

(assert (=> d!26109 e!63904))

(declare-fun res!49355 () Bool)

(assert (=> d!26109 (=> res!49355 e!63904)))

(declare-fun lt!49257 () Bool)

(assert (=> d!26109 (= res!49355 (not lt!49257))))

(declare-fun lt!49259 () Bool)

(assert (=> d!26109 (= lt!49257 lt!49259)))

(declare-fun lt!49256 () Unit!2937)

(declare-fun e!63905 () Unit!2937)

(assert (=> d!26109 (= lt!49256 e!63905)))

(declare-fun c!16607 () Bool)

(assert (=> d!26109 (= c!16607 lt!49259)))

(assert (=> d!26109 (= lt!49259 (containsKey!154 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26109 (= (contains!800 lt!48916 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49257)))

(declare-fun b!98011 () Bool)

(declare-fun lt!49258 () Unit!2937)

(assert (=> b!98011 (= e!63905 lt!49258)))

(assert (=> b!98011 (= lt!49258 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98011 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98012 () Bool)

(declare-fun Unit!2957 () Unit!2937)

(assert (=> b!98012 (= e!63905 Unit!2957)))

(declare-fun b!98013 () Bool)

(assert (=> b!98013 (= e!63904 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26109 c!16607) b!98011))

(assert (= (and d!26109 (not c!16607)) b!98012))

(assert (= (and d!26109 (not res!49355)) b!98013))

(declare-fun m!107299 () Bool)

(assert (=> d!26109 m!107299))

(declare-fun m!107301 () Bool)

(assert (=> b!98011 m!107301))

(declare-fun m!107303 () Bool)

(assert (=> b!98011 m!107303))

(assert (=> b!98011 m!107303))

(declare-fun m!107305 () Bool)

(assert (=> b!98011 m!107305))

(assert (=> b!98013 m!107303))

(assert (=> b!98013 m!107303))

(assert (=> b!98013 m!107305))

(assert (=> bm!9880 d!26109))

(declare-fun d!26111 () Bool)

(declare-fun res!49356 () Bool)

(declare-fun e!63906 () Bool)

(assert (=> d!26111 (=> res!49356 e!63906)))

(assert (=> d!26111 (= res!49356 (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26111 (= (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!63906)))

(declare-fun b!98014 () Bool)

(declare-fun e!63907 () Bool)

(assert (=> b!98014 (= e!63906 e!63907)))

(declare-fun res!49357 () Bool)

(assert (=> b!98014 (=> (not res!49357) (not e!63907))))

(assert (=> b!98014 (= res!49357 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98015 () Bool)

(assert (=> b!98015 (= e!63907 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26111 (not res!49356)) b!98014))

(assert (= (and b!98014 res!49357) b!98015))

(declare-fun m!107307 () Bool)

(assert (=> d!26111 m!107307))

(assert (=> b!98015 m!106647))

(declare-fun m!107309 () Bool)

(assert (=> b!98015 m!107309))

(assert (=> b!97551 d!26111))

(assert (=> b!97570 d!26045))

(declare-fun b!98028 () Bool)

(declare-fun e!63914 () SeekEntryResult!253)

(declare-fun lt!49267 () SeekEntryResult!253)

(assert (=> b!98028 (= e!63914 (MissingZero!253 (index!3157 lt!49267)))))

(declare-fun b!98029 () Bool)

(declare-fun e!63915 () SeekEntryResult!253)

(assert (=> b!98029 (= e!63915 Undefined!253)))

(declare-fun b!98030 () Bool)

(declare-fun c!16614 () Bool)

(declare-fun lt!49266 () (_ BitVec 64))

(assert (=> b!98030 (= c!16614 (= lt!49266 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63916 () SeekEntryResult!253)

(assert (=> b!98030 (= e!63916 e!63914)))

(declare-fun b!98031 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4241 (_ BitVec 32)) SeekEntryResult!253)

(assert (=> b!98031 (= e!63914 (seekKeyOrZeroReturnVacant!0 (x!12959 lt!49267) (index!3157 lt!49267) (index!3157 lt!49267) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun d!26113 () Bool)

(declare-fun lt!49268 () SeekEntryResult!253)

(assert (=> d!26113 (and (or ((_ is Undefined!253) lt!49268) (not ((_ is Found!253) lt!49268)) (and (bvsge (index!3156 lt!49268) #b00000000000000000000000000000000) (bvslt (index!3156 lt!49268) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49268) ((_ is Found!253) lt!49268) (not ((_ is MissingZero!253) lt!49268)) (and (bvsge (index!3155 lt!49268) #b00000000000000000000000000000000) (bvslt (index!3155 lt!49268) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49268) ((_ is Found!253) lt!49268) ((_ is MissingZero!253) lt!49268) (not ((_ is MissingVacant!253) lt!49268)) (and (bvsge (index!3158 lt!49268) #b00000000000000000000000000000000) (bvslt (index!3158 lt!49268) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49268) (ite ((_ is Found!253) lt!49268) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49268)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite ((_ is MissingZero!253) lt!49268) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49268)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!253) lt!49268) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49268)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26113 (= lt!49268 e!63915)))

(declare-fun c!16616 () Bool)

(assert (=> d!26113 (= c!16616 (and ((_ is Intermediate!253) lt!49267) (undefined!1065 lt!49267)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4241 (_ BitVec 32)) SeekEntryResult!253)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26113 (= lt!49267 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26113 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26113 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49268)))

(declare-fun b!98032 () Bool)

(assert (=> b!98032 (= e!63915 e!63916)))

(assert (=> b!98032 (= lt!49266 (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49267)))))

(declare-fun c!16615 () Bool)

(assert (=> b!98032 (= c!16615 (= lt!49266 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98033 () Bool)

(assert (=> b!98033 (= e!63916 (Found!253 (index!3157 lt!49267)))))

(assert (= (and d!26113 c!16616) b!98029))

(assert (= (and d!26113 (not c!16616)) b!98032))

(assert (= (and b!98032 c!16615) b!98033))

(assert (= (and b!98032 (not c!16615)) b!98030))

(assert (= (and b!98030 c!16614) b!98028))

(assert (= (and b!98030 (not c!16614)) b!98031))

(assert (=> b!98031 m!106647))

(declare-fun m!107311 () Bool)

(assert (=> b!98031 m!107311))

(declare-fun m!107313 () Bool)

(assert (=> d!26113 m!107313))

(assert (=> d!26113 m!106647))

(declare-fun m!107315 () Bool)

(assert (=> d!26113 m!107315))

(declare-fun m!107317 () Bool)

(assert (=> d!26113 m!107317))

(declare-fun m!107319 () Bool)

(assert (=> d!26113 m!107319))

(declare-fun m!107321 () Bool)

(assert (=> d!26113 m!107321))

(assert (=> d!26113 m!106895))

(assert (=> d!26113 m!106647))

(assert (=> d!26113 m!107313))

(declare-fun m!107323 () Bool)

(assert (=> b!98032 m!107323))

(assert (=> b!97771 d!26113))

(declare-fun b!98034 () Bool)

(declare-fun e!63920 () Bool)

(declare-fun e!63919 () Bool)

(assert (=> b!98034 (= e!63920 e!63919)))

(declare-fun c!16617 () Bool)

(assert (=> b!98034 (= c!16617 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9998 () Bool)

(declare-fun call!10001 () Bool)

(assert (=> bm!9998 (= call!10001 (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16617 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1578) Nil!1578)))))

(declare-fun b!98035 () Bool)

(declare-fun e!63918 () Bool)

(assert (=> b!98035 (= e!63918 (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26115 () Bool)

(declare-fun res!49358 () Bool)

(declare-fun e!63917 () Bool)

(assert (=> d!26115 (=> res!49358 e!63917)))

(assert (=> d!26115 (= res!49358 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26115 (= (arrayNoDuplicates!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 Nil!1578) e!63917)))

(declare-fun b!98036 () Bool)

(assert (=> b!98036 (= e!63917 e!63920)))

(declare-fun res!49360 () Bool)

(assert (=> b!98036 (=> (not res!49360) (not e!63920))))

(assert (=> b!98036 (= res!49360 (not e!63918))))

(declare-fun res!49359 () Bool)

(assert (=> b!98036 (=> (not res!49359) (not e!63918))))

(assert (=> b!98036 (= res!49359 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98037 () Bool)

(assert (=> b!98037 (= e!63919 call!10001)))

(declare-fun b!98038 () Bool)

(assert (=> b!98038 (= e!63919 call!10001)))

(assert (= (and d!26115 (not res!49358)) b!98036))

(assert (= (and b!98036 res!49359) b!98035))

(assert (= (and b!98036 res!49360) b!98034))

(assert (= (and b!98034 c!16617) b!98037))

(assert (= (and b!98034 (not c!16617)) b!98038))

(assert (= (or b!98037 b!98038) bm!9998))

(assert (=> b!98034 m!106891))

(assert (=> b!98034 m!106891))

(assert (=> b!98034 m!106901))

(assert (=> bm!9998 m!106891))

(declare-fun m!107325 () Bool)

(assert (=> bm!9998 m!107325))

(assert (=> b!98035 m!106891))

(assert (=> b!98035 m!106891))

(declare-fun m!107327 () Bool)

(assert (=> b!98035 m!107327))

(assert (=> b!98036 m!106891))

(assert (=> b!98036 m!106891))

(assert (=> b!98036 m!106901))

(assert (=> b!97581 d!26115))

(declare-fun b!98039 () Bool)

(declare-fun e!63924 () Bool)

(declare-fun e!63923 () Bool)

(assert (=> b!98039 (= e!63924 e!63923)))

(declare-fun c!16618 () Bool)

(assert (=> b!98039 (= c!16618 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!9999 () Bool)

(declare-fun call!10002 () Bool)

(assert (=> bm!9999 (= call!10002 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16618 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578))))))

(declare-fun b!98040 () Bool)

(declare-fun e!63922 () Bool)

(assert (=> b!98040 (= e!63922 (contains!802 (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!26117 () Bool)

(declare-fun res!49361 () Bool)

(declare-fun e!63921 () Bool)

(assert (=> d!26117 (=> res!49361 e!63921)))

(assert (=> d!26117 (= res!49361 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26117 (= (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) e!63921)))

(declare-fun b!98041 () Bool)

(assert (=> b!98041 (= e!63921 e!63924)))

(declare-fun res!49363 () Bool)

(assert (=> b!98041 (=> (not res!49363) (not e!63924))))

(assert (=> b!98041 (= res!49363 (not e!63922))))

(declare-fun res!49362 () Bool)

(assert (=> b!98041 (=> (not res!49362) (not e!63922))))

(assert (=> b!98041 (= res!49362 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98042 () Bool)

(assert (=> b!98042 (= e!63923 call!10002)))

(declare-fun b!98043 () Bool)

(assert (=> b!98043 (= e!63923 call!10002)))

(assert (= (and d!26117 (not res!49361)) b!98041))

(assert (= (and b!98041 res!49362) b!98040))

(assert (= (and b!98041 res!49363) b!98039))

(assert (= (and b!98039 c!16618) b!98042))

(assert (= (and b!98039 (not c!16618)) b!98043))

(assert (= (or b!98042 b!98043) bm!9999))

(declare-fun m!107329 () Bool)

(assert (=> b!98039 m!107329))

(assert (=> b!98039 m!107329))

(declare-fun m!107331 () Bool)

(assert (=> b!98039 m!107331))

(assert (=> bm!9999 m!107329))

(declare-fun m!107333 () Bool)

(assert (=> bm!9999 m!107333))

(assert (=> b!98040 m!107329))

(assert (=> b!98040 m!107329))

(declare-fun m!107335 () Bool)

(assert (=> b!98040 m!107335))

(assert (=> b!98041 m!107329))

(assert (=> b!98041 m!107329))

(assert (=> b!98041 m!107331))

(assert (=> bm!9865 d!26117))

(declare-fun d!26119 () Bool)

(declare-fun e!63925 () Bool)

(assert (=> d!26119 e!63925))

(declare-fun res!49365 () Bool)

(assert (=> d!26119 (=> (not res!49365) (not e!63925))))

(declare-fun lt!49270 () ListLongMap!1535)

(assert (=> d!26119 (= res!49365 (contains!800 lt!49270 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49272 () List!1580)

(assert (=> d!26119 (= lt!49270 (ListLongMap!1536 lt!49272))))

(declare-fun lt!49271 () Unit!2937)

(declare-fun lt!49269 () Unit!2937)

(assert (=> d!26119 (= lt!49271 lt!49269)))

(assert (=> d!26119 (= (getValueByKey!150 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26119 (= lt!49269 (lemmaContainsTupThenGetReturnValue!66 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26119 (= lt!49272 (insertStrictlySorted!69 (toList!783 e!63763) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26119 (= (+!135 e!63763 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49270)))

(declare-fun b!98044 () Bool)

(declare-fun res!49364 () Bool)

(assert (=> b!98044 (=> (not res!49364) (not e!63925))))

(assert (=> b!98044 (= res!49364 (= (getValueByKey!150 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98045 () Bool)

(assert (=> b!98045 (= e!63925 (contains!803 (toList!783 lt!49270) (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26119 res!49365) b!98044))

(assert (= (and b!98044 res!49364) b!98045))

(declare-fun m!107337 () Bool)

(assert (=> d!26119 m!107337))

(declare-fun m!107339 () Bool)

(assert (=> d!26119 m!107339))

(declare-fun m!107341 () Bool)

(assert (=> d!26119 m!107341))

(declare-fun m!107343 () Bool)

(assert (=> d!26119 m!107343))

(declare-fun m!107345 () Bool)

(assert (=> b!98044 m!107345))

(declare-fun m!107347 () Bool)

(assert (=> b!98045 m!107347))

(assert (=> bm!9956 d!26119))

(declare-fun bm!10002 () Bool)

(declare-fun call!10005 () (_ BitVec 32))

(assert (=> bm!10002 (= call!10005 (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98054 () Bool)

(declare-fun e!63930 () (_ BitVec 32))

(assert (=> b!98054 (= e!63930 #b00000000000000000000000000000000)))

(declare-fun b!98055 () Bool)

(declare-fun e!63931 () (_ BitVec 32))

(assert (=> b!98055 (= e!63930 e!63931)))

(declare-fun c!16624 () Bool)

(assert (=> b!98055 (= c!16624 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26121 () Bool)

(declare-fun lt!49275 () (_ BitVec 32))

(assert (=> d!26121 (and (bvsge lt!49275 #b00000000000000000000000000000000) (bvsle lt!49275 (bvsub (size!2265 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26121 (= lt!49275 e!63930)))

(declare-fun c!16623 () Bool)

(assert (=> d!26121 (= c!16623 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26121 (and (bvsle #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2265 (_keys!4171 newMap!16)) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26121 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) lt!49275)))

(declare-fun b!98056 () Bool)

(assert (=> b!98056 (= e!63931 call!10005)))

(declare-fun b!98057 () Bool)

(assert (=> b!98057 (= e!63931 (bvadd #b00000000000000000000000000000001 call!10005))))

(assert (= (and d!26121 c!16623) b!98054))

(assert (= (and d!26121 (not c!16623)) b!98055))

(assert (= (and b!98055 c!16624) b!98057))

(assert (= (and b!98055 (not c!16624)) b!98056))

(assert (= (or b!98057 b!98056) bm!10002))

(declare-fun m!107349 () Bool)

(assert (=> bm!10002 m!107349))

(assert (=> b!98055 m!106891))

(assert (=> b!98055 m!106891))

(assert (=> b!98055 m!106901))

(assert (=> b!97579 d!26121))

(declare-fun d!26123 () Bool)

(declare-fun e!63934 () Bool)

(assert (=> d!26123 e!63934))

(declare-fun res!49371 () Bool)

(assert (=> d!26123 (=> (not res!49371) (not e!63934))))

(declare-fun lt!49281 () SeekEntryResult!253)

(assert (=> d!26123 (= res!49371 ((_ is Found!253) lt!49281))))

(assert (=> d!26123 (= lt!49281 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun lt!49280 () Unit!2937)

(declare-fun choose!594 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2937)

(assert (=> d!26123 (= lt!49280 (choose!594 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26123 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26123 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) lt!49280)))

(declare-fun b!98062 () Bool)

(declare-fun res!49370 () Bool)

(assert (=> b!98062 (=> (not res!49370) (not e!63934))))

(assert (=> b!98062 (= res!49370 (inRange!0 (index!3156 lt!49281) (mask!6578 newMap!16)))))

(declare-fun b!98063 () Bool)

(assert (=> b!98063 (= e!63934 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49281)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!98063 (and (bvsge (index!3156 lt!49281) #b00000000000000000000000000000000) (bvslt (index!3156 lt!49281) (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26123 res!49371) b!98062))

(assert (= (and b!98062 res!49370) b!98063))

(assert (=> d!26123 m!106647))

(assert (=> d!26123 m!106835))

(assert (=> d!26123 m!106647))

(declare-fun m!107351 () Bool)

(assert (=> d!26123 m!107351))

(assert (=> d!26123 m!106895))

(declare-fun m!107353 () Bool)

(assert (=> b!98062 m!107353))

(declare-fun m!107355 () Bool)

(assert (=> b!98063 m!107355))

(assert (=> bm!9942 d!26123))

(declare-fun d!26125 () Bool)

(declare-fun res!49376 () Bool)

(declare-fun e!63939 () Bool)

(assert (=> d!26125 (=> res!49376 e!63939)))

(assert (=> d!26125 (= res!49376 (and ((_ is Cons!1576) (toList!783 lt!48820)) (= (_1!1181 (h!2170 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26125 (= (containsKey!154 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!63939)))

(declare-fun b!98068 () Bool)

(declare-fun e!63940 () Bool)

(assert (=> b!98068 (= e!63939 e!63940)))

(declare-fun res!49377 () Bool)

(assert (=> b!98068 (=> (not res!49377) (not e!63940))))

(assert (=> b!98068 (= res!49377 (and (or (not ((_ is Cons!1576) (toList!783 lt!48820))) (bvsle (_1!1181 (h!2170 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) ((_ is Cons!1576) (toList!783 lt!48820)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(declare-fun b!98069 () Bool)

(assert (=> b!98069 (= e!63940 (containsKey!154 (t!5534 (toList!783 lt!48820)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26125 (not res!49376)) b!98068))

(assert (= (and b!98068 res!49377) b!98069))

(assert (=> b!98069 m!106647))

(declare-fun m!107357 () Bool)

(assert (=> b!98069 m!107357))

(assert (=> d!26023 d!26125))

(assert (=> d!25997 d!26001))

(declare-fun d!26127 () Bool)

(assert (=> d!26127 (not (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26127 true))

(declare-fun _$68!91 () Unit!2937)

(assert (=> d!26127 (= (choose!68 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578)) _$68!91)))

(declare-fun bs!4047 () Bool)

(assert (= bs!4047 d!26127))

(assert (=> bs!4047 m!106647))

(assert (=> bs!4047 m!106659))

(assert (=> d!25997 d!26127))

(declare-fun d!26129 () Bool)

(declare-fun e!63941 () Bool)

(assert (=> d!26129 e!63941))

(declare-fun res!49379 () Bool)

(assert (=> d!26129 (=> (not res!49379) (not e!63941))))

(declare-fun lt!49283 () ListLongMap!1535)

(assert (=> d!26129 (= res!49379 (contains!800 lt!49283 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun lt!49285 () List!1580)

(assert (=> d!26129 (= lt!49283 (ListLongMap!1536 lt!49285))))

(declare-fun lt!49284 () Unit!2937)

(declare-fun lt!49282 () Unit!2937)

(assert (=> d!26129 (= lt!49284 lt!49282)))

(assert (=> d!26129 (= (getValueByKey!150 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (Some!155 (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26129 (= lt!49282 (lemmaContainsTupThenGetReturnValue!66 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26129 (= lt!49285 (insertStrictlySorted!69 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26129 (= (+!135 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49283)))

(declare-fun b!98070 () Bool)

(declare-fun res!49378 () Bool)

(assert (=> b!98070 (=> (not res!49378) (not e!63941))))

(assert (=> b!98070 (= res!49378 (= (getValueByKey!150 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (Some!155 (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun b!98071 () Bool)

(assert (=> b!98071 (= e!63941 (contains!803 (toList!783 lt!49283) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26129 res!49379) b!98070))

(assert (= (and b!98070 res!49378) b!98071))

(declare-fun m!107359 () Bool)

(assert (=> d!26129 m!107359))

(declare-fun m!107361 () Bool)

(assert (=> d!26129 m!107361))

(declare-fun m!107363 () Bool)

(assert (=> d!26129 m!107363))

(declare-fun m!107365 () Bool)

(assert (=> d!26129 m!107365))

(declare-fun m!107367 () Bool)

(assert (=> b!98070 m!107367))

(declare-fun m!107369 () Bool)

(assert (=> b!98071 m!107369))

(assert (=> bm!9884 d!26129))

(declare-fun b!98088 () Bool)

(declare-fun lt!49290 () SeekEntryResult!253)

(assert (=> b!98088 (and (bvsge (index!3155 lt!49290) #b00000000000000000000000000000000) (bvslt (index!3155 lt!49290) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49389 () Bool)

(assert (=> b!98088 (= res!49389 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49290)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63951 () Bool)

(assert (=> b!98088 (=> (not res!49389) (not e!63951))))

(declare-fun b!98089 () Bool)

(declare-fun res!49388 () Bool)

(declare-fun e!63952 () Bool)

(assert (=> b!98089 (=> (not res!49388) (not e!63952))))

(declare-fun call!10010 () Bool)

(assert (=> b!98089 (= res!49388 call!10010)))

(declare-fun e!63953 () Bool)

(assert (=> b!98089 (= e!63953 e!63952)))

(declare-fun b!98090 () Bool)

(assert (=> b!98090 (= e!63953 ((_ is Undefined!253) lt!49290))))

(declare-fun b!98091 () Bool)

(declare-fun e!63950 () Bool)

(assert (=> b!98091 (= e!63950 e!63953)))

(declare-fun c!16629 () Bool)

(assert (=> b!98091 (= c!16629 ((_ is MissingVacant!253) lt!49290))))

(declare-fun call!10011 () Bool)

(declare-fun bm!10007 () Bool)

(assert (=> bm!10007 (= call!10011 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98092 () Bool)

(assert (=> b!98092 (= e!63950 e!63951)))

(declare-fun res!49390 () Bool)

(assert (=> b!98092 (= res!49390 call!10010)))

(assert (=> b!98092 (=> (not res!49390) (not e!63951))))

(declare-fun d!26131 () Bool)

(assert (=> d!26131 e!63950))

(declare-fun c!16630 () Bool)

(assert (=> d!26131 (= c!16630 ((_ is MissingZero!253) lt!49290))))

(assert (=> d!26131 (= lt!49290 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun lt!49291 () Unit!2937)

(declare-fun choose!595 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2937)

(assert (=> d!26131 (= lt!49291 (choose!595 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26131 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26131 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) lt!49291)))

(declare-fun b!98093 () Bool)

(declare-fun res!49391 () Bool)

(assert (=> b!98093 (=> (not res!49391) (not e!63952))))

(assert (=> b!98093 (= res!49391 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49290)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98093 (and (bvsge (index!3158 lt!49290) #b00000000000000000000000000000000) (bvslt (index!3158 lt!49290) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98094 () Bool)

(assert (=> b!98094 (= e!63951 (not call!10011))))

(declare-fun b!98095 () Bool)

(assert (=> b!98095 (= e!63952 (not call!10011))))

(declare-fun bm!10008 () Bool)

(assert (=> bm!10008 (= call!10010 (inRange!0 (ite c!16630 (index!3155 lt!49290) (index!3158 lt!49290)) (mask!6578 newMap!16)))))

(assert (= (and d!26131 c!16630) b!98092))

(assert (= (and d!26131 (not c!16630)) b!98091))

(assert (= (and b!98092 res!49390) b!98088))

(assert (= (and b!98088 res!49389) b!98094))

(assert (= (and b!98091 c!16629) b!98089))

(assert (= (and b!98091 (not c!16629)) b!98090))

(assert (= (and b!98089 res!49388) b!98093))

(assert (= (and b!98093 res!49391) b!98095))

(assert (= (or b!98092 b!98089) bm!10008))

(assert (= (or b!98094 b!98095) bm!10007))

(assert (=> d!26131 m!106647))

(assert (=> d!26131 m!106835))

(assert (=> d!26131 m!106647))

(declare-fun m!107371 () Bool)

(assert (=> d!26131 m!107371))

(assert (=> d!26131 m!106895))

(declare-fun m!107373 () Bool)

(assert (=> b!98093 m!107373))

(declare-fun m!107375 () Bool)

(assert (=> bm!10008 m!107375))

(assert (=> bm!10007 m!106647))

(assert (=> bm!10007 m!106829))

(declare-fun m!107377 () Bool)

(assert (=> b!98088 m!107377))

(assert (=> bm!9939 d!26131))

(declare-fun d!26133 () Bool)

(declare-fun isEmpty!357 (Option!156) Bool)

(assert (=> d!26133 (= (isDefined!103 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) (not (isEmpty!357 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun bs!4048 () Bool)

(assert (= bs!4048 d!26133))

(assert (=> bs!4048 m!106821))

(declare-fun m!107379 () Bool)

(assert (=> bs!4048 m!107379))

(assert (=> b!97653 d!26133))

(declare-fun b!98106 () Bool)

(declare-fun e!63959 () Option!156)

(assert (=> b!98106 (= e!63959 (getValueByKey!150 (t!5534 (toList!783 lt!48820)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98104 () Bool)

(declare-fun e!63958 () Option!156)

(assert (=> b!98104 (= e!63958 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48820)))))))

(declare-fun b!98107 () Bool)

(assert (=> b!98107 (= e!63959 None!154)))

(declare-fun b!98105 () Bool)

(assert (=> b!98105 (= e!63958 e!63959)))

(declare-fun c!16636 () Bool)

(assert (=> b!98105 (= c!16636 (and ((_ is Cons!1576) (toList!783 lt!48820)) (not (= (_1!1181 (h!2170 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun d!26135 () Bool)

(declare-fun c!16635 () Bool)

(assert (=> d!26135 (= c!16635 (and ((_ is Cons!1576) (toList!783 lt!48820)) (= (_1!1181 (h!2170 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26135 (= (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!63958)))

(assert (= (and d!26135 c!16635) b!98104))

(assert (= (and d!26135 (not c!16635)) b!98105))

(assert (= (and b!98105 c!16636) b!98106))

(assert (= (and b!98105 (not c!16636)) b!98107))

(assert (=> b!98106 m!106647))

(declare-fun m!107381 () Bool)

(assert (=> b!98106 m!107381))

(assert (=> b!97653 d!26135))

(declare-fun d!26137 () Bool)

(declare-fun e!63960 () Bool)

(assert (=> d!26137 e!63960))

(declare-fun res!49393 () Bool)

(assert (=> d!26137 (=> (not res!49393) (not e!63960))))

(declare-fun lt!49293 () ListLongMap!1535)

(assert (=> d!26137 (= res!49393 (contains!800 lt!49293 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49295 () List!1580)

(assert (=> d!26137 (= lt!49293 (ListLongMap!1536 lt!49295))))

(declare-fun lt!49294 () Unit!2937)

(declare-fun lt!49292 () Unit!2937)

(assert (=> d!26137 (= lt!49294 lt!49292)))

(assert (=> d!26137 (= (getValueByKey!150 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26137 (= lt!49292 (lemmaContainsTupThenGetReturnValue!66 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26137 (= lt!49295 (insertStrictlySorted!69 (toList!783 call!9889) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26137 (= (+!135 call!9889 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49293)))

(declare-fun b!98108 () Bool)

(declare-fun res!49392 () Bool)

(assert (=> b!98108 (=> (not res!49392) (not e!63960))))

(assert (=> b!98108 (= res!49392 (= (getValueByKey!150 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98109 () Bool)

(assert (=> b!98109 (= e!63960 (contains!803 (toList!783 lt!49293) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26137 res!49393) b!98108))

(assert (= (and b!98108 res!49392) b!98109))

(declare-fun m!107383 () Bool)

(assert (=> d!26137 m!107383))

(declare-fun m!107385 () Bool)

(assert (=> d!26137 m!107385))

(declare-fun m!107387 () Bool)

(assert (=> d!26137 m!107387))

(declare-fun m!107389 () Bool)

(assert (=> d!26137 m!107389))

(declare-fun m!107391 () Bool)

(assert (=> b!98108 m!107391))

(declare-fun m!107393 () Bool)

(assert (=> b!98109 m!107393))

(assert (=> b!97632 d!26137))

(declare-fun d!26139 () Bool)

(declare-fun e!63961 () Bool)

(assert (=> d!26139 e!63961))

(declare-fun res!49395 () Bool)

(assert (=> d!26139 (=> (not res!49395) (not e!63961))))

(declare-fun lt!49297 () ListLongMap!1535)

(assert (=> d!26139 (= res!49395 (contains!800 lt!49297 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49299 () List!1580)

(assert (=> d!26139 (= lt!49297 (ListLongMap!1536 lt!49299))))

(declare-fun lt!49298 () Unit!2937)

(declare-fun lt!49296 () Unit!2937)

(assert (=> d!26139 (= lt!49298 lt!49296)))

(assert (=> d!26139 (= (getValueByKey!150 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26139 (= lt!49296 (lemmaContainsTupThenGetReturnValue!66 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26139 (= lt!49299 (insertStrictlySorted!69 (toList!783 call!9938) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26139 (= (+!135 call!9938 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49297)))

(declare-fun b!98110 () Bool)

(declare-fun res!49394 () Bool)

(assert (=> b!98110 (=> (not res!49394) (not e!63961))))

(assert (=> b!98110 (= res!49394 (= (getValueByKey!150 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98111 () Bool)

(assert (=> b!98111 (= e!63961 (contains!803 (toList!783 lt!49297) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26139 res!49395) b!98110))

(assert (= (and b!98110 res!49394) b!98111))

(declare-fun m!107395 () Bool)

(assert (=> d!26139 m!107395))

(declare-fun m!107397 () Bool)

(assert (=> d!26139 m!107397))

(declare-fun m!107399 () Bool)

(assert (=> d!26139 m!107399))

(declare-fun m!107401 () Bool)

(assert (=> d!26139 m!107401))

(declare-fun m!107403 () Bool)

(assert (=> b!98110 m!107403))

(declare-fun m!107405 () Bool)

(assert (=> b!98111 m!107405))

(assert (=> b!97766 d!26139))

(assert (=> b!97556 d!26001))

(declare-fun d!26141 () Bool)

(declare-fun res!49396 () Bool)

(declare-fun e!63962 () Bool)

(assert (=> d!26141 (=> (not res!49396) (not e!63962))))

(assert (=> d!26141 (= res!49396 (simpleValid!68 (v!2800 (underlying!337 thiss!992))))))

(assert (=> d!26141 (= (valid!384 (v!2800 (underlying!337 thiss!992))) e!63962)))

(declare-fun b!98112 () Bool)

(declare-fun res!49397 () Bool)

(assert (=> b!98112 (=> (not res!49397) (not e!63962))))

(assert (=> b!98112 (= res!49397 (= (arrayCountValidKeys!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))) (_size!475 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!98113 () Bool)

(declare-fun res!49398 () Bool)

(assert (=> b!98113 (=> (not res!49398) (not e!63962))))

(assert (=> b!98113 (= res!49398 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!98114 () Bool)

(assert (=> b!98114 (= e!63962 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 Nil!1578))))

(assert (= (and d!26141 res!49396) b!98112))

(assert (= (and b!98112 res!49397) b!98113))

(assert (= (and b!98113 res!49398) b!98114))

(declare-fun m!107407 () Bool)

(assert (=> d!26141 m!107407))

(declare-fun m!107409 () Bool)

(assert (=> b!98112 m!107409))

(declare-fun m!107411 () Bool)

(assert (=> b!98113 m!107411))

(declare-fun m!107413 () Bool)

(assert (=> b!98114 m!107413))

(assert (=> d!26007 d!26141))

(declare-fun d!26143 () Bool)

(assert (=> d!26143 (= (get!1282 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2799 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!97778 d!26143))

(assert (=> bm!9938 d!26113))

(declare-fun d!26145 () Bool)

(assert (=> d!26145 (isDefined!103 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun lt!49302 () Unit!2937)

(declare-fun choose!596 (List!1580 (_ BitVec 64)) Unit!2937)

(assert (=> d!26145 (= lt!49302 (choose!596 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun e!63965 () Bool)

(assert (=> d!26145 e!63965))

(declare-fun res!49401 () Bool)

(assert (=> d!26145 (=> (not res!49401) (not e!63965))))

(declare-fun isStrictlySorted!304 (List!1580) Bool)

(assert (=> d!26145 (= res!49401 (isStrictlySorted!304 (toList!783 lt!48820)))))

(assert (=> d!26145 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49302)))

(declare-fun b!98117 () Bool)

(assert (=> b!98117 (= e!63965 (containsKey!154 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26145 res!49401) b!98117))

(assert (=> d!26145 m!106647))

(assert (=> d!26145 m!106821))

(assert (=> d!26145 m!106821))

(assert (=> d!26145 m!106823))

(assert (=> d!26145 m!106647))

(declare-fun m!107415 () Bool)

(assert (=> d!26145 m!107415))

(declare-fun m!107417 () Bool)

(assert (=> d!26145 m!107417))

(assert (=> b!98117 m!106647))

(assert (=> b!98117 m!106817))

(assert (=> b!97651 d!26145))

(assert (=> b!97651 d!26133))

(assert (=> b!97651 d!26135))

(declare-fun d!26147 () Bool)

(assert (=> d!26147 (= (apply!92 lt!48916 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4049 () Bool)

(assert (= bs!4049 d!26147))

(assert (=> bs!4049 m!107303))

(assert (=> bs!4049 m!107303))

(declare-fun m!107419 () Bool)

(assert (=> bs!4049 m!107419))

(assert (=> b!97630 d!26147))

(assert (=> d!26011 d!26065))

(declare-fun d!26149 () Bool)

(declare-fun e!63966 () Bool)

(assert (=> d!26149 e!63966))

(declare-fun res!49402 () Bool)

(assert (=> d!26149 (=> res!49402 e!63966)))

(declare-fun lt!49304 () Bool)

(assert (=> d!26149 (= res!49402 (not lt!49304))))

(declare-fun lt!49306 () Bool)

(assert (=> d!26149 (= lt!49304 lt!49306)))

(declare-fun lt!49303 () Unit!2937)

(declare-fun e!63967 () Unit!2937)

(assert (=> d!26149 (= lt!49303 e!63967)))

(declare-fun c!16637 () Bool)

(assert (=> d!26149 (= c!16637 lt!49306)))

(assert (=> d!26149 (= lt!49306 (containsKey!154 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(assert (=> d!26149 (= (contains!800 call!9949 (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))) lt!49304)))

(declare-fun b!98118 () Bool)

(declare-fun lt!49305 () Unit!2937)

(assert (=> b!98118 (= e!63967 lt!49305)))

(assert (=> b!98118 (= lt!49305 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(assert (=> b!98118 (isDefined!103 (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(declare-fun b!98119 () Bool)

(declare-fun Unit!2958 () Unit!2937)

(assert (=> b!98119 (= e!63967 Unit!2958)))

(declare-fun b!98120 () Bool)

(assert (=> b!98120 (= e!63966 (isDefined!103 (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))))

(assert (= (and d!26149 c!16637) b!98118))

(assert (= (and d!26149 (not c!16637)) b!98119))

(assert (= (and d!26149 (not res!49402)) b!98120))

(declare-fun m!107421 () Bool)

(assert (=> d!26149 m!107421))

(declare-fun m!107423 () Bool)

(assert (=> b!98118 m!107423))

(declare-fun m!107425 () Bool)

(assert (=> b!98118 m!107425))

(assert (=> b!98118 m!107425))

(declare-fun m!107427 () Bool)

(assert (=> b!98118 m!107427))

(assert (=> b!98120 m!107425))

(assert (=> b!98120 m!107425))

(assert (=> b!98120 m!107427))

(assert (=> bm!9948 d!26149))

(assert (=> d!25999 d!26005))

(declare-fun d!26151 () Bool)

(assert (=> d!26151 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) from!355 Nil!1578)))

(assert (=> d!26151 true))

(declare-fun _$71!132 () Unit!2937)

(assert (=> d!26151 (= (choose!39 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!132)))

(declare-fun bs!4050 () Bool)

(assert (= bs!4050 d!26151))

(assert (=> bs!4050 m!106655))

(assert (=> d!25999 d!26151))

(declare-fun d!26153 () Bool)

(declare-fun e!63970 () Bool)

(assert (=> d!26153 e!63970))

(declare-fun c!16640 () Bool)

(assert (=> d!26153 (= c!16640 (and (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26153 true))

(declare-fun _$29!126 () Unit!2937)

(assert (=> d!26153 (= (choose!587 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) _$29!126)))

(declare-fun b!98125 () Bool)

(assert (=> b!98125 (= e!63970 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!98126 () Bool)

(assert (=> b!98126 (= e!63970 (ite (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26153 c!16640) b!98125))

(assert (= (and d!26153 (not c!16640)) b!98126))

(assert (=> b!98125 m!106647))

(assert (=> b!98125 m!106659))

(assert (=> d!26003 d!26153))

(assert (=> d!26003 d!26029))

(assert (=> bm!9935 d!26011))

(declare-fun d!26155 () Bool)

(declare-fun e!63971 () Bool)

(assert (=> d!26155 e!63971))

(declare-fun res!49403 () Bool)

(assert (=> d!26155 (=> res!49403 e!63971)))

(declare-fun lt!49308 () Bool)

(assert (=> d!26155 (= res!49403 (not lt!49308))))

(declare-fun lt!49310 () Bool)

(assert (=> d!26155 (= lt!49308 lt!49310)))

(declare-fun lt!49307 () Unit!2937)

(declare-fun e!63972 () Unit!2937)

(assert (=> d!26155 (= lt!49307 e!63972)))

(declare-fun c!16641 () Bool)

(assert (=> d!26155 (= c!16641 lt!49310)))

(assert (=> d!26155 (= lt!49310 (containsKey!154 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26155 (= (contains!800 lt!48916 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49308)))

(declare-fun b!98127 () Bool)

(declare-fun lt!49309 () Unit!2937)

(assert (=> b!98127 (= e!63972 lt!49309)))

(assert (=> b!98127 (= lt!49309 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98127 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98128 () Bool)

(declare-fun Unit!2959 () Unit!2937)

(assert (=> b!98128 (= e!63972 Unit!2959)))

(declare-fun b!98129 () Bool)

(assert (=> b!98129 (= e!63971 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26155 c!16641) b!98127))

(assert (= (and d!26155 (not c!16641)) b!98128))

(assert (= (and d!26155 (not res!49403)) b!98129))

(assert (=> d!26155 m!106739))

(declare-fun m!107429 () Bool)

(assert (=> d!26155 m!107429))

(assert (=> b!98127 m!106739))

(declare-fun m!107431 () Bool)

(assert (=> b!98127 m!107431))

(assert (=> b!98127 m!106739))

(assert (=> b!98127 m!107291))

(assert (=> b!98127 m!107291))

(declare-fun m!107433 () Bool)

(assert (=> b!98127 m!107433))

(assert (=> b!98129 m!106739))

(assert (=> b!98129 m!107291))

(assert (=> b!98129 m!107291))

(assert (=> b!98129 m!107433))

(assert (=> b!97644 d!26155))

(declare-fun d!26157 () Bool)

(declare-fun e!63973 () Bool)

(assert (=> d!26157 e!63973))

(declare-fun res!49404 () Bool)

(assert (=> d!26157 (=> res!49404 e!63973)))

(declare-fun lt!49312 () Bool)

(assert (=> d!26157 (= res!49404 (not lt!49312))))

(declare-fun lt!49314 () Bool)

(assert (=> d!26157 (= lt!49312 lt!49314)))

(declare-fun lt!49311 () Unit!2937)

(declare-fun e!63974 () Unit!2937)

(assert (=> d!26157 (= lt!49311 e!63974)))

(declare-fun c!16642 () Bool)

(assert (=> d!26157 (= c!16642 lt!49314)))

(assert (=> d!26157 (= lt!49314 (containsKey!154 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26157 (= (contains!800 call!9954 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49312)))

(declare-fun b!98130 () Bool)

(declare-fun lt!49313 () Unit!2937)

(assert (=> b!98130 (= e!63974 lt!49313)))

(assert (=> b!98130 (= lt!49313 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!98130 (isDefined!103 (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98131 () Bool)

(declare-fun Unit!2960 () Unit!2937)

(assert (=> b!98131 (= e!63974 Unit!2960)))

(declare-fun b!98132 () Bool)

(assert (=> b!98132 (= e!63973 (isDefined!103 (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (= (and d!26157 c!16642) b!98130))

(assert (= (and d!26157 (not c!16642)) b!98131))

(assert (= (and d!26157 (not res!49404)) b!98132))

(assert (=> d!26157 m!106647))

(declare-fun m!107435 () Bool)

(assert (=> d!26157 m!107435))

(assert (=> b!98130 m!106647))

(declare-fun m!107437 () Bool)

(assert (=> b!98130 m!107437))

(assert (=> b!98130 m!106647))

(declare-fun m!107439 () Bool)

(assert (=> b!98130 m!107439))

(assert (=> b!98130 m!107439))

(declare-fun m!107441 () Bool)

(assert (=> b!98130 m!107441))

(assert (=> b!98132 m!106647))

(assert (=> b!98132 m!107439))

(assert (=> b!98132 m!107439))

(assert (=> b!98132 m!107441))

(assert (=> b!97758 d!26157))

(assert (=> b!97643 d!26031))

(declare-fun b!98133 () Bool)

(declare-fun e!63976 () Bool)

(assert (=> b!98133 (= e!63976 tp_is_empty!2631)))

(declare-fun condMapEmpty!3757 () Bool)

(declare-fun mapDefault!3757 () ValueCell!972)

(assert (=> mapNonEmpty!3755 (= condMapEmpty!3757 (= mapRest!3755 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3757)))))

(declare-fun e!63975 () Bool)

(declare-fun mapRes!3757 () Bool)

(assert (=> mapNonEmpty!3755 (= tp!9587 (and e!63975 mapRes!3757))))

(declare-fun mapIsEmpty!3757 () Bool)

(assert (=> mapIsEmpty!3757 mapRes!3757))

(declare-fun mapNonEmpty!3757 () Bool)

(declare-fun tp!9589 () Bool)

(assert (=> mapNonEmpty!3757 (= mapRes!3757 (and tp!9589 e!63976))))

(declare-fun mapRest!3757 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3757 () (_ BitVec 32))

(declare-fun mapValue!3757 () ValueCell!972)

(assert (=> mapNonEmpty!3757 (= mapRest!3755 (store mapRest!3757 mapKey!3757 mapValue!3757))))

(declare-fun b!98134 () Bool)

(assert (=> b!98134 (= e!63975 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3755 condMapEmpty!3757) mapIsEmpty!3757))

(assert (= (and mapNonEmpty!3755 (not condMapEmpty!3757)) mapNonEmpty!3757))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!972) mapValue!3757)) b!98133))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!972) mapDefault!3757)) b!98134))

(declare-fun m!107443 () Bool)

(assert (=> mapNonEmpty!3757 m!107443))

(declare-fun b!98135 () Bool)

(declare-fun e!63978 () Bool)

(assert (=> b!98135 (= e!63978 tp_is_empty!2631)))

(declare-fun condMapEmpty!3758 () Bool)

(declare-fun mapDefault!3758 () ValueCell!972)

(assert (=> mapNonEmpty!3756 (= condMapEmpty!3758 (= mapRest!3756 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3758)))))

(declare-fun e!63977 () Bool)

(declare-fun mapRes!3758 () Bool)

(assert (=> mapNonEmpty!3756 (= tp!9588 (and e!63977 mapRes!3758))))

(declare-fun mapIsEmpty!3758 () Bool)

(assert (=> mapIsEmpty!3758 mapRes!3758))

(declare-fun mapNonEmpty!3758 () Bool)

(declare-fun tp!9590 () Bool)

(assert (=> mapNonEmpty!3758 (= mapRes!3758 (and tp!9590 e!63978))))

(declare-fun mapRest!3758 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapValue!3758 () ValueCell!972)

(declare-fun mapKey!3758 () (_ BitVec 32))

(assert (=> mapNonEmpty!3758 (= mapRest!3756 (store mapRest!3758 mapKey!3758 mapValue!3758))))

(declare-fun b!98136 () Bool)

(assert (=> b!98136 (= e!63977 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3756 condMapEmpty!3758) mapIsEmpty!3758))

(assert (= (and mapNonEmpty!3756 (not condMapEmpty!3758)) mapNonEmpty!3758))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!972) mapValue!3758)) b!98135))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!972) mapDefault!3758)) b!98136))

(declare-fun m!107445 () Bool)

(assert (=> mapNonEmpty!3758 m!107445))

(declare-fun b_lambda!4357 () Bool)

(assert (= b_lambda!4349 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4357)))

(declare-fun b_lambda!4359 () Bool)

(assert (= b_lambda!4353 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4359)))

(declare-fun b_lambda!4361 () Bool)

(assert (= b_lambda!4355 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4361)))

(declare-fun b_lambda!4363 () Bool)

(assert (= b_lambda!4347 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4363)))

(declare-fun b_lambda!4365 () Bool)

(assert (= b_lambda!4351 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4365)))

(check-sat (not b!98004) tp_is_empty!2631 (not bm!9997) (not d!26039) (not b!98062) (not b!98106) (not d!26055) (not d!26099) (not b!97814) (not b!98118) (not b!97809) (not d!26103) (not b!98035) (not b!97960) (not b!97833) (not b!98129) (not b!97895) (not b!98109) (not b!98125) (not bm!9962) (not b!97926) (not bm!9978) (not b!97910) (not b!97961) (not bm!9988) (not bm!9991) (not d!26077) (not d!26109) (not d!26149) (not d!26129) (not b!97808) (not bm!9960) (not d!26119) (not b!97887) (not b!97896) (not bm!9992) (not b_lambda!4365) (not b!98044) (not d!26139) (not b!97923) (not d!26037) (not d!26049) (not b!98113) (not b!98045) (not b_lambda!4341) (not b_lambda!4345) (not b!97907) b_and!6025 (not d!26035) (not d!26123) (not d!26059) (not b!97844) (not b!97795) (not d!26141) (not bm!9998) (not b!97959) (not b!97905) (not b!98055) (not bm!9979) (not b!98130) (not b!97813) (not b!98039) (not b!97885) (not b!97937) (not bm!9982) (not bm!9980) (not b_lambda!4361) (not d!26063) (not b!97797) (not b!97935) (not b_next!2431) b_and!6023 (not b!97906) (not b!97815) (not bm!9984) (not d!26137) (not b!97963) (not bm!9968) (not b!97796) (not b!98003) (not d!26057) (not bm!9981) (not b_lambda!4357) (not b!98069) (not d!26053) (not bm!10007) (not d!26131) (not d!26079) (not b!97929) (not d!26145) (not b!98110) (not b!98070) (not d!26075) (not bm!10002) (not bm!9985) (not b!97962) (not b!97970) (not b!97918) (not b!98002) (not d!26091) (not bm!9999) (not b!98010) (not b!97967) (not b!98041) (not b!97834) (not b!98005) (not b!97938) (not b!97920) (not d!26155) (not d!26069) (not b!98009) (not b!97908) (not d!26073) (not b!98040) (not d!26151) (not d!26033) (not b!98117) (not bm!9959) (not bm!9963) (not d!26071) (not d!26065) (not d!26083) (not bm!10008) (not d!26157) (not b!98071) (not b!98114) (not b!97949) (not b!97965) (not b!98015) (not b!98000) (not d!26085) (not d!26089) (not b_lambda!4359) (not b!98111) (not b!98034) (not bm!9989) (not b!97886) (not d!26147) (not b!97822) (not b!97936) (not b!98006) (not b!98132) (not mapNonEmpty!3758) (not b!98011) (not b!97897) (not b!98031) (not b!98013) (not b!98120) (not d!26061) (not b!97810) (not d!26101) (not d!26113) (not b_next!2429) (not b!97999) (not d!26047) (not b!97798) (not d!26087) (not d!26041) (not b!98001) (not b!97950) (not b!97845) (not b!97968) (not b!97971) (not b!98127) (not b!98036) (not b!98108) (not d!26133) (not b!97927) (not b!97940) (not d!26095) (not b!97816) (not d!26093) (not b!97800) (not b!98112) (not b!97848) (not b!97919) (not d!26081) (not b_lambda!4363) (not d!26127) (not d!26097) (not mapNonEmpty!3757) (not b!97811) (not b!97948))
(check-sat b_and!6023 b_and!6025 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun d!26159 () Bool)

(assert (=> d!26159 (= (isDefined!103 (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))) (not (isEmpty!357 (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))))

(declare-fun bs!4051 () Bool)

(assert (= bs!4051 d!26159))

(assert (=> bs!4051 m!107425))

(declare-fun m!107447 () Bool)

(assert (=> bs!4051 m!107447))

(assert (=> b!98120 d!26159))

(declare-fun e!63980 () Option!156)

(declare-fun b!98139 () Bool)

(assert (=> b!98139 (= e!63980 (getValueByKey!150 (t!5534 (toList!783 call!9949)) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(declare-fun b!98137 () Bool)

(declare-fun e!63979 () Option!156)

(assert (=> b!98137 (= e!63979 (Some!155 (_2!1181 (h!2170 (toList!783 call!9949)))))))

(declare-fun b!98140 () Bool)

(assert (=> b!98140 (= e!63980 None!154)))

(declare-fun b!98138 () Bool)

(assert (=> b!98138 (= e!63979 e!63980)))

(declare-fun c!16644 () Bool)

(assert (=> b!98138 (= c!16644 (and ((_ is Cons!1576) (toList!783 call!9949)) (not (= (_1!1181 (h!2170 (toList!783 call!9949))) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))))

(declare-fun c!16643 () Bool)

(declare-fun d!26161 () Bool)

(assert (=> d!26161 (= c!16643 (and ((_ is Cons!1576) (toList!783 call!9949)) (= (_1!1181 (h!2170 (toList!783 call!9949))) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))))

(assert (=> d!26161 (= (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))) e!63979)))

(assert (= (and d!26161 c!16643) b!98137))

(assert (= (and d!26161 (not c!16643)) b!98138))

(assert (= (and b!98138 c!16644) b!98139))

(assert (= (and b!98138 (not c!16644)) b!98140))

(declare-fun m!107449 () Bool)

(assert (=> b!98139 m!107449))

(assert (=> b!98120 d!26161))

(declare-fun d!26163 () Bool)

(declare-fun e!63981 () Bool)

(assert (=> d!26163 e!63981))

(declare-fun res!49405 () Bool)

(assert (=> d!26163 (=> res!49405 e!63981)))

(declare-fun lt!49316 () Bool)

(assert (=> d!26163 (= res!49405 (not lt!49316))))

(declare-fun lt!49318 () Bool)

(assert (=> d!26163 (= lt!49316 lt!49318)))

(declare-fun lt!49315 () Unit!2937)

(declare-fun e!63982 () Unit!2937)

(assert (=> d!26163 (= lt!49315 e!63982)))

(declare-fun c!16645 () Bool)

(assert (=> d!26163 (= c!16645 lt!49318)))

(assert (=> d!26163 (= lt!49318 (containsKey!154 (toList!783 lt!49251) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26163 (= (contains!800 lt!49251 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49316)))

(declare-fun b!98141 () Bool)

(declare-fun lt!49317 () Unit!2937)

(assert (=> b!98141 (= e!63982 lt!49317)))

(assert (=> b!98141 (= lt!49317 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49251) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98141 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98142 () Bool)

(declare-fun Unit!2961 () Unit!2937)

(assert (=> b!98142 (= e!63982 Unit!2961)))

(declare-fun b!98143 () Bool)

(assert (=> b!98143 (= e!63981 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26163 c!16645) b!98141))

(assert (= (and d!26163 (not c!16645)) b!98142))

(assert (= (and d!26163 (not res!49405)) b!98143))

(declare-fun m!107451 () Bool)

(assert (=> d!26163 m!107451))

(declare-fun m!107453 () Bool)

(assert (=> b!98141 m!107453))

(declare-fun m!107455 () Bool)

(assert (=> b!98141 m!107455))

(assert (=> b!98141 m!107455))

(declare-fun m!107457 () Bool)

(assert (=> b!98141 m!107457))

(assert (=> b!98143 m!107455))

(assert (=> b!98143 m!107455))

(assert (=> b!98143 m!107457))

(assert (=> d!26095 d!26163))

(assert (=> d!26095 d!26029))

(declare-fun d!26165 () Bool)

(assert (=> d!26165 (= (get!1284 (getValueByKey!150 (toList!783 lt!48912) lt!48911)) (v!2804 (getValueByKey!150 (toList!783 lt!48912) lt!48911)))))

(assert (=> d!26079 d!26165))

(declare-fun b!98146 () Bool)

(declare-fun e!63984 () Option!156)

(assert (=> b!98146 (= e!63984 (getValueByKey!150 (t!5534 (toList!783 lt!48912)) lt!48911))))

(declare-fun b!98144 () Bool)

(declare-fun e!63983 () Option!156)

(assert (=> b!98144 (= e!63983 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48912)))))))

(declare-fun b!98147 () Bool)

(assert (=> b!98147 (= e!63984 None!154)))

(declare-fun b!98145 () Bool)

(assert (=> b!98145 (= e!63983 e!63984)))

(declare-fun c!16647 () Bool)

(assert (=> b!98145 (= c!16647 (and ((_ is Cons!1576) (toList!783 lt!48912)) (not (= (_1!1181 (h!2170 (toList!783 lt!48912))) lt!48911))))))

(declare-fun d!26167 () Bool)

(declare-fun c!16646 () Bool)

(assert (=> d!26167 (= c!16646 (and ((_ is Cons!1576) (toList!783 lt!48912)) (= (_1!1181 (h!2170 (toList!783 lt!48912))) lt!48911)))))

(assert (=> d!26167 (= (getValueByKey!150 (toList!783 lt!48912) lt!48911) e!63983)))

(assert (= (and d!26167 c!16646) b!98144))

(assert (= (and d!26167 (not c!16646)) b!98145))

(assert (= (and b!98145 c!16647) b!98146))

(assert (= (and b!98145 (not c!16647)) b!98147))

(declare-fun m!107459 () Bool)

(assert (=> b!98146 m!107459))

(assert (=> d!26079 d!26167))

(declare-fun d!26169 () Bool)

(declare-fun e!63985 () Bool)

(assert (=> d!26169 e!63985))

(declare-fun res!49407 () Bool)

(assert (=> d!26169 (=> (not res!49407) (not e!63985))))

(declare-fun lt!49320 () ListLongMap!1535)

(assert (=> d!26169 (= res!49407 (contains!800 lt!49320 (_1!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun lt!49322 () List!1580)

(assert (=> d!26169 (= lt!49320 (ListLongMap!1536 lt!49322))))

(declare-fun lt!49321 () Unit!2937)

(declare-fun lt!49319 () Unit!2937)

(assert (=> d!26169 (= lt!49321 lt!49319)))

(assert (=> d!26169 (= (getValueByKey!150 lt!49322 (_1!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))) (Some!155 (_2!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26169 (= lt!49319 (lemmaContainsTupThenGetReturnValue!66 lt!49322 (_1!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (_2!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26169 (= lt!49322 (insertStrictlySorted!69 (toList!783 (ite c!16561 call!9962 (ite c!16559 call!9963 call!9964))) (_1!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (_2!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26169 (= (+!135 (ite c!16561 call!9962 (ite c!16559 call!9963 call!9964)) (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49320)))

(declare-fun b!98148 () Bool)

(declare-fun res!49406 () Bool)

(assert (=> b!98148 (=> (not res!49406) (not e!63985))))

(assert (=> b!98148 (= res!49406 (= (getValueByKey!150 (toList!783 lt!49320) (_1!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))) (Some!155 (_2!1181 (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))))

(declare-fun b!98149 () Bool)

(assert (=> b!98149 (= e!63985 (contains!803 (toList!783 lt!49320) (ite (or c!16561 c!16559) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (= (and d!26169 res!49407) b!98148))

(assert (= (and b!98148 res!49406) b!98149))

(declare-fun m!107461 () Bool)

(assert (=> d!26169 m!107461))

(declare-fun m!107463 () Bool)

(assert (=> d!26169 m!107463))

(declare-fun m!107465 () Bool)

(assert (=> d!26169 m!107465))

(declare-fun m!107467 () Bool)

(assert (=> d!26169 m!107467))

(declare-fun m!107469 () Bool)

(assert (=> b!98148 m!107469))

(declare-fun m!107471 () Bool)

(assert (=> b!98149 m!107471))

(assert (=> bm!9963 d!26169))

(declare-fun lt!49325 () Bool)

(declare-fun d!26171 () Bool)

(declare-fun content!102 (List!1580) (InoxSet tuple2!2340))

(assert (=> d!26171 (= lt!49325 (select (content!102 (toList!783 lt!49208)) (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!63991 () Bool)

(assert (=> d!26171 (= lt!49325 e!63991)))

(declare-fun res!49412 () Bool)

(assert (=> d!26171 (=> (not res!49412) (not e!63991))))

(assert (=> d!26171 (= res!49412 ((_ is Cons!1576) (toList!783 lt!49208)))))

(assert (=> d!26171 (= (contains!803 (toList!783 lt!49208) (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49325)))

(declare-fun b!98154 () Bool)

(declare-fun e!63990 () Bool)

(assert (=> b!98154 (= e!63991 e!63990)))

(declare-fun res!49413 () Bool)

(assert (=> b!98154 (=> res!49413 e!63990)))

(assert (=> b!98154 (= res!49413 (= (h!2170 (toList!783 lt!49208)) (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98155 () Bool)

(assert (=> b!98155 (= e!63990 (contains!803 (t!5534 (toList!783 lt!49208)) (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26171 res!49412) b!98154))

(assert (= (and b!98154 (not res!49413)) b!98155))

(declare-fun m!107473 () Bool)

(assert (=> d!26171 m!107473))

(declare-fun m!107475 () Bool)

(assert (=> d!26171 m!107475))

(declare-fun m!107477 () Bool)

(assert (=> b!98155 m!107477))

(assert (=> b!97960 d!26171))

(assert (=> bm!9980 d!26113))

(declare-fun d!26173 () Bool)

(declare-fun e!63992 () Bool)

(assert (=> d!26173 e!63992))

(declare-fun res!49415 () Bool)

(assert (=> d!26173 (=> (not res!49415) (not e!63992))))

(declare-fun lt!49327 () ListLongMap!1535)

(assert (=> d!26173 (= res!49415 (contains!800 lt!49327 (_1!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))))))

(declare-fun lt!49329 () List!1580)

(assert (=> d!26173 (= lt!49327 (ListLongMap!1536 lt!49329))))

(declare-fun lt!49328 () Unit!2937)

(declare-fun lt!49326 () Unit!2937)

(assert (=> d!26173 (= lt!49328 lt!49326)))

(assert (=> d!26173 (= (getValueByKey!150 lt!49329 (_1!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))))))

(assert (=> d!26173 (= lt!49326 (lemmaContainsTupThenGetReturnValue!66 lt!49329 (_1!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))))))

(assert (=> d!26173 (= lt!49329 (insertStrictlySorted!69 (toList!783 lt!49186) (_1!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))))))

(assert (=> d!26173 (= (+!135 lt!49186 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) lt!49327)))

(declare-fun b!98156 () Bool)

(declare-fun res!49414 () Bool)

(assert (=> b!98156 (=> (not res!49414) (not e!63992))))

(assert (=> b!98156 (= res!49414 (= (getValueByKey!150 (toList!783 lt!49327) (_1!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))))))))

(declare-fun b!98157 () Bool)

(assert (=> b!98157 (= e!63992 (contains!803 (toList!783 lt!49327) (tuple2!2341 lt!49193 (minValue!2364 newMap!16))))))

(assert (= (and d!26173 res!49415) b!98156))

(assert (= (and b!98156 res!49414) b!98157))

(declare-fun m!107479 () Bool)

(assert (=> d!26173 m!107479))

(declare-fun m!107481 () Bool)

(assert (=> d!26173 m!107481))

(declare-fun m!107483 () Bool)

(assert (=> d!26173 m!107483))

(declare-fun m!107485 () Bool)

(assert (=> d!26173 m!107485))

(declare-fun m!107487 () Bool)

(assert (=> b!98156 m!107487))

(declare-fun m!107489 () Bool)

(assert (=> b!98157 m!107489))

(assert (=> b!97937 d!26173))

(declare-fun d!26175 () Bool)

(assert (=> d!26175 (= (apply!92 (+!135 lt!49183 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) lt!49184) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49183 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))) lt!49184)))))

(declare-fun bs!4052 () Bool)

(assert (= bs!4052 d!26175))

(declare-fun m!107491 () Bool)

(assert (=> bs!4052 m!107491))

(assert (=> bs!4052 m!107491))

(declare-fun m!107493 () Bool)

(assert (=> bs!4052 m!107493))

(assert (=> b!97937 d!26175))

(declare-fun d!26177 () Bool)

(assert (=> d!26177 (= (apply!92 (+!135 lt!49190 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) lt!49189) (apply!92 lt!49190 lt!49189))))

(declare-fun lt!49330 () Unit!2937)

(assert (=> d!26177 (= lt!49330 (choose!591 lt!49190 lt!49187 (minValue!2364 newMap!16) lt!49189))))

(declare-fun e!63993 () Bool)

(assert (=> d!26177 e!63993))

(declare-fun res!49416 () Bool)

(assert (=> d!26177 (=> (not res!49416) (not e!63993))))

(assert (=> d!26177 (= res!49416 (contains!800 lt!49190 lt!49189))))

(assert (=> d!26177 (= (addApplyDifferent!68 lt!49190 lt!49187 (minValue!2364 newMap!16) lt!49189) lt!49330)))

(declare-fun b!98158 () Bool)

(assert (=> b!98158 (= e!63993 (not (= lt!49189 lt!49187)))))

(assert (= (and d!26177 res!49416) b!98158))

(assert (=> d!26177 m!107141))

(declare-fun m!107495 () Bool)

(assert (=> d!26177 m!107495))

(assert (=> d!26177 m!107149))

(declare-fun m!107497 () Bool)

(assert (=> d!26177 m!107497))

(assert (=> d!26177 m!107149))

(assert (=> d!26177 m!107151))

(assert (=> b!97937 d!26177))

(declare-fun d!26179 () Bool)

(assert (=> d!26179 (= (apply!92 (+!135 lt!49186 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) lt!49185) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49186 (tuple2!2341 lt!49193 (minValue!2364 newMap!16)))) lt!49185)))))

(declare-fun bs!4053 () Bool)

(assert (= bs!4053 d!26179))

(declare-fun m!107499 () Bool)

(assert (=> bs!4053 m!107499))

(assert (=> bs!4053 m!107499))

(declare-fun m!107501 () Bool)

(assert (=> bs!4053 m!107501))

(assert (=> b!97937 d!26179))

(declare-fun d!26181 () Bool)

(assert (=> d!26181 (= (apply!92 lt!49183 lt!49184) (get!1284 (getValueByKey!150 (toList!783 lt!49183) lt!49184)))))

(declare-fun bs!4054 () Bool)

(assert (= bs!4054 d!26181))

(declare-fun m!107503 () Bool)

(assert (=> bs!4054 m!107503))

(assert (=> bs!4054 m!107503))

(declare-fun m!107505 () Bool)

(assert (=> bs!4054 m!107505))

(assert (=> b!97937 d!26181))

(declare-fun d!26183 () Bool)

(declare-fun e!63994 () Bool)

(assert (=> d!26183 e!63994))

(declare-fun res!49418 () Bool)

(assert (=> d!26183 (=> (not res!49418) (not e!63994))))

(declare-fun lt!49332 () ListLongMap!1535)

(assert (=> d!26183 (= res!49418 (contains!800 lt!49332 (_1!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49334 () List!1580)

(assert (=> d!26183 (= lt!49332 (ListLongMap!1536 lt!49334))))

(declare-fun lt!49333 () Unit!2937)

(declare-fun lt!49331 () Unit!2937)

(assert (=> d!26183 (= lt!49333 lt!49331)))

(assert (=> d!26183 (= (getValueByKey!150 lt!49334 (_1!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26183 (= lt!49331 (lemmaContainsTupThenGetReturnValue!66 lt!49334 (_1!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26183 (= lt!49334 (insertStrictlySorted!69 (toList!783 lt!49178) (_1!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26183 (= (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) lt!49332)))

(declare-fun b!98159 () Bool)

(declare-fun res!49417 () Bool)

(assert (=> b!98159 (=> (not res!49417) (not e!63994))))

(assert (=> b!98159 (= res!49417 (= (getValueByKey!150 (toList!783 lt!49332) (_1!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98160 () Bool)

(assert (=> b!98160 (= e!63994 (contains!803 (toList!783 lt!49332) (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26183 res!49418) b!98159))

(assert (= (and b!98159 res!49417) b!98160))

(declare-fun m!107507 () Bool)

(assert (=> d!26183 m!107507))

(declare-fun m!107509 () Bool)

(assert (=> d!26183 m!107509))

(declare-fun m!107511 () Bool)

(assert (=> d!26183 m!107511))

(declare-fun m!107513 () Bool)

(assert (=> d!26183 m!107513))

(declare-fun m!107515 () Bool)

(assert (=> b!98159 m!107515))

(declare-fun m!107517 () Bool)

(assert (=> b!98160 m!107517))

(assert (=> b!97937 d!26183))

(declare-fun d!26185 () Bool)

(assert (=> d!26185 (= (apply!92 (+!135 lt!49183 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) lt!49184) (apply!92 lt!49183 lt!49184))))

(declare-fun lt!49335 () Unit!2937)

(assert (=> d!26185 (= lt!49335 (choose!591 lt!49183 lt!49182 (zeroValue!2364 newMap!16) lt!49184))))

(declare-fun e!63995 () Bool)

(assert (=> d!26185 e!63995))

(declare-fun res!49419 () Bool)

(assert (=> d!26185 (=> (not res!49419) (not e!63995))))

(assert (=> d!26185 (= res!49419 (contains!800 lt!49183 lt!49184))))

(assert (=> d!26185 (= (addApplyDifferent!68 lt!49183 lt!49182 (zeroValue!2364 newMap!16) lt!49184) lt!49335)))

(declare-fun b!98161 () Bool)

(assert (=> b!98161 (= e!63995 (not (= lt!49184 lt!49182)))))

(assert (= (and d!26185 res!49419) b!98161))

(assert (=> d!26185 m!107161))

(declare-fun m!107519 () Bool)

(assert (=> d!26185 m!107519))

(assert (=> d!26185 m!107135))

(declare-fun m!107521 () Bool)

(assert (=> d!26185 m!107521))

(assert (=> d!26185 m!107135))

(assert (=> d!26185 m!107163))

(assert (=> b!97937 d!26185))

(declare-fun d!26187 () Bool)

(declare-fun e!63996 () Bool)

(assert (=> d!26187 e!63996))

(declare-fun res!49421 () Bool)

(assert (=> d!26187 (=> (not res!49421) (not e!63996))))

(declare-fun lt!49337 () ListLongMap!1535)

(assert (=> d!26187 (= res!49421 (contains!800 lt!49337 (_1!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))))))

(declare-fun lt!49339 () List!1580)

(assert (=> d!26187 (= lt!49337 (ListLongMap!1536 lt!49339))))

(declare-fun lt!49338 () Unit!2937)

(declare-fun lt!49336 () Unit!2937)

(assert (=> d!26187 (= lt!49338 lt!49336)))

(assert (=> d!26187 (= (getValueByKey!150 lt!49339 (_1!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))))))

(assert (=> d!26187 (= lt!49336 (lemmaContainsTupThenGetReturnValue!66 lt!49339 (_1!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))))))

(assert (=> d!26187 (= lt!49339 (insertStrictlySorted!69 (toList!783 lt!49190) (_1!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))))))

(assert (=> d!26187 (= (+!135 lt!49190 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) lt!49337)))

(declare-fun b!98162 () Bool)

(declare-fun res!49420 () Bool)

(assert (=> b!98162 (=> (not res!49420) (not e!63996))))

(assert (=> b!98162 (= res!49420 (= (getValueByKey!150 (toList!783 lt!49337) (_1!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))))))))

(declare-fun b!98163 () Bool)

(assert (=> b!98163 (= e!63996 (contains!803 (toList!783 lt!49337) (tuple2!2341 lt!49187 (minValue!2364 newMap!16))))))

(assert (= (and d!26187 res!49421) b!98162))

(assert (= (and b!98162 res!49420) b!98163))

(declare-fun m!107523 () Bool)

(assert (=> d!26187 m!107523))

(declare-fun m!107525 () Bool)

(assert (=> d!26187 m!107525))

(declare-fun m!107527 () Bool)

(assert (=> d!26187 m!107527))

(declare-fun m!107529 () Bool)

(assert (=> d!26187 m!107529))

(declare-fun m!107531 () Bool)

(assert (=> b!98162 m!107531))

(declare-fun m!107533 () Bool)

(assert (=> b!98163 m!107533))

(assert (=> b!97937 d!26187))

(declare-fun d!26189 () Bool)

(declare-fun e!63997 () Bool)

(assert (=> d!26189 e!63997))

(declare-fun res!49422 () Bool)

(assert (=> d!26189 (=> res!49422 e!63997)))

(declare-fun lt!49341 () Bool)

(assert (=> d!26189 (= res!49422 (not lt!49341))))

(declare-fun lt!49343 () Bool)

(assert (=> d!26189 (= lt!49341 lt!49343)))

(declare-fun lt!49340 () Unit!2937)

(declare-fun e!63998 () Unit!2937)

(assert (=> d!26189 (= lt!49340 e!63998)))

(declare-fun c!16648 () Bool)

(assert (=> d!26189 (= c!16648 lt!49343)))

(assert (=> d!26189 (= lt!49343 (containsKey!154 (toList!783 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) lt!49188))))

(assert (=> d!26189 (= (contains!800 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) lt!49188) lt!49341)))

(declare-fun b!98164 () Bool)

(declare-fun lt!49342 () Unit!2937)

(assert (=> b!98164 (= e!63998 lt!49342)))

(assert (=> b!98164 (= lt!49342 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) lt!49188))))

(assert (=> b!98164 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) lt!49188))))

(declare-fun b!98165 () Bool)

(declare-fun Unit!2962 () Unit!2937)

(assert (=> b!98165 (= e!63998 Unit!2962)))

(declare-fun b!98166 () Bool)

(assert (=> b!98166 (= e!63997 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16)))) lt!49188)))))

(assert (= (and d!26189 c!16648) b!98164))

(assert (= (and d!26189 (not c!16648)) b!98165))

(assert (= (and d!26189 (not res!49422)) b!98166))

(declare-fun m!107535 () Bool)

(assert (=> d!26189 m!107535))

(declare-fun m!107537 () Bool)

(assert (=> b!98164 m!107537))

(declare-fun m!107539 () Bool)

(assert (=> b!98164 m!107539))

(assert (=> b!98164 m!107539))

(declare-fun m!107541 () Bool)

(assert (=> b!98164 m!107541))

(assert (=> b!98166 m!107539))

(assert (=> b!98166 m!107539))

(assert (=> b!98166 m!107541))

(assert (=> b!97937 d!26189))

(declare-fun b!98167 () Bool)

(declare-fun e!64003 () Bool)

(declare-fun e!63999 () Bool)

(assert (=> b!98167 (= e!64003 e!63999)))

(declare-fun c!16650 () Bool)

(declare-fun e!64004 () Bool)

(assert (=> b!98167 (= c!16650 e!64004)))

(declare-fun res!49425 () Bool)

(assert (=> b!98167 (=> (not res!49425) (not e!64004))))

(assert (=> b!98167 (= res!49425 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98168 () Bool)

(declare-fun e!64001 () ListLongMap!1535)

(declare-fun call!10012 () ListLongMap!1535)

(assert (=> b!98168 (= e!64001 call!10012)))

(declare-fun b!98169 () Bool)

(declare-fun e!64005 () ListLongMap!1535)

(assert (=> b!98169 (= e!64005 (ListLongMap!1536 Nil!1577))))

(declare-fun b!98170 () Bool)

(declare-fun lt!49347 () Unit!2937)

(declare-fun lt!49346 () Unit!2937)

(assert (=> b!98170 (= lt!49347 lt!49346)))

(declare-fun lt!49345 () ListLongMap!1535)

(declare-fun lt!49348 () (_ BitVec 64))

(declare-fun lt!49344 () V!3155)

(declare-fun lt!49349 () (_ BitVec 64))

(assert (=> b!98170 (not (contains!800 (+!135 lt!49345 (tuple2!2341 lt!49348 lt!49344)) lt!49349))))

(assert (=> b!98170 (= lt!49346 (addStillNotContains!40 lt!49345 lt!49348 lt!49344 lt!49349))))

(assert (=> b!98170 (= lt!49349 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98170 (= lt!49344 (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98170 (= lt!49348 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98170 (= lt!49345 call!10012)))

(assert (=> b!98170 (= e!64001 (+!135 call!10012 (tuple2!2341 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98171 () Bool)

(declare-fun e!64000 () Bool)

(declare-fun lt!49350 () ListLongMap!1535)

(assert (=> b!98171 (= e!64000 (= lt!49350 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98172 () Bool)

(assert (=> b!98172 (= e!64004 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98172 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26191 () Bool)

(assert (=> d!26191 e!64003))

(declare-fun res!49426 () Bool)

(assert (=> d!26191 (=> (not res!49426) (not e!64003))))

(assert (=> d!26191 (= res!49426 (not (contains!800 lt!49350 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26191 (= lt!49350 e!64005)))

(declare-fun c!16651 () Bool)

(assert (=> d!26191 (= c!16651 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26191 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26191 (= (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49350)))

(declare-fun b!98173 () Bool)

(assert (=> b!98173 (= e!64005 e!64001)))

(declare-fun c!16652 () Bool)

(assert (=> b!98173 (= c!16652 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98174 () Bool)

(assert (=> b!98174 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> b!98174 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (_values!2464 newMap!16))))))

(declare-fun e!64002 () Bool)

(assert (=> b!98174 (= e!64002 (= (apply!92 lt!49350 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98175 () Bool)

(declare-fun res!49423 () Bool)

(assert (=> b!98175 (=> (not res!49423) (not e!64003))))

(assert (=> b!98175 (= res!49423 (not (contains!800 lt!49350 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98176 () Bool)

(assert (=> b!98176 (= e!63999 e!64002)))

(assert (=> b!98176 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49424 () Bool)

(assert (=> b!98176 (= res!49424 (contains!800 lt!49350 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98176 (=> (not res!49424) (not e!64002))))

(declare-fun b!98177 () Bool)

(assert (=> b!98177 (= e!64000 (isEmpty!356 lt!49350))))

(declare-fun bm!10009 () Bool)

(assert (=> bm!10009 (= call!10012 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun b!98178 () Bool)

(assert (=> b!98178 (= e!63999 e!64000)))

(declare-fun c!16649 () Bool)

(assert (=> b!98178 (= c!16649 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26191 c!16651) b!98169))

(assert (= (and d!26191 (not c!16651)) b!98173))

(assert (= (and b!98173 c!16652) b!98170))

(assert (= (and b!98173 (not c!16652)) b!98168))

(assert (= (or b!98170 b!98168) bm!10009))

(assert (= (and d!26191 res!49426) b!98175))

(assert (= (and b!98175 res!49423) b!98167))

(assert (= (and b!98167 res!49425) b!98172))

(assert (= (and b!98167 c!16650) b!98176))

(assert (= (and b!98167 (not c!16650)) b!98178))

(assert (= (and b!98176 res!49424) b!98174))

(assert (= (and b!98178 c!16649) b!98171))

(assert (= (and b!98178 (not c!16649)) b!98177))

(declare-fun b_lambda!4367 () Bool)

(assert (=> (not b_lambda!4367) (not b!98170)))

(assert (=> b!98170 t!5542))

(declare-fun b_and!6027 () Bool)

(assert (= b_and!6023 (and (=> t!5542 result!3275) b_and!6027)))

(assert (=> b!98170 t!5544))

(declare-fun b_and!6029 () Bool)

(assert (= b_and!6025 (and (=> t!5544 result!3277) b_and!6029)))

(declare-fun b_lambda!4369 () Bool)

(assert (=> (not b_lambda!4369) (not b!98174)))

(assert (=> b!98174 t!5542))

(declare-fun b_and!6031 () Bool)

(assert (= b_and!6027 (and (=> t!5542 result!3275) b_and!6031)))

(assert (=> b!98174 t!5544))

(declare-fun b_and!6033 () Bool)

(assert (= b_and!6029 (and (=> t!5544 result!3277) b_and!6033)))

(declare-fun m!107543 () Bool)

(assert (=> b!98175 m!107543))

(assert (=> b!98173 m!106891))

(assert (=> b!98173 m!106891))

(assert (=> b!98173 m!106901))

(assert (=> b!98176 m!106891))

(assert (=> b!98176 m!106891))

(declare-fun m!107545 () Bool)

(assert (=> b!98176 m!107545))

(declare-fun m!107547 () Bool)

(assert (=> b!98177 m!107547))

(declare-fun m!107549 () Bool)

(assert (=> bm!10009 m!107549))

(assert (=> b!98172 m!106891))

(assert (=> b!98172 m!106891))

(assert (=> b!98172 m!106901))

(assert (=> b!98174 m!106891))

(assert (=> b!98174 m!106907))

(assert (=> b!98174 m!107129))

(assert (=> b!98174 m!106891))

(declare-fun m!107551 () Bool)

(assert (=> b!98174 m!107551))

(assert (=> b!98174 m!107129))

(assert (=> b!98174 m!106907))

(assert (=> b!98174 m!107131))

(declare-fun m!107553 () Bool)

(assert (=> d!26191 m!107553))

(assert (=> d!26191 m!106895))

(assert (=> b!98171 m!107549))

(assert (=> b!98170 m!106891))

(assert (=> b!98170 m!106907))

(assert (=> b!98170 m!107129))

(declare-fun m!107555 () Bool)

(assert (=> b!98170 m!107555))

(declare-fun m!107557 () Bool)

(assert (=> b!98170 m!107557))

(assert (=> b!98170 m!107129))

(assert (=> b!98170 m!106907))

(assert (=> b!98170 m!107131))

(declare-fun m!107559 () Bool)

(assert (=> b!98170 m!107559))

(assert (=> b!98170 m!107555))

(declare-fun m!107561 () Bool)

(assert (=> b!98170 m!107561))

(assert (=> b!97937 d!26191))

(declare-fun d!26193 () Bool)

(declare-fun e!64006 () Bool)

(assert (=> d!26193 e!64006))

(declare-fun res!49428 () Bool)

(assert (=> d!26193 (=> (not res!49428) (not e!64006))))

(declare-fun lt!49352 () ListLongMap!1535)

(assert (=> d!26193 (= res!49428 (contains!800 lt!49352 (_1!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49354 () List!1580)

(assert (=> d!26193 (= lt!49352 (ListLongMap!1536 lt!49354))))

(declare-fun lt!49353 () Unit!2937)

(declare-fun lt!49351 () Unit!2937)

(assert (=> d!26193 (= lt!49353 lt!49351)))

(assert (=> d!26193 (= (getValueByKey!150 lt!49354 (_1!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26193 (= lt!49351 (lemmaContainsTupThenGetReturnValue!66 lt!49354 (_1!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26193 (= lt!49354 (insertStrictlySorted!69 (toList!783 lt!49183) (_1!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26193 (= (+!135 lt!49183 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))) lt!49352)))

(declare-fun b!98179 () Bool)

(declare-fun res!49427 () Bool)

(assert (=> b!98179 (=> (not res!49427) (not e!64006))))

(assert (=> b!98179 (= res!49427 (= (getValueByKey!150 (toList!783 lt!49352) (_1!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98180 () Bool)

(assert (=> b!98180 (= e!64006 (contains!803 (toList!783 lt!49352) (tuple2!2341 lt!49182 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26193 res!49428) b!98179))

(assert (= (and b!98179 res!49427) b!98180))

(declare-fun m!107563 () Bool)

(assert (=> d!26193 m!107563))

(declare-fun m!107565 () Bool)

(assert (=> d!26193 m!107565))

(declare-fun m!107567 () Bool)

(assert (=> d!26193 m!107567))

(declare-fun m!107569 () Bool)

(assert (=> d!26193 m!107569))

(declare-fun m!107571 () Bool)

(assert (=> b!98179 m!107571))

(declare-fun m!107573 () Bool)

(assert (=> b!98180 m!107573))

(assert (=> b!97937 d!26193))

(declare-fun d!26195 () Bool)

(assert (=> d!26195 (= (apply!92 lt!49186 lt!49185) (get!1284 (getValueByKey!150 (toList!783 lt!49186) lt!49185)))))

(declare-fun bs!4055 () Bool)

(assert (= bs!4055 d!26195))

(declare-fun m!107575 () Bool)

(assert (=> bs!4055 m!107575))

(assert (=> bs!4055 m!107575))

(declare-fun m!107577 () Bool)

(assert (=> bs!4055 m!107577))

(assert (=> b!97937 d!26195))

(declare-fun d!26197 () Bool)

(assert (=> d!26197 (= (apply!92 (+!135 lt!49186 (tuple2!2341 lt!49193 (minValue!2364 newMap!16))) lt!49185) (apply!92 lt!49186 lt!49185))))

(declare-fun lt!49355 () Unit!2937)

(assert (=> d!26197 (= lt!49355 (choose!591 lt!49186 lt!49193 (minValue!2364 newMap!16) lt!49185))))

(declare-fun e!64007 () Bool)

(assert (=> d!26197 e!64007))

(declare-fun res!49429 () Bool)

(assert (=> d!26197 (=> (not res!49429) (not e!64007))))

(assert (=> d!26197 (= res!49429 (contains!800 lt!49186 lt!49185))))

(assert (=> d!26197 (= (addApplyDifferent!68 lt!49186 lt!49193 (minValue!2364 newMap!16) lt!49185) lt!49355)))

(declare-fun b!98181 () Bool)

(assert (=> b!98181 (= e!64007 (not (= lt!49185 lt!49193)))))

(assert (= (and d!26197 res!49429) b!98181))

(assert (=> d!26197 m!107157))

(declare-fun m!107579 () Bool)

(assert (=> d!26197 m!107579))

(assert (=> d!26197 m!107143))

(declare-fun m!107581 () Bool)

(assert (=> d!26197 m!107581))

(assert (=> d!26197 m!107143))

(assert (=> d!26197 m!107145))

(assert (=> b!97937 d!26197))

(declare-fun d!26199 () Bool)

(assert (=> d!26199 (= (apply!92 lt!49190 lt!49189) (get!1284 (getValueByKey!150 (toList!783 lt!49190) lt!49189)))))

(declare-fun bs!4056 () Bool)

(assert (= bs!4056 d!26199))

(declare-fun m!107583 () Bool)

(assert (=> bs!4056 m!107583))

(assert (=> bs!4056 m!107583))

(declare-fun m!107585 () Bool)

(assert (=> bs!4056 m!107585))

(assert (=> b!97937 d!26199))

(declare-fun d!26201 () Bool)

(assert (=> d!26201 (contains!800 (+!135 lt!49178 (tuple2!2341 lt!49179 (zeroValue!2364 newMap!16))) lt!49188)))

(declare-fun lt!49356 () Unit!2937)

(assert (=> d!26201 (= lt!49356 (choose!592 lt!49178 lt!49179 (zeroValue!2364 newMap!16) lt!49188))))

(assert (=> d!26201 (contains!800 lt!49178 lt!49188)))

(assert (=> d!26201 (= (addStillContains!68 lt!49178 lt!49179 (zeroValue!2364 newMap!16) lt!49188) lt!49356)))

(declare-fun bs!4057 () Bool)

(assert (= bs!4057 d!26201))

(assert (=> bs!4057 m!107137))

(assert (=> bs!4057 m!107137))

(assert (=> bs!4057 m!107155))

(declare-fun m!107587 () Bool)

(assert (=> bs!4057 m!107587))

(declare-fun m!107589 () Bool)

(assert (=> bs!4057 m!107589))

(assert (=> b!97937 d!26201))

(declare-fun d!26203 () Bool)

(assert (=> d!26203 (= (apply!92 (+!135 lt!49190 (tuple2!2341 lt!49187 (minValue!2364 newMap!16))) lt!49189) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49190 (tuple2!2341 lt!49187 (minValue!2364 newMap!16)))) lt!49189)))))

(declare-fun bs!4058 () Bool)

(assert (= bs!4058 d!26203))

(declare-fun m!107591 () Bool)

(assert (=> bs!4058 m!107591))

(assert (=> bs!4058 m!107591))

(declare-fun m!107593 () Bool)

(assert (=> bs!4058 m!107593))

(assert (=> b!97937 d!26203))

(declare-fun d!26205 () Bool)

(declare-fun e!64008 () Bool)

(assert (=> d!26205 e!64008))

(declare-fun res!49430 () Bool)

(assert (=> d!26205 (=> res!49430 e!64008)))

(declare-fun lt!49358 () Bool)

(assert (=> d!26205 (= res!49430 (not lt!49358))))

(declare-fun lt!49360 () Bool)

(assert (=> d!26205 (= lt!49358 lt!49360)))

(declare-fun lt!49357 () Unit!2937)

(declare-fun e!64009 () Unit!2937)

(assert (=> d!26205 (= lt!49357 e!64009)))

(declare-fun c!16653 () Bool)

(assert (=> d!26205 (= c!16653 lt!49360)))

(assert (=> d!26205 (= lt!49360 (containsKey!154 (toList!783 lt!49162) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26205 (= (contains!800 lt!49162 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49358)))

(declare-fun b!98182 () Bool)

(declare-fun lt!49359 () Unit!2937)

(assert (=> b!98182 (= e!64009 lt!49359)))

(assert (=> b!98182 (= lt!49359 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49162) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98182 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98183 () Bool)

(declare-fun Unit!2963 () Unit!2937)

(assert (=> b!98183 (= e!64009 Unit!2963)))

(declare-fun b!98184 () Bool)

(assert (=> b!98184 (= e!64008 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26205 c!16653) b!98182))

(assert (= (and d!26205 (not c!16653)) b!98183))

(assert (= (and d!26205 (not res!49430)) b!98184))

(declare-fun m!107595 () Bool)

(assert (=> d!26205 m!107595))

(declare-fun m!107597 () Bool)

(assert (=> b!98182 m!107597))

(declare-fun m!107599 () Bool)

(assert (=> b!98182 m!107599))

(assert (=> b!98182 m!107599))

(declare-fun m!107601 () Bool)

(assert (=> b!98182 m!107601))

(assert (=> b!98184 m!107599))

(assert (=> b!98184 m!107599))

(assert (=> b!98184 m!107601))

(assert (=> bm!9982 d!26205))

(declare-fun d!26207 () Bool)

(assert (=> d!26207 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))

(assert (=> d!26207 true))

(declare-fun _$16!117 () Unit!2937)

(assert (=> d!26207 (= (choose!589 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (defaultEntry!2481 newMap!16)) _$16!117)))

(declare-fun bs!4059 () Bool)

(assert (= bs!4059 d!26207))

(assert (=> bs!4059 m!107101))

(assert (=> bs!4059 m!106861))

(assert (=> bs!4059 m!107101))

(assert (=> bs!4059 m!106861))

(assert (=> bs!4059 m!107103))

(assert (=> d!26059 d!26207))

(declare-fun d!26209 () Bool)

(assert (=> d!26209 (= (validMask!0 (mask!6578 newMap!16)) (and (or (= (mask!6578 newMap!16) #b00000000000000000000000000000111) (= (mask!6578 newMap!16) #b00000000000000000000000000001111) (= (mask!6578 newMap!16) #b00000000000000000000000000011111) (= (mask!6578 newMap!16) #b00000000000000000000000000111111) (= (mask!6578 newMap!16) #b00000000000000000000000001111111) (= (mask!6578 newMap!16) #b00000000000000000000000011111111) (= (mask!6578 newMap!16) #b00000000000000000000000111111111) (= (mask!6578 newMap!16) #b00000000000000000000001111111111) (= (mask!6578 newMap!16) #b00000000000000000000011111111111) (= (mask!6578 newMap!16) #b00000000000000000000111111111111) (= (mask!6578 newMap!16) #b00000000000000000001111111111111) (= (mask!6578 newMap!16) #b00000000000000000011111111111111) (= (mask!6578 newMap!16) #b00000000000000000111111111111111) (= (mask!6578 newMap!16) #b00000000000000001111111111111111) (= (mask!6578 newMap!16) #b00000000000000011111111111111111) (= (mask!6578 newMap!16) #b00000000000000111111111111111111) (= (mask!6578 newMap!16) #b00000000000001111111111111111111) (= (mask!6578 newMap!16) #b00000000000011111111111111111111) (= (mask!6578 newMap!16) #b00000000000111111111111111111111) (= (mask!6578 newMap!16) #b00000000001111111111111111111111) (= (mask!6578 newMap!16) #b00000000011111111111111111111111) (= (mask!6578 newMap!16) #b00000000111111111111111111111111) (= (mask!6578 newMap!16) #b00000001111111111111111111111111) (= (mask!6578 newMap!16) #b00000011111111111111111111111111) (= (mask!6578 newMap!16) #b00000111111111111111111111111111) (= (mask!6578 newMap!16) #b00001111111111111111111111111111) (= (mask!6578 newMap!16) #b00011111111111111111111111111111) (= (mask!6578 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6578 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26059 d!26209))

(declare-fun d!26211 () Bool)

(assert (=> d!26211 (= (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97918 d!26211))

(assert (=> d!26131 d!26113))

(declare-fun bm!10014 () Bool)

(declare-fun c!16659 () Bool)

(declare-fun call!10018 () Bool)

(declare-fun lt!49363 () SeekEntryResult!253)

(assert (=> bm!10014 (= call!10018 (inRange!0 (ite c!16659 (index!3155 lt!49363) (index!3158 lt!49363)) (mask!6578 newMap!16)))))

(declare-fun b!98201 () Bool)

(declare-fun res!49439 () Bool)

(declare-fun e!64019 () Bool)

(assert (=> b!98201 (=> (not res!49439) (not e!64019))))

(assert (=> b!98201 (= res!49439 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49363)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98202 () Bool)

(declare-fun e!64018 () Bool)

(declare-fun e!64021 () Bool)

(assert (=> b!98202 (= e!64018 e!64021)))

(declare-fun c!16658 () Bool)

(assert (=> b!98202 (= c!16658 ((_ is MissingVacant!253) lt!49363))))

(declare-fun d!26213 () Bool)

(assert (=> d!26213 e!64018))

(assert (=> d!26213 (= c!16659 ((_ is MissingZero!253) lt!49363))))

(assert (=> d!26213 (= lt!49363 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26213 true))

(declare-fun _$34!863 () Unit!2937)

(assert (=> d!26213 (= (choose!595 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) _$34!863)))

(declare-fun b!98203 () Bool)

(declare-fun call!10017 () Bool)

(assert (=> b!98203 (= e!64019 (not call!10017))))

(declare-fun b!98204 () Bool)

(declare-fun res!49441 () Bool)

(assert (=> b!98204 (= res!49441 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49363)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64020 () Bool)

(assert (=> b!98204 (=> (not res!49441) (not e!64020))))

(declare-fun bm!10015 () Bool)

(assert (=> bm!10015 (= call!10017 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98205 () Bool)

(assert (=> b!98205 (= e!64020 (not call!10017))))

(declare-fun b!98206 () Bool)

(assert (=> b!98206 (= e!64021 ((_ is Undefined!253) lt!49363))))

(declare-fun b!98207 () Bool)

(assert (=> b!98207 (= e!64018 e!64020)))

(declare-fun res!49442 () Bool)

(assert (=> b!98207 (= res!49442 call!10018)))

(assert (=> b!98207 (=> (not res!49442) (not e!64020))))

(declare-fun b!98208 () Bool)

(declare-fun res!49440 () Bool)

(assert (=> b!98208 (=> (not res!49440) (not e!64019))))

(assert (=> b!98208 (= res!49440 call!10018)))

(assert (=> b!98208 (= e!64021 e!64019)))

(assert (= (and d!26213 c!16659) b!98207))

(assert (= (and d!26213 (not c!16659)) b!98202))

(assert (= (and b!98207 res!49442) b!98204))

(assert (= (and b!98204 res!49441) b!98205))

(assert (= (and b!98202 c!16658) b!98208))

(assert (= (and b!98202 (not c!16658)) b!98206))

(assert (= (and b!98208 res!49440) b!98201))

(assert (= (and b!98201 res!49439) b!98203))

(assert (= (or b!98207 b!98208) bm!10014))

(assert (= (or b!98205 b!98203) bm!10015))

(declare-fun m!107603 () Bool)

(assert (=> b!98201 m!107603))

(declare-fun m!107605 () Bool)

(assert (=> bm!10014 m!107605))

(assert (=> d!26213 m!106647))

(assert (=> d!26213 m!106835))

(declare-fun m!107607 () Bool)

(assert (=> b!98204 m!107607))

(assert (=> bm!10015 m!106647))

(assert (=> bm!10015 m!106829))

(assert (=> d!26131 d!26213))

(assert (=> d!26131 d!26209))

(declare-fun d!26215 () Bool)

(assert (=> d!26215 (= (apply!92 lt!49023 lt!49022) (get!1284 (getValueByKey!150 (toList!783 lt!49023) lt!49022)))))

(declare-fun bs!4060 () Bool)

(assert (= bs!4060 d!26215))

(declare-fun m!107609 () Bool)

(assert (=> bs!4060 m!107609))

(assert (=> bs!4060 m!107609))

(declare-fun m!107611 () Bool)

(assert (=> bs!4060 m!107611))

(assert (=> b!97797 d!26215))

(declare-fun d!26217 () Bool)

(assert (=> d!26217 (= (apply!92 (+!135 lt!49020 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49021) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49020 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49021)))))

(declare-fun bs!4061 () Bool)

(assert (= bs!4061 d!26217))

(declare-fun m!107613 () Bool)

(assert (=> bs!4061 m!107613))

(assert (=> bs!4061 m!107613))

(declare-fun m!107615 () Bool)

(assert (=> bs!4061 m!107615))

(assert (=> b!97797 d!26217))

(declare-fun d!26219 () Bool)

(declare-fun e!64022 () Bool)

(assert (=> d!26219 e!64022))

(declare-fun res!49444 () Bool)

(assert (=> d!26219 (=> (not res!49444) (not e!64022))))

(declare-fun lt!49365 () ListLongMap!1535)

(assert (=> d!26219 (= res!49444 (contains!800 lt!49365 (_1!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49367 () List!1580)

(assert (=> d!26219 (= lt!49365 (ListLongMap!1536 lt!49367))))

(declare-fun lt!49366 () Unit!2937)

(declare-fun lt!49364 () Unit!2937)

(assert (=> d!26219 (= lt!49366 lt!49364)))

(assert (=> d!26219 (= (getValueByKey!150 lt!49367 (_1!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26219 (= lt!49364 (lemmaContainsTupThenGetReturnValue!66 lt!49367 (_1!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26219 (= lt!49367 (insertStrictlySorted!69 (toList!783 lt!49027) (_1!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26219 (= (+!135 lt!49027 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49365)))

(declare-fun b!98209 () Bool)

(declare-fun res!49443 () Bool)

(assert (=> b!98209 (=> (not res!49443) (not e!64022))))

(assert (=> b!98209 (= res!49443 (= (getValueByKey!150 (toList!783 lt!49365) (_1!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!98210 () Bool)

(assert (=> b!98210 (= e!64022 (contains!803 (toList!783 lt!49365) (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26219 res!49444) b!98209))

(assert (= (and b!98209 res!49443) b!98210))

(declare-fun m!107617 () Bool)

(assert (=> d!26219 m!107617))

(declare-fun m!107619 () Bool)

(assert (=> d!26219 m!107619))

(declare-fun m!107621 () Bool)

(assert (=> d!26219 m!107621))

(declare-fun m!107623 () Bool)

(assert (=> d!26219 m!107623))

(declare-fun m!107625 () Bool)

(assert (=> b!98209 m!107625))

(declare-fun m!107627 () Bool)

(assert (=> b!98210 m!107627))

(assert (=> b!97797 d!26219))

(declare-fun d!26221 () Bool)

(assert (=> d!26221 (= (apply!92 (+!135 lt!49027 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49026) (apply!92 lt!49027 lt!49026))))

(declare-fun lt!49368 () Unit!2937)

(assert (=> d!26221 (= lt!49368 (choose!591 lt!49027 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49026))))

(declare-fun e!64023 () Bool)

(assert (=> d!26221 e!64023))

(declare-fun res!49445 () Bool)

(assert (=> d!26221 (=> (not res!49445) (not e!64023))))

(assert (=> d!26221 (= res!49445 (contains!800 lt!49027 lt!49026))))

(assert (=> d!26221 (= (addApplyDifferent!68 lt!49027 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49026) lt!49368)))

(declare-fun b!98211 () Bool)

(assert (=> b!98211 (= e!64023 (not (= lt!49026 lt!49024)))))

(assert (= (and d!26221 res!49445) b!98211))

(assert (=> d!26221 m!106919))

(declare-fun m!107629 () Bool)

(assert (=> d!26221 m!107629))

(assert (=> d!26221 m!106927))

(declare-fun m!107631 () Bool)

(assert (=> d!26221 m!107631))

(assert (=> d!26221 m!106927))

(assert (=> d!26221 m!106929))

(assert (=> b!97797 d!26221))

(declare-fun d!26223 () Bool)

(declare-fun e!64024 () Bool)

(assert (=> d!26223 e!64024))

(declare-fun res!49447 () Bool)

(assert (=> d!26223 (=> (not res!49447) (not e!64024))))

(declare-fun lt!49370 () ListLongMap!1535)

(assert (=> d!26223 (= res!49447 (contains!800 lt!49370 (_1!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(declare-fun lt!49372 () List!1580)

(assert (=> d!26223 (= lt!49370 (ListLongMap!1536 lt!49372))))

(declare-fun lt!49371 () Unit!2937)

(declare-fun lt!49369 () Unit!2937)

(assert (=> d!26223 (= lt!49371 lt!49369)))

(assert (=> d!26223 (= (getValueByKey!150 lt!49372 (_1!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26223 (= lt!49369 (lemmaContainsTupThenGetReturnValue!66 lt!49372 (_1!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26223 (= lt!49372 (insertStrictlySorted!69 (toList!783 lt!49020) (_1!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26223 (= (+!135 lt!49020 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49370)))

(declare-fun b!98212 () Bool)

(declare-fun res!49446 () Bool)

(assert (=> b!98212 (=> (not res!49446) (not e!64024))))

(assert (=> b!98212 (= res!49446 (= (getValueByKey!150 (toList!783 lt!49370) (_1!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))))

(declare-fun b!98213 () Bool)

(assert (=> b!98213 (= e!64024 (contains!803 (toList!783 lt!49370) (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))

(assert (= (and d!26223 res!49447) b!98212))

(assert (= (and b!98212 res!49446) b!98213))

(declare-fun m!107633 () Bool)

(assert (=> d!26223 m!107633))

(declare-fun m!107635 () Bool)

(assert (=> d!26223 m!107635))

(declare-fun m!107637 () Bool)

(assert (=> d!26223 m!107637))

(declare-fun m!107639 () Bool)

(assert (=> d!26223 m!107639))

(declare-fun m!107641 () Bool)

(assert (=> b!98212 m!107641))

(declare-fun m!107643 () Bool)

(assert (=> b!98213 m!107643))

(assert (=> b!97797 d!26223))

(declare-fun d!26225 () Bool)

(assert (=> d!26225 (= (apply!92 (+!135 lt!49027 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49026) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49027 (tuple2!2341 lt!49024 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49026)))))

(declare-fun bs!4062 () Bool)

(assert (= bs!4062 d!26225))

(declare-fun m!107645 () Bool)

(assert (=> bs!4062 m!107645))

(assert (=> bs!4062 m!107645))

(declare-fun m!107647 () Bool)

(assert (=> bs!4062 m!107647))

(assert (=> b!97797 d!26225))

(declare-fun d!26227 () Bool)

(declare-fun e!64025 () Bool)

(assert (=> d!26227 e!64025))

(declare-fun res!49449 () Bool)

(assert (=> d!26227 (=> (not res!49449) (not e!64025))))

(declare-fun lt!49374 () ListLongMap!1535)

(assert (=> d!26227 (= res!49449 (contains!800 lt!49374 (_1!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(declare-fun lt!49376 () List!1580)

(assert (=> d!26227 (= lt!49374 (ListLongMap!1536 lt!49376))))

(declare-fun lt!49375 () Unit!2937)

(declare-fun lt!49373 () Unit!2937)

(assert (=> d!26227 (= lt!49375 lt!49373)))

(assert (=> d!26227 (= (getValueByKey!150 lt!49376 (_1!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26227 (= lt!49373 (lemmaContainsTupThenGetReturnValue!66 lt!49376 (_1!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26227 (= lt!49376 (insertStrictlySorted!69 (toList!783 lt!49015) (_1!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26227 (= (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49374)))

(declare-fun b!98214 () Bool)

(declare-fun res!49448 () Bool)

(assert (=> b!98214 (=> (not res!49448) (not e!64025))))

(assert (=> b!98214 (= res!49448 (= (getValueByKey!150 (toList!783 lt!49374) (_1!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))))

(declare-fun b!98215 () Bool)

(assert (=> b!98215 (= e!64025 (contains!803 (toList!783 lt!49374) (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))

(assert (= (and d!26227 res!49449) b!98214))

(assert (= (and b!98214 res!49448) b!98215))

(declare-fun m!107649 () Bool)

(assert (=> d!26227 m!107649))

(declare-fun m!107651 () Bool)

(assert (=> d!26227 m!107651))

(declare-fun m!107653 () Bool)

(assert (=> d!26227 m!107653))

(declare-fun m!107655 () Bool)

(assert (=> d!26227 m!107655))

(declare-fun m!107657 () Bool)

(assert (=> b!98214 m!107657))

(declare-fun m!107659 () Bool)

(assert (=> b!98215 m!107659))

(assert (=> b!97797 d!26227))

(declare-fun d!26229 () Bool)

(assert (=> d!26229 (= (apply!92 lt!49020 lt!49021) (get!1284 (getValueByKey!150 (toList!783 lt!49020) lt!49021)))))

(declare-fun bs!4063 () Bool)

(assert (= bs!4063 d!26229))

(declare-fun m!107661 () Bool)

(assert (=> bs!4063 m!107661))

(assert (=> bs!4063 m!107661))

(declare-fun m!107663 () Bool)

(assert (=> bs!4063 m!107663))

(assert (=> b!97797 d!26229))

(declare-fun d!26231 () Bool)

(declare-fun e!64026 () Bool)

(assert (=> d!26231 e!64026))

(declare-fun res!49451 () Bool)

(assert (=> d!26231 (=> (not res!49451) (not e!64026))))

(declare-fun lt!49378 () ListLongMap!1535)

(assert (=> d!26231 (= res!49451 (contains!800 lt!49378 (_1!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49380 () List!1580)

(assert (=> d!26231 (= lt!49378 (ListLongMap!1536 lt!49380))))

(declare-fun lt!49379 () Unit!2937)

(declare-fun lt!49377 () Unit!2937)

(assert (=> d!26231 (= lt!49379 lt!49377)))

(assert (=> d!26231 (= (getValueByKey!150 lt!49380 (_1!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26231 (= lt!49377 (lemmaContainsTupThenGetReturnValue!66 lt!49380 (_1!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26231 (= lt!49380 (insertStrictlySorted!69 (toList!783 lt!49023) (_1!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26231 (= (+!135 lt!49023 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49378)))

(declare-fun b!98216 () Bool)

(declare-fun res!49450 () Bool)

(assert (=> b!98216 (=> (not res!49450) (not e!64026))))

(assert (=> b!98216 (= res!49450 (= (getValueByKey!150 (toList!783 lt!49378) (_1!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!98217 () Bool)

(assert (=> b!98217 (= e!64026 (contains!803 (toList!783 lt!49378) (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26231 res!49451) b!98216))

(assert (= (and b!98216 res!49450) b!98217))

(declare-fun m!107665 () Bool)

(assert (=> d!26231 m!107665))

(declare-fun m!107667 () Bool)

(assert (=> d!26231 m!107667))

(declare-fun m!107669 () Bool)

(assert (=> d!26231 m!107669))

(declare-fun m!107671 () Bool)

(assert (=> d!26231 m!107671))

(declare-fun m!107673 () Bool)

(assert (=> b!98216 m!107673))

(declare-fun m!107675 () Bool)

(assert (=> b!98217 m!107675))

(assert (=> b!97797 d!26231))

(declare-fun d!26233 () Bool)

(assert (=> d!26233 (= (apply!92 (+!135 lt!49023 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49022) (apply!92 lt!49023 lt!49022))))

(declare-fun lt!49381 () Unit!2937)

(assert (=> d!26233 (= lt!49381 (choose!591 lt!49023 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49022))))

(declare-fun e!64027 () Bool)

(assert (=> d!26233 e!64027))

(declare-fun res!49452 () Bool)

(assert (=> d!26233 (=> (not res!49452) (not e!64027))))

(assert (=> d!26233 (= res!49452 (contains!800 lt!49023 lt!49022))))

(assert (=> d!26233 (= (addApplyDifferent!68 lt!49023 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49022) lt!49381)))

(declare-fun b!98218 () Bool)

(assert (=> b!98218 (= e!64027 (not (= lt!49022 lt!49030)))))

(assert (= (and d!26233 res!49452) b!98218))

(assert (=> d!26233 m!106935))

(declare-fun m!107677 () Bool)

(assert (=> d!26233 m!107677))

(assert (=> d!26233 m!106921))

(declare-fun m!107679 () Bool)

(assert (=> d!26233 m!107679))

(assert (=> d!26233 m!106921))

(assert (=> d!26233 m!106923))

(assert (=> b!97797 d!26233))

(declare-fun d!26235 () Bool)

(declare-fun e!64028 () Bool)

(assert (=> d!26235 e!64028))

(declare-fun res!49453 () Bool)

(assert (=> d!26235 (=> res!49453 e!64028)))

(declare-fun lt!49383 () Bool)

(assert (=> d!26235 (= res!49453 (not lt!49383))))

(declare-fun lt!49385 () Bool)

(assert (=> d!26235 (= lt!49383 lt!49385)))

(declare-fun lt!49382 () Unit!2937)

(declare-fun e!64029 () Unit!2937)

(assert (=> d!26235 (= lt!49382 e!64029)))

(declare-fun c!16660 () Bool)

(assert (=> d!26235 (= c!16660 lt!49385)))

(assert (=> d!26235 (= lt!49385 (containsKey!154 (toList!783 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49025))))

(assert (=> d!26235 (= (contains!800 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49025) lt!49383)))

(declare-fun b!98219 () Bool)

(declare-fun lt!49384 () Unit!2937)

(assert (=> b!98219 (= e!64029 lt!49384)))

(assert (=> b!98219 (= lt!49384 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49025))))

(assert (=> b!98219 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49025))))

(declare-fun b!98220 () Bool)

(declare-fun Unit!2964 () Unit!2937)

(assert (=> b!98220 (= e!64029 Unit!2964)))

(declare-fun b!98221 () Bool)

(assert (=> b!98221 (= e!64028 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49025)))))

(assert (= (and d!26235 c!16660) b!98219))

(assert (= (and d!26235 (not c!16660)) b!98220))

(assert (= (and d!26235 (not res!49453)) b!98221))

(declare-fun m!107681 () Bool)

(assert (=> d!26235 m!107681))

(declare-fun m!107683 () Bool)

(assert (=> b!98219 m!107683))

(declare-fun m!107685 () Bool)

(assert (=> b!98219 m!107685))

(assert (=> b!98219 m!107685))

(declare-fun m!107687 () Bool)

(assert (=> b!98219 m!107687))

(assert (=> b!98221 m!107685))

(assert (=> b!98221 m!107685))

(assert (=> b!98221 m!107687))

(assert (=> b!97797 d!26235))

(declare-fun b!98222 () Bool)

(declare-fun e!64034 () Bool)

(declare-fun e!64030 () Bool)

(assert (=> b!98222 (= e!64034 e!64030)))

(declare-fun c!16662 () Bool)

(declare-fun e!64035 () Bool)

(assert (=> b!98222 (= c!16662 e!64035)))

(declare-fun res!49456 () Bool)

(assert (=> b!98222 (=> (not res!49456) (not e!64035))))

(assert (=> b!98222 (= res!49456 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98223 () Bool)

(declare-fun e!64032 () ListLongMap!1535)

(declare-fun call!10019 () ListLongMap!1535)

(assert (=> b!98223 (= e!64032 call!10019)))

(declare-fun b!98224 () Bool)

(declare-fun e!64036 () ListLongMap!1535)

(assert (=> b!98224 (= e!64036 (ListLongMap!1536 Nil!1577))))

(declare-fun b!98225 () Bool)

(declare-fun lt!49389 () Unit!2937)

(declare-fun lt!49388 () Unit!2937)

(assert (=> b!98225 (= lt!49389 lt!49388)))

(declare-fun lt!49386 () V!3155)

(declare-fun lt!49390 () (_ BitVec 64))

(declare-fun lt!49391 () (_ BitVec 64))

(declare-fun lt!49387 () ListLongMap!1535)

(assert (=> b!98225 (not (contains!800 (+!135 lt!49387 (tuple2!2341 lt!49390 lt!49386)) lt!49391))))

(assert (=> b!98225 (= lt!49388 (addStillNotContains!40 lt!49387 lt!49390 lt!49386 lt!49391))))

(assert (=> b!98225 (= lt!49391 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98225 (= lt!49386 (get!1280 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98225 (= lt!49390 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98225 (= lt!49387 call!10019)))

(assert (=> b!98225 (= e!64032 (+!135 call!10019 (tuple2!2341 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1280 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64031 () Bool)

(declare-fun b!98226 () Bool)

(declare-fun lt!49392 () ListLongMap!1535)

(assert (=> b!98226 (= e!64031 (= lt!49392 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98227 () Bool)

(assert (=> b!98227 (= e!64035 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98227 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26237 () Bool)

(assert (=> d!26237 e!64034))

(declare-fun res!49457 () Bool)

(assert (=> d!26237 (=> (not res!49457) (not e!64034))))

(assert (=> d!26237 (= res!49457 (not (contains!800 lt!49392 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26237 (= lt!49392 e!64036)))

(declare-fun c!16663 () Bool)

(assert (=> d!26237 (= c!16663 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26237 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26237 (= (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49392)))

(declare-fun b!98228 () Bool)

(assert (=> b!98228 (= e!64036 e!64032)))

(declare-fun c!16664 () Bool)

(assert (=> b!98228 (= c!16664 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98229 () Bool)

(assert (=> b!98229 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> b!98229 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))))))))

(declare-fun e!64033 () Bool)

(assert (=> b!98229 (= e!64033 (= (apply!92 lt!49392 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98230 () Bool)

(declare-fun res!49454 () Bool)

(assert (=> b!98230 (=> (not res!49454) (not e!64034))))

(assert (=> b!98230 (= res!49454 (not (contains!800 lt!49392 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98231 () Bool)

(assert (=> b!98231 (= e!64030 e!64033)))

(assert (=> b!98231 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49455 () Bool)

(assert (=> b!98231 (= res!49455 (contains!800 lt!49392 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98231 (=> (not res!49455) (not e!64033))))

(declare-fun b!98232 () Bool)

(assert (=> b!98232 (= e!64031 (isEmpty!356 lt!49392))))

(declare-fun bm!10016 () Bool)

(assert (=> bm!10016 (= call!10019 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16552 (ite c!16553 lt!48990 lt!49006) (extraKeys!2302 newMap!16)) (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun b!98233 () Bool)

(assert (=> b!98233 (= e!64030 e!64031)))

(declare-fun c!16661 () Bool)

(assert (=> b!98233 (= c!16661 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26237 c!16663) b!98224))

(assert (= (and d!26237 (not c!16663)) b!98228))

(assert (= (and b!98228 c!16664) b!98225))

(assert (= (and b!98228 (not c!16664)) b!98223))

(assert (= (or b!98225 b!98223) bm!10016))

(assert (= (and d!26237 res!49457) b!98230))

(assert (= (and b!98230 res!49454) b!98222))

(assert (= (and b!98222 res!49456) b!98227))

(assert (= (and b!98222 c!16662) b!98231))

(assert (= (and b!98222 (not c!16662)) b!98233))

(assert (= (and b!98231 res!49455) b!98229))

(assert (= (and b!98233 c!16661) b!98226))

(assert (= (and b!98233 (not c!16661)) b!98232))

(declare-fun b_lambda!4371 () Bool)

(assert (=> (not b_lambda!4371) (not b!98225)))

(assert (=> b!98225 t!5542))

(declare-fun b_and!6035 () Bool)

(assert (= b_and!6031 (and (=> t!5542 result!3275) b_and!6035)))

(assert (=> b!98225 t!5544))

(declare-fun b_and!6037 () Bool)

(assert (= b_and!6033 (and (=> t!5544 result!3277) b_and!6037)))

(declare-fun b_lambda!4373 () Bool)

(assert (=> (not b_lambda!4373) (not b!98229)))

(assert (=> b!98229 t!5542))

(declare-fun b_and!6039 () Bool)

(assert (= b_and!6035 (and (=> t!5542 result!3275) b_and!6039)))

(assert (=> b!98229 t!5544))

(declare-fun b_and!6041 () Bool)

(assert (= b_and!6037 (and (=> t!5544 result!3277) b_and!6041)))

(declare-fun m!107689 () Bool)

(assert (=> b!98230 m!107689))

(assert (=> b!98228 m!106891))

(assert (=> b!98228 m!106891))

(assert (=> b!98228 m!106901))

(assert (=> b!98231 m!106891))

(assert (=> b!98231 m!106891))

(declare-fun m!107691 () Bool)

(assert (=> b!98231 m!107691))

(declare-fun m!107693 () Bool)

(assert (=> b!98232 m!107693))

(declare-fun m!107695 () Bool)

(assert (=> bm!10016 m!107695))

(assert (=> b!98227 m!106891))

(assert (=> b!98227 m!106891))

(assert (=> b!98227 m!106901))

(assert (=> b!98229 m!106891))

(assert (=> b!98229 m!106907))

(assert (=> b!98229 m!106905))

(assert (=> b!98229 m!106891))

(declare-fun m!107697 () Bool)

(assert (=> b!98229 m!107697))

(assert (=> b!98229 m!106905))

(assert (=> b!98229 m!106907))

(assert (=> b!98229 m!106909))

(declare-fun m!107699 () Bool)

(assert (=> d!26237 m!107699))

(assert (=> d!26237 m!106895))

(assert (=> b!98226 m!107695))

(assert (=> b!98225 m!106891))

(assert (=> b!98225 m!106907))

(assert (=> b!98225 m!106905))

(declare-fun m!107701 () Bool)

(assert (=> b!98225 m!107701))

(declare-fun m!107703 () Bool)

(assert (=> b!98225 m!107703))

(assert (=> b!98225 m!106905))

(assert (=> b!98225 m!106907))

(assert (=> b!98225 m!106909))

(declare-fun m!107705 () Bool)

(assert (=> b!98225 m!107705))

(assert (=> b!98225 m!107701))

(declare-fun m!107707 () Bool)

(assert (=> b!98225 m!107707))

(assert (=> b!97797 d!26237))

(declare-fun d!26239 () Bool)

(assert (=> d!26239 (= (apply!92 (+!135 lt!49020 (tuple2!2341 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49021) (apply!92 lt!49020 lt!49021))))

(declare-fun lt!49393 () Unit!2937)

(assert (=> d!26239 (= lt!49393 (choose!591 lt!49020 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49021))))

(declare-fun e!64037 () Bool)

(assert (=> d!26239 e!64037))

(declare-fun res!49458 () Bool)

(assert (=> d!26239 (=> (not res!49458) (not e!64037))))

(assert (=> d!26239 (= res!49458 (contains!800 lt!49020 lt!49021))))

(assert (=> d!26239 (= (addApplyDifferent!68 lt!49020 lt!49019 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49021) lt!49393)))

(declare-fun b!98234 () Bool)

(assert (=> b!98234 (= e!64037 (not (= lt!49021 lt!49019)))))

(assert (= (and d!26239 res!49458) b!98234))

(assert (=> d!26239 m!106939))

(declare-fun m!107709 () Bool)

(assert (=> d!26239 m!107709))

(assert (=> d!26239 m!106913))

(declare-fun m!107711 () Bool)

(assert (=> d!26239 m!107711))

(assert (=> d!26239 m!106913))

(assert (=> d!26239 m!106941))

(assert (=> b!97797 d!26239))

(declare-fun d!26241 () Bool)

(assert (=> d!26241 (contains!800 (+!135 lt!49015 (tuple2!2341 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49025)))

(declare-fun lt!49394 () Unit!2937)

(assert (=> d!26241 (= lt!49394 (choose!592 lt!49015 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49025))))

(assert (=> d!26241 (contains!800 lt!49015 lt!49025)))

(assert (=> d!26241 (= (addStillContains!68 lt!49015 lt!49016 (ite (and c!16552 c!16553) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49025) lt!49394)))

(declare-fun bs!4064 () Bool)

(assert (= bs!4064 d!26241))

(assert (=> bs!4064 m!106915))

(assert (=> bs!4064 m!106915))

(assert (=> bs!4064 m!106933))

(declare-fun m!107713 () Bool)

(assert (=> bs!4064 m!107713))

(declare-fun m!107715 () Bool)

(assert (=> bs!4064 m!107715))

(assert (=> b!97797 d!26241))

(declare-fun d!26243 () Bool)

(assert (=> d!26243 (= (apply!92 (+!135 lt!49023 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49022) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49023 (tuple2!2341 lt!49030 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49022)))))

(declare-fun bs!4065 () Bool)

(assert (= bs!4065 d!26243))

(declare-fun m!107717 () Bool)

(assert (=> bs!4065 m!107717))

(assert (=> bs!4065 m!107717))

(declare-fun m!107719 () Bool)

(assert (=> bs!4065 m!107719))

(assert (=> b!97797 d!26243))

(declare-fun d!26245 () Bool)

(assert (=> d!26245 (= (apply!92 lt!49027 lt!49026) (get!1284 (getValueByKey!150 (toList!783 lt!49027) lt!49026)))))

(declare-fun bs!4066 () Bool)

(assert (= bs!4066 d!26245))

(declare-fun m!107721 () Bool)

(assert (=> bs!4066 m!107721))

(assert (=> bs!4066 m!107721))

(declare-fun m!107723 () Bool)

(assert (=> bs!4066 m!107723))

(assert (=> b!97797 d!26245))

(assert (=> bm!9991 d!26191))

(declare-fun d!26247 () Bool)

(assert (=> d!26247 (= (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!357 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4067 () Bool)

(assert (= bs!4067 d!26247))

(assert (=> bs!4067 m!107303))

(declare-fun m!107725 () Bool)

(assert (=> bs!4067 m!107725))

(assert (=> b!98013 d!26247))

(declare-fun b!98237 () Bool)

(declare-fun e!64039 () Option!156)

(assert (=> b!98237 (= e!64039 (getValueByKey!150 (t!5534 (toList!783 lt!48916)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98235 () Bool)

(declare-fun e!64038 () Option!156)

(assert (=> b!98235 (= e!64038 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48916)))))))

(declare-fun b!98238 () Bool)

(assert (=> b!98238 (= e!64039 None!154)))

(declare-fun b!98236 () Bool)

(assert (=> b!98236 (= e!64038 e!64039)))

(declare-fun c!16666 () Bool)

(assert (=> b!98236 (= c!16666 (and ((_ is Cons!1576) (toList!783 lt!48916)) (not (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26249 () Bool)

(declare-fun c!16665 () Bool)

(assert (=> d!26249 (= c!16665 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26249 (= (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000) e!64038)))

(assert (= (and d!26249 c!16665) b!98235))

(assert (= (and d!26249 (not c!16665)) b!98236))

(assert (= (and b!98236 c!16666) b!98237))

(assert (= (and b!98236 (not c!16666)) b!98238))

(declare-fun m!107727 () Bool)

(assert (=> b!98237 m!107727))

(assert (=> b!98013 d!26249))

(declare-fun d!26251 () Bool)

(assert (=> d!26251 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49395 () Unit!2937)

(assert (=> d!26251 (= lt!49395 (choose!596 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64040 () Bool)

(assert (=> d!26251 e!64040))

(declare-fun res!49459 () Bool)

(assert (=> d!26251 (=> (not res!49459) (not e!64040))))

(assert (=> d!26251 (= res!49459 (isStrictlySorted!304 (toList!783 lt!48916)))))

(assert (=> d!26251 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000) lt!49395)))

(declare-fun b!98239 () Bool)

(assert (=> b!98239 (= e!64040 (containsKey!154 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26251 res!49459) b!98239))

(assert (=> d!26251 m!106951))

(assert (=> d!26251 m!106951))

(assert (=> d!26251 m!106953))

(declare-fun m!107729 () Bool)

(assert (=> d!26251 m!107729))

(declare-fun m!107731 () Bool)

(assert (=> d!26251 m!107731))

(assert (=> b!98239 m!106947))

(assert (=> b!97811 d!26251))

(declare-fun d!26253 () Bool)

(assert (=> d!26253 (= (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!357 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4068 () Bool)

(assert (= bs!4068 d!26253))

(assert (=> bs!4068 m!106951))

(declare-fun m!107733 () Bool)

(assert (=> bs!4068 m!107733))

(assert (=> b!97811 d!26253))

(declare-fun b!98242 () Bool)

(declare-fun e!64042 () Option!156)

(assert (=> b!98242 (= e!64042 (getValueByKey!150 (t!5534 (toList!783 lt!48916)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98240 () Bool)

(declare-fun e!64041 () Option!156)

(assert (=> b!98240 (= e!64041 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48916)))))))

(declare-fun b!98243 () Bool)

(assert (=> b!98243 (= e!64042 None!154)))

(declare-fun b!98241 () Bool)

(assert (=> b!98241 (= e!64041 e!64042)))

(declare-fun c!16668 () Bool)

(assert (=> b!98241 (= c!16668 (and ((_ is Cons!1576) (toList!783 lt!48916)) (not (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26255 () Bool)

(declare-fun c!16667 () Bool)

(assert (=> d!26255 (= c!16667 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26255 (= (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000) e!64041)))

(assert (= (and d!26255 c!16667) b!98240))

(assert (= (and d!26255 (not c!16667)) b!98241))

(assert (= (and b!98241 c!16668) b!98242))

(assert (= (and b!98241 (not c!16668)) b!98243))

(declare-fun m!107735 () Bool)

(assert (=> b!98242 m!107735))

(assert (=> b!97811 d!26255))

(declare-fun b!98244 () Bool)

(declare-fun e!64047 () Bool)

(declare-fun e!64043 () Bool)

(assert (=> b!98244 (= e!64047 e!64043)))

(declare-fun c!16670 () Bool)

(declare-fun e!64048 () Bool)

(assert (=> b!98244 (= c!16670 e!64048)))

(declare-fun res!49462 () Bool)

(assert (=> b!98244 (=> (not res!49462) (not e!64048))))

(assert (=> b!98244 (= res!49462 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98245 () Bool)

(declare-fun e!64045 () ListLongMap!1535)

(declare-fun call!10020 () ListLongMap!1535)

(assert (=> b!98245 (= e!64045 call!10020)))

(declare-fun b!98246 () Bool)

(declare-fun e!64049 () ListLongMap!1535)

(assert (=> b!98246 (= e!64049 (ListLongMap!1536 Nil!1577))))

(declare-fun b!98247 () Bool)

(declare-fun lt!49399 () Unit!2937)

(declare-fun lt!49398 () Unit!2937)

(assert (=> b!98247 (= lt!49399 lt!49398)))

(declare-fun lt!49397 () ListLongMap!1535)

(declare-fun lt!49400 () (_ BitVec 64))

(declare-fun lt!49396 () V!3155)

(declare-fun lt!49401 () (_ BitVec 64))

(assert (=> b!98247 (not (contains!800 (+!135 lt!49397 (tuple2!2341 lt!49400 lt!49396)) lt!49401))))

(assert (=> b!98247 (= lt!49398 (addStillNotContains!40 lt!49397 lt!49400 lt!49396 lt!49401))))

(assert (=> b!98247 (= lt!49401 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98247 (= lt!49396 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98247 (= lt!49400 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!98247 (= lt!49397 call!10020)))

(assert (=> b!98247 (= e!64045 (+!135 call!10020 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64044 () Bool)

(declare-fun b!98248 () Bool)

(declare-fun lt!49402 () ListLongMap!1535)

(assert (=> b!98248 (= e!64044 (= lt!49402 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98249 () Bool)

(assert (=> b!98249 (= e!64048 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98249 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun d!26257 () Bool)

(assert (=> d!26257 e!64047))

(declare-fun res!49463 () Bool)

(assert (=> d!26257 (=> (not res!49463) (not e!64047))))

(assert (=> d!26257 (= res!49463 (not (contains!800 lt!49402 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26257 (= lt!49402 e!64049)))

(declare-fun c!16671 () Bool)

(assert (=> d!26257 (= c!16671 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26257 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992))))))

(assert (=> d!26257 (= (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))) lt!49402)))

(declare-fun b!98250 () Bool)

(assert (=> b!98250 (= e!64049 e!64045)))

(declare-fun c!16672 () Bool)

(assert (=> b!98250 (= c!16672 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98251 () Bool)

(assert (=> b!98251 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> b!98251 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!64046 () Bool)

(assert (=> b!98251 (= e!64046 (= (apply!92 lt!49402 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98252 () Bool)

(declare-fun res!49460 () Bool)

(assert (=> b!98252 (=> (not res!49460) (not e!64047))))

(assert (=> b!98252 (= res!49460 (not (contains!800 lt!49402 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98253 () Bool)

(assert (=> b!98253 (= e!64043 e!64046)))

(assert (=> b!98253 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun res!49461 () Bool)

(assert (=> b!98253 (= res!49461 (contains!800 lt!49402 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98253 (=> (not res!49461) (not e!64046))))

(declare-fun b!98254 () Bool)

(assert (=> b!98254 (= e!64044 (isEmpty!356 lt!49402))))

(declare-fun bm!10017 () Bool)

(assert (=> bm!10017 (= call!10020 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (_values!2464 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992))) (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) (minValue!2364 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992)))))))

(declare-fun b!98255 () Bool)

(assert (=> b!98255 (= e!64043 e!64044)))

(declare-fun c!16669 () Bool)

(assert (=> b!98255 (= c!16669 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26257 c!16671) b!98246))

(assert (= (and d!26257 (not c!16671)) b!98250))

(assert (= (and b!98250 c!16672) b!98247))

(assert (= (and b!98250 (not c!16672)) b!98245))

(assert (= (or b!98247 b!98245) bm!10017))

(assert (= (and d!26257 res!49463) b!98252))

(assert (= (and b!98252 res!49460) b!98244))

(assert (= (and b!98244 res!49462) b!98249))

(assert (= (and b!98244 c!16670) b!98253))

(assert (= (and b!98244 (not c!16670)) b!98255))

(assert (= (and b!98253 res!49461) b!98251))

(assert (= (and b!98255 c!16669) b!98248))

(assert (= (and b!98255 (not c!16669)) b!98254))

(declare-fun b_lambda!4375 () Bool)

(assert (=> (not b_lambda!4375) (not b!98247)))

(assert (=> b!98247 t!5531))

(declare-fun b_and!6043 () Bool)

(assert (= b_and!6039 (and (=> t!5531 result!3261) b_and!6043)))

(assert (=> b!98247 t!5533))

(declare-fun b_and!6045 () Bool)

(assert (= b_and!6041 (and (=> t!5533 result!3265) b_and!6045)))

(declare-fun b_lambda!4377 () Bool)

(assert (=> (not b_lambda!4377) (not b!98251)))

(assert (=> b!98251 t!5531))

(declare-fun b_and!6047 () Bool)

(assert (= b_and!6043 (and (=> t!5531 result!3261) b_and!6047)))

(assert (=> b!98251 t!5533))

(declare-fun b_and!6049 () Bool)

(assert (= b_and!6045 (and (=> t!5533 result!3265) b_and!6049)))

(declare-fun m!107737 () Bool)

(assert (=> b!98252 m!107737))

(assert (=> b!98250 m!107307))

(assert (=> b!98250 m!107307))

(declare-fun m!107739 () Bool)

(assert (=> b!98250 m!107739))

(assert (=> b!98253 m!107307))

(assert (=> b!98253 m!107307))

(declare-fun m!107741 () Bool)

(assert (=> b!98253 m!107741))

(declare-fun m!107743 () Bool)

(assert (=> b!98254 m!107743))

(declare-fun m!107745 () Bool)

(assert (=> bm!10017 m!107745))

(assert (=> b!98249 m!107307))

(assert (=> b!98249 m!107307))

(assert (=> b!98249 m!107739))

(assert (=> b!98251 m!107307))

(assert (=> b!98251 m!106671))

(declare-fun m!107747 () Bool)

(assert (=> b!98251 m!107747))

(assert (=> b!98251 m!107307))

(declare-fun m!107749 () Bool)

(assert (=> b!98251 m!107749))

(assert (=> b!98251 m!107747))

(assert (=> b!98251 m!106671))

(declare-fun m!107751 () Bool)

(assert (=> b!98251 m!107751))

(declare-fun m!107753 () Bool)

(assert (=> d!26257 m!107753))

(assert (=> d!26257 m!106681))

(assert (=> b!98248 m!107745))

(assert (=> b!98247 m!107307))

(assert (=> b!98247 m!106671))

(assert (=> b!98247 m!107747))

(declare-fun m!107755 () Bool)

(assert (=> b!98247 m!107755))

(declare-fun m!107757 () Bool)

(assert (=> b!98247 m!107757))

(assert (=> b!98247 m!107747))

(assert (=> b!98247 m!106671))

(assert (=> b!98247 m!107751))

(declare-fun m!107759 () Bool)

(assert (=> b!98247 m!107759))

(assert (=> b!98247 m!107755))

(declare-fun m!107761 () Bool)

(assert (=> b!98247 m!107761))

(assert (=> bm!9997 d!26257))

(assert (=> bm!9962 d!26237))

(declare-fun d!26259 () Bool)

(declare-fun e!64050 () Bool)

(assert (=> d!26259 e!64050))

(declare-fun res!49464 () Bool)

(assert (=> d!26259 (=> res!49464 e!64050)))

(declare-fun lt!49404 () Bool)

(assert (=> d!26259 (= res!49464 (not lt!49404))))

(declare-fun lt!49406 () Bool)

(assert (=> d!26259 (= lt!49404 lt!49406)))

(declare-fun lt!49403 () Unit!2937)

(declare-fun e!64051 () Unit!2937)

(assert (=> d!26259 (= lt!49403 e!64051)))

(declare-fun c!16673 () Bool)

(assert (=> d!26259 (= c!16673 lt!49406)))

(assert (=> d!26259 (= lt!49406 (containsKey!154 (toList!783 (map!1255 (_2!1180 lt!49117))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26259 (= (contains!800 (map!1255 (_2!1180 lt!49117)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49404)))

(declare-fun b!98256 () Bool)

(declare-fun lt!49405 () Unit!2937)

(assert (=> b!98256 (= e!64051 lt!49405)))

(assert (=> b!98256 (= lt!49405 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (map!1255 (_2!1180 lt!49117))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!98256 (isDefined!103 (getValueByKey!150 (toList!783 (map!1255 (_2!1180 lt!49117))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98257 () Bool)

(declare-fun Unit!2965 () Unit!2937)

(assert (=> b!98257 (= e!64051 Unit!2965)))

(declare-fun b!98258 () Bool)

(assert (=> b!98258 (= e!64050 (isDefined!103 (getValueByKey!150 (toList!783 (map!1255 (_2!1180 lt!49117))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (= (and d!26259 c!16673) b!98256))

(assert (= (and d!26259 (not c!16673)) b!98257))

(assert (= (and d!26259 (not res!49464)) b!98258))

(assert (=> d!26259 m!106647))

(declare-fun m!107763 () Bool)

(assert (=> d!26259 m!107763))

(assert (=> b!98256 m!106647))

(declare-fun m!107765 () Bool)

(assert (=> b!98256 m!107765))

(assert (=> b!98256 m!106647))

(declare-fun m!107767 () Bool)

(assert (=> b!98256 m!107767))

(assert (=> b!98256 m!107767))

(declare-fun m!107769 () Bool)

(assert (=> b!98256 m!107769))

(assert (=> b!98258 m!106647))

(assert (=> b!98258 m!107767))

(assert (=> b!98258 m!107767))

(assert (=> b!98258 m!107769))

(assert (=> b!97887 d!26259))

(declare-fun d!26261 () Bool)

(assert (=> d!26261 (= (map!1255 (_2!1180 lt!49117)) (getCurrentListMap!474 (_keys!4171 (_2!1180 lt!49117)) (_values!2464 (_2!1180 lt!49117)) (mask!6578 (_2!1180 lt!49117)) (extraKeys!2302 (_2!1180 lt!49117)) (zeroValue!2364 (_2!1180 lt!49117)) (minValue!2364 (_2!1180 lt!49117)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!49117))))))

(declare-fun bs!4069 () Bool)

(assert (= bs!4069 d!26261))

(declare-fun m!107771 () Bool)

(assert (=> bs!4069 m!107771))

(assert (=> b!97887 d!26261))

(declare-fun d!26263 () Bool)

(declare-fun res!49465 () Bool)

(declare-fun e!64052 () Bool)

(assert (=> d!26263 (=> (not res!49465) (not e!64052))))

(assert (=> d!26263 (= res!49465 (simpleValid!68 (_2!1180 lt!49117)))))

(assert (=> d!26263 (= (valid!384 (_2!1180 lt!49117)) e!64052)))

(declare-fun b!98259 () Bool)

(declare-fun res!49466 () Bool)

(assert (=> b!98259 (=> (not res!49466) (not e!64052))))

(assert (=> b!98259 (= res!49466 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1180 lt!49117)) #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!49117)))) (_size!475 (_2!1180 lt!49117))))))

(declare-fun b!98260 () Bool)

(declare-fun res!49467 () Bool)

(assert (=> b!98260 (=> (not res!49467) (not e!64052))))

(assert (=> b!98260 (= res!49467 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1180 lt!49117)) (mask!6578 (_2!1180 lt!49117))))))

(declare-fun b!98261 () Bool)

(assert (=> b!98261 (= e!64052 (arrayNoDuplicates!0 (_keys!4171 (_2!1180 lt!49117)) #b00000000000000000000000000000000 Nil!1578))))

(assert (= (and d!26263 res!49465) b!98259))

(assert (= (and b!98259 res!49466) b!98260))

(assert (= (and b!98260 res!49467) b!98261))

(declare-fun m!107773 () Bool)

(assert (=> d!26263 m!107773))

(declare-fun m!107775 () Bool)

(assert (=> b!98259 m!107775))

(declare-fun m!107777 () Bool)

(assert (=> b!98260 m!107777))

(declare-fun m!107779 () Bool)

(assert (=> b!98261 m!107779))

(assert (=> b!97886 d!26263))

(declare-fun d!26265 () Bool)

(declare-fun e!64053 () Bool)

(assert (=> d!26265 e!64053))

(declare-fun res!49468 () Bool)

(assert (=> d!26265 (=> res!49468 e!64053)))

(declare-fun lt!49408 () Bool)

(assert (=> d!26265 (= res!49468 (not lt!49408))))

(declare-fun lt!49410 () Bool)

(assert (=> d!26265 (= lt!49408 lt!49410)))

(declare-fun lt!49407 () Unit!2937)

(declare-fun e!64054 () Unit!2937)

(assert (=> d!26265 (= lt!49407 e!64054)))

(declare-fun c!16674 () Bool)

(assert (=> d!26265 (= c!16674 lt!49410)))

(assert (=> d!26265 (= lt!49410 (containsKey!154 (toList!783 lt!49031) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26265 (= (contains!800 lt!49031 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49408)))

(declare-fun b!98262 () Bool)

(declare-fun lt!49409 () Unit!2937)

(assert (=> b!98262 (= e!64054 lt!49409)))

(assert (=> b!98262 (= lt!49409 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49031) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98262 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98263 () Bool)

(declare-fun Unit!2966 () Unit!2937)

(assert (=> b!98263 (= e!64054 Unit!2966)))

(declare-fun b!98264 () Bool)

(assert (=> b!98264 (= e!64053 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26265 c!16674) b!98262))

(assert (= (and d!26265 (not c!16674)) b!98263))

(assert (= (and d!26265 (not res!49468)) b!98264))

(assert (=> d!26265 m!106891))

(declare-fun m!107781 () Bool)

(assert (=> d!26265 m!107781))

(assert (=> b!98262 m!106891))

(declare-fun m!107783 () Bool)

(assert (=> b!98262 m!107783))

(assert (=> b!98262 m!106891))

(declare-fun m!107785 () Bool)

(assert (=> b!98262 m!107785))

(assert (=> b!98262 m!107785))

(declare-fun m!107787 () Bool)

(assert (=> b!98262 m!107787))

(assert (=> b!98264 m!106891))

(assert (=> b!98264 m!107785))

(assert (=> b!98264 m!107785))

(assert (=> b!98264 m!107787))

(assert (=> b!97810 d!26265))

(declare-fun lt!49411 () Bool)

(declare-fun d!26267 () Bool)

(assert (=> d!26267 (= lt!49411 (select (content!102 (toList!783 lt!49270)) (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64056 () Bool)

(assert (=> d!26267 (= lt!49411 e!64056)))

(declare-fun res!49469 () Bool)

(assert (=> d!26267 (=> (not res!49469) (not e!64056))))

(assert (=> d!26267 (= res!49469 ((_ is Cons!1576) (toList!783 lt!49270)))))

(assert (=> d!26267 (= (contains!803 (toList!783 lt!49270) (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49411)))

(declare-fun b!98265 () Bool)

(declare-fun e!64055 () Bool)

(assert (=> b!98265 (= e!64056 e!64055)))

(declare-fun res!49470 () Bool)

(assert (=> b!98265 (=> res!49470 e!64055)))

(assert (=> b!98265 (= res!49470 (= (h!2170 (toList!783 lt!49270)) (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98266 () Bool)

(assert (=> b!98266 (= e!64055 (contains!803 (t!5534 (toList!783 lt!49270)) (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26267 res!49469) b!98265))

(assert (= (and b!98265 (not res!49470)) b!98266))

(declare-fun m!107789 () Bool)

(assert (=> d!26267 m!107789))

(declare-fun m!107791 () Bool)

(assert (=> d!26267 m!107791))

(declare-fun m!107793 () Bool)

(assert (=> b!98266 m!107793))

(assert (=> b!98045 d!26267))

(declare-fun d!26269 () Bool)

(declare-fun isEmpty!358 (List!1580) Bool)

(assert (=> d!26269 (= (isEmpty!356 lt!49251) (isEmpty!358 (toList!783 lt!49251)))))

(declare-fun bs!4070 () Bool)

(assert (= bs!4070 d!26269))

(declare-fun m!107795 () Bool)

(assert (=> bs!4070 m!107795))

(assert (=> b!98006 d!26269))

(declare-fun d!26271 () Bool)

(assert (=> d!26271 (= (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98041 d!26271))

(declare-fun d!26273 () Bool)

(declare-fun res!49471 () Bool)

(declare-fun e!64057 () Bool)

(assert (=> d!26273 (=> res!49471 e!64057)))

(assert (=> d!26273 (= res!49471 (= (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26273 (= (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!64057)))

(declare-fun b!98267 () Bool)

(declare-fun e!64058 () Bool)

(assert (=> b!98267 (= e!64057 e!64058)))

(declare-fun res!49472 () Bool)

(assert (=> b!98267 (=> (not res!49472) (not e!64058))))

(assert (=> b!98267 (= res!49472 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98268 () Bool)

(assert (=> b!98268 (= e!64058 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26273 (not res!49471)) b!98267))

(assert (= (and b!98267 res!49472) b!98268))

(declare-fun m!107797 () Bool)

(assert (=> d!26273 m!107797))

(assert (=> b!98268 m!106647))

(declare-fun m!107799 () Bool)

(assert (=> b!98268 m!107799))

(assert (=> b!98015 d!26273))

(declare-fun d!26275 () Bool)

(declare-fun e!64059 () Bool)

(assert (=> d!26275 e!64059))

(declare-fun res!49474 () Bool)

(assert (=> d!26275 (=> (not res!49474) (not e!64059))))

(declare-fun lt!49413 () ListLongMap!1535)

(assert (=> d!26275 (= res!49474 (contains!800 lt!49413 (_1!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun lt!49415 () List!1580)

(assert (=> d!26275 (= lt!49413 (ListLongMap!1536 lt!49415))))

(declare-fun lt!49414 () Unit!2937)

(declare-fun lt!49412 () Unit!2937)

(assert (=> d!26275 (= lt!49414 lt!49412)))

(assert (=> d!26275 (= (getValueByKey!150 lt!49415 (_1!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26275 (= lt!49412 (lemmaContainsTupThenGetReturnValue!66 lt!49415 (_1!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26275 (= lt!49415 (insertStrictlySorted!69 (toList!783 (ite c!16583 call!9984 (ite c!16581 call!9985 call!9986))) (_1!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26275 (= (+!135 (ite c!16583 call!9984 (ite c!16581 call!9985 call!9986)) (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) lt!49413)))

(declare-fun b!98269 () Bool)

(declare-fun res!49473 () Bool)

(assert (=> b!98269 (=> (not res!49473) (not e!64059))))

(assert (=> b!98269 (= res!49473 (= (getValueByKey!150 (toList!783 lt!49413) (_1!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))))

(declare-fun b!98270 () Bool)

(assert (=> b!98270 (= e!64059 (contains!803 (toList!783 lt!49413) (ite (or c!16583 c!16581) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (= (and d!26275 res!49474) b!98269))

(assert (= (and b!98269 res!49473) b!98270))

(declare-fun m!107801 () Bool)

(assert (=> d!26275 m!107801))

(declare-fun m!107803 () Bool)

(assert (=> d!26275 m!107803))

(declare-fun m!107805 () Bool)

(assert (=> d!26275 m!107805))

(declare-fun m!107807 () Bool)

(assert (=> d!26275 m!107807))

(declare-fun m!107809 () Bool)

(assert (=> b!98269 m!107809))

(declare-fun m!107811 () Bool)

(assert (=> b!98270 m!107811))

(assert (=> bm!9985 d!26275))

(declare-fun b!98271 () Bool)

(declare-fun e!64061 () Bool)

(declare-fun call!10021 () Bool)

(assert (=> b!98271 (= e!64061 call!10021)))

(declare-fun b!98272 () Bool)

(declare-fun e!64060 () Bool)

(assert (=> b!98272 (= e!64060 call!10021)))

(declare-fun b!98273 () Bool)

(declare-fun e!64062 () Bool)

(assert (=> b!98273 (= e!64062 e!64060)))

(declare-fun c!16675 () Bool)

(assert (=> b!98273 (= c!16675 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98274 () Bool)

(assert (=> b!98274 (= e!64060 e!64061)))

(declare-fun lt!49418 () (_ BitVec 64))

(assert (=> b!98274 (= lt!49418 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!49416 () Unit!2937)

(assert (=> b!98274 (= lt!49416 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) lt!49418 #b00000000000000000000000000000000))))

(assert (=> b!98274 (arrayContainsKey!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) lt!49418 #b00000000000000000000000000000000)))

(declare-fun lt!49417 () Unit!2937)

(assert (=> b!98274 (= lt!49417 lt!49416)))

(declare-fun res!49475 () Bool)

(assert (=> b!98274 (= res!49475 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000) (_keys!4171 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992)))) (Found!253 #b00000000000000000000000000000000)))))

(assert (=> b!98274 (=> (not res!49475) (not e!64061))))

(declare-fun d!26277 () Bool)

(declare-fun res!49476 () Bool)

(assert (=> d!26277 (=> res!49476 e!64062)))

(assert (=> d!26277 (= res!49476 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26277 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992)))) e!64062)))

(declare-fun bm!10018 () Bool)

(assert (=> bm!10018 (= call!10021 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 (v!2800 (underlying!337 thiss!992))) (mask!6578 (v!2800 (underlying!337 thiss!992)))))))

(assert (= (and d!26277 (not res!49476)) b!98273))

(assert (= (and b!98273 c!16675) b!98274))

(assert (= (and b!98273 (not c!16675)) b!98272))

(assert (= (and b!98274 res!49475) b!98271))

(assert (= (or b!98271 b!98272) bm!10018))

(declare-fun m!107813 () Bool)

(assert (=> b!98273 m!107813))

(assert (=> b!98273 m!107813))

(declare-fun m!107815 () Bool)

(assert (=> b!98273 m!107815))

(assert (=> b!98274 m!107813))

(declare-fun m!107817 () Bool)

(assert (=> b!98274 m!107817))

(declare-fun m!107819 () Bool)

(assert (=> b!98274 m!107819))

(assert (=> b!98274 m!107813))

(declare-fun m!107821 () Bool)

(assert (=> b!98274 m!107821))

(declare-fun m!107823 () Bool)

(assert (=> bm!10018 m!107823))

(assert (=> b!98113 d!26277))

(declare-fun e!64064 () Option!156)

(declare-fun b!98277 () Bool)

(assert (=> b!98277 (= e!64064 (getValueByKey!150 (t!5534 (toList!783 lt!49223)) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98275 () Bool)

(declare-fun e!64063 () Option!156)

(assert (=> b!98275 (= e!64063 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49223)))))))

(declare-fun b!98278 () Bool)

(assert (=> b!98278 (= e!64064 None!154)))

(declare-fun b!98276 () Bool)

(assert (=> b!98276 (= e!64063 e!64064)))

(declare-fun c!16677 () Bool)

(assert (=> b!98276 (= c!16677 (and ((_ is Cons!1576) (toList!783 lt!49223)) (not (= (_1!1181 (h!2170 (toList!783 lt!49223))) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16676 () Bool)

(declare-fun d!26279 () Bool)

(assert (=> d!26279 (= c!16676 (and ((_ is Cons!1576) (toList!783 lt!49223)) (= (_1!1181 (h!2170 (toList!783 lt!49223))) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26279 (= (getValueByKey!150 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64063)))

(assert (= (and d!26279 c!16676) b!98275))

(assert (= (and d!26279 (not c!16676)) b!98276))

(assert (= (and b!98276 c!16677) b!98277))

(assert (= (and b!98276 (not c!16677)) b!98278))

(declare-fun m!107825 () Bool)

(assert (=> b!98277 m!107825))

(assert (=> b!97967 d!26279))

(declare-fun d!26281 () Bool)

(declare-fun e!64065 () Bool)

(assert (=> d!26281 e!64065))

(declare-fun res!49477 () Bool)

(assert (=> d!26281 (=> res!49477 e!64065)))

(declare-fun lt!49420 () Bool)

(assert (=> d!26281 (= res!49477 (not lt!49420))))

(declare-fun lt!49422 () Bool)

(assert (=> d!26281 (= lt!49420 lt!49422)))

(declare-fun lt!49419 () Unit!2937)

(declare-fun e!64066 () Unit!2937)

(assert (=> d!26281 (= lt!49419 e!64066)))

(declare-fun c!16678 () Bool)

(assert (=> d!26281 (= c!16678 lt!49422)))

(assert (=> d!26281 (= lt!49422 (containsKey!154 (toList!783 lt!49194) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26281 (= (contains!800 lt!49194 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49420)))

(declare-fun b!98279 () Bool)

(declare-fun lt!49421 () Unit!2937)

(assert (=> b!98279 (= e!64066 lt!49421)))

(assert (=> b!98279 (= lt!49421 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49194) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98279 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98280 () Bool)

(declare-fun Unit!2967 () Unit!2937)

(assert (=> b!98280 (= e!64066 Unit!2967)))

(declare-fun b!98281 () Bool)

(assert (=> b!98281 (= e!64065 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26281 c!16678) b!98279))

(assert (= (and d!26281 (not c!16678)) b!98280))

(assert (= (and d!26281 (not res!49477)) b!98281))

(declare-fun m!107827 () Bool)

(assert (=> d!26281 m!107827))

(declare-fun m!107829 () Bool)

(assert (=> b!98279 m!107829))

(declare-fun m!107831 () Bool)

(assert (=> b!98279 m!107831))

(assert (=> b!98279 m!107831))

(declare-fun m!107833 () Bool)

(assert (=> b!98279 m!107833))

(assert (=> b!98281 m!107831))

(assert (=> b!98281 m!107831))

(assert (=> b!98281 m!107833))

(assert (=> bm!9988 d!26281))

(declare-fun e!64068 () Option!156)

(declare-fun b!98284 () Bool)

(assert (=> b!98284 (= e!64068 (getValueByKey!150 (t!5534 (toList!783 lt!49297)) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98282 () Bool)

(declare-fun e!64067 () Option!156)

(assert (=> b!98282 (= e!64067 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49297)))))))

(declare-fun b!98285 () Bool)

(assert (=> b!98285 (= e!64068 None!154)))

(declare-fun b!98283 () Bool)

(assert (=> b!98283 (= e!64067 e!64068)))

(declare-fun c!16680 () Bool)

(assert (=> b!98283 (= c!16680 (and ((_ is Cons!1576) (toList!783 lt!49297)) (not (= (_1!1181 (h!2170 (toList!783 lt!49297))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!26283 () Bool)

(declare-fun c!16679 () Bool)

(assert (=> d!26283 (= c!16679 (and ((_ is Cons!1576) (toList!783 lt!49297)) (= (_1!1181 (h!2170 (toList!783 lt!49297))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26283 (= (getValueByKey!150 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64067)))

(assert (= (and d!26283 c!16679) b!98282))

(assert (= (and d!26283 (not c!16679)) b!98283))

(assert (= (and b!98283 c!16680) b!98284))

(assert (= (and b!98283 (not c!16680)) b!98285))

(declare-fun m!107835 () Bool)

(assert (=> b!98284 m!107835))

(assert (=> b!98110 d!26283))

(declare-fun d!26285 () Bool)

(declare-fun e!64069 () Bool)

(assert (=> d!26285 e!64069))

(declare-fun res!49478 () Bool)

(assert (=> d!26285 (=> res!49478 e!64069)))

(declare-fun lt!49424 () Bool)

(assert (=> d!26285 (= res!49478 (not lt!49424))))

(declare-fun lt!49426 () Bool)

(assert (=> d!26285 (= lt!49424 lt!49426)))

(declare-fun lt!49423 () Unit!2937)

(declare-fun e!64070 () Unit!2937)

(assert (=> d!26285 (= lt!49423 e!64070)))

(declare-fun c!16681 () Bool)

(assert (=> d!26285 (= c!16681 lt!49426)))

(assert (=> d!26285 (= lt!49426 (containsKey!154 (toList!783 lt!49031) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26285 (= (contains!800 lt!49031 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49424)))

(declare-fun b!98286 () Bool)

(declare-fun lt!49425 () Unit!2937)

(assert (=> b!98286 (= e!64070 lt!49425)))

(assert (=> b!98286 (= lt!49425 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49031) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98286 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98287 () Bool)

(declare-fun Unit!2968 () Unit!2937)

(assert (=> b!98287 (= e!64070 Unit!2968)))

(declare-fun b!98288 () Bool)

(assert (=> b!98288 (= e!64069 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26285 c!16681) b!98286))

(assert (= (and d!26285 (not c!16681)) b!98287))

(assert (= (and d!26285 (not res!49478)) b!98288))

(declare-fun m!107837 () Bool)

(assert (=> d!26285 m!107837))

(declare-fun m!107839 () Bool)

(assert (=> b!98286 m!107839))

(declare-fun m!107841 () Bool)

(assert (=> b!98286 m!107841))

(assert (=> b!98286 m!107841))

(declare-fun m!107843 () Bool)

(assert (=> b!98286 m!107843))

(assert (=> b!98288 m!107841))

(assert (=> b!98288 m!107841))

(assert (=> b!98288 m!107843))

(assert (=> bm!9959 d!26285))

(declare-fun d!26287 () Bool)

(declare-fun e!64071 () Bool)

(assert (=> d!26287 e!64071))

(declare-fun res!49480 () Bool)

(assert (=> d!26287 (=> (not res!49480) (not e!64071))))

(declare-fun lt!49428 () ListLongMap!1535)

(assert (=> d!26287 (= res!49480 (contains!800 lt!49428 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49430 () List!1580)

(assert (=> d!26287 (= lt!49428 (ListLongMap!1536 lt!49430))))

(declare-fun lt!49429 () Unit!2937)

(declare-fun lt!49427 () Unit!2937)

(assert (=> d!26287 (= lt!49429 lt!49427)))

(assert (=> d!26287 (= (getValueByKey!150 lt!49430 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= lt!49427 (lemmaContainsTupThenGetReturnValue!66 lt!49430 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= lt!49430 (insertStrictlySorted!69 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26287 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49428)))

(declare-fun b!98289 () Bool)

(declare-fun res!49479 () Bool)

(assert (=> b!98289 (=> (not res!49479) (not e!64071))))

(assert (=> b!98289 (= res!49479 (= (getValueByKey!150 (toList!783 lt!49428) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98290 () Bool)

(assert (=> b!98290 (= e!64071 (contains!803 (toList!783 lt!49428) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26287 res!49480) b!98289))

(assert (= (and b!98289 res!49479) b!98290))

(declare-fun m!107845 () Bool)

(assert (=> d!26287 m!107845))

(declare-fun m!107847 () Bool)

(assert (=> d!26287 m!107847))

(declare-fun m!107849 () Bool)

(assert (=> d!26287 m!107849))

(declare-fun m!107851 () Bool)

(assert (=> d!26287 m!107851))

(declare-fun m!107853 () Bool)

(assert (=> b!98289 m!107853))

(declare-fun m!107855 () Bool)

(assert (=> b!98290 m!107855))

(assert (=> d!26055 d!26287))

(declare-fun d!26289 () Bool)

(assert (=> d!26289 (arrayContainsKey!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!49433 () Unit!2937)

(declare-fun choose!13 (array!4241 (_ BitVec 64) (_ BitVec 32)) Unit!2937)

(assert (=> d!26289 (= lt!49433 (choose!13 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(assert (=> d!26289 (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000)))

(assert (=> d!26289 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))) lt!49433)))

(declare-fun bs!4071 () Bool)

(assert (= bs!4071 d!26289))

(assert (=> bs!4071 m!106647))

(assert (=> bs!4071 m!107023))

(assert (=> bs!4071 m!106647))

(declare-fun m!107857 () Bool)

(assert (=> bs!4071 m!107857))

(assert (=> d!26055 d!26289))

(declare-fun b!98291 () Bool)

(declare-fun e!64076 () Bool)

(declare-fun call!10026 () Bool)

(assert (=> b!98291 (= e!64076 (not call!10026))))

(declare-fun b!98292 () Bool)

(declare-fun e!64073 () ListLongMap!1535)

(declare-fun call!10027 () ListLongMap!1535)

(assert (=> b!98292 (= e!64073 call!10027)))

(declare-fun bm!10019 () Bool)

(declare-fun lt!49454 () ListLongMap!1535)

(assert (=> bm!10019 (= call!10026 (contains!800 lt!49454 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10020 () Bool)

(declare-fun call!10025 () Bool)

(assert (=> bm!10020 (= call!10025 (contains!800 lt!49454 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98293 () Bool)

(declare-fun res!49487 () Bool)

(declare-fun e!64083 () Bool)

(assert (=> b!98293 (=> (not res!49487) (not e!64083))))

(declare-fun e!64077 () Bool)

(assert (=> b!98293 (= res!49487 e!64077)))

(declare-fun res!49489 () Bool)

(assert (=> b!98293 (=> res!49489 e!64077)))

(declare-fun e!64075 () Bool)

(assert (=> b!98293 (= res!49489 (not e!64075))))

(declare-fun res!49486 () Bool)

(assert (=> b!98293 (=> (not res!49486) (not e!64075))))

(assert (=> b!98293 (= res!49486 (bvslt #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun b!98294 () Bool)

(declare-fun res!49483 () Bool)

(assert (=> b!98294 (=> (not res!49483) (not e!64083))))

(declare-fun e!64081 () Bool)

(assert (=> b!98294 (= res!49483 e!64081)))

(declare-fun c!16684 () Bool)

(assert (=> b!98294 (= c!16684 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10021 () Bool)

(declare-fun call!10028 () ListLongMap!1535)

(assert (=> bm!10021 (= call!10027 call!10028)))

(declare-fun b!98295 () Bool)

(declare-fun e!64074 () ListLongMap!1535)

(assert (=> b!98295 (= e!64074 call!10027)))

(declare-fun e!64079 () Bool)

(declare-fun b!98296 () Bool)

(assert (=> b!98296 (= e!64079 (= (apply!92 lt!49454 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98296 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))))))

(assert (=> b!98296 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun b!98297 () Bool)

(declare-fun e!64084 () Bool)

(assert (=> b!98297 (= e!64084 (= (apply!92 lt!49454 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98298 () Bool)

(declare-fun e!64072 () Unit!2937)

(declare-fun lt!49455 () Unit!2937)

(assert (=> b!98298 (= e!64072 lt!49455)))

(declare-fun lt!49438 () ListLongMap!1535)

(assert (=> b!98298 (= lt!49438 (getCurrentListMapNoExtraKeys!100 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49439 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49439 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49448 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49448 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49451 () Unit!2937)

(assert (=> b!98298 (= lt!49451 (addStillContains!68 lt!49438 lt!49439 (zeroValue!2364 newMap!16) lt!49448))))

(assert (=> b!98298 (contains!800 (+!135 lt!49438 (tuple2!2341 lt!49439 (zeroValue!2364 newMap!16))) lt!49448)))

(declare-fun lt!49437 () Unit!2937)

(assert (=> b!98298 (= lt!49437 lt!49451)))

(declare-fun lt!49450 () ListLongMap!1535)

(assert (=> b!98298 (= lt!49450 (getCurrentListMapNoExtraKeys!100 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49447 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49447 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49449 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49449 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49440 () Unit!2937)

(assert (=> b!98298 (= lt!49440 (addApplyDifferent!68 lt!49450 lt!49447 (minValue!2364 newMap!16) lt!49449))))

(assert (=> b!98298 (= (apply!92 (+!135 lt!49450 (tuple2!2341 lt!49447 (minValue!2364 newMap!16))) lt!49449) (apply!92 lt!49450 lt!49449))))

(declare-fun lt!49435 () Unit!2937)

(assert (=> b!98298 (= lt!49435 lt!49440)))

(declare-fun lt!49443 () ListLongMap!1535)

(assert (=> b!98298 (= lt!49443 (getCurrentListMapNoExtraKeys!100 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49442 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49442 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49444 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49444 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49436 () Unit!2937)

(assert (=> b!98298 (= lt!49436 (addApplyDifferent!68 lt!49443 lt!49442 (zeroValue!2364 newMap!16) lt!49444))))

(assert (=> b!98298 (= (apply!92 (+!135 lt!49443 (tuple2!2341 lt!49442 (zeroValue!2364 newMap!16))) lt!49444) (apply!92 lt!49443 lt!49444))))

(declare-fun lt!49452 () Unit!2937)

(assert (=> b!98298 (= lt!49452 lt!49436)))

(declare-fun lt!49446 () ListLongMap!1535)

(assert (=> b!98298 (= lt!49446 (getCurrentListMapNoExtraKeys!100 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49453 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49453 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49445 () (_ BitVec 64))

(assert (=> b!98298 (= lt!49445 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!98298 (= lt!49455 (addApplyDifferent!68 lt!49446 lt!49453 (minValue!2364 newMap!16) lt!49445))))

(assert (=> b!98298 (= (apply!92 (+!135 lt!49446 (tuple2!2341 lt!49453 (minValue!2364 newMap!16))) lt!49445) (apply!92 lt!49446 lt!49445))))

(declare-fun b!98299 () Bool)

(declare-fun e!64082 () ListLongMap!1535)

(assert (=> b!98299 (= e!64082 (+!135 call!10028 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!98300 () Bool)

(declare-fun call!10024 () ListLongMap!1535)

(assert (=> b!98300 (= e!64074 call!10024)))

(declare-fun b!98301 () Bool)

(declare-fun e!64078 () Bool)

(assert (=> b!98301 (= e!64078 (= (apply!92 lt!49454 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10022 () ListLongMap!1535)

(declare-fun c!16683 () Bool)

(declare-fun bm!10023 () Bool)

(declare-fun c!16685 () Bool)

(declare-fun call!10023 () ListLongMap!1535)

(assert (=> bm!10023 (= call!10028 (+!135 (ite c!16685 call!10022 (ite c!16683 call!10023 call!10024)) (ite (or c!16685 c!16683) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98302 () Bool)

(assert (=> b!98302 (= e!64076 e!64084)))

(declare-fun res!49484 () Bool)

(assert (=> b!98302 (= res!49484 call!10026)))

(assert (=> b!98302 (=> (not res!49484) (not e!64084))))

(declare-fun b!98303 () Bool)

(declare-fun Unit!2969 () Unit!2937)

(assert (=> b!98303 (= e!64072 Unit!2969)))

(declare-fun bm!10024 () Bool)

(assert (=> bm!10024 (= call!10023 call!10022)))

(declare-fun b!98304 () Bool)

(assert (=> b!98304 (= e!64082 e!64073)))

(assert (=> b!98304 (= c!16683 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98305 () Bool)

(assert (=> b!98305 (= e!64081 (not call!10025))))

(declare-fun b!98306 () Bool)

(declare-fun c!16687 () Bool)

(assert (=> b!98306 (= c!16687 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98306 (= e!64073 e!64074)))

(declare-fun b!98307 () Bool)

(assert (=> b!98307 (= e!64081 e!64078)))

(declare-fun res!49488 () Bool)

(assert (=> b!98307 (= res!49488 call!10025)))

(assert (=> b!98307 (=> (not res!49488) (not e!64078))))

(declare-fun b!98308 () Bool)

(assert (=> b!98308 (= e!64083 e!64076)))

(declare-fun c!16686 () Bool)

(assert (=> b!98308 (= c!16686 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98309 () Bool)

(assert (=> b!98309 (= e!64075 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10022 () Bool)

(assert (=> bm!10022 (= call!10022 (getCurrentListMapNoExtraKeys!100 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26291 () Bool)

(assert (=> d!26291 e!64083))

(declare-fun res!49485 () Bool)

(assert (=> d!26291 (=> (not res!49485) (not e!64083))))

(assert (=> d!26291 (= res!49485 (or (bvsge #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))))

(declare-fun lt!49441 () ListLongMap!1535)

(assert (=> d!26291 (= lt!49454 lt!49441)))

(declare-fun lt!49434 () Unit!2937)

(assert (=> d!26291 (= lt!49434 e!64072)))

(declare-fun c!16682 () Bool)

(declare-fun e!64080 () Bool)

(assert (=> d!26291 (= c!16682 e!64080)))

(declare-fun res!49482 () Bool)

(assert (=> d!26291 (=> (not res!49482) (not e!64080))))

(assert (=> d!26291 (= res!49482 (bvslt #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(assert (=> d!26291 (= lt!49441 e!64082)))

(assert (=> d!26291 (= c!16685 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26291 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26291 (= (getCurrentListMap!474 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49454)))

(declare-fun b!98310 () Bool)

(assert (=> b!98310 (= e!64080 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10025 () Bool)

(assert (=> bm!10025 (= call!10024 call!10023)))

(declare-fun b!98311 () Bool)

(assert (=> b!98311 (= e!64077 e!64079)))

(declare-fun res!49481 () Bool)

(assert (=> b!98311 (=> (not res!49481) (not e!64079))))

(assert (=> b!98311 (= res!49481 (contains!800 lt!49454 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!98311 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(assert (= (and d!26291 c!16685) b!98299))

(assert (= (and d!26291 (not c!16685)) b!98304))

(assert (= (and b!98304 c!16683) b!98292))

(assert (= (and b!98304 (not c!16683)) b!98306))

(assert (= (and b!98306 c!16687) b!98295))

(assert (= (and b!98306 (not c!16687)) b!98300))

(assert (= (or b!98295 b!98300) bm!10025))

(assert (= (or b!98292 bm!10025) bm!10024))

(assert (= (or b!98292 b!98295) bm!10021))

(assert (= (or b!98299 bm!10024) bm!10022))

(assert (= (or b!98299 bm!10021) bm!10023))

(assert (= (and d!26291 res!49482) b!98310))

(assert (= (and d!26291 c!16682) b!98298))

(assert (= (and d!26291 (not c!16682)) b!98303))

(assert (= (and d!26291 res!49485) b!98293))

(assert (= (and b!98293 res!49486) b!98309))

(assert (= (and b!98293 (not res!49489)) b!98311))

(assert (= (and b!98311 res!49481) b!98296))

(assert (= (and b!98293 res!49487) b!98294))

(assert (= (and b!98294 c!16684) b!98307))

(assert (= (and b!98294 (not c!16684)) b!98305))

(assert (= (and b!98307 res!49488) b!98301))

(assert (= (or b!98307 b!98305) bm!10020))

(assert (= (and b!98294 res!49483) b!98308))

(assert (= (and b!98308 c!16686) b!98302))

(assert (= (and b!98308 (not c!16686)) b!98291))

(assert (= (and b!98302 res!49484) b!98297))

(assert (= (or b!98302 b!98291) bm!10019))

(declare-fun b_lambda!4379 () Bool)

(assert (=> (not b_lambda!4379) (not b!98296)))

(assert (=> b!98296 t!5542))

(declare-fun b_and!6051 () Bool)

(assert (= b_and!6047 (and (=> t!5542 result!3275) b_and!6051)))

(assert (=> b!98296 t!5544))

(declare-fun b_and!6053 () Bool)

(assert (= b_and!6049 (and (=> t!5544 result!3277) b_and!6053)))

(declare-fun m!107859 () Bool)

(assert (=> b!98297 m!107859))

(declare-fun m!107861 () Bool)

(assert (=> bm!10020 m!107861))

(declare-fun m!107863 () Bool)

(assert (=> b!98311 m!107863))

(assert (=> b!98311 m!107863))

(declare-fun m!107865 () Bool)

(assert (=> b!98311 m!107865))

(assert (=> d!26291 m!106895))

(declare-fun m!107867 () Bool)

(assert (=> b!98301 m!107867))

(declare-fun m!107869 () Bool)

(assert (=> bm!10023 m!107869))

(assert (=> b!98310 m!107863))

(assert (=> b!98310 m!107863))

(declare-fun m!107871 () Bool)

(assert (=> b!98310 m!107871))

(declare-fun m!107873 () Bool)

(assert (=> b!98299 m!107873))

(assert (=> b!98309 m!107863))

(assert (=> b!98309 m!107863))

(assert (=> b!98309 m!107871))

(declare-fun m!107875 () Bool)

(assert (=> b!98296 m!107875))

(assert (=> b!98296 m!106907))

(declare-fun m!107877 () Bool)

(assert (=> b!98296 m!107877))

(assert (=> b!98296 m!107863))

(declare-fun m!107879 () Bool)

(assert (=> b!98296 m!107879))

(assert (=> b!98296 m!107863))

(assert (=> b!98296 m!107875))

(assert (=> b!98296 m!106907))

(declare-fun m!107881 () Bool)

(assert (=> b!98298 m!107881))

(declare-fun m!107883 () Bool)

(assert (=> b!98298 m!107883))

(declare-fun m!107885 () Bool)

(assert (=> b!98298 m!107885))

(declare-fun m!107887 () Bool)

(assert (=> b!98298 m!107887))

(declare-fun m!107889 () Bool)

(assert (=> b!98298 m!107889))

(declare-fun m!107891 () Bool)

(assert (=> b!98298 m!107891))

(declare-fun m!107893 () Bool)

(assert (=> b!98298 m!107893))

(declare-fun m!107895 () Bool)

(assert (=> b!98298 m!107895))

(declare-fun m!107897 () Bool)

(assert (=> b!98298 m!107897))

(assert (=> b!98298 m!107863))

(assert (=> b!98298 m!107895))

(declare-fun m!107899 () Bool)

(assert (=> b!98298 m!107899))

(assert (=> b!98298 m!107883))

(declare-fun m!107901 () Bool)

(assert (=> b!98298 m!107901))

(declare-fun m!107903 () Bool)

(assert (=> b!98298 m!107903))

(declare-fun m!107905 () Bool)

(assert (=> b!98298 m!107905))

(declare-fun m!107907 () Bool)

(assert (=> b!98298 m!107907))

(assert (=> b!98298 m!107889))

(assert (=> b!98298 m!107881))

(declare-fun m!107909 () Bool)

(assert (=> b!98298 m!107909))

(declare-fun m!107911 () Bool)

(assert (=> b!98298 m!107911))

(assert (=> bm!10022 m!107899))

(declare-fun m!107913 () Bool)

(assert (=> bm!10019 m!107913))

(assert (=> d!26055 d!26291))

(declare-fun b!98320 () Bool)

(declare-fun res!49498 () Bool)

(declare-fun e!64089 () Bool)

(assert (=> b!98320 (=> (not res!49498) (not e!64089))))

(assert (=> b!98320 (= res!49498 (not (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))))

(declare-fun b!98322 () Bool)

(assert (=> b!98322 (= e!64089 (bvslt (size!2265 (_keys!4171 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!26293 () Bool)

(declare-fun e!64090 () Bool)

(assert (=> d!26293 e!64090))

(declare-fun res!49500 () Bool)

(assert (=> d!26293 (=> (not res!49500) (not e!64090))))

(assert (=> d!26293 (= res!49500 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 (_keys!4171 newMap!16)))))))

(declare-fun lt!49458 () Unit!2937)

(declare-fun choose!1 (array!4241 (_ BitVec 32) (_ BitVec 64)) Unit!2937)

(assert (=> d!26293 (= lt!49458 (choose!1 (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26293 e!64089))

(declare-fun res!49501 () Bool)

(assert (=> d!26293 (=> (not res!49501) (not e!64089))))

(assert (=> d!26293 (= res!49501 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 (_keys!4171 newMap!16)))))))

(assert (=> d!26293 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49458)))

(declare-fun b!98323 () Bool)

(assert (=> b!98323 (= e!64090 (= (arrayCountValidKeys!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!98321 () Bool)

(declare-fun res!49499 () Bool)

(assert (=> b!98321 (=> (not res!49499) (not e!64089))))

(assert (=> b!98321 (= res!49499 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26293 res!49501) b!98320))

(assert (= (and b!98320 res!49498) b!98321))

(assert (= (and b!98321 res!49499) b!98322))

(assert (= (and d!26293 res!49500) b!98323))

(declare-fun m!107915 () Bool)

(assert (=> b!98320 m!107915))

(assert (=> b!98320 m!107915))

(declare-fun m!107917 () Bool)

(assert (=> b!98320 m!107917))

(assert (=> d!26293 m!106647))

(declare-fun m!107919 () Bool)

(assert (=> d!26293 m!107919))

(assert (=> b!98323 m!107035))

(assert (=> b!98323 m!107027))

(assert (=> b!98323 m!106755))

(assert (=> b!98321 m!106647))

(assert (=> b!98321 m!106745))

(assert (=> d!26055 d!26293))

(declare-fun call!10029 () (_ BitVec 32))

(declare-fun bm!10026 () Bool)

(assert (=> bm!10026 (= call!10029 (arrayCountValidKeys!0 lt!49115 (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)))))

(declare-fun b!98324 () Bool)

(declare-fun e!64091 () (_ BitVec 32))

(assert (=> b!98324 (= e!64091 #b00000000000000000000000000000000)))

(declare-fun b!98325 () Bool)

(declare-fun e!64092 () (_ BitVec 32))

(assert (=> b!98325 (= e!64091 e!64092)))

(declare-fun c!16689 () Bool)

(assert (=> b!98325 (= c!16689 (validKeyInArray!0 (select (arr!2015 lt!49115) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(declare-fun d!26295 () Bool)

(declare-fun lt!49459 () (_ BitVec 32))

(assert (=> d!26295 (and (bvsge lt!49459 #b00000000000000000000000000000000) (bvsle lt!49459 (bvsub (size!2265 lt!49115) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(assert (=> d!26295 (= lt!49459 e!64091)))

(declare-fun c!16688 () Bool)

(assert (=> d!26295 (= c!16688 (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)))))

(assert (=> d!26295 (and (bvsle (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)) (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001) (size!2265 lt!49115)))))

(assert (=> d!26295 (= (arrayCountValidKeys!0 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)) lt!49459)))

(declare-fun b!98326 () Bool)

(assert (=> b!98326 (= e!64092 call!10029)))

(declare-fun b!98327 () Bool)

(assert (=> b!98327 (= e!64092 (bvadd #b00000000000000000000000000000001 call!10029))))

(assert (= (and d!26295 c!16688) b!98324))

(assert (= (and d!26295 (not c!16688)) b!98325))

(assert (= (and b!98325 c!16689) b!98327))

(assert (= (and b!98325 (not c!16689)) b!98326))

(assert (= (or b!98327 b!98326) bm!10026))

(declare-fun m!107921 () Bool)

(assert (=> bm!10026 m!107921))

(declare-fun m!107923 () Bool)

(assert (=> b!98325 m!107923))

(assert (=> b!98325 m!107923))

(declare-fun m!107925 () Bool)

(assert (=> b!98325 m!107925))

(assert (=> d!26055 d!26295))

(assert (=> d!26055 d!26063))

(assert (=> d!26055 d!26065))

(assert (=> d!26055 d!26009))

(declare-fun d!26297 () Bool)

(assert (=> d!26297 (= (arrayCountValidKeys!0 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (bvadd (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!49462 () Unit!2937)

(declare-fun choose!2 (array!4241 (_ BitVec 32)) Unit!2937)

(assert (=> d!26297 (= lt!49462 (choose!2 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))

(declare-fun e!64095 () Bool)

(assert (=> d!26297 e!64095))

(declare-fun res!49506 () Bool)

(assert (=> d!26297 (=> (not res!49506) (not e!64095))))

(assert (=> d!26297 (= res!49506 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 lt!49115))))))

(assert (=> d!26297 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49115 (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))) lt!49462)))

(declare-fun b!98332 () Bool)

(declare-fun res!49507 () Bool)

(assert (=> b!98332 (=> (not res!49507) (not e!64095))))

(assert (=> b!98332 (= res!49507 (validKeyInArray!0 (select (arr!2015 lt!49115) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(declare-fun b!98333 () Bool)

(assert (=> b!98333 (= e!64095 (bvslt (size!2265 lt!49115) #b01111111111111111111111111111111))))

(assert (= (and d!26297 res!49506) b!98332))

(assert (= (and b!98332 res!49507) b!98333))

(assert (=> d!26297 m!107021))

(declare-fun m!107927 () Bool)

(assert (=> d!26297 m!107927))

(assert (=> b!98332 m!107923))

(assert (=> b!98332 m!107923))

(assert (=> b!98332 m!107925))

(assert (=> d!26055 d!26297))

(assert (=> d!26055 d!26051))

(declare-fun d!26299 () Bool)

(declare-fun e!64098 () Bool)

(assert (=> d!26299 e!64098))

(declare-fun res!49510 () Bool)

(assert (=> d!26299 (=> (not res!49510) (not e!64098))))

(assert (=> d!26299 (= res!49510 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 (_keys!4171 newMap!16)))))))

(declare-fun lt!49465 () Unit!2937)

(declare-fun choose!102 ((_ BitVec 64) array!4241 (_ BitVec 32) (_ BitVec 32)) Unit!2937)

(assert (=> d!26299 (= lt!49465 (choose!102 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (mask!6578 newMap!16)))))

(assert (=> d!26299 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26299 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (mask!6578 newMap!16)) lt!49465)))

(declare-fun b!98336 () Bool)

(assert (=> b!98336 (= e!64098 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (mask!6578 newMap!16)))))

(assert (= (and d!26299 res!49510) b!98336))

(assert (=> d!26299 m!106647))

(declare-fun m!107929 () Bool)

(assert (=> d!26299 m!107929))

(assert (=> d!26299 m!106895))

(assert (=> b!98336 m!107035))

(assert (=> b!98336 m!107033))

(assert (=> d!26055 d!26299))

(declare-fun d!26301 () Bool)

(declare-fun res!49511 () Bool)

(declare-fun e!64099 () Bool)

(assert (=> d!26301 (=> res!49511 e!64099)))

(assert (=> d!26301 (= res!49511 (= (select (arr!2015 lt!49122) #b00000000000000000000000000000000) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26301 (= (arrayContainsKey!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64099)))

(declare-fun b!98337 () Bool)

(declare-fun e!64100 () Bool)

(assert (=> b!98337 (= e!64099 e!64100)))

(declare-fun res!49512 () Bool)

(assert (=> b!98337 (=> (not res!49512) (not e!64100))))

(assert (=> b!98337 (= res!49512 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 lt!49122)))))

(declare-fun b!98338 () Bool)

(assert (=> b!98338 (= e!64100 (arrayContainsKey!0 lt!49122 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26301 (not res!49511)) b!98337))

(assert (= (and b!98337 res!49512) b!98338))

(declare-fun m!107931 () Bool)

(assert (=> d!26301 m!107931))

(assert (=> b!98338 m!106647))

(declare-fun m!107933 () Bool)

(assert (=> b!98338 m!107933))

(assert (=> d!26055 d!26301))

(declare-fun d!26303 () Bool)

(declare-fun e!64103 () Bool)

(assert (=> d!26303 e!64103))

(declare-fun res!49515 () Bool)

(assert (=> d!26303 (=> (not res!49515) (not e!64103))))

(assert (=> d!26303 (= res!49515 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 (_keys!4171 newMap!16)))))))

(declare-fun lt!49468 () Unit!2937)

(declare-fun choose!41 (array!4241 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1581) Unit!2937)

(assert (=> d!26303 (= lt!49468 (choose!41 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) lt!49133 lt!49126))))

(assert (=> d!26303 (bvslt (size!2265 (_keys!4171 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26303 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) lt!49133 lt!49126) lt!49468)))

(declare-fun b!98341 () Bool)

(assert (=> b!98341 (= e!64103 (arrayNoDuplicates!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) lt!49133 lt!49126))))

(assert (= (and d!26303 res!49515) b!98341))

(assert (=> d!26303 m!106647))

(declare-fun m!107935 () Bool)

(assert (=> d!26303 m!107935))

(assert (=> b!98341 m!107035))

(assert (=> b!98341 m!107019))

(assert (=> d!26055 d!26303))

(declare-fun bm!10027 () Bool)

(declare-fun call!10030 () (_ BitVec 32))

(assert (=> bm!10027 (= call!10030 (arrayCountValidKeys!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98342 () Bool)

(declare-fun e!64104 () (_ BitVec 32))

(assert (=> b!98342 (= e!64104 #b00000000000000000000000000000000)))

(declare-fun b!98343 () Bool)

(declare-fun e!64105 () (_ BitVec 32))

(assert (=> b!98343 (= e!64104 e!64105)))

(declare-fun c!16691 () Bool)

(assert (=> b!98343 (= c!16691 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!26305 () Bool)

(declare-fun lt!49469 () (_ BitVec 32))

(assert (=> d!26305 (and (bvsge lt!49469 #b00000000000000000000000000000000) (bvsle lt!49469 (bvsub (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!26305 (= lt!49469 e!64104)))

(declare-fun c!16690 () Bool)

(assert (=> d!26305 (= c!16690 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26305 (and (bvsle #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2265 (_keys!4171 newMap!16)) (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(assert (=> d!26305 (= (arrayCountValidKeys!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) lt!49469)))

(declare-fun b!98344 () Bool)

(assert (=> b!98344 (= e!64105 call!10030)))

(declare-fun b!98345 () Bool)

(assert (=> b!98345 (= e!64105 (bvadd #b00000000000000000000000000000001 call!10030))))

(assert (= (and d!26305 c!16690) b!98342))

(assert (= (and d!26305 (not c!16690)) b!98343))

(assert (= (and b!98343 c!16691) b!98345))

(assert (= (and b!98343 (not c!16691)) b!98344))

(assert (= (or b!98345 b!98344) bm!10027))

(declare-fun m!107937 () Bool)

(assert (=> bm!10027 m!107937))

(assert (=> b!98343 m!107863))

(assert (=> b!98343 m!107863))

(assert (=> b!98343 m!107871))

(assert (=> d!26055 d!26305))

(declare-fun b!98346 () Bool)

(declare-fun e!64109 () Bool)

(declare-fun e!64108 () Bool)

(assert (=> b!98346 (= e!64109 e!64108)))

(declare-fun c!16692 () Bool)

(assert (=> b!98346 (= c!16692 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) lt!49133)))))

(declare-fun bm!10028 () Bool)

(declare-fun call!10031 () Bool)

(assert (=> bm!10028 (= call!10031 (arrayNoDuplicates!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (bvadd lt!49133 #b00000000000000000000000000000001) (ite c!16692 (Cons!1577 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) lt!49133) lt!49126) lt!49126)))))

(declare-fun b!98347 () Bool)

(declare-fun e!64107 () Bool)

(assert (=> b!98347 (= e!64107 (contains!802 lt!49126 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) lt!49133)))))

(declare-fun d!26307 () Bool)

(declare-fun res!49516 () Bool)

(declare-fun e!64106 () Bool)

(assert (=> d!26307 (=> res!49516 e!64106)))

(assert (=> d!26307 (= res!49516 (bvsge lt!49133 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(assert (=> d!26307 (= (arrayNoDuplicates!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) lt!49133 lt!49126) e!64106)))

(declare-fun b!98348 () Bool)

(assert (=> b!98348 (= e!64106 e!64109)))

(declare-fun res!49518 () Bool)

(assert (=> b!98348 (=> (not res!49518) (not e!64109))))

(assert (=> b!98348 (= res!49518 (not e!64107))))

(declare-fun res!49517 () Bool)

(assert (=> b!98348 (=> (not res!49517) (not e!64107))))

(assert (=> b!98348 (= res!49517 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) lt!49133)))))

(declare-fun b!98349 () Bool)

(assert (=> b!98349 (= e!64108 call!10031)))

(declare-fun b!98350 () Bool)

(assert (=> b!98350 (= e!64108 call!10031)))

(assert (= (and d!26307 (not res!49516)) b!98348))

(assert (= (and b!98348 res!49517) b!98347))

(assert (= (and b!98348 res!49518) b!98346))

(assert (= (and b!98346 c!16692) b!98349))

(assert (= (and b!98346 (not c!16692)) b!98350))

(assert (= (or b!98349 b!98350) bm!10028))

(declare-fun m!107939 () Bool)

(assert (=> b!98346 m!107939))

(assert (=> b!98346 m!107939))

(declare-fun m!107941 () Bool)

(assert (=> b!98346 m!107941))

(assert (=> bm!10028 m!107939))

(declare-fun m!107943 () Bool)

(assert (=> bm!10028 m!107943))

(assert (=> b!98347 m!107939))

(assert (=> b!98347 m!107939))

(declare-fun m!107945 () Bool)

(assert (=> b!98347 m!107945))

(assert (=> b!98348 m!107939))

(assert (=> b!98348 m!107939))

(assert (=> b!98348 m!107941))

(assert (=> d!26055 d!26307))

(declare-fun b!98351 () Bool)

(declare-fun e!64111 () Bool)

(declare-fun call!10032 () Bool)

(assert (=> b!98351 (= e!64111 call!10032)))

(declare-fun b!98352 () Bool)

(declare-fun e!64110 () Bool)

(assert (=> b!98352 (= e!64110 call!10032)))

(declare-fun b!98353 () Bool)

(declare-fun e!64112 () Bool)

(assert (=> b!98353 (= e!64112 e!64110)))

(declare-fun c!16693 () Bool)

(assert (=> b!98353 (= c!16693 (validKeyInArray!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98354 () Bool)

(assert (=> b!98354 (= e!64110 e!64111)))

(declare-fun lt!49472 () (_ BitVec 64))

(assert (=> b!98354 (= lt!49472 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49470 () Unit!2937)

(assert (=> b!98354 (= lt!49470 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) lt!49472 #b00000000000000000000000000000000))))

(assert (=> b!98354 (arrayContainsKey!0 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) lt!49472 #b00000000000000000000000000000000)))

(declare-fun lt!49471 () Unit!2937)

(assert (=> b!98354 (= lt!49471 lt!49470)))

(declare-fun res!49519 () Bool)

(assert (=> b!98354 (= res!49519 (= (seekEntryOrOpen!0 (select (arr!2015 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000) (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (mask!6578 newMap!16)) (Found!253 #b00000000000000000000000000000000)))))

(assert (=> b!98354 (=> (not res!49519) (not e!64111))))

(declare-fun d!26309 () Bool)

(declare-fun res!49520 () Bool)

(assert (=> d!26309 (=> res!49520 e!64112)))

(assert (=> d!26309 (= res!49520 (bvsge #b00000000000000000000000000000000 (size!2265 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))))))))

(assert (=> d!26309 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (mask!6578 newMap!16)) e!64112)))

(declare-fun bm!10029 () Bool)

(assert (=> bm!10029 (= call!10032 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (mask!6578 newMap!16)))))

(assert (= (and d!26309 (not res!49520)) b!98353))

(assert (= (and b!98353 c!16693) b!98354))

(assert (= (and b!98353 (not c!16693)) b!98352))

(assert (= (and b!98354 res!49519) b!98351))

(assert (= (or b!98351 b!98352) bm!10029))

(assert (=> b!98353 m!107863))

(assert (=> b!98353 m!107863))

(assert (=> b!98353 m!107871))

(assert (=> b!98354 m!107863))

(declare-fun m!107947 () Bool)

(assert (=> b!98354 m!107947))

(declare-fun m!107949 () Bool)

(assert (=> b!98354 m!107949))

(assert (=> b!98354 m!107863))

(declare-fun m!107951 () Bool)

(assert (=> b!98354 m!107951))

(declare-fun m!107953 () Bool)

(assert (=> bm!10029 m!107953))

(assert (=> d!26055 d!26309))

(declare-fun d!26311 () Bool)

(declare-fun e!64113 () Bool)

(assert (=> d!26311 e!64113))

(declare-fun res!49521 () Bool)

(assert (=> d!26311 (=> res!49521 e!64113)))

(declare-fun lt!49474 () Bool)

(assert (=> d!26311 (= res!49521 (not lt!49474))))

(declare-fun lt!49476 () Bool)

(assert (=> d!26311 (= lt!49474 lt!49476)))

(declare-fun lt!49473 () Unit!2937)

(declare-fun e!64114 () Unit!2937)

(assert (=> d!26311 (= lt!49473 e!64114)))

(declare-fun c!16694 () Bool)

(assert (=> d!26311 (= c!16694 lt!49476)))

(assert (=> d!26311 (= lt!49476 (containsKey!154 (toList!783 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(assert (=> d!26311 (= (contains!800 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))) lt!49474)))

(declare-fun b!98355 () Bool)

(declare-fun lt!49475 () Unit!2937)

(assert (=> b!98355 (= e!64114 lt!49475)))

(assert (=> b!98355 (= lt!49475 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(assert (=> b!98355 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(declare-fun b!98356 () Bool)

(declare-fun Unit!2970 () Unit!2937)

(assert (=> b!98356 (= e!64114 Unit!2970)))

(declare-fun b!98357 () Bool)

(assert (=> b!98357 (= e!64113 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986))))))))

(assert (= (and d!26311 c!16694) b!98355))

(assert (= (and d!26311 (not c!16694)) b!98356))

(assert (= (and d!26311 (not res!49521)) b!98357))

(assert (=> d!26311 m!107001))

(declare-fun m!107955 () Bool)

(assert (=> d!26311 m!107955))

(assert (=> b!98355 m!107001))

(declare-fun m!107957 () Bool)

(assert (=> b!98355 m!107957))

(assert (=> b!98355 m!107001))

(declare-fun m!107959 () Bool)

(assert (=> b!98355 m!107959))

(assert (=> b!98355 m!107959))

(declare-fun m!107961 () Bool)

(assert (=> b!98355 m!107961))

(assert (=> b!98357 m!107001))

(assert (=> b!98357 m!107959))

(assert (=> b!98357 m!107959))

(assert (=> b!98357 m!107961))

(assert (=> d!26055 d!26311))

(declare-fun d!26313 () Bool)

(declare-fun e!64115 () Bool)

(assert (=> d!26313 e!64115))

(declare-fun res!49522 () Bool)

(assert (=> d!26313 (=> (not res!49522) (not e!64115))))

(assert (=> d!26313 (= res!49522 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 lt!49116))))))

(declare-fun lt!49477 () Unit!2937)

(assert (=> d!26313 (= lt!49477 (choose!589 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26313 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26313 (= (lemmaValidKeyInArrayIsInListMap!102 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (defaultEntry!2481 newMap!16)) lt!49477)))

(declare-fun b!98358 () Bool)

(assert (=> b!98358 (= e!64115 (contains!800 (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 lt!49116) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)))))))

(assert (= (and d!26313 res!49522) b!98358))

(declare-fun m!107963 () Bool)

(assert (=> d!26313 m!107963))

(assert (=> d!26313 m!106895))

(assert (=> b!98358 m!106999))

(declare-fun m!107965 () Bool)

(assert (=> b!98358 m!107965))

(assert (=> b!98358 m!106999))

(assert (=> b!98358 m!107965))

(declare-fun m!107967 () Bool)

(assert (=> b!98358 m!107967))

(assert (=> d!26055 d!26313))

(declare-fun d!26315 () Bool)

(declare-fun e!64118 () Bool)

(assert (=> d!26315 e!64118))

(declare-fun res!49525 () Bool)

(assert (=> d!26315 (=> (not res!49525) (not e!64118))))

(assert (=> d!26315 (= res!49525 (and (bvsge (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) #b00000000000000000000000000000000) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2265 (_keys!4171 newMap!16))) (bvslt (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (size!2266 (_values!2464 newMap!16)))))))

(declare-fun lt!49480 () Unit!2937)

(declare-fun choose!597 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2937)

(assert (=> d!26315 (= lt!49480 (choose!597 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26315 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26315 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49480)))

(declare-fun b!98361 () Bool)

(assert (=> b!98361 (= e!64118 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (array!4242 (store (arr!2015 (_keys!4171 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (size!2265 (_keys!4171 newMap!16))) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (ite c!16554 (index!3158 lt!48986) (index!3155 lt!48986)) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))))

(assert (= (and d!26315 res!49525) b!98361))

(assert (=> d!26315 m!106647))

(assert (=> d!26315 m!106673))

(declare-fun m!107969 () Bool)

(assert (=> d!26315 m!107969))

(assert (=> d!26315 m!106895))

(assert (=> b!98361 m!106761))

(assert (=> b!98361 m!107015))

(assert (=> b!98361 m!107013))

(assert (=> b!98361 m!106761))

(assert (=> b!98361 m!107029))

(assert (=> b!98361 m!107035))

(assert (=> d!26055 d!26315))

(declare-fun b!98362 () Bool)

(declare-fun e!64123 () Bool)

(declare-fun call!10037 () Bool)

(assert (=> b!98362 (= e!64123 (not call!10037))))

(declare-fun b!98363 () Bool)

(declare-fun e!64120 () ListLongMap!1535)

(declare-fun call!10038 () ListLongMap!1535)

(assert (=> b!98363 (= e!64120 call!10038)))

(declare-fun bm!10030 () Bool)

(declare-fun lt!49501 () ListLongMap!1535)

(assert (=> bm!10030 (= call!10037 (contains!800 lt!49501 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10031 () Bool)

(declare-fun call!10036 () Bool)

(assert (=> bm!10031 (= call!10036 (contains!800 lt!49501 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98364 () Bool)

(declare-fun res!49532 () Bool)

(declare-fun e!64130 () Bool)

(assert (=> b!98364 (=> (not res!49532) (not e!64130))))

(declare-fun e!64124 () Bool)

(assert (=> b!98364 (= res!49532 e!64124)))

(declare-fun res!49534 () Bool)

(assert (=> b!98364 (=> res!49534 e!64124)))

(declare-fun e!64122 () Bool)

(assert (=> b!98364 (= res!49534 (not e!64122))))

(declare-fun res!49531 () Bool)

(assert (=> b!98364 (=> (not res!49531) (not e!64122))))

(assert (=> b!98364 (= res!49531 (bvslt #b00000000000000000000000000000000 (size!2265 lt!49116)))))

(declare-fun b!98365 () Bool)

(declare-fun res!49528 () Bool)

(assert (=> b!98365 (=> (not res!49528) (not e!64130))))

(declare-fun e!64128 () Bool)

(assert (=> b!98365 (= res!49528 e!64128)))

(declare-fun c!16697 () Bool)

(assert (=> b!98365 (= c!16697 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10032 () Bool)

(declare-fun call!10039 () ListLongMap!1535)

(assert (=> bm!10032 (= call!10038 call!10039)))

(declare-fun b!98366 () Bool)

(declare-fun e!64121 () ListLongMap!1535)

(assert (=> b!98366 (= e!64121 call!10038)))

(declare-fun b!98367 () Bool)

(declare-fun e!64126 () Bool)

(assert (=> b!98367 (= e!64126 (= (apply!92 lt!49501 (select (arr!2015 lt!49116) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 lt!49130) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98367 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 lt!49130)))))

(assert (=> b!98367 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 lt!49116)))))

(declare-fun b!98368 () Bool)

(declare-fun e!64131 () Bool)

(assert (=> b!98368 (= e!64131 (= (apply!92 lt!49501 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98369 () Bool)

(declare-fun e!64119 () Unit!2937)

(declare-fun lt!49502 () Unit!2937)

(assert (=> b!98369 (= e!64119 lt!49502)))

(declare-fun lt!49485 () ListLongMap!1535)

(assert (=> b!98369 (= lt!49485 (getCurrentListMapNoExtraKeys!100 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49486 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49486 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49495 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49495 (select (arr!2015 lt!49116) #b00000000000000000000000000000000))))

(declare-fun lt!49498 () Unit!2937)

(assert (=> b!98369 (= lt!49498 (addStillContains!68 lt!49485 lt!49486 (zeroValue!2364 newMap!16) lt!49495))))

(assert (=> b!98369 (contains!800 (+!135 lt!49485 (tuple2!2341 lt!49486 (zeroValue!2364 newMap!16))) lt!49495)))

(declare-fun lt!49484 () Unit!2937)

(assert (=> b!98369 (= lt!49484 lt!49498)))

(declare-fun lt!49497 () ListLongMap!1535)

(assert (=> b!98369 (= lt!49497 (getCurrentListMapNoExtraKeys!100 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49494 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49494 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49496 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49496 (select (arr!2015 lt!49116) #b00000000000000000000000000000000))))

(declare-fun lt!49487 () Unit!2937)

(assert (=> b!98369 (= lt!49487 (addApplyDifferent!68 lt!49497 lt!49494 (minValue!2364 newMap!16) lt!49496))))

(assert (=> b!98369 (= (apply!92 (+!135 lt!49497 (tuple2!2341 lt!49494 (minValue!2364 newMap!16))) lt!49496) (apply!92 lt!49497 lt!49496))))

(declare-fun lt!49482 () Unit!2937)

(assert (=> b!98369 (= lt!49482 lt!49487)))

(declare-fun lt!49490 () ListLongMap!1535)

(assert (=> b!98369 (= lt!49490 (getCurrentListMapNoExtraKeys!100 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49489 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49489 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49491 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49491 (select (arr!2015 lt!49116) #b00000000000000000000000000000000))))

(declare-fun lt!49483 () Unit!2937)

(assert (=> b!98369 (= lt!49483 (addApplyDifferent!68 lt!49490 lt!49489 (zeroValue!2364 newMap!16) lt!49491))))

(assert (=> b!98369 (= (apply!92 (+!135 lt!49490 (tuple2!2341 lt!49489 (zeroValue!2364 newMap!16))) lt!49491) (apply!92 lt!49490 lt!49491))))

(declare-fun lt!49499 () Unit!2937)

(assert (=> b!98369 (= lt!49499 lt!49483)))

(declare-fun lt!49493 () ListLongMap!1535)

(assert (=> b!98369 (= lt!49493 (getCurrentListMapNoExtraKeys!100 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49500 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49500 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49492 () (_ BitVec 64))

(assert (=> b!98369 (= lt!49492 (select (arr!2015 lt!49116) #b00000000000000000000000000000000))))

(assert (=> b!98369 (= lt!49502 (addApplyDifferent!68 lt!49493 lt!49500 (minValue!2364 newMap!16) lt!49492))))

(assert (=> b!98369 (= (apply!92 (+!135 lt!49493 (tuple2!2341 lt!49500 (minValue!2364 newMap!16))) lt!49492) (apply!92 lt!49493 lt!49492))))

(declare-fun b!98370 () Bool)

(declare-fun e!64129 () ListLongMap!1535)

(assert (=> b!98370 (= e!64129 (+!135 call!10039 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!98371 () Bool)

(declare-fun call!10035 () ListLongMap!1535)

(assert (=> b!98371 (= e!64121 call!10035)))

(declare-fun b!98372 () Bool)

(declare-fun e!64125 () Bool)

(assert (=> b!98372 (= e!64125 (= (apply!92 lt!49501 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10034 () ListLongMap!1535)

(declare-fun c!16698 () Bool)

(declare-fun bm!10034 () Bool)

(declare-fun c!16696 () Bool)

(declare-fun call!10033 () ListLongMap!1535)

(assert (=> bm!10034 (= call!10039 (+!135 (ite c!16698 call!10033 (ite c!16696 call!10034 call!10035)) (ite (or c!16698 c!16696) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98373 () Bool)

(assert (=> b!98373 (= e!64123 e!64131)))

(declare-fun res!49529 () Bool)

(assert (=> b!98373 (= res!49529 call!10037)))

(assert (=> b!98373 (=> (not res!49529) (not e!64131))))

(declare-fun b!98374 () Bool)

(declare-fun Unit!2971 () Unit!2937)

(assert (=> b!98374 (= e!64119 Unit!2971)))

(declare-fun bm!10035 () Bool)

(assert (=> bm!10035 (= call!10034 call!10033)))

(declare-fun b!98375 () Bool)

(assert (=> b!98375 (= e!64129 e!64120)))

(assert (=> b!98375 (= c!16696 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98376 () Bool)

(assert (=> b!98376 (= e!64128 (not call!10036))))

(declare-fun b!98377 () Bool)

(declare-fun c!16700 () Bool)

(assert (=> b!98377 (= c!16700 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98377 (= e!64120 e!64121)))

(declare-fun b!98378 () Bool)

(assert (=> b!98378 (= e!64128 e!64125)))

(declare-fun res!49533 () Bool)

(assert (=> b!98378 (= res!49533 call!10036)))

(assert (=> b!98378 (=> (not res!49533) (not e!64125))))

(declare-fun b!98379 () Bool)

(assert (=> b!98379 (= e!64130 e!64123)))

(declare-fun c!16699 () Bool)

(assert (=> b!98379 (= c!16699 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98380 () Bool)

(assert (=> b!98380 (= e!64122 (validKeyInArray!0 (select (arr!2015 lt!49116) #b00000000000000000000000000000000)))))

(declare-fun bm!10033 () Bool)

(assert (=> bm!10033 (= call!10033 (getCurrentListMapNoExtraKeys!100 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26317 () Bool)

(assert (=> d!26317 e!64130))

(declare-fun res!49530 () Bool)

(assert (=> d!26317 (=> (not res!49530) (not e!64130))))

(assert (=> d!26317 (= res!49530 (or (bvsge #b00000000000000000000000000000000 (size!2265 lt!49116)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 lt!49116)))))))

(declare-fun lt!49488 () ListLongMap!1535)

(assert (=> d!26317 (= lt!49501 lt!49488)))

(declare-fun lt!49481 () Unit!2937)

(assert (=> d!26317 (= lt!49481 e!64119)))

(declare-fun c!16695 () Bool)

(declare-fun e!64127 () Bool)

(assert (=> d!26317 (= c!16695 e!64127)))

(declare-fun res!49527 () Bool)

(assert (=> d!26317 (=> (not res!49527) (not e!64127))))

(assert (=> d!26317 (= res!49527 (bvslt #b00000000000000000000000000000000 (size!2265 lt!49116)))))

(assert (=> d!26317 (= lt!49488 e!64129)))

(assert (=> d!26317 (= c!16698 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26317 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26317 (= (getCurrentListMap!474 lt!49116 lt!49130 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49501)))

(declare-fun b!98381 () Bool)

(assert (=> b!98381 (= e!64127 (validKeyInArray!0 (select (arr!2015 lt!49116) #b00000000000000000000000000000000)))))

(declare-fun bm!10036 () Bool)

(assert (=> bm!10036 (= call!10035 call!10034)))

(declare-fun b!98382 () Bool)

(assert (=> b!98382 (= e!64124 e!64126)))

(declare-fun res!49526 () Bool)

(assert (=> b!98382 (=> (not res!49526) (not e!64126))))

(assert (=> b!98382 (= res!49526 (contains!800 lt!49501 (select (arr!2015 lt!49116) #b00000000000000000000000000000000)))))

(assert (=> b!98382 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 lt!49116)))))

(assert (= (and d!26317 c!16698) b!98370))

(assert (= (and d!26317 (not c!16698)) b!98375))

(assert (= (and b!98375 c!16696) b!98363))

(assert (= (and b!98375 (not c!16696)) b!98377))

(assert (= (and b!98377 c!16700) b!98366))

(assert (= (and b!98377 (not c!16700)) b!98371))

(assert (= (or b!98366 b!98371) bm!10036))

(assert (= (or b!98363 bm!10036) bm!10035))

(assert (= (or b!98363 b!98366) bm!10032))

(assert (= (or b!98370 bm!10035) bm!10033))

(assert (= (or b!98370 bm!10032) bm!10034))

(assert (= (and d!26317 res!49527) b!98381))

(assert (= (and d!26317 c!16695) b!98369))

(assert (= (and d!26317 (not c!16695)) b!98374))

(assert (= (and d!26317 res!49530) b!98364))

(assert (= (and b!98364 res!49531) b!98380))

(assert (= (and b!98364 (not res!49534)) b!98382))

(assert (= (and b!98382 res!49526) b!98367))

(assert (= (and b!98364 res!49532) b!98365))

(assert (= (and b!98365 c!16697) b!98378))

(assert (= (and b!98365 (not c!16697)) b!98376))

(assert (= (and b!98378 res!49533) b!98372))

(assert (= (or b!98378 b!98376) bm!10031))

(assert (= (and b!98365 res!49528) b!98379))

(assert (= (and b!98379 c!16699) b!98373))

(assert (= (and b!98379 (not c!16699)) b!98362))

(assert (= (and b!98373 res!49529) b!98368))

(assert (= (or b!98373 b!98362) bm!10030))

(declare-fun b_lambda!4381 () Bool)

(assert (=> (not b_lambda!4381) (not b!98367)))

(assert (=> b!98367 t!5542))

(declare-fun b_and!6055 () Bool)

(assert (= b_and!6051 (and (=> t!5542 result!3275) b_and!6055)))

(assert (=> b!98367 t!5544))

(declare-fun b_and!6057 () Bool)

(assert (= b_and!6053 (and (=> t!5544 result!3277) b_and!6057)))

(declare-fun m!107971 () Bool)

(assert (=> b!98368 m!107971))

(declare-fun m!107973 () Bool)

(assert (=> bm!10031 m!107973))

(declare-fun m!107975 () Bool)

(assert (=> b!98382 m!107975))

(assert (=> b!98382 m!107975))

(declare-fun m!107977 () Bool)

(assert (=> b!98382 m!107977))

(assert (=> d!26317 m!106895))

(declare-fun m!107979 () Bool)

(assert (=> b!98372 m!107979))

(declare-fun m!107981 () Bool)

(assert (=> bm!10034 m!107981))

(assert (=> b!98381 m!107975))

(assert (=> b!98381 m!107975))

(declare-fun m!107983 () Bool)

(assert (=> b!98381 m!107983))

(declare-fun m!107985 () Bool)

(assert (=> b!98370 m!107985))

(assert (=> b!98380 m!107975))

(assert (=> b!98380 m!107975))

(assert (=> b!98380 m!107983))

(declare-fun m!107987 () Bool)

(assert (=> b!98367 m!107987))

(assert (=> b!98367 m!106907))

(declare-fun m!107989 () Bool)

(assert (=> b!98367 m!107989))

(assert (=> b!98367 m!107975))

(declare-fun m!107991 () Bool)

(assert (=> b!98367 m!107991))

(assert (=> b!98367 m!107975))

(assert (=> b!98367 m!107987))

(assert (=> b!98367 m!106907))

(declare-fun m!107993 () Bool)

(assert (=> b!98369 m!107993))

(declare-fun m!107995 () Bool)

(assert (=> b!98369 m!107995))

(declare-fun m!107997 () Bool)

(assert (=> b!98369 m!107997))

(declare-fun m!107999 () Bool)

(assert (=> b!98369 m!107999))

(declare-fun m!108001 () Bool)

(assert (=> b!98369 m!108001))

(declare-fun m!108003 () Bool)

(assert (=> b!98369 m!108003))

(declare-fun m!108005 () Bool)

(assert (=> b!98369 m!108005))

(declare-fun m!108007 () Bool)

(assert (=> b!98369 m!108007))

(declare-fun m!108009 () Bool)

(assert (=> b!98369 m!108009))

(assert (=> b!98369 m!107975))

(assert (=> b!98369 m!108007))

(declare-fun m!108011 () Bool)

(assert (=> b!98369 m!108011))

(assert (=> b!98369 m!107995))

(declare-fun m!108013 () Bool)

(assert (=> b!98369 m!108013))

(declare-fun m!108015 () Bool)

(assert (=> b!98369 m!108015))

(declare-fun m!108017 () Bool)

(assert (=> b!98369 m!108017))

(declare-fun m!108019 () Bool)

(assert (=> b!98369 m!108019))

(assert (=> b!98369 m!108001))

(assert (=> b!98369 m!107993))

(declare-fun m!108021 () Bool)

(assert (=> b!98369 m!108021))

(declare-fun m!108023 () Bool)

(assert (=> b!98369 m!108023))

(assert (=> bm!10033 m!108011))

(declare-fun m!108025 () Bool)

(assert (=> bm!10030 m!108025))

(assert (=> d!26055 d!26317))

(assert (=> d!26055 d!26121))

(declare-fun d!26319 () Bool)

(declare-fun e!64132 () Bool)

(assert (=> d!26319 e!64132))

(declare-fun res!49536 () Bool)

(assert (=> d!26319 (=> (not res!49536) (not e!64132))))

(declare-fun lt!49504 () ListLongMap!1535)

(assert (=> d!26319 (= res!49536 (contains!800 lt!49504 (_1!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49506 () List!1580)

(assert (=> d!26319 (= lt!49504 (ListLongMap!1536 lt!49506))))

(declare-fun lt!49505 () Unit!2937)

(declare-fun lt!49503 () Unit!2937)

(assert (=> d!26319 (= lt!49505 lt!49503)))

(assert (=> d!26319 (= (getValueByKey!150 lt!49506 (_1!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26319 (= lt!49503 (lemmaContainsTupThenGetReturnValue!66 lt!49506 (_1!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26319 (= lt!49506 (insertStrictlySorted!69 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26319 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49504)))

(declare-fun b!98383 () Bool)

(declare-fun res!49535 () Bool)

(assert (=> b!98383 (=> (not res!49535) (not e!64132))))

(assert (=> b!98383 (= res!49535 (= (getValueByKey!150 (toList!783 lt!49504) (_1!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98384 () Bool)

(assert (=> b!98384 (= e!64132 (contains!803 (toList!783 lt!49504) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26319 res!49536) b!98383))

(assert (= (and b!98383 res!49535) b!98384))

(declare-fun m!108027 () Bool)

(assert (=> d!26319 m!108027))

(declare-fun m!108029 () Bool)

(assert (=> d!26319 m!108029))

(declare-fun m!108031 () Bool)

(assert (=> d!26319 m!108031))

(declare-fun m!108033 () Bool)

(assert (=> d!26319 m!108033))

(declare-fun m!108035 () Bool)

(assert (=> b!98383 m!108035))

(declare-fun m!108037 () Bool)

(assert (=> b!98384 m!108037))

(assert (=> d!26049 d!26319))

(assert (=> d!26049 d!26065))

(declare-fun d!26321 () Bool)

(assert (=> d!26321 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26321 true))

(declare-fun _$7!83 () Unit!2937)

(assert (=> d!26321 (= (choose!588 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48990 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)) _$7!83)))

(declare-fun bs!4072 () Bool)

(assert (= bs!4072 d!26321))

(assert (=> bs!4072 m!106761))

(assert (=> bs!4072 m!106761))

(assert (=> bs!4072 m!106983))

(assert (=> bs!4072 m!106673))

(assert (=> bs!4072 m!106985))

(assert (=> d!26049 d!26321))

(assert (=> d!26049 d!26209))

(declare-fun b!98385 () Bool)

(declare-fun e!64137 () Bool)

(declare-fun call!10044 () Bool)

(assert (=> b!98385 (= e!64137 (not call!10044))))

(declare-fun b!98386 () Bool)

(declare-fun e!64134 () ListLongMap!1535)

(declare-fun call!10045 () ListLongMap!1535)

(assert (=> b!98386 (= e!64134 call!10045)))

(declare-fun bm!10037 () Bool)

(declare-fun lt!49527 () ListLongMap!1535)

(assert (=> bm!10037 (= call!10044 (contains!800 lt!49527 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10038 () Bool)

(declare-fun call!10043 () Bool)

(assert (=> bm!10038 (= call!10043 (contains!800 lt!49527 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98387 () Bool)

(declare-fun res!49543 () Bool)

(declare-fun e!64144 () Bool)

(assert (=> b!98387 (=> (not res!49543) (not e!64144))))

(declare-fun e!64138 () Bool)

(assert (=> b!98387 (= res!49543 e!64138)))

(declare-fun res!49545 () Bool)

(assert (=> b!98387 (=> res!49545 e!64138)))

(declare-fun e!64136 () Bool)

(assert (=> b!98387 (= res!49545 (not e!64136))))

(declare-fun res!49542 () Bool)

(assert (=> b!98387 (=> (not res!49542) (not e!64136))))

(assert (=> b!98387 (= res!49542 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98388 () Bool)

(declare-fun res!49539 () Bool)

(assert (=> b!98388 (=> (not res!49539) (not e!64144))))

(declare-fun e!64142 () Bool)

(assert (=> b!98388 (= res!49539 e!64142)))

(declare-fun c!16703 () Bool)

(assert (=> b!98388 (= c!16703 (not (= (bvand lt!48990 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10039 () Bool)

(declare-fun call!10046 () ListLongMap!1535)

(assert (=> bm!10039 (= call!10045 call!10046)))

(declare-fun b!98389 () Bool)

(declare-fun e!64135 () ListLongMap!1535)

(assert (=> b!98389 (= e!64135 call!10045)))

(declare-fun b!98390 () Bool)

(declare-fun e!64140 () Bool)

(assert (=> b!98390 (= e!64140 (= (apply!92 lt!49527 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98390 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (_values!2464 newMap!16))))))

(assert (=> b!98390 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98391 () Bool)

(declare-fun e!64145 () Bool)

(assert (=> b!98391 (= e!64145 (= (apply!92 lt!49527 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98392 () Bool)

(declare-fun e!64133 () Unit!2937)

(declare-fun lt!49528 () Unit!2937)

(assert (=> b!98392 (= e!64133 lt!49528)))

(declare-fun lt!49511 () ListLongMap!1535)

(assert (=> b!98392 (= lt!49511 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49512 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49512 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49521 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49521 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49524 () Unit!2937)

(assert (=> b!98392 (= lt!49524 (addStillContains!68 lt!49511 lt!49512 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49521))))

(assert (=> b!98392 (contains!800 (+!135 lt!49511 (tuple2!2341 lt!49512 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49521)))

(declare-fun lt!49510 () Unit!2937)

(assert (=> b!98392 (= lt!49510 lt!49524)))

(declare-fun lt!49523 () ListLongMap!1535)

(assert (=> b!98392 (= lt!49523 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49520 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49520 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49522 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49522 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49513 () Unit!2937)

(assert (=> b!98392 (= lt!49513 (addApplyDifferent!68 lt!49523 lt!49520 (minValue!2364 newMap!16) lt!49522))))

(assert (=> b!98392 (= (apply!92 (+!135 lt!49523 (tuple2!2341 lt!49520 (minValue!2364 newMap!16))) lt!49522) (apply!92 lt!49523 lt!49522))))

(declare-fun lt!49508 () Unit!2937)

(assert (=> b!98392 (= lt!49508 lt!49513)))

(declare-fun lt!49516 () ListLongMap!1535)

(assert (=> b!98392 (= lt!49516 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49515 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49515 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49517 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49517 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49509 () Unit!2937)

(assert (=> b!98392 (= lt!49509 (addApplyDifferent!68 lt!49516 lt!49515 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49517))))

(assert (=> b!98392 (= (apply!92 (+!135 lt!49516 (tuple2!2341 lt!49515 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49517) (apply!92 lt!49516 lt!49517))))

(declare-fun lt!49525 () Unit!2937)

(assert (=> b!98392 (= lt!49525 lt!49509)))

(declare-fun lt!49519 () ListLongMap!1535)

(assert (=> b!98392 (= lt!49519 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49526 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49526 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49518 () (_ BitVec 64))

(assert (=> b!98392 (= lt!49518 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98392 (= lt!49528 (addApplyDifferent!68 lt!49519 lt!49526 (minValue!2364 newMap!16) lt!49518))))

(assert (=> b!98392 (= (apply!92 (+!135 lt!49519 (tuple2!2341 lt!49526 (minValue!2364 newMap!16))) lt!49518) (apply!92 lt!49519 lt!49518))))

(declare-fun b!98393 () Bool)

(declare-fun e!64143 () ListLongMap!1535)

(assert (=> b!98393 (= e!64143 (+!135 call!10046 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!98394 () Bool)

(declare-fun call!10042 () ListLongMap!1535)

(assert (=> b!98394 (= e!64135 call!10042)))

(declare-fun e!64139 () Bool)

(declare-fun b!98395 () Bool)

(assert (=> b!98395 (= e!64139 (= (apply!92 lt!49527 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!10041 () ListLongMap!1535)

(declare-fun c!16702 () Bool)

(declare-fun c!16704 () Bool)

(declare-fun bm!10041 () Bool)

(declare-fun call!10040 () ListLongMap!1535)

(assert (=> bm!10041 (= call!10046 (+!135 (ite c!16704 call!10040 (ite c!16702 call!10041 call!10042)) (ite (or c!16704 c!16702) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98396 () Bool)

(assert (=> b!98396 (= e!64137 e!64145)))

(declare-fun res!49540 () Bool)

(assert (=> b!98396 (= res!49540 call!10044)))

(assert (=> b!98396 (=> (not res!49540) (not e!64145))))

(declare-fun b!98397 () Bool)

(declare-fun Unit!2972 () Unit!2937)

(assert (=> b!98397 (= e!64133 Unit!2972)))

(declare-fun bm!10042 () Bool)

(assert (=> bm!10042 (= call!10041 call!10040)))

(declare-fun b!98398 () Bool)

(assert (=> b!98398 (= e!64143 e!64134)))

(assert (=> b!98398 (= c!16702 (and (not (= (bvand lt!48990 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48990 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98399 () Bool)

(assert (=> b!98399 (= e!64142 (not call!10043))))

(declare-fun b!98400 () Bool)

(declare-fun c!16706 () Bool)

(assert (=> b!98400 (= c!16706 (and (not (= (bvand lt!48990 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48990 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98400 (= e!64134 e!64135)))

(declare-fun b!98401 () Bool)

(assert (=> b!98401 (= e!64142 e!64139)))

(declare-fun res!49544 () Bool)

(assert (=> b!98401 (= res!49544 call!10043)))

(assert (=> b!98401 (=> (not res!49544) (not e!64139))))

(declare-fun b!98402 () Bool)

(assert (=> b!98402 (= e!64144 e!64137)))

(declare-fun c!16705 () Bool)

(assert (=> b!98402 (= c!16705 (not (= (bvand lt!48990 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98403 () Bool)

(assert (=> b!98403 (= e!64136 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10040 () Bool)

(assert (=> bm!10040 (= call!10040 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26323 () Bool)

(assert (=> d!26323 e!64144))

(declare-fun res!49541 () Bool)

(assert (=> d!26323 (=> (not res!49541) (not e!64144))))

(assert (=> d!26323 (= res!49541 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49514 () ListLongMap!1535)

(assert (=> d!26323 (= lt!49527 lt!49514)))

(declare-fun lt!49507 () Unit!2937)

(assert (=> d!26323 (= lt!49507 e!64133)))

(declare-fun c!16701 () Bool)

(declare-fun e!64141 () Bool)

(assert (=> d!26323 (= c!16701 e!64141)))

(declare-fun res!49538 () Bool)

(assert (=> d!26323 (=> (not res!49538) (not e!64141))))

(assert (=> d!26323 (= res!49538 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26323 (= lt!49514 e!64143)))

(assert (=> d!26323 (= c!16704 (and (not (= (bvand lt!48990 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48990 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26323 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26323 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48990 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49527)))

(declare-fun b!98404 () Bool)

(assert (=> b!98404 (= e!64141 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10043 () Bool)

(assert (=> bm!10043 (= call!10042 call!10041)))

(declare-fun b!98405 () Bool)

(assert (=> b!98405 (= e!64138 e!64140)))

(declare-fun res!49537 () Bool)

(assert (=> b!98405 (=> (not res!49537) (not e!64140))))

(assert (=> b!98405 (= res!49537 (contains!800 lt!49527 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98405 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26323 c!16704) b!98393))

(assert (= (and d!26323 (not c!16704)) b!98398))

(assert (= (and b!98398 c!16702) b!98386))

(assert (= (and b!98398 (not c!16702)) b!98400))

(assert (= (and b!98400 c!16706) b!98389))

(assert (= (and b!98400 (not c!16706)) b!98394))

(assert (= (or b!98389 b!98394) bm!10043))

(assert (= (or b!98386 bm!10043) bm!10042))

(assert (= (or b!98386 b!98389) bm!10039))

(assert (= (or b!98393 bm!10042) bm!10040))

(assert (= (or b!98393 bm!10039) bm!10041))

(assert (= (and d!26323 res!49538) b!98404))

(assert (= (and d!26323 c!16701) b!98392))

(assert (= (and d!26323 (not c!16701)) b!98397))

(assert (= (and d!26323 res!49541) b!98387))

(assert (= (and b!98387 res!49542) b!98403))

(assert (= (and b!98387 (not res!49545)) b!98405))

(assert (= (and b!98405 res!49537) b!98390))

(assert (= (and b!98387 res!49543) b!98388))

(assert (= (and b!98388 c!16703) b!98401))

(assert (= (and b!98388 (not c!16703)) b!98399))

(assert (= (and b!98401 res!49544) b!98395))

(assert (= (or b!98401 b!98399) bm!10038))

(assert (= (and b!98388 res!49539) b!98402))

(assert (= (and b!98402 c!16705) b!98396))

(assert (= (and b!98402 (not c!16705)) b!98385))

(assert (= (and b!98396 res!49540) b!98391))

(assert (= (or b!98396 b!98385) bm!10037))

(declare-fun b_lambda!4383 () Bool)

(assert (=> (not b_lambda!4383) (not b!98390)))

(assert (=> b!98390 t!5542))

(declare-fun b_and!6059 () Bool)

(assert (= b_and!6055 (and (=> t!5542 result!3275) b_and!6059)))

(assert (=> b!98390 t!5544))

(declare-fun b_and!6061 () Bool)

(assert (= b_and!6057 (and (=> t!5544 result!3277) b_and!6061)))

(declare-fun m!108039 () Bool)

(assert (=> b!98391 m!108039))

(declare-fun m!108041 () Bool)

(assert (=> bm!10038 m!108041))

(assert (=> b!98405 m!106891))

(assert (=> b!98405 m!106891))

(declare-fun m!108043 () Bool)

(assert (=> b!98405 m!108043))

(assert (=> d!26323 m!106895))

(declare-fun m!108045 () Bool)

(assert (=> b!98395 m!108045))

(declare-fun m!108047 () Bool)

(assert (=> bm!10041 m!108047))

(assert (=> b!98404 m!106891))

(assert (=> b!98404 m!106891))

(assert (=> b!98404 m!106901))

(declare-fun m!108049 () Bool)

(assert (=> b!98393 m!108049))

(assert (=> b!98403 m!106891))

(assert (=> b!98403 m!106891))

(assert (=> b!98403 m!106901))

(assert (=> b!98390 m!107129))

(assert (=> b!98390 m!106907))

(assert (=> b!98390 m!107131))

(assert (=> b!98390 m!106891))

(declare-fun m!108051 () Bool)

(assert (=> b!98390 m!108051))

(assert (=> b!98390 m!106891))

(assert (=> b!98390 m!107129))

(assert (=> b!98390 m!106907))

(declare-fun m!108053 () Bool)

(assert (=> b!98392 m!108053))

(declare-fun m!108055 () Bool)

(assert (=> b!98392 m!108055))

(assert (=> b!98392 m!106673))

(declare-fun m!108057 () Bool)

(assert (=> b!98392 m!108057))

(declare-fun m!108059 () Bool)

(assert (=> b!98392 m!108059))

(declare-fun m!108061 () Bool)

(assert (=> b!98392 m!108061))

(declare-fun m!108063 () Bool)

(assert (=> b!98392 m!108063))

(assert (=> b!98392 m!106673))

(declare-fun m!108065 () Bool)

(assert (=> b!98392 m!108065))

(declare-fun m!108067 () Bool)

(assert (=> b!98392 m!108067))

(declare-fun m!108069 () Bool)

(assert (=> b!98392 m!108069))

(assert (=> b!98392 m!106891))

(assert (=> b!98392 m!108067))

(assert (=> b!98392 m!106673))

(declare-fun m!108071 () Bool)

(assert (=> b!98392 m!108071))

(assert (=> b!98392 m!108055))

(declare-fun m!108073 () Bool)

(assert (=> b!98392 m!108073))

(declare-fun m!108075 () Bool)

(assert (=> b!98392 m!108075))

(declare-fun m!108077 () Bool)

(assert (=> b!98392 m!108077))

(declare-fun m!108079 () Bool)

(assert (=> b!98392 m!108079))

(assert (=> b!98392 m!108061))

(assert (=> b!98392 m!108053))

(declare-fun m!108081 () Bool)

(assert (=> b!98392 m!108081))

(declare-fun m!108083 () Bool)

(assert (=> b!98392 m!108083))

(assert (=> bm!10040 m!106673))

(assert (=> bm!10040 m!108071))

(declare-fun m!108085 () Bool)

(assert (=> bm!10037 m!108085))

(assert (=> d!26049 d!26323))

(assert (=> b!98002 d!26031))

(declare-fun d!26325 () Bool)

(declare-fun e!64146 () Bool)

(assert (=> d!26325 e!64146))

(declare-fun res!49547 () Bool)

(assert (=> d!26325 (=> (not res!49547) (not e!64146))))

(declare-fun lt!49530 () ListLongMap!1535)

(assert (=> d!26325 (= res!49547 (contains!800 lt!49530 (_1!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49532 () List!1580)

(assert (=> d!26325 (= lt!49530 (ListLongMap!1536 lt!49532))))

(declare-fun lt!49531 () Unit!2937)

(declare-fun lt!49529 () Unit!2937)

(assert (=> d!26325 (= lt!49531 lt!49529)))

(assert (=> d!26325 (= (getValueByKey!150 lt!49532 (_1!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26325 (= lt!49529 (lemmaContainsTupThenGetReturnValue!66 lt!49532 (_1!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26325 (= lt!49532 (insertStrictlySorted!69 (toList!783 lt!49151) (_1!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26325 (= (+!135 lt!49151 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) lt!49530)))

(declare-fun b!98406 () Bool)

(declare-fun res!49546 () Bool)

(assert (=> b!98406 (=> (not res!49546) (not e!64146))))

(assert (=> b!98406 (= res!49546 (= (getValueByKey!150 (toList!783 lt!49530) (_1!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98407 () Bool)

(assert (=> b!98407 (= e!64146 (contains!803 (toList!783 lt!49530) (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26325 res!49547) b!98406))

(assert (= (and b!98406 res!49546) b!98407))

(declare-fun m!108087 () Bool)

(assert (=> d!26325 m!108087))

(declare-fun m!108089 () Bool)

(assert (=> d!26325 m!108089))

(declare-fun m!108091 () Bool)

(assert (=> d!26325 m!108091))

(declare-fun m!108093 () Bool)

(assert (=> d!26325 m!108093))

(declare-fun m!108095 () Bool)

(assert (=> b!98406 m!108095))

(declare-fun m!108097 () Bool)

(assert (=> b!98407 m!108097))

(assert (=> b!97907 d!26325))

(declare-fun d!26327 () Bool)

(assert (=> d!26327 (= (apply!92 (+!135 lt!49151 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) lt!49152) (apply!92 lt!49151 lt!49152))))

(declare-fun lt!49533 () Unit!2937)

(assert (=> d!26327 (= lt!49533 (choose!591 lt!49151 lt!49150 (zeroValue!2364 newMap!16) lt!49152))))

(declare-fun e!64147 () Bool)

(assert (=> d!26327 e!64147))

(declare-fun res!49548 () Bool)

(assert (=> d!26327 (=> (not res!49548) (not e!64147))))

(assert (=> d!26327 (= res!49548 (contains!800 lt!49151 lt!49152))))

(assert (=> d!26327 (= (addApplyDifferent!68 lt!49151 lt!49150 (zeroValue!2364 newMap!16) lt!49152) lt!49533)))

(declare-fun b!98408 () Bool)

(assert (=> b!98408 (= e!64147 (not (= lt!49152 lt!49150)))))

(assert (= (and d!26327 res!49548) b!98408))

(assert (=> d!26327 m!107091))

(declare-fun m!108099 () Bool)

(assert (=> d!26327 m!108099))

(assert (=> d!26327 m!107065))

(declare-fun m!108101 () Bool)

(assert (=> d!26327 m!108101))

(assert (=> d!26327 m!107065))

(assert (=> d!26327 m!107093))

(assert (=> b!97907 d!26327))

(declare-fun d!26329 () Bool)

(assert (=> d!26329 (= (apply!92 (+!135 lt!49151 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16))) lt!49152) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49151 (tuple2!2341 lt!49150 (zeroValue!2364 newMap!16)))) lt!49152)))))

(declare-fun bs!4073 () Bool)

(assert (= bs!4073 d!26329))

(declare-fun m!108103 () Bool)

(assert (=> bs!4073 m!108103))

(assert (=> bs!4073 m!108103))

(declare-fun m!108105 () Bool)

(assert (=> bs!4073 m!108105))

(assert (=> b!97907 d!26329))

(declare-fun d!26331 () Bool)

(declare-fun e!64148 () Bool)

(assert (=> d!26331 e!64148))

(declare-fun res!49550 () Bool)

(assert (=> d!26331 (=> (not res!49550) (not e!64148))))

(declare-fun lt!49535 () ListLongMap!1535)

(assert (=> d!26331 (= res!49550 (contains!800 lt!49535 (_1!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49537 () List!1580)

(assert (=> d!26331 (= lt!49535 (ListLongMap!1536 lt!49537))))

(declare-fun lt!49536 () Unit!2937)

(declare-fun lt!49534 () Unit!2937)

(assert (=> d!26331 (= lt!49536 lt!49534)))

(assert (=> d!26331 (= (getValueByKey!150 lt!49537 (_1!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26331 (= lt!49534 (lemmaContainsTupThenGetReturnValue!66 lt!49537 (_1!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26331 (= lt!49537 (insertStrictlySorted!69 (toList!783 lt!49146) (_1!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26331 (= (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) lt!49535)))

(declare-fun b!98409 () Bool)

(declare-fun res!49549 () Bool)

(assert (=> b!98409 (=> (not res!49549) (not e!64148))))

(assert (=> b!98409 (= res!49549 (= (getValueByKey!150 (toList!783 lt!49535) (_1!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98410 () Bool)

(assert (=> b!98410 (= e!64148 (contains!803 (toList!783 lt!49535) (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26331 res!49550) b!98409))

(assert (= (and b!98409 res!49549) b!98410))

(declare-fun m!108107 () Bool)

(assert (=> d!26331 m!108107))

(declare-fun m!108109 () Bool)

(assert (=> d!26331 m!108109))

(declare-fun m!108111 () Bool)

(assert (=> d!26331 m!108111))

(declare-fun m!108113 () Bool)

(assert (=> d!26331 m!108113))

(declare-fun m!108115 () Bool)

(assert (=> b!98409 m!108115))

(declare-fun m!108117 () Bool)

(assert (=> b!98410 m!108117))

(assert (=> b!97907 d!26331))

(declare-fun d!26333 () Bool)

(assert (=> d!26333 (= (apply!92 (+!135 lt!49158 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) lt!49157) (apply!92 lt!49158 lt!49157))))

(declare-fun lt!49538 () Unit!2937)

(assert (=> d!26333 (= lt!49538 (choose!591 lt!49158 lt!49155 (minValue!2364 newMap!16) lt!49157))))

(declare-fun e!64149 () Bool)

(assert (=> d!26333 e!64149))

(declare-fun res!49551 () Bool)

(assert (=> d!26333 (=> (not res!49551) (not e!64149))))

(assert (=> d!26333 (= res!49551 (contains!800 lt!49158 lt!49157))))

(assert (=> d!26333 (= (addApplyDifferent!68 lt!49158 lt!49155 (minValue!2364 newMap!16) lt!49157) lt!49538)))

(declare-fun b!98411 () Bool)

(assert (=> b!98411 (= e!64149 (not (= lt!49157 lt!49155)))))

(assert (= (and d!26333 res!49551) b!98411))

(assert (=> d!26333 m!107071))

(declare-fun m!108119 () Bool)

(assert (=> d!26333 m!108119))

(assert (=> d!26333 m!107079))

(declare-fun m!108121 () Bool)

(assert (=> d!26333 m!108121))

(assert (=> d!26333 m!107079))

(assert (=> d!26333 m!107081))

(assert (=> b!97907 d!26333))

(declare-fun d!26335 () Bool)

(assert (=> d!26335 (= (apply!92 (+!135 lt!49154 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) lt!49153) (apply!92 lt!49154 lt!49153))))

(declare-fun lt!49539 () Unit!2937)

(assert (=> d!26335 (= lt!49539 (choose!591 lt!49154 lt!49161 (minValue!2364 newMap!16) lt!49153))))

(declare-fun e!64150 () Bool)

(assert (=> d!26335 e!64150))

(declare-fun res!49552 () Bool)

(assert (=> d!26335 (=> (not res!49552) (not e!64150))))

(assert (=> d!26335 (= res!49552 (contains!800 lt!49154 lt!49153))))

(assert (=> d!26335 (= (addApplyDifferent!68 lt!49154 lt!49161 (minValue!2364 newMap!16) lt!49153) lt!49539)))

(declare-fun b!98412 () Bool)

(assert (=> b!98412 (= e!64150 (not (= lt!49153 lt!49161)))))

(assert (= (and d!26335 res!49552) b!98412))

(assert (=> d!26335 m!107087))

(declare-fun m!108123 () Bool)

(assert (=> d!26335 m!108123))

(assert (=> d!26335 m!107073))

(declare-fun m!108125 () Bool)

(assert (=> d!26335 m!108125))

(assert (=> d!26335 m!107073))

(assert (=> d!26335 m!107075))

(assert (=> b!97907 d!26335))

(declare-fun d!26337 () Bool)

(declare-fun e!64151 () Bool)

(assert (=> d!26337 e!64151))

(declare-fun res!49554 () Bool)

(assert (=> d!26337 (=> (not res!49554) (not e!64151))))

(declare-fun lt!49541 () ListLongMap!1535)

(assert (=> d!26337 (= res!49554 (contains!800 lt!49541 (_1!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))))))

(declare-fun lt!49543 () List!1580)

(assert (=> d!26337 (= lt!49541 (ListLongMap!1536 lt!49543))))

(declare-fun lt!49542 () Unit!2937)

(declare-fun lt!49540 () Unit!2937)

(assert (=> d!26337 (= lt!49542 lt!49540)))

(assert (=> d!26337 (= (getValueByKey!150 lt!49543 (_1!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))))))

(assert (=> d!26337 (= lt!49540 (lemmaContainsTupThenGetReturnValue!66 lt!49543 (_1!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))))))

(assert (=> d!26337 (= lt!49543 (insertStrictlySorted!69 (toList!783 lt!49154) (_1!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))))))

(assert (=> d!26337 (= (+!135 lt!49154 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) lt!49541)))

(declare-fun b!98413 () Bool)

(declare-fun res!49553 () Bool)

(assert (=> b!98413 (=> (not res!49553) (not e!64151))))

(assert (=> b!98413 (= res!49553 (= (getValueByKey!150 (toList!783 lt!49541) (_1!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))))))))

(declare-fun b!98414 () Bool)

(assert (=> b!98414 (= e!64151 (contains!803 (toList!783 lt!49541) (tuple2!2341 lt!49161 (minValue!2364 newMap!16))))))

(assert (= (and d!26337 res!49554) b!98413))

(assert (= (and b!98413 res!49553) b!98414))

(declare-fun m!108127 () Bool)

(assert (=> d!26337 m!108127))

(declare-fun m!108129 () Bool)

(assert (=> d!26337 m!108129))

(declare-fun m!108131 () Bool)

(assert (=> d!26337 m!108131))

(declare-fun m!108133 () Bool)

(assert (=> d!26337 m!108133))

(declare-fun m!108135 () Bool)

(assert (=> b!98413 m!108135))

(declare-fun m!108137 () Bool)

(assert (=> b!98414 m!108137))

(assert (=> b!97907 d!26337))

(declare-fun d!26339 () Bool)

(declare-fun e!64152 () Bool)

(assert (=> d!26339 e!64152))

(declare-fun res!49555 () Bool)

(assert (=> d!26339 (=> res!49555 e!64152)))

(declare-fun lt!49545 () Bool)

(assert (=> d!26339 (= res!49555 (not lt!49545))))

(declare-fun lt!49547 () Bool)

(assert (=> d!26339 (= lt!49545 lt!49547)))

(declare-fun lt!49544 () Unit!2937)

(declare-fun e!64153 () Unit!2937)

(assert (=> d!26339 (= lt!49544 e!64153)))

(declare-fun c!16707 () Bool)

(assert (=> d!26339 (= c!16707 lt!49547)))

(assert (=> d!26339 (= lt!49547 (containsKey!154 (toList!783 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) lt!49156))))

(assert (=> d!26339 (= (contains!800 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) lt!49156) lt!49545)))

(declare-fun b!98415 () Bool)

(declare-fun lt!49546 () Unit!2937)

(assert (=> b!98415 (= e!64153 lt!49546)))

(assert (=> b!98415 (= lt!49546 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) lt!49156))))

(assert (=> b!98415 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) lt!49156))))

(declare-fun b!98416 () Bool)

(declare-fun Unit!2973 () Unit!2937)

(assert (=> b!98416 (= e!64153 Unit!2973)))

(declare-fun b!98417 () Bool)

(assert (=> b!98417 (= e!64152 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16)))) lt!49156)))))

(assert (= (and d!26339 c!16707) b!98415))

(assert (= (and d!26339 (not c!16707)) b!98416))

(assert (= (and d!26339 (not res!49555)) b!98417))

(declare-fun m!108139 () Bool)

(assert (=> d!26339 m!108139))

(declare-fun m!108141 () Bool)

(assert (=> b!98415 m!108141))

(declare-fun m!108143 () Bool)

(assert (=> b!98415 m!108143))

(assert (=> b!98415 m!108143))

(declare-fun m!108145 () Bool)

(assert (=> b!98415 m!108145))

(assert (=> b!98417 m!108143))

(assert (=> b!98417 m!108143))

(assert (=> b!98417 m!108145))

(assert (=> b!97907 d!26339))

(declare-fun b!98418 () Bool)

(declare-fun e!64158 () Bool)

(declare-fun e!64154 () Bool)

(assert (=> b!98418 (= e!64158 e!64154)))

(declare-fun c!16709 () Bool)

(declare-fun e!64159 () Bool)

(assert (=> b!98418 (= c!16709 e!64159)))

(declare-fun res!49558 () Bool)

(assert (=> b!98418 (=> (not res!49558) (not e!64159))))

(assert (=> b!98418 (= res!49558 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98419 () Bool)

(declare-fun e!64156 () ListLongMap!1535)

(declare-fun call!10047 () ListLongMap!1535)

(assert (=> b!98419 (= e!64156 call!10047)))

(declare-fun b!98420 () Bool)

(declare-fun e!64160 () ListLongMap!1535)

(assert (=> b!98420 (= e!64160 (ListLongMap!1536 Nil!1577))))

(declare-fun b!98421 () Bool)

(declare-fun lt!49551 () Unit!2937)

(declare-fun lt!49550 () Unit!2937)

(assert (=> b!98421 (= lt!49551 lt!49550)))

(declare-fun lt!49549 () ListLongMap!1535)

(declare-fun lt!49552 () (_ BitVec 64))

(declare-fun lt!49548 () V!3155)

(declare-fun lt!49553 () (_ BitVec 64))

(assert (=> b!98421 (not (contains!800 (+!135 lt!49549 (tuple2!2341 lt!49552 lt!49548)) lt!49553))))

(assert (=> b!98421 (= lt!49550 (addStillNotContains!40 lt!49549 lt!49552 lt!49548 lt!49553))))

(assert (=> b!98421 (= lt!49553 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98421 (= lt!49548 (get!1280 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98421 (= lt!49552 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98421 (= lt!49549 call!10047)))

(assert (=> b!98421 (= e!64156 (+!135 call!10047 (tuple2!2341 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1280 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98422 () Bool)

(declare-fun lt!49554 () ListLongMap!1535)

(declare-fun e!64155 () Bool)

(assert (=> b!98422 (= e!64155 (= lt!49554 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98423 () Bool)

(assert (=> b!98423 (= e!64159 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98423 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!26341 () Bool)

(assert (=> d!26341 e!64158))

(declare-fun res!49559 () Bool)

(assert (=> d!26341 (=> (not res!49559) (not e!64158))))

(assert (=> d!26341 (= res!49559 (not (contains!800 lt!49554 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26341 (= lt!49554 e!64160)))

(declare-fun c!16710 () Bool)

(assert (=> d!26341 (= c!16710 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26341 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26341 (= (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49554)))

(declare-fun b!98424 () Bool)

(assert (=> b!98424 (= e!64160 e!64156)))

(declare-fun c!16711 () Bool)

(assert (=> b!98424 (= c!16711 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98425 () Bool)

(assert (=> b!98425 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> b!98425 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004))))))

(declare-fun e!64157 () Bool)

(assert (=> b!98425 (= e!64157 (= (apply!92 lt!49554 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98426 () Bool)

(declare-fun res!49556 () Bool)

(assert (=> b!98426 (=> (not res!49556) (not e!64158))))

(assert (=> b!98426 (= res!49556 (not (contains!800 lt!49554 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98427 () Bool)

(assert (=> b!98427 (= e!64154 e!64157)))

(assert (=> b!98427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49557 () Bool)

(assert (=> b!98427 (= res!49557 (contains!800 lt!49554 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98427 (=> (not res!49557) (not e!64157))))

(declare-fun b!98428 () Bool)

(assert (=> b!98428 (= e!64155 (isEmpty!356 lt!49554))))

(declare-fun bm!10044 () Bool)

(assert (=> bm!10044 (= call!10047 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun b!98429 () Bool)

(assert (=> b!98429 (= e!64154 e!64155)))

(declare-fun c!16708 () Bool)

(assert (=> b!98429 (= c!16708 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26341 c!16710) b!98420))

(assert (= (and d!26341 (not c!16710)) b!98424))

(assert (= (and b!98424 c!16711) b!98421))

(assert (= (and b!98424 (not c!16711)) b!98419))

(assert (= (or b!98421 b!98419) bm!10044))

(assert (= (and d!26341 res!49559) b!98426))

(assert (= (and b!98426 res!49556) b!98418))

(assert (= (and b!98418 res!49558) b!98423))

(assert (= (and b!98418 c!16709) b!98427))

(assert (= (and b!98418 (not c!16709)) b!98429))

(assert (= (and b!98427 res!49557) b!98425))

(assert (= (and b!98429 c!16708) b!98422))

(assert (= (and b!98429 (not c!16708)) b!98428))

(declare-fun b_lambda!4385 () Bool)

(assert (=> (not b_lambda!4385) (not b!98421)))

(assert (=> b!98421 t!5542))

(declare-fun b_and!6063 () Bool)

(assert (= b_and!6059 (and (=> t!5542 result!3275) b_and!6063)))

(assert (=> b!98421 t!5544))

(declare-fun b_and!6065 () Bool)

(assert (= b_and!6061 (and (=> t!5544 result!3277) b_and!6065)))

(declare-fun b_lambda!4387 () Bool)

(assert (=> (not b_lambda!4387) (not b!98425)))

(assert (=> b!98425 t!5542))

(declare-fun b_and!6067 () Bool)

(assert (= b_and!6063 (and (=> t!5542 result!3275) b_and!6067)))

(assert (=> b!98425 t!5544))

(declare-fun b_and!6069 () Bool)

(assert (= b_and!6065 (and (=> t!5544 result!3277) b_and!6069)))

(declare-fun m!108147 () Bool)

(assert (=> b!98426 m!108147))

(assert (=> b!98424 m!106891))

(assert (=> b!98424 m!106891))

(assert (=> b!98424 m!106901))

(assert (=> b!98427 m!106891))

(assert (=> b!98427 m!106891))

(declare-fun m!108149 () Bool)

(assert (=> b!98427 m!108149))

(declare-fun m!108151 () Bool)

(assert (=> b!98428 m!108151))

(declare-fun m!108153 () Bool)

(assert (=> bm!10044 m!108153))

(assert (=> b!98423 m!106891))

(assert (=> b!98423 m!106891))

(assert (=> b!98423 m!106901))

(assert (=> b!98425 m!106891))

(assert (=> b!98425 m!106907))

(assert (=> b!98425 m!107059))

(assert (=> b!98425 m!106891))

(declare-fun m!108155 () Bool)

(assert (=> b!98425 m!108155))

(assert (=> b!98425 m!107059))

(assert (=> b!98425 m!106907))

(assert (=> b!98425 m!107061))

(declare-fun m!108157 () Bool)

(assert (=> d!26341 m!108157))

(assert (=> d!26341 m!106895))

(assert (=> b!98422 m!108153))

(assert (=> b!98421 m!106891))

(assert (=> b!98421 m!106907))

(assert (=> b!98421 m!107059))

(declare-fun m!108159 () Bool)

(assert (=> b!98421 m!108159))

(declare-fun m!108161 () Bool)

(assert (=> b!98421 m!108161))

(assert (=> b!98421 m!107059))

(assert (=> b!98421 m!106907))

(assert (=> b!98421 m!107061))

(declare-fun m!108163 () Bool)

(assert (=> b!98421 m!108163))

(assert (=> b!98421 m!108159))

(declare-fun m!108165 () Bool)

(assert (=> b!98421 m!108165))

(assert (=> b!97907 d!26341))

(declare-fun d!26343 () Bool)

(assert (=> d!26343 (= (apply!92 lt!49158 lt!49157) (get!1284 (getValueByKey!150 (toList!783 lt!49158) lt!49157)))))

(declare-fun bs!4074 () Bool)

(assert (= bs!4074 d!26343))

(declare-fun m!108167 () Bool)

(assert (=> bs!4074 m!108167))

(assert (=> bs!4074 m!108167))

(declare-fun m!108169 () Bool)

(assert (=> bs!4074 m!108169))

(assert (=> b!97907 d!26343))

(declare-fun d!26345 () Bool)

(assert (=> d!26345 (= (apply!92 (+!135 lt!49158 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) lt!49157) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49158 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))) lt!49157)))))

(declare-fun bs!4075 () Bool)

(assert (= bs!4075 d!26345))

(declare-fun m!108171 () Bool)

(assert (=> bs!4075 m!108171))

(assert (=> bs!4075 m!108171))

(declare-fun m!108173 () Bool)

(assert (=> bs!4075 m!108173))

(assert (=> b!97907 d!26345))

(declare-fun d!26347 () Bool)

(declare-fun e!64161 () Bool)

(assert (=> d!26347 e!64161))

(declare-fun res!49561 () Bool)

(assert (=> d!26347 (=> (not res!49561) (not e!64161))))

(declare-fun lt!49556 () ListLongMap!1535)

(assert (=> d!26347 (= res!49561 (contains!800 lt!49556 (_1!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))))))

(declare-fun lt!49558 () List!1580)

(assert (=> d!26347 (= lt!49556 (ListLongMap!1536 lt!49558))))

(declare-fun lt!49557 () Unit!2937)

(declare-fun lt!49555 () Unit!2937)

(assert (=> d!26347 (= lt!49557 lt!49555)))

(assert (=> d!26347 (= (getValueByKey!150 lt!49558 (_1!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))))))

(assert (=> d!26347 (= lt!49555 (lemmaContainsTupThenGetReturnValue!66 lt!49558 (_1!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))))))

(assert (=> d!26347 (= lt!49558 (insertStrictlySorted!69 (toList!783 lt!49158) (_1!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))))))

(assert (=> d!26347 (= (+!135 lt!49158 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))) lt!49556)))

(declare-fun b!98430 () Bool)

(declare-fun res!49560 () Bool)

(assert (=> b!98430 (=> (not res!49560) (not e!64161))))

(assert (=> b!98430 (= res!49560 (= (getValueByKey!150 (toList!783 lt!49556) (_1!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 lt!49155 (minValue!2364 newMap!16))))))))

(declare-fun b!98431 () Bool)

(assert (=> b!98431 (= e!64161 (contains!803 (toList!783 lt!49556) (tuple2!2341 lt!49155 (minValue!2364 newMap!16))))))

(assert (= (and d!26347 res!49561) b!98430))

(assert (= (and b!98430 res!49560) b!98431))

(declare-fun m!108175 () Bool)

(assert (=> d!26347 m!108175))

(declare-fun m!108177 () Bool)

(assert (=> d!26347 m!108177))

(declare-fun m!108179 () Bool)

(assert (=> d!26347 m!108179))

(declare-fun m!108181 () Bool)

(assert (=> d!26347 m!108181))

(declare-fun m!108183 () Bool)

(assert (=> b!98430 m!108183))

(declare-fun m!108185 () Bool)

(assert (=> b!98431 m!108185))

(assert (=> b!97907 d!26347))

(declare-fun d!26349 () Bool)

(assert (=> d!26349 (= (apply!92 lt!49151 lt!49152) (get!1284 (getValueByKey!150 (toList!783 lt!49151) lt!49152)))))

(declare-fun bs!4076 () Bool)

(assert (= bs!4076 d!26349))

(declare-fun m!108187 () Bool)

(assert (=> bs!4076 m!108187))

(assert (=> bs!4076 m!108187))

(declare-fun m!108189 () Bool)

(assert (=> bs!4076 m!108189))

(assert (=> b!97907 d!26349))

(declare-fun d!26351 () Bool)

(assert (=> d!26351 (= (apply!92 lt!49154 lt!49153) (get!1284 (getValueByKey!150 (toList!783 lt!49154) lt!49153)))))

(declare-fun bs!4077 () Bool)

(assert (= bs!4077 d!26351))

(declare-fun m!108191 () Bool)

(assert (=> bs!4077 m!108191))

(assert (=> bs!4077 m!108191))

(declare-fun m!108193 () Bool)

(assert (=> bs!4077 m!108193))

(assert (=> b!97907 d!26351))

(declare-fun d!26353 () Bool)

(assert (=> d!26353 (= (apply!92 (+!135 lt!49154 (tuple2!2341 lt!49161 (minValue!2364 newMap!16))) lt!49153) (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!49154 (tuple2!2341 lt!49161 (minValue!2364 newMap!16)))) lt!49153)))))

(declare-fun bs!4078 () Bool)

(assert (= bs!4078 d!26353))

(declare-fun m!108195 () Bool)

(assert (=> bs!4078 m!108195))

(assert (=> bs!4078 m!108195))

(declare-fun m!108197 () Bool)

(assert (=> bs!4078 m!108197))

(assert (=> b!97907 d!26353))

(declare-fun d!26355 () Bool)

(assert (=> d!26355 (contains!800 (+!135 lt!49146 (tuple2!2341 lt!49147 (zeroValue!2364 newMap!16))) lt!49156)))

(declare-fun lt!49559 () Unit!2937)

(assert (=> d!26355 (= lt!49559 (choose!592 lt!49146 lt!49147 (zeroValue!2364 newMap!16) lt!49156))))

(assert (=> d!26355 (contains!800 lt!49146 lt!49156)))

(assert (=> d!26355 (= (addStillContains!68 lt!49146 lt!49147 (zeroValue!2364 newMap!16) lt!49156) lt!49559)))

(declare-fun bs!4079 () Bool)

(assert (= bs!4079 d!26355))

(assert (=> bs!4079 m!107067))

(assert (=> bs!4079 m!107067))

(assert (=> bs!4079 m!107085))

(declare-fun m!108199 () Bool)

(assert (=> bs!4079 m!108199))

(declare-fun m!108201 () Bool)

(assert (=> bs!4079 m!108201))

(assert (=> b!97907 d!26355))

(assert (=> d!26145 d!26133))

(assert (=> d!26145 d!26135))

(declare-fun d!26357 () Bool)

(assert (=> d!26357 (isDefined!103 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26357 true))

(declare-fun _$12!344 () Unit!2937)

(assert (=> d!26357 (= (choose!596 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) _$12!344)))

(declare-fun bs!4080 () Bool)

(assert (= bs!4080 d!26357))

(assert (=> bs!4080 m!106647))

(assert (=> bs!4080 m!106821))

(assert (=> bs!4080 m!106821))

(assert (=> bs!4080 m!106823))

(assert (=> d!26145 d!26357))

(declare-fun d!26359 () Bool)

(declare-fun res!49566 () Bool)

(declare-fun e!64166 () Bool)

(assert (=> d!26359 (=> res!49566 e!64166)))

(assert (=> d!26359 (= res!49566 (or ((_ is Nil!1577) (toList!783 lt!48820)) ((_ is Nil!1577) (t!5534 (toList!783 lt!48820)))))))

(assert (=> d!26359 (= (isStrictlySorted!304 (toList!783 lt!48820)) e!64166)))

(declare-fun b!98436 () Bool)

(declare-fun e!64167 () Bool)

(assert (=> b!98436 (= e!64166 e!64167)))

(declare-fun res!49567 () Bool)

(assert (=> b!98436 (=> (not res!49567) (not e!64167))))

(assert (=> b!98436 (= res!49567 (bvslt (_1!1181 (h!2170 (toList!783 lt!48820))) (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820))))))))

(declare-fun b!98437 () Bool)

(assert (=> b!98437 (= e!64167 (isStrictlySorted!304 (t!5534 (toList!783 lt!48820))))))

(assert (= (and d!26359 (not res!49566)) b!98436))

(assert (= (and b!98436 res!49567) b!98437))

(declare-fun m!108203 () Bool)

(assert (=> b!98437 m!108203))

(assert (=> d!26145 d!26359))

(declare-fun d!26361 () Bool)

(declare-fun res!49568 () Bool)

(declare-fun e!64168 () Bool)

(assert (=> d!26361 (=> res!49568 e!64168)))

(assert (=> d!26361 (= res!49568 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26361 (= (containsKey!154 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000) e!64168)))

(declare-fun b!98438 () Bool)

(declare-fun e!64169 () Bool)

(assert (=> b!98438 (= e!64168 e!64169)))

(declare-fun res!49569 () Bool)

(assert (=> b!98438 (=> (not res!49569) (not e!64169))))

(assert (=> b!98438 (= res!49569 (and (or (not ((_ is Cons!1576) (toList!783 lt!48916))) (bvsle (_1!1181 (h!2170 (toList!783 lt!48916))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1576) (toList!783 lt!48916)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48916))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98439 () Bool)

(assert (=> b!98439 (= e!64169 (containsKey!154 (t!5534 (toList!783 lt!48916)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26361 (not res!49568)) b!98438))

(assert (= (and b!98438 res!49569) b!98439))

(declare-fun m!108205 () Bool)

(assert (=> b!98439 m!108205))

(assert (=> d!26035 d!26361))

(declare-fun b!98440 () Bool)

(declare-fun e!64174 () Bool)

(declare-fun call!10052 () Bool)

(assert (=> b!98440 (= e!64174 (not call!10052))))

(declare-fun b!98441 () Bool)

(declare-fun e!64171 () ListLongMap!1535)

(declare-fun call!10053 () ListLongMap!1535)

(assert (=> b!98441 (= e!64171 call!10053)))

(declare-fun bm!10045 () Bool)

(declare-fun lt!49580 () ListLongMap!1535)

(assert (=> bm!10045 (= call!10052 (contains!800 lt!49580 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10046 () Bool)

(declare-fun call!10051 () Bool)

(assert (=> bm!10046 (= call!10051 (contains!800 lt!49580 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98442 () Bool)

(declare-fun res!49576 () Bool)

(declare-fun e!64181 () Bool)

(assert (=> b!98442 (=> (not res!49576) (not e!64181))))

(declare-fun e!64175 () Bool)

(assert (=> b!98442 (= res!49576 e!64175)))

(declare-fun res!49578 () Bool)

(assert (=> b!98442 (=> res!49578 e!64175)))

(declare-fun e!64173 () Bool)

(assert (=> b!98442 (= res!49578 (not e!64173))))

(declare-fun res!49575 () Bool)

(assert (=> b!98442 (=> (not res!49575) (not e!64173))))

(assert (=> b!98442 (= res!49575 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(declare-fun b!98443 () Bool)

(declare-fun res!49572 () Bool)

(assert (=> b!98443 (=> (not res!49572) (not e!64181))))

(declare-fun e!64179 () Bool)

(assert (=> b!98443 (= res!49572 e!64179)))

(declare-fun c!16714 () Bool)

(assert (=> b!98443 (= c!16714 (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10047 () Bool)

(declare-fun call!10054 () ListLongMap!1535)

(assert (=> bm!10047 (= call!10053 call!10054)))

(declare-fun b!98444 () Bool)

(declare-fun e!64172 () ListLongMap!1535)

(assert (=> b!98444 (= e!64172 call!10053)))

(declare-fun b!98445 () Bool)

(declare-fun e!64177 () Bool)

(assert (=> b!98445 (= e!64177 (= (apply!92 lt!49580 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (_values!2464 (_2!1180 lt!48997))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 (_2!1180 lt!48997)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98445 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (_values!2464 (_2!1180 lt!48997)))))))

(assert (=> b!98445 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(declare-fun b!98446 () Bool)

(declare-fun e!64182 () Bool)

(assert (=> b!98446 (= e!64182 (= (apply!92 lt!49580 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 (_2!1180 lt!48997))))))

(declare-fun b!98447 () Bool)

(declare-fun e!64170 () Unit!2937)

(declare-fun lt!49581 () Unit!2937)

(assert (=> b!98447 (= e!64170 lt!49581)))

(declare-fun lt!49564 () ListLongMap!1535)

(assert (=> b!98447 (= lt!49564 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun lt!49565 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49565 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49574 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49574 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000))))

(declare-fun lt!49577 () Unit!2937)

(assert (=> b!98447 (= lt!49577 (addStillContains!68 lt!49564 lt!49565 (zeroValue!2364 (_2!1180 lt!48997)) lt!49574))))

(assert (=> b!98447 (contains!800 (+!135 lt!49564 (tuple2!2341 lt!49565 (zeroValue!2364 (_2!1180 lt!48997)))) lt!49574)))

(declare-fun lt!49563 () Unit!2937)

(assert (=> b!98447 (= lt!49563 lt!49577)))

(declare-fun lt!49576 () ListLongMap!1535)

(assert (=> b!98447 (= lt!49576 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun lt!49573 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49573 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49575 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49575 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000))))

(declare-fun lt!49566 () Unit!2937)

(assert (=> b!98447 (= lt!49566 (addApplyDifferent!68 lt!49576 lt!49573 (minValue!2364 (_2!1180 lt!48997)) lt!49575))))

(assert (=> b!98447 (= (apply!92 (+!135 lt!49576 (tuple2!2341 lt!49573 (minValue!2364 (_2!1180 lt!48997)))) lt!49575) (apply!92 lt!49576 lt!49575))))

(declare-fun lt!49561 () Unit!2937)

(assert (=> b!98447 (= lt!49561 lt!49566)))

(declare-fun lt!49569 () ListLongMap!1535)

(assert (=> b!98447 (= lt!49569 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun lt!49568 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49568 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49570 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49570 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000))))

(declare-fun lt!49562 () Unit!2937)

(assert (=> b!98447 (= lt!49562 (addApplyDifferent!68 lt!49569 lt!49568 (zeroValue!2364 (_2!1180 lt!48997)) lt!49570))))

(assert (=> b!98447 (= (apply!92 (+!135 lt!49569 (tuple2!2341 lt!49568 (zeroValue!2364 (_2!1180 lt!48997)))) lt!49570) (apply!92 lt!49569 lt!49570))))

(declare-fun lt!49578 () Unit!2937)

(assert (=> b!98447 (= lt!49578 lt!49562)))

(declare-fun lt!49572 () ListLongMap!1535)

(assert (=> b!98447 (= lt!49572 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun lt!49579 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49579 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49571 () (_ BitVec 64))

(assert (=> b!98447 (= lt!49571 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000))))

(assert (=> b!98447 (= lt!49581 (addApplyDifferent!68 lt!49572 lt!49579 (minValue!2364 (_2!1180 lt!48997)) lt!49571))))

(assert (=> b!98447 (= (apply!92 (+!135 lt!49572 (tuple2!2341 lt!49579 (minValue!2364 (_2!1180 lt!48997)))) lt!49571) (apply!92 lt!49572 lt!49571))))

(declare-fun b!98448 () Bool)

(declare-fun e!64180 () ListLongMap!1535)

(assert (=> b!98448 (= e!64180 (+!135 call!10054 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (_2!1180 lt!48997)))))))

(declare-fun b!98449 () Bool)

(declare-fun call!10050 () ListLongMap!1535)

(assert (=> b!98449 (= e!64172 call!10050)))

(declare-fun b!98450 () Bool)

(declare-fun e!64176 () Bool)

(assert (=> b!98450 (= e!64176 (= (apply!92 lt!49580 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 (_2!1180 lt!48997))))))

(declare-fun c!16713 () Bool)

(declare-fun call!10048 () ListLongMap!1535)

(declare-fun c!16715 () Bool)

(declare-fun bm!10049 () Bool)

(declare-fun call!10049 () ListLongMap!1535)

(assert (=> bm!10049 (= call!10054 (+!135 (ite c!16715 call!10048 (ite c!16713 call!10049 call!10050)) (ite (or c!16715 c!16713) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (_2!1180 lt!48997))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (_2!1180 lt!48997))))))))

(declare-fun b!98451 () Bool)

(assert (=> b!98451 (= e!64174 e!64182)))

(declare-fun res!49573 () Bool)

(assert (=> b!98451 (= res!49573 call!10052)))

(assert (=> b!98451 (=> (not res!49573) (not e!64182))))

(declare-fun b!98452 () Bool)

(declare-fun Unit!2974 () Unit!2937)

(assert (=> b!98452 (= e!64170 Unit!2974)))

(declare-fun bm!10050 () Bool)

(assert (=> bm!10050 (= call!10049 call!10048)))

(declare-fun b!98453 () Bool)

(assert (=> b!98453 (= e!64180 e!64171)))

(assert (=> b!98453 (= c!16713 (and (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98454 () Bool)

(assert (=> b!98454 (= e!64179 (not call!10051))))

(declare-fun b!98455 () Bool)

(declare-fun c!16717 () Bool)

(assert (=> b!98455 (= c!16717 (and (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98455 (= e!64171 e!64172)))

(declare-fun b!98456 () Bool)

(assert (=> b!98456 (= e!64179 e!64176)))

(declare-fun res!49577 () Bool)

(assert (=> b!98456 (= res!49577 call!10051)))

(assert (=> b!98456 (=> (not res!49577) (not e!64176))))

(declare-fun b!98457 () Bool)

(assert (=> b!98457 (= e!64181 e!64174)))

(declare-fun c!16716 () Bool)

(assert (=> b!98457 (= c!16716 (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98458 () Bool)

(assert (=> b!98458 (= e!64173 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun bm!10048 () Bool)

(assert (=> bm!10048 (= call!10048 (getCurrentListMapNoExtraKeys!100 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))))))

(declare-fun d!26363 () Bool)

(assert (=> d!26363 e!64181))

(declare-fun res!49574 () Bool)

(assert (=> d!26363 (=> (not res!49574) (not e!64181))))

(assert (=> d!26363 (= res!49574 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))))

(declare-fun lt!49567 () ListLongMap!1535)

(assert (=> d!26363 (= lt!49580 lt!49567)))

(declare-fun lt!49560 () Unit!2937)

(assert (=> d!26363 (= lt!49560 e!64170)))

(declare-fun c!16712 () Bool)

(declare-fun e!64178 () Bool)

(assert (=> d!26363 (= c!16712 e!64178)))

(declare-fun res!49571 () Bool)

(assert (=> d!26363 (=> (not res!49571) (not e!64178))))

(assert (=> d!26363 (= res!49571 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (=> d!26363 (= lt!49567 e!64180)))

(assert (=> d!26363 (= c!16715 (and (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26363 (validMask!0 (mask!6578 (_2!1180 lt!48997)))))

(assert (=> d!26363 (= (getCurrentListMap!474 (_keys!4171 (_2!1180 lt!48997)) (_values!2464 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997)) (extraKeys!2302 (_2!1180 lt!48997)) (zeroValue!2364 (_2!1180 lt!48997)) (minValue!2364 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1180 lt!48997))) lt!49580)))

(declare-fun b!98459 () Bool)

(assert (=> b!98459 (= e!64178 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun bm!10051 () Bool)

(assert (=> bm!10051 (= call!10050 call!10049)))

(declare-fun b!98460 () Bool)

(assert (=> b!98460 (= e!64175 e!64177)))

(declare-fun res!49570 () Bool)

(assert (=> b!98460 (=> (not res!49570) (not e!64177))))

(assert (=> b!98460 (= res!49570 (contains!800 lt!49580 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(assert (=> b!98460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (= (and d!26363 c!16715) b!98448))

(assert (= (and d!26363 (not c!16715)) b!98453))

(assert (= (and b!98453 c!16713) b!98441))

(assert (= (and b!98453 (not c!16713)) b!98455))

(assert (= (and b!98455 c!16717) b!98444))

(assert (= (and b!98455 (not c!16717)) b!98449))

(assert (= (or b!98444 b!98449) bm!10051))

(assert (= (or b!98441 bm!10051) bm!10050))

(assert (= (or b!98441 b!98444) bm!10047))

(assert (= (or b!98448 bm!10050) bm!10048))

(assert (= (or b!98448 bm!10047) bm!10049))

(assert (= (and d!26363 res!49571) b!98459))

(assert (= (and d!26363 c!16712) b!98447))

(assert (= (and d!26363 (not c!16712)) b!98452))

(assert (= (and d!26363 res!49574) b!98442))

(assert (= (and b!98442 res!49575) b!98458))

(assert (= (and b!98442 (not res!49578)) b!98460))

(assert (= (and b!98460 res!49570) b!98445))

(assert (= (and b!98442 res!49576) b!98443))

(assert (= (and b!98443 c!16714) b!98456))

(assert (= (and b!98443 (not c!16714)) b!98454))

(assert (= (and b!98456 res!49577) b!98450))

(assert (= (or b!98456 b!98454) bm!10046))

(assert (= (and b!98443 res!49572) b!98457))

(assert (= (and b!98457 c!16716) b!98451))

(assert (= (and b!98457 (not c!16716)) b!98440))

(assert (= (and b!98451 res!49573) b!98446))

(assert (= (or b!98451 b!98440) bm!10045))

(declare-fun b_lambda!4389 () Bool)

(assert (=> (not b_lambda!4389) (not b!98445)))

(declare-fun t!5546 () Bool)

(declare-fun tb!1933 () Bool)

(assert (=> (and b!97466 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 (_2!1180 lt!48997))) t!5546) tb!1933))

(declare-fun result!3279 () Bool)

(assert (=> tb!1933 (= result!3279 tp_is_empty!2631)))

(assert (=> b!98445 t!5546))

(declare-fun b_and!6071 () Bool)

(assert (= b_and!6067 (and (=> t!5546 result!3279) b_and!6071)))

(declare-fun tb!1935 () Bool)

(declare-fun t!5548 () Bool)

(assert (=> (and b!97470 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (_2!1180 lt!48997))) t!5548) tb!1935))

(declare-fun result!3281 () Bool)

(assert (= result!3281 result!3279))

(assert (=> b!98445 t!5548))

(declare-fun b_and!6073 () Bool)

(assert (= b_and!6069 (and (=> t!5548 result!3281) b_and!6073)))

(declare-fun m!108207 () Bool)

(assert (=> b!98446 m!108207))

(declare-fun m!108209 () Bool)

(assert (=> bm!10046 m!108209))

(declare-fun m!108211 () Bool)

(assert (=> b!98460 m!108211))

(assert (=> b!98460 m!108211))

(declare-fun m!108213 () Bool)

(assert (=> b!98460 m!108213))

(declare-fun m!108215 () Bool)

(assert (=> d!26363 m!108215))

(declare-fun m!108217 () Bool)

(assert (=> b!98450 m!108217))

(declare-fun m!108219 () Bool)

(assert (=> bm!10049 m!108219))

(assert (=> b!98459 m!108211))

(assert (=> b!98459 m!108211))

(declare-fun m!108221 () Bool)

(assert (=> b!98459 m!108221))

(declare-fun m!108223 () Bool)

(assert (=> b!98448 m!108223))

(assert (=> b!98458 m!108211))

(assert (=> b!98458 m!108211))

(assert (=> b!98458 m!108221))

(declare-fun m!108225 () Bool)

(assert (=> b!98445 m!108225))

(declare-fun m!108227 () Bool)

(assert (=> b!98445 m!108227))

(declare-fun m!108229 () Bool)

(assert (=> b!98445 m!108229))

(assert (=> b!98445 m!108211))

(declare-fun m!108231 () Bool)

(assert (=> b!98445 m!108231))

(assert (=> b!98445 m!108211))

(assert (=> b!98445 m!108225))

(assert (=> b!98445 m!108227))

(declare-fun m!108233 () Bool)

(assert (=> b!98447 m!108233))

(declare-fun m!108235 () Bool)

(assert (=> b!98447 m!108235))

(declare-fun m!108237 () Bool)

(assert (=> b!98447 m!108237))

(declare-fun m!108239 () Bool)

(assert (=> b!98447 m!108239))

(declare-fun m!108241 () Bool)

(assert (=> b!98447 m!108241))

(declare-fun m!108243 () Bool)

(assert (=> b!98447 m!108243))

(declare-fun m!108245 () Bool)

(assert (=> b!98447 m!108245))

(declare-fun m!108247 () Bool)

(assert (=> b!98447 m!108247))

(declare-fun m!108249 () Bool)

(assert (=> b!98447 m!108249))

(assert (=> b!98447 m!108211))

(assert (=> b!98447 m!108247))

(declare-fun m!108251 () Bool)

(assert (=> b!98447 m!108251))

(assert (=> b!98447 m!108235))

(declare-fun m!108253 () Bool)

(assert (=> b!98447 m!108253))

(declare-fun m!108255 () Bool)

(assert (=> b!98447 m!108255))

(declare-fun m!108257 () Bool)

(assert (=> b!98447 m!108257))

(declare-fun m!108259 () Bool)

(assert (=> b!98447 m!108259))

(assert (=> b!98447 m!108241))

(assert (=> b!98447 m!108233))

(declare-fun m!108261 () Bool)

(assert (=> b!98447 m!108261))

(declare-fun m!108263 () Bool)

(assert (=> b!98447 m!108263))

(assert (=> bm!10048 m!108251))

(declare-fun m!108265 () Bool)

(assert (=> bm!10045 m!108265))

(assert (=> d!26037 d!26363))

(declare-fun b!98461 () Bool)

(declare-fun e!64184 () Bool)

(declare-fun call!10055 () Bool)

(assert (=> b!98461 (= e!64184 call!10055)))

(declare-fun b!98462 () Bool)

(declare-fun e!64183 () Bool)

(assert (=> b!98462 (= e!64183 call!10055)))

(declare-fun b!98463 () Bool)

(declare-fun e!64185 () Bool)

(assert (=> b!98463 (= e!64185 e!64183)))

(declare-fun c!16718 () Bool)

(assert (=> b!98463 (= c!16718 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98464 () Bool)

(assert (=> b!98464 (= e!64183 e!64184)))

(declare-fun lt!49584 () (_ BitVec 64))

(assert (=> b!98464 (= lt!49584 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!49582 () Unit!2937)

(assert (=> b!98464 (= lt!49582 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49584 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!98464 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49584 #b00000000000000000000000000000000)))

(declare-fun lt!49583 () Unit!2937)

(assert (=> b!98464 (= lt!49583 lt!49582)))

(declare-fun res!49579 () Bool)

(assert (=> b!98464 (= res!49579 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4171 newMap!16) (mask!6578 newMap!16)) (Found!253 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!98464 (=> (not res!49579) (not e!64184))))

(declare-fun d!26365 () Bool)

(declare-fun res!49580 () Bool)

(assert (=> d!26365 (=> res!49580 e!64185)))

(assert (=> d!26365 (= res!49580 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26365 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)) e!64185)))

(declare-fun bm!10052 () Bool)

(assert (=> bm!10052 (= call!10055 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (= (and d!26365 (not res!49580)) b!98463))

(assert (= (and b!98463 c!16718) b!98464))

(assert (= (and b!98463 (not c!16718)) b!98462))

(assert (= (and b!98464 res!49579) b!98461))

(assert (= (or b!98461 b!98462) bm!10052))

(declare-fun m!108267 () Bool)

(assert (=> b!98463 m!108267))

(assert (=> b!98463 m!108267))

(declare-fun m!108269 () Bool)

(assert (=> b!98463 m!108269))

(assert (=> b!98464 m!108267))

(declare-fun m!108271 () Bool)

(assert (=> b!98464 m!108271))

(declare-fun m!108273 () Bool)

(assert (=> b!98464 m!108273))

(assert (=> b!98464 m!108267))

(declare-fun m!108275 () Bool)

(assert (=> b!98464 m!108275))

(declare-fun m!108277 () Bool)

(assert (=> bm!10052 m!108277))

(assert (=> bm!9968 d!26365))

(declare-fun d!26367 () Bool)

(assert (=> d!26367 (= (get!1284 (getValueByKey!150 (toList!783 lt!48908) lt!48907)) (v!2804 (getValueByKey!150 (toList!783 lt!48908) lt!48907)))))

(assert (=> d!26073 d!26367))

(declare-fun b!98467 () Bool)

(declare-fun e!64187 () Option!156)

(assert (=> b!98467 (= e!64187 (getValueByKey!150 (t!5534 (toList!783 lt!48908)) lt!48907))))

(declare-fun b!98465 () Bool)

(declare-fun e!64186 () Option!156)

(assert (=> b!98465 (= e!64186 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48908)))))))

(declare-fun b!98468 () Bool)

(assert (=> b!98468 (= e!64187 None!154)))

(declare-fun b!98466 () Bool)

(assert (=> b!98466 (= e!64186 e!64187)))

(declare-fun c!16720 () Bool)

(assert (=> b!98466 (= c!16720 (and ((_ is Cons!1576) (toList!783 lt!48908)) (not (= (_1!1181 (h!2170 (toList!783 lt!48908))) lt!48907))))))

(declare-fun d!26369 () Bool)

(declare-fun c!16719 () Bool)

(assert (=> d!26369 (= c!16719 (and ((_ is Cons!1576) (toList!783 lt!48908)) (= (_1!1181 (h!2170 (toList!783 lt!48908))) lt!48907)))))

(assert (=> d!26369 (= (getValueByKey!150 (toList!783 lt!48908) lt!48907) e!64186)))

(assert (= (and d!26369 c!16719) b!98465))

(assert (= (and d!26369 (not c!16719)) b!98466))

(assert (= (and b!98466 c!16720) b!98467))

(assert (= (and b!98466 (not c!16720)) b!98468))

(declare-fun m!108279 () Bool)

(assert (=> b!98467 m!108279))

(assert (=> d!26073 d!26369))

(assert (=> b!98125 d!26001))

(declare-fun d!26371 () Bool)

(assert (=> d!26371 (= (isEmpty!357 (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) (not ((_ is Some!155) (getValueByKey!150 (toList!783 lt!48820) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(assert (=> d!26133 d!26371))

(assert (=> b!97896 d!26261))

(declare-fun d!26373 () Bool)

(declare-fun e!64188 () Bool)

(assert (=> d!26373 e!64188))

(declare-fun res!49582 () Bool)

(assert (=> d!26373 (=> (not res!49582) (not e!64188))))

(declare-fun lt!49586 () ListLongMap!1535)

(assert (=> d!26373 (= res!49582 (contains!800 lt!49586 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49588 () List!1580)

(assert (=> d!26373 (= lt!49586 (ListLongMap!1536 lt!49588))))

(declare-fun lt!49587 () Unit!2937)

(declare-fun lt!49585 () Unit!2937)

(assert (=> d!26373 (= lt!49587 lt!49585)))

(assert (=> d!26373 (= (getValueByKey!150 lt!49588 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26373 (= lt!49585 (lemmaContainsTupThenGetReturnValue!66 lt!49588 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26373 (= lt!49588 (insertStrictlySorted!69 (toList!783 (map!1255 newMap!16)) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26373 (= (+!135 (map!1255 newMap!16) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49586)))

(declare-fun b!98469 () Bool)

(declare-fun res!49581 () Bool)

(assert (=> b!98469 (=> (not res!49581) (not e!64188))))

(assert (=> b!98469 (= res!49581 (= (getValueByKey!150 (toList!783 lt!49586) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98470 () Bool)

(assert (=> b!98470 (= e!64188 (contains!803 (toList!783 lt!49586) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26373 res!49582) b!98469))

(assert (= (and b!98469 res!49581) b!98470))

(declare-fun m!108281 () Bool)

(assert (=> d!26373 m!108281))

(declare-fun m!108283 () Bool)

(assert (=> d!26373 m!108283))

(declare-fun m!108285 () Bool)

(assert (=> d!26373 m!108285))

(declare-fun m!108287 () Bool)

(assert (=> d!26373 m!108287))

(declare-fun m!108289 () Bool)

(assert (=> b!98469 m!108289))

(declare-fun m!108291 () Bool)

(assert (=> b!98470 m!108291))

(assert (=> b!97896 d!26373))

(assert (=> b!97896 d!26011))

(declare-fun d!26375 () Bool)

(declare-fun e!64189 () Bool)

(assert (=> d!26375 e!64189))

(declare-fun res!49584 () Bool)

(assert (=> d!26375 (=> (not res!49584) (not e!64189))))

(declare-fun lt!49590 () ListLongMap!1535)

(assert (=> d!26375 (= res!49584 (contains!800 lt!49590 (_1!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun lt!49592 () List!1580)

(assert (=> d!26375 (= lt!49590 (ListLongMap!1536 lt!49592))))

(declare-fun lt!49591 () Unit!2937)

(declare-fun lt!49589 () Unit!2937)

(assert (=> d!26375 (= lt!49591 lt!49589)))

(assert (=> d!26375 (= (getValueByKey!150 lt!49592 (_1!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26375 (= lt!49589 (lemmaContainsTupThenGetReturnValue!66 lt!49592 (_1!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26375 (= lt!49592 (insertStrictlySorted!69 (toList!783 (ite c!16590 call!9991 (ite c!16588 call!9992 call!9993))) (_1!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26375 (= (+!135 (ite c!16590 call!9991 (ite c!16588 call!9992 call!9993)) (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) lt!49590)))

(declare-fun b!98471 () Bool)

(declare-fun res!49583 () Bool)

(assert (=> b!98471 (=> (not res!49583) (not e!64189))))

(assert (=> b!98471 (= res!49583 (= (getValueByKey!150 (toList!783 lt!49590) (_1!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))))

(declare-fun b!98472 () Bool)

(assert (=> b!98472 (= e!64189 (contains!803 (toList!783 lt!49590) (ite (or c!16590 c!16588) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (= (and d!26375 res!49584) b!98471))

(assert (= (and b!98471 res!49583) b!98472))

(declare-fun m!108293 () Bool)

(assert (=> d!26375 m!108293))

(declare-fun m!108295 () Bool)

(assert (=> d!26375 m!108295))

(declare-fun m!108297 () Bool)

(assert (=> d!26375 m!108297))

(declare-fun m!108299 () Bool)

(assert (=> d!26375 m!108299))

(declare-fun m!108301 () Bool)

(assert (=> b!98471 m!108301))

(declare-fun m!108303 () Bool)

(assert (=> b!98472 m!108303))

(assert (=> bm!9992 d!26375))

(assert (=> bm!9984 d!26341))

(declare-fun d!26377 () Bool)

(assert (=> d!26377 (= (get!1284 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2804 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26103 d!26377))

(declare-fun e!64191 () Option!156)

(declare-fun b!98475 () Bool)

(assert (=> b!98475 (= e!64191 (getValueByKey!150 (t!5534 (toList!783 lt!48916)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98473 () Bool)

(declare-fun e!64190 () Option!156)

(assert (=> b!98473 (= e!64190 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48916)))))))

(declare-fun b!98476 () Bool)

(assert (=> b!98476 (= e!64191 None!154)))

(declare-fun b!98474 () Bool)

(assert (=> b!98474 (= e!64190 e!64191)))

(declare-fun c!16722 () Bool)

(assert (=> b!98474 (= c!16722 (and ((_ is Cons!1576) (toList!783 lt!48916)) (not (= (_1!1181 (h!2170 (toList!783 lt!48916))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun d!26379 () Bool)

(declare-fun c!16721 () Bool)

(assert (=> d!26379 (= c!16721 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26379 (= (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64190)))

(assert (= (and d!26379 c!16721) b!98473))

(assert (= (and d!26379 (not c!16721)) b!98474))

(assert (= (and b!98474 c!16722) b!98475))

(assert (= (and b!98474 (not c!16722)) b!98476))

(assert (=> b!98475 m!106739))

(declare-fun m!108305 () Bool)

(assert (=> b!98475 m!108305))

(assert (=> d!26103 d!26379))

(declare-fun d!26381 () Bool)

(declare-fun e!64192 () Bool)

(assert (=> d!26381 e!64192))

(declare-fun res!49585 () Bool)

(assert (=> d!26381 (=> res!49585 e!64192)))

(declare-fun lt!49594 () Bool)

(assert (=> d!26381 (= res!49585 (not lt!49594))))

(declare-fun lt!49596 () Bool)

(assert (=> d!26381 (= lt!49594 lt!49596)))

(declare-fun lt!49593 () Unit!2937)

(declare-fun e!64193 () Unit!2937)

(assert (=> d!26381 (= lt!49593 e!64193)))

(declare-fun c!16723 () Bool)

(assert (=> d!26381 (= c!16723 lt!49596)))

(assert (=> d!26381 (= lt!49596 (containsKey!154 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26381 (= (contains!800 lt!49223 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49594)))

(declare-fun b!98477 () Bool)

(declare-fun lt!49595 () Unit!2937)

(assert (=> b!98477 (= e!64193 lt!49595)))

(assert (=> b!98477 (= lt!49595 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> b!98477 (isDefined!103 (getValueByKey!150 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98478 () Bool)

(declare-fun Unit!2975 () Unit!2937)

(assert (=> b!98478 (= e!64193 Unit!2975)))

(declare-fun b!98479 () Bool)

(assert (=> b!98479 (= e!64192 (isDefined!103 (getValueByKey!150 (toList!783 lt!49223) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26381 c!16723) b!98477))

(assert (= (and d!26381 (not c!16723)) b!98478))

(assert (= (and d!26381 (not res!49585)) b!98479))

(declare-fun m!108307 () Bool)

(assert (=> d!26381 m!108307))

(declare-fun m!108309 () Bool)

(assert (=> b!98477 m!108309))

(assert (=> b!98477 m!107233))

(assert (=> b!98477 m!107233))

(declare-fun m!108311 () Bool)

(assert (=> b!98477 m!108311))

(assert (=> b!98479 m!107233))

(assert (=> b!98479 m!107233))

(assert (=> b!98479 m!108311))

(assert (=> d!26087 d!26381))

(declare-fun e!64195 () Option!156)

(declare-fun b!98482 () Bool)

(assert (=> b!98482 (= e!64195 (getValueByKey!150 (t!5534 lt!49225) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98480 () Bool)

(declare-fun e!64194 () Option!156)

(assert (=> b!98480 (= e!64194 (Some!155 (_2!1181 (h!2170 lt!49225))))))

(declare-fun b!98483 () Bool)

(assert (=> b!98483 (= e!64195 None!154)))

(declare-fun b!98481 () Bool)

(assert (=> b!98481 (= e!64194 e!64195)))

(declare-fun c!16725 () Bool)

(assert (=> b!98481 (= c!16725 (and ((_ is Cons!1576) lt!49225) (not (= (_1!1181 (h!2170 lt!49225)) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16724 () Bool)

(declare-fun d!26383 () Bool)

(assert (=> d!26383 (= c!16724 (and ((_ is Cons!1576) lt!49225) (= (_1!1181 (h!2170 lt!49225)) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26383 (= (getValueByKey!150 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64194)))

(assert (= (and d!26383 c!16724) b!98480))

(assert (= (and d!26383 (not c!16724)) b!98481))

(assert (= (and b!98481 c!16725) b!98482))

(assert (= (and b!98481 (not c!16725)) b!98483))

(declare-fun m!108313 () Bool)

(assert (=> b!98482 m!108313))

(assert (=> d!26087 d!26383))

(declare-fun d!26385 () Bool)

(assert (=> d!26385 (= (getValueByKey!150 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49599 () Unit!2937)

(declare-fun choose!598 (List!1580 (_ BitVec 64) V!3155) Unit!2937)

(assert (=> d!26385 (= lt!49599 (choose!598 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64198 () Bool)

(assert (=> d!26385 e!64198))

(declare-fun res!49590 () Bool)

(assert (=> d!26385 (=> (not res!49590) (not e!64198))))

(assert (=> d!26385 (= res!49590 (isStrictlySorted!304 lt!49225))))

(assert (=> d!26385 (= (lemmaContainsTupThenGetReturnValue!66 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49599)))

(declare-fun b!98488 () Bool)

(declare-fun res!49591 () Bool)

(assert (=> b!98488 (=> (not res!49591) (not e!64198))))

(assert (=> b!98488 (= res!49591 (containsKey!154 lt!49225 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98489 () Bool)

(assert (=> b!98489 (= e!64198 (contains!803 lt!49225 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26385 res!49590) b!98488))

(assert (= (and b!98488 res!49591) b!98489))

(assert (=> d!26385 m!107227))

(declare-fun m!108315 () Bool)

(assert (=> d!26385 m!108315))

(declare-fun m!108317 () Bool)

(assert (=> d!26385 m!108317))

(declare-fun m!108319 () Bool)

(assert (=> b!98488 m!108319))

(declare-fun m!108321 () Bool)

(assert (=> b!98489 m!108321))

(assert (=> d!26087 d!26385))

(declare-fun b!98510 () Bool)

(declare-fun res!49596 () Bool)

(declare-fun e!64211 () Bool)

(assert (=> b!98510 (=> (not res!49596) (not e!64211))))

(declare-fun lt!49602 () List!1580)

(assert (=> b!98510 (= res!49596 (containsKey!154 lt!49602 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun c!16736 () Bool)

(declare-fun c!16737 () Bool)

(declare-fun b!98511 () Bool)

(declare-fun e!64212 () List!1580)

(assert (=> b!98511 (= e!64212 (ite c!16736 (t!5534 (toList!783 lt!48908)) (ite c!16737 (Cons!1576 (h!2170 (toList!783 lt!48908)) (t!5534 (toList!783 lt!48908))) Nil!1577)))))

(declare-fun c!16734 () Bool)

(declare-fun bm!10059 () Bool)

(declare-fun call!10062 () List!1580)

(declare-fun $colon$colon!78 (List!1580 tuple2!2340) List!1580)

(assert (=> bm!10059 (= call!10062 ($colon$colon!78 e!64212 (ite c!16734 (h!2170 (toList!783 lt!48908)) (tuple2!2341 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16735 () Bool)

(assert (=> bm!10059 (= c!16735 c!16734)))

(declare-fun d!26387 () Bool)

(assert (=> d!26387 e!64211))

(declare-fun res!49597 () Bool)

(assert (=> d!26387 (=> (not res!49597) (not e!64211))))

(assert (=> d!26387 (= res!49597 (isStrictlySorted!304 lt!49602))))

(declare-fun e!64213 () List!1580)

(assert (=> d!26387 (= lt!49602 e!64213)))

(assert (=> d!26387 (= c!16734 (and ((_ is Cons!1576) (toList!783 lt!48908)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48908))) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26387 (isStrictlySorted!304 (toList!783 lt!48908))))

(assert (=> d!26387 (= (insertStrictlySorted!69 (toList!783 lt!48908) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49602)))

(declare-fun b!98512 () Bool)

(assert (=> b!98512 (= e!64213 call!10062)))

(declare-fun b!98513 () Bool)

(declare-fun e!64209 () List!1580)

(declare-fun call!10063 () List!1580)

(assert (=> b!98513 (= e!64209 call!10063)))

(declare-fun b!98514 () Bool)

(declare-fun e!64210 () List!1580)

(declare-fun call!10064 () List!1580)

(assert (=> b!98514 (= e!64210 call!10064)))

(declare-fun b!98515 () Bool)

(assert (=> b!98515 (= c!16737 (and ((_ is Cons!1576) (toList!783 lt!48908)) (bvsgt (_1!1181 (h!2170 (toList!783 lt!48908))) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98515 (= e!64210 e!64209)))

(declare-fun b!98516 () Bool)

(assert (=> b!98516 (= e!64211 (contains!803 lt!49602 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98517 () Bool)

(assert (=> b!98517 (= e!64209 call!10063)))

(declare-fun bm!10060 () Bool)

(assert (=> bm!10060 (= call!10063 call!10064)))

(declare-fun bm!10061 () Bool)

(assert (=> bm!10061 (= call!10064 call!10062)))

(declare-fun b!98518 () Bool)

(assert (=> b!98518 (= e!64213 e!64210)))

(assert (=> b!98518 (= c!16736 (and ((_ is Cons!1576) (toList!783 lt!48908)) (= (_1!1181 (h!2170 (toList!783 lt!48908))) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98519 () Bool)

(assert (=> b!98519 (= e!64212 (insertStrictlySorted!69 (t!5534 (toList!783 lt!48908)) (_1!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26387 c!16734) b!98512))

(assert (= (and d!26387 (not c!16734)) b!98518))

(assert (= (and b!98518 c!16736) b!98514))

(assert (= (and b!98518 (not c!16736)) b!98515))

(assert (= (and b!98515 c!16737) b!98513))

(assert (= (and b!98515 (not c!16737)) b!98517))

(assert (= (or b!98513 b!98517) bm!10060))

(assert (= (or b!98514 bm!10060) bm!10061))

(assert (= (or b!98512 bm!10061) bm!10059))

(assert (= (and bm!10059 c!16735) b!98519))

(assert (= (and bm!10059 (not c!16735)) b!98511))

(assert (= (and d!26387 res!49597) b!98510))

(assert (= (and b!98510 res!49596) b!98516))

(declare-fun m!108323 () Bool)

(assert (=> b!98516 m!108323))

(declare-fun m!108325 () Bool)

(assert (=> d!26387 m!108325))

(declare-fun m!108327 () Bool)

(assert (=> d!26387 m!108327))

(declare-fun m!108329 () Bool)

(assert (=> bm!10059 m!108329))

(declare-fun m!108331 () Bool)

(assert (=> b!98519 m!108331))

(declare-fun m!108333 () Bool)

(assert (=> b!98510 m!108333))

(assert (=> d!26087 d!26387))

(declare-fun d!26389 () Bool)

(declare-fun e!64214 () Bool)

(assert (=> d!26389 e!64214))

(declare-fun res!49598 () Bool)

(assert (=> d!26389 (=> res!49598 e!64214)))

(declare-fun lt!49604 () Bool)

(assert (=> d!26389 (= res!49598 (not lt!49604))))

(declare-fun lt!49606 () Bool)

(assert (=> d!26389 (= lt!49604 lt!49606)))

(declare-fun lt!49603 () Unit!2937)

(declare-fun e!64215 () Unit!2937)

(assert (=> d!26389 (= lt!49603 e!64215)))

(declare-fun c!16738 () Bool)

(assert (=> d!26389 (= c!16738 lt!49606)))

(assert (=> d!26389 (= lt!49606 (containsKey!154 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26389 (= (contains!800 lt!49297 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49604)))

(declare-fun b!98520 () Bool)

(declare-fun lt!49605 () Unit!2937)

(assert (=> b!98520 (= e!64215 lt!49605)))

(assert (=> b!98520 (= lt!49605 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!98520 (isDefined!103 (getValueByKey!150 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98521 () Bool)

(declare-fun Unit!2976 () Unit!2937)

(assert (=> b!98521 (= e!64215 Unit!2976)))

(declare-fun b!98522 () Bool)

(assert (=> b!98522 (= e!64214 (isDefined!103 (getValueByKey!150 (toList!783 lt!49297) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26389 c!16738) b!98520))

(assert (= (and d!26389 (not c!16738)) b!98521))

(assert (= (and d!26389 (not res!49598)) b!98522))

(declare-fun m!108335 () Bool)

(assert (=> d!26389 m!108335))

(declare-fun m!108337 () Bool)

(assert (=> b!98520 m!108337))

(assert (=> b!98520 m!107403))

(assert (=> b!98520 m!107403))

(declare-fun m!108339 () Bool)

(assert (=> b!98520 m!108339))

(assert (=> b!98522 m!107403))

(assert (=> b!98522 m!107403))

(assert (=> b!98522 m!108339))

(assert (=> d!26139 d!26389))

(declare-fun b!98525 () Bool)

(declare-fun e!64217 () Option!156)

(assert (=> b!98525 (= e!64217 (getValueByKey!150 (t!5534 lt!49299) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98523 () Bool)

(declare-fun e!64216 () Option!156)

(assert (=> b!98523 (= e!64216 (Some!155 (_2!1181 (h!2170 lt!49299))))))

(declare-fun b!98526 () Bool)

(assert (=> b!98526 (= e!64217 None!154)))

(declare-fun b!98524 () Bool)

(assert (=> b!98524 (= e!64216 e!64217)))

(declare-fun c!16740 () Bool)

(assert (=> b!98524 (= c!16740 (and ((_ is Cons!1576) lt!49299) (not (= (_1!1181 (h!2170 lt!49299)) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!26391 () Bool)

(declare-fun c!16739 () Bool)

(assert (=> d!26391 (= c!16739 (and ((_ is Cons!1576) lt!49299) (= (_1!1181 (h!2170 lt!49299)) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26391 (= (getValueByKey!150 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64216)))

(assert (= (and d!26391 c!16739) b!98523))

(assert (= (and d!26391 (not c!16739)) b!98524))

(assert (= (and b!98524 c!16740) b!98525))

(assert (= (and b!98524 (not c!16740)) b!98526))

(declare-fun m!108341 () Bool)

(assert (=> b!98525 m!108341))

(assert (=> d!26139 d!26391))

(declare-fun d!26393 () Bool)

(assert (=> d!26393 (= (getValueByKey!150 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49607 () Unit!2937)

(assert (=> d!26393 (= lt!49607 (choose!598 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64218 () Bool)

(assert (=> d!26393 e!64218))

(declare-fun res!49599 () Bool)

(assert (=> d!26393 (=> (not res!49599) (not e!64218))))

(assert (=> d!26393 (= res!49599 (isStrictlySorted!304 lt!49299))))

(assert (=> d!26393 (= (lemmaContainsTupThenGetReturnValue!66 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49607)))

(declare-fun b!98527 () Bool)

(declare-fun res!49600 () Bool)

(assert (=> b!98527 (=> (not res!49600) (not e!64218))))

(assert (=> b!98527 (= res!49600 (containsKey!154 lt!49299 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98528 () Bool)

(assert (=> b!98528 (= e!64218 (contains!803 lt!49299 (tuple2!2341 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26393 res!49599) b!98527))

(assert (= (and b!98527 res!49600) b!98528))

(assert (=> d!26393 m!107397))

(declare-fun m!108343 () Bool)

(assert (=> d!26393 m!108343))

(declare-fun m!108345 () Bool)

(assert (=> d!26393 m!108345))

(declare-fun m!108347 () Bool)

(assert (=> b!98527 m!108347))

(declare-fun m!108349 () Bool)

(assert (=> b!98528 m!108349))

(assert (=> d!26139 d!26393))

(declare-fun b!98529 () Bool)

(declare-fun res!49601 () Bool)

(declare-fun e!64221 () Bool)

(assert (=> b!98529 (=> (not res!49601) (not e!64221))))

(declare-fun lt!49608 () List!1580)

(assert (=> b!98529 (= res!49601 (containsKey!154 lt!49608 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98530 () Bool)

(declare-fun c!16744 () Bool)

(declare-fun c!16743 () Bool)

(declare-fun e!64222 () List!1580)

(assert (=> b!98530 (= e!64222 (ite c!16743 (t!5534 (toList!783 call!9938)) (ite c!16744 (Cons!1576 (h!2170 (toList!783 call!9938)) (t!5534 (toList!783 call!9938))) Nil!1577)))))

(declare-fun bm!10062 () Bool)

(declare-fun c!16741 () Bool)

(declare-fun call!10065 () List!1580)

(assert (=> bm!10062 (= call!10065 ($colon$colon!78 e!64222 (ite c!16741 (h!2170 (toList!783 call!9938)) (tuple2!2341 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16742 () Bool)

(assert (=> bm!10062 (= c!16742 c!16741)))

(declare-fun d!26395 () Bool)

(assert (=> d!26395 e!64221))

(declare-fun res!49602 () Bool)

(assert (=> d!26395 (=> (not res!49602) (not e!64221))))

(assert (=> d!26395 (= res!49602 (isStrictlySorted!304 lt!49608))))

(declare-fun e!64223 () List!1580)

(assert (=> d!26395 (= lt!49608 e!64223)))

(assert (=> d!26395 (= c!16741 (and ((_ is Cons!1576) (toList!783 call!9938)) (bvslt (_1!1181 (h!2170 (toList!783 call!9938))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26395 (isStrictlySorted!304 (toList!783 call!9938))))

(assert (=> d!26395 (= (insertStrictlySorted!69 (toList!783 call!9938) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49608)))

(declare-fun b!98531 () Bool)

(assert (=> b!98531 (= e!64223 call!10065)))

(declare-fun b!98532 () Bool)

(declare-fun e!64219 () List!1580)

(declare-fun call!10066 () List!1580)

(assert (=> b!98532 (= e!64219 call!10066)))

(declare-fun b!98533 () Bool)

(declare-fun e!64220 () List!1580)

(declare-fun call!10067 () List!1580)

(assert (=> b!98533 (= e!64220 call!10067)))

(declare-fun b!98534 () Bool)

(assert (=> b!98534 (= c!16744 (and ((_ is Cons!1576) (toList!783 call!9938)) (bvsgt (_1!1181 (h!2170 (toList!783 call!9938))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98534 (= e!64220 e!64219)))

(declare-fun b!98535 () Bool)

(assert (=> b!98535 (= e!64221 (contains!803 lt!49608 (tuple2!2341 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98536 () Bool)

(assert (=> b!98536 (= e!64219 call!10066)))

(declare-fun bm!10063 () Bool)

(assert (=> bm!10063 (= call!10066 call!10067)))

(declare-fun bm!10064 () Bool)

(assert (=> bm!10064 (= call!10067 call!10065)))

(declare-fun b!98537 () Bool)

(assert (=> b!98537 (= e!64223 e!64220)))

(assert (=> b!98537 (= c!16743 (and ((_ is Cons!1576) (toList!783 call!9938)) (= (_1!1181 (h!2170 (toList!783 call!9938))) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98538 () Bool)

(assert (=> b!98538 (= e!64222 (insertStrictlySorted!69 (t!5534 (toList!783 call!9938)) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26395 c!16741) b!98531))

(assert (= (and d!26395 (not c!16741)) b!98537))

(assert (= (and b!98537 c!16743) b!98533))

(assert (= (and b!98537 (not c!16743)) b!98534))

(assert (= (and b!98534 c!16744) b!98532))

(assert (= (and b!98534 (not c!16744)) b!98536))

(assert (= (or b!98532 b!98536) bm!10063))

(assert (= (or b!98533 bm!10063) bm!10064))

(assert (= (or b!98531 bm!10064) bm!10062))

(assert (= (and bm!10062 c!16742) b!98538))

(assert (= (and bm!10062 (not c!16742)) b!98530))

(assert (= (and d!26395 res!49602) b!98529))

(assert (= (and b!98529 res!49601) b!98535))

(declare-fun m!108351 () Bool)

(assert (=> b!98535 m!108351))

(declare-fun m!108353 () Bool)

(assert (=> d!26395 m!108353))

(declare-fun m!108355 () Bool)

(assert (=> d!26395 m!108355))

(declare-fun m!108357 () Bool)

(assert (=> bm!10062 m!108357))

(declare-fun m!108359 () Bool)

(assert (=> b!98538 m!108359))

(declare-fun m!108361 () Bool)

(assert (=> b!98529 m!108361))

(assert (=> d!26139 d!26395))

(declare-fun d!26397 () Bool)

(declare-fun e!64224 () Bool)

(assert (=> d!26397 e!64224))

(declare-fun res!49604 () Bool)

(assert (=> d!26397 (=> (not res!49604) (not e!64224))))

(declare-fun lt!49610 () ListLongMap!1535)

(assert (=> d!26397 (= res!49604 (contains!800 lt!49610 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun lt!49612 () List!1580)

(assert (=> d!26397 (= lt!49610 (ListLongMap!1536 lt!49612))))

(declare-fun lt!49611 () Unit!2937)

(declare-fun lt!49609 () Unit!2937)

(assert (=> d!26397 (= lt!49611 lt!49609)))

(assert (=> d!26397 (= (getValueByKey!150 lt!49612 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26397 (= lt!49609 (lemmaContainsTupThenGetReturnValue!66 lt!49612 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26397 (= lt!49612 (insertStrictlySorted!69 (toList!783 call!9997) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26397 (= (+!135 call!9997 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) lt!49610)))

(declare-fun b!98539 () Bool)

(declare-fun res!49603 () Bool)

(assert (=> b!98539 (=> (not res!49603) (not e!64224))))

(assert (=> b!98539 (= res!49603 (= (getValueByKey!150 (toList!783 lt!49610) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun b!98540 () Bool)

(assert (=> b!98540 (= e!64224 (contains!803 (toList!783 lt!49610) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(assert (= (and d!26397 res!49604) b!98539))

(assert (= (and b!98539 res!49603) b!98540))

(declare-fun m!108363 () Bool)

(assert (=> d!26397 m!108363))

(declare-fun m!108365 () Bool)

(assert (=> d!26397 m!108365))

(declare-fun m!108367 () Bool)

(assert (=> d!26397 m!108367))

(declare-fun m!108369 () Bool)

(assert (=> d!26397 m!108369))

(declare-fun m!108371 () Bool)

(assert (=> b!98539 m!108371))

(declare-fun m!108373 () Bool)

(assert (=> b!98540 m!108373))

(assert (=> b!97938 d!26397))

(assert (=> b!97919 d!26211))

(declare-fun d!26399 () Bool)

(declare-fun e!64225 () Bool)

(assert (=> d!26399 e!64225))

(declare-fun res!49605 () Bool)

(assert (=> d!26399 (=> res!49605 e!64225)))

(declare-fun lt!49614 () Bool)

(assert (=> d!26399 (= res!49605 (not lt!49614))))

(declare-fun lt!49616 () Bool)

(assert (=> d!26399 (= lt!49614 lt!49616)))

(declare-fun lt!49613 () Unit!2937)

(declare-fun e!64226 () Unit!2937)

(assert (=> d!26399 (= lt!49613 e!64226)))

(declare-fun c!16745 () Bool)

(assert (=> d!26399 (= c!16745 lt!49616)))

(assert (=> d!26399 (= lt!49616 (containsKey!154 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))

(assert (=> d!26399 (= (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))) lt!49614)))

(declare-fun b!98541 () Bool)

(declare-fun lt!49615 () Unit!2937)

(assert (=> b!98541 (= e!64226 lt!49615)))

(assert (=> b!98541 (= lt!49615 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))

(assert (=> b!98541 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))

(declare-fun b!98542 () Bool)

(declare-fun Unit!2977 () Unit!2937)

(assert (=> b!98542 (= e!64226 Unit!2977)))

(declare-fun b!98543 () Bool)

(assert (=> b!98543 (= e!64225 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(assert (= (and d!26399 c!16745) b!98541))

(assert (= (and d!26399 (not c!16745)) b!98542))

(assert (= (and d!26399 (not res!49605)) b!98543))

(assert (=> d!26399 m!106861))

(declare-fun m!108375 () Bool)

(assert (=> d!26399 m!108375))

(assert (=> b!98541 m!106861))

(declare-fun m!108377 () Bool)

(assert (=> b!98541 m!108377))

(assert (=> b!98541 m!106861))

(declare-fun m!108379 () Bool)

(assert (=> b!98541 m!108379))

(assert (=> b!98541 m!108379))

(declare-fun m!108381 () Bool)

(assert (=> b!98541 m!108381))

(assert (=> b!98543 m!106861))

(assert (=> b!98543 m!108379))

(assert (=> b!98543 m!108379))

(assert (=> b!98543 m!108381))

(assert (=> b!97923 d!26399))

(declare-fun b!98544 () Bool)

(declare-fun e!64231 () Bool)

(declare-fun call!10072 () Bool)

(assert (=> b!98544 (= e!64231 (not call!10072))))

(declare-fun b!98545 () Bool)

(declare-fun e!64228 () ListLongMap!1535)

(declare-fun call!10073 () ListLongMap!1535)

(assert (=> b!98545 (= e!64228 call!10073)))

(declare-fun bm!10065 () Bool)

(declare-fun lt!49637 () ListLongMap!1535)

(assert (=> bm!10065 (= call!10072 (contains!800 lt!49637 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10066 () Bool)

(declare-fun call!10071 () Bool)

(assert (=> bm!10066 (= call!10071 (contains!800 lt!49637 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98546 () Bool)

(declare-fun res!49612 () Bool)

(declare-fun e!64238 () Bool)

(assert (=> b!98546 (=> (not res!49612) (not e!64238))))

(declare-fun e!64232 () Bool)

(assert (=> b!98546 (= res!49612 e!64232)))

(declare-fun res!49614 () Bool)

(assert (=> b!98546 (=> res!49614 e!64232)))

(declare-fun e!64230 () Bool)

(assert (=> b!98546 (= res!49614 (not e!64230))))

(declare-fun res!49611 () Bool)

(assert (=> b!98546 (=> (not res!49611) (not e!64230))))

(assert (=> b!98546 (= res!49611 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98547 () Bool)

(declare-fun res!49608 () Bool)

(assert (=> b!98547 (=> (not res!49608) (not e!64238))))

(declare-fun e!64236 () Bool)

(assert (=> b!98547 (= res!49608 e!64236)))

(declare-fun c!16748 () Bool)

(assert (=> b!98547 (= c!16748 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10067 () Bool)

(declare-fun call!10074 () ListLongMap!1535)

(assert (=> bm!10067 (= call!10073 call!10074)))

(declare-fun b!98548 () Bool)

(declare-fun e!64229 () ListLongMap!1535)

(assert (=> b!98548 (= e!64229 call!10073)))

(declare-fun b!98549 () Bool)

(declare-fun e!64234 () Bool)

(assert (=> b!98549 (= e!64234 (= (apply!92 lt!49637 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 lt!49004) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98549 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 lt!49004)))))

(assert (=> b!98549 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98550 () Bool)

(declare-fun e!64239 () Bool)

(assert (=> b!98550 (= e!64239 (= (apply!92 lt!49637 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98551 () Bool)

(declare-fun e!64227 () Unit!2937)

(declare-fun lt!49638 () Unit!2937)

(assert (=> b!98551 (= e!64227 lt!49638)))

(declare-fun lt!49621 () ListLongMap!1535)

(assert (=> b!98551 (= lt!49621 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49622 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49622 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49631 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49631 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49634 () Unit!2937)

(assert (=> b!98551 (= lt!49634 (addStillContains!68 lt!49621 lt!49622 (zeroValue!2364 newMap!16) lt!49631))))

(assert (=> b!98551 (contains!800 (+!135 lt!49621 (tuple2!2341 lt!49622 (zeroValue!2364 newMap!16))) lt!49631)))

(declare-fun lt!49620 () Unit!2937)

(assert (=> b!98551 (= lt!49620 lt!49634)))

(declare-fun lt!49633 () ListLongMap!1535)

(assert (=> b!98551 (= lt!49633 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49630 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49630 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49632 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49632 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49623 () Unit!2937)

(assert (=> b!98551 (= lt!49623 (addApplyDifferent!68 lt!49633 lt!49630 (minValue!2364 newMap!16) lt!49632))))

(assert (=> b!98551 (= (apply!92 (+!135 lt!49633 (tuple2!2341 lt!49630 (minValue!2364 newMap!16))) lt!49632) (apply!92 lt!49633 lt!49632))))

(declare-fun lt!49618 () Unit!2937)

(assert (=> b!98551 (= lt!49618 lt!49623)))

(declare-fun lt!49626 () ListLongMap!1535)

(assert (=> b!98551 (= lt!49626 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49625 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49625 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49627 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49627 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49619 () Unit!2937)

(assert (=> b!98551 (= lt!49619 (addApplyDifferent!68 lt!49626 lt!49625 (zeroValue!2364 newMap!16) lt!49627))))

(assert (=> b!98551 (= (apply!92 (+!135 lt!49626 (tuple2!2341 lt!49625 (zeroValue!2364 newMap!16))) lt!49627) (apply!92 lt!49626 lt!49627))))

(declare-fun lt!49635 () Unit!2937)

(assert (=> b!98551 (= lt!49635 lt!49619)))

(declare-fun lt!49629 () ListLongMap!1535)

(assert (=> b!98551 (= lt!49629 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49636 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49636 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49628 () (_ BitVec 64))

(assert (=> b!98551 (= lt!49628 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98551 (= lt!49638 (addApplyDifferent!68 lt!49629 lt!49636 (minValue!2364 newMap!16) lt!49628))))

(assert (=> b!98551 (= (apply!92 (+!135 lt!49629 (tuple2!2341 lt!49636 (minValue!2364 newMap!16))) lt!49628) (apply!92 lt!49629 lt!49628))))

(declare-fun b!98552 () Bool)

(declare-fun e!64237 () ListLongMap!1535)

(assert (=> b!98552 (= e!64237 (+!135 call!10074 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!98553 () Bool)

(declare-fun call!10070 () ListLongMap!1535)

(assert (=> b!98553 (= e!64229 call!10070)))

(declare-fun b!98554 () Bool)

(declare-fun e!64233 () Bool)

(assert (=> b!98554 (= e!64233 (= (apply!92 lt!49637 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun bm!10069 () Bool)

(declare-fun call!10069 () ListLongMap!1535)

(declare-fun c!16749 () Bool)

(declare-fun call!10068 () ListLongMap!1535)

(declare-fun c!16747 () Bool)

(assert (=> bm!10069 (= call!10074 (+!135 (ite c!16749 call!10068 (ite c!16747 call!10069 call!10070)) (ite (or c!16749 c!16747) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98555 () Bool)

(assert (=> b!98555 (= e!64231 e!64239)))

(declare-fun res!49609 () Bool)

(assert (=> b!98555 (= res!49609 call!10072)))

(assert (=> b!98555 (=> (not res!49609) (not e!64239))))

(declare-fun b!98556 () Bool)

(declare-fun Unit!2978 () Unit!2937)

(assert (=> b!98556 (= e!64227 Unit!2978)))

(declare-fun bm!10070 () Bool)

(assert (=> bm!10070 (= call!10069 call!10068)))

(declare-fun b!98557 () Bool)

(assert (=> b!98557 (= e!64237 e!64228)))

(assert (=> b!98557 (= c!16747 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98558 () Bool)

(assert (=> b!98558 (= e!64236 (not call!10071))))

(declare-fun b!98559 () Bool)

(declare-fun c!16751 () Bool)

(assert (=> b!98559 (= c!16751 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98559 (= e!64228 e!64229)))

(declare-fun b!98560 () Bool)

(assert (=> b!98560 (= e!64236 e!64233)))

(declare-fun res!49613 () Bool)

(assert (=> b!98560 (= res!49613 call!10071)))

(assert (=> b!98560 (=> (not res!49613) (not e!64233))))

(declare-fun b!98561 () Bool)

(assert (=> b!98561 (= e!64238 e!64231)))

(declare-fun c!16750 () Bool)

(assert (=> b!98561 (= c!16750 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98562 () Bool)

(assert (=> b!98562 (= e!64230 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10068 () Bool)

(assert (=> bm!10068 (= call!10068 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26401 () Bool)

(assert (=> d!26401 e!64238))

(declare-fun res!49610 () Bool)

(assert (=> d!26401 (=> (not res!49610) (not e!64238))))

(assert (=> d!26401 (= res!49610 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49624 () ListLongMap!1535)

(assert (=> d!26401 (= lt!49637 lt!49624)))

(declare-fun lt!49617 () Unit!2937)

(assert (=> d!26401 (= lt!49617 e!64227)))

(declare-fun c!16746 () Bool)

(declare-fun e!64235 () Bool)

(assert (=> d!26401 (= c!16746 e!64235)))

(declare-fun res!49607 () Bool)

(assert (=> d!26401 (=> (not res!49607) (not e!64235))))

(assert (=> d!26401 (= res!49607 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26401 (= lt!49624 e!64237)))

(assert (=> d!26401 (= c!16749 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26401 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26401 (= (getCurrentListMap!474 (_keys!4171 newMap!16) lt!49004 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49637)))

(declare-fun b!98563 () Bool)

(assert (=> b!98563 (= e!64235 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10071 () Bool)

(assert (=> bm!10071 (= call!10070 call!10069)))

(declare-fun b!98564 () Bool)

(assert (=> b!98564 (= e!64232 e!64234)))

(declare-fun res!49606 () Bool)

(assert (=> b!98564 (=> (not res!49606) (not e!64234))))

(assert (=> b!98564 (= res!49606 (contains!800 lt!49637 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98564 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26401 c!16749) b!98552))

(assert (= (and d!26401 (not c!16749)) b!98557))

(assert (= (and b!98557 c!16747) b!98545))

(assert (= (and b!98557 (not c!16747)) b!98559))

(assert (= (and b!98559 c!16751) b!98548))

(assert (= (and b!98559 (not c!16751)) b!98553))

(assert (= (or b!98548 b!98553) bm!10071))

(assert (= (or b!98545 bm!10071) bm!10070))

(assert (= (or b!98545 b!98548) bm!10067))

(assert (= (or b!98552 bm!10070) bm!10068))

(assert (= (or b!98552 bm!10067) bm!10069))

(assert (= (and d!26401 res!49607) b!98563))

(assert (= (and d!26401 c!16746) b!98551))

(assert (= (and d!26401 (not c!16746)) b!98556))

(assert (= (and d!26401 res!49610) b!98546))

(assert (= (and b!98546 res!49611) b!98562))

(assert (= (and b!98546 (not res!49614)) b!98564))

(assert (= (and b!98564 res!49606) b!98549))

(assert (= (and b!98546 res!49612) b!98547))

(assert (= (and b!98547 c!16748) b!98560))

(assert (= (and b!98547 (not c!16748)) b!98558))

(assert (= (and b!98560 res!49613) b!98554))

(assert (= (or b!98560 b!98558) bm!10066))

(assert (= (and b!98547 res!49608) b!98561))

(assert (= (and b!98561 c!16750) b!98555))

(assert (= (and b!98561 (not c!16750)) b!98544))

(assert (= (and b!98555 res!49609) b!98550))

(assert (= (or b!98555 b!98544) bm!10065))

(declare-fun b_lambda!4391 () Bool)

(assert (=> (not b_lambda!4391) (not b!98549)))

(assert (=> b!98549 t!5542))

(declare-fun b_and!6075 () Bool)

(assert (= b_and!6071 (and (=> t!5542 result!3275) b_and!6075)))

(assert (=> b!98549 t!5544))

(declare-fun b_and!6077 () Bool)

(assert (= b_and!6073 (and (=> t!5544 result!3277) b_and!6077)))

(declare-fun m!108383 () Bool)

(assert (=> b!98550 m!108383))

(declare-fun m!108385 () Bool)

(assert (=> bm!10066 m!108385))

(assert (=> b!98564 m!106891))

(assert (=> b!98564 m!106891))

(declare-fun m!108387 () Bool)

(assert (=> b!98564 m!108387))

(assert (=> d!26401 m!106895))

(declare-fun m!108389 () Bool)

(assert (=> b!98554 m!108389))

(declare-fun m!108391 () Bool)

(assert (=> bm!10069 m!108391))

(assert (=> b!98563 m!106891))

(assert (=> b!98563 m!106891))

(assert (=> b!98563 m!106901))

(declare-fun m!108393 () Bool)

(assert (=> b!98552 m!108393))

(assert (=> b!98562 m!106891))

(assert (=> b!98562 m!106891))

(assert (=> b!98562 m!106901))

(declare-fun m!108395 () Bool)

(assert (=> b!98549 m!108395))

(assert (=> b!98549 m!106907))

(declare-fun m!108397 () Bool)

(assert (=> b!98549 m!108397))

(assert (=> b!98549 m!106891))

(declare-fun m!108399 () Bool)

(assert (=> b!98549 m!108399))

(assert (=> b!98549 m!106891))

(assert (=> b!98549 m!108395))

(assert (=> b!98549 m!106907))

(declare-fun m!108401 () Bool)

(assert (=> b!98551 m!108401))

(declare-fun m!108403 () Bool)

(assert (=> b!98551 m!108403))

(declare-fun m!108405 () Bool)

(assert (=> b!98551 m!108405))

(declare-fun m!108407 () Bool)

(assert (=> b!98551 m!108407))

(declare-fun m!108409 () Bool)

(assert (=> b!98551 m!108409))

(declare-fun m!108411 () Bool)

(assert (=> b!98551 m!108411))

(declare-fun m!108413 () Bool)

(assert (=> b!98551 m!108413))

(declare-fun m!108415 () Bool)

(assert (=> b!98551 m!108415))

(declare-fun m!108417 () Bool)

(assert (=> b!98551 m!108417))

(assert (=> b!98551 m!106891))

(assert (=> b!98551 m!108415))

(declare-fun m!108419 () Bool)

(assert (=> b!98551 m!108419))

(assert (=> b!98551 m!108403))

(declare-fun m!108421 () Bool)

(assert (=> b!98551 m!108421))

(declare-fun m!108423 () Bool)

(assert (=> b!98551 m!108423))

(declare-fun m!108425 () Bool)

(assert (=> b!98551 m!108425))

(declare-fun m!108427 () Bool)

(assert (=> b!98551 m!108427))

(assert (=> b!98551 m!108409))

(assert (=> b!98551 m!108401))

(declare-fun m!108429 () Bool)

(assert (=> b!98551 m!108429))

(declare-fun m!108431 () Bool)

(assert (=> b!98551 m!108431))

(assert (=> bm!10068 m!108419))

(declare-fun m!108433 () Bool)

(assert (=> bm!10065 m!108433))

(assert (=> b!97923 d!26401))

(declare-fun d!26403 () Bool)

(declare-fun e!64240 () Bool)

(assert (=> d!26403 e!64240))

(declare-fun res!49616 () Bool)

(assert (=> d!26403 (=> (not res!49616) (not e!64240))))

(declare-fun lt!49640 () ListLongMap!1535)

(assert (=> d!26403 (= res!49616 (contains!800 lt!49640 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49642 () List!1580)

(assert (=> d!26403 (= lt!49640 (ListLongMap!1536 lt!49642))))

(declare-fun lt!49641 () Unit!2937)

(declare-fun lt!49639 () Unit!2937)

(assert (=> d!26403 (= lt!49641 lt!49639)))

(assert (=> d!26403 (= (getValueByKey!150 lt!49642 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26403 (= lt!49639 (lemmaContainsTupThenGetReturnValue!66 lt!49642 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26403 (= lt!49642 (insertStrictlySorted!69 (toList!783 call!9968) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26403 (= (+!135 call!9968 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49640)))

(declare-fun b!98565 () Bool)

(declare-fun res!49615 () Bool)

(assert (=> b!98565 (=> (not res!49615) (not e!64240))))

(assert (=> b!98565 (= res!49615 (= (getValueByKey!150 (toList!783 lt!49640) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!98566 () Bool)

(assert (=> b!98566 (= e!64240 (contains!803 (toList!783 lt!49640) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16552 (ite c!16553 (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26403 res!49616) b!98565))

(assert (= (and b!98565 res!49615) b!98566))

(declare-fun m!108435 () Bool)

(assert (=> d!26403 m!108435))

(declare-fun m!108437 () Bool)

(assert (=> d!26403 m!108437))

(declare-fun m!108439 () Bool)

(assert (=> d!26403 m!108439))

(declare-fun m!108441 () Bool)

(assert (=> d!26403 m!108441))

(declare-fun m!108443 () Bool)

(assert (=> b!98565 m!108443))

(declare-fun m!108445 () Bool)

(assert (=> b!98566 m!108445))

(assert (=> b!97798 d!26403))

(declare-fun d!26405 () Bool)

(assert (=> d!26405 (= (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!357 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4081 () Bool)

(assert (= bs!4081 d!26405))

(assert (=> bs!4081 m!107291))

(declare-fun m!108447 () Bool)

(assert (=> bs!4081 m!108447))

(assert (=> b!98129 d!26405))

(assert (=> b!98129 d!26379))

(declare-fun bm!10072 () Bool)

(declare-fun call!10075 () (_ BitVec 32))

(assert (=> bm!10072 (= call!10075 (arrayCountValidKeys!0 (_keys!4171 (_2!1180 lt!48997)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(declare-fun b!98567 () Bool)

(declare-fun e!64241 () (_ BitVec 32))

(assert (=> b!98567 (= e!64241 #b00000000000000000000000000000000)))

(declare-fun b!98568 () Bool)

(declare-fun e!64242 () (_ BitVec 32))

(assert (=> b!98568 (= e!64241 e!64242)))

(declare-fun c!16753 () Bool)

(assert (=> b!98568 (= c!16753 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun d!26407 () Bool)

(declare-fun lt!49643 () (_ BitVec 32))

(assert (=> d!26407 (and (bvsge lt!49643 #b00000000000000000000000000000000) (bvsle lt!49643 (bvsub (size!2265 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(assert (=> d!26407 (= lt!49643 e!64241)))

(declare-fun c!16752 () Bool)

(assert (=> d!26407 (= c!16752 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (=> d!26407 (and (bvsle #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2265 (_keys!4171 (_2!1180 lt!48997))) (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (=> d!26407 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1180 lt!48997)) #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))) lt!49643)))

(declare-fun b!98569 () Bool)

(assert (=> b!98569 (= e!64242 call!10075)))

(declare-fun b!98570 () Bool)

(assert (=> b!98570 (= e!64242 (bvadd #b00000000000000000000000000000001 call!10075))))

(assert (= (and d!26407 c!16752) b!98567))

(assert (= (and d!26407 (not c!16752)) b!98568))

(assert (= (and b!98568 c!16753) b!98570))

(assert (= (and b!98568 (not c!16753)) b!98569))

(assert (= (or b!98570 b!98569) bm!10072))

(declare-fun m!108449 () Bool)

(assert (=> bm!10072 m!108449))

(assert (=> b!98568 m!108211))

(assert (=> b!98568 m!108211))

(assert (=> b!98568 m!108221))

(assert (=> b!97814 d!26407))

(declare-fun bm!10073 () Bool)

(declare-fun call!10076 () (_ BitVec 32))

(assert (=> bm!10073 (= call!10076 (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98571 () Bool)

(declare-fun e!64243 () (_ BitVec 32))

(assert (=> b!98571 (= e!64243 #b00000000000000000000000000000000)))

(declare-fun b!98572 () Bool)

(declare-fun e!64244 () (_ BitVec 32))

(assert (=> b!98572 (= e!64243 e!64244)))

(declare-fun c!16755 () Bool)

(assert (=> b!98572 (= c!16755 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!26409 () Bool)

(declare-fun lt!49644 () (_ BitVec 32))

(assert (=> d!26409 (and (bvsge lt!49644 #b00000000000000000000000000000000) (bvsle lt!49644 (bvsub (size!2265 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!26409 (= lt!49644 e!64243)))

(declare-fun c!16754 () Bool)

(assert (=> d!26409 (= c!16754 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26409 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2265 (_keys!4171 newMap!16)) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26409 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))) lt!49644)))

(declare-fun b!98573 () Bool)

(assert (=> b!98573 (= e!64244 call!10076)))

(declare-fun b!98574 () Bool)

(assert (=> b!98574 (= e!64244 (bvadd #b00000000000000000000000000000001 call!10076))))

(assert (= (and d!26409 c!16754) b!98571))

(assert (= (and d!26409 (not c!16754)) b!98572))

(assert (= (and b!98572 c!16755) b!98574))

(assert (= (and b!98572 (not c!16755)) b!98573))

(assert (= (or b!98574 b!98573) bm!10073))

(declare-fun m!108451 () Bool)

(assert (=> bm!10073 m!108451))

(assert (=> b!98572 m!108267))

(assert (=> b!98572 m!108267))

(assert (=> b!98572 m!108269))

(assert (=> bm!10002 d!26409))

(declare-fun d!26411 () Bool)

(assert (=> d!26411 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(declare-fun lt!49645 () Unit!2937)

(assert (=> d!26411 (= lt!49645 (choose!596 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(declare-fun e!64245 () Bool)

(assert (=> d!26411 e!64245))

(declare-fun res!49617 () Bool)

(assert (=> d!26411 (=> (not res!49617) (not e!64245))))

(assert (=> d!26411 (= res!49617 (isStrictlySorted!304 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26411 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910) lt!49645)))

(declare-fun b!98575 () Bool)

(assert (=> b!98575 (= e!64245 (containsKey!154 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))

(assert (= (and d!26411 res!49617) b!98575))

(assert (=> d!26411 m!107217))

(assert (=> d!26411 m!107217))

(assert (=> d!26411 m!107219))

(declare-fun m!108453 () Bool)

(assert (=> d!26411 m!108453))

(declare-fun m!108455 () Bool)

(assert (=> d!26411 m!108455))

(assert (=> b!98575 m!107213))

(assert (=> b!97963 d!26411))

(declare-fun d!26413 () Bool)

(assert (=> d!26413 (= (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910)) (not (isEmpty!357 (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910))))))

(declare-fun bs!4082 () Bool)

(assert (= bs!4082 d!26413))

(assert (=> bs!4082 m!107217))

(declare-fun m!108457 () Bool)

(assert (=> bs!4082 m!108457))

(assert (=> b!97963 d!26413))

(declare-fun b!98578 () Bool)

(declare-fun e!64247 () Option!156)

(assert (=> b!98578 (= e!64247 (getValueByKey!150 (t!5534 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!48910))))

(declare-fun e!64246 () Option!156)

(declare-fun b!98576 () Bool)

(assert (=> b!98576 (= e!64246 (Some!155 (_2!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun b!98579 () Bool)

(assert (=> b!98579 (= e!64247 None!154)))

(declare-fun b!98577 () Bool)

(assert (=> b!98577 (= e!64246 e!64247)))

(declare-fun c!16757 () Bool)

(assert (=> b!98577 (= c!16757 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (not (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48910))))))

(declare-fun c!16756 () Bool)

(declare-fun d!26415 () Bool)

(assert (=> d!26415 (= c!16756 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48910)))))

(assert (=> d!26415 (= (getValueByKey!150 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910) e!64246)))

(assert (= (and d!26415 c!16756) b!98576))

(assert (= (and d!26415 (not c!16756)) b!98577))

(assert (= (and b!98577 c!16757) b!98578))

(assert (= (and b!98577 (not c!16757)) b!98579))

(declare-fun m!108459 () Bool)

(assert (=> b!98578 m!108459))

(assert (=> b!97963 d!26415))

(declare-fun b!98582 () Bool)

(declare-fun e!64249 () Option!156)

(assert (=> b!98582 (= e!64249 (getValueByKey!150 (t!5534 (t!5534 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98580 () Bool)

(declare-fun e!64248 () Option!156)

(assert (=> b!98580 (= e!64248 (Some!155 (_2!1181 (h!2170 (t!5534 (toList!783 lt!48820))))))))

(declare-fun b!98583 () Bool)

(assert (=> b!98583 (= e!64249 None!154)))

(declare-fun b!98581 () Bool)

(assert (=> b!98581 (= e!64248 e!64249)))

(declare-fun c!16759 () Bool)

(assert (=> b!98581 (= c!16759 (and ((_ is Cons!1576) (t!5534 (toList!783 lt!48820))) (not (= (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun c!16758 () Bool)

(declare-fun d!26417 () Bool)

(assert (=> d!26417 (= c!16758 (and ((_ is Cons!1576) (t!5534 (toList!783 lt!48820))) (= (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26417 (= (getValueByKey!150 (t!5534 (toList!783 lt!48820)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64248)))

(assert (= (and d!26417 c!16758) b!98580))

(assert (= (and d!26417 (not c!16758)) b!98581))

(assert (= (and b!98581 c!16759) b!98582))

(assert (= (and b!98581 (not c!16759)) b!98583))

(assert (=> b!98582 m!106647))

(declare-fun m!108461 () Bool)

(assert (=> b!98582 m!108461))

(assert (=> b!98106 d!26417))

(declare-fun e!64262 () SeekEntryResult!253)

(declare-fun b!98602 () Bool)

(assert (=> b!98602 (= e!64262 (Intermediate!253 true (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun e!64261 () SeekEntryResult!253)

(declare-fun b!98603 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!98603 (= e!64261 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000 (mask!6578 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun d!26419 () Bool)

(declare-fun e!64264 () Bool)

(assert (=> d!26419 e!64264))

(declare-fun c!16766 () Bool)

(declare-fun lt!49651 () SeekEntryResult!253)

(assert (=> d!26419 (= c!16766 (and ((_ is Intermediate!253) lt!49651) (undefined!1065 lt!49651)))))

(assert (=> d!26419 (= lt!49651 e!64262)))

(declare-fun c!16768 () Bool)

(assert (=> d!26419 (= c!16768 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!49650 () (_ BitVec 64))

(assert (=> d!26419 (= lt!49650 (select (arr!2015 (_keys!4171 newMap!16)) (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16))))))

(assert (=> d!26419 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26419 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49651)))

(declare-fun b!98604 () Bool)

(assert (=> b!98604 (and (bvsge (index!3157 lt!49651) #b00000000000000000000000000000000) (bvslt (index!3157 lt!49651) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49626 () Bool)

(assert (=> b!98604 (= res!49626 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49651)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64263 () Bool)

(assert (=> b!98604 (=> res!49626 e!64263)))

(declare-fun b!98605 () Bool)

(assert (=> b!98605 (and (bvsge (index!3157 lt!49651) #b00000000000000000000000000000000) (bvslt (index!3157 lt!49651) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun res!49624 () Bool)

(assert (=> b!98605 (= res!49624 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49651)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> b!98605 (=> res!49624 e!64263)))

(declare-fun e!64260 () Bool)

(assert (=> b!98605 (= e!64260 e!64263)))

(declare-fun b!98606 () Bool)

(assert (=> b!98606 (= e!64264 (bvsge (x!12959 lt!49651) #b01111111111111111111111111111110))))

(declare-fun b!98607 () Bool)

(assert (=> b!98607 (= e!64262 e!64261)))

(declare-fun c!16767 () Bool)

(assert (=> b!98607 (= c!16767 (or (= lt!49650 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (= (bvadd lt!49650 lt!49650) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98608 () Bool)

(assert (=> b!98608 (= e!64264 e!64260)))

(declare-fun res!49625 () Bool)

(assert (=> b!98608 (= res!49625 (and ((_ is Intermediate!253) lt!49651) (not (undefined!1065 lt!49651)) (bvslt (x!12959 lt!49651) #b01111111111111111111111111111110) (bvsge (x!12959 lt!49651) #b00000000000000000000000000000000) (bvsge (x!12959 lt!49651) #b00000000000000000000000000000000)))))

(assert (=> b!98608 (=> (not res!49625) (not e!64260))))

(declare-fun b!98609 () Bool)

(assert (=> b!98609 (and (bvsge (index!3157 lt!49651) #b00000000000000000000000000000000) (bvslt (index!3157 lt!49651) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> b!98609 (= e!64263 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49651)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98610 () Bool)

(assert (=> b!98610 (= e!64261 (Intermediate!253 false (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!26419 c!16768) b!98602))

(assert (= (and d!26419 (not c!16768)) b!98607))

(assert (= (and b!98607 c!16767) b!98610))

(assert (= (and b!98607 (not c!16767)) b!98603))

(assert (= (and d!26419 c!16766) b!98606))

(assert (= (and d!26419 (not c!16766)) b!98608))

(assert (= (and b!98608 res!49625) b!98605))

(assert (= (and b!98605 (not res!49624)) b!98604))

(assert (= (and b!98604 (not res!49626)) b!98609))

(assert (=> d!26419 m!107313))

(declare-fun m!108463 () Bool)

(assert (=> d!26419 m!108463))

(assert (=> d!26419 m!106895))

(assert (=> b!98603 m!107313))

(declare-fun m!108465 () Bool)

(assert (=> b!98603 m!108465))

(assert (=> b!98603 m!108465))

(assert (=> b!98603 m!106647))

(declare-fun m!108467 () Bool)

(assert (=> b!98603 m!108467))

(declare-fun m!108469 () Bool)

(assert (=> b!98605 m!108469))

(assert (=> b!98604 m!108469))

(assert (=> b!98609 m!108469))

(assert (=> d!26113 d!26419))

(declare-fun d!26421 () Bool)

(declare-fun lt!49657 () (_ BitVec 32))

(declare-fun lt!49656 () (_ BitVec 32))

(assert (=> d!26421 (= lt!49657 (bvmul (bvxor lt!49656 (bvlshr lt!49656 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26421 (= lt!49656 ((_ extract 31 0) (bvand (bvxor (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvlshr (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26421 (and (bvsge (mask!6578 newMap!16) #b00000000000000000000000000000000) (let ((res!49627 (let ((h!2173 ((_ extract 31 0) (bvand (bvxor (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvlshr (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13062 (bvmul (bvxor h!2173 (bvlshr h!2173 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13062 (bvlshr x!13062 #b00000000000000000000000000001101)) (mask!6578 newMap!16)))))) (and (bvslt res!49627 (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001)) (bvsge res!49627 #b00000000000000000000000000000000))))))

(assert (=> d!26421 (= (toIndex!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (mask!6578 newMap!16)) (bvand (bvxor lt!49657 (bvlshr lt!49657 #b00000000000000000000000000001101)) (mask!6578 newMap!16)))))

(assert (=> d!26113 d!26421))

(assert (=> d!26113 d!26209))

(declare-fun d!26423 () Bool)

(assert (=> d!26423 (= (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48906)) (v!2804 (getValueByKey!150 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48906)))))

(assert (=> d!26077 d!26423))

(declare-fun e!64266 () Option!156)

(declare-fun b!98613 () Bool)

(assert (=> b!98613 (= e!64266 (getValueByKey!150 (t!5534 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!48906))))

(declare-fun b!98611 () Bool)

(declare-fun e!64265 () Option!156)

(assert (=> b!98611 (= e!64265 (Some!155 (_2!1181 (h!2170 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun b!98614 () Bool)

(assert (=> b!98614 (= e!64266 None!154)))

(declare-fun b!98612 () Bool)

(assert (=> b!98612 (= e!64265 e!64266)))

(declare-fun c!16770 () Bool)

(assert (=> b!98612 (= c!16770 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (not (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48906))))))

(declare-fun d!26425 () Bool)

(declare-fun c!16769 () Bool)

(assert (=> d!26425 (= c!16769 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48906)))))

(assert (=> d!26425 (= (getValueByKey!150 (toList!783 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48906) e!64265)))

(assert (= (and d!26425 c!16769) b!98611))

(assert (= (and d!26425 (not c!16769)) b!98612))

(assert (= (and b!98612 c!16770) b!98613))

(assert (= (and b!98612 (not c!16770)) b!98614))

(declare-fun m!108471 () Bool)

(assert (=> b!98613 m!108471))

(assert (=> d!26077 d!26425))

(declare-fun d!26427 () Bool)

(assert (=> d!26427 (isDefined!103 (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun lt!49658 () Unit!2937)

(assert (=> d!26427 (= lt!49658 (choose!596 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun e!64267 () Bool)

(assert (=> d!26427 e!64267))

(declare-fun res!49628 () Bool)

(assert (=> d!26427 (=> (not res!49628) (not e!64267))))

(assert (=> d!26427 (= res!49628 (isStrictlySorted!304 (toList!783 call!9954)))))

(assert (=> d!26427 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49658)))

(declare-fun b!98615 () Bool)

(assert (=> b!98615 (= e!64267 (containsKey!154 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26427 res!49628) b!98615))

(assert (=> d!26427 m!106647))

(assert (=> d!26427 m!107439))

(assert (=> d!26427 m!107439))

(assert (=> d!26427 m!107441))

(assert (=> d!26427 m!106647))

(declare-fun m!108473 () Bool)

(assert (=> d!26427 m!108473))

(declare-fun m!108475 () Bool)

(assert (=> d!26427 m!108475))

(assert (=> b!98615 m!106647))

(assert (=> b!98615 m!107435))

(assert (=> b!98130 d!26427))

(declare-fun d!26429 () Bool)

(assert (=> d!26429 (= (isDefined!103 (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) (not (isEmpty!357 (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun bs!4083 () Bool)

(assert (= bs!4083 d!26429))

(assert (=> bs!4083 m!107439))

(declare-fun m!108477 () Bool)

(assert (=> bs!4083 m!108477))

(assert (=> b!98130 d!26429))

(declare-fun b!98618 () Bool)

(declare-fun e!64269 () Option!156)

(assert (=> b!98618 (= e!64269 (getValueByKey!150 (t!5534 (toList!783 call!9954)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98616 () Bool)

(declare-fun e!64268 () Option!156)

(assert (=> b!98616 (= e!64268 (Some!155 (_2!1181 (h!2170 (toList!783 call!9954)))))))

(declare-fun b!98619 () Bool)

(assert (=> b!98619 (= e!64269 None!154)))

(declare-fun b!98617 () Bool)

(assert (=> b!98617 (= e!64268 e!64269)))

(declare-fun c!16772 () Bool)

(assert (=> b!98617 (= c!16772 (and ((_ is Cons!1576) (toList!783 call!9954)) (not (= (_1!1181 (h!2170 (toList!783 call!9954))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun c!16771 () Bool)

(declare-fun d!26431 () Bool)

(assert (=> d!26431 (= c!16771 (and ((_ is Cons!1576) (toList!783 call!9954)) (= (_1!1181 (h!2170 (toList!783 call!9954))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26431 (= (getValueByKey!150 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64268)))

(assert (= (and d!26431 c!16771) b!98616))

(assert (= (and d!26431 (not c!16771)) b!98617))

(assert (= (and b!98617 c!16772) b!98618))

(assert (= (and b!98617 (not c!16772)) b!98619))

(assert (=> b!98618 m!106647))

(declare-fun m!108479 () Bool)

(assert (=> b!98618 m!108479))

(assert (=> b!98130 d!26431))

(declare-fun d!26433 () Bool)

(assert (=> d!26433 (= (inRange!0 (index!3156 lt!49281) (mask!6578 newMap!16)) (and (bvsge (index!3156 lt!49281) #b00000000000000000000000000000000) (bvslt (index!3156 lt!49281) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!98062 d!26433))

(declare-fun d!26435 () Bool)

(assert (=> d!26435 (= (get!1282 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2799 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98009 d!26435))

(declare-fun d!26437 () Bool)

(declare-fun e!64270 () Bool)

(assert (=> d!26437 e!64270))

(declare-fun res!49629 () Bool)

(assert (=> d!26437 (=> res!49629 e!64270)))

(declare-fun lt!49660 () Bool)

(assert (=> d!26437 (= res!49629 (not lt!49660))))

(declare-fun lt!49662 () Bool)

(assert (=> d!26437 (= lt!49660 lt!49662)))

(declare-fun lt!49659 () Unit!2937)

(declare-fun e!64271 () Unit!2937)

(assert (=> d!26437 (= lt!49659 e!64271)))

(declare-fun c!16773 () Bool)

(assert (=> d!26437 (= c!16773 lt!49662)))

(assert (=> d!26437 (= lt!49662 (containsKey!154 (toList!783 lt!49194) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26437 (= (contains!800 lt!49194 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49660)))

(declare-fun b!98620 () Bool)

(declare-fun lt!49661 () Unit!2937)

(assert (=> b!98620 (= e!64271 lt!49661)))

(assert (=> b!98620 (= lt!49661 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49194) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98620 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98621 () Bool)

(declare-fun Unit!2979 () Unit!2937)

(assert (=> b!98621 (= e!64271 Unit!2979)))

(declare-fun b!98622 () Bool)

(assert (=> b!98622 (= e!64270 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26437 c!16773) b!98620))

(assert (= (and d!26437 (not c!16773)) b!98621))

(assert (= (and d!26437 (not res!49629)) b!98622))

(declare-fun m!108481 () Bool)

(assert (=> d!26437 m!108481))

(declare-fun m!108483 () Bool)

(assert (=> b!98620 m!108483))

(declare-fun m!108485 () Bool)

(assert (=> b!98620 m!108485))

(assert (=> b!98620 m!108485))

(declare-fun m!108487 () Bool)

(assert (=> b!98620 m!108487))

(assert (=> b!98622 m!108485))

(assert (=> b!98622 m!108485))

(assert (=> b!98622 m!108487))

(assert (=> bm!9989 d!26437))

(declare-fun d!26439 () Bool)

(declare-fun res!49633 () Bool)

(declare-fun e!64272 () Bool)

(assert (=> d!26439 (=> (not res!49633) (not e!64272))))

(assert (=> d!26439 (= res!49633 (validMask!0 (mask!6578 (_2!1180 lt!48997))))))

(assert (=> d!26439 (= (simpleValid!68 (_2!1180 lt!48997)) e!64272)))

(declare-fun b!98625 () Bool)

(declare-fun res!49631 () Bool)

(assert (=> b!98625 (=> (not res!49631) (not e!64272))))

(assert (=> b!98625 (= res!49631 (= (size!2269 (_2!1180 lt!48997)) (bvadd (_size!475 (_2!1180 lt!48997)) (bvsdiv (bvadd (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98623 () Bool)

(declare-fun res!49632 () Bool)

(assert (=> b!98623 (=> (not res!49632) (not e!64272))))

(assert (=> b!98623 (= res!49632 (and (= (size!2266 (_values!2464 (_2!1180 lt!48997))) (bvadd (mask!6578 (_2!1180 lt!48997)) #b00000000000000000000000000000001)) (= (size!2265 (_keys!4171 (_2!1180 lt!48997))) (size!2266 (_values!2464 (_2!1180 lt!48997)))) (bvsge (_size!475 (_2!1180 lt!48997)) #b00000000000000000000000000000000) (bvsle (_size!475 (_2!1180 lt!48997)) (bvadd (mask!6578 (_2!1180 lt!48997)) #b00000000000000000000000000000001))))))

(declare-fun b!98626 () Bool)

(assert (=> b!98626 (= e!64272 (and (bvsge (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 (_2!1180 lt!48997)) #b00000000000000000000000000000011) (bvsge (_vacant!475 (_2!1180 lt!48997)) #b00000000000000000000000000000000)))))

(declare-fun b!98624 () Bool)

(declare-fun res!49630 () Bool)

(assert (=> b!98624 (=> (not res!49630) (not e!64272))))

(assert (=> b!98624 (= res!49630 (bvsge (size!2269 (_2!1180 lt!48997)) (_size!475 (_2!1180 lt!48997))))))

(assert (= (and d!26439 res!49633) b!98623))

(assert (= (and b!98623 res!49632) b!98624))

(assert (= (and b!98624 res!49630) b!98625))

(assert (= (and b!98625 res!49631) b!98626))

(assert (=> d!26439 m!108215))

(declare-fun m!108489 () Bool)

(assert (=> b!98625 m!108489))

(assert (=> b!98624 m!108489))

(assert (=> d!26039 d!26439))

(declare-fun d!26441 () Bool)

(assert (=> d!26441 (= (apply!92 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48907) (apply!92 lt!48908 lt!48907))))

(assert (=> d!26441 true))

(declare-fun _$34!866 () Unit!2937)

(assert (=> d!26441 (= (choose!591 lt!48908 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48907) _$34!866)))

(declare-fun bs!4084 () Bool)

(assert (= bs!4084 d!26441))

(assert (=> bs!4084 m!106791))

(assert (=> bs!4084 m!106791))

(assert (=> bs!4084 m!106793))

(assert (=> bs!4084 m!106805))

(assert (=> d!26091 d!26441))

(assert (=> d!26091 d!26073))

(assert (=> d!26091 d!26097))

(declare-fun d!26443 () Bool)

(declare-fun e!64273 () Bool)

(assert (=> d!26443 e!64273))

(declare-fun res!49634 () Bool)

(assert (=> d!26443 (=> res!49634 e!64273)))

(declare-fun lt!49664 () Bool)

(assert (=> d!26443 (= res!49634 (not lt!49664))))

(declare-fun lt!49666 () Bool)

(assert (=> d!26443 (= lt!49664 lt!49666)))

(declare-fun lt!49663 () Unit!2937)

(declare-fun e!64274 () Unit!2937)

(assert (=> d!26443 (= lt!49663 e!64274)))

(declare-fun c!16774 () Bool)

(assert (=> d!26443 (= c!16774 lt!49666)))

(assert (=> d!26443 (= lt!49666 (containsKey!154 (toList!783 lt!48908) lt!48907))))

(assert (=> d!26443 (= (contains!800 lt!48908 lt!48907) lt!49664)))

(declare-fun b!98628 () Bool)

(declare-fun lt!49665 () Unit!2937)

(assert (=> b!98628 (= e!64274 lt!49665)))

(assert (=> b!98628 (= lt!49665 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48908) lt!48907))))

(assert (=> b!98628 (isDefined!103 (getValueByKey!150 (toList!783 lt!48908) lt!48907))))

(declare-fun b!98629 () Bool)

(declare-fun Unit!2980 () Unit!2937)

(assert (=> b!98629 (= e!64274 Unit!2980)))

(declare-fun b!98630 () Bool)

(assert (=> b!98630 (= e!64273 (isDefined!103 (getValueByKey!150 (toList!783 lt!48908) lt!48907)))))

(assert (= (and d!26443 c!16774) b!98628))

(assert (= (and d!26443 (not c!16774)) b!98629))

(assert (= (and d!26443 (not res!49634)) b!98630))

(declare-fun m!108491 () Bool)

(assert (=> d!26443 m!108491))

(declare-fun m!108493 () Bool)

(assert (=> b!98628 m!108493))

(assert (=> b!98628 m!107177))

(assert (=> b!98628 m!107177))

(declare-fun m!108495 () Bool)

(assert (=> b!98628 m!108495))

(assert (=> b!98630 m!107177))

(assert (=> b!98630 m!107177))

(assert (=> b!98630 m!108495))

(assert (=> d!26091 d!26443))

(assert (=> d!26091 d!26087))

(assert (=> b!97948 d!26211))

(declare-fun b!98631 () Bool)

(declare-fun e!64278 () Bool)

(declare-fun e!64277 () Bool)

(assert (=> b!98631 (= e!64278 e!64277)))

(declare-fun c!16775 () Bool)

(assert (=> b!98631 (= c!16775 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10074 () Bool)

(declare-fun call!10077 () Bool)

(assert (=> bm!10074 (= call!10077 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16775 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000) Nil!1578) Nil!1578)))))

(declare-fun b!98632 () Bool)

(declare-fun e!64276 () Bool)

(assert (=> b!98632 (= e!64276 (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26445 () Bool)

(declare-fun res!49635 () Bool)

(declare-fun e!64275 () Bool)

(assert (=> d!26445 (=> res!49635 e!64275)))

(assert (=> d!26445 (= res!49635 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26445 (= (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 Nil!1578) e!64275)))

(declare-fun b!98633 () Bool)

(assert (=> b!98633 (= e!64275 e!64278)))

(declare-fun res!49637 () Bool)

(assert (=> b!98633 (=> (not res!49637) (not e!64278))))

(assert (=> b!98633 (= res!49637 (not e!64276))))

(declare-fun res!49636 () Bool)

(assert (=> b!98633 (=> (not res!49636) (not e!64276))))

(assert (=> b!98633 (= res!49636 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98634 () Bool)

(assert (=> b!98634 (= e!64277 call!10077)))

(declare-fun b!98635 () Bool)

(assert (=> b!98635 (= e!64277 call!10077)))

(assert (= (and d!26445 (not res!49635)) b!98633))

(assert (= (and b!98633 res!49636) b!98632))

(assert (= (and b!98633 res!49637) b!98631))

(assert (= (and b!98631 c!16775) b!98634))

(assert (= (and b!98631 (not c!16775)) b!98635))

(assert (= (or b!98634 b!98635) bm!10074))

(assert (=> b!98631 m!107813))

(assert (=> b!98631 m!107813))

(assert (=> b!98631 m!107815))

(assert (=> bm!10074 m!107813))

(declare-fun m!108497 () Bool)

(assert (=> bm!10074 m!108497))

(assert (=> b!98632 m!107813))

(assert (=> b!98632 m!107813))

(declare-fun m!108499 () Bool)

(assert (=> b!98632 m!108499))

(assert (=> b!98633 m!107813))

(assert (=> b!98633 m!107813))

(assert (=> b!98633 m!107815))

(assert (=> b!98114 d!26445))

(declare-fun lt!49667 () Bool)

(declare-fun d!26447 () Bool)

(assert (=> d!26447 (= lt!49667 (select (content!102 (toList!783 lt!49223)) (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!64280 () Bool)

(assert (=> d!26447 (= lt!49667 e!64280)))

(declare-fun res!49638 () Bool)

(assert (=> d!26447 (=> (not res!49638) (not e!64280))))

(assert (=> d!26447 (= res!49638 ((_ is Cons!1576) (toList!783 lt!49223)))))

(assert (=> d!26447 (= (contains!803 (toList!783 lt!49223) (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49667)))

(declare-fun b!98636 () Bool)

(declare-fun e!64279 () Bool)

(assert (=> b!98636 (= e!64280 e!64279)))

(declare-fun res!49639 () Bool)

(assert (=> b!98636 (=> res!49639 e!64279)))

(assert (=> b!98636 (= res!49639 (= (h!2170 (toList!783 lt!49223)) (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98637 () Bool)

(assert (=> b!98637 (= e!64279 (contains!803 (t!5534 (toList!783 lt!49223)) (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26447 res!49638) b!98636))

(assert (= (and b!98636 (not res!49639)) b!98637))

(declare-fun m!108501 () Bool)

(assert (=> d!26447 m!108501))

(declare-fun m!108503 () Bool)

(assert (=> d!26447 m!108503))

(declare-fun m!108505 () Bool)

(assert (=> b!98637 m!108505))

(assert (=> b!97968 d!26447))

(declare-fun d!26449 () Bool)

(declare-fun lt!49668 () Bool)

(assert (=> d!26449 (= lt!49668 (select (content!102 (toList!783 lt!49297)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64282 () Bool)

(assert (=> d!26449 (= lt!49668 e!64282)))

(declare-fun res!49640 () Bool)

(assert (=> d!26449 (=> (not res!49640) (not e!64282))))

(assert (=> d!26449 (= res!49640 ((_ is Cons!1576) (toList!783 lt!49297)))))

(assert (=> d!26449 (= (contains!803 (toList!783 lt!49297) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49668)))

(declare-fun b!98638 () Bool)

(declare-fun e!64281 () Bool)

(assert (=> b!98638 (= e!64282 e!64281)))

(declare-fun res!49641 () Bool)

(assert (=> b!98638 (=> res!49641 e!64281)))

(assert (=> b!98638 (= res!49641 (= (h!2170 (toList!783 lt!49297)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98639 () Bool)

(assert (=> b!98639 (= e!64281 (contains!803 (t!5534 (toList!783 lt!49297)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26449 res!49640) b!98638))

(assert (= (and b!98638 (not res!49641)) b!98639))

(declare-fun m!108507 () Bool)

(assert (=> d!26449 m!108507))

(declare-fun m!108509 () Bool)

(assert (=> d!26449 m!108509))

(declare-fun m!108511 () Bool)

(assert (=> b!98639 m!108511))

(assert (=> b!98111 d!26449))

(assert (=> d!26099 d!26089))

(assert (=> d!26099 d!26075))

(declare-fun d!26451 () Bool)

(assert (=> d!26451 (= (apply!92 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48911) (apply!92 lt!48912 lt!48911))))

(assert (=> d!26451 true))

(declare-fun _$34!867 () Unit!2937)

(assert (=> d!26451 (= (choose!591 lt!48912 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48911) _$34!867)))

(declare-fun bs!4085 () Bool)

(assert (= bs!4085 d!26451))

(assert (=> bs!4085 m!106797))

(assert (=> bs!4085 m!106797))

(assert (=> bs!4085 m!106799))

(assert (=> bs!4085 m!106789))

(assert (=> d!26099 d!26451))

(assert (=> d!26099 d!26079))

(declare-fun d!26453 () Bool)

(declare-fun e!64283 () Bool)

(assert (=> d!26453 e!64283))

(declare-fun res!49642 () Bool)

(assert (=> d!26453 (=> res!49642 e!64283)))

(declare-fun lt!49670 () Bool)

(assert (=> d!26453 (= res!49642 (not lt!49670))))

(declare-fun lt!49672 () Bool)

(assert (=> d!26453 (= lt!49670 lt!49672)))

(declare-fun lt!49669 () Unit!2937)

(declare-fun e!64284 () Unit!2937)

(assert (=> d!26453 (= lt!49669 e!64284)))

(declare-fun c!16776 () Bool)

(assert (=> d!26453 (= c!16776 lt!49672)))

(assert (=> d!26453 (= lt!49672 (containsKey!154 (toList!783 lt!48912) lt!48911))))

(assert (=> d!26453 (= (contains!800 lt!48912 lt!48911) lt!49670)))

(declare-fun b!98640 () Bool)

(declare-fun lt!49671 () Unit!2937)

(assert (=> b!98640 (= e!64284 lt!49671)))

(assert (=> b!98640 (= lt!49671 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48912) lt!48911))))

(assert (=> b!98640 (isDefined!103 (getValueByKey!150 (toList!783 lt!48912) lt!48911))))

(declare-fun b!98641 () Bool)

(declare-fun Unit!2981 () Unit!2937)

(assert (=> b!98641 (= e!64284 Unit!2981)))

(declare-fun b!98642 () Bool)

(assert (=> b!98642 (= e!64283 (isDefined!103 (getValueByKey!150 (toList!783 lt!48912) lt!48911)))))

(assert (= (and d!26453 c!16776) b!98640))

(assert (= (and d!26453 (not c!16776)) b!98641))

(assert (= (and d!26453 (not res!49642)) b!98642))

(declare-fun m!108513 () Bool)

(assert (=> d!26453 m!108513))

(declare-fun m!108515 () Bool)

(assert (=> b!98640 m!108515))

(assert (=> b!98640 m!107197))

(assert (=> b!98640 m!107197))

(declare-fun m!108517 () Bool)

(assert (=> b!98640 m!108517))

(assert (=> b!98642 m!107197))

(assert (=> b!98642 m!107197))

(assert (=> b!98642 m!108517))

(assert (=> d!26099 d!26453))

(declare-fun d!26455 () Bool)

(assert (not d!26455))

(assert (=> b!97822 d!26455))

(assert (=> b!97926 d!26287))

(assert (=> b!97926 d!26065))

(declare-fun b!98643 () Bool)

(declare-fun e!64289 () Bool)

(declare-fun call!10082 () Bool)

(assert (=> b!98643 (= e!64289 (not call!10082))))

(declare-fun b!98644 () Bool)

(declare-fun e!64286 () ListLongMap!1535)

(declare-fun call!10083 () ListLongMap!1535)

(assert (=> b!98644 (= e!64286 call!10083)))

(declare-fun bm!10075 () Bool)

(declare-fun lt!49693 () ListLongMap!1535)

(assert (=> bm!10075 (= call!10082 (contains!800 lt!49693 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10076 () Bool)

(declare-fun call!10081 () Bool)

(assert (=> bm!10076 (= call!10081 (contains!800 lt!49693 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98645 () Bool)

(declare-fun res!49649 () Bool)

(declare-fun e!64296 () Bool)

(assert (=> b!98645 (=> (not res!49649) (not e!64296))))

(declare-fun e!64290 () Bool)

(assert (=> b!98645 (= res!49649 e!64290)))

(declare-fun res!49651 () Bool)

(assert (=> b!98645 (=> res!49651 e!64290)))

(declare-fun e!64288 () Bool)

(assert (=> b!98645 (= res!49651 (not e!64288))))

(declare-fun res!49648 () Bool)

(assert (=> b!98645 (=> (not res!49648) (not e!64288))))

(assert (=> b!98645 (= res!49648 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98646 () Bool)

(declare-fun res!49645 () Bool)

(assert (=> b!98646 (=> (not res!49645) (not e!64296))))

(declare-fun e!64294 () Bool)

(assert (=> b!98646 (= res!49645 e!64294)))

(declare-fun c!16779 () Bool)

(assert (=> b!98646 (= c!16779 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10077 () Bool)

(declare-fun call!10084 () ListLongMap!1535)

(assert (=> bm!10077 (= call!10083 call!10084)))

(declare-fun b!98647 () Bool)

(declare-fun e!64287 () ListLongMap!1535)

(assert (=> b!98647 (= e!64287 call!10083)))

(declare-fun b!98648 () Bool)

(declare-fun e!64292 () Bool)

(assert (=> b!98648 (= e!64292 (= (apply!92 lt!49693 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98648 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))))))

(assert (=> b!98648 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98649 () Bool)

(declare-fun e!64297 () Bool)

(assert (=> b!98649 (= e!64297 (= (apply!92 lt!49693 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98650 () Bool)

(declare-fun e!64285 () Unit!2937)

(declare-fun lt!49694 () Unit!2937)

(assert (=> b!98650 (= e!64285 lt!49694)))

(declare-fun lt!49677 () ListLongMap!1535)

(assert (=> b!98650 (= lt!49677 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49678 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49678 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49687 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49687 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49690 () Unit!2937)

(assert (=> b!98650 (= lt!49690 (addStillContains!68 lt!49677 lt!49678 (zeroValue!2364 newMap!16) lt!49687))))

(assert (=> b!98650 (contains!800 (+!135 lt!49677 (tuple2!2341 lt!49678 (zeroValue!2364 newMap!16))) lt!49687)))

(declare-fun lt!49676 () Unit!2937)

(assert (=> b!98650 (= lt!49676 lt!49690)))

(declare-fun lt!49689 () ListLongMap!1535)

(assert (=> b!98650 (= lt!49689 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49686 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49686 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49688 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49688 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49679 () Unit!2937)

(assert (=> b!98650 (= lt!49679 (addApplyDifferent!68 lt!49689 lt!49686 (minValue!2364 newMap!16) lt!49688))))

(assert (=> b!98650 (= (apply!92 (+!135 lt!49689 (tuple2!2341 lt!49686 (minValue!2364 newMap!16))) lt!49688) (apply!92 lt!49689 lt!49688))))

(declare-fun lt!49674 () Unit!2937)

(assert (=> b!98650 (= lt!49674 lt!49679)))

(declare-fun lt!49682 () ListLongMap!1535)

(assert (=> b!98650 (= lt!49682 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49681 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49681 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49683 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49683 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49675 () Unit!2937)

(assert (=> b!98650 (= lt!49675 (addApplyDifferent!68 lt!49682 lt!49681 (zeroValue!2364 newMap!16) lt!49683))))

(assert (=> b!98650 (= (apply!92 (+!135 lt!49682 (tuple2!2341 lt!49681 (zeroValue!2364 newMap!16))) lt!49683) (apply!92 lt!49682 lt!49683))))

(declare-fun lt!49691 () Unit!2937)

(assert (=> b!98650 (= lt!49691 lt!49675)))

(declare-fun lt!49685 () ListLongMap!1535)

(assert (=> b!98650 (= lt!49685 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49692 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49692 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49684 () (_ BitVec 64))

(assert (=> b!98650 (= lt!49684 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98650 (= lt!49694 (addApplyDifferent!68 lt!49685 lt!49692 (minValue!2364 newMap!16) lt!49684))))

(assert (=> b!98650 (= (apply!92 (+!135 lt!49685 (tuple2!2341 lt!49692 (minValue!2364 newMap!16))) lt!49684) (apply!92 lt!49685 lt!49684))))

(declare-fun b!98651 () Bool)

(declare-fun e!64295 () ListLongMap!1535)

(assert (=> b!98651 (= e!64295 (+!135 call!10084 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun b!98652 () Bool)

(declare-fun call!10080 () ListLongMap!1535)

(assert (=> b!98652 (= e!64287 call!10080)))

(declare-fun b!98653 () Bool)

(declare-fun e!64291 () Bool)

(assert (=> b!98653 (= e!64291 (= (apply!92 lt!49693 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun bm!10079 () Bool)

(declare-fun call!10078 () ListLongMap!1535)

(declare-fun c!16780 () Bool)

(declare-fun call!10079 () ListLongMap!1535)

(declare-fun c!16778 () Bool)

(assert (=> bm!10079 (= call!10084 (+!135 (ite c!16780 call!10078 (ite c!16778 call!10079 call!10080)) (ite (or c!16780 c!16778) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98654 () Bool)

(assert (=> b!98654 (= e!64289 e!64297)))

(declare-fun res!49646 () Bool)

(assert (=> b!98654 (= res!49646 call!10082)))

(assert (=> b!98654 (=> (not res!49646) (not e!64297))))

(declare-fun b!98655 () Bool)

(declare-fun Unit!2982 () Unit!2937)

(assert (=> b!98655 (= e!64285 Unit!2982)))

(declare-fun bm!10080 () Bool)

(assert (=> bm!10080 (= call!10079 call!10078)))

(declare-fun b!98656 () Bool)

(assert (=> b!98656 (= e!64295 e!64286)))

(assert (=> b!98656 (= c!16778 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98657 () Bool)

(assert (=> b!98657 (= e!64294 (not call!10081))))

(declare-fun b!98658 () Bool)

(declare-fun c!16782 () Bool)

(assert (=> b!98658 (= c!16782 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98658 (= e!64286 e!64287)))

(declare-fun b!98659 () Bool)

(assert (=> b!98659 (= e!64294 e!64291)))

(declare-fun res!49650 () Bool)

(assert (=> b!98659 (= res!49650 call!10081)))

(assert (=> b!98659 (=> (not res!49650) (not e!64291))))

(declare-fun b!98660 () Bool)

(assert (=> b!98660 (= e!64296 e!64289)))

(declare-fun c!16781 () Bool)

(assert (=> b!98660 (= c!16781 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98661 () Bool)

(assert (=> b!98661 (= e!64288 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10078 () Bool)

(assert (=> bm!10078 (= call!10078 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26457 () Bool)

(assert (=> d!26457 e!64296))

(declare-fun res!49647 () Bool)

(assert (=> d!26457 (=> (not res!49647) (not e!64296))))

(assert (=> d!26457 (= res!49647 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49680 () ListLongMap!1535)

(assert (=> d!26457 (= lt!49693 lt!49680)))

(declare-fun lt!49673 () Unit!2937)

(assert (=> d!26457 (= lt!49673 e!64285)))

(declare-fun c!16777 () Bool)

(declare-fun e!64293 () Bool)

(assert (=> d!26457 (= c!16777 e!64293)))

(declare-fun res!49644 () Bool)

(assert (=> d!26457 (=> (not res!49644) (not e!64293))))

(assert (=> d!26457 (= res!49644 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26457 (= lt!49680 e!64295)))

(assert (=> d!26457 (= c!16780 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26457 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26457 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49693)))

(declare-fun b!98662 () Bool)

(assert (=> b!98662 (= e!64293 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10081 () Bool)

(assert (=> bm!10081 (= call!10080 call!10079)))

(declare-fun b!98663 () Bool)

(assert (=> b!98663 (= e!64290 e!64292)))

(declare-fun res!49643 () Bool)

(assert (=> b!98663 (=> (not res!49643) (not e!64292))))

(assert (=> b!98663 (= res!49643 (contains!800 lt!49693 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98663 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26457 c!16780) b!98651))

(assert (= (and d!26457 (not c!16780)) b!98656))

(assert (= (and b!98656 c!16778) b!98644))

(assert (= (and b!98656 (not c!16778)) b!98658))

(assert (= (and b!98658 c!16782) b!98647))

(assert (= (and b!98658 (not c!16782)) b!98652))

(assert (= (or b!98647 b!98652) bm!10081))

(assert (= (or b!98644 bm!10081) bm!10080))

(assert (= (or b!98644 b!98647) bm!10077))

(assert (= (or b!98651 bm!10080) bm!10078))

(assert (= (or b!98651 bm!10077) bm!10079))

(assert (= (and d!26457 res!49644) b!98662))

(assert (= (and d!26457 c!16777) b!98650))

(assert (= (and d!26457 (not c!16777)) b!98655))

(assert (= (and d!26457 res!49647) b!98645))

(assert (= (and b!98645 res!49648) b!98661))

(assert (= (and b!98645 (not res!49651)) b!98663))

(assert (= (and b!98663 res!49643) b!98648))

(assert (= (and b!98645 res!49649) b!98646))

(assert (= (and b!98646 c!16779) b!98659))

(assert (= (and b!98646 (not c!16779)) b!98657))

(assert (= (and b!98659 res!49650) b!98653))

(assert (= (or b!98659 b!98657) bm!10076))

(assert (= (and b!98646 res!49645) b!98660))

(assert (= (and b!98660 c!16781) b!98654))

(assert (= (and b!98660 (not c!16781)) b!98643))

(assert (= (and b!98654 res!49646) b!98649))

(assert (= (or b!98654 b!98643) bm!10075))

(declare-fun b_lambda!4393 () Bool)

(assert (=> (not b_lambda!4393) (not b!98648)))

(assert (=> b!98648 t!5542))

(declare-fun b_and!6079 () Bool)

(assert (= b_and!6075 (and (=> t!5542 result!3275) b_and!6079)))

(assert (=> b!98648 t!5544))

(declare-fun b_and!6081 () Bool)

(assert (= b_and!6077 (and (=> t!5544 result!3277) b_and!6081)))

(declare-fun m!108519 () Bool)

(assert (=> b!98649 m!108519))

(declare-fun m!108521 () Bool)

(assert (=> bm!10076 m!108521))

(assert (=> b!98663 m!106891))

(assert (=> b!98663 m!106891))

(declare-fun m!108523 () Bool)

(assert (=> b!98663 m!108523))

(assert (=> d!26457 m!106895))

(declare-fun m!108525 () Bool)

(assert (=> b!98653 m!108525))

(declare-fun m!108527 () Bool)

(assert (=> bm!10079 m!108527))

(assert (=> b!98662 m!106891))

(assert (=> b!98662 m!106891))

(assert (=> b!98662 m!106901))

(declare-fun m!108529 () Bool)

(assert (=> b!98651 m!108529))

(assert (=> b!98661 m!106891))

(assert (=> b!98661 m!106891))

(assert (=> b!98661 m!106901))

(declare-fun m!108531 () Bool)

(assert (=> b!98648 m!108531))

(assert (=> b!98648 m!106907))

(declare-fun m!108533 () Bool)

(assert (=> b!98648 m!108533))

(assert (=> b!98648 m!106891))

(declare-fun m!108535 () Bool)

(assert (=> b!98648 m!108535))

(assert (=> b!98648 m!106891))

(assert (=> b!98648 m!108531))

(assert (=> b!98648 m!106907))

(declare-fun m!108537 () Bool)

(assert (=> b!98650 m!108537))

(declare-fun m!108539 () Bool)

(assert (=> b!98650 m!108539))

(declare-fun m!108541 () Bool)

(assert (=> b!98650 m!108541))

(declare-fun m!108543 () Bool)

(assert (=> b!98650 m!108543))

(declare-fun m!108545 () Bool)

(assert (=> b!98650 m!108545))

(declare-fun m!108547 () Bool)

(assert (=> b!98650 m!108547))

(declare-fun m!108549 () Bool)

(assert (=> b!98650 m!108549))

(declare-fun m!108551 () Bool)

(assert (=> b!98650 m!108551))

(declare-fun m!108553 () Bool)

(assert (=> b!98650 m!108553))

(assert (=> b!98650 m!106891))

(assert (=> b!98650 m!108551))

(declare-fun m!108555 () Bool)

(assert (=> b!98650 m!108555))

(assert (=> b!98650 m!108539))

(declare-fun m!108557 () Bool)

(assert (=> b!98650 m!108557))

(declare-fun m!108559 () Bool)

(assert (=> b!98650 m!108559))

(declare-fun m!108561 () Bool)

(assert (=> b!98650 m!108561))

(declare-fun m!108563 () Bool)

(assert (=> b!98650 m!108563))

(assert (=> b!98650 m!108545))

(assert (=> b!98650 m!108537))

(declare-fun m!108565 () Bool)

(assert (=> b!98650 m!108565))

(declare-fun m!108567 () Bool)

(assert (=> b!98650 m!108567))

(assert (=> bm!10078 m!108555))

(declare-fun m!108569 () Bool)

(assert (=> bm!10075 m!108569))

(assert (=> b!97926 d!26457))

(declare-fun d!26459 () Bool)

(assert (=> d!26459 (= (apply!92 lt!49251 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1284 (getValueByKey!150 (toList!783 lt!49251) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4086 () Bool)

(assert (= bs!4086 d!26459))

(assert (=> bs!4086 m!106739))

(declare-fun m!108571 () Bool)

(assert (=> bs!4086 m!108571))

(assert (=> bs!4086 m!108571))

(declare-fun m!108573 () Bool)

(assert (=> bs!4086 m!108573))

(assert (=> b!98003 d!26459))

(assert (=> b!98003 d!26105))

(declare-fun d!26461 () Bool)

(declare-fun e!64298 () Bool)

(assert (=> d!26461 e!64298))

(declare-fun res!49652 () Bool)

(assert (=> d!26461 (=> res!49652 e!64298)))

(declare-fun lt!49696 () Bool)

(assert (=> d!26461 (= res!49652 (not lt!49696))))

(declare-fun lt!49698 () Bool)

(assert (=> d!26461 (= lt!49696 lt!49698)))

(declare-fun lt!49695 () Unit!2937)

(declare-fun e!64299 () Unit!2937)

(assert (=> d!26461 (= lt!49695 e!64299)))

(declare-fun c!16783 () Bool)

(assert (=> d!26461 (= c!16783 lt!49698)))

(assert (=> d!26461 (= lt!49698 (containsKey!154 (toList!783 lt!49031) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26461 (= (contains!800 lt!49031 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49696)))

(declare-fun b!98664 () Bool)

(declare-fun lt!49697 () Unit!2937)

(assert (=> b!98664 (= e!64299 lt!49697)))

(assert (=> b!98664 (= lt!49697 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49031) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98664 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98665 () Bool)

(declare-fun Unit!2983 () Unit!2937)

(assert (=> b!98665 (= e!64299 Unit!2983)))

(declare-fun b!98666 () Bool)

(assert (=> b!98666 (= e!64298 (isDefined!103 (getValueByKey!150 (toList!783 lt!49031) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26461 c!16783) b!98664))

(assert (= (and d!26461 (not c!16783)) b!98665))

(assert (= (and d!26461 (not res!49652)) b!98666))

(declare-fun m!108575 () Bool)

(assert (=> d!26461 m!108575))

(declare-fun m!108577 () Bool)

(assert (=> b!98664 m!108577))

(declare-fun m!108579 () Bool)

(assert (=> b!98664 m!108579))

(assert (=> b!98664 m!108579))

(declare-fun m!108581 () Bool)

(assert (=> b!98664 m!108581))

(assert (=> b!98666 m!108579))

(assert (=> b!98666 m!108579))

(assert (=> b!98666 m!108581))

(assert (=> bm!9960 d!26461))

(assert (=> b!98039 d!26271))

(assert (=> b!97808 d!26211))

(assert (=> b!98034 d!26211))

(declare-fun d!26463 () Bool)

(assert (=> d!26463 (= (content!101 Nil!1578) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26041 d!26463))

(assert (=> d!26085 d!26083))

(assert (=> d!26085 d!26081))

(declare-fun d!26465 () Bool)

(assert (=> d!26465 (contains!800 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48910)))

(assert (=> d!26465 true))

(declare-fun _$35!339 () Unit!2937)

(assert (=> d!26465 (= (choose!592 lt!48900 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48910) _$35!339)))

(declare-fun bs!4087 () Bool)

(assert (= bs!4087 d!26465))

(assert (=> bs!4087 m!106785))

(assert (=> bs!4087 m!106785))

(assert (=> bs!4087 m!106803))

(assert (=> d!26085 d!26465))

(declare-fun d!26467 () Bool)

(declare-fun e!64300 () Bool)

(assert (=> d!26467 e!64300))

(declare-fun res!49653 () Bool)

(assert (=> d!26467 (=> res!49653 e!64300)))

(declare-fun lt!49700 () Bool)

(assert (=> d!26467 (= res!49653 (not lt!49700))))

(declare-fun lt!49702 () Bool)

(assert (=> d!26467 (= lt!49700 lt!49702)))

(declare-fun lt!49699 () Unit!2937)

(declare-fun e!64301 () Unit!2937)

(assert (=> d!26467 (= lt!49699 e!64301)))

(declare-fun c!16784 () Bool)

(assert (=> d!26467 (= c!16784 lt!49702)))

(assert (=> d!26467 (= lt!49702 (containsKey!154 (toList!783 lt!48900) lt!48910))))

(assert (=> d!26467 (= (contains!800 lt!48900 lt!48910) lt!49700)))

(declare-fun b!98668 () Bool)

(declare-fun lt!49701 () Unit!2937)

(assert (=> b!98668 (= e!64301 lt!49701)))

(assert (=> b!98668 (= lt!49701 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48900) lt!48910))))

(assert (=> b!98668 (isDefined!103 (getValueByKey!150 (toList!783 lt!48900) lt!48910))))

(declare-fun b!98669 () Bool)

(declare-fun Unit!2984 () Unit!2937)

(assert (=> b!98669 (= e!64301 Unit!2984)))

(declare-fun b!98670 () Bool)

(assert (=> b!98670 (= e!64300 (isDefined!103 (getValueByKey!150 (toList!783 lt!48900) lt!48910)))))

(assert (= (and d!26467 c!16784) b!98668))

(assert (= (and d!26467 (not c!16784)) b!98669))

(assert (= (and d!26467 (not res!49653)) b!98670))

(declare-fun m!108583 () Bool)

(assert (=> d!26467 m!108583))

(declare-fun m!108585 () Bool)

(assert (=> b!98668 m!108585))

(declare-fun m!108587 () Bool)

(assert (=> b!98668 m!108587))

(assert (=> b!98668 m!108587))

(declare-fun m!108589 () Bool)

(assert (=> b!98668 m!108589))

(assert (=> b!98670 m!108587))

(assert (=> b!98670 m!108587))

(assert (=> b!98670 m!108589))

(assert (=> d!26085 d!26467))

(declare-fun d!26469 () Bool)

(declare-fun res!49654 () Bool)

(declare-fun e!64302 () Bool)

(assert (=> d!26469 (=> res!49654 e!64302)))

(assert (=> d!26469 (= res!49654 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48910)))))

(assert (=> d!26469 (= (containsKey!154 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48910) e!64302)))

(declare-fun b!98671 () Bool)

(declare-fun e!64303 () Bool)

(assert (=> b!98671 (= e!64302 e!64303)))

(declare-fun res!49655 () Bool)

(assert (=> b!98671 (=> (not res!49655) (not e!64303))))

(assert (=> b!98671 (= res!49655 (and (or (not ((_ is Cons!1576) (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) (bvsle (_1!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48910)) ((_ is Cons!1576) (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) (bvslt (_1!1181 (h!2170 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48910)))))

(declare-fun b!98672 () Bool)

(assert (=> b!98672 (= e!64303 (containsKey!154 (t!5534 (toList!783 (+!135 lt!48900 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!48910))))

(assert (= (and d!26469 (not res!49654)) b!98671))

(assert (= (and b!98671 res!49655) b!98672))

(declare-fun m!108591 () Bool)

(assert (=> b!98672 m!108591))

(assert (=> d!26083 d!26469))

(declare-fun d!26471 () Bool)

(declare-fun e!64304 () Bool)

(assert (=> d!26471 e!64304))

(declare-fun res!49657 () Bool)

(assert (=> d!26471 (=> (not res!49657) (not e!64304))))

(declare-fun lt!49704 () ListLongMap!1535)

(assert (=> d!26471 (= res!49657 (contains!800 lt!49704 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun lt!49706 () List!1580)

(assert (=> d!26471 (= lt!49704 (ListLongMap!1536 lt!49706))))

(declare-fun lt!49705 () Unit!2937)

(declare-fun lt!49703 () Unit!2937)

(assert (=> d!26471 (= lt!49705 lt!49703)))

(assert (=> d!26471 (= (getValueByKey!150 lt!49706 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26471 (= lt!49703 (lemmaContainsTupThenGetReturnValue!66 lt!49706 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26471 (= lt!49706 (insertStrictlySorted!69 (toList!783 call!9990) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26471 (= (+!135 call!9990 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) lt!49704)))

(declare-fun b!98673 () Bool)

(declare-fun res!49656 () Bool)

(assert (=> b!98673 (=> (not res!49656) (not e!64304))))

(assert (=> b!98673 (= res!49656 (= (getValueByKey!150 (toList!783 lt!49704) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun b!98674 () Bool)

(assert (=> b!98674 (= e!64304 (contains!803 (toList!783 lt!49704) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(assert (= (and d!26471 res!49657) b!98673))

(assert (= (and b!98673 res!49656) b!98674))

(declare-fun m!108593 () Bool)

(assert (=> d!26471 m!108593))

(declare-fun m!108595 () Bool)

(assert (=> d!26471 m!108595))

(declare-fun m!108597 () Bool)

(assert (=> d!26471 m!108597))

(declare-fun m!108599 () Bool)

(assert (=> d!26471 m!108599))

(declare-fun m!108601 () Bool)

(assert (=> b!98673 m!108601))

(declare-fun m!108603 () Bool)

(assert (=> b!98674 m!108603))

(assert (=> b!97908 d!26471))

(declare-fun d!26473 () Bool)

(assert (=> d!26473 (= (get!1284 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2804 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26147 d!26473))

(assert (=> d!26147 d!26249))

(assert (=> b!97897 d!26123))

(declare-fun d!26475 () Bool)

(assert (=> d!26475 (= (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) (not (isEmpty!357 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun bs!4088 () Bool)

(assert (= bs!4088 d!26475))

(assert (=> bs!4088 m!107113))

(declare-fun m!108605 () Bool)

(assert (=> bs!4088 m!108605))

(assert (=> b!97929 d!26475))

(declare-fun e!64306 () Option!156)

(declare-fun b!98677 () Bool)

(assert (=> b!98677 (= e!64306 (getValueByKey!150 (t!5534 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98675 () Bool)

(declare-fun e!64305 () Option!156)

(assert (=> b!98675 (= e!64305 (Some!155 (_2!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))))))

(declare-fun b!98678 () Bool)

(assert (=> b!98678 (= e!64306 None!154)))

(declare-fun b!98676 () Bool)

(assert (=> b!98676 (= e!64305 e!64306)))

(declare-fun c!16786 () Bool)

(assert (=> b!98676 (= c!16786 (and ((_ is Cons!1576) (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (not (= (_1!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))))

(declare-fun c!16785 () Bool)

(declare-fun d!26477 () Bool)

(assert (=> d!26477 (= c!16785 (and ((_ is Cons!1576) (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (= (_1!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26477 (= (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64305)))

(assert (= (and d!26477 c!16785) b!98675))

(assert (= (and d!26477 (not c!16785)) b!98676))

(assert (= (and b!98676 c!16786) b!98677))

(assert (= (and b!98676 (not c!16786)) b!98678))

(assert (=> b!98677 m!106647))

(declare-fun m!108607 () Bool)

(assert (=> b!98677 m!108607))

(assert (=> b!97929 d!26477))

(assert (=> b!97999 d!26105))

(declare-fun d!26479 () Bool)

(declare-fun e!64307 () Bool)

(assert (=> d!26479 e!64307))

(declare-fun res!49658 () Bool)

(assert (=> d!26479 (=> res!49658 e!64307)))

(declare-fun lt!49708 () Bool)

(assert (=> d!26479 (= res!49658 (not lt!49708))))

(declare-fun lt!49710 () Bool)

(assert (=> d!26479 (= lt!49708 lt!49710)))

(declare-fun lt!49707 () Unit!2937)

(declare-fun e!64308 () Unit!2937)

(assert (=> d!26479 (= lt!49707 e!64308)))

(declare-fun c!16787 () Bool)

(assert (=> d!26479 (= c!16787 lt!49710)))

(assert (=> d!26479 (= lt!49710 (containsKey!154 (toList!783 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245))) lt!49250))))

(assert (=> d!26479 (= (contains!800 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245)) lt!49250) lt!49708)))

(declare-fun b!98679 () Bool)

(declare-fun lt!49709 () Unit!2937)

(assert (=> b!98679 (= e!64308 lt!49709)))

(assert (=> b!98679 (= lt!49709 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245))) lt!49250))))

(assert (=> b!98679 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245))) lt!49250))))

(declare-fun b!98680 () Bool)

(declare-fun Unit!2985 () Unit!2937)

(assert (=> b!98680 (= e!64308 Unit!2985)))

(declare-fun b!98681 () Bool)

(assert (=> b!98681 (= e!64307 (isDefined!103 (getValueByKey!150 (toList!783 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245))) lt!49250)))))

(assert (= (and d!26479 c!16787) b!98679))

(assert (= (and d!26479 (not c!16787)) b!98680))

(assert (= (and d!26479 (not res!49658)) b!98681))

(declare-fun m!108609 () Bool)

(assert (=> d!26479 m!108609))

(declare-fun m!108611 () Bool)

(assert (=> b!98679 m!108611))

(declare-fun m!108613 () Bool)

(assert (=> b!98679 m!108613))

(assert (=> b!98679 m!108613))

(declare-fun m!108615 () Bool)

(assert (=> b!98679 m!108615))

(assert (=> b!98681 m!108613))

(assert (=> b!98681 m!108613))

(assert (=> b!98681 m!108615))

(assert (=> b!97999 d!26479))

(declare-fun d!26481 () Bool)

(assert (=> d!26481 (not (contains!800 (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245)) lt!49250))))

(declare-fun lt!49713 () Unit!2937)

(declare-fun choose!599 (ListLongMap!1535 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2937)

(assert (=> d!26481 (= lt!49713 (choose!599 lt!49246 lt!49249 lt!49245 lt!49250))))

(declare-fun e!64311 () Bool)

(assert (=> d!26481 e!64311))

(declare-fun res!49661 () Bool)

(assert (=> d!26481 (=> (not res!49661) (not e!64311))))

(assert (=> d!26481 (= res!49661 (not (contains!800 lt!49246 lt!49250)))))

(assert (=> d!26481 (= (addStillNotContains!40 lt!49246 lt!49249 lt!49245 lt!49250) lt!49713)))

(declare-fun b!98685 () Bool)

(assert (=> b!98685 (= e!64311 (not (= lt!49249 lt!49250)))))

(assert (= (and d!26481 res!49661) b!98685))

(assert (=> d!26481 m!107269))

(assert (=> d!26481 m!107269))

(assert (=> d!26481 m!107275))

(declare-fun m!108617 () Bool)

(assert (=> d!26481 m!108617))

(declare-fun m!108619 () Bool)

(assert (=> d!26481 m!108619))

(assert (=> b!97999 d!26481))

(declare-fun d!26483 () Bool)

(declare-fun e!64312 () Bool)

(assert (=> d!26483 e!64312))

(declare-fun res!49663 () Bool)

(assert (=> d!26483 (=> (not res!49663) (not e!64312))))

(declare-fun lt!49715 () ListLongMap!1535)

(assert (=> d!26483 (= res!49663 (contains!800 lt!49715 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49717 () List!1580)

(assert (=> d!26483 (= lt!49715 (ListLongMap!1536 lt!49717))))

(declare-fun lt!49716 () Unit!2937)

(declare-fun lt!49714 () Unit!2937)

(assert (=> d!26483 (= lt!49716 lt!49714)))

(assert (=> d!26483 (= (getValueByKey!150 lt!49717 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26483 (= lt!49714 (lemmaContainsTupThenGetReturnValue!66 lt!49717 (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26483 (= lt!49717 (insertStrictlySorted!69 (toList!783 call!10000) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26483 (= (+!135 call!10000 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49715)))

(declare-fun b!98686 () Bool)

(declare-fun res!49662 () Bool)

(assert (=> b!98686 (=> (not res!49662) (not e!64312))))

(assert (=> b!98686 (= res!49662 (= (getValueByKey!150 (toList!783 lt!49715) (_1!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98687 () Bool)

(assert (=> b!98687 (= e!64312 (contains!803 (toList!783 lt!49715) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26483 res!49663) b!98686))

(assert (= (and b!98686 res!49662) b!98687))

(declare-fun m!108621 () Bool)

(assert (=> d!26483 m!108621))

(declare-fun m!108623 () Bool)

(assert (=> d!26483 m!108623))

(declare-fun m!108625 () Bool)

(assert (=> d!26483 m!108625))

(declare-fun m!108627 () Bool)

(assert (=> d!26483 m!108627))

(declare-fun m!108629 () Bool)

(assert (=> b!98686 m!108629))

(declare-fun m!108631 () Bool)

(assert (=> b!98687 m!108631))

(assert (=> b!97999 d!26483))

(declare-fun d!26485 () Bool)

(declare-fun e!64313 () Bool)

(assert (=> d!26485 e!64313))

(declare-fun res!49665 () Bool)

(assert (=> d!26485 (=> (not res!49665) (not e!64313))))

(declare-fun lt!49719 () ListLongMap!1535)

(assert (=> d!26485 (= res!49665 (contains!800 lt!49719 (_1!1181 (tuple2!2341 lt!49249 lt!49245))))))

(declare-fun lt!49721 () List!1580)

(assert (=> d!26485 (= lt!49719 (ListLongMap!1536 lt!49721))))

(declare-fun lt!49720 () Unit!2937)

(declare-fun lt!49718 () Unit!2937)

(assert (=> d!26485 (= lt!49720 lt!49718)))

(assert (=> d!26485 (= (getValueByKey!150 lt!49721 (_1!1181 (tuple2!2341 lt!49249 lt!49245))) (Some!155 (_2!1181 (tuple2!2341 lt!49249 lt!49245))))))

(assert (=> d!26485 (= lt!49718 (lemmaContainsTupThenGetReturnValue!66 lt!49721 (_1!1181 (tuple2!2341 lt!49249 lt!49245)) (_2!1181 (tuple2!2341 lt!49249 lt!49245))))))

(assert (=> d!26485 (= lt!49721 (insertStrictlySorted!69 (toList!783 lt!49246) (_1!1181 (tuple2!2341 lt!49249 lt!49245)) (_2!1181 (tuple2!2341 lt!49249 lt!49245))))))

(assert (=> d!26485 (= (+!135 lt!49246 (tuple2!2341 lt!49249 lt!49245)) lt!49719)))

(declare-fun b!98688 () Bool)

(declare-fun res!49664 () Bool)

(assert (=> b!98688 (=> (not res!49664) (not e!64313))))

(assert (=> b!98688 (= res!49664 (= (getValueByKey!150 (toList!783 lt!49719) (_1!1181 (tuple2!2341 lt!49249 lt!49245))) (Some!155 (_2!1181 (tuple2!2341 lt!49249 lt!49245)))))))

(declare-fun b!98689 () Bool)

(assert (=> b!98689 (= e!64313 (contains!803 (toList!783 lt!49719) (tuple2!2341 lt!49249 lt!49245)))))

(assert (= (and d!26485 res!49665) b!98688))

(assert (= (and b!98688 res!49664) b!98689))

(declare-fun m!108633 () Bool)

(assert (=> d!26485 m!108633))

(declare-fun m!108635 () Bool)

(assert (=> d!26485 m!108635))

(declare-fun m!108637 () Bool)

(assert (=> d!26485 m!108637))

(declare-fun m!108639 () Bool)

(assert (=> d!26485 m!108639))

(declare-fun m!108641 () Bool)

(assert (=> b!98688 m!108641))

(declare-fun m!108643 () Bool)

(assert (=> b!98689 m!108643))

(assert (=> b!97999 d!26485))

(declare-fun d!26487 () Bool)

(assert (=> d!26487 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26487 true))

(declare-fun _$5!101 () Unit!2937)

(assert (=> d!26487 (= (choose!590 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3156 lt!48986) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) _$5!101)))

(declare-fun bs!4089 () Bool)

(assert (= bs!4089 d!26487))

(assert (=> bs!4089 m!106761))

(assert (=> bs!4089 m!106761))

(assert (=> bs!4089 m!107029))

(assert (=> bs!4089 m!106839))

(assert (=> bs!4089 m!107107))

(assert (=> d!26061 d!26487))

(assert (=> d!26061 d!26209))

(declare-fun d!26489 () Bool)

(declare-fun res!49666 () Bool)

(declare-fun e!64314 () Bool)

(assert (=> d!26489 (=> res!49666 e!64314)))

(assert (=> d!26489 (= res!49666 (and ((_ is Cons!1576) (toList!783 call!9954)) (= (_1!1181 (h!2170 (toList!783 call!9954))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26489 (= (containsKey!154 (toList!783 call!9954) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64314)))

(declare-fun b!98690 () Bool)

(declare-fun e!64315 () Bool)

(assert (=> b!98690 (= e!64314 e!64315)))

(declare-fun res!49667 () Bool)

(assert (=> b!98690 (=> (not res!49667) (not e!64315))))

(assert (=> b!98690 (= res!49667 (and (or (not ((_ is Cons!1576) (toList!783 call!9954))) (bvsle (_1!1181 (h!2170 (toList!783 call!9954))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) ((_ is Cons!1576) (toList!783 call!9954)) (bvslt (_1!1181 (h!2170 (toList!783 call!9954))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(declare-fun b!98691 () Bool)

(assert (=> b!98691 (= e!64315 (containsKey!154 (t!5534 (toList!783 call!9954)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26489 (not res!49666)) b!98690))

(assert (= (and b!98690 res!49667) b!98691))

(assert (=> b!98691 m!106647))

(declare-fun m!108645 () Bool)

(assert (=> b!98691 m!108645))

(assert (=> d!26157 d!26489))

(assert (=> d!26123 d!26113))

(declare-fun d!26491 () Bool)

(declare-fun e!64318 () Bool)

(assert (=> d!26491 e!64318))

(declare-fun res!49673 () Bool)

(assert (=> d!26491 (=> (not res!49673) (not e!64318))))

(declare-fun lt!49724 () SeekEntryResult!253)

(assert (=> d!26491 (= res!49673 ((_ is Found!253) lt!49724))))

(assert (=> d!26491 (= lt!49724 (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26491 true))

(declare-fun _$33!81 () Unit!2937)

(assert (=> d!26491 (= (choose!594 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) _$33!81)))

(declare-fun b!98696 () Bool)

(declare-fun res!49672 () Bool)

(assert (=> b!98696 (=> (not res!49672) (not e!64318))))

(assert (=> b!98696 (= res!49672 (inRange!0 (index!3156 lt!49724) (mask!6578 newMap!16)))))

(declare-fun b!98697 () Bool)

(assert (=> b!98697 (= e!64318 (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49724)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26491 res!49673) b!98696))

(assert (= (and b!98696 res!49672) b!98697))

(assert (=> d!26491 m!106647))

(assert (=> d!26491 m!106835))

(declare-fun m!108647 () Bool)

(assert (=> b!98696 m!108647))

(declare-fun m!108649 () Bool)

(assert (=> b!98697 m!108649))

(assert (=> d!26123 d!26491))

(assert (=> d!26123 d!26209))

(assert (=> d!26071 d!26093))

(declare-fun d!26493 () Bool)

(declare-fun e!64319 () Bool)

(assert (=> d!26493 e!64319))

(declare-fun res!49674 () Bool)

(assert (=> d!26493 (=> res!49674 e!64319)))

(declare-fun lt!49726 () Bool)

(assert (=> d!26493 (= res!49674 (not lt!49726))))

(declare-fun lt!49728 () Bool)

(assert (=> d!26493 (= lt!49726 lt!49728)))

(declare-fun lt!49725 () Unit!2937)

(declare-fun e!64320 () Unit!2937)

(assert (=> d!26493 (= lt!49725 e!64320)))

(declare-fun c!16788 () Bool)

(assert (=> d!26493 (= c!16788 lt!49728)))

(assert (=> d!26493 (= lt!49728 (containsKey!154 (toList!783 lt!48905) lt!48906))))

(assert (=> d!26493 (= (contains!800 lt!48905 lt!48906) lt!49726)))

(declare-fun b!98698 () Bool)

(declare-fun lt!49727 () Unit!2937)

(assert (=> b!98698 (= e!64320 lt!49727)))

(assert (=> b!98698 (= lt!49727 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48905) lt!48906))))

(assert (=> b!98698 (isDefined!103 (getValueByKey!150 (toList!783 lt!48905) lt!48906))))

(declare-fun b!98699 () Bool)

(declare-fun Unit!2986 () Unit!2937)

(assert (=> b!98699 (= e!64320 Unit!2986)))

(declare-fun b!98700 () Bool)

(assert (=> b!98700 (= e!64319 (isDefined!103 (getValueByKey!150 (toList!783 lt!48905) lt!48906)))))

(assert (= (and d!26493 c!16788) b!98698))

(assert (= (and d!26493 (not c!16788)) b!98699))

(assert (= (and d!26493 (not res!49674)) b!98700))

(declare-fun m!108651 () Bool)

(assert (=> d!26493 m!108651))

(declare-fun m!108653 () Bool)

(assert (=> b!98698 m!108653))

(assert (=> b!98698 m!107169))

(assert (=> b!98698 m!107169))

(declare-fun m!108655 () Bool)

(assert (=> b!98698 m!108655))

(assert (=> b!98700 m!107169))

(assert (=> b!98700 m!107169))

(assert (=> b!98700 m!108655))

(assert (=> d!26071 d!26493))

(assert (=> d!26071 d!26077))

(assert (=> d!26071 d!26069))

(declare-fun d!26495 () Bool)

(assert (=> d!26495 (= (apply!92 (+!135 lt!48905 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!48906) (apply!92 lt!48905 lt!48906))))

(assert (=> d!26495 true))

(declare-fun _$34!868 () Unit!2937)

(assert (=> d!26495 (= (choose!591 lt!48905 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))) lt!48906) _$34!868)))

(declare-fun bs!4090 () Bool)

(assert (= bs!4090 d!26495))

(assert (=> bs!4090 m!106783))

(assert (=> bs!4090 m!106783))

(assert (=> bs!4090 m!106811))

(assert (=> bs!4090 m!106809))

(assert (=> d!26071 d!26495))

(assert (=> d!26057 d!26209))

(declare-fun d!26497 () Bool)

(declare-fun e!64321 () Bool)

(assert (=> d!26497 e!64321))

(declare-fun res!49676 () Bool)

(assert (=> d!26497 (=> (not res!49676) (not e!64321))))

(declare-fun lt!49730 () ListLongMap!1535)

(assert (=> d!26497 (= res!49676 (contains!800 lt!49730 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49732 () List!1580)

(assert (=> d!26497 (= lt!49730 (ListLongMap!1536 lt!49732))))

(declare-fun lt!49731 () Unit!2937)

(declare-fun lt!49729 () Unit!2937)

(assert (=> d!26497 (= lt!49731 lt!49729)))

(assert (=> d!26497 (= (getValueByKey!150 lt!49732 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= lt!49729 (lemmaContainsTupThenGetReturnValue!66 lt!49732 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= lt!49732 (insertStrictlySorted!69 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26497 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49730)))

(declare-fun b!98701 () Bool)

(declare-fun res!49675 () Bool)

(assert (=> b!98701 (=> (not res!49675) (not e!64321))))

(assert (=> b!98701 (= res!49675 (= (getValueByKey!150 (toList!783 lt!49730) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98702 () Bool)

(assert (=> b!98702 (= e!64321 (contains!803 (toList!783 lt!49730) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26497 res!49676) b!98701))

(assert (= (and b!98701 res!49675) b!98702))

(declare-fun m!108657 () Bool)

(assert (=> d!26497 m!108657))

(declare-fun m!108659 () Bool)

(assert (=> d!26497 m!108659))

(declare-fun m!108661 () Bool)

(assert (=> d!26497 m!108661))

(declare-fun m!108663 () Bool)

(assert (=> d!26497 m!108663))

(declare-fun m!108665 () Bool)

(assert (=> b!98701 m!108665))

(declare-fun m!108667 () Bool)

(assert (=> b!98702 m!108667))

(assert (=> d!26101 d!26497))

(declare-fun b!98703 () Bool)

(declare-fun e!64326 () Bool)

(declare-fun call!10089 () Bool)

(assert (=> b!98703 (= e!64326 (not call!10089))))

(declare-fun b!98704 () Bool)

(declare-fun e!64323 () ListLongMap!1535)

(declare-fun call!10090 () ListLongMap!1535)

(assert (=> b!98704 (= e!64323 call!10090)))

(declare-fun bm!10082 () Bool)

(declare-fun lt!49753 () ListLongMap!1535)

(assert (=> bm!10082 (= call!10089 (contains!800 lt!49753 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10083 () Bool)

(declare-fun call!10088 () Bool)

(assert (=> bm!10083 (= call!10088 (contains!800 lt!49753 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98705 () Bool)

(declare-fun res!49683 () Bool)

(declare-fun e!64333 () Bool)

(assert (=> b!98705 (=> (not res!49683) (not e!64333))))

(declare-fun e!64327 () Bool)

(assert (=> b!98705 (= res!49683 e!64327)))

(declare-fun res!49685 () Bool)

(assert (=> b!98705 (=> res!49685 e!64327)))

(declare-fun e!64325 () Bool)

(assert (=> b!98705 (= res!49685 (not e!64325))))

(declare-fun res!49682 () Bool)

(assert (=> b!98705 (=> (not res!49682) (not e!64325))))

(assert (=> b!98705 (= res!49682 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98706 () Bool)

(declare-fun res!49679 () Bool)

(assert (=> b!98706 (=> (not res!49679) (not e!64333))))

(declare-fun e!64331 () Bool)

(assert (=> b!98706 (= res!49679 e!64331)))

(declare-fun c!16791 () Bool)

(assert (=> b!98706 (= c!16791 (not (= (bvand lt!49006 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10084 () Bool)

(declare-fun call!10091 () ListLongMap!1535)

(assert (=> bm!10084 (= call!10090 call!10091)))

(declare-fun b!98707 () Bool)

(declare-fun e!64324 () ListLongMap!1535)

(assert (=> b!98707 (= e!64324 call!10090)))

(declare-fun b!98708 () Bool)

(declare-fun e!64329 () Bool)

(assert (=> b!98708 (= e!64329 (= (apply!92 lt!49753 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98708 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2266 (_values!2464 newMap!16))))))

(assert (=> b!98708 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98709 () Bool)

(declare-fun e!64334 () Bool)

(assert (=> b!98709 (= e!64334 (= (apply!92 lt!49753 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98710 () Bool)

(declare-fun e!64322 () Unit!2937)

(declare-fun lt!49754 () Unit!2937)

(assert (=> b!98710 (= e!64322 lt!49754)))

(declare-fun lt!49737 () ListLongMap!1535)

(assert (=> b!98710 (= lt!49737 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49738 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49738 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49747 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49747 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49750 () Unit!2937)

(assert (=> b!98710 (= lt!49750 (addStillContains!68 lt!49737 lt!49738 (zeroValue!2364 newMap!16) lt!49747))))

(assert (=> b!98710 (contains!800 (+!135 lt!49737 (tuple2!2341 lt!49738 (zeroValue!2364 newMap!16))) lt!49747)))

(declare-fun lt!49736 () Unit!2937)

(assert (=> b!98710 (= lt!49736 lt!49750)))

(declare-fun lt!49749 () ListLongMap!1535)

(assert (=> b!98710 (= lt!49749 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49746 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49746 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49748 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49748 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49739 () Unit!2937)

(assert (=> b!98710 (= lt!49739 (addApplyDifferent!68 lt!49749 lt!49746 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49748))))

(assert (=> b!98710 (= (apply!92 (+!135 lt!49749 (tuple2!2341 lt!49746 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49748) (apply!92 lt!49749 lt!49748))))

(declare-fun lt!49734 () Unit!2937)

(assert (=> b!98710 (= lt!49734 lt!49739)))

(declare-fun lt!49742 () ListLongMap!1535)

(assert (=> b!98710 (= lt!49742 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49741 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49741 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49743 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49743 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49735 () Unit!2937)

(assert (=> b!98710 (= lt!49735 (addApplyDifferent!68 lt!49742 lt!49741 (zeroValue!2364 newMap!16) lt!49743))))

(assert (=> b!98710 (= (apply!92 (+!135 lt!49742 (tuple2!2341 lt!49741 (zeroValue!2364 newMap!16))) lt!49743) (apply!92 lt!49742 lt!49743))))

(declare-fun lt!49751 () Unit!2937)

(assert (=> b!98710 (= lt!49751 lt!49735)))

(declare-fun lt!49745 () ListLongMap!1535)

(assert (=> b!98710 (= lt!49745 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49752 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49752 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49744 () (_ BitVec 64))

(assert (=> b!98710 (= lt!49744 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98710 (= lt!49754 (addApplyDifferent!68 lt!49745 lt!49752 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49744))))

(assert (=> b!98710 (= (apply!92 (+!135 lt!49745 (tuple2!2341 lt!49752 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49744) (apply!92 lt!49745 lt!49744))))

(declare-fun b!98711 () Bool)

(declare-fun e!64332 () ListLongMap!1535)

(assert (=> b!98711 (= e!64332 (+!135 call!10091 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98712 () Bool)

(declare-fun call!10087 () ListLongMap!1535)

(assert (=> b!98712 (= e!64324 call!10087)))

(declare-fun b!98713 () Bool)

(declare-fun e!64328 () Bool)

(assert (=> b!98713 (= e!64328 (= (apply!92 lt!49753 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10086 () ListLongMap!1535)

(declare-fun bm!10086 () Bool)

(declare-fun call!10085 () ListLongMap!1535)

(declare-fun c!16790 () Bool)

(declare-fun c!16792 () Bool)

(assert (=> bm!10086 (= call!10091 (+!135 (ite c!16792 call!10085 (ite c!16790 call!10086 call!10087)) (ite (or c!16792 c!16790) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98714 () Bool)

(assert (=> b!98714 (= e!64326 e!64334)))

(declare-fun res!49680 () Bool)

(assert (=> b!98714 (= res!49680 call!10089)))

(assert (=> b!98714 (=> (not res!49680) (not e!64334))))

(declare-fun b!98715 () Bool)

(declare-fun Unit!2987 () Unit!2937)

(assert (=> b!98715 (= e!64322 Unit!2987)))

(declare-fun bm!10087 () Bool)

(assert (=> bm!10087 (= call!10086 call!10085)))

(declare-fun b!98716 () Bool)

(assert (=> b!98716 (= e!64332 e!64323)))

(assert (=> b!98716 (= c!16790 (and (not (= (bvand lt!49006 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!49006 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98717 () Bool)

(assert (=> b!98717 (= e!64331 (not call!10088))))

(declare-fun b!98718 () Bool)

(declare-fun c!16794 () Bool)

(assert (=> b!98718 (= c!16794 (and (not (= (bvand lt!49006 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!49006 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98718 (= e!64323 e!64324)))

(declare-fun b!98719 () Bool)

(assert (=> b!98719 (= e!64331 e!64328)))

(declare-fun res!49684 () Bool)

(assert (=> b!98719 (= res!49684 call!10088)))

(assert (=> b!98719 (=> (not res!49684) (not e!64328))))

(declare-fun b!98720 () Bool)

(assert (=> b!98720 (= e!64333 e!64326)))

(declare-fun c!16793 () Bool)

(assert (=> b!98720 (= c!16793 (not (= (bvand lt!49006 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!98721 () Bool)

(assert (=> b!98721 (= e!64325 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10085 () Bool)

(assert (=> bm!10085 (= call!10085 (getCurrentListMapNoExtraKeys!100 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun d!26499 () Bool)

(assert (=> d!26499 e!64333))

(declare-fun res!49681 () Bool)

(assert (=> d!26499 (=> (not res!49681) (not e!64333))))

(assert (=> d!26499 (= res!49681 (or (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))))

(declare-fun lt!49740 () ListLongMap!1535)

(assert (=> d!26499 (= lt!49753 lt!49740)))

(declare-fun lt!49733 () Unit!2937)

(assert (=> d!26499 (= lt!49733 e!64322)))

(declare-fun c!16789 () Bool)

(declare-fun e!64330 () Bool)

(assert (=> d!26499 (= c!16789 e!64330)))

(declare-fun res!49678 () Bool)

(assert (=> d!26499 (=> (not res!49678) (not e!64330))))

(assert (=> d!26499 (= res!49678 (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26499 (= lt!49740 e!64332)))

(assert (=> d!26499 (= c!16792 (and (not (= (bvand lt!49006 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!49006 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26499 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26499 (= (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49753)))

(declare-fun b!98722 () Bool)

(assert (=> b!98722 (= e!64330 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10088 () Bool)

(assert (=> bm!10088 (= call!10087 call!10086)))

(declare-fun b!98723 () Bool)

(assert (=> b!98723 (= e!64327 e!64329)))

(declare-fun res!49677 () Bool)

(assert (=> b!98723 (=> (not res!49677) (not e!64329))))

(assert (=> b!98723 (= res!49677 (contains!800 lt!49753 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98723 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_keys!4171 newMap!16))))))

(assert (= (and d!26499 c!16792) b!98711))

(assert (= (and d!26499 (not c!16792)) b!98716))

(assert (= (and b!98716 c!16790) b!98704))

(assert (= (and b!98716 (not c!16790)) b!98718))

(assert (= (and b!98718 c!16794) b!98707))

(assert (= (and b!98718 (not c!16794)) b!98712))

(assert (= (or b!98707 b!98712) bm!10088))

(assert (= (or b!98704 bm!10088) bm!10087))

(assert (= (or b!98704 b!98707) bm!10084))

(assert (= (or b!98711 bm!10087) bm!10085))

(assert (= (or b!98711 bm!10084) bm!10086))

(assert (= (and d!26499 res!49678) b!98722))

(assert (= (and d!26499 c!16789) b!98710))

(assert (= (and d!26499 (not c!16789)) b!98715))

(assert (= (and d!26499 res!49681) b!98705))

(assert (= (and b!98705 res!49682) b!98721))

(assert (= (and b!98705 (not res!49685)) b!98723))

(assert (= (and b!98723 res!49677) b!98708))

(assert (= (and b!98705 res!49683) b!98706))

(assert (= (and b!98706 c!16791) b!98719))

(assert (= (and b!98706 (not c!16791)) b!98717))

(assert (= (and b!98719 res!49684) b!98713))

(assert (= (or b!98719 b!98717) bm!10083))

(assert (= (and b!98706 res!49679) b!98720))

(assert (= (and b!98720 c!16793) b!98714))

(assert (= (and b!98720 (not c!16793)) b!98703))

(assert (= (and b!98714 res!49680) b!98709))

(assert (= (or b!98714 b!98703) bm!10082))

(declare-fun b_lambda!4395 () Bool)

(assert (=> (not b_lambda!4395) (not b!98708)))

(assert (=> b!98708 t!5542))

(declare-fun b_and!6083 () Bool)

(assert (= b_and!6079 (and (=> t!5542 result!3275) b_and!6083)))

(assert (=> b!98708 t!5544))

(declare-fun b_and!6085 () Bool)

(assert (= b_and!6081 (and (=> t!5544 result!3277) b_and!6085)))

(declare-fun m!108669 () Bool)

(assert (=> b!98709 m!108669))

(declare-fun m!108671 () Bool)

(assert (=> bm!10083 m!108671))

(assert (=> b!98723 m!106891))

(assert (=> b!98723 m!106891))

(declare-fun m!108673 () Bool)

(assert (=> b!98723 m!108673))

(assert (=> d!26499 m!106895))

(declare-fun m!108675 () Bool)

(assert (=> b!98713 m!108675))

(declare-fun m!108677 () Bool)

(assert (=> bm!10086 m!108677))

(assert (=> b!98722 m!106891))

(assert (=> b!98722 m!106891))

(assert (=> b!98722 m!106901))

(declare-fun m!108679 () Bool)

(assert (=> b!98711 m!108679))

(assert (=> b!98721 m!106891))

(assert (=> b!98721 m!106891))

(assert (=> b!98721 m!106901))

(assert (=> b!98708 m!107129))

(assert (=> b!98708 m!106907))

(assert (=> b!98708 m!107131))

(assert (=> b!98708 m!106891))

(declare-fun m!108681 () Bool)

(assert (=> b!98708 m!108681))

(assert (=> b!98708 m!106891))

(assert (=> b!98708 m!107129))

(assert (=> b!98708 m!106907))

(declare-fun m!108683 () Bool)

(assert (=> b!98710 m!108683))

(declare-fun m!108685 () Bool)

(assert (=> b!98710 m!108685))

(declare-fun m!108687 () Bool)

(assert (=> b!98710 m!108687))

(declare-fun m!108689 () Bool)

(assert (=> b!98710 m!108689))

(declare-fun m!108691 () Bool)

(assert (=> b!98710 m!108691))

(declare-fun m!108693 () Bool)

(assert (=> b!98710 m!108693))

(declare-fun m!108695 () Bool)

(assert (=> b!98710 m!108695))

(declare-fun m!108697 () Bool)

(assert (=> b!98710 m!108697))

(declare-fun m!108699 () Bool)

(assert (=> b!98710 m!108699))

(assert (=> b!98710 m!106891))

(assert (=> b!98710 m!108697))

(assert (=> b!98710 m!106673))

(declare-fun m!108701 () Bool)

(assert (=> b!98710 m!108701))

(assert (=> b!98710 m!108685))

(declare-fun m!108703 () Bool)

(assert (=> b!98710 m!108703))

(declare-fun m!108705 () Bool)

(assert (=> b!98710 m!108705))

(assert (=> b!98710 m!106673))

(declare-fun m!108707 () Bool)

(assert (=> b!98710 m!108707))

(declare-fun m!108709 () Bool)

(assert (=> b!98710 m!108709))

(assert (=> b!98710 m!108691))

(assert (=> b!98710 m!108683))

(declare-fun m!108711 () Bool)

(assert (=> b!98710 m!108711))

(assert (=> b!98710 m!106673))

(declare-fun m!108713 () Bool)

(assert (=> b!98710 m!108713))

(assert (=> bm!10085 m!106673))

(assert (=> bm!10085 m!108701))

(declare-fun m!108715 () Bool)

(assert (=> bm!10082 m!108715))

(assert (=> d!26101 d!26499))

(assert (=> d!26101 d!26065))

(declare-fun d!26501 () Bool)

(assert (=> d!26501 (= (+!135 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26501 true))

(declare-fun _$8!85 () Unit!2937)

(assert (=> d!26501 (= (choose!593 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!49006 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) _$8!85)))

(declare-fun bs!4091 () Bool)

(assert (= bs!4091 d!26501))

(assert (=> bs!4091 m!106761))

(assert (=> bs!4091 m!106761))

(assert (=> bs!4091 m!107287))

(assert (=> bs!4091 m!106673))

(assert (=> bs!4091 m!107289))

(assert (=> d!26101 d!26501))

(assert (=> d!26101 d!26209))

(declare-fun d!26503 () Bool)

(declare-fun e!64335 () Bool)

(assert (=> d!26503 e!64335))

(declare-fun res!49686 () Bool)

(assert (=> d!26503 (=> res!49686 e!64335)))

(declare-fun lt!49756 () Bool)

(assert (=> d!26503 (= res!49686 (not lt!49756))))

(declare-fun lt!49758 () Bool)

(assert (=> d!26503 (= lt!49756 lt!49758)))

(declare-fun lt!49755 () Unit!2937)

(declare-fun e!64336 () Unit!2937)

(assert (=> d!26503 (= lt!49755 e!64336)))

(declare-fun c!16795 () Bool)

(assert (=> d!26503 (= c!16795 lt!49758)))

(assert (=> d!26503 (= lt!49758 (containsKey!154 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26503 (= (contains!800 lt!49293 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49756)))

(declare-fun b!98724 () Bool)

(declare-fun lt!49757 () Unit!2937)

(assert (=> b!98724 (= e!64336 lt!49757)))

(assert (=> b!98724 (= lt!49757 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> b!98724 (isDefined!103 (getValueByKey!150 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98725 () Bool)

(declare-fun Unit!2988 () Unit!2937)

(assert (=> b!98725 (= e!64336 Unit!2988)))

(declare-fun b!98726 () Bool)

(assert (=> b!98726 (= e!64335 (isDefined!103 (getValueByKey!150 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26503 c!16795) b!98724))

(assert (= (and d!26503 (not c!16795)) b!98725))

(assert (= (and d!26503 (not res!49686)) b!98726))

(declare-fun m!108717 () Bool)

(assert (=> d!26503 m!108717))

(declare-fun m!108719 () Bool)

(assert (=> b!98724 m!108719))

(assert (=> b!98724 m!107391))

(assert (=> b!98724 m!107391))

(declare-fun m!108721 () Bool)

(assert (=> b!98724 m!108721))

(assert (=> b!98726 m!107391))

(assert (=> b!98726 m!107391))

(assert (=> b!98726 m!108721))

(assert (=> d!26137 d!26503))

(declare-fun b!98729 () Bool)

(declare-fun e!64338 () Option!156)

(assert (=> b!98729 (= e!64338 (getValueByKey!150 (t!5534 lt!49295) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98727 () Bool)

(declare-fun e!64337 () Option!156)

(assert (=> b!98727 (= e!64337 (Some!155 (_2!1181 (h!2170 lt!49295))))))

(declare-fun b!98730 () Bool)

(assert (=> b!98730 (= e!64338 None!154)))

(declare-fun b!98728 () Bool)

(assert (=> b!98728 (= e!64337 e!64338)))

(declare-fun c!16797 () Bool)

(assert (=> b!98728 (= c!16797 (and ((_ is Cons!1576) lt!49295) (not (= (_1!1181 (h!2170 lt!49295)) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun d!26505 () Bool)

(declare-fun c!16796 () Bool)

(assert (=> d!26505 (= c!16796 (and ((_ is Cons!1576) lt!49295) (= (_1!1181 (h!2170 lt!49295)) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26505 (= (getValueByKey!150 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64337)))

(assert (= (and d!26505 c!16796) b!98727))

(assert (= (and d!26505 (not c!16796)) b!98728))

(assert (= (and b!98728 c!16797) b!98729))

(assert (= (and b!98728 (not c!16797)) b!98730))

(declare-fun m!108723 () Bool)

(assert (=> b!98729 m!108723))

(assert (=> d!26137 d!26505))

(declare-fun d!26507 () Bool)

(assert (=> d!26507 (= (getValueByKey!150 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49759 () Unit!2937)

(assert (=> d!26507 (= lt!49759 (choose!598 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64339 () Bool)

(assert (=> d!26507 e!64339))

(declare-fun res!49687 () Bool)

(assert (=> d!26507 (=> (not res!49687) (not e!64339))))

(assert (=> d!26507 (= res!49687 (isStrictlySorted!304 lt!49295))))

(assert (=> d!26507 (= (lemmaContainsTupThenGetReturnValue!66 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49759)))

(declare-fun b!98731 () Bool)

(declare-fun res!49688 () Bool)

(assert (=> b!98731 (=> (not res!49688) (not e!64339))))

(assert (=> b!98731 (= res!49688 (containsKey!154 lt!49295 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98732 () Bool)

(assert (=> b!98732 (= e!64339 (contains!803 lt!49295 (tuple2!2341 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26507 res!49687) b!98731))

(assert (= (and b!98731 res!49688) b!98732))

(assert (=> d!26507 m!107385))

(declare-fun m!108725 () Bool)

(assert (=> d!26507 m!108725))

(declare-fun m!108727 () Bool)

(assert (=> d!26507 m!108727))

(declare-fun m!108729 () Bool)

(assert (=> b!98731 m!108729))

(declare-fun m!108731 () Bool)

(assert (=> b!98732 m!108731))

(assert (=> d!26137 d!26507))

(declare-fun b!98733 () Bool)

(declare-fun res!49689 () Bool)

(declare-fun e!64342 () Bool)

(assert (=> b!98733 (=> (not res!49689) (not e!64342))))

(declare-fun lt!49760 () List!1580)

(assert (=> b!98733 (= res!49689 (containsKey!154 lt!49760 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64343 () List!1580)

(declare-fun b!98734 () Bool)

(declare-fun c!16800 () Bool)

(declare-fun c!16801 () Bool)

(assert (=> b!98734 (= e!64343 (ite c!16800 (t!5534 (toList!783 call!9889)) (ite c!16801 (Cons!1576 (h!2170 (toList!783 call!9889)) (t!5534 (toList!783 call!9889))) Nil!1577)))))

(declare-fun bm!10089 () Bool)

(declare-fun c!16798 () Bool)

(declare-fun call!10092 () List!1580)

(assert (=> bm!10089 (= call!10092 ($colon$colon!78 e!64343 (ite c!16798 (h!2170 (toList!783 call!9889)) (tuple2!2341 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16799 () Bool)

(assert (=> bm!10089 (= c!16799 c!16798)))

(declare-fun d!26509 () Bool)

(assert (=> d!26509 e!64342))

(declare-fun res!49690 () Bool)

(assert (=> d!26509 (=> (not res!49690) (not e!64342))))

(assert (=> d!26509 (= res!49690 (isStrictlySorted!304 lt!49760))))

(declare-fun e!64344 () List!1580)

(assert (=> d!26509 (= lt!49760 e!64344)))

(assert (=> d!26509 (= c!16798 (and ((_ is Cons!1576) (toList!783 call!9889)) (bvslt (_1!1181 (h!2170 (toList!783 call!9889))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26509 (isStrictlySorted!304 (toList!783 call!9889))))

(assert (=> d!26509 (= (insertStrictlySorted!69 (toList!783 call!9889) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49760)))

(declare-fun b!98735 () Bool)

(assert (=> b!98735 (= e!64344 call!10092)))

(declare-fun b!98736 () Bool)

(declare-fun e!64340 () List!1580)

(declare-fun call!10093 () List!1580)

(assert (=> b!98736 (= e!64340 call!10093)))

(declare-fun b!98737 () Bool)

(declare-fun e!64341 () List!1580)

(declare-fun call!10094 () List!1580)

(assert (=> b!98737 (= e!64341 call!10094)))

(declare-fun b!98738 () Bool)

(assert (=> b!98738 (= c!16801 (and ((_ is Cons!1576) (toList!783 call!9889)) (bvsgt (_1!1181 (h!2170 (toList!783 call!9889))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98738 (= e!64341 e!64340)))

(declare-fun b!98739 () Bool)

(assert (=> b!98739 (= e!64342 (contains!803 lt!49760 (tuple2!2341 (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98740 () Bool)

(assert (=> b!98740 (= e!64340 call!10093)))

(declare-fun bm!10090 () Bool)

(assert (=> bm!10090 (= call!10093 call!10094)))

(declare-fun bm!10091 () Bool)

(assert (=> bm!10091 (= call!10094 call!10092)))

(declare-fun b!98741 () Bool)

(assert (=> b!98741 (= e!64344 e!64341)))

(assert (=> b!98741 (= c!16800 (and ((_ is Cons!1576) (toList!783 call!9889)) (= (_1!1181 (h!2170 (toList!783 call!9889))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98742 () Bool)

(assert (=> b!98742 (= e!64343 (insertStrictlySorted!69 (t!5534 (toList!783 call!9889)) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26509 c!16798) b!98735))

(assert (= (and d!26509 (not c!16798)) b!98741))

(assert (= (and b!98741 c!16800) b!98737))

(assert (= (and b!98741 (not c!16800)) b!98738))

(assert (= (and b!98738 c!16801) b!98736))

(assert (= (and b!98738 (not c!16801)) b!98740))

(assert (= (or b!98736 b!98740) bm!10090))

(assert (= (or b!98737 bm!10090) bm!10091))

(assert (= (or b!98735 bm!10091) bm!10089))

(assert (= (and bm!10089 c!16799) b!98742))

(assert (= (and bm!10089 (not c!16799)) b!98734))

(assert (= (and d!26509 res!49690) b!98733))

(assert (= (and b!98733 res!49689) b!98739))

(declare-fun m!108733 () Bool)

(assert (=> b!98739 m!108733))

(declare-fun m!108735 () Bool)

(assert (=> d!26509 m!108735))

(declare-fun m!108737 () Bool)

(assert (=> d!26509 m!108737))

(declare-fun m!108739 () Bool)

(assert (=> bm!10089 m!108739))

(declare-fun m!108741 () Bool)

(assert (=> b!98742 m!108741))

(declare-fun m!108743 () Bool)

(assert (=> b!98733 m!108743))

(assert (=> d!26137 d!26509))

(declare-fun d!26511 () Bool)

(assert (=> d!26511 (isDefined!103 (getValueByKey!150 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(declare-fun lt!49761 () Unit!2937)

(assert (=> d!26511 (= lt!49761 (choose!596 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(declare-fun e!64345 () Bool)

(assert (=> d!26511 e!64345))

(declare-fun res!49691 () Bool)

(assert (=> d!26511 (=> (not res!49691) (not e!64345))))

(assert (=> d!26511 (= res!49691 (isStrictlySorted!304 (toList!783 call!9949)))))

(assert (=> d!26511 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))) lt!49761)))

(declare-fun b!98743 () Bool)

(assert (=> b!98743 (= e!64345 (containsKey!154 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(assert (= (and d!26511 res!49691) b!98743))

(assert (=> d!26511 m!107425))

(assert (=> d!26511 m!107425))

(assert (=> d!26511 m!107427))

(declare-fun m!108745 () Bool)

(assert (=> d!26511 m!108745))

(declare-fun m!108747 () Bool)

(assert (=> d!26511 m!108747))

(assert (=> b!98743 m!107421))

(assert (=> b!98118 d!26511))

(assert (=> b!98118 d!26159))

(assert (=> b!98118 d!26161))

(declare-fun d!26513 () Bool)

(declare-fun e!64346 () Bool)

(assert (=> d!26513 e!64346))

(declare-fun res!49692 () Bool)

(assert (=> d!26513 (=> res!49692 e!64346)))

(declare-fun lt!49763 () Bool)

(assert (=> d!26513 (= res!49692 (not lt!49763))))

(declare-fun lt!49765 () Bool)

(assert (=> d!26513 (= lt!49763 lt!49765)))

(declare-fun lt!49762 () Unit!2937)

(declare-fun e!64347 () Unit!2937)

(assert (=> d!26513 (= lt!49762 e!64347)))

(declare-fun c!16802 () Bool)

(assert (=> d!26513 (= c!16802 lt!49765)))

(assert (=> d!26513 (= lt!49765 (containsKey!154 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26513 (= (contains!800 lt!49228 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49763)))

(declare-fun b!98744 () Bool)

(declare-fun lt!49764 () Unit!2937)

(assert (=> b!98744 (= e!64347 lt!49764)))

(assert (=> b!98744 (= lt!49764 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> b!98744 (isDefined!103 (getValueByKey!150 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98745 () Bool)

(declare-fun Unit!2989 () Unit!2937)

(assert (=> b!98745 (= e!64347 Unit!2989)))

(declare-fun b!98746 () Bool)

(assert (=> b!98746 (= e!64346 (isDefined!103 (getValueByKey!150 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26513 c!16802) b!98744))

(assert (= (and d!26513 (not c!16802)) b!98745))

(assert (= (and d!26513 (not res!49692)) b!98746))

(declare-fun m!108749 () Bool)

(assert (=> d!26513 m!108749))

(declare-fun m!108751 () Bool)

(assert (=> b!98744 m!108751))

(assert (=> b!98744 m!107253))

(assert (=> b!98744 m!107253))

(declare-fun m!108753 () Bool)

(assert (=> b!98744 m!108753))

(assert (=> b!98746 m!107253))

(assert (=> b!98746 m!107253))

(assert (=> b!98746 m!108753))

(assert (=> d!26093 d!26513))

(declare-fun e!64349 () Option!156)

(declare-fun b!98749 () Bool)

(assert (=> b!98749 (= e!64349 (getValueByKey!150 (t!5534 lt!49230) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98747 () Bool)

(declare-fun e!64348 () Option!156)

(assert (=> b!98747 (= e!64348 (Some!155 (_2!1181 (h!2170 lt!49230))))))

(declare-fun b!98750 () Bool)

(assert (=> b!98750 (= e!64349 None!154)))

(declare-fun b!98748 () Bool)

(assert (=> b!98748 (= e!64348 e!64349)))

(declare-fun c!16804 () Bool)

(assert (=> b!98748 (= c!16804 (and ((_ is Cons!1576) lt!49230) (not (= (_1!1181 (h!2170 lt!49230)) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16803 () Bool)

(declare-fun d!26515 () Bool)

(assert (=> d!26515 (= c!16803 (and ((_ is Cons!1576) lt!49230) (= (_1!1181 (h!2170 lt!49230)) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26515 (= (getValueByKey!150 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64348)))

(assert (= (and d!26515 c!16803) b!98747))

(assert (= (and d!26515 (not c!16803)) b!98748))

(assert (= (and b!98748 c!16804) b!98749))

(assert (= (and b!98748 (not c!16804)) b!98750))

(declare-fun m!108755 () Bool)

(assert (=> b!98749 m!108755))

(assert (=> d!26093 d!26515))

(declare-fun d!26517 () Bool)

(assert (=> d!26517 (= (getValueByKey!150 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49766 () Unit!2937)

(assert (=> d!26517 (= lt!49766 (choose!598 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64350 () Bool)

(assert (=> d!26517 e!64350))

(declare-fun res!49693 () Bool)

(assert (=> d!26517 (=> (not res!49693) (not e!64350))))

(assert (=> d!26517 (= res!49693 (isStrictlySorted!304 lt!49230))))

(assert (=> d!26517 (= (lemmaContainsTupThenGetReturnValue!66 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49766)))

(declare-fun b!98751 () Bool)

(declare-fun res!49694 () Bool)

(assert (=> b!98751 (=> (not res!49694) (not e!64350))))

(assert (=> b!98751 (= res!49694 (containsKey!154 lt!49230 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98752 () Bool)

(assert (=> b!98752 (= e!64350 (contains!803 lt!49230 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26517 res!49693) b!98751))

(assert (= (and b!98751 res!49694) b!98752))

(assert (=> d!26517 m!107247))

(declare-fun m!108757 () Bool)

(assert (=> d!26517 m!108757))

(declare-fun m!108759 () Bool)

(assert (=> d!26517 m!108759))

(declare-fun m!108761 () Bool)

(assert (=> b!98751 m!108761))

(declare-fun m!108763 () Bool)

(assert (=> b!98752 m!108763))

(assert (=> d!26093 d!26517))

(declare-fun b!98753 () Bool)

(declare-fun res!49695 () Bool)

(declare-fun e!64353 () Bool)

(assert (=> b!98753 (=> (not res!49695) (not e!64353))))

(declare-fun lt!49767 () List!1580)

(assert (=> b!98753 (= res!49695 (containsKey!154 lt!49767 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64354 () List!1580)

(declare-fun c!16808 () Bool)

(declare-fun b!98754 () Bool)

(declare-fun c!16807 () Bool)

(assert (=> b!98754 (= e!64354 (ite c!16807 (t!5534 (toList!783 lt!48905)) (ite c!16808 (Cons!1576 (h!2170 (toList!783 lt!48905)) (t!5534 (toList!783 lt!48905))) Nil!1577)))))

(declare-fun bm!10092 () Bool)

(declare-fun call!10095 () List!1580)

(declare-fun c!16805 () Bool)

(assert (=> bm!10092 (= call!10095 ($colon$colon!78 e!64354 (ite c!16805 (h!2170 (toList!783 lt!48905)) (tuple2!2341 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16806 () Bool)

(assert (=> bm!10092 (= c!16806 c!16805)))

(declare-fun d!26519 () Bool)

(assert (=> d!26519 e!64353))

(declare-fun res!49696 () Bool)

(assert (=> d!26519 (=> (not res!49696) (not e!64353))))

(assert (=> d!26519 (= res!49696 (isStrictlySorted!304 lt!49767))))

(declare-fun e!64355 () List!1580)

(assert (=> d!26519 (= lt!49767 e!64355)))

(assert (=> d!26519 (= c!16805 (and ((_ is Cons!1576) (toList!783 lt!48905)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48905))) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26519 (isStrictlySorted!304 (toList!783 lt!48905))))

(assert (=> d!26519 (= (insertStrictlySorted!69 (toList!783 lt!48905) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49767)))

(declare-fun b!98755 () Bool)

(assert (=> b!98755 (= e!64355 call!10095)))

(declare-fun b!98756 () Bool)

(declare-fun e!64351 () List!1580)

(declare-fun call!10096 () List!1580)

(assert (=> b!98756 (= e!64351 call!10096)))

(declare-fun b!98757 () Bool)

(declare-fun e!64352 () List!1580)

(declare-fun call!10097 () List!1580)

(assert (=> b!98757 (= e!64352 call!10097)))

(declare-fun b!98758 () Bool)

(assert (=> b!98758 (= c!16808 (and ((_ is Cons!1576) (toList!783 lt!48905)) (bvsgt (_1!1181 (h!2170 (toList!783 lt!48905))) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98758 (= e!64352 e!64351)))

(declare-fun b!98759 () Bool)

(assert (=> b!98759 (= e!64353 (contains!803 lt!49767 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98760 () Bool)

(assert (=> b!98760 (= e!64351 call!10096)))

(declare-fun bm!10093 () Bool)

(assert (=> bm!10093 (= call!10096 call!10097)))

(declare-fun bm!10094 () Bool)

(assert (=> bm!10094 (= call!10097 call!10095)))

(declare-fun b!98761 () Bool)

(assert (=> b!98761 (= e!64355 e!64352)))

(assert (=> b!98761 (= c!16807 (and ((_ is Cons!1576) (toList!783 lt!48905)) (= (_1!1181 (h!2170 (toList!783 lt!48905))) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98762 () Bool)

(assert (=> b!98762 (= e!64354 (insertStrictlySorted!69 (t!5534 (toList!783 lt!48905)) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26519 c!16805) b!98755))

(assert (= (and d!26519 (not c!16805)) b!98761))

(assert (= (and b!98761 c!16807) b!98757))

(assert (= (and b!98761 (not c!16807)) b!98758))

(assert (= (and b!98758 c!16808) b!98756))

(assert (= (and b!98758 (not c!16808)) b!98760))

(assert (= (or b!98756 b!98760) bm!10093))

(assert (= (or b!98757 bm!10093) bm!10094))

(assert (= (or b!98755 bm!10094) bm!10092))

(assert (= (and bm!10092 c!16806) b!98762))

(assert (= (and bm!10092 (not c!16806)) b!98754))

(assert (= (and d!26519 res!49696) b!98753))

(assert (= (and b!98753 res!49695) b!98759))

(declare-fun m!108765 () Bool)

(assert (=> b!98759 m!108765))

(declare-fun m!108767 () Bool)

(assert (=> d!26519 m!108767))

(declare-fun m!108769 () Bool)

(assert (=> d!26519 m!108769))

(declare-fun m!108771 () Bool)

(assert (=> bm!10092 m!108771))

(declare-fun m!108773 () Bool)

(assert (=> b!98762 m!108773))

(declare-fun m!108775 () Bool)

(assert (=> b!98753 m!108775))

(assert (=> d!26093 d!26519))

(declare-fun d!26521 () Bool)

(assert (=> d!26521 (= (inRange!0 (ite c!16578 (index!3156 lt!49138) (ite c!16579 (index!3155 lt!49136) (index!3158 lt!49136))) (mask!6578 newMap!16)) (and (bvsge (ite c!16578 (index!3156 lt!49138) (ite c!16579 (index!3155 lt!49136) (index!3158 lt!49136))) #b00000000000000000000000000000000) (bvslt (ite c!16578 (index!3156 lt!49138) (ite c!16579 (index!3155 lt!49136) (index!3158 lt!49136))) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9979 d!26521))

(assert (=> b!97813 d!26253))

(assert (=> b!97813 d!26255))

(declare-fun d!26523 () Bool)

(declare-fun e!64356 () Bool)

(assert (=> d!26523 e!64356))

(declare-fun res!49697 () Bool)

(assert (=> d!26523 (=> res!49697 e!64356)))

(declare-fun lt!49769 () Bool)

(assert (=> d!26523 (= res!49697 (not lt!49769))))

(declare-fun lt!49771 () Bool)

(assert (=> d!26523 (= lt!49769 lt!49771)))

(declare-fun lt!49768 () Unit!2937)

(declare-fun e!64357 () Unit!2937)

(assert (=> d!26523 (= lt!49768 e!64357)))

(declare-fun c!16809 () Bool)

(assert (=> d!26523 (= c!16809 lt!49771)))

(assert (=> d!26523 (= lt!49771 (containsKey!154 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26523 (= (contains!800 lt!49283 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!49769)))

(declare-fun b!98763 () Bool)

(declare-fun lt!49770 () Unit!2937)

(assert (=> b!98763 (= e!64357 lt!49770)))

(assert (=> b!98763 (= lt!49770 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98763 (isDefined!103 (getValueByKey!150 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98764 () Bool)

(declare-fun Unit!2990 () Unit!2937)

(assert (=> b!98764 (= e!64357 Unit!2990)))

(declare-fun b!98765 () Bool)

(assert (=> b!98765 (= e!64356 (isDefined!103 (getValueByKey!150 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (= (and d!26523 c!16809) b!98763))

(assert (= (and d!26523 (not c!16809)) b!98764))

(assert (= (and d!26523 (not res!49697)) b!98765))

(declare-fun m!108777 () Bool)

(assert (=> d!26523 m!108777))

(declare-fun m!108779 () Bool)

(assert (=> b!98763 m!108779))

(assert (=> b!98763 m!107367))

(assert (=> b!98763 m!107367))

(declare-fun m!108781 () Bool)

(assert (=> b!98763 m!108781))

(assert (=> b!98765 m!107367))

(assert (=> b!98765 m!107367))

(assert (=> b!98765 m!108781))

(assert (=> d!26129 d!26523))

(declare-fun b!98768 () Bool)

(declare-fun e!64359 () Option!156)

(assert (=> b!98768 (= e!64359 (getValueByKey!150 (t!5534 lt!49285) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98766 () Bool)

(declare-fun e!64358 () Option!156)

(assert (=> b!98766 (= e!64358 (Some!155 (_2!1181 (h!2170 lt!49285))))))

(declare-fun b!98769 () Bool)

(assert (=> b!98769 (= e!64359 None!154)))

(declare-fun b!98767 () Bool)

(assert (=> b!98767 (= e!64358 e!64359)))

(declare-fun c!16811 () Bool)

(assert (=> b!98767 (= c!16811 (and ((_ is Cons!1576) lt!49285) (not (= (_1!1181 (h!2170 lt!49285)) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun c!16810 () Bool)

(declare-fun d!26525 () Bool)

(assert (=> d!26525 (= c!16810 (and ((_ is Cons!1576) lt!49285) (= (_1!1181 (h!2170 lt!49285)) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (=> d!26525 (= (getValueByKey!150 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) e!64358)))

(assert (= (and d!26525 c!16810) b!98766))

(assert (= (and d!26525 (not c!16810)) b!98767))

(assert (= (and b!98767 c!16811) b!98768))

(assert (= (and b!98767 (not c!16811)) b!98769))

(declare-fun m!108783 () Bool)

(assert (=> b!98768 m!108783))

(assert (=> d!26129 d!26525))

(declare-fun d!26527 () Bool)

(assert (=> d!26527 (= (getValueByKey!150 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (Some!155 (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun lt!49772 () Unit!2937)

(assert (=> d!26527 (= lt!49772 (choose!598 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun e!64360 () Bool)

(assert (=> d!26527 e!64360))

(declare-fun res!49698 () Bool)

(assert (=> d!26527 (=> (not res!49698) (not e!64360))))

(assert (=> d!26527 (= res!49698 (isStrictlySorted!304 lt!49285))))

(assert (=> d!26527 (= (lemmaContainsTupThenGetReturnValue!66 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!49772)))

(declare-fun b!98770 () Bool)

(declare-fun res!49699 () Bool)

(assert (=> b!98770 (=> (not res!49699) (not e!64360))))

(assert (=> b!98770 (= res!49699 (containsKey!154 lt!49285 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98771 () Bool)

(assert (=> b!98771 (= e!64360 (contains!803 lt!49285 (tuple2!2341 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (= (and d!26527 res!49698) b!98770))

(assert (= (and b!98770 res!49699) b!98771))

(assert (=> d!26527 m!107361))

(declare-fun m!108785 () Bool)

(assert (=> d!26527 m!108785))

(declare-fun m!108787 () Bool)

(assert (=> d!26527 m!108787))

(declare-fun m!108789 () Bool)

(assert (=> b!98770 m!108789))

(declare-fun m!108791 () Bool)

(assert (=> b!98771 m!108791))

(assert (=> d!26129 d!26527))

(declare-fun b!98772 () Bool)

(declare-fun res!49700 () Bool)

(declare-fun e!64363 () Bool)

(assert (=> b!98772 (=> (not res!49700) (not e!64363))))

(declare-fun lt!49773 () List!1580)

(assert (=> b!98772 (= res!49700 (containsKey!154 lt!49773 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun c!16814 () Bool)

(declare-fun e!64364 () List!1580)

(declare-fun b!98773 () Bool)

(declare-fun c!16815 () Bool)

(assert (=> b!98773 (= e!64364 (ite c!16814 (t!5534 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (ite c!16815 (Cons!1576 (h!2170 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (t!5534 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))))) Nil!1577)))))

(declare-fun c!16812 () Bool)

(declare-fun bm!10095 () Bool)

(declare-fun call!10098 () List!1580)

(assert (=> bm!10095 (= call!10098 ($colon$colon!78 e!64364 (ite c!16812 (h!2170 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (tuple2!2341 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun c!16813 () Bool)

(assert (=> bm!10095 (= c!16813 c!16812)))

(declare-fun d!26529 () Bool)

(assert (=> d!26529 e!64363))

(declare-fun res!49701 () Bool)

(assert (=> d!26529 (=> (not res!49701) (not e!64363))))

(assert (=> d!26529 (= res!49701 (isStrictlySorted!304 lt!49773))))

(declare-fun e!64365 () List!1580)

(assert (=> d!26529 (= lt!49773 e!64365)))

(assert (=> d!26529 (= c!16812 (and ((_ is Cons!1576) (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (bvslt (_1!1181 (h!2170 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (=> d!26529 (isStrictlySorted!304 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))))))

(assert (=> d!26529 (= (insertStrictlySorted!69 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!49773)))

(declare-fun b!98774 () Bool)

(assert (=> b!98774 (= e!64365 call!10098)))

(declare-fun b!98775 () Bool)

(declare-fun e!64361 () List!1580)

(declare-fun call!10099 () List!1580)

(assert (=> b!98775 (= e!64361 call!10099)))

(declare-fun b!98776 () Bool)

(declare-fun e!64362 () List!1580)

(declare-fun call!10100 () List!1580)

(assert (=> b!98776 (= e!64362 call!10100)))

(declare-fun b!98777 () Bool)

(assert (=> b!98777 (= c!16815 (and ((_ is Cons!1576) (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (bvsgt (_1!1181 (h!2170 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (=> b!98777 (= e!64362 e!64361)))

(declare-fun b!98778 () Bool)

(assert (=> b!98778 (= e!64363 (contains!803 lt!49773 (tuple2!2341 (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun b!98779 () Bool)

(assert (=> b!98779 (= e!64361 call!10099)))

(declare-fun bm!10096 () Bool)

(assert (=> bm!10096 (= call!10099 call!10100)))

(declare-fun bm!10097 () Bool)

(assert (=> bm!10097 (= call!10100 call!10098)))

(declare-fun b!98780 () Bool)

(assert (=> b!98780 (= e!64365 e!64362)))

(assert (=> b!98780 (= c!16814 (and ((_ is Cons!1576) (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (= (_1!1181 (h!2170 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885))))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun b!98781 () Bool)

(assert (=> b!98781 (= e!64364 (insertStrictlySorted!69 (t!5534 (toList!783 (ite c!16510 call!9883 (ite c!16508 call!9884 call!9885)))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (_2!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26529 c!16812) b!98774))

(assert (= (and d!26529 (not c!16812)) b!98780))

(assert (= (and b!98780 c!16814) b!98776))

(assert (= (and b!98780 (not c!16814)) b!98777))

(assert (= (and b!98777 c!16815) b!98775))

(assert (= (and b!98777 (not c!16815)) b!98779))

(assert (= (or b!98775 b!98779) bm!10096))

(assert (= (or b!98776 bm!10096) bm!10097))

(assert (= (or b!98774 bm!10097) bm!10095))

(assert (= (and bm!10095 c!16813) b!98781))

(assert (= (and bm!10095 (not c!16813)) b!98773))

(assert (= (and d!26529 res!49701) b!98772))

(assert (= (and b!98772 res!49700) b!98778))

(declare-fun m!108793 () Bool)

(assert (=> b!98778 m!108793))

(declare-fun m!108795 () Bool)

(assert (=> d!26529 m!108795))

(declare-fun m!108797 () Bool)

(assert (=> d!26529 m!108797))

(declare-fun m!108799 () Bool)

(assert (=> bm!10095 m!108799))

(declare-fun m!108801 () Bool)

(assert (=> b!98781 m!108801))

(declare-fun m!108803 () Bool)

(assert (=> b!98772 m!108803))

(assert (=> d!26129 d!26529))

(declare-fun d!26531 () Bool)

(assert (=> d!26531 (= (apply!92 lt!49194 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1284 (getValueByKey!150 (toList!783 lt!49194) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4092 () Bool)

(assert (= bs!4092 d!26531))

(assert (=> bs!4092 m!106891))

(declare-fun m!108805 () Bool)

(assert (=> bs!4092 m!108805))

(assert (=> bs!4092 m!108805))

(declare-fun m!108807 () Bool)

(assert (=> bs!4092 m!108807))

(assert (=> b!97935 d!26531))

(declare-fun d!26533 () Bool)

(declare-fun c!16816 () Bool)

(assert (=> d!26533 (= c!16816 ((_ is ValueCellFull!972) (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64366 () V!3155)

(assert (=> d!26533 (= (get!1280 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64366)))

(declare-fun b!98782 () Bool)

(assert (=> b!98782 (= e!64366 (get!1282 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98783 () Bool)

(assert (=> b!98783 (= e!64366 (get!1283 (select (arr!2016 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26533 c!16816) b!98782))

(assert (= (and d!26533 (not c!16816)) b!98783))

(assert (=> b!98782 m!107129))

(assert (=> b!98782 m!106907))

(declare-fun m!108809 () Bool)

(assert (=> b!98782 m!108809))

(assert (=> b!98783 m!107129))

(assert (=> b!98783 m!106907))

(declare-fun m!108811 () Bool)

(assert (=> b!98783 m!108811))

(assert (=> b!97935 d!26533))

(declare-fun b!98784 () Bool)

(declare-fun e!64368 () Bool)

(declare-fun call!10101 () Bool)

(assert (=> b!98784 (= e!64368 call!10101)))

(declare-fun b!98785 () Bool)

(declare-fun e!64367 () Bool)

(assert (=> b!98785 (= e!64367 call!10101)))

(declare-fun b!98786 () Bool)

(declare-fun e!64369 () Bool)

(assert (=> b!98786 (= e!64369 e!64367)))

(declare-fun c!16817 () Bool)

(assert (=> b!98786 (= c!16817 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun b!98787 () Bool)

(assert (=> b!98787 (= e!64367 e!64368)))

(declare-fun lt!49776 () (_ BitVec 64))

(assert (=> b!98787 (= lt!49776 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000))))

(declare-fun lt!49774 () Unit!2937)

(assert (=> b!98787 (= lt!49774 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 (_2!1180 lt!48997)) lt!49776 #b00000000000000000000000000000000))))

(assert (=> b!98787 (arrayContainsKey!0 (_keys!4171 (_2!1180 lt!48997)) lt!49776 #b00000000000000000000000000000000)))

(declare-fun lt!49775 () Unit!2937)

(assert (=> b!98787 (= lt!49775 lt!49774)))

(declare-fun res!49702 () Bool)

(assert (=> b!98787 (= res!49702 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000) (_keys!4171 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997))) (Found!253 #b00000000000000000000000000000000)))))

(assert (=> b!98787 (=> (not res!49702) (not e!64368))))

(declare-fun d!26535 () Bool)

(declare-fun res!49703 () Bool)

(assert (=> d!26535 (=> res!49703 e!64369)))

(assert (=> d!26535 (= res!49703 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (=> d!26535 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997))) e!64369)))

(declare-fun bm!10098 () Bool)

(assert (=> bm!10098 (= call!10101 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 (_2!1180 lt!48997)) (mask!6578 (_2!1180 lt!48997))))))

(assert (= (and d!26535 (not res!49703)) b!98786))

(assert (= (and b!98786 c!16817) b!98787))

(assert (= (and b!98786 (not c!16817)) b!98785))

(assert (= (and b!98787 res!49702) b!98784))

(assert (= (or b!98784 b!98785) bm!10098))

(assert (=> b!98786 m!108211))

(assert (=> b!98786 m!108211))

(assert (=> b!98786 m!108221))

(assert (=> b!98787 m!108211))

(declare-fun m!108813 () Bool)

(assert (=> b!98787 m!108813))

(declare-fun m!108815 () Bool)

(assert (=> b!98787 m!108815))

(assert (=> b!98787 m!108211))

(declare-fun m!108817 () Bool)

(assert (=> b!98787 m!108817))

(declare-fun m!108819 () Bool)

(assert (=> bm!10098 m!108819))

(assert (=> b!97815 d!26535))

(declare-fun d!26537 () Bool)

(assert (=> d!26537 (= (apply!92 lt!49031 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1284 (getValueByKey!150 (toList!783 lt!49031) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4093 () Bool)

(assert (= bs!4093 d!26537))

(assert (=> bs!4093 m!106891))

(assert (=> bs!4093 m!107785))

(assert (=> bs!4093 m!107785))

(declare-fun m!108821 () Bool)

(assert (=> bs!4093 m!108821))

(assert (=> b!97795 d!26537))

(declare-fun d!26539 () Bool)

(declare-fun c!16818 () Bool)

(assert (=> d!26539 (= c!16818 ((_ is ValueCellFull!972) (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!64370 () V!3155)

(assert (=> d!26539 (= (get!1280 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64370)))

(declare-fun b!98788 () Bool)

(assert (=> b!98788 (= e!64370 (get!1282 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98789 () Bool)

(assert (=> b!98789 (= e!64370 (get!1283 (select (arr!2016 (ite c!16552 (_values!2464 newMap!16) (array!4244 (store (arr!2016 (_values!2464 newMap!16)) (index!3156 lt!48986) (ValueCellFull!972 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2266 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26539 c!16818) b!98788))

(assert (= (and d!26539 (not c!16818)) b!98789))

(assert (=> b!98788 m!106905))

(assert (=> b!98788 m!106907))

(declare-fun m!108823 () Bool)

(assert (=> b!98788 m!108823))

(assert (=> b!98789 m!106905))

(assert (=> b!98789 m!106907))

(declare-fun m!108825 () Bool)

(assert (=> b!98789 m!108825))

(assert (=> b!97795 d!26539))

(declare-fun d!26541 () Bool)

(assert (=> d!26541 (= (inRange!0 (ite c!16630 (index!3155 lt!49290) (index!3158 lt!49290)) (mask!6578 newMap!16)) (and (bvsge (ite c!16630 (index!3155 lt!49290) (index!3158 lt!49290)) #b00000000000000000000000000000000) (bvslt (ite c!16630 (index!3155 lt!49290) (index!3158 lt!49290)) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10008 d!26541))

(assert (=> bm!9978 d!26051))

(declare-fun d!26543 () Bool)

(assert (=> d!26543 (= (get!1284 (getValueByKey!150 (toList!783 lt!48905) lt!48906)) (v!2804 (getValueByKey!150 (toList!783 lt!48905) lt!48906)))))

(assert (=> d!26069 d!26543))

(declare-fun b!98792 () Bool)

(declare-fun e!64372 () Option!156)

(assert (=> b!98792 (= e!64372 (getValueByKey!150 (t!5534 (toList!783 lt!48905)) lt!48906))))

(declare-fun b!98790 () Bool)

(declare-fun e!64371 () Option!156)

(assert (=> b!98790 (= e!64371 (Some!155 (_2!1181 (h!2170 (toList!783 lt!48905)))))))

(declare-fun b!98793 () Bool)

(assert (=> b!98793 (= e!64372 None!154)))

(declare-fun b!98791 () Bool)

(assert (=> b!98791 (= e!64371 e!64372)))

(declare-fun c!16820 () Bool)

(assert (=> b!98791 (= c!16820 (and ((_ is Cons!1576) (toList!783 lt!48905)) (not (= (_1!1181 (h!2170 (toList!783 lt!48905))) lt!48906))))))

(declare-fun d!26545 () Bool)

(declare-fun c!16819 () Bool)

(assert (=> d!26545 (= c!16819 (and ((_ is Cons!1576) (toList!783 lt!48905)) (= (_1!1181 (h!2170 (toList!783 lt!48905))) lt!48906)))))

(assert (=> d!26545 (= (getValueByKey!150 (toList!783 lt!48905) lt!48906) e!64371)))

(assert (= (and d!26545 c!16819) b!98790))

(assert (= (and d!26545 (not c!16819)) b!98791))

(assert (= (and b!98791 c!16820) b!98792))

(assert (= (and b!98791 (not c!16820)) b!98793))

(declare-fun m!108827 () Bool)

(assert (=> b!98792 m!108827))

(assert (=> d!26069 d!26545))

(declare-fun d!26547 () Bool)

(declare-fun res!49704 () Bool)

(declare-fun e!64373 () Bool)

(assert (=> d!26547 (=> res!49704 e!64373)))

(assert (=> d!26547 (= res!49704 (and ((_ is Cons!1576) (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (= (_1!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26547 (= (containsKey!154 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64373)))

(declare-fun b!98794 () Bool)

(declare-fun e!64374 () Bool)

(assert (=> b!98794 (= e!64373 e!64374)))

(declare-fun res!49705 () Bool)

(assert (=> b!98794 (=> (not res!49705) (not e!64374))))

(assert (=> b!98794 (= res!49705 (and (or (not ((_ is Cons!1576) (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (bvsle (_1!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) ((_ is Cons!1576) (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (bvslt (_1!1181 (h!2170 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(declare-fun b!98795 () Bool)

(assert (=> b!98795 (= e!64374 (containsKey!154 (t!5534 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26547 (not res!49704)) b!98794))

(assert (= (and b!98794 res!49705) b!98795))

(assert (=> b!98795 m!106647))

(declare-fun m!108829 () Bool)

(assert (=> b!98795 m!108829))

(assert (=> d!26063 d!26547))

(declare-fun b!98798 () Bool)

(declare-fun e!64376 () Option!156)

(assert (=> b!98798 (= e!64376 (getValueByKey!150 (t!5534 (toList!783 lt!49212)) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98796 () Bool)

(declare-fun e!64375 () Option!156)

(assert (=> b!98796 (= e!64375 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49212)))))))

(declare-fun b!98799 () Bool)

(assert (=> b!98799 (= e!64376 None!154)))

(declare-fun b!98797 () Bool)

(assert (=> b!98797 (= e!64375 e!64376)))

(declare-fun c!16822 () Bool)

(assert (=> b!98797 (= c!16822 (and ((_ is Cons!1576) (toList!783 lt!49212)) (not (= (_1!1181 (h!2170 (toList!783 lt!49212))) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16821 () Bool)

(declare-fun d!26549 () Bool)

(assert (=> d!26549 (= c!16821 (and ((_ is Cons!1576) (toList!783 lt!49212)) (= (_1!1181 (h!2170 (toList!783 lt!49212))) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26549 (= (getValueByKey!150 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64375)))

(assert (= (and d!26549 c!16821) b!98796))

(assert (= (and d!26549 (not c!16821)) b!98797))

(assert (= (and b!98797 c!16822) b!98798))

(assert (= (and b!98797 (not c!16822)) b!98799))

(declare-fun m!108831 () Bool)

(assert (=> b!98798 m!108831))

(assert (=> b!97961 d!26549))

(assert (=> d!26065 d!26209))

(assert (=> d!26033 d!26209))

(declare-fun d!26551 () Bool)

(assert (=> d!26551 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49777 () Unit!2937)

(assert (=> d!26551 (= lt!49777 (choose!596 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64377 () Bool)

(assert (=> d!26551 e!64377))

(declare-fun res!49706 () Bool)

(assert (=> d!26551 (=> (not res!49706) (not e!64377))))

(assert (=> d!26551 (= res!49706 (isStrictlySorted!304 (toList!783 lt!48916)))))

(assert (=> d!26551 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000) lt!49777)))

(declare-fun b!98800 () Bool)

(assert (=> b!98800 (= e!64377 (containsKey!154 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26551 res!49706) b!98800))

(assert (=> d!26551 m!107303))

(assert (=> d!26551 m!107303))

(assert (=> d!26551 m!107305))

(declare-fun m!108833 () Bool)

(assert (=> d!26551 m!108833))

(assert (=> d!26551 m!107731))

(assert (=> b!98800 m!107299))

(assert (=> b!98011 d!26551))

(assert (=> b!98011 d!26247))

(assert (=> b!98011 d!26249))

(declare-fun d!26553 () Bool)

(assert (=> d!26553 (= (get!1283 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98010 d!26553))

(assert (=> d!26151 d!26005))

(assert (=> b!97949 d!26211))

(declare-fun d!26555 () Bool)

(declare-fun res!49707 () Bool)

(declare-fun e!64378 () Bool)

(assert (=> d!26555 (=> res!49707 e!64378)))

(assert (=> d!26555 (= res!49707 (and ((_ is Cons!1576) (toList!783 call!9949)) (= (_1!1181 (h!2170 (toList!783 call!9949))) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))))

(assert (=> d!26555 (= (containsKey!154 (toList!783 call!9949) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))) e!64378)))

(declare-fun b!98801 () Bool)

(declare-fun e!64379 () Bool)

(assert (=> b!98801 (= e!64378 e!64379)))

(declare-fun res!49708 () Bool)

(assert (=> b!98801 (=> (not res!49708) (not e!64379))))

(assert (=> b!98801 (= res!49708 (and (or (not ((_ is Cons!1576) (toList!783 call!9949))) (bvsle (_1!1181 (h!2170 (toList!783 call!9949))) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))) ((_ is Cons!1576) (toList!783 call!9949)) (bvslt (_1!1181 (h!2170 (toList!783 call!9949))) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986))))))))

(declare-fun b!98802 () Bool)

(assert (=> b!98802 (= e!64379 (containsKey!154 (t!5534 (toList!783 call!9949)) (ite c!16544 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!48986)))))))

(assert (= (and d!26555 (not res!49707)) b!98801))

(assert (= (and b!98801 res!49708) b!98802))

(declare-fun m!108835 () Bool)

(assert (=> b!98802 m!108835))

(assert (=> d!26149 d!26555))

(assert (=> b!97809 d!26211))

(declare-fun d!26557 () Bool)

(declare-fun e!64380 () Bool)

(assert (=> d!26557 e!64380))

(declare-fun res!49709 () Bool)

(assert (=> d!26557 (=> res!49709 e!64380)))

(declare-fun lt!49779 () Bool)

(assert (=> d!26557 (= res!49709 (not lt!49779))))

(declare-fun lt!49781 () Bool)

(assert (=> d!26557 (= lt!49779 lt!49781)))

(declare-fun lt!49778 () Unit!2937)

(declare-fun e!64381 () Unit!2937)

(assert (=> d!26557 (= lt!49778 e!64381)))

(declare-fun c!16823 () Bool)

(assert (=> d!26557 (= c!16823 lt!49781)))

(assert (=> d!26557 (= lt!49781 (containsKey!154 (toList!783 lt!49251) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26557 (= (contains!800 lt!49251 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49779)))

(declare-fun b!98803 () Bool)

(declare-fun lt!49780 () Unit!2937)

(assert (=> b!98803 (= e!64381 lt!49780)))

(assert (=> b!98803 (= lt!49780 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49251) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98803 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98804 () Bool)

(declare-fun Unit!2991 () Unit!2937)

(assert (=> b!98804 (= e!64381 Unit!2991)))

(declare-fun b!98805 () Bool)

(assert (=> b!98805 (= e!64380 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26557 c!16823) b!98803))

(assert (= (and d!26557 (not c!16823)) b!98804))

(assert (= (and d!26557 (not res!49709)) b!98805))

(declare-fun m!108837 () Bool)

(assert (=> d!26557 m!108837))

(declare-fun m!108839 () Bool)

(assert (=> b!98803 m!108839))

(declare-fun m!108841 () Bool)

(assert (=> b!98803 m!108841))

(assert (=> b!98803 m!108841))

(declare-fun m!108843 () Bool)

(assert (=> b!98803 m!108843))

(assert (=> b!98805 m!108841))

(assert (=> b!98805 m!108841))

(assert (=> b!98805 m!108843))

(assert (=> b!98004 d!26557))

(assert (=> bm!10007 d!26051))

(declare-fun b!98806 () Bool)

(declare-fun e!64385 () Bool)

(declare-fun e!64384 () Bool)

(assert (=> b!98806 (= e!64385 e!64384)))

(declare-fun c!16824 () Bool)

(assert (=> b!98806 (= c!16824 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun call!10102 () Bool)

(declare-fun bm!10099 () Bool)

(assert (=> bm!10099 (= call!10102 (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16824 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16618 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578))) (ite c!16618 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)))))))

(declare-fun b!98807 () Bool)

(declare-fun e!64383 () Bool)

(assert (=> b!98807 (= e!64383 (contains!802 (ite c!16618 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!26559 () Bool)

(declare-fun res!49710 () Bool)

(declare-fun e!64382 () Bool)

(assert (=> d!26559 (=> res!49710 e!64382)))

(assert (=> d!26559 (= res!49710 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26559 (= (arrayNoDuplicates!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16618 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578))) e!64382)))

(declare-fun b!98808 () Bool)

(assert (=> b!98808 (= e!64382 e!64385)))

(declare-fun res!49712 () Bool)

(assert (=> b!98808 (=> (not res!49712) (not e!64385))))

(assert (=> b!98808 (= res!49712 (not e!64383))))

(declare-fun res!49711 () Bool)

(assert (=> b!98808 (=> (not res!49711) (not e!64383))))

(assert (=> b!98808 (= res!49711 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!98809 () Bool)

(assert (=> b!98809 (= e!64384 call!10102)))

(declare-fun b!98810 () Bool)

(assert (=> b!98810 (= e!64384 call!10102)))

(assert (= (and d!26559 (not res!49710)) b!98808))

(assert (= (and b!98808 res!49711) b!98807))

(assert (= (and b!98808 res!49712) b!98806))

(assert (= (and b!98806 c!16824) b!98809))

(assert (= (and b!98806 (not c!16824)) b!98810))

(assert (= (or b!98809 b!98810) bm!10099))

(declare-fun m!108845 () Bool)

(assert (=> b!98806 m!108845))

(assert (=> b!98806 m!108845))

(declare-fun m!108847 () Bool)

(assert (=> b!98806 m!108847))

(assert (=> bm!10099 m!108845))

(declare-fun m!108849 () Bool)

(assert (=> bm!10099 m!108849))

(assert (=> b!98807 m!108845))

(assert (=> b!98807 m!108845))

(declare-fun m!108851 () Bool)

(assert (=> b!98807 m!108851))

(assert (=> b!98808 m!108845))

(assert (=> b!98808 m!108845))

(assert (=> b!98808 m!108847))

(assert (=> bm!9999 d!26559))

(declare-fun b!98811 () Bool)

(declare-fun e!64389 () Bool)

(declare-fun e!64388 () Bool)

(assert (=> b!98811 (= e!64389 e!64388)))

(declare-fun c!16825 () Bool)

(assert (=> b!98811 (= c!16825 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun call!10103 () Bool)

(declare-fun bm!10100 () Bool)

(assert (=> bm!10100 (= call!10103 (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16825 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16617 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1578) Nil!1578)) (ite c!16617 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1578) Nil!1578))))))

(declare-fun b!98812 () Bool)

(declare-fun e!64387 () Bool)

(assert (=> b!98812 (= e!64387 (contains!802 (ite c!16617 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1578) Nil!1578) (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!26561 () Bool)

(declare-fun res!49713 () Bool)

(declare-fun e!64386 () Bool)

(assert (=> d!26561 (=> res!49713 e!64386)))

(assert (=> d!26561 (= res!49713 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(assert (=> d!26561 (= (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16617 (Cons!1577 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1578) Nil!1578)) e!64386)))

(declare-fun b!98813 () Bool)

(assert (=> b!98813 (= e!64386 e!64389)))

(declare-fun res!49715 () Bool)

(assert (=> b!98813 (=> (not res!49715) (not e!64389))))

(assert (=> b!98813 (= res!49715 (not e!64387))))

(declare-fun res!49714 () Bool)

(assert (=> b!98813 (=> (not res!49714) (not e!64387))))

(assert (=> b!98813 (= res!49714 (validKeyInArray!0 (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98814 () Bool)

(assert (=> b!98814 (= e!64388 call!10103)))

(declare-fun b!98815 () Bool)

(assert (=> b!98815 (= e!64388 call!10103)))

(assert (= (and d!26561 (not res!49713)) b!98813))

(assert (= (and b!98813 res!49714) b!98812))

(assert (= (and b!98813 res!49715) b!98811))

(assert (= (and b!98811 c!16825) b!98814))

(assert (= (and b!98811 (not c!16825)) b!98815))

(assert (= (or b!98814 b!98815) bm!10100))

(assert (=> b!98811 m!108267))

(assert (=> b!98811 m!108267))

(assert (=> b!98811 m!108269))

(assert (=> bm!10100 m!108267))

(declare-fun m!108853 () Bool)

(assert (=> bm!10100 m!108853))

(assert (=> b!98812 m!108267))

(assert (=> b!98812 m!108267))

(declare-fun m!108855 () Bool)

(assert (=> b!98812 m!108855))

(assert (=> b!98813 m!108267))

(assert (=> b!98813 m!108267))

(assert (=> b!98813 m!108269))

(assert (=> bm!9998 d!26561))

(declare-fun b!98818 () Bool)

(declare-fun e!64391 () Option!156)

(assert (=> b!98818 (= e!64391 (getValueByKey!150 (t!5534 (toList!783 lt!49293)) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98816 () Bool)

(declare-fun e!64390 () Option!156)

(assert (=> b!98816 (= e!64390 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49293)))))))

(declare-fun b!98819 () Bool)

(assert (=> b!98819 (= e!64391 None!154)))

(declare-fun b!98817 () Bool)

(assert (=> b!98817 (= e!64390 e!64391)))

(declare-fun c!16827 () Bool)

(assert (=> b!98817 (= c!16827 (and ((_ is Cons!1576) (toList!783 lt!49293)) (not (= (_1!1181 (h!2170 (toList!783 lt!49293))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun d!26563 () Bool)

(declare-fun c!16826 () Bool)

(assert (=> d!26563 (= c!16826 (and ((_ is Cons!1576) (toList!783 lt!49293)) (= (_1!1181 (h!2170 (toList!783 lt!49293))) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26563 (= (getValueByKey!150 (toList!783 lt!49293) (_1!1181 (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64390)))

(assert (= (and d!26563 c!16826) b!98816))

(assert (= (and d!26563 (not c!16826)) b!98817))

(assert (= (and b!98817 c!16827) b!98818))

(assert (= (and b!98817 (not c!16827)) b!98819))

(declare-fun m!108857 () Bool)

(assert (=> b!98818 m!108857))

(assert (=> b!98108 d!26563))

(declare-fun b!98822 () Bool)

(declare-fun e!64393 () Option!156)

(assert (=> b!98822 (= e!64393 (getValueByKey!150 (t!5534 (toList!783 lt!49228)) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98820 () Bool)

(declare-fun e!64392 () Option!156)

(assert (=> b!98820 (= e!64392 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49228)))))))

(declare-fun b!98823 () Bool)

(assert (=> b!98823 (= e!64393 None!154)))

(declare-fun b!98821 () Bool)

(assert (=> b!98821 (= e!64392 e!64393)))

(declare-fun c!16829 () Bool)

(assert (=> b!98821 (= c!16829 (and ((_ is Cons!1576) (toList!783 lt!49228)) (not (= (_1!1181 (h!2170 (toList!783 lt!49228))) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun d!26565 () Bool)

(declare-fun c!16828 () Bool)

(assert (=> d!26565 (= c!16828 (and ((_ is Cons!1576) (toList!783 lt!49228)) (= (_1!1181 (h!2170 (toList!783 lt!49228))) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26565 (= (getValueByKey!150 (toList!783 lt!49228) (_1!1181 (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64392)))

(assert (= (and d!26565 c!16828) b!98820))

(assert (= (and d!26565 (not c!16828)) b!98821))

(assert (= (and b!98821 c!16829) b!98822))

(assert (= (and b!98821 (not c!16829)) b!98823))

(declare-fun m!108859 () Bool)

(assert (=> b!98822 m!108859))

(assert (=> b!97970 d!26565))

(assert (=> b!98000 d!26257))

(declare-fun d!26567 () Bool)

(declare-fun res!49719 () Bool)

(declare-fun e!64394 () Bool)

(assert (=> d!26567 (=> (not res!49719) (not e!64394))))

(assert (=> d!26567 (= res!49719 (validMask!0 (mask!6578 (v!2800 (underlying!337 thiss!992)))))))

(assert (=> d!26567 (= (simpleValid!68 (v!2800 (underlying!337 thiss!992))) e!64394)))

(declare-fun b!98826 () Bool)

(declare-fun res!49717 () Bool)

(assert (=> b!98826 (=> (not res!49717) (not e!64394))))

(assert (=> b!98826 (= res!49717 (= (size!2269 (v!2800 (underlying!337 thiss!992))) (bvadd (_size!475 (v!2800 (underlying!337 thiss!992))) (bvsdiv (bvadd (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98824 () Bool)

(declare-fun res!49718 () Bool)

(assert (=> b!98824 (=> (not res!49718) (not e!64394))))

(assert (=> b!98824 (= res!49718 (and (= (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992)))) (bvadd (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001)) (= (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (size!2266 (_values!2464 (v!2800 (underlying!337 thiss!992))))) (bvsge (_size!475 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!475 (v!2800 (underlying!337 thiss!992))) (bvadd (mask!6578 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!98827 () Bool)

(assert (=> b!98827 (= e!64394 (and (bvsge (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!475 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!98825 () Bool)

(declare-fun res!49716 () Bool)

(assert (=> b!98825 (=> (not res!49716) (not e!64394))))

(assert (=> b!98825 (= res!49716 (bvsge (size!2269 (v!2800 (underlying!337 thiss!992))) (_size!475 (v!2800 (underlying!337 thiss!992)))))))

(assert (= (and d!26567 res!49719) b!98824))

(assert (= (and b!98824 res!49718) b!98825))

(assert (= (and b!98825 res!49716) b!98826))

(assert (= (and b!98826 res!49717) b!98827))

(assert (=> d!26567 m!106681))

(declare-fun m!108861 () Bool)

(assert (=> b!98826 m!108861))

(assert (=> b!98825 m!108861))

(assert (=> d!26141 d!26567))

(declare-fun d!26569 () Bool)

(assert (=> d!26569 (= (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48907)) (v!2804 (getValueByKey!150 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48907)))))

(assert (=> d!26097 d!26569))

(declare-fun e!64396 () Option!156)

(declare-fun b!98830 () Bool)

(assert (=> b!98830 (= e!64396 (getValueByKey!150 (t!5534 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!48907))))

(declare-fun e!64395 () Option!156)

(declare-fun b!98828 () Bool)

(assert (=> b!98828 (= e!64395 (Some!155 (_2!1181 (h!2170 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun b!98831 () Bool)

(assert (=> b!98831 (= e!64396 None!154)))

(declare-fun b!98829 () Bool)

(assert (=> b!98829 (= e!64395 e!64396)))

(declare-fun c!16831 () Bool)

(assert (=> b!98829 (= c!16831 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (not (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48907))))))

(declare-fun c!16830 () Bool)

(declare-fun d!26571 () Bool)

(assert (=> d!26571 (= c!16830 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48907)))))

(assert (=> d!26571 (= (getValueByKey!150 (toList!783 (+!135 lt!48908 (tuple2!2341 lt!48915 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48907) e!64395)))

(assert (= (and d!26571 c!16830) b!98828))

(assert (= (and d!26571 (not c!16830)) b!98829))

(assert (= (and b!98829 c!16831) b!98830))

(assert (= (and b!98829 (not c!16831)) b!98831))

(declare-fun m!108863 () Bool)

(assert (=> b!98830 m!108863))

(assert (=> d!26097 d!26571))

(declare-fun b!98834 () Bool)

(declare-fun e!64398 () Option!156)

(assert (=> b!98834 (= e!64398 (getValueByKey!150 (t!5534 (toList!783 lt!49283)) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98832 () Bool)

(declare-fun e!64397 () Option!156)

(assert (=> b!98832 (= e!64397 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49283)))))))

(declare-fun b!98835 () Bool)

(assert (=> b!98835 (= e!64398 None!154)))

(declare-fun b!98833 () Bool)

(assert (=> b!98833 (= e!64397 e!64398)))

(declare-fun c!16833 () Bool)

(assert (=> b!98833 (= c!16833 (and ((_ is Cons!1576) (toList!783 lt!49283)) (not (= (_1!1181 (h!2170 (toList!783 lt!49283))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun d!26573 () Bool)

(declare-fun c!16832 () Bool)

(assert (=> d!26573 (= c!16832 (and ((_ is Cons!1576) (toList!783 lt!49283)) (= (_1!1181 (h!2170 (toList!783 lt!49283))) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(assert (=> d!26573 (= (getValueByKey!150 (toList!783 lt!49283) (_1!1181 (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) e!64397)))

(assert (= (and d!26573 c!16832) b!98832))

(assert (= (and d!26573 (not c!16832)) b!98833))

(assert (= (and b!98833 c!16833) b!98834))

(assert (= (and b!98833 (not c!16833)) b!98835))

(declare-fun m!108865 () Bool)

(assert (=> b!98834 m!108865))

(assert (=> b!98070 d!26573))

(declare-fun d!26575 () Bool)

(assert (=> d!26575 (= (apply!92 lt!49162 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1284 (getValueByKey!150 (toList!783 lt!49162) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4094 () Bool)

(assert (= bs!4094 d!26575))

(assert (=> bs!4094 m!106891))

(declare-fun m!108867 () Bool)

(assert (=> bs!4094 m!108867))

(assert (=> bs!4094 m!108867))

(declare-fun m!108869 () Bool)

(assert (=> bs!4094 m!108869))

(assert (=> b!97905 d!26575))

(declare-fun c!16834 () Bool)

(declare-fun d!26577 () Bool)

(assert (=> d!26577 (= c!16834 ((_ is ValueCellFull!972) (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000)))))

(declare-fun e!64399 () V!3155)

(assert (=> d!26577 (= (get!1280 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64399)))

(declare-fun b!98836 () Bool)

(assert (=> b!98836 (= e!64399 (get!1282 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98837 () Bool)

(assert (=> b!98837 (= e!64399 (get!1283 (select (arr!2016 (ite (or c!16552 c!16544) (_values!2464 newMap!16) lt!49004)) #b00000000000000000000000000000000) (dynLambda!368 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26577 c!16834) b!98836))

(assert (= (and d!26577 (not c!16834)) b!98837))

(assert (=> b!98836 m!107059))

(assert (=> b!98836 m!106907))

(declare-fun m!108871 () Bool)

(assert (=> b!98836 m!108871))

(assert (=> b!98837 m!107059))

(assert (=> b!98837 m!106907))

(declare-fun m!108873 () Bool)

(assert (=> b!98837 m!108873))

(assert (=> b!97905 d!26577))

(declare-fun d!26579 () Bool)

(declare-fun res!49720 () Bool)

(declare-fun e!64400 () Bool)

(assert (=> d!26579 (=> res!49720 e!64400)))

(assert (=> d!26579 (= res!49720 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26579 (= (containsKey!154 (toList!783 lt!48916) #b1000000000000000000000000000000000000000000000000000000000000000) e!64400)))

(declare-fun b!98838 () Bool)

(declare-fun e!64401 () Bool)

(assert (=> b!98838 (= e!64400 e!64401)))

(declare-fun res!49721 () Bool)

(assert (=> b!98838 (=> (not res!49721) (not e!64401))))

(assert (=> b!98838 (= res!49721 (and (or (not ((_ is Cons!1576) (toList!783 lt!48916))) (bvsle (_1!1181 (h!2170 (toList!783 lt!48916))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1576) (toList!783 lt!48916)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48916))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98839 () Bool)

(assert (=> b!98839 (= e!64401 (containsKey!154 (t!5534 (toList!783 lt!48916)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26579 (not res!49720)) b!98838))

(assert (= (and b!98838 res!49721) b!98839))

(declare-fun m!108875 () Bool)

(assert (=> b!98839 m!108875))

(assert (=> d!26109 d!26579))

(declare-fun d!26581 () Bool)

(assert (=> d!26581 (= (get!1284 (getValueByKey!150 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48911)) (v!2804 (getValueByKey!150 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48911)))))

(assert (=> d!26089 d!26581))

(declare-fun e!64403 () Option!156)

(declare-fun b!98842 () Bool)

(assert (=> b!98842 (= e!64403 (getValueByKey!150 (t!5534 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) lt!48911))))

(declare-fun e!64402 () Option!156)

(declare-fun b!98840 () Bool)

(assert (=> b!98840 (= e!64402 (Some!155 (_2!1181 (h!2170 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))))

(declare-fun b!98843 () Bool)

(assert (=> b!98843 (= e!64403 None!154)))

(declare-fun b!98841 () Bool)

(assert (=> b!98841 (= e!64402 e!64403)))

(declare-fun c!16836 () Bool)

(assert (=> b!98841 (= c!16836 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (not (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48911))))))

(declare-fun d!26583 () Bool)

(declare-fun c!16835 () Bool)

(assert (=> d!26583 (= c!16835 (and ((_ is Cons!1576) (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))) (= (_1!1181 (h!2170 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))) lt!48911)))))

(assert (=> d!26583 (= (getValueByKey!150 (toList!783 (+!135 lt!48912 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!48911) e!64402)))

(assert (= (and d!26583 c!16835) b!98840))

(assert (= (and d!26583 (not c!16835)) b!98841))

(assert (= (and b!98841 c!16836) b!98842))

(assert (= (and b!98841 (not c!16836)) b!98843))

(declare-fun m!108877 () Bool)

(assert (=> b!98842 m!108877))

(assert (=> d!26089 d!26583))

(declare-fun d!26585 () Bool)

(assert (=> d!26585 (= (size!2269 newMap!16) (bvadd (_size!475 newMap!16) (bvsdiv (bvadd (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!97844 d!26585))

(assert (=> b!97833 d!26211))

(declare-fun b!98856 () Bool)

(declare-fun e!64411 () SeekEntryResult!253)

(assert (=> b!98856 (= e!64411 (MissingVacant!253 (index!3157 lt!49267)))))

(declare-fun b!98857 () Bool)

(declare-fun e!64412 () SeekEntryResult!253)

(declare-fun e!64410 () SeekEntryResult!253)

(assert (=> b!98857 (= e!64412 e!64410)))

(declare-fun c!16843 () Bool)

(declare-fun lt!49787 () (_ BitVec 64))

(assert (=> b!98857 (= c!16843 (= lt!49787 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun b!98858 () Bool)

(assert (=> b!98858 (= e!64411 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12959 lt!49267) #b00000000000000000000000000000001) (nextIndex!0 (index!3157 lt!49267) (x!12959 lt!49267) (mask!6578 newMap!16)) (index!3157 lt!49267) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98859 () Bool)

(assert (=> b!98859 (= e!64410 (Found!253 (index!3157 lt!49267)))))

(declare-fun lt!49786 () SeekEntryResult!253)

(declare-fun d!26587 () Bool)

(assert (=> d!26587 (and (or ((_ is Undefined!253) lt!49786) (not ((_ is Found!253) lt!49786)) (and (bvsge (index!3156 lt!49786) #b00000000000000000000000000000000) (bvslt (index!3156 lt!49786) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49786) ((_ is Found!253) lt!49786) (not ((_ is MissingVacant!253) lt!49786)) (not (= (index!3158 lt!49786) (index!3157 lt!49267))) (and (bvsge (index!3158 lt!49786) #b00000000000000000000000000000000) (bvslt (index!3158 lt!49786) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49786) (ite ((_ is Found!253) lt!49786) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49786)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) (and ((_ is MissingVacant!253) lt!49786) (= (index!3158 lt!49786) (index!3157 lt!49267)) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49786)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26587 (= lt!49786 e!64412)))

(declare-fun c!16844 () Bool)

(assert (=> d!26587 (= c!16844 (bvsge (x!12959 lt!49267) #b01111111111111111111111111111110))))

(assert (=> d!26587 (= lt!49787 (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49267)))))

(assert (=> d!26587 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26587 (= (seekKeyOrZeroReturnVacant!0 (x!12959 lt!49267) (index!3157 lt!49267) (index!3157 lt!49267) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49786)))

(declare-fun b!98860 () Bool)

(declare-fun c!16845 () Bool)

(assert (=> b!98860 (= c!16845 (= lt!49787 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98860 (= e!64410 e!64411)))

(declare-fun b!98861 () Bool)

(assert (=> b!98861 (= e!64412 Undefined!253)))

(assert (= (and d!26587 c!16844) b!98861))

(assert (= (and d!26587 (not c!16844)) b!98857))

(assert (= (and b!98857 c!16843) b!98859))

(assert (= (and b!98857 (not c!16843)) b!98860))

(assert (= (and b!98860 c!16845) b!98856))

(assert (= (and b!98860 (not c!16845)) b!98858))

(declare-fun m!108879 () Bool)

(assert (=> b!98858 m!108879))

(assert (=> b!98858 m!108879))

(assert (=> b!98858 m!106647))

(declare-fun m!108881 () Bool)

(assert (=> b!98858 m!108881))

(declare-fun m!108883 () Bool)

(assert (=> d!26587 m!108883))

(declare-fun m!108885 () Bool)

(assert (=> d!26587 m!108885))

(assert (=> d!26587 m!107323))

(assert (=> d!26587 m!106895))

(assert (=> b!98031 d!26587))

(declare-fun d!26589 () Bool)

(declare-fun e!64413 () Bool)

(assert (=> d!26589 e!64413))

(declare-fun res!49722 () Bool)

(assert (=> d!26589 (=> res!49722 e!64413)))

(declare-fun lt!49789 () Bool)

(assert (=> d!26589 (= res!49722 (not lt!49789))))

(declare-fun lt!49791 () Bool)

(assert (=> d!26589 (= lt!49789 lt!49791)))

(declare-fun lt!49788 () Unit!2937)

(declare-fun e!64414 () Unit!2937)

(assert (=> d!26589 (= lt!49788 e!64414)))

(declare-fun c!16846 () Bool)

(assert (=> d!26589 (= c!16846 lt!49791)))

(assert (=> d!26589 (= lt!49791 (containsKey!154 (toList!783 lt!49162) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26589 (= (contains!800 lt!49162 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49789)))

(declare-fun b!98862 () Bool)

(declare-fun lt!49790 () Unit!2937)

(assert (=> b!98862 (= e!64414 lt!49790)))

(assert (=> b!98862 (= lt!49790 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49162) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98862 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98863 () Bool)

(declare-fun Unit!2992 () Unit!2937)

(assert (=> b!98863 (= e!64414 Unit!2992)))

(declare-fun b!98864 () Bool)

(assert (=> b!98864 (= e!64413 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26589 c!16846) b!98862))

(assert (= (and d!26589 (not c!16846)) b!98863))

(assert (= (and d!26589 (not res!49722)) b!98864))

(assert (=> d!26589 m!106891))

(declare-fun m!108887 () Bool)

(assert (=> d!26589 m!108887))

(assert (=> b!98862 m!106891))

(declare-fun m!108889 () Bool)

(assert (=> b!98862 m!108889))

(assert (=> b!98862 m!106891))

(assert (=> b!98862 m!108867))

(assert (=> b!98862 m!108867))

(declare-fun m!108891 () Bool)

(assert (=> b!98862 m!108891))

(assert (=> b!98864 m!106891))

(assert (=> b!98864 m!108867))

(assert (=> b!98864 m!108867))

(assert (=> b!98864 m!108891))

(assert (=> b!97920 d!26589))

(assert (=> b!98117 d!26125))

(declare-fun d!26591 () Bool)

(declare-fun res!49723 () Bool)

(declare-fun e!64415 () Bool)

(assert (=> d!26591 (=> res!49723 e!64415)))

(assert (=> d!26591 (= res!49723 (and ((_ is Cons!1576) (t!5534 (toList!783 lt!48820))) (= (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(assert (=> d!26591 (= (containsKey!154 (t!5534 (toList!783 lt!48820)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) e!64415)))

(declare-fun b!98865 () Bool)

(declare-fun e!64416 () Bool)

(assert (=> b!98865 (= e!64415 e!64416)))

(declare-fun res!49724 () Bool)

(assert (=> b!98865 (=> (not res!49724) (not e!64416))))

(assert (=> b!98865 (= res!49724 (and (or (not ((_ is Cons!1576) (t!5534 (toList!783 lt!48820)))) (bvsle (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))) ((_ is Cons!1576) (t!5534 (toList!783 lt!48820))) (bvslt (_1!1181 (h!2170 (t!5534 (toList!783 lt!48820)))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))))

(declare-fun b!98866 () Bool)

(assert (=> b!98866 (= e!64416 (containsKey!154 (t!5534 (t!5534 (toList!783 lt!48820))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26591 (not res!49723)) b!98865))

(assert (= (and b!98865 res!49724) b!98866))

(assert (=> b!98866 m!106647))

(declare-fun m!108893 () Bool)

(assert (=> b!98866 m!108893))

(assert (=> b!98069 d!26591))

(declare-fun d!26593 () Bool)

(assert (=> d!26593 (= (apply!92 lt!49194 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49194) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4095 () Bool)

(assert (= bs!4095 d!26593))

(assert (=> bs!4095 m!108485))

(assert (=> bs!4095 m!108485))

(declare-fun m!108895 () Bool)

(assert (=> bs!4095 m!108895))

(assert (=> b!97940 d!26593))

(declare-fun d!26595 () Bool)

(assert (=> d!26595 (= (apply!92 lt!49031 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49031) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4096 () Bool)

(assert (= bs!4096 d!26595))

(assert (=> bs!4096 m!108579))

(assert (=> bs!4096 m!108579))

(declare-fun m!108897 () Bool)

(assert (=> bs!4096 m!108897))

(assert (=> b!97800 d!26595))

(assert (=> b!98055 d!26211))

(assert (=> b!97965 d!26413))

(assert (=> b!97965 d!26415))

(declare-fun d!26597 () Bool)

(assert (=> d!26597 (= (get!1284 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2804 (getValueByKey!150 (toList!783 lt!48916) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26053 d!26597))

(assert (=> d!26053 d!26255))

(declare-fun e!64418 () Option!156)

(declare-fun b!98869 () Bool)

(assert (=> b!98869 (= e!64418 (getValueByKey!150 (t!5534 (toList!783 lt!49208)) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98867 () Bool)

(declare-fun e!64417 () Option!156)

(assert (=> b!98867 (= e!64417 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49208)))))))

(declare-fun b!98870 () Bool)

(assert (=> b!98870 (= e!64418 None!154)))

(declare-fun b!98868 () Bool)

(assert (=> b!98868 (= e!64417 e!64418)))

(declare-fun c!16848 () Bool)

(assert (=> b!98868 (= c!16848 (and ((_ is Cons!1576) (toList!783 lt!49208)) (not (= (_1!1181 (h!2170 (toList!783 lt!49208))) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16847 () Bool)

(declare-fun d!26599 () Bool)

(assert (=> d!26599 (= c!16847 (and ((_ is Cons!1576) (toList!783 lt!49208)) (= (_1!1181 (h!2170 (toList!783 lt!49208))) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26599 (= (getValueByKey!150 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64417)))

(assert (= (and d!26599 c!16847) b!98867))

(assert (= (and d!26599 (not c!16847)) b!98868))

(assert (= (and b!98868 c!16848) b!98869))

(assert (= (and b!98868 (not c!16848)) b!98870))

(declare-fun m!108899 () Bool)

(assert (=> b!98869 m!108899))

(assert (=> b!97959 d!26599))

(declare-fun d!26601 () Bool)

(declare-fun e!64419 () Bool)

(assert (=> d!26601 e!64419))

(declare-fun res!49725 () Bool)

(assert (=> d!26601 (=> res!49725 e!64419)))

(declare-fun lt!49793 () Bool)

(assert (=> d!26601 (= res!49725 (not lt!49793))))

(declare-fun lt!49795 () Bool)

(assert (=> d!26601 (= lt!49793 lt!49795)))

(declare-fun lt!49792 () Unit!2937)

(declare-fun e!64420 () Unit!2937)

(assert (=> d!26601 (= lt!49792 e!64420)))

(declare-fun c!16849 () Bool)

(assert (=> d!26601 (= c!16849 lt!49795)))

(assert (=> d!26601 (= lt!49795 (containsKey!154 (toList!783 lt!49162) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26601 (= (contains!800 lt!49162 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49793)))

(declare-fun b!98871 () Bool)

(declare-fun lt!49794 () Unit!2937)

(assert (=> b!98871 (= e!64420 lt!49794)))

(assert (=> b!98871 (= lt!49794 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49162) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98871 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98872 () Bool)

(declare-fun Unit!2993 () Unit!2937)

(assert (=> b!98872 (= e!64420 Unit!2993)))

(declare-fun b!98873 () Bool)

(assert (=> b!98873 (= e!64419 (isDefined!103 (getValueByKey!150 (toList!783 lt!49162) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26601 c!16849) b!98871))

(assert (= (and d!26601 (not c!16849)) b!98872))

(assert (= (and d!26601 (not res!49725)) b!98873))

(declare-fun m!108901 () Bool)

(assert (=> d!26601 m!108901))

(declare-fun m!108903 () Bool)

(assert (=> b!98871 m!108903))

(declare-fun m!108905 () Bool)

(assert (=> b!98871 m!108905))

(assert (=> b!98871 m!108905))

(declare-fun m!108907 () Bool)

(assert (=> b!98871 m!108907))

(assert (=> b!98873 m!108905))

(assert (=> b!98873 m!108905))

(assert (=> b!98873 m!108907))

(assert (=> bm!9981 d!26601))

(declare-fun d!26603 () Bool)

(assert (=> d!26603 (= (apply!92 lt!49194 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49194) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4097 () Bool)

(assert (= bs!4097 d!26603))

(assert (=> bs!4097 m!107831))

(assert (=> bs!4097 m!107831))

(declare-fun m!108909 () Bool)

(assert (=> bs!4097 m!108909))

(assert (=> b!97936 d!26603))

(declare-fun b!98874 () Bool)

(declare-fun e!64424 () Bool)

(declare-fun e!64423 () Bool)

(assert (=> b!98874 (= e!64424 e!64423)))

(declare-fun c!16850 () Bool)

(assert (=> b!98874 (= c!16850 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun bm!10101 () Bool)

(declare-fun call!10104 () Bool)

(assert (=> bm!10101 (= call!10104 (arrayNoDuplicates!0 (_keys!4171 (_2!1180 lt!48997)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16850 (Cons!1577 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000) Nil!1578) Nil!1578)))))

(declare-fun b!98875 () Bool)

(declare-fun e!64422 () Bool)

(assert (=> b!98875 (= e!64422 (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun d!26605 () Bool)

(declare-fun res!49726 () Bool)

(declare-fun e!64421 () Bool)

(assert (=> d!26605 (=> res!49726 e!64421)))

(assert (=> d!26605 (= res!49726 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (_2!1180 lt!48997)))))))

(assert (=> d!26605 (= (arrayNoDuplicates!0 (_keys!4171 (_2!1180 lt!48997)) #b00000000000000000000000000000000 Nil!1578) e!64421)))

(declare-fun b!98876 () Bool)

(assert (=> b!98876 (= e!64421 e!64424)))

(declare-fun res!49728 () Bool)

(assert (=> b!98876 (=> (not res!49728) (not e!64424))))

(assert (=> b!98876 (= res!49728 (not e!64422))))

(declare-fun res!49727 () Bool)

(assert (=> b!98876 (=> (not res!49727) (not e!64422))))

(assert (=> b!98876 (= res!49727 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (_2!1180 lt!48997))) #b00000000000000000000000000000000)))))

(declare-fun b!98877 () Bool)

(assert (=> b!98877 (= e!64423 call!10104)))

(declare-fun b!98878 () Bool)

(assert (=> b!98878 (= e!64423 call!10104)))

(assert (= (and d!26605 (not res!49726)) b!98876))

(assert (= (and b!98876 res!49727) b!98875))

(assert (= (and b!98876 res!49728) b!98874))

(assert (= (and b!98874 c!16850) b!98877))

(assert (= (and b!98874 (not c!16850)) b!98878))

(assert (= (or b!98877 b!98878) bm!10101))

(assert (=> b!98874 m!108211))

(assert (=> b!98874 m!108211))

(assert (=> b!98874 m!108221))

(assert (=> bm!10101 m!108211))

(declare-fun m!108911 () Bool)

(assert (=> bm!10101 m!108911))

(assert (=> b!98875 m!108211))

(assert (=> b!98875 m!108211))

(declare-fun m!108913 () Bool)

(assert (=> b!98875 m!108913))

(assert (=> b!98876 m!108211))

(assert (=> b!98876 m!108211))

(assert (=> b!98876 m!108221))

(assert (=> b!97816 d!26605))

(assert (=> d!26047 d!26209))

(assert (=> b!98132 d!26429))

(assert (=> b!98132 d!26431))

(declare-fun d!26607 () Bool)

(assert (=> d!26607 (= (apply!92 lt!49031 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49031) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4098 () Bool)

(assert (= bs!4098 d!26607))

(assert (=> bs!4098 m!107841))

(assert (=> bs!4098 m!107841))

(declare-fun m!108915 () Bool)

(assert (=> bs!4098 m!108915))

(assert (=> b!97796 d!26607))

(declare-fun d!26609 () Bool)

(assert (=> d!26609 (isDefined!103 (getValueByKey!150 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!49796 () Unit!2937)

(assert (=> d!26609 (= lt!49796 (choose!596 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64425 () Bool)

(assert (=> d!26609 e!64425))

(declare-fun res!49729 () Bool)

(assert (=> d!26609 (=> (not res!49729) (not e!64425))))

(assert (=> d!26609 (= res!49729 (isStrictlySorted!304 (toList!783 lt!48916)))))

(assert (=> d!26609 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49796)))

(declare-fun b!98879 () Bool)

(assert (=> b!98879 (= e!64425 (containsKey!154 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26609 res!49729) b!98879))

(assert (=> d!26609 m!106739))

(assert (=> d!26609 m!107291))

(assert (=> d!26609 m!107291))

(assert (=> d!26609 m!107433))

(assert (=> d!26609 m!106739))

(declare-fun m!108917 () Bool)

(assert (=> d!26609 m!108917))

(assert (=> d!26609 m!107731))

(assert (=> b!98879 m!106739))

(assert (=> b!98879 m!107429))

(assert (=> b!98127 d!26609))

(assert (=> b!98127 d!26405))

(assert (=> b!98127 d!26379))

(declare-fun lt!49797 () Bool)

(declare-fun d!26611 () Bool)

(assert (=> d!26611 (= lt!49797 (select (content!102 (toList!783 lt!49212)) (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!64427 () Bool)

(assert (=> d!26611 (= lt!49797 e!64427)))

(declare-fun res!49730 () Bool)

(assert (=> d!26611 (=> (not res!49730) (not e!64427))))

(assert (=> d!26611 (= res!49730 ((_ is Cons!1576) (toList!783 lt!49212)))))

(assert (=> d!26611 (= (contains!803 (toList!783 lt!49212) (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49797)))

(declare-fun b!98880 () Bool)

(declare-fun e!64426 () Bool)

(assert (=> b!98880 (= e!64427 e!64426)))

(declare-fun res!49731 () Bool)

(assert (=> b!98880 (=> res!49731 e!64426)))

(assert (=> b!98880 (= res!49731 (= (h!2170 (toList!783 lt!49212)) (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98881 () Bool)

(assert (=> b!98881 (= e!64426 (contains!803 (t!5534 (toList!783 lt!49212)) (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26611 res!49730) b!98880))

(assert (= (and b!98880 (not res!49731)) b!98881))

(declare-fun m!108919 () Bool)

(assert (=> d!26611 m!108919))

(declare-fun m!108921 () Bool)

(assert (=> d!26611 m!108921))

(declare-fun m!108923 () Bool)

(assert (=> b!98881 m!108923))

(assert (=> b!97962 d!26611))

(declare-fun d!26613 () Bool)

(declare-fun res!49732 () Bool)

(declare-fun e!64428 () Bool)

(assert (=> d!26613 (=> res!49732 e!64428)))

(assert (=> d!26613 (= res!49732 (= (select (arr!2015 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (=> d!26613 (= (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!64428)))

(declare-fun b!98882 () Bool)

(declare-fun e!64429 () Bool)

(assert (=> b!98882 (= e!64428 e!64429)))

(declare-fun res!49733 () Bool)

(assert (=> b!98882 (=> (not res!49733) (not e!64429))))

(assert (=> b!98882 (= res!49733 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98883 () Bool)

(assert (=> b!98883 (= e!64429 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26613 (not res!49732)) b!98882))

(assert (= (and b!98882 res!49733) b!98883))

(assert (=> d!26613 m!108267))

(assert (=> b!98883 m!106647))

(declare-fun m!108925 () Bool)

(assert (=> b!98883 m!108925))

(assert (=> b!97848 d!26613))

(declare-fun d!26615 () Bool)

(declare-fun e!64430 () Bool)

(assert (=> d!26615 e!64430))

(declare-fun res!49734 () Bool)

(assert (=> d!26615 (=> res!49734 e!64430)))

(declare-fun lt!49799 () Bool)

(assert (=> d!26615 (= res!49734 (not lt!49799))))

(declare-fun lt!49801 () Bool)

(assert (=> d!26615 (= lt!49799 lt!49801)))

(declare-fun lt!49798 () Unit!2937)

(declare-fun e!64431 () Unit!2937)

(assert (=> d!26615 (= lt!49798 e!64431)))

(declare-fun c!16851 () Bool)

(assert (=> d!26615 (= c!16851 lt!49801)))

(assert (=> d!26615 (= lt!49801 (containsKey!154 (toList!783 lt!49194) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26615 (= (contains!800 lt!49194 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49799)))

(declare-fun b!98884 () Bool)

(declare-fun lt!49800 () Unit!2937)

(assert (=> b!98884 (= e!64431 lt!49800)))

(assert (=> b!98884 (= lt!49800 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49194) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98884 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98885 () Bool)

(declare-fun Unit!2994 () Unit!2937)

(assert (=> b!98885 (= e!64431 Unit!2994)))

(declare-fun b!98886 () Bool)

(assert (=> b!98886 (= e!64430 (isDefined!103 (getValueByKey!150 (toList!783 lt!49194) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26615 c!16851) b!98884))

(assert (= (and d!26615 (not c!16851)) b!98885))

(assert (= (and d!26615 (not res!49734)) b!98886))

(assert (=> d!26615 m!106891))

(declare-fun m!108927 () Bool)

(assert (=> d!26615 m!108927))

(assert (=> b!98884 m!106891))

(declare-fun m!108929 () Bool)

(assert (=> b!98884 m!108929))

(assert (=> b!98884 m!106891))

(assert (=> b!98884 m!108805))

(assert (=> b!98884 m!108805))

(declare-fun m!108931 () Bool)

(assert (=> b!98884 m!108931))

(assert (=> b!98886 m!106891))

(assert (=> b!98886 m!108805))

(assert (=> b!98886 m!108805))

(assert (=> b!98886 m!108931))

(assert (=> b!97950 d!26615))

(assert (=> b!98036 d!26211))

(declare-fun d!26617 () Bool)

(declare-fun lt!49802 () Bool)

(assert (=> d!26617 (= lt!49802 (select (content!101 (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!64432 () Bool)

(assert (=> d!26617 (= lt!49802 e!64432)))

(declare-fun res!49736 () Bool)

(assert (=> d!26617 (=> (not res!49736) (not e!64432))))

(assert (=> d!26617 (= res!49736 ((_ is Cons!1577) (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)))))

(assert (=> d!26617 (= (contains!802 (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!49802)))

(declare-fun b!98887 () Bool)

(declare-fun e!64433 () Bool)

(assert (=> b!98887 (= e!64432 e!64433)))

(declare-fun res!49735 () Bool)

(assert (=> b!98887 (=> res!49735 e!64433)))

(assert (=> b!98887 (= res!49735 (= (h!2171 (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98888 () Bool)

(assert (=> b!98888 (= e!64433 (contains!802 (t!5535 (ite c!16494 (Cons!1577 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) Nil!1578) Nil!1578)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26617 res!49736) b!98887))

(assert (= (and b!98887 (not res!49735)) b!98888))

(declare-fun m!108933 () Bool)

(assert (=> d!26617 m!108933))

(assert (=> d!26617 m!107329))

(declare-fun m!108935 () Bool)

(assert (=> d!26617 m!108935))

(assert (=> b!98888 m!107329))

(declare-fun m!108937 () Bool)

(assert (=> b!98888 m!108937))

(assert (=> b!98040 d!26617))

(declare-fun d!26619 () Bool)

(assert (=> d!26619 (contains!800 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355))))

(declare-fun lt!49805 () Unit!2937)

(declare-fun choose!600 (array!4241 array!4243 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2937)

(assert (=> d!26619 (= lt!49805 (choose!600 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26619 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26619 (= (lemmaArrayContainsKeyThenInListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49805)))

(declare-fun bs!4099 () Bool)

(assert (= bs!4099 d!26619))

(assert (=> bs!4099 m!106761))

(assert (=> bs!4099 m!106761))

(assert (=> bs!4099 m!106647))

(assert (=> bs!4099 m!106841))

(assert (=> bs!4099 m!106647))

(declare-fun m!108939 () Bool)

(assert (=> bs!4099 m!108939))

(assert (=> bs!4099 m!106895))

(assert (=> b!97885 d!26619))

(assert (=> b!97885 d!26063))

(assert (=> b!97885 d!26065))

(declare-fun d!26621 () Bool)

(declare-fun lt!49806 () Bool)

(assert (=> d!26621 (= lt!49806 (select (content!101 Nil!1578) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64434 () Bool)

(assert (=> d!26621 (= lt!49806 e!64434)))

(declare-fun res!49738 () Bool)

(assert (=> d!26621 (=> (not res!49738) (not e!64434))))

(assert (=> d!26621 (= res!49738 ((_ is Cons!1577) Nil!1578))))

(assert (=> d!26621 (= (contains!802 Nil!1578 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49806)))

(declare-fun b!98889 () Bool)

(declare-fun e!64435 () Bool)

(assert (=> b!98889 (= e!64434 e!64435)))

(declare-fun res!49737 () Bool)

(assert (=> b!98889 (=> res!49737 e!64435)))

(assert (=> b!98889 (= res!49737 (= (h!2171 Nil!1578) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98890 () Bool)

(assert (=> b!98890 (= e!64435 (contains!802 (t!5535 Nil!1578) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26621 res!49738) b!98889))

(assert (= (and b!98889 (not res!49737)) b!98890))

(assert (=> d!26621 m!106965))

(assert (=> d!26621 m!106891))

(declare-fun m!108941 () Bool)

(assert (=> d!26621 m!108941))

(assert (=> b!98890 m!106891))

(declare-fun m!108943 () Bool)

(assert (=> b!98890 m!108943))

(assert (=> b!98035 d!26621))

(declare-fun d!26623 () Bool)

(declare-fun e!64436 () Bool)

(assert (=> d!26623 e!64436))

(declare-fun res!49739 () Bool)

(assert (=> d!26623 (=> res!49739 e!64436)))

(declare-fun lt!49808 () Bool)

(assert (=> d!26623 (= res!49739 (not lt!49808))))

(declare-fun lt!49810 () Bool)

(assert (=> d!26623 (= lt!49808 lt!49810)))

(declare-fun lt!49807 () Unit!2937)

(declare-fun e!64437 () Unit!2937)

(assert (=> d!26623 (= lt!49807 e!64437)))

(declare-fun c!16852 () Bool)

(assert (=> d!26623 (= c!16852 lt!49810)))

(assert (=> d!26623 (= lt!49810 (containsKey!154 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26623 (= (contains!800 lt!49208 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49808)))

(declare-fun b!98891 () Bool)

(declare-fun lt!49809 () Unit!2937)

(assert (=> b!98891 (= e!64437 lt!49809)))

(assert (=> b!98891 (= lt!49809 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> b!98891 (isDefined!103 (getValueByKey!150 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98892 () Bool)

(declare-fun Unit!2995 () Unit!2937)

(assert (=> b!98892 (= e!64437 Unit!2995)))

(declare-fun b!98893 () Bool)

(assert (=> b!98893 (= e!64436 (isDefined!103 (getValueByKey!150 (toList!783 lt!49208) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26623 c!16852) b!98891))

(assert (= (and d!26623 (not c!16852)) b!98892))

(assert (= (and d!26623 (not res!49739)) b!98893))

(declare-fun m!108945 () Bool)

(assert (=> d!26623 m!108945))

(declare-fun m!108947 () Bool)

(assert (=> b!98891 m!108947))

(assert (=> b!98891 m!107189))

(assert (=> b!98891 m!107189))

(declare-fun m!108949 () Bool)

(assert (=> b!98891 m!108949))

(assert (=> b!98893 m!107189))

(assert (=> b!98893 m!107189))

(assert (=> b!98893 m!108949))

(assert (=> d!26075 d!26623))

(declare-fun b!98896 () Bool)

(declare-fun e!64439 () Option!156)

(assert (=> b!98896 (= e!64439 (getValueByKey!150 (t!5534 lt!49210) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98894 () Bool)

(declare-fun e!64438 () Option!156)

(assert (=> b!98894 (= e!64438 (Some!155 (_2!1181 (h!2170 lt!49210))))))

(declare-fun b!98897 () Bool)

(assert (=> b!98897 (= e!64439 None!154)))

(declare-fun b!98895 () Bool)

(assert (=> b!98895 (= e!64438 e!64439)))

(declare-fun c!16854 () Bool)

(assert (=> b!98895 (= c!16854 (and ((_ is Cons!1576) lt!49210) (not (= (_1!1181 (h!2170 lt!49210)) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun d!26625 () Bool)

(declare-fun c!16853 () Bool)

(assert (=> d!26625 (= c!16853 (and ((_ is Cons!1576) lt!49210) (= (_1!1181 (h!2170 lt!49210)) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26625 (= (getValueByKey!150 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64438)))

(assert (= (and d!26625 c!16853) b!98894))

(assert (= (and d!26625 (not c!16853)) b!98895))

(assert (= (and b!98895 c!16854) b!98896))

(assert (= (and b!98895 (not c!16854)) b!98897))

(declare-fun m!108951 () Bool)

(assert (=> b!98896 m!108951))

(assert (=> d!26075 d!26625))

(declare-fun d!26627 () Bool)

(assert (=> d!26627 (= (getValueByKey!150 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49811 () Unit!2937)

(assert (=> d!26627 (= lt!49811 (choose!598 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64440 () Bool)

(assert (=> d!26627 e!64440))

(declare-fun res!49740 () Bool)

(assert (=> d!26627 (=> (not res!49740) (not e!64440))))

(assert (=> d!26627 (= res!49740 (isStrictlySorted!304 lt!49210))))

(assert (=> d!26627 (= (lemmaContainsTupThenGetReturnValue!66 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49811)))

(declare-fun b!98898 () Bool)

(declare-fun res!49741 () Bool)

(assert (=> b!98898 (=> (not res!49741) (not e!64440))))

(assert (=> b!98898 (= res!49741 (containsKey!154 lt!49210 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98899 () Bool)

(assert (=> b!98899 (= e!64440 (contains!803 lt!49210 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26627 res!49740) b!98898))

(assert (= (and b!98898 res!49741) b!98899))

(assert (=> d!26627 m!107183))

(declare-fun m!108953 () Bool)

(assert (=> d!26627 m!108953))

(declare-fun m!108955 () Bool)

(assert (=> d!26627 m!108955))

(declare-fun m!108957 () Bool)

(assert (=> b!98898 m!108957))

(declare-fun m!108959 () Bool)

(assert (=> b!98899 m!108959))

(assert (=> d!26075 d!26627))

(declare-fun b!98900 () Bool)

(declare-fun res!49742 () Bool)

(declare-fun e!64443 () Bool)

(assert (=> b!98900 (=> (not res!49742) (not e!64443))))

(declare-fun lt!49812 () List!1580)

(assert (=> b!98900 (= res!49742 (containsKey!154 lt!49812 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun c!16858 () Bool)

(declare-fun e!64444 () List!1580)

(declare-fun c!16857 () Bool)

(declare-fun b!98901 () Bool)

(assert (=> b!98901 (= e!64444 (ite c!16857 (t!5534 (toList!783 lt!48912)) (ite c!16858 (Cons!1576 (h!2170 (toList!783 lt!48912)) (t!5534 (toList!783 lt!48912))) Nil!1577)))))

(declare-fun c!16855 () Bool)

(declare-fun bm!10102 () Bool)

(declare-fun call!10105 () List!1580)

(assert (=> bm!10102 (= call!10105 ($colon$colon!78 e!64444 (ite c!16855 (h!2170 (toList!783 lt!48912)) (tuple2!2341 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16856 () Bool)

(assert (=> bm!10102 (= c!16856 c!16855)))

(declare-fun d!26629 () Bool)

(assert (=> d!26629 e!64443))

(declare-fun res!49743 () Bool)

(assert (=> d!26629 (=> (not res!49743) (not e!64443))))

(assert (=> d!26629 (= res!49743 (isStrictlySorted!304 lt!49812))))

(declare-fun e!64445 () List!1580)

(assert (=> d!26629 (= lt!49812 e!64445)))

(assert (=> d!26629 (= c!16855 (and ((_ is Cons!1576) (toList!783 lt!48912)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48912))) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26629 (isStrictlySorted!304 (toList!783 lt!48912))))

(assert (=> d!26629 (= (insertStrictlySorted!69 (toList!783 lt!48912) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49812)))

(declare-fun b!98902 () Bool)

(assert (=> b!98902 (= e!64445 call!10105)))

(declare-fun b!98903 () Bool)

(declare-fun e!64441 () List!1580)

(declare-fun call!10106 () List!1580)

(assert (=> b!98903 (= e!64441 call!10106)))

(declare-fun b!98904 () Bool)

(declare-fun e!64442 () List!1580)

(declare-fun call!10107 () List!1580)

(assert (=> b!98904 (= e!64442 call!10107)))

(declare-fun b!98905 () Bool)

(assert (=> b!98905 (= c!16858 (and ((_ is Cons!1576) (toList!783 lt!48912)) (bvsgt (_1!1181 (h!2170 (toList!783 lt!48912))) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98905 (= e!64442 e!64441)))

(declare-fun b!98906 () Bool)

(assert (=> b!98906 (= e!64443 (contains!803 lt!49812 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98907 () Bool)

(assert (=> b!98907 (= e!64441 call!10106)))

(declare-fun bm!10103 () Bool)

(assert (=> bm!10103 (= call!10106 call!10107)))

(declare-fun bm!10104 () Bool)

(assert (=> bm!10104 (= call!10107 call!10105)))

(declare-fun b!98908 () Bool)

(assert (=> b!98908 (= e!64445 e!64442)))

(assert (=> b!98908 (= c!16857 (and ((_ is Cons!1576) (toList!783 lt!48912)) (= (_1!1181 (h!2170 (toList!783 lt!48912))) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98909 () Bool)

(assert (=> b!98909 (= e!64444 (insertStrictlySorted!69 (t!5534 (toList!783 lt!48912)) (_1!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48909 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26629 c!16855) b!98902))

(assert (= (and d!26629 (not c!16855)) b!98908))

(assert (= (and b!98908 c!16857) b!98904))

(assert (= (and b!98908 (not c!16857)) b!98905))

(assert (= (and b!98905 c!16858) b!98903))

(assert (= (and b!98905 (not c!16858)) b!98907))

(assert (= (or b!98903 b!98907) bm!10103))

(assert (= (or b!98904 bm!10103) bm!10104))

(assert (= (or b!98902 bm!10104) bm!10102))

(assert (= (and bm!10102 c!16856) b!98909))

(assert (= (and bm!10102 (not c!16856)) b!98901))

(assert (= (and d!26629 res!49743) b!98900))

(assert (= (and b!98900 res!49742) b!98906))

(declare-fun m!108961 () Bool)

(assert (=> b!98906 m!108961))

(declare-fun m!108963 () Bool)

(assert (=> d!26629 m!108963))

(declare-fun m!108965 () Bool)

(assert (=> d!26629 m!108965))

(declare-fun m!108967 () Bool)

(assert (=> bm!10102 m!108967))

(declare-fun m!108969 () Bool)

(assert (=> b!98909 m!108969))

(declare-fun m!108971 () Bool)

(assert (=> b!98900 m!108971))

(assert (=> d!26075 d!26629))

(declare-fun d!26631 () Bool)

(declare-fun lt!49813 () Bool)

(assert (=> d!26631 (= lt!49813 (select (content!102 (toList!783 lt!49293)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!64447 () Bool)

(assert (=> d!26631 (= lt!49813 e!64447)))

(declare-fun res!49744 () Bool)

(assert (=> d!26631 (=> (not res!49744) (not e!64447))))

(assert (=> d!26631 (= res!49744 ((_ is Cons!1576) (toList!783 lt!49293)))))

(assert (=> d!26631 (= (contains!803 (toList!783 lt!49293) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49813)))

(declare-fun b!98910 () Bool)

(declare-fun e!64446 () Bool)

(assert (=> b!98910 (= e!64447 e!64446)))

(declare-fun res!49745 () Bool)

(assert (=> b!98910 (=> res!49745 e!64446)))

(assert (=> b!98910 (= res!49745 (= (h!2170 (toList!783 lt!49293)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98911 () Bool)

(assert (=> b!98911 (= e!64446 (contains!803 (t!5534 (toList!783 lt!49293)) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26631 res!49744) b!98910))

(assert (= (and b!98910 (not res!49745)) b!98911))

(declare-fun m!108973 () Bool)

(assert (=> d!26631 m!108973))

(declare-fun m!108975 () Bool)

(assert (=> d!26631 m!108975))

(declare-fun m!108977 () Bool)

(assert (=> b!98911 m!108977))

(assert (=> b!98109 d!26631))

(declare-fun e!64449 () Option!156)

(declare-fun b!98914 () Bool)

(assert (=> b!98914 (= e!64449 (getValueByKey!150 (t!5534 (toList!783 lt!49270)) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98912 () Bool)

(declare-fun e!64448 () Option!156)

(assert (=> b!98912 (= e!64448 (Some!155 (_2!1181 (h!2170 (toList!783 lt!49270)))))))

(declare-fun b!98915 () Bool)

(assert (=> b!98915 (= e!64449 None!154)))

(declare-fun b!98913 () Bool)

(assert (=> b!98913 (= e!64448 e!64449)))

(declare-fun c!16860 () Bool)

(assert (=> b!98913 (= c!16860 (and ((_ is Cons!1576) (toList!783 lt!49270)) (not (= (_1!1181 (h!2170 (toList!783 lt!49270))) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16859 () Bool)

(declare-fun d!26633 () Bool)

(assert (=> d!26633 (= c!16859 (and ((_ is Cons!1576) (toList!783 lt!49270)) (= (_1!1181 (h!2170 (toList!783 lt!49270))) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26633 (= (getValueByKey!150 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64448)))

(assert (= (and d!26633 c!16859) b!98912))

(assert (= (and d!26633 (not c!16859)) b!98913))

(assert (= (and b!98913 c!16860) b!98914))

(assert (= (and b!98913 (not c!16860)) b!98915))

(declare-fun m!108979 () Bool)

(assert (=> b!98914 m!108979))

(assert (=> b!98044 d!26633))

(declare-fun d!26635 () Bool)

(declare-fun e!64450 () Bool)

(assert (=> d!26635 e!64450))

(declare-fun res!49746 () Bool)

(assert (=> d!26635 (=> res!49746 e!64450)))

(declare-fun lt!49815 () Bool)

(assert (=> d!26635 (= res!49746 (not lt!49815))))

(declare-fun lt!49817 () Bool)

(assert (=> d!26635 (= lt!49815 lt!49817)))

(declare-fun lt!49814 () Unit!2937)

(declare-fun e!64451 () Unit!2937)

(assert (=> d!26635 (= lt!49814 e!64451)))

(declare-fun c!16861 () Bool)

(assert (=> d!26635 (= c!16861 lt!49817)))

(assert (=> d!26635 (= lt!49817 (containsKey!154 (toList!783 lt!49251) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26635 (= (contains!800 lt!49251 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49815)))

(declare-fun b!98916 () Bool)

(declare-fun lt!49816 () Unit!2937)

(assert (=> b!98916 (= e!64451 lt!49816)))

(assert (=> b!98916 (= lt!49816 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49251) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98916 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98917 () Bool)

(declare-fun Unit!2996 () Unit!2937)

(assert (=> b!98917 (= e!64451 Unit!2996)))

(declare-fun b!98918 () Bool)

(assert (=> b!98918 (= e!64450 (isDefined!103 (getValueByKey!150 (toList!783 lt!49251) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26635 c!16861) b!98916))

(assert (= (and d!26635 (not c!16861)) b!98917))

(assert (= (and d!26635 (not res!49746)) b!98918))

(assert (=> d!26635 m!106739))

(declare-fun m!108981 () Bool)

(assert (=> d!26635 m!108981))

(assert (=> b!98916 m!106739))

(declare-fun m!108983 () Bool)

(assert (=> b!98916 m!108983))

(assert (=> b!98916 m!106739))

(assert (=> b!98916 m!108571))

(assert (=> b!98916 m!108571))

(declare-fun m!108985 () Bool)

(assert (=> b!98916 m!108985))

(assert (=> b!98918 m!106739))

(assert (=> b!98918 m!108571))

(assert (=> b!98918 m!108571))

(assert (=> b!98918 m!108985))

(assert (=> b!98005 d!26635))

(declare-fun d!26637 () Bool)

(assert (=> d!26637 (= (apply!92 lt!49162 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49162) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4100 () Bool)

(assert (= bs!4100 d!26637))

(assert (=> bs!4100 m!107599))

(assert (=> bs!4100 m!107599))

(declare-fun m!108987 () Bool)

(assert (=> bs!4100 m!108987))

(assert (=> b!97910 d!26637))

(declare-fun lt!49818 () Bool)

(declare-fun d!26639 () Bool)

(assert (=> d!26639 (= lt!49818 (select (content!102 (toList!783 lt!49228)) (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun e!64453 () Bool)

(assert (=> d!26639 (= lt!49818 e!64453)))

(declare-fun res!49747 () Bool)

(assert (=> d!26639 (=> (not res!49747) (not e!64453))))

(assert (=> d!26639 (= res!49747 ((_ is Cons!1576) (toList!783 lt!49228)))))

(assert (=> d!26639 (= (contains!803 (toList!783 lt!49228) (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) lt!49818)))

(declare-fun b!98919 () Bool)

(declare-fun e!64452 () Bool)

(assert (=> b!98919 (= e!64453 e!64452)))

(declare-fun res!49748 () Bool)

(assert (=> b!98919 (=> res!49748 e!64452)))

(assert (=> b!98919 (= res!49748 (= (h!2170 (toList!783 lt!49228)) (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98920 () Bool)

(assert (=> b!98920 (= e!64452 (contains!803 (t!5534 (toList!783 lt!49228)) (tuple2!2341 lt!48904 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))

(assert (= (and d!26639 res!49747) b!98919))

(assert (= (and b!98919 (not res!49748)) b!98920))

(declare-fun m!108989 () Bool)

(assert (=> d!26639 m!108989))

(declare-fun m!108991 () Bool)

(assert (=> d!26639 m!108991))

(declare-fun m!108993 () Bool)

(assert (=> b!98920 m!108993))

(assert (=> b!97971 d!26639))

(declare-fun bm!10105 () Bool)

(declare-fun call!10108 () (_ BitVec 32))

(assert (=> bm!10105 (= call!10108 (arrayCountValidKeys!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(declare-fun b!98921 () Bool)

(declare-fun e!64454 () (_ BitVec 32))

(assert (=> b!98921 (= e!64454 #b00000000000000000000000000000000)))

(declare-fun b!98922 () Bool)

(declare-fun e!64455 () (_ BitVec 32))

(assert (=> b!98922 (= e!64454 e!64455)))

(declare-fun c!16863 () Bool)

(assert (=> b!98922 (= c!16863 (validKeyInArray!0 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26641 () Bool)

(declare-fun lt!49819 () (_ BitVec 32))

(assert (=> d!26641 (and (bvsge lt!49819 #b00000000000000000000000000000000) (bvsle lt!49819 (bvsub (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!26641 (= lt!49819 e!64454)))

(declare-fun c!16862 () Bool)

(assert (=> d!26641 (= c!16862 (bvsge #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26641 (and (bvsle #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))))))

(assert (=> d!26641 (= (arrayCountValidKeys!0 (_keys!4171 (v!2800 (underlying!337 thiss!992))) #b00000000000000000000000000000000 (size!2265 (_keys!4171 (v!2800 (underlying!337 thiss!992))))) lt!49819)))

(declare-fun b!98923 () Bool)

(assert (=> b!98923 (= e!64455 call!10108)))

(declare-fun b!98924 () Bool)

(assert (=> b!98924 (= e!64455 (bvadd #b00000000000000000000000000000001 call!10108))))

(assert (= (and d!26641 c!16862) b!98921))

(assert (= (and d!26641 (not c!16862)) b!98922))

(assert (= (and b!98922 c!16863) b!98924))

(assert (= (and b!98922 (not c!16863)) b!98923))

(assert (= (or b!98924 b!98923) bm!10105))

(declare-fun m!108995 () Bool)

(assert (=> bm!10105 m!108995))

(assert (=> b!98922 m!107813))

(assert (=> b!98922 m!107813))

(assert (=> b!98922 m!107815))

(assert (=> b!98112 d!26641))

(declare-fun d!26643 () Bool)

(declare-fun res!49749 () Bool)

(declare-fun e!64456 () Bool)

(assert (=> d!26643 (=> res!49749 e!64456)))

(assert (=> d!26643 (= res!49749 (and ((_ is Cons!1576) (toList!783 lt!48916)) (= (_1!1181 (h!2170 (toList!783 lt!48916))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26643 (= (containsKey!154 (toList!783 lt!48916) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64456)))

(declare-fun b!98925 () Bool)

(declare-fun e!64457 () Bool)

(assert (=> b!98925 (= e!64456 e!64457)))

(declare-fun res!49750 () Bool)

(assert (=> b!98925 (=> (not res!49750) (not e!64457))))

(assert (=> b!98925 (= res!49750 (and (or (not ((_ is Cons!1576) (toList!783 lt!48916))) (bvsle (_1!1181 (h!2170 (toList!783 lt!48916))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1576) (toList!783 lt!48916)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48916))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!98926 () Bool)

(assert (=> b!98926 (= e!64457 (containsKey!154 (t!5534 (toList!783 lt!48916)) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26643 (not res!49749)) b!98925))

(assert (= (and b!98925 res!49750) b!98926))

(assert (=> b!98926 m!106739))

(declare-fun m!108997 () Bool)

(assert (=> b!98926 m!108997))

(assert (=> d!26155 d!26643))

(declare-fun d!26645 () Bool)

(declare-fun e!64458 () Bool)

(assert (=> d!26645 e!64458))

(declare-fun res!49751 () Bool)

(assert (=> d!26645 (=> res!49751 e!64458)))

(declare-fun lt!49821 () Bool)

(assert (=> d!26645 (= res!49751 (not lt!49821))))

(declare-fun lt!49823 () Bool)

(assert (=> d!26645 (= lt!49821 lt!49823)))

(declare-fun lt!49820 () Unit!2937)

(declare-fun e!64459 () Unit!2937)

(assert (=> d!26645 (= lt!49820 e!64459)))

(declare-fun c!16864 () Bool)

(assert (=> d!26645 (= c!16864 lt!49823)))

(assert (=> d!26645 (= lt!49823 (containsKey!154 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> d!26645 (= (contains!800 lt!49212 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49821)))

(declare-fun b!98927 () Bool)

(declare-fun lt!49822 () Unit!2937)

(assert (=> b!98927 (= e!64459 lt!49822)))

(assert (=> b!98927 (= lt!49822 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (=> b!98927 (isDefined!103 (getValueByKey!150 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98928 () Bool)

(declare-fun Unit!2997 () Unit!2937)

(assert (=> b!98928 (= e!64459 Unit!2997)))

(declare-fun b!98929 () Bool)

(assert (=> b!98929 (= e!64458 (isDefined!103 (getValueByKey!150 (toList!783 lt!49212) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26645 c!16864) b!98927))

(assert (= (and d!26645 (not c!16864)) b!98928))

(assert (= (and d!26645 (not res!49751)) b!98929))

(declare-fun m!108999 () Bool)

(assert (=> d!26645 m!108999))

(declare-fun m!109001 () Bool)

(assert (=> b!98927 m!109001))

(assert (=> b!98927 m!107209))

(assert (=> b!98927 m!107209))

(declare-fun m!109003 () Bool)

(assert (=> b!98927 m!109003))

(assert (=> b!98929 m!107209))

(assert (=> b!98929 m!107209))

(assert (=> b!98929 m!109003))

(assert (=> d!26081 d!26645))

(declare-fun e!64461 () Option!156)

(declare-fun b!98932 () Bool)

(assert (=> b!98932 (= e!64461 (getValueByKey!150 (t!5534 lt!49214) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98930 () Bool)

(declare-fun e!64460 () Option!156)

(assert (=> b!98930 (= e!64460 (Some!155 (_2!1181 (h!2170 lt!49214))))))

(declare-fun b!98933 () Bool)

(assert (=> b!98933 (= e!64461 None!154)))

(declare-fun b!98931 () Bool)

(assert (=> b!98931 (= e!64460 e!64461)))

(declare-fun c!16866 () Bool)

(assert (=> b!98931 (= c!16866 (and ((_ is Cons!1576) lt!49214) (not (= (_1!1181 (h!2170 lt!49214)) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16865 () Bool)

(declare-fun d!26647 () Bool)

(assert (=> d!26647 (= c!16865 (and ((_ is Cons!1576) lt!49214) (= (_1!1181 (h!2170 lt!49214)) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26647 (= (getValueByKey!150 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) e!64460)))

(assert (= (and d!26647 c!16865) b!98930))

(assert (= (and d!26647 (not c!16865)) b!98931))

(assert (= (and b!98931 c!16866) b!98932))

(assert (= (and b!98931 (not c!16866)) b!98933))

(declare-fun m!109005 () Bool)

(assert (=> b!98932 m!109005))

(assert (=> d!26081 d!26647))

(declare-fun d!26649 () Bool)

(assert (=> d!26649 (= (getValueByKey!150 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) (Some!155 (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun lt!49824 () Unit!2937)

(assert (=> d!26649 (= lt!49824 (choose!598 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64462 () Bool)

(assert (=> d!26649 e!64462))

(declare-fun res!49752 () Bool)

(assert (=> d!26649 (=> (not res!49752) (not e!64462))))

(assert (=> d!26649 (= res!49752 (isStrictlySorted!304 lt!49214))))

(assert (=> d!26649 (= (lemmaContainsTupThenGetReturnValue!66 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49824)))

(declare-fun b!98934 () Bool)

(declare-fun res!49753 () Bool)

(assert (=> b!98934 (=> (not res!49753) (not e!64462))))

(assert (=> b!98934 (= res!49753 (containsKey!154 lt!49214 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98935 () Bool)

(assert (=> b!98935 (= e!64462 (contains!803 lt!49214 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (= (and d!26649 res!49752) b!98934))

(assert (= (and b!98934 res!49753) b!98935))

(assert (=> d!26649 m!107203))

(declare-fun m!109007 () Bool)

(assert (=> d!26649 m!109007))

(declare-fun m!109009 () Bool)

(assert (=> d!26649 m!109009))

(declare-fun m!109011 () Bool)

(assert (=> b!98934 m!109011))

(declare-fun m!109013 () Bool)

(assert (=> b!98935 m!109013))

(assert (=> d!26081 d!26649))

(declare-fun b!98936 () Bool)

(declare-fun res!49754 () Bool)

(declare-fun e!64465 () Bool)

(assert (=> b!98936 (=> (not res!49754) (not e!64465))))

(declare-fun lt!49825 () List!1580)

(assert (=> b!98936 (= res!49754 (containsKey!154 lt!49825 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64466 () List!1580)

(declare-fun b!98937 () Bool)

(declare-fun c!16870 () Bool)

(declare-fun c!16869 () Bool)

(assert (=> b!98937 (= e!64466 (ite c!16869 (t!5534 (toList!783 lt!48900)) (ite c!16870 (Cons!1576 (h!2170 (toList!783 lt!48900)) (t!5534 (toList!783 lt!48900))) Nil!1577)))))

(declare-fun bm!10106 () Bool)

(declare-fun call!10109 () List!1580)

(declare-fun c!16867 () Bool)

(assert (=> bm!10106 (= call!10109 ($colon$colon!78 e!64466 (ite c!16867 (h!2170 (toList!783 lt!48900)) (tuple2!2341 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))))

(declare-fun c!16868 () Bool)

(assert (=> bm!10106 (= c!16868 c!16867)))

(declare-fun d!26651 () Bool)

(assert (=> d!26651 e!64465))

(declare-fun res!49755 () Bool)

(assert (=> d!26651 (=> (not res!49755) (not e!64465))))

(assert (=> d!26651 (= res!49755 (isStrictlySorted!304 lt!49825))))

(declare-fun e!64467 () List!1580)

(assert (=> d!26651 (= lt!49825 e!64467)))

(assert (=> d!26651 (= c!16867 (and ((_ is Cons!1576) (toList!783 lt!48900)) (bvslt (_1!1181 (h!2170 (toList!783 lt!48900))) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> d!26651 (isStrictlySorted!304 (toList!783 lt!48900))))

(assert (=> d!26651 (= (insertStrictlySorted!69 (toList!783 lt!48900) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49825)))

(declare-fun b!98938 () Bool)

(assert (=> b!98938 (= e!64467 call!10109)))

(declare-fun b!98939 () Bool)

(declare-fun e!64463 () List!1580)

(declare-fun call!10110 () List!1580)

(assert (=> b!98939 (= e!64463 call!10110)))

(declare-fun b!98940 () Bool)

(declare-fun e!64464 () List!1580)

(declare-fun call!10111 () List!1580)

(assert (=> b!98940 (= e!64464 call!10111)))

(declare-fun b!98941 () Bool)

(assert (=> b!98941 (= c!16870 (and ((_ is Cons!1576) (toList!783 lt!48900)) (bvsgt (_1!1181 (h!2170 (toList!783 lt!48900))) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(assert (=> b!98941 (= e!64464 e!64463)))

(declare-fun b!98942 () Bool)

(assert (=> b!98942 (= e!64465 (contains!803 lt!49825 (tuple2!2341 (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98943 () Bool)

(assert (=> b!98943 (= e!64463 call!10110)))

(declare-fun bm!10107 () Bool)

(assert (=> bm!10107 (= call!10110 call!10111)))

(declare-fun bm!10108 () Bool)

(assert (=> bm!10108 (= call!10111 call!10109)))

(declare-fun b!98944 () Bool)

(assert (=> b!98944 (= e!64467 e!64464)))

(assert (=> b!98944 (= c!16869 (and ((_ is Cons!1576) (toList!783 lt!48900)) (= (_1!1181 (h!2170 (toList!783 lt!48900))) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))))))))

(declare-fun b!98945 () Bool)

(assert (=> b!98945 (= e!64466 (insertStrictlySorted!69 (t!5534 (toList!783 lt!48900)) (_1!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992))))) (_2!1181 (tuple2!2341 lt!48901 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26651 c!16867) b!98938))

(assert (= (and d!26651 (not c!16867)) b!98944))

(assert (= (and b!98944 c!16869) b!98940))

(assert (= (and b!98944 (not c!16869)) b!98941))

(assert (= (and b!98941 c!16870) b!98939))

(assert (= (and b!98941 (not c!16870)) b!98943))

(assert (= (or b!98939 b!98943) bm!10107))

(assert (= (or b!98940 bm!10107) bm!10108))

(assert (= (or b!98938 bm!10108) bm!10106))

(assert (= (and bm!10106 c!16868) b!98945))

(assert (= (and bm!10106 (not c!16868)) b!98937))

(assert (= (and d!26651 res!49755) b!98936))

(assert (= (and b!98936 res!49754) b!98942))

(declare-fun m!109015 () Bool)

(assert (=> b!98942 m!109015))

(declare-fun m!109017 () Bool)

(assert (=> d!26651 m!109017))

(declare-fun m!109019 () Bool)

(assert (=> d!26651 m!109019))

(declare-fun m!109021 () Bool)

(assert (=> bm!10106 m!109021))

(declare-fun m!109023 () Bool)

(assert (=> b!98945 m!109023))

(declare-fun m!109025 () Bool)

(assert (=> b!98936 m!109025))

(assert (=> d!26081 d!26651))

(assert (=> b!98001 d!26031))

(declare-fun d!26653 () Bool)

(assert (=> d!26653 (= (apply!92 lt!49162 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1284 (getValueByKey!150 (toList!783 lt!49162) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4101 () Bool)

(assert (= bs!4101 d!26653))

(assert (=> bs!4101 m!108905))

(assert (=> bs!4101 m!108905))

(declare-fun m!109027 () Bool)

(assert (=> bs!4101 m!109027))

(assert (=> b!97906 d!26653))

(declare-fun lt!49826 () Bool)

(declare-fun d!26655 () Bool)

(assert (=> d!26655 (= lt!49826 (select (content!102 (toList!783 lt!49283)) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun e!64469 () Bool)

(assert (=> d!26655 (= lt!49826 e!64469)))

(declare-fun res!49756 () Bool)

(assert (=> d!26655 (=> (not res!49756) (not e!64469))))

(assert (=> d!26655 (= res!49756 ((_ is Cons!1576) (toList!783 lt!49283)))))

(assert (=> d!26655 (= (contains!803 (toList!783 lt!49283) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))) lt!49826)))

(declare-fun b!98946 () Bool)

(declare-fun e!64468 () Bool)

(assert (=> b!98946 (= e!64469 e!64468)))

(declare-fun res!49757 () Bool)

(assert (=> b!98946 (=> res!49757 e!64468)))

(assert (=> b!98946 (= res!49757 (= (h!2170 (toList!783 lt!49283)) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(declare-fun b!98947 () Bool)

(assert (=> b!98947 (= e!64468 (contains!803 (t!5534 (toList!783 lt!49283)) (ite (or c!16510 c!16508) (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2800 (underlying!337 thiss!992)))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2800 (underlying!337 thiss!992)))))))))

(assert (= (and d!26655 res!49756) b!98946))

(assert (= (and b!98946 (not res!49757)) b!98947))

(declare-fun m!109029 () Bool)

(assert (=> d!26655 m!109029))

(declare-fun m!109031 () Bool)

(assert (=> d!26655 m!109031))

(declare-fun m!109033 () Bool)

(assert (=> b!98947 m!109033))

(assert (=> b!98071 d!26655))

(assert (=> d!26127 d!26001))

(assert (=> b!97845 d!26585))

(declare-fun d!26657 () Bool)

(assert (=> d!26657 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000)))

(declare-fun lt!49827 () Unit!2937)

(assert (=> d!26657 (= lt!49827 (choose!13 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000))))

(assert (=> d!26657 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26657 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000) lt!49827)))

(declare-fun bs!4102 () Bool)

(assert (= bs!4102 d!26657))

(assert (=> bs!4102 m!106973))

(declare-fun m!109035 () Bool)

(assert (=> bs!4102 m!109035))

(assert (=> b!97834 d!26657))

(declare-fun d!26659 () Bool)

(declare-fun res!49758 () Bool)

(declare-fun e!64470 () Bool)

(assert (=> d!26659 (=> res!49758 e!64470)))

(assert (=> d!26659 (= res!49758 (= (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) lt!49048))))

(assert (=> d!26659 (= (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49048 #b00000000000000000000000000000000) e!64470)))

(declare-fun b!98948 () Bool)

(declare-fun e!64471 () Bool)

(assert (=> b!98948 (= e!64470 e!64471)))

(declare-fun res!49759 () Bool)

(assert (=> b!98948 (=> (not res!49759) (not e!64471))))

(assert (=> b!98948 (= res!49759 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2265 (_keys!4171 newMap!16))))))

(declare-fun b!98949 () Bool)

(assert (=> b!98949 (= e!64471 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49048 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26659 (not res!49758)) b!98948))

(assert (= (and b!98948 res!49759) b!98949))

(assert (=> d!26659 m!106891))

(declare-fun m!109037 () Bool)

(assert (=> b!98949 m!109037))

(assert (=> b!97834 d!26659))

(declare-fun b!98950 () Bool)

(declare-fun e!64472 () SeekEntryResult!253)

(declare-fun lt!49829 () SeekEntryResult!253)

(assert (=> b!98950 (= e!64472 (MissingZero!253 (index!3157 lt!49829)))))

(declare-fun b!98951 () Bool)

(declare-fun e!64473 () SeekEntryResult!253)

(assert (=> b!98951 (= e!64473 Undefined!253)))

(declare-fun b!98952 () Bool)

(declare-fun c!16871 () Bool)

(declare-fun lt!49828 () (_ BitVec 64))

(assert (=> b!98952 (= c!16871 (= lt!49828 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64474 () SeekEntryResult!253)

(assert (=> b!98952 (= e!64474 e!64472)))

(declare-fun b!98953 () Bool)

(assert (=> b!98953 (= e!64472 (seekKeyOrZeroReturnVacant!0 (x!12959 lt!49829) (index!3157 lt!49829) (index!3157 lt!49829) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun d!26661 () Bool)

(declare-fun lt!49830 () SeekEntryResult!253)

(assert (=> d!26661 (and (or ((_ is Undefined!253) lt!49830) (not ((_ is Found!253) lt!49830)) (and (bvsge (index!3156 lt!49830) #b00000000000000000000000000000000) (bvslt (index!3156 lt!49830) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49830) ((_ is Found!253) lt!49830) (not ((_ is MissingZero!253) lt!49830)) (and (bvsge (index!3155 lt!49830) #b00000000000000000000000000000000) (bvslt (index!3155 lt!49830) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49830) ((_ is Found!253) lt!49830) ((_ is MissingZero!253) lt!49830) (not ((_ is MissingVacant!253) lt!49830)) (and (bvsge (index!3158 lt!49830) #b00000000000000000000000000000000) (bvslt (index!3158 lt!49830) (size!2265 (_keys!4171 newMap!16))))) (or ((_ is Undefined!253) lt!49830) (ite ((_ is Found!253) lt!49830) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3156 lt!49830)) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!253) lt!49830) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3155 lt!49830)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!253) lt!49830) (= (select (arr!2015 (_keys!4171 newMap!16)) (index!3158 lt!49830)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26661 (= lt!49830 e!64473)))

(declare-fun c!16873 () Bool)

(assert (=> d!26661 (= c!16873 (and ((_ is Intermediate!253) lt!49829) (undefined!1065 lt!49829)))))

(assert (=> d!26661 (= lt!49829 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (mask!6578 newMap!16)) (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26661 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26661 (= (seekEntryOrOpen!0 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49830)))

(declare-fun b!98954 () Bool)

(assert (=> b!98954 (= e!64473 e!64474)))

(assert (=> b!98954 (= lt!49828 (select (arr!2015 (_keys!4171 newMap!16)) (index!3157 lt!49829)))))

(declare-fun c!16872 () Bool)

(assert (=> b!98954 (= c!16872 (= lt!49828 (select (arr!2015 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98955 () Bool)

(assert (=> b!98955 (= e!64474 (Found!253 (index!3157 lt!49829)))))

(assert (= (and d!26661 c!16873) b!98951))

(assert (= (and d!26661 (not c!16873)) b!98954))

(assert (= (and b!98954 c!16872) b!98955))

(assert (= (and b!98954 (not c!16872)) b!98952))

(assert (= (and b!98952 c!16871) b!98950))

(assert (= (and b!98952 (not c!16871)) b!98953))

(assert (=> b!98953 m!106891))

(declare-fun m!109039 () Bool)

(assert (=> b!98953 m!109039))

(declare-fun m!109041 () Bool)

(assert (=> d!26661 m!109041))

(assert (=> d!26661 m!106891))

(declare-fun m!109043 () Bool)

(assert (=> d!26661 m!109043))

(declare-fun m!109045 () Bool)

(assert (=> d!26661 m!109045))

(declare-fun m!109047 () Bool)

(assert (=> d!26661 m!109047))

(declare-fun m!109049 () Bool)

(assert (=> d!26661 m!109049))

(assert (=> d!26661 m!106895))

(assert (=> d!26661 m!106891))

(assert (=> d!26661 m!109041))

(declare-fun m!109051 () Bool)

(assert (=> b!98954 m!109051))

(assert (=> b!97834 d!26661))

(assert (=> b!97895 d!26131))

(declare-fun d!26663 () Bool)

(assert (=> d!26663 (isDefined!103 (getValueByKey!150 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun lt!49831 () Unit!2937)

(assert (=> d!26663 (= lt!49831 (choose!596 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(declare-fun e!64475 () Bool)

(assert (=> d!26663 e!64475))

(declare-fun res!49760 () Bool)

(assert (=> d!26663 (=> (not res!49760) (not e!64475))))

(assert (=> d!26663 (= res!49760 (isStrictlySorted!304 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))))

(assert (=> d!26663 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)) lt!49831)))

(declare-fun b!98956 () Bool)

(assert (=> b!98956 (= e!64475 (containsKey!154 (toList!783 (getCurrentListMap!474 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355)))))

(assert (= (and d!26663 res!49760) b!98956))

(assert (=> d!26663 m!106647))

(assert (=> d!26663 m!107113))

(assert (=> d!26663 m!107113))

(assert (=> d!26663 m!107115))

(assert (=> d!26663 m!106647))

(declare-fun m!109053 () Bool)

(assert (=> d!26663 m!109053))

(declare-fun m!109055 () Bool)

(assert (=> d!26663 m!109055))

(assert (=> b!98956 m!106647))

(assert (=> b!98956 m!107109))

(assert (=> b!97927 d!26663))

(assert (=> b!97927 d!26475))

(assert (=> b!97927 d!26477))

(declare-fun d!26665 () Bool)

(declare-fun e!64476 () Bool)

(assert (=> d!26665 e!64476))

(declare-fun res!49761 () Bool)

(assert (=> d!26665 (=> res!49761 e!64476)))

(declare-fun lt!49833 () Bool)

(assert (=> d!26665 (= res!49761 (not lt!49833))))

(declare-fun lt!49835 () Bool)

(assert (=> d!26665 (= lt!49833 lt!49835)))

(declare-fun lt!49832 () Unit!2937)

(declare-fun e!64477 () Unit!2937)

(assert (=> d!26665 (= lt!49832 e!64477)))

(declare-fun c!16874 () Bool)

(assert (=> d!26665 (= c!16874 lt!49835)))

(assert (=> d!26665 (= lt!49835 (containsKey!154 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26665 (= (contains!800 lt!49270 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49833)))

(declare-fun b!98957 () Bool)

(declare-fun lt!49834 () Unit!2937)

(assert (=> b!98957 (= e!64477 lt!49834)))

(assert (=> b!98957 (= lt!49834 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98957 (isDefined!103 (getValueByKey!150 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98958 () Bool)

(declare-fun Unit!2998 () Unit!2937)

(assert (=> b!98958 (= e!64477 Unit!2998)))

(declare-fun b!98959 () Bool)

(assert (=> b!98959 (= e!64476 (isDefined!103 (getValueByKey!150 (toList!783 lt!49270) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26665 c!16874) b!98957))

(assert (= (and d!26665 (not c!16874)) b!98958))

(assert (= (and d!26665 (not res!49761)) b!98959))

(declare-fun m!109057 () Bool)

(assert (=> d!26665 m!109057))

(declare-fun m!109059 () Bool)

(assert (=> b!98957 m!109059))

(assert (=> b!98957 m!107345))

(assert (=> b!98957 m!107345))

(declare-fun m!109061 () Bool)

(assert (=> b!98957 m!109061))

(assert (=> b!98959 m!107345))

(assert (=> b!98959 m!107345))

(assert (=> b!98959 m!109061))

(assert (=> d!26119 d!26665))

(declare-fun b!98962 () Bool)

(declare-fun e!64479 () Option!156)

(assert (=> b!98962 (= e!64479 (getValueByKey!150 (t!5534 lt!49272) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98960 () Bool)

(declare-fun e!64478 () Option!156)

(assert (=> b!98960 (= e!64478 (Some!155 (_2!1181 (h!2170 lt!49272))))))

(declare-fun b!98963 () Bool)

(assert (=> b!98963 (= e!64479 None!154)))

(declare-fun b!98961 () Bool)

(assert (=> b!98961 (= e!64478 e!64479)))

(declare-fun c!16876 () Bool)

(assert (=> b!98961 (= c!16876 (and ((_ is Cons!1576) lt!49272) (not (= (_1!1181 (h!2170 lt!49272)) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!26667 () Bool)

(declare-fun c!16875 () Bool)

(assert (=> d!26667 (= c!16875 (and ((_ is Cons!1576) lt!49272) (= (_1!1181 (h!2170 lt!49272)) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26667 (= (getValueByKey!150 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64478)))

(assert (= (and d!26667 c!16875) b!98960))

(assert (= (and d!26667 (not c!16875)) b!98961))

(assert (= (and b!98961 c!16876) b!98962))

(assert (= (and b!98961 (not c!16876)) b!98963))

(declare-fun m!109063 () Bool)

(assert (=> b!98962 m!109063))

(assert (=> d!26119 d!26667))

(declare-fun d!26669 () Bool)

(assert (=> d!26669 (= (getValueByKey!150 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49836 () Unit!2937)

(assert (=> d!26669 (= lt!49836 (choose!598 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!64480 () Bool)

(assert (=> d!26669 e!64480))

(declare-fun res!49762 () Bool)

(assert (=> d!26669 (=> (not res!49762) (not e!64480))))

(assert (=> d!26669 (= res!49762 (isStrictlySorted!304 lt!49272))))

(assert (=> d!26669 (= (lemmaContainsTupThenGetReturnValue!66 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49836)))

(declare-fun b!98964 () Bool)

(declare-fun res!49763 () Bool)

(assert (=> b!98964 (=> (not res!49763) (not e!64480))))

(assert (=> b!98964 (= res!49763 (containsKey!154 lt!49272 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98965 () Bool)

(assert (=> b!98965 (= e!64480 (contains!803 lt!49272 (tuple2!2341 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26669 res!49762) b!98964))

(assert (= (and b!98964 res!49763) b!98965))

(assert (=> d!26669 m!107339))

(declare-fun m!109065 () Bool)

(assert (=> d!26669 m!109065))

(declare-fun m!109067 () Bool)

(assert (=> d!26669 m!109067))

(declare-fun m!109069 () Bool)

(assert (=> b!98964 m!109069))

(declare-fun m!109071 () Bool)

(assert (=> b!98965 m!109071))

(assert (=> d!26119 d!26669))

(declare-fun b!98966 () Bool)

(declare-fun res!49764 () Bool)

(declare-fun e!64483 () Bool)

(assert (=> b!98966 (=> (not res!49764) (not e!64483))))

(declare-fun lt!49837 () List!1580)

(assert (=> b!98966 (= res!49764 (containsKey!154 lt!49837 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!16880 () Bool)

(declare-fun b!98967 () Bool)

(declare-fun c!16879 () Bool)

(declare-fun e!64484 () List!1580)

(assert (=> b!98967 (= e!64484 (ite c!16879 (t!5534 (toList!783 e!63763)) (ite c!16880 (Cons!1576 (h!2170 (toList!783 e!63763)) (t!5534 (toList!783 e!63763))) Nil!1577)))))

(declare-fun bm!10109 () Bool)

(declare-fun c!16877 () Bool)

(declare-fun call!10112 () List!1580)

(assert (=> bm!10109 (= call!10112 ($colon$colon!78 e!64484 (ite c!16877 (h!2170 (toList!783 e!63763)) (tuple2!2341 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16878 () Bool)

(assert (=> bm!10109 (= c!16878 c!16877)))

(declare-fun d!26671 () Bool)

(assert (=> d!26671 e!64483))

(declare-fun res!49765 () Bool)

(assert (=> d!26671 (=> (not res!49765) (not e!64483))))

(assert (=> d!26671 (= res!49765 (isStrictlySorted!304 lt!49837))))

(declare-fun e!64485 () List!1580)

(assert (=> d!26671 (= lt!49837 e!64485)))

(assert (=> d!26671 (= c!16877 (and ((_ is Cons!1576) (toList!783 e!63763)) (bvslt (_1!1181 (h!2170 (toList!783 e!63763))) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26671 (isStrictlySorted!304 (toList!783 e!63763))))

(assert (=> d!26671 (= (insertStrictlySorted!69 (toList!783 e!63763) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49837)))

(declare-fun b!98968 () Bool)

(assert (=> b!98968 (= e!64485 call!10112)))

(declare-fun b!98969 () Bool)

(declare-fun e!64481 () List!1580)

(declare-fun call!10113 () List!1580)

(assert (=> b!98969 (= e!64481 call!10113)))

(declare-fun b!98970 () Bool)

(declare-fun e!64482 () List!1580)

(declare-fun call!10114 () List!1580)

(assert (=> b!98970 (= e!64482 call!10114)))

(declare-fun b!98971 () Bool)

(assert (=> b!98971 (= c!16880 (and ((_ is Cons!1576) (toList!783 e!63763)) (bvsgt (_1!1181 (h!2170 (toList!783 e!63763))) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!98971 (= e!64482 e!64481)))

(declare-fun b!98972 () Bool)

(assert (=> b!98972 (= e!64483 (contains!803 lt!49837 (tuple2!2341 (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98973 () Bool)

(assert (=> b!98973 (= e!64481 call!10113)))

(declare-fun bm!10110 () Bool)

(assert (=> bm!10110 (= call!10113 call!10114)))

(declare-fun bm!10111 () Bool)

(assert (=> bm!10111 (= call!10114 call!10112)))

(declare-fun b!98974 () Bool)

(assert (=> b!98974 (= e!64485 e!64482)))

(assert (=> b!98974 (= c!16879 (and ((_ is Cons!1576) (toList!783 e!63763)) (= (_1!1181 (h!2170 (toList!783 e!63763))) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98975 () Bool)

(assert (=> b!98975 (= e!64484 (insertStrictlySorted!69 (t!5534 (toList!783 e!63763)) (_1!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1181 (ite c!16552 (ite c!16553 (tuple2!2341 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2341 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2341 (select (arr!2015 (_keys!4171 (v!2800 (underlying!337 thiss!992)))) from!355) (get!1280 (select (arr!2016 (_values!2464 (v!2800 (underlying!337 thiss!992)))) from!355) (dynLambda!368 (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26671 c!16877) b!98968))

(assert (= (and d!26671 (not c!16877)) b!98974))

(assert (= (and b!98974 c!16879) b!98970))

(assert (= (and b!98974 (not c!16879)) b!98971))

(assert (= (and b!98971 c!16880) b!98969))

(assert (= (and b!98971 (not c!16880)) b!98973))

(assert (= (or b!98969 b!98973) bm!10110))

(assert (= (or b!98970 bm!10110) bm!10111))

(assert (= (or b!98968 bm!10111) bm!10109))

(assert (= (and bm!10109 c!16878) b!98975))

(assert (= (and bm!10109 (not c!16878)) b!98967))

(assert (= (and d!26671 res!49765) b!98966))

(assert (= (and b!98966 res!49764) b!98972))

(declare-fun m!109073 () Bool)

(assert (=> b!98972 m!109073))

(declare-fun m!109075 () Bool)

(assert (=> d!26671 m!109075))

(declare-fun m!109077 () Bool)

(assert (=> d!26671 m!109077))

(declare-fun m!109079 () Bool)

(assert (=> bm!10109 m!109079))

(declare-fun m!109081 () Bool)

(assert (=> b!98975 m!109081))

(declare-fun m!109083 () Bool)

(assert (=> b!98966 m!109083))

(assert (=> d!26119 d!26671))

(declare-fun b!98976 () Bool)

(declare-fun e!64487 () Bool)

(assert (=> b!98976 (= e!64487 tp_is_empty!2631)))

(declare-fun condMapEmpty!3759 () Bool)

(declare-fun mapDefault!3759 () ValueCell!972)

(assert (=> mapNonEmpty!3757 (= condMapEmpty!3759 (= mapRest!3757 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3759)))))

(declare-fun e!64486 () Bool)

(declare-fun mapRes!3759 () Bool)

(assert (=> mapNonEmpty!3757 (= tp!9589 (and e!64486 mapRes!3759))))

(declare-fun mapIsEmpty!3759 () Bool)

(assert (=> mapIsEmpty!3759 mapRes!3759))

(declare-fun mapNonEmpty!3759 () Bool)

(declare-fun tp!9591 () Bool)

(assert (=> mapNonEmpty!3759 (= mapRes!3759 (and tp!9591 e!64487))))

(declare-fun mapRest!3759 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3759 () (_ BitVec 32))

(declare-fun mapValue!3759 () ValueCell!972)

(assert (=> mapNonEmpty!3759 (= mapRest!3757 (store mapRest!3759 mapKey!3759 mapValue!3759))))

(declare-fun b!98977 () Bool)

(assert (=> b!98977 (= e!64486 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3757 condMapEmpty!3759) mapIsEmpty!3759))

(assert (= (and mapNonEmpty!3757 (not condMapEmpty!3759)) mapNonEmpty!3759))

(assert (= (and mapNonEmpty!3759 ((_ is ValueCellFull!972) mapValue!3759)) b!98976))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!972) mapDefault!3759)) b!98977))

(declare-fun m!109085 () Bool)

(assert (=> mapNonEmpty!3759 m!109085))

(declare-fun b!98978 () Bool)

(declare-fun e!64489 () Bool)

(assert (=> b!98978 (= e!64489 tp_is_empty!2631)))

(declare-fun condMapEmpty!3760 () Bool)

(declare-fun mapDefault!3760 () ValueCell!972)

(assert (=> mapNonEmpty!3758 (= condMapEmpty!3760 (= mapRest!3758 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3760)))))

(declare-fun e!64488 () Bool)

(declare-fun mapRes!3760 () Bool)

(assert (=> mapNonEmpty!3758 (= tp!9590 (and e!64488 mapRes!3760))))

(declare-fun mapIsEmpty!3760 () Bool)

(assert (=> mapIsEmpty!3760 mapRes!3760))

(declare-fun mapNonEmpty!3760 () Bool)

(declare-fun tp!9592 () Bool)

(assert (=> mapNonEmpty!3760 (= mapRes!3760 (and tp!9592 e!64489))))

(declare-fun mapValue!3760 () ValueCell!972)

(declare-fun mapRest!3760 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3760 () (_ BitVec 32))

(assert (=> mapNonEmpty!3760 (= mapRest!3758 (store mapRest!3760 mapKey!3760 mapValue!3760))))

(declare-fun b!98979 () Bool)

(assert (=> b!98979 (= e!64488 tp_is_empty!2631)))

(assert (= (and mapNonEmpty!3758 condMapEmpty!3760) mapIsEmpty!3760))

(assert (= (and mapNonEmpty!3758 (not condMapEmpty!3760)) mapNonEmpty!3760))

(assert (= (and mapNonEmpty!3760 ((_ is ValueCellFull!972) mapValue!3760)) b!98978))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!972) mapDefault!3760)) b!98979))

(declare-fun m!109087 () Bool)

(assert (=> mapNonEmpty!3760 m!109087))

(declare-fun b_lambda!4397 () Bool)

(assert (= b_lambda!4387 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4397)))

(declare-fun b_lambda!4399 () Bool)

(assert (= b_lambda!4375 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4399)))

(declare-fun b_lambda!4401 () Bool)

(assert (= b_lambda!4391 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4401)))

(declare-fun b_lambda!4403 () Bool)

(assert (= b_lambda!4395 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4403)))

(declare-fun b_lambda!4405 () Bool)

(assert (= b_lambda!4393 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4405)))

(declare-fun b_lambda!4407 () Bool)

(assert (= b_lambda!4369 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4407)))

(declare-fun b_lambda!4409 () Bool)

(assert (= b_lambda!4373 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4409)))

(declare-fun b_lambda!4411 () Bool)

(assert (= b_lambda!4367 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4411)))

(declare-fun b_lambda!4413 () Bool)

(assert (= b_lambda!4383 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4413)))

(declare-fun b_lambda!4415 () Bool)

(assert (= b_lambda!4381 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4415)))

(declare-fun b_lambda!4417 () Bool)

(assert (= b_lambda!4379 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4417)))

(declare-fun b_lambda!4419 () Bool)

(assert (= b_lambda!4385 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4419)))

(declare-fun b_lambda!4421 () Bool)

(assert (= b_lambda!4377 (or (and b!97466 b_free!2429) (and b!97470 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))))) b_lambda!4421)))

(declare-fun b_lambda!4423 () Bool)

(assert (= b_lambda!4371 (or (and b!97466 b_free!2429 (= (defaultEntry!2481 (v!2800 (underlying!337 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97470 b_free!2431) b_lambda!4423)))

(check-sat (not d!26173) (not d!26201) tp_is_empty!2631 (not b_lambda!4421) (not d!26511) (not d!26413) (not d!26411) (not d!26467) (not b!98632) (not b!98372) (not d!26335) (not bm!10028) (not b!98808) (not bm!10045) (not b!98702) (not b!98231) (not b!98309) (not b!98663) (not b_lambda!4403) (not b!98744) b_and!6085 (not bm!10082) (not d!26623) (not d!26191) (not b!98613) (not b!98812) (not b!98469) (not b!98404) (not b!98876) (not d!26645) (not b!98935) (not d!26627) (not b!98920) (not d!26235) (not b!98781) (not b_lambda!4389) (not bm!10026) (not b!98633) (not b!98159) (not b!98866) (not d!26457) (not d!26507) (not d!26509) (not b!98898) (not b!98752) (not b!98687) (not d!26187) (not b!98417) (not d!26601) (not b!98873) (not b!98489) (not b!98467) (not b!98753) (not b!98148) (not b!98724) (not b!98708) (not b!98258) (not b!98370) (not b!98251) (not b!98551) (not b!98729) (not d!26517) (not b!98250) (not d!26345) (not d!26215) (not d!26587) (not d!26557) (not b!98213) (not b!98918) (not d!26303) (not b!98966) (not b!98384) (not d!26337) (not bm!10079) (not d!26551) (not b!98765) (not b!98672) (not b_lambda!4413) (not bm!10046) (not b!98382) (not b!98789) (not d!26327) (not b!98834) (not b!98842) (not b!98172) (not b!98615) (not b!98391) (not b!98689) (not b_lambda!4409) (not b!98357) (not d!26223) (not b!98965) (not b!98237) (not b!98825) (not b_lambda!4365) (not d!26519) (not d!26291) (not d!26197) (not b!98177) (not bm!10076) (not b!98934) (not b!98428) (not b!98353) (not b!98786) (not b!98628) (not d!26169) (not b!98447) (not bm!10029) (not bm!10073) (not d!26611) (not bm!10068) (not b!98164) (not b!98664) (not b!98701) (not b!98227) (not d!26285) (not b!98686) (not d!26621) (not bm!10017) (not b_lambda!4341) (not b!98242) (not d!26181) (not bm!10009) (not b!98722) (not d!26251) (not b!98488) (not d!26419) (not bm!10099) (not b!98256) (not b!98742) (not b!98407) (not b!98273) (not b!98516) (not d!26479) (not b!98787) (not b!98228) (not b!98347) (not b!98710) (not b!98367) (not b!98798) (not b!98296) (not b_lambda!4345) (not b!98284) (not b!98942) (not b!98698) (not d!26503) (not d!26385) (not b!98297) (not b_lambda!4405) (not b_lambda!4399) (not d!26499) (not b!98414) (not d!26289) (not b!98914) (not b!98395) (not bm!10019) (not d!26315) (not b!98922) (not bm!10059) (not b!98945) (not b!98637) (not b!98726) (not b!98215) (not b!98175) (not d!26299) (not b!98649) (not d!26493) (not d!26349) (not b!98566) (not b!98290) (not b!98437) (not b!98884) (not b_lambda!4407) (not b!98477) (not b!98471) (not b!98936) (not mapNonEmpty!3760) (not d!26239) (not b!98953) (not b!98568) (not d!26603) (not d!26253) (not b!98640) (not b!98279) (not b!98268) (not d!26441) (not d!26355) (not d!26395) (not d!26661) (not b!98470) (not d!26281) (not d!26513) (not b!98179) (not b!98630) (not b!98858) (not d!26475) (not b!98299) (not d!26461) (not d!26175) (not b!98217) (not d!26339) (not d!26629) (not b!98325) (not b!98463) (not d!26265) (not d!26287) (not b!98426) (not b!98883) (not b!98323) (not b!98409) (not b!98673) (not b!98541) (not b!98949) (not b!98405) (not b!98648) (not b!98739) (not b_lambda!4361) (not b!98346) (not b!98771) (not d!26639) (not d!26491) (not b!98864) (not b!98311) (not d!26347) (not b!98225) (not b!98891) (not d!26189) (not b!98368) (not b!98332) (not b_lambda!4401) (not b!98259) (not bm!10083) (not b!98475) (not d!26393) (not b!98572) (not b!98788) (not d!26649) (not b!98219) (not b!98661) (not d!26481) (not b_next!2431) (not b!98932) (not b!98721) (not b!98618) (not d!26471) (not b!98723) (not b!98822) (not b!98415) (not b!98751) (not b!98355) (not b!98289) (not d!26225) (not d!26537) (not b!98281) (not d!26427) (not b!98916) (not d!26159) (not d!26609) (not b!98535) (not b!98972) (not b!98525) (not d!26671) (not d!26325) (not b!98139) (not b!98459) (not d!26333) (not bm!10074) (not bm!10062) (not d!26401) (not b!98975) (not b!98482) (not d!26329) (not b!98624) (not b!98274) (not b!98890) (not b!98906) (not b!98343) (not d!26497) (not b_lambda!4357) (not d!26353) (not b!98171) (not d!26231) (not b!98393) (not b!98909) (not b!98900) (not d!26389) (not bm!10041) (not b!98662) (not b!98262) (not b!98170) (not b!98157) (not b!98520) (not d!26655) (not b!98166) (not b!98603) (not b!98310) (not d!26227) (not b!98430) (not b!98688) (not b!98392) (not b!98959) (not d!26523) (not b!98424) (not bm!10038) (not b!98639) (not b!98277) (not b!98893) (not b!98926) (not b!98270) (not d!26217) (not b!98369) (not b!98216) (not b!98162) (not b!98155) (not b!98406) (not b!98247) (not b!98929) (not b!98768) (not b!98226) (not bm!10072) (not d!26429) (not b!98160) (not d!26405) (not b!98711) (not b!98298) (not b!98209) (not b!98527) (not d!26387) (not b!98800) (not b_lambda!4419) (not b!98746) (not b!98141) (not d!26437) (not bm!10034) (not d!26177) (not b!98543) (not b!98620) (not b!98896) (not d!26653) (not b!98681) (not b!98713) (not d!26341) (not d!26607) (not b!98622) (not b!98348) (not d!26229) (not b!98625) (not bm!10015) (not bm!10086) (not d!26567) (not d!26357) (not b_lambda!4415) (not b!98839) (not bm!10027) (not b!98464) (not d!26637) (not d!26259) (not d!26635) (not b!98230) (not b!98519) (not d!26319) (not b!98212) (not b!98700) (not b!98803) (not b!98156) (not b!98210) (not d!26267) (not b!98336) (not d!26487) (not b!98221) (not b!98288) (not b!98184) (not d!26451) (not d!26663) (not d!26171) (not b!98163) (not b!98552) (not bm!10109) (not d!26593) (not b!98762) (not b!98254) (not d!26459) (not d!26529) (not b!98264) (not b!98450) (not d!26179) (not b!98666) (not b!98431) (not b!98538) (not b!98709) (not b!98423) (not b!98674) (not b!98510) (not b!98805) (not b_lambda!4397) (not d!26245) (not b!98439) (not bm!10040) (not b!98837) (not bm!10052) (not bm!10066) (not b!98458) (not d!26331) (not d!26631) (not b!98888) (not b!98180) (not b!98811) (not b!98529) (not d!26261) (not bm!10106) (not b!98802) (not b!98956) (not b!98899) (not b!98862) (not d!26589) (not d!26351) (not d!26343) (not b!98731) (not d!26495) (not b!98269) (not b!98410) (not bm!10023) (not d!26531) (not b!98427) (not d!26397) (not bm!10095) (not b!98830) (not d!26293) (not d!26619) (not bm!10098) (not b_lambda!4417) (not b!98679) (not b_lambda!4359) (not d!26213) (not b!98562) (not b!98550) (not b!98358) (not b!98642) (not d!26237) (not d!26269) (not b!98749) (not d!26651) (not b!98448) (not b!98383) (not d!26243) (not b!98252) (not b!98772) (not b!98361) (not b!98564) (not b!98232) (not d!26439) (not bm!10078) (not b!98403) (not b!98214) (not bm!10101) (not b!98818) (not b!98964) (not b!98229) (not d!26399) (not d!26465) (not b!98879) (not b!98174) (not d!26617) (not b!98582) (not b!98677) (not b!98381) (not b!98176) (not b!98261) (not b!98321) (not b_lambda!4411) (not b!98957) (not d!26615) (not b!98286) (not b!98668) (not b!98806) (not b!98836) (not d!26311) (not bm!10049) (not b!98266) (not b!98539) (not d!26247) (not d!26199) (not b!98422) (not bm!10018) (not b!98759) (not bm!10031) (not bm!10105) (not b!98792) (not bm!10033) (not d!26163) (not d!26275) (not bm!10030) (not bm!10022) (not d!26203) (not b_lambda!4423) (not b!98421) (not b!98522) (not b!98795) (not b!98554) (not bm!10048) (not d!26297) (not bm!10044) (not b!98563) (not d!26485) (not d!26501) (not b!98650) (not b!98696) (not d!26263) (not b!98446) (not b!98826) (not b_next!2429) (not d!26447) (not d!26205) (not d!26403) (not b!98146) (not b!98578) (not bm!10020) (not b!98549) (not d!26193) (not bm!10089) (not b!98911) (not b!98869) (not b!98380) (not b!98733) (not b!98249) (not d!26317) (not d!26221) (not b!98886) (not d!26323) (not b!98253) (not b!98149) (not b!98341) (not d!26207) (not b!98320) (not d!26527) (not b!98871) (not bm!10092) (not b!98631) (not b!98565) (not b!98651) (not bm!10014) (not b!98260) (not b!98732) (not d!26595) (not b!98248) (not bm!10069) (not b!98354) (not b!98528) (not d!26363) (not mapNonEmpty!3759) (not d!26375) (not bm!10102) (not b!98927) (not b!98783) (not b!98460) (not bm!10016) (not d!26373) (not d!26665) (not d!26257) (not b!98874) (not b!98338) (not b!98575) (not bm!10037) (not b!98653) (not b!98782) (not b!98670) (not b!98691) (not d!26483) (not d!26195) (not b!98445) (not d!26669) (not d!26219) (not b!98743) (not b!98182) (not b!98763) (not b!98143) (not d!26381) (not d!26185) (not d!26183) (not d!26657) (not d!26233) (not b!98472) (not bm!10100) (not b!98413) (not b!98962) (not b!98947) (not d!26313) (not d!26321) (not b!98301) (not d!26575) (not b!98173) b_and!6083 (not b!98390) (not b!98540) (not bm!10075) (not b!98807) (not b!98239) (not b!98881) (not b_lambda!4363) (not bm!10085) (not d!26443) (not b!98813) (not bm!10065) (not b!98425) (not d!26241) (not d!26453) (not b!98479) (not b!98770) (not d!26449) (not b!98875) (not b!98778))
(check-sat b_and!6083 b_and!6085 (not b_next!2429) (not b_next!2431))
