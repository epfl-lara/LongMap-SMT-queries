; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8422 () Bool)

(assert start!8422)

(declare-fun b!57147 () Bool)

(declare-fun b_free!1949 () Bool)

(declare-fun b_next!1949 () Bool)

(assert (=> b!57147 (= b_free!1949 (not b_next!1949))))

(declare-fun tp!7951 () Bool)

(declare-fun b_and!3443 () Bool)

(assert (=> b!57147 (= tp!7951 b_and!3443)))

(declare-fun b!57148 () Bool)

(declare-fun b_free!1951 () Bool)

(declare-fun b_next!1951 () Bool)

(assert (=> b!57148 (= b_free!1951 (not b_next!1951))))

(declare-fun tp!7954 () Bool)

(declare-fun b_and!3445 () Bool)

(assert (=> b!57148 (= tp!7954 b_and!3445)))

(declare-fun mapIsEmpty!2847 () Bool)

(declare-fun mapRes!2848 () Bool)

(assert (=> mapIsEmpty!2847 mapRes!2848))

(declare-fun mapNonEmpty!2847 () Bool)

(declare-fun tp!7952 () Bool)

(declare-fun e!37673 () Bool)

(assert (=> mapNonEmpty!2847 (= mapRes!2848 (and tp!7952 e!37673))))

(declare-fun mapKey!2848 () (_ BitVec 32))

(declare-datatypes ((V!2835 0))(
  ( (V!2836 (val!1240 Int)) )
))
(declare-datatypes ((array!3707 0))(
  ( (array!3708 (arr!1775 (Array (_ BitVec 32) (_ BitVec 64))) (size!2004 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!852 0))(
  ( (ValueCellFull!852 (v!2367 V!2835)) (EmptyCell!852) )
))
(declare-datatypes ((array!3709 0))(
  ( (array!3710 (arr!1776 (Array (_ BitVec 32) ValueCell!852)) (size!2005 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!612 0))(
  ( (LongMapFixedSize!613 (defaultEntry!2022 Int) (mask!5896 (_ BitVec 32)) (extraKeys!1913 (_ BitVec 32)) (zeroValue!1940 V!2835) (minValue!1940 V!2835) (_size!355 (_ BitVec 32)) (_keys!3642 array!3707) (_values!2005 array!3709) (_vacant!355 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!426 0))(
  ( (Cell!427 (v!2368 LongMapFixedSize!612)) )
))
(declare-datatypes ((LongMap!426 0))(
  ( (LongMap!427 (underlying!224 Cell!426)) )
))
(declare-fun thiss!992 () LongMap!426)

(declare-fun mapValue!2848 () ValueCell!852)

(declare-fun mapRest!2848 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2847 (= (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (store mapRest!2848 mapKey!2848 mapValue!2848))))

(declare-fun b!57143 () Bool)

(declare-fun e!37668 () Bool)

(declare-fun tp_is_empty!2391 () Bool)

(assert (=> b!57143 (= e!37668 tp_is_empty!2391)))

(declare-fun b!57144 () Bool)

(assert (=> b!57144 (= e!37673 tp_is_empty!2391)))

(declare-fun b!57145 () Bool)

(declare-fun e!37678 () Bool)

(declare-fun e!37670 () Bool)

(assert (=> b!57145 (= e!37678 e!37670)))

(declare-fun e!37681 () Bool)

(declare-fun array_inv!1099 (array!3707) Bool)

(declare-fun array_inv!1100 (array!3709) Bool)

(assert (=> b!57147 (= e!37670 (and tp!7951 tp_is_empty!2391 (array_inv!1099 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (array_inv!1100 (_values!2005 (v!2368 (underlying!224 thiss!992)))) e!37681))))

(declare-fun newMap!16 () LongMapFixedSize!612)

(declare-fun e!37676 () Bool)

(declare-fun e!37677 () Bool)

(assert (=> b!57148 (= e!37676 (and tp!7954 tp_is_empty!2391 (array_inv!1099 (_keys!3642 newMap!16)) (array_inv!1100 (_values!2005 newMap!16)) e!37677))))

(declare-fun b!57149 () Bool)

(assert (=> b!57149 (= e!37681 (and e!37668 mapRes!2848))))

(declare-fun condMapEmpty!2847 () Bool)

(declare-fun mapDefault!2847 () ValueCell!852)

(assert (=> b!57149 (= condMapEmpty!2847 (= (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2847)))))

(declare-fun b!57150 () Bool)

(declare-fun res!32015 () Bool)

(declare-fun e!37675 () Bool)

(assert (=> b!57150 (=> (not res!32015) (not e!37675))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!57150 (= res!32015 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun mapIsEmpty!2848 () Bool)

(declare-fun mapRes!2847 () Bool)

(assert (=> mapIsEmpty!2848 mapRes!2847))

(declare-fun b!57151 () Bool)

(declare-fun e!37669 () Bool)

(assert (=> b!57151 (= e!37669 tp_is_empty!2391)))

(declare-fun b!57152 () Bool)

(declare-datatypes ((Unit!1491 0))(
  ( (Unit!1492) )
))
(declare-fun e!37680 () Unit!1491)

(declare-fun Unit!1493 () Unit!1491)

(assert (=> b!57152 (= e!37680 Unit!1493)))

(declare-fun lt!22589 () Unit!1491)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lemmaListMapContainsThenArrayContainsFrom!29 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1491)

(assert (=> b!57152 (= lt!22589 (lemmaListMapContainsThenArrayContainsFrom!29 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3707 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!57152 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!22591 () Unit!1491)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3707 (_ BitVec 32) (_ BitVec 32)) Unit!1491)

(assert (=> b!57152 (= lt!22591 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1428 0))(
  ( (Nil!1425) (Cons!1424 (h!2004 (_ BitVec 64)) (t!4746 List!1428)) )
))
(declare-fun arrayNoDuplicates!0 (array!3707 (_ BitVec 32) List!1428) Bool)

(assert (=> b!57152 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) from!355 Nil!1425)))

(declare-fun lt!22587 () Unit!1491)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3707 (_ BitVec 32) (_ BitVec 64) List!1428) Unit!1491)

(assert (=> b!57152 (= lt!22587 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425)))))

(assert (=> b!57152 false))

(declare-fun b!57153 () Bool)

(assert (=> b!57153 (= e!37675 (not (= (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5896 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57154 () Bool)

(declare-fun Unit!1494 () Unit!1491)

(assert (=> b!57154 (= e!37680 Unit!1494)))

(declare-fun b!57155 () Bool)

(declare-fun res!32016 () Bool)

(declare-fun e!37666 () Bool)

(assert (=> b!57155 (=> (not res!32016) (not e!37666))))

(declare-fun valid!251 (LongMapFixedSize!612) Bool)

(assert (=> b!57155 (= res!32016 (valid!251 newMap!16))))

(declare-fun b!57156 () Bool)

(declare-fun e!37671 () Bool)

(assert (=> b!57156 (= e!37666 e!37671)))

(declare-fun res!32018 () Bool)

(assert (=> b!57156 (=> (not res!32018) (not e!37671))))

(declare-datatypes ((tuple2!2016 0))(
  ( (tuple2!2017 (_1!1019 (_ BitVec 64)) (_2!1019 V!2835)) )
))
(declare-datatypes ((List!1429 0))(
  ( (Nil!1426) (Cons!1425 (h!2005 tuple2!2016) (t!4747 List!1429)) )
))
(declare-datatypes ((ListLongMap!1361 0))(
  ( (ListLongMap!1362 (toList!696 List!1429)) )
))
(declare-fun lt!22590 () ListLongMap!1361)

(declare-fun lt!22592 () ListLongMap!1361)

(assert (=> b!57156 (= res!32018 (and (= lt!22592 lt!22590) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1102 (LongMapFixedSize!612) ListLongMap!1361)

(assert (=> b!57156 (= lt!22590 (map!1102 newMap!16))))

(declare-fun getCurrentListMap!401 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) ListLongMap!1361)

(assert (=> b!57156 (= lt!22592 (getCurrentListMap!401 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57157 () Bool)

(assert (=> b!57157 (= e!37671 e!37675)))

(declare-fun res!32012 () Bool)

(assert (=> b!57157 (=> (not res!32012) (not e!37675))))

(declare-datatypes ((tuple2!2018 0))(
  ( (tuple2!2019 (_1!1020 Bool) (_2!1020 LongMapFixedSize!612)) )
))
(declare-fun lt!22588 () tuple2!2018)

(assert (=> b!57157 (= res!32012 (and (_1!1020 lt!22588) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!22593 () Unit!1491)

(assert (=> b!57157 (= lt!22593 e!37680)))

(declare-fun c!7039 () Bool)

(declare-fun contains!679 (ListLongMap!1361 (_ BitVec 64)) Bool)

(assert (=> b!57157 (= c!7039 (contains!679 lt!22590 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun update!72 (LongMapFixedSize!612 (_ BitVec 64) V!2835) tuple2!2018)

(declare-fun get!1060 (ValueCell!852 V!2835) V!2835)

(declare-fun dynLambda!303 (Int (_ BitVec 64)) V!2835)

(assert (=> b!57157 (= lt!22588 (update!72 newMap!16 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57158 () Bool)

(declare-fun res!32014 () Bool)

(assert (=> b!57158 (=> (not res!32014) (not e!37666))))

(assert (=> b!57158 (= res!32014 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57146 () Bool)

(declare-fun e!37667 () Bool)

(assert (=> b!57146 (= e!37667 tp_is_empty!2391)))

(declare-fun res!32017 () Bool)

(assert (=> start!8422 (=> (not res!32017) (not e!37666))))

(declare-fun valid!252 (LongMap!426) Bool)

(assert (=> start!8422 (= res!32017 (valid!252 thiss!992))))

(assert (=> start!8422 e!37666))

(declare-fun e!37679 () Bool)

(assert (=> start!8422 e!37679))

(assert (=> start!8422 true))

(assert (=> start!8422 e!37676))

(declare-fun b!57159 () Bool)

(assert (=> b!57159 (= e!37677 (and e!37667 mapRes!2847))))

(declare-fun condMapEmpty!2848 () Bool)

(declare-fun mapDefault!2848 () ValueCell!852)

(assert (=> b!57159 (= condMapEmpty!2848 (= (arr!1776 (_values!2005 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2848)))))

(declare-fun b!57160 () Bool)

(assert (=> b!57160 (= e!37679 e!37678)))

(declare-fun b!57161 () Bool)

(declare-fun res!32013 () Bool)

(assert (=> b!57161 (=> (not res!32013) (not e!37666))))

(assert (=> b!57161 (= res!32013 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5896 newMap!16)) (_size!355 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun mapNonEmpty!2848 () Bool)

(declare-fun tp!7953 () Bool)

(assert (=> mapNonEmpty!2848 (= mapRes!2847 (and tp!7953 e!37669))))

(declare-fun mapValue!2847 () ValueCell!852)

(declare-fun mapRest!2847 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapKey!2847 () (_ BitVec 32))

(assert (=> mapNonEmpty!2848 (= (arr!1776 (_values!2005 newMap!16)) (store mapRest!2847 mapKey!2847 mapValue!2847))))

(assert (= (and start!8422 res!32017) b!57158))

(assert (= (and b!57158 res!32014) b!57155))

(assert (= (and b!57155 res!32016) b!57161))

(assert (= (and b!57161 res!32013) b!57156))

(assert (= (and b!57156 res!32018) b!57157))

(assert (= (and b!57157 c!7039) b!57152))

(assert (= (and b!57157 (not c!7039)) b!57154))

(assert (= (and b!57157 res!32012) b!57150))

(assert (= (and b!57150 res!32015) b!57153))

(assert (= (and b!57149 condMapEmpty!2847) mapIsEmpty!2847))

(assert (= (and b!57149 (not condMapEmpty!2847)) mapNonEmpty!2847))

(get-info :version)

(assert (= (and mapNonEmpty!2847 ((_ is ValueCellFull!852) mapValue!2848)) b!57144))

(assert (= (and b!57149 ((_ is ValueCellFull!852) mapDefault!2847)) b!57143))

(assert (= b!57147 b!57149))

(assert (= b!57145 b!57147))

(assert (= b!57160 b!57145))

(assert (= start!8422 b!57160))

(assert (= (and b!57159 condMapEmpty!2848) mapIsEmpty!2848))

(assert (= (and b!57159 (not condMapEmpty!2848)) mapNonEmpty!2848))

(assert (= (and mapNonEmpty!2848 ((_ is ValueCellFull!852) mapValue!2847)) b!57151))

(assert (= (and b!57159 ((_ is ValueCellFull!852) mapDefault!2848)) b!57146))

(assert (= b!57148 b!57159))

(assert (= start!8422 b!57148))

(declare-fun b_lambda!2491 () Bool)

(assert (=> (not b_lambda!2491) (not b!57157)))

(declare-fun t!4743 () Bool)

(declare-fun tb!1293 () Bool)

(assert (=> (and b!57147 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) t!4743) tb!1293))

(declare-fun result!2339 () Bool)

(assert (=> tb!1293 (= result!2339 tp_is_empty!2391)))

(assert (=> b!57157 t!4743))

(declare-fun b_and!3447 () Bool)

(assert (= b_and!3443 (and (=> t!4743 result!2339) b_and!3447)))

(declare-fun tb!1295 () Bool)

(declare-fun t!4745 () Bool)

(assert (=> (and b!57148 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) t!4745) tb!1295))

(declare-fun result!2343 () Bool)

(assert (= result!2343 result!2339))

(assert (=> b!57157 t!4745))

(declare-fun b_and!3449 () Bool)

(assert (= b_and!3445 (and (=> t!4745 result!2343) b_and!3449)))

(declare-fun m!48033 () Bool)

(assert (=> b!57152 m!48033))

(declare-fun m!48035 () Bool)

(assert (=> b!57152 m!48035))

(declare-fun m!48037 () Bool)

(assert (=> b!57152 m!48037))

(declare-fun m!48039 () Bool)

(assert (=> b!57152 m!48039))

(assert (=> b!57152 m!48037))

(assert (=> b!57152 m!48037))

(declare-fun m!48041 () Bool)

(assert (=> b!57152 m!48041))

(assert (=> b!57152 m!48037))

(declare-fun m!48043 () Bool)

(assert (=> b!57152 m!48043))

(assert (=> b!57157 m!48037))

(declare-fun m!48045 () Bool)

(assert (=> b!57157 m!48045))

(declare-fun m!48047 () Bool)

(assert (=> b!57157 m!48047))

(declare-fun m!48049 () Bool)

(assert (=> b!57157 m!48049))

(declare-fun m!48051 () Bool)

(assert (=> b!57157 m!48051))

(assert (=> b!57157 m!48037))

(assert (=> b!57157 m!48049))

(assert (=> b!57157 m!48037))

(assert (=> b!57157 m!48051))

(declare-fun m!48053 () Bool)

(assert (=> b!57157 m!48053))

(assert (=> b!57157 m!48047))

(declare-fun m!48055 () Bool)

(assert (=> b!57155 m!48055))

(declare-fun m!48057 () Bool)

(assert (=> mapNonEmpty!2848 m!48057))

(declare-fun m!48059 () Bool)

(assert (=> b!57148 m!48059))

(declare-fun m!48061 () Bool)

(assert (=> b!57148 m!48061))

(declare-fun m!48063 () Bool)

(assert (=> b!57147 m!48063))

(declare-fun m!48065 () Bool)

(assert (=> b!57147 m!48065))

(declare-fun m!48067 () Bool)

(assert (=> mapNonEmpty!2847 m!48067))

(assert (=> b!57156 m!48037))

(declare-fun m!48069 () Bool)

(assert (=> b!57156 m!48069))

(declare-fun m!48071 () Bool)

(assert (=> b!57156 m!48071))

(declare-fun m!48073 () Bool)

(assert (=> b!57150 m!48073))

(declare-fun m!48075 () Bool)

(assert (=> start!8422 m!48075))

(check-sat (not b!57147) b_and!3449 (not mapNonEmpty!2848) tp_is_empty!2391 (not b!57148) (not b!57157) (not start!8422) (not b!57152) (not mapNonEmpty!2847) (not b!57156) b_and!3447 (not b!57150) (not b_next!1949) (not b!57155) (not b_next!1951) (not b_lambda!2491))
(check-sat b_and!3447 b_and!3449 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun b_lambda!2495 () Bool)

(assert (= b_lambda!2491 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2495)))

(check-sat (not b!57147) (not b_lambda!2495) b_and!3449 (not mapNonEmpty!2848) tp_is_empty!2391 (not b!57148) (not b!57157) (not start!8422) (not b!57152) (not mapNonEmpty!2847) (not b!57156) b_and!3447 (not b!57150) (not b_next!1949) (not b!57155) (not b_next!1951))
(check-sat b_and!3447 b_and!3449 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun d!10529 () Bool)

(assert (=> d!10529 (= (array_inv!1099 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvsge (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57147 d!10529))

(declare-fun d!10531 () Bool)

(assert (=> d!10531 (= (array_inv!1100 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvsge (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57147 d!10531))

(declare-fun d!10533 () Bool)

(assert (=> d!10533 (= (map!1102 newMap!16) (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun bs!2476 () Bool)

(assert (= bs!2476 d!10533))

(declare-fun m!48121 () Bool)

(assert (=> bs!2476 m!48121))

(assert (=> b!57156 d!10533))

(declare-fun b!57265 () Bool)

(declare-fun e!37757 () ListLongMap!1361)

(declare-fun call!4087 () ListLongMap!1361)

(assert (=> b!57265 (= e!37757 call!4087)))

(declare-fun b!57266 () Bool)

(declare-fun e!37765 () Bool)

(declare-fun lt!22664 () ListLongMap!1361)

(declare-fun apply!65 (ListLongMap!1361 (_ BitVec 64)) V!2835)

(assert (=> b!57266 (= e!37765 (= (apply!65 lt!22664 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57267 () Bool)

(declare-fun e!37756 () Bool)

(assert (=> b!57267 (= e!37756 e!37765)))

(declare-fun res!32064 () Bool)

(declare-fun call!4081 () Bool)

(assert (=> b!57267 (= res!32064 call!4081)))

(assert (=> b!57267 (=> (not res!32064) (not e!37765))))

(declare-fun b!57268 () Bool)

(declare-fun e!37759 () Bool)

(declare-fun e!37760 () Bool)

(assert (=> b!57268 (= e!37759 e!37760)))

(declare-fun res!32059 () Bool)

(declare-fun call!4082 () Bool)

(assert (=> b!57268 (= res!32059 call!4082)))

(assert (=> b!57268 (=> (not res!32059) (not e!37760))))

(declare-fun e!37767 () Bool)

(declare-fun b!57269 () Bool)

(assert (=> b!57269 (= e!37767 (= (apply!65 lt!22664 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57269 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> b!57269 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57270 () Bool)

(declare-fun e!37762 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!57270 (= e!37762 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!4078 () Bool)

(declare-fun call!4083 () ListLongMap!1361)

(assert (=> bm!4078 (= call!4087 call!4083)))

(declare-fun d!10535 () Bool)

(declare-fun e!37764 () Bool)

(assert (=> d!10535 e!37764))

(declare-fun res!32061 () Bool)

(assert (=> d!10535 (=> (not res!32061) (not e!37764))))

(assert (=> d!10535 (= res!32061 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun lt!22676 () ListLongMap!1361)

(assert (=> d!10535 (= lt!22664 lt!22676)))

(declare-fun lt!22663 () Unit!1491)

(declare-fun e!37766 () Unit!1491)

(assert (=> d!10535 (= lt!22663 e!37766)))

(declare-fun c!7059 () Bool)

(declare-fun e!37768 () Bool)

(assert (=> d!10535 (= c!7059 e!37768)))

(declare-fun res!32060 () Bool)

(assert (=> d!10535 (=> (not res!32060) (not e!37768))))

(assert (=> d!10535 (= res!32060 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!37763 () ListLongMap!1361)

(assert (=> d!10535 (= lt!22676 e!37763)))

(declare-fun c!7057 () Bool)

(assert (=> d!10535 (= c!7057 (and (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10535 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992))))))

(assert (=> d!10535 (= (getCurrentListMap!401 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) lt!22664)))

(declare-fun b!57271 () Bool)

(declare-fun call!4085 () ListLongMap!1361)

(declare-fun +!80 (ListLongMap!1361 tuple2!2016) ListLongMap!1361)

(assert (=> b!57271 (= e!37763 (+!80 call!4085 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun bm!4079 () Bool)

(declare-fun call!4084 () ListLongMap!1361)

(assert (=> bm!4079 (= call!4084 call!4085)))

(declare-fun b!57272 () Bool)

(assert (=> b!57272 (= e!37764 e!37759)))

(declare-fun c!7058 () Bool)

(assert (=> b!57272 (= c!7058 (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4080 () Bool)

(declare-fun call!4086 () ListLongMap!1361)

(declare-fun getCurrentListMapNoExtraKeys!43 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) ListLongMap!1361)

(assert (=> bm!4080 (= call!4086 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57273 () Bool)

(declare-fun res!32066 () Bool)

(assert (=> b!57273 (=> (not res!32066) (not e!37764))))

(declare-fun e!37758 () Bool)

(assert (=> b!57273 (= res!32066 e!37758)))

(declare-fun res!32063 () Bool)

(assert (=> b!57273 (=> res!32063 e!37758)))

(assert (=> b!57273 (= res!32063 (not e!37762))))

(declare-fun res!32062 () Bool)

(assert (=> b!57273 (=> (not res!32062) (not e!37762))))

(assert (=> b!57273 (= res!32062 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun bm!4081 () Bool)

(assert (=> bm!4081 (= call!4082 (contains!679 lt!22664 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57274 () Bool)

(declare-fun lt!22674 () Unit!1491)

(assert (=> b!57274 (= e!37766 lt!22674)))

(declare-fun lt!22669 () ListLongMap!1361)

(assert (=> b!57274 (= lt!22669 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun lt!22666 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22666 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22677 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22677 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22665 () Unit!1491)

(declare-fun addStillContains!41 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> b!57274 (= lt!22665 (addStillContains!41 lt!22669 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22677))))

(assert (=> b!57274 (contains!679 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22677)))

(declare-fun lt!22672 () Unit!1491)

(assert (=> b!57274 (= lt!22672 lt!22665)))

(declare-fun lt!22668 () ListLongMap!1361)

(assert (=> b!57274 (= lt!22668 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun lt!22661 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22661 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22671 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22671 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22662 () Unit!1491)

(declare-fun addApplyDifferent!41 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> b!57274 (= lt!22662 (addApplyDifferent!41 lt!22668 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22671))))

(assert (=> b!57274 (= (apply!65 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22671) (apply!65 lt!22668 lt!22671))))

(declare-fun lt!22678 () Unit!1491)

(assert (=> b!57274 (= lt!22678 lt!22662)))

(declare-fun lt!22670 () ListLongMap!1361)

(assert (=> b!57274 (= lt!22670 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun lt!22673 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22673 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22659 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22659 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22679 () Unit!1491)

(assert (=> b!57274 (= lt!22679 (addApplyDifferent!41 lt!22670 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22659))))

(assert (=> b!57274 (= (apply!65 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22659) (apply!65 lt!22670 lt!22659))))

(declare-fun lt!22675 () Unit!1491)

(assert (=> b!57274 (= lt!22675 lt!22679)))

(declare-fun lt!22680 () ListLongMap!1361)

(assert (=> b!57274 (= lt!22680 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun lt!22660 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22660 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22667 () (_ BitVec 64))

(assert (=> b!57274 (= lt!22667 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57274 (= lt!22674 (addApplyDifferent!41 lt!22680 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22667))))

(assert (=> b!57274 (= (apply!65 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22667) (apply!65 lt!22680 lt!22667))))

(declare-fun b!57275 () Bool)

(assert (=> b!57275 (= e!37756 (not call!4081))))

(declare-fun b!57276 () Bool)

(assert (=> b!57276 (= e!37759 (not call!4082))))

(declare-fun bm!4082 () Bool)

(assert (=> bm!4082 (= call!4081 (contains!679 lt!22664 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4083 () Bool)

(declare-fun c!7056 () Bool)

(assert (=> bm!4083 (= call!4085 (+!80 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57277 () Bool)

(declare-fun e!37761 () ListLongMap!1361)

(assert (=> b!57277 (= e!37761 call!4084)))

(declare-fun b!57278 () Bool)

(assert (=> b!57278 (= e!37758 e!37767)))

(declare-fun res!32058 () Bool)

(assert (=> b!57278 (=> (not res!32058) (not e!37767))))

(assert (=> b!57278 (= res!32058 (contains!679 lt!22664 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57278 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57279 () Bool)

(assert (=> b!57279 (= e!37763 e!37761)))

(assert (=> b!57279 (= c!7056 (and (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4084 () Bool)

(assert (=> bm!4084 (= call!4083 call!4086)))

(declare-fun b!57280 () Bool)

(assert (=> b!57280 (= e!37760 (= (apply!65 lt!22664 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57281 () Bool)

(assert (=> b!57281 (= e!37757 call!4084)))

(declare-fun b!57282 () Bool)

(declare-fun c!7060 () Bool)

(assert (=> b!57282 (= c!7060 (and (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57282 (= e!37761 e!37757)))

(declare-fun b!57283 () Bool)

(declare-fun res!32065 () Bool)

(assert (=> b!57283 (=> (not res!32065) (not e!37764))))

(assert (=> b!57283 (= res!32065 e!37756)))

(declare-fun c!7055 () Bool)

(assert (=> b!57283 (= c!7055 (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57284 () Bool)

(declare-fun Unit!1495 () Unit!1491)

(assert (=> b!57284 (= e!37766 Unit!1495)))

(declare-fun b!57285 () Bool)

(assert (=> b!57285 (= e!37768 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!10535 c!7057) b!57271))

(assert (= (and d!10535 (not c!7057)) b!57279))

(assert (= (and b!57279 c!7056) b!57277))

(assert (= (and b!57279 (not c!7056)) b!57282))

(assert (= (and b!57282 c!7060) b!57281))

(assert (= (and b!57282 (not c!7060)) b!57265))

(assert (= (or b!57281 b!57265) bm!4078))

(assert (= (or b!57277 bm!4078) bm!4084))

(assert (= (or b!57277 b!57281) bm!4079))

(assert (= (or b!57271 bm!4084) bm!4080))

(assert (= (or b!57271 bm!4079) bm!4083))

(assert (= (and d!10535 res!32060) b!57285))

(assert (= (and d!10535 c!7059) b!57274))

(assert (= (and d!10535 (not c!7059)) b!57284))

(assert (= (and d!10535 res!32061) b!57273))

(assert (= (and b!57273 res!32062) b!57270))

(assert (= (and b!57273 (not res!32063)) b!57278))

(assert (= (and b!57278 res!32058) b!57269))

(assert (= (and b!57273 res!32066) b!57283))

(assert (= (and b!57283 c!7055) b!57267))

(assert (= (and b!57283 (not c!7055)) b!57275))

(assert (= (and b!57267 res!32064) b!57266))

(assert (= (or b!57267 b!57275) bm!4082))

(assert (= (and b!57283 res!32065) b!57272))

(assert (= (and b!57272 c!7058) b!57268))

(assert (= (and b!57272 (not c!7058)) b!57276))

(assert (= (and b!57268 res!32059) b!57280))

(assert (= (or b!57268 b!57276) bm!4081))

(declare-fun b_lambda!2497 () Bool)

(assert (=> (not b_lambda!2497) (not b!57269)))

(assert (=> b!57269 t!4743))

(declare-fun b_and!3459 () Bool)

(assert (= b_and!3447 (and (=> t!4743 result!2339) b_and!3459)))

(assert (=> b!57269 t!4745))

(declare-fun b_and!3461 () Bool)

(assert (= b_and!3449 (and (=> t!4745 result!2343) b_and!3461)))

(declare-fun m!48123 () Bool)

(assert (=> bm!4080 m!48123))

(declare-fun m!48125 () Bool)

(assert (=> b!57270 m!48125))

(assert (=> b!57270 m!48125))

(declare-fun m!48127 () Bool)

(assert (=> b!57270 m!48127))

(declare-fun m!48129 () Bool)

(assert (=> b!57280 m!48129))

(declare-fun m!48131 () Bool)

(assert (=> bm!4081 m!48131))

(declare-fun m!48133 () Bool)

(assert (=> bm!4082 m!48133))

(declare-fun m!48135 () Bool)

(assert (=> bm!4083 m!48135))

(declare-fun m!48137 () Bool)

(assert (=> b!57274 m!48137))

(declare-fun m!48139 () Bool)

(assert (=> b!57274 m!48139))

(declare-fun m!48141 () Bool)

(assert (=> b!57274 m!48141))

(declare-fun m!48143 () Bool)

(assert (=> b!57274 m!48143))

(declare-fun m!48145 () Bool)

(assert (=> b!57274 m!48145))

(declare-fun m!48147 () Bool)

(assert (=> b!57274 m!48147))

(declare-fun m!48149 () Bool)

(assert (=> b!57274 m!48149))

(declare-fun m!48151 () Bool)

(assert (=> b!57274 m!48151))

(declare-fun m!48153 () Bool)

(assert (=> b!57274 m!48153))

(declare-fun m!48155 () Bool)

(assert (=> b!57274 m!48155))

(declare-fun m!48157 () Bool)

(assert (=> b!57274 m!48157))

(assert (=> b!57274 m!48123))

(assert (=> b!57274 m!48155))

(declare-fun m!48159 () Bool)

(assert (=> b!57274 m!48159))

(assert (=> b!57274 m!48151))

(assert (=> b!57274 m!48147))

(assert (=> b!57274 m!48125))

(declare-fun m!48161 () Bool)

(assert (=> b!57274 m!48161))

(assert (=> b!57274 m!48143))

(declare-fun m!48163 () Bool)

(assert (=> b!57274 m!48163))

(declare-fun m!48165 () Bool)

(assert (=> b!57274 m!48165))

(assert (=> b!57269 m!48125))

(declare-fun m!48167 () Bool)

(assert (=> b!57269 m!48167))

(assert (=> b!57269 m!48049))

(declare-fun m!48169 () Bool)

(assert (=> b!57269 m!48169))

(assert (=> b!57269 m!48049))

(assert (=> b!57269 m!48125))

(declare-fun m!48171 () Bool)

(assert (=> b!57269 m!48171))

(assert (=> b!57269 m!48167))

(declare-fun m!48173 () Bool)

(assert (=> b!57271 m!48173))

(declare-fun m!48175 () Bool)

(assert (=> b!57266 m!48175))

(assert (=> b!57285 m!48125))

(assert (=> b!57285 m!48125))

(assert (=> b!57285 m!48127))

(assert (=> d!10535 m!48073))

(assert (=> b!57278 m!48125))

(assert (=> b!57278 m!48125))

(declare-fun m!48177 () Bool)

(assert (=> b!57278 m!48177))

(assert (=> b!57156 d!10535))

(declare-fun d!10537 () Bool)

(assert (=> d!10537 (= (array_inv!1099 (_keys!3642 newMap!16)) (bvsge (size!2004 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57148 d!10537))

(declare-fun d!10539 () Bool)

(assert (=> d!10539 (= (array_inv!1100 (_values!2005 newMap!16)) (bvsge (size!2005 (_values!2005 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57148 d!10539))

(declare-fun d!10541 () Bool)

(assert (=> d!10541 (= (valid!252 thiss!992) (valid!251 (v!2368 (underlying!224 thiss!992))))))

(declare-fun bs!2477 () Bool)

(assert (= bs!2477 d!10541))

(declare-fun m!48179 () Bool)

(assert (=> bs!2477 m!48179))

(assert (=> start!8422 d!10541))

(declare-fun d!10543 () Bool)

(declare-fun e!37773 () Bool)

(assert (=> d!10543 e!37773))

(declare-fun res!32069 () Bool)

(assert (=> d!10543 (=> res!32069 e!37773)))

(declare-fun lt!22690 () Bool)

(assert (=> d!10543 (= res!32069 (not lt!22690))))

(declare-fun lt!22692 () Bool)

(assert (=> d!10543 (= lt!22690 lt!22692)))

(declare-fun lt!22691 () Unit!1491)

(declare-fun e!37774 () Unit!1491)

(assert (=> d!10543 (= lt!22691 e!37774)))

(declare-fun c!7063 () Bool)

(assert (=> d!10543 (= c!7063 lt!22692)))

(declare-fun containsKey!127 (List!1429 (_ BitVec 64)) Bool)

(assert (=> d!10543 (= lt!22692 (containsKey!127 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10543 (= (contains!679 lt!22590 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!22690)))

(declare-fun b!57292 () Bool)

(declare-fun lt!22689 () Unit!1491)

(assert (=> b!57292 (= e!37774 lt!22689)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!75 (List!1429 (_ BitVec 64)) Unit!1491)

(assert (=> b!57292 (= lt!22689 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-datatypes ((Option!129 0))(
  ( (Some!128 (v!2372 V!2835)) (None!127) )
))
(declare-fun isDefined!76 (Option!129) Bool)

(declare-fun getValueByKey!123 (List!1429 (_ BitVec 64)) Option!129)

(assert (=> b!57292 (isDefined!76 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57293 () Bool)

(declare-fun Unit!1496 () Unit!1491)

(assert (=> b!57293 (= e!37774 Unit!1496)))

(declare-fun b!57294 () Bool)

(assert (=> b!57294 (= e!37773 (isDefined!76 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (= (and d!10543 c!7063) b!57292))

(assert (= (and d!10543 (not c!7063)) b!57293))

(assert (= (and d!10543 (not res!32069)) b!57294))

(assert (=> d!10543 m!48037))

(declare-fun m!48181 () Bool)

(assert (=> d!10543 m!48181))

(assert (=> b!57292 m!48037))

(declare-fun m!48183 () Bool)

(assert (=> b!57292 m!48183))

(assert (=> b!57292 m!48037))

(declare-fun m!48185 () Bool)

(assert (=> b!57292 m!48185))

(assert (=> b!57292 m!48185))

(declare-fun m!48187 () Bool)

(assert (=> b!57292 m!48187))

(assert (=> b!57294 m!48037))

(assert (=> b!57294 m!48185))

(assert (=> b!57294 m!48185))

(assert (=> b!57294 m!48187))

(assert (=> b!57157 d!10543))

(declare-fun b!57379 () Bool)

(declare-fun c!7093 () Bool)

(declare-datatypes ((SeekEntryResult!226 0))(
  ( (MissingZero!226 (index!3026 (_ BitVec 32))) (Found!226 (index!3027 (_ BitVec 32))) (Intermediate!226 (undefined!1038 Bool) (index!3028 (_ BitVec 32)) (x!9858 (_ BitVec 32))) (Undefined!226) (MissingVacant!226 (index!3029 (_ BitVec 32))) )
))
(declare-fun lt!22752 () SeekEntryResult!226)

(assert (=> b!57379 (= c!7093 ((_ is MissingVacant!226) lt!22752))))

(declare-fun e!37840 () Bool)

(declare-fun e!37826 () Bool)

(assert (=> b!57379 (= e!37840 e!37826)))

(declare-fun bm!4133 () Bool)

(declare-fun call!4140 () Unit!1491)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1491)

(assert (=> bm!4133 (= call!4140 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(declare-fun bm!4134 () Bool)

(declare-fun call!4146 () Bool)

(declare-fun call!4151 () Bool)

(assert (=> bm!4134 (= call!4146 call!4151)))

(declare-fun b!57380 () Bool)

(declare-fun e!37823 () Bool)

(declare-fun call!4142 () Bool)

(assert (=> b!57380 (= e!37823 (not call!4142))))

(declare-fun bm!4135 () Bool)

(declare-fun call!4137 () ListLongMap!1361)

(declare-fun call!4156 () ListLongMap!1361)

(assert (=> bm!4135 (= call!4137 call!4156)))

(declare-fun c!7096 () Bool)

(declare-fun call!4155 () tuple2!2018)

(declare-fun lt!22759 () SeekEntryResult!226)

(declare-fun bm!4136 () Bool)

(declare-fun updateHelperNewKey!14 (LongMapFixedSize!612 (_ BitVec 64) V!2835 (_ BitVec 32)) tuple2!2018)

(assert (=> bm!4136 (= call!4155 (updateHelperNewKey!14 newMap!16 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(declare-fun c!7098 () Bool)

(declare-fun call!4144 () ListLongMap!1361)

(declare-fun b!57381 () Bool)

(declare-fun e!37819 () ListLongMap!1361)

(assert (=> b!57381 (= e!37819 (ite c!7098 call!4137 call!4144))))

(declare-fun bm!4137 () Bool)

(declare-fun call!4157 () ListLongMap!1361)

(declare-fun call!4145 () ListLongMap!1361)

(assert (=> bm!4137 (= call!4157 call!4145)))

(declare-fun b!57382 () Bool)

(declare-fun e!37834 () Unit!1491)

(declare-fun Unit!1497 () Unit!1491)

(assert (=> b!57382 (= e!37834 Unit!1497)))

(declare-fun lt!22772 () Unit!1491)

(declare-fun call!4159 () Unit!1491)

(assert (=> b!57382 (= lt!22772 call!4159)))

(declare-fun lt!22753 () SeekEntryResult!226)

(declare-fun call!4147 () SeekEntryResult!226)

(assert (=> b!57382 (= lt!22753 call!4147)))

(declare-fun c!7102 () Bool)

(assert (=> b!57382 (= c!7102 ((_ is MissingZero!226) lt!22753))))

(declare-fun e!37835 () Bool)

(assert (=> b!57382 e!37835))

(declare-fun lt!22749 () Unit!1491)

(assert (=> b!57382 (= lt!22749 lt!22772)))

(assert (=> b!57382 false))

(declare-fun b!57383 () Bool)

(declare-fun e!37832 () Bool)

(declare-fun e!37820 () Bool)

(assert (=> b!57383 (= e!37832 e!37820)))

(declare-fun res!32102 () Bool)

(declare-fun call!4150 () ListLongMap!1361)

(assert (=> b!57383 (= res!32102 (contains!679 call!4150 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!57383 (=> (not res!32102) (not e!37820))))

(declare-fun b!57384 () Bool)

(declare-fun e!37824 () Bool)

(assert (=> b!57384 (= e!37826 e!37824)))

(declare-fun res!32109 () Bool)

(declare-fun call!4152 () Bool)

(assert (=> b!57384 (= res!32109 call!4152)))

(assert (=> b!57384 (=> (not res!32109) (not e!37824))))

(declare-fun b!57385 () Bool)

(declare-fun lt!22766 () tuple2!2018)

(assert (=> b!57385 (= lt!22766 call!4155)))

(declare-fun e!37837 () tuple2!2018)

(assert (=> b!57385 (= e!37837 (tuple2!2019 (_1!1020 lt!22766) (_2!1020 lt!22766)))))

(declare-fun b!57386 () Bool)

(declare-fun e!37821 () tuple2!2018)

(declare-fun e!37831 () tuple2!2018)

(assert (=> b!57386 (= e!37821 e!37831)))

(assert (=> b!57386 (= c!7098 (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57387 () Bool)

(declare-fun res!32103 () Bool)

(declare-fun e!37828 () Bool)

(assert (=> b!57387 (=> (not res!32103) (not e!37828))))

(declare-fun call!4158 () Bool)

(assert (=> b!57387 (= res!32103 call!4158)))

(assert (=> b!57387 (= e!37835 e!37828)))

(declare-fun b!57388 () Bool)

(declare-fun e!37830 () Bool)

(assert (=> b!57388 (= e!37830 ((_ is Undefined!226) lt!22753))))

(declare-fun b!57389 () Bool)

(declare-fun e!37836 () ListLongMap!1361)

(declare-fun call!4148 () ListLongMap!1361)

(assert (=> b!57389 (= e!37836 call!4148)))

(declare-fun b!57390 () Bool)

(assert (=> b!57390 (= c!7096 ((_ is MissingVacant!226) lt!22759))))

(declare-fun e!37825 () tuple2!2018)

(declare-fun e!37829 () tuple2!2018)

(assert (=> b!57390 (= e!37825 e!37829)))

(declare-fun b!57391 () Bool)

(declare-fun res!32104 () Bool)

(assert (=> b!57391 (= res!32104 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!22753)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!37833 () Bool)

(assert (=> b!57391 (=> (not res!32104) (not e!37833))))

(declare-fun b!57392 () Bool)

(declare-fun lt!22771 () Unit!1491)

(declare-fun lt!22748 () Unit!1491)

(assert (=> b!57392 (= lt!22771 lt!22748)))

(assert (=> b!57392 (= call!4157 call!4144)))

(declare-fun lt!22773 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!14 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1491)

(assert (=> b!57392 (= lt!22748 (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22773 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57392 (= lt!22773 (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!57392 (= e!37831 (tuple2!2019 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (_size!355 newMap!16) (_keys!3642 newMap!16) (_values!2005 newMap!16) (_vacant!355 newMap!16))))))

(declare-fun b!57393 () Bool)

(declare-fun e!37839 () Bool)

(assert (=> b!57393 (= e!37839 e!37832)))

(declare-fun c!7103 () Bool)

(declare-fun lt!22755 () tuple2!2018)

(assert (=> b!57393 (= c!7103 (_1!1020 lt!22755))))

(declare-fun b!57394 () Bool)

(declare-fun c!7094 () Bool)

(assert (=> b!57394 (= c!7094 ((_ is MissingVacant!226) lt!22753))))

(assert (=> b!57394 (= e!37835 e!37830)))

(declare-fun bm!4138 () Bool)

(assert (=> bm!4138 (= call!4142 call!4151)))

(declare-fun bm!4139 () Bool)

(declare-fun call!4143 () SeekEntryResult!226)

(assert (=> bm!4139 (= call!4147 call!4143)))

(declare-fun lt!22761 () (_ BitVec 32))

(declare-fun c!7105 () Bool)

(declare-fun c!7092 () Bool)

(declare-fun bm!4140 () Bool)

(declare-fun lt!22762 () array!3709)

(assert (=> bm!4140 (= call!4156 (getCurrentListMap!401 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun bm!4141 () Bool)

(declare-fun call!4154 () Bool)

(assert (=> bm!4141 (= call!4152 call!4154)))

(declare-fun bm!4142 () Bool)

(declare-fun call!4139 () ListLongMap!1361)

(assert (=> bm!4142 (= call!4139 (getCurrentListMap!401 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57395 () Bool)

(assert (=> b!57395 (= e!37829 e!37837)))

(declare-fun c!7099 () Bool)

(assert (=> b!57395 (= c!7099 ((_ is MissingZero!226) lt!22759))))

(declare-fun b!57396 () Bool)

(assert (=> b!57396 (= e!37830 e!37833)))

(declare-fun res!32111 () Bool)

(assert (=> b!57396 (= res!32111 call!4158)))

(assert (=> b!57396 (=> (not res!32111) (not e!37833))))

(declare-fun b!57397 () Bool)

(declare-fun lt!22757 () Unit!1491)

(declare-fun lt!22765 () Unit!1491)

(assert (=> b!57397 (= lt!22757 lt!22765)))

(assert (=> b!57397 (contains!679 call!4148 (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!75 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) Unit!1491)

(assert (=> b!57397 (= lt!22765 (lemmaValidKeyInArrayIsInListMap!75 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57397 (= lt!22762 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))))

(declare-fun lt!22747 () Unit!1491)

(declare-fun lt!22758 () Unit!1491)

(assert (=> b!57397 (= lt!22747 lt!22758)))

(assert (=> b!57397 (= call!4145 call!4139)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1491)

(assert (=> b!57397 (= lt!22758 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22767 () Unit!1491)

(assert (=> b!57397 (= lt!22767 e!37834)))

(declare-fun c!7097 () Bool)

(declare-fun call!4153 () Bool)

(assert (=> b!57397 (= c!7097 call!4153)))

(assert (=> b!57397 (= e!37837 (tuple2!2019 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (_size!355 newMap!16) (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (_vacant!355 newMap!16))))))

(declare-fun b!57398 () Bool)

(declare-fun res!32101 () Bool)

(assert (=> b!57398 (=> (not res!32101) (not e!37823))))

(assert (=> b!57398 (= res!32101 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!22752)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4143 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1491)

(assert (=> bm!4143 (= call!4159 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(declare-fun call!4138 () Bool)

(declare-fun lt!22763 () SeekEntryResult!226)

(declare-fun c!7104 () Bool)

(declare-fun c!7101 () Bool)

(declare-fun lt!22768 () SeekEntryResult!226)

(declare-fun bm!4144 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4144 (= call!4138 (inRange!0 (ite c!7105 (ite c!7101 (index!3027 lt!22763) (ite c!7104 (index!3026 lt!22752) (index!3029 lt!22752))) (ite c!7097 (index!3027 lt!22768) (ite c!7102 (index!3026 lt!22753) (index!3029 lt!22753)))) (mask!5896 newMap!16)))))

(declare-fun b!57399 () Bool)

(declare-fun e!37838 () Unit!1491)

(declare-fun Unit!1498 () Unit!1491)

(assert (=> b!57399 (= e!37838 Unit!1498)))

(declare-fun lt!22769 () Unit!1491)

(assert (=> b!57399 (= lt!22769 call!4140)))

(declare-fun call!4141 () SeekEntryResult!226)

(assert (=> b!57399 (= lt!22763 call!4141)))

(declare-fun res!32106 () Bool)

(assert (=> b!57399 (= res!32106 ((_ is Found!226) lt!22763))))

(declare-fun e!37822 () Bool)

(assert (=> b!57399 (=> (not res!32106) (not e!37822))))

(assert (=> b!57399 e!37822))

(declare-fun lt!22756 () Unit!1491)

(assert (=> b!57399 (= lt!22756 lt!22769)))

(assert (=> b!57399 false))

(declare-fun b!57400 () Bool)

(assert (=> b!57400 (= e!37819 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57401 () Bool)

(declare-fun res!32099 () Bool)

(assert (=> b!57401 (=> (not res!32099) (not e!37828))))

(assert (=> b!57401 (= res!32099 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!22753)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4145 () Bool)

(declare-fun call!4136 () Bool)

(assert (=> bm!4145 (= call!4158 call!4136)))

(declare-fun bm!4146 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3707 (_ BitVec 32)) SeekEntryResult!226)

(assert (=> bm!4146 (= call!4143 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun bm!4147 () Bool)

(assert (=> bm!4147 (= call!4144 call!4139)))

(declare-fun b!57402 () Bool)

(assert (=> b!57402 (= e!37828 (not call!4146))))

(declare-fun bm!4148 () Bool)

(declare-fun c!7095 () Bool)

(assert (=> bm!4148 (= c!7095 c!7105)))

(assert (=> bm!4148 (= call!4153 (contains!679 e!37836 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57403 () Bool)

(declare-fun lt!22764 () Unit!1491)

(assert (=> b!57403 (= e!37834 lt!22764)))

(assert (=> b!57403 (= lt!22764 call!4140)))

(assert (=> b!57403 (= lt!22768 call!4147)))

(declare-fun res!32108 () Bool)

(assert (=> b!57403 (= res!32108 ((_ is Found!226) lt!22768))))

(declare-fun e!37827 () Bool)

(assert (=> b!57403 (=> (not res!32108) (not e!37827))))

(assert (=> b!57403 e!37827))

(declare-fun b!57404 () Bool)

(declare-fun lt!22750 () Unit!1491)

(assert (=> b!57404 (= lt!22750 e!37838)))

(assert (=> b!57404 (= c!7101 call!4153)))

(assert (=> b!57404 (= e!37825 (tuple2!2019 false newMap!16))))

(declare-fun b!57405 () Bool)

(assert (=> b!57405 (= e!37822 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22763)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun call!4149 () ListLongMap!1361)

(declare-fun b!57406 () Bool)

(assert (=> b!57406 (= e!37820 (= call!4150 (+!80 call!4149 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57407 () Bool)

(declare-fun res!32098 () Bool)

(assert (=> b!57407 (=> (not res!32098) (not e!37823))))

(assert (=> b!57407 (= res!32098 call!4152)))

(assert (=> b!57407 (= e!37840 e!37823)))

(declare-fun bm!4149 () Bool)

(assert (=> bm!4149 (= call!4145 (+!80 e!37819 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7100 () Bool)

(assert (=> bm!4149 (= c!7100 c!7092)))

(declare-fun b!57408 () Bool)

(declare-fun res!32107 () Bool)

(assert (=> b!57408 (= res!32107 call!4136)))

(assert (=> b!57408 (=> (not res!32107) (not e!37827))))

(declare-fun b!57409 () Bool)

(assert (=> b!57409 (= e!37826 ((_ is Undefined!226) lt!22752))))

(declare-fun bm!4150 () Bool)

(assert (=> bm!4150 (= call!4150 (map!1102 (_2!1020 lt!22755)))))

(declare-fun bm!4151 () Bool)

(assert (=> bm!4151 (= call!4149 (map!1102 newMap!16))))

(declare-fun d!10545 () Bool)

(assert (=> d!10545 e!37839))

(declare-fun res!32110 () Bool)

(assert (=> d!10545 (=> (not res!32110) (not e!37839))))

(assert (=> d!10545 (= res!32110 (valid!251 (_2!1020 lt!22755)))))

(assert (=> d!10545 (= lt!22755 e!37821)))

(assert (=> d!10545 (= c!7092 (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvneg (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10545 (valid!251 newMap!16)))

(assert (=> d!10545 (= (update!72 newMap!16 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!22755)))

(declare-fun bm!4152 () Bool)

(assert (=> bm!4152 (= call!4141 call!4143)))

(declare-fun b!57410 () Bool)

(declare-fun lt!22754 () tuple2!2018)

(assert (=> b!57410 (= e!37829 (tuple2!2019 (_1!1020 lt!22754) (_2!1020 lt!22754)))))

(assert (=> b!57410 (= lt!22754 call!4155)))

(declare-fun b!57411 () Bool)

(declare-fun lt!22760 () Unit!1491)

(assert (=> b!57411 (= e!37838 lt!22760)))

(assert (=> b!57411 (= lt!22760 call!4159)))

(assert (=> b!57411 (= lt!22752 call!4141)))

(assert (=> b!57411 (= c!7104 ((_ is MissingZero!226) lt!22752))))

(assert (=> b!57411 e!37840))

(declare-fun b!57412 () Bool)

(assert (=> b!57412 (= e!37832 (= call!4150 call!4149))))

(declare-fun b!57413 () Bool)

(assert (=> b!57413 (= e!37827 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22768)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun bm!4153 () Bool)

(assert (=> bm!4153 (= call!4154 call!4138)))

(declare-fun b!57414 () Bool)

(assert (=> b!57414 (= e!37836 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57415 () Bool)

(assert (=> b!57415 (= e!37821 e!37825)))

(assert (=> b!57415 (= lt!22759 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> b!57415 (= c!7105 ((_ is Undefined!226) lt!22759))))

(declare-fun b!57416 () Bool)

(declare-fun res!32105 () Bool)

(assert (=> b!57416 (= res!32105 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!22752)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57416 (=> (not res!32105) (not e!37824))))

(declare-fun bm!4154 () Bool)

(assert (=> bm!4154 (= call!4151 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4155 () Bool)

(assert (=> bm!4155 (= call!4148 call!4156)))

(declare-fun b!57417 () Bool)

(declare-fun lt!22770 () Unit!1491)

(declare-fun lt!22751 () Unit!1491)

(assert (=> b!57417 (= lt!22770 lt!22751)))

(assert (=> b!57417 (= call!4157 call!4137)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1491)

(assert (=> b!57417 (= lt!22751 (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57417 (= lt!22761 (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!57417 (= e!37831 (tuple2!2019 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!355 newMap!16) (_keys!3642 newMap!16) (_values!2005 newMap!16) (_vacant!355 newMap!16))))))

(declare-fun b!57418 () Bool)

(assert (=> b!57418 (= e!37833 (not call!4146))))

(declare-fun bm!4156 () Bool)

(assert (=> bm!4156 (= call!4136 call!4138)))

(declare-fun b!57419 () Bool)

(declare-fun res!32100 () Bool)

(assert (=> b!57419 (= res!32100 call!4154)))

(assert (=> b!57419 (=> (not res!32100) (not e!37822))))

(declare-fun b!57420 () Bool)

(assert (=> b!57420 (= e!37824 (not call!4142))))

(assert (= (and d!10545 c!7092) b!57386))

(assert (= (and d!10545 (not c!7092)) b!57415))

(assert (= (and b!57386 c!7098) b!57392))

(assert (= (and b!57386 (not c!7098)) b!57417))

(assert (= (or b!57392 b!57417) bm!4147))

(assert (= (or b!57392 b!57417) bm!4135))

(assert (= (or b!57392 b!57417) bm!4137))

(assert (= (and b!57415 c!7105) b!57404))

(assert (= (and b!57415 (not c!7105)) b!57390))

(assert (= (and b!57404 c!7101) b!57399))

(assert (= (and b!57404 (not c!7101)) b!57411))

(assert (= (and b!57399 res!32106) b!57419))

(assert (= (and b!57419 res!32100) b!57405))

(assert (= (and b!57411 c!7104) b!57407))

(assert (= (and b!57411 (not c!7104)) b!57379))

(assert (= (and b!57407 res!32098) b!57398))

(assert (= (and b!57398 res!32101) b!57380))

(assert (= (and b!57379 c!7093) b!57384))

(assert (= (and b!57379 (not c!7093)) b!57409))

(assert (= (and b!57384 res!32109) b!57416))

(assert (= (and b!57416 res!32105) b!57420))

(assert (= (or b!57407 b!57384) bm!4141))

(assert (= (or b!57380 b!57420) bm!4138))

(assert (= (or b!57419 bm!4141) bm!4153))

(assert (= (or b!57399 b!57411) bm!4152))

(assert (= (and b!57390 c!7096) b!57410))

(assert (= (and b!57390 (not c!7096)) b!57395))

(assert (= (and b!57395 c!7099) b!57385))

(assert (= (and b!57395 (not c!7099)) b!57397))

(assert (= (and b!57397 c!7097) b!57403))

(assert (= (and b!57397 (not c!7097)) b!57382))

(assert (= (and b!57403 res!32108) b!57408))

(assert (= (and b!57408 res!32107) b!57413))

(assert (= (and b!57382 c!7102) b!57387))

(assert (= (and b!57382 (not c!7102)) b!57394))

(assert (= (and b!57387 res!32103) b!57401))

(assert (= (and b!57401 res!32099) b!57402))

(assert (= (and b!57394 c!7094) b!57396))

(assert (= (and b!57394 (not c!7094)) b!57388))

(assert (= (and b!57396 res!32111) b!57391))

(assert (= (and b!57391 res!32104) b!57418))

(assert (= (or b!57387 b!57396) bm!4145))

(assert (= (or b!57402 b!57418) bm!4134))

(assert (= (or b!57408 bm!4145) bm!4156))

(assert (= (or b!57403 b!57382) bm!4139))

(assert (= (or b!57410 b!57385) bm!4136))

(assert (= (or b!57404 b!57397) bm!4155))

(assert (= (or bm!4138 bm!4134) bm!4154))

(assert (= (or bm!4152 bm!4139) bm!4146))

(assert (= (or bm!4153 bm!4156) bm!4144))

(assert (= (or b!57411 b!57382) bm!4143))

(assert (= (or b!57399 b!57403) bm!4133))

(assert (= (or b!57404 b!57397) bm!4148))

(assert (= (and bm!4148 c!7095) b!57389))

(assert (= (and bm!4148 (not c!7095)) b!57414))

(assert (= (or bm!4135 bm!4155) bm!4140))

(assert (= (or bm!4147 b!57397) bm!4142))

(assert (= (or bm!4137 b!57397) bm!4149))

(assert (= (and bm!4149 c!7100) b!57381))

(assert (= (and bm!4149 (not c!7100)) b!57400))

(assert (= (and d!10545 res!32110) b!57393))

(assert (= (and b!57393 c!7103) b!57383))

(assert (= (and b!57393 (not c!7103)) b!57412))

(assert (= (and b!57383 res!32102) b!57406))

(assert (= (or b!57383 b!57406 b!57412) bm!4150))

(assert (= (or b!57406 b!57412) bm!4151))

(declare-fun m!48189 () Bool)

(assert (=> bm!4150 m!48189))

(assert (=> b!57392 m!48051))

(declare-fun m!48191 () Bool)

(assert (=> b!57392 m!48191))

(assert (=> b!57400 m!48121))

(declare-fun m!48193 () Bool)

(assert (=> b!57416 m!48193))

(assert (=> bm!4151 m!48069))

(declare-fun m!48195 () Bool)

(assert (=> d!10545 m!48195))

(assert (=> d!10545 m!48055))

(assert (=> b!57414 m!48121))

(declare-fun m!48197 () Bool)

(assert (=> b!57405 m!48197))

(declare-fun m!48199 () Bool)

(assert (=> b!57413 m!48199))

(assert (=> b!57417 m!48051))

(declare-fun m!48201 () Bool)

(assert (=> b!57417 m!48201))

(assert (=> bm!4146 m!48037))

(declare-fun m!48203 () Bool)

(assert (=> bm!4146 m!48203))

(declare-fun m!48205 () Bool)

(assert (=> b!57397 m!48205))

(declare-fun m!48207 () Bool)

(assert (=> b!57397 m!48207))

(declare-fun m!48209 () Bool)

(assert (=> b!57397 m!48209))

(declare-fun m!48211 () Bool)

(assert (=> b!57397 m!48211))

(assert (=> b!57397 m!48037))

(assert (=> b!57397 m!48051))

(declare-fun m!48213 () Bool)

(assert (=> b!57397 m!48213))

(assert (=> b!57397 m!48207))

(assert (=> bm!4133 m!48037))

(declare-fun m!48215 () Bool)

(assert (=> bm!4133 m!48215))

(declare-fun m!48217 () Bool)

(assert (=> b!57406 m!48217))

(assert (=> b!57415 m!48037))

(assert (=> b!57415 m!48203))

(assert (=> bm!4143 m!48037))

(declare-fun m!48219 () Bool)

(assert (=> bm!4143 m!48219))

(assert (=> bm!4136 m!48037))

(assert (=> bm!4136 m!48051))

(declare-fun m!48221 () Bool)

(assert (=> bm!4136 m!48221))

(assert (=> bm!4148 m!48037))

(declare-fun m!48223 () Bool)

(assert (=> bm!4148 m!48223))

(declare-fun m!48225 () Bool)

(assert (=> bm!4144 m!48225))

(assert (=> b!57383 m!48037))

(declare-fun m!48227 () Bool)

(assert (=> b!57383 m!48227))

(assert (=> bm!4154 m!48037))

(declare-fun m!48229 () Bool)

(assert (=> bm!4154 m!48229))

(assert (=> bm!4142 m!48211))

(declare-fun m!48231 () Bool)

(assert (=> bm!4142 m!48231))

(declare-fun m!48233 () Bool)

(assert (=> b!57401 m!48233))

(declare-fun m!48235 () Bool)

(assert (=> bm!4149 m!48235))

(declare-fun m!48237 () Bool)

(assert (=> b!57398 m!48237))

(declare-fun m!48239 () Bool)

(assert (=> bm!4140 m!48239))

(declare-fun m!48241 () Bool)

(assert (=> b!57391 m!48241))

(assert (=> b!57157 d!10545))

(declare-fun d!10547 () Bool)

(declare-fun c!7108 () Bool)

(assert (=> d!10547 (= c!7108 ((_ is ValueCellFull!852) (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun e!37843 () V!2835)

(assert (=> d!10547 (= (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!37843)))

(declare-fun b!57425 () Bool)

(declare-fun get!1061 (ValueCell!852 V!2835) V!2835)

(assert (=> b!57425 (= e!37843 (get!1061 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57426 () Bool)

(declare-fun get!1062 (ValueCell!852 V!2835) V!2835)

(assert (=> b!57426 (= e!37843 (get!1062 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10547 c!7108) b!57425))

(assert (= (and d!10547 (not c!7108)) b!57426))

(assert (=> b!57425 m!48047))

(assert (=> b!57425 m!48049))

(declare-fun m!48243 () Bool)

(assert (=> b!57425 m!48243))

(assert (=> b!57426 m!48047))

(assert (=> b!57426 m!48049))

(declare-fun m!48245 () Bool)

(assert (=> b!57426 m!48245))

(assert (=> b!57157 d!10547))

(declare-fun d!10549 () Bool)

(assert (=> d!10549 (not (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22776 () Unit!1491)

(declare-fun choose!68 (array!3707 (_ BitVec 32) (_ BitVec 64) List!1428) Unit!1491)

(assert (=> d!10549 (= lt!22776 (choose!68 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425)))))

(assert (=> d!10549 (bvslt (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10549 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425)) lt!22776)))

(declare-fun bs!2478 () Bool)

(assert (= bs!2478 d!10549))

(assert (=> bs!2478 m!48037))

(assert (=> bs!2478 m!48041))

(assert (=> bs!2478 m!48037))

(declare-fun m!48247 () Bool)

(assert (=> bs!2478 m!48247))

(assert (=> b!57152 d!10549))

(declare-fun d!10551 () Bool)

(assert (=> d!10551 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) from!355 Nil!1425)))

(declare-fun lt!22779 () Unit!1491)

(declare-fun choose!39 (array!3707 (_ BitVec 32) (_ BitVec 32)) Unit!1491)

(assert (=> d!10551 (= lt!22779 (choose!39 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!10551 (bvslt (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10551 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 from!355) lt!22779)))

(declare-fun bs!2479 () Bool)

(assert (= bs!2479 d!10551))

(assert (=> bs!2479 m!48035))

(declare-fun m!48249 () Bool)

(assert (=> bs!2479 m!48249))

(assert (=> b!57152 d!10551))

(declare-fun d!10553 () Bool)

(declare-fun res!32116 () Bool)

(declare-fun e!37848 () Bool)

(assert (=> d!10553 (=> res!32116 e!37848)))

(assert (=> d!10553 (= res!32116 (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10553 (= (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!37848)))

(declare-fun b!57431 () Bool)

(declare-fun e!37849 () Bool)

(assert (=> b!57431 (= e!37848 e!37849)))

(declare-fun res!32117 () Bool)

(assert (=> b!57431 (=> (not res!32117) (not e!37849))))

(assert (=> b!57431 (= res!32117 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57432 () Bool)

(assert (=> b!57432 (= e!37849 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!10553 (not res!32116)) b!57431))

(assert (= (and b!57431 res!32117) b!57432))

(assert (=> d!10553 m!48125))

(assert (=> b!57432 m!48037))

(declare-fun m!48251 () Bool)

(assert (=> b!57432 m!48251))

(assert (=> b!57152 d!10553))

(declare-fun d!10555 () Bool)

(declare-fun e!37852 () Bool)

(assert (=> d!10555 e!37852))

(declare-fun c!7111 () Bool)

(assert (=> d!10555 (= c!7111 (and (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!22782 () Unit!1491)

(declare-fun choose!287 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1491)

(assert (=> d!10555 (= lt!22782 (choose!287 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(assert (=> d!10555 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992))))))

(assert (=> d!10555 (= (lemmaListMapContainsThenArrayContainsFrom!29 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) lt!22782)))

(declare-fun b!57437 () Bool)

(assert (=> b!57437 (= e!37852 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57438 () Bool)

(assert (=> b!57438 (= e!37852 (ite (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10555 c!7111) b!57437))

(assert (= (and d!10555 (not c!7111)) b!57438))

(assert (=> d!10555 m!48037))

(declare-fun m!48253 () Bool)

(assert (=> d!10555 m!48253))

(assert (=> d!10555 m!48073))

(assert (=> b!57437 m!48037))

(assert (=> b!57437 m!48041))

(assert (=> b!57152 d!10555))

(declare-fun b!57449 () Bool)

(declare-fun e!37862 () Bool)

(declare-fun e!37864 () Bool)

(assert (=> b!57449 (= e!37862 e!37864)))

(declare-fun c!7114 () Bool)

(assert (=> b!57449 (= c!7114 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun bm!4159 () Bool)

(declare-fun call!4162 () Bool)

(assert (=> bm!4159 (= call!4162 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)))))

(declare-fun b!57450 () Bool)

(assert (=> b!57450 (= e!37864 call!4162)))

(declare-fun b!57451 () Bool)

(declare-fun e!37861 () Bool)

(assert (=> b!57451 (= e!37861 e!37862)))

(declare-fun res!32125 () Bool)

(assert (=> b!57451 (=> (not res!32125) (not e!37862))))

(declare-fun e!37863 () Bool)

(assert (=> b!57451 (= res!32125 (not e!37863))))

(declare-fun res!32126 () Bool)

(assert (=> b!57451 (=> (not res!32126) (not e!37863))))

(assert (=> b!57451 (= res!32126 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57452 () Bool)

(declare-fun contains!680 (List!1428 (_ BitVec 64)) Bool)

(assert (=> b!57452 (= e!37863 (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun d!10557 () Bool)

(declare-fun res!32124 () Bool)

(assert (=> d!10557 (=> res!32124 e!37861)))

(assert (=> d!10557 (= res!32124 (bvsge from!355 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10557 (= (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) from!355 Nil!1425) e!37861)))

(declare-fun b!57453 () Bool)

(assert (=> b!57453 (= e!37864 call!4162)))

(assert (= (and d!10557 (not res!32124)) b!57451))

(assert (= (and b!57451 res!32126) b!57452))

(assert (= (and b!57451 res!32125) b!57449))

(assert (= (and b!57449 c!7114) b!57453))

(assert (= (and b!57449 (not c!7114)) b!57450))

(assert (= (or b!57453 b!57450) bm!4159))

(assert (=> b!57449 m!48037))

(assert (=> b!57449 m!48037))

(declare-fun m!48255 () Bool)

(assert (=> b!57449 m!48255))

(assert (=> bm!4159 m!48037))

(declare-fun m!48257 () Bool)

(assert (=> bm!4159 m!48257))

(assert (=> b!57451 m!48037))

(assert (=> b!57451 m!48037))

(assert (=> b!57451 m!48255))

(assert (=> b!57452 m!48037))

(assert (=> b!57452 m!48037))

(declare-fun m!48259 () Bool)

(assert (=> b!57452 m!48259))

(assert (=> b!57152 d!10557))

(declare-fun d!10559 () Bool)

(declare-fun res!32133 () Bool)

(declare-fun e!37867 () Bool)

(assert (=> d!10559 (=> (not res!32133) (not e!37867))))

(declare-fun simpleValid!41 (LongMapFixedSize!612) Bool)

(assert (=> d!10559 (= res!32133 (simpleValid!41 newMap!16))))

(assert (=> d!10559 (= (valid!251 newMap!16) e!37867)))

(declare-fun b!57460 () Bool)

(declare-fun res!32134 () Bool)

(assert (=> b!57460 (=> (not res!32134) (not e!37867))))

(declare-fun arrayCountValidKeys!0 (array!3707 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!57460 (= res!32134 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (_size!355 newMap!16)))))

(declare-fun b!57461 () Bool)

(declare-fun res!32135 () Bool)

(assert (=> b!57461 (=> (not res!32135) (not e!37867))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3707 (_ BitVec 32)) Bool)

(assert (=> b!57461 (= res!32135 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57462 () Bool)

(assert (=> b!57462 (= e!37867 (arrayNoDuplicates!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 Nil!1425))))

(assert (= (and d!10559 res!32133) b!57460))

(assert (= (and b!57460 res!32134) b!57461))

(assert (= (and b!57461 res!32135) b!57462))

(declare-fun m!48261 () Bool)

(assert (=> d!10559 m!48261))

(declare-fun m!48263 () Bool)

(assert (=> b!57460 m!48263))

(declare-fun m!48265 () Bool)

(assert (=> b!57461 m!48265))

(declare-fun m!48267 () Bool)

(assert (=> b!57462 m!48267))

(assert (=> b!57155 d!10559))

(declare-fun d!10561 () Bool)

(assert (=> d!10561 (= (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992)))) (and (or (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000001111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000011111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000001111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000011111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000001111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000011111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000001111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000011111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000001111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000011111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000001111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000011111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000001111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000011111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000001111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000011111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000111111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00001111111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00011111111111111111111111111111) (= (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!57150 d!10561))

(declare-fun condMapEmpty!2857 () Bool)

(declare-fun mapDefault!2857 () ValueCell!852)

(assert (=> mapNonEmpty!2848 (= condMapEmpty!2857 (= mapRest!2847 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2857)))))

(declare-fun e!37873 () Bool)

(declare-fun mapRes!2857 () Bool)

(assert (=> mapNonEmpty!2848 (= tp!7953 (and e!37873 mapRes!2857))))

(declare-fun b!57470 () Bool)

(assert (=> b!57470 (= e!37873 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2857 () Bool)

(declare-fun tp!7969 () Bool)

(declare-fun e!37872 () Bool)

(assert (=> mapNonEmpty!2857 (= mapRes!2857 (and tp!7969 e!37872))))

(declare-fun mapKey!2857 () (_ BitVec 32))

(declare-fun mapValue!2857 () ValueCell!852)

(declare-fun mapRest!2857 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2857 (= mapRest!2847 (store mapRest!2857 mapKey!2857 mapValue!2857))))

(declare-fun b!57469 () Bool)

(assert (=> b!57469 (= e!37872 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2857 () Bool)

(assert (=> mapIsEmpty!2857 mapRes!2857))

(assert (= (and mapNonEmpty!2848 condMapEmpty!2857) mapIsEmpty!2857))

(assert (= (and mapNonEmpty!2848 (not condMapEmpty!2857)) mapNonEmpty!2857))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!852) mapValue!2857)) b!57469))

(assert (= (and mapNonEmpty!2848 ((_ is ValueCellFull!852) mapDefault!2857)) b!57470))

(declare-fun m!48269 () Bool)

(assert (=> mapNonEmpty!2857 m!48269))

(declare-fun condMapEmpty!2858 () Bool)

(declare-fun mapDefault!2858 () ValueCell!852)

(assert (=> mapNonEmpty!2847 (= condMapEmpty!2858 (= mapRest!2848 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2858)))))

(declare-fun e!37875 () Bool)

(declare-fun mapRes!2858 () Bool)

(assert (=> mapNonEmpty!2847 (= tp!7952 (and e!37875 mapRes!2858))))

(declare-fun b!57472 () Bool)

(assert (=> b!57472 (= e!37875 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2858 () Bool)

(declare-fun tp!7970 () Bool)

(declare-fun e!37874 () Bool)

(assert (=> mapNonEmpty!2858 (= mapRes!2858 (and tp!7970 e!37874))))

(declare-fun mapKey!2858 () (_ BitVec 32))

(declare-fun mapRest!2858 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapValue!2858 () ValueCell!852)

(assert (=> mapNonEmpty!2858 (= mapRest!2848 (store mapRest!2858 mapKey!2858 mapValue!2858))))

(declare-fun b!57471 () Bool)

(assert (=> b!57471 (= e!37874 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2858 () Bool)

(assert (=> mapIsEmpty!2858 mapRes!2858))

(assert (= (and mapNonEmpty!2847 condMapEmpty!2858) mapIsEmpty!2858))

(assert (= (and mapNonEmpty!2847 (not condMapEmpty!2858)) mapNonEmpty!2858))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!852) mapValue!2858)) b!57471))

(assert (= (and mapNonEmpty!2847 ((_ is ValueCellFull!852) mapDefault!2858)) b!57472))

(declare-fun m!48271 () Bool)

(assert (=> mapNonEmpty!2858 m!48271))

(declare-fun b_lambda!2499 () Bool)

(assert (= b_lambda!2497 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2499)))

(check-sat (not bm!4136) (not b!57271) (not b!57426) (not bm!4159) (not bm!4143) (not b!57392) (not b!57414) (not b!57449) (not b!57280) (not b!57285) (not bm!4144) (not bm!4149) (not bm!4083) (not b!57294) (not d!10555) (not bm!4142) (not bm!4081) b_and!3459 (not d!10549) (not b!57383) (not b!57432) (not b_lambda!2495) (not d!10545) (not d!10541) (not mapNonEmpty!2858) b_and!3461 (not b_lambda!2499) (not bm!4154) (not b!57270) (not b!57462) (not b!57269) (not bm!4148) (not bm!4151) (not b!57278) (not b!57452) (not bm!4082) (not d!10543) tp_is_empty!2391 (not d!10551) (not bm!4080) (not b!57266) (not b!57461) (not b!57460) (not b!57397) (not bm!4140) (not mapNonEmpty!2857) (not d!10559) (not b!57437) (not b!57406) (not b_next!1949) (not b_next!1951) (not bm!4150) (not b!57451) (not b!57425) (not b!57292) (not d!10535) (not b!57400) (not b!57417) (not d!10533) (not b!57415) (not bm!4146) (not b!57274) (not bm!4133))
(check-sat b_and!3459 b_and!3461 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun d!10563 () Bool)

(declare-fun get!1063 (Option!129) V!2835)

(assert (=> d!10563 (= (apply!65 lt!22664 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2480 () Bool)

(assert (= bs!2480 d!10563))

(declare-fun m!48273 () Bool)

(assert (=> bs!2480 m!48273))

(assert (=> bs!2480 m!48273))

(declare-fun m!48275 () Bool)

(assert (=> bs!2480 m!48275))

(assert (=> b!57266 d!10563))

(declare-fun d!10565 () Bool)

(declare-fun res!32136 () Bool)

(declare-fun e!37876 () Bool)

(assert (=> d!10565 (=> (not res!32136) (not e!37876))))

(assert (=> d!10565 (= res!32136 (simpleValid!41 (_2!1020 lt!22755)))))

(assert (=> d!10565 (= (valid!251 (_2!1020 lt!22755)) e!37876)))

(declare-fun b!57473 () Bool)

(declare-fun res!32137 () Bool)

(assert (=> b!57473 (=> (not res!32137) (not e!37876))))

(assert (=> b!57473 (= res!32137 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))) (_size!355 (_2!1020 lt!22755))))))

(declare-fun b!57474 () Bool)

(declare-fun res!32138 () Bool)

(assert (=> b!57474 (=> (not res!32138) (not e!37876))))

(assert (=> b!57474 (= res!32138 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755))))))

(declare-fun b!57475 () Bool)

(assert (=> b!57475 (= e!37876 (arrayNoDuplicates!0 (_keys!3642 (_2!1020 lt!22755)) #b00000000000000000000000000000000 Nil!1425))))

(assert (= (and d!10565 res!32136) b!57473))

(assert (= (and b!57473 res!32137) b!57474))

(assert (= (and b!57474 res!32138) b!57475))

(declare-fun m!48277 () Bool)

(assert (=> d!10565 m!48277))

(declare-fun m!48279 () Bool)

(assert (=> b!57473 m!48279))

(declare-fun m!48281 () Bool)

(assert (=> b!57474 m!48281))

(declare-fun m!48283 () Bool)

(assert (=> b!57475 m!48283))

(assert (=> d!10545 d!10565))

(assert (=> d!10545 d!10559))

(declare-fun d!10567 () Bool)

(assert (=> d!10567 (= (apply!65 lt!22664 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2481 () Bool)

(assert (= bs!2481 d!10567))

(declare-fun m!48285 () Bool)

(assert (=> bs!2481 m!48285))

(assert (=> bs!2481 m!48285))

(declare-fun m!48287 () Bool)

(assert (=> bs!2481 m!48287))

(assert (=> b!57280 d!10567))

(declare-fun d!10569 () Bool)

(assert (=> d!10569 (= (get!1061 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2367 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!57425 d!10569))

(declare-fun d!10571 () Bool)

(declare-fun res!32149 () Bool)

(declare-fun e!37879 () Bool)

(assert (=> d!10571 (=> (not res!32149) (not e!37879))))

(assert (=> d!10571 (= res!32149 (validMask!0 (mask!5896 newMap!16)))))

(assert (=> d!10571 (= (simpleValid!41 newMap!16) e!37879)))

(declare-fun b!57485 () Bool)

(declare-fun res!32150 () Bool)

(assert (=> b!57485 (=> (not res!32150) (not e!37879))))

(declare-fun size!2008 (LongMapFixedSize!612) (_ BitVec 32))

(assert (=> b!57485 (= res!32150 (bvsge (size!2008 newMap!16) (_size!355 newMap!16)))))

(declare-fun b!57484 () Bool)

(declare-fun res!32147 () Bool)

(assert (=> b!57484 (=> (not res!32147) (not e!37879))))

(assert (=> b!57484 (= res!32147 (and (= (size!2005 (_values!2005 newMap!16)) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001)) (= (size!2004 (_keys!3642 newMap!16)) (size!2005 (_values!2005 newMap!16))) (bvsge (_size!355 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!355 newMap!16) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!57487 () Bool)

(assert (=> b!57487 (= e!37879 (and (bvsge (extraKeys!1913 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!355 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!57486 () Bool)

(declare-fun res!32148 () Bool)

(assert (=> b!57486 (=> (not res!32148) (not e!37879))))

(assert (=> b!57486 (= res!32148 (= (size!2008 newMap!16) (bvadd (_size!355 newMap!16) (bvsdiv (bvadd (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!10571 res!32149) b!57484))

(assert (= (and b!57484 res!32147) b!57485))

(assert (= (and b!57485 res!32150) b!57486))

(assert (= (and b!57486 res!32148) b!57487))

(declare-fun m!48289 () Bool)

(assert (=> d!10571 m!48289))

(declare-fun m!48291 () Bool)

(assert (=> b!57485 m!48291))

(assert (=> b!57486 m!48291))

(assert (=> d!10559 d!10571))

(assert (=> d!10551 d!10557))

(declare-fun d!10573 () Bool)

(assert (=> d!10573 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) from!355 Nil!1425)))

(assert (=> d!10573 true))

(declare-fun _$71!69 () Unit!1491)

(assert (=> d!10573 (= (choose!39 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!69)))

(declare-fun bs!2482 () Bool)

(assert (= bs!2482 d!10573))

(assert (=> bs!2482 m!48035))

(assert (=> d!10551 d!10573))

(assert (=> d!10535 d!10561))

(declare-fun b!57488 () Bool)

(declare-fun e!37881 () ListLongMap!1361)

(declare-fun call!4169 () ListLongMap!1361)

(assert (=> b!57488 (= e!37881 call!4169)))

(declare-fun e!37889 () Bool)

(declare-fun lt!22788 () ListLongMap!1361)

(declare-fun b!57489 () Bool)

(assert (=> b!57489 (= e!37889 (= (apply!65 lt!22788 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))

(declare-fun b!57490 () Bool)

(declare-fun e!37880 () Bool)

(assert (=> b!57490 (= e!37880 e!37889)))

(declare-fun res!32157 () Bool)

(declare-fun call!4163 () Bool)

(assert (=> b!57490 (= res!32157 call!4163)))

(assert (=> b!57490 (=> (not res!32157) (not e!37889))))

(declare-fun b!57491 () Bool)

(declare-fun e!37883 () Bool)

(declare-fun e!37884 () Bool)

(assert (=> b!57491 (= e!37883 e!37884)))

(declare-fun res!32152 () Bool)

(declare-fun call!4164 () Bool)

(assert (=> b!57491 (= res!32152 call!4164)))

(assert (=> b!57491 (=> (not res!32152) (not e!37884))))

(declare-fun b!57492 () Bool)

(declare-fun e!37891 () Bool)

(assert (=> b!57492 (= e!37891 (= (apply!65 lt!22788 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57492 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))))))))

(assert (=> b!57492 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57493 () Bool)

(declare-fun e!37886 () Bool)

(assert (=> b!57493 (= e!37886 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4160 () Bool)

(declare-fun call!4165 () ListLongMap!1361)

(assert (=> bm!4160 (= call!4169 call!4165)))

(declare-fun d!10575 () Bool)

(declare-fun e!37888 () Bool)

(assert (=> d!10575 e!37888))

(declare-fun res!32154 () Bool)

(assert (=> d!10575 (=> (not res!32154) (not e!37888))))

(assert (=> d!10575 (= res!32154 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!22800 () ListLongMap!1361)

(assert (=> d!10575 (= lt!22788 lt!22800)))

(declare-fun lt!22787 () Unit!1491)

(declare-fun e!37890 () Unit!1491)

(assert (=> d!10575 (= lt!22787 e!37890)))

(declare-fun c!7119 () Bool)

(declare-fun e!37892 () Bool)

(assert (=> d!10575 (= c!7119 e!37892)))

(declare-fun res!32153 () Bool)

(assert (=> d!10575 (=> (not res!32153) (not e!37892))))

(assert (=> d!10575 (= res!32153 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!37887 () ListLongMap!1361)

(assert (=> d!10575 (= lt!22800 e!37887)))

(declare-fun c!7117 () Bool)

(assert (=> d!10575 (= c!7117 (and (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10575 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10575 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!22788)))

(declare-fun b!57494 () Bool)

(declare-fun call!4167 () ListLongMap!1361)

(assert (=> b!57494 (= e!37887 (+!80 call!4167 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4161 () Bool)

(declare-fun call!4166 () ListLongMap!1361)

(assert (=> bm!4161 (= call!4166 call!4167)))

(declare-fun b!57495 () Bool)

(assert (=> b!57495 (= e!37888 e!37883)))

(declare-fun c!7118 () Bool)

(assert (=> b!57495 (= c!7118 (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!4168 () ListLongMap!1361)

(declare-fun bm!4162 () Bool)

(assert (=> bm!4162 (= call!4168 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57496 () Bool)

(declare-fun res!32159 () Bool)

(assert (=> b!57496 (=> (not res!32159) (not e!37888))))

(declare-fun e!37882 () Bool)

(assert (=> b!57496 (= res!32159 e!37882)))

(declare-fun res!32156 () Bool)

(assert (=> b!57496 (=> res!32156 e!37882)))

(assert (=> b!57496 (= res!32156 (not e!37886))))

(declare-fun res!32155 () Bool)

(assert (=> b!57496 (=> (not res!32155) (not e!37886))))

(assert (=> b!57496 (= res!32155 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4163 () Bool)

(assert (=> bm!4163 (= call!4164 (contains!679 lt!22788 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57497 () Bool)

(declare-fun lt!22798 () Unit!1491)

(assert (=> b!57497 (= e!37890 lt!22798)))

(declare-fun lt!22793 () ListLongMap!1361)

(assert (=> b!57497 (= lt!22793 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22790 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22790 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22801 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22801 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22789 () Unit!1491)

(assert (=> b!57497 (= lt!22789 (addStillContains!41 lt!22793 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22801))))

(assert (=> b!57497 (contains!679 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22801)))

(declare-fun lt!22796 () Unit!1491)

(assert (=> b!57497 (= lt!22796 lt!22789)))

(declare-fun lt!22792 () ListLongMap!1361)

(assert (=> b!57497 (= lt!22792 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22785 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22785 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22795 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22795 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22786 () Unit!1491)

(assert (=> b!57497 (= lt!22786 (addApplyDifferent!41 lt!22792 lt!22785 (minValue!1940 newMap!16) lt!22795))))

(assert (=> b!57497 (= (apply!65 (+!80 lt!22792 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) lt!22795) (apply!65 lt!22792 lt!22795))))

(declare-fun lt!22802 () Unit!1491)

(assert (=> b!57497 (= lt!22802 lt!22786)))

(declare-fun lt!22794 () ListLongMap!1361)

(assert (=> b!57497 (= lt!22794 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22797 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22797 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22783 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22783 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22803 () Unit!1491)

(assert (=> b!57497 (= lt!22803 (addApplyDifferent!41 lt!22794 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22783))))

(assert (=> b!57497 (= (apply!65 (+!80 lt!22794 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22783) (apply!65 lt!22794 lt!22783))))

(declare-fun lt!22799 () Unit!1491)

(assert (=> b!57497 (= lt!22799 lt!22803)))

(declare-fun lt!22804 () ListLongMap!1361)

(assert (=> b!57497 (= lt!22804 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22784 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22784 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22791 () (_ BitVec 64))

(assert (=> b!57497 (= lt!22791 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57497 (= lt!22798 (addApplyDifferent!41 lt!22804 lt!22784 (minValue!1940 newMap!16) lt!22791))))

(assert (=> b!57497 (= (apply!65 (+!80 lt!22804 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) lt!22791) (apply!65 lt!22804 lt!22791))))

(declare-fun b!57498 () Bool)

(assert (=> b!57498 (= e!37880 (not call!4163))))

(declare-fun b!57499 () Bool)

(assert (=> b!57499 (= e!37883 (not call!4164))))

(declare-fun bm!4164 () Bool)

(assert (=> bm!4164 (= call!4163 (contains!679 lt!22788 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7116 () Bool)

(declare-fun bm!4165 () Bool)

(assert (=> bm!4165 (= call!4167 (+!80 (ite c!7117 call!4168 (ite c!7116 call!4165 call!4169)) (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!57500 () Bool)

(declare-fun e!37885 () ListLongMap!1361)

(assert (=> b!57500 (= e!37885 call!4166)))

(declare-fun b!57501 () Bool)

(assert (=> b!57501 (= e!37882 e!37891)))

(declare-fun res!32151 () Bool)

(assert (=> b!57501 (=> (not res!32151) (not e!37891))))

(assert (=> b!57501 (= res!32151 (contains!679 lt!22788 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57501 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57502 () Bool)

(assert (=> b!57502 (= e!37887 e!37885)))

(assert (=> b!57502 (= c!7116 (and (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4166 () Bool)

(assert (=> bm!4166 (= call!4165 call!4168)))

(declare-fun b!57503 () Bool)

(assert (=> b!57503 (= e!37884 (= (apply!65 lt!22788 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!57504 () Bool)

(assert (=> b!57504 (= e!37881 call!4166)))

(declare-fun c!7120 () Bool)

(declare-fun b!57505 () Bool)

(assert (=> b!57505 (= c!7120 (and (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57505 (= e!37885 e!37881)))

(declare-fun b!57506 () Bool)

(declare-fun res!32158 () Bool)

(assert (=> b!57506 (=> (not res!32158) (not e!37888))))

(assert (=> b!57506 (= res!32158 e!37880)))

(declare-fun c!7115 () Bool)

(assert (=> b!57506 (= c!7115 (not (= (bvand (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57507 () Bool)

(declare-fun Unit!1499 () Unit!1491)

(assert (=> b!57507 (= e!37890 Unit!1499)))

(declare-fun b!57508 () Bool)

(assert (=> b!57508 (= e!37892 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10575 c!7117) b!57494))

(assert (= (and d!10575 (not c!7117)) b!57502))

(assert (= (and b!57502 c!7116) b!57500))

(assert (= (and b!57502 (not c!7116)) b!57505))

(assert (= (and b!57505 c!7120) b!57504))

(assert (= (and b!57505 (not c!7120)) b!57488))

(assert (= (or b!57504 b!57488) bm!4160))

(assert (= (or b!57500 bm!4160) bm!4166))

(assert (= (or b!57500 b!57504) bm!4161))

(assert (= (or b!57494 bm!4166) bm!4162))

(assert (= (or b!57494 bm!4161) bm!4165))

(assert (= (and d!10575 res!32153) b!57508))

(assert (= (and d!10575 c!7119) b!57497))

(assert (= (and d!10575 (not c!7119)) b!57507))

(assert (= (and d!10575 res!32154) b!57496))

(assert (= (and b!57496 res!32155) b!57493))

(assert (= (and b!57496 (not res!32156)) b!57501))

(assert (= (and b!57501 res!32151) b!57492))

(assert (= (and b!57496 res!32159) b!57506))

(assert (= (and b!57506 c!7115) b!57490))

(assert (= (and b!57506 (not c!7115)) b!57498))

(assert (= (and b!57490 res!32157) b!57489))

(assert (= (or b!57490 b!57498) bm!4164))

(assert (= (and b!57506 res!32158) b!57495))

(assert (= (and b!57495 c!7118) b!57491))

(assert (= (and b!57495 (not c!7118)) b!57499))

(assert (= (and b!57491 res!32152) b!57503))

(assert (= (or b!57491 b!57499) bm!4163))

(declare-fun b_lambda!2501 () Bool)

(assert (=> (not b_lambda!2501) (not b!57492)))

(declare-fun tb!1301 () Bool)

(declare-fun t!4753 () Bool)

(assert (=> (and b!57147 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16)) t!4753) tb!1301))

(declare-fun result!2353 () Bool)

(assert (=> tb!1301 (= result!2353 tp_is_empty!2391)))

(assert (=> b!57492 t!4753))

(declare-fun b_and!3463 () Bool)

(assert (= b_and!3459 (and (=> t!4753 result!2353) b_and!3463)))

(declare-fun t!4755 () Bool)

(declare-fun tb!1303 () Bool)

(assert (=> (and b!57148 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 newMap!16)) t!4755) tb!1303))

(declare-fun result!2355 () Bool)

(assert (= result!2355 result!2353))

(assert (=> b!57492 t!4755))

(declare-fun b_and!3465 () Bool)

(assert (= b_and!3461 (and (=> t!4755 result!2355) b_and!3465)))

(declare-fun m!48293 () Bool)

(assert (=> bm!4162 m!48293))

(declare-fun m!48295 () Bool)

(assert (=> b!57493 m!48295))

(assert (=> b!57493 m!48295))

(declare-fun m!48297 () Bool)

(assert (=> b!57493 m!48297))

(declare-fun m!48299 () Bool)

(assert (=> b!57503 m!48299))

(declare-fun m!48301 () Bool)

(assert (=> bm!4163 m!48301))

(declare-fun m!48303 () Bool)

(assert (=> bm!4164 m!48303))

(declare-fun m!48305 () Bool)

(assert (=> bm!4165 m!48305))

(declare-fun m!48307 () Bool)

(assert (=> b!57497 m!48307))

(declare-fun m!48309 () Bool)

(assert (=> b!57497 m!48309))

(declare-fun m!48311 () Bool)

(assert (=> b!57497 m!48311))

(declare-fun m!48313 () Bool)

(assert (=> b!57497 m!48313))

(declare-fun m!48315 () Bool)

(assert (=> b!57497 m!48315))

(declare-fun m!48317 () Bool)

(assert (=> b!57497 m!48317))

(declare-fun m!48319 () Bool)

(assert (=> b!57497 m!48319))

(declare-fun m!48321 () Bool)

(assert (=> b!57497 m!48321))

(declare-fun m!48323 () Bool)

(assert (=> b!57497 m!48323))

(declare-fun m!48325 () Bool)

(assert (=> b!57497 m!48325))

(declare-fun m!48327 () Bool)

(assert (=> b!57497 m!48327))

(assert (=> b!57497 m!48293))

(assert (=> b!57497 m!48325))

(declare-fun m!48329 () Bool)

(assert (=> b!57497 m!48329))

(assert (=> b!57497 m!48321))

(assert (=> b!57497 m!48317))

(assert (=> b!57497 m!48295))

(declare-fun m!48331 () Bool)

(assert (=> b!57497 m!48331))

(assert (=> b!57497 m!48313))

(declare-fun m!48333 () Bool)

(assert (=> b!57497 m!48333))

(declare-fun m!48335 () Bool)

(assert (=> b!57497 m!48335))

(assert (=> b!57492 m!48295))

(declare-fun m!48337 () Bool)

(assert (=> b!57492 m!48337))

(declare-fun m!48339 () Bool)

(assert (=> b!57492 m!48339))

(declare-fun m!48341 () Bool)

(assert (=> b!57492 m!48341))

(assert (=> b!57492 m!48339))

(assert (=> b!57492 m!48295))

(declare-fun m!48343 () Bool)

(assert (=> b!57492 m!48343))

(assert (=> b!57492 m!48337))

(declare-fun m!48345 () Bool)

(assert (=> b!57494 m!48345))

(declare-fun m!48347 () Bool)

(assert (=> b!57489 m!48347))

(assert (=> b!57508 m!48295))

(assert (=> b!57508 m!48295))

(assert (=> b!57508 m!48297))

(assert (=> d!10575 m!48289))

(assert (=> b!57501 m!48295))

(assert (=> b!57501 m!48295))

(declare-fun m!48349 () Bool)

(assert (=> b!57501 m!48349))

(assert (=> bm!4142 d!10575))

(declare-fun d!10577 () Bool)

(assert (=> d!10577 (= (map!1102 (_2!1020 lt!22755)) (getCurrentListMap!401 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun bs!2483 () Bool)

(assert (= bs!2483 d!10577))

(declare-fun m!48351 () Bool)

(assert (=> bs!2483 m!48351))

(assert (=> bm!4150 d!10577))

(declare-fun d!10579 () Bool)

(declare-fun e!37895 () Bool)

(assert (=> d!10579 e!37895))

(declare-fun c!7123 () Bool)

(assert (=> d!10579 (= c!7123 (and (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!10579 true))

(declare-fun _$29!63 () Unit!1491)

(assert (=> d!10579 (= (choose!287 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) _$29!63)))

(declare-fun b!57513 () Bool)

(assert (=> b!57513 (= e!37895 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57514 () Bool)

(assert (=> b!57514 (= e!37895 (ite (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10579 c!7123) b!57513))

(assert (= (and d!10579 (not c!7123)) b!57514))

(assert (=> b!57513 m!48037))

(assert (=> b!57513 m!48041))

(assert (=> d!10555 d!10579))

(assert (=> d!10555 d!10561))

(declare-fun d!10581 () Bool)

(assert (=> d!10581 (= (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57270 d!10581))

(declare-fun b!57515 () Bool)

(declare-fun e!37897 () ListLongMap!1361)

(declare-fun call!4176 () ListLongMap!1361)

(assert (=> b!57515 (= e!37897 call!4176)))

(declare-fun b!57516 () Bool)

(declare-fun e!37905 () Bool)

(declare-fun lt!22810 () ListLongMap!1361)

(assert (=> b!57516 (= e!37905 (= (apply!65 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!57517 () Bool)

(declare-fun e!37896 () Bool)

(assert (=> b!57517 (= e!37896 e!37905)))

(declare-fun res!32166 () Bool)

(declare-fun call!4170 () Bool)

(assert (=> b!57517 (= res!32166 call!4170)))

(assert (=> b!57517 (=> (not res!32166) (not e!37905))))

(declare-fun b!57518 () Bool)

(declare-fun e!37899 () Bool)

(declare-fun e!37900 () Bool)

(assert (=> b!57518 (= e!37899 e!37900)))

(declare-fun res!32161 () Bool)

(declare-fun call!4171 () Bool)

(assert (=> b!57518 (= res!32161 call!4171)))

(assert (=> b!57518 (=> (not res!32161) (not e!37900))))

(declare-fun b!57519 () Bool)

(declare-fun e!37907 () Bool)

(assert (=> b!57519 (= e!37907 (= (apply!65 lt!22810 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (_values!2005 newMap!16))))))

(assert (=> b!57519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57520 () Bool)

(declare-fun e!37902 () Bool)

(assert (=> b!57520 (= e!37902 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4167 () Bool)

(declare-fun call!4172 () ListLongMap!1361)

(assert (=> bm!4167 (= call!4176 call!4172)))

(declare-fun d!10583 () Bool)

(declare-fun e!37904 () Bool)

(assert (=> d!10583 e!37904))

(declare-fun res!32163 () Bool)

(assert (=> d!10583 (=> (not res!32163) (not e!37904))))

(assert (=> d!10583 (= res!32163 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!22822 () ListLongMap!1361)

(assert (=> d!10583 (= lt!22810 lt!22822)))

(declare-fun lt!22809 () Unit!1491)

(declare-fun e!37906 () Unit!1491)

(assert (=> d!10583 (= lt!22809 e!37906)))

(declare-fun c!7128 () Bool)

(declare-fun e!37908 () Bool)

(assert (=> d!10583 (= c!7128 e!37908)))

(declare-fun res!32162 () Bool)

(assert (=> d!10583 (=> (not res!32162) (not e!37908))))

(assert (=> d!10583 (= res!32162 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!37903 () ListLongMap!1361)

(assert (=> d!10583 (= lt!22822 e!37903)))

(declare-fun c!7126 () Bool)

(assert (=> d!10583 (= c!7126 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10583 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10583 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!22810)))

(declare-fun b!57521 () Bool)

(declare-fun call!4174 () ListLongMap!1361)

(assert (=> b!57521 (= e!37903 (+!80 call!4174 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4168 () Bool)

(declare-fun call!4173 () ListLongMap!1361)

(assert (=> bm!4168 (= call!4173 call!4174)))

(declare-fun b!57522 () Bool)

(assert (=> b!57522 (= e!37904 e!37899)))

(declare-fun c!7127 () Bool)

(assert (=> b!57522 (= c!7127 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4169 () Bool)

(declare-fun call!4175 () ListLongMap!1361)

(assert (=> bm!4169 (= call!4175 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57523 () Bool)

(declare-fun res!32168 () Bool)

(assert (=> b!57523 (=> (not res!32168) (not e!37904))))

(declare-fun e!37898 () Bool)

(assert (=> b!57523 (= res!32168 e!37898)))

(declare-fun res!32165 () Bool)

(assert (=> b!57523 (=> res!32165 e!37898)))

(assert (=> b!57523 (= res!32165 (not e!37902))))

(declare-fun res!32164 () Bool)

(assert (=> b!57523 (=> (not res!32164) (not e!37902))))

(assert (=> b!57523 (= res!32164 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4170 () Bool)

(assert (=> bm!4170 (= call!4171 (contains!679 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57524 () Bool)

(declare-fun lt!22820 () Unit!1491)

(assert (=> b!57524 (= e!37906 lt!22820)))

(declare-fun lt!22815 () ListLongMap!1361)

(assert (=> b!57524 (= lt!22815 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22812 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22812 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22823 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22823 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22811 () Unit!1491)

(assert (=> b!57524 (= lt!22811 (addStillContains!41 lt!22815 lt!22812 (zeroValue!1940 newMap!16) lt!22823))))

(assert (=> b!57524 (contains!679 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) lt!22823)))

(declare-fun lt!22818 () Unit!1491)

(assert (=> b!57524 (= lt!22818 lt!22811)))

(declare-fun lt!22814 () ListLongMap!1361)

(assert (=> b!57524 (= lt!22814 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22807 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22807 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22817 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22817 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22808 () Unit!1491)

(assert (=> b!57524 (= lt!22808 (addApplyDifferent!41 lt!22814 lt!22807 (minValue!1940 newMap!16) lt!22817))))

(assert (=> b!57524 (= (apply!65 (+!80 lt!22814 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) lt!22817) (apply!65 lt!22814 lt!22817))))

(declare-fun lt!22824 () Unit!1491)

(assert (=> b!57524 (= lt!22824 lt!22808)))

(declare-fun lt!22816 () ListLongMap!1361)

(assert (=> b!57524 (= lt!22816 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22819 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22819 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22805 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22805 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22825 () Unit!1491)

(assert (=> b!57524 (= lt!22825 (addApplyDifferent!41 lt!22816 lt!22819 (zeroValue!1940 newMap!16) lt!22805))))

(assert (=> b!57524 (= (apply!65 (+!80 lt!22816 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) lt!22805) (apply!65 lt!22816 lt!22805))))

(declare-fun lt!22821 () Unit!1491)

(assert (=> b!57524 (= lt!22821 lt!22825)))

(declare-fun lt!22826 () ListLongMap!1361)

(assert (=> b!57524 (= lt!22826 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22806 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22806 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22813 () (_ BitVec 64))

(assert (=> b!57524 (= lt!22813 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57524 (= lt!22820 (addApplyDifferent!41 lt!22826 lt!22806 (minValue!1940 newMap!16) lt!22813))))

(assert (=> b!57524 (= (apply!65 (+!80 lt!22826 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) lt!22813) (apply!65 lt!22826 lt!22813))))

(declare-fun b!57525 () Bool)

(assert (=> b!57525 (= e!37896 (not call!4170))))

(declare-fun b!57526 () Bool)

(assert (=> b!57526 (= e!37899 (not call!4171))))

(declare-fun bm!4171 () Bool)

(assert (=> bm!4171 (= call!4170 (contains!679 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7125 () Bool)

(declare-fun bm!4172 () Bool)

(assert (=> bm!4172 (= call!4174 (+!80 (ite c!7126 call!4175 (ite c!7125 call!4172 call!4176)) (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!57527 () Bool)

(declare-fun e!37901 () ListLongMap!1361)

(assert (=> b!57527 (= e!37901 call!4173)))

(declare-fun b!57528 () Bool)

(assert (=> b!57528 (= e!37898 e!37907)))

(declare-fun res!32160 () Bool)

(assert (=> b!57528 (=> (not res!32160) (not e!37907))))

(assert (=> b!57528 (= res!32160 (contains!679 lt!22810 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57528 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57529 () Bool)

(assert (=> b!57529 (= e!37903 e!37901)))

(assert (=> b!57529 (= c!7125 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4173 () Bool)

(assert (=> bm!4173 (= call!4172 call!4175)))

(declare-fun b!57530 () Bool)

(assert (=> b!57530 (= e!37900 (= (apply!65 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!57531 () Bool)

(assert (=> b!57531 (= e!37897 call!4173)))

(declare-fun b!57532 () Bool)

(declare-fun c!7129 () Bool)

(assert (=> b!57532 (= c!7129 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57532 (= e!37901 e!37897)))

(declare-fun b!57533 () Bool)

(declare-fun res!32167 () Bool)

(assert (=> b!57533 (=> (not res!32167) (not e!37904))))

(assert (=> b!57533 (= res!32167 e!37896)))

(declare-fun c!7124 () Bool)

(assert (=> b!57533 (= c!7124 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57534 () Bool)

(declare-fun Unit!1500 () Unit!1491)

(assert (=> b!57534 (= e!37906 Unit!1500)))

(declare-fun b!57535 () Bool)

(assert (=> b!57535 (= e!37908 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10583 c!7126) b!57521))

(assert (= (and d!10583 (not c!7126)) b!57529))

(assert (= (and b!57529 c!7125) b!57527))

(assert (= (and b!57529 (not c!7125)) b!57532))

(assert (= (and b!57532 c!7129) b!57531))

(assert (= (and b!57532 (not c!7129)) b!57515))

(assert (= (or b!57531 b!57515) bm!4167))

(assert (= (or b!57527 bm!4167) bm!4173))

(assert (= (or b!57527 b!57531) bm!4168))

(assert (= (or b!57521 bm!4173) bm!4169))

(assert (= (or b!57521 bm!4168) bm!4172))

(assert (= (and d!10583 res!32162) b!57535))

(assert (= (and d!10583 c!7128) b!57524))

(assert (= (and d!10583 (not c!7128)) b!57534))

(assert (= (and d!10583 res!32163) b!57523))

(assert (= (and b!57523 res!32164) b!57520))

(assert (= (and b!57523 (not res!32165)) b!57528))

(assert (= (and b!57528 res!32160) b!57519))

(assert (= (and b!57523 res!32168) b!57533))

(assert (= (and b!57533 c!7124) b!57517))

(assert (= (and b!57533 (not c!7124)) b!57525))

(assert (= (and b!57517 res!32166) b!57516))

(assert (= (or b!57517 b!57525) bm!4171))

(assert (= (and b!57533 res!32167) b!57522))

(assert (= (and b!57522 c!7127) b!57518))

(assert (= (and b!57522 (not c!7127)) b!57526))

(assert (= (and b!57518 res!32161) b!57530))

(assert (= (or b!57518 b!57526) bm!4170))

(declare-fun b_lambda!2503 () Bool)

(assert (=> (not b_lambda!2503) (not b!57519)))

(assert (=> b!57519 t!4753))

(declare-fun b_and!3467 () Bool)

(assert (= b_and!3463 (and (=> t!4753 result!2353) b_and!3467)))

(assert (=> b!57519 t!4755))

(declare-fun b_and!3469 () Bool)

(assert (= b_and!3465 (and (=> t!4755 result!2355) b_and!3469)))

(declare-fun m!48353 () Bool)

(assert (=> bm!4169 m!48353))

(assert (=> b!57520 m!48295))

(assert (=> b!57520 m!48295))

(assert (=> b!57520 m!48297))

(declare-fun m!48355 () Bool)

(assert (=> b!57530 m!48355))

(declare-fun m!48357 () Bool)

(assert (=> bm!4170 m!48357))

(declare-fun m!48359 () Bool)

(assert (=> bm!4171 m!48359))

(declare-fun m!48361 () Bool)

(assert (=> bm!4172 m!48361))

(declare-fun m!48363 () Bool)

(assert (=> b!57524 m!48363))

(declare-fun m!48365 () Bool)

(assert (=> b!57524 m!48365))

(declare-fun m!48367 () Bool)

(assert (=> b!57524 m!48367))

(declare-fun m!48369 () Bool)

(assert (=> b!57524 m!48369))

(declare-fun m!48371 () Bool)

(assert (=> b!57524 m!48371))

(declare-fun m!48373 () Bool)

(assert (=> b!57524 m!48373))

(declare-fun m!48375 () Bool)

(assert (=> b!57524 m!48375))

(declare-fun m!48377 () Bool)

(assert (=> b!57524 m!48377))

(declare-fun m!48379 () Bool)

(assert (=> b!57524 m!48379))

(declare-fun m!48381 () Bool)

(assert (=> b!57524 m!48381))

(declare-fun m!48383 () Bool)

(assert (=> b!57524 m!48383))

(assert (=> b!57524 m!48353))

(assert (=> b!57524 m!48381))

(declare-fun m!48385 () Bool)

(assert (=> b!57524 m!48385))

(assert (=> b!57524 m!48377))

(assert (=> b!57524 m!48373))

(assert (=> b!57524 m!48295))

(declare-fun m!48387 () Bool)

(assert (=> b!57524 m!48387))

(assert (=> b!57524 m!48369))

(declare-fun m!48389 () Bool)

(assert (=> b!57524 m!48389))

(declare-fun m!48391 () Bool)

(assert (=> b!57524 m!48391))

(assert (=> b!57519 m!48295))

(declare-fun m!48393 () Bool)

(assert (=> b!57519 m!48393))

(assert (=> b!57519 m!48339))

(declare-fun m!48395 () Bool)

(assert (=> b!57519 m!48395))

(assert (=> b!57519 m!48339))

(assert (=> b!57519 m!48295))

(declare-fun m!48397 () Bool)

(assert (=> b!57519 m!48397))

(assert (=> b!57519 m!48393))

(declare-fun m!48399 () Bool)

(assert (=> b!57521 m!48399))

(declare-fun m!48401 () Bool)

(assert (=> b!57516 m!48401))

(assert (=> b!57535 m!48295))

(assert (=> b!57535 m!48295))

(assert (=> b!57535 m!48297))

(assert (=> d!10583 m!48289))

(assert (=> b!57528 m!48295))

(assert (=> b!57528 m!48295))

(declare-fun m!48403 () Bool)

(assert (=> b!57528 m!48403))

(assert (=> b!57400 d!10583))

(assert (=> b!57414 d!10583))

(declare-fun d!10585 () Bool)

(declare-fun e!37911 () Bool)

(assert (=> d!10585 e!37911))

(declare-fun res!32173 () Bool)

(assert (=> d!10585 (=> (not res!32173) (not e!37911))))

(declare-fun lt!22837 () ListLongMap!1361)

(assert (=> d!10585 (= res!32173 (contains!679 lt!22837 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!22836 () List!1429)

(assert (=> d!10585 (= lt!22837 (ListLongMap!1362 lt!22836))))

(declare-fun lt!22835 () Unit!1491)

(declare-fun lt!22838 () Unit!1491)

(assert (=> d!10585 (= lt!22835 lt!22838)))

(assert (=> d!10585 (= (getValueByKey!123 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!40 (List!1429 (_ BitVec 64) V!2835) Unit!1491)

(assert (=> d!10585 (= lt!22838 (lemmaContainsTupThenGetReturnValue!40 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun insertStrictlySorted!43 (List!1429 (_ BitVec 64) V!2835) List!1429)

(assert (=> d!10585 (= lt!22836 (insertStrictlySorted!43 (toList!696 call!4085) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10585 (= (+!80 call!4085 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22837)))

(declare-fun b!57540 () Bool)

(declare-fun res!32174 () Bool)

(assert (=> b!57540 (=> (not res!32174) (not e!37911))))

(assert (=> b!57540 (= res!32174 (= (getValueByKey!123 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57541 () Bool)

(declare-fun contains!681 (List!1429 tuple2!2016) Bool)

(assert (=> b!57541 (= e!37911 (contains!681 (toList!696 lt!22837) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10585 res!32173) b!57540))

(assert (= (and b!57540 res!32174) b!57541))

(declare-fun m!48405 () Bool)

(assert (=> d!10585 m!48405))

(declare-fun m!48407 () Bool)

(assert (=> d!10585 m!48407))

(declare-fun m!48409 () Bool)

(assert (=> d!10585 m!48409))

(declare-fun m!48411 () Bool)

(assert (=> d!10585 m!48411))

(declare-fun m!48413 () Bool)

(assert (=> b!57540 m!48413))

(declare-fun m!48415 () Bool)

(assert (=> b!57541 m!48415))

(assert (=> b!57271 d!10585))

(assert (=> b!57437 d!10553))

(declare-fun b!57550 () Bool)

(declare-fun e!37918 () Bool)

(declare-fun e!37919 () Bool)

(assert (=> b!57550 (= e!37918 e!37919)))

(declare-fun lt!22847 () (_ BitVec 64))

(assert (=> b!57550 (= lt!22847 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22845 () Unit!1491)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3707 (_ BitVec 64) (_ BitVec 32)) Unit!1491)

(assert (=> b!57550 (= lt!22845 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000))))

(assert (=> b!57550 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000)))

(declare-fun lt!22846 () Unit!1491)

(assert (=> b!57550 (= lt!22846 lt!22845)))

(declare-fun res!32179 () Bool)

(assert (=> b!57550 (= res!32179 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)) (Found!226 #b00000000000000000000000000000000)))))

(assert (=> b!57550 (=> (not res!32179) (not e!37919))))

(declare-fun b!57552 () Bool)

(declare-fun call!4179 () Bool)

(assert (=> b!57552 (= e!37919 call!4179)))

(declare-fun bm!4176 () Bool)

(assert (=> bm!4176 (= call!4179 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57553 () Bool)

(declare-fun e!37920 () Bool)

(assert (=> b!57553 (= e!37920 e!37918)))

(declare-fun c!7132 () Bool)

(assert (=> b!57553 (= c!7132 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!10587 () Bool)

(declare-fun res!32180 () Bool)

(assert (=> d!10587 (=> res!32180 e!37920)))

(assert (=> d!10587 (= res!32180 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10587 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 newMap!16) (mask!5896 newMap!16)) e!37920)))

(declare-fun b!57551 () Bool)

(assert (=> b!57551 (= e!37918 call!4179)))

(assert (= (and d!10587 (not res!32180)) b!57553))

(assert (= (and b!57553 c!7132) b!57550))

(assert (= (and b!57553 (not c!7132)) b!57551))

(assert (= (and b!57550 res!32179) b!57552))

(assert (= (or b!57552 b!57551) bm!4176))

(assert (=> b!57550 m!48295))

(declare-fun m!48417 () Bool)

(assert (=> b!57550 m!48417))

(declare-fun m!48419 () Bool)

(assert (=> b!57550 m!48419))

(assert (=> b!57550 m!48295))

(declare-fun m!48421 () Bool)

(assert (=> b!57550 m!48421))

(declare-fun m!48423 () Bool)

(assert (=> bm!4176 m!48423))

(assert (=> b!57553 m!48295))

(assert (=> b!57553 m!48295))

(assert (=> b!57553 m!48297))

(assert (=> b!57461 d!10587))

(declare-fun d!10589 () Bool)

(assert (=> d!10589 (= (inRange!0 (ite c!7105 (ite c!7101 (index!3027 lt!22763) (ite c!7104 (index!3026 lt!22752) (index!3029 lt!22752))) (ite c!7097 (index!3027 lt!22768) (ite c!7102 (index!3026 lt!22753) (index!3029 lt!22753)))) (mask!5896 newMap!16)) (and (bvsge (ite c!7105 (ite c!7101 (index!3027 lt!22763) (ite c!7104 (index!3026 lt!22752) (index!3029 lt!22752))) (ite c!7097 (index!3027 lt!22768) (ite c!7102 (index!3026 lt!22753) (index!3029 lt!22753)))) #b00000000000000000000000000000000) (bvslt (ite c!7105 (ite c!7101 (index!3027 lt!22763) (ite c!7104 (index!3026 lt!22752) (index!3029 lt!22752))) (ite c!7097 (index!3027 lt!22768) (ite c!7102 (index!3026 lt!22753) (index!3029 lt!22753)))) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4144 d!10589))

(declare-fun d!10591 () Bool)

(assert (=> d!10591 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22850 () Unit!1491)

(declare-fun choose!288 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1491)

(assert (=> d!10591 (= lt!22850 (choose!288 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22773 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10591 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10591 (= (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22773 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)) lt!22850)))

(declare-fun bs!2484 () Bool)

(assert (= bs!2484 d!10591))

(assert (=> bs!2484 m!48121))

(assert (=> bs!2484 m!48051))

(declare-fun m!48425 () Bool)

(assert (=> bs!2484 m!48425))

(assert (=> bs!2484 m!48121))

(declare-fun m!48427 () Bool)

(assert (=> bs!2484 m!48427))

(assert (=> bs!2484 m!48051))

(declare-fun m!48429 () Bool)

(assert (=> bs!2484 m!48429))

(assert (=> bs!2484 m!48289))

(assert (=> b!57392 d!10591))

(declare-fun d!10593 () Bool)

(declare-fun e!37921 () Bool)

(assert (=> d!10593 e!37921))

(declare-fun res!32181 () Bool)

(assert (=> d!10593 (=> res!32181 e!37921)))

(declare-fun lt!22852 () Bool)

(assert (=> d!10593 (= res!32181 (not lt!22852))))

(declare-fun lt!22854 () Bool)

(assert (=> d!10593 (= lt!22852 lt!22854)))

(declare-fun lt!22853 () Unit!1491)

(declare-fun e!37922 () Unit!1491)

(assert (=> d!10593 (= lt!22853 e!37922)))

(declare-fun c!7133 () Bool)

(assert (=> d!10593 (= c!7133 lt!22854)))

(assert (=> d!10593 (= lt!22854 (containsKey!127 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10593 (= (contains!679 e!37836 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!22852)))

(declare-fun b!57554 () Bool)

(declare-fun lt!22851 () Unit!1491)

(assert (=> b!57554 (= e!37922 lt!22851)))

(assert (=> b!57554 (= lt!22851 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!57554 (isDefined!76 (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57555 () Bool)

(declare-fun Unit!1501 () Unit!1491)

(assert (=> b!57555 (= e!37922 Unit!1501)))

(declare-fun b!57556 () Bool)

(assert (=> b!57556 (= e!37921 (isDefined!76 (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (= (and d!10593 c!7133) b!57554))

(assert (= (and d!10593 (not c!7133)) b!57555))

(assert (= (and d!10593 (not res!32181)) b!57556))

(assert (=> d!10593 m!48037))

(declare-fun m!48431 () Bool)

(assert (=> d!10593 m!48431))

(assert (=> b!57554 m!48037))

(declare-fun m!48433 () Bool)

(assert (=> b!57554 m!48433))

(assert (=> b!57554 m!48037))

(declare-fun m!48435 () Bool)

(assert (=> b!57554 m!48435))

(assert (=> b!57554 m!48435))

(declare-fun m!48437 () Bool)

(assert (=> b!57554 m!48437))

(assert (=> b!57556 m!48037))

(assert (=> b!57556 m!48435))

(assert (=> b!57556 m!48435))

(assert (=> b!57556 m!48437))

(assert (=> bm!4148 d!10593))

(declare-fun d!10595 () Bool)

(declare-fun res!32182 () Bool)

(declare-fun e!37923 () Bool)

(assert (=> d!10595 (=> (not res!32182) (not e!37923))))

(assert (=> d!10595 (= res!32182 (simpleValid!41 (v!2368 (underlying!224 thiss!992))))))

(assert (=> d!10595 (= (valid!251 (v!2368 (underlying!224 thiss!992))) e!37923)))

(declare-fun b!57557 () Bool)

(declare-fun res!32183 () Bool)

(assert (=> b!57557 (=> (not res!32183) (not e!37923))))

(assert (=> b!57557 (= res!32183 (= (arrayCountValidKeys!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))) (_size!355 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57558 () Bool)

(declare-fun res!32184 () Bool)

(assert (=> b!57558 (=> (not res!32184) (not e!37923))))

(assert (=> b!57558 (= res!32184 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57559 () Bool)

(assert (=> b!57559 (= e!37923 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 Nil!1425))))

(assert (= (and d!10595 res!32182) b!57557))

(assert (= (and b!57557 res!32183) b!57558))

(assert (= (and b!57558 res!32184) b!57559))

(declare-fun m!48439 () Bool)

(assert (=> d!10595 m!48439))

(declare-fun m!48441 () Bool)

(assert (=> b!57557 m!48441))

(declare-fun m!48443 () Bool)

(assert (=> b!57558 m!48443))

(declare-fun m!48445 () Bool)

(assert (=> b!57559 m!48445))

(assert (=> d!10541 d!10595))

(declare-fun d!10597 () Bool)

(assert (=> d!10597 (= (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (and (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57449 d!10597))

(declare-fun d!10599 () Bool)

(declare-fun e!37924 () Bool)

(assert (=> d!10599 e!37924))

(declare-fun res!32185 () Bool)

(assert (=> d!10599 (=> (not res!32185) (not e!37924))))

(declare-fun lt!22857 () ListLongMap!1361)

(assert (=> d!10599 (= res!32185 (contains!679 lt!22857 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!22856 () List!1429)

(assert (=> d!10599 (= lt!22857 (ListLongMap!1362 lt!22856))))

(declare-fun lt!22855 () Unit!1491)

(declare-fun lt!22858 () Unit!1491)

(assert (=> d!10599 (= lt!22855 lt!22858)))

(assert (=> d!10599 (= (getValueByKey!123 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10599 (= lt!22858 (lemmaContainsTupThenGetReturnValue!40 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10599 (= lt!22856 (insertStrictlySorted!43 (toList!696 call!4149) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10599 (= (+!80 call!4149 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!22857)))

(declare-fun b!57560 () Bool)

(declare-fun res!32186 () Bool)

(assert (=> b!57560 (=> (not res!32186) (not e!37924))))

(assert (=> b!57560 (= res!32186 (= (getValueByKey!123 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57561 () Bool)

(assert (=> b!57561 (= e!37924 (contains!681 (toList!696 lt!22857) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10599 res!32185) b!57560))

(assert (= (and b!57560 res!32186) b!57561))

(declare-fun m!48447 () Bool)

(assert (=> d!10599 m!48447))

(declare-fun m!48449 () Bool)

(assert (=> d!10599 m!48449))

(declare-fun m!48451 () Bool)

(assert (=> d!10599 m!48451))

(declare-fun m!48453 () Bool)

(assert (=> d!10599 m!48453))

(declare-fun m!48455 () Bool)

(assert (=> b!57560 m!48455))

(declare-fun m!48457 () Bool)

(assert (=> b!57561 m!48457))

(assert (=> b!57406 d!10599))

(declare-fun d!10601 () Bool)

(declare-fun e!37927 () Bool)

(assert (=> d!10601 e!37927))

(declare-fun res!32191 () Bool)

(assert (=> d!10601 (=> (not res!32191) (not e!37927))))

(declare-fun lt!22864 () SeekEntryResult!226)

(assert (=> d!10601 (= res!32191 ((_ is Found!226) lt!22864))))

(assert (=> d!10601 (= lt!22864 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!22863 () Unit!1491)

(declare-fun choose!289 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1491)

(assert (=> d!10601 (= lt!22863 (choose!289 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10601 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10601 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) lt!22863)))

(declare-fun b!57566 () Bool)

(declare-fun res!32192 () Bool)

(assert (=> b!57566 (=> (not res!32192) (not e!37927))))

(assert (=> b!57566 (= res!32192 (inRange!0 (index!3027 lt!22864) (mask!5896 newMap!16)))))

(declare-fun b!57567 () Bool)

(assert (=> b!57567 (= e!37927 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22864)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!57567 (and (bvsge (index!3027 lt!22864) #b00000000000000000000000000000000) (bvslt (index!3027 lt!22864) (size!2004 (_keys!3642 newMap!16))))))

(assert (= (and d!10601 res!32191) b!57566))

(assert (= (and b!57566 res!32192) b!57567))

(assert (=> d!10601 m!48037))

(assert (=> d!10601 m!48203))

(assert (=> d!10601 m!48037))

(declare-fun m!48459 () Bool)

(assert (=> d!10601 m!48459))

(assert (=> d!10601 m!48289))

(declare-fun m!48461 () Bool)

(assert (=> b!57566 m!48461))

(declare-fun m!48463 () Bool)

(assert (=> b!57567 m!48463))

(assert (=> bm!4133 d!10601))

(declare-fun d!10603 () Bool)

(declare-fun e!37928 () Bool)

(assert (=> d!10603 e!37928))

(declare-fun res!32193 () Bool)

(assert (=> d!10603 (=> (not res!32193) (not e!37928))))

(declare-fun lt!22867 () ListLongMap!1361)

(assert (=> d!10603 (= res!32193 (contains!679 lt!22867 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun lt!22866 () List!1429)

(assert (=> d!10603 (= lt!22867 (ListLongMap!1362 lt!22866))))

(declare-fun lt!22865 () Unit!1491)

(declare-fun lt!22868 () Unit!1491)

(assert (=> d!10603 (= lt!22865 lt!22868)))

(assert (=> d!10603 (= (getValueByKey!123 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (Some!128 (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10603 (= lt!22868 (lemmaContainsTupThenGetReturnValue!40 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10603 (= lt!22866 (insertStrictlySorted!43 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10603 (= (+!80 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22867)))

(declare-fun b!57568 () Bool)

(declare-fun res!32194 () Bool)

(assert (=> b!57568 (=> (not res!32194) (not e!37928))))

(assert (=> b!57568 (= res!32194 (= (getValueByKey!123 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (Some!128 (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!57569 () Bool)

(assert (=> b!57569 (= e!37928 (contains!681 (toList!696 lt!22867) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10603 res!32193) b!57568))

(assert (= (and b!57568 res!32194) b!57569))

(declare-fun m!48465 () Bool)

(assert (=> d!10603 m!48465))

(declare-fun m!48467 () Bool)

(assert (=> d!10603 m!48467))

(declare-fun m!48469 () Bool)

(assert (=> d!10603 m!48469))

(declare-fun m!48471 () Bool)

(assert (=> d!10603 m!48471))

(declare-fun m!48473 () Bool)

(assert (=> b!57568 m!48473))

(declare-fun m!48475 () Bool)

(assert (=> b!57569 m!48475))

(assert (=> bm!4083 d!10603))

(declare-fun d!10605 () Bool)

(declare-fun res!32199 () Bool)

(declare-fun e!37933 () Bool)

(assert (=> d!10605 (=> res!32199 e!37933)))

(assert (=> d!10605 (= res!32199 (and ((_ is Cons!1425) (toList!696 lt!22590)) (= (_1!1019 (h!2005 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10605 (= (containsKey!127 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!37933)))

(declare-fun b!57574 () Bool)

(declare-fun e!37934 () Bool)

(assert (=> b!57574 (= e!37933 e!37934)))

(declare-fun res!32200 () Bool)

(assert (=> b!57574 (=> (not res!32200) (not e!37934))))

(assert (=> b!57574 (= res!32200 (and (or (not ((_ is Cons!1425) (toList!696 lt!22590))) (bvsle (_1!1019 (h!2005 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!696 lt!22590)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(declare-fun b!57575 () Bool)

(assert (=> b!57575 (= e!37934 (containsKey!127 (t!4747 (toList!696 lt!22590)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10605 (not res!32199)) b!57574))

(assert (= (and b!57574 res!32200) b!57575))

(assert (=> b!57575 m!48037))

(declare-fun m!48477 () Bool)

(assert (=> b!57575 m!48477))

(assert (=> d!10543 d!10605))

(declare-fun d!10607 () Bool)

(declare-fun e!37935 () Bool)

(assert (=> d!10607 e!37935))

(declare-fun res!32201 () Bool)

(assert (=> d!10607 (=> (not res!32201) (not e!37935))))

(declare-fun lt!22871 () ListLongMap!1361)

(assert (=> d!10607 (= res!32201 (contains!679 lt!22871 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!22870 () List!1429)

(assert (=> d!10607 (= lt!22871 (ListLongMap!1362 lt!22870))))

(declare-fun lt!22869 () Unit!1491)

(declare-fun lt!22872 () Unit!1491)

(assert (=> d!10607 (= lt!22869 lt!22872)))

(assert (=> d!10607 (= (getValueByKey!123 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!128 (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10607 (= lt!22872 (lemmaContainsTupThenGetReturnValue!40 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10607 (= lt!22870 (insertStrictlySorted!43 (toList!696 e!37819) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10607 (= (+!80 e!37819 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!22871)))

(declare-fun b!57576 () Bool)

(declare-fun res!32202 () Bool)

(assert (=> b!57576 (=> (not res!32202) (not e!37935))))

(assert (=> b!57576 (= res!32202 (= (getValueByKey!123 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!128 (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!57577 () Bool)

(assert (=> b!57577 (= e!37935 (contains!681 (toList!696 lt!22871) (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10607 res!32201) b!57576))

(assert (= (and b!57576 res!32202) b!57577))

(declare-fun m!48479 () Bool)

(assert (=> d!10607 m!48479))

(declare-fun m!48481 () Bool)

(assert (=> d!10607 m!48481))

(declare-fun m!48483 () Bool)

(assert (=> d!10607 m!48483))

(declare-fun m!48485 () Bool)

(assert (=> d!10607 m!48485))

(declare-fun m!48487 () Bool)

(assert (=> b!57576 m!48487))

(declare-fun m!48489 () Bool)

(assert (=> b!57577 m!48489))

(assert (=> bm!4149 d!10607))

(declare-fun d!10609 () Bool)

(assert (=> d!10609 (= (apply!65 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22671) (apply!65 lt!22668 lt!22671))))

(declare-fun lt!22875 () Unit!1491)

(declare-fun choose!290 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> d!10609 (= lt!22875 (choose!290 lt!22668 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22671))))

(declare-fun e!37938 () Bool)

(assert (=> d!10609 e!37938))

(declare-fun res!32205 () Bool)

(assert (=> d!10609 (=> (not res!32205) (not e!37938))))

(assert (=> d!10609 (= res!32205 (contains!679 lt!22668 lt!22671))))

(assert (=> d!10609 (= (addApplyDifferent!41 lt!22668 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22671) lt!22875)))

(declare-fun b!57581 () Bool)

(assert (=> b!57581 (= e!37938 (not (= lt!22671 lt!22661)))))

(assert (= (and d!10609 res!32205) b!57581))

(declare-fun m!48491 () Bool)

(assert (=> d!10609 m!48491))

(assert (=> d!10609 m!48155))

(declare-fun m!48493 () Bool)

(assert (=> d!10609 m!48493))

(assert (=> d!10609 m!48165))

(assert (=> d!10609 m!48155))

(assert (=> d!10609 m!48157))

(assert (=> b!57274 d!10609))

(declare-fun b!57606 () Bool)

(declare-fun e!37956 () ListLongMap!1361)

(declare-fun call!4182 () ListLongMap!1361)

(assert (=> b!57606 (= e!37956 call!4182)))

(declare-fun b!57608 () Bool)

(assert (=> b!57608 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> b!57608 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!37958 () Bool)

(declare-fun lt!22893 () ListLongMap!1361)

(assert (=> b!57608 (= e!37958 (= (apply!65 lt!22893 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57609 () Bool)

(declare-fun e!37959 () Bool)

(assert (=> b!57609 (= e!37959 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57609 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!57610 () Bool)

(declare-fun e!37954 () Bool)

(declare-fun e!37955 () Bool)

(assert (=> b!57610 (= e!37954 e!37955)))

(declare-fun c!7143 () Bool)

(assert (=> b!57610 (= c!7143 e!37959)))

(declare-fun res!32217 () Bool)

(assert (=> b!57610 (=> (not res!32217) (not e!37959))))

(assert (=> b!57610 (= res!32217 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57611 () Bool)

(declare-fun e!37957 () ListLongMap!1361)

(assert (=> b!57611 (= e!37957 e!37956)))

(declare-fun c!7142 () Bool)

(assert (=> b!57611 (= c!7142 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57612 () Bool)

(declare-fun e!37953 () Bool)

(assert (=> b!57612 (= e!37955 e!37953)))

(declare-fun c!7145 () Bool)

(assert (=> b!57612 (= c!7145 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun d!10611 () Bool)

(assert (=> d!10611 e!37954))

(declare-fun res!32216 () Bool)

(assert (=> d!10611 (=> (not res!32216) (not e!37954))))

(assert (=> d!10611 (= res!32216 (not (contains!679 lt!22893 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10611 (= lt!22893 e!37957)))

(declare-fun c!7144 () Bool)

(assert (=> d!10611 (= c!7144 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10611 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992))))))

(assert (=> d!10611 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) lt!22893)))

(declare-fun b!57607 () Bool)

(assert (=> b!57607 (= e!37955 e!37958)))

(assert (=> b!57607 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun res!32215 () Bool)

(assert (=> b!57607 (= res!32215 (contains!679 lt!22893 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57607 (=> (not res!32215) (not e!37958))))

(declare-fun b!57613 () Bool)

(assert (=> b!57613 (= e!37957 (ListLongMap!1362 Nil!1426))))

(declare-fun b!57614 () Bool)

(assert (=> b!57614 (= e!37953 (= lt!22893 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57615 () Bool)

(declare-fun isEmpty!290 (ListLongMap!1361) Bool)

(assert (=> b!57615 (= e!37953 (isEmpty!290 lt!22893))))

(declare-fun bm!4179 () Bool)

(assert (=> bm!4179 (= call!4182 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57616 () Bool)

(declare-fun res!32214 () Bool)

(assert (=> b!57616 (=> (not res!32214) (not e!37954))))

(assert (=> b!57616 (= res!32214 (not (contains!679 lt!22893 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57617 () Bool)

(declare-fun lt!22894 () Unit!1491)

(declare-fun lt!22896 () Unit!1491)

(assert (=> b!57617 (= lt!22894 lt!22896)))

(declare-fun lt!22895 () (_ BitVec 64))

(declare-fun lt!22890 () (_ BitVec 64))

(declare-fun lt!22892 () ListLongMap!1361)

(declare-fun lt!22891 () V!2835)

(assert (=> b!57617 (not (contains!679 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891)) lt!22890))))

(declare-fun addStillNotContains!14 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> b!57617 (= lt!22896 (addStillNotContains!14 lt!22892 lt!22895 lt!22891 lt!22890))))

(assert (=> b!57617 (= lt!22890 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57617 (= lt!22891 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57617 (= lt!22895 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57617 (= lt!22892 call!4182)))

(assert (=> b!57617 (= e!37956 (+!80 call!4182 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10611 c!7144) b!57613))

(assert (= (and d!10611 (not c!7144)) b!57611))

(assert (= (and b!57611 c!7142) b!57617))

(assert (= (and b!57611 (not c!7142)) b!57606))

(assert (= (or b!57617 b!57606) bm!4179))

(assert (= (and d!10611 res!32216) b!57616))

(assert (= (and b!57616 res!32214) b!57610))

(assert (= (and b!57610 res!32217) b!57609))

(assert (= (and b!57610 c!7143) b!57607))

(assert (= (and b!57610 (not c!7143)) b!57612))

(assert (= (and b!57607 res!32215) b!57608))

(assert (= (and b!57612 c!7145) b!57614))

(assert (= (and b!57612 (not c!7145)) b!57615))

(declare-fun b_lambda!2505 () Bool)

(assert (=> (not b_lambda!2505) (not b!57608)))

(assert (=> b!57608 t!4743))

(declare-fun b_and!3471 () Bool)

(assert (= b_and!3467 (and (=> t!4743 result!2339) b_and!3471)))

(assert (=> b!57608 t!4745))

(declare-fun b_and!3473 () Bool)

(assert (= b_and!3469 (and (=> t!4745 result!2343) b_and!3473)))

(declare-fun b_lambda!2507 () Bool)

(assert (=> (not b_lambda!2507) (not b!57617)))

(assert (=> b!57617 t!4743))

(declare-fun b_and!3475 () Bool)

(assert (= b_and!3471 (and (=> t!4743 result!2339) b_and!3475)))

(assert (=> b!57617 t!4745))

(declare-fun b_and!3477 () Bool)

(assert (= b_and!3473 (and (=> t!4745 result!2343) b_and!3477)))

(declare-fun m!48495 () Bool)

(assert (=> b!57616 m!48495))

(declare-fun m!48497 () Bool)

(assert (=> d!10611 m!48497))

(assert (=> d!10611 m!48073))

(assert (=> b!57609 m!48125))

(assert (=> b!57609 m!48125))

(assert (=> b!57609 m!48127))

(declare-fun m!48499 () Bool)

(assert (=> b!57614 m!48499))

(assert (=> b!57607 m!48125))

(assert (=> b!57607 m!48125))

(declare-fun m!48501 () Bool)

(assert (=> b!57607 m!48501))

(assert (=> bm!4179 m!48499))

(declare-fun m!48503 () Bool)

(assert (=> b!57615 m!48503))

(declare-fun m!48505 () Bool)

(assert (=> b!57617 m!48505))

(declare-fun m!48507 () Bool)

(assert (=> b!57617 m!48507))

(assert (=> b!57617 m!48167))

(assert (=> b!57617 m!48049))

(assert (=> b!57617 m!48169))

(assert (=> b!57617 m!48505))

(declare-fun m!48509 () Bool)

(assert (=> b!57617 m!48509))

(assert (=> b!57617 m!48167))

(assert (=> b!57617 m!48049))

(assert (=> b!57617 m!48125))

(declare-fun m!48511 () Bool)

(assert (=> b!57617 m!48511))

(assert (=> b!57608 m!48125))

(assert (=> b!57608 m!48167))

(assert (=> b!57608 m!48049))

(assert (=> b!57608 m!48169))

(assert (=> b!57608 m!48167))

(assert (=> b!57608 m!48049))

(assert (=> b!57608 m!48125))

(declare-fun m!48513 () Bool)

(assert (=> b!57608 m!48513))

(assert (=> b!57611 m!48125))

(assert (=> b!57611 m!48125))

(assert (=> b!57611 m!48127))

(assert (=> b!57274 d!10611))

(declare-fun d!10613 () Bool)

(assert (=> d!10613 (= (apply!65 lt!22668 lt!22671) (get!1063 (getValueByKey!123 (toList!696 lt!22668) lt!22671)))))

(declare-fun bs!2485 () Bool)

(assert (= bs!2485 d!10613))

(declare-fun m!48515 () Bool)

(assert (=> bs!2485 m!48515))

(assert (=> bs!2485 m!48515))

(declare-fun m!48517 () Bool)

(assert (=> bs!2485 m!48517))

(assert (=> b!57274 d!10613))

(declare-fun d!10615 () Bool)

(assert (=> d!10615 (contains!679 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22677)))

(declare-fun lt!22899 () Unit!1491)

(declare-fun choose!291 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> d!10615 (= lt!22899 (choose!291 lt!22669 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22677))))

(assert (=> d!10615 (contains!679 lt!22669 lt!22677)))

(assert (=> d!10615 (= (addStillContains!41 lt!22669 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22677) lt!22899)))

(declare-fun bs!2486 () Bool)

(assert (= bs!2486 d!10615))

(assert (=> bs!2486 m!48147))

(assert (=> bs!2486 m!48147))

(assert (=> bs!2486 m!48149))

(declare-fun m!48519 () Bool)

(assert (=> bs!2486 m!48519))

(declare-fun m!48521 () Bool)

(assert (=> bs!2486 m!48521))

(assert (=> b!57274 d!10615))

(declare-fun d!10617 () Bool)

(assert (=> d!10617 (= (apply!65 lt!22680 lt!22667) (get!1063 (getValueByKey!123 (toList!696 lt!22680) lt!22667)))))

(declare-fun bs!2487 () Bool)

(assert (= bs!2487 d!10617))

(declare-fun m!48523 () Bool)

(assert (=> bs!2487 m!48523))

(assert (=> bs!2487 m!48523))

(declare-fun m!48525 () Bool)

(assert (=> bs!2487 m!48525))

(assert (=> b!57274 d!10617))

(declare-fun d!10619 () Bool)

(assert (=> d!10619 (= (apply!65 lt!22670 lt!22659) (get!1063 (getValueByKey!123 (toList!696 lt!22670) lt!22659)))))

(declare-fun bs!2488 () Bool)

(assert (= bs!2488 d!10619))

(declare-fun m!48527 () Bool)

(assert (=> bs!2488 m!48527))

(assert (=> bs!2488 m!48527))

(declare-fun m!48529 () Bool)

(assert (=> bs!2488 m!48529))

(assert (=> b!57274 d!10619))

(declare-fun d!10621 () Bool)

(declare-fun e!37960 () Bool)

(assert (=> d!10621 e!37960))

(declare-fun res!32218 () Bool)

(assert (=> d!10621 (=> (not res!32218) (not e!37960))))

(declare-fun lt!22902 () ListLongMap!1361)

(assert (=> d!10621 (= res!32218 (contains!679 lt!22902 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!22901 () List!1429)

(assert (=> d!10621 (= lt!22902 (ListLongMap!1362 lt!22901))))

(declare-fun lt!22900 () Unit!1491)

(declare-fun lt!22903 () Unit!1491)

(assert (=> d!10621 (= lt!22900 lt!22903)))

(assert (=> d!10621 (= (getValueByKey!123 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10621 (= lt!22903 (lemmaContainsTupThenGetReturnValue!40 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10621 (= lt!22901 (insertStrictlySorted!43 (toList!696 lt!22670) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10621 (= (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22902)))

(declare-fun b!57619 () Bool)

(declare-fun res!32219 () Bool)

(assert (=> b!57619 (=> (not res!32219) (not e!37960))))

(assert (=> b!57619 (= res!32219 (= (getValueByKey!123 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57620 () Bool)

(assert (=> b!57620 (= e!37960 (contains!681 (toList!696 lt!22902) (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10621 res!32218) b!57619))

(assert (= (and b!57619 res!32219) b!57620))

(declare-fun m!48531 () Bool)

(assert (=> d!10621 m!48531))

(declare-fun m!48533 () Bool)

(assert (=> d!10621 m!48533))

(declare-fun m!48535 () Bool)

(assert (=> d!10621 m!48535))

(declare-fun m!48537 () Bool)

(assert (=> d!10621 m!48537))

(declare-fun m!48539 () Bool)

(assert (=> b!57619 m!48539))

(declare-fun m!48541 () Bool)

(assert (=> b!57620 m!48541))

(assert (=> b!57274 d!10621))

(declare-fun d!10623 () Bool)

(assert (=> d!10623 (= (apply!65 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22671) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22671)))))

(declare-fun bs!2489 () Bool)

(assert (= bs!2489 d!10623))

(declare-fun m!48543 () Bool)

(assert (=> bs!2489 m!48543))

(assert (=> bs!2489 m!48543))

(declare-fun m!48545 () Bool)

(assert (=> bs!2489 m!48545))

(assert (=> b!57274 d!10623))

(declare-fun d!10625 () Bool)

(declare-fun e!37961 () Bool)

(assert (=> d!10625 e!37961))

(declare-fun res!32220 () Bool)

(assert (=> d!10625 (=> (not res!32220) (not e!37961))))

(declare-fun lt!22906 () ListLongMap!1361)

(assert (=> d!10625 (= res!32220 (contains!679 lt!22906 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!22905 () List!1429)

(assert (=> d!10625 (= lt!22906 (ListLongMap!1362 lt!22905))))

(declare-fun lt!22904 () Unit!1491)

(declare-fun lt!22907 () Unit!1491)

(assert (=> d!10625 (= lt!22904 lt!22907)))

(assert (=> d!10625 (= (getValueByKey!123 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10625 (= lt!22907 (lemmaContainsTupThenGetReturnValue!40 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10625 (= lt!22905 (insertStrictlySorted!43 (toList!696 lt!22669) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10625 (= (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22906)))

(declare-fun b!57621 () Bool)

(declare-fun res!32221 () Bool)

(assert (=> b!57621 (=> (not res!32221) (not e!37961))))

(assert (=> b!57621 (= res!32221 (= (getValueByKey!123 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57622 () Bool)

(assert (=> b!57622 (= e!37961 (contains!681 (toList!696 lt!22906) (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10625 res!32220) b!57621))

(assert (= (and b!57621 res!32221) b!57622))

(declare-fun m!48547 () Bool)

(assert (=> d!10625 m!48547))

(declare-fun m!48549 () Bool)

(assert (=> d!10625 m!48549))

(declare-fun m!48551 () Bool)

(assert (=> d!10625 m!48551))

(declare-fun m!48553 () Bool)

(assert (=> d!10625 m!48553))

(declare-fun m!48555 () Bool)

(assert (=> b!57621 m!48555))

(declare-fun m!48557 () Bool)

(assert (=> b!57622 m!48557))

(assert (=> b!57274 d!10625))

(declare-fun d!10627 () Bool)

(declare-fun e!37962 () Bool)

(assert (=> d!10627 e!37962))

(declare-fun res!32222 () Bool)

(assert (=> d!10627 (=> (not res!32222) (not e!37962))))

(declare-fun lt!22910 () ListLongMap!1361)

(assert (=> d!10627 (= res!32222 (contains!679 lt!22910 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!22909 () List!1429)

(assert (=> d!10627 (= lt!22910 (ListLongMap!1362 lt!22909))))

(declare-fun lt!22908 () Unit!1491)

(declare-fun lt!22911 () Unit!1491)

(assert (=> d!10627 (= lt!22908 lt!22911)))

(assert (=> d!10627 (= (getValueByKey!123 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10627 (= lt!22911 (lemmaContainsTupThenGetReturnValue!40 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10627 (= lt!22909 (insertStrictlySorted!43 (toList!696 lt!22668) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10627 (= (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22910)))

(declare-fun b!57623 () Bool)

(declare-fun res!32223 () Bool)

(assert (=> b!57623 (=> (not res!32223) (not e!37962))))

(assert (=> b!57623 (= res!32223 (= (getValueByKey!123 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57624 () Bool)

(assert (=> b!57624 (= e!37962 (contains!681 (toList!696 lt!22910) (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10627 res!32222) b!57623))

(assert (= (and b!57623 res!32223) b!57624))

(declare-fun m!48559 () Bool)

(assert (=> d!10627 m!48559))

(declare-fun m!48561 () Bool)

(assert (=> d!10627 m!48561))

(declare-fun m!48563 () Bool)

(assert (=> d!10627 m!48563))

(declare-fun m!48565 () Bool)

(assert (=> d!10627 m!48565))

(declare-fun m!48567 () Bool)

(assert (=> b!57623 m!48567))

(declare-fun m!48569 () Bool)

(assert (=> b!57624 m!48569))

(assert (=> b!57274 d!10627))

(declare-fun d!10629 () Bool)

(declare-fun e!37963 () Bool)

(assert (=> d!10629 e!37963))

(declare-fun res!32224 () Bool)

(assert (=> d!10629 (=> res!32224 e!37963)))

(declare-fun lt!22913 () Bool)

(assert (=> d!10629 (= res!32224 (not lt!22913))))

(declare-fun lt!22915 () Bool)

(assert (=> d!10629 (= lt!22913 lt!22915)))

(declare-fun lt!22914 () Unit!1491)

(declare-fun e!37964 () Unit!1491)

(assert (=> d!10629 (= lt!22914 e!37964)))

(declare-fun c!7146 () Bool)

(assert (=> d!10629 (= c!7146 lt!22915)))

(assert (=> d!10629 (= lt!22915 (containsKey!127 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(assert (=> d!10629 (= (contains!679 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22677) lt!22913)))

(declare-fun b!57625 () Bool)

(declare-fun lt!22912 () Unit!1491)

(assert (=> b!57625 (= e!37964 lt!22912)))

(assert (=> b!57625 (= lt!22912 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(assert (=> b!57625 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(declare-fun b!57626 () Bool)

(declare-fun Unit!1502 () Unit!1491)

(assert (=> b!57626 (= e!37964 Unit!1502)))

(declare-fun b!57627 () Bool)

(assert (=> b!57627 (= e!37963 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677)))))

(assert (= (and d!10629 c!7146) b!57625))

(assert (= (and d!10629 (not c!7146)) b!57626))

(assert (= (and d!10629 (not res!32224)) b!57627))

(declare-fun m!48571 () Bool)

(assert (=> d!10629 m!48571))

(declare-fun m!48573 () Bool)

(assert (=> b!57625 m!48573))

(declare-fun m!48575 () Bool)

(assert (=> b!57625 m!48575))

(assert (=> b!57625 m!48575))

(declare-fun m!48577 () Bool)

(assert (=> b!57625 m!48577))

(assert (=> b!57627 m!48575))

(assert (=> b!57627 m!48575))

(assert (=> b!57627 m!48577))

(assert (=> b!57274 d!10629))

(declare-fun d!10631 () Bool)

(declare-fun e!37965 () Bool)

(assert (=> d!10631 e!37965))

(declare-fun res!32225 () Bool)

(assert (=> d!10631 (=> (not res!32225) (not e!37965))))

(declare-fun lt!22918 () ListLongMap!1361)

(assert (=> d!10631 (= res!32225 (contains!679 lt!22918 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!22917 () List!1429)

(assert (=> d!10631 (= lt!22918 (ListLongMap!1362 lt!22917))))

(declare-fun lt!22916 () Unit!1491)

(declare-fun lt!22919 () Unit!1491)

(assert (=> d!10631 (= lt!22916 lt!22919)))

(assert (=> d!10631 (= (getValueByKey!123 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10631 (= lt!22919 (lemmaContainsTupThenGetReturnValue!40 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10631 (= lt!22917 (insertStrictlySorted!43 (toList!696 lt!22680) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10631 (= (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22918)))

(declare-fun b!57628 () Bool)

(declare-fun res!32226 () Bool)

(assert (=> b!57628 (=> (not res!32226) (not e!37965))))

(assert (=> b!57628 (= res!32226 (= (getValueByKey!123 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57629 () Bool)

(assert (=> b!57629 (= e!37965 (contains!681 (toList!696 lt!22918) (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10631 res!32225) b!57628))

(assert (= (and b!57628 res!32226) b!57629))

(declare-fun m!48579 () Bool)

(assert (=> d!10631 m!48579))

(declare-fun m!48581 () Bool)

(assert (=> d!10631 m!48581))

(declare-fun m!48583 () Bool)

(assert (=> d!10631 m!48583))

(declare-fun m!48585 () Bool)

(assert (=> d!10631 m!48585))

(declare-fun m!48587 () Bool)

(assert (=> b!57628 m!48587))

(declare-fun m!48589 () Bool)

(assert (=> b!57629 m!48589))

(assert (=> b!57274 d!10631))

(declare-fun d!10633 () Bool)

(assert (=> d!10633 (= (apply!65 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22659) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22659)))))

(declare-fun bs!2490 () Bool)

(assert (= bs!2490 d!10633))

(declare-fun m!48591 () Bool)

(assert (=> bs!2490 m!48591))

(assert (=> bs!2490 m!48591))

(declare-fun m!48593 () Bool)

(assert (=> bs!2490 m!48593))

(assert (=> b!57274 d!10633))

(declare-fun d!10635 () Bool)

(assert (=> d!10635 (= (apply!65 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22667) (apply!65 lt!22680 lt!22667))))

(declare-fun lt!22920 () Unit!1491)

(assert (=> d!10635 (= lt!22920 (choose!290 lt!22680 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22667))))

(declare-fun e!37966 () Bool)

(assert (=> d!10635 e!37966))

(declare-fun res!32227 () Bool)

(assert (=> d!10635 (=> (not res!32227) (not e!37966))))

(assert (=> d!10635 (= res!32227 (contains!679 lt!22680 lt!22667))))

(assert (=> d!10635 (= (addApplyDifferent!41 lt!22680 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22667) lt!22920)))

(declare-fun b!57630 () Bool)

(assert (=> b!57630 (= e!37966 (not (= lt!22667 lt!22660)))))

(assert (= (and d!10635 res!32227) b!57630))

(declare-fun m!48595 () Bool)

(assert (=> d!10635 m!48595))

(assert (=> d!10635 m!48151))

(declare-fun m!48597 () Bool)

(assert (=> d!10635 m!48597))

(assert (=> d!10635 m!48145))

(assert (=> d!10635 m!48151))

(assert (=> d!10635 m!48153))

(assert (=> b!57274 d!10635))

(declare-fun d!10637 () Bool)

(assert (=> d!10637 (= (apply!65 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22667) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22667)))))

(declare-fun bs!2491 () Bool)

(assert (= bs!2491 d!10637))

(declare-fun m!48599 () Bool)

(assert (=> bs!2491 m!48599))

(assert (=> bs!2491 m!48599))

(declare-fun m!48601 () Bool)

(assert (=> bs!2491 m!48601))

(assert (=> b!57274 d!10637))

(declare-fun d!10639 () Bool)

(assert (=> d!10639 (= (apply!65 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22659) (apply!65 lt!22670 lt!22659))))

(declare-fun lt!22921 () Unit!1491)

(assert (=> d!10639 (= lt!22921 (choose!290 lt!22670 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22659))))

(declare-fun e!37967 () Bool)

(assert (=> d!10639 e!37967))

(declare-fun res!32228 () Bool)

(assert (=> d!10639 (=> (not res!32228) (not e!37967))))

(assert (=> d!10639 (= res!32228 (contains!679 lt!22670 lt!22659))))

(assert (=> d!10639 (= (addApplyDifferent!41 lt!22670 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22659) lt!22921)))

(declare-fun b!57631 () Bool)

(assert (=> b!57631 (= e!37967 (not (= lt!22659 lt!22673)))))

(assert (= (and d!10639 res!32228) b!57631))

(declare-fun m!48603 () Bool)

(assert (=> d!10639 m!48603))

(assert (=> d!10639 m!48143))

(declare-fun m!48605 () Bool)

(assert (=> d!10639 m!48605))

(assert (=> d!10639 m!48137))

(assert (=> d!10639 m!48143))

(assert (=> d!10639 m!48163))

(assert (=> b!57274 d!10639))

(declare-fun d!10641 () Bool)

(declare-fun lt!22924 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!61 (List!1428) (InoxSet (_ BitVec 64)))

(assert (=> d!10641 (= lt!22924 (select (content!61 Nil!1425) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun e!37972 () Bool)

(assert (=> d!10641 (= lt!22924 e!37972)))

(declare-fun res!32234 () Bool)

(assert (=> d!10641 (=> (not res!32234) (not e!37972))))

(assert (=> d!10641 (= res!32234 ((_ is Cons!1424) Nil!1425))))

(assert (=> d!10641 (= (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!22924)))

(declare-fun b!57636 () Bool)

(declare-fun e!37973 () Bool)

(assert (=> b!57636 (= e!37972 e!37973)))

(declare-fun res!32233 () Bool)

(assert (=> b!57636 (=> res!32233 e!37973)))

(assert (=> b!57636 (= res!32233 (= (h!2004 Nil!1425) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57637 () Bool)

(assert (=> b!57637 (= e!37973 (contains!680 (t!4746 Nil!1425) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10641 res!32234) b!57636))

(assert (= (and b!57636 (not res!32233)) b!57637))

(declare-fun m!48607 () Bool)

(assert (=> d!10641 m!48607))

(assert (=> d!10641 m!48037))

(declare-fun m!48609 () Bool)

(assert (=> d!10641 m!48609))

(assert (=> b!57637 m!48037))

(declare-fun m!48611 () Bool)

(assert (=> b!57637 m!48611))

(assert (=> b!57452 d!10641))

(declare-fun d!10643 () Bool)

(declare-fun e!37974 () Bool)

(assert (=> d!10643 e!37974))

(declare-fun res!32235 () Bool)

(assert (=> d!10643 (=> res!32235 e!37974)))

(declare-fun lt!22926 () Bool)

(assert (=> d!10643 (= res!32235 (not lt!22926))))

(declare-fun lt!22928 () Bool)

(assert (=> d!10643 (= lt!22926 lt!22928)))

(declare-fun lt!22927 () Unit!1491)

(declare-fun e!37975 () Unit!1491)

(assert (=> d!10643 (= lt!22927 e!37975)))

(declare-fun c!7147 () Bool)

(assert (=> d!10643 (= c!7147 lt!22928)))

(assert (=> d!10643 (= lt!22928 (containsKey!127 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (=> d!10643 (= (contains!679 call!4148 (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))) lt!22926)))

(declare-fun b!57638 () Bool)

(declare-fun lt!22925 () Unit!1491)

(assert (=> b!57638 (= e!37975 lt!22925)))

(assert (=> b!57638 (= lt!22925 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (=> b!57638 (isDefined!76 (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(declare-fun b!57639 () Bool)

(declare-fun Unit!1503 () Unit!1491)

(assert (=> b!57639 (= e!37975 Unit!1503)))

(declare-fun b!57640 () Bool)

(assert (=> b!57640 (= e!37974 (isDefined!76 (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))))

(assert (= (and d!10643 c!7147) b!57638))

(assert (= (and d!10643 (not c!7147)) b!57639))

(assert (= (and d!10643 (not res!32235)) b!57640))

(assert (=> d!10643 m!48207))

(declare-fun m!48613 () Bool)

(assert (=> d!10643 m!48613))

(assert (=> b!57638 m!48207))

(declare-fun m!48615 () Bool)

(assert (=> b!57638 m!48615))

(assert (=> b!57638 m!48207))

(declare-fun m!48617 () Bool)

(assert (=> b!57638 m!48617))

(assert (=> b!57638 m!48617))

(declare-fun m!48619 () Bool)

(assert (=> b!57638 m!48619))

(assert (=> b!57640 m!48207))

(assert (=> b!57640 m!48617))

(assert (=> b!57640 m!48617))

(assert (=> b!57640 m!48619))

(assert (=> b!57397 d!10643))

(declare-fun d!10645 () Bool)

(declare-fun e!37978 () Bool)

(assert (=> d!10645 e!37978))

(declare-fun res!32238 () Bool)

(assert (=> d!10645 (=> (not res!32238) (not e!37978))))

(assert (=> d!10645 (= res!32238 (and (bvsge (index!3027 lt!22759) #b00000000000000000000000000000000) (bvslt (index!3027 lt!22759) (size!2004 (_keys!3642 newMap!16)))))))

(declare-fun lt!22931 () Unit!1491)

(declare-fun choose!292 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) Unit!1491)

(assert (=> d!10645 (= lt!22931 (choose!292 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10645 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10645 (= (lemmaValidKeyInArrayIsInListMap!75 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (defaultEntry!2022 newMap!16)) lt!22931)))

(declare-fun b!57643 () Bool)

(assert (=> b!57643 (= e!37978 (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (= (and d!10645 res!32238) b!57643))

(declare-fun m!48621 () Bool)

(assert (=> d!10645 m!48621))

(assert (=> d!10645 m!48289))

(declare-fun m!48623 () Bool)

(assert (=> b!57643 m!48623))

(assert (=> b!57643 m!48207))

(assert (=> b!57643 m!48623))

(assert (=> b!57643 m!48207))

(declare-fun m!48625 () Bool)

(assert (=> b!57643 m!48625))

(assert (=> b!57397 d!10645))

(declare-fun d!10647 () Bool)

(declare-fun e!37981 () Bool)

(assert (=> d!10647 e!37981))

(declare-fun res!32241 () Bool)

(assert (=> d!10647 (=> (not res!32241) (not e!37981))))

(assert (=> d!10647 (= res!32241 (and (bvsge (index!3027 lt!22759) #b00000000000000000000000000000000) (bvslt (index!3027 lt!22759) (size!2005 (_values!2005 newMap!16)))))))

(declare-fun lt!22934 () Unit!1491)

(declare-fun choose!293 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1491)

(assert (=> d!10647 (= lt!22934 (choose!293 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10647 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10647 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!22934)))

(declare-fun b!57646 () Bool)

(assert (=> b!57646 (= e!37981 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))))

(assert (= (and d!10647 res!32241) b!57646))

(assert (=> d!10647 m!48037))

(assert (=> d!10647 m!48051))

(declare-fun m!48627 () Bool)

(assert (=> d!10647 m!48627))

(assert (=> d!10647 m!48289))

(assert (=> b!57646 m!48121))

(assert (=> b!57646 m!48121))

(declare-fun m!48629 () Bool)

(assert (=> b!57646 m!48629))

(assert (=> b!57646 m!48211))

(declare-fun m!48631 () Bool)

(assert (=> b!57646 m!48631))

(assert (=> b!57397 d!10647))

(assert (=> bm!4151 d!10533))

(declare-fun d!10649 () Bool)

(declare-fun e!37982 () Bool)

(assert (=> d!10649 e!37982))

(declare-fun res!32242 () Bool)

(assert (=> d!10649 (=> res!32242 e!37982)))

(declare-fun lt!22936 () Bool)

(assert (=> d!10649 (= res!32242 (not lt!22936))))

(declare-fun lt!22938 () Bool)

(assert (=> d!10649 (= lt!22936 lt!22938)))

(declare-fun lt!22937 () Unit!1491)

(declare-fun e!37983 () Unit!1491)

(assert (=> d!10649 (= lt!22937 e!37983)))

(declare-fun c!7148 () Bool)

(assert (=> d!10649 (= c!7148 lt!22938)))

(assert (=> d!10649 (= lt!22938 (containsKey!127 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!10649 (= (contains!679 lt!22664 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!22936)))

(declare-fun b!57647 () Bool)

(declare-fun lt!22935 () Unit!1491)

(assert (=> b!57647 (= e!37983 lt!22935)))

(assert (=> b!57647 (= lt!22935 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57647 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57648 () Bool)

(declare-fun Unit!1504 () Unit!1491)

(assert (=> b!57648 (= e!37983 Unit!1504)))

(declare-fun b!57649 () Bool)

(assert (=> b!57649 (= e!37982 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!10649 c!7148) b!57647))

(assert (= (and d!10649 (not c!7148)) b!57648))

(assert (= (and d!10649 (not res!32242)) b!57649))

(assert (=> d!10649 m!48125))

(declare-fun m!48633 () Bool)

(assert (=> d!10649 m!48633))

(assert (=> b!57647 m!48125))

(declare-fun m!48635 () Bool)

(assert (=> b!57647 m!48635))

(assert (=> b!57647 m!48125))

(declare-fun m!48637 () Bool)

(assert (=> b!57647 m!48637))

(assert (=> b!57647 m!48637))

(declare-fun m!48639 () Bool)

(assert (=> b!57647 m!48639))

(assert (=> b!57649 m!48125))

(assert (=> b!57649 m!48637))

(assert (=> b!57649 m!48637))

(assert (=> b!57649 m!48639))

(assert (=> b!57278 d!10649))

(declare-fun bm!4188 () Bool)

(declare-fun call!4193 () SeekEntryResult!226)

(assert (=> bm!4188 (= call!4193 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!23016 () SeekEntryResult!226)

(declare-fun c!7159 () Bool)

(declare-fun lt!23011 () SeekEntryResult!226)

(declare-fun bm!4189 () Bool)

(declare-fun c!7160 () Bool)

(declare-fun call!4192 () Bool)

(assert (=> bm!4189 (= call!4192 (inRange!0 (ite c!7159 (index!3027 lt!23011) (ite c!7160 (index!3026 lt!23016) (index!3029 lt!23016))) (mask!5896 newMap!16)))))

(declare-fun b!57684 () Bool)

(declare-fun res!32262 () Bool)

(assert (=> b!57684 (= res!32262 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23016)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38005 () Bool)

(assert (=> b!57684 (=> (not res!32262) (not e!38005))))

(declare-fun b!57685 () Bool)

(declare-fun res!32264 () Bool)

(declare-fun e!38003 () Bool)

(assert (=> b!57685 (=> (not res!32264) (not e!38003))))

(declare-fun lt!23010 () tuple2!2018)

(assert (=> b!57685 (= res!32264 (valid!251 (_2!1020 lt!23010)))))

(declare-fun b!57686 () Bool)

(assert (=> b!57686 (= e!38003 (= (map!1102 (_2!1020 lt!23010)) (+!80 (map!1102 newMap!16) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57687 () Bool)

(declare-fun e!38007 () Unit!1491)

(declare-fun Unit!1505 () Unit!1491)

(assert (=> b!57687 (= e!38007 Unit!1505)))

(declare-fun lt!22999 () Unit!1491)

(declare-fun lemmaArrayContainsKeyThenInListMap!4 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1491)

(assert (=> b!57687 (= lt!22999 (lemmaArrayContainsKeyThenInListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> b!57687 (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))

(declare-fun lt!23014 () Unit!1491)

(assert (=> b!57687 (= lt!23014 lt!22999)))

(assert (=> b!57687 false))

(declare-fun b!57688 () Bool)

(declare-fun c!7157 () Bool)

(assert (=> b!57688 (= c!7157 ((_ is MissingVacant!226) lt!23016))))

(declare-fun e!38001 () Bool)

(declare-fun e!38004 () Bool)

(assert (=> b!57688 (= e!38001 e!38004)))

(declare-fun bm!4190 () Bool)

(declare-fun call!4191 () Bool)

(assert (=> bm!4190 (= call!4191 call!4192)))

(declare-fun b!57689 () Bool)

(declare-fun res!32265 () Bool)

(assert (=> b!57689 (= res!32265 call!4192)))

(declare-fun e!38002 () Bool)

(assert (=> b!57689 (=> (not res!32265) (not e!38002))))

(declare-fun b!57690 () Bool)

(declare-fun res!32261 () Bool)

(declare-fun e!38000 () Bool)

(assert (=> b!57690 (=> (not res!32261) (not e!38000))))

(assert (=> b!57690 (= res!32261 call!4191)))

(assert (=> b!57690 (= e!38001 e!38000)))

(declare-fun b!57691 () Bool)

(assert (=> b!57691 (= e!38004 e!38005)))

(declare-fun res!32268 () Bool)

(assert (=> b!57691 (= res!32268 call!4191)))

(assert (=> b!57691 (=> (not res!32268) (not e!38005))))

(declare-fun b!57692 () Bool)

(declare-fun Unit!1506 () Unit!1491)

(assert (=> b!57692 (= e!38007 Unit!1506)))

(declare-fun call!4194 () Bool)

(declare-fun bm!4191 () Bool)

(assert (=> bm!4191 (= call!4194 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57693 () Bool)

(declare-fun res!32269 () Bool)

(assert (=> b!57693 (=> (not res!32269) (not e!38003))))

(assert (=> b!57693 (= res!32269 (contains!679 (map!1102 (_2!1020 lt!23010)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57694 () Bool)

(assert (=> b!57694 (= e!38000 (not call!4194))))

(declare-fun b!57695 () Bool)

(declare-fun res!32263 () Bool)

(assert (=> b!57695 (=> (not res!32263) (not e!38000))))

(assert (=> b!57695 (= res!32263 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!23016)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57696 () Bool)

(assert (=> b!57696 (= e!38004 ((_ is Undefined!226) lt!23016))))

(declare-fun d!10651 () Bool)

(assert (=> d!10651 e!38003))

(declare-fun res!32267 () Bool)

(assert (=> d!10651 (=> (not res!32267) (not e!38003))))

(assert (=> d!10651 (= res!32267 (_1!1020 lt!23010))))

(assert (=> d!10651 (= lt!23010 (tuple2!2019 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd (_size!355 newMap!16) #b00000000000000000000000000000001) (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (_vacant!355 newMap!16))))))

(declare-fun lt!23024 () Unit!1491)

(declare-fun lt!23019 () Unit!1491)

(assert (=> d!10651 (= lt!23024 lt!23019)))

(declare-fun lt!23015 () array!3709)

(declare-fun lt!23007 () array!3707)

(assert (=> d!10651 (contains!679 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(assert (=> d!10651 (= lt!23019 (lemmaValidKeyInArrayIsInListMap!75 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10651 (= lt!23015 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))))

(assert (=> d!10651 (= lt!23007 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun lt!23013 () Unit!1491)

(declare-fun lt!23020 () Unit!1491)

(assert (=> d!10651 (= lt!23013 lt!23020)))

(declare-fun lt!23022 () array!3707)

(assert (=> d!10651 (= (arrayCountValidKeys!0 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3707 (_ BitVec 32)) Unit!1491)

(assert (=> d!10651 (= lt!23020 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(assert (=> d!10651 (= lt!23022 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun lt!23002 () Unit!1491)

(declare-fun lt!23004 () Unit!1491)

(assert (=> d!10651 (= lt!23002 lt!23004)))

(declare-fun lt!23028 () array!3707)

(assert (=> d!10651 (arrayContainsKey!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!10651 (= lt!23004 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(assert (=> d!10651 (= lt!23028 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun lt!23012 () Unit!1491)

(declare-fun lt!23021 () Unit!1491)

(assert (=> d!10651 (= lt!23012 lt!23021)))

(assert (=> d!10651 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!4 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1491)

(assert (=> d!10651 (= lt!23021 (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23025 () Unit!1491)

(declare-fun lt!23009 () Unit!1491)

(assert (=> d!10651 (= lt!23025 lt!23009)))

(assert (=> d!10651 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (mask!5896 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3707 (_ BitVec 32) (_ BitVec 32)) Unit!1491)

(assert (=> d!10651 (= lt!23009 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (mask!5896 newMap!16)))))

(declare-fun lt!23023 () Unit!1491)

(declare-fun lt!23026 () Unit!1491)

(assert (=> d!10651 (= lt!23023 lt!23026)))

(assert (=> d!10651 (= (arrayCountValidKeys!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3707 (_ BitVec 32) (_ BitVec 64)) Unit!1491)

(assert (=> d!10651 (= lt!23026 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun lt!23006 () Unit!1491)

(declare-fun lt!23003 () Unit!1491)

(assert (=> d!10651 (= lt!23006 lt!23003)))

(declare-fun lt!23017 () (_ BitVec 32))

(declare-fun lt!23008 () List!1428)

(assert (=> d!10651 (arrayNoDuplicates!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) lt!23017 lt!23008)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3707 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1428) Unit!1491)

(assert (=> d!10651 (= lt!23003 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) lt!23017 lt!23008))))

(assert (=> d!10651 (= lt!23008 Nil!1425)))

(assert (=> d!10651 (= lt!23017 #b00000000000000000000000000000000)))

(declare-fun lt!23018 () Unit!1491)

(assert (=> d!10651 (= lt!23018 e!38007)))

(declare-fun c!7158 () Bool)

(assert (=> d!10651 (= c!7158 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!23005 () Unit!1491)

(declare-fun e!38006 () Unit!1491)

(assert (=> d!10651 (= lt!23005 e!38006)))

(assert (=> d!10651 (= c!7159 (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10651 (valid!251 newMap!16)))

(assert (=> d!10651 (= (updateHelperNewKey!14 newMap!16 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))) lt!23010)))

(declare-fun b!57697 () Bool)

(assert (=> b!57697 (= e!38005 (not call!4194))))

(declare-fun b!57698 () Bool)

(assert (=> b!57698 (= e!38002 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!23011)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57699 () Bool)

(declare-fun lt!23027 () Unit!1491)

(assert (=> b!57699 (= e!38006 lt!23027)))

(assert (=> b!57699 (= lt!23027 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57699 (= lt!23016 call!4193)))

(assert (=> b!57699 (= c!7160 ((_ is MissingZero!226) lt!23016))))

(assert (=> b!57699 e!38001))

(declare-fun b!57700 () Bool)

(declare-fun Unit!1507 () Unit!1491)

(assert (=> b!57700 (= e!38006 Unit!1507)))

(declare-fun lt!23000 () Unit!1491)

(assert (=> b!57700 (= lt!23000 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57700 (= lt!23011 call!4193)))

(declare-fun res!32266 () Bool)

(assert (=> b!57700 (= res!32266 ((_ is Found!226) lt!23011))))

(assert (=> b!57700 (=> (not res!32266) (not e!38002))))

(assert (=> b!57700 e!38002))

(declare-fun lt!23001 () Unit!1491)

(assert (=> b!57700 (= lt!23001 lt!23000)))

(assert (=> b!57700 false))

(assert (= (and d!10651 c!7159) b!57700))

(assert (= (and d!10651 (not c!7159)) b!57699))

(assert (= (and b!57700 res!32266) b!57689))

(assert (= (and b!57689 res!32265) b!57698))

(assert (= (and b!57699 c!7160) b!57690))

(assert (= (and b!57699 (not c!7160)) b!57688))

(assert (= (and b!57690 res!32261) b!57695))

(assert (= (and b!57695 res!32263) b!57694))

(assert (= (and b!57688 c!7157) b!57691))

(assert (= (and b!57688 (not c!7157)) b!57696))

(assert (= (and b!57691 res!32268) b!57684))

(assert (= (and b!57684 res!32262) b!57697))

(assert (= (or b!57690 b!57691) bm!4190))

(assert (= (or b!57694 b!57697) bm!4191))

(assert (= (or b!57689 bm!4190) bm!4189))

(assert (= (or b!57700 b!57699) bm!4188))

(assert (= (and d!10651 c!7158) b!57687))

(assert (= (and d!10651 (not c!7158)) b!57692))

(assert (= (and d!10651 res!32267) b!57685))

(assert (= (and b!57685 res!32264) b!57693))

(assert (= (and b!57693 res!32269) b!57686))

(declare-fun m!48641 () Bool)

(assert (=> b!57686 m!48641))

(assert (=> b!57686 m!48069))

(assert (=> b!57686 m!48069))

(declare-fun m!48643 () Bool)

(assert (=> b!57686 m!48643))

(assert (=> b!57699 m!48037))

(assert (=> b!57699 m!48219))

(declare-fun m!48645 () Bool)

(assert (=> b!57684 m!48645))

(declare-fun m!48647 () Bool)

(assert (=> bm!4189 m!48647))

(declare-fun m!48649 () Bool)

(assert (=> b!57685 m!48649))

(assert (=> b!57693 m!48641))

(assert (=> b!57693 m!48641))

(assert (=> b!57693 m!48037))

(declare-fun m!48651 () Bool)

(assert (=> b!57693 m!48651))

(declare-fun m!48653 () Bool)

(assert (=> b!57698 m!48653))

(assert (=> bm!4191 m!48037))

(assert (=> bm!4191 m!48229))

(assert (=> bm!4188 m!48037))

(assert (=> bm!4188 m!48203))

(assert (=> b!57700 m!48037))

(assert (=> b!57700 m!48215))

(declare-fun m!48655 () Bool)

(assert (=> b!57695 m!48655))

(declare-fun m!48657 () Bool)

(assert (=> d!10651 m!48657))

(declare-fun m!48659 () Bool)

(assert (=> d!10651 m!48659))

(declare-fun m!48661 () Bool)

(assert (=> d!10651 m!48661))

(assert (=> d!10651 m!48037))

(assert (=> d!10651 m!48051))

(declare-fun m!48663 () Bool)

(assert (=> d!10651 m!48663))

(assert (=> d!10651 m!48037))

(declare-fun m!48665 () Bool)

(assert (=> d!10651 m!48665))

(assert (=> d!10651 m!48055))

(declare-fun m!48667 () Bool)

(assert (=> d!10651 m!48667))

(assert (=> d!10651 m!48659))

(declare-fun m!48669 () Bool)

(assert (=> d!10651 m!48669))

(declare-fun m!48671 () Bool)

(assert (=> d!10651 m!48671))

(declare-fun m!48673 () Bool)

(assert (=> d!10651 m!48673))

(declare-fun m!48675 () Bool)

(assert (=> d!10651 m!48675))

(assert (=> d!10651 m!48037))

(declare-fun m!48677 () Bool)

(assert (=> d!10651 m!48677))

(assert (=> d!10651 m!48037))

(declare-fun m!48679 () Bool)

(assert (=> d!10651 m!48679))

(assert (=> d!10651 m!48121))

(declare-fun m!48681 () Bool)

(assert (=> d!10651 m!48681))

(assert (=> d!10651 m!48669))

(assert (=> d!10651 m!48037))

(assert (=> d!10651 m!48229))

(assert (=> d!10651 m!48263))

(assert (=> d!10651 m!48037))

(declare-fun m!48683 () Bool)

(assert (=> d!10651 m!48683))

(assert (=> d!10651 m!48121))

(assert (=> d!10651 m!48037))

(declare-fun m!48685 () Bool)

(assert (=> d!10651 m!48685))

(declare-fun m!48687 () Bool)

(assert (=> d!10651 m!48687))

(declare-fun m!48689 () Bool)

(assert (=> d!10651 m!48689))

(assert (=> d!10651 m!48121))

(assert (=> d!10651 m!48629))

(declare-fun m!48691 () Bool)

(assert (=> d!10651 m!48691))

(assert (=> d!10651 m!48037))

(declare-fun m!48693 () Bool)

(assert (=> d!10651 m!48693))

(assert (=> b!57687 m!48037))

(declare-fun m!48695 () Bool)

(assert (=> b!57687 m!48695))

(assert (=> b!57687 m!48121))

(assert (=> b!57687 m!48121))

(assert (=> b!57687 m!48037))

(assert (=> b!57687 m!48685))

(assert (=> bm!4136 d!10651))

(assert (=> b!57285 d!10581))

(declare-fun b!57717 () Bool)

(declare-fun e!38019 () Bool)

(declare-fun lt!23034 () SeekEntryResult!226)

(assert (=> b!57717 (= e!38019 ((_ is Undefined!226) lt!23034))))

(declare-fun c!7166 () Bool)

(declare-fun call!4199 () Bool)

(declare-fun bm!4196 () Bool)

(assert (=> bm!4196 (= call!4199 (inRange!0 (ite c!7166 (index!3026 lt!23034) (index!3029 lt!23034)) (mask!5896 newMap!16)))))

(declare-fun b!57718 () Bool)

(assert (=> b!57718 (and (bvsge (index!3026 lt!23034) #b00000000000000000000000000000000) (bvslt (index!3026 lt!23034) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32280 () Bool)

(assert (=> b!57718 (= res!32280 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!23034)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38016 () Bool)

(assert (=> b!57718 (=> (not res!32280) (not e!38016))))

(declare-fun b!57719 () Bool)

(declare-fun res!32278 () Bool)

(declare-fun e!38017 () Bool)

(assert (=> b!57719 (=> (not res!32278) (not e!38017))))

(assert (=> b!57719 (= res!32278 call!4199)))

(assert (=> b!57719 (= e!38019 e!38017)))

(declare-fun b!57720 () Bool)

(declare-fun call!4200 () Bool)

(assert (=> b!57720 (= e!38016 (not call!4200))))

(declare-fun b!57721 () Bool)

(assert (=> b!57721 (= e!38017 (not call!4200))))

(declare-fun d!10653 () Bool)

(declare-fun e!38018 () Bool)

(assert (=> d!10653 e!38018))

(assert (=> d!10653 (= c!7166 ((_ is MissingZero!226) lt!23034))))

(assert (=> d!10653 (= lt!23034 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!23033 () Unit!1491)

(declare-fun choose!294 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1491)

(assert (=> d!10653 (= lt!23033 (choose!294 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10653 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10653 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) lt!23033)))

(declare-fun b!57722 () Bool)

(assert (=> b!57722 (= e!38018 e!38019)))

(declare-fun c!7165 () Bool)

(assert (=> b!57722 (= c!7165 ((_ is MissingVacant!226) lt!23034))))

(declare-fun bm!4197 () Bool)

(assert (=> bm!4197 (= call!4200 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57723 () Bool)

(declare-fun res!32279 () Bool)

(assert (=> b!57723 (=> (not res!32279) (not e!38017))))

(assert (=> b!57723 (= res!32279 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23034)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57723 (and (bvsge (index!3029 lt!23034) #b00000000000000000000000000000000) (bvslt (index!3029 lt!23034) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57724 () Bool)

(assert (=> b!57724 (= e!38018 e!38016)))

(declare-fun res!32281 () Bool)

(assert (=> b!57724 (= res!32281 call!4199)))

(assert (=> b!57724 (=> (not res!32281) (not e!38016))))

(assert (= (and d!10653 c!7166) b!57724))

(assert (= (and d!10653 (not c!7166)) b!57722))

(assert (= (and b!57724 res!32281) b!57718))

(assert (= (and b!57718 res!32280) b!57720))

(assert (= (and b!57722 c!7165) b!57719))

(assert (= (and b!57722 (not c!7165)) b!57717))

(assert (= (and b!57719 res!32278) b!57723))

(assert (= (and b!57723 res!32279) b!57721))

(assert (= (or b!57724 b!57719) bm!4196))

(assert (= (or b!57720 b!57721) bm!4197))

(declare-fun m!48697 () Bool)

(assert (=> b!57718 m!48697))

(assert (=> d!10653 m!48037))

(assert (=> d!10653 m!48203))

(assert (=> d!10653 m!48037))

(declare-fun m!48699 () Bool)

(assert (=> d!10653 m!48699))

(assert (=> d!10653 m!48289))

(declare-fun m!48701 () Bool)

(assert (=> bm!4196 m!48701))

(declare-fun m!48703 () Bool)

(assert (=> b!57723 m!48703))

(assert (=> bm!4197 m!48037))

(assert (=> bm!4197 m!48229))

(assert (=> bm!4143 d!10653))

(declare-fun b!57733 () Bool)

(declare-fun e!38024 () (_ BitVec 32))

(declare-fun e!38025 () (_ BitVec 32))

(assert (=> b!57733 (= e!38024 e!38025)))

(declare-fun c!7171 () Bool)

(assert (=> b!57733 (= c!7171 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57734 () Bool)

(declare-fun call!4203 () (_ BitVec 32))

(assert (=> b!57734 (= e!38025 (bvadd #b00000000000000000000000000000001 call!4203))))

(declare-fun b!57735 () Bool)

(assert (=> b!57735 (= e!38025 call!4203)))

(declare-fun d!10655 () Bool)

(declare-fun lt!23037 () (_ BitVec 32))

(assert (=> d!10655 (and (bvsge lt!23037 #b00000000000000000000000000000000) (bvsle lt!23037 (bvsub (size!2004 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10655 (= lt!23037 e!38024)))

(declare-fun c!7172 () Bool)

(assert (=> d!10655 (= c!7172 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10655 (and (bvsle #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2004 (_keys!3642 newMap!16)) (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10655 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) lt!23037)))

(declare-fun b!57736 () Bool)

(assert (=> b!57736 (= e!38024 #b00000000000000000000000000000000)))

(declare-fun bm!4200 () Bool)

(assert (=> bm!4200 (= call!4203 (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (= (and d!10655 c!7172) b!57736))

(assert (= (and d!10655 (not c!7172)) b!57733))

(assert (= (and b!57733 c!7171) b!57734))

(assert (= (and b!57733 (not c!7171)) b!57735))

(assert (= (or b!57734 b!57735) bm!4200))

(assert (=> b!57733 m!48295))

(assert (=> b!57733 m!48295))

(assert (=> b!57733 m!48297))

(declare-fun m!48705 () Bool)

(assert (=> bm!4200 m!48705))

(assert (=> b!57460 d!10655))

(declare-fun d!10657 () Bool)

(assert (=> d!10657 (= (get!1062 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57426 d!10657))

(declare-fun d!10659 () Bool)

(declare-fun e!38026 () Bool)

(assert (=> d!10659 e!38026))

(declare-fun res!32282 () Bool)

(assert (=> d!10659 (=> res!32282 e!38026)))

(declare-fun lt!23039 () Bool)

(assert (=> d!10659 (= res!32282 (not lt!23039))))

(declare-fun lt!23041 () Bool)

(assert (=> d!10659 (= lt!23039 lt!23041)))

(declare-fun lt!23040 () Unit!1491)

(declare-fun e!38027 () Unit!1491)

(assert (=> d!10659 (= lt!23040 e!38027)))

(declare-fun c!7173 () Bool)

(assert (=> d!10659 (= c!7173 lt!23041)))

(assert (=> d!10659 (= lt!23041 (containsKey!127 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10659 (= (contains!679 call!4150 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23039)))

(declare-fun b!57737 () Bool)

(declare-fun lt!23038 () Unit!1491)

(assert (=> b!57737 (= e!38027 lt!23038)))

(assert (=> b!57737 (= lt!23038 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!57737 (isDefined!76 (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57738 () Bool)

(declare-fun Unit!1508 () Unit!1491)

(assert (=> b!57738 (= e!38027 Unit!1508)))

(declare-fun b!57739 () Bool)

(assert (=> b!57739 (= e!38026 (isDefined!76 (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (= (and d!10659 c!7173) b!57737))

(assert (= (and d!10659 (not c!7173)) b!57738))

(assert (= (and d!10659 (not res!32282)) b!57739))

(assert (=> d!10659 m!48037))

(declare-fun m!48707 () Bool)

(assert (=> d!10659 m!48707))

(assert (=> b!57737 m!48037))

(declare-fun m!48709 () Bool)

(assert (=> b!57737 m!48709))

(assert (=> b!57737 m!48037))

(declare-fun m!48711 () Bool)

(assert (=> b!57737 m!48711))

(assert (=> b!57737 m!48711))

(declare-fun m!48713 () Bool)

(assert (=> b!57737 m!48713))

(assert (=> b!57739 m!48037))

(assert (=> b!57739 m!48711))

(assert (=> b!57739 m!48711))

(assert (=> b!57739 m!48713))

(assert (=> b!57383 d!10659))

(declare-fun b!57740 () Bool)

(declare-fun e!38029 () Bool)

(declare-fun e!38031 () Bool)

(assert (=> b!57740 (= e!38029 e!38031)))

(declare-fun c!7174 () Bool)

(assert (=> b!57740 (= c!7174 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4201 () Bool)

(declare-fun call!4204 () Bool)

(assert (=> bm!4201 (= call!4204 (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7174 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1425) Nil!1425)))))

(declare-fun b!57741 () Bool)

(assert (=> b!57741 (= e!38031 call!4204)))

(declare-fun b!57742 () Bool)

(declare-fun e!38028 () Bool)

(assert (=> b!57742 (= e!38028 e!38029)))

(declare-fun res!32284 () Bool)

(assert (=> b!57742 (=> (not res!32284) (not e!38029))))

(declare-fun e!38030 () Bool)

(assert (=> b!57742 (= res!32284 (not e!38030))))

(declare-fun res!32285 () Bool)

(assert (=> b!57742 (=> (not res!32285) (not e!38030))))

(assert (=> b!57742 (= res!32285 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57743 () Bool)

(assert (=> b!57743 (= e!38030 (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!10661 () Bool)

(declare-fun res!32283 () Bool)

(assert (=> d!10661 (=> res!32283 e!38028)))

(assert (=> d!10661 (= res!32283 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10661 (= (arrayNoDuplicates!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 Nil!1425) e!38028)))

(declare-fun b!57744 () Bool)

(assert (=> b!57744 (= e!38031 call!4204)))

(assert (= (and d!10661 (not res!32283)) b!57742))

(assert (= (and b!57742 res!32285) b!57743))

(assert (= (and b!57742 res!32284) b!57740))

(assert (= (and b!57740 c!7174) b!57744))

(assert (= (and b!57740 (not c!7174)) b!57741))

(assert (= (or b!57744 b!57741) bm!4201))

(assert (=> b!57740 m!48295))

(assert (=> b!57740 m!48295))

(assert (=> b!57740 m!48297))

(assert (=> bm!4201 m!48295))

(declare-fun m!48715 () Bool)

(assert (=> bm!4201 m!48715))

(assert (=> b!57742 m!48295))

(assert (=> b!57742 m!48295))

(assert (=> b!57742 m!48297))

(assert (=> b!57743 m!48295))

(assert (=> b!57743 m!48295))

(declare-fun m!48717 () Bool)

(assert (=> b!57743 m!48717))

(assert (=> b!57462 d!10661))

(declare-fun d!10663 () Bool)

(assert (=> d!10663 (= (apply!65 lt!22664 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1063 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2492 () Bool)

(assert (= bs!2492 d!10663))

(assert (=> bs!2492 m!48125))

(assert (=> bs!2492 m!48637))

(assert (=> bs!2492 m!48637))

(declare-fun m!48719 () Bool)

(assert (=> bs!2492 m!48719))

(assert (=> b!57269 d!10663))

(declare-fun d!10665 () Bool)

(declare-fun c!7175 () Bool)

(assert (=> d!10665 (= c!7175 ((_ is ValueCellFull!852) (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38032 () V!2835)

(assert (=> d!10665 (= (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38032)))

(declare-fun b!57745 () Bool)

(assert (=> b!57745 (= e!38032 (get!1061 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57746 () Bool)

(assert (=> b!57746 (= e!38032 (get!1062 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10665 c!7175) b!57745))

(assert (= (and d!10665 (not c!7175)) b!57746))

(assert (=> b!57745 m!48167))

(assert (=> b!57745 m!48049))

(declare-fun m!48721 () Bool)

(assert (=> b!57745 m!48721))

(assert (=> b!57746 m!48167))

(assert (=> b!57746 m!48049))

(declare-fun m!48723 () Bool)

(assert (=> b!57746 m!48723))

(assert (=> b!57269 d!10665))

(declare-fun d!10667 () Bool)

(declare-fun res!32286 () Bool)

(declare-fun e!38033 () Bool)

(assert (=> d!10667 (=> res!32286 e!38033)))

(assert (=> d!10667 (= res!32286 (= (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10667 (= (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38033)))

(declare-fun b!57747 () Bool)

(declare-fun e!38034 () Bool)

(assert (=> b!57747 (= e!38033 e!38034)))

(declare-fun res!32287 () Bool)

(assert (=> b!57747 (=> (not res!32287) (not e!38034))))

(assert (=> b!57747 (= res!32287 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57748 () Bool)

(assert (=> b!57748 (= e!38034 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10667 (not res!32286)) b!57747))

(assert (= (and b!57747 res!32287) b!57748))

(assert (=> d!10667 m!48295))

(assert (=> b!57748 m!48037))

(declare-fun m!48725 () Bool)

(assert (=> b!57748 m!48725))

(assert (=> bm!4154 d!10667))

(declare-fun d!10669 () Bool)

(assert (=> d!10669 (isDefined!76 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun lt!23044 () Unit!1491)

(declare-fun choose!295 (List!1429 (_ BitVec 64)) Unit!1491)

(assert (=> d!10669 (= lt!23044 (choose!295 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun e!38037 () Bool)

(assert (=> d!10669 e!38037))

(declare-fun res!32290 () Bool)

(assert (=> d!10669 (=> (not res!32290) (not e!38037))))

(declare-fun isStrictlySorted!283 (List!1429) Bool)

(assert (=> d!10669 (= res!32290 (isStrictlySorted!283 (toList!696 lt!22590)))))

(assert (=> d!10669 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23044)))

(declare-fun b!57751 () Bool)

(assert (=> b!57751 (= e!38037 (containsKey!127 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10669 res!32290) b!57751))

(assert (=> d!10669 m!48037))

(assert (=> d!10669 m!48185))

(assert (=> d!10669 m!48185))

(assert (=> d!10669 m!48187))

(assert (=> d!10669 m!48037))

(declare-fun m!48727 () Bool)

(assert (=> d!10669 m!48727))

(declare-fun m!48729 () Bool)

(assert (=> d!10669 m!48729))

(assert (=> b!57751 m!48037))

(assert (=> b!57751 m!48181))

(assert (=> b!57292 d!10669))

(declare-fun d!10671 () Bool)

(declare-fun isEmpty!291 (Option!129) Bool)

(assert (=> d!10671 (= (isDefined!76 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) (not (isEmpty!291 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun bs!2493 () Bool)

(assert (= bs!2493 d!10671))

(assert (=> bs!2493 m!48185))

(declare-fun m!48731 () Bool)

(assert (=> bs!2493 m!48731))

(assert (=> b!57292 d!10671))

(declare-fun b!57761 () Bool)

(declare-fun e!38042 () Option!129)

(declare-fun e!38043 () Option!129)

(assert (=> b!57761 (= e!38042 e!38043)))

(declare-fun c!7181 () Bool)

(assert (=> b!57761 (= c!7181 (and ((_ is Cons!1425) (toList!696 lt!22590)) (not (= (_1!1019 (h!2005 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun b!57760 () Bool)

(assert (=> b!57760 (= e!38042 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22590)))))))

(declare-fun b!57763 () Bool)

(assert (=> b!57763 (= e!38043 None!127)))

(declare-fun c!7180 () Bool)

(declare-fun d!10673 () Bool)

(assert (=> d!10673 (= c!7180 (and ((_ is Cons!1425) (toList!696 lt!22590)) (= (_1!1019 (h!2005 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10673 (= (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38042)))

(declare-fun b!57762 () Bool)

(assert (=> b!57762 (= e!38043 (getValueByKey!123 (t!4747 (toList!696 lt!22590)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10673 c!7180) b!57760))

(assert (= (and d!10673 (not c!7180)) b!57761))

(assert (= (and b!57761 c!7181) b!57762))

(assert (= (and b!57761 (not c!7181)) b!57763))

(assert (=> b!57762 m!48037))

(declare-fun m!48733 () Bool)

(assert (=> b!57762 m!48733))

(assert (=> b!57292 d!10673))

(assert (=> bm!4080 d!10611))

(assert (=> d!10533 d!10583))

(declare-fun b!57764 () Bool)

(declare-fun e!38045 () Bool)

(declare-fun e!38047 () Bool)

(assert (=> b!57764 (= e!38045 e!38047)))

(declare-fun c!7182 () Bool)

(assert (=> b!57764 (= c!7182 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!4202 () Bool)

(declare-fun call!4205 () Bool)

(assert (=> bm!4202 (= call!4205 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7182 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425))))))

(declare-fun b!57765 () Bool)

(assert (=> b!57765 (= e!38047 call!4205)))

(declare-fun b!57766 () Bool)

(declare-fun e!38044 () Bool)

(assert (=> b!57766 (= e!38044 e!38045)))

(declare-fun res!32292 () Bool)

(assert (=> b!57766 (=> (not res!32292) (not e!38045))))

(declare-fun e!38046 () Bool)

(assert (=> b!57766 (= res!32292 (not e!38046))))

(declare-fun res!32293 () Bool)

(assert (=> b!57766 (=> (not res!32293) (not e!38046))))

(assert (=> b!57766 (= res!32293 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!57767 () Bool)

(assert (=> b!57767 (= e!38046 (contains!680 (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!10675 () Bool)

(declare-fun res!32291 () Bool)

(assert (=> d!10675 (=> res!32291 e!38044)))

(assert (=> d!10675 (= res!32291 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10675 (= (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) e!38044)))

(declare-fun b!57768 () Bool)

(assert (=> b!57768 (= e!38047 call!4205)))

(assert (= (and d!10675 (not res!32291)) b!57766))

(assert (= (and b!57766 res!32293) b!57767))

(assert (= (and b!57766 res!32292) b!57764))

(assert (= (and b!57764 c!7182) b!57768))

(assert (= (and b!57764 (not c!7182)) b!57765))

(assert (= (or b!57768 b!57765) bm!4202))

(declare-fun m!48735 () Bool)

(assert (=> b!57764 m!48735))

(assert (=> b!57764 m!48735))

(declare-fun m!48737 () Bool)

(assert (=> b!57764 m!48737))

(assert (=> bm!4202 m!48735))

(declare-fun m!48739 () Bool)

(assert (=> bm!4202 m!48739))

(assert (=> b!57766 m!48735))

(assert (=> b!57766 m!48735))

(assert (=> b!57766 m!48737))

(assert (=> b!57767 m!48735))

(assert (=> b!57767 m!48735))

(declare-fun m!48741 () Bool)

(assert (=> b!57767 m!48741))

(assert (=> bm!4159 d!10675))

(declare-fun d!10677 () Bool)

(assert (=> d!10677 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23047 () Unit!1491)

(declare-fun choose!296 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1491)

(assert (=> d!10677 (= lt!23047 (choose!296 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10677 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10677 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!23047)))

(declare-fun bs!2494 () Bool)

(assert (= bs!2494 d!10677))

(assert (=> bs!2494 m!48289))

(assert (=> bs!2494 m!48051))

(declare-fun m!48743 () Bool)

(assert (=> bs!2494 m!48743))

(assert (=> bs!2494 m!48051))

(declare-fun m!48745 () Bool)

(assert (=> bs!2494 m!48745))

(assert (=> bs!2494 m!48121))

(assert (=> bs!2494 m!48121))

(declare-fun m!48747 () Bool)

(assert (=> bs!2494 m!48747))

(assert (=> b!57417 d!10677))

(assert (=> b!57294 d!10671))

(assert (=> b!57294 d!10673))

(declare-fun d!10679 () Bool)

(declare-fun e!38048 () Bool)

(assert (=> d!10679 e!38048))

(declare-fun res!32294 () Bool)

(assert (=> d!10679 (=> res!32294 e!38048)))

(declare-fun lt!23049 () Bool)

(assert (=> d!10679 (= res!32294 (not lt!23049))))

(declare-fun lt!23051 () Bool)

(assert (=> d!10679 (= lt!23049 lt!23051)))

(declare-fun lt!23050 () Unit!1491)

(declare-fun e!38049 () Unit!1491)

(assert (=> d!10679 (= lt!23050 e!38049)))

(declare-fun c!7183 () Bool)

(assert (=> d!10679 (= c!7183 lt!23051)))

(assert (=> d!10679 (= lt!23051 (containsKey!127 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10679 (= (contains!679 lt!22664 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23049)))

(declare-fun b!57769 () Bool)

(declare-fun lt!23048 () Unit!1491)

(assert (=> b!57769 (= e!38049 lt!23048)))

(assert (=> b!57769 (= lt!23048 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57769 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57770 () Bool)

(declare-fun Unit!1509 () Unit!1491)

(assert (=> b!57770 (= e!38049 Unit!1509)))

(declare-fun b!57771 () Bool)

(assert (=> b!57771 (= e!38048 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10679 c!7183) b!57769))

(assert (= (and d!10679 (not c!7183)) b!57770))

(assert (= (and d!10679 (not res!32294)) b!57771))

(declare-fun m!48749 () Bool)

(assert (=> d!10679 m!48749))

(declare-fun m!48751 () Bool)

(assert (=> b!57769 m!48751))

(assert (=> b!57769 m!48285))

(assert (=> b!57769 m!48285))

(declare-fun m!48753 () Bool)

(assert (=> b!57769 m!48753))

(assert (=> b!57771 m!48285))

(assert (=> b!57771 m!48285))

(assert (=> b!57771 m!48753))

(assert (=> bm!4081 d!10679))

(declare-fun b!57784 () Bool)

(declare-fun e!38057 () SeekEntryResult!226)

(assert (=> b!57784 (= e!38057 Undefined!226)))

(declare-fun lt!23059 () SeekEntryResult!226)

(declare-fun b!57785 () Bool)

(declare-fun e!38056 () SeekEntryResult!226)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3707 (_ BitVec 32)) SeekEntryResult!226)

(assert (=> b!57785 (= e!38056 (seekKeyOrZeroReturnVacant!0 (x!9858 lt!23059) (index!3028 lt!23059) (index!3028 lt!23059) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57786 () Bool)

(declare-fun c!7191 () Bool)

(declare-fun lt!23060 () (_ BitVec 64))

(assert (=> b!57786 (= c!7191 (= lt!23060 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38058 () SeekEntryResult!226)

(assert (=> b!57786 (= e!38058 e!38056)))

(declare-fun d!10681 () Bool)

(declare-fun lt!23058 () SeekEntryResult!226)

(assert (=> d!10681 (and (or ((_ is Undefined!226) lt!23058) (not ((_ is Found!226) lt!23058)) (and (bvsge (index!3027 lt!23058) #b00000000000000000000000000000000) (bvslt (index!3027 lt!23058) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23058) ((_ is Found!226) lt!23058) (not ((_ is MissingZero!226) lt!23058)) (and (bvsge (index!3026 lt!23058) #b00000000000000000000000000000000) (bvslt (index!3026 lt!23058) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23058) ((_ is Found!226) lt!23058) ((_ is MissingZero!226) lt!23058) (not ((_ is MissingVacant!226) lt!23058)) (and (bvsge (index!3029 lt!23058) #b00000000000000000000000000000000) (bvslt (index!3029 lt!23058) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23058) (ite ((_ is Found!226) lt!23058) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!23058)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite ((_ is MissingZero!226) lt!23058) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!23058)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!226) lt!23058) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23058)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10681 (= lt!23058 e!38057)))

(declare-fun c!7192 () Bool)

(assert (=> d!10681 (= c!7192 (and ((_ is Intermediate!226) lt!23059) (undefined!1038 lt!23059)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3707 (_ BitVec 32)) SeekEntryResult!226)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!10681 (= lt!23059 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10681 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10681 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23058)))

(declare-fun b!57787 () Bool)

(assert (=> b!57787 (= e!38058 (Found!226 (index!3028 lt!23059)))))

(declare-fun b!57788 () Bool)

(assert (=> b!57788 (= e!38056 (MissingZero!226 (index!3028 lt!23059)))))

(declare-fun b!57789 () Bool)

(assert (=> b!57789 (= e!38057 e!38058)))

(assert (=> b!57789 (= lt!23060 (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23059)))))

(declare-fun c!7190 () Bool)

(assert (=> b!57789 (= c!7190 (= lt!23060 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10681 c!7192) b!57784))

(assert (= (and d!10681 (not c!7192)) b!57789))

(assert (= (and b!57789 c!7190) b!57787))

(assert (= (and b!57789 (not c!7190)) b!57786))

(assert (= (and b!57786 c!7191) b!57788))

(assert (= (and b!57786 (not c!7191)) b!57785))

(assert (=> b!57785 m!48037))

(declare-fun m!48755 () Bool)

(assert (=> b!57785 m!48755))

(assert (=> d!10681 m!48037))

(declare-fun m!48757 () Bool)

(assert (=> d!10681 m!48757))

(assert (=> d!10681 m!48757))

(assert (=> d!10681 m!48037))

(declare-fun m!48759 () Bool)

(assert (=> d!10681 m!48759))

(assert (=> d!10681 m!48289))

(declare-fun m!48761 () Bool)

(assert (=> d!10681 m!48761))

(declare-fun m!48763 () Bool)

(assert (=> d!10681 m!48763))

(declare-fun m!48765 () Bool)

(assert (=> d!10681 m!48765))

(declare-fun m!48767 () Bool)

(assert (=> b!57789 m!48767))

(assert (=> bm!4146 d!10681))

(assert (=> b!57415 d!10681))

(assert (=> d!10549 d!10553))

(declare-fun d!10683 () Bool)

(assert (=> d!10683 (not (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!10683 true))

(declare-fun _$68!28 () Unit!1491)

(assert (=> d!10683 (= (choose!68 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425)) _$68!28)))

(declare-fun bs!2495 () Bool)

(assert (= bs!2495 d!10683))

(assert (=> bs!2495 m!48037))

(assert (=> bs!2495 m!48041))

(assert (=> d!10549 d!10683))

(declare-fun d!10685 () Bool)

(declare-fun res!32295 () Bool)

(declare-fun e!38059 () Bool)

(assert (=> d!10685 (=> res!32295 e!38059)))

(assert (=> d!10685 (= res!32295 (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10685 (= (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38059)))

(declare-fun b!57790 () Bool)

(declare-fun e!38060 () Bool)

(assert (=> b!57790 (= e!38059 e!38060)))

(declare-fun res!32296 () Bool)

(assert (=> b!57790 (=> (not res!32296) (not e!38060))))

(assert (=> b!57790 (= res!32296 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57791 () Bool)

(assert (=> b!57791 (= e!38060 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10685 (not res!32295)) b!57790))

(assert (= (and b!57790 res!32296) b!57791))

(declare-fun m!48769 () Bool)

(assert (=> d!10685 m!48769))

(assert (=> b!57791 m!48037))

(declare-fun m!48771 () Bool)

(assert (=> b!57791 m!48771))

(assert (=> b!57432 d!10685))

(declare-fun d!10687 () Bool)

(declare-fun e!38061 () Bool)

(assert (=> d!10687 e!38061))

(declare-fun res!32297 () Bool)

(assert (=> d!10687 (=> res!32297 e!38061)))

(declare-fun lt!23062 () Bool)

(assert (=> d!10687 (= res!32297 (not lt!23062))))

(declare-fun lt!23064 () Bool)

(assert (=> d!10687 (= lt!23062 lt!23064)))

(declare-fun lt!23063 () Unit!1491)

(declare-fun e!38062 () Unit!1491)

(assert (=> d!10687 (= lt!23063 e!38062)))

(declare-fun c!7193 () Bool)

(assert (=> d!10687 (= c!7193 lt!23064)))

(assert (=> d!10687 (= lt!23064 (containsKey!127 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10687 (= (contains!679 lt!22664 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23062)))

(declare-fun b!57792 () Bool)

(declare-fun lt!23061 () Unit!1491)

(assert (=> b!57792 (= e!38062 lt!23061)))

(assert (=> b!57792 (= lt!23061 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57792 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57793 () Bool)

(declare-fun Unit!1510 () Unit!1491)

(assert (=> b!57793 (= e!38062 Unit!1510)))

(declare-fun b!57794 () Bool)

(assert (=> b!57794 (= e!38061 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10687 c!7193) b!57792))

(assert (= (and d!10687 (not c!7193)) b!57793))

(assert (= (and d!10687 (not res!32297)) b!57794))

(declare-fun m!48773 () Bool)

(assert (=> d!10687 m!48773))

(declare-fun m!48775 () Bool)

(assert (=> b!57792 m!48775))

(assert (=> b!57792 m!48273))

(assert (=> b!57792 m!48273))

(declare-fun m!48777 () Bool)

(assert (=> b!57792 m!48777))

(assert (=> b!57794 m!48273))

(assert (=> b!57794 m!48273))

(assert (=> b!57794 m!48777))

(assert (=> bm!4082 d!10687))

(declare-fun b!57795 () Bool)

(declare-fun e!38064 () ListLongMap!1361)

(declare-fun call!4212 () ListLongMap!1361)

(assert (=> b!57795 (= e!38064 call!4212)))

(declare-fun b!57796 () Bool)

(declare-fun e!38072 () Bool)

(declare-fun lt!23070 () ListLongMap!1361)

(assert (=> b!57796 (= e!38072 (= (apply!65 lt!23070 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!57797 () Bool)

(declare-fun e!38063 () Bool)

(assert (=> b!57797 (= e!38063 e!38072)))

(declare-fun res!32304 () Bool)

(declare-fun call!4206 () Bool)

(assert (=> b!57797 (= res!32304 call!4206)))

(assert (=> b!57797 (=> (not res!32304) (not e!38072))))

(declare-fun b!57798 () Bool)

(declare-fun e!38066 () Bool)

(declare-fun e!38067 () Bool)

(assert (=> b!57798 (= e!38066 e!38067)))

(declare-fun res!32299 () Bool)

(declare-fun call!4207 () Bool)

(assert (=> b!57798 (= res!32299 call!4207)))

(assert (=> b!57798 (=> (not res!32299) (not e!38067))))

(declare-fun b!57799 () Bool)

(declare-fun e!38074 () Bool)

(assert (=> b!57799 (= e!38074 (= (apply!65 lt!23070 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57799 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762))))))

(assert (=> b!57799 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57800 () Bool)

(declare-fun e!38069 () Bool)

(assert (=> b!57800 (= e!38069 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4203 () Bool)

(declare-fun call!4208 () ListLongMap!1361)

(assert (=> bm!4203 (= call!4212 call!4208)))

(declare-fun d!10689 () Bool)

(declare-fun e!38071 () Bool)

(assert (=> d!10689 e!38071))

(declare-fun res!32301 () Bool)

(assert (=> d!10689 (=> (not res!32301) (not e!38071))))

(assert (=> d!10689 (= res!32301 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!23082 () ListLongMap!1361)

(assert (=> d!10689 (= lt!23070 lt!23082)))

(declare-fun lt!23069 () Unit!1491)

(declare-fun e!38073 () Unit!1491)

(assert (=> d!10689 (= lt!23069 e!38073)))

(declare-fun c!7198 () Bool)

(declare-fun e!38075 () Bool)

(assert (=> d!10689 (= c!7198 e!38075)))

(declare-fun res!32300 () Bool)

(assert (=> d!10689 (=> (not res!32300) (not e!38075))))

(assert (=> d!10689 (= res!32300 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38070 () ListLongMap!1361)

(assert (=> d!10689 (= lt!23082 e!38070)))

(declare-fun c!7196 () Bool)

(assert (=> d!10689 (= c!7196 (and (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10689 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10689 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23070)))

(declare-fun b!57801 () Bool)

(declare-fun call!4210 () ListLongMap!1361)

(assert (=> b!57801 (= e!38070 (+!80 call!4210 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(declare-fun bm!4204 () Bool)

(declare-fun call!4209 () ListLongMap!1361)

(assert (=> bm!4204 (= call!4209 call!4210)))

(declare-fun b!57802 () Bool)

(assert (=> b!57802 (= e!38071 e!38066)))

(declare-fun c!7197 () Bool)

(assert (=> b!57802 (= c!7197 (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4205 () Bool)

(declare-fun call!4211 () ListLongMap!1361)

(assert (=> bm!4205 (= call!4211 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57803 () Bool)

(declare-fun res!32306 () Bool)

(assert (=> b!57803 (=> (not res!32306) (not e!38071))))

(declare-fun e!38065 () Bool)

(assert (=> b!57803 (= res!32306 e!38065)))

(declare-fun res!32303 () Bool)

(assert (=> b!57803 (=> res!32303 e!38065)))

(assert (=> b!57803 (= res!32303 (not e!38069))))

(declare-fun res!32302 () Bool)

(assert (=> b!57803 (=> (not res!32302) (not e!38069))))

(assert (=> b!57803 (= res!32302 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4206 () Bool)

(assert (=> bm!4206 (= call!4207 (contains!679 lt!23070 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57804 () Bool)

(declare-fun lt!23080 () Unit!1491)

(assert (=> b!57804 (= e!38073 lt!23080)))

(declare-fun lt!23075 () ListLongMap!1361)

(assert (=> b!57804 (= lt!23075 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23072 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23072 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23083 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23083 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23071 () Unit!1491)

(assert (=> b!57804 (= lt!23071 (addStillContains!41 lt!23075 lt!23072 (zeroValue!1940 newMap!16) lt!23083))))

(assert (=> b!57804 (contains!679 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) lt!23083)))

(declare-fun lt!23078 () Unit!1491)

(assert (=> b!57804 (= lt!23078 lt!23071)))

(declare-fun lt!23074 () ListLongMap!1361)

(assert (=> b!57804 (= lt!23074 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23067 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23067 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23077 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23077 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23068 () Unit!1491)

(assert (=> b!57804 (= lt!23068 (addApplyDifferent!41 lt!23074 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23077))))

(assert (=> b!57804 (= (apply!65 (+!80 lt!23074 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23077) (apply!65 lt!23074 lt!23077))))

(declare-fun lt!23084 () Unit!1491)

(assert (=> b!57804 (= lt!23084 lt!23068)))

(declare-fun lt!23076 () ListLongMap!1361)

(assert (=> b!57804 (= lt!23076 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23079 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23079 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23065 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23065 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23085 () Unit!1491)

(assert (=> b!57804 (= lt!23085 (addApplyDifferent!41 lt!23076 lt!23079 (zeroValue!1940 newMap!16) lt!23065))))

(assert (=> b!57804 (= (apply!65 (+!80 lt!23076 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) lt!23065) (apply!65 lt!23076 lt!23065))))

(declare-fun lt!23081 () Unit!1491)

(assert (=> b!57804 (= lt!23081 lt!23085)))

(declare-fun lt!23086 () ListLongMap!1361)

(assert (=> b!57804 (= lt!23086 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23066 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23066 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23073 () (_ BitVec 64))

(assert (=> b!57804 (= lt!23073 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57804 (= lt!23080 (addApplyDifferent!41 lt!23086 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23073))))

(assert (=> b!57804 (= (apply!65 (+!80 lt!23086 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23073) (apply!65 lt!23086 lt!23073))))

(declare-fun b!57805 () Bool)

(assert (=> b!57805 (= e!38063 (not call!4206))))

(declare-fun b!57806 () Bool)

(assert (=> b!57806 (= e!38066 (not call!4207))))

(declare-fun bm!4207 () Bool)

(assert (=> bm!4207 (= call!4206 (contains!679 lt!23070 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7195 () Bool)

(declare-fun bm!4208 () Bool)

(assert (=> bm!4208 (= call!4210 (+!80 (ite c!7196 call!4211 (ite c!7195 call!4208 call!4212)) (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun b!57807 () Bool)

(declare-fun e!38068 () ListLongMap!1361)

(assert (=> b!57807 (= e!38068 call!4209)))

(declare-fun b!57808 () Bool)

(assert (=> b!57808 (= e!38065 e!38074)))

(declare-fun res!32298 () Bool)

(assert (=> b!57808 (=> (not res!32298) (not e!38074))))

(assert (=> b!57808 (= res!32298 (contains!679 lt!23070 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57808 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57809 () Bool)

(assert (=> b!57809 (= e!38070 e!38068)))

(assert (=> b!57809 (= c!7195 (and (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4209 () Bool)

(assert (=> bm!4209 (= call!4208 call!4211)))

(declare-fun b!57810 () Bool)

(assert (=> b!57810 (= e!38067 (= (apply!65 lt!23070 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))

(declare-fun b!57811 () Bool)

(assert (=> b!57811 (= e!38064 call!4209)))

(declare-fun c!7199 () Bool)

(declare-fun b!57812 () Bool)

(assert (=> b!57812 (= c!7199 (and (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57812 (= e!38068 e!38064)))

(declare-fun b!57813 () Bool)

(declare-fun res!32305 () Bool)

(assert (=> b!57813 (=> (not res!32305) (not e!38071))))

(assert (=> b!57813 (= res!32305 e!38063)))

(declare-fun c!7194 () Bool)

(assert (=> b!57813 (= c!7194 (not (= (bvand (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57814 () Bool)

(declare-fun Unit!1511 () Unit!1491)

(assert (=> b!57814 (= e!38073 Unit!1511)))

(declare-fun b!57815 () Bool)

(assert (=> b!57815 (= e!38075 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10689 c!7196) b!57801))

(assert (= (and d!10689 (not c!7196)) b!57809))

(assert (= (and b!57809 c!7195) b!57807))

(assert (= (and b!57809 (not c!7195)) b!57812))

(assert (= (and b!57812 c!7199) b!57811))

(assert (= (and b!57812 (not c!7199)) b!57795))

(assert (= (or b!57811 b!57795) bm!4203))

(assert (= (or b!57807 bm!4203) bm!4209))

(assert (= (or b!57807 b!57811) bm!4204))

(assert (= (or b!57801 bm!4209) bm!4205))

(assert (= (or b!57801 bm!4204) bm!4208))

(assert (= (and d!10689 res!32300) b!57815))

(assert (= (and d!10689 c!7198) b!57804))

(assert (= (and d!10689 (not c!7198)) b!57814))

(assert (= (and d!10689 res!32301) b!57803))

(assert (= (and b!57803 res!32302) b!57800))

(assert (= (and b!57803 (not res!32303)) b!57808))

(assert (= (and b!57808 res!32298) b!57799))

(assert (= (and b!57803 res!32306) b!57813))

(assert (= (and b!57813 c!7194) b!57797))

(assert (= (and b!57813 (not c!7194)) b!57805))

(assert (= (and b!57797 res!32304) b!57796))

(assert (= (or b!57797 b!57805) bm!4207))

(assert (= (and b!57813 res!32305) b!57802))

(assert (= (and b!57802 c!7197) b!57798))

(assert (= (and b!57802 (not c!7197)) b!57806))

(assert (= (and b!57798 res!32299) b!57810))

(assert (= (or b!57798 b!57806) bm!4206))

(declare-fun b_lambda!2509 () Bool)

(assert (=> (not b_lambda!2509) (not b!57799)))

(assert (=> b!57799 t!4753))

(declare-fun b_and!3479 () Bool)

(assert (= b_and!3475 (and (=> t!4753 result!2353) b_and!3479)))

(assert (=> b!57799 t!4755))

(declare-fun b_and!3481 () Bool)

(assert (= b_and!3477 (and (=> t!4755 result!2355) b_and!3481)))

(declare-fun m!48779 () Bool)

(assert (=> bm!4205 m!48779))

(assert (=> b!57800 m!48295))

(assert (=> b!57800 m!48295))

(assert (=> b!57800 m!48297))

(declare-fun m!48781 () Bool)

(assert (=> b!57810 m!48781))

(declare-fun m!48783 () Bool)

(assert (=> bm!4206 m!48783))

(declare-fun m!48785 () Bool)

(assert (=> bm!4207 m!48785))

(declare-fun m!48787 () Bool)

(assert (=> bm!4208 m!48787))

(declare-fun m!48789 () Bool)

(assert (=> b!57804 m!48789))

(declare-fun m!48791 () Bool)

(assert (=> b!57804 m!48791))

(declare-fun m!48793 () Bool)

(assert (=> b!57804 m!48793))

(declare-fun m!48795 () Bool)

(assert (=> b!57804 m!48795))

(declare-fun m!48797 () Bool)

(assert (=> b!57804 m!48797))

(declare-fun m!48799 () Bool)

(assert (=> b!57804 m!48799))

(declare-fun m!48801 () Bool)

(assert (=> b!57804 m!48801))

(declare-fun m!48803 () Bool)

(assert (=> b!57804 m!48803))

(declare-fun m!48805 () Bool)

(assert (=> b!57804 m!48805))

(declare-fun m!48807 () Bool)

(assert (=> b!57804 m!48807))

(declare-fun m!48809 () Bool)

(assert (=> b!57804 m!48809))

(assert (=> b!57804 m!48779))

(assert (=> b!57804 m!48807))

(declare-fun m!48811 () Bool)

(assert (=> b!57804 m!48811))

(assert (=> b!57804 m!48803))

(assert (=> b!57804 m!48799))

(assert (=> b!57804 m!48295))

(declare-fun m!48813 () Bool)

(assert (=> b!57804 m!48813))

(assert (=> b!57804 m!48795))

(declare-fun m!48815 () Bool)

(assert (=> b!57804 m!48815))

(declare-fun m!48817 () Bool)

(assert (=> b!57804 m!48817))

(assert (=> b!57799 m!48295))

(declare-fun m!48819 () Bool)

(assert (=> b!57799 m!48819))

(assert (=> b!57799 m!48339))

(declare-fun m!48821 () Bool)

(assert (=> b!57799 m!48821))

(assert (=> b!57799 m!48339))

(assert (=> b!57799 m!48295))

(declare-fun m!48823 () Bool)

(assert (=> b!57799 m!48823))

(assert (=> b!57799 m!48819))

(declare-fun m!48825 () Bool)

(assert (=> b!57801 m!48825))

(declare-fun m!48827 () Bool)

(assert (=> b!57796 m!48827))

(assert (=> b!57815 m!48295))

(assert (=> b!57815 m!48295))

(assert (=> b!57815 m!48297))

(assert (=> d!10689 m!48289))

(assert (=> b!57808 m!48295))

(assert (=> b!57808 m!48295))

(declare-fun m!48829 () Bool)

(assert (=> b!57808 m!48829))

(assert (=> bm!4140 d!10689))

(assert (=> b!57451 d!10597))

(declare-fun condMapEmpty!2859 () Bool)

(declare-fun mapDefault!2859 () ValueCell!852)

(assert (=> mapNonEmpty!2858 (= condMapEmpty!2859 (= mapRest!2858 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2859)))))

(declare-fun e!38077 () Bool)

(declare-fun mapRes!2859 () Bool)

(assert (=> mapNonEmpty!2858 (= tp!7970 (and e!38077 mapRes!2859))))

(declare-fun b!57817 () Bool)

(assert (=> b!57817 (= e!38077 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2859 () Bool)

(declare-fun tp!7971 () Bool)

(declare-fun e!38076 () Bool)

(assert (=> mapNonEmpty!2859 (= mapRes!2859 (and tp!7971 e!38076))))

(declare-fun mapValue!2859 () ValueCell!852)

(declare-fun mapKey!2859 () (_ BitVec 32))

(declare-fun mapRest!2859 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2859 (= mapRest!2858 (store mapRest!2859 mapKey!2859 mapValue!2859))))

(declare-fun b!57816 () Bool)

(assert (=> b!57816 (= e!38076 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2859 () Bool)

(assert (=> mapIsEmpty!2859 mapRes!2859))

(assert (= (and mapNonEmpty!2858 condMapEmpty!2859) mapIsEmpty!2859))

(assert (= (and mapNonEmpty!2858 (not condMapEmpty!2859)) mapNonEmpty!2859))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!852) mapValue!2859)) b!57816))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!852) mapDefault!2859)) b!57817))

(declare-fun m!48831 () Bool)

(assert (=> mapNonEmpty!2859 m!48831))

(declare-fun condMapEmpty!2860 () Bool)

(declare-fun mapDefault!2860 () ValueCell!852)

(assert (=> mapNonEmpty!2857 (= condMapEmpty!2860 (= mapRest!2857 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2860)))))

(declare-fun e!38079 () Bool)

(declare-fun mapRes!2860 () Bool)

(assert (=> mapNonEmpty!2857 (= tp!7969 (and e!38079 mapRes!2860))))

(declare-fun b!57819 () Bool)

(assert (=> b!57819 (= e!38079 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2860 () Bool)

(declare-fun tp!7972 () Bool)

(declare-fun e!38078 () Bool)

(assert (=> mapNonEmpty!2860 (= mapRes!2860 (and tp!7972 e!38078))))

(declare-fun mapRest!2860 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapKey!2860 () (_ BitVec 32))

(declare-fun mapValue!2860 () ValueCell!852)

(assert (=> mapNonEmpty!2860 (= mapRest!2857 (store mapRest!2860 mapKey!2860 mapValue!2860))))

(declare-fun b!57818 () Bool)

(assert (=> b!57818 (= e!38078 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2860 () Bool)

(assert (=> mapIsEmpty!2860 mapRes!2860))

(assert (= (and mapNonEmpty!2857 condMapEmpty!2860) mapIsEmpty!2860))

(assert (= (and mapNonEmpty!2857 (not condMapEmpty!2860)) mapNonEmpty!2860))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!852) mapValue!2860)) b!57818))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!852) mapDefault!2860)) b!57819))

(declare-fun m!48833 () Bool)

(assert (=> mapNonEmpty!2860 m!48833))

(declare-fun b_lambda!2511 () Bool)

(assert (= b_lambda!2501 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2511)))

(declare-fun b_lambda!2513 () Bool)

(assert (= b_lambda!2507 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2513)))

(declare-fun b_lambda!2515 () Bool)

(assert (= b_lambda!2505 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2515)))

(declare-fun b_lambda!2517 () Bool)

(assert (= b_lambda!2503 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2517)))

(declare-fun b_lambda!2519 () Bool)

(assert (= b_lambda!2509 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2519)))

(check-sat (not b!57796) (not b!57607) (not b!57801) (not mapNonEmpty!2860) (not b_lambda!2511) (not b!57627) (not d!10617) (not b!57503) (not b_lambda!2519) (not b!57530) (not bm!4205) (not b!57791) (not d!10585) (not b_lambda!2517) (not b!57521) (not d!10633) (not bm!4163) (not b!57794) (not b!57699) (not b!57616) (not bm!4196) (not b_lambda!2495) (not b!57767) (not b!57785) (not bm!4197) (not b!57619) (not d!10643) (not b!57742) (not b!57524) (not b!57557) (not d!10607) (not bm!4165) (not b!57628) (not d!10677) (not b!57474) (not b!57553) (not b!57769) (not b!57617) (not b!57576) (not d!10637) (not d!10613) (not b!57623) (not d!10653) b_and!3481 (not b!57643) (not bm!4164) (not d!10625) (not b!57624) (not b!57700) (not d!10641) (not b!57568) (not b!57693) (not d!10583) (not bm!4202) (not b!57560) (not d!10681) (not b!57625) (not b_lambda!2499) (not b!57792) (not b!57497) (not d!10649) (not d!10571) (not b!57516) (not d!10629) (not d!10591) (not d!10611) (not b!57622) (not bm!4189) (not b!57508) (not b!57473) (not d!10645) (not d!10619) (not b!57611) (not b!57493) (not mapNonEmpty!2859) (not b!57799) (not b!57733) (not b!57520) (not b!57561) (not b!57475) (not b!57577) tp_is_empty!2391 (not b!57685) (not b!57485) (not b!57559) (not b!57766) (not b!57615) (not b!57751) (not d!10669) (not bm!4170) (not d!10621) (not bm!4176) (not b!57686) (not b!57575) (not d!10627) (not bm!4206) (not d!10639) (not b!57746) (not b!57740) (not d!10575) (not d!10671) (not d!10687) (not b!57748) (not bm!4201) (not bm!4200) (not bm!4179) (not b!57556) (not b!57638) (not b!57800) (not b!57764) (not b!57621) (not b!57519) (not b!57647) (not d!10623) (not b!57609) (not d!10615) (not b!57554) (not b!57804) (not b!57739) (not d!10659) (not b!57535) (not bm!4191) (not d!10565) (not b!57808) (not bm!4172) (not d!10679) (not b!57566) (not d!10647) (not b!57608) (not d!10567) (not d!10573) (not b!57492) (not d!10593) (not bm!4169) (not bm!4171) (not b!57646) (not d!10601) (not b!57737) (not b!57489) (not d!10563) (not b!57569) b_and!3479 (not d!10599) (not d!10609) (not bm!4208) (not b!57745) (not b!57620) (not d!10683) (not b!57494) (not b!57614) (not b_lambda!2513) (not d!10631) (not b!57528) (not b_next!1951) (not b!57687) (not b!57629) (not b!57743) (not b!57637) (not b_next!1949) (not b!57640) (not b!57486) (not bm!4162) (not d!10651) (not b!57762) (not b!57810) (not d!10635) (not d!10663) (not bm!4188) (not b!57558) (not b!57501) (not b!57541) (not b!57550) (not b!57771) (not d!10689) (not b_lambda!2515) (not d!10595) (not b!57540) (not d!10603) (not b!57649) (not b!57513) (not bm!4207) (not b!57815) (not d!10577))
(check-sat b_and!3479 b_and!3481 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun b!57820 () Bool)

(declare-fun e!38080 () Bool)

(declare-fun e!38081 () Bool)

(assert (=> b!57820 (= e!38080 e!38081)))

(declare-fun lt!23089 () (_ BitVec 64))

(assert (=> b!57820 (= lt!23089 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!23087 () Unit!1491)

(assert (=> b!57820 (= lt!23087 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!23089 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!57820 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23089 #b00000000000000000000000000000000)))

(declare-fun lt!23088 () Unit!1491)

(assert (=> b!57820 (= lt!23088 lt!23087)))

(declare-fun res!32307 () Bool)

(assert (=> b!57820 (= res!32307 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3642 newMap!16) (mask!5896 newMap!16)) (Found!226 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!57820 (=> (not res!32307) (not e!38081))))

(declare-fun b!57822 () Bool)

(declare-fun call!4213 () Bool)

(assert (=> b!57822 (= e!38081 call!4213)))

(declare-fun bm!4210 () Bool)

(assert (=> bm!4210 (= call!4213 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57823 () Bool)

(declare-fun e!38082 () Bool)

(assert (=> b!57823 (= e!38082 e!38080)))

(declare-fun c!7200 () Bool)

(assert (=> b!57823 (= c!7200 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!10691 () Bool)

(declare-fun res!32308 () Bool)

(assert (=> d!10691 (=> res!32308 e!38082)))

(assert (=> d!10691 (= res!32308 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10691 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)) e!38082)))

(declare-fun b!57821 () Bool)

(assert (=> b!57821 (= e!38080 call!4213)))

(assert (= (and d!10691 (not res!32308)) b!57823))

(assert (= (and b!57823 c!7200) b!57820))

(assert (= (and b!57823 (not c!7200)) b!57821))

(assert (= (and b!57820 res!32307) b!57822))

(assert (= (or b!57822 b!57821) bm!4210))

(declare-fun m!48835 () Bool)

(assert (=> b!57820 m!48835))

(declare-fun m!48837 () Bool)

(assert (=> b!57820 m!48837))

(declare-fun m!48839 () Bool)

(assert (=> b!57820 m!48839))

(assert (=> b!57820 m!48835))

(declare-fun m!48841 () Bool)

(assert (=> b!57820 m!48841))

(declare-fun m!48843 () Bool)

(assert (=> bm!4210 m!48843))

(assert (=> b!57823 m!48835))

(assert (=> b!57823 m!48835))

(declare-fun m!48845 () Bool)

(assert (=> b!57823 m!48845))

(assert (=> bm!4176 d!10691))

(declare-fun b!57824 () Bool)

(declare-fun e!38083 () (_ BitVec 32))

(declare-fun e!38084 () (_ BitVec 32))

(assert (=> b!57824 (= e!38083 e!38084)))

(declare-fun c!7201 () Bool)

(assert (=> b!57824 (= c!7201 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun b!57825 () Bool)

(declare-fun call!4214 () (_ BitVec 32))

(assert (=> b!57825 (= e!38084 (bvadd #b00000000000000000000000000000001 call!4214))))

(declare-fun b!57826 () Bool)

(assert (=> b!57826 (= e!38084 call!4214)))

(declare-fun d!10693 () Bool)

(declare-fun lt!23090 () (_ BitVec 32))

(assert (=> d!10693 (and (bvsge lt!23090 #b00000000000000000000000000000000) (bvsle lt!23090 (bvsub (size!2004 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(assert (=> d!10693 (= lt!23090 e!38083)))

(declare-fun c!7202 () Bool)

(assert (=> d!10693 (= c!7202 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(assert (=> d!10693 (and (bvsle #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2004 (_keys!3642 (_2!1020 lt!22755))) (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(assert (=> d!10693 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))) lt!23090)))

(declare-fun b!57827 () Bool)

(assert (=> b!57827 (= e!38083 #b00000000000000000000000000000000)))

(declare-fun bm!4211 () Bool)

(assert (=> bm!4211 (= call!4214 (arrayCountValidKeys!0 (_keys!3642 (_2!1020 lt!22755)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(assert (= (and d!10693 c!7202) b!57827))

(assert (= (and d!10693 (not c!7202)) b!57824))

(assert (= (and b!57824 c!7201) b!57825))

(assert (= (and b!57824 (not c!7201)) b!57826))

(assert (= (or b!57825 b!57826) bm!4211))

(declare-fun m!48847 () Bool)

(assert (=> b!57824 m!48847))

(assert (=> b!57824 m!48847))

(declare-fun m!48849 () Bool)

(assert (=> b!57824 m!48849))

(declare-fun m!48851 () Bool)

(assert (=> bm!4211 m!48851))

(assert (=> b!57473 d!10693))

(declare-fun b!57828 () Bool)

(declare-fun e!38086 () ListLongMap!1361)

(declare-fun call!4221 () ListLongMap!1361)

(assert (=> b!57828 (= e!38086 call!4221)))

(declare-fun b!57829 () Bool)

(declare-fun e!38094 () Bool)

(declare-fun lt!23096 () ListLongMap!1361)

(assert (=> b!57829 (= e!38094 (= (apply!65 lt!23096 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 (_2!1020 lt!22755))))))

(declare-fun b!57830 () Bool)

(declare-fun e!38085 () Bool)

(assert (=> b!57830 (= e!38085 e!38094)))

(declare-fun res!32315 () Bool)

(declare-fun call!4215 () Bool)

(assert (=> b!57830 (= res!32315 call!4215)))

(assert (=> b!57830 (=> (not res!32315) (not e!38094))))

(declare-fun b!57831 () Bool)

(declare-fun e!38088 () Bool)

(declare-fun e!38089 () Bool)

(assert (=> b!57831 (= e!38088 e!38089)))

(declare-fun res!32310 () Bool)

(declare-fun call!4216 () Bool)

(assert (=> b!57831 (= res!32310 call!4216)))

(assert (=> b!57831 (=> (not res!32310) (not e!38089))))

(declare-fun b!57832 () Bool)

(declare-fun e!38096 () Bool)

(assert (=> b!57832 (= e!38096 (= (apply!65 lt!23096 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (_values!2005 (_2!1020 lt!22755))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 (_2!1020 lt!22755)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57832 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (_values!2005 (_2!1020 lt!22755)))))))

(assert (=> b!57832 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(declare-fun b!57833 () Bool)

(declare-fun e!38091 () Bool)

(assert (=> b!57833 (= e!38091 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun bm!4212 () Bool)

(declare-fun call!4217 () ListLongMap!1361)

(assert (=> bm!4212 (= call!4221 call!4217)))

(declare-fun d!10695 () Bool)

(declare-fun e!38093 () Bool)

(assert (=> d!10695 e!38093))

(declare-fun res!32312 () Bool)

(assert (=> d!10695 (=> (not res!32312) (not e!38093))))

(assert (=> d!10695 (= res!32312 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))))

(declare-fun lt!23108 () ListLongMap!1361)

(assert (=> d!10695 (= lt!23096 lt!23108)))

(declare-fun lt!23095 () Unit!1491)

(declare-fun e!38095 () Unit!1491)

(assert (=> d!10695 (= lt!23095 e!38095)))

(declare-fun c!7207 () Bool)

(declare-fun e!38097 () Bool)

(assert (=> d!10695 (= c!7207 e!38097)))

(declare-fun res!32311 () Bool)

(assert (=> d!10695 (=> (not res!32311) (not e!38097))))

(assert (=> d!10695 (= res!32311 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(declare-fun e!38092 () ListLongMap!1361)

(assert (=> d!10695 (= lt!23108 e!38092)))

(declare-fun c!7205 () Bool)

(assert (=> d!10695 (= c!7205 (and (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10695 (validMask!0 (mask!5896 (_2!1020 lt!22755)))))

(assert (=> d!10695 (= (getCurrentListMap!401 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))) lt!23096)))

(declare-fun b!57834 () Bool)

(declare-fun call!4219 () ListLongMap!1361)

(assert (=> b!57834 (= e!38092 (+!80 call!4219 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (_2!1020 lt!22755)))))))

(declare-fun bm!4213 () Bool)

(declare-fun call!4218 () ListLongMap!1361)

(assert (=> bm!4213 (= call!4218 call!4219)))

(declare-fun b!57835 () Bool)

(assert (=> b!57835 (= e!38093 e!38088)))

(declare-fun c!7206 () Bool)

(assert (=> b!57835 (= c!7206 (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4214 () Bool)

(declare-fun call!4220 () ListLongMap!1361)

(assert (=> bm!4214 (= call!4220 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun b!57836 () Bool)

(declare-fun res!32317 () Bool)

(assert (=> b!57836 (=> (not res!32317) (not e!38093))))

(declare-fun e!38087 () Bool)

(assert (=> b!57836 (= res!32317 e!38087)))

(declare-fun res!32314 () Bool)

(assert (=> b!57836 (=> res!32314 e!38087)))

(assert (=> b!57836 (= res!32314 (not e!38091))))

(declare-fun res!32313 () Bool)

(assert (=> b!57836 (=> (not res!32313) (not e!38091))))

(assert (=> b!57836 (= res!32313 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(declare-fun bm!4215 () Bool)

(assert (=> bm!4215 (= call!4216 (contains!679 lt!23096 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57837 () Bool)

(declare-fun lt!23106 () Unit!1491)

(assert (=> b!57837 (= e!38095 lt!23106)))

(declare-fun lt!23101 () ListLongMap!1361)

(assert (=> b!57837 (= lt!23101 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun lt!23098 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23098 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23109 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23109 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000))))

(declare-fun lt!23097 () Unit!1491)

(assert (=> b!57837 (= lt!23097 (addStillContains!41 lt!23101 lt!23098 (zeroValue!1940 (_2!1020 lt!22755)) lt!23109))))

(assert (=> b!57837 (contains!679 (+!80 lt!23101 (tuple2!2017 lt!23098 (zeroValue!1940 (_2!1020 lt!22755)))) lt!23109)))

(declare-fun lt!23104 () Unit!1491)

(assert (=> b!57837 (= lt!23104 lt!23097)))

(declare-fun lt!23100 () ListLongMap!1361)

(assert (=> b!57837 (= lt!23100 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun lt!23093 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23093 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23103 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23103 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000))))

(declare-fun lt!23094 () Unit!1491)

(assert (=> b!57837 (= lt!23094 (addApplyDifferent!41 lt!23100 lt!23093 (minValue!1940 (_2!1020 lt!22755)) lt!23103))))

(assert (=> b!57837 (= (apply!65 (+!80 lt!23100 (tuple2!2017 lt!23093 (minValue!1940 (_2!1020 lt!22755)))) lt!23103) (apply!65 lt!23100 lt!23103))))

(declare-fun lt!23110 () Unit!1491)

(assert (=> b!57837 (= lt!23110 lt!23094)))

(declare-fun lt!23102 () ListLongMap!1361)

(assert (=> b!57837 (= lt!23102 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun lt!23105 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23105 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23091 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23091 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000))))

(declare-fun lt!23111 () Unit!1491)

(assert (=> b!57837 (= lt!23111 (addApplyDifferent!41 lt!23102 lt!23105 (zeroValue!1940 (_2!1020 lt!22755)) lt!23091))))

(assert (=> b!57837 (= (apply!65 (+!80 lt!23102 (tuple2!2017 lt!23105 (zeroValue!1940 (_2!1020 lt!22755)))) lt!23091) (apply!65 lt!23102 lt!23091))))

(declare-fun lt!23107 () Unit!1491)

(assert (=> b!57837 (= lt!23107 lt!23111)))

(declare-fun lt!23112 () ListLongMap!1361)

(assert (=> b!57837 (= lt!23112 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1020 lt!22755)) (_values!2005 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755)) (extraKeys!1913 (_2!1020 lt!22755)) (zeroValue!1940 (_2!1020 lt!22755)) (minValue!1940 (_2!1020 lt!22755)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!22755))))))

(declare-fun lt!23092 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23092 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23099 () (_ BitVec 64))

(assert (=> b!57837 (= lt!23099 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000))))

(assert (=> b!57837 (= lt!23106 (addApplyDifferent!41 lt!23112 lt!23092 (minValue!1940 (_2!1020 lt!22755)) lt!23099))))

(assert (=> b!57837 (= (apply!65 (+!80 lt!23112 (tuple2!2017 lt!23092 (minValue!1940 (_2!1020 lt!22755)))) lt!23099) (apply!65 lt!23112 lt!23099))))

(declare-fun b!57838 () Bool)

(assert (=> b!57838 (= e!38085 (not call!4215))))

(declare-fun b!57839 () Bool)

(assert (=> b!57839 (= e!38088 (not call!4216))))

(declare-fun bm!4216 () Bool)

(assert (=> bm!4216 (= call!4215 (contains!679 lt!23096 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4217 () Bool)

(declare-fun c!7204 () Bool)

(assert (=> bm!4217 (= call!4219 (+!80 (ite c!7205 call!4220 (ite c!7204 call!4217 call!4221)) (ite (or c!7205 c!7204) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (_2!1020 lt!22755))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (_2!1020 lt!22755))))))))

(declare-fun b!57840 () Bool)

(declare-fun e!38090 () ListLongMap!1361)

(assert (=> b!57840 (= e!38090 call!4218)))

(declare-fun b!57841 () Bool)

(assert (=> b!57841 (= e!38087 e!38096)))

(declare-fun res!32309 () Bool)

(assert (=> b!57841 (=> (not res!32309) (not e!38096))))

(assert (=> b!57841 (= res!32309 (contains!679 lt!23096 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(assert (=> b!57841 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(declare-fun b!57842 () Bool)

(assert (=> b!57842 (= e!38092 e!38090)))

(assert (=> b!57842 (= c!7204 (and (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4218 () Bool)

(assert (=> bm!4218 (= call!4217 call!4220)))

(declare-fun b!57843 () Bool)

(assert (=> b!57843 (= e!38089 (= (apply!65 lt!23096 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 (_2!1020 lt!22755))))))

(declare-fun b!57844 () Bool)

(assert (=> b!57844 (= e!38086 call!4218)))

(declare-fun b!57845 () Bool)

(declare-fun c!7208 () Bool)

(assert (=> b!57845 (= c!7208 (and (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57845 (= e!38090 e!38086)))

(declare-fun b!57846 () Bool)

(declare-fun res!32316 () Bool)

(assert (=> b!57846 (=> (not res!32316) (not e!38093))))

(assert (=> b!57846 (= res!32316 e!38085)))

(declare-fun c!7203 () Bool)

(assert (=> b!57846 (= c!7203 (not (= (bvand (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57847 () Bool)

(declare-fun Unit!1512 () Unit!1491)

(assert (=> b!57847 (= e!38095 Unit!1512)))

(declare-fun b!57848 () Bool)

(assert (=> b!57848 (= e!38097 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(assert (= (and d!10695 c!7205) b!57834))

(assert (= (and d!10695 (not c!7205)) b!57842))

(assert (= (and b!57842 c!7204) b!57840))

(assert (= (and b!57842 (not c!7204)) b!57845))

(assert (= (and b!57845 c!7208) b!57844))

(assert (= (and b!57845 (not c!7208)) b!57828))

(assert (= (or b!57844 b!57828) bm!4212))

(assert (= (or b!57840 bm!4212) bm!4218))

(assert (= (or b!57840 b!57844) bm!4213))

(assert (= (or b!57834 bm!4218) bm!4214))

(assert (= (or b!57834 bm!4213) bm!4217))

(assert (= (and d!10695 res!32311) b!57848))

(assert (= (and d!10695 c!7207) b!57837))

(assert (= (and d!10695 (not c!7207)) b!57847))

(assert (= (and d!10695 res!32312) b!57836))

(assert (= (and b!57836 res!32313) b!57833))

(assert (= (and b!57836 (not res!32314)) b!57841))

(assert (= (and b!57841 res!32309) b!57832))

(assert (= (and b!57836 res!32317) b!57846))

(assert (= (and b!57846 c!7203) b!57830))

(assert (= (and b!57846 (not c!7203)) b!57838))

(assert (= (and b!57830 res!32315) b!57829))

(assert (= (or b!57830 b!57838) bm!4216))

(assert (= (and b!57846 res!32316) b!57835))

(assert (= (and b!57835 c!7206) b!57831))

(assert (= (and b!57835 (not c!7206)) b!57839))

(assert (= (and b!57831 res!32310) b!57843))

(assert (= (or b!57831 b!57839) bm!4215))

(declare-fun b_lambda!2521 () Bool)

(assert (=> (not b_lambda!2521) (not b!57832)))

(declare-fun t!4757 () Bool)

(declare-fun tb!1305 () Bool)

(assert (=> (and b!57147 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 (_2!1020 lt!22755))) t!4757) tb!1305))

(declare-fun result!2357 () Bool)

(assert (=> tb!1305 (= result!2357 tp_is_empty!2391)))

(assert (=> b!57832 t!4757))

(declare-fun b_and!3483 () Bool)

(assert (= b_and!3479 (and (=> t!4757 result!2357) b_and!3483)))

(declare-fun tb!1307 () Bool)

(declare-fun t!4759 () Bool)

(assert (=> (and b!57148 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (_2!1020 lt!22755))) t!4759) tb!1307))

(declare-fun result!2359 () Bool)

(assert (= result!2359 result!2357))

(assert (=> b!57832 t!4759))

(declare-fun b_and!3485 () Bool)

(assert (= b_and!3481 (and (=> t!4759 result!2359) b_and!3485)))

(declare-fun m!48853 () Bool)

(assert (=> bm!4214 m!48853))

(assert (=> b!57833 m!48847))

(assert (=> b!57833 m!48847))

(assert (=> b!57833 m!48849))

(declare-fun m!48855 () Bool)

(assert (=> b!57843 m!48855))

(declare-fun m!48857 () Bool)

(assert (=> bm!4215 m!48857))

(declare-fun m!48859 () Bool)

(assert (=> bm!4216 m!48859))

(declare-fun m!48861 () Bool)

(assert (=> bm!4217 m!48861))

(declare-fun m!48863 () Bool)

(assert (=> b!57837 m!48863))

(declare-fun m!48865 () Bool)

(assert (=> b!57837 m!48865))

(declare-fun m!48867 () Bool)

(assert (=> b!57837 m!48867))

(declare-fun m!48869 () Bool)

(assert (=> b!57837 m!48869))

(declare-fun m!48871 () Bool)

(assert (=> b!57837 m!48871))

(declare-fun m!48873 () Bool)

(assert (=> b!57837 m!48873))

(declare-fun m!48875 () Bool)

(assert (=> b!57837 m!48875))

(declare-fun m!48877 () Bool)

(assert (=> b!57837 m!48877))

(declare-fun m!48879 () Bool)

(assert (=> b!57837 m!48879))

(declare-fun m!48881 () Bool)

(assert (=> b!57837 m!48881))

(declare-fun m!48883 () Bool)

(assert (=> b!57837 m!48883))

(assert (=> b!57837 m!48853))

(assert (=> b!57837 m!48881))

(declare-fun m!48885 () Bool)

(assert (=> b!57837 m!48885))

(assert (=> b!57837 m!48877))

(assert (=> b!57837 m!48873))

(assert (=> b!57837 m!48847))

(declare-fun m!48887 () Bool)

(assert (=> b!57837 m!48887))

(assert (=> b!57837 m!48869))

(declare-fun m!48889 () Bool)

(assert (=> b!57837 m!48889))

(declare-fun m!48891 () Bool)

(assert (=> b!57837 m!48891))

(assert (=> b!57832 m!48847))

(declare-fun m!48893 () Bool)

(assert (=> b!57832 m!48893))

(declare-fun m!48895 () Bool)

(assert (=> b!57832 m!48895))

(declare-fun m!48897 () Bool)

(assert (=> b!57832 m!48897))

(assert (=> b!57832 m!48895))

(assert (=> b!57832 m!48847))

(declare-fun m!48899 () Bool)

(assert (=> b!57832 m!48899))

(assert (=> b!57832 m!48893))

(declare-fun m!48901 () Bool)

(assert (=> b!57834 m!48901))

(declare-fun m!48903 () Bool)

(assert (=> b!57829 m!48903))

(assert (=> b!57848 m!48847))

(assert (=> b!57848 m!48847))

(assert (=> b!57848 m!48849))

(declare-fun m!48905 () Bool)

(assert (=> d!10695 m!48905))

(assert (=> b!57841 m!48847))

(assert (=> b!57841 m!48847))

(declare-fun m!48907 () Bool)

(assert (=> b!57841 m!48907))

(assert (=> d!10577 d!10695))

(declare-fun d!10697 () Bool)

(assert (=> d!10697 (= (apply!65 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22671) (apply!65 lt!22668 lt!22671))))

(assert (=> d!10697 true))

(declare-fun _$34!751 () Unit!1491)

(assert (=> d!10697 (= (choose!290 lt!22668 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22671) _$34!751)))

(declare-fun bs!2496 () Bool)

(assert (= bs!2496 d!10697))

(assert (=> bs!2496 m!48155))

(assert (=> bs!2496 m!48155))

(assert (=> bs!2496 m!48157))

(assert (=> bs!2496 m!48165))

(assert (=> d!10609 d!10697))

(assert (=> d!10609 d!10613))

(declare-fun d!10699 () Bool)

(declare-fun e!38098 () Bool)

(assert (=> d!10699 e!38098))

(declare-fun res!32318 () Bool)

(assert (=> d!10699 (=> res!32318 e!38098)))

(declare-fun lt!23114 () Bool)

(assert (=> d!10699 (= res!32318 (not lt!23114))))

(declare-fun lt!23116 () Bool)

(assert (=> d!10699 (= lt!23114 lt!23116)))

(declare-fun lt!23115 () Unit!1491)

(declare-fun e!38099 () Unit!1491)

(assert (=> d!10699 (= lt!23115 e!38099)))

(declare-fun c!7209 () Bool)

(assert (=> d!10699 (= c!7209 lt!23116)))

(assert (=> d!10699 (= lt!23116 (containsKey!127 (toList!696 lt!22668) lt!22671))))

(assert (=> d!10699 (= (contains!679 lt!22668 lt!22671) lt!23114)))

(declare-fun b!57850 () Bool)

(declare-fun lt!23113 () Unit!1491)

(assert (=> b!57850 (= e!38099 lt!23113)))

(assert (=> b!57850 (= lt!23113 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22668) lt!22671))))

(assert (=> b!57850 (isDefined!76 (getValueByKey!123 (toList!696 lt!22668) lt!22671))))

(declare-fun b!57851 () Bool)

(declare-fun Unit!1513 () Unit!1491)

(assert (=> b!57851 (= e!38099 Unit!1513)))

(declare-fun b!57852 () Bool)

(assert (=> b!57852 (= e!38098 (isDefined!76 (getValueByKey!123 (toList!696 lt!22668) lt!22671)))))

(assert (= (and d!10699 c!7209) b!57850))

(assert (= (and d!10699 (not c!7209)) b!57851))

(assert (= (and d!10699 (not res!32318)) b!57852))

(declare-fun m!48909 () Bool)

(assert (=> d!10699 m!48909))

(declare-fun m!48911 () Bool)

(assert (=> b!57850 m!48911))

(assert (=> b!57850 m!48515))

(assert (=> b!57850 m!48515))

(declare-fun m!48913 () Bool)

(assert (=> b!57850 m!48913))

(assert (=> b!57852 m!48515))

(assert (=> b!57852 m!48515))

(assert (=> b!57852 m!48913))

(assert (=> d!10609 d!10699))

(assert (=> d!10609 d!10623))

(assert (=> d!10609 d!10627))

(declare-fun d!10701 () Bool)

(declare-fun lt!23119 () Bool)

(declare-fun content!62 (List!1429) (InoxSet tuple2!2016))

(assert (=> d!10701 (= lt!23119 (select (content!62 (toList!696 lt!22837)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38105 () Bool)

(assert (=> d!10701 (= lt!23119 e!38105)))

(declare-fun res!32323 () Bool)

(assert (=> d!10701 (=> (not res!32323) (not e!38105))))

(assert (=> d!10701 (= res!32323 ((_ is Cons!1425) (toList!696 lt!22837)))))

(assert (=> d!10701 (= (contains!681 (toList!696 lt!22837) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!23119)))

(declare-fun b!57857 () Bool)

(declare-fun e!38104 () Bool)

(assert (=> b!57857 (= e!38105 e!38104)))

(declare-fun res!32324 () Bool)

(assert (=> b!57857 (=> res!32324 e!38104)))

(assert (=> b!57857 (= res!32324 (= (h!2005 (toList!696 lt!22837)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57858 () Bool)

(assert (=> b!57858 (= e!38104 (contains!681 (t!4747 (toList!696 lt!22837)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10701 res!32323) b!57857))

(assert (= (and b!57857 (not res!32324)) b!57858))

(declare-fun m!48915 () Bool)

(assert (=> d!10701 m!48915))

(declare-fun m!48917 () Bool)

(assert (=> d!10701 m!48917))

(declare-fun m!48919 () Bool)

(assert (=> b!57858 m!48919))

(assert (=> b!57541 d!10701))

(declare-fun d!10703 () Bool)

(declare-fun lt!23120 () Bool)

(assert (=> d!10703 (= lt!23120 (select (content!62 (toList!696 lt!22867)) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38107 () Bool)

(assert (=> d!10703 (= lt!23120 e!38107)))

(declare-fun res!32325 () Bool)

(assert (=> d!10703 (=> (not res!32325) (not e!38107))))

(assert (=> d!10703 (= res!32325 ((_ is Cons!1425) (toList!696 lt!22867)))))

(assert (=> d!10703 (= (contains!681 (toList!696 lt!22867) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23120)))

(declare-fun b!57859 () Bool)

(declare-fun e!38106 () Bool)

(assert (=> b!57859 (= e!38107 e!38106)))

(declare-fun res!32326 () Bool)

(assert (=> b!57859 (=> res!32326 e!38106)))

(assert (=> b!57859 (= res!32326 (= (h!2005 (toList!696 lt!22867)) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57860 () Bool)

(assert (=> b!57860 (= e!38106 (contains!681 (t!4747 (toList!696 lt!22867)) (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10703 res!32325) b!57859))

(assert (= (and b!57859 (not res!32326)) b!57860))

(declare-fun m!48921 () Bool)

(assert (=> d!10703 m!48921))

(declare-fun m!48923 () Bool)

(assert (=> d!10703 m!48923))

(declare-fun m!48925 () Bool)

(assert (=> b!57860 m!48925))

(assert (=> b!57569 d!10703))

(declare-fun d!10705 () Bool)

(declare-fun e!38108 () Bool)

(assert (=> d!10705 e!38108))

(declare-fun res!32327 () Bool)

(assert (=> d!10705 (=> (not res!32327) (not e!38108))))

(declare-fun lt!23123 () ListLongMap!1361)

(assert (=> d!10705 (= res!32327 (contains!679 lt!23123 (_1!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun lt!23122 () List!1429)

(assert (=> d!10705 (= lt!23123 (ListLongMap!1362 lt!23122))))

(declare-fun lt!23121 () Unit!1491)

(declare-fun lt!23124 () Unit!1491)

(assert (=> d!10705 (= lt!23121 lt!23124)))

(assert (=> d!10705 (= (getValueByKey!123 lt!23122 (_1!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10705 (= lt!23124 (lemmaContainsTupThenGetReturnValue!40 lt!23122 (_1!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10705 (= lt!23122 (insertStrictlySorted!43 (toList!696 (ite c!7117 call!4168 (ite c!7116 call!4165 call!4169))) (_1!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10705 (= (+!80 (ite c!7117 call!4168 (ite c!7116 call!4165 call!4169)) (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) lt!23123)))

(declare-fun b!57861 () Bool)

(declare-fun res!32328 () Bool)

(assert (=> b!57861 (=> (not res!32328) (not e!38108))))

(assert (=> b!57861 (= res!32328 (= (getValueByKey!123 (toList!696 lt!23123) (_1!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))))

(declare-fun b!57862 () Bool)

(assert (=> b!57862 (= e!38108 (contains!681 (toList!696 lt!23123) (ite (or c!7117 c!7116) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (= (and d!10705 res!32327) b!57861))

(assert (= (and b!57861 res!32328) b!57862))

(declare-fun m!48927 () Bool)

(assert (=> d!10705 m!48927))

(declare-fun m!48929 () Bool)

(assert (=> d!10705 m!48929))

(declare-fun m!48931 () Bool)

(assert (=> d!10705 m!48931))

(declare-fun m!48933 () Bool)

(assert (=> d!10705 m!48933))

(declare-fun m!48935 () Bool)

(assert (=> b!57861 m!48935))

(declare-fun m!48937 () Bool)

(assert (=> b!57862 m!48937))

(assert (=> bm!4165 d!10705))

(declare-fun d!10707 () Bool)

(declare-fun e!38109 () Bool)

(assert (=> d!10707 e!38109))

(declare-fun res!32329 () Bool)

(assert (=> d!10707 (=> res!32329 e!38109)))

(declare-fun lt!23126 () Bool)

(assert (=> d!10707 (= res!32329 (not lt!23126))))

(declare-fun lt!23128 () Bool)

(assert (=> d!10707 (= lt!23126 lt!23128)))

(declare-fun lt!23127 () Unit!1491)

(declare-fun e!38110 () Unit!1491)

(assert (=> d!10707 (= lt!23127 e!38110)))

(declare-fun c!7210 () Bool)

(assert (=> d!10707 (= c!7210 lt!23128)))

(assert (=> d!10707 (= lt!23128 (containsKey!127 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10707 (= (contains!679 lt!22902 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23126)))

(declare-fun b!57863 () Bool)

(declare-fun lt!23125 () Unit!1491)

(assert (=> b!57863 (= e!38110 lt!23125)))

(assert (=> b!57863 (= lt!23125 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> b!57863 (isDefined!76 (getValueByKey!123 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57864 () Bool)

(declare-fun Unit!1514 () Unit!1491)

(assert (=> b!57864 (= e!38110 Unit!1514)))

(declare-fun b!57865 () Bool)

(assert (=> b!57865 (= e!38109 (isDefined!76 (getValueByKey!123 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10707 c!7210) b!57863))

(assert (= (and d!10707 (not c!7210)) b!57864))

(assert (= (and d!10707 (not res!32329)) b!57865))

(declare-fun m!48939 () Bool)

(assert (=> d!10707 m!48939))

(declare-fun m!48941 () Bool)

(assert (=> b!57863 m!48941))

(assert (=> b!57863 m!48539))

(assert (=> b!57863 m!48539))

(declare-fun m!48943 () Bool)

(assert (=> b!57863 m!48943))

(assert (=> b!57865 m!48539))

(assert (=> b!57865 m!48539))

(assert (=> b!57865 m!48943))

(assert (=> d!10621 d!10707))

(declare-fun b!57867 () Bool)

(declare-fun e!38111 () Option!129)

(declare-fun e!38112 () Option!129)

(assert (=> b!57867 (= e!38111 e!38112)))

(declare-fun c!7212 () Bool)

(assert (=> b!57867 (= c!7212 (and ((_ is Cons!1425) lt!22901) (not (= (_1!1019 (h!2005 lt!22901)) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!57866 () Bool)

(assert (=> b!57866 (= e!38111 (Some!128 (_2!1019 (h!2005 lt!22901))))))

(declare-fun b!57869 () Bool)

(assert (=> b!57869 (= e!38112 None!127)))

(declare-fun c!7211 () Bool)

(declare-fun d!10709 () Bool)

(assert (=> d!10709 (= c!7211 (and ((_ is Cons!1425) lt!22901) (= (_1!1019 (h!2005 lt!22901)) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10709 (= (getValueByKey!123 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38111)))

(declare-fun b!57868 () Bool)

(assert (=> b!57868 (= e!38112 (getValueByKey!123 (t!4747 lt!22901) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10709 c!7211) b!57866))

(assert (= (and d!10709 (not c!7211)) b!57867))

(assert (= (and b!57867 c!7212) b!57868))

(assert (= (and b!57867 (not c!7212)) b!57869))

(declare-fun m!48945 () Bool)

(assert (=> b!57868 m!48945))

(assert (=> d!10621 d!10709))

(declare-fun d!10711 () Bool)

(assert (=> d!10711 (= (getValueByKey!123 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!23131 () Unit!1491)

(declare-fun choose!297 (List!1429 (_ BitVec 64) V!2835) Unit!1491)

(assert (=> d!10711 (= lt!23131 (choose!297 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38115 () Bool)

(assert (=> d!10711 e!38115))

(declare-fun res!32334 () Bool)

(assert (=> d!10711 (=> (not res!32334) (not e!38115))))

(assert (=> d!10711 (= res!32334 (isStrictlySorted!283 lt!22901))))

(assert (=> d!10711 (= (lemmaContainsTupThenGetReturnValue!40 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23131)))

(declare-fun b!57874 () Bool)

(declare-fun res!32335 () Bool)

(assert (=> b!57874 (=> (not res!32335) (not e!38115))))

(assert (=> b!57874 (= res!32335 (containsKey!127 lt!22901 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57875 () Bool)

(assert (=> b!57875 (= e!38115 (contains!681 lt!22901 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10711 res!32334) b!57874))

(assert (= (and b!57874 res!32335) b!57875))

(assert (=> d!10711 m!48533))

(declare-fun m!48947 () Bool)

(assert (=> d!10711 m!48947))

(declare-fun m!48949 () Bool)

(assert (=> d!10711 m!48949))

(declare-fun m!48951 () Bool)

(assert (=> b!57874 m!48951))

(declare-fun m!48953 () Bool)

(assert (=> b!57875 m!48953))

(assert (=> d!10621 d!10711))

(declare-fun bm!4225 () Bool)

(declare-fun call!4230 () List!1429)

(declare-fun c!7221 () Bool)

(declare-fun e!38127 () List!1429)

(declare-fun $colon$colon!59 (List!1429 tuple2!2016) List!1429)

(assert (=> bm!4225 (= call!4230 ($colon$colon!59 e!38127 (ite c!7221 (h!2005 (toList!696 lt!22670)) (tuple2!2017 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun c!7224 () Bool)

(assert (=> bm!4225 (= c!7224 c!7221)))

(declare-fun b!57896 () Bool)

(declare-fun e!38130 () List!1429)

(declare-fun call!4229 () List!1429)

(assert (=> b!57896 (= e!38130 call!4229)))

(declare-fun d!10713 () Bool)

(declare-fun e!38126 () Bool)

(assert (=> d!10713 e!38126))

(declare-fun res!32340 () Bool)

(assert (=> d!10713 (=> (not res!32340) (not e!38126))))

(declare-fun lt!23134 () List!1429)

(assert (=> d!10713 (= res!32340 (isStrictlySorted!283 lt!23134))))

(declare-fun e!38129 () List!1429)

(assert (=> d!10713 (= lt!23134 e!38129)))

(assert (=> d!10713 (= c!7221 (and ((_ is Cons!1425) (toList!696 lt!22670)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22670))) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10713 (isStrictlySorted!283 (toList!696 lt!22670))))

(assert (=> d!10713 (= (insertStrictlySorted!43 (toList!696 lt!22670) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23134)))

(declare-fun b!57897 () Bool)

(assert (=> b!57897 (= e!38129 call!4230)))

(declare-fun b!57898 () Bool)

(declare-fun e!38128 () List!1429)

(assert (=> b!57898 (= e!38129 e!38128)))

(declare-fun c!7223 () Bool)

(assert (=> b!57898 (= c!7223 (and ((_ is Cons!1425) (toList!696 lt!22670)) (= (_1!1019 (h!2005 (toList!696 lt!22670))) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!57899 () Bool)

(assert (=> b!57899 (= e!38126 (contains!681 lt!23134 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun bm!4226 () Bool)

(declare-fun call!4228 () List!1429)

(assert (=> bm!4226 (= call!4228 call!4230)))

(declare-fun b!57900 () Bool)

(assert (=> b!57900 (= e!38127 (insertStrictlySorted!43 (t!4747 (toList!696 lt!22670)) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57901 () Bool)

(declare-fun res!32341 () Bool)

(assert (=> b!57901 (=> (not res!32341) (not e!38126))))

(assert (=> b!57901 (= res!32341 (containsKey!127 lt!23134 (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!57902 () Bool)

(assert (=> b!57902 (= e!38128 call!4228)))

(declare-fun b!57903 () Bool)

(declare-fun c!7222 () Bool)

(assert (=> b!57903 (= e!38127 (ite c!7223 (t!4747 (toList!696 lt!22670)) (ite c!7222 (Cons!1425 (h!2005 (toList!696 lt!22670)) (t!4747 (toList!696 lt!22670))) Nil!1426)))))

(declare-fun b!57904 () Bool)

(assert (=> b!57904 (= e!38130 call!4229)))

(declare-fun b!57905 () Bool)

(assert (=> b!57905 (= c!7222 (and ((_ is Cons!1425) (toList!696 lt!22670)) (bvsgt (_1!1019 (h!2005 (toList!696 lt!22670))) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!57905 (= e!38128 e!38130)))

(declare-fun bm!4227 () Bool)

(assert (=> bm!4227 (= call!4229 call!4228)))

(assert (= (and d!10713 c!7221) b!57897))

(assert (= (and d!10713 (not c!7221)) b!57898))

(assert (= (and b!57898 c!7223) b!57902))

(assert (= (and b!57898 (not c!7223)) b!57905))

(assert (= (and b!57905 c!7222) b!57896))

(assert (= (and b!57905 (not c!7222)) b!57904))

(assert (= (or b!57896 b!57904) bm!4227))

(assert (= (or b!57902 bm!4227) bm!4226))

(assert (= (or b!57897 bm!4226) bm!4225))

(assert (= (and bm!4225 c!7224) b!57900))

(assert (= (and bm!4225 (not c!7224)) b!57903))

(assert (= (and d!10713 res!32340) b!57901))

(assert (= (and b!57901 res!32341) b!57899))

(declare-fun m!48955 () Bool)

(assert (=> b!57901 m!48955))

(declare-fun m!48957 () Bool)

(assert (=> b!57900 m!48957))

(declare-fun m!48959 () Bool)

(assert (=> d!10713 m!48959))

(declare-fun m!48961 () Bool)

(assert (=> d!10713 m!48961))

(declare-fun m!48963 () Bool)

(assert (=> b!57899 m!48963))

(declare-fun m!48965 () Bool)

(assert (=> bm!4225 m!48965))

(assert (=> d!10621 d!10713))

(declare-fun d!10715 () Bool)

(assert (=> d!10715 (= (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!291 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2497 () Bool)

(assert (= bs!2497 d!10715))

(assert (=> bs!2497 m!48273))

(declare-fun m!48967 () Bool)

(assert (=> bs!2497 m!48967))

(assert (=> b!57794 d!10715))

(declare-fun b!57907 () Bool)

(declare-fun e!38131 () Option!129)

(declare-fun e!38132 () Option!129)

(assert (=> b!57907 (= e!38131 e!38132)))

(declare-fun c!7226 () Bool)

(assert (=> b!57907 (= c!7226 (and ((_ is Cons!1425) (toList!696 lt!22664)) (not (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57906 () Bool)

(assert (=> b!57906 (= e!38131 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22664)))))))

(declare-fun b!57909 () Bool)

(assert (=> b!57909 (= e!38132 None!127)))

(declare-fun d!10717 () Bool)

(declare-fun c!7225 () Bool)

(assert (=> d!10717 (= c!7225 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10717 (= (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000) e!38131)))

(declare-fun b!57908 () Bool)

(assert (=> b!57908 (= e!38132 (getValueByKey!123 (t!4747 (toList!696 lt!22664)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10717 c!7225) b!57906))

(assert (= (and d!10717 (not c!7225)) b!57907))

(assert (= (and b!57907 c!7226) b!57908))

(assert (= (and b!57907 (not c!7226)) b!57909))

(declare-fun m!48969 () Bool)

(assert (=> b!57908 m!48969))

(assert (=> b!57794 d!10717))

(declare-fun b!57911 () Bool)

(declare-fun e!38133 () Option!129)

(declare-fun e!38134 () Option!129)

(assert (=> b!57911 (= e!38133 e!38134)))

(declare-fun c!7228 () Bool)

(assert (=> b!57911 (= c!7228 (and ((_ is Cons!1425) (toList!696 lt!22918)) (not (= (_1!1019 (h!2005 (toList!696 lt!22918))) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!57910 () Bool)

(assert (=> b!57910 (= e!38133 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22918)))))))

(declare-fun b!57913 () Bool)

(assert (=> b!57913 (= e!38134 None!127)))

(declare-fun d!10719 () Bool)

(declare-fun c!7227 () Bool)

(assert (=> d!10719 (= c!7227 (and ((_ is Cons!1425) (toList!696 lt!22918)) (= (_1!1019 (h!2005 (toList!696 lt!22918))) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10719 (= (getValueByKey!123 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38133)))

(declare-fun b!57912 () Bool)

(assert (=> b!57912 (= e!38134 (getValueByKey!123 (t!4747 (toList!696 lt!22918)) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10719 c!7227) b!57910))

(assert (= (and d!10719 (not c!7227)) b!57911))

(assert (= (and b!57911 c!7228) b!57912))

(assert (= (and b!57911 (not c!7228)) b!57913))

(declare-fun m!48971 () Bool)

(assert (=> b!57912 m!48971))

(assert (=> b!57628 d!10719))

(declare-fun d!10721 () Bool)

(assert (=> d!10721 (= (apply!65 lt!23070 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!23070) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2498 () Bool)

(assert (= bs!2498 d!10721))

(declare-fun m!48973 () Bool)

(assert (=> bs!2498 m!48973))

(assert (=> bs!2498 m!48973))

(declare-fun m!48975 () Bool)

(assert (=> bs!2498 m!48975))

(assert (=> b!57796 d!10721))

(declare-fun d!10723 () Bool)

(assert (=> d!10723 (= (apply!65 lt!22788 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1063 (getValueByKey!123 (toList!696 lt!22788) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2499 () Bool)

(assert (= bs!2499 d!10723))

(assert (=> bs!2499 m!48295))

(declare-fun m!48977 () Bool)

(assert (=> bs!2499 m!48977))

(assert (=> bs!2499 m!48977))

(declare-fun m!48979 () Bool)

(assert (=> bs!2499 m!48979))

(assert (=> b!57492 d!10723))

(declare-fun d!10725 () Bool)

(declare-fun c!7229 () Bool)

(assert (=> d!10725 (= c!7229 ((_ is ValueCellFull!852) (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!38135 () V!2835)

(assert (=> d!10725 (= (get!1060 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38135)))

(declare-fun b!57914 () Bool)

(assert (=> b!57914 (= e!38135 (get!1061 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57915 () Bool)

(assert (=> b!57915 (= e!38135 (get!1062 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10725 c!7229) b!57914))

(assert (= (and d!10725 (not c!7229)) b!57915))

(assert (=> b!57914 m!48337))

(assert (=> b!57914 m!48339))

(declare-fun m!48981 () Bool)

(assert (=> b!57914 m!48981))

(assert (=> b!57915 m!48337))

(assert (=> b!57915 m!48339))

(declare-fun m!48983 () Bool)

(assert (=> b!57915 m!48983))

(assert (=> b!57492 d!10725))

(declare-fun d!10727 () Bool)

(assert (=> d!10727 (= (apply!65 lt!23070 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!23070) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2500 () Bool)

(assert (= bs!2500 d!10727))

(declare-fun m!48985 () Bool)

(assert (=> bs!2500 m!48985))

(assert (=> bs!2500 m!48985))

(declare-fun m!48987 () Bool)

(assert (=> bs!2500 m!48987))

(assert (=> b!57810 d!10727))

(declare-fun d!10729 () Bool)

(declare-fun e!38136 () Bool)

(assert (=> d!10729 e!38136))

(declare-fun res!32342 () Bool)

(assert (=> d!10729 (=> (not res!32342) (not e!38136))))

(declare-fun lt!23137 () ListLongMap!1361)

(assert (=> d!10729 (= res!32342 (contains!679 lt!23137 (_1!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun lt!23136 () List!1429)

(assert (=> d!10729 (= lt!23137 (ListLongMap!1362 lt!23136))))

(declare-fun lt!23135 () Unit!1491)

(declare-fun lt!23138 () Unit!1491)

(assert (=> d!10729 (= lt!23135 lt!23138)))

(assert (=> d!10729 (= (getValueByKey!123 lt!23136 (_1!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10729 (= lt!23138 (lemmaContainsTupThenGetReturnValue!40 lt!23136 (_1!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10729 (= lt!23136 (insertStrictlySorted!43 (toList!696 (ite c!7126 call!4175 (ite c!7125 call!4172 call!4176))) (_1!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!10729 (= (+!80 (ite c!7126 call!4175 (ite c!7125 call!4172 call!4176)) (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) lt!23137)))

(declare-fun b!57916 () Bool)

(declare-fun res!32343 () Bool)

(assert (=> b!57916 (=> (not res!32343) (not e!38136))))

(assert (=> b!57916 (= res!32343 (= (getValueByKey!123 (toList!696 lt!23137) (_1!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))))

(declare-fun b!57917 () Bool)

(assert (=> b!57917 (= e!38136 (contains!681 (toList!696 lt!23137) (ite (or c!7126 c!7125) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (= (and d!10729 res!32342) b!57916))

(assert (= (and b!57916 res!32343) b!57917))

(declare-fun m!48989 () Bool)

(assert (=> d!10729 m!48989))

(declare-fun m!48991 () Bool)

(assert (=> d!10729 m!48991))

(declare-fun m!48993 () Bool)

(assert (=> d!10729 m!48993))

(declare-fun m!48995 () Bool)

(assert (=> d!10729 m!48995))

(declare-fun m!48997 () Bool)

(assert (=> b!57916 m!48997))

(declare-fun m!48999 () Bool)

(assert (=> b!57917 m!48999))

(assert (=> bm!4172 d!10729))

(declare-fun b!57919 () Bool)

(declare-fun e!38137 () Option!129)

(declare-fun e!38138 () Option!129)

(assert (=> b!57919 (= e!38137 e!38138)))

(declare-fun c!7231 () Bool)

(assert (=> b!57919 (= c!7231 (and ((_ is Cons!1425) (toList!696 lt!22857)) (not (= (_1!1019 (h!2005 (toList!696 lt!22857))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!57918 () Bool)

(assert (=> b!57918 (= e!38137 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22857)))))))

(declare-fun b!57921 () Bool)

(assert (=> b!57921 (= e!38138 None!127)))

(declare-fun d!10731 () Bool)

(declare-fun c!7230 () Bool)

(assert (=> d!10731 (= c!7230 (and ((_ is Cons!1425) (toList!696 lt!22857)) (= (_1!1019 (h!2005 (toList!696 lt!22857))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10731 (= (getValueByKey!123 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38137)))

(declare-fun b!57920 () Bool)

(assert (=> b!57920 (= e!38138 (getValueByKey!123 (t!4747 (toList!696 lt!22857)) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10731 c!7230) b!57918))

(assert (= (and d!10731 (not c!7230)) b!57919))

(assert (= (and b!57919 c!7231) b!57920))

(assert (= (and b!57919 (not c!7231)) b!57921))

(declare-fun m!49001 () Bool)

(assert (=> b!57920 m!49001))

(assert (=> b!57560 d!10731))

(declare-fun d!10733 () Bool)

(assert (=> d!10733 (= (apply!65 (+!80 lt!22814 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) lt!22817) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22814 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))) lt!22817)))))

(declare-fun bs!2501 () Bool)

(assert (= bs!2501 d!10733))

(declare-fun m!49003 () Bool)

(assert (=> bs!2501 m!49003))

(assert (=> bs!2501 m!49003))

(declare-fun m!49005 () Bool)

(assert (=> bs!2501 m!49005))

(assert (=> b!57524 d!10733))

(declare-fun d!10735 () Bool)

(declare-fun e!38139 () Bool)

(assert (=> d!10735 e!38139))

(declare-fun res!32344 () Bool)

(assert (=> d!10735 (=> (not res!32344) (not e!38139))))

(declare-fun lt!23141 () ListLongMap!1361)

(assert (=> d!10735 (= res!32344 (contains!679 lt!23141 (_1!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))))))

(declare-fun lt!23140 () List!1429)

(assert (=> d!10735 (= lt!23141 (ListLongMap!1362 lt!23140))))

(declare-fun lt!23139 () Unit!1491)

(declare-fun lt!23142 () Unit!1491)

(assert (=> d!10735 (= lt!23139 lt!23142)))

(assert (=> d!10735 (= (getValueByKey!123 lt!23140 (_1!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))))))

(assert (=> d!10735 (= lt!23142 (lemmaContainsTupThenGetReturnValue!40 lt!23140 (_1!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))))))

(assert (=> d!10735 (= lt!23140 (insertStrictlySorted!43 (toList!696 lt!22826) (_1!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))))))

(assert (=> d!10735 (= (+!80 lt!22826 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) lt!23141)))

(declare-fun b!57922 () Bool)

(declare-fun res!32345 () Bool)

(assert (=> b!57922 (=> (not res!32345) (not e!38139))))

(assert (=> b!57922 (= res!32345 (= (getValueByKey!123 (toList!696 lt!23141) (_1!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))))))))

(declare-fun b!57923 () Bool)

(assert (=> b!57923 (= e!38139 (contains!681 (toList!696 lt!23141) (tuple2!2017 lt!22806 (minValue!1940 newMap!16))))))

(assert (= (and d!10735 res!32344) b!57922))

(assert (= (and b!57922 res!32345) b!57923))

(declare-fun m!49007 () Bool)

(assert (=> d!10735 m!49007))

(declare-fun m!49009 () Bool)

(assert (=> d!10735 m!49009))

(declare-fun m!49011 () Bool)

(assert (=> d!10735 m!49011))

(declare-fun m!49013 () Bool)

(assert (=> d!10735 m!49013))

(declare-fun m!49015 () Bool)

(assert (=> b!57922 m!49015))

(declare-fun m!49017 () Bool)

(assert (=> b!57923 m!49017))

(assert (=> b!57524 d!10735))

(declare-fun d!10737 () Bool)

(declare-fun e!38140 () Bool)

(assert (=> d!10737 e!38140))

(declare-fun res!32346 () Bool)

(assert (=> d!10737 (=> res!32346 e!38140)))

(declare-fun lt!23144 () Bool)

(assert (=> d!10737 (= res!32346 (not lt!23144))))

(declare-fun lt!23146 () Bool)

(assert (=> d!10737 (= lt!23144 lt!23146)))

(declare-fun lt!23145 () Unit!1491)

(declare-fun e!38141 () Unit!1491)

(assert (=> d!10737 (= lt!23145 e!38141)))

(declare-fun c!7232 () Bool)

(assert (=> d!10737 (= c!7232 lt!23146)))

(assert (=> d!10737 (= lt!23146 (containsKey!127 (toList!696 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) lt!22823))))

(assert (=> d!10737 (= (contains!679 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) lt!22823) lt!23144)))

(declare-fun b!57924 () Bool)

(declare-fun lt!23143 () Unit!1491)

(assert (=> b!57924 (= e!38141 lt!23143)))

(assert (=> b!57924 (= lt!23143 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) lt!22823))))

(assert (=> b!57924 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) lt!22823))))

(declare-fun b!57925 () Bool)

(declare-fun Unit!1515 () Unit!1491)

(assert (=> b!57925 (= e!38141 Unit!1515)))

(declare-fun b!57926 () Bool)

(assert (=> b!57926 (= e!38140 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) lt!22823)))))

(assert (= (and d!10737 c!7232) b!57924))

(assert (= (and d!10737 (not c!7232)) b!57925))

(assert (= (and d!10737 (not res!32346)) b!57926))

(declare-fun m!49019 () Bool)

(assert (=> d!10737 m!49019))

(declare-fun m!49021 () Bool)

(assert (=> b!57924 m!49021))

(declare-fun m!49023 () Bool)

(assert (=> b!57924 m!49023))

(assert (=> b!57924 m!49023))

(declare-fun m!49025 () Bool)

(assert (=> b!57924 m!49025))

(assert (=> b!57926 m!49023))

(assert (=> b!57926 m!49023))

(assert (=> b!57926 m!49025))

(assert (=> b!57524 d!10737))

(declare-fun d!10739 () Bool)

(assert (=> d!10739 (= (apply!65 (+!80 lt!22816 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) lt!22805) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22816 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))) lt!22805)))))

(declare-fun bs!2502 () Bool)

(assert (= bs!2502 d!10739))

(declare-fun m!49027 () Bool)

(assert (=> bs!2502 m!49027))

(assert (=> bs!2502 m!49027))

(declare-fun m!49029 () Bool)

(assert (=> bs!2502 m!49029))

(assert (=> b!57524 d!10739))

(declare-fun d!10741 () Bool)

(declare-fun e!38142 () Bool)

(assert (=> d!10741 e!38142))

(declare-fun res!32347 () Bool)

(assert (=> d!10741 (=> (not res!32347) (not e!38142))))

(declare-fun lt!23149 () ListLongMap!1361)

(assert (=> d!10741 (= res!32347 (contains!679 lt!23149 (_1!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23148 () List!1429)

(assert (=> d!10741 (= lt!23149 (ListLongMap!1362 lt!23148))))

(declare-fun lt!23147 () Unit!1491)

(declare-fun lt!23150 () Unit!1491)

(assert (=> d!10741 (= lt!23147 lt!23150)))

(assert (=> d!10741 (= (getValueByKey!123 lt!23148 (_1!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10741 (= lt!23150 (lemmaContainsTupThenGetReturnValue!40 lt!23148 (_1!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10741 (= lt!23148 (insertStrictlySorted!43 (toList!696 lt!22816) (_1!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10741 (= (+!80 lt!22816 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) lt!23149)))

(declare-fun b!57927 () Bool)

(declare-fun res!32348 () Bool)

(assert (=> b!57927 (=> (not res!32348) (not e!38142))))

(assert (=> b!57927 (= res!32348 (= (getValueByKey!123 (toList!696 lt!23149) (_1!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))))))))

(declare-fun b!57928 () Bool)

(assert (=> b!57928 (= e!38142 (contains!681 (toList!696 lt!23149) (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10741 res!32347) b!57927))

(assert (= (and b!57927 res!32348) b!57928))

(declare-fun m!49031 () Bool)

(assert (=> d!10741 m!49031))

(declare-fun m!49033 () Bool)

(assert (=> d!10741 m!49033))

(declare-fun m!49035 () Bool)

(assert (=> d!10741 m!49035))

(declare-fun m!49037 () Bool)

(assert (=> d!10741 m!49037))

(declare-fun m!49039 () Bool)

(assert (=> b!57927 m!49039))

(declare-fun m!49041 () Bool)

(assert (=> b!57928 m!49041))

(assert (=> b!57524 d!10741))

(declare-fun d!10743 () Bool)

(assert (=> d!10743 (= (apply!65 lt!22814 lt!22817) (get!1063 (getValueByKey!123 (toList!696 lt!22814) lt!22817)))))

(declare-fun bs!2503 () Bool)

(assert (= bs!2503 d!10743))

(declare-fun m!49043 () Bool)

(assert (=> bs!2503 m!49043))

(assert (=> bs!2503 m!49043))

(declare-fun m!49045 () Bool)

(assert (=> bs!2503 m!49045))

(assert (=> b!57524 d!10743))

(declare-fun d!10745 () Bool)

(assert (=> d!10745 (= (apply!65 (+!80 lt!22816 (tuple2!2017 lt!22819 (zeroValue!1940 newMap!16))) lt!22805) (apply!65 lt!22816 lt!22805))))

(declare-fun lt!23151 () Unit!1491)

(assert (=> d!10745 (= lt!23151 (choose!290 lt!22816 lt!22819 (zeroValue!1940 newMap!16) lt!22805))))

(declare-fun e!38143 () Bool)

(assert (=> d!10745 e!38143))

(declare-fun res!32349 () Bool)

(assert (=> d!10745 (=> (not res!32349) (not e!38143))))

(assert (=> d!10745 (= res!32349 (contains!679 lt!22816 lt!22805))))

(assert (=> d!10745 (= (addApplyDifferent!41 lt!22816 lt!22819 (zeroValue!1940 newMap!16) lt!22805) lt!23151)))

(declare-fun b!57929 () Bool)

(assert (=> b!57929 (= e!38143 (not (= lt!22805 lt!22819)))))

(assert (= (and d!10745 res!32349) b!57929))

(declare-fun m!49047 () Bool)

(assert (=> d!10745 m!49047))

(assert (=> d!10745 m!48369))

(declare-fun m!49049 () Bool)

(assert (=> d!10745 m!49049))

(assert (=> d!10745 m!48363))

(assert (=> d!10745 m!48369))

(assert (=> d!10745 m!48389))

(assert (=> b!57524 d!10745))

(declare-fun d!10747 () Bool)

(assert (=> d!10747 (= (apply!65 lt!22826 lt!22813) (get!1063 (getValueByKey!123 (toList!696 lt!22826) lt!22813)))))

(declare-fun bs!2504 () Bool)

(assert (= bs!2504 d!10747))

(declare-fun m!49051 () Bool)

(assert (=> bs!2504 m!49051))

(assert (=> bs!2504 m!49051))

(declare-fun m!49053 () Bool)

(assert (=> bs!2504 m!49053))

(assert (=> b!57524 d!10747))

(declare-fun b!57930 () Bool)

(declare-fun e!38147 () ListLongMap!1361)

(declare-fun call!4231 () ListLongMap!1361)

(assert (=> b!57930 (= e!38147 call!4231)))

(declare-fun b!57932 () Bool)

(assert (=> b!57932 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> b!57932 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (_values!2005 newMap!16))))))

(declare-fun e!38149 () Bool)

(declare-fun lt!23155 () ListLongMap!1361)

(assert (=> b!57932 (= e!38149 (= (apply!65 lt!23155 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57933 () Bool)

(declare-fun e!38150 () Bool)

(assert (=> b!57933 (= e!38150 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57933 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!57934 () Bool)

(declare-fun e!38145 () Bool)

(declare-fun e!38146 () Bool)

(assert (=> b!57934 (= e!38145 e!38146)))

(declare-fun c!7234 () Bool)

(assert (=> b!57934 (= c!7234 e!38150)))

(declare-fun res!32353 () Bool)

(assert (=> b!57934 (=> (not res!32353) (not e!38150))))

(assert (=> b!57934 (= res!32353 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!57935 () Bool)

(declare-fun e!38148 () ListLongMap!1361)

(assert (=> b!57935 (= e!38148 e!38147)))

(declare-fun c!7233 () Bool)

(assert (=> b!57935 (= c!7233 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57936 () Bool)

(declare-fun e!38144 () Bool)

(assert (=> b!57936 (= e!38146 e!38144)))

(declare-fun c!7236 () Bool)

(assert (=> b!57936 (= c!7236 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun d!10749 () Bool)

(assert (=> d!10749 e!38145))

(declare-fun res!32352 () Bool)

(assert (=> d!10749 (=> (not res!32352) (not e!38145))))

(assert (=> d!10749 (= res!32352 (not (contains!679 lt!23155 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10749 (= lt!23155 e!38148)))

(declare-fun c!7235 () Bool)

(assert (=> d!10749 (= c!7235 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10749 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10749 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23155)))

(declare-fun b!57931 () Bool)

(assert (=> b!57931 (= e!38146 e!38149)))

(assert (=> b!57931 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32351 () Bool)

(assert (=> b!57931 (= res!32351 (contains!679 lt!23155 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57931 (=> (not res!32351) (not e!38149))))

(declare-fun b!57937 () Bool)

(assert (=> b!57937 (= e!38148 (ListLongMap!1362 Nil!1426))))

(declare-fun b!57938 () Bool)

(assert (=> b!57938 (= e!38144 (= lt!23155 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!57939 () Bool)

(assert (=> b!57939 (= e!38144 (isEmpty!290 lt!23155))))

(declare-fun bm!4228 () Bool)

(assert (=> bm!4228 (= call!4231 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!57940 () Bool)

(declare-fun res!32350 () Bool)

(assert (=> b!57940 (=> (not res!32350) (not e!38145))))

(assert (=> b!57940 (= res!32350 (not (contains!679 lt!23155 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57941 () Bool)

(declare-fun lt!23156 () Unit!1491)

(declare-fun lt!23158 () Unit!1491)

(assert (=> b!57941 (= lt!23156 lt!23158)))

(declare-fun lt!23157 () (_ BitVec 64))

(declare-fun lt!23153 () V!2835)

(declare-fun lt!23154 () ListLongMap!1361)

(declare-fun lt!23152 () (_ BitVec 64))

(assert (=> b!57941 (not (contains!679 (+!80 lt!23154 (tuple2!2017 lt!23157 lt!23153)) lt!23152))))

(assert (=> b!57941 (= lt!23158 (addStillNotContains!14 lt!23154 lt!23157 lt!23153 lt!23152))))

(assert (=> b!57941 (= lt!23152 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57941 (= lt!23153 (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57941 (= lt!23157 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57941 (= lt!23154 call!4231)))

(assert (=> b!57941 (= e!38147 (+!80 call!4231 (tuple2!2017 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10749 c!7235) b!57937))

(assert (= (and d!10749 (not c!7235)) b!57935))

(assert (= (and b!57935 c!7233) b!57941))

(assert (= (and b!57935 (not c!7233)) b!57930))

(assert (= (or b!57941 b!57930) bm!4228))

(assert (= (and d!10749 res!32352) b!57940))

(assert (= (and b!57940 res!32350) b!57934))

(assert (= (and b!57934 res!32353) b!57933))

(assert (= (and b!57934 c!7234) b!57931))

(assert (= (and b!57934 (not c!7234)) b!57936))

(assert (= (and b!57931 res!32351) b!57932))

(assert (= (and b!57936 c!7236) b!57938))

(assert (= (and b!57936 (not c!7236)) b!57939))

(declare-fun b_lambda!2523 () Bool)

(assert (=> (not b_lambda!2523) (not b!57932)))

(assert (=> b!57932 t!4753))

(declare-fun b_and!3487 () Bool)

(assert (= b_and!3483 (and (=> t!4753 result!2353) b_and!3487)))

(assert (=> b!57932 t!4755))

(declare-fun b_and!3489 () Bool)

(assert (= b_and!3485 (and (=> t!4755 result!2355) b_and!3489)))

(declare-fun b_lambda!2525 () Bool)

(assert (=> (not b_lambda!2525) (not b!57941)))

(assert (=> b!57941 t!4753))

(declare-fun b_and!3491 () Bool)

(assert (= b_and!3487 (and (=> t!4753 result!2353) b_and!3491)))

(assert (=> b!57941 t!4755))

(declare-fun b_and!3493 () Bool)

(assert (= b_and!3489 (and (=> t!4755 result!2355) b_and!3493)))

(declare-fun m!49055 () Bool)

(assert (=> b!57940 m!49055))

(declare-fun m!49057 () Bool)

(assert (=> d!10749 m!49057))

(assert (=> d!10749 m!48289))

(assert (=> b!57933 m!48295))

(assert (=> b!57933 m!48295))

(assert (=> b!57933 m!48297))

(declare-fun m!49059 () Bool)

(assert (=> b!57938 m!49059))

(assert (=> b!57931 m!48295))

(assert (=> b!57931 m!48295))

(declare-fun m!49061 () Bool)

(assert (=> b!57931 m!49061))

(assert (=> bm!4228 m!49059))

(declare-fun m!49063 () Bool)

(assert (=> b!57939 m!49063))

(declare-fun m!49065 () Bool)

(assert (=> b!57941 m!49065))

(declare-fun m!49067 () Bool)

(assert (=> b!57941 m!49067))

(assert (=> b!57941 m!48393))

(assert (=> b!57941 m!48339))

(assert (=> b!57941 m!48395))

(assert (=> b!57941 m!49065))

(declare-fun m!49069 () Bool)

(assert (=> b!57941 m!49069))

(assert (=> b!57941 m!48393))

(assert (=> b!57941 m!48339))

(assert (=> b!57941 m!48295))

(declare-fun m!49071 () Bool)

(assert (=> b!57941 m!49071))

(assert (=> b!57932 m!48295))

(assert (=> b!57932 m!48393))

(assert (=> b!57932 m!48339))

(assert (=> b!57932 m!48395))

(assert (=> b!57932 m!48393))

(assert (=> b!57932 m!48339))

(assert (=> b!57932 m!48295))

(declare-fun m!49073 () Bool)

(assert (=> b!57932 m!49073))

(assert (=> b!57935 m!48295))

(assert (=> b!57935 m!48295))

(assert (=> b!57935 m!48297))

(assert (=> b!57524 d!10749))

(declare-fun d!10751 () Bool)

(assert (=> d!10751 (= (apply!65 (+!80 lt!22814 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) lt!22817) (apply!65 lt!22814 lt!22817))))

(declare-fun lt!23159 () Unit!1491)

(assert (=> d!10751 (= lt!23159 (choose!290 lt!22814 lt!22807 (minValue!1940 newMap!16) lt!22817))))

(declare-fun e!38151 () Bool)

(assert (=> d!10751 e!38151))

(declare-fun res!32354 () Bool)

(assert (=> d!10751 (=> (not res!32354) (not e!38151))))

(assert (=> d!10751 (= res!32354 (contains!679 lt!22814 lt!22817))))

(assert (=> d!10751 (= (addApplyDifferent!41 lt!22814 lt!22807 (minValue!1940 newMap!16) lt!22817) lt!23159)))

(declare-fun b!57942 () Bool)

(assert (=> b!57942 (= e!38151 (not (= lt!22817 lt!22807)))))

(assert (= (and d!10751 res!32354) b!57942))

(declare-fun m!49075 () Bool)

(assert (=> d!10751 m!49075))

(assert (=> d!10751 m!48381))

(declare-fun m!49077 () Bool)

(assert (=> d!10751 m!49077))

(assert (=> d!10751 m!48391))

(assert (=> d!10751 m!48381))

(assert (=> d!10751 m!48383))

(assert (=> b!57524 d!10751))

(declare-fun d!10753 () Bool)

(assert (=> d!10753 (= (apply!65 lt!22816 lt!22805) (get!1063 (getValueByKey!123 (toList!696 lt!22816) lt!22805)))))

(declare-fun bs!2505 () Bool)

(assert (= bs!2505 d!10753))

(declare-fun m!49079 () Bool)

(assert (=> bs!2505 m!49079))

(assert (=> bs!2505 m!49079))

(declare-fun m!49081 () Bool)

(assert (=> bs!2505 m!49081))

(assert (=> b!57524 d!10753))

(declare-fun d!10755 () Bool)

(declare-fun e!38152 () Bool)

(assert (=> d!10755 e!38152))

(declare-fun res!32355 () Bool)

(assert (=> d!10755 (=> (not res!32355) (not e!38152))))

(declare-fun lt!23162 () ListLongMap!1361)

(assert (=> d!10755 (= res!32355 (contains!679 lt!23162 (_1!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))))))

(declare-fun lt!23161 () List!1429)

(assert (=> d!10755 (= lt!23162 (ListLongMap!1362 lt!23161))))

(declare-fun lt!23160 () Unit!1491)

(declare-fun lt!23163 () Unit!1491)

(assert (=> d!10755 (= lt!23160 lt!23163)))

(assert (=> d!10755 (= (getValueByKey!123 lt!23161 (_1!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))))))

(assert (=> d!10755 (= lt!23163 (lemmaContainsTupThenGetReturnValue!40 lt!23161 (_1!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))))))

(assert (=> d!10755 (= lt!23161 (insertStrictlySorted!43 (toList!696 lt!22814) (_1!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))))))

(assert (=> d!10755 (= (+!80 lt!22814 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))) lt!23162)))

(declare-fun b!57943 () Bool)

(declare-fun res!32356 () Bool)

(assert (=> b!57943 (=> (not res!32356) (not e!38152))))

(assert (=> b!57943 (= res!32356 (= (getValueByKey!123 (toList!696 lt!23162) (_1!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22807 (minValue!1940 newMap!16))))))))

(declare-fun b!57944 () Bool)

(assert (=> b!57944 (= e!38152 (contains!681 (toList!696 lt!23162) (tuple2!2017 lt!22807 (minValue!1940 newMap!16))))))

(assert (= (and d!10755 res!32355) b!57943))

(assert (= (and b!57943 res!32356) b!57944))

(declare-fun m!49083 () Bool)

(assert (=> d!10755 m!49083))

(declare-fun m!49085 () Bool)

(assert (=> d!10755 m!49085))

(declare-fun m!49087 () Bool)

(assert (=> d!10755 m!49087))

(declare-fun m!49089 () Bool)

(assert (=> d!10755 m!49089))

(declare-fun m!49091 () Bool)

(assert (=> b!57943 m!49091))

(declare-fun m!49093 () Bool)

(assert (=> b!57944 m!49093))

(assert (=> b!57524 d!10755))

(declare-fun d!10757 () Bool)

(assert (=> d!10757 (contains!679 (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) lt!22823)))

(declare-fun lt!23164 () Unit!1491)

(assert (=> d!10757 (= lt!23164 (choose!291 lt!22815 lt!22812 (zeroValue!1940 newMap!16) lt!22823))))

(assert (=> d!10757 (contains!679 lt!22815 lt!22823)))

(assert (=> d!10757 (= (addStillContains!41 lt!22815 lt!22812 (zeroValue!1940 newMap!16) lt!22823) lt!23164)))

(declare-fun bs!2506 () Bool)

(assert (= bs!2506 d!10757))

(assert (=> bs!2506 m!48373))

(assert (=> bs!2506 m!48373))

(assert (=> bs!2506 m!48375))

(declare-fun m!49095 () Bool)

(assert (=> bs!2506 m!49095))

(declare-fun m!49097 () Bool)

(assert (=> bs!2506 m!49097))

(assert (=> b!57524 d!10757))

(declare-fun d!10759 () Bool)

(assert (=> d!10759 (= (apply!65 (+!80 lt!22826 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) lt!22813) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22826 (tuple2!2017 lt!22806 (minValue!1940 newMap!16)))) lt!22813)))))

(declare-fun bs!2507 () Bool)

(assert (= bs!2507 d!10759))

(declare-fun m!49099 () Bool)

(assert (=> bs!2507 m!49099))

(assert (=> bs!2507 m!49099))

(declare-fun m!49101 () Bool)

(assert (=> bs!2507 m!49101))

(assert (=> b!57524 d!10759))

(declare-fun d!10761 () Bool)

(declare-fun e!38153 () Bool)

(assert (=> d!10761 e!38153))

(declare-fun res!32357 () Bool)

(assert (=> d!10761 (=> (not res!32357) (not e!38153))))

(declare-fun lt!23167 () ListLongMap!1361)

(assert (=> d!10761 (= res!32357 (contains!679 lt!23167 (_1!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23166 () List!1429)

(assert (=> d!10761 (= lt!23167 (ListLongMap!1362 lt!23166))))

(declare-fun lt!23165 () Unit!1491)

(declare-fun lt!23168 () Unit!1491)

(assert (=> d!10761 (= lt!23165 lt!23168)))

(assert (=> d!10761 (= (getValueByKey!123 lt!23166 (_1!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10761 (= lt!23168 (lemmaContainsTupThenGetReturnValue!40 lt!23166 (_1!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10761 (= lt!23166 (insertStrictlySorted!43 (toList!696 lt!22815) (_1!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10761 (= (+!80 lt!22815 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))) lt!23167)))

(declare-fun b!57945 () Bool)

(declare-fun res!32358 () Bool)

(assert (=> b!57945 (=> (not res!32358) (not e!38153))))

(assert (=> b!57945 (= res!32358 (= (getValueByKey!123 (toList!696 lt!23167) (_1!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))))))))

(declare-fun b!57946 () Bool)

(assert (=> b!57946 (= e!38153 (contains!681 (toList!696 lt!23167) (tuple2!2017 lt!22812 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10761 res!32357) b!57945))

(assert (= (and b!57945 res!32358) b!57946))

(declare-fun m!49103 () Bool)

(assert (=> d!10761 m!49103))

(declare-fun m!49105 () Bool)

(assert (=> d!10761 m!49105))

(declare-fun m!49107 () Bool)

(assert (=> d!10761 m!49107))

(declare-fun m!49109 () Bool)

(assert (=> d!10761 m!49109))

(declare-fun m!49111 () Bool)

(assert (=> b!57945 m!49111))

(declare-fun m!49113 () Bool)

(assert (=> b!57946 m!49113))

(assert (=> b!57524 d!10761))

(declare-fun d!10763 () Bool)

(assert (=> d!10763 (= (apply!65 (+!80 lt!22826 (tuple2!2017 lt!22806 (minValue!1940 newMap!16))) lt!22813) (apply!65 lt!22826 lt!22813))))

(declare-fun lt!23169 () Unit!1491)

(assert (=> d!10763 (= lt!23169 (choose!290 lt!22826 lt!22806 (minValue!1940 newMap!16) lt!22813))))

(declare-fun e!38154 () Bool)

(assert (=> d!10763 e!38154))

(declare-fun res!32359 () Bool)

(assert (=> d!10763 (=> (not res!32359) (not e!38154))))

(assert (=> d!10763 (= res!32359 (contains!679 lt!22826 lt!22813))))

(assert (=> d!10763 (= (addApplyDifferent!41 lt!22826 lt!22806 (minValue!1940 newMap!16) lt!22813) lt!23169)))

(declare-fun b!57947 () Bool)

(assert (=> b!57947 (= e!38154 (not (= lt!22813 lt!22806)))))

(assert (= (and d!10763 res!32359) b!57947))

(declare-fun m!49115 () Bool)

(assert (=> d!10763 m!49115))

(assert (=> d!10763 m!48377))

(declare-fun m!49117 () Bool)

(assert (=> d!10763 m!49117))

(assert (=> d!10763 m!48371))

(assert (=> d!10763 m!48377))

(assert (=> d!10763 m!48379))

(assert (=> b!57524 d!10763))

(declare-fun b!57948 () Bool)

(declare-fun e!38155 () Bool)

(declare-fun e!38156 () Bool)

(assert (=> b!57948 (= e!38155 e!38156)))

(declare-fun lt!23172 () (_ BitVec 64))

(assert (=> b!57948 (= lt!23172 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!23170 () Unit!1491)

(assert (=> b!57948 (= lt!23170 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) lt!23172 #b00000000000000000000000000000000))))

(assert (=> b!57948 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) lt!23172 #b00000000000000000000000000000000)))

(declare-fun lt!23171 () Unit!1491)

(assert (=> b!57948 (= lt!23171 lt!23170)))

(declare-fun res!32360 () Bool)

(assert (=> b!57948 (= res!32360 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000) (_keys!3642 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992)))) (Found!226 #b00000000000000000000000000000000)))))

(assert (=> b!57948 (=> (not res!32360) (not e!38156))))

(declare-fun b!57950 () Bool)

(declare-fun call!4232 () Bool)

(assert (=> b!57950 (= e!38156 call!4232)))

(declare-fun bm!4229 () Bool)

(assert (=> bm!4229 (= call!4232 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!57951 () Bool)

(declare-fun e!38157 () Bool)

(assert (=> b!57951 (= e!38157 e!38155)))

(declare-fun c!7237 () Bool)

(assert (=> b!57951 (= c!7237 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!10765 () Bool)

(declare-fun res!32361 () Bool)

(assert (=> d!10765 (=> res!32361 e!38157)))

(assert (=> d!10765 (= res!32361 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10765 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992)))) e!38157)))

(declare-fun b!57949 () Bool)

(assert (=> b!57949 (= e!38155 call!4232)))

(assert (= (and d!10765 (not res!32361)) b!57951))

(assert (= (and b!57951 c!7237) b!57948))

(assert (= (and b!57951 (not c!7237)) b!57949))

(assert (= (and b!57948 res!32360) b!57950))

(assert (= (or b!57950 b!57949) bm!4229))

(declare-fun m!49119 () Bool)

(assert (=> b!57948 m!49119))

(declare-fun m!49121 () Bool)

(assert (=> b!57948 m!49121))

(declare-fun m!49123 () Bool)

(assert (=> b!57948 m!49123))

(assert (=> b!57948 m!49119))

(declare-fun m!49125 () Bool)

(assert (=> b!57948 m!49125))

(declare-fun m!49127 () Bool)

(assert (=> bm!4229 m!49127))

(assert (=> b!57951 m!49119))

(assert (=> b!57951 m!49119))

(declare-fun m!49129 () Bool)

(assert (=> b!57951 m!49129))

(assert (=> b!57558 d!10765))

(assert (=> b!57609 d!10581))

(declare-fun d!10767 () Bool)

(assert (=> d!10767 (= (validMask!0 (mask!5896 newMap!16)) (and (or (= (mask!5896 newMap!16) #b00000000000000000000000000000111) (= (mask!5896 newMap!16) #b00000000000000000000000000001111) (= (mask!5896 newMap!16) #b00000000000000000000000000011111) (= (mask!5896 newMap!16) #b00000000000000000000000000111111) (= (mask!5896 newMap!16) #b00000000000000000000000001111111) (= (mask!5896 newMap!16) #b00000000000000000000000011111111) (= (mask!5896 newMap!16) #b00000000000000000000000111111111) (= (mask!5896 newMap!16) #b00000000000000000000001111111111) (= (mask!5896 newMap!16) #b00000000000000000000011111111111) (= (mask!5896 newMap!16) #b00000000000000000000111111111111) (= (mask!5896 newMap!16) #b00000000000000000001111111111111) (= (mask!5896 newMap!16) #b00000000000000000011111111111111) (= (mask!5896 newMap!16) #b00000000000000000111111111111111) (= (mask!5896 newMap!16) #b00000000000000001111111111111111) (= (mask!5896 newMap!16) #b00000000000000011111111111111111) (= (mask!5896 newMap!16) #b00000000000000111111111111111111) (= (mask!5896 newMap!16) #b00000000000001111111111111111111) (= (mask!5896 newMap!16) #b00000000000011111111111111111111) (= (mask!5896 newMap!16) #b00000000000111111111111111111111) (= (mask!5896 newMap!16) #b00000000001111111111111111111111) (= (mask!5896 newMap!16) #b00000000011111111111111111111111) (= (mask!5896 newMap!16) #b00000000111111111111111111111111) (= (mask!5896 newMap!16) #b00000001111111111111111111111111) (= (mask!5896 newMap!16) #b00000011111111111111111111111111) (= (mask!5896 newMap!16) #b00000111111111111111111111111111) (= (mask!5896 newMap!16) #b00001111111111111111111111111111) (= (mask!5896 newMap!16) #b00011111111111111111111111111111) (= (mask!5896 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5896 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!10571 d!10767))

(declare-fun d!10769 () Bool)

(declare-fun res!32362 () Bool)

(declare-fun e!38158 () Bool)

(assert (=> d!10769 (=> res!32362 e!38158)))

(assert (=> d!10769 (= res!32362 (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!10769 (= (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!38158)))

(declare-fun b!57952 () Bool)

(declare-fun e!38159 () Bool)

(assert (=> b!57952 (= e!38158 e!38159)))

(declare-fun res!32363 () Bool)

(assert (=> b!57952 (=> (not res!32363) (not e!38159))))

(assert (=> b!57952 (= res!32363 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!57953 () Bool)

(assert (=> b!57953 (= e!38159 (arrayContainsKey!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10769 (not res!32362)) b!57952))

(assert (= (and b!57952 res!32363) b!57953))

(declare-fun m!49131 () Bool)

(assert (=> d!10769 m!49131))

(assert (=> b!57953 m!48037))

(declare-fun m!49133 () Bool)

(assert (=> b!57953 m!49133))

(assert (=> b!57791 d!10769))

(declare-fun d!10771 () Bool)

(assert (=> d!10771 (= (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57740 d!10771))

(declare-fun b!57955 () Bool)

(declare-fun e!38160 () Option!129)

(declare-fun e!38161 () Option!129)

(assert (=> b!57955 (= e!38160 e!38161)))

(declare-fun c!7239 () Bool)

(assert (=> b!57955 (= c!7239 (and ((_ is Cons!1425) (toList!696 lt!22902)) (not (= (_1!1019 (h!2005 (toList!696 lt!22902))) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!57954 () Bool)

(assert (=> b!57954 (= e!38160 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22902)))))))

(declare-fun b!57957 () Bool)

(assert (=> b!57957 (= e!38161 None!127)))

(declare-fun c!7238 () Bool)

(declare-fun d!10773 () Bool)

(assert (=> d!10773 (= c!7238 (and ((_ is Cons!1425) (toList!696 lt!22902)) (= (_1!1019 (h!2005 (toList!696 lt!22902))) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10773 (= (getValueByKey!123 (toList!696 lt!22902) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38160)))

(declare-fun b!57956 () Bool)

(assert (=> b!57956 (= e!38161 (getValueByKey!123 (t!4747 (toList!696 lt!22902)) (_1!1019 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10773 c!7238) b!57954))

(assert (= (and d!10773 (not c!7238)) b!57955))

(assert (= (and b!57955 c!7239) b!57956))

(assert (= (and b!57955 (not c!7239)) b!57957))

(declare-fun m!49135 () Bool)

(assert (=> b!57956 m!49135))

(assert (=> b!57619 d!10773))

(declare-fun d!10775 () Bool)

(assert (=> d!10775 (= (size!2008 newMap!16) (bvadd (_size!355 newMap!16) (bvsdiv (bvadd (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!57486 d!10775))

(assert (=> d!10689 d!10767))

(assert (=> b!57800 d!10771))

(declare-fun d!10777 () Bool)

(assert (=> d!10777 (= (get!1063 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2372 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10567 d!10777))

(declare-fun b!57959 () Bool)

(declare-fun e!38162 () Option!129)

(declare-fun e!38163 () Option!129)

(assert (=> b!57959 (= e!38162 e!38163)))

(declare-fun c!7241 () Bool)

(assert (=> b!57959 (= c!7241 (and ((_ is Cons!1425) (toList!696 lt!22664)) (not (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57958 () Bool)

(assert (=> b!57958 (= e!38162 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22664)))))))

(declare-fun b!57961 () Bool)

(assert (=> b!57961 (= e!38163 None!127)))

(declare-fun d!10779 () Bool)

(declare-fun c!7240 () Bool)

(assert (=> d!10779 (= c!7240 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10779 (= (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000) e!38162)))

(declare-fun b!57960 () Bool)

(assert (=> b!57960 (= e!38163 (getValueByKey!123 (t!4747 (toList!696 lt!22664)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10779 c!7240) b!57958))

(assert (= (and d!10779 (not c!7240)) b!57959))

(assert (= (and b!57959 c!7241) b!57960))

(assert (= (and b!57959 (not c!7241)) b!57961))

(declare-fun m!49137 () Bool)

(assert (=> b!57960 m!49137))

(assert (=> d!10567 d!10779))

(declare-fun b!57962 () Bool)

(declare-fun e!38165 () Bool)

(declare-fun e!38167 () Bool)

(assert (=> b!57962 (= e!38165 e!38167)))

(declare-fun c!7242 () Bool)

(assert (=> b!57962 (= c!7242 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!4230 () Bool)

(declare-fun call!4233 () Bool)

(assert (=> bm!4230 (= call!4233 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7242 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7182 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425))) (ite c!7182 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)))))))

(declare-fun b!57963 () Bool)

(assert (=> b!57963 (= e!38167 call!4233)))

(declare-fun b!57964 () Bool)

(declare-fun e!38164 () Bool)

(assert (=> b!57964 (= e!38164 e!38165)))

(declare-fun res!32365 () Bool)

(assert (=> b!57964 (=> (not res!32365) (not e!38165))))

(declare-fun e!38166 () Bool)

(assert (=> b!57964 (= res!32365 (not e!38166))))

(declare-fun res!32366 () Bool)

(assert (=> b!57964 (=> (not res!32366) (not e!38166))))

(assert (=> b!57964 (= res!32366 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!57965 () Bool)

(assert (=> b!57965 (= e!38166 (contains!680 (ite c!7182 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!10781 () Bool)

(declare-fun res!32364 () Bool)

(assert (=> d!10781 (=> res!32364 e!38164)))

(assert (=> d!10781 (= res!32364 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10781 (= (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7182 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425))) e!38164)))

(declare-fun b!57966 () Bool)

(assert (=> b!57966 (= e!38167 call!4233)))

(assert (= (and d!10781 (not res!32364)) b!57964))

(assert (= (and b!57964 res!32366) b!57965))

(assert (= (and b!57964 res!32365) b!57962))

(assert (= (and b!57962 c!7242) b!57966))

(assert (= (and b!57962 (not c!7242)) b!57963))

(assert (= (or b!57966 b!57963) bm!4230))

(declare-fun m!49139 () Bool)

(assert (=> b!57962 m!49139))

(assert (=> b!57962 m!49139))

(declare-fun m!49141 () Bool)

(assert (=> b!57962 m!49141))

(assert (=> bm!4230 m!49139))

(declare-fun m!49143 () Bool)

(assert (=> bm!4230 m!49143))

(assert (=> b!57964 m!49139))

(assert (=> b!57964 m!49139))

(assert (=> b!57964 m!49141))

(assert (=> b!57965 m!49139))

(assert (=> b!57965 m!49139))

(declare-fun m!49145 () Bool)

(assert (=> b!57965 m!49145))

(assert (=> bm!4202 d!10781))

(declare-fun b!57979 () Bool)

(declare-fun c!7249 () Bool)

(declare-fun lt!23178 () (_ BitVec 64))

(assert (=> b!57979 (= c!7249 (= lt!23178 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38176 () SeekEntryResult!226)

(declare-fun e!38174 () SeekEntryResult!226)

(assert (=> b!57979 (= e!38176 e!38174)))

(declare-fun b!57980 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!57980 (= e!38174 (seekKeyOrZeroReturnVacant!0 (bvadd (x!9858 lt!23059) #b00000000000000000000000000000001) (nextIndex!0 (index!3028 lt!23059) (x!9858 lt!23059) (mask!5896 newMap!16)) (index!3028 lt!23059) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!23177 () SeekEntryResult!226)

(declare-fun d!10783 () Bool)

(assert (=> d!10783 (and (or ((_ is Undefined!226) lt!23177) (not ((_ is Found!226) lt!23177)) (and (bvsge (index!3027 lt!23177) #b00000000000000000000000000000000) (bvslt (index!3027 lt!23177) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23177) ((_ is Found!226) lt!23177) (not ((_ is MissingVacant!226) lt!23177)) (not (= (index!3029 lt!23177) (index!3028 lt!23059))) (and (bvsge (index!3029 lt!23177) #b00000000000000000000000000000000) (bvslt (index!3029 lt!23177) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23177) (ite ((_ is Found!226) lt!23177) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!23177)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (and ((_ is MissingVacant!226) lt!23177) (= (index!3029 lt!23177) (index!3028 lt!23059)) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23177)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!38175 () SeekEntryResult!226)

(assert (=> d!10783 (= lt!23177 e!38175)))

(declare-fun c!7250 () Bool)

(assert (=> d!10783 (= c!7250 (bvsge (x!9858 lt!23059) #b01111111111111111111111111111110))))

(assert (=> d!10783 (= lt!23178 (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23059)))))

(assert (=> d!10783 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10783 (= (seekKeyOrZeroReturnVacant!0 (x!9858 lt!23059) (index!3028 lt!23059) (index!3028 lt!23059) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23177)))

(declare-fun b!57981 () Bool)

(assert (=> b!57981 (= e!38174 (MissingVacant!226 (index!3028 lt!23059)))))

(declare-fun b!57982 () Bool)

(assert (=> b!57982 (= e!38176 (Found!226 (index!3028 lt!23059)))))

(declare-fun b!57983 () Bool)

(assert (=> b!57983 (= e!38175 e!38176)))

(declare-fun c!7251 () Bool)

(assert (=> b!57983 (= c!7251 (= lt!23178 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!57984 () Bool)

(assert (=> b!57984 (= e!38175 Undefined!226)))

(assert (= (and d!10783 c!7250) b!57984))

(assert (= (and d!10783 (not c!7250)) b!57983))

(assert (= (and b!57983 c!7251) b!57982))

(assert (= (and b!57983 (not c!7251)) b!57979))

(assert (= (and b!57979 c!7249) b!57981))

(assert (= (and b!57979 (not c!7249)) b!57980))

(declare-fun m!49147 () Bool)

(assert (=> b!57980 m!49147))

(assert (=> b!57980 m!49147))

(assert (=> b!57980 m!48037))

(declare-fun m!49149 () Bool)

(assert (=> b!57980 m!49149))

(declare-fun m!49151 () Bool)

(assert (=> d!10783 m!49151))

(declare-fun m!49153 () Bool)

(assert (=> d!10783 m!49153))

(assert (=> d!10783 m!48767))

(assert (=> d!10783 m!48289))

(assert (=> b!57785 d!10783))

(declare-fun d!10785 () Bool)

(assert (=> d!10785 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23179 () Unit!1491)

(assert (=> d!10785 (= lt!23179 (choose!295 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38177 () Bool)

(assert (=> d!10785 e!38177))

(declare-fun res!32367 () Bool)

(assert (=> d!10785 (=> (not res!32367) (not e!38177))))

(assert (=> d!10785 (= res!32367 (isStrictlySorted!283 (toList!696 lt!22664)))))

(assert (=> d!10785 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000) lt!23179)))

(declare-fun b!57985 () Bool)

(assert (=> b!57985 (= e!38177 (containsKey!127 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10785 res!32367) b!57985))

(assert (=> d!10785 m!48285))

(assert (=> d!10785 m!48285))

(assert (=> d!10785 m!48753))

(declare-fun m!49155 () Bool)

(assert (=> d!10785 m!49155))

(declare-fun m!49157 () Bool)

(assert (=> d!10785 m!49157))

(assert (=> b!57985 m!48749))

(assert (=> b!57769 d!10785))

(declare-fun d!10787 () Bool)

(assert (=> d!10787 (= (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!291 (getValueByKey!123 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2508 () Bool)

(assert (= bs!2508 d!10787))

(assert (=> bs!2508 m!48285))

(declare-fun m!49159 () Bool)

(assert (=> bs!2508 m!49159))

(assert (=> b!57769 d!10787))

(assert (=> b!57769 d!10779))

(declare-fun d!10789 () Bool)

(declare-fun res!32370 () Bool)

(declare-fun e!38178 () Bool)

(assert (=> d!10789 (=> (not res!32370) (not e!38178))))

(assert (=> d!10789 (= res!32370 (validMask!0 (mask!5896 (_2!1020 lt!22755))))))

(assert (=> d!10789 (= (simpleValid!41 (_2!1020 lt!22755)) e!38178)))

(declare-fun b!57987 () Bool)

(declare-fun res!32371 () Bool)

(assert (=> b!57987 (=> (not res!32371) (not e!38178))))

(assert (=> b!57987 (= res!32371 (bvsge (size!2008 (_2!1020 lt!22755)) (_size!355 (_2!1020 lt!22755))))))

(declare-fun b!57986 () Bool)

(declare-fun res!32368 () Bool)

(assert (=> b!57986 (=> (not res!32368) (not e!38178))))

(assert (=> b!57986 (= res!32368 (and (= (size!2005 (_values!2005 (_2!1020 lt!22755))) (bvadd (mask!5896 (_2!1020 lt!22755)) #b00000000000000000000000000000001)) (= (size!2004 (_keys!3642 (_2!1020 lt!22755))) (size!2005 (_values!2005 (_2!1020 lt!22755)))) (bvsge (_size!355 (_2!1020 lt!22755)) #b00000000000000000000000000000000) (bvsle (_size!355 (_2!1020 lt!22755)) (bvadd (mask!5896 (_2!1020 lt!22755)) #b00000000000000000000000000000001))))))

(declare-fun b!57989 () Bool)

(assert (=> b!57989 (= e!38178 (and (bvsge (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000011) (bvsge (_vacant!355 (_2!1020 lt!22755)) #b00000000000000000000000000000000)))))

(declare-fun b!57988 () Bool)

(declare-fun res!32369 () Bool)

(assert (=> b!57988 (=> (not res!32369) (not e!38178))))

(assert (=> b!57988 (= res!32369 (= (size!2008 (_2!1020 lt!22755)) (bvadd (_size!355 (_2!1020 lt!22755)) (bvsdiv (bvadd (extraKeys!1913 (_2!1020 lt!22755)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!10789 res!32370) b!57986))

(assert (= (and b!57986 res!32368) b!57987))

(assert (= (and b!57987 res!32371) b!57988))

(assert (= (and b!57988 res!32369) b!57989))

(assert (=> d!10789 m!48905))

(declare-fun m!49161 () Bool)

(assert (=> b!57987 m!49161))

(assert (=> b!57988 m!49161))

(assert (=> d!10565 d!10789))

(declare-fun d!10791 () Bool)

(declare-fun e!38179 () Bool)

(assert (=> d!10791 e!38179))

(declare-fun res!32372 () Bool)

(assert (=> d!10791 (=> res!32372 e!38179)))

(declare-fun lt!23181 () Bool)

(assert (=> d!10791 (= res!32372 (not lt!23181))))

(declare-fun lt!23183 () Bool)

(assert (=> d!10791 (= lt!23181 lt!23183)))

(declare-fun lt!23182 () Unit!1491)

(declare-fun e!38180 () Unit!1491)

(assert (=> d!10791 (= lt!23182 e!38180)))

(declare-fun c!7252 () Bool)

(assert (=> d!10791 (= c!7252 lt!23183)))

(assert (=> d!10791 (= lt!23183 (containsKey!127 (toList!696 lt!22893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10791 (= (contains!679 lt!22893 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23181)))

(declare-fun b!57990 () Bool)

(declare-fun lt!23180 () Unit!1491)

(assert (=> b!57990 (= e!38180 lt!23180)))

(assert (=> b!57990 (= lt!23180 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57990 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57991 () Bool)

(declare-fun Unit!1516 () Unit!1491)

(assert (=> b!57991 (= e!38180 Unit!1516)))

(declare-fun b!57992 () Bool)

(assert (=> b!57992 (= e!38179 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10791 c!7252) b!57990))

(assert (= (and d!10791 (not c!7252)) b!57991))

(assert (= (and d!10791 (not res!32372)) b!57992))

(declare-fun m!49163 () Bool)

(assert (=> d!10791 m!49163))

(declare-fun m!49165 () Bool)

(assert (=> b!57990 m!49165))

(declare-fun m!49167 () Bool)

(assert (=> b!57990 m!49167))

(assert (=> b!57990 m!49167))

(declare-fun m!49169 () Bool)

(assert (=> b!57990 m!49169))

(assert (=> b!57992 m!49167))

(assert (=> b!57992 m!49167))

(assert (=> b!57992 m!49169))

(assert (=> b!57616 d!10791))

(assert (=> d!10615 d!10629))

(assert (=> d!10615 d!10625))

(declare-fun d!10793 () Bool)

(assert (=> d!10793 (contains!679 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22677)))

(assert (=> d!10793 true))

(declare-fun _$35!297 () Unit!1491)

(assert (=> d!10793 (= (choose!291 lt!22669 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22677) _$35!297)))

(declare-fun bs!2509 () Bool)

(assert (= bs!2509 d!10793))

(assert (=> bs!2509 m!48147))

(assert (=> bs!2509 m!48147))

(assert (=> bs!2509 m!48149))

(assert (=> d!10615 d!10793))

(declare-fun d!10795 () Bool)

(declare-fun e!38181 () Bool)

(assert (=> d!10795 e!38181))

(declare-fun res!32373 () Bool)

(assert (=> d!10795 (=> res!32373 e!38181)))

(declare-fun lt!23185 () Bool)

(assert (=> d!10795 (= res!32373 (not lt!23185))))

(declare-fun lt!23187 () Bool)

(assert (=> d!10795 (= lt!23185 lt!23187)))

(declare-fun lt!23186 () Unit!1491)

(declare-fun e!38182 () Unit!1491)

(assert (=> d!10795 (= lt!23186 e!38182)))

(declare-fun c!7253 () Bool)

(assert (=> d!10795 (= c!7253 lt!23187)))

(assert (=> d!10795 (= lt!23187 (containsKey!127 (toList!696 lt!22669) lt!22677))))

(assert (=> d!10795 (= (contains!679 lt!22669 lt!22677) lt!23185)))

(declare-fun b!57994 () Bool)

(declare-fun lt!23184 () Unit!1491)

(assert (=> b!57994 (= e!38182 lt!23184)))

(assert (=> b!57994 (= lt!23184 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22669) lt!22677))))

(assert (=> b!57994 (isDefined!76 (getValueByKey!123 (toList!696 lt!22669) lt!22677))))

(declare-fun b!57995 () Bool)

(declare-fun Unit!1517 () Unit!1491)

(assert (=> b!57995 (= e!38182 Unit!1517)))

(declare-fun b!57996 () Bool)

(assert (=> b!57996 (= e!38181 (isDefined!76 (getValueByKey!123 (toList!696 lt!22669) lt!22677)))))

(assert (= (and d!10795 c!7253) b!57994))

(assert (= (and d!10795 (not c!7253)) b!57995))

(assert (= (and d!10795 (not res!32373)) b!57996))

(declare-fun m!49171 () Bool)

(assert (=> d!10795 m!49171))

(declare-fun m!49173 () Bool)

(assert (=> b!57994 m!49173))

(declare-fun m!49175 () Bool)

(assert (=> b!57994 m!49175))

(assert (=> b!57994 m!49175))

(declare-fun m!49177 () Bool)

(assert (=> b!57994 m!49177))

(assert (=> b!57996 m!49175))

(assert (=> b!57996 m!49175))

(assert (=> b!57996 m!49177))

(assert (=> d!10615 d!10795))

(declare-fun d!10797 () Bool)

(declare-fun lt!23188 () Bool)

(assert (=> d!10797 (= lt!23188 (select (content!61 Nil!1425) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38183 () Bool)

(assert (=> d!10797 (= lt!23188 e!38183)))

(declare-fun res!32375 () Bool)

(assert (=> d!10797 (=> (not res!32375) (not e!38183))))

(assert (=> d!10797 (= res!32375 ((_ is Cons!1424) Nil!1425))))

(assert (=> d!10797 (= (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23188)))

(declare-fun b!57997 () Bool)

(declare-fun e!38184 () Bool)

(assert (=> b!57997 (= e!38183 e!38184)))

(declare-fun res!32374 () Bool)

(assert (=> b!57997 (=> res!32374 e!38184)))

(assert (=> b!57997 (= res!32374 (= (h!2004 Nil!1425) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57998 () Bool)

(assert (=> b!57998 (= e!38184 (contains!680 (t!4746 Nil!1425) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10797 res!32375) b!57997))

(assert (= (and b!57997 (not res!32374)) b!57998))

(assert (=> d!10797 m!48607))

(assert (=> d!10797 m!48295))

(declare-fun m!49179 () Bool)

(assert (=> d!10797 m!49179))

(assert (=> b!57998 m!48295))

(declare-fun m!49181 () Bool)

(assert (=> b!57998 m!49181))

(assert (=> b!57743 d!10797))

(declare-fun d!10799 () Bool)

(declare-fun e!38185 () Bool)

(assert (=> d!10799 e!38185))

(declare-fun res!32376 () Bool)

(assert (=> d!10799 (=> res!32376 e!38185)))

(declare-fun lt!23190 () Bool)

(assert (=> d!10799 (= res!32376 (not lt!23190))))

(declare-fun lt!23192 () Bool)

(assert (=> d!10799 (= lt!23190 lt!23192)))

(declare-fun lt!23191 () Unit!1491)

(declare-fun e!38186 () Unit!1491)

(assert (=> d!10799 (= lt!23191 e!38186)))

(declare-fun c!7254 () Bool)

(assert (=> d!10799 (= c!7254 lt!23192)))

(assert (=> d!10799 (= lt!23192 (containsKey!127 (toList!696 lt!22788) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10799 (= (contains!679 lt!22788 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23190)))

(declare-fun b!57999 () Bool)

(declare-fun lt!23189 () Unit!1491)

(assert (=> b!57999 (= e!38186 lt!23189)))

(assert (=> b!57999 (= lt!23189 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22788) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57999 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58000 () Bool)

(declare-fun Unit!1518 () Unit!1491)

(assert (=> b!58000 (= e!38186 Unit!1518)))

(declare-fun b!58001 () Bool)

(assert (=> b!58001 (= e!38185 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10799 c!7254) b!57999))

(assert (= (and d!10799 (not c!7254)) b!58000))

(assert (= (and d!10799 (not res!32376)) b!58001))

(declare-fun m!49183 () Bool)

(assert (=> d!10799 m!49183))

(declare-fun m!49185 () Bool)

(assert (=> b!57999 m!49185))

(declare-fun m!49187 () Bool)

(assert (=> b!57999 m!49187))

(assert (=> b!57999 m!49187))

(declare-fun m!49189 () Bool)

(assert (=> b!57999 m!49189))

(assert (=> b!58001 m!49187))

(assert (=> b!58001 m!49187))

(assert (=> b!58001 m!49189))

(assert (=> bm!4164 d!10799))

(declare-fun d!10801 () Bool)

(declare-fun e!38187 () Bool)

(assert (=> d!10801 e!38187))

(declare-fun res!32377 () Bool)

(assert (=> d!10801 (=> res!32377 e!38187)))

(declare-fun lt!23194 () Bool)

(assert (=> d!10801 (= res!32377 (not lt!23194))))

(declare-fun lt!23196 () Bool)

(assert (=> d!10801 (= lt!23194 lt!23196)))

(declare-fun lt!23195 () Unit!1491)

(declare-fun e!38188 () Unit!1491)

(assert (=> d!10801 (= lt!23195 e!38188)))

(declare-fun c!7255 () Bool)

(assert (=> d!10801 (= c!7255 lt!23196)))

(assert (=> d!10801 (= lt!23196 (containsKey!127 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (=> d!10801 (= (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))) lt!23194)))

(declare-fun b!58002 () Bool)

(declare-fun lt!23193 () Unit!1491)

(assert (=> b!58002 (= e!38188 lt!23193)))

(assert (=> b!58002 (= lt!23193 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (=> b!58002 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(declare-fun b!58003 () Bool)

(declare-fun Unit!1519 () Unit!1491)

(assert (=> b!58003 (= e!38188 Unit!1519)))

(declare-fun b!58004 () Bool)

(assert (=> b!58004 (= e!38187 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))))

(assert (= (and d!10801 c!7255) b!58002))

(assert (= (and d!10801 (not c!7255)) b!58003))

(assert (= (and d!10801 (not res!32377)) b!58004))

(assert (=> d!10801 m!48207))

(declare-fun m!49191 () Bool)

(assert (=> d!10801 m!49191))

(assert (=> b!58002 m!48207))

(declare-fun m!49193 () Bool)

(assert (=> b!58002 m!49193))

(assert (=> b!58002 m!48207))

(declare-fun m!49195 () Bool)

(assert (=> b!58002 m!49195))

(assert (=> b!58002 m!49195))

(declare-fun m!49197 () Bool)

(assert (=> b!58002 m!49197))

(assert (=> b!58004 m!48207))

(assert (=> b!58004 m!49195))

(assert (=> b!58004 m!49195))

(assert (=> b!58004 m!49197))

(assert (=> b!57643 d!10801))

(declare-fun b!58005 () Bool)

(declare-fun e!38190 () ListLongMap!1361)

(declare-fun call!4240 () ListLongMap!1361)

(assert (=> b!58005 (= e!38190 call!4240)))

(declare-fun b!58006 () Bool)

(declare-fun e!38198 () Bool)

(declare-fun lt!23202 () ListLongMap!1361)

(assert (=> b!58006 (= e!38198 (= (apply!65 lt!23202 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58007 () Bool)

(declare-fun e!38189 () Bool)

(assert (=> b!58007 (= e!38189 e!38198)))

(declare-fun res!32384 () Bool)

(declare-fun call!4234 () Bool)

(assert (=> b!58007 (= res!32384 call!4234)))

(assert (=> b!58007 (=> (not res!32384) (not e!38198))))

(declare-fun b!58008 () Bool)

(declare-fun e!38192 () Bool)

(declare-fun e!38193 () Bool)

(assert (=> b!58008 (= e!38192 e!38193)))

(declare-fun res!32379 () Bool)

(declare-fun call!4235 () Bool)

(assert (=> b!58008 (= res!32379 call!4235)))

(assert (=> b!58008 (=> (not res!32379) (not e!38193))))

(declare-fun b!58009 () Bool)

(declare-fun e!38200 () Bool)

(assert (=> b!58009 (= e!38200 (= (apply!65 lt!23202 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 lt!22762) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58009 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 lt!22762)))))

(assert (=> b!58009 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58010 () Bool)

(declare-fun e!38195 () Bool)

(assert (=> b!58010 (= e!38195 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4231 () Bool)

(declare-fun call!4236 () ListLongMap!1361)

(assert (=> bm!4231 (= call!4240 call!4236)))

(declare-fun d!10803 () Bool)

(declare-fun e!38197 () Bool)

(assert (=> d!10803 e!38197))

(declare-fun res!32381 () Bool)

(assert (=> d!10803 (=> (not res!32381) (not e!38197))))

(assert (=> d!10803 (= res!32381 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!23214 () ListLongMap!1361)

(assert (=> d!10803 (= lt!23202 lt!23214)))

(declare-fun lt!23201 () Unit!1491)

(declare-fun e!38199 () Unit!1491)

(assert (=> d!10803 (= lt!23201 e!38199)))

(declare-fun c!7260 () Bool)

(declare-fun e!38201 () Bool)

(assert (=> d!10803 (= c!7260 e!38201)))

(declare-fun res!32380 () Bool)

(assert (=> d!10803 (=> (not res!32380) (not e!38201))))

(assert (=> d!10803 (= res!32380 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38196 () ListLongMap!1361)

(assert (=> d!10803 (= lt!23214 e!38196)))

(declare-fun c!7258 () Bool)

(assert (=> d!10803 (= c!7258 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10803 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10803 (= (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23202)))

(declare-fun b!58011 () Bool)

(declare-fun call!4238 () ListLongMap!1361)

(assert (=> b!58011 (= e!38196 (+!80 call!4238 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4232 () Bool)

(declare-fun call!4237 () ListLongMap!1361)

(assert (=> bm!4232 (= call!4237 call!4238)))

(declare-fun b!58012 () Bool)

(assert (=> b!58012 (= e!38197 e!38192)))

(declare-fun c!7259 () Bool)

(assert (=> b!58012 (= c!7259 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4233 () Bool)

(declare-fun call!4239 () ListLongMap!1361)

(assert (=> bm!4233 (= call!4239 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58013 () Bool)

(declare-fun res!32386 () Bool)

(assert (=> b!58013 (=> (not res!32386) (not e!38197))))

(declare-fun e!38191 () Bool)

(assert (=> b!58013 (= res!32386 e!38191)))

(declare-fun res!32383 () Bool)

(assert (=> b!58013 (=> res!32383 e!38191)))

(assert (=> b!58013 (= res!32383 (not e!38195))))

(declare-fun res!32382 () Bool)

(assert (=> b!58013 (=> (not res!32382) (not e!38195))))

(assert (=> b!58013 (= res!32382 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4234 () Bool)

(assert (=> bm!4234 (= call!4235 (contains!679 lt!23202 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58014 () Bool)

(declare-fun lt!23212 () Unit!1491)

(assert (=> b!58014 (= e!38199 lt!23212)))

(declare-fun lt!23207 () ListLongMap!1361)

(assert (=> b!58014 (= lt!23207 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23204 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23204 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23215 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23215 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23203 () Unit!1491)

(assert (=> b!58014 (= lt!23203 (addStillContains!41 lt!23207 lt!23204 (zeroValue!1940 newMap!16) lt!23215))))

(assert (=> b!58014 (contains!679 (+!80 lt!23207 (tuple2!2017 lt!23204 (zeroValue!1940 newMap!16))) lt!23215)))

(declare-fun lt!23210 () Unit!1491)

(assert (=> b!58014 (= lt!23210 lt!23203)))

(declare-fun lt!23206 () ListLongMap!1361)

(assert (=> b!58014 (= lt!23206 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23199 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23199 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23209 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23209 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23200 () Unit!1491)

(assert (=> b!58014 (= lt!23200 (addApplyDifferent!41 lt!23206 lt!23199 (minValue!1940 newMap!16) lt!23209))))

(assert (=> b!58014 (= (apply!65 (+!80 lt!23206 (tuple2!2017 lt!23199 (minValue!1940 newMap!16))) lt!23209) (apply!65 lt!23206 lt!23209))))

(declare-fun lt!23216 () Unit!1491)

(assert (=> b!58014 (= lt!23216 lt!23200)))

(declare-fun lt!23208 () ListLongMap!1361)

(assert (=> b!58014 (= lt!23208 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23211 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23211 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23197 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23197 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23217 () Unit!1491)

(assert (=> b!58014 (= lt!23217 (addApplyDifferent!41 lt!23208 lt!23211 (zeroValue!1940 newMap!16) lt!23197))))

(assert (=> b!58014 (= (apply!65 (+!80 lt!23208 (tuple2!2017 lt!23211 (zeroValue!1940 newMap!16))) lt!23197) (apply!65 lt!23208 lt!23197))))

(declare-fun lt!23213 () Unit!1491)

(assert (=> b!58014 (= lt!23213 lt!23217)))

(declare-fun lt!23218 () ListLongMap!1361)

(assert (=> b!58014 (= lt!23218 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23198 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23198 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23205 () (_ BitVec 64))

(assert (=> b!58014 (= lt!23205 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58014 (= lt!23212 (addApplyDifferent!41 lt!23218 lt!23198 (minValue!1940 newMap!16) lt!23205))))

(assert (=> b!58014 (= (apply!65 (+!80 lt!23218 (tuple2!2017 lt!23198 (minValue!1940 newMap!16))) lt!23205) (apply!65 lt!23218 lt!23205))))

(declare-fun b!58015 () Bool)

(assert (=> b!58015 (= e!38189 (not call!4234))))

(declare-fun b!58016 () Bool)

(assert (=> b!58016 (= e!38192 (not call!4235))))

(declare-fun bm!4235 () Bool)

(assert (=> bm!4235 (= call!4234 (contains!679 lt!23202 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4236 () Bool)

(declare-fun c!7257 () Bool)

(assert (=> bm!4236 (= call!4238 (+!80 (ite c!7258 call!4239 (ite c!7257 call!4236 call!4240)) (ite (or c!7258 c!7257) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58017 () Bool)

(declare-fun e!38194 () ListLongMap!1361)

(assert (=> b!58017 (= e!38194 call!4237)))

(declare-fun b!58018 () Bool)

(assert (=> b!58018 (= e!38191 e!38200)))

(declare-fun res!32378 () Bool)

(assert (=> b!58018 (=> (not res!32378) (not e!38200))))

(assert (=> b!58018 (= res!32378 (contains!679 lt!23202 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58018 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58019 () Bool)

(assert (=> b!58019 (= e!38196 e!38194)))

(assert (=> b!58019 (= c!7257 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4237 () Bool)

(assert (=> bm!4237 (= call!4236 call!4239)))

(declare-fun b!58020 () Bool)

(assert (=> b!58020 (= e!38193 (= (apply!65 lt!23202 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58021 () Bool)

(assert (=> b!58021 (= e!38190 call!4237)))

(declare-fun b!58022 () Bool)

(declare-fun c!7261 () Bool)

(assert (=> b!58022 (= c!7261 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58022 (= e!38194 e!38190)))

(declare-fun b!58023 () Bool)

(declare-fun res!32385 () Bool)

(assert (=> b!58023 (=> (not res!32385) (not e!38197))))

(assert (=> b!58023 (= res!32385 e!38189)))

(declare-fun c!7256 () Bool)

(assert (=> b!58023 (= c!7256 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58024 () Bool)

(declare-fun Unit!1520 () Unit!1491)

(assert (=> b!58024 (= e!38199 Unit!1520)))

(declare-fun b!58025 () Bool)

(assert (=> b!58025 (= e!38201 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10803 c!7258) b!58011))

(assert (= (and d!10803 (not c!7258)) b!58019))

(assert (= (and b!58019 c!7257) b!58017))

(assert (= (and b!58019 (not c!7257)) b!58022))

(assert (= (and b!58022 c!7261) b!58021))

(assert (= (and b!58022 (not c!7261)) b!58005))

(assert (= (or b!58021 b!58005) bm!4231))

(assert (= (or b!58017 bm!4231) bm!4237))

(assert (= (or b!58017 b!58021) bm!4232))

(assert (= (or b!58011 bm!4237) bm!4233))

(assert (= (or b!58011 bm!4232) bm!4236))

(assert (= (and d!10803 res!32380) b!58025))

(assert (= (and d!10803 c!7260) b!58014))

(assert (= (and d!10803 (not c!7260)) b!58024))

(assert (= (and d!10803 res!32381) b!58013))

(assert (= (and b!58013 res!32382) b!58010))

(assert (= (and b!58013 (not res!32383)) b!58018))

(assert (= (and b!58018 res!32378) b!58009))

(assert (= (and b!58013 res!32386) b!58023))

(assert (= (and b!58023 c!7256) b!58007))

(assert (= (and b!58023 (not c!7256)) b!58015))

(assert (= (and b!58007 res!32384) b!58006))

(assert (= (or b!58007 b!58015) bm!4235))

(assert (= (and b!58023 res!32385) b!58012))

(assert (= (and b!58012 c!7259) b!58008))

(assert (= (and b!58012 (not c!7259)) b!58016))

(assert (= (and b!58008 res!32379) b!58020))

(assert (= (or b!58008 b!58016) bm!4234))

(declare-fun b_lambda!2527 () Bool)

(assert (=> (not b_lambda!2527) (not b!58009)))

(assert (=> b!58009 t!4753))

(declare-fun b_and!3495 () Bool)

(assert (= b_and!3491 (and (=> t!4753 result!2353) b_and!3495)))

(assert (=> b!58009 t!4755))

(declare-fun b_and!3497 () Bool)

(assert (= b_and!3493 (and (=> t!4755 result!2355) b_and!3497)))

(declare-fun m!49199 () Bool)

(assert (=> bm!4233 m!49199))

(assert (=> b!58010 m!48295))

(assert (=> b!58010 m!48295))

(assert (=> b!58010 m!48297))

(declare-fun m!49201 () Bool)

(assert (=> b!58020 m!49201))

(declare-fun m!49203 () Bool)

(assert (=> bm!4234 m!49203))

(declare-fun m!49205 () Bool)

(assert (=> bm!4235 m!49205))

(declare-fun m!49207 () Bool)

(assert (=> bm!4236 m!49207))

(declare-fun m!49209 () Bool)

(assert (=> b!58014 m!49209))

(declare-fun m!49211 () Bool)

(assert (=> b!58014 m!49211))

(declare-fun m!49213 () Bool)

(assert (=> b!58014 m!49213))

(declare-fun m!49215 () Bool)

(assert (=> b!58014 m!49215))

(declare-fun m!49217 () Bool)

(assert (=> b!58014 m!49217))

(declare-fun m!49219 () Bool)

(assert (=> b!58014 m!49219))

(declare-fun m!49221 () Bool)

(assert (=> b!58014 m!49221))

(declare-fun m!49223 () Bool)

(assert (=> b!58014 m!49223))

(declare-fun m!49225 () Bool)

(assert (=> b!58014 m!49225))

(declare-fun m!49227 () Bool)

(assert (=> b!58014 m!49227))

(declare-fun m!49229 () Bool)

(assert (=> b!58014 m!49229))

(assert (=> b!58014 m!49199))

(assert (=> b!58014 m!49227))

(declare-fun m!49231 () Bool)

(assert (=> b!58014 m!49231))

(assert (=> b!58014 m!49223))

(assert (=> b!58014 m!49219))

(assert (=> b!58014 m!48295))

(declare-fun m!49233 () Bool)

(assert (=> b!58014 m!49233))

(assert (=> b!58014 m!49215))

(declare-fun m!49235 () Bool)

(assert (=> b!58014 m!49235))

(declare-fun m!49237 () Bool)

(assert (=> b!58014 m!49237))

(assert (=> b!58009 m!48295))

(declare-fun m!49239 () Bool)

(assert (=> b!58009 m!49239))

(assert (=> b!58009 m!48339))

(declare-fun m!49241 () Bool)

(assert (=> b!58009 m!49241))

(assert (=> b!58009 m!48339))

(assert (=> b!58009 m!48295))

(declare-fun m!49243 () Bool)

(assert (=> b!58009 m!49243))

(assert (=> b!58009 m!49239))

(declare-fun m!49245 () Bool)

(assert (=> b!58011 m!49245))

(declare-fun m!49247 () Bool)

(assert (=> b!58006 m!49247))

(assert (=> b!58025 m!48295))

(assert (=> b!58025 m!48295))

(assert (=> b!58025 m!48297))

(assert (=> d!10803 m!48289))

(assert (=> b!58018 m!48295))

(assert (=> b!58018 m!48295))

(declare-fun m!49249 () Bool)

(assert (=> b!58018 m!49249))

(assert (=> b!57643 d!10803))

(declare-fun d!10805 () Bool)

(assert (=> d!10805 (= (inRange!0 (ite c!7159 (index!3027 lt!23011) (ite c!7160 (index!3026 lt!23016) (index!3029 lt!23016))) (mask!5896 newMap!16)) (and (bvsge (ite c!7159 (index!3027 lt!23011) (ite c!7160 (index!3026 lt!23016) (index!3029 lt!23016))) #b00000000000000000000000000000000) (bvslt (ite c!7159 (index!3027 lt!23011) (ite c!7160 (index!3026 lt!23016) (index!3029 lt!23016))) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4189 d!10805))

(declare-fun d!10807 () Bool)

(declare-fun e!38202 () Bool)

(assert (=> d!10807 e!38202))

(declare-fun res!32387 () Bool)

(assert (=> d!10807 (=> res!32387 e!38202)))

(declare-fun lt!23220 () Bool)

(assert (=> d!10807 (= res!32387 (not lt!23220))))

(declare-fun lt!23222 () Bool)

(assert (=> d!10807 (= lt!23220 lt!23222)))

(declare-fun lt!23221 () Unit!1491)

(declare-fun e!38203 () Unit!1491)

(assert (=> d!10807 (= lt!23221 e!38203)))

(declare-fun c!7262 () Bool)

(assert (=> d!10807 (= c!7262 lt!23222)))

(assert (=> d!10807 (= lt!23222 (containsKey!127 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10807 (= (contains!679 lt!22867 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!23220)))

(declare-fun b!58026 () Bool)

(declare-fun lt!23219 () Unit!1491)

(assert (=> b!58026 (= e!38203 lt!23219)))

(assert (=> b!58026 (= lt!23219 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!58026 (isDefined!76 (getValueByKey!123 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58027 () Bool)

(declare-fun Unit!1521 () Unit!1491)

(assert (=> b!58027 (= e!38203 Unit!1521)))

(declare-fun b!58028 () Bool)

(assert (=> b!58028 (= e!38202 (isDefined!76 (getValueByKey!123 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (= (and d!10807 c!7262) b!58026))

(assert (= (and d!10807 (not c!7262)) b!58027))

(assert (= (and d!10807 (not res!32387)) b!58028))

(declare-fun m!49251 () Bool)

(assert (=> d!10807 m!49251))

(declare-fun m!49253 () Bool)

(assert (=> b!58026 m!49253))

(assert (=> b!58026 m!48473))

(assert (=> b!58026 m!48473))

(declare-fun m!49255 () Bool)

(assert (=> b!58026 m!49255))

(assert (=> b!58028 m!48473))

(assert (=> b!58028 m!48473))

(assert (=> b!58028 m!49255))

(assert (=> d!10603 d!10807))

(declare-fun b!58030 () Bool)

(declare-fun e!38204 () Option!129)

(declare-fun e!38205 () Option!129)

(assert (=> b!58030 (= e!38204 e!38205)))

(declare-fun c!7264 () Bool)

(assert (=> b!58030 (= c!7264 (and ((_ is Cons!1425) lt!22866) (not (= (_1!1019 (h!2005 lt!22866)) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58029 () Bool)

(assert (=> b!58029 (= e!38204 (Some!128 (_2!1019 (h!2005 lt!22866))))))

(declare-fun b!58032 () Bool)

(assert (=> b!58032 (= e!38205 None!127)))

(declare-fun c!7263 () Bool)

(declare-fun d!10809 () Bool)

(assert (=> d!10809 (= c!7263 (and ((_ is Cons!1425) lt!22866) (= (_1!1019 (h!2005 lt!22866)) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (=> d!10809 (= (getValueByKey!123 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) e!38204)))

(declare-fun b!58031 () Bool)

(assert (=> b!58031 (= e!38205 (getValueByKey!123 (t!4747 lt!22866) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10809 c!7263) b!58029))

(assert (= (and d!10809 (not c!7263)) b!58030))

(assert (= (and b!58030 c!7264) b!58031))

(assert (= (and b!58030 (not c!7264)) b!58032))

(declare-fun m!49257 () Bool)

(assert (=> b!58031 m!49257))

(assert (=> d!10603 d!10809))

(declare-fun d!10811 () Bool)

(assert (=> d!10811 (= (getValueByKey!123 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (Some!128 (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun lt!23223 () Unit!1491)

(assert (=> d!10811 (= lt!23223 (choose!297 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun e!38206 () Bool)

(assert (=> d!10811 e!38206))

(declare-fun res!32388 () Bool)

(assert (=> d!10811 (=> (not res!32388) (not e!38206))))

(assert (=> d!10811 (= res!32388 (isStrictlySorted!283 lt!22866))))

(assert (=> d!10811 (= (lemmaContainsTupThenGetReturnValue!40 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!23223)))

(declare-fun b!58033 () Bool)

(declare-fun res!32389 () Bool)

(assert (=> b!58033 (=> (not res!32389) (not e!38206))))

(assert (=> b!58033 (= res!32389 (containsKey!127 lt!22866 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58034 () Bool)

(assert (=> b!58034 (= e!38206 (contains!681 lt!22866 (tuple2!2017 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (= (and d!10811 res!32388) b!58033))

(assert (= (and b!58033 res!32389) b!58034))

(assert (=> d!10811 m!48467))

(declare-fun m!49259 () Bool)

(assert (=> d!10811 m!49259))

(declare-fun m!49261 () Bool)

(assert (=> d!10811 m!49261))

(declare-fun m!49263 () Bool)

(assert (=> b!58033 m!49263))

(declare-fun m!49265 () Bool)

(assert (=> b!58034 m!49265))

(assert (=> d!10603 d!10811))

(declare-fun c!7265 () Bool)

(declare-fun call!4243 () List!1429)

(declare-fun bm!4238 () Bool)

(declare-fun e!38208 () List!1429)

(assert (=> bm!4238 (= call!4243 ($colon$colon!59 e!38208 (ite c!7265 (h!2005 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (tuple2!2017 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun c!7268 () Bool)

(assert (=> bm!4238 (= c!7268 c!7265)))

(declare-fun b!58035 () Bool)

(declare-fun e!38211 () List!1429)

(declare-fun call!4242 () List!1429)

(assert (=> b!58035 (= e!38211 call!4242)))

(declare-fun d!10813 () Bool)

(declare-fun e!38207 () Bool)

(assert (=> d!10813 e!38207))

(declare-fun res!32390 () Bool)

(assert (=> d!10813 (=> (not res!32390) (not e!38207))))

(declare-fun lt!23224 () List!1429)

(assert (=> d!10813 (= res!32390 (isStrictlySorted!283 lt!23224))))

(declare-fun e!38210 () List!1429)

(assert (=> d!10813 (= lt!23224 e!38210)))

(assert (=> d!10813 (= c!7265 (and ((_ is Cons!1425) (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (bvslt (_1!1019 (h!2005 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (=> d!10813 (isStrictlySorted!283 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))))))

(assert (=> d!10813 (= (insertStrictlySorted!43 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!23224)))

(declare-fun b!58036 () Bool)

(assert (=> b!58036 (= e!38210 call!4243)))

(declare-fun b!58037 () Bool)

(declare-fun e!38209 () List!1429)

(assert (=> b!58037 (= e!38210 e!38209)))

(declare-fun c!7267 () Bool)

(assert (=> b!58037 (= c!7267 (and ((_ is Cons!1425) (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (= (_1!1019 (h!2005 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58038 () Bool)

(assert (=> b!58038 (= e!38207 (contains!681 lt!23224 (tuple2!2017 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun bm!4239 () Bool)

(declare-fun call!4241 () List!1429)

(assert (=> bm!4239 (= call!4241 call!4243)))

(declare-fun b!58039 () Bool)

(assert (=> b!58039 (= e!38208 (insertStrictlySorted!43 (t!4747 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (_2!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58040 () Bool)

(declare-fun res!32391 () Bool)

(assert (=> b!58040 (=> (not res!32391) (not e!38207))))

(assert (=> b!58040 (= res!32391 (containsKey!127 lt!23224 (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58041 () Bool)

(assert (=> b!58041 (= e!38209 call!4241)))

(declare-fun b!58042 () Bool)

(declare-fun c!7266 () Bool)

(assert (=> b!58042 (= e!38208 (ite c!7267 (t!4747 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (ite c!7266 (Cons!1425 (h!2005 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (t!4747 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))))) Nil!1426)))))

(declare-fun b!58043 () Bool)

(assert (=> b!58043 (= e!38211 call!4242)))

(declare-fun b!58044 () Bool)

(assert (=> b!58044 (= c!7266 (and ((_ is Cons!1425) (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087)))) (bvsgt (_1!1019 (h!2005 (toList!696 (ite c!7057 call!4086 (ite c!7056 call!4083 call!4087))))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (=> b!58044 (= e!38209 e!38211)))

(declare-fun bm!4240 () Bool)

(assert (=> bm!4240 (= call!4242 call!4241)))

(assert (= (and d!10813 c!7265) b!58036))

(assert (= (and d!10813 (not c!7265)) b!58037))

(assert (= (and b!58037 c!7267) b!58041))

(assert (= (and b!58037 (not c!7267)) b!58044))

(assert (= (and b!58044 c!7266) b!58035))

(assert (= (and b!58044 (not c!7266)) b!58043))

(assert (= (or b!58035 b!58043) bm!4240))

(assert (= (or b!58041 bm!4240) bm!4239))

(assert (= (or b!58036 bm!4239) bm!4238))

(assert (= (and bm!4238 c!7268) b!58039))

(assert (= (and bm!4238 (not c!7268)) b!58042))

(assert (= (and d!10813 res!32390) b!58040))

(assert (= (and b!58040 res!32391) b!58038))

(declare-fun m!49267 () Bool)

(assert (=> b!58040 m!49267))

(declare-fun m!49269 () Bool)

(assert (=> b!58039 m!49269))

(declare-fun m!49271 () Bool)

(assert (=> d!10813 m!49271))

(declare-fun m!49273 () Bool)

(assert (=> d!10813 m!49273))

(declare-fun m!49275 () Bool)

(assert (=> b!58038 m!49275))

(declare-fun m!49277 () Bool)

(assert (=> bm!4238 m!49277))

(assert (=> d!10603 d!10813))

(declare-fun d!10815 () Bool)

(declare-fun e!38212 () Bool)

(assert (=> d!10815 e!38212))

(declare-fun res!32392 () Bool)

(assert (=> d!10815 (=> res!32392 e!38212)))

(declare-fun lt!23226 () Bool)

(assert (=> d!10815 (= res!32392 (not lt!23226))))

(declare-fun lt!23228 () Bool)

(assert (=> d!10815 (= lt!23226 lt!23228)))

(declare-fun lt!23227 () Unit!1491)

(declare-fun e!38213 () Unit!1491)

(assert (=> d!10815 (= lt!23227 e!38213)))

(declare-fun c!7269 () Bool)

(assert (=> d!10815 (= c!7269 lt!23228)))

(assert (=> d!10815 (= lt!23228 (containsKey!127 (toList!696 lt!22788) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10815 (= (contains!679 lt!22788 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23226)))

(declare-fun b!58045 () Bool)

(declare-fun lt!23225 () Unit!1491)

(assert (=> b!58045 (= e!38213 lt!23225)))

(assert (=> b!58045 (= lt!23225 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22788) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58045 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58046 () Bool)

(declare-fun Unit!1522 () Unit!1491)

(assert (=> b!58046 (= e!38213 Unit!1522)))

(declare-fun b!58047 () Bool)

(assert (=> b!58047 (= e!38212 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10815 c!7269) b!58045))

(assert (= (and d!10815 (not c!7269)) b!58046))

(assert (= (and d!10815 (not res!32392)) b!58047))

(declare-fun m!49279 () Bool)

(assert (=> d!10815 m!49279))

(declare-fun m!49281 () Bool)

(assert (=> b!58045 m!49281))

(declare-fun m!49283 () Bool)

(assert (=> b!58045 m!49283))

(assert (=> b!58045 m!49283))

(declare-fun m!49285 () Bool)

(assert (=> b!58045 m!49285))

(assert (=> b!58047 m!49283))

(assert (=> b!58047 m!49283))

(assert (=> b!58047 m!49285))

(assert (=> bm!4163 d!10815))

(declare-fun d!10817 () Bool)

(assert (=> d!10817 (= (apply!65 lt!23074 lt!23077) (get!1063 (getValueByKey!123 (toList!696 lt!23074) lt!23077)))))

(declare-fun bs!2510 () Bool)

(assert (= bs!2510 d!10817))

(declare-fun m!49287 () Bool)

(assert (=> bs!2510 m!49287))

(assert (=> bs!2510 m!49287))

(declare-fun m!49289 () Bool)

(assert (=> bs!2510 m!49289))

(assert (=> b!57804 d!10817))

(declare-fun d!10819 () Bool)

(declare-fun e!38214 () Bool)

(assert (=> d!10819 e!38214))

(declare-fun res!32393 () Bool)

(assert (=> d!10819 (=> res!32393 e!38214)))

(declare-fun lt!23230 () Bool)

(assert (=> d!10819 (= res!32393 (not lt!23230))))

(declare-fun lt!23232 () Bool)

(assert (=> d!10819 (= lt!23230 lt!23232)))

(declare-fun lt!23231 () Unit!1491)

(declare-fun e!38215 () Unit!1491)

(assert (=> d!10819 (= lt!23231 e!38215)))

(declare-fun c!7270 () Bool)

(assert (=> d!10819 (= c!7270 lt!23232)))

(assert (=> d!10819 (= lt!23232 (containsKey!127 (toList!696 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) lt!23083))))

(assert (=> d!10819 (= (contains!679 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) lt!23083) lt!23230)))

(declare-fun b!58048 () Bool)

(declare-fun lt!23229 () Unit!1491)

(assert (=> b!58048 (= e!38215 lt!23229)))

(assert (=> b!58048 (= lt!23229 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) lt!23083))))

(assert (=> b!58048 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) lt!23083))))

(declare-fun b!58049 () Bool)

(declare-fun Unit!1523 () Unit!1491)

(assert (=> b!58049 (= e!38215 Unit!1523)))

(declare-fun b!58050 () Bool)

(assert (=> b!58050 (= e!38214 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) lt!23083)))))

(assert (= (and d!10819 c!7270) b!58048))

(assert (= (and d!10819 (not c!7270)) b!58049))

(assert (= (and d!10819 (not res!32393)) b!58050))

(declare-fun m!49291 () Bool)

(assert (=> d!10819 m!49291))

(declare-fun m!49293 () Bool)

(assert (=> b!58048 m!49293))

(declare-fun m!49295 () Bool)

(assert (=> b!58048 m!49295))

(assert (=> b!58048 m!49295))

(declare-fun m!49297 () Bool)

(assert (=> b!58048 m!49297))

(assert (=> b!58050 m!49295))

(assert (=> b!58050 m!49295))

(assert (=> b!58050 m!49297))

(assert (=> b!57804 d!10819))

(declare-fun d!10821 () Bool)

(declare-fun e!38216 () Bool)

(assert (=> d!10821 e!38216))

(declare-fun res!32394 () Bool)

(assert (=> d!10821 (=> (not res!32394) (not e!38216))))

(declare-fun lt!23235 () ListLongMap!1361)

(assert (=> d!10821 (= res!32394 (contains!679 lt!23235 (_1!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23234 () List!1429)

(assert (=> d!10821 (= lt!23235 (ListLongMap!1362 lt!23234))))

(declare-fun lt!23233 () Unit!1491)

(declare-fun lt!23236 () Unit!1491)

(assert (=> d!10821 (= lt!23233 lt!23236)))

(assert (=> d!10821 (= (getValueByKey!123 lt!23234 (_1!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10821 (= lt!23236 (lemmaContainsTupThenGetReturnValue!40 lt!23234 (_1!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10821 (= lt!23234 (insertStrictlySorted!43 (toList!696 lt!23074) (_1!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10821 (= (+!80 lt!23074 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23235)))

(declare-fun b!58051 () Bool)

(declare-fun res!32395 () Bool)

(assert (=> b!58051 (=> (not res!32395) (not e!38216))))

(assert (=> b!58051 (= res!32395 (= (getValueByKey!123 (toList!696 lt!23235) (_1!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58052 () Bool)

(assert (=> b!58052 (= e!38216 (contains!681 (toList!696 lt!23235) (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!10821 res!32394) b!58051))

(assert (= (and b!58051 res!32395) b!58052))

(declare-fun m!49299 () Bool)

(assert (=> d!10821 m!49299))

(declare-fun m!49301 () Bool)

(assert (=> d!10821 m!49301))

(declare-fun m!49303 () Bool)

(assert (=> d!10821 m!49303))

(declare-fun m!49305 () Bool)

(assert (=> d!10821 m!49305))

(declare-fun m!49307 () Bool)

(assert (=> b!58051 m!49307))

(declare-fun m!49309 () Bool)

(assert (=> b!58052 m!49309))

(assert (=> b!57804 d!10821))

(declare-fun d!10823 () Bool)

(assert (=> d!10823 (= (apply!65 (+!80 lt!23076 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) lt!23065) (apply!65 lt!23076 lt!23065))))

(declare-fun lt!23237 () Unit!1491)

(assert (=> d!10823 (= lt!23237 (choose!290 lt!23076 lt!23079 (zeroValue!1940 newMap!16) lt!23065))))

(declare-fun e!38217 () Bool)

(assert (=> d!10823 e!38217))

(declare-fun res!32396 () Bool)

(assert (=> d!10823 (=> (not res!32396) (not e!38217))))

(assert (=> d!10823 (= res!32396 (contains!679 lt!23076 lt!23065))))

(assert (=> d!10823 (= (addApplyDifferent!41 lt!23076 lt!23079 (zeroValue!1940 newMap!16) lt!23065) lt!23237)))

(declare-fun b!58053 () Bool)

(assert (=> b!58053 (= e!38217 (not (= lt!23065 lt!23079)))))

(assert (= (and d!10823 res!32396) b!58053))

(declare-fun m!49311 () Bool)

(assert (=> d!10823 m!49311))

(assert (=> d!10823 m!48795))

(declare-fun m!49313 () Bool)

(assert (=> d!10823 m!49313))

(assert (=> d!10823 m!48789))

(assert (=> d!10823 m!48795))

(assert (=> d!10823 m!48815))

(assert (=> b!57804 d!10823))

(declare-fun d!10825 () Bool)

(assert (=> d!10825 (= (apply!65 (+!80 lt!23074 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23077) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!23074 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!23077)))))

(declare-fun bs!2511 () Bool)

(assert (= bs!2511 d!10825))

(declare-fun m!49315 () Bool)

(assert (=> bs!2511 m!49315))

(assert (=> bs!2511 m!49315))

(declare-fun m!49317 () Bool)

(assert (=> bs!2511 m!49317))

(assert (=> b!57804 d!10825))

(declare-fun d!10827 () Bool)

(declare-fun e!38218 () Bool)

(assert (=> d!10827 e!38218))

(declare-fun res!32397 () Bool)

(assert (=> d!10827 (=> (not res!32397) (not e!38218))))

(declare-fun lt!23240 () ListLongMap!1361)

(assert (=> d!10827 (= res!32397 (contains!679 lt!23240 (_1!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23239 () List!1429)

(assert (=> d!10827 (= lt!23240 (ListLongMap!1362 lt!23239))))

(declare-fun lt!23238 () Unit!1491)

(declare-fun lt!23241 () Unit!1491)

(assert (=> d!10827 (= lt!23238 lt!23241)))

(assert (=> d!10827 (= (getValueByKey!123 lt!23239 (_1!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10827 (= lt!23241 (lemmaContainsTupThenGetReturnValue!40 lt!23239 (_1!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10827 (= lt!23239 (insertStrictlySorted!43 (toList!696 lt!23075) (_1!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10827 (= (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) lt!23240)))

(declare-fun b!58054 () Bool)

(declare-fun res!32398 () Bool)

(assert (=> b!58054 (=> (not res!32398) (not e!38218))))

(assert (=> b!58054 (= res!32398 (= (getValueByKey!123 (toList!696 lt!23240) (_1!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58055 () Bool)

(assert (=> b!58055 (= e!38218 (contains!681 (toList!696 lt!23240) (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10827 res!32397) b!58054))

(assert (= (and b!58054 res!32398) b!58055))

(declare-fun m!49319 () Bool)

(assert (=> d!10827 m!49319))

(declare-fun m!49321 () Bool)

(assert (=> d!10827 m!49321))

(declare-fun m!49323 () Bool)

(assert (=> d!10827 m!49323))

(declare-fun m!49325 () Bool)

(assert (=> d!10827 m!49325))

(declare-fun m!49327 () Bool)

(assert (=> b!58054 m!49327))

(declare-fun m!49329 () Bool)

(assert (=> b!58055 m!49329))

(assert (=> b!57804 d!10827))

(declare-fun d!10829 () Bool)

(assert (=> d!10829 (= (apply!65 (+!80 lt!23076 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) lt!23065) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!23076 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))) lt!23065)))))

(declare-fun bs!2512 () Bool)

(assert (= bs!2512 d!10829))

(declare-fun m!49331 () Bool)

(assert (=> bs!2512 m!49331))

(assert (=> bs!2512 m!49331))

(declare-fun m!49333 () Bool)

(assert (=> bs!2512 m!49333))

(assert (=> b!57804 d!10829))

(declare-fun d!10831 () Bool)

(declare-fun e!38219 () Bool)

(assert (=> d!10831 e!38219))

(declare-fun res!32399 () Bool)

(assert (=> d!10831 (=> (not res!32399) (not e!38219))))

(declare-fun lt!23244 () ListLongMap!1361)

(assert (=> d!10831 (= res!32399 (contains!679 lt!23244 (_1!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23243 () List!1429)

(assert (=> d!10831 (= lt!23244 (ListLongMap!1362 lt!23243))))

(declare-fun lt!23242 () Unit!1491)

(declare-fun lt!23245 () Unit!1491)

(assert (=> d!10831 (= lt!23242 lt!23245)))

(assert (=> d!10831 (= (getValueByKey!123 lt!23243 (_1!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10831 (= lt!23245 (lemmaContainsTupThenGetReturnValue!40 lt!23243 (_1!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10831 (= lt!23243 (insertStrictlySorted!43 (toList!696 lt!23086) (_1!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10831 (= (+!80 lt!23086 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23244)))

(declare-fun b!58056 () Bool)

(declare-fun res!32400 () Bool)

(assert (=> b!58056 (=> (not res!32400) (not e!38219))))

(assert (=> b!58056 (= res!32400 (= (getValueByKey!123 (toList!696 lt!23244) (_1!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58057 () Bool)

(assert (=> b!58057 (= e!38219 (contains!681 (toList!696 lt!23244) (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!10831 res!32399) b!58056))

(assert (= (and b!58056 res!32400) b!58057))

(declare-fun m!49335 () Bool)

(assert (=> d!10831 m!49335))

(declare-fun m!49337 () Bool)

(assert (=> d!10831 m!49337))

(declare-fun m!49339 () Bool)

(assert (=> d!10831 m!49339))

(declare-fun m!49341 () Bool)

(assert (=> d!10831 m!49341))

(declare-fun m!49343 () Bool)

(assert (=> b!58056 m!49343))

(declare-fun m!49345 () Bool)

(assert (=> b!58057 m!49345))

(assert (=> b!57804 d!10831))

(declare-fun d!10833 () Bool)

(assert (=> d!10833 (= (apply!65 lt!23086 lt!23073) (get!1063 (getValueByKey!123 (toList!696 lt!23086) lt!23073)))))

(declare-fun bs!2513 () Bool)

(assert (= bs!2513 d!10833))

(declare-fun m!49347 () Bool)

(assert (=> bs!2513 m!49347))

(assert (=> bs!2513 m!49347))

(declare-fun m!49349 () Bool)

(assert (=> bs!2513 m!49349))

(assert (=> b!57804 d!10833))

(declare-fun d!10835 () Bool)

(declare-fun e!38220 () Bool)

(assert (=> d!10835 e!38220))

(declare-fun res!32401 () Bool)

(assert (=> d!10835 (=> (not res!32401) (not e!38220))))

(declare-fun lt!23248 () ListLongMap!1361)

(assert (=> d!10835 (= res!32401 (contains!679 lt!23248 (_1!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23247 () List!1429)

(assert (=> d!10835 (= lt!23248 (ListLongMap!1362 lt!23247))))

(declare-fun lt!23246 () Unit!1491)

(declare-fun lt!23249 () Unit!1491)

(assert (=> d!10835 (= lt!23246 lt!23249)))

(assert (=> d!10835 (= (getValueByKey!123 lt!23247 (_1!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10835 (= lt!23249 (lemmaContainsTupThenGetReturnValue!40 lt!23247 (_1!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10835 (= lt!23247 (insertStrictlySorted!43 (toList!696 lt!23076) (_1!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10835 (= (+!80 lt!23076 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))) lt!23248)))

(declare-fun b!58058 () Bool)

(declare-fun res!32402 () Bool)

(assert (=> b!58058 (=> (not res!32402) (not e!38220))))

(assert (=> b!58058 (= res!32402 (= (getValueByKey!123 (toList!696 lt!23248) (_1!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58059 () Bool)

(assert (=> b!58059 (= e!38220 (contains!681 (toList!696 lt!23248) (tuple2!2017 lt!23079 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10835 res!32401) b!58058))

(assert (= (and b!58058 res!32402) b!58059))

(declare-fun m!49351 () Bool)

(assert (=> d!10835 m!49351))

(declare-fun m!49353 () Bool)

(assert (=> d!10835 m!49353))

(declare-fun m!49355 () Bool)

(assert (=> d!10835 m!49355))

(declare-fun m!49357 () Bool)

(assert (=> d!10835 m!49357))

(declare-fun m!49359 () Bool)

(assert (=> b!58058 m!49359))

(declare-fun m!49361 () Bool)

(assert (=> b!58059 m!49361))

(assert (=> b!57804 d!10835))

(declare-fun d!10837 () Bool)

(assert (=> d!10837 (contains!679 (+!80 lt!23075 (tuple2!2017 lt!23072 (zeroValue!1940 newMap!16))) lt!23083)))

(declare-fun lt!23250 () Unit!1491)

(assert (=> d!10837 (= lt!23250 (choose!291 lt!23075 lt!23072 (zeroValue!1940 newMap!16) lt!23083))))

(assert (=> d!10837 (contains!679 lt!23075 lt!23083)))

(assert (=> d!10837 (= (addStillContains!41 lt!23075 lt!23072 (zeroValue!1940 newMap!16) lt!23083) lt!23250)))

(declare-fun bs!2514 () Bool)

(assert (= bs!2514 d!10837))

(assert (=> bs!2514 m!48799))

(assert (=> bs!2514 m!48799))

(assert (=> bs!2514 m!48801))

(declare-fun m!49363 () Bool)

(assert (=> bs!2514 m!49363))

(declare-fun m!49365 () Bool)

(assert (=> bs!2514 m!49365))

(assert (=> b!57804 d!10837))

(declare-fun d!10839 () Bool)

(assert (=> d!10839 (= (apply!65 (+!80 lt!23086 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23073) (apply!65 lt!23086 lt!23073))))

(declare-fun lt!23251 () Unit!1491)

(assert (=> d!10839 (= lt!23251 (choose!290 lt!23086 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23073))))

(declare-fun e!38221 () Bool)

(assert (=> d!10839 e!38221))

(declare-fun res!32403 () Bool)

(assert (=> d!10839 (=> (not res!32403) (not e!38221))))

(assert (=> d!10839 (= res!32403 (contains!679 lt!23086 lt!23073))))

(assert (=> d!10839 (= (addApplyDifferent!41 lt!23086 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23073) lt!23251)))

(declare-fun b!58060 () Bool)

(assert (=> b!58060 (= e!38221 (not (= lt!23073 lt!23066)))))

(assert (= (and d!10839 res!32403) b!58060))

(declare-fun m!49367 () Bool)

(assert (=> d!10839 m!49367))

(assert (=> d!10839 m!48803))

(declare-fun m!49369 () Bool)

(assert (=> d!10839 m!49369))

(assert (=> d!10839 m!48797))

(assert (=> d!10839 m!48803))

(assert (=> d!10839 m!48805))

(assert (=> b!57804 d!10839))

(declare-fun b!58061 () Bool)

(declare-fun e!38225 () ListLongMap!1361)

(declare-fun call!4244 () ListLongMap!1361)

(assert (=> b!58061 (= e!38225 call!4244)))

(declare-fun b!58063 () Bool)

(assert (=> b!58063 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> b!58063 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762))))))

(declare-fun e!38227 () Bool)

(declare-fun lt!23255 () ListLongMap!1361)

(assert (=> b!58063 (= e!38227 (= (apply!65 lt!23255 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58064 () Bool)

(declare-fun e!38228 () Bool)

(assert (=> b!58064 (= e!38228 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58064 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!58065 () Bool)

(declare-fun e!38223 () Bool)

(declare-fun e!38224 () Bool)

(assert (=> b!58065 (= e!38223 e!38224)))

(declare-fun c!7272 () Bool)

(assert (=> b!58065 (= c!7272 e!38228)))

(declare-fun res!32407 () Bool)

(assert (=> b!58065 (=> (not res!32407) (not e!38228))))

(assert (=> b!58065 (= res!32407 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58066 () Bool)

(declare-fun e!38226 () ListLongMap!1361)

(assert (=> b!58066 (= e!38226 e!38225)))

(declare-fun c!7271 () Bool)

(assert (=> b!58066 (= c!7271 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58067 () Bool)

(declare-fun e!38222 () Bool)

(assert (=> b!58067 (= e!38224 e!38222)))

(declare-fun c!7274 () Bool)

(assert (=> b!58067 (= c!7274 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun d!10841 () Bool)

(assert (=> d!10841 e!38223))

(declare-fun res!32406 () Bool)

(assert (=> d!10841 (=> (not res!32406) (not e!38223))))

(assert (=> d!10841 (= res!32406 (not (contains!679 lt!23255 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10841 (= lt!23255 e!38226)))

(declare-fun c!7273 () Bool)

(assert (=> d!10841 (= c!7273 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10841 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10841 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23255)))

(declare-fun b!58062 () Bool)

(assert (=> b!58062 (= e!38224 e!38227)))

(assert (=> b!58062 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32405 () Bool)

(assert (=> b!58062 (= res!32405 (contains!679 lt!23255 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58062 (=> (not res!32405) (not e!38227))))

(declare-fun b!58068 () Bool)

(assert (=> b!58068 (= e!38226 (ListLongMap!1362 Nil!1426))))

(declare-fun b!58069 () Bool)

(assert (=> b!58069 (= e!38222 (= lt!23255 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!58070 () Bool)

(assert (=> b!58070 (= e!38222 (isEmpty!290 lt!23255))))

(declare-fun bm!4241 () Bool)

(assert (=> bm!4241 (= call!4244 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762) (mask!5896 newMap!16) (ite c!7092 (ite c!7098 (extraKeys!1913 newMap!16) lt!22761) (extraKeys!1913 newMap!16)) (zeroValue!1940 newMap!16) (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!58071 () Bool)

(declare-fun res!32404 () Bool)

(assert (=> b!58071 (=> (not res!32404) (not e!38223))))

(assert (=> b!58071 (= res!32404 (not (contains!679 lt!23255 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58072 () Bool)

(declare-fun lt!23256 () Unit!1491)

(declare-fun lt!23258 () Unit!1491)

(assert (=> b!58072 (= lt!23256 lt!23258)))

(declare-fun lt!23257 () (_ BitVec 64))

(declare-fun lt!23253 () V!2835)

(declare-fun lt!23254 () ListLongMap!1361)

(declare-fun lt!23252 () (_ BitVec 64))

(assert (=> b!58072 (not (contains!679 (+!80 lt!23254 (tuple2!2017 lt!23257 lt!23253)) lt!23252))))

(assert (=> b!58072 (= lt!23258 (addStillNotContains!14 lt!23254 lt!23257 lt!23253 lt!23252))))

(assert (=> b!58072 (= lt!23252 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58072 (= lt!23253 (get!1060 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58072 (= lt!23257 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58072 (= lt!23254 call!4244)))

(assert (=> b!58072 (= e!38225 (+!80 call!4244 (tuple2!2017 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1060 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10841 c!7273) b!58068))

(assert (= (and d!10841 (not c!7273)) b!58066))

(assert (= (and b!58066 c!7271) b!58072))

(assert (= (and b!58066 (not c!7271)) b!58061))

(assert (= (or b!58072 b!58061) bm!4241))

(assert (= (and d!10841 res!32406) b!58071))

(assert (= (and b!58071 res!32404) b!58065))

(assert (= (and b!58065 res!32407) b!58064))

(assert (= (and b!58065 c!7272) b!58062))

(assert (= (and b!58065 (not c!7272)) b!58067))

(assert (= (and b!58062 res!32405) b!58063))

(assert (= (and b!58067 c!7274) b!58069))

(assert (= (and b!58067 (not c!7274)) b!58070))

(declare-fun b_lambda!2529 () Bool)

(assert (=> (not b_lambda!2529) (not b!58063)))

(assert (=> b!58063 t!4753))

(declare-fun b_and!3499 () Bool)

(assert (= b_and!3495 (and (=> t!4753 result!2353) b_and!3499)))

(assert (=> b!58063 t!4755))

(declare-fun b_and!3501 () Bool)

(assert (= b_and!3497 (and (=> t!4755 result!2355) b_and!3501)))

(declare-fun b_lambda!2531 () Bool)

(assert (=> (not b_lambda!2531) (not b!58072)))

(assert (=> b!58072 t!4753))

(declare-fun b_and!3503 () Bool)

(assert (= b_and!3499 (and (=> t!4753 result!2353) b_and!3503)))

(assert (=> b!58072 t!4755))

(declare-fun b_and!3505 () Bool)

(assert (= b_and!3501 (and (=> t!4755 result!2355) b_and!3505)))

(declare-fun m!49371 () Bool)

(assert (=> b!58071 m!49371))

(declare-fun m!49373 () Bool)

(assert (=> d!10841 m!49373))

(assert (=> d!10841 m!48289))

(assert (=> b!58064 m!48295))

(assert (=> b!58064 m!48295))

(assert (=> b!58064 m!48297))

(declare-fun m!49375 () Bool)

(assert (=> b!58069 m!49375))

(assert (=> b!58062 m!48295))

(assert (=> b!58062 m!48295))

(declare-fun m!49377 () Bool)

(assert (=> b!58062 m!49377))

(assert (=> bm!4241 m!49375))

(declare-fun m!49379 () Bool)

(assert (=> b!58070 m!49379))

(declare-fun m!49381 () Bool)

(assert (=> b!58072 m!49381))

(declare-fun m!49383 () Bool)

(assert (=> b!58072 m!49383))

(assert (=> b!58072 m!48819))

(assert (=> b!58072 m!48339))

(assert (=> b!58072 m!48821))

(assert (=> b!58072 m!49381))

(declare-fun m!49385 () Bool)

(assert (=> b!58072 m!49385))

(assert (=> b!58072 m!48819))

(assert (=> b!58072 m!48339))

(assert (=> b!58072 m!48295))

(declare-fun m!49387 () Bool)

(assert (=> b!58072 m!49387))

(assert (=> b!58063 m!48295))

(assert (=> b!58063 m!48819))

(assert (=> b!58063 m!48339))

(assert (=> b!58063 m!48821))

(assert (=> b!58063 m!48819))

(assert (=> b!58063 m!48339))

(assert (=> b!58063 m!48295))

(declare-fun m!49389 () Bool)

(assert (=> b!58063 m!49389))

(assert (=> b!58066 m!48295))

(assert (=> b!58066 m!48295))

(assert (=> b!58066 m!48297))

(assert (=> b!57804 d!10841))

(declare-fun d!10843 () Bool)

(assert (=> d!10843 (= (apply!65 (+!80 lt!23086 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23073) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!23086 (tuple2!2017 lt!23066 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!23073)))))

(declare-fun bs!2515 () Bool)

(assert (= bs!2515 d!10843))

(declare-fun m!49391 () Bool)

(assert (=> bs!2515 m!49391))

(assert (=> bs!2515 m!49391))

(declare-fun m!49393 () Bool)

(assert (=> bs!2515 m!49393))

(assert (=> b!57804 d!10843))

(declare-fun d!10845 () Bool)

(assert (=> d!10845 (= (apply!65 lt!23076 lt!23065) (get!1063 (getValueByKey!123 (toList!696 lt!23076) lt!23065)))))

(declare-fun bs!2516 () Bool)

(assert (= bs!2516 d!10845))

(declare-fun m!49395 () Bool)

(assert (=> bs!2516 m!49395))

(assert (=> bs!2516 m!49395))

(declare-fun m!49397 () Bool)

(assert (=> bs!2516 m!49397))

(assert (=> b!57804 d!10845))

(declare-fun d!10847 () Bool)

(assert (=> d!10847 (= (apply!65 (+!80 lt!23074 (tuple2!2017 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23077) (apply!65 lt!23074 lt!23077))))

(declare-fun lt!23259 () Unit!1491)

(assert (=> d!10847 (= lt!23259 (choose!290 lt!23074 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23077))))

(declare-fun e!38229 () Bool)

(assert (=> d!10847 e!38229))

(declare-fun res!32408 () Bool)

(assert (=> d!10847 (=> (not res!32408) (not e!38229))))

(assert (=> d!10847 (= res!32408 (contains!679 lt!23074 lt!23077))))

(assert (=> d!10847 (= (addApplyDifferent!41 lt!23074 lt!23067 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!23077) lt!23259)))

(declare-fun b!58073 () Bool)

(assert (=> b!58073 (= e!38229 (not (= lt!23077 lt!23067)))))

(assert (= (and d!10847 res!32408) b!58073))

(declare-fun m!49399 () Bool)

(assert (=> d!10847 m!49399))

(assert (=> d!10847 m!48807))

(declare-fun m!49401 () Bool)

(assert (=> d!10847 m!49401))

(assert (=> d!10847 m!48817))

(assert (=> d!10847 m!48807))

(assert (=> d!10847 m!48809))

(assert (=> b!57804 d!10847))

(declare-fun d!10849 () Bool)

(assert (=> d!10849 (= (apply!65 lt!22810 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1063 (getValueByKey!123 (toList!696 lt!22810) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2517 () Bool)

(assert (= bs!2517 d!10849))

(assert (=> bs!2517 m!48295))

(declare-fun m!49403 () Bool)

(assert (=> bs!2517 m!49403))

(assert (=> bs!2517 m!49403))

(declare-fun m!49405 () Bool)

(assert (=> bs!2517 m!49405))

(assert (=> b!57519 d!10849))

(declare-fun d!10851 () Bool)

(declare-fun c!7275 () Bool)

(assert (=> d!10851 (= c!7275 ((_ is ValueCellFull!852) (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38230 () V!2835)

(assert (=> d!10851 (= (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38230)))

(declare-fun b!58074 () Bool)

(assert (=> b!58074 (= e!38230 (get!1061 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58075 () Bool)

(assert (=> b!58075 (= e!38230 (get!1062 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10851 c!7275) b!58074))

(assert (= (and d!10851 (not c!7275)) b!58075))

(assert (=> b!58074 m!48393))

(assert (=> b!58074 m!48339))

(declare-fun m!49407 () Bool)

(assert (=> b!58074 m!49407))

(assert (=> b!58075 m!48393))

(assert (=> b!58075 m!48339))

(declare-fun m!49409 () Bool)

(assert (=> b!58075 m!49409))

(assert (=> b!57519 d!10851))

(assert (=> bm!4169 d!10749))

(declare-fun d!10853 () Bool)

(declare-fun res!32409 () Bool)

(declare-fun e!38231 () Bool)

(assert (=> d!10853 (=> (not res!32409) (not e!38231))))

(assert (=> d!10853 (= res!32409 (simpleValid!41 (_2!1020 lt!23010)))))

(assert (=> d!10853 (= (valid!251 (_2!1020 lt!23010)) e!38231)))

(declare-fun b!58076 () Bool)

(declare-fun res!32410 () Bool)

(assert (=> b!58076 (=> (not res!32410) (not e!38231))))

(assert (=> b!58076 (= res!32410 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1020 lt!23010)) #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!23010)))) (_size!355 (_2!1020 lt!23010))))))

(declare-fun b!58077 () Bool)

(declare-fun res!32411 () Bool)

(assert (=> b!58077 (=> (not res!32411) (not e!38231))))

(assert (=> b!58077 (= res!32411 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1020 lt!23010)) (mask!5896 (_2!1020 lt!23010))))))

(declare-fun b!58078 () Bool)

(assert (=> b!58078 (= e!38231 (arrayNoDuplicates!0 (_keys!3642 (_2!1020 lt!23010)) #b00000000000000000000000000000000 Nil!1425))))

(assert (= (and d!10853 res!32409) b!58076))

(assert (= (and b!58076 res!32410) b!58077))

(assert (= (and b!58077 res!32411) b!58078))

(declare-fun m!49411 () Bool)

(assert (=> d!10853 m!49411))

(declare-fun m!49413 () Bool)

(assert (=> b!58076 m!49413))

(declare-fun m!49415 () Bool)

(assert (=> b!58077 m!49415))

(declare-fun m!49417 () Bool)

(assert (=> b!58078 m!49417))

(assert (=> b!57685 d!10853))

(assert (=> b!57553 d!10771))

(declare-fun b!58079 () Bool)

(declare-fun e!38232 () Bool)

(declare-fun e!38233 () Bool)

(assert (=> b!58079 (= e!38232 e!38233)))

(declare-fun lt!23262 () (_ BitVec 64))

(assert (=> b!58079 (= lt!23262 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000))))

(declare-fun lt!23260 () Unit!1491)

(assert (=> b!58079 (= lt!23260 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 (_2!1020 lt!22755)) lt!23262 #b00000000000000000000000000000000))))

(assert (=> b!58079 (arrayContainsKey!0 (_keys!3642 (_2!1020 lt!22755)) lt!23262 #b00000000000000000000000000000000)))

(declare-fun lt!23261 () Unit!1491)

(assert (=> b!58079 (= lt!23261 lt!23260)))

(declare-fun res!32412 () Bool)

(assert (=> b!58079 (= res!32412 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000) (_keys!3642 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755))) (Found!226 #b00000000000000000000000000000000)))))

(assert (=> b!58079 (=> (not res!32412) (not e!38233))))

(declare-fun b!58081 () Bool)

(declare-fun call!4245 () Bool)

(assert (=> b!58081 (= e!38233 call!4245)))

(declare-fun bm!4242 () Bool)

(assert (=> bm!4242 (= call!4245 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755))))))

(declare-fun b!58082 () Bool)

(declare-fun e!38234 () Bool)

(assert (=> b!58082 (= e!38234 e!38232)))

(declare-fun c!7276 () Bool)

(assert (=> b!58082 (= c!7276 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun d!10855 () Bool)

(declare-fun res!32413 () Bool)

(assert (=> d!10855 (=> res!32413 e!38234)))

(assert (=> d!10855 (= res!32413 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(assert (=> d!10855 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1020 lt!22755)) (mask!5896 (_2!1020 lt!22755))) e!38234)))

(declare-fun b!58080 () Bool)

(assert (=> b!58080 (= e!38232 call!4245)))

(assert (= (and d!10855 (not res!32413)) b!58082))

(assert (= (and b!58082 c!7276) b!58079))

(assert (= (and b!58082 (not c!7276)) b!58080))

(assert (= (and b!58079 res!32412) b!58081))

(assert (= (or b!58081 b!58080) bm!4242))

(assert (=> b!58079 m!48847))

(declare-fun m!49419 () Bool)

(assert (=> b!58079 m!49419))

(declare-fun m!49421 () Bool)

(assert (=> b!58079 m!49421))

(assert (=> b!58079 m!48847))

(declare-fun m!49423 () Bool)

(assert (=> b!58079 m!49423))

(declare-fun m!49425 () Bool)

(assert (=> bm!4242 m!49425))

(assert (=> b!58082 m!48847))

(assert (=> b!58082 m!48847))

(assert (=> b!58082 m!48849))

(assert (=> b!57474 d!10855))

(assert (=> b!57751 d!10605))

(declare-fun lt!23263 () Bool)

(declare-fun d!10857 () Bool)

(assert (=> d!10857 (= lt!23263 (select (content!62 (toList!696 lt!22906)) (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38236 () Bool)

(assert (=> d!10857 (= lt!23263 e!38236)))

(declare-fun res!32414 () Bool)

(assert (=> d!10857 (=> (not res!32414) (not e!38236))))

(assert (=> d!10857 (= res!32414 ((_ is Cons!1425) (toList!696 lt!22906)))))

(assert (=> d!10857 (= (contains!681 (toList!696 lt!22906) (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!23263)))

(declare-fun b!58083 () Bool)

(declare-fun e!38235 () Bool)

(assert (=> b!58083 (= e!38236 e!38235)))

(declare-fun res!32415 () Bool)

(assert (=> b!58083 (=> res!32415 e!38235)))

(assert (=> b!58083 (= res!32415 (= (h!2005 (toList!696 lt!22906)) (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58084 () Bool)

(assert (=> b!58084 (= e!38235 (contains!681 (t!4747 (toList!696 lt!22906)) (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10857 res!32414) b!58083))

(assert (= (and b!58083 (not res!32415)) b!58084))

(declare-fun m!49427 () Bool)

(assert (=> d!10857 m!49427))

(declare-fun m!49429 () Bool)

(assert (=> d!10857 m!49429))

(declare-fun m!49431 () Bool)

(assert (=> b!58084 m!49431))

(assert (=> b!57622 d!10857))

(declare-fun d!10859 () Bool)

(assert (=> d!10859 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000)))

(declare-fun lt!23266 () Unit!1491)

(declare-fun choose!13 (array!3707 (_ BitVec 64) (_ BitVec 32)) Unit!1491)

(assert (=> d!10859 (= lt!23266 (choose!13 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000))))

(assert (=> d!10859 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!10859 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000) lt!23266)))

(declare-fun bs!2518 () Bool)

(assert (= bs!2518 d!10859))

(assert (=> bs!2518 m!48419))

(declare-fun m!49433 () Bool)

(assert (=> bs!2518 m!49433))

(assert (=> b!57550 d!10859))

(declare-fun d!10861 () Bool)

(declare-fun res!32416 () Bool)

(declare-fun e!38237 () Bool)

(assert (=> d!10861 (=> res!32416 e!38237)))

(assert (=> d!10861 (= res!32416 (= (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) lt!22847))))

(assert (=> d!10861 (= (arrayContainsKey!0 (_keys!3642 newMap!16) lt!22847 #b00000000000000000000000000000000) e!38237)))

(declare-fun b!58085 () Bool)

(declare-fun e!38238 () Bool)

(assert (=> b!58085 (= e!38237 e!38238)))

(declare-fun res!32417 () Bool)

(assert (=> b!58085 (=> (not res!32417) (not e!38238))))

(assert (=> b!58085 (= res!32417 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58086 () Bool)

(assert (=> b!58086 (= e!38238 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!22847 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10861 (not res!32416)) b!58085))

(assert (= (and b!58085 res!32417) b!58086))

(assert (=> d!10861 m!48295))

(declare-fun m!49435 () Bool)

(assert (=> b!58086 m!49435))

(assert (=> b!57550 d!10861))

(declare-fun b!58087 () Bool)

(declare-fun e!38240 () SeekEntryResult!226)

(assert (=> b!58087 (= e!38240 Undefined!226)))

(declare-fun b!58088 () Bool)

(declare-fun e!38239 () SeekEntryResult!226)

(declare-fun lt!23268 () SeekEntryResult!226)

(assert (=> b!58088 (= e!38239 (seekKeyOrZeroReturnVacant!0 (x!9858 lt!23268) (index!3028 lt!23268) (index!3028 lt!23268) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!58089 () Bool)

(declare-fun c!7278 () Bool)

(declare-fun lt!23269 () (_ BitVec 64))

(assert (=> b!58089 (= c!7278 (= lt!23269 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38241 () SeekEntryResult!226)

(assert (=> b!58089 (= e!38241 e!38239)))

(declare-fun d!10863 () Bool)

(declare-fun lt!23267 () SeekEntryResult!226)

(assert (=> d!10863 (and (or ((_ is Undefined!226) lt!23267) (not ((_ is Found!226) lt!23267)) (and (bvsge (index!3027 lt!23267) #b00000000000000000000000000000000) (bvslt (index!3027 lt!23267) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23267) ((_ is Found!226) lt!23267) (not ((_ is MissingZero!226) lt!23267)) (and (bvsge (index!3026 lt!23267) #b00000000000000000000000000000000) (bvslt (index!3026 lt!23267) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23267) ((_ is Found!226) lt!23267) ((_ is MissingZero!226) lt!23267) (not ((_ is MissingVacant!226) lt!23267)) (and (bvsge (index!3029 lt!23267) #b00000000000000000000000000000000) (bvslt (index!3029 lt!23267) (size!2004 (_keys!3642 newMap!16))))) (or ((_ is Undefined!226) lt!23267) (ite ((_ is Found!226) lt!23267) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!23267)) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!226) lt!23267) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!23267)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!226) lt!23267) (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23267)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10863 (= lt!23267 e!38240)))

(declare-fun c!7279 () Bool)

(assert (=> d!10863 (= c!7279 (and ((_ is Intermediate!226) lt!23268) (undefined!1038 lt!23268)))))

(assert (=> d!10863 (= lt!23268 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (mask!5896 newMap!16)) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10863 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10863 (= (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23267)))

(declare-fun b!58090 () Bool)

(assert (=> b!58090 (= e!38241 (Found!226 (index!3028 lt!23268)))))

(declare-fun b!58091 () Bool)

(assert (=> b!58091 (= e!38239 (MissingZero!226 (index!3028 lt!23268)))))

(declare-fun b!58092 () Bool)

(assert (=> b!58092 (= e!38240 e!38241)))

(assert (=> b!58092 (= lt!23269 (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23268)))))

(declare-fun c!7277 () Bool)

(assert (=> b!58092 (= c!7277 (= lt!23269 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10863 c!7279) b!58087))

(assert (= (and d!10863 (not c!7279)) b!58092))

(assert (= (and b!58092 c!7277) b!58090))

(assert (= (and b!58092 (not c!7277)) b!58089))

(assert (= (and b!58089 c!7278) b!58091))

(assert (= (and b!58089 (not c!7278)) b!58088))

(assert (=> b!58088 m!48295))

(declare-fun m!49437 () Bool)

(assert (=> b!58088 m!49437))

(assert (=> d!10863 m!48295))

(declare-fun m!49439 () Bool)

(assert (=> d!10863 m!49439))

(assert (=> d!10863 m!49439))

(assert (=> d!10863 m!48295))

(declare-fun m!49441 () Bool)

(assert (=> d!10863 m!49441))

(assert (=> d!10863 m!48289))

(declare-fun m!49443 () Bool)

(assert (=> d!10863 m!49443))

(declare-fun m!49445 () Bool)

(assert (=> d!10863 m!49445))

(declare-fun m!49447 () Bool)

(assert (=> d!10863 m!49447))

(declare-fun m!49449 () Bool)

(assert (=> b!58092 m!49449))

(assert (=> b!57550 d!10863))

(declare-fun d!10865 () Bool)

(declare-fun e!38242 () Bool)

(assert (=> d!10865 e!38242))

(declare-fun res!32418 () Bool)

(assert (=> d!10865 (=> res!32418 e!38242)))

(declare-fun lt!23271 () Bool)

(assert (=> d!10865 (= res!32418 (not lt!23271))))

(declare-fun lt!23273 () Bool)

(assert (=> d!10865 (= lt!23271 lt!23273)))

(declare-fun lt!23272 () Unit!1491)

(declare-fun e!38243 () Unit!1491)

(assert (=> d!10865 (= lt!23272 e!38243)))

(declare-fun c!7280 () Bool)

(assert (=> d!10865 (= c!7280 lt!23273)))

(assert (=> d!10865 (= lt!23273 (containsKey!127 (toList!696 lt!23070) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10865 (= (contains!679 lt!23070 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23271)))

(declare-fun b!58093 () Bool)

(declare-fun lt!23270 () Unit!1491)

(assert (=> b!58093 (= e!38243 lt!23270)))

(assert (=> b!58093 (= lt!23270 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!23070) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58093 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58094 () Bool)

(declare-fun Unit!1524 () Unit!1491)

(assert (=> b!58094 (= e!38243 Unit!1524)))

(declare-fun b!58095 () Bool)

(assert (=> b!58095 (= e!38242 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!10865 c!7280) b!58093))

(assert (= (and d!10865 (not c!7280)) b!58094))

(assert (= (and d!10865 (not res!32418)) b!58095))

(assert (=> d!10865 m!48295))

(declare-fun m!49451 () Bool)

(assert (=> d!10865 m!49451))

(assert (=> b!58093 m!48295))

(declare-fun m!49453 () Bool)

(assert (=> b!58093 m!49453))

(assert (=> b!58093 m!48295))

(declare-fun m!49455 () Bool)

(assert (=> b!58093 m!49455))

(assert (=> b!58093 m!49455))

(declare-fun m!49457 () Bool)

(assert (=> b!58093 m!49457))

(assert (=> b!58095 m!48295))

(assert (=> b!58095 m!49455))

(assert (=> b!58095 m!49455))

(assert (=> b!58095 m!49457))

(assert (=> b!57808 d!10865))

(declare-fun d!10867 () Bool)

(assert (=> d!10867 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(declare-fun lt!23274 () Unit!1491)

(assert (=> d!10867 (= lt!23274 (choose!295 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(declare-fun e!38244 () Bool)

(assert (=> d!10867 e!38244))

(declare-fun res!32419 () Bool)

(assert (=> d!10867 (=> (not res!32419) (not e!38244))))

(assert (=> d!10867 (= res!32419 (isStrictlySorted!283 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10867 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677) lt!23274)))

(declare-fun b!58096 () Bool)

(assert (=> b!58096 (= e!38244 (containsKey!127 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))

(assert (= (and d!10867 res!32419) b!58096))

(assert (=> d!10867 m!48575))

(assert (=> d!10867 m!48575))

(assert (=> d!10867 m!48577))

(declare-fun m!49459 () Bool)

(assert (=> d!10867 m!49459))

(declare-fun m!49461 () Bool)

(assert (=> d!10867 m!49461))

(assert (=> b!58096 m!48571))

(assert (=> b!57625 d!10867))

(declare-fun d!10869 () Bool)

(assert (=> d!10869 (= (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677)) (not (isEmpty!291 (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677))))))

(declare-fun bs!2519 () Bool)

(assert (= bs!2519 d!10869))

(assert (=> bs!2519 m!48575))

(declare-fun m!49463 () Bool)

(assert (=> bs!2519 m!49463))

(assert (=> b!57625 d!10869))

(declare-fun b!58098 () Bool)

(declare-fun e!38245 () Option!129)

(declare-fun e!38246 () Option!129)

(assert (=> b!58098 (= e!38245 e!38246)))

(declare-fun c!7282 () Bool)

(assert (=> b!58098 (= c!7282 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (not (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22677))))))

(declare-fun b!58097 () Bool)

(assert (=> b!58097 (= e!38245 (Some!128 (_2!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58100 () Bool)

(assert (=> b!58100 (= e!38246 None!127)))

(declare-fun d!10871 () Bool)

(declare-fun c!7281 () Bool)

(assert (=> d!10871 (= c!7281 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22677)))))

(assert (=> d!10871 (= (getValueByKey!123 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677) e!38245)))

(declare-fun b!58099 () Bool)

(assert (=> b!58099 (= e!38246 (getValueByKey!123 (t!4747 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!22677))))

(assert (= (and d!10871 c!7281) b!58097))

(assert (= (and d!10871 (not c!7281)) b!58098))

(assert (= (and b!58098 c!7282) b!58099))

(assert (= (and b!58098 (not c!7282)) b!58100))

(declare-fun m!49465 () Bool)

(assert (=> b!58099 m!49465))

(assert (=> b!57625 d!10871))

(declare-fun d!10873 () Bool)

(declare-fun lt!23275 () Bool)

(assert (=> d!10873 (= lt!23275 (select (content!62 (toList!696 lt!22918)) (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38248 () Bool)

(assert (=> d!10873 (= lt!23275 e!38248)))

(declare-fun res!32420 () Bool)

(assert (=> d!10873 (=> (not res!32420) (not e!38248))))

(assert (=> d!10873 (= res!32420 ((_ is Cons!1425) (toList!696 lt!22918)))))

(assert (=> d!10873 (= (contains!681 (toList!696 lt!22918) (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!23275)))

(declare-fun b!58101 () Bool)

(declare-fun e!38247 () Bool)

(assert (=> b!58101 (= e!38248 e!38247)))

(declare-fun res!32421 () Bool)

(assert (=> b!58101 (=> res!32421 e!38247)))

(assert (=> b!58101 (= res!32421 (= (h!2005 (toList!696 lt!22918)) (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58102 () Bool)

(assert (=> b!58102 (= e!38247 (contains!681 (t!4747 (toList!696 lt!22918)) (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10873 res!32420) b!58101))

(assert (= (and b!58101 (not res!32421)) b!58102))

(declare-fun m!49467 () Bool)

(assert (=> d!10873 m!49467))

(declare-fun m!49469 () Bool)

(assert (=> d!10873 m!49469))

(declare-fun m!49471 () Bool)

(assert (=> b!58102 m!49471))

(assert (=> b!57629 d!10873))

(assert (=> d!10635 d!10617))

(declare-fun d!10875 () Bool)

(assert (=> d!10875 (= (apply!65 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22667) (apply!65 lt!22680 lt!22667))))

(assert (=> d!10875 true))

(declare-fun _$34!752 () Unit!1491)

(assert (=> d!10875 (= (choose!290 lt!22680 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22667) _$34!752)))

(declare-fun bs!2520 () Bool)

(assert (= bs!2520 d!10875))

(assert (=> bs!2520 m!48151))

(assert (=> bs!2520 m!48151))

(assert (=> bs!2520 m!48153))

(assert (=> bs!2520 m!48145))

(assert (=> d!10635 d!10875))

(assert (=> d!10635 d!10631))

(declare-fun d!10877 () Bool)

(declare-fun e!38249 () Bool)

(assert (=> d!10877 e!38249))

(declare-fun res!32422 () Bool)

(assert (=> d!10877 (=> res!32422 e!38249)))

(declare-fun lt!23277 () Bool)

(assert (=> d!10877 (= res!32422 (not lt!23277))))

(declare-fun lt!23279 () Bool)

(assert (=> d!10877 (= lt!23277 lt!23279)))

(declare-fun lt!23278 () Unit!1491)

(declare-fun e!38250 () Unit!1491)

(assert (=> d!10877 (= lt!23278 e!38250)))

(declare-fun c!7283 () Bool)

(assert (=> d!10877 (= c!7283 lt!23279)))

(assert (=> d!10877 (= lt!23279 (containsKey!127 (toList!696 lt!22680) lt!22667))))

(assert (=> d!10877 (= (contains!679 lt!22680 lt!22667) lt!23277)))

(declare-fun b!58103 () Bool)

(declare-fun lt!23276 () Unit!1491)

(assert (=> b!58103 (= e!38250 lt!23276)))

(assert (=> b!58103 (= lt!23276 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22680) lt!22667))))

(assert (=> b!58103 (isDefined!76 (getValueByKey!123 (toList!696 lt!22680) lt!22667))))

(declare-fun b!58104 () Bool)

(declare-fun Unit!1525 () Unit!1491)

(assert (=> b!58104 (= e!38250 Unit!1525)))

(declare-fun b!58105 () Bool)

(assert (=> b!58105 (= e!38249 (isDefined!76 (getValueByKey!123 (toList!696 lt!22680) lt!22667)))))

(assert (= (and d!10877 c!7283) b!58103))

(assert (= (and d!10877 (not c!7283)) b!58104))

(assert (= (and d!10877 (not res!32422)) b!58105))

(declare-fun m!49473 () Bool)

(assert (=> d!10877 m!49473))

(declare-fun m!49475 () Bool)

(assert (=> b!58103 m!49475))

(assert (=> b!58103 m!48523))

(assert (=> b!58103 m!48523))

(declare-fun m!49477 () Bool)

(assert (=> b!58103 m!49477))

(assert (=> b!58105 m!48523))

(assert (=> b!58105 m!48523))

(assert (=> b!58105 m!49477))

(assert (=> d!10635 d!10877))

(assert (=> d!10635 d!10637))

(declare-fun d!10879 () Bool)

(declare-fun e!38251 () Bool)

(assert (=> d!10879 e!38251))

(declare-fun res!32423 () Bool)

(assert (=> d!10879 (=> (not res!32423) (not e!38251))))

(declare-fun lt!23282 () ListLongMap!1361)

(assert (=> d!10879 (= res!32423 (contains!679 lt!23282 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23281 () List!1429)

(assert (=> d!10879 (= lt!23282 (ListLongMap!1362 lt!23281))))

(declare-fun lt!23280 () Unit!1491)

(declare-fun lt!23283 () Unit!1491)

(assert (=> d!10879 (= lt!23280 lt!23283)))

(assert (=> d!10879 (= (getValueByKey!123 lt!23281 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10879 (= lt!23283 (lemmaContainsTupThenGetReturnValue!40 lt!23281 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10879 (= lt!23281 (insertStrictlySorted!43 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10879 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23282)))

(declare-fun b!58106 () Bool)

(declare-fun res!32424 () Bool)

(assert (=> b!58106 (=> (not res!32424) (not e!38251))))

(assert (=> b!58106 (= res!32424 (= (getValueByKey!123 (toList!696 lt!23282) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58107 () Bool)

(assert (=> b!58107 (= e!38251 (contains!681 (toList!696 lt!23282) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10879 res!32423) b!58106))

(assert (= (and b!58106 res!32424) b!58107))

(declare-fun m!49479 () Bool)

(assert (=> d!10879 m!49479))

(declare-fun m!49481 () Bool)

(assert (=> d!10879 m!49481))

(declare-fun m!49483 () Bool)

(assert (=> d!10879 m!49483))

(declare-fun m!49485 () Bool)

(assert (=> d!10879 m!49485))

(declare-fun m!49487 () Bool)

(assert (=> b!58106 m!49487))

(declare-fun m!49489 () Bool)

(assert (=> b!58107 m!49489))

(assert (=> d!10677 d!10879))

(assert (=> d!10677 d!10583))

(declare-fun b!58108 () Bool)

(declare-fun e!38253 () ListLongMap!1361)

(declare-fun call!4252 () ListLongMap!1361)

(assert (=> b!58108 (= e!38253 call!4252)))

(declare-fun b!58109 () Bool)

(declare-fun e!38261 () Bool)

(declare-fun lt!23289 () ListLongMap!1361)

(assert (=> b!58109 (= e!38261 (= (apply!65 lt!23289 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58110 () Bool)

(declare-fun e!38252 () Bool)

(assert (=> b!58110 (= e!38252 e!38261)))

(declare-fun res!32431 () Bool)

(declare-fun call!4246 () Bool)

(assert (=> b!58110 (= res!32431 call!4246)))

(assert (=> b!58110 (=> (not res!32431) (not e!38261))))

(declare-fun b!58111 () Bool)

(declare-fun e!38255 () Bool)

(declare-fun e!38256 () Bool)

(assert (=> b!58111 (= e!38255 e!38256)))

(declare-fun res!32426 () Bool)

(declare-fun call!4247 () Bool)

(assert (=> b!58111 (= res!32426 call!4247)))

(assert (=> b!58111 (=> (not res!32426) (not e!38256))))

(declare-fun b!58112 () Bool)

(declare-fun e!38263 () Bool)

(assert (=> b!58112 (= e!38263 (= (apply!65 lt!23289 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58112 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (_values!2005 newMap!16))))))

(assert (=> b!58112 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58113 () Bool)

(declare-fun e!38258 () Bool)

(assert (=> b!58113 (= e!38258 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4243 () Bool)

(declare-fun call!4248 () ListLongMap!1361)

(assert (=> bm!4243 (= call!4252 call!4248)))

(declare-fun d!10881 () Bool)

(declare-fun e!38260 () Bool)

(assert (=> d!10881 e!38260))

(declare-fun res!32428 () Bool)

(assert (=> d!10881 (=> (not res!32428) (not e!38260))))

(assert (=> d!10881 (= res!32428 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!23301 () ListLongMap!1361)

(assert (=> d!10881 (= lt!23289 lt!23301)))

(declare-fun lt!23288 () Unit!1491)

(declare-fun e!38262 () Unit!1491)

(assert (=> d!10881 (= lt!23288 e!38262)))

(declare-fun c!7288 () Bool)

(declare-fun e!38264 () Bool)

(assert (=> d!10881 (= c!7288 e!38264)))

(declare-fun res!32427 () Bool)

(assert (=> d!10881 (=> (not res!32427) (not e!38264))))

(assert (=> d!10881 (= res!32427 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38259 () ListLongMap!1361)

(assert (=> d!10881 (= lt!23301 e!38259)))

(declare-fun c!7286 () Bool)

(assert (=> d!10881 (= c!7286 (and (not (= (bvand lt!22761 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22761 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10881 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10881 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23289)))

(declare-fun b!58114 () Bool)

(declare-fun call!4250 () ListLongMap!1361)

(assert (=> b!58114 (= e!38259 (+!80 call!4250 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4244 () Bool)

(declare-fun call!4249 () ListLongMap!1361)

(assert (=> bm!4244 (= call!4249 call!4250)))

(declare-fun b!58115 () Bool)

(assert (=> b!58115 (= e!38260 e!38255)))

(declare-fun c!7287 () Bool)

(assert (=> b!58115 (= c!7287 (not (= (bvand lt!22761 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4245 () Bool)

(declare-fun call!4251 () ListLongMap!1361)

(assert (=> bm!4245 (= call!4251 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58116 () Bool)

(declare-fun res!32433 () Bool)

(assert (=> b!58116 (=> (not res!32433) (not e!38260))))

(declare-fun e!38254 () Bool)

(assert (=> b!58116 (= res!32433 e!38254)))

(declare-fun res!32430 () Bool)

(assert (=> b!58116 (=> res!32430 e!38254)))

(assert (=> b!58116 (= res!32430 (not e!38258))))

(declare-fun res!32429 () Bool)

(assert (=> b!58116 (=> (not res!32429) (not e!38258))))

(assert (=> b!58116 (= res!32429 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4246 () Bool)

(assert (=> bm!4246 (= call!4247 (contains!679 lt!23289 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58117 () Bool)

(declare-fun lt!23299 () Unit!1491)

(assert (=> b!58117 (= e!38262 lt!23299)))

(declare-fun lt!23294 () ListLongMap!1361)

(assert (=> b!58117 (= lt!23294 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23291 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23291 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23302 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23302 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23290 () Unit!1491)

(assert (=> b!58117 (= lt!23290 (addStillContains!41 lt!23294 lt!23291 (zeroValue!1940 newMap!16) lt!23302))))

(assert (=> b!58117 (contains!679 (+!80 lt!23294 (tuple2!2017 lt!23291 (zeroValue!1940 newMap!16))) lt!23302)))

(declare-fun lt!23297 () Unit!1491)

(assert (=> b!58117 (= lt!23297 lt!23290)))

(declare-fun lt!23293 () ListLongMap!1361)

(assert (=> b!58117 (= lt!23293 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23286 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23286 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23296 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23296 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23287 () Unit!1491)

(assert (=> b!58117 (= lt!23287 (addApplyDifferent!41 lt!23293 lt!23286 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23296))))

(assert (=> b!58117 (= (apply!65 (+!80 lt!23293 (tuple2!2017 lt!23286 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23296) (apply!65 lt!23293 lt!23296))))

(declare-fun lt!23303 () Unit!1491)

(assert (=> b!58117 (= lt!23303 lt!23287)))

(declare-fun lt!23295 () ListLongMap!1361)

(assert (=> b!58117 (= lt!23295 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23298 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23298 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23284 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23284 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23304 () Unit!1491)

(assert (=> b!58117 (= lt!23304 (addApplyDifferent!41 lt!23295 lt!23298 (zeroValue!1940 newMap!16) lt!23284))))

(assert (=> b!58117 (= (apply!65 (+!80 lt!23295 (tuple2!2017 lt!23298 (zeroValue!1940 newMap!16))) lt!23284) (apply!65 lt!23295 lt!23284))))

(declare-fun lt!23300 () Unit!1491)

(assert (=> b!58117 (= lt!23300 lt!23304)))

(declare-fun lt!23305 () ListLongMap!1361)

(assert (=> b!58117 (= lt!23305 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23285 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23285 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23292 () (_ BitVec 64))

(assert (=> b!58117 (= lt!23292 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58117 (= lt!23299 (addApplyDifferent!41 lt!23305 lt!23285 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23292))))

(assert (=> b!58117 (= (apply!65 (+!80 lt!23305 (tuple2!2017 lt!23285 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23292) (apply!65 lt!23305 lt!23292))))

(declare-fun b!58118 () Bool)

(assert (=> b!58118 (= e!38252 (not call!4246))))

(declare-fun b!58119 () Bool)

(assert (=> b!58119 (= e!38255 (not call!4247))))

(declare-fun bm!4247 () Bool)

(assert (=> bm!4247 (= call!4246 (contains!679 lt!23289 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7285 () Bool)

(declare-fun bm!4248 () Bool)

(assert (=> bm!4248 (= call!4250 (+!80 (ite c!7286 call!4251 (ite c!7285 call!4248 call!4252)) (ite (or c!7286 c!7285) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58120 () Bool)

(declare-fun e!38257 () ListLongMap!1361)

(assert (=> b!58120 (= e!38257 call!4249)))

(declare-fun b!58121 () Bool)

(assert (=> b!58121 (= e!38254 e!38263)))

(declare-fun res!32425 () Bool)

(assert (=> b!58121 (=> (not res!32425) (not e!38263))))

(assert (=> b!58121 (= res!32425 (contains!679 lt!23289 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58121 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58122 () Bool)

(assert (=> b!58122 (= e!38259 e!38257)))

(assert (=> b!58122 (= c!7285 (and (not (= (bvand lt!22761 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22761 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4249 () Bool)

(assert (=> bm!4249 (= call!4248 call!4251)))

(declare-fun b!58123 () Bool)

(assert (=> b!58123 (= e!38256 (= (apply!65 lt!23289 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58124 () Bool)

(assert (=> b!58124 (= e!38253 call!4249)))

(declare-fun b!58125 () Bool)

(declare-fun c!7289 () Bool)

(assert (=> b!58125 (= c!7289 (and (not (= (bvand lt!22761 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22761 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58125 (= e!38257 e!38253)))

(declare-fun b!58126 () Bool)

(declare-fun res!32432 () Bool)

(assert (=> b!58126 (=> (not res!32432) (not e!38260))))

(assert (=> b!58126 (= res!32432 e!38252)))

(declare-fun c!7284 () Bool)

(assert (=> b!58126 (= c!7284 (not (= (bvand lt!22761 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58127 () Bool)

(declare-fun Unit!1526 () Unit!1491)

(assert (=> b!58127 (= e!38262 Unit!1526)))

(declare-fun b!58128 () Bool)

(assert (=> b!58128 (= e!38264 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10881 c!7286) b!58114))

(assert (= (and d!10881 (not c!7286)) b!58122))

(assert (= (and b!58122 c!7285) b!58120))

(assert (= (and b!58122 (not c!7285)) b!58125))

(assert (= (and b!58125 c!7289) b!58124))

(assert (= (and b!58125 (not c!7289)) b!58108))

(assert (= (or b!58124 b!58108) bm!4243))

(assert (= (or b!58120 bm!4243) bm!4249))

(assert (= (or b!58120 b!58124) bm!4244))

(assert (= (or b!58114 bm!4249) bm!4245))

(assert (= (or b!58114 bm!4244) bm!4248))

(assert (= (and d!10881 res!32427) b!58128))

(assert (= (and d!10881 c!7288) b!58117))

(assert (= (and d!10881 (not c!7288)) b!58127))

(assert (= (and d!10881 res!32428) b!58116))

(assert (= (and b!58116 res!32429) b!58113))

(assert (= (and b!58116 (not res!32430)) b!58121))

(assert (= (and b!58121 res!32425) b!58112))

(assert (= (and b!58116 res!32433) b!58126))

(assert (= (and b!58126 c!7284) b!58110))

(assert (= (and b!58126 (not c!7284)) b!58118))

(assert (= (and b!58110 res!32431) b!58109))

(assert (= (or b!58110 b!58118) bm!4247))

(assert (= (and b!58126 res!32432) b!58115))

(assert (= (and b!58115 c!7287) b!58111))

(assert (= (and b!58115 (not c!7287)) b!58119))

(assert (= (and b!58111 res!32426) b!58123))

(assert (= (or b!58111 b!58119) bm!4246))

(declare-fun b_lambda!2533 () Bool)

(assert (=> (not b_lambda!2533) (not b!58112)))

(assert (=> b!58112 t!4753))

(declare-fun b_and!3507 () Bool)

(assert (= b_and!3503 (and (=> t!4753 result!2353) b_and!3507)))

(assert (=> b!58112 t!4755))

(declare-fun b_and!3509 () Bool)

(assert (= b_and!3505 (and (=> t!4755 result!2355) b_and!3509)))

(assert (=> bm!4245 m!48051))

(declare-fun m!49491 () Bool)

(assert (=> bm!4245 m!49491))

(assert (=> b!58113 m!48295))

(assert (=> b!58113 m!48295))

(assert (=> b!58113 m!48297))

(declare-fun m!49493 () Bool)

(assert (=> b!58123 m!49493))

(declare-fun m!49495 () Bool)

(assert (=> bm!4246 m!49495))

(declare-fun m!49497 () Bool)

(assert (=> bm!4247 m!49497))

(declare-fun m!49499 () Bool)

(assert (=> bm!4248 m!49499))

(declare-fun m!49501 () Bool)

(assert (=> b!58117 m!49501))

(declare-fun m!49503 () Bool)

(assert (=> b!58117 m!49503))

(declare-fun m!49505 () Bool)

(assert (=> b!58117 m!49505))

(declare-fun m!49507 () Bool)

(assert (=> b!58117 m!49507))

(declare-fun m!49509 () Bool)

(assert (=> b!58117 m!49509))

(declare-fun m!49511 () Bool)

(assert (=> b!58117 m!49511))

(declare-fun m!49513 () Bool)

(assert (=> b!58117 m!49513))

(declare-fun m!49515 () Bool)

(assert (=> b!58117 m!49515))

(declare-fun m!49517 () Bool)

(assert (=> b!58117 m!49517))

(declare-fun m!49519 () Bool)

(assert (=> b!58117 m!49519))

(declare-fun m!49521 () Bool)

(assert (=> b!58117 m!49521))

(assert (=> b!58117 m!48051))

(assert (=> b!58117 m!49491))

(assert (=> b!58117 m!49519))

(assert (=> b!58117 m!48051))

(declare-fun m!49523 () Bool)

(assert (=> b!58117 m!49523))

(assert (=> b!58117 m!49515))

(assert (=> b!58117 m!49511))

(assert (=> b!58117 m!48295))

(assert (=> b!58117 m!48051))

(declare-fun m!49525 () Bool)

(assert (=> b!58117 m!49525))

(assert (=> b!58117 m!49507))

(declare-fun m!49527 () Bool)

(assert (=> b!58117 m!49527))

(declare-fun m!49529 () Bool)

(assert (=> b!58117 m!49529))

(assert (=> b!58112 m!48295))

(assert (=> b!58112 m!48393))

(assert (=> b!58112 m!48339))

(assert (=> b!58112 m!48395))

(assert (=> b!58112 m!48339))

(assert (=> b!58112 m!48295))

(declare-fun m!49531 () Bool)

(assert (=> b!58112 m!49531))

(assert (=> b!58112 m!48393))

(declare-fun m!49533 () Bool)

(assert (=> b!58114 m!49533))

(declare-fun m!49535 () Bool)

(assert (=> b!58109 m!49535))

(assert (=> b!58128 m!48295))

(assert (=> b!58128 m!48295))

(assert (=> b!58128 m!48297))

(assert (=> d!10881 m!48289))

(assert (=> b!58121 m!48295))

(assert (=> b!58121 m!48295))

(declare-fun m!49537 () Bool)

(assert (=> b!58121 m!49537))

(assert (=> d!10677 d!10881))

(assert (=> d!10677 d!10767))

(declare-fun d!10883 () Bool)

(assert (=> d!10883 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!10883 true))

(declare-fun _$8!43 () Unit!1491)

(assert (=> d!10883 (= (choose!296 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22761 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) _$8!43)))

(declare-fun bs!2521 () Bool)

(assert (= bs!2521 d!10883))

(assert (=> bs!2521 m!48121))

(assert (=> bs!2521 m!48121))

(assert (=> bs!2521 m!48747))

(assert (=> bs!2521 m!48051))

(assert (=> bs!2521 m!48745))

(assert (=> d!10677 d!10883))

(declare-fun d!10885 () Bool)

(assert (=> d!10885 (= (get!1063 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2372 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10563 d!10885))

(assert (=> d!10563 d!10717))

(declare-fun b!58147 () Bool)

(declare-fun e!38275 () SeekEntryResult!226)

(assert (=> b!58147 (= e!38275 (Intermediate!226 false (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun e!38279 () SeekEntryResult!226)

(declare-fun b!58148 () Bool)

(assert (=> b!58148 (= e!38279 (Intermediate!226 true (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!58149 () Bool)

(declare-fun lt!23310 () SeekEntryResult!226)

(assert (=> b!58149 (and (bvsge (index!3028 lt!23310) #b00000000000000000000000000000000) (bvslt (index!3028 lt!23310) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38277 () Bool)

(assert (=> b!58149 (= e!38277 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23310)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58150 () Bool)

(assert (=> b!58150 (and (bvsge (index!3028 lt!23310) #b00000000000000000000000000000000) (bvslt (index!3028 lt!23310) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32442 () Bool)

(assert (=> b!58150 (= res!32442 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23310)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!58150 (=> res!32442 e!38277)))

(declare-fun e!38278 () Bool)

(assert (=> b!58150 (= e!38278 e!38277)))

(declare-fun b!58151 () Bool)

(assert (=> b!58151 (= e!38275 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000 (mask!5896 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun d!10887 () Bool)

(declare-fun e!38276 () Bool)

(assert (=> d!10887 e!38276))

(declare-fun c!7298 () Bool)

(assert (=> d!10887 (= c!7298 (and ((_ is Intermediate!226) lt!23310) (undefined!1038 lt!23310)))))

(assert (=> d!10887 (= lt!23310 e!38279)))

(declare-fun c!7296 () Bool)

(assert (=> d!10887 (= c!7296 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!23311 () (_ BitVec 64))

(assert (=> d!10887 (= lt!23311 (select (arr!1775 (_keys!3642 newMap!16)) (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16))))))

(assert (=> d!10887 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10887 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23310)))

(declare-fun b!58152 () Bool)

(assert (=> b!58152 (= e!38276 (bvsge (x!9858 lt!23310) #b01111111111111111111111111111110))))

(declare-fun b!58153 () Bool)

(assert (=> b!58153 (= e!38276 e!38278)))

(declare-fun res!32441 () Bool)

(assert (=> b!58153 (= res!32441 (and ((_ is Intermediate!226) lt!23310) (not (undefined!1038 lt!23310)) (bvslt (x!9858 lt!23310) #b01111111111111111111111111111110) (bvsge (x!9858 lt!23310) #b00000000000000000000000000000000) (bvsge (x!9858 lt!23310) #b00000000000000000000000000000000)))))

(assert (=> b!58153 (=> (not res!32441) (not e!38278))))

(declare-fun b!58154 () Bool)

(assert (=> b!58154 (= e!38279 e!38275)))

(declare-fun c!7297 () Bool)

(assert (=> b!58154 (= c!7297 (or (= lt!23311 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (= (bvadd lt!23311 lt!23311) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58155 () Bool)

(assert (=> b!58155 (and (bvsge (index!3028 lt!23310) #b00000000000000000000000000000000) (bvslt (index!3028 lt!23310) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32440 () Bool)

(assert (=> b!58155 (= res!32440 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3028 lt!23310)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58155 (=> res!32440 e!38277)))

(assert (= (and d!10887 c!7296) b!58148))

(assert (= (and d!10887 (not c!7296)) b!58154))

(assert (= (and b!58154 c!7297) b!58147))

(assert (= (and b!58154 (not c!7297)) b!58151))

(assert (= (and d!10887 c!7298) b!58152))

(assert (= (and d!10887 (not c!7298)) b!58153))

(assert (= (and b!58153 res!32441) b!58150))

(assert (= (and b!58150 (not res!32442)) b!58155))

(assert (= (and b!58155 (not res!32440)) b!58149))

(assert (=> d!10887 m!48757))

(declare-fun m!49539 () Bool)

(assert (=> d!10887 m!49539))

(assert (=> d!10887 m!48289))

(assert (=> b!58151 m!48757))

(declare-fun m!49541 () Bool)

(assert (=> b!58151 m!49541))

(assert (=> b!58151 m!49541))

(assert (=> b!58151 m!48037))

(declare-fun m!49543 () Bool)

(assert (=> b!58151 m!49543))

(declare-fun m!49545 () Bool)

(assert (=> b!58150 m!49545))

(assert (=> b!58155 m!49545))

(assert (=> b!58149 m!49545))

(assert (=> d!10681 d!10887))

(declare-fun d!10889 () Bool)

(declare-fun lt!23317 () (_ BitVec 32))

(declare-fun lt!23316 () (_ BitVec 32))

(assert (=> d!10889 (= lt!23317 (bvmul (bvxor lt!23316 (bvlshr lt!23316 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!10889 (= lt!23316 ((_ extract 31 0) (bvand (bvxor (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvlshr (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!10889 (and (bvsge (mask!5896 newMap!16) #b00000000000000000000000000000000) (let ((res!32443 (let ((h!2006 ((_ extract 31 0) (bvand (bvxor (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvlshr (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!9962 (bvmul (bvxor h!2006 (bvlshr h!2006 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!9962 (bvlshr x!9962 #b00000000000000000000000000001101)) (mask!5896 newMap!16)))))) (and (bvslt res!32443 (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001)) (bvsge res!32443 #b00000000000000000000000000000000))))))

(assert (=> d!10889 (= (toIndex!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (mask!5896 newMap!16)) (bvand (bvxor lt!23317 (bvlshr lt!23317 #b00000000000000000000000000001101)) (mask!5896 newMap!16)))))

(assert (=> d!10681 d!10889))

(assert (=> d!10681 d!10767))

(assert (=> bm!4197 d!10667))

(assert (=> b!57493 d!10771))

(assert (=> b!57733 d!10771))

(declare-fun d!10891 () Bool)

(assert (=> d!10891 (= (isDefined!76 (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))) (not (isEmpty!291 (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))))

(declare-fun bs!2522 () Bool)

(assert (= bs!2522 d!10891))

(assert (=> bs!2522 m!48617))

(declare-fun m!49547 () Bool)

(assert (=> bs!2522 m!49547))

(assert (=> b!57640 d!10891))

(declare-fun b!58157 () Bool)

(declare-fun e!38280 () Option!129)

(declare-fun e!38281 () Option!129)

(assert (=> b!58157 (= e!38280 e!38281)))

(declare-fun c!7300 () Bool)

(assert (=> b!58157 (= c!7300 (and ((_ is Cons!1425) (toList!696 call!4148)) (not (= (_1!1019 (h!2005 (toList!696 call!4148))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))))

(declare-fun b!58156 () Bool)

(assert (=> b!58156 (= e!38280 (Some!128 (_2!1019 (h!2005 (toList!696 call!4148)))))))

(declare-fun b!58159 () Bool)

(assert (=> b!58159 (= e!38281 None!127)))

(declare-fun d!10893 () Bool)

(declare-fun c!7299 () Bool)

(assert (=> d!10893 (= c!7299 (and ((_ is Cons!1425) (toList!696 call!4148)) (= (_1!1019 (h!2005 (toList!696 call!4148))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))))

(assert (=> d!10893 (= (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))) e!38280)))

(declare-fun b!58158 () Bool)

(assert (=> b!58158 (= e!38281 (getValueByKey!123 (t!4747 (toList!696 call!4148)) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (= (and d!10893 c!7299) b!58156))

(assert (= (and d!10893 (not c!7299)) b!58157))

(assert (= (and b!58157 c!7300) b!58158))

(assert (= (and b!58157 (not c!7300)) b!58159))

(assert (=> b!58158 m!48207))

(declare-fun m!49549 () Bool)

(assert (=> b!58158 m!49549))

(assert (=> b!57640 d!10893))

(declare-fun d!10895 () Bool)

(assert (=> d!10895 (= (apply!65 lt!22788 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22788) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2523 () Bool)

(assert (= bs!2523 d!10895))

(assert (=> bs!2523 m!49283))

(assert (=> bs!2523 m!49283))

(declare-fun m!49551 () Bool)

(assert (=> bs!2523 m!49551))

(assert (=> b!57503 d!10895))

(declare-fun d!10897 () Bool)

(assert (=> d!10897 (= (get!1063 (getValueByKey!123 (toList!696 lt!22668) lt!22671)) (v!2372 (getValueByKey!123 (toList!696 lt!22668) lt!22671)))))

(assert (=> d!10613 d!10897))

(declare-fun b!58161 () Bool)

(declare-fun e!38282 () Option!129)

(declare-fun e!38283 () Option!129)

(assert (=> b!58161 (= e!38282 e!38283)))

(declare-fun c!7302 () Bool)

(assert (=> b!58161 (= c!7302 (and ((_ is Cons!1425) (toList!696 lt!22668)) (not (= (_1!1019 (h!2005 (toList!696 lt!22668))) lt!22671))))))

(declare-fun b!58160 () Bool)

(assert (=> b!58160 (= e!38282 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22668)))))))

(declare-fun b!58163 () Bool)

(assert (=> b!58163 (= e!38283 None!127)))

(declare-fun d!10899 () Bool)

(declare-fun c!7301 () Bool)

(assert (=> d!10899 (= c!7301 (and ((_ is Cons!1425) (toList!696 lt!22668)) (= (_1!1019 (h!2005 (toList!696 lt!22668))) lt!22671)))))

(assert (=> d!10899 (= (getValueByKey!123 (toList!696 lt!22668) lt!22671) e!38282)))

(declare-fun b!58162 () Bool)

(assert (=> b!58162 (= e!38283 (getValueByKey!123 (t!4747 (toList!696 lt!22668)) lt!22671))))

(assert (= (and d!10899 c!7301) b!58160))

(assert (= (and d!10899 (not c!7301)) b!58161))

(assert (= (and b!58161 c!7302) b!58162))

(assert (= (and b!58161 (not c!7302)) b!58163))

(declare-fun m!49553 () Bool)

(assert (=> b!58162 m!49553))

(assert (=> d!10613 d!10899))

(declare-fun d!10901 () Bool)

(assert (=> d!10901 (= (apply!65 lt!22788 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22788) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2524 () Bool)

(assert (= bs!2524 d!10901))

(assert (=> bs!2524 m!49187))

(assert (=> bs!2524 m!49187))

(declare-fun m!49555 () Bool)

(assert (=> bs!2524 m!49555))

(assert (=> b!57489 d!10901))

(declare-fun d!10903 () Bool)

(declare-fun lt!23318 () Bool)

(assert (=> d!10903 (= lt!23318 (select (content!62 (toList!696 lt!22857)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!38285 () Bool)

(assert (=> d!10903 (= lt!23318 e!38285)))

(declare-fun res!32444 () Bool)

(assert (=> d!10903 (=> (not res!32444) (not e!38285))))

(assert (=> d!10903 (= res!32444 ((_ is Cons!1425) (toList!696 lt!22857)))))

(assert (=> d!10903 (= (contains!681 (toList!696 lt!22857) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23318)))

(declare-fun b!58164 () Bool)

(declare-fun e!38284 () Bool)

(assert (=> b!58164 (= e!38285 e!38284)))

(declare-fun res!32445 () Bool)

(assert (=> b!58164 (=> res!32445 e!38284)))

(assert (=> b!58164 (= res!32445 (= (h!2005 (toList!696 lt!22857)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58165 () Bool)

(assert (=> b!58165 (= e!38284 (contains!681 (t!4747 (toList!696 lt!22857)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10903 res!32444) b!58164))

(assert (= (and b!58164 (not res!32445)) b!58165))

(declare-fun m!49557 () Bool)

(assert (=> d!10903 m!49557))

(declare-fun m!49559 () Bool)

(assert (=> d!10903 m!49559))

(declare-fun m!49561 () Bool)

(assert (=> b!58165 m!49561))

(assert (=> b!57561 d!10903))

(declare-fun d!10905 () Bool)

(assert (=> d!10905 (= (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!291 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2525 () Bool)

(assert (= bs!2525 d!10905))

(assert (=> bs!2525 m!48637))

(declare-fun m!49563 () Bool)

(assert (=> bs!2525 m!49563))

(assert (=> b!57649 d!10905))

(declare-fun b!58167 () Bool)

(declare-fun e!38286 () Option!129)

(declare-fun e!38287 () Option!129)

(assert (=> b!58167 (= e!38286 e!38287)))

(declare-fun c!7304 () Bool)

(assert (=> b!58167 (= c!7304 (and ((_ is Cons!1425) (toList!696 lt!22664)) (not (= (_1!1019 (h!2005 (toList!696 lt!22664))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!58166 () Bool)

(assert (=> b!58166 (= e!38286 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22664)))))))

(declare-fun b!58169 () Bool)

(assert (=> b!58169 (= e!38287 None!127)))

(declare-fun c!7303 () Bool)

(declare-fun d!10907 () Bool)

(assert (=> d!10907 (= c!7303 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10907 (= (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38286)))

(declare-fun b!58168 () Bool)

(assert (=> b!58168 (= e!38287 (getValueByKey!123 (t!4747 (toList!696 lt!22664)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!10907 c!7303) b!58166))

(assert (= (and d!10907 (not c!7303)) b!58167))

(assert (= (and b!58167 c!7304) b!58168))

(assert (= (and b!58167 (not c!7304)) b!58169))

(assert (=> b!58168 m!48125))

(declare-fun m!49565 () Bool)

(assert (=> b!58168 m!49565))

(assert (=> b!57649 d!10907))

(declare-fun b!58170 () Bool)

(declare-fun e!38289 () Bool)

(declare-fun e!38291 () Bool)

(assert (=> b!58170 (= e!38289 e!38291)))

(declare-fun c!7305 () Bool)

(assert (=> b!58170 (= c!7305 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4250 () Bool)

(declare-fun call!4253 () Bool)

(assert (=> bm!4250 (= call!4253 (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7305 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000) Nil!1425) Nil!1425)))))

(declare-fun b!58171 () Bool)

(assert (=> b!58171 (= e!38291 call!4253)))

(declare-fun b!58172 () Bool)

(declare-fun e!38288 () Bool)

(assert (=> b!58172 (= e!38288 e!38289)))

(declare-fun res!32447 () Bool)

(assert (=> b!58172 (=> (not res!32447) (not e!38289))))

(declare-fun e!38290 () Bool)

(assert (=> b!58172 (= res!32447 (not e!38290))))

(declare-fun res!32448 () Bool)

(assert (=> b!58172 (=> (not res!32448) (not e!38290))))

(assert (=> b!58172 (= res!32448 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!58173 () Bool)

(assert (=> b!58173 (= e!38290 (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!10909 () Bool)

(declare-fun res!32446 () Bool)

(assert (=> d!10909 (=> res!32446 e!38288)))

(assert (=> d!10909 (= res!32446 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10909 (= (arrayNoDuplicates!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 Nil!1425) e!38288)))

(declare-fun b!58174 () Bool)

(assert (=> b!58174 (= e!38291 call!4253)))

(assert (= (and d!10909 (not res!32446)) b!58172))

(assert (= (and b!58172 res!32448) b!58173))

(assert (= (and b!58172 res!32447) b!58170))

(assert (= (and b!58170 c!7305) b!58174))

(assert (= (and b!58170 (not c!7305)) b!58171))

(assert (= (or b!58174 b!58171) bm!4250))

(assert (=> b!58170 m!49119))

(assert (=> b!58170 m!49119))

(assert (=> b!58170 m!49129))

(assert (=> bm!4250 m!49119))

(declare-fun m!49567 () Bool)

(assert (=> bm!4250 m!49567))

(assert (=> b!58172 m!49119))

(assert (=> b!58172 m!49119))

(assert (=> b!58172 m!49129))

(assert (=> b!58173 m!49119))

(assert (=> b!58173 m!49119))

(declare-fun m!49569 () Bool)

(assert (=> b!58173 m!49569))

(assert (=> b!57559 d!10909))

(declare-fun d!10911 () Bool)

(declare-fun e!38292 () Bool)

(assert (=> d!10911 e!38292))

(declare-fun res!32449 () Bool)

(assert (=> d!10911 (=> res!32449 e!38292)))

(declare-fun lt!23320 () Bool)

(assert (=> d!10911 (= res!32449 (not lt!23320))))

(declare-fun lt!23322 () Bool)

(assert (=> d!10911 (= lt!23320 lt!23322)))

(declare-fun lt!23321 () Unit!1491)

(declare-fun e!38293 () Unit!1491)

(assert (=> d!10911 (= lt!23321 e!38293)))

(declare-fun c!7306 () Bool)

(assert (=> d!10911 (= c!7306 lt!23322)))

(assert (=> d!10911 (= lt!23322 (containsKey!127 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10911 (= (contains!679 lt!22906 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23320)))

(declare-fun b!58175 () Bool)

(declare-fun lt!23319 () Unit!1491)

(assert (=> b!58175 (= e!38293 lt!23319)))

(assert (=> b!58175 (= lt!23319 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> b!58175 (isDefined!76 (getValueByKey!123 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58176 () Bool)

(declare-fun Unit!1527 () Unit!1491)

(assert (=> b!58176 (= e!38293 Unit!1527)))

(declare-fun b!58177 () Bool)

(assert (=> b!58177 (= e!38292 (isDefined!76 (getValueByKey!123 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10911 c!7306) b!58175))

(assert (= (and d!10911 (not c!7306)) b!58176))

(assert (= (and d!10911 (not res!32449)) b!58177))

(declare-fun m!49571 () Bool)

(assert (=> d!10911 m!49571))

(declare-fun m!49573 () Bool)

(assert (=> b!58175 m!49573))

(assert (=> b!58175 m!48555))

(assert (=> b!58175 m!48555))

(declare-fun m!49575 () Bool)

(assert (=> b!58175 m!49575))

(assert (=> b!58177 m!48555))

(assert (=> b!58177 m!48555))

(assert (=> b!58177 m!49575))

(assert (=> d!10625 d!10911))

(declare-fun b!58179 () Bool)

(declare-fun e!38294 () Option!129)

(declare-fun e!38295 () Option!129)

(assert (=> b!58179 (= e!38294 e!38295)))

(declare-fun c!7308 () Bool)

(assert (=> b!58179 (= c!7308 (and ((_ is Cons!1425) lt!22905) (not (= (_1!1019 (h!2005 lt!22905)) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58178 () Bool)

(assert (=> b!58178 (= e!38294 (Some!128 (_2!1019 (h!2005 lt!22905))))))

(declare-fun b!58181 () Bool)

(assert (=> b!58181 (= e!38295 None!127)))

(declare-fun c!7307 () Bool)

(declare-fun d!10913 () Bool)

(assert (=> d!10913 (= c!7307 (and ((_ is Cons!1425) lt!22905) (= (_1!1019 (h!2005 lt!22905)) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10913 (= (getValueByKey!123 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38294)))

(declare-fun b!58180 () Bool)

(assert (=> b!58180 (= e!38295 (getValueByKey!123 (t!4747 lt!22905) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10913 c!7307) b!58178))

(assert (= (and d!10913 (not c!7307)) b!58179))

(assert (= (and b!58179 c!7308) b!58180))

(assert (= (and b!58179 (not c!7308)) b!58181))

(declare-fun m!49577 () Bool)

(assert (=> b!58180 m!49577))

(assert (=> d!10625 d!10913))

(declare-fun d!10915 () Bool)

(assert (=> d!10915 (= (getValueByKey!123 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!23323 () Unit!1491)

(assert (=> d!10915 (= lt!23323 (choose!297 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38296 () Bool)

(assert (=> d!10915 e!38296))

(declare-fun res!32450 () Bool)

(assert (=> d!10915 (=> (not res!32450) (not e!38296))))

(assert (=> d!10915 (= res!32450 (isStrictlySorted!283 lt!22905))))

(assert (=> d!10915 (= (lemmaContainsTupThenGetReturnValue!40 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23323)))

(declare-fun b!58182 () Bool)

(declare-fun res!32451 () Bool)

(assert (=> b!58182 (=> (not res!32451) (not e!38296))))

(assert (=> b!58182 (= res!32451 (containsKey!127 lt!22905 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58183 () Bool)

(assert (=> b!58183 (= e!38296 (contains!681 lt!22905 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10915 res!32450) b!58182))

(assert (= (and b!58182 res!32451) b!58183))

(assert (=> d!10915 m!48549))

(declare-fun m!49579 () Bool)

(assert (=> d!10915 m!49579))

(declare-fun m!49581 () Bool)

(assert (=> d!10915 m!49581))

(declare-fun m!49583 () Bool)

(assert (=> b!58182 m!49583))

(declare-fun m!49585 () Bool)

(assert (=> b!58183 m!49585))

(assert (=> d!10625 d!10915))

(declare-fun c!7309 () Bool)

(declare-fun e!38298 () List!1429)

(declare-fun bm!4251 () Bool)

(declare-fun call!4256 () List!1429)

(assert (=> bm!4251 (= call!4256 ($colon$colon!59 e!38298 (ite c!7309 (h!2005 (toList!696 lt!22669)) (tuple2!2017 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun c!7312 () Bool)

(assert (=> bm!4251 (= c!7312 c!7309)))

(declare-fun b!58184 () Bool)

(declare-fun e!38301 () List!1429)

(declare-fun call!4255 () List!1429)

(assert (=> b!58184 (= e!38301 call!4255)))

(declare-fun d!10917 () Bool)

(declare-fun e!38297 () Bool)

(assert (=> d!10917 e!38297))

(declare-fun res!32452 () Bool)

(assert (=> d!10917 (=> (not res!32452) (not e!38297))))

(declare-fun lt!23324 () List!1429)

(assert (=> d!10917 (= res!32452 (isStrictlySorted!283 lt!23324))))

(declare-fun e!38300 () List!1429)

(assert (=> d!10917 (= lt!23324 e!38300)))

(assert (=> d!10917 (= c!7309 (and ((_ is Cons!1425) (toList!696 lt!22669)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22669))) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10917 (isStrictlySorted!283 (toList!696 lt!22669))))

(assert (=> d!10917 (= (insertStrictlySorted!43 (toList!696 lt!22669) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23324)))

(declare-fun b!58185 () Bool)

(assert (=> b!58185 (= e!38300 call!4256)))

(declare-fun b!58186 () Bool)

(declare-fun e!38299 () List!1429)

(assert (=> b!58186 (= e!38300 e!38299)))

(declare-fun c!7311 () Bool)

(assert (=> b!58186 (= c!7311 (and ((_ is Cons!1425) (toList!696 lt!22669)) (= (_1!1019 (h!2005 (toList!696 lt!22669))) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58187 () Bool)

(assert (=> b!58187 (= e!38297 (contains!681 lt!23324 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun bm!4252 () Bool)

(declare-fun call!4254 () List!1429)

(assert (=> bm!4252 (= call!4254 call!4256)))

(declare-fun b!58188 () Bool)

(assert (=> b!58188 (= e!38298 (insertStrictlySorted!43 (t!4747 (toList!696 lt!22669)) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58189 () Bool)

(declare-fun res!32453 () Bool)

(assert (=> b!58189 (=> (not res!32453) (not e!38297))))

(assert (=> b!58189 (= res!32453 (containsKey!127 lt!23324 (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58190 () Bool)

(assert (=> b!58190 (= e!38299 call!4254)))

(declare-fun b!58191 () Bool)

(declare-fun c!7310 () Bool)

(assert (=> b!58191 (= e!38298 (ite c!7311 (t!4747 (toList!696 lt!22669)) (ite c!7310 (Cons!1425 (h!2005 (toList!696 lt!22669)) (t!4747 (toList!696 lt!22669))) Nil!1426)))))

(declare-fun b!58192 () Bool)

(assert (=> b!58192 (= e!38301 call!4255)))

(declare-fun b!58193 () Bool)

(assert (=> b!58193 (= c!7310 (and ((_ is Cons!1425) (toList!696 lt!22669)) (bvsgt (_1!1019 (h!2005 (toList!696 lt!22669))) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!58193 (= e!38299 e!38301)))

(declare-fun bm!4253 () Bool)

(assert (=> bm!4253 (= call!4255 call!4254)))

(assert (= (and d!10917 c!7309) b!58185))

(assert (= (and d!10917 (not c!7309)) b!58186))

(assert (= (and b!58186 c!7311) b!58190))

(assert (= (and b!58186 (not c!7311)) b!58193))

(assert (= (and b!58193 c!7310) b!58184))

(assert (= (and b!58193 (not c!7310)) b!58192))

(assert (= (or b!58184 b!58192) bm!4253))

(assert (= (or b!58190 bm!4253) bm!4252))

(assert (= (or b!58185 bm!4252) bm!4251))

(assert (= (and bm!4251 c!7312) b!58188))

(assert (= (and bm!4251 (not c!7312)) b!58191))

(assert (= (and d!10917 res!32452) b!58189))

(assert (= (and b!58189 res!32453) b!58187))

(declare-fun m!49587 () Bool)

(assert (=> b!58189 m!49587))

(declare-fun m!49589 () Bool)

(assert (=> b!58188 m!49589))

(declare-fun m!49591 () Bool)

(assert (=> d!10917 m!49591))

(declare-fun m!49593 () Bool)

(assert (=> d!10917 m!49593))

(declare-fun m!49595 () Bool)

(assert (=> b!58187 m!49595))

(declare-fun m!49597 () Bool)

(assert (=> bm!4251 m!49597))

(assert (=> d!10625 d!10917))

(assert (=> d!10653 d!10681))

(declare-fun call!4261 () Bool)

(declare-fun bm!4258 () Bool)

(assert (=> bm!4258 (= call!4261 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!10919 () Bool)

(declare-fun e!38310 () Bool)

(assert (=> d!10919 e!38310))

(declare-fun c!7317 () Bool)

(declare-fun lt!23327 () SeekEntryResult!226)

(assert (=> d!10919 (= c!7317 ((_ is MissingZero!226) lt!23327))))

(assert (=> d!10919 (= lt!23327 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10919 true))

(declare-fun _$34!755 () Unit!1491)

(assert (=> d!10919 (= (choose!294 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) _$34!755)))

(declare-fun b!58210 () Bool)

(declare-fun e!38312 () Bool)

(assert (=> b!58210 (= e!38312 ((_ is Undefined!226) lt!23327))))

(declare-fun call!4262 () Bool)

(declare-fun bm!4259 () Bool)

(assert (=> bm!4259 (= call!4262 (inRange!0 (ite c!7317 (index!3026 lt!23327) (index!3029 lt!23327)) (mask!5896 newMap!16)))))

(declare-fun b!58211 () Bool)

(declare-fun res!32462 () Bool)

(assert (=> b!58211 (= res!32462 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3026 lt!23327)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38311 () Bool)

(assert (=> b!58211 (=> (not res!32462) (not e!38311))))

(declare-fun b!58212 () Bool)

(assert (=> b!58212 (= e!38311 (not call!4261))))

(declare-fun b!58213 () Bool)

(declare-fun res!32463 () Bool)

(declare-fun e!38313 () Bool)

(assert (=> b!58213 (=> (not res!32463) (not e!38313))))

(assert (=> b!58213 (= res!32463 call!4262)))

(assert (=> b!58213 (= e!38312 e!38313)))

(declare-fun b!58214 () Bool)

(assert (=> b!58214 (= e!38310 e!38312)))

(declare-fun c!7318 () Bool)

(assert (=> b!58214 (= c!7318 ((_ is MissingVacant!226) lt!23327))))

(declare-fun b!58215 () Bool)

(assert (=> b!58215 (= e!38313 (not call!4261))))

(declare-fun b!58216 () Bool)

(assert (=> b!58216 (= e!38310 e!38311)))

(declare-fun res!32464 () Bool)

(assert (=> b!58216 (= res!32464 call!4262)))

(assert (=> b!58216 (=> (not res!32464) (not e!38311))))

(declare-fun b!58217 () Bool)

(declare-fun res!32465 () Bool)

(assert (=> b!58217 (=> (not res!32465) (not e!38313))))

(assert (=> b!58217 (= res!32465 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3029 lt!23327)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10919 c!7317) b!58216))

(assert (= (and d!10919 (not c!7317)) b!58214))

(assert (= (and b!58216 res!32464) b!58211))

(assert (= (and b!58211 res!32462) b!58212))

(assert (= (and b!58214 c!7318) b!58213))

(assert (= (and b!58214 (not c!7318)) b!58210))

(assert (= (and b!58213 res!32463) b!58217))

(assert (= (and b!58217 res!32465) b!58215))

(assert (= (or b!58216 b!58213) bm!4259))

(assert (= (or b!58212 b!58215) bm!4258))

(declare-fun m!49599 () Bool)

(assert (=> bm!4259 m!49599))

(declare-fun m!49601 () Bool)

(assert (=> b!58211 m!49601))

(declare-fun m!49603 () Bool)

(assert (=> b!58217 m!49603))

(assert (=> bm!4258 m!48037))

(assert (=> bm!4258 m!48229))

(assert (=> d!10919 m!48037))

(assert (=> d!10919 m!48203))

(assert (=> d!10653 d!10919))

(assert (=> d!10653 d!10767))

(assert (=> b!57815 d!10771))

(declare-fun d!10921 () Bool)

(assert (=> d!10921 (= (apply!65 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2526 () Bool)

(assert (= bs!2526 d!10921))

(declare-fun m!49605 () Bool)

(assert (=> bs!2526 m!49605))

(assert (=> bs!2526 m!49605))

(declare-fun m!49607 () Bool)

(assert (=> bs!2526 m!49607))

(assert (=> b!57530 d!10921))

(declare-fun d!10923 () Bool)

(assert (=> d!10923 (= (apply!65 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1063 (getValueByKey!123 (toList!696 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2527 () Bool)

(assert (= bs!2527 d!10923))

(declare-fun m!49609 () Bool)

(assert (=> bs!2527 m!49609))

(assert (=> bs!2527 m!49609))

(declare-fun m!49611 () Bool)

(assert (=> bs!2527 m!49611))

(assert (=> b!57516 d!10923))

(assert (=> d!10575 d!10767))

(declare-fun d!10925 () Bool)

(assert (=> d!10925 (= (isDefined!76 (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) (not (isEmpty!291 (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun bs!2528 () Bool)

(assert (= bs!2528 d!10925))

(assert (=> bs!2528 m!48435))

(declare-fun m!49613 () Bool)

(assert (=> bs!2528 m!49613))

(assert (=> b!57556 d!10925))

(declare-fun b!58219 () Bool)

(declare-fun e!38314 () Option!129)

(declare-fun e!38315 () Option!129)

(assert (=> b!58219 (= e!38314 e!38315)))

(declare-fun c!7320 () Bool)

(assert (=> b!58219 (= c!7320 (and ((_ is Cons!1425) (toList!696 e!37836)) (not (= (_1!1019 (h!2005 (toList!696 e!37836))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun b!58218 () Bool)

(assert (=> b!58218 (= e!38314 (Some!128 (_2!1019 (h!2005 (toList!696 e!37836)))))))

(declare-fun b!58221 () Bool)

(assert (=> b!58221 (= e!38315 None!127)))

(declare-fun d!10927 () Bool)

(declare-fun c!7319 () Bool)

(assert (=> d!10927 (= c!7319 (and ((_ is Cons!1425) (toList!696 e!37836)) (= (_1!1019 (h!2005 (toList!696 e!37836))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10927 (= (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38314)))

(declare-fun b!58220 () Bool)

(assert (=> b!58220 (= e!38315 (getValueByKey!123 (t!4747 (toList!696 e!37836)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10927 c!7319) b!58218))

(assert (= (and d!10927 (not c!7319)) b!58219))

(assert (= (and b!58219 c!7320) b!58220))

(assert (= (and b!58219 (not c!7320)) b!58221))

(assert (=> b!58220 m!48037))

(declare-fun m!49615 () Bool)

(assert (=> b!58220 m!49615))

(assert (=> b!57556 d!10927))

(declare-fun b!58222 () Bool)

(declare-fun e!38319 () ListLongMap!1361)

(declare-fun call!4263 () ListLongMap!1361)

(assert (=> b!58222 (= e!38319 call!4263)))

(declare-fun b!58224 () Bool)

(assert (=> b!58224 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> b!58224 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38321 () Bool)

(declare-fun lt!23331 () ListLongMap!1361)

(assert (=> b!58224 (= e!38321 (= (apply!65 lt!23331 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58225 () Bool)

(declare-fun e!38322 () Bool)

(assert (=> b!58225 (= e!38322 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!58225 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!58226 () Bool)

(declare-fun e!38317 () Bool)

(declare-fun e!38318 () Bool)

(assert (=> b!58226 (= e!38317 e!38318)))

(declare-fun c!7322 () Bool)

(assert (=> b!58226 (= c!7322 e!38322)))

(declare-fun res!32469 () Bool)

(assert (=> b!58226 (=> (not res!32469) (not e!38322))))

(assert (=> b!58226 (= res!32469 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58227 () Bool)

(declare-fun e!38320 () ListLongMap!1361)

(assert (=> b!58227 (= e!38320 e!38319)))

(declare-fun c!7321 () Bool)

(assert (=> b!58227 (= c!7321 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!58228 () Bool)

(declare-fun e!38316 () Bool)

(assert (=> b!58228 (= e!38318 e!38316)))

(declare-fun c!7324 () Bool)

(assert (=> b!58228 (= c!7324 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun d!10929 () Bool)

(assert (=> d!10929 e!38317))

(declare-fun res!32468 () Bool)

(assert (=> d!10929 (=> (not res!32468) (not e!38317))))

(assert (=> d!10929 (= res!32468 (not (contains!679 lt!23331 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10929 (= lt!23331 e!38320)))

(declare-fun c!7323 () Bool)

(assert (=> d!10929 (= c!7323 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!10929 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992))))))

(assert (=> d!10929 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))) lt!23331)))

(declare-fun b!58223 () Bool)

(assert (=> b!58223 (= e!38318 e!38321)))

(assert (=> b!58223 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun res!32467 () Bool)

(assert (=> b!58223 (= res!32467 (contains!679 lt!23331 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!58223 (=> (not res!32467) (not e!38321))))

(declare-fun b!58229 () Bool)

(assert (=> b!58229 (= e!38320 (ListLongMap!1362 Nil!1426))))

(declare-fun b!58230 () Bool)

(assert (=> b!58230 (= e!38316 (= lt!23331 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58231 () Bool)

(assert (=> b!58231 (= e!38316 (isEmpty!290 lt!23331))))

(declare-fun bm!4260 () Bool)

(assert (=> bm!4260 (= call!4263 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (_values!2005 (v!2368 (underlying!224 thiss!992))) (mask!5896 (v!2368 (underlying!224 thiss!992))) (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) (minValue!1940 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!58232 () Bool)

(declare-fun res!32466 () Bool)

(assert (=> b!58232 (=> (not res!32466) (not e!38317))))

(assert (=> b!58232 (= res!32466 (not (contains!679 lt!23331 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58233 () Bool)

(declare-fun lt!23332 () Unit!1491)

(declare-fun lt!23334 () Unit!1491)

(assert (=> b!58233 (= lt!23332 lt!23334)))

(declare-fun lt!23330 () ListLongMap!1361)

(declare-fun lt!23328 () (_ BitVec 64))

(declare-fun lt!23333 () (_ BitVec 64))

(declare-fun lt!23329 () V!2835)

(assert (=> b!58233 (not (contains!679 (+!80 lt!23330 (tuple2!2017 lt!23333 lt!23329)) lt!23328))))

(assert (=> b!58233 (= lt!23334 (addStillNotContains!14 lt!23330 lt!23333 lt!23329 lt!23328))))

(assert (=> b!58233 (= lt!23328 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58233 (= lt!23329 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58233 (= lt!23333 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!58233 (= lt!23330 call!4263)))

(assert (=> b!58233 (= e!38319 (+!80 call!4263 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10929 c!7323) b!58229))

(assert (= (and d!10929 (not c!7323)) b!58227))

(assert (= (and b!58227 c!7321) b!58233))

(assert (= (and b!58227 (not c!7321)) b!58222))

(assert (= (or b!58233 b!58222) bm!4260))

(assert (= (and d!10929 res!32468) b!58232))

(assert (= (and b!58232 res!32466) b!58226))

(assert (= (and b!58226 res!32469) b!58225))

(assert (= (and b!58226 c!7322) b!58223))

(assert (= (and b!58226 (not c!7322)) b!58228))

(assert (= (and b!58223 res!32467) b!58224))

(assert (= (and b!58228 c!7324) b!58230))

(assert (= (and b!58228 (not c!7324)) b!58231))

(declare-fun b_lambda!2535 () Bool)

(assert (=> (not b_lambda!2535) (not b!58224)))

(assert (=> b!58224 t!4743))

(declare-fun b_and!3511 () Bool)

(assert (= b_and!3507 (and (=> t!4743 result!2339) b_and!3511)))

(assert (=> b!58224 t!4745))

(declare-fun b_and!3513 () Bool)

(assert (= b_and!3509 (and (=> t!4745 result!2343) b_and!3513)))

(declare-fun b_lambda!2537 () Bool)

(assert (=> (not b_lambda!2537) (not b!58233)))

(assert (=> b!58233 t!4743))

(declare-fun b_and!3515 () Bool)

(assert (= b_and!3511 (and (=> t!4743 result!2339) b_and!3515)))

(assert (=> b!58233 t!4745))

(declare-fun b_and!3517 () Bool)

(assert (= b_and!3513 (and (=> t!4745 result!2343) b_and!3517)))

(declare-fun m!49617 () Bool)

(assert (=> b!58232 m!49617))

(declare-fun m!49619 () Bool)

(assert (=> d!10929 m!49619))

(assert (=> d!10929 m!48073))

(assert (=> b!58225 m!48769))

(assert (=> b!58225 m!48769))

(declare-fun m!49621 () Bool)

(assert (=> b!58225 m!49621))

(declare-fun m!49623 () Bool)

(assert (=> b!58230 m!49623))

(assert (=> b!58223 m!48769))

(assert (=> b!58223 m!48769))

(declare-fun m!49625 () Bool)

(assert (=> b!58223 m!49625))

(assert (=> bm!4260 m!49623))

(declare-fun m!49627 () Bool)

(assert (=> b!58231 m!49627))

(declare-fun m!49629 () Bool)

(assert (=> b!58233 m!49629))

(declare-fun m!49631 () Bool)

(assert (=> b!58233 m!49631))

(declare-fun m!49633 () Bool)

(assert (=> b!58233 m!49633))

(assert (=> b!58233 m!48049))

(declare-fun m!49635 () Bool)

(assert (=> b!58233 m!49635))

(assert (=> b!58233 m!49629))

(declare-fun m!49637 () Bool)

(assert (=> b!58233 m!49637))

(assert (=> b!58233 m!49633))

(assert (=> b!58233 m!48049))

(assert (=> b!58233 m!48769))

(declare-fun m!49639 () Bool)

(assert (=> b!58233 m!49639))

(assert (=> b!58224 m!48769))

(assert (=> b!58224 m!49633))

(assert (=> b!58224 m!48049))

(assert (=> b!58224 m!49635))

(assert (=> b!58224 m!49633))

(assert (=> b!58224 m!48049))

(assert (=> b!58224 m!48769))

(declare-fun m!49641 () Bool)

(assert (=> b!58224 m!49641))

(assert (=> b!58227 m!48769))

(assert (=> b!58227 m!48769))

(assert (=> b!58227 m!49621))

(assert (=> b!57614 d!10929))

(assert (=> b!57513 d!10553))

(declare-fun b!58234 () Bool)

(declare-fun e!38323 () (_ BitVec 32))

(declare-fun e!38324 () (_ BitVec 32))

(assert (=> b!58234 (= e!38323 e!38324)))

(declare-fun c!7325 () Bool)

(assert (=> b!58234 (= c!7325 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58235 () Bool)

(declare-fun call!4264 () (_ BitVec 32))

(assert (=> b!58235 (= e!38324 (bvadd #b00000000000000000000000000000001 call!4264))))

(declare-fun b!58236 () Bool)

(assert (=> b!58236 (= e!38324 call!4264)))

(declare-fun d!10931 () Bool)

(declare-fun lt!23335 () (_ BitVec 32))

(assert (=> d!10931 (and (bvsge lt!23335 #b00000000000000000000000000000000) (bvsle lt!23335 (bvsub (size!2004 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!10931 (= lt!23335 e!38323)))

(declare-fun c!7326 () Bool)

(assert (=> d!10931 (= c!7326 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10931 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2004 (_keys!3642 newMap!16)) (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10931 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))) lt!23335)))

(declare-fun b!58237 () Bool)

(assert (=> b!58237 (= e!38323 #b00000000000000000000000000000000)))

(declare-fun bm!4261 () Bool)

(assert (=> bm!4261 (= call!4264 (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (= (and d!10931 c!7326) b!58237))

(assert (= (and d!10931 (not c!7326)) b!58234))

(assert (= (and b!58234 c!7325) b!58235))

(assert (= (and b!58234 (not c!7325)) b!58236))

(assert (= (or b!58235 b!58236) bm!4261))

(assert (=> b!58234 m!48835))

(assert (=> b!58234 m!48835))

(assert (=> b!58234 m!48845))

(declare-fun m!49643 () Bool)

(assert (=> bm!4261 m!49643))

(assert (=> bm!4200 d!10931))

(declare-fun d!10933 () Bool)

(assert (=> d!10933 (= (isDefined!76 (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) (not (isEmpty!291 (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun bs!2529 () Bool)

(assert (= bs!2529 d!10933))

(assert (=> bs!2529 m!48711))

(declare-fun m!49645 () Bool)

(assert (=> bs!2529 m!49645))

(assert (=> b!57739 d!10933))

(declare-fun b!58239 () Bool)

(declare-fun e!38325 () Option!129)

(declare-fun e!38326 () Option!129)

(assert (=> b!58239 (= e!38325 e!38326)))

(declare-fun c!7328 () Bool)

(assert (=> b!58239 (= c!7328 (and ((_ is Cons!1425) (toList!696 call!4150)) (not (= (_1!1019 (h!2005 (toList!696 call!4150))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun b!58238 () Bool)

(assert (=> b!58238 (= e!38325 (Some!128 (_2!1019 (h!2005 (toList!696 call!4150)))))))

(declare-fun b!58241 () Bool)

(assert (=> b!58241 (= e!38326 None!127)))

(declare-fun d!10935 () Bool)

(declare-fun c!7327 () Bool)

(assert (=> d!10935 (= c!7327 (and ((_ is Cons!1425) (toList!696 call!4150)) (= (_1!1019 (h!2005 (toList!696 call!4150))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10935 (= (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38325)))

(declare-fun b!58240 () Bool)

(assert (=> b!58240 (= e!38326 (getValueByKey!123 (t!4747 (toList!696 call!4150)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10935 c!7327) b!58238))

(assert (= (and d!10935 (not c!7327)) b!58239))

(assert (= (and b!58239 c!7328) b!58240))

(assert (= (and b!58239 (not c!7328)) b!58241))

(assert (=> b!58240 m!48037))

(declare-fun m!49647 () Bool)

(assert (=> b!58240 m!49647))

(assert (=> b!57739 d!10935))

(declare-fun b!58242 () Bool)

(declare-fun e!38328 () Bool)

(declare-fun e!38330 () Bool)

(assert (=> b!58242 (= e!38328 e!38330)))

(declare-fun c!7329 () Bool)

(assert (=> b!58242 (= c!7329 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun call!4265 () Bool)

(declare-fun bm!4262 () Bool)

(assert (=> bm!4262 (= call!4265 (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7329 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7174 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1425) Nil!1425)) (ite c!7174 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1425) Nil!1425))))))

(declare-fun b!58243 () Bool)

(assert (=> b!58243 (= e!38330 call!4265)))

(declare-fun b!58244 () Bool)

(declare-fun e!38327 () Bool)

(assert (=> b!58244 (= e!38327 e!38328)))

(declare-fun res!32471 () Bool)

(assert (=> b!58244 (=> (not res!32471) (not e!38328))))

(declare-fun e!38329 () Bool)

(assert (=> b!58244 (= res!32471 (not e!38329))))

(declare-fun res!32472 () Bool)

(assert (=> b!58244 (=> (not res!32472) (not e!38329))))

(assert (=> b!58244 (= res!32472 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58245 () Bool)

(assert (=> b!58245 (= e!38329 (contains!680 (ite c!7174 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1425) Nil!1425) (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!10937 () Bool)

(declare-fun res!32470 () Bool)

(assert (=> d!10937 (=> res!32470 e!38327)))

(assert (=> d!10937 (= res!32470 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10937 (= (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7174 (Cons!1424 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1425) Nil!1425)) e!38327)))

(declare-fun b!58246 () Bool)

(assert (=> b!58246 (= e!38330 call!4265)))

(assert (= (and d!10937 (not res!32470)) b!58244))

(assert (= (and b!58244 res!32472) b!58245))

(assert (= (and b!58244 res!32471) b!58242))

(assert (= (and b!58242 c!7329) b!58246))

(assert (= (and b!58242 (not c!7329)) b!58243))

(assert (= (or b!58246 b!58243) bm!4262))

(assert (=> b!58242 m!48835))

(assert (=> b!58242 m!48835))

(assert (=> b!58242 m!48845))

(assert (=> bm!4262 m!48835))

(declare-fun m!49649 () Bool)

(assert (=> bm!4262 m!49649))

(assert (=> b!58244 m!48835))

(assert (=> b!58244 m!48835))

(assert (=> b!58244 m!48845))

(assert (=> b!58245 m!48835))

(assert (=> b!58245 m!48835))

(declare-fun m!49651 () Bool)

(assert (=> b!58245 m!49651))

(assert (=> bm!4201 d!10937))

(declare-fun lt!23336 () Bool)

(declare-fun d!10939 () Bool)

(assert (=> d!10939 (= lt!23336 (select (content!62 (toList!696 lt!22902)) (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38332 () Bool)

(assert (=> d!10939 (= lt!23336 e!38332)))

(declare-fun res!32473 () Bool)

(assert (=> d!10939 (=> (not res!32473) (not e!38332))))

(assert (=> d!10939 (= res!32473 ((_ is Cons!1425) (toList!696 lt!22902)))))

(assert (=> d!10939 (= (contains!681 (toList!696 lt!22902) (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!23336)))

(declare-fun b!58247 () Bool)

(declare-fun e!38331 () Bool)

(assert (=> b!58247 (= e!38332 e!38331)))

(declare-fun res!32474 () Bool)

(assert (=> b!58247 (=> res!32474 e!38331)))

(assert (=> b!58247 (= res!32474 (= (h!2005 (toList!696 lt!22902)) (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58248 () Bool)

(assert (=> b!58248 (= e!38331 (contains!681 (t!4747 (toList!696 lt!22902)) (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!10939 res!32473) b!58247))

(assert (= (and b!58247 (not res!32474)) b!58248))

(declare-fun m!49653 () Bool)

(assert (=> d!10939 m!49653))

(declare-fun m!49655 () Bool)

(assert (=> d!10939 m!49655))

(declare-fun m!49657 () Bool)

(assert (=> b!58248 m!49657))

(assert (=> b!57620 d!10939))

(declare-fun d!10941 () Bool)

(declare-fun e!38333 () Bool)

(assert (=> d!10941 e!38333))

(declare-fun res!32475 () Bool)

(assert (=> d!10941 (=> res!32475 e!38333)))

(declare-fun lt!23338 () Bool)

(assert (=> d!10941 (= res!32475 (not lt!23338))))

(declare-fun lt!23340 () Bool)

(assert (=> d!10941 (= lt!23338 lt!23340)))

(declare-fun lt!23339 () Unit!1491)

(declare-fun e!38334 () Unit!1491)

(assert (=> d!10941 (= lt!23339 e!38334)))

(declare-fun c!7330 () Bool)

(assert (=> d!10941 (= c!7330 lt!23340)))

(assert (=> d!10941 (= lt!23340 (containsKey!127 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10941 (= (contains!679 lt!22857 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23338)))

(declare-fun b!58249 () Bool)

(declare-fun lt!23337 () Unit!1491)

(assert (=> b!58249 (= e!38334 lt!23337)))

(assert (=> b!58249 (= lt!23337 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!58249 (isDefined!76 (getValueByKey!123 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58250 () Bool)

(declare-fun Unit!1528 () Unit!1491)

(assert (=> b!58250 (= e!38334 Unit!1528)))

(declare-fun b!58251 () Bool)

(assert (=> b!58251 (= e!38333 (isDefined!76 (getValueByKey!123 (toList!696 lt!22857) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!10941 c!7330) b!58249))

(assert (= (and d!10941 (not c!7330)) b!58250))

(assert (= (and d!10941 (not res!32475)) b!58251))

(declare-fun m!49659 () Bool)

(assert (=> d!10941 m!49659))

(declare-fun m!49661 () Bool)

(assert (=> b!58249 m!49661))

(assert (=> b!58249 m!48455))

(assert (=> b!58249 m!48455))

(declare-fun m!49663 () Bool)

(assert (=> b!58249 m!49663))

(assert (=> b!58251 m!48455))

(assert (=> b!58251 m!48455))

(assert (=> b!58251 m!49663))

(assert (=> d!10599 d!10941))

(declare-fun b!58253 () Bool)

(declare-fun e!38335 () Option!129)

(declare-fun e!38336 () Option!129)

(assert (=> b!58253 (= e!38335 e!38336)))

(declare-fun c!7332 () Bool)

(assert (=> b!58253 (= c!7332 (and ((_ is Cons!1425) lt!22856) (not (= (_1!1019 (h!2005 lt!22856)) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58252 () Bool)

(assert (=> b!58252 (= e!38335 (Some!128 (_2!1019 (h!2005 lt!22856))))))

(declare-fun b!58255 () Bool)

(assert (=> b!58255 (= e!38336 None!127)))

(declare-fun d!10943 () Bool)

(declare-fun c!7331 () Bool)

(assert (=> d!10943 (= c!7331 (and ((_ is Cons!1425) lt!22856) (= (_1!1019 (h!2005 lt!22856)) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10943 (= (getValueByKey!123 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38335)))

(declare-fun b!58254 () Bool)

(assert (=> b!58254 (= e!38336 (getValueByKey!123 (t!4747 lt!22856) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10943 c!7331) b!58252))

(assert (= (and d!10943 (not c!7331)) b!58253))

(assert (= (and b!58253 c!7332) b!58254))

(assert (= (and b!58253 (not c!7332)) b!58255))

(declare-fun m!49665 () Bool)

(assert (=> b!58254 m!49665))

(assert (=> d!10599 d!10943))

(declare-fun d!10945 () Bool)

(assert (=> d!10945 (= (getValueByKey!123 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23341 () Unit!1491)

(assert (=> d!10945 (= lt!23341 (choose!297 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38337 () Bool)

(assert (=> d!10945 e!38337))

(declare-fun res!32476 () Bool)

(assert (=> d!10945 (=> (not res!32476) (not e!38337))))

(assert (=> d!10945 (= res!32476 (isStrictlySorted!283 lt!22856))))

(assert (=> d!10945 (= (lemmaContainsTupThenGetReturnValue!40 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23341)))

(declare-fun b!58256 () Bool)

(declare-fun res!32477 () Bool)

(assert (=> b!58256 (=> (not res!32477) (not e!38337))))

(assert (=> b!58256 (= res!32477 (containsKey!127 lt!22856 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58257 () Bool)

(assert (=> b!58257 (= e!38337 (contains!681 lt!22856 (tuple2!2017 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!10945 res!32476) b!58256))

(assert (= (and b!58256 res!32477) b!58257))

(assert (=> d!10945 m!48449))

(declare-fun m!49667 () Bool)

(assert (=> d!10945 m!49667))

(declare-fun m!49669 () Bool)

(assert (=> d!10945 m!49669))

(declare-fun m!49671 () Bool)

(assert (=> b!58256 m!49671))

(declare-fun m!49673 () Bool)

(assert (=> b!58257 m!49673))

(assert (=> d!10599 d!10945))

(declare-fun bm!4263 () Bool)

(declare-fun call!4268 () List!1429)

(declare-fun c!7333 () Bool)

(declare-fun e!38339 () List!1429)

(assert (=> bm!4263 (= call!4268 ($colon$colon!59 e!38339 (ite c!7333 (h!2005 (toList!696 call!4149)) (tuple2!2017 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7336 () Bool)

(assert (=> bm!4263 (= c!7336 c!7333)))

(declare-fun b!58258 () Bool)

(declare-fun e!38342 () List!1429)

(declare-fun call!4267 () List!1429)

(assert (=> b!58258 (= e!38342 call!4267)))

(declare-fun d!10947 () Bool)

(declare-fun e!38338 () Bool)

(assert (=> d!10947 e!38338))

(declare-fun res!32478 () Bool)

(assert (=> d!10947 (=> (not res!32478) (not e!38338))))

(declare-fun lt!23342 () List!1429)

(assert (=> d!10947 (= res!32478 (isStrictlySorted!283 lt!23342))))

(declare-fun e!38341 () List!1429)

(assert (=> d!10947 (= lt!23342 e!38341)))

(assert (=> d!10947 (= c!7333 (and ((_ is Cons!1425) (toList!696 call!4149)) (bvslt (_1!1019 (h!2005 (toList!696 call!4149))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10947 (isStrictlySorted!283 (toList!696 call!4149))))

(assert (=> d!10947 (= (insertStrictlySorted!43 (toList!696 call!4149) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23342)))

(declare-fun b!58259 () Bool)

(assert (=> b!58259 (= e!38341 call!4268)))

(declare-fun b!58260 () Bool)

(declare-fun e!38340 () List!1429)

(assert (=> b!58260 (= e!38341 e!38340)))

(declare-fun c!7335 () Bool)

(assert (=> b!58260 (= c!7335 (and ((_ is Cons!1425) (toList!696 call!4149)) (= (_1!1019 (h!2005 (toList!696 call!4149))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58261 () Bool)

(assert (=> b!58261 (= e!38338 (contains!681 lt!23342 (tuple2!2017 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4264 () Bool)

(declare-fun call!4266 () List!1429)

(assert (=> bm!4264 (= call!4266 call!4268)))

(declare-fun b!58262 () Bool)

(assert (=> b!58262 (= e!38339 (insertStrictlySorted!43 (t!4747 (toList!696 call!4149)) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58263 () Bool)

(declare-fun res!32479 () Bool)

(assert (=> b!58263 (=> (not res!32479) (not e!38338))))

(assert (=> b!58263 (= res!32479 (containsKey!127 lt!23342 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58264 () Bool)

(assert (=> b!58264 (= e!38340 call!4266)))

(declare-fun c!7334 () Bool)

(declare-fun b!58265 () Bool)

(assert (=> b!58265 (= e!38339 (ite c!7335 (t!4747 (toList!696 call!4149)) (ite c!7334 (Cons!1425 (h!2005 (toList!696 call!4149)) (t!4747 (toList!696 call!4149))) Nil!1426)))))

(declare-fun b!58266 () Bool)

(assert (=> b!58266 (= e!38342 call!4267)))

(declare-fun b!58267 () Bool)

(assert (=> b!58267 (= c!7334 (and ((_ is Cons!1425) (toList!696 call!4149)) (bvsgt (_1!1019 (h!2005 (toList!696 call!4149))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!58267 (= e!38340 e!38342)))

(declare-fun bm!4265 () Bool)

(assert (=> bm!4265 (= call!4267 call!4266)))

(assert (= (and d!10947 c!7333) b!58259))

(assert (= (and d!10947 (not c!7333)) b!58260))

(assert (= (and b!58260 c!7335) b!58264))

(assert (= (and b!58260 (not c!7335)) b!58267))

(assert (= (and b!58267 c!7334) b!58258))

(assert (= (and b!58267 (not c!7334)) b!58266))

(assert (= (or b!58258 b!58266) bm!4265))

(assert (= (or b!58264 bm!4265) bm!4264))

(assert (= (or b!58259 bm!4264) bm!4263))

(assert (= (and bm!4263 c!7336) b!58262))

(assert (= (and bm!4263 (not c!7336)) b!58265))

(assert (= (and d!10947 res!32478) b!58263))

(assert (= (and b!58263 res!32479) b!58261))

(declare-fun m!49675 () Bool)

(assert (=> b!58263 m!49675))

(declare-fun m!49677 () Bool)

(assert (=> b!58262 m!49677))

(declare-fun m!49679 () Bool)

(assert (=> d!10947 m!49679))

(declare-fun m!49681 () Bool)

(assert (=> d!10947 m!49681))

(declare-fun m!49683 () Bool)

(assert (=> b!58261 m!49683))

(declare-fun m!49685 () Bool)

(assert (=> bm!4263 m!49685))

(assert (=> d!10599 d!10947))

(assert (=> b!57520 d!10771))

(assert (=> b!57699 d!10653))

(declare-fun d!10949 () Bool)

(declare-fun e!38343 () Bool)

(assert (=> d!10949 e!38343))

(declare-fun res!32480 () Bool)

(assert (=> d!10949 (=> (not res!32480) (not e!38343))))

(declare-fun lt!23345 () ListLongMap!1361)

(assert (=> d!10949 (= res!32480 (contains!679 lt!23345 (_1!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23344 () List!1429)

(assert (=> d!10949 (= lt!23345 (ListLongMap!1362 lt!23344))))

(declare-fun lt!23343 () Unit!1491)

(declare-fun lt!23346 () Unit!1491)

(assert (=> d!10949 (= lt!23343 lt!23346)))

(assert (=> d!10949 (= (getValueByKey!123 lt!23344 (_1!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10949 (= lt!23346 (lemmaContainsTupThenGetReturnValue!40 lt!23344 (_1!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10949 (= lt!23344 (insertStrictlySorted!43 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10949 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23345)))

(declare-fun b!58268 () Bool)

(declare-fun res!32481 () Bool)

(assert (=> b!58268 (=> (not res!32481) (not e!38343))))

(assert (=> b!58268 (= res!32481 (= (getValueByKey!123 (toList!696 lt!23345) (_1!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58269 () Bool)

(assert (=> b!58269 (= e!38343 (contains!681 (toList!696 lt!23345) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10949 res!32480) b!58268))

(assert (= (and b!58268 res!32481) b!58269))

(declare-fun m!49687 () Bool)

(assert (=> d!10949 m!49687))

(declare-fun m!49689 () Bool)

(assert (=> d!10949 m!49689))

(declare-fun m!49691 () Bool)

(assert (=> d!10949 m!49691))

(declare-fun m!49693 () Bool)

(assert (=> d!10949 m!49693))

(declare-fun m!49695 () Bool)

(assert (=> b!58268 m!49695))

(declare-fun m!49697 () Bool)

(assert (=> b!58269 m!49697))

(assert (=> d!10591 d!10949))

(assert (=> d!10591 d!10583))

(declare-fun b!58270 () Bool)

(declare-fun e!38345 () ListLongMap!1361)

(declare-fun call!4275 () ListLongMap!1361)

(assert (=> b!58270 (= e!38345 call!4275)))

(declare-fun lt!23352 () ListLongMap!1361)

(declare-fun e!38353 () Bool)

(declare-fun b!58271 () Bool)

(assert (=> b!58271 (= e!38353 (= (apply!65 lt!23352 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58272 () Bool)

(declare-fun e!38344 () Bool)

(assert (=> b!58272 (= e!38344 e!38353)))

(declare-fun res!32488 () Bool)

(declare-fun call!4269 () Bool)

(assert (=> b!58272 (= res!32488 call!4269)))

(assert (=> b!58272 (=> (not res!32488) (not e!38353))))

(declare-fun b!58273 () Bool)

(declare-fun e!38347 () Bool)

(declare-fun e!38348 () Bool)

(assert (=> b!58273 (= e!38347 e!38348)))

(declare-fun res!32483 () Bool)

(declare-fun call!4270 () Bool)

(assert (=> b!58273 (= res!32483 call!4270)))

(assert (=> b!58273 (=> (not res!32483) (not e!38348))))

(declare-fun b!58274 () Bool)

(declare-fun e!38355 () Bool)

(assert (=> b!58274 (= e!38355 (= (apply!65 lt!23352 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58274 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (_values!2005 newMap!16))))))

(assert (=> b!58274 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58275 () Bool)

(declare-fun e!38350 () Bool)

(assert (=> b!58275 (= e!38350 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4266 () Bool)

(declare-fun call!4271 () ListLongMap!1361)

(assert (=> bm!4266 (= call!4275 call!4271)))

(declare-fun d!10951 () Bool)

(declare-fun e!38352 () Bool)

(assert (=> d!10951 e!38352))

(declare-fun res!32485 () Bool)

(assert (=> d!10951 (=> (not res!32485) (not e!38352))))

(assert (=> d!10951 (= res!32485 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!23364 () ListLongMap!1361)

(assert (=> d!10951 (= lt!23352 lt!23364)))

(declare-fun lt!23351 () Unit!1491)

(declare-fun e!38354 () Unit!1491)

(assert (=> d!10951 (= lt!23351 e!38354)))

(declare-fun c!7341 () Bool)

(declare-fun e!38356 () Bool)

(assert (=> d!10951 (= c!7341 e!38356)))

(declare-fun res!32484 () Bool)

(assert (=> d!10951 (=> (not res!32484) (not e!38356))))

(assert (=> d!10951 (= res!32484 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38351 () ListLongMap!1361)

(assert (=> d!10951 (= lt!23364 e!38351)))

(declare-fun c!7339 () Bool)

(assert (=> d!10951 (= c!7339 (and (not (= (bvand lt!22773 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22773 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10951 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10951 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23352)))

(declare-fun b!58276 () Bool)

(declare-fun call!4273 () ListLongMap!1361)

(assert (=> b!58276 (= e!38351 (+!80 call!4273 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4267 () Bool)

(declare-fun call!4272 () ListLongMap!1361)

(assert (=> bm!4267 (= call!4272 call!4273)))

(declare-fun b!58277 () Bool)

(assert (=> b!58277 (= e!38352 e!38347)))

(declare-fun c!7340 () Bool)

(assert (=> b!58277 (= c!7340 (not (= (bvand lt!22773 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4268 () Bool)

(declare-fun call!4274 () ListLongMap!1361)

(assert (=> bm!4268 (= call!4274 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58278 () Bool)

(declare-fun res!32490 () Bool)

(assert (=> b!58278 (=> (not res!32490) (not e!38352))))

(declare-fun e!38346 () Bool)

(assert (=> b!58278 (= res!32490 e!38346)))

(declare-fun res!32487 () Bool)

(assert (=> b!58278 (=> res!32487 e!38346)))

(assert (=> b!58278 (= res!32487 (not e!38350))))

(declare-fun res!32486 () Bool)

(assert (=> b!58278 (=> (not res!32486) (not e!38350))))

(assert (=> b!58278 (= res!32486 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4269 () Bool)

(assert (=> bm!4269 (= call!4270 (contains!679 lt!23352 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58279 () Bool)

(declare-fun lt!23362 () Unit!1491)

(assert (=> b!58279 (= e!38354 lt!23362)))

(declare-fun lt!23357 () ListLongMap!1361)

(assert (=> b!58279 (= lt!23357 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23354 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23354 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23365 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23365 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23353 () Unit!1491)

(assert (=> b!58279 (= lt!23353 (addStillContains!41 lt!23357 lt!23354 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23365))))

(assert (=> b!58279 (contains!679 (+!80 lt!23357 (tuple2!2017 lt!23354 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23365)))

(declare-fun lt!23360 () Unit!1491)

(assert (=> b!58279 (= lt!23360 lt!23353)))

(declare-fun lt!23356 () ListLongMap!1361)

(assert (=> b!58279 (= lt!23356 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23349 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23349 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23359 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23359 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23350 () Unit!1491)

(assert (=> b!58279 (= lt!23350 (addApplyDifferent!41 lt!23356 lt!23349 (minValue!1940 newMap!16) lt!23359))))

(assert (=> b!58279 (= (apply!65 (+!80 lt!23356 (tuple2!2017 lt!23349 (minValue!1940 newMap!16))) lt!23359) (apply!65 lt!23356 lt!23359))))

(declare-fun lt!23366 () Unit!1491)

(assert (=> b!58279 (= lt!23366 lt!23350)))

(declare-fun lt!23358 () ListLongMap!1361)

(assert (=> b!58279 (= lt!23358 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23361 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23361 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23347 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23347 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23367 () Unit!1491)

(assert (=> b!58279 (= lt!23367 (addApplyDifferent!41 lt!23358 lt!23361 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23347))))

(assert (=> b!58279 (= (apply!65 (+!80 lt!23358 (tuple2!2017 lt!23361 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23347) (apply!65 lt!23358 lt!23347))))

(declare-fun lt!23363 () Unit!1491)

(assert (=> b!58279 (= lt!23363 lt!23367)))

(declare-fun lt!23368 () ListLongMap!1361)

(assert (=> b!58279 (= lt!23368 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23348 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23348 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23355 () (_ BitVec 64))

(assert (=> b!58279 (= lt!23355 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58279 (= lt!23362 (addApplyDifferent!41 lt!23368 lt!23348 (minValue!1940 newMap!16) lt!23355))))

(assert (=> b!58279 (= (apply!65 (+!80 lt!23368 (tuple2!2017 lt!23348 (minValue!1940 newMap!16))) lt!23355) (apply!65 lt!23368 lt!23355))))

(declare-fun b!58280 () Bool)

(assert (=> b!58280 (= e!38344 (not call!4269))))

(declare-fun b!58281 () Bool)

(assert (=> b!58281 (= e!38347 (not call!4270))))

(declare-fun bm!4270 () Bool)

(assert (=> bm!4270 (= call!4269 (contains!679 lt!23352 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7338 () Bool)

(declare-fun bm!4271 () Bool)

(assert (=> bm!4271 (= call!4273 (+!80 (ite c!7339 call!4274 (ite c!7338 call!4271 call!4275)) (ite (or c!7339 c!7338) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58282 () Bool)

(declare-fun e!38349 () ListLongMap!1361)

(assert (=> b!58282 (= e!38349 call!4272)))

(declare-fun b!58283 () Bool)

(assert (=> b!58283 (= e!38346 e!38355)))

(declare-fun res!32482 () Bool)

(assert (=> b!58283 (=> (not res!32482) (not e!38355))))

(assert (=> b!58283 (= res!32482 (contains!679 lt!23352 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58283 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58284 () Bool)

(assert (=> b!58284 (= e!38351 e!38349)))

(assert (=> b!58284 (= c!7338 (and (not (= (bvand lt!22773 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22773 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4272 () Bool)

(assert (=> bm!4272 (= call!4271 call!4274)))

(declare-fun b!58285 () Bool)

(assert (=> b!58285 (= e!38348 (= (apply!65 lt!23352 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58286 () Bool)

(assert (=> b!58286 (= e!38345 call!4272)))

(declare-fun b!58287 () Bool)

(declare-fun c!7342 () Bool)

(assert (=> b!58287 (= c!7342 (and (not (= (bvand lt!22773 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22773 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58287 (= e!38349 e!38345)))

(declare-fun b!58288 () Bool)

(declare-fun res!32489 () Bool)

(assert (=> b!58288 (=> (not res!32489) (not e!38352))))

(assert (=> b!58288 (= res!32489 e!38344)))

(declare-fun c!7337 () Bool)

(assert (=> b!58288 (= c!7337 (not (= (bvand lt!22773 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58289 () Bool)

(declare-fun Unit!1529 () Unit!1491)

(assert (=> b!58289 (= e!38354 Unit!1529)))

(declare-fun b!58290 () Bool)

(assert (=> b!58290 (= e!38356 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10951 c!7339) b!58276))

(assert (= (and d!10951 (not c!7339)) b!58284))

(assert (= (and b!58284 c!7338) b!58282))

(assert (= (and b!58284 (not c!7338)) b!58287))

(assert (= (and b!58287 c!7342) b!58286))

(assert (= (and b!58287 (not c!7342)) b!58270))

(assert (= (or b!58286 b!58270) bm!4266))

(assert (= (or b!58282 bm!4266) bm!4272))

(assert (= (or b!58282 b!58286) bm!4267))

(assert (= (or b!58276 bm!4272) bm!4268))

(assert (= (or b!58276 bm!4267) bm!4271))

(assert (= (and d!10951 res!32484) b!58290))

(assert (= (and d!10951 c!7341) b!58279))

(assert (= (and d!10951 (not c!7341)) b!58289))

(assert (= (and d!10951 res!32485) b!58278))

(assert (= (and b!58278 res!32486) b!58275))

(assert (= (and b!58278 (not res!32487)) b!58283))

(assert (= (and b!58283 res!32482) b!58274))

(assert (= (and b!58278 res!32490) b!58288))

(assert (= (and b!58288 c!7337) b!58272))

(assert (= (and b!58288 (not c!7337)) b!58280))

(assert (= (and b!58272 res!32488) b!58271))

(assert (= (or b!58272 b!58280) bm!4270))

(assert (= (and b!58288 res!32489) b!58277))

(assert (= (and b!58277 c!7340) b!58273))

(assert (= (and b!58277 (not c!7340)) b!58281))

(assert (= (and b!58273 res!32483) b!58285))

(assert (= (or b!58273 b!58281) bm!4269))

(declare-fun b_lambda!2539 () Bool)

(assert (=> (not b_lambda!2539) (not b!58274)))

(assert (=> b!58274 t!4753))

(declare-fun b_and!3519 () Bool)

(assert (= b_and!3515 (and (=> t!4753 result!2353) b_and!3519)))

(assert (=> b!58274 t!4755))

(declare-fun b_and!3521 () Bool)

(assert (= b_and!3517 (and (=> t!4755 result!2355) b_and!3521)))

(assert (=> bm!4268 m!48051))

(declare-fun m!49699 () Bool)

(assert (=> bm!4268 m!49699))

(assert (=> b!58275 m!48295))

(assert (=> b!58275 m!48295))

(assert (=> b!58275 m!48297))

(declare-fun m!49701 () Bool)

(assert (=> b!58285 m!49701))

(declare-fun m!49703 () Bool)

(assert (=> bm!4269 m!49703))

(declare-fun m!49705 () Bool)

(assert (=> bm!4270 m!49705))

(declare-fun m!49707 () Bool)

(assert (=> bm!4271 m!49707))

(declare-fun m!49709 () Bool)

(assert (=> b!58279 m!49709))

(assert (=> b!58279 m!48051))

(declare-fun m!49711 () Bool)

(assert (=> b!58279 m!49711))

(assert (=> b!58279 m!48051))

(declare-fun m!49713 () Bool)

(assert (=> b!58279 m!49713))

(declare-fun m!49715 () Bool)

(assert (=> b!58279 m!49715))

(declare-fun m!49717 () Bool)

(assert (=> b!58279 m!49717))

(declare-fun m!49719 () Bool)

(assert (=> b!58279 m!49719))

(declare-fun m!49721 () Bool)

(assert (=> b!58279 m!49721))

(declare-fun m!49723 () Bool)

(assert (=> b!58279 m!49723))

(declare-fun m!49725 () Bool)

(assert (=> b!58279 m!49725))

(declare-fun m!49727 () Bool)

(assert (=> b!58279 m!49727))

(declare-fun m!49729 () Bool)

(assert (=> b!58279 m!49729))

(assert (=> b!58279 m!48051))

(assert (=> b!58279 m!49699))

(assert (=> b!58279 m!49727))

(declare-fun m!49731 () Bool)

(assert (=> b!58279 m!49731))

(assert (=> b!58279 m!49723))

(assert (=> b!58279 m!49719))

(assert (=> b!58279 m!48295))

(declare-fun m!49733 () Bool)

(assert (=> b!58279 m!49733))

(assert (=> b!58279 m!49715))

(declare-fun m!49735 () Bool)

(assert (=> b!58279 m!49735))

(declare-fun m!49737 () Bool)

(assert (=> b!58279 m!49737))

(assert (=> b!58274 m!48295))

(assert (=> b!58274 m!48393))

(assert (=> b!58274 m!48339))

(assert (=> b!58274 m!48395))

(assert (=> b!58274 m!48339))

(assert (=> b!58274 m!48295))

(declare-fun m!49739 () Bool)

(assert (=> b!58274 m!49739))

(assert (=> b!58274 m!48393))

(declare-fun m!49741 () Bool)

(assert (=> b!58276 m!49741))

(declare-fun m!49743 () Bool)

(assert (=> b!58271 m!49743))

(assert (=> b!58290 m!48295))

(assert (=> b!58290 m!48295))

(assert (=> b!58290 m!48297))

(assert (=> d!10951 m!48289))

(assert (=> b!58283 m!48295))

(assert (=> b!58283 m!48295))

(declare-fun m!49745 () Bool)

(assert (=> b!58283 m!49745))

(assert (=> d!10591 d!10951))

(assert (=> d!10591 d!10767))

(declare-fun d!10953 () Bool)

(assert (=> d!10953 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22773 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!10953 true))

(declare-fun _$7!41 () Unit!1491)

(assert (=> d!10953 (= (choose!288 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22773 (zeroValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)) _$7!41)))

(declare-fun bs!2530 () Bool)

(assert (= bs!2530 d!10953))

(assert (=> bs!2530 m!48121))

(assert (=> bs!2530 m!48121))

(assert (=> bs!2530 m!48427))

(assert (=> bs!2530 m!48051))

(assert (=> bs!2530 m!48429))

(assert (=> d!10591 d!10953))

(assert (=> d!10583 d!10767))

(declare-fun d!10955 () Bool)

(declare-fun res!32491 () Bool)

(declare-fun e!38357 () Bool)

(assert (=> d!10955 (=> res!32491 e!38357)))

(assert (=> d!10955 (= res!32491 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22677)))))

(assert (=> d!10955 (= (containsKey!127 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22677) e!38357)))

(declare-fun b!58291 () Bool)

(declare-fun e!38358 () Bool)

(assert (=> b!58291 (= e!38357 e!38358)))

(declare-fun res!32492 () Bool)

(assert (=> b!58291 (=> (not res!32492) (not e!38358))))

(assert (=> b!58291 (= res!32492 (and (or (not ((_ is Cons!1425) (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) (bvsle (_1!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22677)) ((_ is Cons!1425) (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (bvslt (_1!1019 (h!2005 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22677)))))

(declare-fun b!58292 () Bool)

(assert (=> b!58292 (= e!38358 (containsKey!127 (t!4747 (toList!696 (+!80 lt!22669 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!22677))))

(assert (= (and d!10955 (not res!32491)) b!58291))

(assert (= (and b!58291 res!32492) b!58292))

(declare-fun m!49747 () Bool)

(assert (=> b!58292 m!49747))

(assert (=> d!10629 d!10955))

(declare-fun d!10957 () Bool)

(declare-fun e!38359 () Bool)

(assert (=> d!10957 e!38359))

(declare-fun res!32493 () Bool)

(assert (=> d!10957 (=> res!32493 e!38359)))

(declare-fun lt!23370 () Bool)

(assert (=> d!10957 (= res!32493 (not lt!23370))))

(declare-fun lt!23372 () Bool)

(assert (=> d!10957 (= lt!23370 lt!23372)))

(declare-fun lt!23371 () Unit!1491)

(declare-fun e!38360 () Unit!1491)

(assert (=> d!10957 (= lt!23371 e!38360)))

(declare-fun c!7343 () Bool)

(assert (=> d!10957 (= c!7343 lt!23372)))

(assert (=> d!10957 (= lt!23372 (containsKey!127 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!10957 (= (contains!679 lt!22918 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23370)))

(declare-fun b!58293 () Bool)

(declare-fun lt!23369 () Unit!1491)

(assert (=> b!58293 (= e!38360 lt!23369)))

(assert (=> b!58293 (= lt!23369 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> b!58293 (isDefined!76 (getValueByKey!123 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58294 () Bool)

(declare-fun Unit!1530 () Unit!1491)

(assert (=> b!58294 (= e!38360 Unit!1530)))

(declare-fun b!58295 () Bool)

(assert (=> b!58295 (= e!38359 (isDefined!76 (getValueByKey!123 (toList!696 lt!22918) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10957 c!7343) b!58293))

(assert (= (and d!10957 (not c!7343)) b!58294))

(assert (= (and d!10957 (not res!32493)) b!58295))

(declare-fun m!49749 () Bool)

(assert (=> d!10957 m!49749))

(declare-fun m!49751 () Bool)

(assert (=> b!58293 m!49751))

(assert (=> b!58293 m!48587))

(assert (=> b!58293 m!48587))

(declare-fun m!49753 () Bool)

(assert (=> b!58293 m!49753))

(assert (=> b!58295 m!48587))

(assert (=> b!58295 m!48587))

(assert (=> b!58295 m!49753))

(assert (=> d!10631 d!10957))

(declare-fun b!58297 () Bool)

(declare-fun e!38361 () Option!129)

(declare-fun e!38362 () Option!129)

(assert (=> b!58297 (= e!38361 e!38362)))

(declare-fun c!7345 () Bool)

(assert (=> b!58297 (= c!7345 (and ((_ is Cons!1425) lt!22917) (not (= (_1!1019 (h!2005 lt!22917)) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58296 () Bool)

(assert (=> b!58296 (= e!38361 (Some!128 (_2!1019 (h!2005 lt!22917))))))

(declare-fun b!58299 () Bool)

(assert (=> b!58299 (= e!38362 None!127)))

(declare-fun d!10959 () Bool)

(declare-fun c!7344 () Bool)

(assert (=> d!10959 (= c!7344 (and ((_ is Cons!1425) lt!22917) (= (_1!1019 (h!2005 lt!22917)) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10959 (= (getValueByKey!123 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38361)))

(declare-fun b!58298 () Bool)

(assert (=> b!58298 (= e!38362 (getValueByKey!123 (t!4747 lt!22917) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10959 c!7344) b!58296))

(assert (= (and d!10959 (not c!7344)) b!58297))

(assert (= (and b!58297 c!7345) b!58298))

(assert (= (and b!58297 (not c!7345)) b!58299))

(declare-fun m!49755 () Bool)

(assert (=> b!58298 m!49755))

(assert (=> d!10631 d!10959))

(declare-fun d!10961 () Bool)

(assert (=> d!10961 (= (getValueByKey!123 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!23373 () Unit!1491)

(assert (=> d!10961 (= lt!23373 (choose!297 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38363 () Bool)

(assert (=> d!10961 e!38363))

(declare-fun res!32494 () Bool)

(assert (=> d!10961 (=> (not res!32494) (not e!38363))))

(assert (=> d!10961 (= res!32494 (isStrictlySorted!283 lt!22917))))

(assert (=> d!10961 (= (lemmaContainsTupThenGetReturnValue!40 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23373)))

(declare-fun b!58300 () Bool)

(declare-fun res!32495 () Bool)

(assert (=> b!58300 (=> (not res!32495) (not e!38363))))

(assert (=> b!58300 (= res!32495 (containsKey!127 lt!22917 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58301 () Bool)

(assert (=> b!58301 (= e!38363 (contains!681 lt!22917 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!10961 res!32494) b!58300))

(assert (= (and b!58300 res!32495) b!58301))

(assert (=> d!10961 m!48581))

(declare-fun m!49757 () Bool)

(assert (=> d!10961 m!49757))

(declare-fun m!49759 () Bool)

(assert (=> d!10961 m!49759))

(declare-fun m!49761 () Bool)

(assert (=> b!58300 m!49761))

(declare-fun m!49763 () Bool)

(assert (=> b!58301 m!49763))

(assert (=> d!10631 d!10961))

(declare-fun c!7346 () Bool)

(declare-fun call!4278 () List!1429)

(declare-fun e!38365 () List!1429)

(declare-fun bm!4273 () Bool)

(assert (=> bm!4273 (= call!4278 ($colon$colon!59 e!38365 (ite c!7346 (h!2005 (toList!696 lt!22680)) (tuple2!2017 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun c!7349 () Bool)

(assert (=> bm!4273 (= c!7349 c!7346)))

(declare-fun b!58302 () Bool)

(declare-fun e!38368 () List!1429)

(declare-fun call!4277 () List!1429)

(assert (=> b!58302 (= e!38368 call!4277)))

(declare-fun d!10963 () Bool)

(declare-fun e!38364 () Bool)

(assert (=> d!10963 e!38364))

(declare-fun res!32496 () Bool)

(assert (=> d!10963 (=> (not res!32496) (not e!38364))))

(declare-fun lt!23374 () List!1429)

(assert (=> d!10963 (= res!32496 (isStrictlySorted!283 lt!23374))))

(declare-fun e!38367 () List!1429)

(assert (=> d!10963 (= lt!23374 e!38367)))

(assert (=> d!10963 (= c!7346 (and ((_ is Cons!1425) (toList!696 lt!22680)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22680))) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10963 (isStrictlySorted!283 (toList!696 lt!22680))))

(assert (=> d!10963 (= (insertStrictlySorted!43 (toList!696 lt!22680) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23374)))

(declare-fun b!58303 () Bool)

(assert (=> b!58303 (= e!38367 call!4278)))

(declare-fun b!58304 () Bool)

(declare-fun e!38366 () List!1429)

(assert (=> b!58304 (= e!38367 e!38366)))

(declare-fun c!7348 () Bool)

(assert (=> b!58304 (= c!7348 (and ((_ is Cons!1425) (toList!696 lt!22680)) (= (_1!1019 (h!2005 (toList!696 lt!22680))) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58305 () Bool)

(assert (=> b!58305 (= e!38364 (contains!681 lt!23374 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun bm!4274 () Bool)

(declare-fun call!4276 () List!1429)

(assert (=> bm!4274 (= call!4276 call!4278)))

(declare-fun b!58306 () Bool)

(assert (=> b!58306 (= e!38365 (insertStrictlySorted!43 (t!4747 (toList!696 lt!22680)) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58307 () Bool)

(declare-fun res!32497 () Bool)

(assert (=> b!58307 (=> (not res!32497) (not e!38364))))

(assert (=> b!58307 (= res!32497 (containsKey!127 lt!23374 (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58308 () Bool)

(assert (=> b!58308 (= e!38366 call!4276)))

(declare-fun b!58309 () Bool)

(declare-fun c!7347 () Bool)

(assert (=> b!58309 (= e!38365 (ite c!7348 (t!4747 (toList!696 lt!22680)) (ite c!7347 (Cons!1425 (h!2005 (toList!696 lt!22680)) (t!4747 (toList!696 lt!22680))) Nil!1426)))))

(declare-fun b!58310 () Bool)

(assert (=> b!58310 (= e!38368 call!4277)))

(declare-fun b!58311 () Bool)

(assert (=> b!58311 (= c!7347 (and ((_ is Cons!1425) (toList!696 lt!22680)) (bvsgt (_1!1019 (h!2005 (toList!696 lt!22680))) (_1!1019 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!58311 (= e!38366 e!38368)))

(declare-fun bm!4275 () Bool)

(assert (=> bm!4275 (= call!4277 call!4276)))

(assert (= (and d!10963 c!7346) b!58303))

(assert (= (and d!10963 (not c!7346)) b!58304))

(assert (= (and b!58304 c!7348) b!58308))

(assert (= (and b!58304 (not c!7348)) b!58311))

(assert (= (and b!58311 c!7347) b!58302))

(assert (= (and b!58311 (not c!7347)) b!58310))

(assert (= (or b!58302 b!58310) bm!4275))

(assert (= (or b!58308 bm!4275) bm!4274))

(assert (= (or b!58303 bm!4274) bm!4273))

(assert (= (and bm!4273 c!7349) b!58306))

(assert (= (and bm!4273 (not c!7349)) b!58309))

(assert (= (and d!10963 res!32496) b!58307))

(assert (= (and b!58307 res!32497) b!58305))

(declare-fun m!49765 () Bool)

(assert (=> b!58307 m!49765))

(declare-fun m!49767 () Bool)

(assert (=> b!58306 m!49767))

(declare-fun m!49769 () Bool)

(assert (=> d!10963 m!49769))

(declare-fun m!49771 () Bool)

(assert (=> d!10963 m!49771))

(declare-fun m!49773 () Bool)

(assert (=> b!58305 m!49773))

(declare-fun m!49775 () Bool)

(assert (=> bm!4273 m!49775))

(assert (=> d!10631 d!10963))

(assert (=> bm!4205 d!10841))

(declare-fun b!58313 () Bool)

(declare-fun e!38369 () Option!129)

(declare-fun e!38370 () Option!129)

(assert (=> b!58313 (= e!38369 e!38370)))

(declare-fun c!7351 () Bool)

(assert (=> b!58313 (= c!7351 (and ((_ is Cons!1425) (toList!696 lt!22906)) (not (= (_1!1019 (h!2005 (toList!696 lt!22906))) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58312 () Bool)

(assert (=> b!58312 (= e!38369 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22906)))))))

(declare-fun b!58315 () Bool)

(assert (=> b!58315 (= e!38370 None!127)))

(declare-fun d!10965 () Bool)

(declare-fun c!7350 () Bool)

(assert (=> d!10965 (= c!7350 (and ((_ is Cons!1425) (toList!696 lt!22906)) (= (_1!1019 (h!2005 (toList!696 lt!22906))) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!10965 (= (getValueByKey!123 (toList!696 lt!22906) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38369)))

(declare-fun b!58314 () Bool)

(assert (=> b!58314 (= e!38370 (getValueByKey!123 (t!4747 (toList!696 lt!22906)) (_1!1019 (tuple2!2017 lt!22666 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!10965 c!7350) b!58312))

(assert (= (and d!10965 (not c!7350)) b!58313))

(assert (= (and b!58313 c!7351) b!58314))

(assert (= (and b!58313 (not c!7351)) b!58315))

(declare-fun m!49777 () Bool)

(assert (=> b!58314 m!49777))

(assert (=> b!57621 d!10965))

(declare-fun b!58317 () Bool)

(declare-fun e!38371 () Option!129)

(declare-fun e!38372 () Option!129)

(assert (=> b!58317 (= e!38371 e!38372)))

(declare-fun c!7353 () Bool)

(assert (=> b!58317 (= c!7353 (and ((_ is Cons!1425) (t!4747 (toList!696 lt!22590))) (not (= (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590)))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(declare-fun b!58316 () Bool)

(assert (=> b!58316 (= e!38371 (Some!128 (_2!1019 (h!2005 (t!4747 (toList!696 lt!22590))))))))

(declare-fun b!58319 () Bool)

(assert (=> b!58319 (= e!38372 None!127)))

(declare-fun d!10967 () Bool)

(declare-fun c!7352 () Bool)

(assert (=> d!10967 (= c!7352 (and ((_ is Cons!1425) (t!4747 (toList!696 lt!22590))) (= (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590)))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!10967 (= (getValueByKey!123 (t!4747 (toList!696 lt!22590)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38371)))

(declare-fun b!58318 () Bool)

(assert (=> b!58318 (= e!38372 (getValueByKey!123 (t!4747 (t!4747 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!10967 c!7352) b!58316))

(assert (= (and d!10967 (not c!7352)) b!58317))

(assert (= (and b!58317 c!7353) b!58318))

(assert (= (and b!58317 (not c!7353)) b!58319))

(assert (=> b!58318 m!48037))

(declare-fun m!49779 () Bool)

(assert (=> b!58318 m!49779))

(assert (=> b!57762 d!10967))

(declare-fun d!10969 () Bool)

(declare-fun e!38373 () Bool)

(assert (=> d!10969 e!38373))

(declare-fun res!32498 () Bool)

(assert (=> d!10969 (=> (not res!32498) (not e!38373))))

(declare-fun lt!23377 () ListLongMap!1361)

(assert (=> d!10969 (= res!32498 (contains!679 lt!23377 (_1!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(declare-fun lt!23376 () List!1429)

(assert (=> d!10969 (= lt!23377 (ListLongMap!1362 lt!23376))))

(declare-fun lt!23375 () Unit!1491)

(declare-fun lt!23378 () Unit!1491)

(assert (=> d!10969 (= lt!23375 lt!23378)))

(assert (=> d!10969 (= (getValueByKey!123 lt!23376 (_1!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10969 (= lt!23378 (lemmaContainsTupThenGetReturnValue!40 lt!23376 (_1!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10969 (= lt!23376 (insertStrictlySorted!43 (toList!696 lt!22794) (_1!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10969 (= (+!80 lt!22794 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!23377)))

(declare-fun b!58320 () Bool)

(declare-fun res!32499 () Bool)

(assert (=> b!58320 (=> (not res!32499) (not e!38373))))

(assert (=> b!58320 (= res!32499 (= (getValueByKey!123 (toList!696 lt!23377) (_1!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))))

(declare-fun b!58321 () Bool)

(assert (=> b!58321 (= e!38373 (contains!681 (toList!696 lt!23377) (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))

(assert (= (and d!10969 res!32498) b!58320))

(assert (= (and b!58320 res!32499) b!58321))

(declare-fun m!49781 () Bool)

(assert (=> d!10969 m!49781))

(declare-fun m!49783 () Bool)

(assert (=> d!10969 m!49783))

(declare-fun m!49785 () Bool)

(assert (=> d!10969 m!49785))

(declare-fun m!49787 () Bool)

(assert (=> d!10969 m!49787))

(declare-fun m!49789 () Bool)

(assert (=> b!58320 m!49789))

(declare-fun m!49791 () Bool)

(assert (=> b!58321 m!49791))

(assert (=> b!57497 d!10969))

(declare-fun d!10971 () Bool)

(declare-fun e!38374 () Bool)

(assert (=> d!10971 e!38374))

(declare-fun res!32500 () Bool)

(assert (=> d!10971 (=> (not res!32500) (not e!38374))))

(declare-fun lt!23381 () ListLongMap!1361)

(assert (=> d!10971 (= res!32500 (contains!679 lt!23381 (_1!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))))))

(declare-fun lt!23380 () List!1429)

(assert (=> d!10971 (= lt!23381 (ListLongMap!1362 lt!23380))))

(declare-fun lt!23379 () Unit!1491)

(declare-fun lt!23382 () Unit!1491)

(assert (=> d!10971 (= lt!23379 lt!23382)))

(assert (=> d!10971 (= (getValueByKey!123 lt!23380 (_1!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))))))

(assert (=> d!10971 (= lt!23382 (lemmaContainsTupThenGetReturnValue!40 lt!23380 (_1!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))))))

(assert (=> d!10971 (= lt!23380 (insertStrictlySorted!43 (toList!696 lt!22792) (_1!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))))))

(assert (=> d!10971 (= (+!80 lt!22792 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) lt!23381)))

(declare-fun b!58322 () Bool)

(declare-fun res!32501 () Bool)

(assert (=> b!58322 (=> (not res!32501) (not e!38374))))

(assert (=> b!58322 (= res!32501 (= (getValueByKey!123 (toList!696 lt!23381) (_1!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))))))))

(declare-fun b!58323 () Bool)

(assert (=> b!58323 (= e!38374 (contains!681 (toList!696 lt!23381) (tuple2!2017 lt!22785 (minValue!1940 newMap!16))))))

(assert (= (and d!10971 res!32500) b!58322))

(assert (= (and b!58322 res!32501) b!58323))

(declare-fun m!49793 () Bool)

(assert (=> d!10971 m!49793))

(declare-fun m!49795 () Bool)

(assert (=> d!10971 m!49795))

(declare-fun m!49797 () Bool)

(assert (=> d!10971 m!49797))

(declare-fun m!49799 () Bool)

(assert (=> d!10971 m!49799))

(declare-fun m!49801 () Bool)

(assert (=> b!58322 m!49801))

(declare-fun m!49803 () Bool)

(assert (=> b!58323 m!49803))

(assert (=> b!57497 d!10971))

(declare-fun d!10973 () Bool)

(assert (=> d!10973 (= (apply!65 (+!80 lt!22792 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) lt!22795) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22792 (tuple2!2017 lt!22785 (minValue!1940 newMap!16)))) lt!22795)))))

(declare-fun bs!2531 () Bool)

(assert (= bs!2531 d!10973))

(declare-fun m!49805 () Bool)

(assert (=> bs!2531 m!49805))

(assert (=> bs!2531 m!49805))

(declare-fun m!49807 () Bool)

(assert (=> bs!2531 m!49807))

(assert (=> b!57497 d!10973))

(declare-fun b!58324 () Bool)

(declare-fun e!38378 () ListLongMap!1361)

(declare-fun call!4279 () ListLongMap!1361)

(assert (=> b!58324 (= e!38378 call!4279)))

(declare-fun b!58326 () Bool)

(assert (=> b!58326 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> b!58326 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))))))))

(declare-fun lt!23386 () ListLongMap!1361)

(declare-fun e!38380 () Bool)

(assert (=> b!58326 (= e!38380 (= (apply!65 lt!23386 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58327 () Bool)

(declare-fun e!38381 () Bool)

(assert (=> b!58327 (= e!38381 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58327 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!58328 () Bool)

(declare-fun e!38376 () Bool)

(declare-fun e!38377 () Bool)

(assert (=> b!58328 (= e!38376 e!38377)))

(declare-fun c!7355 () Bool)

(assert (=> b!58328 (= c!7355 e!38381)))

(declare-fun res!32505 () Bool)

(assert (=> b!58328 (=> (not res!32505) (not e!38381))))

(assert (=> b!58328 (= res!32505 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58329 () Bool)

(declare-fun e!38379 () ListLongMap!1361)

(assert (=> b!58329 (= e!38379 e!38378)))

(declare-fun c!7354 () Bool)

(assert (=> b!58329 (= c!7354 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58330 () Bool)

(declare-fun e!38375 () Bool)

(assert (=> b!58330 (= e!38377 e!38375)))

(declare-fun c!7357 () Bool)

(assert (=> b!58330 (= c!7357 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun d!10975 () Bool)

(assert (=> d!10975 e!38376))

(declare-fun res!32504 () Bool)

(assert (=> d!10975 (=> (not res!32504) (not e!38376))))

(assert (=> d!10975 (= res!32504 (not (contains!679 lt!23386 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10975 (= lt!23386 e!38379)))

(declare-fun c!7356 () Bool)

(assert (=> d!10975 (= c!7356 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!10975 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10975 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23386)))

(declare-fun b!58325 () Bool)

(assert (=> b!58325 (= e!38377 e!38380)))

(assert (=> b!58325 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun res!32503 () Bool)

(assert (=> b!58325 (= res!32503 (contains!679 lt!23386 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58325 (=> (not res!32503) (not e!38380))))

(declare-fun b!58331 () Bool)

(assert (=> b!58331 (= e!38379 (ListLongMap!1362 Nil!1426))))

(declare-fun b!58332 () Bool)

(assert (=> b!58332 (= e!38375 (= lt!23386 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!58333 () Bool)

(assert (=> b!58333 (= e!38375 (isEmpty!290 lt!23386))))

(declare-fun bm!4276 () Bool)

(assert (=> bm!4276 (= call!4279 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (ite (and c!7092 c!7098) lt!22773 (extraKeys!1913 newMap!16)) (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!58334 () Bool)

(declare-fun res!32502 () Bool)

(assert (=> b!58334 (=> (not res!32502) (not e!38376))))

(assert (=> b!58334 (= res!32502 (not (contains!679 lt!23386 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58335 () Bool)

(declare-fun lt!23387 () Unit!1491)

(declare-fun lt!23389 () Unit!1491)

(assert (=> b!58335 (= lt!23387 lt!23389)))

(declare-fun lt!23388 () (_ BitVec 64))

(declare-fun lt!23383 () (_ BitVec 64))

(declare-fun lt!23385 () ListLongMap!1361)

(declare-fun lt!23384 () V!2835)

(assert (=> b!58335 (not (contains!679 (+!80 lt!23385 (tuple2!2017 lt!23388 lt!23384)) lt!23383))))

(assert (=> b!58335 (= lt!23389 (addStillNotContains!14 lt!23385 lt!23388 lt!23384 lt!23383))))

(assert (=> b!58335 (= lt!23383 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58335 (= lt!23384 (get!1060 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58335 (= lt!23388 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58335 (= lt!23385 call!4279)))

(assert (=> b!58335 (= e!38378 (+!80 call!4279 (tuple2!2017 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1060 (select (arr!1776 (ite c!7092 (_values!2005 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10975 c!7356) b!58331))

(assert (= (and d!10975 (not c!7356)) b!58329))

(assert (= (and b!58329 c!7354) b!58335))

(assert (= (and b!58329 (not c!7354)) b!58324))

(assert (= (or b!58335 b!58324) bm!4276))

(assert (= (and d!10975 res!32504) b!58334))

(assert (= (and b!58334 res!32502) b!58328))

(assert (= (and b!58328 res!32505) b!58327))

(assert (= (and b!58328 c!7355) b!58325))

(assert (= (and b!58328 (not c!7355)) b!58330))

(assert (= (and b!58325 res!32503) b!58326))

(assert (= (and b!58330 c!7357) b!58332))

(assert (= (and b!58330 (not c!7357)) b!58333))

(declare-fun b_lambda!2541 () Bool)

(assert (=> (not b_lambda!2541) (not b!58326)))

(assert (=> b!58326 t!4753))

(declare-fun b_and!3523 () Bool)

(assert (= b_and!3519 (and (=> t!4753 result!2353) b_and!3523)))

(assert (=> b!58326 t!4755))

(declare-fun b_and!3525 () Bool)

(assert (= b_and!3521 (and (=> t!4755 result!2355) b_and!3525)))

(declare-fun b_lambda!2543 () Bool)

(assert (=> (not b_lambda!2543) (not b!58335)))

(assert (=> b!58335 t!4753))

(declare-fun b_and!3527 () Bool)

(assert (= b_and!3523 (and (=> t!4753 result!2353) b_and!3527)))

(assert (=> b!58335 t!4755))

(declare-fun b_and!3529 () Bool)

(assert (= b_and!3525 (and (=> t!4755 result!2355) b_and!3529)))

(declare-fun m!49809 () Bool)

(assert (=> b!58334 m!49809))

(declare-fun m!49811 () Bool)

(assert (=> d!10975 m!49811))

(assert (=> d!10975 m!48289))

(assert (=> b!58327 m!48295))

(assert (=> b!58327 m!48295))

(assert (=> b!58327 m!48297))

(declare-fun m!49813 () Bool)

(assert (=> b!58332 m!49813))

(assert (=> b!58325 m!48295))

(assert (=> b!58325 m!48295))

(declare-fun m!49815 () Bool)

(assert (=> b!58325 m!49815))

(assert (=> bm!4276 m!49813))

(declare-fun m!49817 () Bool)

(assert (=> b!58333 m!49817))

(declare-fun m!49819 () Bool)

(assert (=> b!58335 m!49819))

(declare-fun m!49821 () Bool)

(assert (=> b!58335 m!49821))

(assert (=> b!58335 m!48337))

(assert (=> b!58335 m!48339))

(assert (=> b!58335 m!48341))

(assert (=> b!58335 m!49819))

(declare-fun m!49823 () Bool)

(assert (=> b!58335 m!49823))

(assert (=> b!58335 m!48337))

(assert (=> b!58335 m!48339))

(assert (=> b!58335 m!48295))

(declare-fun m!49825 () Bool)

(assert (=> b!58335 m!49825))

(assert (=> b!58326 m!48295))

(assert (=> b!58326 m!48337))

(assert (=> b!58326 m!48339))

(assert (=> b!58326 m!48341))

(assert (=> b!58326 m!48337))

(assert (=> b!58326 m!48339))

(assert (=> b!58326 m!48295))

(declare-fun m!49827 () Bool)

(assert (=> b!58326 m!49827))

(assert (=> b!58329 m!48295))

(assert (=> b!58329 m!48295))

(assert (=> b!58329 m!48297))

(assert (=> b!57497 d!10975))

(declare-fun d!10977 () Bool)

(assert (=> d!10977 (= (apply!65 lt!22804 lt!22791) (get!1063 (getValueByKey!123 (toList!696 lt!22804) lt!22791)))))

(declare-fun bs!2532 () Bool)

(assert (= bs!2532 d!10977))

(declare-fun m!49829 () Bool)

(assert (=> bs!2532 m!49829))

(assert (=> bs!2532 m!49829))

(declare-fun m!49831 () Bool)

(assert (=> bs!2532 m!49831))

(assert (=> b!57497 d!10977))

(declare-fun d!10979 () Bool)

(declare-fun e!38382 () Bool)

(assert (=> d!10979 e!38382))

(declare-fun res!32506 () Bool)

(assert (=> d!10979 (=> (not res!32506) (not e!38382))))

(declare-fun lt!23392 () ListLongMap!1361)

(assert (=> d!10979 (= res!32506 (contains!679 lt!23392 (_1!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(declare-fun lt!23391 () List!1429)

(assert (=> d!10979 (= lt!23392 (ListLongMap!1362 lt!23391))))

(declare-fun lt!23390 () Unit!1491)

(declare-fun lt!23393 () Unit!1491)

(assert (=> d!10979 (= lt!23390 lt!23393)))

(assert (=> d!10979 (= (getValueByKey!123 lt!23391 (_1!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10979 (= lt!23393 (lemmaContainsTupThenGetReturnValue!40 lt!23391 (_1!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10979 (= lt!23391 (insertStrictlySorted!43 (toList!696 lt!22793) (_1!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10979 (= (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!23392)))

(declare-fun b!58336 () Bool)

(declare-fun res!32507 () Bool)

(assert (=> b!58336 (=> (not res!32507) (not e!38382))))

(assert (=> b!58336 (= res!32507 (= (getValueByKey!123 (toList!696 lt!23392) (_1!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))))

(declare-fun b!58337 () Bool)

(assert (=> b!58337 (= e!38382 (contains!681 (toList!696 lt!23392) (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))

(assert (= (and d!10979 res!32506) b!58336))

(assert (= (and b!58336 res!32507) b!58337))

(declare-fun m!49833 () Bool)

(assert (=> d!10979 m!49833))

(declare-fun m!49835 () Bool)

(assert (=> d!10979 m!49835))

(declare-fun m!49837 () Bool)

(assert (=> d!10979 m!49837))

(declare-fun m!49839 () Bool)

(assert (=> d!10979 m!49839))

(declare-fun m!49841 () Bool)

(assert (=> b!58336 m!49841))

(declare-fun m!49843 () Bool)

(assert (=> b!58337 m!49843))

(assert (=> b!57497 d!10979))

(declare-fun d!10981 () Bool)

(assert (=> d!10981 (contains!679 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22801)))

(declare-fun lt!23394 () Unit!1491)

(assert (=> d!10981 (= lt!23394 (choose!291 lt!22793 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22801))))

(assert (=> d!10981 (contains!679 lt!22793 lt!22801)))

(assert (=> d!10981 (= (addStillContains!41 lt!22793 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22801) lt!23394)))

(declare-fun bs!2533 () Bool)

(assert (= bs!2533 d!10981))

(assert (=> bs!2533 m!48317))

(assert (=> bs!2533 m!48317))

(assert (=> bs!2533 m!48319))

(declare-fun m!49845 () Bool)

(assert (=> bs!2533 m!49845))

(declare-fun m!49847 () Bool)

(assert (=> bs!2533 m!49847))

(assert (=> b!57497 d!10981))

(declare-fun d!10983 () Bool)

(assert (=> d!10983 (= (apply!65 (+!80 lt!22792 (tuple2!2017 lt!22785 (minValue!1940 newMap!16))) lt!22795) (apply!65 lt!22792 lt!22795))))

(declare-fun lt!23395 () Unit!1491)

(assert (=> d!10983 (= lt!23395 (choose!290 lt!22792 lt!22785 (minValue!1940 newMap!16) lt!22795))))

(declare-fun e!38383 () Bool)

(assert (=> d!10983 e!38383))

(declare-fun res!32508 () Bool)

(assert (=> d!10983 (=> (not res!32508) (not e!38383))))

(assert (=> d!10983 (= res!32508 (contains!679 lt!22792 lt!22795))))

(assert (=> d!10983 (= (addApplyDifferent!41 lt!22792 lt!22785 (minValue!1940 newMap!16) lt!22795) lt!23395)))

(declare-fun b!58338 () Bool)

(assert (=> b!58338 (= e!38383 (not (= lt!22795 lt!22785)))))

(assert (= (and d!10983 res!32508) b!58338))

(declare-fun m!49849 () Bool)

(assert (=> d!10983 m!49849))

(assert (=> d!10983 m!48325))

(declare-fun m!49851 () Bool)

(assert (=> d!10983 m!49851))

(assert (=> d!10983 m!48335))

(assert (=> d!10983 m!48325))

(assert (=> d!10983 m!48327))

(assert (=> b!57497 d!10983))

(declare-fun d!10985 () Bool)

(assert (=> d!10985 (= (apply!65 (+!80 lt!22794 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22783) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22794 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22783)))))

(declare-fun bs!2534 () Bool)

(assert (= bs!2534 d!10985))

(declare-fun m!49853 () Bool)

(assert (=> bs!2534 m!49853))

(assert (=> bs!2534 m!49853))

(declare-fun m!49855 () Bool)

(assert (=> bs!2534 m!49855))

(assert (=> b!57497 d!10985))

(declare-fun d!10987 () Bool)

(assert (=> d!10987 (= (apply!65 (+!80 lt!22794 (tuple2!2017 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22783) (apply!65 lt!22794 lt!22783))))

(declare-fun lt!23396 () Unit!1491)

(assert (=> d!10987 (= lt!23396 (choose!290 lt!22794 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22783))))

(declare-fun e!38384 () Bool)

(assert (=> d!10987 e!38384))

(declare-fun res!32509 () Bool)

(assert (=> d!10987 (=> (not res!32509) (not e!38384))))

(assert (=> d!10987 (= res!32509 (contains!679 lt!22794 lt!22783))))

(assert (=> d!10987 (= (addApplyDifferent!41 lt!22794 lt!22797 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22783) lt!23396)))

(declare-fun b!58339 () Bool)

(assert (=> b!58339 (= e!38384 (not (= lt!22783 lt!22797)))))

(assert (= (and d!10987 res!32509) b!58339))

(declare-fun m!49857 () Bool)

(assert (=> d!10987 m!49857))

(assert (=> d!10987 m!48313))

(declare-fun m!49859 () Bool)

(assert (=> d!10987 m!49859))

(assert (=> d!10987 m!48307))

(assert (=> d!10987 m!48313))

(assert (=> d!10987 m!48333))

(assert (=> b!57497 d!10987))

(declare-fun d!10989 () Bool)

(assert (=> d!10989 (= (apply!65 lt!22792 lt!22795) (get!1063 (getValueByKey!123 (toList!696 lt!22792) lt!22795)))))

(declare-fun bs!2535 () Bool)

(assert (= bs!2535 d!10989))

(declare-fun m!49861 () Bool)

(assert (=> bs!2535 m!49861))

(assert (=> bs!2535 m!49861))

(declare-fun m!49863 () Bool)

(assert (=> bs!2535 m!49863))

(assert (=> b!57497 d!10989))

(declare-fun d!10991 () Bool)

(declare-fun e!38385 () Bool)

(assert (=> d!10991 e!38385))

(declare-fun res!32510 () Bool)

(assert (=> d!10991 (=> res!32510 e!38385)))

(declare-fun lt!23398 () Bool)

(assert (=> d!10991 (= res!32510 (not lt!23398))))

(declare-fun lt!23400 () Bool)

(assert (=> d!10991 (= lt!23398 lt!23400)))

(declare-fun lt!23399 () Unit!1491)

(declare-fun e!38386 () Unit!1491)

(assert (=> d!10991 (= lt!23399 e!38386)))

(declare-fun c!7358 () Bool)

(assert (=> d!10991 (= c!7358 lt!23400)))

(assert (=> d!10991 (= lt!23400 (containsKey!127 (toList!696 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22801))))

(assert (=> d!10991 (= (contains!679 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22801) lt!23398)))

(declare-fun b!58340 () Bool)

(declare-fun lt!23397 () Unit!1491)

(assert (=> b!58340 (= e!38386 lt!23397)))

(assert (=> b!58340 (= lt!23397 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22801))))

(assert (=> b!58340 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22801))))

(declare-fun b!58341 () Bool)

(declare-fun Unit!1531 () Unit!1491)

(assert (=> b!58341 (= e!38386 Unit!1531)))

(declare-fun b!58342 () Bool)

(assert (=> b!58342 (= e!38385 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22793 (tuple2!2017 lt!22790 (ite (and c!7092 c!7098) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22801)))))

(assert (= (and d!10991 c!7358) b!58340))

(assert (= (and d!10991 (not c!7358)) b!58341))

(assert (= (and d!10991 (not res!32510)) b!58342))

(declare-fun m!49865 () Bool)

(assert (=> d!10991 m!49865))

(declare-fun m!49867 () Bool)

(assert (=> b!58340 m!49867))

(declare-fun m!49869 () Bool)

(assert (=> b!58340 m!49869))

(assert (=> b!58340 m!49869))

(declare-fun m!49871 () Bool)

(assert (=> b!58340 m!49871))

(assert (=> b!58342 m!49869))

(assert (=> b!58342 m!49869))

(assert (=> b!58342 m!49871))

(assert (=> b!57497 d!10991))

(declare-fun d!10993 () Bool)

(assert (=> d!10993 (= (apply!65 lt!22794 lt!22783) (get!1063 (getValueByKey!123 (toList!696 lt!22794) lt!22783)))))

(declare-fun bs!2536 () Bool)

(assert (= bs!2536 d!10993))

(declare-fun m!49873 () Bool)

(assert (=> bs!2536 m!49873))

(assert (=> bs!2536 m!49873))

(declare-fun m!49875 () Bool)

(assert (=> bs!2536 m!49875))

(assert (=> b!57497 d!10993))

(declare-fun d!10995 () Bool)

(declare-fun e!38387 () Bool)

(assert (=> d!10995 e!38387))

(declare-fun res!32511 () Bool)

(assert (=> d!10995 (=> (not res!32511) (not e!38387))))

(declare-fun lt!23403 () ListLongMap!1361)

(assert (=> d!10995 (= res!32511 (contains!679 lt!23403 (_1!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))))))

(declare-fun lt!23402 () List!1429)

(assert (=> d!10995 (= lt!23403 (ListLongMap!1362 lt!23402))))

(declare-fun lt!23401 () Unit!1491)

(declare-fun lt!23404 () Unit!1491)

(assert (=> d!10995 (= lt!23401 lt!23404)))

(assert (=> d!10995 (= (getValueByKey!123 lt!23402 (_1!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))))))

(assert (=> d!10995 (= lt!23404 (lemmaContainsTupThenGetReturnValue!40 lt!23402 (_1!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))))))

(assert (=> d!10995 (= lt!23402 (insertStrictlySorted!43 (toList!696 lt!22804) (_1!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))))))

(assert (=> d!10995 (= (+!80 lt!22804 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) lt!23403)))

(declare-fun b!58343 () Bool)

(declare-fun res!32512 () Bool)

(assert (=> b!58343 (=> (not res!32512) (not e!38387))))

(assert (=> b!58343 (= res!32512 (= (getValueByKey!123 (toList!696 lt!23403) (_1!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))))))))

(declare-fun b!58344 () Bool)

(assert (=> b!58344 (= e!38387 (contains!681 (toList!696 lt!23403) (tuple2!2017 lt!22784 (minValue!1940 newMap!16))))))

(assert (= (and d!10995 res!32511) b!58343))

(assert (= (and b!58343 res!32512) b!58344))

(declare-fun m!49877 () Bool)

(assert (=> d!10995 m!49877))

(declare-fun m!49879 () Bool)

(assert (=> d!10995 m!49879))

(declare-fun m!49881 () Bool)

(assert (=> d!10995 m!49881))

(declare-fun m!49883 () Bool)

(assert (=> d!10995 m!49883))

(declare-fun m!49885 () Bool)

(assert (=> b!58343 m!49885))

(declare-fun m!49887 () Bool)

(assert (=> b!58344 m!49887))

(assert (=> b!57497 d!10995))

(declare-fun d!10997 () Bool)

(assert (=> d!10997 (= (apply!65 (+!80 lt!22804 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) lt!22791) (apply!65 lt!22804 lt!22791))))

(declare-fun lt!23405 () Unit!1491)

(assert (=> d!10997 (= lt!23405 (choose!290 lt!22804 lt!22784 (minValue!1940 newMap!16) lt!22791))))

(declare-fun e!38388 () Bool)

(assert (=> d!10997 e!38388))

(declare-fun res!32513 () Bool)

(assert (=> d!10997 (=> (not res!32513) (not e!38388))))

(assert (=> d!10997 (= res!32513 (contains!679 lt!22804 lt!22791))))

(assert (=> d!10997 (= (addApplyDifferent!41 lt!22804 lt!22784 (minValue!1940 newMap!16) lt!22791) lt!23405)))

(declare-fun b!58345 () Bool)

(assert (=> b!58345 (= e!38388 (not (= lt!22791 lt!22784)))))

(assert (= (and d!10997 res!32513) b!58345))

(declare-fun m!49889 () Bool)

(assert (=> d!10997 m!49889))

(assert (=> d!10997 m!48321))

(declare-fun m!49891 () Bool)

(assert (=> d!10997 m!49891))

(assert (=> d!10997 m!48315))

(assert (=> d!10997 m!48321))

(assert (=> d!10997 m!48323))

(assert (=> b!57497 d!10997))

(declare-fun d!10999 () Bool)

(assert (=> d!10999 (= (apply!65 (+!80 lt!22804 (tuple2!2017 lt!22784 (minValue!1940 newMap!16))) lt!22791) (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22804 (tuple2!2017 lt!22784 (minValue!1940 newMap!16)))) lt!22791)))))

(declare-fun bs!2537 () Bool)

(assert (= bs!2537 d!10999))

(declare-fun m!49893 () Bool)

(assert (=> bs!2537 m!49893))

(assert (=> bs!2537 m!49893))

(declare-fun m!49895 () Bool)

(assert (=> bs!2537 m!49895))

(assert (=> b!57497 d!10999))

(declare-fun d!11001 () Bool)

(declare-fun e!38389 () Bool)

(assert (=> d!11001 e!38389))

(declare-fun res!32514 () Bool)

(assert (=> d!11001 (=> res!32514 e!38389)))

(declare-fun lt!23407 () Bool)

(assert (=> d!11001 (= res!32514 (not lt!23407))))

(declare-fun lt!23409 () Bool)

(assert (=> d!11001 (= lt!23407 lt!23409)))

(declare-fun lt!23408 () Unit!1491)

(declare-fun e!38390 () Unit!1491)

(assert (=> d!11001 (= lt!23408 e!38390)))

(declare-fun c!7359 () Bool)

(assert (=> d!11001 (= c!7359 lt!23409)))

(assert (=> d!11001 (= lt!23409 (containsKey!127 (toList!696 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891))) lt!22890))))

(assert (=> d!11001 (= (contains!679 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891)) lt!22890) lt!23407)))

(declare-fun b!58346 () Bool)

(declare-fun lt!23406 () Unit!1491)

(assert (=> b!58346 (= e!38390 lt!23406)))

(assert (=> b!58346 (= lt!23406 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891))) lt!22890))))

(assert (=> b!58346 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891))) lt!22890))))

(declare-fun b!58347 () Bool)

(declare-fun Unit!1532 () Unit!1491)

(assert (=> b!58347 (= e!38390 Unit!1532)))

(declare-fun b!58348 () Bool)

(assert (=> b!58348 (= e!38389 (isDefined!76 (getValueByKey!123 (toList!696 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891))) lt!22890)))))

(assert (= (and d!11001 c!7359) b!58346))

(assert (= (and d!11001 (not c!7359)) b!58347))

(assert (= (and d!11001 (not res!32514)) b!58348))

(declare-fun m!49897 () Bool)

(assert (=> d!11001 m!49897))

(declare-fun m!49899 () Bool)

(assert (=> b!58346 m!49899))

(declare-fun m!49901 () Bool)

(assert (=> b!58346 m!49901))

(assert (=> b!58346 m!49901))

(declare-fun m!49903 () Bool)

(assert (=> b!58346 m!49903))

(assert (=> b!58348 m!49901))

(assert (=> b!58348 m!49901))

(assert (=> b!58348 m!49903))

(assert (=> b!57617 d!11001))

(assert (=> b!57617 d!10665))

(declare-fun d!11003 () Bool)

(declare-fun e!38391 () Bool)

(assert (=> d!11003 e!38391))

(declare-fun res!32515 () Bool)

(assert (=> d!11003 (=> (not res!32515) (not e!38391))))

(declare-fun lt!23412 () ListLongMap!1361)

(assert (=> d!11003 (= res!32515 (contains!679 lt!23412 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23411 () List!1429)

(assert (=> d!11003 (= lt!23412 (ListLongMap!1362 lt!23411))))

(declare-fun lt!23410 () Unit!1491)

(declare-fun lt!23413 () Unit!1491)

(assert (=> d!11003 (= lt!23410 lt!23413)))

(assert (=> d!11003 (= (getValueByKey!123 lt!23411 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11003 (= lt!23413 (lemmaContainsTupThenGetReturnValue!40 lt!23411 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11003 (= lt!23411 (insertStrictlySorted!43 (toList!696 call!4182) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11003 (= (+!80 call!4182 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23412)))

(declare-fun b!58349 () Bool)

(declare-fun res!32516 () Bool)

(assert (=> b!58349 (=> (not res!32516) (not e!38391))))

(assert (=> b!58349 (= res!32516 (= (getValueByKey!123 (toList!696 lt!23412) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58350 () Bool)

(assert (=> b!58350 (= e!38391 (contains!681 (toList!696 lt!23412) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11003 res!32515) b!58349))

(assert (= (and b!58349 res!32516) b!58350))

(declare-fun m!49905 () Bool)

(assert (=> d!11003 m!49905))

(declare-fun m!49907 () Bool)

(assert (=> d!11003 m!49907))

(declare-fun m!49909 () Bool)

(assert (=> d!11003 m!49909))

(declare-fun m!49911 () Bool)

(assert (=> d!11003 m!49911))

(declare-fun m!49913 () Bool)

(assert (=> b!58349 m!49913))

(declare-fun m!49915 () Bool)

(assert (=> b!58350 m!49915))

(assert (=> b!57617 d!11003))

(declare-fun d!11005 () Bool)

(declare-fun e!38392 () Bool)

(assert (=> d!11005 e!38392))

(declare-fun res!32517 () Bool)

(assert (=> d!11005 (=> (not res!32517) (not e!38392))))

(declare-fun lt!23416 () ListLongMap!1361)

(assert (=> d!11005 (= res!32517 (contains!679 lt!23416 (_1!1019 (tuple2!2017 lt!22895 lt!22891))))))

(declare-fun lt!23415 () List!1429)

(assert (=> d!11005 (= lt!23416 (ListLongMap!1362 lt!23415))))

(declare-fun lt!23414 () Unit!1491)

(declare-fun lt!23417 () Unit!1491)

(assert (=> d!11005 (= lt!23414 lt!23417)))

(assert (=> d!11005 (= (getValueByKey!123 lt!23415 (_1!1019 (tuple2!2017 lt!22895 lt!22891))) (Some!128 (_2!1019 (tuple2!2017 lt!22895 lt!22891))))))

(assert (=> d!11005 (= lt!23417 (lemmaContainsTupThenGetReturnValue!40 lt!23415 (_1!1019 (tuple2!2017 lt!22895 lt!22891)) (_2!1019 (tuple2!2017 lt!22895 lt!22891))))))

(assert (=> d!11005 (= lt!23415 (insertStrictlySorted!43 (toList!696 lt!22892) (_1!1019 (tuple2!2017 lt!22895 lt!22891)) (_2!1019 (tuple2!2017 lt!22895 lt!22891))))))

(assert (=> d!11005 (= (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891)) lt!23416)))

(declare-fun b!58351 () Bool)

(declare-fun res!32518 () Bool)

(assert (=> b!58351 (=> (not res!32518) (not e!38392))))

(assert (=> b!58351 (= res!32518 (= (getValueByKey!123 (toList!696 lt!23416) (_1!1019 (tuple2!2017 lt!22895 lt!22891))) (Some!128 (_2!1019 (tuple2!2017 lt!22895 lt!22891)))))))

(declare-fun b!58352 () Bool)

(assert (=> b!58352 (= e!38392 (contains!681 (toList!696 lt!23416) (tuple2!2017 lt!22895 lt!22891)))))

(assert (= (and d!11005 res!32517) b!58351))

(assert (= (and b!58351 res!32518) b!58352))

(declare-fun m!49917 () Bool)

(assert (=> d!11005 m!49917))

(declare-fun m!49919 () Bool)

(assert (=> d!11005 m!49919))

(declare-fun m!49921 () Bool)

(assert (=> d!11005 m!49921))

(declare-fun m!49923 () Bool)

(assert (=> d!11005 m!49923))

(declare-fun m!49925 () Bool)

(assert (=> b!58351 m!49925))

(declare-fun m!49927 () Bool)

(assert (=> b!58352 m!49927))

(assert (=> b!57617 d!11005))

(declare-fun d!11007 () Bool)

(assert (=> d!11007 (not (contains!679 (+!80 lt!22892 (tuple2!2017 lt!22895 lt!22891)) lt!22890))))

(declare-fun lt!23420 () Unit!1491)

(declare-fun choose!298 (ListLongMap!1361 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1491)

(assert (=> d!11007 (= lt!23420 (choose!298 lt!22892 lt!22895 lt!22891 lt!22890))))

(declare-fun e!38395 () Bool)

(assert (=> d!11007 e!38395))

(declare-fun res!32521 () Bool)

(assert (=> d!11007 (=> (not res!32521) (not e!38395))))

(assert (=> d!11007 (= res!32521 (not (contains!679 lt!22892 lt!22890)))))

(assert (=> d!11007 (= (addStillNotContains!14 lt!22892 lt!22895 lt!22891 lt!22890) lt!23420)))

(declare-fun b!58356 () Bool)

(assert (=> b!58356 (= e!38395 (not (= lt!22895 lt!22890)))))

(assert (= (and d!11007 res!32521) b!58356))

(assert (=> d!11007 m!48505))

(assert (=> d!11007 m!48505))

(assert (=> d!11007 m!48509))

(declare-fun m!49929 () Bool)

(assert (=> d!11007 m!49929))

(declare-fun m!49931 () Bool)

(assert (=> d!11007 m!49931))

(assert (=> b!57617 d!11007))

(declare-fun d!11009 () Bool)

(declare-fun e!38396 () Bool)

(assert (=> d!11009 e!38396))

(declare-fun res!32522 () Bool)

(assert (=> d!11009 (=> res!32522 e!38396)))

(declare-fun lt!23422 () Bool)

(assert (=> d!11009 (= res!32522 (not lt!23422))))

(declare-fun lt!23424 () Bool)

(assert (=> d!11009 (= lt!23422 lt!23424)))

(declare-fun lt!23423 () Unit!1491)

(declare-fun e!38397 () Unit!1491)

(assert (=> d!11009 (= lt!23423 e!38397)))

(declare-fun c!7360 () Bool)

(assert (=> d!11009 (= c!7360 lt!23424)))

(assert (=> d!11009 (= lt!23424 (containsKey!127 (toList!696 lt!22788) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11009 (= (contains!679 lt!22788 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23422)))

(declare-fun b!58357 () Bool)

(declare-fun lt!23421 () Unit!1491)

(assert (=> b!58357 (= e!38397 lt!23421)))

(assert (=> b!58357 (= lt!23421 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22788) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58357 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58358 () Bool)

(declare-fun Unit!1533 () Unit!1491)

(assert (=> b!58358 (= e!38397 Unit!1533)))

(declare-fun b!58359 () Bool)

(assert (=> b!58359 (= e!38396 (isDefined!76 (getValueByKey!123 (toList!696 lt!22788) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11009 c!7360) b!58357))

(assert (= (and d!11009 (not c!7360)) b!58358))

(assert (= (and d!11009 (not res!32522)) b!58359))

(assert (=> d!11009 m!48295))

(declare-fun m!49933 () Bool)

(assert (=> d!11009 m!49933))

(assert (=> b!58357 m!48295))

(declare-fun m!49935 () Bool)

(assert (=> b!58357 m!49935))

(assert (=> b!58357 m!48295))

(assert (=> b!58357 m!48977))

(assert (=> b!58357 m!48977))

(declare-fun m!49937 () Bool)

(assert (=> b!58357 m!49937))

(assert (=> b!58359 m!48295))

(assert (=> b!58359 m!48977))

(assert (=> b!58359 m!48977))

(assert (=> b!58359 m!49937))

(assert (=> b!57501 d!11009))

(declare-fun d!11011 () Bool)

(assert (=> d!11011 (= (get!1063 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2372 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10663 d!11011))

(assert (=> d!10663 d!10907))

(declare-fun d!11013 () Bool)

(assert (=> d!11013 (= (map!1102 (_2!1020 lt!23010)) (getCurrentListMap!401 (_keys!3642 (_2!1020 lt!23010)) (_values!2005 (_2!1020 lt!23010)) (mask!5896 (_2!1020 lt!23010)) (extraKeys!1913 (_2!1020 lt!23010)) (zeroValue!1940 (_2!1020 lt!23010)) (minValue!1940 (_2!1020 lt!23010)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1020 lt!23010))))))

(declare-fun bs!2538 () Bool)

(assert (= bs!2538 d!11013))

(declare-fun m!49939 () Bool)

(assert (=> bs!2538 m!49939))

(assert (=> b!57686 d!11013))

(declare-fun d!11015 () Bool)

(declare-fun e!38398 () Bool)

(assert (=> d!11015 e!38398))

(declare-fun res!32523 () Bool)

(assert (=> d!11015 (=> (not res!32523) (not e!38398))))

(declare-fun lt!23427 () ListLongMap!1361)

(assert (=> d!11015 (= res!32523 (contains!679 lt!23427 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23426 () List!1429)

(assert (=> d!11015 (= lt!23427 (ListLongMap!1362 lt!23426))))

(declare-fun lt!23425 () Unit!1491)

(declare-fun lt!23428 () Unit!1491)

(assert (=> d!11015 (= lt!23425 lt!23428)))

(assert (=> d!11015 (= (getValueByKey!123 lt!23426 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11015 (= lt!23428 (lemmaContainsTupThenGetReturnValue!40 lt!23426 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11015 (= lt!23426 (insertStrictlySorted!43 (toList!696 (map!1102 newMap!16)) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11015 (= (+!80 (map!1102 newMap!16) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23427)))

(declare-fun b!58360 () Bool)

(declare-fun res!32524 () Bool)

(assert (=> b!58360 (=> (not res!32524) (not e!38398))))

(assert (=> b!58360 (= res!32524 (= (getValueByKey!123 (toList!696 lt!23427) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58361 () Bool)

(assert (=> b!58361 (= e!38398 (contains!681 (toList!696 lt!23427) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11015 res!32523) b!58360))

(assert (= (and b!58360 res!32524) b!58361))

(declare-fun m!49941 () Bool)

(assert (=> d!11015 m!49941))

(declare-fun m!49943 () Bool)

(assert (=> d!11015 m!49943))

(declare-fun m!49945 () Bool)

(assert (=> d!11015 m!49945))

(declare-fun m!49947 () Bool)

(assert (=> d!11015 m!49947))

(declare-fun m!49949 () Bool)

(assert (=> b!58360 m!49949))

(declare-fun m!49951 () Bool)

(assert (=> b!58361 m!49951))

(assert (=> b!57686 d!11015))

(assert (=> b!57686 d!10533))

(declare-fun d!11017 () Bool)

(declare-fun res!32525 () Bool)

(declare-fun e!38399 () Bool)

(assert (=> d!11017 (=> res!32525 e!38399)))

(assert (=> d!11017 (= res!32525 (= (select (arr!1775 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11017 (= (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!38399)))

(declare-fun b!58362 () Bool)

(declare-fun e!38400 () Bool)

(assert (=> b!58362 (= e!38399 e!38400)))

(declare-fun res!32526 () Bool)

(assert (=> b!58362 (=> (not res!32526) (not e!38400))))

(assert (=> b!58362 (= res!32526 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58363 () Bool)

(assert (=> b!58363 (= e!38400 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11017 (not res!32525)) b!58362))

(assert (= (and b!58362 res!32526) b!58363))

(assert (=> d!11017 m!48835))

(assert (=> b!58363 m!48037))

(declare-fun m!49953 () Bool)

(assert (=> b!58363 m!49953))

(assert (=> b!57748 d!11017))

(declare-fun d!11019 () Bool)

(assert (=> d!11019 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23429 () Unit!1491)

(assert (=> d!11019 (= lt!23429 (choose!295 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38401 () Bool)

(assert (=> d!11019 e!38401))

(declare-fun res!32527 () Bool)

(assert (=> d!11019 (=> (not res!32527) (not e!38401))))

(assert (=> d!11019 (= res!32527 (isStrictlySorted!283 (toList!696 lt!22664)))))

(assert (=> d!11019 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000) lt!23429)))

(declare-fun b!58364 () Bool)

(assert (=> b!58364 (= e!38401 (containsKey!127 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11019 res!32527) b!58364))

(assert (=> d!11019 m!48273))

(assert (=> d!11019 m!48273))

(assert (=> d!11019 m!48777))

(declare-fun m!49955 () Bool)

(assert (=> d!11019 m!49955))

(assert (=> d!11019 m!49157))

(assert (=> b!58364 m!48773))

(assert (=> b!57792 d!11019))

(assert (=> b!57792 d!10715))

(assert (=> b!57792 d!10717))

(declare-fun b!58366 () Bool)

(declare-fun e!38402 () Option!129)

(declare-fun e!38403 () Option!129)

(assert (=> b!58366 (= e!38402 e!38403)))

(declare-fun c!7362 () Bool)

(assert (=> b!58366 (= c!7362 (and ((_ is Cons!1425) (toList!696 lt!22910)) (not (= (_1!1019 (h!2005 (toList!696 lt!22910))) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58365 () Bool)

(assert (=> b!58365 (= e!38402 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22910)))))))

(declare-fun b!58368 () Bool)

(assert (=> b!58368 (= e!38403 None!127)))

(declare-fun d!11021 () Bool)

(declare-fun c!7361 () Bool)

(assert (=> d!11021 (= c!7361 (and ((_ is Cons!1425) (toList!696 lt!22910)) (= (_1!1019 (h!2005 (toList!696 lt!22910))) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11021 (= (getValueByKey!123 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38402)))

(declare-fun b!58367 () Bool)

(assert (=> b!58367 (= e!38403 (getValueByKey!123 (t!4747 (toList!696 lt!22910)) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!11021 c!7361) b!58365))

(assert (= (and d!11021 (not c!7361)) b!58366))

(assert (= (and b!58366 c!7362) b!58367))

(assert (= (and b!58366 (not c!7362)) b!58368))

(declare-fun m!49957 () Bool)

(assert (=> b!58367 m!49957))

(assert (=> b!57623 d!11021))

(declare-fun d!11023 () Bool)

(declare-fun e!38404 () Bool)

(assert (=> d!11023 e!38404))

(declare-fun res!32528 () Bool)

(assert (=> d!11023 (=> res!32528 e!38404)))

(declare-fun lt!23431 () Bool)

(assert (=> d!11023 (= res!32528 (not lt!23431))))

(declare-fun lt!23433 () Bool)

(assert (=> d!11023 (= lt!23431 lt!23433)))

(declare-fun lt!23432 () Unit!1491)

(declare-fun e!38405 () Unit!1491)

(assert (=> d!11023 (= lt!23432 e!38405)))

(declare-fun c!7363 () Bool)

(assert (=> d!11023 (= c!7363 lt!23433)))

(assert (=> d!11023 (= lt!23433 (containsKey!127 (toList!696 lt!23070) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11023 (= (contains!679 lt!23070 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23431)))

(declare-fun b!58369 () Bool)

(declare-fun lt!23430 () Unit!1491)

(assert (=> b!58369 (= e!38405 lt!23430)))

(assert (=> b!58369 (= lt!23430 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!23070) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58369 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58370 () Bool)

(declare-fun Unit!1534 () Unit!1491)

(assert (=> b!58370 (= e!38405 Unit!1534)))

(declare-fun b!58371 () Bool)

(assert (=> b!58371 (= e!38404 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11023 c!7363) b!58369))

(assert (= (and d!11023 (not c!7363)) b!58370))

(assert (= (and d!11023 (not res!32528)) b!58371))

(declare-fun m!49959 () Bool)

(assert (=> d!11023 m!49959))

(declare-fun m!49961 () Bool)

(assert (=> b!58369 m!49961))

(assert (=> b!58369 m!48973))

(assert (=> b!58369 m!48973))

(declare-fun m!49963 () Bool)

(assert (=> b!58369 m!49963))

(assert (=> b!58371 m!48973))

(assert (=> b!58371 m!48973))

(assert (=> b!58371 m!49963))

(assert (=> bm!4207 d!11023))

(declare-fun b!58372 () Bool)

(declare-fun e!38407 () Bool)

(declare-fun e!38409 () Bool)

(assert (=> b!58372 (= e!38407 e!38409)))

(declare-fun c!7364 () Bool)

(assert (=> b!58372 (= c!7364 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun bm!4277 () Bool)

(declare-fun call!4280 () Bool)

(assert (=> bm!4277 (= call!4280 (arrayNoDuplicates!0 (_keys!3642 (_2!1020 lt!22755)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7364 (Cons!1424 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000) Nil!1425) Nil!1425)))))

(declare-fun b!58373 () Bool)

(assert (=> b!58373 (= e!38409 call!4280)))

(declare-fun b!58374 () Bool)

(declare-fun e!38406 () Bool)

(assert (=> b!58374 (= e!38406 e!38407)))

(declare-fun res!32530 () Bool)

(assert (=> b!58374 (=> (not res!32530) (not e!38407))))

(declare-fun e!38408 () Bool)

(assert (=> b!58374 (= res!32530 (not e!38408))))

(declare-fun res!32531 () Bool)

(assert (=> b!58374 (=> (not res!32531) (not e!38408))))

(assert (=> b!58374 (= res!32531 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun b!58375 () Bool)

(assert (=> b!58375 (= e!38408 (contains!680 Nil!1425 (select (arr!1775 (_keys!3642 (_2!1020 lt!22755))) #b00000000000000000000000000000000)))))

(declare-fun d!11025 () Bool)

(declare-fun res!32529 () Bool)

(assert (=> d!11025 (=> res!32529 e!38406)))

(assert (=> d!11025 (= res!32529 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (_2!1020 lt!22755)))))))

(assert (=> d!11025 (= (arrayNoDuplicates!0 (_keys!3642 (_2!1020 lt!22755)) #b00000000000000000000000000000000 Nil!1425) e!38406)))

(declare-fun b!58376 () Bool)

(assert (=> b!58376 (= e!38409 call!4280)))

(assert (= (and d!11025 (not res!32529)) b!58374))

(assert (= (and b!58374 res!32531) b!58375))

(assert (= (and b!58374 res!32530) b!58372))

(assert (= (and b!58372 c!7364) b!58376))

(assert (= (and b!58372 (not c!7364)) b!58373))

(assert (= (or b!58376 b!58373) bm!4277))

(assert (=> b!58372 m!48847))

(assert (=> b!58372 m!48847))

(assert (=> b!58372 m!48849))

(assert (=> bm!4277 m!48847))

(declare-fun m!49965 () Bool)

(assert (=> bm!4277 m!49965))

(assert (=> b!58374 m!48847))

(assert (=> b!58374 m!48847))

(assert (=> b!58374 m!48849))

(assert (=> b!58375 m!48847))

(assert (=> b!58375 m!48847))

(declare-fun m!49967 () Bool)

(assert (=> b!58375 m!49967))

(assert (=> b!57475 d!11025))

(declare-fun d!11027 () Bool)

(declare-fun res!32534 () Bool)

(declare-fun e!38410 () Bool)

(assert (=> d!11027 (=> (not res!32534) (not e!38410))))

(assert (=> d!11027 (= res!32534 (validMask!0 (mask!5896 (v!2368 (underlying!224 thiss!992)))))))

(assert (=> d!11027 (= (simpleValid!41 (v!2368 (underlying!224 thiss!992))) e!38410)))

(declare-fun b!58378 () Bool)

(declare-fun res!32535 () Bool)

(assert (=> b!58378 (=> (not res!32535) (not e!38410))))

(assert (=> b!58378 (= res!32535 (bvsge (size!2008 (v!2368 (underlying!224 thiss!992))) (_size!355 (v!2368 (underlying!224 thiss!992)))))))

(declare-fun b!58377 () Bool)

(declare-fun res!32532 () Bool)

(assert (=> b!58377 (=> (not res!32532) (not e!38410))))

(assert (=> b!58377 (= res!32532 (and (= (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001)) (= (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (size!2005 (_values!2005 (v!2368 (underlying!224 thiss!992))))) (bvsge (_size!355 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!355 (v!2368 (underlying!224 thiss!992))) (bvadd (mask!5896 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!58380 () Bool)

(assert (=> b!58380 (= e!38410 (and (bvsge (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!355 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!58379 () Bool)

(declare-fun res!32533 () Bool)

(assert (=> b!58379 (=> (not res!32533) (not e!38410))))

(assert (=> b!58379 (= res!32533 (= (size!2008 (v!2368 (underlying!224 thiss!992))) (bvadd (_size!355 (v!2368 (underlying!224 thiss!992))) (bvsdiv (bvadd (extraKeys!1913 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!11027 res!32534) b!58377))

(assert (= (and b!58377 res!32532) b!58378))

(assert (= (and b!58378 res!32535) b!58379))

(assert (= (and b!58379 res!32533) b!58380))

(assert (=> d!11027 m!48073))

(declare-fun m!49969 () Bool)

(assert (=> b!58378 m!49969))

(assert (=> b!58379 m!49969))

(assert (=> d!10595 d!11027))

(assert (=> d!10573 d!10557))

(declare-fun d!11029 () Bool)

(declare-fun res!32536 () Bool)

(declare-fun e!38411 () Bool)

(assert (=> d!11029 (=> res!32536 e!38411)))

(assert (=> d!11029 (= res!32536 (and ((_ is Cons!1425) (toList!696 e!37836)) (= (_1!1019 (h!2005 (toList!696 e!37836))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!11029 (= (containsKey!127 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38411)))

(declare-fun b!58381 () Bool)

(declare-fun e!38412 () Bool)

(assert (=> b!58381 (= e!38411 e!38412)))

(declare-fun res!32537 () Bool)

(assert (=> b!58381 (=> (not res!32537) (not e!38412))))

(assert (=> b!58381 (= res!32537 (and (or (not ((_ is Cons!1425) (toList!696 e!37836))) (bvsle (_1!1019 (h!2005 (toList!696 e!37836))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!696 e!37836)) (bvslt (_1!1019 (h!2005 (toList!696 e!37836))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(declare-fun b!58382 () Bool)

(assert (=> b!58382 (= e!38412 (containsKey!127 (t!4747 (toList!696 e!37836)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11029 (not res!32536)) b!58381))

(assert (= (and b!58381 res!32537) b!58382))

(assert (=> b!58382 m!48037))

(declare-fun m!49971 () Bool)

(assert (=> b!58382 m!49971))

(assert (=> d!10593 d!11029))

(declare-fun d!11031 () Bool)

(declare-fun e!38413 () Bool)

(assert (=> d!11031 e!38413))

(declare-fun res!32538 () Bool)

(assert (=> d!11031 (=> res!32538 e!38413)))

(declare-fun lt!23435 () Bool)

(assert (=> d!11031 (= res!32538 (not lt!23435))))

(declare-fun lt!23437 () Bool)

(assert (=> d!11031 (= lt!23435 lt!23437)))

(declare-fun lt!23436 () Unit!1491)

(declare-fun e!38414 () Unit!1491)

(assert (=> d!11031 (= lt!23436 e!38414)))

(declare-fun c!7365 () Bool)

(assert (=> d!11031 (= c!7365 lt!23437)))

(assert (=> d!11031 (= lt!23437 (containsKey!127 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11031 (= (contains!679 lt!22871 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23435)))

(declare-fun b!58383 () Bool)

(declare-fun lt!23434 () Unit!1491)

(assert (=> b!58383 (= e!38414 lt!23434)))

(assert (=> b!58383 (= lt!23434 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!58383 (isDefined!76 (getValueByKey!123 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58384 () Bool)

(declare-fun Unit!1535 () Unit!1491)

(assert (=> b!58384 (= e!38414 Unit!1535)))

(declare-fun b!58385 () Bool)

(assert (=> b!58385 (= e!38413 (isDefined!76 (getValueByKey!123 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11031 c!7365) b!58383))

(assert (= (and d!11031 (not c!7365)) b!58384))

(assert (= (and d!11031 (not res!32538)) b!58385))

(declare-fun m!49973 () Bool)

(assert (=> d!11031 m!49973))

(declare-fun m!49975 () Bool)

(assert (=> b!58383 m!49975))

(assert (=> b!58383 m!48487))

(assert (=> b!58383 m!48487))

(declare-fun m!49977 () Bool)

(assert (=> b!58383 m!49977))

(assert (=> b!58385 m!48487))

(assert (=> b!58385 m!48487))

(assert (=> b!58385 m!49977))

(assert (=> d!10607 d!11031))

(declare-fun b!58387 () Bool)

(declare-fun e!38415 () Option!129)

(declare-fun e!38416 () Option!129)

(assert (=> b!58387 (= e!38415 e!38416)))

(declare-fun c!7367 () Bool)

(assert (=> b!58387 (= c!7367 (and ((_ is Cons!1425) lt!22870) (not (= (_1!1019 (h!2005 lt!22870)) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!58386 () Bool)

(assert (=> b!58386 (= e!38415 (Some!128 (_2!1019 (h!2005 lt!22870))))))

(declare-fun b!58389 () Bool)

(assert (=> b!58389 (= e!38416 None!127)))

(declare-fun c!7366 () Bool)

(declare-fun d!11033 () Bool)

(assert (=> d!11033 (= c!7366 (and ((_ is Cons!1425) lt!22870) (= (_1!1019 (h!2005 lt!22870)) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11033 (= (getValueByKey!123 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38415)))

(declare-fun b!58388 () Bool)

(assert (=> b!58388 (= e!38416 (getValueByKey!123 (t!4747 lt!22870) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11033 c!7366) b!58386))

(assert (= (and d!11033 (not c!7366)) b!58387))

(assert (= (and b!58387 c!7367) b!58388))

(assert (= (and b!58387 (not c!7367)) b!58389))

(declare-fun m!49979 () Bool)

(assert (=> b!58388 m!49979))

(assert (=> d!10607 d!11033))

(declare-fun d!11035 () Bool)

(assert (=> d!11035 (= (getValueByKey!123 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!128 (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!23438 () Unit!1491)

(assert (=> d!11035 (= lt!23438 (choose!297 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!38417 () Bool)

(assert (=> d!11035 e!38417))

(declare-fun res!32539 () Bool)

(assert (=> d!11035 (=> (not res!32539) (not e!38417))))

(assert (=> d!11035 (= res!32539 (isStrictlySorted!283 lt!22870))))

(assert (=> d!11035 (= (lemmaContainsTupThenGetReturnValue!40 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23438)))

(declare-fun b!58390 () Bool)

(declare-fun res!32540 () Bool)

(assert (=> b!58390 (=> (not res!32540) (not e!38417))))

(assert (=> b!58390 (= res!32540 (containsKey!127 lt!22870 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58391 () Bool)

(assert (=> b!58391 (= e!38417 (contains!681 lt!22870 (tuple2!2017 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11035 res!32539) b!58390))

(assert (= (and b!58390 res!32540) b!58391))

(assert (=> d!11035 m!48481))

(declare-fun m!49981 () Bool)

(assert (=> d!11035 m!49981))

(declare-fun m!49983 () Bool)

(assert (=> d!11035 m!49983))

(declare-fun m!49985 () Bool)

(assert (=> b!58390 m!49985))

(declare-fun m!49987 () Bool)

(assert (=> b!58391 m!49987))

(assert (=> d!10607 d!11035))

(declare-fun e!38419 () List!1429)

(declare-fun bm!4278 () Bool)

(declare-fun c!7368 () Bool)

(declare-fun call!4283 () List!1429)

(assert (=> bm!4278 (= call!4283 ($colon$colon!59 e!38419 (ite c!7368 (h!2005 (toList!696 e!37819)) (tuple2!2017 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7371 () Bool)

(assert (=> bm!4278 (= c!7371 c!7368)))

(declare-fun b!58392 () Bool)

(declare-fun e!38422 () List!1429)

(declare-fun call!4282 () List!1429)

(assert (=> b!58392 (= e!38422 call!4282)))

(declare-fun d!11037 () Bool)

(declare-fun e!38418 () Bool)

(assert (=> d!11037 e!38418))

(declare-fun res!32541 () Bool)

(assert (=> d!11037 (=> (not res!32541) (not e!38418))))

(declare-fun lt!23439 () List!1429)

(assert (=> d!11037 (= res!32541 (isStrictlySorted!283 lt!23439))))

(declare-fun e!38421 () List!1429)

(assert (=> d!11037 (= lt!23439 e!38421)))

(assert (=> d!11037 (= c!7368 (and ((_ is Cons!1425) (toList!696 e!37819)) (bvslt (_1!1019 (h!2005 (toList!696 e!37819))) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11037 (isStrictlySorted!283 (toList!696 e!37819))))

(assert (=> d!11037 (= (insertStrictlySorted!43 (toList!696 e!37819) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23439)))

(declare-fun b!58393 () Bool)

(assert (=> b!58393 (= e!38421 call!4283)))

(declare-fun b!58394 () Bool)

(declare-fun e!38420 () List!1429)

(assert (=> b!58394 (= e!38421 e!38420)))

(declare-fun c!7370 () Bool)

(assert (=> b!58394 (= c!7370 (and ((_ is Cons!1425) (toList!696 e!37819)) (= (_1!1019 (h!2005 (toList!696 e!37819))) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58395 () Bool)

(assert (=> b!58395 (= e!38418 (contains!681 lt!23439 (tuple2!2017 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!4279 () Bool)

(declare-fun call!4281 () List!1429)

(assert (=> bm!4279 (= call!4281 call!4283)))

(declare-fun b!58396 () Bool)

(assert (=> b!58396 (= e!38419 (insertStrictlySorted!43 (t!4747 (toList!696 e!37819)) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58397 () Bool)

(declare-fun res!32542 () Bool)

(assert (=> b!58397 (=> (not res!32542) (not e!38418))))

(assert (=> b!58397 (= res!32542 (containsKey!127 lt!23439 (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58398 () Bool)

(assert (=> b!58398 (= e!38420 call!4281)))

(declare-fun c!7369 () Bool)

(declare-fun b!58399 () Bool)

(assert (=> b!58399 (= e!38419 (ite c!7370 (t!4747 (toList!696 e!37819)) (ite c!7369 (Cons!1425 (h!2005 (toList!696 e!37819)) (t!4747 (toList!696 e!37819))) Nil!1426)))))

(declare-fun b!58400 () Bool)

(assert (=> b!58400 (= e!38422 call!4282)))

(declare-fun b!58401 () Bool)

(assert (=> b!58401 (= c!7369 (and ((_ is Cons!1425) (toList!696 e!37819)) (bvsgt (_1!1019 (h!2005 (toList!696 e!37819))) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!58401 (= e!38420 e!38422)))

(declare-fun bm!4280 () Bool)

(assert (=> bm!4280 (= call!4282 call!4281)))

(assert (= (and d!11037 c!7368) b!58393))

(assert (= (and d!11037 (not c!7368)) b!58394))

(assert (= (and b!58394 c!7370) b!58398))

(assert (= (and b!58394 (not c!7370)) b!58401))

(assert (= (and b!58401 c!7369) b!58392))

(assert (= (and b!58401 (not c!7369)) b!58400))

(assert (= (or b!58392 b!58400) bm!4280))

(assert (= (or b!58398 bm!4280) bm!4279))

(assert (= (or b!58393 bm!4279) bm!4278))

(assert (= (and bm!4278 c!7371) b!58396))

(assert (= (and bm!4278 (not c!7371)) b!58399))

(assert (= (and d!11037 res!32541) b!58397))

(assert (= (and b!58397 res!32542) b!58395))

(declare-fun m!49989 () Bool)

(assert (=> b!58397 m!49989))

(declare-fun m!49991 () Bool)

(assert (=> b!58396 m!49991))

(declare-fun m!49993 () Bool)

(assert (=> d!11037 m!49993))

(declare-fun m!49995 () Bool)

(assert (=> d!11037 m!49995))

(declare-fun m!49997 () Bool)

(assert (=> b!58395 m!49997))

(declare-fun m!49999 () Bool)

(assert (=> bm!4278 m!49999))

(assert (=> d!10607 d!11037))

(declare-fun d!11039 () Bool)

(declare-fun res!32543 () Bool)

(declare-fun e!38423 () Bool)

(assert (=> d!11039 (=> res!32543 e!38423)))

(assert (=> d!11039 (= res!32543 (and ((_ is Cons!1425) (toList!696 call!4150)) (= (_1!1019 (h!2005 (toList!696 call!4150))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!11039 (= (containsKey!127 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38423)))

(declare-fun b!58402 () Bool)

(declare-fun e!38424 () Bool)

(assert (=> b!58402 (= e!38423 e!38424)))

(declare-fun res!32544 () Bool)

(assert (=> b!58402 (=> (not res!32544) (not e!38424))))

(assert (=> b!58402 (= res!32544 (and (or (not ((_ is Cons!1425) (toList!696 call!4150))) (bvsle (_1!1019 (h!2005 (toList!696 call!4150))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!696 call!4150)) (bvslt (_1!1019 (h!2005 (toList!696 call!4150))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(declare-fun b!58403 () Bool)

(assert (=> b!58403 (= e!38424 (containsKey!127 (t!4747 (toList!696 call!4150)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11039 (not res!32543)) b!58402))

(assert (= (and b!58402 res!32544) b!58403))

(assert (=> b!58403 m!48037))

(declare-fun m!50001 () Bool)

(assert (=> b!58403 m!50001))

(assert (=> d!10659 d!11039))

(declare-fun d!11041 () Bool)

(declare-fun e!38425 () Bool)

(assert (=> d!11041 e!38425))

(declare-fun res!32545 () Bool)

(assert (=> d!11041 (=> res!32545 e!38425)))

(declare-fun lt!23441 () Bool)

(assert (=> d!11041 (= res!32545 (not lt!23441))))

(declare-fun lt!23443 () Bool)

(assert (=> d!11041 (= lt!23441 lt!23443)))

(declare-fun lt!23442 () Unit!1491)

(declare-fun e!38426 () Unit!1491)

(assert (=> d!11041 (= lt!23442 e!38426)))

(declare-fun c!7372 () Bool)

(assert (=> d!11041 (= c!7372 lt!23443)))

(assert (=> d!11041 (= lt!23443 (containsKey!127 (toList!696 lt!22893) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11041 (= (contains!679 lt!22893 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23441)))

(declare-fun b!58404 () Bool)

(declare-fun lt!23440 () Unit!1491)

(assert (=> b!58404 (= e!38426 lt!23440)))

(assert (=> b!58404 (= lt!23440 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22893) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!58404 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58405 () Bool)

(declare-fun Unit!1536 () Unit!1491)

(assert (=> b!58405 (= e!38426 Unit!1536)))

(declare-fun b!58406 () Bool)

(assert (=> b!58406 (= e!38425 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11041 c!7372) b!58404))

(assert (= (and d!11041 (not c!7372)) b!58405))

(assert (= (and d!11041 (not res!32545)) b!58406))

(assert (=> d!11041 m!48125))

(declare-fun m!50003 () Bool)

(assert (=> d!11041 m!50003))

(assert (=> b!58404 m!48125))

(declare-fun m!50005 () Bool)

(assert (=> b!58404 m!50005))

(assert (=> b!58404 m!48125))

(declare-fun m!50007 () Bool)

(assert (=> b!58404 m!50007))

(assert (=> b!58404 m!50007))

(declare-fun m!50009 () Bool)

(assert (=> b!58404 m!50009))

(assert (=> b!58406 m!48125))

(assert (=> b!58406 m!50007))

(assert (=> b!58406 m!50007))

(assert (=> b!58406 m!50009))

(assert (=> b!57607 d!11041))

(assert (=> d!10669 d!10671))

(assert (=> d!10669 d!10673))

(declare-fun d!11043 () Bool)

(assert (=> d!11043 (isDefined!76 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11043 true))

(declare-fun _$12!302 () Unit!1491)

(assert (=> d!11043 (= (choose!295 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) _$12!302)))

(declare-fun bs!2539 () Bool)

(assert (= bs!2539 d!11043))

(assert (=> bs!2539 m!48037))

(assert (=> bs!2539 m!48185))

(assert (=> bs!2539 m!48185))

(assert (=> bs!2539 m!48187))

(assert (=> d!10669 d!11043))

(declare-fun d!11045 () Bool)

(declare-fun res!32550 () Bool)

(declare-fun e!38431 () Bool)

(assert (=> d!11045 (=> res!32550 e!38431)))

(assert (=> d!11045 (= res!32550 (or ((_ is Nil!1426) (toList!696 lt!22590)) ((_ is Nil!1426) (t!4747 (toList!696 lt!22590)))))))

(assert (=> d!11045 (= (isStrictlySorted!283 (toList!696 lt!22590)) e!38431)))

(declare-fun b!58411 () Bool)

(declare-fun e!38432 () Bool)

(assert (=> b!58411 (= e!38431 e!38432)))

(declare-fun res!32551 () Bool)

(assert (=> b!58411 (=> (not res!32551) (not e!38432))))

(assert (=> b!58411 (= res!32551 (bvslt (_1!1019 (h!2005 (toList!696 lt!22590))) (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590))))))))

(declare-fun b!58412 () Bool)

(assert (=> b!58412 (= e!38432 (isStrictlySorted!283 (t!4747 (toList!696 lt!22590))))))

(assert (= (and d!11045 (not res!32550)) b!58411))

(assert (= (and b!58411 res!32551) b!58412))

(declare-fun m!50011 () Bool)

(assert (=> b!58412 m!50011))

(assert (=> d!10669 d!11045))

(declare-fun d!11047 () Bool)

(assert (=> d!11047 (= (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22671)) (v!2372 (getValueByKey!123 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22671)))))

(assert (=> d!10623 d!11047))

(declare-fun b!58414 () Bool)

(declare-fun e!38433 () Option!129)

(declare-fun e!38434 () Option!129)

(assert (=> b!58414 (= e!38433 e!38434)))

(declare-fun c!7374 () Bool)

(assert (=> b!58414 (= c!7374 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (not (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22671))))))

(declare-fun b!58413 () Bool)

(assert (=> b!58413 (= e!38433 (Some!128 (_2!1019 (h!2005 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58416 () Bool)

(assert (=> b!58416 (= e!38434 None!127)))

(declare-fun d!11049 () Bool)

(declare-fun c!7373 () Bool)

(assert (=> d!11049 (= c!7373 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22671)))))

(assert (=> d!11049 (= (getValueByKey!123 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22671) e!38433)))

(declare-fun b!58415 () Bool)

(assert (=> b!58415 (= e!38434 (getValueByKey!123 (t!4747 (toList!696 (+!80 lt!22668 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!22671))))

(assert (= (and d!11049 c!7373) b!58413))

(assert (= (and d!11049 (not c!7373)) b!58414))

(assert (= (and b!58414 c!7374) b!58415))

(assert (= (and b!58414 (not c!7374)) b!58416))

(declare-fun m!50013 () Bool)

(assert (=> b!58415 m!50013))

(assert (=> d!10623 d!11049))

(declare-fun b!58418 () Bool)

(declare-fun e!38435 () Option!129)

(declare-fun e!38436 () Option!129)

(assert (=> b!58418 (= e!38435 e!38436)))

(declare-fun c!7376 () Bool)

(assert (=> b!58418 (= c!7376 (and ((_ is Cons!1425) (toList!696 lt!22871)) (not (= (_1!1019 (h!2005 (toList!696 lt!22871))) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!58417 () Bool)

(assert (=> b!58417 (= e!38435 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22871)))))))

(declare-fun b!58420 () Bool)

(assert (=> b!58420 (= e!38436 None!127)))

(declare-fun c!7375 () Bool)

(declare-fun d!11051 () Bool)

(assert (=> d!11051 (= c!7375 (and ((_ is Cons!1425) (toList!696 lt!22871)) (= (_1!1019 (h!2005 (toList!696 lt!22871))) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11051 (= (getValueByKey!123 (toList!696 lt!22871) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38435)))

(declare-fun b!58419 () Bool)

(assert (=> b!58419 (= e!38436 (getValueByKey!123 (t!4747 (toList!696 lt!22871)) (_1!1019 (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11051 c!7375) b!58417))

(assert (= (and d!11051 (not c!7375)) b!58418))

(assert (= (and b!58418 c!7376) b!58419))

(assert (= (and b!58418 (not c!7376)) b!58420))

(declare-fun m!50015 () Bool)

(assert (=> b!58419 m!50015))

(assert (=> b!57576 d!11051))

(declare-fun d!11053 () Bool)

(assert (=> d!11053 (= (get!1061 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2367 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57745 d!11053))

(assert (=> bm!4191 d!10667))

(assert (=> b!57611 d!10581))

(assert (=> bm!4162 d!10975))

(assert (=> b!57508 d!10771))

(declare-fun d!11055 () Bool)

(declare-fun isEmpty!292 (List!1429) Bool)

(assert (=> d!11055 (= (isEmpty!290 lt!22893) (isEmpty!292 (toList!696 lt!22893)))))

(declare-fun bs!2540 () Bool)

(assert (= bs!2540 d!11055))

(declare-fun m!50017 () Bool)

(assert (=> bs!2540 m!50017))

(assert (=> b!57615 d!11055))

(declare-fun d!11057 () Bool)

(declare-fun res!32552 () Bool)

(declare-fun e!38437 () Bool)

(assert (=> d!11057 (=> res!32552 e!38437)))

(assert (=> d!11057 (= res!32552 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11057 (= (containsKey!127 (toList!696 lt!22664) #b0000000000000000000000000000000000000000000000000000000000000000) e!38437)))

(declare-fun b!58421 () Bool)

(declare-fun e!38438 () Bool)

(assert (=> b!58421 (= e!38437 e!38438)))

(declare-fun res!32553 () Bool)

(assert (=> b!58421 (=> (not res!32553) (not e!38438))))

(assert (=> b!58421 (= res!32553 (and (or (not ((_ is Cons!1425) (toList!696 lt!22664))) (bvsle (_1!1019 (h!2005 (toList!696 lt!22664))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1425) (toList!696 lt!22664)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22664))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58422 () Bool)

(assert (=> b!58422 (= e!38438 (containsKey!127 (t!4747 (toList!696 lt!22664)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11057 (not res!32552)) b!58421))

(assert (= (and b!58421 res!32553) b!58422))

(declare-fun m!50019 () Bool)

(assert (=> b!58422 m!50019))

(assert (=> d!10687 d!11057))

(declare-fun d!11059 () Bool)

(declare-fun e!38439 () Bool)

(assert (=> d!11059 e!38439))

(declare-fun res!32554 () Bool)

(assert (=> d!11059 (=> res!32554 e!38439)))

(declare-fun lt!23445 () Bool)

(assert (=> d!11059 (= res!32554 (not lt!23445))))

(declare-fun lt!23447 () Bool)

(assert (=> d!11059 (= lt!23445 lt!23447)))

(declare-fun lt!23446 () Unit!1491)

(declare-fun e!38440 () Unit!1491)

(assert (=> d!11059 (= lt!23446 e!38440)))

(declare-fun c!7377 () Bool)

(assert (=> d!11059 (= c!7377 lt!23447)))

(assert (=> d!11059 (= lt!23447 (containsKey!127 (toList!696 lt!22810) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11059 (= (contains!679 lt!22810 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23445)))

(declare-fun b!58423 () Bool)

(declare-fun lt!23444 () Unit!1491)

(assert (=> b!58423 (= e!38440 lt!23444)))

(assert (=> b!58423 (= lt!23444 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22810) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58423 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58424 () Bool)

(declare-fun Unit!1537 () Unit!1491)

(assert (=> b!58424 (= e!38440 Unit!1537)))

(declare-fun b!58425 () Bool)

(assert (=> b!58425 (= e!38439 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11059 c!7377) b!58423))

(assert (= (and d!11059 (not c!7377)) b!58424))

(assert (= (and d!11059 (not res!32554)) b!58425))

(assert (=> d!11059 m!48295))

(declare-fun m!50021 () Bool)

(assert (=> d!11059 m!50021))

(assert (=> b!58423 m!48295))

(declare-fun m!50023 () Bool)

(assert (=> b!58423 m!50023))

(assert (=> b!58423 m!48295))

(assert (=> b!58423 m!49403))

(assert (=> b!58423 m!49403))

(declare-fun m!50025 () Bool)

(assert (=> b!58423 m!50025))

(assert (=> b!58425 m!48295))

(assert (=> b!58425 m!49403))

(assert (=> b!58425 m!49403))

(assert (=> b!58425 m!50025))

(assert (=> b!57528 d!11059))

(declare-fun d!11061 () Bool)

(declare-fun e!38441 () Bool)

(assert (=> d!11061 e!38441))

(declare-fun res!32555 () Bool)

(assert (=> d!11061 (=> (not res!32555) (not e!38441))))

(declare-fun lt!23450 () ListLongMap!1361)

(assert (=> d!11061 (= res!32555 (contains!679 lt!23450 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23449 () List!1429)

(assert (=> d!11061 (= lt!23450 (ListLongMap!1362 lt!23449))))

(declare-fun lt!23448 () Unit!1491)

(declare-fun lt!23451 () Unit!1491)

(assert (=> d!11061 (= lt!23448 lt!23451)))

(assert (=> d!11061 (= (getValueByKey!123 lt!23449 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11061 (= lt!23451 (lemmaContainsTupThenGetReturnValue!40 lt!23449 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11061 (= lt!23449 (insertStrictlySorted!43 (toList!696 call!4210) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11061 (= (+!80 call!4210 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23450)))

(declare-fun b!58426 () Bool)

(declare-fun res!32556 () Bool)

(assert (=> b!58426 (=> (not res!32556) (not e!38441))))

(assert (=> b!58426 (= res!32556 (= (getValueByKey!123 (toList!696 lt!23450) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58427 () Bool)

(assert (=> b!58427 (= e!38441 (contains!681 (toList!696 lt!23450) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!11061 res!32555) b!58426))

(assert (= (and b!58426 res!32556) b!58427))

(declare-fun m!50027 () Bool)

(assert (=> d!11061 m!50027))

(declare-fun m!50029 () Bool)

(assert (=> d!11061 m!50029))

(declare-fun m!50031 () Bool)

(assert (=> d!11061 m!50031))

(declare-fun m!50033 () Bool)

(assert (=> d!11061 m!50033))

(declare-fun m!50035 () Bool)

(assert (=> b!58426 m!50035))

(declare-fun m!50037 () Bool)

(assert (=> b!58427 m!50037))

(assert (=> b!57801 d!11061))

(assert (=> b!57700 d!10601))

(assert (=> b!57535 d!10771))

(declare-fun d!11063 () Bool)

(assert (=> d!11063 (= (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57766 d!11063))

(assert (=> b!57771 d!10787))

(assert (=> b!57771 d!10779))

(assert (=> d!10639 d!10633))

(assert (=> d!10639 d!10619))

(declare-fun d!11065 () Bool)

(assert (=> d!11065 (= (apply!65 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!22659) (apply!65 lt!22670 lt!22659))))

(assert (=> d!11065 true))

(declare-fun _$34!756 () Unit!1491)

(assert (=> d!11065 (= (choose!290 lt!22670 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))) lt!22659) _$34!756)))

(declare-fun bs!2541 () Bool)

(assert (= bs!2541 d!11065))

(assert (=> bs!2541 m!48143))

(assert (=> bs!2541 m!48143))

(assert (=> bs!2541 m!48163))

(assert (=> bs!2541 m!48137))

(assert (=> d!10639 d!11065))

(assert (=> d!10639 d!10621))

(declare-fun d!11067 () Bool)

(declare-fun e!38442 () Bool)

(assert (=> d!11067 e!38442))

(declare-fun res!32557 () Bool)

(assert (=> d!11067 (=> res!32557 e!38442)))

(declare-fun lt!23453 () Bool)

(assert (=> d!11067 (= res!32557 (not lt!23453))))

(declare-fun lt!23455 () Bool)

(assert (=> d!11067 (= lt!23453 lt!23455)))

(declare-fun lt!23454 () Unit!1491)

(declare-fun e!38443 () Unit!1491)

(assert (=> d!11067 (= lt!23454 e!38443)))

(declare-fun c!7378 () Bool)

(assert (=> d!11067 (= c!7378 lt!23455)))

(assert (=> d!11067 (= lt!23455 (containsKey!127 (toList!696 lt!22670) lt!22659))))

(assert (=> d!11067 (= (contains!679 lt!22670 lt!22659) lt!23453)))

(declare-fun b!58428 () Bool)

(declare-fun lt!23452 () Unit!1491)

(assert (=> b!58428 (= e!38443 lt!23452)))

(assert (=> b!58428 (= lt!23452 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22670) lt!22659))))

(assert (=> b!58428 (isDefined!76 (getValueByKey!123 (toList!696 lt!22670) lt!22659))))

(declare-fun b!58429 () Bool)

(declare-fun Unit!1538 () Unit!1491)

(assert (=> b!58429 (= e!38443 Unit!1538)))

(declare-fun b!58430 () Bool)

(assert (=> b!58430 (= e!38442 (isDefined!76 (getValueByKey!123 (toList!696 lt!22670) lt!22659)))))

(assert (= (and d!11067 c!7378) b!58428))

(assert (= (and d!11067 (not c!7378)) b!58429))

(assert (= (and d!11067 (not res!32557)) b!58430))

(declare-fun m!50039 () Bool)

(assert (=> d!11067 m!50039))

(declare-fun m!50041 () Bool)

(assert (=> b!58428 m!50041))

(assert (=> b!58428 m!48527))

(assert (=> b!58428 m!48527))

(declare-fun m!50043 () Bool)

(assert (=> b!58428 m!50043))

(assert (=> b!58430 m!48527))

(assert (=> b!58430 m!48527))

(assert (=> b!58430 m!50043))

(assert (=> d!10639 d!11067))

(declare-fun d!11069 () Bool)

(assert (=> d!11069 (= (get!1063 (getValueByKey!123 (toList!696 lt!22670) lt!22659)) (v!2372 (getValueByKey!123 (toList!696 lt!22670) lt!22659)))))

(assert (=> d!10619 d!11069))

(declare-fun b!58432 () Bool)

(declare-fun e!38444 () Option!129)

(declare-fun e!38445 () Option!129)

(assert (=> b!58432 (= e!38444 e!38445)))

(declare-fun c!7380 () Bool)

(assert (=> b!58432 (= c!7380 (and ((_ is Cons!1425) (toList!696 lt!22670)) (not (= (_1!1019 (h!2005 (toList!696 lt!22670))) lt!22659))))))

(declare-fun b!58431 () Bool)

(assert (=> b!58431 (= e!38444 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22670)))))))

(declare-fun b!58434 () Bool)

(assert (=> b!58434 (= e!38445 None!127)))

(declare-fun d!11071 () Bool)

(declare-fun c!7379 () Bool)

(assert (=> d!11071 (= c!7379 (and ((_ is Cons!1425) (toList!696 lt!22670)) (= (_1!1019 (h!2005 (toList!696 lt!22670))) lt!22659)))))

(assert (=> d!11071 (= (getValueByKey!123 (toList!696 lt!22670) lt!22659) e!38444)))

(declare-fun b!58433 () Bool)

(assert (=> b!58433 (= e!38445 (getValueByKey!123 (t!4747 (toList!696 lt!22670)) lt!22659))))

(assert (= (and d!11071 c!7379) b!58431))

(assert (= (and d!11071 (not c!7379)) b!58432))

(assert (= (and b!58432 c!7380) b!58433))

(assert (= (and b!58432 (not c!7380)) b!58434))

(declare-fun m!50045 () Bool)

(assert (=> b!58433 m!50045))

(assert (=> d!10619 d!11071))

(declare-fun d!11073 () Bool)

(declare-fun lt!23456 () Bool)

(assert (=> d!11073 (= lt!23456 (select (content!62 (toList!696 lt!22910)) (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun e!38447 () Bool)

(assert (=> d!11073 (= lt!23456 e!38447)))

(declare-fun res!32558 () Bool)

(assert (=> d!11073 (=> (not res!32558) (not e!38447))))

(assert (=> d!11073 (= res!32558 ((_ is Cons!1425) (toList!696 lt!22910)))))

(assert (=> d!11073 (= (contains!681 (toList!696 lt!22910) (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) lt!23456)))

(declare-fun b!58435 () Bool)

(declare-fun e!38446 () Bool)

(assert (=> b!58435 (= e!38447 e!38446)))

(declare-fun res!32559 () Bool)

(assert (=> b!58435 (=> res!32559 e!38446)))

(assert (=> b!58435 (= res!32559 (= (h!2005 (toList!696 lt!22910)) (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(declare-fun b!58436 () Bool)

(assert (=> b!58436 (= e!38446 (contains!681 (t!4747 (toList!696 lt!22910)) (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!11073 res!32558) b!58435))

(assert (= (and b!58435 (not res!32559)) b!58436))

(declare-fun m!50047 () Bool)

(assert (=> d!11073 m!50047))

(declare-fun m!50049 () Bool)

(assert (=> d!11073 m!50049))

(declare-fun m!50051 () Bool)

(assert (=> b!58436 m!50051))

(assert (=> b!57624 d!11073))

(declare-fun d!11075 () Bool)

(declare-fun e!38448 () Bool)

(assert (=> d!11075 e!38448))

(declare-fun res!32560 () Bool)

(assert (=> d!11075 (=> (not res!32560) (not e!38448))))

(declare-fun lt!23459 () ListLongMap!1361)

(assert (=> d!11075 (= res!32560 (contains!679 lt!23459 (_1!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun lt!23458 () List!1429)

(assert (=> d!11075 (= lt!23459 (ListLongMap!1362 lt!23458))))

(declare-fun lt!23457 () Unit!1491)

(declare-fun lt!23460 () Unit!1491)

(assert (=> d!11075 (= lt!23457 lt!23460)))

(assert (=> d!11075 (= (getValueByKey!123 lt!23458 (_1!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))) (Some!128 (_2!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11075 (= lt!23460 (lemmaContainsTupThenGetReturnValue!40 lt!23458 (_1!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (_2!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11075 (= lt!23458 (insertStrictlySorted!43 (toList!696 (ite c!7196 call!4211 (ite c!7195 call!4208 call!4212))) (_1!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (_2!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11075 (= (+!80 (ite c!7196 call!4211 (ite c!7195 call!4208 call!4212)) (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!23459)))

(declare-fun b!58437 () Bool)

(declare-fun res!32561 () Bool)

(assert (=> b!58437 (=> (not res!32561) (not e!38448))))

(assert (=> b!58437 (= res!32561 (= (getValueByKey!123 (toList!696 lt!23459) (_1!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))) (Some!128 (_2!1019 (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))))

(declare-fun b!58438 () Bool)

(assert (=> b!58438 (= e!38448 (contains!681 (toList!696 lt!23459) (ite (or c!7196 c!7195) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7092 (ite c!7098 (minValue!1940 newMap!16) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (= (and d!11075 res!32560) b!58437))

(assert (= (and b!58437 res!32561) b!58438))

(declare-fun m!50053 () Bool)

(assert (=> d!11075 m!50053))

(declare-fun m!50055 () Bool)

(assert (=> d!11075 m!50055))

(declare-fun m!50057 () Bool)

(assert (=> d!11075 m!50057))

(declare-fun m!50059 () Bool)

(assert (=> d!11075 m!50059))

(declare-fun m!50061 () Bool)

(assert (=> b!58437 m!50061))

(declare-fun m!50063 () Bool)

(assert (=> b!58438 m!50063))

(assert (=> bm!4208 d!11075))

(declare-fun b!58440 () Bool)

(declare-fun e!38449 () Option!129)

(declare-fun e!38450 () Option!129)

(assert (=> b!58440 (= e!38449 e!38450)))

(declare-fun c!7382 () Bool)

(assert (=> b!58440 (= c!7382 (and ((_ is Cons!1425) (toList!696 lt!22837)) (not (= (_1!1019 (h!2005 (toList!696 lt!22837))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58439 () Bool)

(assert (=> b!58439 (= e!38449 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22837)))))))

(declare-fun b!58442 () Bool)

(assert (=> b!58442 (= e!38450 None!127)))

(declare-fun d!11077 () Bool)

(declare-fun c!7381 () Bool)

(assert (=> d!11077 (= c!7381 (and ((_ is Cons!1425) (toList!696 lt!22837)) (= (_1!1019 (h!2005 (toList!696 lt!22837))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11077 (= (getValueByKey!123 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38449)))

(declare-fun b!58441 () Bool)

(assert (=> b!58441 (= e!38450 (getValueByKey!123 (t!4747 (toList!696 lt!22837)) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!11077 c!7381) b!58439))

(assert (= (and d!11077 (not c!7381)) b!58440))

(assert (= (and b!58440 c!7382) b!58441))

(assert (= (and b!58440 (not c!7382)) b!58442))

(declare-fun m!50065 () Bool)

(assert (=> b!58441 m!50065))

(assert (=> b!57540 d!11077))

(declare-fun b!58444 () Bool)

(declare-fun e!38451 () Option!129)

(declare-fun e!38452 () Option!129)

(assert (=> b!58444 (= e!38451 e!38452)))

(declare-fun c!7384 () Bool)

(assert (=> b!58444 (= c!7384 (and ((_ is Cons!1425) (toList!696 lt!22867)) (not (= (_1!1019 (h!2005 (toList!696 lt!22867))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58443 () Bool)

(assert (=> b!58443 (= e!38451 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22867)))))))

(declare-fun b!58446 () Bool)

(assert (=> b!58446 (= e!38452 None!127)))

(declare-fun c!7383 () Bool)

(declare-fun d!11079 () Bool)

(assert (=> d!11079 (= c!7383 (and ((_ is Cons!1425) (toList!696 lt!22867)) (= (_1!1019 (h!2005 (toList!696 lt!22867))) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(assert (=> d!11079 (= (getValueByKey!123 (toList!696 lt!22867) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) e!38451)))

(declare-fun b!58445 () Bool)

(assert (=> b!58445 (= e!38452 (getValueByKey!123 (t!4747 (toList!696 lt!22867)) (_1!1019 (ite (or c!7057 c!7056) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!11079 c!7383) b!58443))

(assert (= (and d!11079 (not c!7383)) b!58444))

(assert (= (and b!58444 c!7384) b!58445))

(assert (= (and b!58444 (not c!7384)) b!58446))

(declare-fun m!50067 () Bool)

(assert (=> b!58445 m!50067))

(assert (=> b!57568 d!11079))

(declare-fun d!11081 () Bool)

(assert (=> d!11081 (= (inRange!0 (ite c!7166 (index!3026 lt!23034) (index!3029 lt!23034)) (mask!5896 newMap!16)) (and (bvsge (ite c!7166 (index!3026 lt!23034) (index!3029 lt!23034)) #b00000000000000000000000000000000) (bvslt (ite c!7166 (index!3026 lt!23034) (index!3029 lt!23034)) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4196 d!11081))

(declare-fun d!11083 () Bool)

(declare-fun e!38453 () Bool)

(assert (=> d!11083 e!38453))

(declare-fun res!32562 () Bool)

(assert (=> d!11083 (=> res!32562 e!38453)))

(declare-fun lt!23462 () Bool)

(assert (=> d!11083 (= res!32562 (not lt!23462))))

(declare-fun lt!23464 () Bool)

(assert (=> d!11083 (= lt!23462 lt!23464)))

(declare-fun lt!23463 () Unit!1491)

(declare-fun e!38454 () Unit!1491)

(assert (=> d!11083 (= lt!23463 e!38454)))

(declare-fun c!7385 () Bool)

(assert (=> d!11083 (= c!7385 lt!23464)))

(assert (=> d!11083 (= lt!23464 (containsKey!127 (toList!696 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11083 (= (contains!679 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23462)))

(declare-fun b!58447 () Bool)

(declare-fun lt!23461 () Unit!1491)

(assert (=> b!58447 (= e!38454 lt!23461)))

(assert (=> b!58447 (= lt!23461 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58447 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58448 () Bool)

(declare-fun Unit!1539 () Unit!1491)

(assert (=> b!58448 (= e!38454 Unit!1539)))

(declare-fun b!58449 () Bool)

(assert (=> b!58449 (= e!38453 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11083 c!7385) b!58447))

(assert (= (and d!11083 (not c!7385)) b!58448))

(assert (= (and d!11083 (not res!32562)) b!58449))

(declare-fun m!50069 () Bool)

(assert (=> d!11083 m!50069))

(declare-fun m!50071 () Bool)

(assert (=> b!58447 m!50071))

(assert (=> b!58447 m!49605))

(assert (=> b!58447 m!49605))

(declare-fun m!50073 () Bool)

(assert (=> b!58447 m!50073))

(assert (=> b!58449 m!49605))

(assert (=> b!58449 m!49605))

(assert (=> b!58449 m!50073))

(assert (=> bm!4170 d!11083))

(declare-fun b!58450 () Bool)

(declare-fun e!38455 () (_ BitVec 32))

(declare-fun e!38456 () (_ BitVec 32))

(assert (=> b!58450 (= e!38455 e!38456)))

(declare-fun c!7386 () Bool)

(assert (=> b!58450 (= c!7386 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!58451 () Bool)

(declare-fun call!4284 () (_ BitVec 32))

(assert (=> b!58451 (= e!38456 (bvadd #b00000000000000000000000000000001 call!4284))))

(declare-fun b!58452 () Bool)

(assert (=> b!58452 (= e!38456 call!4284)))

(declare-fun d!11085 () Bool)

(declare-fun lt!23465 () (_ BitVec 32))

(assert (=> d!11085 (and (bvsge lt!23465 #b00000000000000000000000000000000) (bvsle lt!23465 (bvsub (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!11085 (= lt!23465 e!38455)))

(declare-fun c!7387 () Bool)

(assert (=> d!11085 (= c!7387 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!11085 (and (bvsle #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (=> d!11085 (= (arrayCountValidKeys!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) #b00000000000000000000000000000000 (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))) lt!23465)))

(declare-fun b!58453 () Bool)

(assert (=> b!58453 (= e!38455 #b00000000000000000000000000000000)))

(declare-fun bm!4281 () Bool)

(assert (=> bm!4281 (= call!4284 (arrayCountValidKeys!0 (_keys!3642 (v!2368 (underlying!224 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 (v!2368 (underlying!224 thiss!992))))))))

(assert (= (and d!11085 c!7387) b!58453))

(assert (= (and d!11085 (not c!7387)) b!58450))

(assert (= (and b!58450 c!7386) b!58451))

(assert (= (and b!58450 (not c!7386)) b!58452))

(assert (= (or b!58451 b!58452) bm!4281))

(assert (=> b!58450 m!49119))

(assert (=> b!58450 m!49119))

(assert (=> b!58450 m!49129))

(declare-fun m!50075 () Bool)

(assert (=> bm!4281 m!50075))

(assert (=> b!57557 d!11085))

(declare-fun d!11087 () Bool)

(assert (=> d!11087 (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))

(declare-fun lt!23468 () Unit!1491)

(declare-fun choose!299 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1491)

(assert (=> d!11087 (= lt!23468 (choose!299 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!11087 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11087 (= (lemmaArrayContainsKeyThenInListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23468)))

(declare-fun bs!2542 () Bool)

(assert (= bs!2542 d!11087))

(assert (=> bs!2542 m!48121))

(assert (=> bs!2542 m!48121))

(assert (=> bs!2542 m!48037))

(assert (=> bs!2542 m!48685))

(assert (=> bs!2542 m!48037))

(declare-fun m!50077 () Bool)

(assert (=> bs!2542 m!50077))

(assert (=> bs!2542 m!48289))

(assert (=> b!57687 d!11087))

(declare-fun d!11089 () Bool)

(declare-fun e!38457 () Bool)

(assert (=> d!11089 e!38457))

(declare-fun res!32563 () Bool)

(assert (=> d!11089 (=> res!32563 e!38457)))

(declare-fun lt!23470 () Bool)

(assert (=> d!11089 (= res!32563 (not lt!23470))))

(declare-fun lt!23472 () Bool)

(assert (=> d!11089 (= lt!23470 lt!23472)))

(declare-fun lt!23471 () Unit!1491)

(declare-fun e!38458 () Unit!1491)

(assert (=> d!11089 (= lt!23471 e!38458)))

(declare-fun c!7388 () Bool)

(assert (=> d!11089 (= c!7388 lt!23472)))

(assert (=> d!11089 (= lt!23472 (containsKey!127 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11089 (= (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23470)))

(declare-fun b!58454 () Bool)

(declare-fun lt!23469 () Unit!1491)

(assert (=> b!58454 (= e!38458 lt!23469)))

(assert (=> b!58454 (= lt!23469 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!58454 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!58455 () Bool)

(declare-fun Unit!1540 () Unit!1491)

(assert (=> b!58455 (= e!38458 Unit!1540)))

(declare-fun b!58456 () Bool)

(assert (=> b!58456 (= e!38457 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (= (and d!11089 c!7388) b!58454))

(assert (= (and d!11089 (not c!7388)) b!58455))

(assert (= (and d!11089 (not res!32563)) b!58456))

(assert (=> d!11089 m!48037))

(declare-fun m!50079 () Bool)

(assert (=> d!11089 m!50079))

(assert (=> b!58454 m!48037))

(declare-fun m!50081 () Bool)

(assert (=> b!58454 m!50081))

(assert (=> b!58454 m!48037))

(declare-fun m!50083 () Bool)

(assert (=> b!58454 m!50083))

(assert (=> b!58454 m!50083))

(declare-fun m!50085 () Bool)

(assert (=> b!58454 m!50085))

(assert (=> b!58456 m!48037))

(assert (=> b!58456 m!50083))

(assert (=> b!58456 m!50083))

(assert (=> b!58456 m!50085))

(assert (=> b!57687 d!11089))

(assert (=> b!57687 d!10583))

(declare-fun d!11091 () Bool)

(assert (=> d!11091 (= (inRange!0 (index!3027 lt!22864) (mask!5896 newMap!16)) (and (bvsge (index!3027 lt!22864) #b00000000000000000000000000000000) (bvslt (index!3027 lt!22864) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!57566 d!11091))

(declare-fun d!11093 () Bool)

(assert (=> d!11093 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!11093 true))

(declare-fun _$5!59 () Unit!1491)

(assert (=> d!11093 (= (choose!293 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) _$5!59)))

(declare-fun bs!2543 () Bool)

(assert (= bs!2543 d!11093))

(assert (=> bs!2543 m!48121))

(assert (=> bs!2543 m!48121))

(assert (=> bs!2543 m!48629))

(assert (=> bs!2543 m!48211))

(assert (=> bs!2543 m!48631))

(assert (=> d!10647 d!11093))

(assert (=> d!10647 d!10767))

(declare-fun d!11095 () Bool)

(declare-fun e!38459 () Bool)

(assert (=> d!11095 e!38459))

(declare-fun res!32564 () Bool)

(assert (=> d!11095 (=> res!32564 e!38459)))

(declare-fun lt!23474 () Bool)

(assert (=> d!11095 (= res!32564 (not lt!23474))))

(declare-fun lt!23476 () Bool)

(assert (=> d!11095 (= lt!23474 lt!23476)))

(declare-fun lt!23475 () Unit!1491)

(declare-fun e!38460 () Unit!1491)

(assert (=> d!11095 (= lt!23475 e!38460)))

(declare-fun c!7389 () Bool)

(assert (=> d!11095 (= c!7389 lt!23476)))

(assert (=> d!11095 (= lt!23476 (containsKey!127 (toList!696 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11095 (= (contains!679 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23474)))

(declare-fun b!58457 () Bool)

(declare-fun lt!23473 () Unit!1491)

(assert (=> b!58457 (= e!38460 lt!23473)))

(assert (=> b!58457 (= lt!23473 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58457 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58458 () Bool)

(declare-fun Unit!1541 () Unit!1491)

(assert (=> b!58458 (= e!38460 Unit!1541)))

(declare-fun b!58459 () Bool)

(assert (=> b!58459 (= e!38459 (isDefined!76 (getValueByKey!123 (toList!696 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11095 c!7389) b!58457))

(assert (= (and d!11095 (not c!7389)) b!58458))

(assert (= (and d!11095 (not res!32564)) b!58459))

(declare-fun m!50087 () Bool)

(assert (=> d!11095 m!50087))

(declare-fun m!50089 () Bool)

(assert (=> b!58457 m!50089))

(assert (=> b!58457 m!49609))

(assert (=> b!58457 m!49609))

(declare-fun m!50091 () Bool)

(assert (=> b!58457 m!50091))

(assert (=> b!58459 m!49609))

(assert (=> b!58459 m!49609))

(assert (=> b!58459 m!50091))

(assert (=> bm!4171 d!11095))

(declare-fun d!11097 () Bool)

(assert (=> d!11097 (isDefined!76 (getValueByKey!123 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!23477 () Unit!1491)

(assert (=> d!11097 (= lt!23477 (choose!295 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38461 () Bool)

(assert (=> d!11097 e!38461))

(declare-fun res!32565 () Bool)

(assert (=> d!11097 (=> (not res!32565) (not e!38461))))

(assert (=> d!11097 (= res!32565 (isStrictlySorted!283 (toList!696 lt!22664)))))

(assert (=> d!11097 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23477)))

(declare-fun b!58460 () Bool)

(assert (=> b!58460 (= e!38461 (containsKey!127 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11097 res!32565) b!58460))

(assert (=> d!11097 m!48125))

(assert (=> d!11097 m!48637))

(assert (=> d!11097 m!48637))

(assert (=> d!11097 m!48639))

(assert (=> d!11097 m!48125))

(declare-fun m!50093 () Bool)

(assert (=> d!11097 m!50093))

(assert (=> d!11097 m!49157))

(assert (=> b!58460 m!48125))

(assert (=> b!58460 m!48633))

(assert (=> b!57647 d!11097))

(assert (=> b!57647 d!10905))

(assert (=> b!57647 d!10907))

(declare-fun d!11099 () Bool)

(assert (=> d!11099 (= (isEmpty!291 (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) (not ((_ is Some!128) (getValueByKey!123 (toList!696 lt!22590) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))))

(assert (=> d!10671 d!11099))

(declare-fun d!11101 () Bool)

(assert (=> d!11101 (isDefined!76 (getValueByKey!123 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun lt!23478 () Unit!1491)

(assert (=> d!11101 (= lt!23478 (choose!295 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun e!38462 () Bool)

(assert (=> d!11101 e!38462))

(declare-fun res!32566 () Bool)

(assert (=> d!11101 (=> (not res!32566) (not e!38462))))

(assert (=> d!11101 (= res!32566 (isStrictlySorted!283 (toList!696 e!37836)))))

(assert (=> d!11101 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23478)))

(declare-fun b!58461 () Bool)

(assert (=> b!58461 (= e!38462 (containsKey!127 (toList!696 e!37836) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11101 res!32566) b!58461))

(assert (=> d!11101 m!48037))

(assert (=> d!11101 m!48435))

(assert (=> d!11101 m!48435))

(assert (=> d!11101 m!48437))

(assert (=> d!11101 m!48037))

(declare-fun m!50095 () Bool)

(assert (=> d!11101 m!50095))

(declare-fun m!50097 () Bool)

(assert (=> d!11101 m!50097))

(assert (=> b!58461 m!48037))

(assert (=> b!58461 m!48431))

(assert (=> b!57554 d!11101))

(assert (=> b!57554 d!10925))

(assert (=> b!57554 d!10927))

(assert (=> b!57627 d!10869))

(assert (=> b!57627 d!10871))

(declare-fun d!11103 () Bool)

(assert (=> d!11103 (= (apply!65 lt!23070 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1063 (getValueByKey!123 (toList!696 lt!23070) (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2544 () Bool)

(assert (= bs!2544 d!11103))

(assert (=> bs!2544 m!48295))

(assert (=> bs!2544 m!49455))

(assert (=> bs!2544 m!49455))

(declare-fun m!50099 () Bool)

(assert (=> bs!2544 m!50099))

(assert (=> b!57799 d!11103))

(declare-fun d!11105 () Bool)

(declare-fun c!7390 () Bool)

(assert (=> d!11105 (= c!7390 ((_ is ValueCellFull!852) (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000)))))

(declare-fun e!38463 () V!2835)

(assert (=> d!11105 (= (get!1060 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38463)))

(declare-fun b!58462 () Bool)

(assert (=> b!58462 (= e!38463 (get!1061 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58463 () Bool)

(assert (=> b!58463 (= e!38463 (get!1062 (select (arr!1776 (ite (or c!7092 c!7105) (_values!2005 newMap!16) lt!22762)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11105 c!7390) b!58462))

(assert (= (and d!11105 (not c!7390)) b!58463))

(assert (=> b!58462 m!48819))

(assert (=> b!58462 m!48339))

(declare-fun m!50101 () Bool)

(assert (=> b!58462 m!50101))

(assert (=> b!58463 m!48819))

(assert (=> b!58463 m!48339))

(declare-fun m!50103 () Bool)

(assert (=> b!58463 m!50103))

(assert (=> b!57799 d!11105))

(declare-fun d!11107 () Bool)

(declare-fun e!38464 () Bool)

(assert (=> d!11107 e!38464))

(declare-fun res!32567 () Bool)

(assert (=> d!11107 (=> res!32567 e!38464)))

(declare-fun lt!23480 () Bool)

(assert (=> d!11107 (= res!32567 (not lt!23480))))

(declare-fun lt!23482 () Bool)

(assert (=> d!11107 (= lt!23480 lt!23482)))

(declare-fun lt!23481 () Unit!1491)

(declare-fun e!38465 () Unit!1491)

(assert (=> d!11107 (= lt!23481 e!38465)))

(declare-fun c!7391 () Bool)

(assert (=> d!11107 (= c!7391 lt!23482)))

(assert (=> d!11107 (= lt!23482 (containsKey!127 (toList!696 lt!22893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11107 (= (contains!679 lt!22893 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23480)))

(declare-fun b!58464 () Bool)

(declare-fun lt!23479 () Unit!1491)

(assert (=> b!58464 (= e!38465 lt!23479)))

(assert (=> b!58464 (= lt!23479 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58464 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58465 () Bool)

(declare-fun Unit!1542 () Unit!1491)

(assert (=> b!58465 (= e!38465 Unit!1542)))

(declare-fun b!58466 () Bool)

(assert (=> b!58466 (= e!38464 (isDefined!76 (getValueByKey!123 (toList!696 lt!22893) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11107 c!7391) b!58464))

(assert (= (and d!11107 (not c!7391)) b!58465))

(assert (= (and d!11107 (not res!32567)) b!58466))

(declare-fun m!50105 () Bool)

(assert (=> d!11107 m!50105))

(declare-fun m!50107 () Bool)

(assert (=> b!58464 m!50107))

(declare-fun m!50109 () Bool)

(assert (=> b!58464 m!50109))

(assert (=> b!58464 m!50109))

(declare-fun m!50111 () Bool)

(assert (=> b!58464 m!50111))

(assert (=> b!58466 m!50109))

(assert (=> b!58466 m!50109))

(assert (=> b!58466 m!50111))

(assert (=> d!10611 d!11107))

(assert (=> d!10611 d!10561))

(declare-fun d!11109 () Bool)

(declare-fun res!32568 () Bool)

(declare-fun e!38466 () Bool)

(assert (=> d!11109 (=> res!32568 e!38466)))

(assert (=> d!11109 (= res!32568 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11109 (= (containsKey!127 (toList!696 lt!22664) #b1000000000000000000000000000000000000000000000000000000000000000) e!38466)))

(declare-fun b!58467 () Bool)

(declare-fun e!38467 () Bool)

(assert (=> b!58467 (= e!38466 e!38467)))

(declare-fun res!32569 () Bool)

(assert (=> b!58467 (=> (not res!32569) (not e!38467))))

(assert (=> b!58467 (= res!32569 (and (or (not ((_ is Cons!1425) (toList!696 lt!22664))) (bvsle (_1!1019 (h!2005 (toList!696 lt!22664))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1425) (toList!696 lt!22664)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22664))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58468 () Bool)

(assert (=> b!58468 (= e!38467 (containsKey!127 (t!4747 (toList!696 lt!22664)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11109 (not res!32568)) b!58467))

(assert (= (and b!58467 res!32569) b!58468))

(declare-fun m!50113 () Bool)

(assert (=> b!58468 m!50113))

(assert (=> d!10679 d!11109))

(declare-fun d!11111 () Bool)

(assert (=> d!11111 (= (content!61 Nil!1425) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!10641 d!11111))

(declare-fun d!11113 () Bool)

(assert (=> d!11113 (= (apply!65 lt!22893 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1063 (getValueByKey!123 (toList!696 lt!22893) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2545 () Bool)

(assert (= bs!2545 d!11113))

(assert (=> bs!2545 m!48125))

(assert (=> bs!2545 m!50007))

(assert (=> bs!2545 m!50007))

(declare-fun m!50115 () Bool)

(assert (=> bs!2545 m!50115))

(assert (=> b!57608 d!11113))

(assert (=> b!57608 d!10665))

(declare-fun d!11115 () Bool)

(assert (=> d!11115 (isDefined!76 (getValueByKey!123 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(declare-fun lt!23483 () Unit!1491)

(assert (=> d!11115 (= lt!23483 (choose!295 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(declare-fun e!38468 () Bool)

(assert (=> d!11115 e!38468))

(declare-fun res!32570 () Bool)

(assert (=> d!11115 (=> (not res!32570) (not e!38468))))

(assert (=> d!11115 (= res!32570 (isStrictlySorted!283 (toList!696 call!4148)))))

(assert (=> d!11115 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))) lt!23483)))

(declare-fun b!58469 () Bool)

(assert (=> b!58469 (= e!38468 (containsKey!127 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (= (and d!11115 res!32570) b!58469))

(assert (=> d!11115 m!48207))

(assert (=> d!11115 m!48617))

(assert (=> d!11115 m!48617))

(assert (=> d!11115 m!48619))

(assert (=> d!11115 m!48207))

(declare-fun m!50117 () Bool)

(assert (=> d!11115 m!50117))

(declare-fun m!50119 () Bool)

(assert (=> d!11115 m!50119))

(assert (=> b!58469 m!48207))

(assert (=> b!58469 m!48613))

(assert (=> b!57638 d!11115))

(assert (=> b!57638 d!10891))

(assert (=> b!57638 d!10893))

(assert (=> b!57485 d!10775))

(declare-fun d!11117 () Bool)

(assert (not d!11117))

(assert (=> b!57637 d!11117))

(assert (=> d!10683 d!10553))

(declare-fun d!11119 () Bool)

(assert (=> d!11119 (isDefined!76 (getValueByKey!123 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun lt!23484 () Unit!1491)

(assert (=> d!11119 (= lt!23484 (choose!295 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun e!38469 () Bool)

(assert (=> d!11119 e!38469))

(declare-fun res!32571 () Bool)

(assert (=> d!11119 (=> (not res!32571) (not e!38469))))

(assert (=> d!11119 (= res!32571 (isStrictlySorted!283 (toList!696 call!4150)))))

(assert (=> d!11119 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23484)))

(declare-fun b!58470 () Bool)

(assert (=> b!58470 (= e!38469 (containsKey!127 (toList!696 call!4150) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11119 res!32571) b!58470))

(assert (=> d!11119 m!48037))

(assert (=> d!11119 m!48711))

(assert (=> d!11119 m!48711))

(assert (=> d!11119 m!48713))

(assert (=> d!11119 m!48037))

(declare-fun m!50121 () Bool)

(assert (=> d!11119 m!50121))

(declare-fun m!50123 () Bool)

(assert (=> d!11119 m!50123))

(assert (=> b!58470 m!48037))

(assert (=> b!58470 m!48707))

(assert (=> b!57737 d!11119))

(assert (=> b!57737 d!10933))

(assert (=> b!57737 d!10935))

(declare-fun d!11121 () Bool)

(assert (=> d!11121 (= (get!1063 (getValueByKey!123 (toList!696 lt!22680) lt!22667)) (v!2372 (getValueByKey!123 (toList!696 lt!22680) lt!22667)))))

(assert (=> d!10617 d!11121))

(declare-fun b!58472 () Bool)

(declare-fun e!38470 () Option!129)

(declare-fun e!38471 () Option!129)

(assert (=> b!58472 (= e!38470 e!38471)))

(declare-fun c!7393 () Bool)

(assert (=> b!58472 (= c!7393 (and ((_ is Cons!1425) (toList!696 lt!22680)) (not (= (_1!1019 (h!2005 (toList!696 lt!22680))) lt!22667))))))

(declare-fun b!58471 () Bool)

(assert (=> b!58471 (= e!38470 (Some!128 (_2!1019 (h!2005 (toList!696 lt!22680)))))))

(declare-fun b!58474 () Bool)

(assert (=> b!58474 (= e!38471 None!127)))

(declare-fun d!11123 () Bool)

(declare-fun c!7392 () Bool)

(assert (=> d!11123 (= c!7392 (and ((_ is Cons!1425) (toList!696 lt!22680)) (= (_1!1019 (h!2005 (toList!696 lt!22680))) lt!22667)))))

(assert (=> d!11123 (= (getValueByKey!123 (toList!696 lt!22680) lt!22667) e!38470)))

(declare-fun b!58473 () Bool)

(assert (=> b!58473 (= e!38471 (getValueByKey!123 (t!4747 (toList!696 lt!22680)) lt!22667))))

(assert (= (and d!11123 c!7392) b!58471))

(assert (= (and d!11123 (not c!7392)) b!58472))

(assert (= (and b!58472 c!7393) b!58473))

(assert (= (and b!58472 (not c!7393)) b!58474))

(declare-fun m!50125 () Bool)

(assert (=> b!58473 m!50125))

(assert (=> d!10617 d!11123))

(declare-fun d!11125 () Bool)

(assert (=> d!11125 (= (get!1062 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57746 d!11125))

(declare-fun d!11127 () Bool)

(declare-fun e!38472 () Bool)

(assert (=> d!11127 e!38472))

(declare-fun res!32572 () Bool)

(assert (=> d!11127 (=> res!32572 e!38472)))

(declare-fun lt!23486 () Bool)

(assert (=> d!11127 (= res!32572 (not lt!23486))))

(declare-fun lt!23488 () Bool)

(assert (=> d!11127 (= lt!23486 lt!23488)))

(declare-fun lt!23487 () Unit!1491)

(declare-fun e!38473 () Unit!1491)

(assert (=> d!11127 (= lt!23487 e!38473)))

(declare-fun c!7394 () Bool)

(assert (=> d!11127 (= c!7394 lt!23488)))

(assert (=> d!11127 (= lt!23488 (containsKey!127 (toList!696 (map!1102 (_2!1020 lt!23010))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11127 (= (contains!679 (map!1102 (_2!1020 lt!23010)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23486)))

(declare-fun b!58475 () Bool)

(declare-fun lt!23485 () Unit!1491)

(assert (=> b!58475 (= e!38473 lt!23485)))

(assert (=> b!58475 (= lt!23485 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (map!1102 (_2!1020 lt!23010))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> b!58475 (isDefined!76 (getValueByKey!123 (toList!696 (map!1102 (_2!1020 lt!23010))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!58476 () Bool)

(declare-fun Unit!1543 () Unit!1491)

(assert (=> b!58476 (= e!38473 Unit!1543)))

(declare-fun b!58477 () Bool)

(assert (=> b!58477 (= e!38472 (isDefined!76 (getValueByKey!123 (toList!696 (map!1102 (_2!1020 lt!23010))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (= (and d!11127 c!7394) b!58475))

(assert (= (and d!11127 (not c!7394)) b!58476))

(assert (= (and d!11127 (not res!32572)) b!58477))

(assert (=> d!11127 m!48037))

(declare-fun m!50127 () Bool)

(assert (=> d!11127 m!50127))

(assert (=> b!58475 m!48037))

(declare-fun m!50129 () Bool)

(assert (=> b!58475 m!50129))

(assert (=> b!58475 m!48037))

(declare-fun m!50131 () Bool)

(assert (=> b!58475 m!50131))

(assert (=> b!58475 m!50131))

(declare-fun m!50133 () Bool)

(assert (=> b!58475 m!50133))

(assert (=> b!58477 m!48037))

(assert (=> b!58477 m!50131))

(assert (=> b!58477 m!50131))

(assert (=> b!58477 m!50133))

(assert (=> b!57693 d!11127))

(assert (=> b!57693 d!11013))

(declare-fun d!11129 () Bool)

(declare-fun e!38474 () Bool)

(assert (=> d!11129 e!38474))

(declare-fun res!32573 () Bool)

(assert (=> d!11129 (=> (not res!32573) (not e!38474))))

(declare-fun lt!23491 () ListLongMap!1361)

(assert (=> d!11129 (= res!32573 (contains!679 lt!23491 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23490 () List!1429)

(assert (=> d!11129 (= lt!23491 (ListLongMap!1362 lt!23490))))

(declare-fun lt!23489 () Unit!1491)

(declare-fun lt!23492 () Unit!1491)

(assert (=> d!11129 (= lt!23489 lt!23492)))

(assert (=> d!11129 (= (getValueByKey!123 lt!23490 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11129 (= lt!23492 (lemmaContainsTupThenGetReturnValue!40 lt!23490 (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11129 (= lt!23490 (insertStrictlySorted!43 (toList!696 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11129 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23491)))

(declare-fun b!58478 () Bool)

(declare-fun res!32574 () Bool)

(assert (=> b!58478 (=> (not res!32574) (not e!38474))))

(assert (=> b!58478 (= res!32574 (= (getValueByKey!123 (toList!696 lt!23491) (_1!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!128 (_2!1019 (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58479 () Bool)

(assert (=> b!58479 (= e!38474 (contains!681 (toList!696 lt!23491) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11129 res!32573) b!58478))

(assert (= (and b!58478 res!32574) b!58479))

(declare-fun m!50135 () Bool)

(assert (=> d!11129 m!50135))

(declare-fun m!50137 () Bool)

(assert (=> d!11129 m!50137))

(declare-fun m!50139 () Bool)

(assert (=> d!11129 m!50139))

(declare-fun m!50141 () Bool)

(assert (=> d!11129 m!50141))

(declare-fun m!50143 () Bool)

(assert (=> b!58478 m!50143))

(declare-fun m!50145 () Bool)

(assert (=> b!58479 m!50145))

(assert (=> b!57646 d!11129))

(assert (=> b!57646 d!10583))

(declare-fun b!58480 () Bool)

(declare-fun e!38476 () ListLongMap!1361)

(declare-fun call!4291 () ListLongMap!1361)

(assert (=> b!58480 (= e!38476 call!4291)))

(declare-fun b!58481 () Bool)

(declare-fun e!38484 () Bool)

(declare-fun lt!23498 () ListLongMap!1361)

(assert (=> b!58481 (= e!38484 (= (apply!65 lt!23498 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58482 () Bool)

(declare-fun e!38475 () Bool)

(assert (=> b!58482 (= e!38475 e!38484)))

(declare-fun res!32581 () Bool)

(declare-fun call!4285 () Bool)

(assert (=> b!58482 (= res!32581 call!4285)))

(assert (=> b!58482 (=> (not res!32581) (not e!38484))))

(declare-fun b!58483 () Bool)

(declare-fun e!38478 () Bool)

(declare-fun e!38479 () Bool)

(assert (=> b!58483 (= e!38478 e!38479)))

(declare-fun res!32576 () Bool)

(declare-fun call!4286 () Bool)

(assert (=> b!58483 (= res!32576 call!4286)))

(assert (=> b!58483 (=> (not res!32576) (not e!38479))))

(declare-fun e!38486 () Bool)

(declare-fun b!58484 () Bool)

(assert (=> b!58484 (= e!38486 (= (apply!65 lt!23498 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58484 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))))))

(assert (=> b!58484 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58485 () Bool)

(declare-fun e!38481 () Bool)

(assert (=> b!58485 (= e!38481 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4282 () Bool)

(declare-fun call!4287 () ListLongMap!1361)

(assert (=> bm!4282 (= call!4291 call!4287)))

(declare-fun d!11131 () Bool)

(declare-fun e!38483 () Bool)

(assert (=> d!11131 e!38483))

(declare-fun res!32578 () Bool)

(assert (=> d!11131 (=> (not res!32578) (not e!38483))))

(assert (=> d!11131 (= res!32578 (or (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun lt!23510 () ListLongMap!1361)

(assert (=> d!11131 (= lt!23498 lt!23510)))

(declare-fun lt!23497 () Unit!1491)

(declare-fun e!38485 () Unit!1491)

(assert (=> d!11131 (= lt!23497 e!38485)))

(declare-fun c!7399 () Bool)

(declare-fun e!38487 () Bool)

(assert (=> d!11131 (= c!7399 e!38487)))

(declare-fun res!32577 () Bool)

(assert (=> d!11131 (=> (not res!32577) (not e!38487))))

(assert (=> d!11131 (= res!32577 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun e!38482 () ListLongMap!1361)

(assert (=> d!11131 (= lt!23510 e!38482)))

(declare-fun c!7397 () Bool)

(assert (=> d!11131 (= c!7397 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11131 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11131 (= (getCurrentListMap!401 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23498)))

(declare-fun b!58486 () Bool)

(declare-fun call!4289 () ListLongMap!1361)

(assert (=> b!58486 (= e!38482 (+!80 call!4289 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4283 () Bool)

(declare-fun call!4288 () ListLongMap!1361)

(assert (=> bm!4283 (= call!4288 call!4289)))

(declare-fun b!58487 () Bool)

(assert (=> b!58487 (= e!38483 e!38478)))

(declare-fun c!7398 () Bool)

(assert (=> b!58487 (= c!7398 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4284 () Bool)

(declare-fun call!4290 () ListLongMap!1361)

(assert (=> bm!4284 (= call!4290 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58488 () Bool)

(declare-fun res!32583 () Bool)

(assert (=> b!58488 (=> (not res!32583) (not e!38483))))

(declare-fun e!38477 () Bool)

(assert (=> b!58488 (= res!32583 e!38477)))

(declare-fun res!32580 () Bool)

(assert (=> b!58488 (=> res!32580 e!38477)))

(assert (=> b!58488 (= res!32580 (not e!38481))))

(declare-fun res!32579 () Bool)

(assert (=> b!58488 (=> (not res!32579) (not e!38481))))

(assert (=> b!58488 (= res!32579 (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun bm!4285 () Bool)

(assert (=> bm!4285 (= call!4286 (contains!679 lt!23498 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58489 () Bool)

(declare-fun lt!23508 () Unit!1491)

(assert (=> b!58489 (= e!38485 lt!23508)))

(declare-fun lt!23503 () ListLongMap!1361)

(assert (=> b!58489 (= lt!23503 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23500 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23500 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23511 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23511 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23499 () Unit!1491)

(assert (=> b!58489 (= lt!23499 (addStillContains!41 lt!23503 lt!23500 (zeroValue!1940 newMap!16) lt!23511))))

(assert (=> b!58489 (contains!679 (+!80 lt!23503 (tuple2!2017 lt!23500 (zeroValue!1940 newMap!16))) lt!23511)))

(declare-fun lt!23506 () Unit!1491)

(assert (=> b!58489 (= lt!23506 lt!23499)))

(declare-fun lt!23502 () ListLongMap!1361)

(assert (=> b!58489 (= lt!23502 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23495 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23495 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23505 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23505 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23496 () Unit!1491)

(assert (=> b!58489 (= lt!23496 (addApplyDifferent!41 lt!23502 lt!23495 (minValue!1940 newMap!16) lt!23505))))

(assert (=> b!58489 (= (apply!65 (+!80 lt!23502 (tuple2!2017 lt!23495 (minValue!1940 newMap!16))) lt!23505) (apply!65 lt!23502 lt!23505))))

(declare-fun lt!23512 () Unit!1491)

(assert (=> b!58489 (= lt!23512 lt!23496)))

(declare-fun lt!23504 () ListLongMap!1361)

(assert (=> b!58489 (= lt!23504 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23507 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23507 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23493 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23493 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23513 () Unit!1491)

(assert (=> b!58489 (= lt!23513 (addApplyDifferent!41 lt!23504 lt!23507 (zeroValue!1940 newMap!16) lt!23493))))

(assert (=> b!58489 (= (apply!65 (+!80 lt!23504 (tuple2!2017 lt!23507 (zeroValue!1940 newMap!16))) lt!23493) (apply!65 lt!23504 lt!23493))))

(declare-fun lt!23509 () Unit!1491)

(assert (=> b!58489 (= lt!23509 lt!23513)))

(declare-fun lt!23514 () ListLongMap!1361)

(assert (=> b!58489 (= lt!23514 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (index!3027 lt!22759) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23494 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23494 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23501 () (_ BitVec 64))

(assert (=> b!58489 (= lt!23501 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58489 (= lt!23508 (addApplyDifferent!41 lt!23514 lt!23494 (minValue!1940 newMap!16) lt!23501))))

(assert (=> b!58489 (= (apply!65 (+!80 lt!23514 (tuple2!2017 lt!23494 (minValue!1940 newMap!16))) lt!23501) (apply!65 lt!23514 lt!23501))))

(declare-fun b!58490 () Bool)

(assert (=> b!58490 (= e!38475 (not call!4285))))

(declare-fun b!58491 () Bool)

(assert (=> b!58491 (= e!38478 (not call!4286))))

(declare-fun bm!4286 () Bool)

(assert (=> bm!4286 (= call!4285 (contains!679 lt!23498 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7396 () Bool)

(declare-fun bm!4287 () Bool)

(assert (=> bm!4287 (= call!4289 (+!80 (ite c!7397 call!4290 (ite c!7396 call!4287 call!4291)) (ite (or c!7397 c!7396) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58492 () Bool)

(declare-fun e!38480 () ListLongMap!1361)

(assert (=> b!58492 (= e!38480 call!4288)))

(declare-fun b!58493 () Bool)

(assert (=> b!58493 (= e!38477 e!38486)))

(declare-fun res!32575 () Bool)

(assert (=> b!58493 (=> (not res!32575) (not e!38486))))

(assert (=> b!58493 (= res!32575 (contains!679 lt!23498 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58493 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(declare-fun b!58494 () Bool)

(assert (=> b!58494 (= e!38482 e!38480)))

(assert (=> b!58494 (= c!7396 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4288 () Bool)

(assert (=> bm!4288 (= call!4287 call!4290)))

(declare-fun b!58495 () Bool)

(assert (=> b!58495 (= e!38479 (= (apply!65 lt!23498 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58496 () Bool)

(assert (=> b!58496 (= e!38476 call!4288)))

(declare-fun b!58497 () Bool)

(declare-fun c!7400 () Bool)

(assert (=> b!58497 (= c!7400 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58497 (= e!38480 e!38476)))

(declare-fun b!58498 () Bool)

(declare-fun res!32582 () Bool)

(assert (=> b!58498 (=> (not res!32582) (not e!38483))))

(assert (=> b!58498 (= res!32582 e!38475)))

(declare-fun c!7395 () Bool)

(assert (=> b!58498 (= c!7395 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58499 () Bool)

(declare-fun Unit!1544 () Unit!1491)

(assert (=> b!58499 (= e!38485 Unit!1544)))

(declare-fun b!58500 () Bool)

(assert (=> b!58500 (= e!38487 (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11131 c!7397) b!58486))

(assert (= (and d!11131 (not c!7397)) b!58494))

(assert (= (and b!58494 c!7396) b!58492))

(assert (= (and b!58494 (not c!7396)) b!58497))

(assert (= (and b!58497 c!7400) b!58496))

(assert (= (and b!58497 (not c!7400)) b!58480))

(assert (= (or b!58496 b!58480) bm!4282))

(assert (= (or b!58492 bm!4282) bm!4288))

(assert (= (or b!58492 b!58496) bm!4283))

(assert (= (or b!58486 bm!4288) bm!4284))

(assert (= (or b!58486 bm!4283) bm!4287))

(assert (= (and d!11131 res!32577) b!58500))

(assert (= (and d!11131 c!7399) b!58489))

(assert (= (and d!11131 (not c!7399)) b!58499))

(assert (= (and d!11131 res!32578) b!58488))

(assert (= (and b!58488 res!32579) b!58485))

(assert (= (and b!58488 (not res!32580)) b!58493))

(assert (= (and b!58493 res!32575) b!58484))

(assert (= (and b!58488 res!32583) b!58498))

(assert (= (and b!58498 c!7395) b!58482))

(assert (= (and b!58498 (not c!7395)) b!58490))

(assert (= (and b!58482 res!32581) b!58481))

(assert (= (or b!58482 b!58490) bm!4286))

(assert (= (and b!58498 res!32582) b!58487))

(assert (= (and b!58487 c!7398) b!58483))

(assert (= (and b!58487 (not c!7398)) b!58491))

(assert (= (and b!58483 res!32576) b!58495))

(assert (= (or b!58483 b!58491) bm!4285))

(declare-fun b_lambda!2545 () Bool)

(assert (=> (not b_lambda!2545) (not b!58484)))

(assert (=> b!58484 t!4753))

(declare-fun b_and!3531 () Bool)

(assert (= b_and!3527 (and (=> t!4753 result!2353) b_and!3531)))

(assert (=> b!58484 t!4755))

(declare-fun b_and!3533 () Bool)

(assert (= b_and!3529 (and (=> t!4755 result!2355) b_and!3533)))

(declare-fun m!50147 () Bool)

(assert (=> bm!4284 m!50147))

(assert (=> b!58485 m!48295))

(assert (=> b!58485 m!48295))

(assert (=> b!58485 m!48297))

(declare-fun m!50149 () Bool)

(assert (=> b!58495 m!50149))

(declare-fun m!50151 () Bool)

(assert (=> bm!4285 m!50151))

(declare-fun m!50153 () Bool)

(assert (=> bm!4286 m!50153))

(declare-fun m!50155 () Bool)

(assert (=> bm!4287 m!50155))

(declare-fun m!50157 () Bool)

(assert (=> b!58489 m!50157))

(declare-fun m!50159 () Bool)

(assert (=> b!58489 m!50159))

(declare-fun m!50161 () Bool)

(assert (=> b!58489 m!50161))

(declare-fun m!50163 () Bool)

(assert (=> b!58489 m!50163))

(declare-fun m!50165 () Bool)

(assert (=> b!58489 m!50165))

(declare-fun m!50167 () Bool)

(assert (=> b!58489 m!50167))

(declare-fun m!50169 () Bool)

(assert (=> b!58489 m!50169))

(declare-fun m!50171 () Bool)

(assert (=> b!58489 m!50171))

(declare-fun m!50173 () Bool)

(assert (=> b!58489 m!50173))

(declare-fun m!50175 () Bool)

(assert (=> b!58489 m!50175))

(declare-fun m!50177 () Bool)

(assert (=> b!58489 m!50177))

(assert (=> b!58489 m!50147))

(assert (=> b!58489 m!50175))

(declare-fun m!50179 () Bool)

(assert (=> b!58489 m!50179))

(assert (=> b!58489 m!50171))

(assert (=> b!58489 m!50167))

(assert (=> b!58489 m!48295))

(declare-fun m!50181 () Bool)

(assert (=> b!58489 m!50181))

(assert (=> b!58489 m!50163))

(declare-fun m!50183 () Bool)

(assert (=> b!58489 m!50183))

(declare-fun m!50185 () Bool)

(assert (=> b!58489 m!50185))

(assert (=> b!58484 m!48295))

(declare-fun m!50187 () Bool)

(assert (=> b!58484 m!50187))

(assert (=> b!58484 m!48339))

(declare-fun m!50189 () Bool)

(assert (=> b!58484 m!50189))

(assert (=> b!58484 m!48339))

(assert (=> b!58484 m!48295))

(declare-fun m!50191 () Bool)

(assert (=> b!58484 m!50191))

(assert (=> b!58484 m!50187))

(declare-fun m!50193 () Bool)

(assert (=> b!58486 m!50193))

(declare-fun m!50195 () Bool)

(assert (=> b!58481 m!50195))

(assert (=> b!58500 m!48295))

(assert (=> b!58500 m!48295))

(assert (=> b!58500 m!48297))

(assert (=> d!11131 m!48289))

(assert (=> b!58493 m!48295))

(assert (=> b!58493 m!48295))

(declare-fun m!50197 () Bool)

(assert (=> b!58493 m!50197))

(assert (=> b!57646 d!11131))

(declare-fun d!11133 () Bool)

(declare-fun e!38488 () Bool)

(assert (=> d!11133 e!38488))

(declare-fun res!32584 () Bool)

(assert (=> d!11133 (=> res!32584 e!38488)))

(declare-fun lt!23516 () Bool)

(assert (=> d!11133 (= res!32584 (not lt!23516))))

(declare-fun lt!23518 () Bool)

(assert (=> d!11133 (= lt!23516 lt!23518)))

(declare-fun lt!23517 () Unit!1491)

(declare-fun e!38489 () Unit!1491)

(assert (=> d!11133 (= lt!23517 e!38489)))

(declare-fun c!7401 () Bool)

(assert (=> d!11133 (= c!7401 lt!23518)))

(assert (=> d!11133 (= lt!23518 (containsKey!127 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!11133 (= (contains!679 lt!22837 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23516)))

(declare-fun b!58501 () Bool)

(declare-fun lt!23515 () Unit!1491)

(assert (=> b!58501 (= e!38489 lt!23515)))

(assert (=> b!58501 (= lt!23515 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> b!58501 (isDefined!76 (getValueByKey!123 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58502 () Bool)

(declare-fun Unit!1545 () Unit!1491)

(assert (=> b!58502 (= e!38489 Unit!1545)))

(declare-fun b!58503 () Bool)

(assert (=> b!58503 (= e!38488 (isDefined!76 (getValueByKey!123 (toList!696 lt!22837) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!11133 c!7401) b!58501))

(assert (= (and d!11133 (not c!7401)) b!58502))

(assert (= (and d!11133 (not res!32584)) b!58503))

(declare-fun m!50199 () Bool)

(assert (=> d!11133 m!50199))

(declare-fun m!50201 () Bool)

(assert (=> b!58501 m!50201))

(assert (=> b!58501 m!48413))

(assert (=> b!58501 m!48413))

(declare-fun m!50203 () Bool)

(assert (=> b!58501 m!50203))

(assert (=> b!58503 m!48413))

(assert (=> b!58503 m!48413))

(assert (=> b!58503 m!50203))

(assert (=> d!10585 d!11133))

(declare-fun b!58505 () Bool)

(declare-fun e!38490 () Option!129)

(declare-fun e!38491 () Option!129)

(assert (=> b!58505 (= e!38490 e!38491)))

(declare-fun c!7403 () Bool)

(assert (=> b!58505 (= c!7403 (and ((_ is Cons!1425) lt!22836) (not (= (_1!1019 (h!2005 lt!22836)) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58504 () Bool)

(assert (=> b!58504 (= e!38490 (Some!128 (_2!1019 (h!2005 lt!22836))))))

(declare-fun b!58507 () Bool)

(assert (=> b!58507 (= e!38491 None!127)))

(declare-fun d!11135 () Bool)

(declare-fun c!7402 () Bool)

(assert (=> d!11135 (= c!7402 (and ((_ is Cons!1425) lt!22836) (= (_1!1019 (h!2005 lt!22836)) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11135 (= (getValueByKey!123 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38490)))

(declare-fun b!58506 () Bool)

(assert (=> b!58506 (= e!38491 (getValueByKey!123 (t!4747 lt!22836) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!11135 c!7402) b!58504))

(assert (= (and d!11135 (not c!7402)) b!58505))

(assert (= (and b!58505 c!7403) b!58506))

(assert (= (and b!58505 (not c!7403)) b!58507))

(declare-fun m!50205 () Bool)

(assert (=> b!58506 m!50205))

(assert (=> d!10585 d!11135))

(declare-fun d!11137 () Bool)

(assert (=> d!11137 (= (getValueByKey!123 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!23519 () Unit!1491)

(assert (=> d!11137 (= lt!23519 (choose!297 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38492 () Bool)

(assert (=> d!11137 e!38492))

(declare-fun res!32585 () Bool)

(assert (=> d!11137 (=> (not res!32585) (not e!38492))))

(assert (=> d!11137 (= res!32585 (isStrictlySorted!283 lt!22836))))

(assert (=> d!11137 (= (lemmaContainsTupThenGetReturnValue!40 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23519)))

(declare-fun b!58508 () Bool)

(declare-fun res!32586 () Bool)

(assert (=> b!58508 (=> (not res!32586) (not e!38492))))

(assert (=> b!58508 (= res!32586 (containsKey!127 lt!22836 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58509 () Bool)

(assert (=> b!58509 (= e!38492 (contains!681 lt!22836 (tuple2!2017 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!11137 res!32585) b!58508))

(assert (= (and b!58508 res!32586) b!58509))

(assert (=> d!11137 m!48407))

(declare-fun m!50207 () Bool)

(assert (=> d!11137 m!50207))

(declare-fun m!50209 () Bool)

(assert (=> d!11137 m!50209))

(declare-fun m!50211 () Bool)

(assert (=> b!58508 m!50211))

(declare-fun m!50213 () Bool)

(assert (=> b!58509 m!50213))

(assert (=> d!10585 d!11137))

(declare-fun call!4294 () List!1429)

(declare-fun c!7404 () Bool)

(declare-fun bm!4289 () Bool)

(declare-fun e!38494 () List!1429)

(assert (=> bm!4289 (= call!4294 ($colon$colon!59 e!38494 (ite c!7404 (h!2005 (toList!696 call!4085)) (tuple2!2017 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun c!7407 () Bool)

(assert (=> bm!4289 (= c!7407 c!7404)))

(declare-fun b!58510 () Bool)

(declare-fun e!38497 () List!1429)

(declare-fun call!4293 () List!1429)

(assert (=> b!58510 (= e!38497 call!4293)))

(declare-fun d!11139 () Bool)

(declare-fun e!38493 () Bool)

(assert (=> d!11139 e!38493))

(declare-fun res!32587 () Bool)

(assert (=> d!11139 (=> (not res!32587) (not e!38493))))

(declare-fun lt!23520 () List!1429)

(assert (=> d!11139 (= res!32587 (isStrictlySorted!283 lt!23520))))

(declare-fun e!38496 () List!1429)

(assert (=> d!11139 (= lt!23520 e!38496)))

(assert (=> d!11139 (= c!7404 (and ((_ is Cons!1425) (toList!696 call!4085)) (bvslt (_1!1019 (h!2005 (toList!696 call!4085))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11139 (isStrictlySorted!283 (toList!696 call!4085))))

(assert (=> d!11139 (= (insertStrictlySorted!43 (toList!696 call!4085) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23520)))

(declare-fun b!58511 () Bool)

(assert (=> b!58511 (= e!38496 call!4294)))

(declare-fun b!58512 () Bool)

(declare-fun e!38495 () List!1429)

(assert (=> b!58512 (= e!38496 e!38495)))

(declare-fun c!7406 () Bool)

(assert (=> b!58512 (= c!7406 (and ((_ is Cons!1425) (toList!696 call!4085)) (= (_1!1019 (h!2005 (toList!696 call!4085))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58513 () Bool)

(assert (=> b!58513 (= e!38493 (contains!681 lt!23520 (tuple2!2017 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun bm!4290 () Bool)

(declare-fun call!4292 () List!1429)

(assert (=> bm!4290 (= call!4292 call!4294)))

(declare-fun b!58514 () Bool)

(assert (=> b!58514 (= e!38494 (insertStrictlySorted!43 (t!4747 (toList!696 call!4085)) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58515 () Bool)

(declare-fun res!32588 () Bool)

(assert (=> b!58515 (=> (not res!32588) (not e!38493))))

(assert (=> b!58515 (= res!32588 (containsKey!127 lt!23520 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58516 () Bool)

(assert (=> b!58516 (= e!38495 call!4292)))

(declare-fun c!7405 () Bool)

(declare-fun b!58517 () Bool)

(assert (=> b!58517 (= e!38494 (ite c!7406 (t!4747 (toList!696 call!4085)) (ite c!7405 (Cons!1425 (h!2005 (toList!696 call!4085)) (t!4747 (toList!696 call!4085))) Nil!1426)))))

(declare-fun b!58518 () Bool)

(assert (=> b!58518 (= e!38497 call!4293)))

(declare-fun b!58519 () Bool)

(assert (=> b!58519 (= c!7405 (and ((_ is Cons!1425) (toList!696 call!4085)) (bvsgt (_1!1019 (h!2005 (toList!696 call!4085))) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!58519 (= e!38495 e!38497)))

(declare-fun bm!4291 () Bool)

(assert (=> bm!4291 (= call!4293 call!4292)))

(assert (= (and d!11139 c!7404) b!58511))

(assert (= (and d!11139 (not c!7404)) b!58512))

(assert (= (and b!58512 c!7406) b!58516))

(assert (= (and b!58512 (not c!7406)) b!58519))

(assert (= (and b!58519 c!7405) b!58510))

(assert (= (and b!58519 (not c!7405)) b!58518))

(assert (= (or b!58510 b!58518) bm!4291))

(assert (= (or b!58516 bm!4291) bm!4290))

(assert (= (or b!58511 bm!4290) bm!4289))

(assert (= (and bm!4289 c!7407) b!58514))

(assert (= (and bm!4289 (not c!7407)) b!58517))

(assert (= (and d!11139 res!32587) b!58515))

(assert (= (and b!58515 res!32588) b!58513))

(declare-fun m!50215 () Bool)

(assert (=> b!58515 m!50215))

(declare-fun m!50217 () Bool)

(assert (=> b!58514 m!50217))

(declare-fun m!50219 () Bool)

(assert (=> d!11139 m!50219))

(declare-fun m!50221 () Bool)

(assert (=> d!11139 m!50221))

(declare-fun m!50223 () Bool)

(assert (=> b!58513 m!50223))

(declare-fun m!50225 () Bool)

(assert (=> bm!4289 m!50225))

(assert (=> d!10585 d!11139))

(assert (=> b!57742 d!10771))

(declare-fun lt!23521 () Bool)

(declare-fun d!11141 () Bool)

(assert (=> d!11141 (= lt!23521 (select (content!62 (toList!696 lt!22871)) (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38499 () Bool)

(assert (=> d!11141 (= lt!23521 e!38499)))

(declare-fun res!32589 () Bool)

(assert (=> d!11141 (=> (not res!32589) (not e!38499))))

(assert (=> d!11141 (= res!32589 ((_ is Cons!1425) (toList!696 lt!22871)))))

(assert (=> d!11141 (= (contains!681 (toList!696 lt!22871) (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23521)))

(declare-fun b!58520 () Bool)

(declare-fun e!38498 () Bool)

(assert (=> b!58520 (= e!38499 e!38498)))

(declare-fun res!32590 () Bool)

(assert (=> b!58520 (=> res!32590 e!38498)))

(assert (=> b!58520 (= res!32590 (= (h!2005 (toList!696 lt!22871)) (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58521 () Bool)

(assert (=> b!58521 (= e!38498 (contains!681 (t!4747 (toList!696 lt!22871)) (ite c!7092 (ite c!7098 (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11141 res!32589) b!58520))

(assert (= (and b!58520 (not res!32590)) b!58521))

(declare-fun m!50227 () Bool)

(assert (=> d!11141 m!50227))

(declare-fun m!50229 () Bool)

(assert (=> d!11141 m!50229))

(declare-fun m!50231 () Bool)

(assert (=> b!58521 m!50231))

(assert (=> b!57577 d!11141))

(declare-fun d!11143 () Bool)

(declare-fun e!38500 () Bool)

(assert (=> d!11143 e!38500))

(declare-fun res!32591 () Bool)

(assert (=> d!11143 (=> res!32591 e!38500)))

(declare-fun lt!23523 () Bool)

(assert (=> d!11143 (= res!32591 (not lt!23523))))

(declare-fun lt!23525 () Bool)

(assert (=> d!11143 (= lt!23523 lt!23525)))

(declare-fun lt!23524 () Unit!1491)

(declare-fun e!38501 () Unit!1491)

(assert (=> d!11143 (= lt!23524 e!38501)))

(declare-fun c!7408 () Bool)

(assert (=> d!11143 (= c!7408 lt!23525)))

(assert (=> d!11143 (= lt!23525 (containsKey!127 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> d!11143 (= (contains!679 lt!22910 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23523)))

(declare-fun b!58522 () Bool)

(declare-fun lt!23522 () Unit!1491)

(assert (=> b!58522 (= e!38501 lt!23522)))

(assert (=> b!58522 (= lt!23522 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (=> b!58522 (isDefined!76 (getValueByKey!123 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58523 () Bool)

(declare-fun Unit!1546 () Unit!1491)

(assert (=> b!58523 (= e!38501 Unit!1546)))

(declare-fun b!58524 () Bool)

(assert (=> b!58524 (= e!38500 (isDefined!76 (getValueByKey!123 (toList!696 lt!22910) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!11143 c!7408) b!58522))

(assert (= (and d!11143 (not c!7408)) b!58523))

(assert (= (and d!11143 (not res!32591)) b!58524))

(declare-fun m!50233 () Bool)

(assert (=> d!11143 m!50233))

(declare-fun m!50235 () Bool)

(assert (=> b!58522 m!50235))

(assert (=> b!58522 m!48567))

(assert (=> b!58522 m!48567))

(declare-fun m!50237 () Bool)

(assert (=> b!58522 m!50237))

(assert (=> b!58524 m!48567))

(assert (=> b!58524 m!48567))

(assert (=> b!58524 m!50237))

(assert (=> d!10627 d!11143))

(declare-fun b!58526 () Bool)

(declare-fun e!38502 () Option!129)

(declare-fun e!38503 () Option!129)

(assert (=> b!58526 (= e!38502 e!38503)))

(declare-fun c!7410 () Bool)

(assert (=> b!58526 (= c!7410 (and ((_ is Cons!1425) lt!22909) (not (= (_1!1019 (h!2005 lt!22909)) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun b!58525 () Bool)

(assert (=> b!58525 (= e!38502 (Some!128 (_2!1019 (h!2005 lt!22909))))))

(declare-fun b!58528 () Bool)

(assert (=> b!58528 (= e!38503 None!127)))

(declare-fun d!11145 () Bool)

(declare-fun c!7409 () Bool)

(assert (=> d!11145 (= c!7409 (and ((_ is Cons!1425) lt!22909) (= (_1!1019 (h!2005 lt!22909)) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11145 (= (getValueByKey!123 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) e!38502)))

(declare-fun b!58527 () Bool)

(assert (=> b!58527 (= e!38503 (getValueByKey!123 (t!4747 lt!22909) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(assert (= (and d!11145 c!7409) b!58525))

(assert (= (and d!11145 (not c!7409)) b!58526))

(assert (= (and b!58526 c!7410) b!58527))

(assert (= (and b!58526 (not c!7410)) b!58528))

(declare-fun m!50239 () Bool)

(assert (=> b!58527 m!50239))

(assert (=> d!10627 d!11145))

(declare-fun d!11147 () Bool)

(assert (=> d!11147 (= (getValueByKey!123 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) (Some!128 (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun lt!23526 () Unit!1491)

(assert (=> d!11147 (= lt!23526 (choose!297 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun e!38504 () Bool)

(assert (=> d!11147 e!38504))

(declare-fun res!32592 () Bool)

(assert (=> d!11147 (=> (not res!32592) (not e!38504))))

(assert (=> d!11147 (= res!32592 (isStrictlySorted!283 lt!22909))))

(assert (=> d!11147 (= (lemmaContainsTupThenGetReturnValue!40 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23526)))

(declare-fun b!58529 () Bool)

(declare-fun res!32593 () Bool)

(assert (=> b!58529 (=> (not res!32593) (not e!38504))))

(assert (=> b!58529 (= res!32593 (containsKey!127 lt!22909 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58530 () Bool)

(assert (=> b!58530 (= e!38504 (contains!681 lt!22909 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (= (and d!11147 res!32592) b!58529))

(assert (= (and b!58529 res!32593) b!58530))

(assert (=> d!11147 m!48561))

(declare-fun m!50241 () Bool)

(assert (=> d!11147 m!50241))

(declare-fun m!50243 () Bool)

(assert (=> d!11147 m!50243))

(declare-fun m!50245 () Bool)

(assert (=> b!58529 m!50245))

(declare-fun m!50247 () Bool)

(assert (=> b!58530 m!50247))

(assert (=> d!10627 d!11147))

(declare-fun bm!4292 () Bool)

(declare-fun call!4297 () List!1429)

(declare-fun e!38506 () List!1429)

(declare-fun c!7411 () Bool)

(assert (=> bm!4292 (= call!4297 ($colon$colon!59 e!38506 (ite c!7411 (h!2005 (toList!696 lt!22668)) (tuple2!2017 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))))

(declare-fun c!7414 () Bool)

(assert (=> bm!4292 (= c!7414 c!7411)))

(declare-fun b!58531 () Bool)

(declare-fun e!38509 () List!1429)

(declare-fun call!4296 () List!1429)

(assert (=> b!58531 (= e!38509 call!4296)))

(declare-fun d!11149 () Bool)

(declare-fun e!38505 () Bool)

(assert (=> d!11149 e!38505))

(declare-fun res!32594 () Bool)

(assert (=> d!11149 (=> (not res!32594) (not e!38505))))

(declare-fun lt!23527 () List!1429)

(assert (=> d!11149 (= res!32594 (isStrictlySorted!283 lt!23527))))

(declare-fun e!38508 () List!1429)

(assert (=> d!11149 (= lt!23527 e!38508)))

(assert (=> d!11149 (= c!7411 (and ((_ is Cons!1425) (toList!696 lt!22668)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22668))) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> d!11149 (isStrictlySorted!283 (toList!696 lt!22668))))

(assert (=> d!11149 (= (insertStrictlySorted!43 (toList!696 lt!22668) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!23527)))

(declare-fun b!58532 () Bool)

(assert (=> b!58532 (= e!38508 call!4297)))

(declare-fun b!58533 () Bool)

(declare-fun e!38507 () List!1429)

(assert (=> b!58533 (= e!38508 e!38507)))

(declare-fun c!7413 () Bool)

(assert (=> b!58533 (= c!7413 (and ((_ is Cons!1425) (toList!696 lt!22668)) (= (_1!1019 (h!2005 (toList!696 lt!22668))) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun b!58534 () Bool)

(assert (=> b!58534 (= e!38505 (contains!681 lt!23527 (tuple2!2017 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(declare-fun bm!4293 () Bool)

(declare-fun call!4295 () List!1429)

(assert (=> bm!4293 (= call!4295 call!4297)))

(declare-fun b!58535 () Bool)

(assert (=> b!58535 (= e!38506 (insertStrictlySorted!43 (t!4747 (toList!696 lt!22668)) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))) (_2!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58536 () Bool)

(declare-fun res!32595 () Bool)

(assert (=> b!58536 (=> (not res!32595) (not e!38505))))

(assert (=> b!58536 (= res!32595 (containsKey!127 lt!23527 (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))))

(declare-fun b!58537 () Bool)

(assert (=> b!58537 (= e!38507 call!4295)))

(declare-fun b!58538 () Bool)

(declare-fun c!7412 () Bool)

(assert (=> b!58538 (= e!38506 (ite c!7413 (t!4747 (toList!696 lt!22668)) (ite c!7412 (Cons!1425 (h!2005 (toList!696 lt!22668)) (t!4747 (toList!696 lt!22668))) Nil!1426)))))

(declare-fun b!58539 () Bool)

(assert (=> b!58539 (= e!38509 call!4296)))

(declare-fun b!58540 () Bool)

(assert (=> b!58540 (= c!7412 (and ((_ is Cons!1425) (toList!696 lt!22668)) (bvsgt (_1!1019 (h!2005 (toList!696 lt!22668))) (_1!1019 (tuple2!2017 lt!22661 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))

(assert (=> b!58540 (= e!38507 e!38509)))

(declare-fun bm!4294 () Bool)

(assert (=> bm!4294 (= call!4296 call!4295)))

(assert (= (and d!11149 c!7411) b!58532))

(assert (= (and d!11149 (not c!7411)) b!58533))

(assert (= (and b!58533 c!7413) b!58537))

(assert (= (and b!58533 (not c!7413)) b!58540))

(assert (= (and b!58540 c!7412) b!58531))

(assert (= (and b!58540 (not c!7412)) b!58539))

(assert (= (or b!58531 b!58539) bm!4294))

(assert (= (or b!58537 bm!4294) bm!4293))

(assert (= (or b!58532 bm!4293) bm!4292))

(assert (= (and bm!4292 c!7414) b!58535))

(assert (= (and bm!4292 (not c!7414)) b!58538))

(assert (= (and d!11149 res!32594) b!58536))

(assert (= (and b!58536 res!32595) b!58534))

(declare-fun m!50249 () Bool)

(assert (=> b!58536 m!50249))

(declare-fun m!50251 () Bool)

(assert (=> b!58535 m!50251))

(declare-fun m!50253 () Bool)

(assert (=> d!11149 m!50253))

(declare-fun m!50255 () Bool)

(assert (=> d!11149 m!50255))

(declare-fun m!50257 () Bool)

(assert (=> b!58534 m!50257))

(declare-fun m!50259 () Bool)

(assert (=> bm!4292 m!50259))

(assert (=> d!10627 d!11149))

(declare-fun d!11151 () Bool)

(declare-fun e!38510 () Bool)

(assert (=> d!11151 e!38510))

(declare-fun res!32596 () Bool)

(assert (=> d!11151 (=> (not res!32596) (not e!38510))))

(declare-fun lt!23530 () ListLongMap!1361)

(assert (=> d!11151 (= res!32596 (contains!679 lt!23530 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun lt!23529 () List!1429)

(assert (=> d!11151 (= lt!23530 (ListLongMap!1362 lt!23529))))

(declare-fun lt!23528 () Unit!1491)

(declare-fun lt!23531 () Unit!1491)

(assert (=> d!11151 (= lt!23528 lt!23531)))

(assert (=> d!11151 (= (getValueByKey!123 lt!23529 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11151 (= lt!23531 (lemmaContainsTupThenGetReturnValue!40 lt!23529 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11151 (= lt!23529 (insertStrictlySorted!43 (toList!696 call!4167) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11151 (= (+!80 call!4167 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) lt!23530)))

(declare-fun b!58541 () Bool)

(declare-fun res!32597 () Bool)

(assert (=> b!58541 (=> (not res!32597) (not e!38510))))

(assert (=> b!58541 (= res!32597 (= (getValueByKey!123 (toList!696 lt!23530) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun b!58542 () Bool)

(assert (=> b!58542 (= e!38510 (contains!681 (toList!696 lt!23530) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(assert (= (and d!11151 res!32596) b!58541))

(assert (= (and b!58541 res!32597) b!58542))

(declare-fun m!50261 () Bool)

(assert (=> d!11151 m!50261))

(declare-fun m!50263 () Bool)

(assert (=> d!11151 m!50263))

(declare-fun m!50265 () Bool)

(assert (=> d!11151 m!50265))

(declare-fun m!50267 () Bool)

(assert (=> d!11151 m!50267))

(declare-fun m!50269 () Bool)

(assert (=> b!58541 m!50269))

(declare-fun m!50271 () Bool)

(assert (=> b!58542 m!50271))

(assert (=> b!57494 d!11151))

(assert (=> b!57764 d!11063))

(declare-fun d!11153 () Bool)

(assert (=> d!11153 (= (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22667)) (v!2372 (getValueByKey!123 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22667)))))

(assert (=> d!10637 d!11153))

(declare-fun b!58544 () Bool)

(declare-fun e!38511 () Option!129)

(declare-fun e!38512 () Option!129)

(assert (=> b!58544 (= e!38511 e!38512)))

(declare-fun c!7416 () Bool)

(assert (=> b!58544 (= c!7416 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (not (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22667))))))

(declare-fun b!58543 () Bool)

(assert (=> b!58543 (= e!38511 (Some!128 (_2!1019 (h!2005 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58546 () Bool)

(assert (=> b!58546 (= e!38512 None!127)))

(declare-fun d!11155 () Bool)

(declare-fun c!7415 () Bool)

(assert (=> d!11155 (= c!7415 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22667)))))

(assert (=> d!11155 (= (getValueByKey!123 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22667) e!38511)))

(declare-fun b!58545 () Bool)

(assert (=> b!58545 (= e!38512 (getValueByKey!123 (t!4747 (toList!696 (+!80 lt!22680 (tuple2!2017 lt!22660 (minValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!22667))))

(assert (= (and d!11155 c!7415) b!58543))

(assert (= (and d!11155 (not c!7415)) b!58544))

(assert (= (and b!58544 c!7416) b!58545))

(assert (= (and b!58544 (not c!7416)) b!58546))

(declare-fun m!50273 () Bool)

(assert (=> b!58545 m!50273))

(assert (=> d!10637 d!11155))

(declare-fun lt!23532 () Bool)

(declare-fun d!11157 () Bool)

(assert (=> d!11157 (= lt!23532 (select (content!61 (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!38513 () Bool)

(assert (=> d!11157 (= lt!23532 e!38513)))

(declare-fun res!32599 () Bool)

(assert (=> d!11157 (=> (not res!32599) (not e!38513))))

(assert (=> d!11157 (= res!32599 ((_ is Cons!1424) (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)))))

(assert (=> d!11157 (= (contains!680 (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!23532)))

(declare-fun b!58547 () Bool)

(declare-fun e!38514 () Bool)

(assert (=> b!58547 (= e!38513 e!38514)))

(declare-fun res!32598 () Bool)

(assert (=> b!58547 (=> res!32598 e!38514)))

(assert (=> b!58547 (= res!32598 (= (h!2004 (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!58548 () Bool)

(assert (=> b!58548 (= e!38514 (contains!680 (t!4746 (ite c!7114 (Cons!1424 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) Nil!1425) Nil!1425)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11157 res!32599) b!58547))

(assert (= (and b!58547 (not res!32598)) b!58548))

(declare-fun m!50275 () Bool)

(assert (=> d!11157 m!50275))

(assert (=> d!11157 m!48735))

(declare-fun m!50277 () Bool)

(assert (=> d!11157 m!50277))

(assert (=> b!58548 m!48735))

(declare-fun m!50279 () Bool)

(assert (=> b!58548 m!50279))

(assert (=> b!57767 d!11157))

(declare-fun d!11159 () Bool)

(declare-fun e!38515 () Bool)

(assert (=> d!11159 e!38515))

(declare-fun res!32600 () Bool)

(assert (=> d!11159 (=> res!32600 e!38515)))

(declare-fun lt!23534 () Bool)

(assert (=> d!11159 (= res!32600 (not lt!23534))))

(declare-fun lt!23536 () Bool)

(assert (=> d!11159 (= lt!23534 lt!23536)))

(declare-fun lt!23535 () Unit!1491)

(declare-fun e!38516 () Unit!1491)

(assert (=> d!11159 (= lt!23535 e!38516)))

(declare-fun c!7417 () Bool)

(assert (=> d!11159 (= c!7417 lt!23536)))

(assert (=> d!11159 (= lt!23536 (containsKey!127 (toList!696 lt!23070) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11159 (= (contains!679 lt!23070 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23534)))

(declare-fun b!58549 () Bool)

(declare-fun lt!23533 () Unit!1491)

(assert (=> b!58549 (= e!38516 lt!23533)))

(assert (=> b!58549 (= lt!23533 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 lt!23070) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58549 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58550 () Bool)

(declare-fun Unit!1547 () Unit!1491)

(assert (=> b!58550 (= e!38516 Unit!1547)))

(declare-fun b!58551 () Bool)

(assert (=> b!58551 (= e!38515 (isDefined!76 (getValueByKey!123 (toList!696 lt!23070) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11159 c!7417) b!58549))

(assert (= (and d!11159 (not c!7417)) b!58550))

(assert (= (and d!11159 (not res!32600)) b!58551))

(declare-fun m!50281 () Bool)

(assert (=> d!11159 m!50281))

(declare-fun m!50283 () Bool)

(assert (=> b!58549 m!50283))

(assert (=> b!58549 m!48985))

(assert (=> b!58549 m!48985))

(declare-fun m!50285 () Bool)

(assert (=> b!58549 m!50285))

(assert (=> b!58551 m!48985))

(assert (=> b!58551 m!48985))

(assert (=> b!58551 m!50285))

(assert (=> bm!4206 d!11159))

(declare-fun d!11161 () Bool)

(declare-fun res!32601 () Bool)

(declare-fun e!38517 () Bool)

(assert (=> d!11161 (=> res!32601 e!38517)))

(assert (=> d!11161 (= res!32601 (and ((_ is Cons!1425) (t!4747 (toList!696 lt!22590))) (= (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590)))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(assert (=> d!11161 (= (containsKey!127 (t!4747 (toList!696 lt!22590)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) e!38517)))

(declare-fun b!58552 () Bool)

(declare-fun e!38518 () Bool)

(assert (=> b!58552 (= e!38517 e!38518)))

(declare-fun res!32602 () Bool)

(assert (=> b!58552 (=> (not res!32602) (not e!38518))))

(assert (=> b!58552 (= res!32602 (and (or (not ((_ is Cons!1425) (t!4747 (toList!696 lt!22590)))) (bvsle (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590)))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))) ((_ is Cons!1425) (t!4747 (toList!696 lt!22590))) (bvslt (_1!1019 (h!2005 (t!4747 (toList!696 lt!22590)))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355))))))

(declare-fun b!58553 () Bool)

(assert (=> b!58553 (= e!38518 (containsKey!127 (t!4747 (t!4747 (toList!696 lt!22590))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11161 (not res!32601)) b!58552))

(assert (= (and b!58552 res!32602) b!58553))

(assert (=> b!58553 m!48037))

(declare-fun m!50287 () Bool)

(assert (=> b!58553 m!50287))

(assert (=> b!57575 d!11161))

(declare-fun d!11163 () Bool)

(assert (=> d!11163 (= (get!1063 (getValueByKey!123 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22659)) (v!2372 (getValueByKey!123 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22659)))))

(assert (=> d!10633 d!11163))

(declare-fun b!58555 () Bool)

(declare-fun e!38519 () Option!129)

(declare-fun e!38520 () Option!129)

(assert (=> b!58555 (= e!38519 e!38520)))

(declare-fun c!7419 () Bool)

(assert (=> b!58555 (= c!7419 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (not (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22659))))))

(declare-fun b!58554 () Bool)

(assert (=> b!58554 (= e!38519 (Some!128 (_2!1019 (h!2005 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))))))))

(declare-fun b!58557 () Bool)

(assert (=> b!58557 (= e!38520 None!127)))

(declare-fun d!11165 () Bool)

(declare-fun c!7418 () Bool)

(assert (=> d!11165 (= c!7418 (and ((_ is Cons!1425) (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) (= (_1!1019 (h!2005 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))))) lt!22659)))))

(assert (=> d!11165 (= (getValueByKey!123 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992)))))) lt!22659) e!38519)))

(declare-fun b!58556 () Bool)

(assert (=> b!58556 (= e!38520 (getValueByKey!123 (t!4747 (toList!696 (+!80 lt!22670 (tuple2!2017 lt!22673 (zeroValue!1940 (v!2368 (underlying!224 thiss!992))))))) lt!22659))))

(assert (= (and d!11165 c!7418) b!58554))

(assert (= (and d!11165 (not c!7418)) b!58555))

(assert (= (and b!58555 c!7419) b!58556))

(assert (= (and b!58555 (not c!7419)) b!58557))

(declare-fun m!50289 () Bool)

(assert (=> b!58556 m!50289))

(assert (=> d!10633 d!11165))

(assert (=> bm!4179 d!10929))

(assert (=> d!10601 d!10681))

(declare-fun d!11167 () Bool)

(declare-fun e!38523 () Bool)

(assert (=> d!11167 e!38523))

(declare-fun res!32608 () Bool)

(assert (=> d!11167 (=> (not res!32608) (not e!38523))))

(declare-fun lt!23539 () SeekEntryResult!226)

(assert (=> d!11167 (= res!32608 ((_ is Found!226) lt!23539))))

(assert (=> d!11167 (= lt!23539 (seekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!11167 true))

(declare-fun _$33!39 () Unit!1491)

(assert (=> d!11167 (= (choose!289 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) _$33!39)))

(declare-fun b!58562 () Bool)

(declare-fun res!32607 () Bool)

(assert (=> b!58562 (=> (not res!32607) (not e!38523))))

(assert (=> b!58562 (= res!32607 (inRange!0 (index!3027 lt!23539) (mask!5896 newMap!16)))))

(declare-fun b!58563 () Bool)

(assert (=> b!58563 (= e!38523 (= (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!23539)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (= (and d!11167 res!32608) b!58562))

(assert (= (and b!58562 res!32607) b!58563))

(assert (=> d!11167 m!48037))

(assert (=> d!11167 m!48203))

(declare-fun m!50291 () Bool)

(assert (=> b!58562 m!50291))

(declare-fun m!50293 () Bool)

(assert (=> b!58563 m!50293))

(assert (=> d!10601 d!11167))

(assert (=> d!10601 d!10767))

(declare-fun d!11169 () Bool)

(declare-fun e!38524 () Bool)

(assert (=> d!11169 e!38524))

(declare-fun res!32609 () Bool)

(assert (=> d!11169 (=> (not res!32609) (not e!38524))))

(declare-fun lt!23542 () ListLongMap!1361)

(assert (=> d!11169 (= res!32609 (contains!679 lt!23542 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun lt!23541 () List!1429)

(assert (=> d!11169 (= lt!23542 (ListLongMap!1362 lt!23541))))

(declare-fun lt!23540 () Unit!1491)

(declare-fun lt!23543 () Unit!1491)

(assert (=> d!11169 (= lt!23540 lt!23543)))

(assert (=> d!11169 (= (getValueByKey!123 lt!23541 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11169 (= lt!23543 (lemmaContainsTupThenGetReturnValue!40 lt!23541 (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11169 (= lt!23541 (insertStrictlySorted!43 (toList!696 call!4174) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11169 (= (+!80 call!4174 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) lt!23542)))

(declare-fun b!58564 () Bool)

(declare-fun res!32610 () Bool)

(assert (=> b!58564 (=> (not res!32610) (not e!38524))))

(assert (=> b!58564 (= res!32610 (= (getValueByKey!123 (toList!696 lt!23542) (_1!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!128 (_2!1019 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun b!58565 () Bool)

(assert (=> b!58565 (= e!38524 (contains!681 (toList!696 lt!23542) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(assert (= (and d!11169 res!32609) b!58564))

(assert (= (and b!58564 res!32610) b!58565))

(declare-fun m!50295 () Bool)

(assert (=> d!11169 m!50295))

(declare-fun m!50297 () Bool)

(assert (=> d!11169 m!50297))

(declare-fun m!50299 () Bool)

(assert (=> d!11169 m!50299))

(declare-fun m!50301 () Bool)

(assert (=> d!11169 m!50301))

(declare-fun m!50303 () Bool)

(assert (=> b!58564 m!50303))

(declare-fun m!50305 () Bool)

(assert (=> b!58565 m!50305))

(assert (=> b!57521 d!11169))

(declare-fun d!11171 () Bool)

(declare-fun res!32611 () Bool)

(declare-fun e!38525 () Bool)

(assert (=> d!11171 (=> res!32611 e!38525)))

(assert (=> d!11171 (= res!32611 (and ((_ is Cons!1425) (toList!696 call!4148)) (= (_1!1019 (h!2005 (toList!696 call!4148))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))))

(assert (=> d!11171 (= (containsKey!127 (toList!696 call!4148) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))) e!38525)))

(declare-fun b!58566 () Bool)

(declare-fun e!38526 () Bool)

(assert (=> b!58566 (= e!38525 e!38526)))

(declare-fun res!32612 () Bool)

(assert (=> b!58566 (=> (not res!32612) (not e!38526))))

(assert (=> b!58566 (= res!32612 (and (or (not ((_ is Cons!1425) (toList!696 call!4148))) (bvsle (_1!1019 (h!2005 (toList!696 call!4148))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))) ((_ is Cons!1425) (toList!696 call!4148)) (bvslt (_1!1019 (h!2005 (toList!696 call!4148))) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))))

(declare-fun b!58567 () Bool)

(assert (=> b!58567 (= e!38526 (containsKey!127 (t!4747 (toList!696 call!4148)) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759))))))

(assert (= (and d!11171 (not res!32611)) b!58566))

(assert (= (and b!58566 res!32612) b!58567))

(assert (=> b!58567 m!48207))

(declare-fun m!50307 () Bool)

(assert (=> b!58567 m!50307))

(assert (=> d!10643 d!11171))

(declare-fun d!11173 () Bool)

(assert (=> d!11173 (contains!679 (getCurrentListMap!401 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 (_keys!3642 newMap!16)) (index!3027 lt!22759)))))

(assert (=> d!11173 true))

(declare-fun _$16!75 () Unit!1491)

(assert (=> d!11173 (= (choose!292 (_keys!3642 newMap!16) lt!22762 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3027 lt!22759) (defaultEntry!2022 newMap!16)) _$16!75)))

(declare-fun bs!2546 () Bool)

(assert (= bs!2546 d!11173))

(assert (=> bs!2546 m!48623))

(assert (=> bs!2546 m!48207))

(assert (=> bs!2546 m!48623))

(assert (=> bs!2546 m!48207))

(assert (=> bs!2546 m!48625))

(assert (=> d!10645 d!11173))

(assert (=> d!10645 d!10767))

(assert (=> bm!4188 d!10681))

(declare-fun d!11175 () Bool)

(declare-fun res!32613 () Bool)

(declare-fun e!38527 () Bool)

(assert (=> d!11175 (=> res!32613 e!38527)))

(assert (=> d!11175 (= res!32613 (and ((_ is Cons!1425) (toList!696 lt!22664)) (= (_1!1019 (h!2005 (toList!696 lt!22664))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11175 (= (containsKey!127 (toList!696 lt!22664) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38527)))

(declare-fun b!58568 () Bool)

(declare-fun e!38528 () Bool)

(assert (=> b!58568 (= e!38527 e!38528)))

(declare-fun res!32614 () Bool)

(assert (=> b!58568 (=> (not res!32614) (not e!38528))))

(assert (=> b!58568 (= res!32614 (and (or (not ((_ is Cons!1425) (toList!696 lt!22664))) (bvsle (_1!1019 (h!2005 (toList!696 lt!22664))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1425) (toList!696 lt!22664)) (bvslt (_1!1019 (h!2005 (toList!696 lt!22664))) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!58569 () Bool)

(assert (=> b!58569 (= e!38528 (containsKey!127 (t!4747 (toList!696 lt!22664)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11175 (not res!32613)) b!58568))

(assert (= (and b!58568 res!32614) b!58569))

(assert (=> b!58569 m!48125))

(declare-fun m!50309 () Bool)

(assert (=> b!58569 m!50309))

(assert (=> d!10649 d!11175))

(declare-fun b!58578 () Bool)

(declare-fun res!32626 () Bool)

(declare-fun e!38533 () Bool)

(assert (=> b!58578 (=> (not res!32626) (not e!38533))))

(assert (=> b!58578 (= res!32626 (not (validKeyInArray!0 (select (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))))

(declare-fun e!38534 () Bool)

(declare-fun b!58581 () Bool)

(assert (=> b!58581 (= e!38534 (= (arrayCountValidKeys!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!58579 () Bool)

(declare-fun res!32625 () Bool)

(assert (=> b!58579 (=> (not res!32625) (not e!38533))))

(assert (=> b!58579 (= res!32625 (validKeyInArray!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(declare-fun b!58580 () Bool)

(assert (=> b!58580 (= e!38533 (bvslt (size!2004 (_keys!3642 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!11177 () Bool)

(assert (=> d!11177 e!38534))

(declare-fun res!32624 () Bool)

(assert (=> d!11177 (=> (not res!32624) (not e!38534))))

(assert (=> d!11177 (= res!32624 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 (_keys!3642 newMap!16)))))))

(declare-fun lt!23546 () Unit!1491)

(declare-fun choose!1 (array!3707 (_ BitVec 32) (_ BitVec 64)) Unit!1491)

(assert (=> d!11177 (= lt!23546 (choose!1 (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11177 e!38533))

(declare-fun res!32623 () Bool)

(assert (=> d!11177 (=> (not res!32623) (not e!38533))))

(assert (=> d!11177 (= res!32623 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 (_keys!3642 newMap!16)))))))

(assert (=> d!11177 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) lt!23546)))

(assert (= (and d!11177 res!32623) b!58578))

(assert (= (and b!58578 res!32626) b!58579))

(assert (= (and b!58579 res!32625) b!58580))

(assert (= (and d!11177 res!32624) b!58581))

(declare-fun m!50311 () Bool)

(assert (=> b!58578 m!50311))

(assert (=> b!58578 m!50311))

(declare-fun m!50313 () Bool)

(assert (=> b!58578 m!50313))

(assert (=> b!58581 m!48657))

(assert (=> b!58581 m!48673))

(assert (=> b!58581 m!48263))

(assert (=> b!58579 m!48037))

(assert (=> b!58579 m!48255))

(assert (=> d!11177 m!48037))

(declare-fun m!50315 () Bool)

(assert (=> d!11177 m!50315))

(assert (=> d!10651 d!11177))

(declare-fun b!58582 () Bool)

(declare-fun e!38535 () (_ BitVec 32))

(declare-fun e!38536 () (_ BitVec 32))

(assert (=> b!58582 (= e!38535 e!38536)))

(declare-fun c!7420 () Bool)

(assert (=> b!58582 (= c!7420 (validKeyInArray!0 (select (arr!1775 lt!23022) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(declare-fun b!58583 () Bool)

(declare-fun call!4298 () (_ BitVec 32))

(assert (=> b!58583 (= e!38536 (bvadd #b00000000000000000000000000000001 call!4298))))

(declare-fun b!58584 () Bool)

(assert (=> b!58584 (= e!38536 call!4298)))

(declare-fun d!11179 () Bool)

(declare-fun lt!23547 () (_ BitVec 32))

(assert (=> d!11179 (and (bvsge lt!23547 #b00000000000000000000000000000000) (bvsle lt!23547 (bvsub (size!2004 lt!23022) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(assert (=> d!11179 (= lt!23547 e!38535)))

(declare-fun c!7421 () Bool)

(assert (=> d!11179 (= c!7421 (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)))))

(assert (=> d!11179 (and (bvsle (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)) (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001) (size!2004 lt!23022)))))

(assert (=> d!11179 (= (arrayCountValidKeys!0 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)) lt!23547)))

(declare-fun b!58585 () Bool)

(assert (=> b!58585 (= e!38535 #b00000000000000000000000000000000)))

(declare-fun bm!4295 () Bool)

(assert (=> bm!4295 (= call!4298 (arrayCountValidKeys!0 lt!23022 (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)))))

(assert (= (and d!11179 c!7421) b!58585))

(assert (= (and d!11179 (not c!7421)) b!58582))

(assert (= (and b!58582 c!7420) b!58583))

(assert (= (and b!58582 (not c!7420)) b!58584))

(assert (= (or b!58583 b!58584) bm!4295))

(declare-fun m!50317 () Bool)

(assert (=> b!58582 m!50317))

(assert (=> b!58582 m!50317))

(declare-fun m!50319 () Bool)

(assert (=> b!58582 m!50319))

(declare-fun m!50321 () Bool)

(assert (=> bm!4295 m!50321))

(assert (=> d!10651 d!11179))

(declare-fun d!11181 () Bool)

(declare-fun e!38539 () Bool)

(assert (=> d!11181 e!38539))

(declare-fun res!32629 () Bool)

(assert (=> d!11181 (=> (not res!32629) (not e!38539))))

(assert (=> d!11181 (= res!32629 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 (_keys!3642 newMap!16)))))))

(declare-fun lt!23550 () Unit!1491)

(declare-fun choose!41 (array!3707 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1428) Unit!1491)

(assert (=> d!11181 (= lt!23550 (choose!41 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) lt!23017 lt!23008))))

(assert (=> d!11181 (bvslt (size!2004 (_keys!3642 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!11181 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3642 newMap!16) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) lt!23017 lt!23008) lt!23550)))

(declare-fun b!58588 () Bool)

(assert (=> b!58588 (= e!38539 (arrayNoDuplicates!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) lt!23017 lt!23008))))

(assert (= (and d!11181 res!32629) b!58588))

(assert (=> d!11181 m!48037))

(declare-fun m!50323 () Bool)

(assert (=> d!11181 m!50323))

(assert (=> b!58588 m!48657))

(assert (=> b!58588 m!48667))

(assert (=> d!10651 d!11181))

(assert (=> d!10651 d!11089))

(assert (=> d!10651 d!10559))

(declare-fun d!11183 () Bool)

(declare-fun res!32630 () Bool)

(declare-fun e!38540 () Bool)

(assert (=> d!11183 (=> res!32630 e!38540)))

(assert (=> d!11183 (= res!32630 (= (select (arr!1775 lt!23028) #b00000000000000000000000000000000) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)))))

(assert (=> d!11183 (= (arrayContainsKey!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38540)))

(declare-fun b!58589 () Bool)

(declare-fun e!38541 () Bool)

(assert (=> b!58589 (= e!38540 e!38541)))

(declare-fun res!32631 () Bool)

(assert (=> b!58589 (=> (not res!32631) (not e!38541))))

(assert (=> b!58589 (= res!32631 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 lt!23028)))))

(declare-fun b!58590 () Bool)

(assert (=> b!58590 (= e!38541 (arrayContainsKey!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11183 (not res!32630)) b!58589))

(assert (= (and b!58589 res!32631) b!58590))

(declare-fun m!50325 () Bool)

(assert (=> d!11183 m!50325))

(assert (=> b!58590 m!48037))

(declare-fun m!50327 () Bool)

(assert (=> b!58590 m!50327))

(assert (=> d!10651 d!11183))

(assert (=> d!10651 d!10667))

(declare-fun b!58591 () Bool)

(declare-fun e!38542 () (_ BitVec 32))

(declare-fun e!38543 () (_ BitVec 32))

(assert (=> b!58591 (= e!38542 e!38543)))

(declare-fun c!7422 () Bool)

(assert (=> b!58591 (= c!7422 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!58592 () Bool)

(declare-fun call!4299 () (_ BitVec 32))

(assert (=> b!58592 (= e!38543 (bvadd #b00000000000000000000000000000001 call!4299))))

(declare-fun b!58593 () Bool)

(assert (=> b!58593 (= e!38543 call!4299)))

(declare-fun d!11185 () Bool)

(declare-fun lt!23551 () (_ BitVec 32))

(assert (=> d!11185 (and (bvsge lt!23551 #b00000000000000000000000000000000) (bvsle lt!23551 (bvsub (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!11185 (= lt!23551 e!38542)))

(declare-fun c!7423 () Bool)

(assert (=> d!11185 (= c!7423 (bvsge #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))))))

(assert (=> d!11185 (and (bvsle #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2004 (_keys!3642 newMap!16)) (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(assert (=> d!11185 (= (arrayCountValidKeys!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2004 (_keys!3642 newMap!16))) lt!23551)))

(declare-fun b!58594 () Bool)

(assert (=> b!58594 (= e!38542 #b00000000000000000000000000000000)))

(declare-fun bm!4296 () Bool)

(assert (=> bm!4296 (= call!4299 (arrayCountValidKeys!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2004 (_keys!3642 newMap!16))))))

(assert (= (and d!11185 c!7423) b!58594))

(assert (= (and d!11185 (not c!7423)) b!58591))

(assert (= (and b!58591 c!7422) b!58592))

(assert (= (and b!58591 (not c!7422)) b!58593))

(assert (= (or b!58592 b!58593) bm!4296))

(declare-fun m!50329 () Bool)

(assert (=> b!58591 m!50329))

(assert (=> b!58591 m!50329))

(declare-fun m!50331 () Bool)

(assert (=> b!58591 m!50331))

(declare-fun m!50333 () Bool)

(assert (=> bm!4296 m!50333))

(assert (=> d!10651 d!11185))

(assert (=> d!10651 d!10655))

(declare-fun d!11187 () Bool)

(declare-fun e!38546 () Bool)

(assert (=> d!11187 e!38546))

(declare-fun res!32634 () Bool)

(assert (=> d!11187 (=> (not res!32634) (not e!38546))))

(assert (=> d!11187 (= res!32634 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 (_keys!3642 newMap!16))) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2005 (_values!2005 newMap!16)))))))

(declare-fun lt!23554 () Unit!1491)

(declare-fun choose!300 (array!3707 array!3709 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1491)

(assert (=> d!11187 (= lt!23554 (choose!300 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!11187 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11187 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!23554)))

(declare-fun b!58597 () Bool)

(assert (=> b!58597 (= e!38546 (= (+!80 (getCurrentListMap!401 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2017 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!401 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))))

(assert (= (and d!11187 res!32634) b!58597))

(assert (=> d!11187 m!48037))

(assert (=> d!11187 m!48051))

(declare-fun m!50335 () Bool)

(assert (=> d!11187 m!50335))

(assert (=> d!11187 m!48289))

(assert (=> b!58597 m!48121))

(assert (=> b!58597 m!48657))

(assert (=> b!58597 m!48121))

(assert (=> b!58597 m!48629))

(assert (=> b!58597 m!48687))

(assert (=> b!58597 m!48661))

(assert (=> d!10651 d!11187))

(declare-fun d!11189 () Bool)

(declare-fun e!38549 () Bool)

(assert (=> d!11189 e!38549))

(declare-fun res!32637 () Bool)

(assert (=> d!11189 (=> (not res!32637) (not e!38549))))

(assert (=> d!11189 (= res!32637 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 (_keys!3642 newMap!16)))))))

(declare-fun lt!23557 () Unit!1491)

(declare-fun choose!102 ((_ BitVec 64) array!3707 (_ BitVec 32) (_ BitVec 32)) Unit!1491)

(assert (=> d!11189 (= lt!23557 (choose!102 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (mask!5896 newMap!16)))))

(assert (=> d!11189 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11189 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (mask!5896 newMap!16)) lt!23557)))

(declare-fun b!58600 () Bool)

(assert (=> b!58600 (= e!38549 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (mask!5896 newMap!16)))))

(assert (= (and d!11189 res!32637) b!58600))

(assert (=> d!11189 m!48037))

(declare-fun m!50337 () Bool)

(assert (=> d!11189 m!50337))

(assert (=> d!11189 m!48289))

(assert (=> b!58600 m!48657))

(assert (=> b!58600 m!48691))

(assert (=> d!10651 d!11189))

(declare-fun d!11191 () Bool)

(assert (=> d!11191 (= (arrayCountValidKeys!0 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (bvadd (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!23560 () Unit!1491)

(declare-fun choose!2 (array!3707 (_ BitVec 32)) Unit!1491)

(assert (=> d!11191 (= lt!23560 (choose!2 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(declare-fun e!38552 () Bool)

(assert (=> d!11191 e!38552))

(declare-fun res!32642 () Bool)

(assert (=> d!11191 (=> (not res!32642) (not e!38552))))

(assert (=> d!11191 (= res!32642 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 lt!23022))))))

(assert (=> d!11191 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23022 (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))) lt!23560)))

(declare-fun b!58605 () Bool)

(declare-fun res!32643 () Bool)

(assert (=> b!58605 (=> (not res!32643) (not e!38552))))

(assert (=> b!58605 (= res!32643 (validKeyInArray!0 (select (arr!1775 lt!23022) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(declare-fun b!58606 () Bool)

(assert (=> b!58606 (= e!38552 (bvslt (size!2004 lt!23022) #b01111111111111111111111111111111))))

(assert (= (and d!11191 res!32642) b!58605))

(assert (= (and b!58605 res!32643) b!58606))

(assert (=> d!11191 m!48675))

(declare-fun m!50339 () Bool)

(assert (=> d!11191 m!50339))

(assert (=> b!58605 m!50317))

(assert (=> b!58605 m!50317))

(assert (=> b!58605 m!50319))

(assert (=> d!10651 d!11191))

(declare-fun d!11193 () Bool)

(assert (=> d!11193 (arrayContainsKey!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!23561 () Unit!1491)

(assert (=> d!11193 (= lt!23561 (choose!13 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))

(assert (=> d!11193 (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000)))

(assert (=> d!11193 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23028 (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))) lt!23561)))

(declare-fun bs!2547 () Bool)

(assert (= bs!2547 d!11193))

(assert (=> bs!2547 m!48037))

(assert (=> bs!2547 m!48665))

(assert (=> bs!2547 m!48037))

(declare-fun m!50341 () Bool)

(assert (=> bs!2547 m!50341))

(assert (=> d!10651 d!11193))

(declare-fun b!58607 () Bool)

(declare-fun e!38554 () ListLongMap!1361)

(declare-fun call!4306 () ListLongMap!1361)

(assert (=> b!58607 (= e!38554 call!4306)))

(declare-fun b!58608 () Bool)

(declare-fun e!38562 () Bool)

(declare-fun lt!23567 () ListLongMap!1361)

(assert (=> b!58608 (= e!38562 (= (apply!65 lt!23567 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58609 () Bool)

(declare-fun e!38553 () Bool)

(assert (=> b!58609 (= e!38553 e!38562)))

(declare-fun res!32650 () Bool)

(declare-fun call!4300 () Bool)

(assert (=> b!58609 (= res!32650 call!4300)))

(assert (=> b!58609 (=> (not res!32650) (not e!38562))))

(declare-fun b!58610 () Bool)

(declare-fun e!38556 () Bool)

(declare-fun e!38557 () Bool)

(assert (=> b!58610 (= e!38556 e!38557)))

(declare-fun res!32645 () Bool)

(declare-fun call!4301 () Bool)

(assert (=> b!58610 (= res!32645 call!4301)))

(assert (=> b!58610 (=> (not res!32645) (not e!38557))))

(declare-fun b!58611 () Bool)

(declare-fun e!38564 () Bool)

(assert (=> b!58611 (= e!38564 (= (apply!65 lt!23567 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))))))))

(assert (=> b!58611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun b!58612 () Bool)

(declare-fun e!38559 () Bool)

(assert (=> b!58612 (= e!38559 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4297 () Bool)

(declare-fun call!4302 () ListLongMap!1361)

(assert (=> bm!4297 (= call!4306 call!4302)))

(declare-fun d!11195 () Bool)

(declare-fun e!38561 () Bool)

(assert (=> d!11195 e!38561))

(declare-fun res!32647 () Bool)

(assert (=> d!11195 (=> (not res!32647) (not e!38561))))

(assert (=> d!11195 (= res!32647 (or (bvsge #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))))

(declare-fun lt!23579 () ListLongMap!1361)

(assert (=> d!11195 (= lt!23567 lt!23579)))

(declare-fun lt!23566 () Unit!1491)

(declare-fun e!38563 () Unit!1491)

(assert (=> d!11195 (= lt!23566 e!38563)))

(declare-fun c!7428 () Bool)

(declare-fun e!38565 () Bool)

(assert (=> d!11195 (= c!7428 e!38565)))

(declare-fun res!32646 () Bool)

(assert (=> d!11195 (=> (not res!32646) (not e!38565))))

(assert (=> d!11195 (= res!32646 (bvslt #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun e!38560 () ListLongMap!1361)

(assert (=> d!11195 (= lt!23579 e!38560)))

(declare-fun c!7426 () Bool)

(assert (=> d!11195 (= c!7426 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11195 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11195 (= (getCurrentListMap!401 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23567)))

(declare-fun b!58613 () Bool)

(declare-fun call!4304 () ListLongMap!1361)

(assert (=> b!58613 (= e!38560 (+!80 call!4304 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4298 () Bool)

(declare-fun call!4303 () ListLongMap!1361)

(assert (=> bm!4298 (= call!4303 call!4304)))

(declare-fun b!58614 () Bool)

(assert (=> b!58614 (= e!38561 e!38556)))

(declare-fun c!7427 () Bool)

(assert (=> b!58614 (= c!7427 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!4305 () ListLongMap!1361)

(declare-fun bm!4299 () Bool)

(assert (=> bm!4299 (= call!4305 (getCurrentListMapNoExtraKeys!43 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58615 () Bool)

(declare-fun res!32652 () Bool)

(assert (=> b!58615 (=> (not res!32652) (not e!38561))))

(declare-fun e!38555 () Bool)

(assert (=> b!58615 (= res!32652 e!38555)))

(declare-fun res!32649 () Bool)

(assert (=> b!58615 (=> res!32649 e!38555)))

(assert (=> b!58615 (= res!32649 (not e!38559))))

(declare-fun res!32648 () Bool)

(assert (=> b!58615 (=> (not res!32648) (not e!38559))))

(assert (=> b!58615 (= res!32648 (bvslt #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun bm!4300 () Bool)

(assert (=> bm!4300 (= call!4301 (contains!679 lt!23567 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58616 () Bool)

(declare-fun lt!23577 () Unit!1491)

(assert (=> b!58616 (= e!38563 lt!23577)))

(declare-fun lt!23572 () ListLongMap!1361)

(assert (=> b!58616 (= lt!23572 (getCurrentListMapNoExtraKeys!43 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23569 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23569 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23580 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23580 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23568 () Unit!1491)

(assert (=> b!58616 (= lt!23568 (addStillContains!41 lt!23572 lt!23569 (zeroValue!1940 newMap!16) lt!23580))))

(assert (=> b!58616 (contains!679 (+!80 lt!23572 (tuple2!2017 lt!23569 (zeroValue!1940 newMap!16))) lt!23580)))

(declare-fun lt!23575 () Unit!1491)

(assert (=> b!58616 (= lt!23575 lt!23568)))

(declare-fun lt!23571 () ListLongMap!1361)

(assert (=> b!58616 (= lt!23571 (getCurrentListMapNoExtraKeys!43 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23564 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23564 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23574 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23574 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23565 () Unit!1491)

(assert (=> b!58616 (= lt!23565 (addApplyDifferent!41 lt!23571 lt!23564 (minValue!1940 newMap!16) lt!23574))))

(assert (=> b!58616 (= (apply!65 (+!80 lt!23571 (tuple2!2017 lt!23564 (minValue!1940 newMap!16))) lt!23574) (apply!65 lt!23571 lt!23574))))

(declare-fun lt!23581 () Unit!1491)

(assert (=> b!58616 (= lt!23581 lt!23565)))

(declare-fun lt!23573 () ListLongMap!1361)

(assert (=> b!58616 (= lt!23573 (getCurrentListMapNoExtraKeys!43 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23576 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23576 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23562 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23562 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23582 () Unit!1491)

(assert (=> b!58616 (= lt!23582 (addApplyDifferent!41 lt!23573 lt!23576 (zeroValue!1940 newMap!16) lt!23562))))

(assert (=> b!58616 (= (apply!65 (+!80 lt!23573 (tuple2!2017 lt!23576 (zeroValue!1940 newMap!16))) lt!23562) (apply!65 lt!23573 lt!23562))))

(declare-fun lt!23578 () Unit!1491)

(assert (=> b!58616 (= lt!23578 lt!23582)))

(declare-fun lt!23583 () ListLongMap!1361)

(assert (=> b!58616 (= lt!23583 (getCurrentListMapNoExtraKeys!43 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (array!3710 (store (arr!1776 (_values!2005 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (ValueCellFull!852 (get!1060 (select (arr!1776 (_values!2005 (v!2368 (underlying!224 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2005 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23563 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23563 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23570 () (_ BitVec 64))

(assert (=> b!58616 (= lt!23570 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!58616 (= lt!23577 (addApplyDifferent!41 lt!23583 lt!23563 (minValue!1940 newMap!16) lt!23570))))

(assert (=> b!58616 (= (apply!65 (+!80 lt!23583 (tuple2!2017 lt!23563 (minValue!1940 newMap!16))) lt!23570) (apply!65 lt!23583 lt!23570))))

(declare-fun b!58617 () Bool)

(assert (=> b!58617 (= e!38553 (not call!4300))))

(declare-fun b!58618 () Bool)

(assert (=> b!58618 (= e!38556 (not call!4301))))

(declare-fun bm!4301 () Bool)

(assert (=> bm!4301 (= call!4300 (contains!679 lt!23567 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4302 () Bool)

(declare-fun c!7425 () Bool)

(assert (=> bm!4302 (= call!4304 (+!80 (ite c!7426 call!4305 (ite c!7425 call!4302 call!4306)) (ite (or c!7426 c!7425) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58619 () Bool)

(declare-fun e!38558 () ListLongMap!1361)

(assert (=> b!58619 (= e!38558 call!4303)))

(declare-fun b!58620 () Bool)

(assert (=> b!58620 (= e!38555 e!38564)))

(declare-fun res!32644 () Bool)

(assert (=> b!58620 (=> (not res!32644) (not e!38564))))

(assert (=> b!58620 (= res!32644 (contains!679 lt!23567 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!58620 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(declare-fun b!58621 () Bool)

(assert (=> b!58621 (= e!38560 e!38558)))

(assert (=> b!58621 (= c!7425 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4303 () Bool)

(assert (=> bm!4303 (= call!4302 call!4305)))

(declare-fun b!58622 () Bool)

(assert (=> b!58622 (= e!38557 (= (apply!65 lt!23567 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58623 () Bool)

(assert (=> b!58623 (= e!38554 call!4303)))

(declare-fun b!58624 () Bool)

(declare-fun c!7429 () Bool)

(assert (=> b!58624 (= c!7429 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58624 (= e!38558 e!38554)))

(declare-fun b!58625 () Bool)

(declare-fun res!32651 () Bool)

(assert (=> b!58625 (=> (not res!32651) (not e!38561))))

(assert (=> b!58625 (= res!32651 e!38553)))

(declare-fun c!7424 () Bool)

(assert (=> b!58625 (= c!7424 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58626 () Bool)

(declare-fun Unit!1548 () Unit!1491)

(assert (=> b!58626 (= e!38563 Unit!1548)))

(declare-fun b!58627 () Bool)

(assert (=> b!58627 (= e!38565 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11195 c!7426) b!58613))

(assert (= (and d!11195 (not c!7426)) b!58621))

(assert (= (and b!58621 c!7425) b!58619))

(assert (= (and b!58621 (not c!7425)) b!58624))

(assert (= (and b!58624 c!7429) b!58623))

(assert (= (and b!58624 (not c!7429)) b!58607))

(assert (= (or b!58623 b!58607) bm!4297))

(assert (= (or b!58619 bm!4297) bm!4303))

(assert (= (or b!58619 b!58623) bm!4298))

(assert (= (or b!58613 bm!4303) bm!4299))

(assert (= (or b!58613 bm!4298) bm!4302))

(assert (= (and d!11195 res!32646) b!58627))

(assert (= (and d!11195 c!7428) b!58616))

(assert (= (and d!11195 (not c!7428)) b!58626))

(assert (= (and d!11195 res!32647) b!58615))

(assert (= (and b!58615 res!32648) b!58612))

(assert (= (and b!58615 (not res!32649)) b!58620))

(assert (= (and b!58620 res!32644) b!58611))

(assert (= (and b!58615 res!32652) b!58625))

(assert (= (and b!58625 c!7424) b!58609))

(assert (= (and b!58625 (not c!7424)) b!58617))

(assert (= (and b!58609 res!32650) b!58608))

(assert (= (or b!58609 b!58617) bm!4301))

(assert (= (and b!58625 res!32651) b!58614))

(assert (= (and b!58614 c!7427) b!58610))

(assert (= (and b!58614 (not c!7427)) b!58618))

(assert (= (and b!58610 res!32645) b!58622))

(assert (= (or b!58610 b!58618) bm!4300))

(declare-fun b_lambda!2547 () Bool)

(assert (=> (not b_lambda!2547) (not b!58611)))

(assert (=> b!58611 t!4753))

(declare-fun b_and!3535 () Bool)

(assert (= b_and!3531 (and (=> t!4753 result!2353) b_and!3535)))

(assert (=> b!58611 t!4755))

(declare-fun b_and!3537 () Bool)

(assert (= b_and!3533 (and (=> t!4755 result!2355) b_and!3537)))

(declare-fun m!50343 () Bool)

(assert (=> bm!4299 m!50343))

(assert (=> b!58612 m!50329))

(assert (=> b!58612 m!50329))

(assert (=> b!58612 m!50331))

(declare-fun m!50345 () Bool)

(assert (=> b!58622 m!50345))

(declare-fun m!50347 () Bool)

(assert (=> bm!4300 m!50347))

(declare-fun m!50349 () Bool)

(assert (=> bm!4301 m!50349))

(declare-fun m!50351 () Bool)

(assert (=> bm!4302 m!50351))

(declare-fun m!50353 () Bool)

(assert (=> b!58616 m!50353))

(declare-fun m!50355 () Bool)

(assert (=> b!58616 m!50355))

(declare-fun m!50357 () Bool)

(assert (=> b!58616 m!50357))

(declare-fun m!50359 () Bool)

(assert (=> b!58616 m!50359))

(declare-fun m!50361 () Bool)

(assert (=> b!58616 m!50361))

(declare-fun m!50363 () Bool)

(assert (=> b!58616 m!50363))

(declare-fun m!50365 () Bool)

(assert (=> b!58616 m!50365))

(declare-fun m!50367 () Bool)

(assert (=> b!58616 m!50367))

(declare-fun m!50369 () Bool)

(assert (=> b!58616 m!50369))

(declare-fun m!50371 () Bool)

(assert (=> b!58616 m!50371))

(declare-fun m!50373 () Bool)

(assert (=> b!58616 m!50373))

(assert (=> b!58616 m!50343))

(assert (=> b!58616 m!50371))

(declare-fun m!50375 () Bool)

(assert (=> b!58616 m!50375))

(assert (=> b!58616 m!50367))

(assert (=> b!58616 m!50363))

(assert (=> b!58616 m!50329))

(declare-fun m!50377 () Bool)

(assert (=> b!58616 m!50377))

(assert (=> b!58616 m!50359))

(declare-fun m!50379 () Bool)

(assert (=> b!58616 m!50379))

(declare-fun m!50381 () Bool)

(assert (=> b!58616 m!50381))

(assert (=> b!58611 m!50329))

(declare-fun m!50383 () Bool)

(assert (=> b!58611 m!50383))

(assert (=> b!58611 m!48339))

(declare-fun m!50385 () Bool)

(assert (=> b!58611 m!50385))

(assert (=> b!58611 m!48339))

(assert (=> b!58611 m!50329))

(declare-fun m!50387 () Bool)

(assert (=> b!58611 m!50387))

(assert (=> b!58611 m!50383))

(declare-fun m!50389 () Bool)

(assert (=> b!58613 m!50389))

(declare-fun m!50391 () Bool)

(assert (=> b!58608 m!50391))

(assert (=> b!58627 m!50329))

(assert (=> b!58627 m!50329))

(assert (=> b!58627 m!50331))

(assert (=> d!11195 m!48289))

(assert (=> b!58620 m!50329))

(assert (=> b!58620 m!50329))

(declare-fun m!50393 () Bool)

(assert (=> b!58620 m!50393))

(assert (=> d!10651 d!11195))

(assert (=> d!10651 d!11129))

(declare-fun b!58628 () Bool)

(declare-fun e!38566 () Bool)

(declare-fun e!38567 () Bool)

(assert (=> b!58628 (= e!38566 e!38567)))

(declare-fun lt!23586 () (_ BitVec 64))

(assert (=> b!58628 (= lt!23586 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23584 () Unit!1491)

(assert (=> b!58628 (= lt!23584 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) lt!23586 #b00000000000000000000000000000000))))

(assert (=> b!58628 (arrayContainsKey!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) lt!23586 #b00000000000000000000000000000000)))

(declare-fun lt!23585 () Unit!1491)

(assert (=> b!58628 (= lt!23585 lt!23584)))

(declare-fun res!32653 () Bool)

(assert (=> b!58628 (= res!32653 (= (seekEntryOrOpen!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000) (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (mask!5896 newMap!16)) (Found!226 #b00000000000000000000000000000000)))))

(assert (=> b!58628 (=> (not res!32653) (not e!38567))))

(declare-fun b!58630 () Bool)

(declare-fun call!4307 () Bool)

(assert (=> b!58630 (= e!38567 call!4307)))

(declare-fun bm!4304 () Bool)

(assert (=> bm!4304 (= call!4307 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (mask!5896 newMap!16)))))

(declare-fun b!58631 () Bool)

(declare-fun e!38568 () Bool)

(assert (=> b!58631 (= e!38568 e!38566)))

(declare-fun c!7430 () Bool)

(assert (=> b!58631 (= c!7430 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!11197 () Bool)

(declare-fun res!32654 () Bool)

(assert (=> d!11197 (=> res!32654 e!38568)))

(assert (=> d!11197 (= res!32654 (bvsge #b00000000000000000000000000000000 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(assert (=> d!11197 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (mask!5896 newMap!16)) e!38568)))

(declare-fun b!58629 () Bool)

(assert (=> b!58629 (= e!38566 call!4307)))

(assert (= (and d!11197 (not res!32654)) b!58631))

(assert (= (and b!58631 c!7430) b!58628))

(assert (= (and b!58631 (not c!7430)) b!58629))

(assert (= (and b!58628 res!32653) b!58630))

(assert (= (or b!58630 b!58629) bm!4304))

(assert (=> b!58628 m!50329))

(declare-fun m!50395 () Bool)

(assert (=> b!58628 m!50395))

(declare-fun m!50397 () Bool)

(assert (=> b!58628 m!50397))

(assert (=> b!58628 m!50329))

(declare-fun m!50399 () Bool)

(assert (=> b!58628 m!50399))

(declare-fun m!50401 () Bool)

(assert (=> bm!4304 m!50401))

(assert (=> b!58631 m!50329))

(assert (=> b!58631 m!50329))

(assert (=> b!58631 m!50331))

(assert (=> d!10651 d!11197))

(assert (=> d!10651 d!10583))

(declare-fun b!58632 () Bool)

(declare-fun e!38570 () ListLongMap!1361)

(declare-fun call!4314 () ListLongMap!1361)

(assert (=> b!58632 (= e!38570 call!4314)))

(declare-fun b!58633 () Bool)

(declare-fun e!38578 () Bool)

(declare-fun lt!23592 () ListLongMap!1361)

(assert (=> b!58633 (= e!38578 (= (apply!65 lt!23592 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58634 () Bool)

(declare-fun e!38569 () Bool)

(assert (=> b!58634 (= e!38569 e!38578)))

(declare-fun res!32661 () Bool)

(declare-fun call!4308 () Bool)

(assert (=> b!58634 (= res!32661 call!4308)))

(assert (=> b!58634 (=> (not res!32661) (not e!38578))))

(declare-fun b!58635 () Bool)

(declare-fun e!38572 () Bool)

(declare-fun e!38573 () Bool)

(assert (=> b!58635 (= e!38572 e!38573)))

(declare-fun res!32656 () Bool)

(declare-fun call!4309 () Bool)

(assert (=> b!58635 (= res!32656 call!4309)))

(assert (=> b!58635 (=> (not res!32656) (not e!38573))))

(declare-fun b!58636 () Bool)

(declare-fun e!38580 () Bool)

(assert (=> b!58636 (= e!38580 (= (apply!65 lt!23592 (select (arr!1775 lt!23007) #b00000000000000000000000000000000)) (get!1060 (select (arr!1776 lt!23015) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58636 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2005 lt!23015)))))

(assert (=> b!58636 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 lt!23007)))))

(declare-fun b!58637 () Bool)

(declare-fun e!38575 () Bool)

(assert (=> b!58637 (= e!38575 (validKeyInArray!0 (select (arr!1775 lt!23007) #b00000000000000000000000000000000)))))

(declare-fun bm!4305 () Bool)

(declare-fun call!4310 () ListLongMap!1361)

(assert (=> bm!4305 (= call!4314 call!4310)))

(declare-fun d!11199 () Bool)

(declare-fun e!38577 () Bool)

(assert (=> d!11199 e!38577))

(declare-fun res!32658 () Bool)

(assert (=> d!11199 (=> (not res!32658) (not e!38577))))

(assert (=> d!11199 (= res!32658 (or (bvsge #b00000000000000000000000000000000 (size!2004 lt!23007)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 lt!23007)))))))

(declare-fun lt!23604 () ListLongMap!1361)

(assert (=> d!11199 (= lt!23592 lt!23604)))

(declare-fun lt!23591 () Unit!1491)

(declare-fun e!38579 () Unit!1491)

(assert (=> d!11199 (= lt!23591 e!38579)))

(declare-fun c!7435 () Bool)

(declare-fun e!38581 () Bool)

(assert (=> d!11199 (= c!7435 e!38581)))

(declare-fun res!32657 () Bool)

(assert (=> d!11199 (=> (not res!32657) (not e!38581))))

(assert (=> d!11199 (= res!32657 (bvslt #b00000000000000000000000000000000 (size!2004 lt!23007)))))

(declare-fun e!38576 () ListLongMap!1361)

(assert (=> d!11199 (= lt!23604 e!38576)))

(declare-fun c!7433 () Bool)

(assert (=> d!11199 (= c!7433 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11199 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11199 (= (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23592)))

(declare-fun b!58638 () Bool)

(declare-fun call!4312 () ListLongMap!1361)

(assert (=> b!58638 (= e!38576 (+!80 call!4312 (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun bm!4306 () Bool)

(declare-fun call!4311 () ListLongMap!1361)

(assert (=> bm!4306 (= call!4311 call!4312)))

(declare-fun b!58639 () Bool)

(assert (=> b!58639 (= e!38577 e!38572)))

(declare-fun c!7434 () Bool)

(assert (=> b!58639 (= c!7434 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!4313 () ListLongMap!1361)

(declare-fun bm!4307 () Bool)

(assert (=> bm!4307 (= call!4313 (getCurrentListMapNoExtraKeys!43 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58640 () Bool)

(declare-fun res!32663 () Bool)

(assert (=> b!58640 (=> (not res!32663) (not e!38577))))

(declare-fun e!38571 () Bool)

(assert (=> b!58640 (= res!32663 e!38571)))

(declare-fun res!32660 () Bool)

(assert (=> b!58640 (=> res!32660 e!38571)))

(assert (=> b!58640 (= res!32660 (not e!38575))))

(declare-fun res!32659 () Bool)

(assert (=> b!58640 (=> (not res!32659) (not e!38575))))

(assert (=> b!58640 (= res!32659 (bvslt #b00000000000000000000000000000000 (size!2004 lt!23007)))))

(declare-fun bm!4308 () Bool)

(assert (=> bm!4308 (= call!4309 (contains!679 lt!23592 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58641 () Bool)

(declare-fun lt!23602 () Unit!1491)

(assert (=> b!58641 (= e!38579 lt!23602)))

(declare-fun lt!23597 () ListLongMap!1361)

(assert (=> b!58641 (= lt!23597 (getCurrentListMapNoExtraKeys!43 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23594 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23594 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23605 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23605 (select (arr!1775 lt!23007) #b00000000000000000000000000000000))))

(declare-fun lt!23593 () Unit!1491)

(assert (=> b!58641 (= lt!23593 (addStillContains!41 lt!23597 lt!23594 (zeroValue!1940 newMap!16) lt!23605))))

(assert (=> b!58641 (contains!679 (+!80 lt!23597 (tuple2!2017 lt!23594 (zeroValue!1940 newMap!16))) lt!23605)))

(declare-fun lt!23600 () Unit!1491)

(assert (=> b!58641 (= lt!23600 lt!23593)))

(declare-fun lt!23596 () ListLongMap!1361)

(assert (=> b!58641 (= lt!23596 (getCurrentListMapNoExtraKeys!43 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23589 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23589 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23599 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23599 (select (arr!1775 lt!23007) #b00000000000000000000000000000000))))

(declare-fun lt!23590 () Unit!1491)

(assert (=> b!58641 (= lt!23590 (addApplyDifferent!41 lt!23596 lt!23589 (minValue!1940 newMap!16) lt!23599))))

(assert (=> b!58641 (= (apply!65 (+!80 lt!23596 (tuple2!2017 lt!23589 (minValue!1940 newMap!16))) lt!23599) (apply!65 lt!23596 lt!23599))))

(declare-fun lt!23606 () Unit!1491)

(assert (=> b!58641 (= lt!23606 lt!23590)))

(declare-fun lt!23598 () ListLongMap!1361)

(assert (=> b!58641 (= lt!23598 (getCurrentListMapNoExtraKeys!43 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23601 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23601 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23587 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23587 (select (arr!1775 lt!23007) #b00000000000000000000000000000000))))

(declare-fun lt!23607 () Unit!1491)

(assert (=> b!58641 (= lt!23607 (addApplyDifferent!41 lt!23598 lt!23601 (zeroValue!1940 newMap!16) lt!23587))))

(assert (=> b!58641 (= (apply!65 (+!80 lt!23598 (tuple2!2017 lt!23601 (zeroValue!1940 newMap!16))) lt!23587) (apply!65 lt!23598 lt!23587))))

(declare-fun lt!23603 () Unit!1491)

(assert (=> b!58641 (= lt!23603 lt!23607)))

(declare-fun lt!23608 () ListLongMap!1361)

(assert (=> b!58641 (= lt!23608 (getCurrentListMapNoExtraKeys!43 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23588 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23588 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23595 () (_ BitVec 64))

(assert (=> b!58641 (= lt!23595 (select (arr!1775 lt!23007) #b00000000000000000000000000000000))))

(assert (=> b!58641 (= lt!23602 (addApplyDifferent!41 lt!23608 lt!23588 (minValue!1940 newMap!16) lt!23595))))

(assert (=> b!58641 (= (apply!65 (+!80 lt!23608 (tuple2!2017 lt!23588 (minValue!1940 newMap!16))) lt!23595) (apply!65 lt!23608 lt!23595))))

(declare-fun b!58642 () Bool)

(assert (=> b!58642 (= e!38569 (not call!4308))))

(declare-fun b!58643 () Bool)

(assert (=> b!58643 (= e!38572 (not call!4309))))

(declare-fun bm!4309 () Bool)

(assert (=> bm!4309 (= call!4308 (contains!679 lt!23592 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!7432 () Bool)

(declare-fun bm!4310 () Bool)

(assert (=> bm!4310 (= call!4312 (+!80 (ite c!7433 call!4313 (ite c!7432 call!4310 call!4314)) (ite (or c!7433 c!7432) (tuple2!2017 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2017 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58644 () Bool)

(declare-fun e!38574 () ListLongMap!1361)

(assert (=> b!58644 (= e!38574 call!4311)))

(declare-fun b!58645 () Bool)

(assert (=> b!58645 (= e!38571 e!38580)))

(declare-fun res!32655 () Bool)

(assert (=> b!58645 (=> (not res!32655) (not e!38580))))

(assert (=> b!58645 (= res!32655 (contains!679 lt!23592 (select (arr!1775 lt!23007) #b00000000000000000000000000000000)))))

(assert (=> b!58645 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 lt!23007)))))

(declare-fun b!58646 () Bool)

(assert (=> b!58646 (= e!38576 e!38574)))

(assert (=> b!58646 (= c!7432 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4311 () Bool)

(assert (=> bm!4311 (= call!4310 call!4313)))

(declare-fun b!58647 () Bool)

(assert (=> b!58647 (= e!38573 (= (apply!65 lt!23592 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58648 () Bool)

(assert (=> b!58648 (= e!38570 call!4311)))

(declare-fun b!58649 () Bool)

(declare-fun c!7436 () Bool)

(assert (=> b!58649 (= c!7436 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58649 (= e!38574 e!38570)))

(declare-fun b!58650 () Bool)

(declare-fun res!32662 () Bool)

(assert (=> b!58650 (=> (not res!32662) (not e!38577))))

(assert (=> b!58650 (= res!32662 e!38569)))

(declare-fun c!7431 () Bool)

(assert (=> b!58650 (= c!7431 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58651 () Bool)

(declare-fun Unit!1549 () Unit!1491)

(assert (=> b!58651 (= e!38579 Unit!1549)))

(declare-fun b!58652 () Bool)

(assert (=> b!58652 (= e!38581 (validKeyInArray!0 (select (arr!1775 lt!23007) #b00000000000000000000000000000000)))))

(assert (= (and d!11199 c!7433) b!58638))

(assert (= (and d!11199 (not c!7433)) b!58646))

(assert (= (and b!58646 c!7432) b!58644))

(assert (= (and b!58646 (not c!7432)) b!58649))

(assert (= (and b!58649 c!7436) b!58648))

(assert (= (and b!58649 (not c!7436)) b!58632))

(assert (= (or b!58648 b!58632) bm!4305))

(assert (= (or b!58644 bm!4305) bm!4311))

(assert (= (or b!58644 b!58648) bm!4306))

(assert (= (or b!58638 bm!4311) bm!4307))

(assert (= (or b!58638 bm!4306) bm!4310))

(assert (= (and d!11199 res!32657) b!58652))

(assert (= (and d!11199 c!7435) b!58641))

(assert (= (and d!11199 (not c!7435)) b!58651))

(assert (= (and d!11199 res!32658) b!58640))

(assert (= (and b!58640 res!32659) b!58637))

(assert (= (and b!58640 (not res!32660)) b!58645))

(assert (= (and b!58645 res!32655) b!58636))

(assert (= (and b!58640 res!32663) b!58650))

(assert (= (and b!58650 c!7431) b!58634))

(assert (= (and b!58650 (not c!7431)) b!58642))

(assert (= (and b!58634 res!32661) b!58633))

(assert (= (or b!58634 b!58642) bm!4309))

(assert (= (and b!58650 res!32662) b!58639))

(assert (= (and b!58639 c!7434) b!58635))

(assert (= (and b!58639 (not c!7434)) b!58643))

(assert (= (and b!58635 res!32656) b!58647))

(assert (= (or b!58635 b!58643) bm!4308))

(declare-fun b_lambda!2549 () Bool)

(assert (=> (not b_lambda!2549) (not b!58636)))

(assert (=> b!58636 t!4753))

(declare-fun b_and!3539 () Bool)

(assert (= b_and!3535 (and (=> t!4753 result!2353) b_and!3539)))

(assert (=> b!58636 t!4755))

(declare-fun b_and!3541 () Bool)

(assert (= b_and!3537 (and (=> t!4755 result!2355) b_and!3541)))

(declare-fun m!50403 () Bool)

(assert (=> bm!4307 m!50403))

(declare-fun m!50405 () Bool)

(assert (=> b!58637 m!50405))

(assert (=> b!58637 m!50405))

(declare-fun m!50407 () Bool)

(assert (=> b!58637 m!50407))

(declare-fun m!50409 () Bool)

(assert (=> b!58647 m!50409))

(declare-fun m!50411 () Bool)

(assert (=> bm!4308 m!50411))

(declare-fun m!50413 () Bool)

(assert (=> bm!4309 m!50413))

(declare-fun m!50415 () Bool)

(assert (=> bm!4310 m!50415))

(declare-fun m!50417 () Bool)

(assert (=> b!58641 m!50417))

(declare-fun m!50419 () Bool)

(assert (=> b!58641 m!50419))

(declare-fun m!50421 () Bool)

(assert (=> b!58641 m!50421))

(declare-fun m!50423 () Bool)

(assert (=> b!58641 m!50423))

(declare-fun m!50425 () Bool)

(assert (=> b!58641 m!50425))

(declare-fun m!50427 () Bool)

(assert (=> b!58641 m!50427))

(declare-fun m!50429 () Bool)

(assert (=> b!58641 m!50429))

(declare-fun m!50431 () Bool)

(assert (=> b!58641 m!50431))

(declare-fun m!50433 () Bool)

(assert (=> b!58641 m!50433))

(declare-fun m!50435 () Bool)

(assert (=> b!58641 m!50435))

(declare-fun m!50437 () Bool)

(assert (=> b!58641 m!50437))

(assert (=> b!58641 m!50403))

(assert (=> b!58641 m!50435))

(declare-fun m!50439 () Bool)

(assert (=> b!58641 m!50439))

(assert (=> b!58641 m!50431))

(assert (=> b!58641 m!50427))

(assert (=> b!58641 m!50405))

(declare-fun m!50441 () Bool)

(assert (=> b!58641 m!50441))

(assert (=> b!58641 m!50423))

(declare-fun m!50443 () Bool)

(assert (=> b!58641 m!50443))

(declare-fun m!50445 () Bool)

(assert (=> b!58641 m!50445))

(assert (=> b!58636 m!50405))

(declare-fun m!50447 () Bool)

(assert (=> b!58636 m!50447))

(assert (=> b!58636 m!48339))

(declare-fun m!50449 () Bool)

(assert (=> b!58636 m!50449))

(assert (=> b!58636 m!48339))

(assert (=> b!58636 m!50405))

(declare-fun m!50451 () Bool)

(assert (=> b!58636 m!50451))

(assert (=> b!58636 m!50447))

(declare-fun m!50453 () Bool)

(assert (=> b!58638 m!50453))

(declare-fun m!50455 () Bool)

(assert (=> b!58633 m!50455))

(assert (=> b!58652 m!50405))

(assert (=> b!58652 m!50405))

(assert (=> b!58652 m!50407))

(assert (=> d!11199 m!48289))

(assert (=> b!58645 m!50405))

(assert (=> b!58645 m!50405))

(declare-fun m!50457 () Bool)

(assert (=> b!58645 m!50457))

(assert (=> d!10651 d!11199))

(declare-fun d!11201 () Bool)

(declare-fun e!38582 () Bool)

(assert (=> d!11201 e!38582))

(declare-fun res!32664 () Bool)

(assert (=> d!11201 (=> res!32664 e!38582)))

(declare-fun lt!23610 () Bool)

(assert (=> d!11201 (= res!32664 (not lt!23610))))

(declare-fun lt!23612 () Bool)

(assert (=> d!11201 (= lt!23610 lt!23612)))

(declare-fun lt!23611 () Unit!1491)

(declare-fun e!38583 () Unit!1491)

(assert (=> d!11201 (= lt!23611 e!38583)))

(declare-fun c!7437 () Bool)

(assert (=> d!11201 (= c!7437 lt!23612)))

(assert (=> d!11201 (= lt!23612 (containsKey!127 (toList!696 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(assert (=> d!11201 (= (contains!679 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))) lt!23610)))

(declare-fun b!58653 () Bool)

(declare-fun lt!23609 () Unit!1491)

(assert (=> b!58653 (= e!38583 lt!23609)))

(assert (=> b!58653 (= lt!23609 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!696 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(assert (=> b!58653 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(declare-fun b!58654 () Bool)

(declare-fun Unit!1550 () Unit!1491)

(assert (=> b!58654 (= e!38583 Unit!1550)))

(declare-fun b!58655 () Bool)

(assert (=> b!58655 (= e!38582 (isDefined!76 (getValueByKey!123 (toList!696 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759))))))))

(assert (= (and d!11201 c!7437) b!58653))

(assert (= (and d!11201 (not c!7437)) b!58654))

(assert (= (and d!11201 (not res!32664)) b!58655))

(assert (=> d!11201 m!48669))

(declare-fun m!50459 () Bool)

(assert (=> d!11201 m!50459))

(assert (=> b!58653 m!48669))

(declare-fun m!50461 () Bool)

(assert (=> b!58653 m!50461))

(assert (=> b!58653 m!48669))

(declare-fun m!50463 () Bool)

(assert (=> b!58653 m!50463))

(assert (=> b!58653 m!50463))

(declare-fun m!50465 () Bool)

(assert (=> b!58653 m!50465))

(assert (=> b!58655 m!48669))

(assert (=> b!58655 m!50463))

(assert (=> b!58655 m!50463))

(assert (=> b!58655 m!50465))

(assert (=> d!10651 d!11201))

(declare-fun b!58656 () Bool)

(declare-fun e!38585 () Bool)

(declare-fun e!38587 () Bool)

(assert (=> b!58656 (= e!38585 e!38587)))

(declare-fun c!7438 () Bool)

(assert (=> b!58656 (= c!7438 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) lt!23017)))))

(declare-fun bm!4312 () Bool)

(declare-fun call!4315 () Bool)

(assert (=> bm!4312 (= call!4315 (arrayNoDuplicates!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) (bvadd lt!23017 #b00000000000000000000000000000001) (ite c!7438 (Cons!1424 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) lt!23017) lt!23008) lt!23008)))))

(declare-fun b!58657 () Bool)

(assert (=> b!58657 (= e!38587 call!4315)))

(declare-fun b!58658 () Bool)

(declare-fun e!38584 () Bool)

(assert (=> b!58658 (= e!38584 e!38585)))

(declare-fun res!32666 () Bool)

(assert (=> b!58658 (=> (not res!32666) (not e!38585))))

(declare-fun e!38586 () Bool)

(assert (=> b!58658 (= res!32666 (not e!38586))))

(declare-fun res!32667 () Bool)

(assert (=> b!58658 (=> (not res!32667) (not e!38586))))

(assert (=> b!58658 (= res!32667 (validKeyInArray!0 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) lt!23017)))))

(declare-fun b!58659 () Bool)

(assert (=> b!58659 (= e!38586 (contains!680 lt!23008 (select (arr!1775 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16)))) lt!23017)))))

(declare-fun d!11203 () Bool)

(declare-fun res!32665 () Bool)

(assert (=> d!11203 (=> res!32665 e!38584)))

(assert (=> d!11203 (= res!32665 (bvsge lt!23017 (size!2004 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))))))))

(assert (=> d!11203 (= (arrayNoDuplicates!0 (array!3708 (store (arr!1775 (_keys!3642 newMap!16)) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (select (arr!1775 (_keys!3642 (v!2368 (underlying!224 thiss!992)))) from!355)) (size!2004 (_keys!3642 newMap!16))) lt!23017 lt!23008) e!38584)))

(declare-fun b!58660 () Bool)

(assert (=> b!58660 (= e!38587 call!4315)))

(assert (= (and d!11203 (not res!32665)) b!58658))

(assert (= (and b!58658 res!32667) b!58659))

(assert (= (and b!58658 res!32666) b!58656))

(assert (= (and b!58656 c!7438) b!58660))

(assert (= (and b!58656 (not c!7438)) b!58657))

(assert (= (or b!58660 b!58657) bm!4312))

(declare-fun m!50467 () Bool)

(assert (=> b!58656 m!50467))

(assert (=> b!58656 m!50467))

(declare-fun m!50469 () Bool)

(assert (=> b!58656 m!50469))

(assert (=> bm!4312 m!50467))

(declare-fun m!50471 () Bool)

(assert (=> bm!4312 m!50471))

(assert (=> b!58658 m!50467))

(assert (=> b!58658 m!50467))

(assert (=> b!58658 m!50469))

(assert (=> b!58659 m!50467))

(assert (=> b!58659 m!50467))

(declare-fun m!50473 () Bool)

(assert (=> b!58659 m!50473))

(assert (=> d!10651 d!11203))

(declare-fun d!11205 () Bool)

(declare-fun e!38588 () Bool)

(assert (=> d!11205 e!38588))

(declare-fun res!32668 () Bool)

(assert (=> d!11205 (=> (not res!32668) (not e!38588))))

(assert (=> d!11205 (= res!32668 (and (bvsge (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) #b00000000000000000000000000000000) (bvslt (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (size!2004 lt!23007))))))

(declare-fun lt!23613 () Unit!1491)

(assert (=> d!11205 (= lt!23613 (choose!292 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!11205 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11205 (= (lemmaValidKeyInArrayIsInListMap!75 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)) (defaultEntry!2022 newMap!16)) lt!23613)))

(declare-fun b!58661 () Bool)

(assert (=> b!58661 (= e!38588 (contains!679 (getCurrentListMap!401 lt!23007 lt!23015 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1775 lt!23007) (ite c!7096 (index!3029 lt!22759) (index!3026 lt!22759)))))))

(assert (= (and d!11205 res!32668) b!58661))

(declare-fun m!50475 () Bool)

(assert (=> d!11205 m!50475))

(assert (=> d!11205 m!48289))

(assert (=> b!58661 m!48659))

(declare-fun m!50477 () Bool)

(assert (=> b!58661 m!50477))

(assert (=> b!58661 m!48659))

(assert (=> b!58661 m!50477))

(declare-fun m!50479 () Bool)

(assert (=> b!58661 m!50479))

(assert (=> d!10651 d!11205))

(declare-fun condMapEmpty!2861 () Bool)

(declare-fun mapDefault!2861 () ValueCell!852)

(assert (=> mapNonEmpty!2859 (= condMapEmpty!2861 (= mapRest!2859 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2861)))))

(declare-fun e!38590 () Bool)

(declare-fun mapRes!2861 () Bool)

(assert (=> mapNonEmpty!2859 (= tp!7971 (and e!38590 mapRes!2861))))

(declare-fun b!58663 () Bool)

(assert (=> b!58663 (= e!38590 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2861 () Bool)

(declare-fun tp!7973 () Bool)

(declare-fun e!38589 () Bool)

(assert (=> mapNonEmpty!2861 (= mapRes!2861 (and tp!7973 e!38589))))

(declare-fun mapValue!2861 () ValueCell!852)

(declare-fun mapKey!2861 () (_ BitVec 32))

(declare-fun mapRest!2861 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2861 (= mapRest!2859 (store mapRest!2861 mapKey!2861 mapValue!2861))))

(declare-fun b!58662 () Bool)

(assert (=> b!58662 (= e!38589 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2861 () Bool)

(assert (=> mapIsEmpty!2861 mapRes!2861))

(assert (= (and mapNonEmpty!2859 condMapEmpty!2861) mapIsEmpty!2861))

(assert (= (and mapNonEmpty!2859 (not condMapEmpty!2861)) mapNonEmpty!2861))

(assert (= (and mapNonEmpty!2861 ((_ is ValueCellFull!852) mapValue!2861)) b!58662))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!852) mapDefault!2861)) b!58663))

(declare-fun m!50481 () Bool)

(assert (=> mapNonEmpty!2861 m!50481))

(declare-fun condMapEmpty!2862 () Bool)

(declare-fun mapDefault!2862 () ValueCell!852)

(assert (=> mapNonEmpty!2860 (= condMapEmpty!2862 (= mapRest!2860 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2862)))))

(declare-fun e!38592 () Bool)

(declare-fun mapRes!2862 () Bool)

(assert (=> mapNonEmpty!2860 (= tp!7972 (and e!38592 mapRes!2862))))

(declare-fun b!58665 () Bool)

(assert (=> b!58665 (= e!38592 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2862 () Bool)

(declare-fun tp!7974 () Bool)

(declare-fun e!38591 () Bool)

(assert (=> mapNonEmpty!2862 (= mapRes!2862 (and tp!7974 e!38591))))

(declare-fun mapValue!2862 () ValueCell!852)

(declare-fun mapKey!2862 () (_ BitVec 32))

(declare-fun mapRest!2862 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2862 (= mapRest!2860 (store mapRest!2862 mapKey!2862 mapValue!2862))))

(declare-fun b!58664 () Bool)

(assert (=> b!58664 (= e!38591 tp_is_empty!2391)))

(declare-fun mapIsEmpty!2862 () Bool)

(assert (=> mapIsEmpty!2862 mapRes!2862))

(assert (= (and mapNonEmpty!2860 condMapEmpty!2862) mapIsEmpty!2862))

(assert (= (and mapNonEmpty!2860 (not condMapEmpty!2862)) mapNonEmpty!2862))

(assert (= (and mapNonEmpty!2862 ((_ is ValueCellFull!852) mapValue!2862)) b!58664))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!852) mapDefault!2862)) b!58665))

(declare-fun m!50483 () Bool)

(assert (=> mapNonEmpty!2862 m!50483))

(declare-fun b_lambda!2551 () Bool)

(assert (= b_lambda!2525 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2551)))

(declare-fun b_lambda!2553 () Bool)

(assert (= b_lambda!2545 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2553)))

(declare-fun b_lambda!2555 () Bool)

(assert (= b_lambda!2533 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2555)))

(declare-fun b_lambda!2557 () Bool)

(assert (= b_lambda!2543 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2557)))

(declare-fun b_lambda!2559 () Bool)

(assert (= b_lambda!2539 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2559)))

(declare-fun b_lambda!2561 () Bool)

(assert (= b_lambda!2531 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2561)))

(declare-fun b_lambda!2563 () Bool)

(assert (= b_lambda!2527 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2563)))

(declare-fun b_lambda!2565 () Bool)

(assert (= b_lambda!2549 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2565)))

(declare-fun b_lambda!2567 () Bool)

(assert (= b_lambda!2523 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2567)))

(declare-fun b_lambda!2569 () Bool)

(assert (= b_lambda!2529 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2569)))

(declare-fun b_lambda!2571 () Bool)

(assert (= b_lambda!2537 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2571)))

(declare-fun b_lambda!2573 () Bool)

(assert (= b_lambda!2541 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2573)))

(declare-fun b_lambda!2575 () Bool)

(assert (= b_lambda!2547 (or (and b!57147 b_free!1949 (= (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57148 b_free!1951) b_lambda!2575)))

(declare-fun b_lambda!2577 () Bool)

(assert (= b_lambda!2535 (or (and b!57147 b_free!1949) (and b!57148 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2368 (underlying!224 thiss!992))))) b_lambda!2577)))

(check-sat (not bm!4236) (not b!58307) (not b!58438) (not b!57948) (not b!57926) (not b!57940) (not mapNonEmpty!2861) (not b!58183) (not b!58251) (not b!58327) (not d!11065) (not d!10891) (not b_lambda!2569) (not b!58189) (not bm!4307) (not d!10925) (not b_lambda!2511) (not b!58641) (not bm!4228) (not b!58045) (not b!58062) (not b!58608) (not d!10857) (not d!10849) (not b_lambda!2519) (not bm!4277) (not d!10969) (not b!58054) (not b!58628) (not b!58348) (not bm!4284) (not b!57852) (not b_lambda!2555) (not d!10977) (not b_lambda!2517) (not b!58495) (not d!10797) (not d!11143) (not d!10901) (not b!57943) (not b!58485) (not b!58332) (not bm!4216) (not d!11187) (not b!57841) (not b!58170) (not b!58611) (not b!58051) (not d!11193) (not b!57980) (not b!58437) (not b!57908) (not d!10761) (not bm!4296) (not b!58515) (not b!58415) (not b_lambda!2495) (not b!58314) (not d!10985) (not d!10875) (not d!11181) (not d!10903) (not b!58292) (not b!58477) (not b!58396) (not b!58530) (not b!58342) (not b!57820) (not b!58645) (not b!57956) (not b!58172) (not b!58359) (not b!57924) (not d!10979) (not b!58077) (not d!10873) (not d!10915) (not d!10963) (not b!58506) (not d!10919) (not b!58072) (not d!10877) (not bm!4268) (not bm!4263) (not bm!4242) (not b!57987) (not b!58336) (not d!11013) (not b!58102) (not b!58018) (not d!10759) (not b!58063) (not d!11199) (not b!58123) (not d!11195) (not b!58357) (not b!58620) (not b!57834) (not d!11089) (not b!58428) (not b!58369) (not b!58364) (not d!11107) (not d!10785) (not d!10707) (not bm!4285) (not b!58014) (not bm!4278) (not d!10887) (not d!11055) (not b!58454) (not b!58001) (not d!10743) (not b!58010) (not b!58390) (not d!10973) (not b!58033) (not d!11157) (not bm!4250) (not d!11131) (not d!10863) (not b!58009) (not b!58066) (not bm!4235) (not b!58099) (not d!10853) (not d!10883) (not d!11115) (not b!58581) (not d!11087) (not b!58636) (not b!58460) (not b!58230) (not b_lambda!2521) (not b!57933) (not b!58242) (not b!57941) (not d!11149) (not b!57960) (not b!58306) (not b!58329) (not d!11009) (not d!10839) (not b!58034) (not b!58360) (not d!11139) (not b!58486) (not d!10801) (not b!58514) (not b!58427) (not b_lambda!2559) (not d!11189) (not b!58058) (not b!57915) (not b!57823) (not b!58025) (not b!58224) (not bm!4259) (not b!58363) (not d!10825) (not b!58469) (not b!58057) (not b!58006) (not bm!4210) (not b!58524) (not d!11103) (not bm!4286) (not b!58549) (not bm!4287) (not bm!4225) (not b!58395) (not b!58112) (not bm!4312) (not b!58464) (not bm!4273) (not b!58597) (not d!10837) (not b!58234) (not b!58075) (not b!58461) (not b!58588) (not b!57931) (not b!58478) (not b!58447) (not b!58484) (not b!57865) (not b!58040) (not b_lambda!2499) (not b!58567) (not b!58522) (not d!11067) (not d!11169) (not d!10895) (not mapNonEmpty!2862) (not b!57912) (not b!58002) (not b!58232) (not b!57861) (not b!58070) (not b!58168) (not d!10751) (not b!58274) (not b!58079) (not d!10999) (not b!58173) (not b!58616) (not b!58457) (not d!10807) (not d!11003) (not d!10745) (not b!58436) (not b!58591) (not b!57992) (not d!10813) (not d!10735) (not b_lambda!2557) (not d!10921) (not b!58028) (not d!10711) (not b!58158) (not b!58655) (not b!57939) (not b!57928) (not b!58564) (not bm!4309) (not b!57964) (not b!58493) (not bm!4304) (not b!58231) (not b!58269) (not b_lambda!2577) (not b!58468) (not b!58254) (not d!10791) (not b!58627) (not b!58162) (not b!58245) (not b!58180) (not b!58096) (not b!58031) (not bm!4233) (not d!11167) (not b!58412) (not d!11127) (not b!58268) (not b!58542) (not d!11083) (not d!10753) (not d!11059) (not bm!4302) (not b_lambda!2561) (not b!58249) (not b!58279) (not b!58038) (not b!58590) (not b!58333) (not b!58406) (not d!10947) (not d!11113) (not b!58521) (not b!58283) (not b!58383) (not b!58509) (not b!58422) (not d!11019) (not d!10881) (not b!57920) (not d!11037) (not b!58534) (not d!10939) (not d!10701) (not d!10993) (not d!10957) (not d!11061) (not d!10995) (not d!10975) (not b!58344) (not bm!4211) (not d!10741) tp_is_empty!2391 (not b!57824) (not b!58337) (not b!58378) (not d!10739) (not d!10987) (not b!58114) (not d!10703) (not d!11205) (not d!11035) (not d!10699) (not b!58661) (not b!58298) (not b!58056) (not b!58445) (not b!57832) (not b!57996) (not d!10859) (not b!58382) (not b!58653) (not d!10755) (not b!58175) (not d!10867) (not b!57932) (not d!10737) (not b!58078) (not b!58459) (not d!10727) (not d!10929) (not d!11173) (not bm!4217) (not b!58441) (not b!58004) (not bm!4241) (not b!57850) (not d!10833) (not b!58103) (not d!10787) (not b!58456) (not d!10923) (not b!58285) (not b!58271) (not bm!4261) (not b!58361) (not b!58084) (not b!58105) (not d!10793) (not b!58188) (not b!58404) (not bm!4271) (not b!58256) (not d!10757) (not b!58647) b_and!3541 (not b!58076) (not b!58305) (not bm!4295) (not b!57914) (not b!58334) (not bm!4247) (not b!58388) (not b!58430) (not b!57917) (not b!58423) (not d!10989) (not b!58450) (not d!10817) (not b!57899) (not b!58086) (not bm!4270) (not d!10991) (not b!58481) (not b!58113) (not b!58582) (not b_lambda!2553) (not d!11095) (not d!10961) (not bm!4292) (not d!11147) (not b!58397) (not bm!4300) (not b!58165) (not d!11005) (not bm!4234) (not b!58225) (not b!58652) (not b!57858) (not b!58293) (not b!58055) (not b!58638) (not b!58479) (not b!58340) (not d!10705) (not b!58536) (not d!10835) (not b!57923) (not b!58069) (not d!10845) (not b!58335) (not d!10945) (not b!58346) (not b!57988) (not b!58470) (not d!10831) (not b!58322) (not b!58350) (not b_lambda!2573) (not d!10949) (not b!58475) (not b!58151) (not b!58372) (not b!57951) (not d!10795) (not d!11101) (not b!58318) (not d!10697) (not b!58064) (not d!10971) (not d!11007) (not b!58633) (not b!58473) (not b!57860) (not d!10815) (not d!10823) b_and!3539 (not b!58466) (not d!10749) (not b!58300) (not d!10869) (not b!58128) (not b!58321) (not b!58553) (not d!11093) (not b!58462) (not d!11075) (not d!10729) (not b!58545) (not d!11027) (not bm!4214) (not d!11041) (not d!10847) (not d!10713) (not bm!4301) (not b_lambda!2563) (not b!57901) (not b!57874) (not d!10721) (not d!10789) (not b!58612) (not b!58261) (not d!11043) (not b!58227) (not b!58106) (not b!58535) (not b_lambda!2567) (not b!58374) (not b!58109) (not b!58500) (not b!57962) (not b!58320) (not d!10799) (not b!58578) (not b!58659) (not b!58223) (not d!10715) (not b!58082) (not b!58117) (not bm!4289) (not d!11119) (not b!58600) (not b!58508) (not b!58011) (not b!58433) (not b!57938) (not b!58613) (not b!58240) (not b!58325) (not b!58605) (not b!58050) (not d!10747) (not b!58631) (not b!57999) (not b!57985) (not d!11129) (not bm!4238) (not b!58637) (not b_lambda!2565) (not b!58343) (not d!10723) (not b!58233) (not b!58513) (not b!58074) (not b!57990) (not d!11031) (not d!11023) (not d!11097) (not d!11133) (not b!58379) (not bm!4251) (not b!58501) (not b!58541) (not b!58295) (not b!58622) (not b!58244) (not b!58503) (not b!58425) (not b_lambda!2513) (not b_next!1949) (not b!58579) (not bm!4215) (not b!58565) (not b!58529) (not b!57900) (not bm!4248) (not bm!4262) (not b!58349) (not b!58371) (not b!58326) (not b!58562) (not d!11137) (not b!58367) (not d!10941) (not b_next!1951) (not b!58177) (not d!10841) (not b!57863) (not d!10763) (not b!58275) (not bm!4281) (not d!10917) (not d!10997) (not b!58276) (not b!58391) (not b!57944) (not d!10733) (not b!58301) (not d!11177) (not d!10983) (not d!10827) (not b!57935) (not d!10865) (not b!58351) (not d!10821) (not b!58039) (not b!57994) (not b!57965) (not d!10783) (not b!58375) (not bm!4310) (not bm!4246) (not b!58403) (not b!58262) (not d!11201) (not b!57875) (not d!10819) (not d!11141) (not b!57868) (not b!58463) (not b!58220) (not b!58290) (not d!11159) (not b!57848) (not b!58187) (not d!11001) (not d!11151) (not d!11073) (not b!57829) (not b!58426) (not b!58095) (not b!58121) (not b!58419) (not b!58020) (not bm!4258) (not d!10811) (not b!58548) (not bm!4260) (not b!58352) (not b!58323) (not b!58107) (not b!57946) (not b!58489) (not b_lambda!2551) (not b!57922) (not d!10953) (not d!11015) (not bm!4299) (not b_lambda!2515) (not b!58527) (not d!10803) (not d!10933) (not b!58385) (not d!10911) (not b!58071) (not bm!4230) (not b!57833) (not b!58556) (not b!57916) (not d!10981) (not b!57843) (not b!58048) (not b!58263) (not b!58449) (not b!57837) (not d!10843) (not b!57953) (not bm!4229) (not b!57945) (not d!10951) (not b!58658) (not b_lambda!2571) (not d!10695) (not b_lambda!2575) (not d!11191) (not b!57998) (not bm!4308) (not b!58257) (not b!58059) (not b!57927) (not bm!4276) (not d!10905) (not b!58026) (not b!58182) (not b!57862) (not d!10879) (not b!58047) (not d!10829) (not bm!4269) (not b!58551) (not b!58248) (not bm!4245) (not b!58052) (not b!58088) (not b!58093) (not b!58569) (not b!58656))
(check-sat b_and!3539 b_and!3541 (not b_next!1949) (not b_next!1951))
