; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8424 () Bool)

(assert start!8424)

(declare-fun b!57037 () Bool)

(declare-fun b_free!1945 () Bool)

(declare-fun b_next!1945 () Bool)

(assert (=> b!57037 (= b_free!1945 (not b_next!1945))))

(declare-fun tp!7942 () Bool)

(declare-fun b_and!3433 () Bool)

(assert (=> b!57037 (= tp!7942 b_and!3433)))

(declare-fun b!57033 () Bool)

(declare-fun b_free!1947 () Bool)

(declare-fun b_next!1947 () Bool)

(assert (=> b!57033 (= b_free!1947 (not b_next!1947))))

(declare-fun tp!7939 () Bool)

(declare-fun b_and!3435 () Bool)

(assert (=> b!57033 (= tp!7939 b_and!3435)))

(declare-fun b!57021 () Bool)

(declare-fun res!31968 () Bool)

(declare-fun e!37590 () Bool)

(assert (=> b!57021 (=> (not res!31968) (not e!37590))))

(declare-fun from!355 () (_ BitVec 32))

(declare-datatypes ((V!2833 0))(
  ( (V!2834 (val!1239 Int)) )
))
(declare-datatypes ((array!3689 0))(
  ( (array!3690 (arr!1766 (Array (_ BitVec 32) (_ BitVec 64))) (size!1995 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!851 0))(
  ( (ValueCellFull!851 (v!2365 V!2833)) (EmptyCell!851) )
))
(declare-datatypes ((array!3691 0))(
  ( (array!3692 (arr!1767 (Array (_ BitVec 32) ValueCell!851)) (size!1996 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!610 0))(
  ( (LongMapFixedSize!611 (defaultEntry!2021 Int) (mask!5895 (_ BitVec 32)) (extraKeys!1912 (_ BitVec 32)) (zeroValue!1939 V!2833) (minValue!1939 V!2833) (_size!354 (_ BitVec 32)) (_keys!3641 array!3689) (_values!2004 array!3691) (_vacant!354 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!422 0))(
  ( (Cell!423 (v!2366 LongMapFixedSize!610)) )
))
(declare-datatypes ((LongMap!422 0))(
  ( (LongMap!423 (underlying!222 Cell!422)) )
))
(declare-fun thiss!992 () LongMap!422)

(assert (=> b!57021 (= res!31968 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57022 () Bool)

(declare-fun e!37591 () Bool)

(declare-fun e!37580 () Bool)

(assert (=> b!57022 (= e!37591 e!37580)))

(declare-fun b!57023 () Bool)

(declare-fun e!37589 () Bool)

(declare-fun tp_is_empty!2389 () Bool)

(assert (=> b!57023 (= e!37589 tp_is_empty!2389)))

(declare-fun b!57024 () Bool)

(declare-fun res!31971 () Bool)

(assert (=> b!57024 (=> (not res!31971) (not e!37590))))

(declare-fun newMap!16 () LongMapFixedSize!610)

(declare-fun valid!260 (LongMapFixedSize!610) Bool)

(assert (=> b!57024 (= res!31971 (valid!260 newMap!16))))

(declare-fun mapNonEmpty!2841 () Bool)

(declare-fun mapRes!2841 () Bool)

(declare-fun tp!7940 () Bool)

(assert (=> mapNonEmpty!2841 (= mapRes!2841 (and tp!7940 e!37589))))

(declare-fun mapKey!2841 () (_ BitVec 32))

(declare-fun mapRest!2842 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapValue!2842 () ValueCell!851)

(assert (=> mapNonEmpty!2841 (= (arr!1767 (_values!2004 newMap!16)) (store mapRest!2842 mapKey!2841 mapValue!2842))))

(declare-fun b!57025 () Bool)

(declare-fun e!37587 () Bool)

(assert (=> b!57025 (= e!37580 e!37587)))

(declare-fun b!57026 () Bool)

(declare-fun e!37592 () Bool)

(assert (=> b!57026 (= e!37590 e!37592)))

(declare-fun res!31972 () Bool)

(assert (=> b!57026 (=> (not res!31972) (not e!37592))))

(declare-datatypes ((tuple2!2008 0))(
  ( (tuple2!2009 (_1!1015 (_ BitVec 64)) (_2!1015 V!2833)) )
))
(declare-datatypes ((List!1419 0))(
  ( (Nil!1416) (Cons!1415 (h!1995 tuple2!2008) (t!4733 List!1419)) )
))
(declare-datatypes ((ListLongMap!1339 0))(
  ( (ListLongMap!1340 (toList!685 List!1419)) )
))
(declare-fun lt!22524 () ListLongMap!1339)

(declare-fun lt!22525 () ListLongMap!1339)

(assert (=> b!57026 (= res!31972 (and (= lt!22524 lt!22525) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1104 (LongMapFixedSize!610) ListLongMap!1339)

(assert (=> b!57026 (= lt!22525 (map!1104 newMap!16))))

(declare-fun getCurrentListMap!386 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) Int) ListLongMap!1339)

(assert (=> b!57026 (= lt!22524 (getCurrentListMap!386 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57027 () Bool)

(declare-fun e!37588 () Bool)

(assert (=> b!57027 (= e!37588 tp_is_empty!2389)))

(declare-fun b!57028 () Bool)

(declare-fun e!37579 () Bool)

(declare-fun e!37582 () Bool)

(declare-fun mapRes!2842 () Bool)

(assert (=> b!57028 (= e!37579 (and e!37582 mapRes!2842))))

(declare-fun condMapEmpty!2841 () Bool)

(declare-fun mapDefault!2841 () ValueCell!851)

(assert (=> b!57028 (= condMapEmpty!2841 (= (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2841)))))

(declare-fun mapNonEmpty!2842 () Bool)

(declare-fun tp!7941 () Bool)

(assert (=> mapNonEmpty!2842 (= mapRes!2842 (and tp!7941 e!37588))))

(declare-fun mapKey!2842 () (_ BitVec 32))

(declare-fun mapRest!2841 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapValue!2841 () ValueCell!851)

(assert (=> mapNonEmpty!2842 (= (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (store mapRest!2841 mapKey!2842 mapValue!2841))))

(declare-fun res!31970 () Bool)

(assert (=> start!8424 (=> (not res!31970) (not e!37590))))

(declare-fun valid!261 (LongMap!422) Bool)

(assert (=> start!8424 (= res!31970 (valid!261 thiss!992))))

(assert (=> start!8424 e!37590))

(assert (=> start!8424 e!37591))

(assert (=> start!8424 true))

(declare-fun e!37583 () Bool)

(assert (=> start!8424 e!37583))

(declare-fun b!57029 () Bool)

(declare-fun e!37593 () Bool)

(assert (=> b!57029 (= e!37593 (not (= (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5895 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57030 () Bool)

(declare-fun res!31969 () Bool)

(assert (=> b!57030 (=> (not res!31969) (not e!37590))))

(assert (=> b!57030 (= res!31969 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5895 newMap!16)) (_size!354 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57031 () Bool)

(declare-fun e!37585 () Bool)

(declare-fun e!37586 () Bool)

(assert (=> b!57031 (= e!37585 (and e!37586 mapRes!2841))))

(declare-fun condMapEmpty!2842 () Bool)

(declare-fun mapDefault!2842 () ValueCell!851)

(assert (=> b!57031 (= condMapEmpty!2842 (= (arr!1767 (_values!2004 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2842)))))

(declare-fun b!57032 () Bool)

(declare-datatypes ((Unit!1484 0))(
  ( (Unit!1485) )
))
(declare-fun e!37578 () Unit!1484)

(declare-fun Unit!1486 () Unit!1484)

(assert (=> b!57032 (= e!37578 Unit!1486)))

(declare-fun array_inv!1085 (array!3689) Bool)

(declare-fun array_inv!1086 (array!3691) Bool)

(assert (=> b!57033 (= e!37583 (and tp!7939 tp_is_empty!2389 (array_inv!1085 (_keys!3641 newMap!16)) (array_inv!1086 (_values!2004 newMap!16)) e!37585))))

(declare-fun b!57034 () Bool)

(assert (=> b!57034 (= e!37592 e!37593)))

(declare-fun res!31966 () Bool)

(assert (=> b!57034 (=> (not res!31966) (not e!37593))))

(declare-datatypes ((tuple2!2010 0))(
  ( (tuple2!2011 (_1!1016 Bool) (_2!1016 LongMapFixedSize!610)) )
))
(declare-fun lt!22527 () tuple2!2010)

(assert (=> b!57034 (= res!31966 (and (_1!1016 lt!22527) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!22529 () Unit!1484)

(assert (=> b!57034 (= lt!22529 e!37578)))

(declare-fun c!7017 () Bool)

(declare-fun contains!675 (ListLongMap!1339 (_ BitVec 64)) Bool)

(assert (=> b!57034 (= c!7017 (contains!675 lt!22525 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun update!85 (LongMapFixedSize!610 (_ BitVec 64) V!2833) tuple2!2010)

(declare-fun get!1066 (ValueCell!851 V!2833) V!2833)

(declare-fun dynLambda!303 (Int (_ BitVec 64)) V!2833)

(assert (=> b!57034 (= lt!22527 (update!85 newMap!16 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57035 () Bool)

(declare-fun Unit!1487 () Unit!1484)

(assert (=> b!57035 (= e!37578 Unit!1487)))

(declare-fun lt!22528 () Unit!1484)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!23 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) (_ BitVec 32) Int) Unit!1484)

(assert (=> b!57035 (= lt!22528 (lemmaListMapContainsThenArrayContainsFrom!23 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3689 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!57035 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!22523 () Unit!1484)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3689 (_ BitVec 32) (_ BitVec 32)) Unit!1484)

(assert (=> b!57035 (= lt!22523 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1420 0))(
  ( (Nil!1417) (Cons!1416 (h!1996 (_ BitVec 64)) (t!4734 List!1420)) )
))
(declare-fun arrayNoDuplicates!0 (array!3689 (_ BitVec 32) List!1420) Bool)

(assert (=> b!57035 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) from!355 Nil!1417)))

(declare-fun lt!22526 () Unit!1484)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3689 (_ BitVec 32) (_ BitVec 64) List!1420) Unit!1484)

(assert (=> b!57035 (= lt!22526 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417)))))

(assert (=> b!57035 false))

(declare-fun b!57036 () Bool)

(declare-fun res!31967 () Bool)

(assert (=> b!57036 (=> (not res!31967) (not e!37593))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!57036 (= res!31967 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992)))))))

(assert (=> b!57037 (= e!37587 (and tp!7942 tp_is_empty!2389 (array_inv!1085 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (array_inv!1086 (_values!2004 (v!2366 (underlying!222 thiss!992)))) e!37579))))

(declare-fun mapIsEmpty!2841 () Bool)

(assert (=> mapIsEmpty!2841 mapRes!2841))

(declare-fun b!57038 () Bool)

(assert (=> b!57038 (= e!37586 tp_is_empty!2389)))

(declare-fun mapIsEmpty!2842 () Bool)

(assert (=> mapIsEmpty!2842 mapRes!2842))

(declare-fun b!57039 () Bool)

(assert (=> b!57039 (= e!37582 tp_is_empty!2389)))

(assert (= (and start!8424 res!31970) b!57021))

(assert (= (and b!57021 res!31968) b!57024))

(assert (= (and b!57024 res!31971) b!57030))

(assert (= (and b!57030 res!31969) b!57026))

(assert (= (and b!57026 res!31972) b!57034))

(assert (= (and b!57034 c!7017) b!57035))

(assert (= (and b!57034 (not c!7017)) b!57032))

(assert (= (and b!57034 res!31966) b!57036))

(assert (= (and b!57036 res!31967) b!57029))

(assert (= (and b!57028 condMapEmpty!2841) mapIsEmpty!2842))

(assert (= (and b!57028 (not condMapEmpty!2841)) mapNonEmpty!2842))

(get-info :version)

(assert (= (and mapNonEmpty!2842 ((_ is ValueCellFull!851) mapValue!2841)) b!57027))

(assert (= (and b!57028 ((_ is ValueCellFull!851) mapDefault!2841)) b!57039))

(assert (= b!57037 b!57028))

(assert (= b!57025 b!57037))

(assert (= b!57022 b!57025))

(assert (= start!8424 b!57022))

(assert (= (and b!57031 condMapEmpty!2842) mapIsEmpty!2841))

(assert (= (and b!57031 (not condMapEmpty!2842)) mapNonEmpty!2841))

(assert (= (and mapNonEmpty!2841 ((_ is ValueCellFull!851) mapValue!2842)) b!57023))

(assert (= (and b!57031 ((_ is ValueCellFull!851) mapDefault!2842)) b!57038))

(assert (= b!57033 b!57031))

(assert (= start!8424 b!57033))

(declare-fun b_lambda!2489 () Bool)

(assert (=> (not b_lambda!2489) (not b!57034)))

(declare-fun t!4730 () Bool)

(declare-fun tb!1289 () Bool)

(assert (=> (and b!57037 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) t!4730) tb!1289))

(declare-fun result!2333 () Bool)

(assert (=> tb!1289 (= result!2333 tp_is_empty!2389)))

(assert (=> b!57034 t!4730))

(declare-fun b_and!3437 () Bool)

(assert (= b_and!3433 (and (=> t!4730 result!2333) b_and!3437)))

(declare-fun tb!1291 () Bool)

(declare-fun t!4732 () Bool)

(assert (=> (and b!57033 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) t!4732) tb!1291))

(declare-fun result!2337 () Bool)

(assert (= result!2337 result!2333))

(assert (=> b!57034 t!4732))

(declare-fun b_and!3439 () Bool)

(assert (= b_and!3435 (and (=> t!4732 result!2337) b_and!3439)))

(declare-fun m!47865 () Bool)

(assert (=> b!57037 m!47865))

(declare-fun m!47867 () Bool)

(assert (=> b!57037 m!47867))

(declare-fun m!47869 () Bool)

(assert (=> b!57034 m!47869))

(declare-fun m!47871 () Bool)

(assert (=> b!57034 m!47871))

(declare-fun m!47873 () Bool)

(assert (=> b!57034 m!47873))

(declare-fun m!47875 () Bool)

(assert (=> b!57034 m!47875))

(assert (=> b!57034 m!47871))

(assert (=> b!57034 m!47875))

(declare-fun m!47877 () Bool)

(assert (=> b!57034 m!47877))

(assert (=> b!57034 m!47875))

(assert (=> b!57034 m!47873))

(declare-fun m!47879 () Bool)

(assert (=> b!57034 m!47879))

(assert (=> b!57034 m!47869))

(declare-fun m!47881 () Bool)

(assert (=> b!57024 m!47881))

(declare-fun m!47883 () Bool)

(assert (=> mapNonEmpty!2841 m!47883))

(declare-fun m!47885 () Bool)

(assert (=> mapNonEmpty!2842 m!47885))

(assert (=> b!57026 m!47875))

(declare-fun m!47887 () Bool)

(assert (=> b!57026 m!47887))

(declare-fun m!47889 () Bool)

(assert (=> b!57026 m!47889))

(declare-fun m!47891 () Bool)

(assert (=> b!57035 m!47891))

(declare-fun m!47893 () Bool)

(assert (=> b!57035 m!47893))

(assert (=> b!57035 m!47875))

(declare-fun m!47895 () Bool)

(assert (=> b!57035 m!47895))

(assert (=> b!57035 m!47875))

(assert (=> b!57035 m!47875))

(declare-fun m!47897 () Bool)

(assert (=> b!57035 m!47897))

(assert (=> b!57035 m!47875))

(declare-fun m!47899 () Bool)

(assert (=> b!57035 m!47899))

(declare-fun m!47901 () Bool)

(assert (=> start!8424 m!47901))

(declare-fun m!47903 () Bool)

(assert (=> b!57033 m!47903))

(declare-fun m!47905 () Bool)

(assert (=> b!57033 m!47905))

(declare-fun m!47907 () Bool)

(assert (=> b!57036 m!47907))

(check-sat (not b!57035) (not b_next!1947) (not mapNonEmpty!2842) (not mapNonEmpty!2841) (not b_next!1945) (not b!57024) b_and!3437 (not start!8424) b_and!3439 (not b!57036) (not b!57026) (not b_lambda!2489) (not b!57034) tp_is_empty!2389 (not b!57037) (not b!57033))
(check-sat b_and!3437 b_and!3439 (not b_next!1945) (not b_next!1947))
(get-model)

(declare-fun b_lambda!2495 () Bool)

(assert (= b_lambda!2489 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2495)))

(check-sat (not b!57035) (not b_next!1947) (not mapNonEmpty!2842) (not b_lambda!2495) (not mapNonEmpty!2841) (not b_next!1945) (not b!57024) b_and!3437 (not start!8424) b_and!3439 (not b!57036) (not b!57026) (not b!57034) tp_is_empty!2389 (not b!57037) (not b!57033))
(check-sat b_and!3437 b_and!3439 (not b_next!1945) (not b_next!1947))
(get-model)

(declare-fun d!10515 () Bool)

(declare-fun e!37695 () Bool)

(assert (=> d!10515 e!37695))

(declare-fun res!32017 () Bool)

(assert (=> d!10515 (=> res!32017 e!37695)))

(declare-fun lt!22581 () Bool)

(assert (=> d!10515 (= res!32017 (not lt!22581))))

(declare-fun lt!22582 () Bool)

(assert (=> d!10515 (= lt!22581 lt!22582)))

(declare-fun lt!22583 () Unit!1484)

(declare-fun e!37694 () Unit!1484)

(assert (=> d!10515 (= lt!22583 e!37694)))

(declare-fun c!7026 () Bool)

(assert (=> d!10515 (= c!7026 lt!22582)))

(declare-fun containsKey!127 (List!1419 (_ BitVec 64)) Bool)

(assert (=> d!10515 (= lt!22582 (containsKey!127 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10515 (= (contains!675 lt!22525 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!22581)))

(declare-fun b!57166 () Bool)

(declare-fun lt!22580 () Unit!1484)

(assert (=> b!57166 (= e!37694 lt!22580)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!75 (List!1419 (_ BitVec 64)) Unit!1484)

(assert (=> b!57166 (= lt!22580 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-datatypes ((Option!130 0))(
  ( (Some!129 (v!2372 V!2833)) (None!128) )
))
(declare-fun isDefined!76 (Option!130) Bool)

(declare-fun getValueByKey!124 (List!1419 (_ BitVec 64)) Option!130)

(assert (=> b!57166 (isDefined!76 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57167 () Bool)

(declare-fun Unit!1491 () Unit!1484)

(assert (=> b!57167 (= e!37694 Unit!1491)))

(declare-fun b!57168 () Bool)

(assert (=> b!57168 (= e!37695 (isDefined!76 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10515 c!7026) b!57166))

(assert (= (and d!10515 (not c!7026)) b!57167))

(assert (= (and d!10515 (not res!32017)) b!57168))

(assert (=> d!10515 m!47875))

(declare-fun m!47997 () Bool)

(assert (=> d!10515 m!47997))

(assert (=> b!57166 m!47875))

(declare-fun m!47999 () Bool)

(assert (=> b!57166 m!47999))

(assert (=> b!57166 m!47875))

(declare-fun m!48001 () Bool)

(assert (=> b!57166 m!48001))

(assert (=> b!57166 m!48001))

(declare-fun m!48003 () Bool)

(assert (=> b!57166 m!48003))

(assert (=> b!57168 m!47875))

(assert (=> b!57168 m!48001))

(assert (=> b!57168 m!48001))

(assert (=> b!57168 m!48003))

(assert (=> b!57034 d!10515))

(declare-fun b!57253 () Bool)

(declare-fun e!37750 () Bool)

(declare-datatypes ((SeekEntryResult!220 0))(
  ( (MissingZero!220 (index!3002 (_ BitVec 32))) (Found!220 (index!3003 (_ BitVec 32))) (Intermediate!220 (undefined!1032 Bool) (index!3004 (_ BitVec 32)) (x!9852 (_ BitVec 32))) (Undefined!220) (MissingVacant!220 (index!3005 (_ BitVec 32))) )
))
(declare-fun lt!22653 () SeekEntryResult!220)

(assert (=> b!57253 (= e!37750 ((_ is Undefined!220) lt!22653))))

(declare-fun b!57254 () Bool)

(declare-fun e!37757 () tuple2!2010)

(declare-fun e!37743 () tuple2!2010)

(assert (=> b!57254 (= e!37757 e!37743)))

(declare-fun c!7060 () Bool)

(assert (=> b!57254 (= c!7060 (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4098 () Bool)

(declare-fun e!37742 () ListLongMap!1339)

(declare-fun call!4113 () ListLongMap!1339)

(declare-fun c!7058 () Bool)

(declare-fun +!79 (ListLongMap!1339 tuple2!2008) ListLongMap!1339)

(assert (=> bm!4098 (= call!4113 (+!79 e!37742 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7066 () Bool)

(assert (=> bm!4098 (= c!7066 c!7058)))

(declare-fun b!57255 () Bool)

(declare-fun lt!22643 () Unit!1484)

(declare-fun e!37751 () Unit!1484)

(assert (=> b!57255 (= lt!22643 e!37751)))

(declare-fun c!7065 () Bool)

(declare-fun call!4109 () Bool)

(assert (=> b!57255 (= c!7065 call!4109)))

(declare-fun e!37760 () tuple2!2010)

(assert (=> b!57255 (= e!37760 (tuple2!2011 false newMap!16))))

(declare-fun b!57256 () Bool)

(declare-fun e!37753 () Bool)

(declare-fun call!4116 () Bool)

(assert (=> b!57256 (= e!37753 (not call!4116))))

(declare-fun b!57257 () Bool)

(declare-fun e!37759 () ListLongMap!1339)

(assert (=> b!57257 (= e!37759 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57258 () Bool)

(declare-fun res!32053 () Bool)

(declare-fun call!4120 () Bool)

(assert (=> b!57258 (= res!32053 call!4120)))

(declare-fun e!37754 () Bool)

(assert (=> b!57258 (=> (not res!32053) (not e!37754))))

(declare-fun bm!4099 () Bool)

(declare-fun c!7067 () Bool)

(declare-fun c!7059 () Bool)

(assert (=> bm!4099 (= c!7067 c!7059)))

(assert (=> bm!4099 (= call!4109 (contains!675 e!37759 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57259 () Bool)

(declare-fun e!37755 () Bool)

(declare-fun e!37748 () Bool)

(assert (=> b!57259 (= e!37755 e!37748)))

(declare-fun res!32047 () Bool)

(declare-fun call!4117 () Bool)

(assert (=> b!57259 (= res!32047 call!4117)))

(assert (=> b!57259 (=> (not res!32047) (not e!37748))))

(declare-fun bm!4100 () Bool)

(declare-fun call!4119 () Bool)

(assert (=> bm!4100 (= call!4116 call!4119)))

(declare-fun b!57260 () Bool)

(assert (=> b!57260 (= e!37748 (not call!4116))))

(declare-fun b!57261 () Bool)

(assert (=> b!57261 (= e!37757 e!37760)))

(declare-fun lt!22638 () SeekEntryResult!220)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3689 (_ BitVec 32)) SeekEntryResult!220)

(assert (=> b!57261 (= lt!22638 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(assert (=> b!57261 (= c!7059 ((_ is Undefined!220) lt!22638))))

(declare-fun b!57262 () Bool)

(declare-fun res!32051 () Bool)

(assert (=> b!57262 (=> (not res!32051) (not e!37753))))

(assert (=> b!57262 (= res!32051 call!4117)))

(declare-fun e!37744 () Bool)

(assert (=> b!57262 (= e!37744 e!37753)))

(declare-fun bm!4101 () Bool)

(declare-fun call!4104 () Bool)

(assert (=> bm!4101 (= call!4117 call!4104)))

(declare-fun b!57263 () Bool)

(declare-fun e!37749 () Bool)

(declare-fun call!4111 () Bool)

(assert (=> b!57263 (= e!37749 (not call!4111))))

(declare-fun bm!4102 () Bool)

(assert (=> bm!4102 (= call!4119 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57264 () Bool)

(declare-fun lt!22659 () Unit!1484)

(declare-fun lt!22644 () Unit!1484)

(assert (=> b!57264 (= lt!22659 lt!22644)))

(declare-fun call!4122 () ListLongMap!1339)

(assert (=> b!57264 (contains!675 call!4122 (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))

(declare-fun lt!22661 () array!3691)

(declare-fun lemmaValidKeyInArrayIsInListMap!74 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) Int) Unit!1484)

(assert (=> b!57264 (= lt!22644 (lemmaValidKeyInArrayIsInListMap!74 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (defaultEntry!2021 newMap!16)))))

(assert (=> b!57264 (= lt!22661 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))))

(declare-fun lt!22645 () Unit!1484)

(declare-fun lt!22655 () Unit!1484)

(assert (=> b!57264 (= lt!22645 lt!22655)))

(declare-fun call!4118 () ListLongMap!1339)

(assert (=> b!57264 (= call!4113 call!4118)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) (_ BitVec 64) V!2833 Int) Unit!1484)

(assert (=> b!57264 (= lt!22655 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22642 () Unit!1484)

(declare-fun e!37746 () Unit!1484)

(assert (=> b!57264 (= lt!22642 e!37746)))

(declare-fun c!7068 () Bool)

(assert (=> b!57264 (= c!7068 call!4109)))

(declare-fun e!37740 () tuple2!2010)

(assert (=> b!57264 (= e!37740 (tuple2!2011 true (LongMapFixedSize!611 (defaultEntry!2021 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (_size!354 newMap!16) (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (_vacant!354 newMap!16))))))

(declare-fun lt!22656 () (_ BitVec 32))

(declare-fun bm!4103 () Bool)

(assert (=> bm!4103 (= call!4122 (getCurrentListMap!386 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57265 () Bool)

(declare-fun lt!22660 () SeekEntryResult!220)

(assert (=> b!57265 (= e!37755 ((_ is Undefined!220) lt!22660))))

(declare-fun b!57266 () Bool)

(declare-fun res!32054 () Bool)

(declare-fun e!37741 () Bool)

(assert (=> b!57266 (=> (not res!32054) (not e!37741))))

(declare-fun call!4114 () Bool)

(assert (=> b!57266 (= res!32054 call!4114)))

(declare-fun e!37761 () Bool)

(assert (=> b!57266 (= e!37761 e!37741)))

(declare-fun bm!4104 () Bool)

(declare-fun call!4103 () ListLongMap!1339)

(assert (=> bm!4104 (= call!4103 (map!1104 newMap!16))))

(declare-fun b!57267 () Bool)

(declare-fun res!32046 () Bool)

(assert (=> b!57267 (= res!32046 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!22660)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57267 (=> (not res!32046) (not e!37748))))

(declare-fun bm!4105 () Bool)

(declare-fun call!4124 () Bool)

(assert (=> bm!4105 (= call!4120 call!4124)))

(declare-fun b!57268 () Bool)

(declare-fun res!32057 () Bool)

(assert (=> b!57268 (= res!32057 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!22653)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57268 (=> (not res!32057) (not e!37749))))

(declare-fun bm!4106 () Bool)

(declare-fun call!4108 () ListLongMap!1339)

(assert (=> bm!4106 (= call!4108 call!4113)))

(declare-fun b!57269 () Bool)

(declare-fun lt!22641 () Unit!1484)

(declare-fun lt!22649 () Unit!1484)

(assert (=> b!57269 (= lt!22641 lt!22649)))

(declare-fun call!4112 () ListLongMap!1339)

(assert (=> b!57269 (= call!4108 call!4112)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 V!2833 Int) Unit!1484)

(assert (=> b!57269 (= lt!22649 (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(assert (=> b!57269 (= lt!22656 (bvor (extraKeys!1912 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!57269 (= e!37743 (tuple2!2011 true (LongMapFixedSize!611 (defaultEntry!2021 newMap!16) (mask!5895 newMap!16) (bvor (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!354 newMap!16) (_keys!3641 newMap!16) (_values!2004 newMap!16) (_vacant!354 newMap!16))))))

(declare-fun bm!4107 () Bool)

(declare-fun call!4121 () SeekEntryResult!220)

(declare-fun call!4102 () SeekEntryResult!220)

(assert (=> bm!4107 (= call!4121 call!4102)))

(declare-fun bm!4108 () Bool)

(declare-fun call!4107 () Unit!1484)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) Int) Unit!1484)

(assert (=> bm!4108 (= call!4107 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(declare-fun b!57270 () Bool)

(declare-fun c!7061 () Bool)

(assert (=> b!57270 (= c!7061 ((_ is MissingVacant!220) lt!22653))))

(assert (=> b!57270 (= e!37761 e!37750)))

(declare-fun bm!4109 () Bool)

(assert (=> bm!4109 (= call!4112 call!4122)))

(declare-fun b!57271 () Bool)

(declare-fun c!7063 () Bool)

(assert (=> b!57271 (= c!7063 ((_ is MissingVacant!220) lt!22638))))

(declare-fun e!37758 () tuple2!2010)

(assert (=> b!57271 (= e!37760 e!37758)))

(declare-fun b!57272 () Bool)

(declare-fun call!4101 () ListLongMap!1339)

(declare-fun e!37752 () Bool)

(assert (=> b!57272 (= e!37752 (= call!4101 (+!79 call!4103 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57273 () Bool)

(assert (=> b!57273 (= e!37750 e!37749)))

(declare-fun res!32050 () Bool)

(assert (=> b!57273 (= res!32050 call!4114)))

(assert (=> b!57273 (=> (not res!32050) (not e!37749))))

(declare-fun b!57274 () Bool)

(declare-fun e!37756 () Bool)

(assert (=> b!57274 (= e!37756 e!37752)))

(declare-fun res!32048 () Bool)

(assert (=> b!57274 (= res!32048 (contains!675 call!4101 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57274 (=> (not res!32048) (not e!37752))))

(declare-fun bm!4110 () Bool)

(declare-fun call!4123 () ListLongMap!1339)

(declare-fun call!4115 () ListLongMap!1339)

(assert (=> bm!4110 (= call!4123 call!4115)))

(declare-fun b!57275 () Bool)

(declare-fun lt!22664 () Unit!1484)

(declare-fun lt!22647 () Unit!1484)

(assert (=> b!57275 (= lt!22664 lt!22647)))

(assert (=> b!57275 (= call!4108 call!4123)))

(declare-fun lt!22652 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!14 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 V!2833 Int) Unit!1484)

(assert (=> b!57275 (= lt!22647 (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22652 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) (defaultEntry!2021 newMap!16)))))

(assert (=> b!57275 (= lt!22652 (bvor (extraKeys!1912 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!57275 (= e!37743 (tuple2!2011 true (LongMapFixedSize!611 (defaultEntry!2021 newMap!16) (mask!5895 newMap!16) (bvor (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) (_size!354 newMap!16) (_keys!3641 newMap!16) (_values!2004 newMap!16) (_vacant!354 newMap!16))))))

(declare-fun b!57276 () Bool)

(declare-fun Unit!1492 () Unit!1484)

(assert (=> b!57276 (= e!37751 Unit!1492)))

(declare-fun lt!22663 () Unit!1484)

(assert (=> b!57276 (= lt!22663 call!4107)))

(declare-fun lt!22648 () SeekEntryResult!220)

(declare-fun call!4105 () SeekEntryResult!220)

(assert (=> b!57276 (= lt!22648 call!4105)))

(declare-fun res!32055 () Bool)

(assert (=> b!57276 (= res!32055 ((_ is Found!220) lt!22648))))

(assert (=> b!57276 (=> (not res!32055) (not e!37754))))

(assert (=> b!57276 e!37754))

(declare-fun lt!22640 () Unit!1484)

(assert (=> b!57276 (= lt!22640 lt!22663)))

(assert (=> b!57276 false))

(declare-fun b!57277 () Bool)

(assert (=> b!57277 (= e!37741 (not call!4111))))

(declare-fun bm!4111 () Bool)

(assert (=> bm!4111 (= call!4118 call!4115)))

(declare-fun b!57278 () Bool)

(declare-fun res!32059 () Bool)

(assert (=> b!57278 (=> (not res!32059) (not e!37753))))

(assert (=> b!57278 (= res!32059 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!22660)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57279 () Bool)

(declare-fun res!32056 () Bool)

(assert (=> b!57279 (= res!32056 call!4104)))

(declare-fun e!37745 () Bool)

(assert (=> b!57279 (=> (not res!32056) (not e!37745))))

(declare-fun b!57280 () Bool)

(declare-fun lt!22646 () Unit!1484)

(assert (=> b!57280 (= e!37746 lt!22646)))

(assert (=> b!57280 (= lt!22646 call!4107)))

(declare-fun lt!22662 () SeekEntryResult!220)

(assert (=> b!57280 (= lt!22662 call!4121)))

(declare-fun res!32058 () Bool)

(assert (=> b!57280 (= res!32058 ((_ is Found!220) lt!22662))))

(assert (=> b!57280 (=> (not res!32058) (not e!37745))))

(assert (=> b!57280 e!37745))

(declare-fun b!57281 () Bool)

(assert (=> b!57281 (= e!37758 e!37740)))

(declare-fun c!7055 () Bool)

(assert (=> b!57281 (= c!7055 ((_ is MissingZero!220) lt!22638))))

(declare-fun call!4106 () Unit!1484)

(declare-fun bm!4112 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) Int) Unit!1484)

(assert (=> bm!4112 (= call!4106 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(declare-fun d!10517 () Bool)

(declare-fun e!37747 () Bool)

(assert (=> d!10517 e!37747))

(declare-fun res!32049 () Bool)

(assert (=> d!10517 (=> (not res!32049) (not e!37747))))

(declare-fun lt!22658 () tuple2!2010)

(assert (=> d!10517 (= res!32049 (valid!260 (_2!1016 lt!22658)))))

(assert (=> d!10517 (= lt!22658 e!37757)))

(assert (=> d!10517 (= c!7058 (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvneg (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10517 (valid!260 newMap!16)))

(assert (=> d!10517 (= (update!85 newMap!16 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!22658)))

(declare-fun b!57282 () Bool)

(assert (=> b!57282 (= e!37756 (= call!4101 call!4103))))

(declare-fun b!57283 () Bool)

(declare-fun c!7062 () Bool)

(assert (=> b!57283 (= c!7062 ((_ is MissingVacant!220) lt!22660))))

(assert (=> b!57283 (= e!37744 e!37755)))

(declare-fun b!57284 () Bool)

(declare-fun res!32052 () Bool)

(assert (=> b!57284 (=> (not res!32052) (not e!37741))))

(assert (=> b!57284 (= res!32052 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!22653)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57285 () Bool)

(declare-fun lt!22651 () Unit!1484)

(assert (=> b!57285 (= e!37751 lt!22651)))

(assert (=> b!57285 (= lt!22651 call!4106)))

(assert (=> b!57285 (= lt!22653 call!4105)))

(declare-fun c!7064 () Bool)

(assert (=> b!57285 (= c!7064 ((_ is MissingZero!220) lt!22653))))

(assert (=> b!57285 e!37761))

(declare-fun b!57286 () Bool)

(assert (=> b!57286 (= e!37759 call!4118)))

(declare-fun bm!4113 () Bool)

(assert (=> bm!4113 (= call!4115 (getCurrentListMap!386 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun bm!4114 () Bool)

(declare-fun c!7056 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4114 (= call!4124 (inRange!0 (ite c!7059 (ite c!7065 (index!3003 lt!22648) (ite c!7064 (index!3002 lt!22653) (index!3005 lt!22653))) (ite c!7068 (index!3003 lt!22662) (ite c!7056 (index!3002 lt!22660) (index!3005 lt!22660)))) (mask!5895 newMap!16)))))

(declare-fun b!57287 () Bool)

(declare-fun lt!22639 () tuple2!2010)

(assert (=> b!57287 (= e!37758 (tuple2!2011 (_1!1016 lt!22639) (_2!1016 lt!22639)))))

(declare-fun call!4110 () tuple2!2010)

(assert (=> b!57287 (= lt!22639 call!4110)))

(declare-fun b!57288 () Bool)

(assert (=> b!57288 (= e!37742 (ite c!7060 call!4112 call!4123))))

(declare-fun b!57289 () Bool)

(declare-fun Unit!1493 () Unit!1484)

(assert (=> b!57289 (= e!37746 Unit!1493)))

(declare-fun lt!22650 () Unit!1484)

(assert (=> b!57289 (= lt!22650 call!4106)))

(assert (=> b!57289 (= lt!22660 call!4121)))

(assert (=> b!57289 (= c!7056 ((_ is MissingZero!220) lt!22660))))

(assert (=> b!57289 e!37744))

(declare-fun lt!22657 () Unit!1484)

(assert (=> b!57289 (= lt!22657 lt!22650)))

(assert (=> b!57289 false))

(declare-fun bm!4115 () Bool)

(assert (=> bm!4115 (= call!4114 call!4120)))

(declare-fun b!57290 () Bool)

(assert (=> b!57290 (= e!37747 e!37756)))

(declare-fun c!7057 () Bool)

(assert (=> b!57290 (= c!7057 (_1!1016 lt!22658))))

(declare-fun bm!4116 () Bool)

(assert (=> bm!4116 (= call!4105 call!4102)))

(declare-fun bm!4117 () Bool)

(declare-fun updateHelperNewKey!14 (LongMapFixedSize!610 (_ BitVec 64) V!2833 (_ BitVec 32)) tuple2!2010)

(assert (=> bm!4117 (= call!4110 (updateHelperNewKey!14 newMap!16 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(declare-fun bm!4118 () Bool)

(assert (=> bm!4118 (= call!4102 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun bm!4119 () Bool)

(assert (=> bm!4119 (= call!4101 (map!1104 (_2!1016 lt!22658)))))

(declare-fun bm!4120 () Bool)

(assert (=> bm!4120 (= call!4104 call!4124)))

(declare-fun b!57291 () Bool)

(declare-fun lt!22654 () tuple2!2010)

(assert (=> b!57291 (= lt!22654 call!4110)))

(assert (=> b!57291 (= e!37740 (tuple2!2011 (_1!1016 lt!22654) (_2!1016 lt!22654)))))

(declare-fun b!57292 () Bool)

(assert (=> b!57292 (= e!37742 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57293 () Bool)

(assert (=> b!57293 (= e!37745 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22662)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun bm!4121 () Bool)

(assert (=> bm!4121 (= call!4111 call!4119)))

(declare-fun b!57294 () Bool)

(assert (=> b!57294 (= e!37754 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22648)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10517 c!7058) b!57254))

(assert (= (and d!10517 (not c!7058)) b!57261))

(assert (= (and b!57254 c!7060) b!57275))

(assert (= (and b!57254 (not c!7060)) b!57269))

(assert (= (or b!57275 b!57269) bm!4109))

(assert (= (or b!57275 b!57269) bm!4110))

(assert (= (or b!57275 b!57269) bm!4106))

(assert (= (and b!57261 c!7059) b!57255))

(assert (= (and b!57261 (not c!7059)) b!57271))

(assert (= (and b!57255 c!7065) b!57276))

(assert (= (and b!57255 (not c!7065)) b!57285))

(assert (= (and b!57276 res!32055) b!57258))

(assert (= (and b!57258 res!32053) b!57294))

(assert (= (and b!57285 c!7064) b!57266))

(assert (= (and b!57285 (not c!7064)) b!57270))

(assert (= (and b!57266 res!32054) b!57284))

(assert (= (and b!57284 res!32052) b!57277))

(assert (= (and b!57270 c!7061) b!57273))

(assert (= (and b!57270 (not c!7061)) b!57253))

(assert (= (and b!57273 res!32050) b!57268))

(assert (= (and b!57268 res!32057) b!57263))

(assert (= (or b!57266 b!57273) bm!4115))

(assert (= (or b!57277 b!57263) bm!4121))

(assert (= (or b!57258 bm!4115) bm!4105))

(assert (= (or b!57276 b!57285) bm!4116))

(assert (= (and b!57271 c!7063) b!57287))

(assert (= (and b!57271 (not c!7063)) b!57281))

(assert (= (and b!57281 c!7055) b!57291))

(assert (= (and b!57281 (not c!7055)) b!57264))

(assert (= (and b!57264 c!7068) b!57280))

(assert (= (and b!57264 (not c!7068)) b!57289))

(assert (= (and b!57280 res!32058) b!57279))

(assert (= (and b!57279 res!32056) b!57293))

(assert (= (and b!57289 c!7056) b!57262))

(assert (= (and b!57289 (not c!7056)) b!57283))

(assert (= (and b!57262 res!32051) b!57278))

(assert (= (and b!57278 res!32059) b!57256))

(assert (= (and b!57283 c!7062) b!57259))

(assert (= (and b!57283 (not c!7062)) b!57265))

(assert (= (and b!57259 res!32047) b!57267))

(assert (= (and b!57267 res!32046) b!57260))

(assert (= (or b!57262 b!57259) bm!4101))

(assert (= (or b!57256 b!57260) bm!4100))

(assert (= (or b!57279 bm!4101) bm!4120))

(assert (= (or b!57280 b!57289) bm!4107))

(assert (= (or b!57287 b!57291) bm!4117))

(assert (= (or b!57255 b!57264) bm!4111))

(assert (= (or bm!4105 bm!4120) bm!4114))

(assert (= (or bm!4121 bm!4100) bm!4102))

(assert (= (or b!57285 b!57289) bm!4112))

(assert (= (or b!57276 b!57280) bm!4108))

(assert (= (or bm!4116 bm!4107) bm!4118))

(assert (= (or b!57255 b!57264) bm!4099))

(assert (= (and bm!4099 c!7067) b!57286))

(assert (= (and bm!4099 (not c!7067)) b!57257))

(assert (= (or bm!4110 bm!4111) bm!4113))

(assert (= (or bm!4109 b!57264) bm!4103))

(assert (= (or bm!4106 b!57264) bm!4098))

(assert (= (and bm!4098 c!7066) b!57288))

(assert (= (and bm!4098 (not c!7066)) b!57292))

(assert (= (and d!10517 res!32049) b!57290))

(assert (= (and b!57290 c!7057) b!57274))

(assert (= (and b!57290 (not c!7057)) b!57282))

(assert (= (and b!57274 res!32048) b!57272))

(assert (= (or b!57272 b!57282) bm!4104))

(assert (= (or b!57274 b!57272 b!57282) bm!4119))

(assert (=> bm!4099 m!47875))

(declare-fun m!48005 () Bool)

(assert (=> bm!4099 m!48005))

(declare-fun m!48007 () Bool)

(assert (=> b!57272 m!48007))

(assert (=> bm!4112 m!47875))

(declare-fun m!48009 () Bool)

(assert (=> bm!4112 m!48009))

(assert (=> bm!4102 m!47875))

(declare-fun m!48011 () Bool)

(assert (=> bm!4102 m!48011))

(declare-fun m!48013 () Bool)

(assert (=> bm!4119 m!48013))

(declare-fun m!48015 () Bool)

(assert (=> b!57267 m!48015))

(declare-fun m!48017 () Bool)

(assert (=> b!57294 m!48017))

(declare-fun m!48019 () Bool)

(assert (=> b!57293 m!48019))

(assert (=> bm!4117 m!47875))

(assert (=> bm!4117 m!47873))

(declare-fun m!48021 () Bool)

(assert (=> bm!4117 m!48021))

(assert (=> bm!4104 m!47887))

(declare-fun m!48023 () Bool)

(assert (=> bm!4113 m!48023))

(declare-fun m!48025 () Bool)

(assert (=> bm!4113 m!48025))

(declare-fun m!48027 () Bool)

(assert (=> b!57292 m!48027))

(declare-fun m!48029 () Bool)

(assert (=> bm!4114 m!48029))

(assert (=> bm!4108 m!47875))

(declare-fun m!48031 () Bool)

(assert (=> bm!4108 m!48031))

(assert (=> b!57257 m!48027))

(declare-fun m!48033 () Bool)

(assert (=> d!10517 m!48033))

(assert (=> d!10517 m!47881))

(assert (=> b!57261 m!47875))

(declare-fun m!48035 () Bool)

(assert (=> b!57261 m!48035))

(declare-fun m!48037 () Bool)

(assert (=> bm!4098 m!48037))

(declare-fun m!48039 () Bool)

(assert (=> b!57278 m!48039))

(declare-fun m!48041 () Bool)

(assert (=> bm!4103 m!48041))

(declare-fun m!48043 () Bool)

(assert (=> b!57284 m!48043))

(assert (=> b!57275 m!47873))

(declare-fun m!48045 () Bool)

(assert (=> b!57275 m!48045))

(declare-fun m!48047 () Bool)

(assert (=> b!57268 m!48047))

(assert (=> b!57274 m!47875))

(declare-fun m!48049 () Bool)

(assert (=> b!57274 m!48049))

(assert (=> b!57269 m!47873))

(declare-fun m!48051 () Bool)

(assert (=> b!57269 m!48051))

(assert (=> bm!4118 m!47875))

(assert (=> bm!4118 m!48035))

(assert (=> b!57264 m!47875))

(assert (=> b!57264 m!47873))

(declare-fun m!48053 () Bool)

(assert (=> b!57264 m!48053))

(assert (=> b!57264 m!48023))

(declare-fun m!48055 () Bool)

(assert (=> b!57264 m!48055))

(declare-fun m!48057 () Bool)

(assert (=> b!57264 m!48057))

(declare-fun m!48059 () Bool)

(assert (=> b!57264 m!48059))

(assert (=> b!57264 m!48057))

(assert (=> b!57034 d!10517))

(declare-fun d!10519 () Bool)

(declare-fun c!7071 () Bool)

(assert (=> d!10519 (= c!7071 ((_ is ValueCellFull!851) (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!37764 () V!2833)

(assert (=> d!10519 (= (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!37764)))

(declare-fun b!57299 () Bool)

(declare-fun get!1067 (ValueCell!851 V!2833) V!2833)

(assert (=> b!57299 (= e!37764 (get!1067 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57300 () Bool)

(declare-fun get!1068 (ValueCell!851 V!2833) V!2833)

(assert (=> b!57300 (= e!37764 (get!1068 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10519 c!7071) b!57299))

(assert (= (and d!10519 (not c!7071)) b!57300))

(assert (=> b!57299 m!47869))

(assert (=> b!57299 m!47871))

(declare-fun m!48061 () Bool)

(assert (=> b!57299 m!48061))

(assert (=> b!57300 m!47869))

(assert (=> b!57300 m!47871))

(declare-fun m!48063 () Bool)

(assert (=> b!57300 m!48063))

(assert (=> b!57034 d!10519))

(declare-fun d!10521 () Bool)

(assert (=> d!10521 (= (map!1104 newMap!16) (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun bs!2476 () Bool)

(assert (= bs!2476 d!10521))

(assert (=> bs!2476 m!48027))

(assert (=> b!57026 d!10521))

(declare-fun b!57343 () Bool)

(declare-fun e!37798 () ListLongMap!1339)

(declare-fun call!4145 () ListLongMap!1339)

(assert (=> b!57343 (= e!37798 call!4145)))

(declare-fun call!4139 () ListLongMap!1339)

(declare-fun c!7088 () Bool)

(declare-fun call!4141 () ListLongMap!1339)

(declare-fun call!4142 () ListLongMap!1339)

(declare-fun bm!4136 () Bool)

(declare-fun c!7086 () Bool)

(declare-fun call!4143 () ListLongMap!1339)

(assert (=> bm!4136 (= call!4141 (+!79 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57344 () Bool)

(declare-fun e!37801 () ListLongMap!1339)

(assert (=> b!57344 (= e!37801 e!37798)))

(assert (=> b!57344 (= c!7088 (and (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4137 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!43 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) Int) ListLongMap!1339)

(assert (=> bm!4137 (= call!4139 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57345 () Bool)

(declare-fun e!37794 () Bool)

(declare-fun e!37791 () Bool)

(assert (=> b!57345 (= e!37794 e!37791)))

(declare-fun res!32083 () Bool)

(declare-fun call!4144 () Bool)

(assert (=> b!57345 (= res!32083 call!4144)))

(assert (=> b!57345 (=> (not res!32083) (not e!37791))))

(declare-fun b!57346 () Bool)

(declare-fun res!32080 () Bool)

(declare-fun e!37799 () Bool)

(assert (=> b!57346 (=> (not res!32080) (not e!37799))))

(declare-fun e!37802 () Bool)

(assert (=> b!57346 (= res!32080 e!37802)))

(declare-fun res!32079 () Bool)

(assert (=> b!57346 (=> res!32079 e!37802)))

(declare-fun e!37795 () Bool)

(assert (=> b!57346 (= res!32079 (not e!37795))))

(declare-fun res!32081 () Bool)

(assert (=> b!57346 (=> (not res!32081) (not e!37795))))

(assert (=> b!57346 (= res!32081 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun bm!4138 () Bool)

(declare-fun lt!22730 () ListLongMap!1339)

(assert (=> bm!4138 (= call!4144 (contains!675 lt!22730 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57347 () Bool)

(declare-fun e!37800 () Unit!1484)

(declare-fun lt!22720 () Unit!1484)

(assert (=> b!57347 (= e!37800 lt!22720)))

(declare-fun lt!22713 () ListLongMap!1339)

(assert (=> b!57347 (= lt!22713 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun lt!22718 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22718 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22724 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22724 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22716 () Unit!1484)

(declare-fun addStillContains!41 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> b!57347 (= lt!22716 (addStillContains!41 lt!22713 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22724))))

(assert (=> b!57347 (contains!675 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22724)))

(declare-fun lt!22728 () Unit!1484)

(assert (=> b!57347 (= lt!22728 lt!22716)))

(declare-fun lt!22722 () ListLongMap!1339)

(assert (=> b!57347 (= lt!22722 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun lt!22709 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22709 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22723 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22723 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22719 () Unit!1484)

(declare-fun addApplyDifferent!41 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> b!57347 (= lt!22719 (addApplyDifferent!41 lt!22722 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22723))))

(declare-fun apply!65 (ListLongMap!1339 (_ BitVec 64)) V!2833)

(assert (=> b!57347 (= (apply!65 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22723) (apply!65 lt!22722 lt!22723))))

(declare-fun lt!22726 () Unit!1484)

(assert (=> b!57347 (= lt!22726 lt!22719)))

(declare-fun lt!22711 () ListLongMap!1339)

(assert (=> b!57347 (= lt!22711 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun lt!22725 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22725 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22721 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22721 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22712 () Unit!1484)

(assert (=> b!57347 (= lt!22712 (addApplyDifferent!41 lt!22711 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22721))))

(assert (=> b!57347 (= (apply!65 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22721) (apply!65 lt!22711 lt!22721))))

(declare-fun lt!22710 () Unit!1484)

(assert (=> b!57347 (= lt!22710 lt!22712)))

(declare-fun lt!22729 () ListLongMap!1339)

(assert (=> b!57347 (= lt!22729 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun lt!22727 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22727 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22717 () (_ BitVec 64))

(assert (=> b!57347 (= lt!22717 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57347 (= lt!22720 (addApplyDifferent!41 lt!22729 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22717))))

(assert (=> b!57347 (= (apply!65 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22717) (apply!65 lt!22729 lt!22717))))

(declare-fun d!10523 () Bool)

(assert (=> d!10523 e!37799))

(declare-fun res!32086 () Bool)

(assert (=> d!10523 (=> (not res!32086) (not e!37799))))

(assert (=> d!10523 (= res!32086 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun lt!22714 () ListLongMap!1339)

(assert (=> d!10523 (= lt!22730 lt!22714)))

(declare-fun lt!22715 () Unit!1484)

(assert (=> d!10523 (= lt!22715 e!37800)))

(declare-fun c!7085 () Bool)

(declare-fun e!37797 () Bool)

(assert (=> d!10523 (= c!7085 e!37797)))

(declare-fun res!32078 () Bool)

(assert (=> d!10523 (=> (not res!32078) (not e!37797))))

(assert (=> d!10523 (= res!32078 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10523 (= lt!22714 e!37801)))

(assert (=> d!10523 (= c!7086 (and (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10523 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992))))))

(assert (=> d!10523 (= (getCurrentListMap!386 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) lt!22730)))

(declare-fun b!57348 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!57348 (= e!37797 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57349 () Bool)

(declare-fun e!37792 () Bool)

(assert (=> b!57349 (= e!37799 e!37792)))

(declare-fun c!7089 () Bool)

(assert (=> b!57349 (= c!7089 (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4139 () Bool)

(declare-fun call!4140 () Bool)

(assert (=> bm!4139 (= call!4140 (contains!675 lt!22730 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4140 () Bool)

(assert (=> bm!4140 (= call!4143 call!4139)))

(declare-fun b!57350 () Bool)

(declare-fun e!37796 () Bool)

(assert (=> b!57350 (= e!37792 e!37796)))

(declare-fun res!32082 () Bool)

(assert (=> b!57350 (= res!32082 call!4140)))

(assert (=> b!57350 (=> (not res!32082) (not e!37796))))

(declare-fun e!37793 () Bool)

(declare-fun b!57351 () Bool)

(assert (=> b!57351 (= e!37793 (= (apply!65 lt!22730 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57351 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> b!57351 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun bm!4141 () Bool)

(assert (=> bm!4141 (= call!4145 call!4141)))

(declare-fun b!57352 () Bool)

(assert (=> b!57352 (= e!37802 e!37793)))

(declare-fun res!32084 () Bool)

(assert (=> b!57352 (=> (not res!32084) (not e!37793))))

(assert (=> b!57352 (= res!32084 (contains!675 lt!22730 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57352 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57353 () Bool)

(assert (=> b!57353 (= e!37792 (not call!4140))))

(declare-fun b!57354 () Bool)

(assert (=> b!57354 (= e!37794 (not call!4144))))

(declare-fun b!57355 () Bool)

(declare-fun Unit!1494 () Unit!1484)

(assert (=> b!57355 (= e!37800 Unit!1494)))

(declare-fun b!57356 () Bool)

(declare-fun e!37803 () ListLongMap!1339)

(assert (=> b!57356 (= e!37803 call!4145)))

(declare-fun bm!4142 () Bool)

(assert (=> bm!4142 (= call!4142 call!4143)))

(declare-fun b!57357 () Bool)

(assert (=> b!57357 (= e!37801 (+!79 call!4141 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57358 () Bool)

(assert (=> b!57358 (= e!37803 call!4142)))

(declare-fun b!57359 () Bool)

(declare-fun c!7087 () Bool)

(assert (=> b!57359 (= c!7087 (and (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57359 (= e!37798 e!37803)))

(declare-fun b!57360 () Bool)

(declare-fun res!32085 () Bool)

(assert (=> b!57360 (=> (not res!32085) (not e!37799))))

(assert (=> b!57360 (= res!32085 e!37794)))

(declare-fun c!7084 () Bool)

(assert (=> b!57360 (= c!7084 (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57361 () Bool)

(assert (=> b!57361 (= e!37791 (= (apply!65 lt!22730 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57362 () Bool)

(assert (=> b!57362 (= e!37796 (= (apply!65 lt!22730 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57363 () Bool)

(assert (=> b!57363 (= e!37795 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!10523 c!7086) b!57357))

(assert (= (and d!10523 (not c!7086)) b!57344))

(assert (= (and b!57344 c!7088) b!57343))

(assert (= (and b!57344 (not c!7088)) b!57359))

(assert (= (and b!57359 c!7087) b!57356))

(assert (= (and b!57359 (not c!7087)) b!57358))

(assert (= (or b!57356 b!57358) bm!4142))

(assert (= (or b!57343 bm!4142) bm!4140))

(assert (= (or b!57343 b!57356) bm!4141))

(assert (= (or b!57357 bm!4140) bm!4137))

(assert (= (or b!57357 bm!4141) bm!4136))

(assert (= (and d!10523 res!32078) b!57348))

(assert (= (and d!10523 c!7085) b!57347))

(assert (= (and d!10523 (not c!7085)) b!57355))

(assert (= (and d!10523 res!32086) b!57346))

(assert (= (and b!57346 res!32081) b!57363))

(assert (= (and b!57346 (not res!32079)) b!57352))

(assert (= (and b!57352 res!32084) b!57351))

(assert (= (and b!57346 res!32080) b!57360))

(assert (= (and b!57360 c!7084) b!57345))

(assert (= (and b!57360 (not c!7084)) b!57354))

(assert (= (and b!57345 res!32083) b!57361))

(assert (= (or b!57345 b!57354) bm!4138))

(assert (= (and b!57360 res!32085) b!57349))

(assert (= (and b!57349 c!7089) b!57350))

(assert (= (and b!57349 (not c!7089)) b!57353))

(assert (= (and b!57350 res!32082) b!57362))

(assert (= (or b!57350 b!57353) bm!4139))

(declare-fun b_lambda!2497 () Bool)

(assert (=> (not b_lambda!2497) (not b!57351)))

(assert (=> b!57351 t!4730))

(declare-fun b_and!3457 () Bool)

(assert (= b_and!3437 (and (=> t!4730 result!2333) b_and!3457)))

(assert (=> b!57351 t!4732))

(declare-fun b_and!3459 () Bool)

(assert (= b_and!3439 (and (=> t!4732 result!2337) b_and!3459)))

(assert (=> d!10523 m!47907))

(declare-fun m!48065 () Bool)

(assert (=> bm!4139 m!48065))

(declare-fun m!48067 () Bool)

(assert (=> b!57357 m!48067))

(declare-fun m!48069 () Bool)

(assert (=> b!57351 m!48069))

(declare-fun m!48071 () Bool)

(assert (=> b!57351 m!48071))

(assert (=> b!57351 m!47871))

(assert (=> b!57351 m!48069))

(declare-fun m!48073 () Bool)

(assert (=> b!57351 m!48073))

(assert (=> b!57351 m!48071))

(assert (=> b!57351 m!47871))

(declare-fun m!48075 () Bool)

(assert (=> b!57351 m!48075))

(assert (=> b!57348 m!48069))

(assert (=> b!57348 m!48069))

(declare-fun m!48077 () Bool)

(assert (=> b!57348 m!48077))

(declare-fun m!48079 () Bool)

(assert (=> bm!4138 m!48079))

(declare-fun m!48081 () Bool)

(assert (=> bm!4136 m!48081))

(declare-fun m!48083 () Bool)

(assert (=> b!57361 m!48083))

(assert (=> b!57352 m!48069))

(assert (=> b!57352 m!48069))

(declare-fun m!48085 () Bool)

(assert (=> b!57352 m!48085))

(declare-fun m!48087 () Bool)

(assert (=> b!57347 m!48087))

(declare-fun m!48089 () Bool)

(assert (=> b!57347 m!48089))

(declare-fun m!48091 () Bool)

(assert (=> b!57347 m!48091))

(declare-fun m!48093 () Bool)

(assert (=> b!57347 m!48093))

(declare-fun m!48095 () Bool)

(assert (=> b!57347 m!48095))

(declare-fun m!48097 () Bool)

(assert (=> b!57347 m!48097))

(declare-fun m!48099 () Bool)

(assert (=> b!57347 m!48099))

(declare-fun m!48101 () Bool)

(assert (=> b!57347 m!48101))

(assert (=> b!57347 m!48087))

(assert (=> b!57347 m!48101))

(declare-fun m!48103 () Bool)

(assert (=> b!57347 m!48103))

(assert (=> b!57347 m!48069))

(declare-fun m!48105 () Bool)

(assert (=> b!57347 m!48105))

(declare-fun m!48107 () Bool)

(assert (=> b!57347 m!48107))

(declare-fun m!48109 () Bool)

(assert (=> b!57347 m!48109))

(assert (=> b!57347 m!48095))

(declare-fun m!48111 () Bool)

(assert (=> b!57347 m!48111))

(declare-fun m!48113 () Bool)

(assert (=> b!57347 m!48113))

(declare-fun m!48115 () Bool)

(assert (=> b!57347 m!48115))

(assert (=> b!57347 m!48099))

(declare-fun m!48117 () Bool)

(assert (=> b!57347 m!48117))

(assert (=> bm!4137 m!48107))

(declare-fun m!48119 () Bool)

(assert (=> b!57362 m!48119))

(assert (=> b!57363 m!48069))

(assert (=> b!57363 m!48069))

(assert (=> b!57363 m!48077))

(assert (=> b!57026 d!10523))

(declare-fun d!10525 () Bool)

(assert (=> d!10525 (not (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22733 () Unit!1484)

(declare-fun choose!68 (array!3689 (_ BitVec 32) (_ BitVec 64) List!1420) Unit!1484)

(assert (=> d!10525 (= lt!22733 (choose!68 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417)))))

(assert (=> d!10525 (bvslt (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10525 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417)) lt!22733)))

(declare-fun bs!2477 () Bool)

(assert (= bs!2477 d!10525))

(assert (=> bs!2477 m!47875))

(assert (=> bs!2477 m!47897))

(assert (=> bs!2477 m!47875))

(declare-fun m!48121 () Bool)

(assert (=> bs!2477 m!48121))

(assert (=> b!57035 d!10525))

(declare-fun d!10527 () Bool)

(assert (=> d!10527 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) from!355 Nil!1417)))

(declare-fun lt!22736 () Unit!1484)

(declare-fun choose!39 (array!3689 (_ BitVec 32) (_ BitVec 32)) Unit!1484)

(assert (=> d!10527 (= lt!22736 (choose!39 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!10527 (bvslt (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10527 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355) lt!22736)))

(declare-fun bs!2478 () Bool)

(assert (= bs!2478 d!10527))

(assert (=> bs!2478 m!47893))

(declare-fun m!48123 () Bool)

(assert (=> bs!2478 m!48123))

(assert (=> b!57035 d!10527))

(declare-fun d!10529 () Bool)

(declare-fun res!32091 () Bool)

(declare-fun e!37808 () Bool)

(assert (=> d!10529 (=> res!32091 e!37808)))

(assert (=> d!10529 (= res!32091 (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10529 (= (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!37808)))

(declare-fun b!57368 () Bool)

(declare-fun e!37809 () Bool)

(assert (=> b!57368 (= e!37808 e!37809)))

(declare-fun res!32092 () Bool)

(assert (=> b!57368 (=> (not res!32092) (not e!37809))))

(assert (=> b!57368 (= res!32092 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57369 () Bool)

(assert (=> b!57369 (= e!37809 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!10529 (not res!32091)) b!57368))

(assert (= (and b!57368 res!32092) b!57369))

(assert (=> d!10529 m!48069))

(assert (=> b!57369 m!47875))

(declare-fun m!48125 () Bool)

(assert (=> b!57369 m!48125))

(assert (=> b!57035 d!10529))

(declare-fun d!10531 () Bool)

(declare-fun e!37812 () Bool)

(assert (=> d!10531 e!37812))

(declare-fun c!7092 () Bool)

(assert (=> d!10531 (= c!7092 (and (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!22739 () Unit!1484)

(declare-fun choose!294 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) (_ BitVec 32) Int) Unit!1484)

(assert (=> d!10531 (= lt!22739 (choose!294 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(assert (=> d!10531 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992))))))

(assert (=> d!10531 (= (lemmaListMapContainsThenArrayContainsFrom!23 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) lt!22739)))

(declare-fun b!57374 () Bool)

(assert (=> b!57374 (= e!37812 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57375 () Bool)

(assert (=> b!57375 (= e!37812 (ite (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10531 c!7092) b!57374))

(assert (= (and d!10531 (not c!7092)) b!57375))

(assert (=> d!10531 m!47875))

(declare-fun m!48127 () Bool)

(assert (=> d!10531 m!48127))

(assert (=> d!10531 m!47907))

(assert (=> b!57374 m!47875))

(assert (=> b!57374 m!47897))

(assert (=> b!57035 d!10531))

(declare-fun d!10533 () Bool)

(declare-fun res!32099 () Bool)

(declare-fun e!37821 () Bool)

(assert (=> d!10533 (=> res!32099 e!37821)))

(assert (=> d!10533 (= res!32099 (bvsge from!355 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10533 (= (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) from!355 Nil!1417) e!37821)))

(declare-fun b!57386 () Bool)

(declare-fun e!37824 () Bool)

(declare-fun call!4148 () Bool)

(assert (=> b!57386 (= e!37824 call!4148)))

(declare-fun c!7095 () Bool)

(declare-fun bm!4145 () Bool)

(assert (=> bm!4145 (= call!4148 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)))))

(declare-fun b!57387 () Bool)

(declare-fun e!37822 () Bool)

(assert (=> b!57387 (= e!37821 e!37822)))

(declare-fun res!32100 () Bool)

(assert (=> b!57387 (=> (not res!32100) (not e!37822))))

(declare-fun e!37823 () Bool)

(assert (=> b!57387 (= res!32100 (not e!37823))))

(declare-fun res!32101 () Bool)

(assert (=> b!57387 (=> (not res!32101) (not e!37823))))

(assert (=> b!57387 (= res!32101 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57388 () Bool)

(assert (=> b!57388 (= e!37822 e!37824)))

(assert (=> b!57388 (= c!7095 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57389 () Bool)

(assert (=> b!57389 (= e!37824 call!4148)))

(declare-fun b!57390 () Bool)

(declare-fun contains!676 (List!1420 (_ BitVec 64)) Bool)

(assert (=> b!57390 (= e!37823 (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10533 (not res!32099)) b!57387))

(assert (= (and b!57387 res!32101) b!57390))

(assert (= (and b!57387 res!32100) b!57388))

(assert (= (and b!57388 c!7095) b!57389))

(assert (= (and b!57388 (not c!7095)) b!57386))

(assert (= (or b!57389 b!57386) bm!4145))

(assert (=> bm!4145 m!47875))

(declare-fun m!48129 () Bool)

(assert (=> bm!4145 m!48129))

(assert (=> b!57387 m!47875))

(assert (=> b!57387 m!47875))

(declare-fun m!48131 () Bool)

(assert (=> b!57387 m!48131))

(assert (=> b!57388 m!47875))

(assert (=> b!57388 m!47875))

(assert (=> b!57388 m!48131))

(assert (=> b!57390 m!47875))

(assert (=> b!57390 m!47875))

(declare-fun m!48133 () Bool)

(assert (=> b!57390 m!48133))

(assert (=> b!57035 d!10533))

(declare-fun d!10535 () Bool)

(assert (=> d!10535 (= (array_inv!1085 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvsge (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57037 d!10535))

(declare-fun d!10537 () Bool)

(assert (=> d!10537 (= (array_inv!1086 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvsge (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57037 d!10537))

(declare-fun d!10539 () Bool)

(assert (=> d!10539 (= (valid!261 thiss!992) (valid!260 (v!2366 (underlying!222 thiss!992))))))

(declare-fun bs!2479 () Bool)

(assert (= bs!2479 d!10539))

(declare-fun m!48135 () Bool)

(assert (=> bs!2479 m!48135))

(assert (=> start!8424 d!10539))

(declare-fun d!10541 () Bool)

(assert (=> d!10541 (= (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992)))) (and (or (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000001111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000011111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000001111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000011111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000001111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000011111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000001111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000011111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000001111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000011111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000001111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000011111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000001111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000011111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000001111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000011111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000111111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00001111111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00011111111111111111111111111111) (= (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!57036 d!10541))

(declare-fun d!10543 () Bool)

(assert (=> d!10543 (= (array_inv!1085 (_keys!3641 newMap!16)) (bvsge (size!1995 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57033 d!10543))

(declare-fun d!10545 () Bool)

(assert (=> d!10545 (= (array_inv!1086 (_values!2004 newMap!16)) (bvsge (size!1996 (_values!2004 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57033 d!10545))

(declare-fun d!10547 () Bool)

(declare-fun res!32108 () Bool)

(declare-fun e!37827 () Bool)

(assert (=> d!10547 (=> (not res!32108) (not e!37827))))

(declare-fun simpleValid!41 (LongMapFixedSize!610) Bool)

(assert (=> d!10547 (= res!32108 (simpleValid!41 newMap!16))))

(assert (=> d!10547 (= (valid!260 newMap!16) e!37827)))

(declare-fun b!57397 () Bool)

(declare-fun res!32109 () Bool)

(assert (=> b!57397 (=> (not res!32109) (not e!37827))))

(declare-fun arrayCountValidKeys!0 (array!3689 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!57397 (= res!32109 (= (arrayCountValidKeys!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (_size!354 newMap!16)))))

(declare-fun b!57398 () Bool)

(declare-fun res!32110 () Bool)

(assert (=> b!57398 (=> (not res!32110) (not e!37827))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3689 (_ BitVec 32)) Bool)

(assert (=> b!57398 (= res!32110 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!57399 () Bool)

(assert (=> b!57399 (= e!37827 (arrayNoDuplicates!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 Nil!1417))))

(assert (= (and d!10547 res!32108) b!57397))

(assert (= (and b!57397 res!32109) b!57398))

(assert (= (and b!57398 res!32110) b!57399))

(declare-fun m!48137 () Bool)

(assert (=> d!10547 m!48137))

(declare-fun m!48139 () Bool)

(assert (=> b!57397 m!48139))

(declare-fun m!48141 () Bool)

(assert (=> b!57398 m!48141))

(declare-fun m!48143 () Bool)

(assert (=> b!57399 m!48143))

(assert (=> b!57024 d!10547))

(declare-fun mapIsEmpty!2857 () Bool)

(declare-fun mapRes!2857 () Bool)

(assert (=> mapIsEmpty!2857 mapRes!2857))

(declare-fun mapNonEmpty!2857 () Bool)

(declare-fun tp!7969 () Bool)

(declare-fun e!37832 () Bool)

(assert (=> mapNonEmpty!2857 (= mapRes!2857 (and tp!7969 e!37832))))

(declare-fun mapValue!2857 () ValueCell!851)

(declare-fun mapKey!2857 () (_ BitVec 32))

(declare-fun mapRest!2857 () (Array (_ BitVec 32) ValueCell!851))

(assert (=> mapNonEmpty!2857 (= mapRest!2842 (store mapRest!2857 mapKey!2857 mapValue!2857))))

(declare-fun b!57407 () Bool)

(declare-fun e!37833 () Bool)

(assert (=> b!57407 (= e!37833 tp_is_empty!2389)))

(declare-fun condMapEmpty!2857 () Bool)

(declare-fun mapDefault!2857 () ValueCell!851)

(assert (=> mapNonEmpty!2841 (= condMapEmpty!2857 (= mapRest!2842 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2857)))))

(assert (=> mapNonEmpty!2841 (= tp!7940 (and e!37833 mapRes!2857))))

(declare-fun b!57406 () Bool)

(assert (=> b!57406 (= e!37832 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2841 condMapEmpty!2857) mapIsEmpty!2857))

(assert (= (and mapNonEmpty!2841 (not condMapEmpty!2857)) mapNonEmpty!2857))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!851) mapValue!2857)) b!57406))

(assert (= (and mapNonEmpty!2841 ((_ is ValueCellFull!851) mapDefault!2857)) b!57407))

(declare-fun m!48145 () Bool)

(assert (=> mapNonEmpty!2857 m!48145))

(declare-fun mapIsEmpty!2858 () Bool)

(declare-fun mapRes!2858 () Bool)

(assert (=> mapIsEmpty!2858 mapRes!2858))

(declare-fun mapNonEmpty!2858 () Bool)

(declare-fun tp!7970 () Bool)

(declare-fun e!37834 () Bool)

(assert (=> mapNonEmpty!2858 (= mapRes!2858 (and tp!7970 e!37834))))

(declare-fun mapRest!2858 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapValue!2858 () ValueCell!851)

(declare-fun mapKey!2858 () (_ BitVec 32))

(assert (=> mapNonEmpty!2858 (= mapRest!2841 (store mapRest!2858 mapKey!2858 mapValue!2858))))

(declare-fun b!57409 () Bool)

(declare-fun e!37835 () Bool)

(assert (=> b!57409 (= e!37835 tp_is_empty!2389)))

(declare-fun condMapEmpty!2858 () Bool)

(declare-fun mapDefault!2858 () ValueCell!851)

(assert (=> mapNonEmpty!2842 (= condMapEmpty!2858 (= mapRest!2841 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2858)))))

(assert (=> mapNonEmpty!2842 (= tp!7941 (and e!37835 mapRes!2858))))

(declare-fun b!57408 () Bool)

(assert (=> b!57408 (= e!37834 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2842 condMapEmpty!2858) mapIsEmpty!2858))

(assert (= (and mapNonEmpty!2842 (not condMapEmpty!2858)) mapNonEmpty!2858))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!851) mapValue!2858)) b!57408))

(assert (= (and mapNonEmpty!2842 ((_ is ValueCellFull!851) mapDefault!2858)) b!57409))

(declare-fun m!48147 () Bool)

(assert (=> mapNonEmpty!2858 m!48147))

(declare-fun b_lambda!2499 () Bool)

(assert (= b_lambda!2497 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2499)))

(check-sat (not b!57390) (not bm!4138) (not b!57363) (not d!10523) (not bm!4099) (not b!57168) (not d!10515) (not d!10525) (not d!10539) (not b!57399) (not b!57300) b_and!3459 (not bm!4108) (not bm!4098) (not b_lambda!2499) (not d!10521) (not b_next!1947) (not bm!4119) (not b!57348) (not b!57361) (not mapNonEmpty!2858) (not d!10517) (not b!57261) (not b!57369) (not bm!4104) tp_is_empty!2389 (not b!57352) (not b!57264) (not b!57272) (not d!10547) (not b_lambda!2495) (not bm!4113) (not b!57274) (not bm!4137) (not b!57269) (not b!57347) (not bm!4114) (not mapNonEmpty!2857) (not bm!4136) (not d!10527) (not bm!4117) (not b!57166) (not b!57357) (not bm!4118) (not bm!4103) (not b!57351) (not bm!4102) (not d!10531) (not b_next!1945) (not b!57387) (not bm!4139) (not b!57397) (not b!57374) (not bm!4112) (not b!57299) b_and!3457 (not b!57388) (not b!57292) (not b!57275) (not b!57398) (not b!57362) (not bm!4145) (not b!57257))
(check-sat b_and!3457 b_and!3459 (not b_next!1945) (not b_next!1947))
(get-model)

(declare-fun b!57419 () Bool)

(declare-fun res!32121 () Bool)

(declare-fun e!37838 () Bool)

(assert (=> b!57419 (=> (not res!32121) (not e!37838))))

(declare-fun size!2001 (LongMapFixedSize!610) (_ BitVec 32))

(assert (=> b!57419 (= res!32121 (bvsge (size!2001 newMap!16) (_size!354 newMap!16)))))

(declare-fun b!57418 () Bool)

(declare-fun res!32122 () Bool)

(assert (=> b!57418 (=> (not res!32122) (not e!37838))))

(assert (=> b!57418 (= res!32122 (and (= (size!1996 (_values!2004 newMap!16)) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001)) (= (size!1995 (_keys!3641 newMap!16)) (size!1996 (_values!2004 newMap!16))) (bvsge (_size!354 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!354 newMap!16) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun d!10549 () Bool)

(declare-fun res!32120 () Bool)

(assert (=> d!10549 (=> (not res!32120) (not e!37838))))

(assert (=> d!10549 (= res!32120 (validMask!0 (mask!5895 newMap!16)))))

(assert (=> d!10549 (= (simpleValid!41 newMap!16) e!37838)))

(declare-fun b!57420 () Bool)

(declare-fun res!32119 () Bool)

(assert (=> b!57420 (=> (not res!32119) (not e!37838))))

(assert (=> b!57420 (= res!32119 (= (size!2001 newMap!16) (bvadd (_size!354 newMap!16) (bvsdiv (bvadd (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!57421 () Bool)

(assert (=> b!57421 (= e!37838 (and (bvsge (extraKeys!1912 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1912 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!354 newMap!16) #b00000000000000000000000000000000)))))

(assert (= (and d!10549 res!32120) b!57418))

(assert (= (and b!57418 res!32122) b!57419))

(assert (= (and b!57419 res!32121) b!57420))

(assert (= (and b!57420 res!32119) b!57421))

(declare-fun m!48149 () Bool)

(assert (=> b!57419 m!48149))

(declare-fun m!48151 () Bool)

(assert (=> d!10549 m!48151))

(assert (=> b!57420 m!48149))

(assert (=> d!10547 d!10549))

(declare-fun d!10551 () Bool)

(declare-fun get!1069 (Option!130) V!2833)

(assert (=> d!10551 (= (apply!65 lt!22730 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2480 () Bool)

(assert (= bs!2480 d!10551))

(declare-fun m!48153 () Bool)

(assert (=> bs!2480 m!48153))

(assert (=> bs!2480 m!48153))

(declare-fun m!48155 () Bool)

(assert (=> bs!2480 m!48155))

(assert (=> b!57361 d!10551))

(declare-fun b!57434 () Bool)

(declare-fun lt!22746 () SeekEntryResult!220)

(declare-fun e!37846 () SeekEntryResult!220)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3689 (_ BitVec 32)) SeekEntryResult!220)

(assert (=> b!57434 (= e!37846 (seekKeyOrZeroReturnVacant!0 (x!9852 lt!22746) (index!3004 lt!22746) (index!3004 lt!22746) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!57435 () Bool)

(declare-fun e!37847 () SeekEntryResult!220)

(declare-fun e!37845 () SeekEntryResult!220)

(assert (=> b!57435 (= e!37847 e!37845)))

(declare-fun lt!22747 () (_ BitVec 64))

(assert (=> b!57435 (= lt!22747 (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!22746)))))

(declare-fun c!7103 () Bool)

(assert (=> b!57435 (= c!7103 (= lt!22747 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57436 () Bool)

(assert (=> b!57436 (= e!37845 (Found!220 (index!3004 lt!22746)))))

(declare-fun d!10553 () Bool)

(declare-fun lt!22748 () SeekEntryResult!220)

(assert (=> d!10553 (and (or ((_ is Undefined!220) lt!22748) (not ((_ is Found!220) lt!22748)) (and (bvsge (index!3003 lt!22748) #b00000000000000000000000000000000) (bvslt (index!3003 lt!22748) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!22748) ((_ is Found!220) lt!22748) (not ((_ is MissingZero!220) lt!22748)) (and (bvsge (index!3002 lt!22748) #b00000000000000000000000000000000) (bvslt (index!3002 lt!22748) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!22748) ((_ is Found!220) lt!22748) ((_ is MissingZero!220) lt!22748) (not ((_ is MissingVacant!220) lt!22748)) (and (bvsge (index!3005 lt!22748) #b00000000000000000000000000000000) (bvslt (index!3005 lt!22748) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!22748) (ite ((_ is Found!220) lt!22748) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22748)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite ((_ is MissingZero!220) lt!22748) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!22748)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!220) lt!22748) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!22748)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10553 (= lt!22748 e!37847)))

(declare-fun c!7102 () Bool)

(assert (=> d!10553 (= c!7102 (and ((_ is Intermediate!220) lt!22746) (undefined!1032 lt!22746)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3689 (_ BitVec 32)) SeekEntryResult!220)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!10553 (= lt!22746 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(assert (=> d!10553 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10553 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)) lt!22748)))

(declare-fun b!57437 () Bool)

(declare-fun c!7104 () Bool)

(assert (=> b!57437 (= c!7104 (= lt!22747 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57437 (= e!37845 e!37846)))

(declare-fun b!57438 () Bool)

(assert (=> b!57438 (= e!37847 Undefined!220)))

(declare-fun b!57439 () Bool)

(assert (=> b!57439 (= e!37846 (MissingZero!220 (index!3004 lt!22746)))))

(assert (= (and d!10553 c!7102) b!57438))

(assert (= (and d!10553 (not c!7102)) b!57435))

(assert (= (and b!57435 c!7103) b!57436))

(assert (= (and b!57435 (not c!7103)) b!57437))

(assert (= (and b!57437 c!7104) b!57439))

(assert (= (and b!57437 (not c!7104)) b!57434))

(assert (=> b!57434 m!47875))

(declare-fun m!48157 () Bool)

(assert (=> b!57434 m!48157))

(declare-fun m!48159 () Bool)

(assert (=> b!57435 m!48159))

(declare-fun m!48161 () Bool)

(assert (=> d!10553 m!48161))

(declare-fun m!48163 () Bool)

(assert (=> d!10553 m!48163))

(assert (=> d!10553 m!48151))

(assert (=> d!10553 m!47875))

(declare-fun m!48165 () Bool)

(assert (=> d!10553 m!48165))

(declare-fun m!48167 () Bool)

(assert (=> d!10553 m!48167))

(assert (=> d!10553 m!48165))

(assert (=> d!10553 m!47875))

(declare-fun m!48169 () Bool)

(assert (=> d!10553 m!48169))

(assert (=> b!57261 d!10553))

(declare-fun d!10555 () Bool)

(declare-fun e!37849 () Bool)

(assert (=> d!10555 e!37849))

(declare-fun res!32123 () Bool)

(assert (=> d!10555 (=> res!32123 e!37849)))

(declare-fun lt!22750 () Bool)

(assert (=> d!10555 (= res!32123 (not lt!22750))))

(declare-fun lt!22751 () Bool)

(assert (=> d!10555 (= lt!22750 lt!22751)))

(declare-fun lt!22752 () Unit!1484)

(declare-fun e!37848 () Unit!1484)

(assert (=> d!10555 (= lt!22752 e!37848)))

(declare-fun c!7105 () Bool)

(assert (=> d!10555 (= c!7105 lt!22751)))

(assert (=> d!10555 (= lt!22751 (containsKey!127 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10555 (= (contains!675 lt!22730 #b0000000000000000000000000000000000000000000000000000000000000000) lt!22750)))

(declare-fun b!57440 () Bool)

(declare-fun lt!22749 () Unit!1484)

(assert (=> b!57440 (= e!37848 lt!22749)))

(assert (=> b!57440 (= lt!22749 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57440 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57441 () Bool)

(declare-fun Unit!1495 () Unit!1484)

(assert (=> b!57441 (= e!37848 Unit!1495)))

(declare-fun b!57442 () Bool)

(assert (=> b!57442 (= e!37849 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10555 c!7105) b!57440))

(assert (= (and d!10555 (not c!7105)) b!57441))

(assert (= (and d!10555 (not res!32123)) b!57442))

(declare-fun m!48171 () Bool)

(assert (=> d!10555 m!48171))

(declare-fun m!48173 () Bool)

(assert (=> b!57440 m!48173))

(assert (=> b!57440 m!48153))

(assert (=> b!57440 m!48153))

(declare-fun m!48175 () Bool)

(assert (=> b!57440 m!48175))

(assert (=> b!57442 m!48153))

(assert (=> b!57442 m!48153))

(assert (=> b!57442 m!48175))

(assert (=> bm!4138 d!10555))

(declare-fun d!10557 () Bool)

(assert (=> d!10557 (= (get!1068 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57300 d!10557))

(declare-fun b!57451 () Bool)

(declare-fun e!37857 () Bool)

(declare-fun e!37858 () Bool)

(assert (=> b!57451 (= e!37857 e!37858)))

(declare-fun lt!22759 () (_ BitVec 64))

(assert (=> b!57451 (= lt!22759 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22761 () Unit!1484)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3689 (_ BitVec 64) (_ BitVec 32)) Unit!1484)

(assert (=> b!57451 (= lt!22761 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000))))

(assert (=> b!57451 (arrayContainsKey!0 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000)))

(declare-fun lt!22760 () Unit!1484)

(assert (=> b!57451 (= lt!22760 lt!22761)))

(declare-fun res!32128 () Bool)

(assert (=> b!57451 (= res!32128 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (_keys!3641 newMap!16) (mask!5895 newMap!16)) (Found!220 #b00000000000000000000000000000000)))))

(assert (=> b!57451 (=> (not res!32128) (not e!37858))))

(declare-fun d!10559 () Bool)

(declare-fun res!32129 () Bool)

(declare-fun e!37856 () Bool)

(assert (=> d!10559 (=> res!32129 e!37856)))

(assert (=> d!10559 (= res!32129 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10559 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 newMap!16) (mask!5895 newMap!16)) e!37856)))

(declare-fun b!57452 () Bool)

(declare-fun call!4151 () Bool)

(assert (=> b!57452 (= e!37858 call!4151)))

(declare-fun bm!4148 () Bool)

(assert (=> bm!4148 (= call!4151 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!57453 () Bool)

(assert (=> b!57453 (= e!37856 e!37857)))

(declare-fun c!7108 () Bool)

(assert (=> b!57453 (= c!7108 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57454 () Bool)

(assert (=> b!57454 (= e!37857 call!4151)))

(assert (= (and d!10559 (not res!32129)) b!57453))

(assert (= (and b!57453 c!7108) b!57451))

(assert (= (and b!57453 (not c!7108)) b!57454))

(assert (= (and b!57451 res!32128) b!57452))

(assert (= (or b!57452 b!57454) bm!4148))

(declare-fun m!48177 () Bool)

(assert (=> b!57451 m!48177))

(declare-fun m!48179 () Bool)

(assert (=> b!57451 m!48179))

(declare-fun m!48181 () Bool)

(assert (=> b!57451 m!48181))

(assert (=> b!57451 m!48177))

(declare-fun m!48183 () Bool)

(assert (=> b!57451 m!48183))

(declare-fun m!48185 () Bool)

(assert (=> bm!4148 m!48185))

(assert (=> b!57453 m!48177))

(assert (=> b!57453 m!48177))

(declare-fun m!48187 () Bool)

(assert (=> b!57453 m!48187))

(assert (=> b!57398 d!10559))

(declare-fun d!10561 () Bool)

(assert (=> d!10561 (= (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57363 d!10561))

(declare-fun d!10563 () Bool)

(declare-fun e!37860 () Bool)

(assert (=> d!10563 e!37860))

(declare-fun res!32130 () Bool)

(assert (=> d!10563 (=> res!32130 e!37860)))

(declare-fun lt!22763 () Bool)

(assert (=> d!10563 (= res!32130 (not lt!22763))))

(declare-fun lt!22764 () Bool)

(assert (=> d!10563 (= lt!22763 lt!22764)))

(declare-fun lt!22765 () Unit!1484)

(declare-fun e!37859 () Unit!1484)

(assert (=> d!10563 (= lt!22765 e!37859)))

(declare-fun c!7109 () Bool)

(assert (=> d!10563 (= c!7109 lt!22764)))

(assert (=> d!10563 (= lt!22764 (containsKey!127 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10563 (= (contains!675 e!37759 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!22763)))

(declare-fun b!57455 () Bool)

(declare-fun lt!22762 () Unit!1484)

(assert (=> b!57455 (= e!37859 lt!22762)))

(assert (=> b!57455 (= lt!22762 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57455 (isDefined!76 (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57456 () Bool)

(declare-fun Unit!1496 () Unit!1484)

(assert (=> b!57456 (= e!37859 Unit!1496)))

(declare-fun b!57457 () Bool)

(assert (=> b!57457 (= e!37860 (isDefined!76 (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10563 c!7109) b!57455))

(assert (= (and d!10563 (not c!7109)) b!57456))

(assert (= (and d!10563 (not res!32130)) b!57457))

(assert (=> d!10563 m!47875))

(declare-fun m!48189 () Bool)

(assert (=> d!10563 m!48189))

(assert (=> b!57455 m!47875))

(declare-fun m!48191 () Bool)

(assert (=> b!57455 m!48191))

(assert (=> b!57455 m!47875))

(declare-fun m!48193 () Bool)

(assert (=> b!57455 m!48193))

(assert (=> b!57455 m!48193))

(declare-fun m!48195 () Bool)

(assert (=> b!57455 m!48195))

(assert (=> b!57457 m!47875))

(assert (=> b!57457 m!48193))

(assert (=> b!57457 m!48193))

(assert (=> b!57457 m!48195))

(assert (=> bm!4099 d!10563))

(declare-fun b!57458 () Bool)

(declare-fun e!37868 () ListLongMap!1339)

(declare-fun call!4158 () ListLongMap!1339)

(assert (=> b!57458 (= e!37868 call!4158)))

(declare-fun call!4155 () ListLongMap!1339)

(declare-fun call!4156 () ListLongMap!1339)

(declare-fun c!7114 () Bool)

(declare-fun c!7112 () Bool)

(declare-fun call!4152 () ListLongMap!1339)

(declare-fun call!4154 () ListLongMap!1339)

(declare-fun bm!4149 () Bool)

(assert (=> bm!4149 (= call!4154 (+!79 (ite c!7112 call!4152 (ite c!7114 call!4156 call!4155)) (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!57459 () Bool)

(declare-fun e!37871 () ListLongMap!1339)

(assert (=> b!57459 (= e!37871 e!37868)))

(assert (=> b!57459 (= c!7114 (and (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4150 () Bool)

(assert (=> bm!4150 (= call!4152 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57460 () Bool)

(declare-fun e!37864 () Bool)

(declare-fun e!37861 () Bool)

(assert (=> b!57460 (= e!37864 e!37861)))

(declare-fun res!32136 () Bool)

(declare-fun call!4157 () Bool)

(assert (=> b!57460 (= res!32136 call!4157)))

(assert (=> b!57460 (=> (not res!32136) (not e!37861))))

(declare-fun b!57461 () Bool)

(declare-fun res!32133 () Bool)

(declare-fun e!37869 () Bool)

(assert (=> b!57461 (=> (not res!32133) (not e!37869))))

(declare-fun e!37872 () Bool)

(assert (=> b!57461 (= res!32133 e!37872)))

(declare-fun res!32132 () Bool)

(assert (=> b!57461 (=> res!32132 e!37872)))

(declare-fun e!37865 () Bool)

(assert (=> b!57461 (= res!32132 (not e!37865))))

(declare-fun res!32134 () Bool)

(assert (=> b!57461 (=> (not res!32134) (not e!37865))))

(assert (=> b!57461 (= res!32134 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4151 () Bool)

(declare-fun lt!22787 () ListLongMap!1339)

(assert (=> bm!4151 (= call!4157 (contains!675 lt!22787 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57462 () Bool)

(declare-fun e!37870 () Unit!1484)

(declare-fun lt!22777 () Unit!1484)

(assert (=> b!57462 (= e!37870 lt!22777)))

(declare-fun lt!22770 () ListLongMap!1339)

(assert (=> b!57462 (= lt!22770 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22775 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22775 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22781 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22781 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22773 () Unit!1484)

(assert (=> b!57462 (= lt!22773 (addStillContains!41 lt!22770 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22781))))

(assert (=> b!57462 (contains!675 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22781)))

(declare-fun lt!22785 () Unit!1484)

(assert (=> b!57462 (= lt!22785 lt!22773)))

(declare-fun lt!22779 () ListLongMap!1339)

(assert (=> b!57462 (= lt!22779 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22766 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22766 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22780 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22780 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22776 () Unit!1484)

(assert (=> b!57462 (= lt!22776 (addApplyDifferent!41 lt!22779 lt!22766 (minValue!1939 newMap!16) lt!22780))))

(assert (=> b!57462 (= (apply!65 (+!79 lt!22779 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) lt!22780) (apply!65 lt!22779 lt!22780))))

(declare-fun lt!22783 () Unit!1484)

(assert (=> b!57462 (= lt!22783 lt!22776)))

(declare-fun lt!22768 () ListLongMap!1339)

(assert (=> b!57462 (= lt!22768 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22782 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22782 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22778 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22778 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22769 () Unit!1484)

(assert (=> b!57462 (= lt!22769 (addApplyDifferent!41 lt!22768 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22778))))

(assert (=> b!57462 (= (apply!65 (+!79 lt!22768 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22778) (apply!65 lt!22768 lt!22778))))

(declare-fun lt!22767 () Unit!1484)

(assert (=> b!57462 (= lt!22767 lt!22769)))

(declare-fun lt!22786 () ListLongMap!1339)

(assert (=> b!57462 (= lt!22786 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22784 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22784 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22774 () (_ BitVec 64))

(assert (=> b!57462 (= lt!22774 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57462 (= lt!22777 (addApplyDifferent!41 lt!22786 lt!22784 (minValue!1939 newMap!16) lt!22774))))

(assert (=> b!57462 (= (apply!65 (+!79 lt!22786 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) lt!22774) (apply!65 lt!22786 lt!22774))))

(declare-fun d!10565 () Bool)

(assert (=> d!10565 e!37869))

(declare-fun res!32139 () Bool)

(assert (=> d!10565 (=> (not res!32139) (not e!37869))))

(assert (=> d!10565 (= res!32139 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!22771 () ListLongMap!1339)

(assert (=> d!10565 (= lt!22787 lt!22771)))

(declare-fun lt!22772 () Unit!1484)

(assert (=> d!10565 (= lt!22772 e!37870)))

(declare-fun c!7111 () Bool)

(declare-fun e!37867 () Bool)

(assert (=> d!10565 (= c!7111 e!37867)))

(declare-fun res!32131 () Bool)

(assert (=> d!10565 (=> (not res!32131) (not e!37867))))

(assert (=> d!10565 (= res!32131 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10565 (= lt!22771 e!37871)))

(assert (=> d!10565 (= c!7112 (and (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10565 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10565 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!22787)))

(declare-fun b!57463 () Bool)

(assert (=> b!57463 (= e!37867 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57464 () Bool)

(declare-fun e!37862 () Bool)

(assert (=> b!57464 (= e!37869 e!37862)))

(declare-fun c!7115 () Bool)

(assert (=> b!57464 (= c!7115 (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4152 () Bool)

(declare-fun call!4153 () Bool)

(assert (=> bm!4152 (= call!4153 (contains!675 lt!22787 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4153 () Bool)

(assert (=> bm!4153 (= call!4156 call!4152)))

(declare-fun b!57465 () Bool)

(declare-fun e!37866 () Bool)

(assert (=> b!57465 (= e!37862 e!37866)))

(declare-fun res!32135 () Bool)

(assert (=> b!57465 (= res!32135 call!4153)))

(assert (=> b!57465 (=> (not res!32135) (not e!37866))))

(declare-fun e!37863 () Bool)

(declare-fun b!57466 () Bool)

(assert (=> b!57466 (= e!37863 (= (apply!65 lt!22787 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57466 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))))))))

(assert (=> b!57466 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4154 () Bool)

(assert (=> bm!4154 (= call!4158 call!4154)))

(declare-fun b!57467 () Bool)

(assert (=> b!57467 (= e!37872 e!37863)))

(declare-fun res!32137 () Bool)

(assert (=> b!57467 (=> (not res!32137) (not e!37863))))

(assert (=> b!57467 (= res!32137 (contains!675 lt!22787 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57467 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57468 () Bool)

(assert (=> b!57468 (= e!37862 (not call!4153))))

(declare-fun b!57469 () Bool)

(assert (=> b!57469 (= e!37864 (not call!4157))))

(declare-fun b!57470 () Bool)

(declare-fun Unit!1497 () Unit!1484)

(assert (=> b!57470 (= e!37870 Unit!1497)))

(declare-fun b!57471 () Bool)

(declare-fun e!37873 () ListLongMap!1339)

(assert (=> b!57471 (= e!37873 call!4158)))

(declare-fun bm!4155 () Bool)

(assert (=> bm!4155 (= call!4155 call!4156)))

(declare-fun b!57472 () Bool)

(assert (=> b!57472 (= e!37871 (+!79 call!4154 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!57473 () Bool)

(assert (=> b!57473 (= e!37873 call!4155)))

(declare-fun c!7113 () Bool)

(declare-fun b!57474 () Bool)

(assert (=> b!57474 (= c!7113 (and (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57474 (= e!37868 e!37873)))

(declare-fun b!57475 () Bool)

(declare-fun res!32138 () Bool)

(assert (=> b!57475 (=> (not res!32138) (not e!37869))))

(assert (=> b!57475 (= res!32138 e!37864)))

(declare-fun c!7110 () Bool)

(assert (=> b!57475 (= c!7110 (not (= (bvand (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57476 () Bool)

(assert (=> b!57476 (= e!37861 (= (apply!65 lt!22787 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))

(declare-fun b!57477 () Bool)

(assert (=> b!57477 (= e!37866 (= (apply!65 lt!22787 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!57478 () Bool)

(assert (=> b!57478 (= e!37865 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10565 c!7112) b!57472))

(assert (= (and d!10565 (not c!7112)) b!57459))

(assert (= (and b!57459 c!7114) b!57458))

(assert (= (and b!57459 (not c!7114)) b!57474))

(assert (= (and b!57474 c!7113) b!57471))

(assert (= (and b!57474 (not c!7113)) b!57473))

(assert (= (or b!57471 b!57473) bm!4155))

(assert (= (or b!57458 bm!4155) bm!4153))

(assert (= (or b!57458 b!57471) bm!4154))

(assert (= (or b!57472 bm!4153) bm!4150))

(assert (= (or b!57472 bm!4154) bm!4149))

(assert (= (and d!10565 res!32131) b!57463))

(assert (= (and d!10565 c!7111) b!57462))

(assert (= (and d!10565 (not c!7111)) b!57470))

(assert (= (and d!10565 res!32139) b!57461))

(assert (= (and b!57461 res!32134) b!57478))

(assert (= (and b!57461 (not res!32132)) b!57467))

(assert (= (and b!57467 res!32137) b!57466))

(assert (= (and b!57461 res!32133) b!57475))

(assert (= (and b!57475 c!7110) b!57460))

(assert (= (and b!57475 (not c!7110)) b!57469))

(assert (= (and b!57460 res!32136) b!57476))

(assert (= (or b!57460 b!57469) bm!4151))

(assert (= (and b!57475 res!32138) b!57464))

(assert (= (and b!57464 c!7115) b!57465))

(assert (= (and b!57464 (not c!7115)) b!57468))

(assert (= (and b!57465 res!32135) b!57477))

(assert (= (or b!57465 b!57468) bm!4152))

(declare-fun b_lambda!2501 () Bool)

(assert (=> (not b_lambda!2501) (not b!57466)))

(declare-fun tb!1301 () Bool)

(declare-fun t!4745 () Bool)

(assert (=> (and b!57037 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16)) t!4745) tb!1301))

(declare-fun result!2353 () Bool)

(assert (=> tb!1301 (= result!2353 tp_is_empty!2389)))

(assert (=> b!57466 t!4745))

(declare-fun b_and!3461 () Bool)

(assert (= b_and!3457 (and (=> t!4745 result!2353) b_and!3461)))

(declare-fun t!4747 () Bool)

(declare-fun tb!1303 () Bool)

(assert (=> (and b!57033 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 newMap!16)) t!4747) tb!1303))

(declare-fun result!2355 () Bool)

(assert (= result!2355 result!2353))

(assert (=> b!57466 t!4747))

(declare-fun b_and!3463 () Bool)

(assert (= b_and!3459 (and (=> t!4747 result!2355) b_and!3463)))

(assert (=> d!10565 m!48151))

(declare-fun m!48197 () Bool)

(assert (=> bm!4152 m!48197))

(declare-fun m!48199 () Bool)

(assert (=> b!57472 m!48199))

(assert (=> b!57466 m!48177))

(declare-fun m!48201 () Bool)

(assert (=> b!57466 m!48201))

(declare-fun m!48203 () Bool)

(assert (=> b!57466 m!48203))

(assert (=> b!57466 m!48177))

(declare-fun m!48205 () Bool)

(assert (=> b!57466 m!48205))

(assert (=> b!57466 m!48201))

(assert (=> b!57466 m!48203))

(declare-fun m!48207 () Bool)

(assert (=> b!57466 m!48207))

(assert (=> b!57463 m!48177))

(assert (=> b!57463 m!48177))

(assert (=> b!57463 m!48187))

(declare-fun m!48209 () Bool)

(assert (=> bm!4151 m!48209))

(declare-fun m!48211 () Bool)

(assert (=> bm!4149 m!48211))

(declare-fun m!48213 () Bool)

(assert (=> b!57476 m!48213))

(assert (=> b!57467 m!48177))

(assert (=> b!57467 m!48177))

(declare-fun m!48215 () Bool)

(assert (=> b!57467 m!48215))

(declare-fun m!48217 () Bool)

(assert (=> b!57462 m!48217))

(declare-fun m!48219 () Bool)

(assert (=> b!57462 m!48219))

(declare-fun m!48221 () Bool)

(assert (=> b!57462 m!48221))

(declare-fun m!48223 () Bool)

(assert (=> b!57462 m!48223))

(declare-fun m!48225 () Bool)

(assert (=> b!57462 m!48225))

(declare-fun m!48227 () Bool)

(assert (=> b!57462 m!48227))

(declare-fun m!48229 () Bool)

(assert (=> b!57462 m!48229))

(declare-fun m!48231 () Bool)

(assert (=> b!57462 m!48231))

(assert (=> b!57462 m!48217))

(assert (=> b!57462 m!48231))

(declare-fun m!48233 () Bool)

(assert (=> b!57462 m!48233))

(assert (=> b!57462 m!48177))

(declare-fun m!48235 () Bool)

(assert (=> b!57462 m!48235))

(declare-fun m!48237 () Bool)

(assert (=> b!57462 m!48237))

(declare-fun m!48239 () Bool)

(assert (=> b!57462 m!48239))

(assert (=> b!57462 m!48225))

(declare-fun m!48241 () Bool)

(assert (=> b!57462 m!48241))

(declare-fun m!48243 () Bool)

(assert (=> b!57462 m!48243))

(declare-fun m!48245 () Bool)

(assert (=> b!57462 m!48245))

(assert (=> b!57462 m!48229))

(declare-fun m!48247 () Bool)

(assert (=> b!57462 m!48247))

(assert (=> bm!4150 m!48237))

(declare-fun m!48249 () Bool)

(assert (=> b!57477 m!48249))

(assert (=> b!57478 m!48177))

(assert (=> b!57478 m!48177))

(assert (=> b!57478 m!48187))

(assert (=> bm!4113 d!10565))

(declare-fun d!10567 () Bool)

(declare-fun res!32140 () Bool)

(declare-fun e!37874 () Bool)

(assert (=> d!10567 (=> res!32140 e!37874)))

(assert (=> d!10567 (= res!32140 (= (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10567 (= (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000) e!37874)))

(declare-fun b!57479 () Bool)

(declare-fun e!37875 () Bool)

(assert (=> b!57479 (= e!37874 e!37875)))

(declare-fun res!32141 () Bool)

(assert (=> b!57479 (=> (not res!32141) (not e!37875))))

(assert (=> b!57479 (= res!32141 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57480 () Bool)

(assert (=> b!57480 (= e!37875 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10567 (not res!32140)) b!57479))

(assert (= (and b!57479 res!32141) b!57480))

(assert (=> d!10567 m!48177))

(assert (=> b!57480 m!47875))

(declare-fun m!48251 () Bool)

(assert (=> b!57480 m!48251))

(assert (=> bm!4102 d!10567))

(declare-fun d!10569 () Bool)

(declare-fun e!37877 () Bool)

(assert (=> d!10569 e!37877))

(declare-fun res!32142 () Bool)

(assert (=> d!10569 (=> res!32142 e!37877)))

(declare-fun lt!22789 () Bool)

(assert (=> d!10569 (= res!32142 (not lt!22789))))

(declare-fun lt!22790 () Bool)

(assert (=> d!10569 (= lt!22789 lt!22790)))

(declare-fun lt!22791 () Unit!1484)

(declare-fun e!37876 () Unit!1484)

(assert (=> d!10569 (= lt!22791 e!37876)))

(declare-fun c!7116 () Bool)

(assert (=> d!10569 (= c!7116 lt!22790)))

(assert (=> d!10569 (= lt!22790 (containsKey!127 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10569 (= (contains!675 lt!22730 #b1000000000000000000000000000000000000000000000000000000000000000) lt!22789)))

(declare-fun b!57481 () Bool)

(declare-fun lt!22788 () Unit!1484)

(assert (=> b!57481 (= e!37876 lt!22788)))

(assert (=> b!57481 (= lt!22788 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57481 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57482 () Bool)

(declare-fun Unit!1498 () Unit!1484)

(assert (=> b!57482 (= e!37876 Unit!1498)))

(declare-fun b!57483 () Bool)

(assert (=> b!57483 (= e!37877 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10569 c!7116) b!57481))

(assert (= (and d!10569 (not c!7116)) b!57482))

(assert (= (and d!10569 (not res!32142)) b!57483))

(declare-fun m!48253 () Bool)

(assert (=> d!10569 m!48253))

(declare-fun m!48255 () Bool)

(assert (=> b!57481 m!48255))

(declare-fun m!48257 () Bool)

(assert (=> b!57481 m!48257))

(assert (=> b!57481 m!48257))

(declare-fun m!48259 () Bool)

(assert (=> b!57481 m!48259))

(assert (=> b!57483 m!48257))

(assert (=> b!57483 m!48257))

(assert (=> b!57483 m!48259))

(assert (=> bm!4139 d!10569))

(declare-fun call!4169 () SeekEntryResult!220)

(declare-fun bm!4164 () Bool)

(assert (=> bm!4164 (= call!4169 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!57518 () Bool)

(declare-fun e!37899 () Unit!1484)

(declare-fun Unit!1499 () Unit!1484)

(assert (=> b!57518 (= e!37899 Unit!1499)))

(declare-fun b!57519 () Bool)

(declare-fun e!37901 () Bool)

(declare-fun call!4168 () Bool)

(assert (=> b!57519 (= e!37901 (not call!4168))))

(declare-fun lt!22870 () tuple2!2010)

(declare-fun e!37896 () Bool)

(declare-fun b!57521 () Bool)

(assert (=> b!57521 (= e!37896 (= (map!1104 (_2!1016 lt!22870)) (+!79 (map!1104 newMap!16) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57522 () Bool)

(declare-fun e!37898 () Bool)

(declare-fun e!37900 () Bool)

(assert (=> b!57522 (= e!37898 e!37900)))

(declare-fun res!32169 () Bool)

(declare-fun call!4170 () Bool)

(assert (=> b!57522 (= res!32169 call!4170)))

(assert (=> b!57522 (=> (not res!32169) (not e!37900))))

(declare-fun b!57523 () Bool)

(declare-fun res!32168 () Bool)

(assert (=> b!57523 (=> (not res!32168) (not e!37896))))

(assert (=> b!57523 (= res!32168 (valid!260 (_2!1016 lt!22870)))))

(declare-fun b!57524 () Bool)

(declare-fun res!32166 () Bool)

(declare-fun call!4167 () Bool)

(assert (=> b!57524 (= res!32166 call!4167)))

(declare-fun e!37895 () Bool)

(assert (=> b!57524 (=> (not res!32166) (not e!37895))))

(declare-fun b!57525 () Bool)

(declare-fun c!7126 () Bool)

(declare-fun lt!22865 () SeekEntryResult!220)

(assert (=> b!57525 (= c!7126 ((_ is MissingVacant!220) lt!22865))))

(declare-fun e!37894 () Bool)

(assert (=> b!57525 (= e!37894 e!37898)))

(declare-fun b!57526 () Bool)

(declare-fun e!37897 () Unit!1484)

(declare-fun Unit!1500 () Unit!1484)

(assert (=> b!57526 (= e!37897 Unit!1500)))

(declare-fun lt!22861 () Unit!1484)

(assert (=> b!57526 (= lt!22861 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22852 () SeekEntryResult!220)

(assert (=> b!57526 (= lt!22852 call!4169)))

(declare-fun res!32165 () Bool)

(assert (=> b!57526 (= res!32165 ((_ is Found!220) lt!22852))))

(assert (=> b!57526 (=> (not res!32165) (not e!37895))))

(assert (=> b!57526 e!37895))

(declare-fun lt!22876 () Unit!1484)

(assert (=> b!57526 (= lt!22876 lt!22861)))

(assert (=> b!57526 false))

(declare-fun b!57527 () Bool)

(assert (=> b!57527 (= e!37895 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22852)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun d!10571 () Bool)

(assert (=> d!10571 e!37896))

(declare-fun res!32164 () Bool)

(assert (=> d!10571 (=> (not res!32164) (not e!37896))))

(assert (=> d!10571 (= res!32164 (_1!1016 lt!22870))))

(assert (=> d!10571 (= lt!22870 (tuple2!2011 true (LongMapFixedSize!611 (defaultEntry!2021 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (bvadd (_size!354 newMap!16) #b00000000000000000000000000000001) (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (_vacant!354 newMap!16))))))

(declare-fun lt!22856 () Unit!1484)

(declare-fun lt!22871 () Unit!1484)

(assert (=> d!10571 (= lt!22856 lt!22871)))

(declare-fun lt!22881 () array!3689)

(declare-fun lt!22868 () array!3691)

(assert (=> d!10571 (contains!675 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(assert (=> d!10571 (= lt!22871 (lemmaValidKeyInArrayIsInListMap!74 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10571 (= lt!22868 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))))

(assert (=> d!10571 (= lt!22881 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun lt!22877 () Unit!1484)

(declare-fun lt!22879 () Unit!1484)

(assert (=> d!10571 (= lt!22877 lt!22879)))

(declare-fun lt!22873 () array!3689)

(assert (=> d!10571 (= (arrayCountValidKeys!0 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3689 (_ BitVec 32)) Unit!1484)

(assert (=> d!10571 (= lt!22879 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(assert (=> d!10571 (= lt!22873 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun lt!22863 () Unit!1484)

(declare-fun lt!22858 () Unit!1484)

(assert (=> d!10571 (= lt!22863 lt!22858)))

(declare-fun lt!22872 () array!3689)

(assert (=> d!10571 (arrayContainsKey!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!10571 (= lt!22858 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(assert (=> d!10571 (= lt!22872 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun lt!22853 () Unit!1484)

(declare-fun lt!22875 () Unit!1484)

(assert (=> d!10571 (= lt!22853 lt!22875)))

(assert (=> d!10571 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!4 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) (_ BitVec 64) V!2833 Int) Unit!1484)

(assert (=> d!10571 (= lt!22875 (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22864 () Unit!1484)

(declare-fun lt!22854 () Unit!1484)

(assert (=> d!10571 (= lt!22864 lt!22854)))

(assert (=> d!10571 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (mask!5895 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3689 (_ BitVec 32) (_ BitVec 32)) Unit!1484)

(assert (=> d!10571 (= lt!22854 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (mask!5895 newMap!16)))))

(declare-fun lt!22880 () Unit!1484)

(declare-fun lt!22859 () Unit!1484)

(assert (=> d!10571 (= lt!22880 lt!22859)))

(assert (=> d!10571 (= (arrayCountValidKeys!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3689 (_ BitVec 32) (_ BitVec 64)) Unit!1484)

(assert (=> d!10571 (= lt!22859 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!22878 () Unit!1484)

(declare-fun lt!22874 () Unit!1484)

(assert (=> d!10571 (= lt!22878 lt!22874)))

(declare-fun lt!22869 () (_ BitVec 32))

(declare-fun lt!22857 () List!1420)

(assert (=> d!10571 (arrayNoDuplicates!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) lt!22869 lt!22857)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3689 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1420) Unit!1484)

(assert (=> d!10571 (= lt!22874 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) lt!22869 lt!22857))))

(assert (=> d!10571 (= lt!22857 Nil!1417)))

(assert (=> d!10571 (= lt!22869 #b00000000000000000000000000000000)))

(declare-fun lt!22862 () Unit!1484)

(assert (=> d!10571 (= lt!22862 e!37899)))

(declare-fun c!7127 () Bool)

(assert (=> d!10571 (= c!7127 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!22866 () Unit!1484)

(assert (=> d!10571 (= lt!22866 e!37897)))

(declare-fun c!7125 () Bool)

(assert (=> d!10571 (= c!7125 (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10571 (valid!260 newMap!16)))

(assert (=> d!10571 (= (updateHelperNewKey!14 newMap!16 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))) lt!22870)))

(declare-fun b!57520 () Bool)

(declare-fun res!32167 () Bool)

(assert (=> b!57520 (=> (not res!32167) (not e!37901))))

(assert (=> b!57520 (= res!32167 call!4170)))

(assert (=> b!57520 (= e!37894 e!37901)))

(declare-fun b!57528 () Bool)

(declare-fun res!32161 () Bool)

(assert (=> b!57528 (=> (not res!32161) (not e!37896))))

(assert (=> b!57528 (= res!32161 (contains!675 (map!1104 (_2!1016 lt!22870)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57529 () Bool)

(declare-fun lt!22855 () Unit!1484)

(assert (=> b!57529 (= e!37897 lt!22855)))

(assert (=> b!57529 (= lt!22855 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(assert (=> b!57529 (= lt!22865 call!4169)))

(declare-fun c!7128 () Bool)

(assert (=> b!57529 (= c!7128 ((_ is MissingZero!220) lt!22865))))

(assert (=> b!57529 e!37894))

(declare-fun b!57530 () Bool)

(declare-fun res!32162 () Bool)

(assert (=> b!57530 (= res!32162 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!22865)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57530 (=> (not res!32162) (not e!37900))))

(declare-fun b!57531 () Bool)

(declare-fun Unit!1501 () Unit!1484)

(assert (=> b!57531 (= e!37899 Unit!1501)))

(declare-fun lt!22867 () Unit!1484)

(declare-fun lemmaArrayContainsKeyThenInListMap!4 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) (_ BitVec 32) Int) Unit!1484)

(assert (=> b!57531 (= lt!22867 (lemmaArrayContainsKeyThenInListMap!4 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(assert (=> b!57531 (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))

(declare-fun lt!22860 () Unit!1484)

(assert (=> b!57531 (= lt!22860 lt!22867)))

(assert (=> b!57531 false))

(declare-fun bm!4165 () Bool)

(assert (=> bm!4165 (= call!4168 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57532 () Bool)

(declare-fun res!32163 () Bool)

(assert (=> b!57532 (=> (not res!32163) (not e!37901))))

(assert (=> b!57532 (= res!32163 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!22865)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57533 () Bool)

(assert (=> b!57533 (= e!37900 (not call!4168))))

(declare-fun bm!4166 () Bool)

(assert (=> bm!4166 (= call!4167 (inRange!0 (ite c!7125 (index!3003 lt!22852) (ite c!7128 (index!3002 lt!22865) (index!3005 lt!22865))) (mask!5895 newMap!16)))))

(declare-fun b!57534 () Bool)

(assert (=> b!57534 (= e!37898 ((_ is Undefined!220) lt!22865))))

(declare-fun bm!4167 () Bool)

(assert (=> bm!4167 (= call!4170 call!4167)))

(assert (= (and d!10571 c!7125) b!57526))

(assert (= (and d!10571 (not c!7125)) b!57529))

(assert (= (and b!57526 res!32165) b!57524))

(assert (= (and b!57524 res!32166) b!57527))

(assert (= (and b!57529 c!7128) b!57520))

(assert (= (and b!57529 (not c!7128)) b!57525))

(assert (= (and b!57520 res!32167) b!57532))

(assert (= (and b!57532 res!32163) b!57519))

(assert (= (and b!57525 c!7126) b!57522))

(assert (= (and b!57525 (not c!7126)) b!57534))

(assert (= (and b!57522 res!32169) b!57530))

(assert (= (and b!57530 res!32162) b!57533))

(assert (= (or b!57520 b!57522) bm!4167))

(assert (= (or b!57519 b!57533) bm!4165))

(assert (= (or b!57524 bm!4167) bm!4166))

(assert (= (or b!57526 b!57529) bm!4164))

(assert (= (and d!10571 c!7127) b!57531))

(assert (= (and d!10571 (not c!7127)) b!57518))

(assert (= (and d!10571 res!32164) b!57523))

(assert (= (and b!57523 res!32168) b!57528))

(assert (= (and b!57528 res!32161) b!57521))

(assert (=> bm!4165 m!47875))

(assert (=> bm!4165 m!48011))

(assert (=> b!57531 m!47875))

(declare-fun m!48261 () Bool)

(assert (=> b!57531 m!48261))

(assert (=> b!57531 m!48027))

(assert (=> b!57531 m!48027))

(assert (=> b!57531 m!47875))

(declare-fun m!48263 () Bool)

(assert (=> b!57531 m!48263))

(declare-fun m!48265 () Bool)

(assert (=> b!57532 m!48265))

(declare-fun m!48267 () Bool)

(assert (=> b!57528 m!48267))

(assert (=> b!57528 m!48267))

(assert (=> b!57528 m!47875))

(declare-fun m!48269 () Bool)

(assert (=> b!57528 m!48269))

(declare-fun m!48271 () Bool)

(assert (=> bm!4166 m!48271))

(assert (=> b!57526 m!47875))

(assert (=> b!57526 m!48031))

(declare-fun m!48273 () Bool)

(assert (=> b!57530 m!48273))

(assert (=> bm!4164 m!47875))

(assert (=> bm!4164 m!48035))

(assert (=> d!10571 m!48139))

(assert (=> d!10571 m!48027))

(declare-fun m!48275 () Bool)

(assert (=> d!10571 m!48275))

(declare-fun m!48277 () Bool)

(assert (=> d!10571 m!48277))

(declare-fun m!48279 () Bool)

(assert (=> d!10571 m!48279))

(declare-fun m!48281 () Bool)

(assert (=> d!10571 m!48281))

(declare-fun m!48283 () Bool)

(assert (=> d!10571 m!48283))

(declare-fun m!48285 () Bool)

(assert (=> d!10571 m!48285))

(declare-fun m!48287 () Bool)

(assert (=> d!10571 m!48287))

(declare-fun m!48289 () Bool)

(assert (=> d!10571 m!48289))

(declare-fun m!48291 () Bool)

(assert (=> d!10571 m!48291))

(declare-fun m!48293 () Bool)

(assert (=> d!10571 m!48293))

(assert (=> d!10571 m!47875))

(declare-fun m!48295 () Bool)

(assert (=> d!10571 m!48295))

(declare-fun m!48297 () Bool)

(assert (=> d!10571 m!48297))

(assert (=> d!10571 m!48027))

(assert (=> d!10571 m!47875))

(assert (=> d!10571 m!48263))

(assert (=> d!10571 m!47875))

(assert (=> d!10571 m!47873))

(declare-fun m!48299 () Bool)

(assert (=> d!10571 m!48299))

(assert (=> d!10571 m!48279))

(declare-fun m!48301 () Bool)

(assert (=> d!10571 m!48301))

(declare-fun m!48303 () Bool)

(assert (=> d!10571 m!48303))

(assert (=> d!10571 m!48027))

(assert (=> d!10571 m!47875))

(assert (=> d!10571 m!48011))

(assert (=> d!10571 m!47875))

(declare-fun m!48305 () Bool)

(assert (=> d!10571 m!48305))

(assert (=> d!10571 m!47881))

(assert (=> d!10571 m!48277))

(assert (=> d!10571 m!47875))

(declare-fun m!48307 () Bool)

(assert (=> d!10571 m!48307))

(assert (=> d!10571 m!47875))

(declare-fun m!48309 () Bool)

(assert (=> d!10571 m!48309))

(assert (=> d!10571 m!47875))

(declare-fun m!48311 () Bool)

(assert (=> d!10571 m!48311))

(assert (=> b!57521 m!48267))

(assert (=> b!57521 m!47887))

(assert (=> b!57521 m!47887))

(declare-fun m!48313 () Bool)

(assert (=> b!57521 m!48313))

(assert (=> b!57529 m!47875))

(assert (=> b!57529 m!48009))

(declare-fun m!48315 () Bool)

(assert (=> b!57523 m!48315))

(declare-fun m!48317 () Bool)

(assert (=> b!57527 m!48317))

(assert (=> bm!4117 d!10571))

(declare-fun d!10573 () Bool)

(assert (=> d!10573 (= (map!1104 (_2!1016 lt!22658)) (getCurrentListMap!386 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun bs!2481 () Bool)

(assert (= bs!2481 d!10573))

(declare-fun m!48319 () Bool)

(assert (=> bs!2481 m!48319))

(assert (=> bm!4119 d!10573))

(declare-fun d!10575 () Bool)

(assert (=> d!10575 (isDefined!76 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!22884 () Unit!1484)

(declare-fun choose!295 (List!1419 (_ BitVec 64)) Unit!1484)

(assert (=> d!10575 (= lt!22884 (choose!295 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!37904 () Bool)

(assert (=> d!10575 e!37904))

(declare-fun res!32172 () Bool)

(assert (=> d!10575 (=> (not res!32172) (not e!37904))))

(declare-fun isStrictlySorted!270 (List!1419) Bool)

(assert (=> d!10575 (= res!32172 (isStrictlySorted!270 (toList!685 lt!22525)))))

(assert (=> d!10575 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!22884)))

(declare-fun b!57537 () Bool)

(assert (=> b!57537 (= e!37904 (containsKey!127 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10575 res!32172) b!57537))

(assert (=> d!10575 m!47875))

(assert (=> d!10575 m!48001))

(assert (=> d!10575 m!48001))

(assert (=> d!10575 m!48003))

(assert (=> d!10575 m!47875))

(declare-fun m!48321 () Bool)

(assert (=> d!10575 m!48321))

(declare-fun m!48323 () Bool)

(assert (=> d!10575 m!48323))

(assert (=> b!57537 m!47875))

(assert (=> b!57537 m!47997))

(assert (=> b!57166 d!10575))

(declare-fun d!10577 () Bool)

(declare-fun isEmpty!296 (Option!130) Bool)

(assert (=> d!10577 (= (isDefined!76 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!296 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2482 () Bool)

(assert (= bs!2482 d!10577))

(assert (=> bs!2482 m!48001))

(declare-fun m!48325 () Bool)

(assert (=> bs!2482 m!48325))

(assert (=> b!57166 d!10577))

(declare-fun b!57549 () Bool)

(declare-fun e!37910 () Option!130)

(assert (=> b!57549 (= e!37910 None!128)))

(declare-fun b!57546 () Bool)

(declare-fun e!37909 () Option!130)

(assert (=> b!57546 (= e!37909 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22525)))))))

(declare-fun b!57548 () Bool)

(assert (=> b!57548 (= e!37910 (getValueByKey!124 (t!4733 (toList!685 lt!22525)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57547 () Bool)

(assert (=> b!57547 (= e!37909 e!37910)))

(declare-fun c!7134 () Bool)

(assert (=> b!57547 (= c!7134 (and ((_ is Cons!1415) (toList!685 lt!22525)) (not (= (_1!1015 (h!1995 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun d!10579 () Bool)

(declare-fun c!7133 () Bool)

(assert (=> d!10579 (= c!7133 (and ((_ is Cons!1415) (toList!685 lt!22525)) (= (_1!1015 (h!1995 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10579 (= (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!37909)))

(assert (= (and d!10579 c!7133) b!57546))

(assert (= (and d!10579 (not c!7133)) b!57547))

(assert (= (and b!57547 c!7134) b!57548))

(assert (= (and b!57547 (not c!7134)) b!57549))

(assert (=> b!57548 m!47875))

(declare-fun m!48327 () Bool)

(assert (=> b!57548 m!48327))

(assert (=> b!57166 d!10579))

(assert (=> b!57348 d!10561))

(declare-fun d!10581 () Bool)

(assert (=> d!10581 (= (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (and (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57387 d!10581))

(declare-fun d!10583 () Bool)

(declare-fun res!32173 () Bool)

(declare-fun e!37911 () Bool)

(assert (=> d!10583 (=> (not res!32173) (not e!37911))))

(assert (=> d!10583 (= res!32173 (simpleValid!41 (v!2366 (underlying!222 thiss!992))))))

(assert (=> d!10583 (= (valid!260 (v!2366 (underlying!222 thiss!992))) e!37911)))

(declare-fun b!57550 () Bool)

(declare-fun res!32174 () Bool)

(assert (=> b!57550 (=> (not res!32174) (not e!37911))))

(assert (=> b!57550 (= res!32174 (= (arrayCountValidKeys!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))) (_size!354 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57551 () Bool)

(declare-fun res!32175 () Bool)

(assert (=> b!57551 (=> (not res!32175) (not e!37911))))

(assert (=> b!57551 (= res!32175 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57552 () Bool)

(assert (=> b!57552 (= e!37911 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 Nil!1417))))

(assert (= (and d!10583 res!32173) b!57550))

(assert (= (and b!57550 res!32174) b!57551))

(assert (= (and b!57551 res!32175) b!57552))

(declare-fun m!48329 () Bool)

(assert (=> d!10583 m!48329))

(declare-fun m!48331 () Bool)

(assert (=> b!57550 m!48331))

(declare-fun m!48333 () Bool)

(assert (=> b!57551 m!48333))

(declare-fun m!48335 () Bool)

(assert (=> b!57552 m!48335))

(assert (=> d!10539 d!10583))

(declare-fun b!57553 () Bool)

(declare-fun e!37919 () ListLongMap!1339)

(declare-fun call!4177 () ListLongMap!1339)

(assert (=> b!57553 (= e!37919 call!4177)))

(declare-fun call!4173 () ListLongMap!1339)

(declare-fun call!4175 () ListLongMap!1339)

(declare-fun call!4174 () ListLongMap!1339)

(declare-fun bm!4168 () Bool)

(declare-fun call!4171 () ListLongMap!1339)

(declare-fun c!7139 () Bool)

(declare-fun c!7137 () Bool)

(assert (=> bm!4168 (= call!4173 (+!79 (ite c!7137 call!4171 (ite c!7139 call!4175 call!4174)) (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!57554 () Bool)

(declare-fun e!37922 () ListLongMap!1339)

(assert (=> b!57554 (= e!37922 e!37919)))

(assert (=> b!57554 (= c!7139 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4169 () Bool)

(assert (=> bm!4169 (= call!4171 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57555 () Bool)

(declare-fun e!37915 () Bool)

(declare-fun e!37912 () Bool)

(assert (=> b!57555 (= e!37915 e!37912)))

(declare-fun res!32181 () Bool)

(declare-fun call!4176 () Bool)

(assert (=> b!57555 (= res!32181 call!4176)))

(assert (=> b!57555 (=> (not res!32181) (not e!37912))))

(declare-fun b!57556 () Bool)

(declare-fun res!32178 () Bool)

(declare-fun e!37920 () Bool)

(assert (=> b!57556 (=> (not res!32178) (not e!37920))))

(declare-fun e!37923 () Bool)

(assert (=> b!57556 (= res!32178 e!37923)))

(declare-fun res!32177 () Bool)

(assert (=> b!57556 (=> res!32177 e!37923)))

(declare-fun e!37916 () Bool)

(assert (=> b!57556 (= res!32177 (not e!37916))))

(declare-fun res!32179 () Bool)

(assert (=> b!57556 (=> (not res!32179) (not e!37916))))

(assert (=> b!57556 (= res!32179 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4170 () Bool)

(declare-fun lt!22906 () ListLongMap!1339)

(assert (=> bm!4170 (= call!4176 (contains!675 lt!22906 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57557 () Bool)

(declare-fun e!37921 () Unit!1484)

(declare-fun lt!22896 () Unit!1484)

(assert (=> b!57557 (= e!37921 lt!22896)))

(declare-fun lt!22889 () ListLongMap!1339)

(assert (=> b!57557 (= lt!22889 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22894 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22894 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22900 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22900 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22892 () Unit!1484)

(assert (=> b!57557 (= lt!22892 (addStillContains!41 lt!22889 lt!22894 (zeroValue!1939 newMap!16) lt!22900))))

(assert (=> b!57557 (contains!675 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) lt!22900)))

(declare-fun lt!22904 () Unit!1484)

(assert (=> b!57557 (= lt!22904 lt!22892)))

(declare-fun lt!22898 () ListLongMap!1339)

(assert (=> b!57557 (= lt!22898 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22885 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22885 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22899 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22899 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22895 () Unit!1484)

(assert (=> b!57557 (= lt!22895 (addApplyDifferent!41 lt!22898 lt!22885 (minValue!1939 newMap!16) lt!22899))))

(assert (=> b!57557 (= (apply!65 (+!79 lt!22898 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) lt!22899) (apply!65 lt!22898 lt!22899))))

(declare-fun lt!22902 () Unit!1484)

(assert (=> b!57557 (= lt!22902 lt!22895)))

(declare-fun lt!22887 () ListLongMap!1339)

(assert (=> b!57557 (= lt!22887 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22901 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22901 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22897 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22897 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22888 () Unit!1484)

(assert (=> b!57557 (= lt!22888 (addApplyDifferent!41 lt!22887 lt!22901 (zeroValue!1939 newMap!16) lt!22897))))

(assert (=> b!57557 (= (apply!65 (+!79 lt!22887 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) lt!22897) (apply!65 lt!22887 lt!22897))))

(declare-fun lt!22886 () Unit!1484)

(assert (=> b!57557 (= lt!22886 lt!22888)))

(declare-fun lt!22905 () ListLongMap!1339)

(assert (=> b!57557 (= lt!22905 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22903 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22903 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22893 () (_ BitVec 64))

(assert (=> b!57557 (= lt!22893 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57557 (= lt!22896 (addApplyDifferent!41 lt!22905 lt!22903 (minValue!1939 newMap!16) lt!22893))))

(assert (=> b!57557 (= (apply!65 (+!79 lt!22905 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) lt!22893) (apply!65 lt!22905 lt!22893))))

(declare-fun d!10585 () Bool)

(assert (=> d!10585 e!37920))

(declare-fun res!32184 () Bool)

(assert (=> d!10585 (=> (not res!32184) (not e!37920))))

(assert (=> d!10585 (= res!32184 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!22890 () ListLongMap!1339)

(assert (=> d!10585 (= lt!22906 lt!22890)))

(declare-fun lt!22891 () Unit!1484)

(assert (=> d!10585 (= lt!22891 e!37921)))

(declare-fun c!7136 () Bool)

(declare-fun e!37918 () Bool)

(assert (=> d!10585 (= c!7136 e!37918)))

(declare-fun res!32176 () Bool)

(assert (=> d!10585 (=> (not res!32176) (not e!37918))))

(assert (=> d!10585 (= res!32176 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10585 (= lt!22890 e!37922)))

(assert (=> d!10585 (= c!7137 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10585 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10585 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!22906)))

(declare-fun b!57558 () Bool)

(assert (=> b!57558 (= e!37918 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57559 () Bool)

(declare-fun e!37913 () Bool)

(assert (=> b!57559 (= e!37920 e!37913)))

(declare-fun c!7140 () Bool)

(assert (=> b!57559 (= c!7140 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4171 () Bool)

(declare-fun call!4172 () Bool)

(assert (=> bm!4171 (= call!4172 (contains!675 lt!22906 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4172 () Bool)

(assert (=> bm!4172 (= call!4175 call!4171)))

(declare-fun b!57560 () Bool)

(declare-fun e!37917 () Bool)

(assert (=> b!57560 (= e!37913 e!37917)))

(declare-fun res!32180 () Bool)

(assert (=> b!57560 (= res!32180 call!4172)))

(assert (=> b!57560 (=> (not res!32180) (not e!37917))))

(declare-fun b!57561 () Bool)

(declare-fun e!37914 () Bool)

(assert (=> b!57561 (= e!37914 (= (apply!65 lt!22906 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57561 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (_values!2004 newMap!16))))))

(assert (=> b!57561 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4173 () Bool)

(assert (=> bm!4173 (= call!4177 call!4173)))

(declare-fun b!57562 () Bool)

(assert (=> b!57562 (= e!37923 e!37914)))

(declare-fun res!32182 () Bool)

(assert (=> b!57562 (=> (not res!32182) (not e!37914))))

(assert (=> b!57562 (= res!32182 (contains!675 lt!22906 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57562 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57563 () Bool)

(assert (=> b!57563 (= e!37913 (not call!4172))))

(declare-fun b!57564 () Bool)

(assert (=> b!57564 (= e!37915 (not call!4176))))

(declare-fun b!57565 () Bool)

(declare-fun Unit!1502 () Unit!1484)

(assert (=> b!57565 (= e!37921 Unit!1502)))

(declare-fun b!57566 () Bool)

(declare-fun e!37924 () ListLongMap!1339)

(assert (=> b!57566 (= e!37924 call!4177)))

(declare-fun bm!4174 () Bool)

(assert (=> bm!4174 (= call!4174 call!4175)))

(declare-fun b!57567 () Bool)

(assert (=> b!57567 (= e!37922 (+!79 call!4173 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!57568 () Bool)

(assert (=> b!57568 (= e!37924 call!4174)))

(declare-fun b!57569 () Bool)

(declare-fun c!7138 () Bool)

(assert (=> b!57569 (= c!7138 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57569 (= e!37919 e!37924)))

(declare-fun b!57570 () Bool)

(declare-fun res!32183 () Bool)

(assert (=> b!57570 (=> (not res!32183) (not e!37920))))

(assert (=> b!57570 (= res!32183 e!37915)))

(declare-fun c!7135 () Bool)

(assert (=> b!57570 (= c!7135 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57571 () Bool)

(assert (=> b!57571 (= e!37912 (= (apply!65 lt!22906 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!57572 () Bool)

(assert (=> b!57572 (= e!37917 (= (apply!65 lt!22906 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!57573 () Bool)

(assert (=> b!57573 (= e!37916 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10585 c!7137) b!57567))

(assert (= (and d!10585 (not c!7137)) b!57554))

(assert (= (and b!57554 c!7139) b!57553))

(assert (= (and b!57554 (not c!7139)) b!57569))

(assert (= (and b!57569 c!7138) b!57566))

(assert (= (and b!57569 (not c!7138)) b!57568))

(assert (= (or b!57566 b!57568) bm!4174))

(assert (= (or b!57553 bm!4174) bm!4172))

(assert (= (or b!57553 b!57566) bm!4173))

(assert (= (or b!57567 bm!4172) bm!4169))

(assert (= (or b!57567 bm!4173) bm!4168))

(assert (= (and d!10585 res!32176) b!57558))

(assert (= (and d!10585 c!7136) b!57557))

(assert (= (and d!10585 (not c!7136)) b!57565))

(assert (= (and d!10585 res!32184) b!57556))

(assert (= (and b!57556 res!32179) b!57573))

(assert (= (and b!57556 (not res!32177)) b!57562))

(assert (= (and b!57562 res!32182) b!57561))

(assert (= (and b!57556 res!32178) b!57570))

(assert (= (and b!57570 c!7135) b!57555))

(assert (= (and b!57570 (not c!7135)) b!57564))

(assert (= (and b!57555 res!32181) b!57571))

(assert (= (or b!57555 b!57564) bm!4170))

(assert (= (and b!57570 res!32183) b!57559))

(assert (= (and b!57559 c!7140) b!57560))

(assert (= (and b!57559 (not c!7140)) b!57563))

(assert (= (and b!57560 res!32180) b!57572))

(assert (= (or b!57560 b!57563) bm!4171))

(declare-fun b_lambda!2503 () Bool)

(assert (=> (not b_lambda!2503) (not b!57561)))

(assert (=> b!57561 t!4745))

(declare-fun b_and!3465 () Bool)

(assert (= b_and!3461 (and (=> t!4745 result!2353) b_and!3465)))

(assert (=> b!57561 t!4747))

(declare-fun b_and!3467 () Bool)

(assert (= b_and!3463 (and (=> t!4747 result!2355) b_and!3467)))

(assert (=> d!10585 m!48151))

(declare-fun m!48337 () Bool)

(assert (=> bm!4171 m!48337))

(declare-fun m!48339 () Bool)

(assert (=> b!57567 m!48339))

(assert (=> b!57561 m!48177))

(declare-fun m!48341 () Bool)

(assert (=> b!57561 m!48341))

(assert (=> b!57561 m!48203))

(assert (=> b!57561 m!48177))

(declare-fun m!48343 () Bool)

(assert (=> b!57561 m!48343))

(assert (=> b!57561 m!48341))

(assert (=> b!57561 m!48203))

(declare-fun m!48345 () Bool)

(assert (=> b!57561 m!48345))

(assert (=> b!57558 m!48177))

(assert (=> b!57558 m!48177))

(assert (=> b!57558 m!48187))

(declare-fun m!48347 () Bool)

(assert (=> bm!4170 m!48347))

(declare-fun m!48349 () Bool)

(assert (=> bm!4168 m!48349))

(declare-fun m!48351 () Bool)

(assert (=> b!57571 m!48351))

(assert (=> b!57562 m!48177))

(assert (=> b!57562 m!48177))

(declare-fun m!48353 () Bool)

(assert (=> b!57562 m!48353))

(declare-fun m!48355 () Bool)

(assert (=> b!57557 m!48355))

(declare-fun m!48357 () Bool)

(assert (=> b!57557 m!48357))

(declare-fun m!48359 () Bool)

(assert (=> b!57557 m!48359))

(declare-fun m!48361 () Bool)

(assert (=> b!57557 m!48361))

(declare-fun m!48363 () Bool)

(assert (=> b!57557 m!48363))

(declare-fun m!48365 () Bool)

(assert (=> b!57557 m!48365))

(declare-fun m!48367 () Bool)

(assert (=> b!57557 m!48367))

(declare-fun m!48369 () Bool)

(assert (=> b!57557 m!48369))

(assert (=> b!57557 m!48355))

(assert (=> b!57557 m!48369))

(declare-fun m!48371 () Bool)

(assert (=> b!57557 m!48371))

(assert (=> b!57557 m!48177))

(declare-fun m!48373 () Bool)

(assert (=> b!57557 m!48373))

(declare-fun m!48375 () Bool)

(assert (=> b!57557 m!48375))

(declare-fun m!48377 () Bool)

(assert (=> b!57557 m!48377))

(assert (=> b!57557 m!48363))

(declare-fun m!48379 () Bool)

(assert (=> b!57557 m!48379))

(declare-fun m!48381 () Bool)

(assert (=> b!57557 m!48381))

(declare-fun m!48383 () Bool)

(assert (=> b!57557 m!48383))

(assert (=> b!57557 m!48367))

(declare-fun m!48385 () Bool)

(assert (=> b!57557 m!48385))

(assert (=> bm!4169 m!48375))

(declare-fun m!48387 () Bool)

(assert (=> b!57572 m!48387))

(assert (=> b!57573 m!48177))

(assert (=> b!57573 m!48177))

(assert (=> b!57573 m!48187))

(assert (=> d!10521 d!10585))

(declare-fun b!57574 () Bool)

(declare-fun e!37932 () ListLongMap!1339)

(declare-fun call!4184 () ListLongMap!1339)

(assert (=> b!57574 (= e!37932 call!4184)))

(declare-fun call!4178 () ListLongMap!1339)

(declare-fun bm!4175 () Bool)

(declare-fun call!4180 () ListLongMap!1339)

(declare-fun call!4181 () ListLongMap!1339)

(declare-fun call!4182 () ListLongMap!1339)

(declare-fun c!7143 () Bool)

(declare-fun c!7145 () Bool)

(assert (=> bm!4175 (= call!4180 (+!79 (ite c!7143 call!4178 (ite c!7145 call!4182 call!4181)) (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(declare-fun b!57575 () Bool)

(declare-fun e!37935 () ListLongMap!1339)

(assert (=> b!57575 (= e!37935 e!37932)))

(assert (=> b!57575 (= c!7145 (and (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4176 () Bool)

(assert (=> bm!4176 (= call!4178 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57576 () Bool)

(declare-fun e!37928 () Bool)

(declare-fun e!37925 () Bool)

(assert (=> b!57576 (= e!37928 e!37925)))

(declare-fun res!32190 () Bool)

(declare-fun call!4183 () Bool)

(assert (=> b!57576 (= res!32190 call!4183)))

(assert (=> b!57576 (=> (not res!32190) (not e!37925))))

(declare-fun b!57577 () Bool)

(declare-fun res!32187 () Bool)

(declare-fun e!37933 () Bool)

(assert (=> b!57577 (=> (not res!32187) (not e!37933))))

(declare-fun e!37936 () Bool)

(assert (=> b!57577 (= res!32187 e!37936)))

(declare-fun res!32186 () Bool)

(assert (=> b!57577 (=> res!32186 e!37936)))

(declare-fun e!37929 () Bool)

(assert (=> b!57577 (= res!32186 (not e!37929))))

(declare-fun res!32188 () Bool)

(assert (=> b!57577 (=> (not res!32188) (not e!37929))))

(assert (=> b!57577 (= res!32188 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4177 () Bool)

(declare-fun lt!22928 () ListLongMap!1339)

(assert (=> bm!4177 (= call!4183 (contains!675 lt!22928 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57578 () Bool)

(declare-fun e!37934 () Unit!1484)

(declare-fun lt!22918 () Unit!1484)

(assert (=> b!57578 (= e!37934 lt!22918)))

(declare-fun lt!22911 () ListLongMap!1339)

(assert (=> b!57578 (= lt!22911 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22916 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22916 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22922 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22922 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22914 () Unit!1484)

(assert (=> b!57578 (= lt!22914 (addStillContains!41 lt!22911 lt!22916 (zeroValue!1939 newMap!16) lt!22922))))

(assert (=> b!57578 (contains!675 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) lt!22922)))

(declare-fun lt!22926 () Unit!1484)

(assert (=> b!57578 (= lt!22926 lt!22914)))

(declare-fun lt!22920 () ListLongMap!1339)

(assert (=> b!57578 (= lt!22920 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22907 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22907 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22921 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22921 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22917 () Unit!1484)

(assert (=> b!57578 (= lt!22917 (addApplyDifferent!41 lt!22920 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22921))))

(assert (=> b!57578 (= (apply!65 (+!79 lt!22920 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22921) (apply!65 lt!22920 lt!22921))))

(declare-fun lt!22924 () Unit!1484)

(assert (=> b!57578 (= lt!22924 lt!22917)))

(declare-fun lt!22909 () ListLongMap!1339)

(assert (=> b!57578 (= lt!22909 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22923 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22923 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22919 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22919 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22910 () Unit!1484)

(assert (=> b!57578 (= lt!22910 (addApplyDifferent!41 lt!22909 lt!22923 (zeroValue!1939 newMap!16) lt!22919))))

(assert (=> b!57578 (= (apply!65 (+!79 lt!22909 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) lt!22919) (apply!65 lt!22909 lt!22919))))

(declare-fun lt!22908 () Unit!1484)

(assert (=> b!57578 (= lt!22908 lt!22910)))

(declare-fun lt!22927 () ListLongMap!1339)

(assert (=> b!57578 (= lt!22927 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22925 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22925 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22915 () (_ BitVec 64))

(assert (=> b!57578 (= lt!22915 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57578 (= lt!22918 (addApplyDifferent!41 lt!22927 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22915))))

(assert (=> b!57578 (= (apply!65 (+!79 lt!22927 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22915) (apply!65 lt!22927 lt!22915))))

(declare-fun d!10587 () Bool)

(assert (=> d!10587 e!37933))

(declare-fun res!32193 () Bool)

(assert (=> d!10587 (=> (not res!32193) (not e!37933))))

(assert (=> d!10587 (= res!32193 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!22912 () ListLongMap!1339)

(assert (=> d!10587 (= lt!22928 lt!22912)))

(declare-fun lt!22913 () Unit!1484)

(assert (=> d!10587 (= lt!22913 e!37934)))

(declare-fun c!7142 () Bool)

(declare-fun e!37931 () Bool)

(assert (=> d!10587 (= c!7142 e!37931)))

(declare-fun res!32185 () Bool)

(assert (=> d!10587 (=> (not res!32185) (not e!37931))))

(assert (=> d!10587 (= res!32185 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10587 (= lt!22912 e!37935)))

(assert (=> d!10587 (= c!7143 (and (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10587 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10587 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!22928)))

(declare-fun b!57579 () Bool)

(assert (=> b!57579 (= e!37931 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57580 () Bool)

(declare-fun e!37926 () Bool)

(assert (=> b!57580 (= e!37933 e!37926)))

(declare-fun c!7146 () Bool)

(assert (=> b!57580 (= c!7146 (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4178 () Bool)

(declare-fun call!4179 () Bool)

(assert (=> bm!4178 (= call!4179 (contains!675 lt!22928 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4179 () Bool)

(assert (=> bm!4179 (= call!4182 call!4178)))

(declare-fun b!57581 () Bool)

(declare-fun e!37930 () Bool)

(assert (=> b!57581 (= e!37926 e!37930)))

(declare-fun res!32189 () Bool)

(assert (=> b!57581 (= res!32189 call!4179)))

(assert (=> b!57581 (=> (not res!32189) (not e!37930))))

(declare-fun b!57582 () Bool)

(declare-fun e!37927 () Bool)

(assert (=> b!57582 (= e!37927 (= (apply!65 lt!22928 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (ite c!7058 (_values!2004 newMap!16) lt!22661))))))

(assert (=> b!57582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4180 () Bool)

(assert (=> bm!4180 (= call!4184 call!4180)))

(declare-fun b!57583 () Bool)

(assert (=> b!57583 (= e!37936 e!37927)))

(declare-fun res!32191 () Bool)

(assert (=> b!57583 (=> (not res!32191) (not e!37927))))

(assert (=> b!57583 (= res!32191 (contains!675 lt!22928 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57583 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57584 () Bool)

(assert (=> b!57584 (= e!37926 (not call!4179))))

(declare-fun b!57585 () Bool)

(assert (=> b!57585 (= e!37928 (not call!4183))))

(declare-fun b!57586 () Bool)

(declare-fun Unit!1503 () Unit!1484)

(assert (=> b!57586 (= e!37934 Unit!1503)))

(declare-fun b!57587 () Bool)

(declare-fun e!37937 () ListLongMap!1339)

(assert (=> b!57587 (= e!37937 call!4184)))

(declare-fun bm!4181 () Bool)

(assert (=> bm!4181 (= call!4181 call!4182)))

(declare-fun b!57588 () Bool)

(assert (=> b!57588 (= e!37935 (+!79 call!4180 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))

(declare-fun b!57589 () Bool)

(assert (=> b!57589 (= e!37937 call!4181)))

(declare-fun b!57590 () Bool)

(declare-fun c!7144 () Bool)

(assert (=> b!57590 (= c!7144 (and (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57590 (= e!37932 e!37937)))

(declare-fun b!57591 () Bool)

(declare-fun res!32192 () Bool)

(assert (=> b!57591 (=> (not res!32192) (not e!37933))))

(assert (=> b!57591 (= res!32192 e!37928)))

(declare-fun c!7141 () Bool)

(assert (=> b!57591 (= c!7141 (not (= (bvand (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57592 () Bool)

(assert (=> b!57592 (= e!37925 (= (apply!65 lt!22928 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!57593 () Bool)

(assert (=> b!57593 (= e!37930 (= (apply!65 lt!22928 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))

(declare-fun b!57594 () Bool)

(assert (=> b!57594 (= e!37929 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10587 c!7143) b!57588))

(assert (= (and d!10587 (not c!7143)) b!57575))

(assert (= (and b!57575 c!7145) b!57574))

(assert (= (and b!57575 (not c!7145)) b!57590))

(assert (= (and b!57590 c!7144) b!57587))

(assert (= (and b!57590 (not c!7144)) b!57589))

(assert (= (or b!57587 b!57589) bm!4181))

(assert (= (or b!57574 bm!4181) bm!4179))

(assert (= (or b!57574 b!57587) bm!4180))

(assert (= (or b!57588 bm!4179) bm!4176))

(assert (= (or b!57588 bm!4180) bm!4175))

(assert (= (and d!10587 res!32185) b!57579))

(assert (= (and d!10587 c!7142) b!57578))

(assert (= (and d!10587 (not c!7142)) b!57586))

(assert (= (and d!10587 res!32193) b!57577))

(assert (= (and b!57577 res!32188) b!57594))

(assert (= (and b!57577 (not res!32186)) b!57583))

(assert (= (and b!57583 res!32191) b!57582))

(assert (= (and b!57577 res!32187) b!57591))

(assert (= (and b!57591 c!7141) b!57576))

(assert (= (and b!57591 (not c!7141)) b!57585))

(assert (= (and b!57576 res!32190) b!57592))

(assert (= (or b!57576 b!57585) bm!4177))

(assert (= (and b!57591 res!32192) b!57580))

(assert (= (and b!57580 c!7146) b!57581))

(assert (= (and b!57580 (not c!7146)) b!57584))

(assert (= (and b!57581 res!32189) b!57593))

(assert (= (or b!57581 b!57584) bm!4178))

(declare-fun b_lambda!2505 () Bool)

(assert (=> (not b_lambda!2505) (not b!57582)))

(assert (=> b!57582 t!4745))

(declare-fun b_and!3469 () Bool)

(assert (= b_and!3465 (and (=> t!4745 result!2353) b_and!3469)))

(assert (=> b!57582 t!4747))

(declare-fun b_and!3471 () Bool)

(assert (= b_and!3467 (and (=> t!4747 result!2355) b_and!3471)))

(assert (=> d!10587 m!48151))

(declare-fun m!48389 () Bool)

(assert (=> bm!4178 m!48389))

(declare-fun m!48391 () Bool)

(assert (=> b!57588 m!48391))

(assert (=> b!57582 m!48177))

(declare-fun m!48393 () Bool)

(assert (=> b!57582 m!48393))

(assert (=> b!57582 m!48203))

(assert (=> b!57582 m!48177))

(declare-fun m!48395 () Bool)

(assert (=> b!57582 m!48395))

(assert (=> b!57582 m!48393))

(assert (=> b!57582 m!48203))

(declare-fun m!48397 () Bool)

(assert (=> b!57582 m!48397))

(assert (=> b!57579 m!48177))

(assert (=> b!57579 m!48177))

(assert (=> b!57579 m!48187))

(declare-fun m!48399 () Bool)

(assert (=> bm!4177 m!48399))

(declare-fun m!48401 () Bool)

(assert (=> bm!4175 m!48401))

(declare-fun m!48403 () Bool)

(assert (=> b!57592 m!48403))

(assert (=> b!57583 m!48177))

(assert (=> b!57583 m!48177))

(declare-fun m!48405 () Bool)

(assert (=> b!57583 m!48405))

(declare-fun m!48407 () Bool)

(assert (=> b!57578 m!48407))

(declare-fun m!48409 () Bool)

(assert (=> b!57578 m!48409))

(declare-fun m!48411 () Bool)

(assert (=> b!57578 m!48411))

(declare-fun m!48413 () Bool)

(assert (=> b!57578 m!48413))

(declare-fun m!48415 () Bool)

(assert (=> b!57578 m!48415))

(declare-fun m!48417 () Bool)

(assert (=> b!57578 m!48417))

(declare-fun m!48419 () Bool)

(assert (=> b!57578 m!48419))

(declare-fun m!48421 () Bool)

(assert (=> b!57578 m!48421))

(assert (=> b!57578 m!48407))

(assert (=> b!57578 m!48421))

(declare-fun m!48423 () Bool)

(assert (=> b!57578 m!48423))

(assert (=> b!57578 m!48177))

(declare-fun m!48425 () Bool)

(assert (=> b!57578 m!48425))

(declare-fun m!48427 () Bool)

(assert (=> b!57578 m!48427))

(declare-fun m!48429 () Bool)

(assert (=> b!57578 m!48429))

(assert (=> b!57578 m!48415))

(declare-fun m!48431 () Bool)

(assert (=> b!57578 m!48431))

(declare-fun m!48433 () Bool)

(assert (=> b!57578 m!48433))

(declare-fun m!48435 () Bool)

(assert (=> b!57578 m!48435))

(assert (=> b!57578 m!48419))

(declare-fun m!48437 () Bool)

(assert (=> b!57578 m!48437))

(assert (=> bm!4176 m!48427))

(declare-fun m!48439 () Bool)

(assert (=> b!57593 m!48439))

(assert (=> b!57594 m!48177))

(assert (=> b!57594 m!48177))

(assert (=> b!57594 m!48187))

(assert (=> bm!4103 d!10587))

(assert (=> b!57168 d!10577))

(assert (=> b!57168 d!10579))

(declare-fun d!10589 () Bool)

(assert (=> d!10589 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!22931 () Unit!1484)

(declare-fun choose!296 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 V!2833 Int) Unit!1484)

(assert (=> d!10589 (= lt!22931 (choose!296 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10589 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10589 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)) lt!22931)))

(declare-fun bs!2483 () Bool)

(assert (= bs!2483 d!10589))

(assert (=> bs!2483 m!47873))

(declare-fun m!48441 () Bool)

(assert (=> bs!2483 m!48441))

(assert (=> bs!2483 m!47873))

(declare-fun m!48443 () Bool)

(assert (=> bs!2483 m!48443))

(assert (=> bs!2483 m!48027))

(assert (=> bs!2483 m!48151))

(assert (=> bs!2483 m!48027))

(declare-fun m!48445 () Bool)

(assert (=> bs!2483 m!48445))

(assert (=> b!57269 d!10589))

(declare-fun d!10591 () Bool)

(declare-fun e!37940 () Bool)

(assert (=> d!10591 e!37940))

(declare-fun res!32199 () Bool)

(assert (=> d!10591 (=> (not res!32199) (not e!37940))))

(declare-fun lt!22937 () SeekEntryResult!220)

(assert (=> d!10591 (= res!32199 ((_ is Found!220) lt!22937))))

(assert (=> d!10591 (= lt!22937 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun lt!22936 () Unit!1484)

(declare-fun choose!297 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) Int) Unit!1484)

(assert (=> d!10591 (= lt!22936 (choose!297 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10591 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10591 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)) lt!22936)))

(declare-fun b!57599 () Bool)

(declare-fun res!32198 () Bool)

(assert (=> b!57599 (=> (not res!32198) (not e!37940))))

(assert (=> b!57599 (= res!32198 (inRange!0 (index!3003 lt!22937) (mask!5895 newMap!16)))))

(declare-fun b!57600 () Bool)

(assert (=> b!57600 (= e!37940 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22937)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57600 (and (bvsge (index!3003 lt!22937) #b00000000000000000000000000000000) (bvslt (index!3003 lt!22937) (size!1995 (_keys!3641 newMap!16))))))

(assert (= (and d!10591 res!32199) b!57599))

(assert (= (and b!57599 res!32198) b!57600))

(assert (=> d!10591 m!47875))

(assert (=> d!10591 m!48035))

(assert (=> d!10591 m!47875))

(declare-fun m!48447 () Bool)

(assert (=> d!10591 m!48447))

(assert (=> d!10591 m!48151))

(declare-fun m!48449 () Bool)

(assert (=> b!57599 m!48449))

(declare-fun m!48451 () Bool)

(assert (=> b!57600 m!48451))

(assert (=> bm!4108 d!10591))

(assert (=> d!10523 d!10541))

(declare-fun d!10593 () Bool)

(declare-fun e!37943 () Bool)

(assert (=> d!10593 e!37943))

(declare-fun res!32204 () Bool)

(assert (=> d!10593 (=> (not res!32204) (not e!37943))))

(declare-fun lt!22949 () ListLongMap!1339)

(assert (=> d!10593 (= res!32204 (contains!675 lt!22949 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!22947 () List!1419)

(assert (=> d!10593 (= lt!22949 (ListLongMap!1340 lt!22947))))

(declare-fun lt!22948 () Unit!1484)

(declare-fun lt!22946 () Unit!1484)

(assert (=> d!10593 (= lt!22948 lt!22946)))

(assert (=> d!10593 (= (getValueByKey!124 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!41 (List!1419 (_ BitVec 64) V!2833) Unit!1484)

(assert (=> d!10593 (= lt!22946 (lemmaContainsTupThenGetReturnValue!41 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun insertStrictlySorted!44 (List!1419 (_ BitVec 64) V!2833) List!1419)

(assert (=> d!10593 (= lt!22947 (insertStrictlySorted!44 (toList!685 e!37742) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10593 (= (+!79 e!37742 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!22949)))

(declare-fun b!57605 () Bool)

(declare-fun res!32205 () Bool)

(assert (=> b!57605 (=> (not res!32205) (not e!37943))))

(assert (=> b!57605 (= res!32205 (= (getValueByKey!124 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!57606 () Bool)

(declare-fun contains!677 (List!1419 tuple2!2008) Bool)

(assert (=> b!57606 (= e!37943 (contains!677 (toList!685 lt!22949) (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10593 res!32204) b!57605))

(assert (= (and b!57605 res!32205) b!57606))

(declare-fun m!48453 () Bool)

(assert (=> d!10593 m!48453))

(declare-fun m!48455 () Bool)

(assert (=> d!10593 m!48455))

(declare-fun m!48457 () Bool)

(assert (=> d!10593 m!48457))

(declare-fun m!48459 () Bool)

(assert (=> d!10593 m!48459))

(declare-fun m!48461 () Bool)

(assert (=> b!57605 m!48461))

(declare-fun m!48463 () Bool)

(assert (=> b!57606 m!48463))

(assert (=> bm!4098 d!10593))

(declare-fun d!10595 () Bool)

(declare-fun e!37944 () Bool)

(assert (=> d!10595 e!37944))

(declare-fun res!32206 () Bool)

(assert (=> d!10595 (=> (not res!32206) (not e!37944))))

(declare-fun lt!22953 () ListLongMap!1339)

(assert (=> d!10595 (= res!32206 (contains!675 lt!22953 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!22951 () List!1419)

(assert (=> d!10595 (= lt!22953 (ListLongMap!1340 lt!22951))))

(declare-fun lt!22952 () Unit!1484)

(declare-fun lt!22950 () Unit!1484)

(assert (=> d!10595 (= lt!22952 lt!22950)))

(assert (=> d!10595 (= (getValueByKey!124 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10595 (= lt!22950 (lemmaContainsTupThenGetReturnValue!41 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10595 (= lt!22951 (insertStrictlySorted!44 (toList!685 call!4103) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10595 (= (+!79 call!4103 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!22953)))

(declare-fun b!57607 () Bool)

(declare-fun res!32207 () Bool)

(assert (=> b!57607 (=> (not res!32207) (not e!37944))))

(assert (=> b!57607 (= res!32207 (= (getValueByKey!124 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57608 () Bool)

(assert (=> b!57608 (= e!37944 (contains!677 (toList!685 lt!22953) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10595 res!32206) b!57607))

(assert (= (and b!57607 res!32207) b!57608))

(declare-fun m!48465 () Bool)

(assert (=> d!10595 m!48465))

(declare-fun m!48467 () Bool)

(assert (=> d!10595 m!48467))

(declare-fun m!48469 () Bool)

(assert (=> d!10595 m!48469))

(declare-fun m!48471 () Bool)

(assert (=> d!10595 m!48471))

(declare-fun m!48473 () Bool)

(assert (=> b!57607 m!48473))

(declare-fun m!48475 () Bool)

(assert (=> b!57608 m!48475))

(assert (=> b!57272 d!10595))

(declare-fun b!57617 () Bool)

(declare-fun e!37949 () (_ BitVec 32))

(assert (=> b!57617 (= e!37949 #b00000000000000000000000000000000)))

(declare-fun b!57618 () Bool)

(declare-fun e!37950 () (_ BitVec 32))

(declare-fun call!4187 () (_ BitVec 32))

(assert (=> b!57618 (= e!37950 call!4187)))

(declare-fun bm!4184 () Bool)

(assert (=> bm!4184 (= call!4187 (arrayCountValidKeys!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57619 () Bool)

(assert (=> b!57619 (= e!37950 (bvadd #b00000000000000000000000000000001 call!4187))))

(declare-fun b!57620 () Bool)

(assert (=> b!57620 (= e!37949 e!37950)))

(declare-fun c!7151 () Bool)

(assert (=> b!57620 (= c!7151 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!10597 () Bool)

(declare-fun lt!22956 () (_ BitVec 32))

(assert (=> d!10597 (and (bvsge lt!22956 #b00000000000000000000000000000000) (bvsle lt!22956 (bvsub (size!1995 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10597 (= lt!22956 e!37949)))

(declare-fun c!7152 () Bool)

(assert (=> d!10597 (= c!7152 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10597 (and (bvsle #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1995 (_keys!3641 newMap!16)) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10597 (= (arrayCountValidKeys!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) lt!22956)))

(assert (= (and d!10597 c!7152) b!57617))

(assert (= (and d!10597 (not c!7152)) b!57620))

(assert (= (and b!57620 c!7151) b!57619))

(assert (= (and b!57620 (not c!7151)) b!57618))

(assert (= (or b!57619 b!57618) bm!4184))

(declare-fun m!48477 () Bool)

(assert (=> bm!4184 m!48477))

(assert (=> b!57620 m!48177))

(assert (=> b!57620 m!48177))

(assert (=> b!57620 m!48187))

(assert (=> b!57397 d!10597))

(declare-fun d!10599 () Bool)

(assert (=> d!10599 (= (apply!65 lt!22730 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2484 () Bool)

(assert (= bs!2484 d!10599))

(assert (=> bs!2484 m!48257))

(assert (=> bs!2484 m!48257))

(declare-fun m!48479 () Bool)

(assert (=> bs!2484 m!48479))

(assert (=> b!57362 d!10599))

(declare-fun d!10601 () Bool)

(assert (=> d!10601 (= (get!1067 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2365 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57299 d!10601))

(assert (=> d!10525 d!10529))

(declare-fun d!10603 () Bool)

(assert (=> d!10603 (not (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!10603 true))

(declare-fun _$68!28 () Unit!1484)

(assert (=> d!10603 (= (choose!68 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417)) _$68!28)))

(declare-fun bs!2485 () Bool)

(assert (= bs!2485 d!10603))

(assert (=> bs!2485 m!47875))

(assert (=> bs!2485 m!47897))

(assert (=> d!10525 d!10603))

(declare-fun d!10605 () Bool)

(declare-fun res!32208 () Bool)

(declare-fun e!37951 () Bool)

(assert (=> d!10605 (=> (not res!32208) (not e!37951))))

(assert (=> d!10605 (= res!32208 (simpleValid!41 (_2!1016 lt!22658)))))

(assert (=> d!10605 (= (valid!260 (_2!1016 lt!22658)) e!37951)))

(declare-fun b!57621 () Bool)

(declare-fun res!32209 () Bool)

(assert (=> b!57621 (=> (not res!32209) (not e!37951))))

(assert (=> b!57621 (= res!32209 (= (arrayCountValidKeys!0 (_keys!3641 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))) (_size!354 (_2!1016 lt!22658))))))

(declare-fun b!57622 () Bool)

(declare-fun res!32210 () Bool)

(assert (=> b!57622 (=> (not res!32210) (not e!37951))))

(assert (=> b!57622 (= res!32210 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658))))))

(declare-fun b!57623 () Bool)

(assert (=> b!57623 (= e!37951 (arrayNoDuplicates!0 (_keys!3641 (_2!1016 lt!22658)) #b00000000000000000000000000000000 Nil!1417))))

(assert (= (and d!10605 res!32208) b!57621))

(assert (= (and b!57621 res!32209) b!57622))

(assert (= (and b!57622 res!32210) b!57623))

(declare-fun m!48481 () Bool)

(assert (=> d!10605 m!48481))

(declare-fun m!48483 () Bool)

(assert (=> b!57621 m!48483))

(declare-fun m!48485 () Bool)

(assert (=> b!57622 m!48485))

(declare-fun m!48487 () Bool)

(assert (=> b!57623 m!48487))

(assert (=> d!10517 d!10605))

(assert (=> d!10517 d!10547))

(declare-fun d!10607 () Bool)

(declare-fun e!37952 () Bool)

(assert (=> d!10607 e!37952))

(declare-fun res!32211 () Bool)

(assert (=> d!10607 (=> (not res!32211) (not e!37952))))

(declare-fun lt!22960 () ListLongMap!1339)

(assert (=> d!10607 (= res!32211 (contains!675 lt!22960 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun lt!22958 () List!1419)

(assert (=> d!10607 (= lt!22960 (ListLongMap!1340 lt!22958))))

(declare-fun lt!22959 () Unit!1484)

(declare-fun lt!22957 () Unit!1484)

(assert (=> d!10607 (= lt!22959 lt!22957)))

(assert (=> d!10607 (= (getValueByKey!124 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (Some!129 (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10607 (= lt!22957 (lemmaContainsTupThenGetReturnValue!41 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10607 (= lt!22958 (insertStrictlySorted!44 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10607 (= (+!79 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22960)))

(declare-fun b!57624 () Bool)

(declare-fun res!32212 () Bool)

(assert (=> b!57624 (=> (not res!32212) (not e!37952))))

(assert (=> b!57624 (= res!32212 (= (getValueByKey!124 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (Some!129 (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun b!57625 () Bool)

(assert (=> b!57625 (= e!37952 (contains!677 (toList!685 lt!22960) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (= (and d!10607 res!32211) b!57624))

(assert (= (and b!57624 res!32212) b!57625))

(declare-fun m!48489 () Bool)

(assert (=> d!10607 m!48489))

(declare-fun m!48491 () Bool)

(assert (=> d!10607 m!48491))

(declare-fun m!48493 () Bool)

(assert (=> d!10607 m!48493))

(declare-fun m!48495 () Bool)

(assert (=> d!10607 m!48495))

(declare-fun m!48497 () Bool)

(assert (=> b!57624 m!48497))

(declare-fun m!48499 () Bool)

(assert (=> b!57625 m!48499))

(assert (=> bm!4136 d!10607))

(declare-fun d!10609 () Bool)

(assert (=> d!10609 (= (inRange!0 (ite c!7059 (ite c!7065 (index!3003 lt!22648) (ite c!7064 (index!3002 lt!22653) (index!3005 lt!22653))) (ite c!7068 (index!3003 lt!22662) (ite c!7056 (index!3002 lt!22660) (index!3005 lt!22660)))) (mask!5895 newMap!16)) (and (bvsge (ite c!7059 (ite c!7065 (index!3003 lt!22648) (ite c!7064 (index!3002 lt!22653) (index!3005 lt!22653))) (ite c!7068 (index!3003 lt!22662) (ite c!7056 (index!3002 lt!22660) (index!3005 lt!22660)))) #b00000000000000000000000000000000) (bvslt (ite c!7059 (ite c!7065 (index!3003 lt!22648) (ite c!7064 (index!3002 lt!22653) (index!3005 lt!22653))) (ite c!7068 (index!3003 lt!22662) (ite c!7056 (index!3002 lt!22660) (index!3005 lt!22660)))) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4114 d!10609))

(declare-fun b!57650 () Bool)

(declare-fun e!37973 () Bool)

(assert (=> b!57650 (= e!37973 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57650 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun d!10611 () Bool)

(declare-fun e!37968 () Bool)

(assert (=> d!10611 e!37968))

(declare-fun res!32221 () Bool)

(assert (=> d!10611 (=> (not res!32221) (not e!37968))))

(declare-fun lt!22977 () ListLongMap!1339)

(assert (=> d!10611 (= res!32221 (not (contains!675 lt!22977 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!37969 () ListLongMap!1339)

(assert (=> d!10611 (= lt!22977 e!37969)))

(declare-fun c!7164 () Bool)

(assert (=> d!10611 (= c!7164 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10611 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992))))))

(assert (=> d!10611 (= (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) lt!22977)))

(declare-fun b!57651 () Bool)

(declare-fun e!37971 () Bool)

(declare-fun e!37970 () Bool)

(assert (=> b!57651 (= e!37971 e!37970)))

(assert (=> b!57651 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun res!32223 () Bool)

(assert (=> b!57651 (= res!32223 (contains!675 lt!22977 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57651 (=> (not res!32223) (not e!37970))))

(declare-fun b!57652 () Bool)

(assert (=> b!57652 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> b!57652 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> b!57652 (= e!37970 (= (apply!65 lt!22977 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!4187 () Bool)

(declare-fun call!4190 () ListLongMap!1339)

(assert (=> bm!4187 (= call!4190 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!57653 () Bool)

(declare-fun e!37967 () Bool)

(assert (=> b!57653 (= e!37971 e!37967)))

(declare-fun c!7161 () Bool)

(assert (=> b!57653 (= c!7161 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57654 () Bool)

(assert (=> b!57654 (= e!37969 (ListLongMap!1340 Nil!1416))))

(declare-fun b!57655 () Bool)

(assert (=> b!57655 (= e!37968 e!37971)))

(declare-fun c!7162 () Bool)

(assert (=> b!57655 (= c!7162 e!37973)))

(declare-fun res!32224 () Bool)

(assert (=> b!57655 (=> (not res!32224) (not e!37973))))

(assert (=> b!57655 (= res!32224 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57656 () Bool)

(declare-fun isEmpty!297 (ListLongMap!1339) Bool)

(assert (=> b!57656 (= e!37967 (isEmpty!297 lt!22977))))

(declare-fun b!57657 () Bool)

(declare-fun e!37972 () ListLongMap!1339)

(assert (=> b!57657 (= e!37969 e!37972)))

(declare-fun c!7163 () Bool)

(assert (=> b!57657 (= c!7163 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57658 () Bool)

(assert (=> b!57658 (= e!37972 call!4190)))

(declare-fun b!57659 () Bool)

(declare-fun res!32222 () Bool)

(assert (=> b!57659 (=> (not res!32222) (not e!37968))))

(assert (=> b!57659 (= res!32222 (not (contains!675 lt!22977 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57660 () Bool)

(declare-fun lt!22979 () Unit!1484)

(declare-fun lt!22975 () Unit!1484)

(assert (=> b!57660 (= lt!22979 lt!22975)))

(declare-fun lt!22976 () (_ BitVec 64))

(declare-fun lt!22978 () ListLongMap!1339)

(declare-fun lt!22980 () V!2833)

(declare-fun lt!22981 () (_ BitVec 64))

(assert (=> b!57660 (not (contains!675 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980)) lt!22981))))

(declare-fun addStillNotContains!16 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> b!57660 (= lt!22975 (addStillNotContains!16 lt!22978 lt!22976 lt!22980 lt!22981))))

(assert (=> b!57660 (= lt!22981 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57660 (= lt!22980 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57660 (= lt!22976 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57660 (= lt!22978 call!4190)))

(assert (=> b!57660 (= e!37972 (+!79 call!4190 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!57661 () Bool)

(assert (=> b!57661 (= e!37967 (= lt!22977 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10611 c!7164) b!57654))

(assert (= (and d!10611 (not c!7164)) b!57657))

(assert (= (and b!57657 c!7163) b!57660))

(assert (= (and b!57657 (not c!7163)) b!57658))

(assert (= (or b!57660 b!57658) bm!4187))

(assert (= (and d!10611 res!32221) b!57659))

(assert (= (and b!57659 res!32222) b!57655))

(assert (= (and b!57655 res!32224) b!57650))

(assert (= (and b!57655 c!7162) b!57651))

(assert (= (and b!57655 (not c!7162)) b!57653))

(assert (= (and b!57651 res!32223) b!57652))

(assert (= (and b!57653 c!7161) b!57661))

(assert (= (and b!57653 (not c!7161)) b!57656))

(declare-fun b_lambda!2507 () Bool)

(assert (=> (not b_lambda!2507) (not b!57652)))

(assert (=> b!57652 t!4730))

(declare-fun b_and!3473 () Bool)

(assert (= b_and!3469 (and (=> t!4730 result!2333) b_and!3473)))

(assert (=> b!57652 t!4732))

(declare-fun b_and!3475 () Bool)

(assert (= b_and!3471 (and (=> t!4732 result!2337) b_and!3475)))

(declare-fun b_lambda!2509 () Bool)

(assert (=> (not b_lambda!2509) (not b!57660)))

(assert (=> b!57660 t!4730))

(declare-fun b_and!3477 () Bool)

(assert (= b_and!3473 (and (=> t!4730 result!2333) b_and!3477)))

(assert (=> b!57660 t!4732))

(declare-fun b_and!3479 () Bool)

(assert (= b_and!3475 (and (=> t!4732 result!2337) b_and!3479)))

(declare-fun m!48501 () Bool)

(assert (=> d!10611 m!48501))

(assert (=> d!10611 m!47907))

(assert (=> b!57652 m!48069))

(declare-fun m!48503 () Bool)

(assert (=> b!57652 m!48503))

(assert (=> b!57652 m!48071))

(assert (=> b!57652 m!48071))

(assert (=> b!57652 m!47871))

(assert (=> b!57652 m!48075))

(assert (=> b!57652 m!48069))

(assert (=> b!57652 m!47871))

(declare-fun m!48505 () Bool)

(assert (=> b!57661 m!48505))

(assert (=> b!57650 m!48069))

(assert (=> b!57650 m!48069))

(assert (=> b!57650 m!48077))

(declare-fun m!48507 () Bool)

(assert (=> b!57656 m!48507))

(declare-fun m!48509 () Bool)

(assert (=> b!57659 m!48509))

(assert (=> b!57651 m!48069))

(assert (=> b!57651 m!48069))

(declare-fun m!48511 () Bool)

(assert (=> b!57651 m!48511))

(declare-fun m!48513 () Bool)

(assert (=> b!57660 m!48513))

(assert (=> b!57660 m!48071))

(assert (=> b!57660 m!48071))

(assert (=> b!57660 m!47871))

(assert (=> b!57660 m!48075))

(declare-fun m!48515 () Bool)

(assert (=> b!57660 m!48515))

(assert (=> b!57660 m!48069))

(assert (=> b!57660 m!47871))

(declare-fun m!48517 () Bool)

(assert (=> b!57660 m!48517))

(declare-fun m!48519 () Bool)

(assert (=> b!57660 m!48519))

(assert (=> b!57660 m!48517))

(assert (=> bm!4187 m!48505))

(assert (=> b!57657 m!48069))

(assert (=> b!57657 m!48069))

(assert (=> b!57657 m!48077))

(assert (=> bm!4137 d!10611))

(assert (=> b!57388 d!10581))

(declare-fun d!10613 () Bool)

(declare-fun e!37975 () Bool)

(assert (=> d!10613 e!37975))

(declare-fun res!32225 () Bool)

(assert (=> d!10613 (=> res!32225 e!37975)))

(declare-fun lt!22983 () Bool)

(assert (=> d!10613 (= res!32225 (not lt!22983))))

(declare-fun lt!22984 () Bool)

(assert (=> d!10613 (= lt!22983 lt!22984)))

(declare-fun lt!22985 () Unit!1484)

(declare-fun e!37974 () Unit!1484)

(assert (=> d!10613 (= lt!22985 e!37974)))

(declare-fun c!7165 () Bool)

(assert (=> d!10613 (= c!7165 lt!22984)))

(assert (=> d!10613 (= lt!22984 (containsKey!127 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (=> d!10613 (= (contains!675 call!4122 (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))) lt!22983)))

(declare-fun b!57662 () Bool)

(declare-fun lt!22982 () Unit!1484)

(assert (=> b!57662 (= e!37974 lt!22982)))

(assert (=> b!57662 (= lt!22982 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (=> b!57662 (isDefined!76 (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(declare-fun b!57663 () Bool)

(declare-fun Unit!1504 () Unit!1484)

(assert (=> b!57663 (= e!37974 Unit!1504)))

(declare-fun b!57664 () Bool)

(assert (=> b!57664 (= e!37975 (isDefined!76 (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))))

(assert (= (and d!10613 c!7165) b!57662))

(assert (= (and d!10613 (not c!7165)) b!57663))

(assert (= (and d!10613 (not res!32225)) b!57664))

(assert (=> d!10613 m!48057))

(declare-fun m!48521 () Bool)

(assert (=> d!10613 m!48521))

(assert (=> b!57662 m!48057))

(declare-fun m!48523 () Bool)

(assert (=> b!57662 m!48523))

(assert (=> b!57662 m!48057))

(declare-fun m!48525 () Bool)

(assert (=> b!57662 m!48525))

(assert (=> b!57662 m!48525))

(declare-fun m!48527 () Bool)

(assert (=> b!57662 m!48527))

(assert (=> b!57664 m!48057))

(assert (=> b!57664 m!48525))

(assert (=> b!57664 m!48525))

(assert (=> b!57664 m!48527))

(assert (=> b!57264 d!10613))

(declare-fun d!10615 () Bool)

(declare-fun e!37978 () Bool)

(assert (=> d!10615 e!37978))

(declare-fun res!32228 () Bool)

(assert (=> d!10615 (=> (not res!32228) (not e!37978))))

(assert (=> d!10615 (= res!32228 (and (bvsge (index!3003 lt!22638) #b00000000000000000000000000000000) (bvslt (index!3003 lt!22638) (size!1995 (_keys!3641 newMap!16)))))))

(declare-fun lt!22988 () Unit!1484)

(declare-fun choose!298 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) Int) Unit!1484)

(assert (=> d!10615 (= lt!22988 (choose!298 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10615 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10615 (= (lemmaValidKeyInArrayIsInListMap!74 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (defaultEntry!2021 newMap!16)) lt!22988)))

(declare-fun b!57667 () Bool)

(assert (=> b!57667 (= e!37978 (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (= (and d!10615 res!32228) b!57667))

(declare-fun m!48529 () Bool)

(assert (=> d!10615 m!48529))

(assert (=> d!10615 m!48151))

(declare-fun m!48531 () Bool)

(assert (=> b!57667 m!48531))

(assert (=> b!57667 m!48057))

(assert (=> b!57667 m!48531))

(assert (=> b!57667 m!48057))

(declare-fun m!48533 () Bool)

(assert (=> b!57667 m!48533))

(assert (=> b!57264 d!10615))

(declare-fun d!10617 () Bool)

(declare-fun e!37981 () Bool)

(assert (=> d!10617 e!37981))

(declare-fun res!32231 () Bool)

(assert (=> d!10617 (=> (not res!32231) (not e!37981))))

(assert (=> d!10617 (= res!32231 (and (bvsge (index!3003 lt!22638) #b00000000000000000000000000000000) (bvslt (index!3003 lt!22638) (size!1996 (_values!2004 newMap!16)))))))

(declare-fun lt!22991 () Unit!1484)

(declare-fun choose!299 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) (_ BitVec 64) V!2833 Int) Unit!1484)

(assert (=> d!10617 (= lt!22991 (choose!299 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10617 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10617 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)) lt!22991)))

(declare-fun b!57670 () Bool)

(assert (=> b!57670 (= e!37981 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))))))

(assert (= (and d!10617 res!32231) b!57670))

(assert (=> d!10617 m!47875))

(assert (=> d!10617 m!47873))

(declare-fun m!48535 () Bool)

(assert (=> d!10617 m!48535))

(assert (=> d!10617 m!48151))

(assert (=> b!57670 m!48027))

(assert (=> b!57670 m!48027))

(assert (=> b!57670 m!48275))

(assert (=> b!57670 m!48023))

(declare-fun m!48537 () Bool)

(assert (=> b!57670 m!48537))

(assert (=> b!57264 d!10617))

(assert (=> bm!4118 d!10553))

(declare-fun d!10619 () Bool)

(declare-fun res!32232 () Bool)

(declare-fun e!37982 () Bool)

(assert (=> d!10619 (=> res!32232 e!37982)))

(assert (=> d!10619 (= res!32232 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10619 (= (arrayNoDuplicates!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 Nil!1417) e!37982)))

(declare-fun b!57671 () Bool)

(declare-fun e!37985 () Bool)

(declare-fun call!4191 () Bool)

(assert (=> b!57671 (= e!37985 call!4191)))

(declare-fun bm!4188 () Bool)

(declare-fun c!7166 () Bool)

(assert (=> bm!4188 (= call!4191 (arrayNoDuplicates!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7166 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) Nil!1417) Nil!1417)))))

(declare-fun b!57672 () Bool)

(declare-fun e!37983 () Bool)

(assert (=> b!57672 (= e!37982 e!37983)))

(declare-fun res!32233 () Bool)

(assert (=> b!57672 (=> (not res!32233) (not e!37983))))

(declare-fun e!37984 () Bool)

(assert (=> b!57672 (= res!32233 (not e!37984))))

(declare-fun res!32234 () Bool)

(assert (=> b!57672 (=> (not res!32234) (not e!37984))))

(assert (=> b!57672 (= res!32234 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57673 () Bool)

(assert (=> b!57673 (= e!37983 e!37985)))

(assert (=> b!57673 (= c!7166 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57674 () Bool)

(assert (=> b!57674 (= e!37985 call!4191)))

(declare-fun b!57675 () Bool)

(assert (=> b!57675 (= e!37984 (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10619 (not res!32232)) b!57672))

(assert (= (and b!57672 res!32234) b!57675))

(assert (= (and b!57672 res!32233) b!57673))

(assert (= (and b!57673 c!7166) b!57674))

(assert (= (and b!57673 (not c!7166)) b!57671))

(assert (= (or b!57674 b!57671) bm!4188))

(assert (=> bm!4188 m!48177))

(declare-fun m!48539 () Bool)

(assert (=> bm!4188 m!48539))

(assert (=> b!57672 m!48177))

(assert (=> b!57672 m!48177))

(assert (=> b!57672 m!48187))

(assert (=> b!57673 m!48177))

(assert (=> b!57673 m!48177))

(assert (=> b!57673 m!48187))

(assert (=> b!57675 m!48177))

(assert (=> b!57675 m!48177))

(declare-fun m!48541 () Bool)

(assert (=> b!57675 m!48541))

(assert (=> b!57399 d!10619))

(declare-fun d!10621 () Bool)

(declare-fun e!37987 () Bool)

(assert (=> d!10621 e!37987))

(declare-fun res!32235 () Bool)

(assert (=> d!10621 (=> res!32235 e!37987)))

(declare-fun lt!22993 () Bool)

(assert (=> d!10621 (= res!32235 (not lt!22993))))

(declare-fun lt!22994 () Bool)

(assert (=> d!10621 (= lt!22993 lt!22994)))

(declare-fun lt!22995 () Unit!1484)

(declare-fun e!37986 () Unit!1484)

(assert (=> d!10621 (= lt!22995 e!37986)))

(declare-fun c!7167 () Bool)

(assert (=> d!10621 (= c!7167 lt!22994)))

(assert (=> d!10621 (= lt!22994 (containsKey!127 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10621 (= (contains!675 call!4101 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!22993)))

(declare-fun b!57676 () Bool)

(declare-fun lt!22992 () Unit!1484)

(assert (=> b!57676 (= e!37986 lt!22992)))

(assert (=> b!57676 (= lt!22992 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57676 (isDefined!76 (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57677 () Bool)

(declare-fun Unit!1505 () Unit!1484)

(assert (=> b!57677 (= e!37986 Unit!1505)))

(declare-fun b!57678 () Bool)

(assert (=> b!57678 (= e!37987 (isDefined!76 (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10621 c!7167) b!57676))

(assert (= (and d!10621 (not c!7167)) b!57677))

(assert (= (and d!10621 (not res!32235)) b!57678))

(assert (=> d!10621 m!47875))

(declare-fun m!48543 () Bool)

(assert (=> d!10621 m!48543))

(assert (=> b!57676 m!47875))

(declare-fun m!48545 () Bool)

(assert (=> b!57676 m!48545))

(assert (=> b!57676 m!47875))

(declare-fun m!48547 () Bool)

(assert (=> b!57676 m!48547))

(assert (=> b!57676 m!48547))

(declare-fun m!48549 () Bool)

(assert (=> b!57676 m!48549))

(assert (=> b!57678 m!47875))

(assert (=> b!57678 m!48547))

(assert (=> b!57678 m!48547))

(assert (=> b!57678 m!48549))

(assert (=> b!57274 d!10621))

(declare-fun d!10623 () Bool)

(assert (=> d!10623 (= (apply!65 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22723) (apply!65 lt!22722 lt!22723))))

(declare-fun lt!22998 () Unit!1484)

(declare-fun choose!300 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> d!10623 (= lt!22998 (choose!300 lt!22722 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22723))))

(declare-fun e!37990 () Bool)

(assert (=> d!10623 e!37990))

(declare-fun res!32238 () Bool)

(assert (=> d!10623 (=> (not res!32238) (not e!37990))))

(assert (=> d!10623 (= res!32238 (contains!675 lt!22722 lt!22723))))

(assert (=> d!10623 (= (addApplyDifferent!41 lt!22722 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22723) lt!22998)))

(declare-fun b!57682 () Bool)

(assert (=> b!57682 (= e!37990 (not (= lt!22723 lt!22709)))))

(assert (= (and d!10623 res!32238) b!57682))

(declare-fun m!48551 () Bool)

(assert (=> d!10623 m!48551))

(assert (=> d!10623 m!48105))

(assert (=> d!10623 m!48087))

(assert (=> d!10623 m!48087))

(assert (=> d!10623 m!48089))

(declare-fun m!48553 () Bool)

(assert (=> d!10623 m!48553))

(assert (=> b!57347 d!10623))

(declare-fun d!10625 () Bool)

(assert (=> d!10625 (= (apply!65 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22723) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22723)))))

(declare-fun bs!2486 () Bool)

(assert (= bs!2486 d!10625))

(declare-fun m!48555 () Bool)

(assert (=> bs!2486 m!48555))

(assert (=> bs!2486 m!48555))

(declare-fun m!48557 () Bool)

(assert (=> bs!2486 m!48557))

(assert (=> b!57347 d!10625))

(declare-fun d!10627 () Bool)

(declare-fun e!37991 () Bool)

(assert (=> d!10627 e!37991))

(declare-fun res!32239 () Bool)

(assert (=> d!10627 (=> (not res!32239) (not e!37991))))

(declare-fun lt!23002 () ListLongMap!1339)

(assert (=> d!10627 (= res!32239 (contains!675 lt!23002 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23000 () List!1419)

(assert (=> d!10627 (= lt!23002 (ListLongMap!1340 lt!23000))))

(declare-fun lt!23001 () Unit!1484)

(declare-fun lt!22999 () Unit!1484)

(assert (=> d!10627 (= lt!23001 lt!22999)))

(assert (=> d!10627 (= (getValueByKey!124 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= lt!22999 (lemmaContainsTupThenGetReturnValue!41 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= lt!23000 (insertStrictlySorted!44 (toList!685 lt!22729) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23002)))

(declare-fun b!57683 () Bool)

(declare-fun res!32240 () Bool)

(assert (=> b!57683 (=> (not res!32240) (not e!37991))))

(assert (=> b!57683 (= res!32240 (= (getValueByKey!124 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57684 () Bool)

(assert (=> b!57684 (= e!37991 (contains!677 (toList!685 lt!23002) (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10627 res!32239) b!57683))

(assert (= (and b!57683 res!32240) b!57684))

(declare-fun m!48559 () Bool)

(assert (=> d!10627 m!48559))

(declare-fun m!48561 () Bool)

(assert (=> d!10627 m!48561))

(declare-fun m!48563 () Bool)

(assert (=> d!10627 m!48563))

(declare-fun m!48565 () Bool)

(assert (=> d!10627 m!48565))

(declare-fun m!48567 () Bool)

(assert (=> b!57683 m!48567))

(declare-fun m!48569 () Bool)

(assert (=> b!57684 m!48569))

(assert (=> b!57347 d!10627))

(declare-fun d!10629 () Bool)

(assert (=> d!10629 (= (apply!65 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22721) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22721)))))

(declare-fun bs!2487 () Bool)

(assert (= bs!2487 d!10629))

(declare-fun m!48571 () Bool)

(assert (=> bs!2487 m!48571))

(assert (=> bs!2487 m!48571))

(declare-fun m!48573 () Bool)

(assert (=> bs!2487 m!48573))

(assert (=> b!57347 d!10629))

(declare-fun d!10631 () Bool)

(declare-fun e!37992 () Bool)

(assert (=> d!10631 e!37992))

(declare-fun res!32241 () Bool)

(assert (=> d!10631 (=> (not res!32241) (not e!37992))))

(declare-fun lt!23006 () ListLongMap!1339)

(assert (=> d!10631 (= res!32241 (contains!675 lt!23006 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23004 () List!1419)

(assert (=> d!10631 (= lt!23006 (ListLongMap!1340 lt!23004))))

(declare-fun lt!23005 () Unit!1484)

(declare-fun lt!23003 () Unit!1484)

(assert (=> d!10631 (= lt!23005 lt!23003)))

(assert (=> d!10631 (= (getValueByKey!124 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10631 (= lt!23003 (lemmaContainsTupThenGetReturnValue!41 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10631 (= lt!23004 (insertStrictlySorted!44 (toList!685 lt!22722) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10631 (= (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23006)))

(declare-fun b!57685 () Bool)

(declare-fun res!32242 () Bool)

(assert (=> b!57685 (=> (not res!32242) (not e!37992))))

(assert (=> b!57685 (= res!32242 (= (getValueByKey!124 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57686 () Bool)

(assert (=> b!57686 (= e!37992 (contains!677 (toList!685 lt!23006) (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10631 res!32241) b!57685))

(assert (= (and b!57685 res!32242) b!57686))

(declare-fun m!48575 () Bool)

(assert (=> d!10631 m!48575))

(declare-fun m!48577 () Bool)

(assert (=> d!10631 m!48577))

(declare-fun m!48579 () Bool)

(assert (=> d!10631 m!48579))

(declare-fun m!48581 () Bool)

(assert (=> d!10631 m!48581))

(declare-fun m!48583 () Bool)

(assert (=> b!57685 m!48583))

(declare-fun m!48585 () Bool)

(assert (=> b!57686 m!48585))

(assert (=> b!57347 d!10631))

(declare-fun d!10633 () Bool)

(declare-fun e!37993 () Bool)

(assert (=> d!10633 e!37993))

(declare-fun res!32243 () Bool)

(assert (=> d!10633 (=> (not res!32243) (not e!37993))))

(declare-fun lt!23010 () ListLongMap!1339)

(assert (=> d!10633 (= res!32243 (contains!675 lt!23010 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23008 () List!1419)

(assert (=> d!10633 (= lt!23010 (ListLongMap!1340 lt!23008))))

(declare-fun lt!23009 () Unit!1484)

(declare-fun lt!23007 () Unit!1484)

(assert (=> d!10633 (= lt!23009 lt!23007)))

(assert (=> d!10633 (= (getValueByKey!124 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= lt!23007 (lemmaContainsTupThenGetReturnValue!41 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= lt!23008 (insertStrictlySorted!44 (toList!685 lt!22713) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23010)))

(declare-fun b!57687 () Bool)

(declare-fun res!32244 () Bool)

(assert (=> b!57687 (=> (not res!32244) (not e!37993))))

(assert (=> b!57687 (= res!32244 (= (getValueByKey!124 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57688 () Bool)

(assert (=> b!57688 (= e!37993 (contains!677 (toList!685 lt!23010) (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10633 res!32243) b!57687))

(assert (= (and b!57687 res!32244) b!57688))

(declare-fun m!48587 () Bool)

(assert (=> d!10633 m!48587))

(declare-fun m!48589 () Bool)

(assert (=> d!10633 m!48589))

(declare-fun m!48591 () Bool)

(assert (=> d!10633 m!48591))

(declare-fun m!48593 () Bool)

(assert (=> d!10633 m!48593))

(declare-fun m!48595 () Bool)

(assert (=> b!57687 m!48595))

(declare-fun m!48597 () Bool)

(assert (=> b!57688 m!48597))

(assert (=> b!57347 d!10633))

(declare-fun d!10635 () Bool)

(assert (=> d!10635 (= (apply!65 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22717) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22717)))))

(declare-fun bs!2488 () Bool)

(assert (= bs!2488 d!10635))

(declare-fun m!48599 () Bool)

(assert (=> bs!2488 m!48599))

(assert (=> bs!2488 m!48599))

(declare-fun m!48601 () Bool)

(assert (=> bs!2488 m!48601))

(assert (=> b!57347 d!10635))

(declare-fun d!10637 () Bool)

(assert (=> d!10637 (= (apply!65 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22721) (apply!65 lt!22711 lt!22721))))

(declare-fun lt!23011 () Unit!1484)

(assert (=> d!10637 (= lt!23011 (choose!300 lt!22711 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22721))))

(declare-fun e!37994 () Bool)

(assert (=> d!10637 e!37994))

(declare-fun res!32245 () Bool)

(assert (=> d!10637 (=> (not res!32245) (not e!37994))))

(assert (=> d!10637 (= res!32245 (contains!675 lt!22711 lt!22721))))

(assert (=> d!10637 (= (addApplyDifferent!41 lt!22711 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22721) lt!23011)))

(declare-fun b!57689 () Bool)

(assert (=> b!57689 (= e!37994 (not (= lt!22721 lt!22725)))))

(assert (= (and d!10637 res!32245) b!57689))

(declare-fun m!48603 () Bool)

(assert (=> d!10637 m!48603))

(assert (=> d!10637 m!48109))

(assert (=> d!10637 m!48099))

(assert (=> d!10637 m!48099))

(assert (=> d!10637 m!48117))

(declare-fun m!48605 () Bool)

(assert (=> d!10637 m!48605))

(assert (=> b!57347 d!10637))

(declare-fun d!10639 () Bool)

(declare-fun e!37995 () Bool)

(assert (=> d!10639 e!37995))

(declare-fun res!32246 () Bool)

(assert (=> d!10639 (=> (not res!32246) (not e!37995))))

(declare-fun lt!23015 () ListLongMap!1339)

(assert (=> d!10639 (= res!32246 (contains!675 lt!23015 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23013 () List!1419)

(assert (=> d!10639 (= lt!23015 (ListLongMap!1340 lt!23013))))

(declare-fun lt!23014 () Unit!1484)

(declare-fun lt!23012 () Unit!1484)

(assert (=> d!10639 (= lt!23014 lt!23012)))

(assert (=> d!10639 (= (getValueByKey!124 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10639 (= lt!23012 (lemmaContainsTupThenGetReturnValue!41 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10639 (= lt!23013 (insertStrictlySorted!44 (toList!685 lt!22711) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10639 (= (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23015)))

(declare-fun b!57690 () Bool)

(declare-fun res!32247 () Bool)

(assert (=> b!57690 (=> (not res!32247) (not e!37995))))

(assert (=> b!57690 (= res!32247 (= (getValueByKey!124 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57691 () Bool)

(assert (=> b!57691 (= e!37995 (contains!677 (toList!685 lt!23015) (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10639 res!32246) b!57690))

(assert (= (and b!57690 res!32247) b!57691))

(declare-fun m!48607 () Bool)

(assert (=> d!10639 m!48607))

(declare-fun m!48609 () Bool)

(assert (=> d!10639 m!48609))

(declare-fun m!48611 () Bool)

(assert (=> d!10639 m!48611))

(declare-fun m!48613 () Bool)

(assert (=> d!10639 m!48613))

(declare-fun m!48615 () Bool)

(assert (=> b!57690 m!48615))

(declare-fun m!48617 () Bool)

(assert (=> b!57691 m!48617))

(assert (=> b!57347 d!10639))

(declare-fun d!10641 () Bool)

(assert (=> d!10641 (= (apply!65 lt!22729 lt!22717) (get!1069 (getValueByKey!124 (toList!685 lt!22729) lt!22717)))))

(declare-fun bs!2489 () Bool)

(assert (= bs!2489 d!10641))

(declare-fun m!48619 () Bool)

(assert (=> bs!2489 m!48619))

(assert (=> bs!2489 m!48619))

(declare-fun m!48621 () Bool)

(assert (=> bs!2489 m!48621))

(assert (=> b!57347 d!10641))

(assert (=> b!57347 d!10611))

(declare-fun d!10643 () Bool)

(declare-fun e!37997 () Bool)

(assert (=> d!10643 e!37997))

(declare-fun res!32248 () Bool)

(assert (=> d!10643 (=> res!32248 e!37997)))

(declare-fun lt!23017 () Bool)

(assert (=> d!10643 (= res!32248 (not lt!23017))))

(declare-fun lt!23018 () Bool)

(assert (=> d!10643 (= lt!23017 lt!23018)))

(declare-fun lt!23019 () Unit!1484)

(declare-fun e!37996 () Unit!1484)

(assert (=> d!10643 (= lt!23019 e!37996)))

(declare-fun c!7168 () Bool)

(assert (=> d!10643 (= c!7168 lt!23018)))

(assert (=> d!10643 (= lt!23018 (containsKey!127 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(assert (=> d!10643 (= (contains!675 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22724) lt!23017)))

(declare-fun b!57692 () Bool)

(declare-fun lt!23016 () Unit!1484)

(assert (=> b!57692 (= e!37996 lt!23016)))

(assert (=> b!57692 (= lt!23016 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(assert (=> b!57692 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(declare-fun b!57693 () Bool)

(declare-fun Unit!1506 () Unit!1484)

(assert (=> b!57693 (= e!37996 Unit!1506)))

(declare-fun b!57694 () Bool)

(assert (=> b!57694 (= e!37997 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724)))))

(assert (= (and d!10643 c!7168) b!57692))

(assert (= (and d!10643 (not c!7168)) b!57693))

(assert (= (and d!10643 (not res!32248)) b!57694))

(declare-fun m!48623 () Bool)

(assert (=> d!10643 m!48623))

(declare-fun m!48625 () Bool)

(assert (=> b!57692 m!48625))

(declare-fun m!48627 () Bool)

(assert (=> b!57692 m!48627))

(assert (=> b!57692 m!48627))

(declare-fun m!48629 () Bool)

(assert (=> b!57692 m!48629))

(assert (=> b!57694 m!48627))

(assert (=> b!57694 m!48627))

(assert (=> b!57694 m!48629))

(assert (=> b!57347 d!10643))

(declare-fun d!10645 () Bool)

(assert (=> d!10645 (= (apply!65 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22717) (apply!65 lt!22729 lt!22717))))

(declare-fun lt!23020 () Unit!1484)

(assert (=> d!10645 (= lt!23020 (choose!300 lt!22729 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22717))))

(declare-fun e!37998 () Bool)

(assert (=> d!10645 e!37998))

(declare-fun res!32249 () Bool)

(assert (=> d!10645 (=> (not res!32249) (not e!37998))))

(assert (=> d!10645 (= res!32249 (contains!675 lt!22729 lt!22717))))

(assert (=> d!10645 (= (addApplyDifferent!41 lt!22729 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22717) lt!23020)))

(declare-fun b!57695 () Bool)

(assert (=> b!57695 (= e!37998 (not (= lt!22717 lt!22727)))))

(assert (= (and d!10645 res!32249) b!57695))

(declare-fun m!48631 () Bool)

(assert (=> d!10645 m!48631))

(assert (=> d!10645 m!48093))

(assert (=> d!10645 m!48101))

(assert (=> d!10645 m!48101))

(assert (=> d!10645 m!48103))

(declare-fun m!48633 () Bool)

(assert (=> d!10645 m!48633))

(assert (=> b!57347 d!10645))

(declare-fun d!10647 () Bool)

(assert (=> d!10647 (= (apply!65 lt!22711 lt!22721) (get!1069 (getValueByKey!124 (toList!685 lt!22711) lt!22721)))))

(declare-fun bs!2490 () Bool)

(assert (= bs!2490 d!10647))

(declare-fun m!48635 () Bool)

(assert (=> bs!2490 m!48635))

(assert (=> bs!2490 m!48635))

(declare-fun m!48637 () Bool)

(assert (=> bs!2490 m!48637))

(assert (=> b!57347 d!10647))

(declare-fun d!10649 () Bool)

(assert (=> d!10649 (contains!675 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22724)))

(declare-fun lt!23023 () Unit!1484)

(declare-fun choose!301 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> d!10649 (= lt!23023 (choose!301 lt!22713 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22724))))

(assert (=> d!10649 (contains!675 lt!22713 lt!22724)))

(assert (=> d!10649 (= (addStillContains!41 lt!22713 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22724) lt!23023)))

(declare-fun bs!2491 () Bool)

(assert (= bs!2491 d!10649))

(assert (=> bs!2491 m!48095))

(assert (=> bs!2491 m!48095))

(assert (=> bs!2491 m!48111))

(declare-fun m!48639 () Bool)

(assert (=> bs!2491 m!48639))

(declare-fun m!48641 () Bool)

(assert (=> bs!2491 m!48641))

(assert (=> b!57347 d!10649))

(declare-fun d!10651 () Bool)

(assert (=> d!10651 (= (apply!65 lt!22722 lt!22723) (get!1069 (getValueByKey!124 (toList!685 lt!22722) lt!22723)))))

(declare-fun bs!2492 () Bool)

(assert (= bs!2492 d!10651))

(declare-fun m!48643 () Bool)

(assert (=> bs!2492 m!48643))

(assert (=> bs!2492 m!48643))

(declare-fun m!48645 () Bool)

(assert (=> bs!2492 m!48645))

(assert (=> b!57347 d!10651))

(declare-fun d!10653 () Bool)

(assert (=> d!10653 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23026 () Unit!1484)

(declare-fun choose!302 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 V!2833 Int) Unit!1484)

(assert (=> d!10653 (= lt!23026 (choose!302 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22652 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10653 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10653 (= (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22652 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) (defaultEntry!2021 newMap!16)) lt!23026)))

(declare-fun bs!2493 () Bool)

(assert (= bs!2493 d!10653))

(assert (=> bs!2493 m!47873))

(declare-fun m!48647 () Bool)

(assert (=> bs!2493 m!48647))

(assert (=> bs!2493 m!48027))

(declare-fun m!48649 () Bool)

(assert (=> bs!2493 m!48649))

(assert (=> bs!2493 m!48151))

(assert (=> bs!2493 m!48027))

(assert (=> bs!2493 m!47873))

(declare-fun m!48651 () Bool)

(assert (=> bs!2493 m!48651))

(assert (=> b!57275 d!10653))

(declare-fun d!10655 () Bool)

(declare-fun res!32250 () Bool)

(declare-fun e!37999 () Bool)

(assert (=> d!10655 (=> res!32250 e!37999)))

(assert (=> d!10655 (= res!32250 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10655 (= (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) e!37999)))

(declare-fun b!57697 () Bool)

(declare-fun e!38002 () Bool)

(declare-fun call!4192 () Bool)

(assert (=> b!57697 (= e!38002 call!4192)))

(declare-fun bm!4189 () Bool)

(declare-fun c!7169 () Bool)

(assert (=> bm!4189 (= call!4192 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7169 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417))))))

(declare-fun b!57698 () Bool)

(declare-fun e!38000 () Bool)

(assert (=> b!57698 (= e!37999 e!38000)))

(declare-fun res!32251 () Bool)

(assert (=> b!57698 (=> (not res!32251) (not e!38000))))

(declare-fun e!38001 () Bool)

(assert (=> b!57698 (= res!32251 (not e!38001))))

(declare-fun res!32252 () Bool)

(assert (=> b!57698 (=> (not res!32252) (not e!38001))))

(assert (=> b!57698 (= res!32252 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!57699 () Bool)

(assert (=> b!57699 (= e!38000 e!38002)))

(assert (=> b!57699 (= c!7169 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!57700 () Bool)

(assert (=> b!57700 (= e!38002 call!4192)))

(declare-fun b!57701 () Bool)

(assert (=> b!57701 (= e!38001 (contains!676 (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!10655 (not res!32250)) b!57698))

(assert (= (and b!57698 res!32252) b!57701))

(assert (= (and b!57698 res!32251) b!57699))

(assert (= (and b!57699 c!7169) b!57700))

(assert (= (and b!57699 (not c!7169)) b!57697))

(assert (= (or b!57700 b!57697) bm!4189))

(declare-fun m!48653 () Bool)

(assert (=> bm!4189 m!48653))

(declare-fun m!48655 () Bool)

(assert (=> bm!4189 m!48655))

(assert (=> b!57698 m!48653))

(assert (=> b!57698 m!48653))

(declare-fun m!48657 () Bool)

(assert (=> b!57698 m!48657))

(assert (=> b!57699 m!48653))

(assert (=> b!57699 m!48653))

(assert (=> b!57699 m!48657))

(assert (=> b!57701 m!48653))

(assert (=> b!57701 m!48653))

(declare-fun m!48659 () Bool)

(assert (=> b!57701 m!48659))

(assert (=> bm!4145 d!10655))

(assert (=> bm!4104 d!10521))

(assert (=> b!57292 d!10585))

(declare-fun d!10657 () Bool)

(declare-fun e!38004 () Bool)

(assert (=> d!10657 e!38004))

(declare-fun res!32253 () Bool)

(assert (=> d!10657 (=> res!32253 e!38004)))

(declare-fun lt!23028 () Bool)

(assert (=> d!10657 (= res!32253 (not lt!23028))))

(declare-fun lt!23029 () Bool)

(assert (=> d!10657 (= lt!23028 lt!23029)))

(declare-fun lt!23030 () Unit!1484)

(declare-fun e!38003 () Unit!1484)

(assert (=> d!10657 (= lt!23030 e!38003)))

(declare-fun c!7170 () Bool)

(assert (=> d!10657 (= c!7170 lt!23029)))

(assert (=> d!10657 (= lt!23029 (containsKey!127 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!10657 (= (contains!675 lt!22730 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23028)))

(declare-fun b!57702 () Bool)

(declare-fun lt!23027 () Unit!1484)

(assert (=> b!57702 (= e!38003 lt!23027)))

(assert (=> b!57702 (= lt!23027 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57702 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57703 () Bool)

(declare-fun Unit!1507 () Unit!1484)

(assert (=> b!57703 (= e!38003 Unit!1507)))

(declare-fun b!57704 () Bool)

(assert (=> b!57704 (= e!38004 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!10657 c!7170) b!57702))

(assert (= (and d!10657 (not c!7170)) b!57703))

(assert (= (and d!10657 (not res!32253)) b!57704))

(assert (=> d!10657 m!48069))

(declare-fun m!48661 () Bool)

(assert (=> d!10657 m!48661))

(assert (=> b!57702 m!48069))

(declare-fun m!48663 () Bool)

(assert (=> b!57702 m!48663))

(assert (=> b!57702 m!48069))

(declare-fun m!48665 () Bool)

(assert (=> b!57702 m!48665))

(assert (=> b!57702 m!48665))

(declare-fun m!48667 () Bool)

(assert (=> b!57702 m!48667))

(assert (=> b!57704 m!48069))

(assert (=> b!57704 m!48665))

(assert (=> b!57704 m!48665))

(assert (=> b!57704 m!48667))

(assert (=> b!57352 d!10657))

(declare-fun b!57721 () Bool)

(declare-fun res!32264 () Bool)

(declare-fun e!38013 () Bool)

(assert (=> b!57721 (=> (not res!32264) (not e!38013))))

(declare-fun call!4197 () Bool)

(assert (=> b!57721 (= res!32264 call!4197)))

(declare-fun e!38014 () Bool)

(assert (=> b!57721 (= e!38014 e!38013)))

(declare-fun lt!23035 () SeekEntryResult!220)

(declare-fun c!7176 () Bool)

(declare-fun bm!4194 () Bool)

(assert (=> bm!4194 (= call!4197 (inRange!0 (ite c!7176 (index!3002 lt!23035) (index!3005 lt!23035)) (mask!5895 newMap!16)))))

(declare-fun b!57722 () Bool)

(declare-fun e!38015 () Bool)

(declare-fun e!38016 () Bool)

(assert (=> b!57722 (= e!38015 e!38016)))

(declare-fun res!32265 () Bool)

(assert (=> b!57722 (= res!32265 call!4197)))

(assert (=> b!57722 (=> (not res!32265) (not e!38016))))

(declare-fun b!57723 () Bool)

(declare-fun res!32262 () Bool)

(assert (=> b!57723 (=> (not res!32262) (not e!38013))))

(assert (=> b!57723 (= res!32262 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!23035)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57723 (and (bvsge (index!3005 lt!23035) #b00000000000000000000000000000000) (bvslt (index!3005 lt!23035) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57724 () Bool)

(assert (=> b!57724 (and (bvsge (index!3002 lt!23035) #b00000000000000000000000000000000) (bvslt (index!3002 lt!23035) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32263 () Bool)

(assert (=> b!57724 (= res!32263 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!23035)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57724 (=> (not res!32263) (not e!38016))))

(declare-fun bm!4195 () Bool)

(declare-fun call!4198 () Bool)

(assert (=> bm!4195 (= call!4198 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57725 () Bool)

(assert (=> b!57725 (= e!38016 (not call!4198))))

(declare-fun b!57726 () Bool)

(assert (=> b!57726 (= e!38014 ((_ is Undefined!220) lt!23035))))

(declare-fun b!57727 () Bool)

(assert (=> b!57727 (= e!38013 (not call!4198))))

(declare-fun b!57728 () Bool)

(assert (=> b!57728 (= e!38015 e!38014)))

(declare-fun c!7175 () Bool)

(assert (=> b!57728 (= c!7175 ((_ is MissingVacant!220) lt!23035))))

(declare-fun d!10659 () Bool)

(assert (=> d!10659 e!38015))

(assert (=> d!10659 (= c!7176 ((_ is MissingZero!220) lt!23035))))

(assert (=> d!10659 (= lt!23035 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun lt!23036 () Unit!1484)

(declare-fun choose!303 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) Int) Unit!1484)

(assert (=> d!10659 (= lt!23036 (choose!303 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10659 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10659 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)) lt!23036)))

(assert (= (and d!10659 c!7176) b!57722))

(assert (= (and d!10659 (not c!7176)) b!57728))

(assert (= (and b!57722 res!32265) b!57724))

(assert (= (and b!57724 res!32263) b!57725))

(assert (= (and b!57728 c!7175) b!57721))

(assert (= (and b!57728 (not c!7175)) b!57726))

(assert (= (and b!57721 res!32264) b!57723))

(assert (= (and b!57723 res!32262) b!57727))

(assert (= (or b!57722 b!57721) bm!4194))

(assert (= (or b!57725 b!57727) bm!4195))

(assert (=> d!10659 m!47875))

(assert (=> d!10659 m!48035))

(assert (=> d!10659 m!47875))

(declare-fun m!48669 () Bool)

(assert (=> d!10659 m!48669))

(assert (=> d!10659 m!48151))

(assert (=> bm!4195 m!47875))

(assert (=> bm!4195 m!48011))

(declare-fun m!48671 () Bool)

(assert (=> bm!4194 m!48671))

(declare-fun m!48673 () Bool)

(assert (=> b!57724 m!48673))

(declare-fun m!48675 () Bool)

(assert (=> b!57723 m!48675))

(assert (=> bm!4112 d!10659))

(declare-fun d!10661 () Bool)

(declare-fun lt!23039 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!62 (List!1420) (InoxSet (_ BitVec 64)))

(assert (=> d!10661 (= lt!23039 (select (content!62 Nil!1417) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38021 () Bool)

(assert (=> d!10661 (= lt!23039 e!38021)))

(declare-fun res!32270 () Bool)

(assert (=> d!10661 (=> (not res!32270) (not e!38021))))

(assert (=> d!10661 (= res!32270 ((_ is Cons!1416) Nil!1417))))

(assert (=> d!10661 (= (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23039)))

(declare-fun b!57733 () Bool)

(declare-fun e!38022 () Bool)

(assert (=> b!57733 (= e!38021 e!38022)))

(declare-fun res!32271 () Bool)

(assert (=> b!57733 (=> res!32271 e!38022)))

(assert (=> b!57733 (= res!32271 (= (h!1996 Nil!1417) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57734 () Bool)

(assert (=> b!57734 (= e!38022 (contains!676 (t!4734 Nil!1417) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10661 res!32270) b!57733))

(assert (= (and b!57733 (not res!32271)) b!57734))

(declare-fun m!48677 () Bool)

(assert (=> d!10661 m!48677))

(assert (=> d!10661 m!47875))

(declare-fun m!48679 () Bool)

(assert (=> d!10661 m!48679))

(assert (=> b!57734 m!47875))

(declare-fun m!48681 () Bool)

(assert (=> b!57734 m!48681))

(assert (=> b!57390 d!10661))

(declare-fun d!10663 () Bool)

(declare-fun res!32272 () Bool)

(declare-fun e!38023 () Bool)

(assert (=> d!10663 (=> res!32272 e!38023)))

(assert (=> d!10663 (= res!32272 (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10663 (= (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38023)))

(declare-fun b!57735 () Bool)

(declare-fun e!38024 () Bool)

(assert (=> b!57735 (= e!38023 e!38024)))

(declare-fun res!32273 () Bool)

(assert (=> b!57735 (=> (not res!32273) (not e!38024))))

(assert (=> b!57735 (= res!32273 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57736 () Bool)

(assert (=> b!57736 (= e!38024 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10663 (not res!32272)) b!57735))

(assert (= (and b!57735 res!32273) b!57736))

(declare-fun m!48683 () Bool)

(assert (=> d!10663 m!48683))

(assert (=> b!57736 m!47875))

(declare-fun m!48685 () Bool)

(assert (=> b!57736 m!48685))

(assert (=> b!57369 d!10663))

(declare-fun d!10665 () Bool)

(assert (=> d!10665 (= (apply!65 lt!22730 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1069 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2494 () Bool)

(assert (= bs!2494 d!10665))

(assert (=> bs!2494 m!48069))

(assert (=> bs!2494 m!48665))

(assert (=> bs!2494 m!48665))

(declare-fun m!48687 () Bool)

(assert (=> bs!2494 m!48687))

(assert (=> b!57351 d!10665))

(declare-fun d!10667 () Bool)

(declare-fun c!7177 () Bool)

(assert (=> d!10667 (= c!7177 ((_ is ValueCellFull!851) (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38025 () V!2833)

(assert (=> d!10667 (= (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38025)))

(declare-fun b!57737 () Bool)

(assert (=> b!57737 (= e!38025 (get!1067 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57738 () Bool)

(assert (=> b!57738 (= e!38025 (get!1068 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10667 c!7177) b!57737))

(assert (= (and d!10667 (not c!7177)) b!57738))

(assert (=> b!57737 m!48071))

(assert (=> b!57737 m!47871))

(declare-fun m!48689 () Bool)

(assert (=> b!57737 m!48689))

(assert (=> b!57738 m!48071))

(assert (=> b!57738 m!47871))

(declare-fun m!48691 () Bool)

(assert (=> b!57738 m!48691))

(assert (=> b!57351 d!10667))

(assert (=> d!10527 d!10533))

(declare-fun d!10669 () Bool)

(assert (=> d!10669 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) from!355 Nil!1417)))

(assert (=> d!10669 true))

(declare-fun _$71!69 () Unit!1484)

(assert (=> d!10669 (= (choose!39 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!69)))

(declare-fun bs!2495 () Bool)

(assert (= bs!2495 d!10669))

(assert (=> bs!2495 m!47893))

(assert (=> d!10527 d!10669))

(assert (=> b!57374 d!10529))

(declare-fun d!10671 () Bool)

(declare-fun e!38026 () Bool)

(assert (=> d!10671 e!38026))

(declare-fun res!32274 () Bool)

(assert (=> d!10671 (=> (not res!32274) (not e!38026))))

(declare-fun lt!23043 () ListLongMap!1339)

(assert (=> d!10671 (= res!32274 (contains!675 lt!23043 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23041 () List!1419)

(assert (=> d!10671 (= lt!23043 (ListLongMap!1340 lt!23041))))

(declare-fun lt!23042 () Unit!1484)

(declare-fun lt!23040 () Unit!1484)

(assert (=> d!10671 (= lt!23042 lt!23040)))

(assert (=> d!10671 (= (getValueByKey!124 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10671 (= lt!23040 (lemmaContainsTupThenGetReturnValue!41 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10671 (= lt!23041 (insertStrictlySorted!44 (toList!685 call!4141) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10671 (= (+!79 call!4141 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23043)))

(declare-fun b!57739 () Bool)

(declare-fun res!32275 () Bool)

(assert (=> b!57739 (=> (not res!32275) (not e!38026))))

(assert (=> b!57739 (= res!32275 (= (getValueByKey!124 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57740 () Bool)

(assert (=> b!57740 (= e!38026 (contains!677 (toList!685 lt!23043) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10671 res!32274) b!57739))

(assert (= (and b!57739 res!32275) b!57740))

(declare-fun m!48693 () Bool)

(assert (=> d!10671 m!48693))

(declare-fun m!48695 () Bool)

(assert (=> d!10671 m!48695))

(declare-fun m!48697 () Bool)

(assert (=> d!10671 m!48697))

(declare-fun m!48699 () Bool)

(assert (=> d!10671 m!48699))

(declare-fun m!48701 () Bool)

(assert (=> b!57739 m!48701))

(declare-fun m!48703 () Bool)

(assert (=> b!57740 m!48703))

(assert (=> b!57357 d!10671))

(assert (=> b!57257 d!10585))

(declare-fun d!10673 () Bool)

(declare-fun e!38029 () Bool)

(assert (=> d!10673 e!38029))

(declare-fun c!7180 () Bool)

(assert (=> d!10673 (= c!7180 (and (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!10673 true))

(declare-fun _$29!63 () Unit!1484)

(assert (=> d!10673 (= (choose!294 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) _$29!63)))

(declare-fun b!57745 () Bool)

(assert (=> b!57745 (= e!38029 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57746 () Bool)

(assert (=> b!57746 (= e!38029 (ite (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10673 c!7180) b!57745))

(assert (= (and d!10673 (not c!7180)) b!57746))

(assert (=> b!57745 m!47875))

(assert (=> b!57745 m!47897))

(assert (=> d!10531 d!10673))

(assert (=> d!10531 d!10541))

(declare-fun d!10675 () Bool)

(declare-fun res!32280 () Bool)

(declare-fun e!38034 () Bool)

(assert (=> d!10675 (=> res!32280 e!38034)))

(assert (=> d!10675 (= res!32280 (and ((_ is Cons!1415) (toList!685 lt!22525)) (= (_1!1015 (h!1995 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10675 (= (containsKey!127 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38034)))

(declare-fun b!57751 () Bool)

(declare-fun e!38035 () Bool)

(assert (=> b!57751 (= e!38034 e!38035)))

(declare-fun res!32281 () Bool)

(assert (=> b!57751 (=> (not res!32281) (not e!38035))))

(assert (=> b!57751 (= res!32281 (and (or (not ((_ is Cons!1415) (toList!685 lt!22525))) (bvsle (_1!1015 (h!1995 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1415) (toList!685 lt!22525)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!57752 () Bool)

(assert (=> b!57752 (= e!38035 (containsKey!127 (t!4733 (toList!685 lt!22525)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10675 (not res!32280)) b!57751))

(assert (= (and b!57751 res!32281) b!57752))

(assert (=> b!57752 m!47875))

(declare-fun m!48705 () Bool)

(assert (=> b!57752 m!48705))

(assert (=> d!10515 d!10675))

(declare-fun mapIsEmpty!2859 () Bool)

(declare-fun mapRes!2859 () Bool)

(assert (=> mapIsEmpty!2859 mapRes!2859))

(declare-fun mapNonEmpty!2859 () Bool)

(declare-fun tp!7971 () Bool)

(declare-fun e!38036 () Bool)

(assert (=> mapNonEmpty!2859 (= mapRes!2859 (and tp!7971 e!38036))))

(declare-fun mapRest!2859 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapValue!2859 () ValueCell!851)

(declare-fun mapKey!2859 () (_ BitVec 32))

(assert (=> mapNonEmpty!2859 (= mapRest!2857 (store mapRest!2859 mapKey!2859 mapValue!2859))))

(declare-fun b!57754 () Bool)

(declare-fun e!38037 () Bool)

(assert (=> b!57754 (= e!38037 tp_is_empty!2389)))

(declare-fun condMapEmpty!2859 () Bool)

(declare-fun mapDefault!2859 () ValueCell!851)

(assert (=> mapNonEmpty!2857 (= condMapEmpty!2859 (= mapRest!2857 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2859)))))

(assert (=> mapNonEmpty!2857 (= tp!7969 (and e!38037 mapRes!2859))))

(declare-fun b!57753 () Bool)

(assert (=> b!57753 (= e!38036 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2857 condMapEmpty!2859) mapIsEmpty!2859))

(assert (= (and mapNonEmpty!2857 (not condMapEmpty!2859)) mapNonEmpty!2859))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!851) mapValue!2859)) b!57753))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!851) mapDefault!2859)) b!57754))

(declare-fun m!48707 () Bool)

(assert (=> mapNonEmpty!2859 m!48707))

(declare-fun mapIsEmpty!2860 () Bool)

(declare-fun mapRes!2860 () Bool)

(assert (=> mapIsEmpty!2860 mapRes!2860))

(declare-fun mapNonEmpty!2860 () Bool)

(declare-fun tp!7972 () Bool)

(declare-fun e!38038 () Bool)

(assert (=> mapNonEmpty!2860 (= mapRes!2860 (and tp!7972 e!38038))))

(declare-fun mapValue!2860 () ValueCell!851)

(declare-fun mapRest!2860 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapKey!2860 () (_ BitVec 32))

(assert (=> mapNonEmpty!2860 (= mapRest!2858 (store mapRest!2860 mapKey!2860 mapValue!2860))))

(declare-fun b!57756 () Bool)

(declare-fun e!38039 () Bool)

(assert (=> b!57756 (= e!38039 tp_is_empty!2389)))

(declare-fun condMapEmpty!2860 () Bool)

(declare-fun mapDefault!2860 () ValueCell!851)

(assert (=> mapNonEmpty!2858 (= condMapEmpty!2860 (= mapRest!2858 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2860)))))

(assert (=> mapNonEmpty!2858 (= tp!7970 (and e!38039 mapRes!2860))))

(declare-fun b!57755 () Bool)

(assert (=> b!57755 (= e!38038 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2858 condMapEmpty!2860) mapIsEmpty!2860))

(assert (= (and mapNonEmpty!2858 (not condMapEmpty!2860)) mapNonEmpty!2860))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!851) mapValue!2860)) b!57755))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!851) mapDefault!2860)) b!57756))

(declare-fun m!48709 () Bool)

(assert (=> mapNonEmpty!2860 m!48709))

(declare-fun b_lambda!2511 () Bool)

(assert (= b_lambda!2501 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2511)))

(declare-fun b_lambda!2513 () Bool)

(assert (= b_lambda!2505 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2513)))

(declare-fun b_lambda!2515 () Bool)

(assert (= b_lambda!2509 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2515)))

(declare-fun b_lambda!2517 () Bool)

(assert (= b_lambda!2503 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2517)))

(declare-fun b_lambda!2519 () Bool)

(assert (= b_lambda!2507 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2519)))

(check-sat (not b!57605) (not d!10671) (not b!57625) (not d!10669) (not d!10589) (not d!10587) (not d!10645) (not bm!4178) (not b!57698) (not b!57656) (not d!10585) (not b!57579) (not b!57467) (not b_lambda!2515) (not b!57650) (not d!10553) (not d!10607) (not d!10565) (not b!57521) (not b!57483) (not b_lambda!2513) (not bm!4164) (not b_lambda!2499) (not b!57738) (not b!57561) (not b!57562) (not b!57620) (not b!57573) (not b!57607) (not d!10617) (not b!57622) (not b!57551) (not b!57583) (not b!57557) (not b_next!1947) (not bm!4184) (not b!57621) (not b!57593) (not b!57455) (not d!10551) (not d!10591) (not b!57662) (not d!10625) (not d!10577) (not b!57675) (not b!57740) (not b!57462) (not d!10653) (not b!57463) (not b!57684) (not b!57588) (not d!10555) (not d!10639) (not b!57704) (not b!57548) (not d!10575) (not b!57451) (not b!57672) (not b!57691) (not d!10635) (not mapNonEmpty!2860) (not bm!4194) (not b!57739) (not d!10631) (not b!57608) (not b_lambda!2517) tp_is_empty!2389 (not b!57478) (not b!57523) (not d!10599) (not d!10615) (not b!57466) (not b!57734) (not b!57592) (not b!57442) (not bm!4177) (not d!10595) (not d!10573) (not d!10571) (not d!10647) (not bm!4187) (not d!10657) (not b!57594) (not b!57606) (not b!57476) (not b_lambda!2495) (not b!57477) (not d!10633) (not bm!4169) (not bm!4188) (not b!57558) (not d!10649) (not d!10583) (not d!10623) (not b!57667) (not b!57440) (not d!10593) (not b!57685) (not b!57537) (not d!10563) (not b!57664) (not bm!4149) (not b!57688) (not bm!4168) (not d!10629) b_and!3477 (not d!10627) (not d!10651) (not b!57736) (not b!57481) (not b!57687) (not b!57659) (not b!57673) (not b!57582) (not b!57678) (not b!57529) (not b!57571) (not bm!4176) (not b!57686) (not b!57670) (not b!57737) (not b!57624) (not b_lambda!2511) (not b_lambda!2519) (not d!10659) (not d!10613) (not b!57699) (not b!57528) (not bm!4189) (not b!57745) (not b!57472) (not b!57660) (not b!57702) (not bm!4195) (not b!57652) (not d!10621) (not b!57531) (not bm!4151) (not b_next!1945) (not b!57457) (not b!57550) (not b!57752) b_and!3479 (not b!57526) (not d!10665) (not bm!4152) (not b!57567) (not b!57690) (not b!57599) (not bm!4170) (not bm!4166) (not b!57419) (not b!57651) (not b!57694) (not d!10569) (not d!10641) (not b!57676) (not d!10605) (not b!57701) (not d!10611) (not b!57572) (not bm!4171) (not mapNonEmpty!2859) (not b!57453) (not b!57683) (not b!57661) (not bm!4148) (not bm!4175) (not d!10603) (not b!57578) (not b!57623) (not d!10643) (not d!10661) (not bm!4165) (not bm!4150) (not d!10637) (not b!57434) (not d!10549) (not b!57420) (not b!57480) (not b!57692) (not b!57552) (not b!57657))
(check-sat b_and!3477 b_and!3479 (not b_next!1945) (not b_next!1947))
(get-model)

(declare-fun d!10677 () Bool)

(declare-fun e!38041 () Bool)

(assert (=> d!10677 e!38041))

(declare-fun res!32282 () Bool)

(assert (=> d!10677 (=> res!32282 e!38041)))

(declare-fun lt!23045 () Bool)

(assert (=> d!10677 (= res!32282 (not lt!23045))))

(declare-fun lt!23046 () Bool)

(assert (=> d!10677 (= lt!23045 lt!23046)))

(declare-fun lt!23047 () Unit!1484)

(declare-fun e!38040 () Unit!1484)

(assert (=> d!10677 (= lt!23047 e!38040)))

(declare-fun c!7181 () Bool)

(assert (=> d!10677 (= c!7181 lt!23046)))

(assert (=> d!10677 (= lt!23046 (containsKey!127 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10677 (= (contains!675 lt!22960 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!23045)))

(declare-fun b!57757 () Bool)

(declare-fun lt!23044 () Unit!1484)

(assert (=> b!57757 (= e!38040 lt!23044)))

(assert (=> b!57757 (= lt!23044 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!57757 (isDefined!76 (getValueByKey!124 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57758 () Bool)

(declare-fun Unit!1508 () Unit!1484)

(assert (=> b!57758 (= e!38040 Unit!1508)))

(declare-fun b!57759 () Bool)

(assert (=> b!57759 (= e!38041 (isDefined!76 (getValueByKey!124 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (= (and d!10677 c!7181) b!57757))

(assert (= (and d!10677 (not c!7181)) b!57758))

(assert (= (and d!10677 (not res!32282)) b!57759))

(declare-fun m!48711 () Bool)

(assert (=> d!10677 m!48711))

(declare-fun m!48713 () Bool)

(assert (=> b!57757 m!48713))

(assert (=> b!57757 m!48497))

(assert (=> b!57757 m!48497))

(declare-fun m!48715 () Bool)

(assert (=> b!57757 m!48715))

(assert (=> b!57759 m!48497))

(assert (=> b!57759 m!48497))

(assert (=> b!57759 m!48715))

(assert (=> d!10607 d!10677))

(declare-fun b!57763 () Bool)

(declare-fun e!38043 () Option!130)

(assert (=> b!57763 (= e!38043 None!128)))

(declare-fun b!57760 () Bool)

(declare-fun e!38042 () Option!130)

(assert (=> b!57760 (= e!38042 (Some!129 (_2!1015 (h!1995 lt!22958))))))

(declare-fun b!57762 () Bool)

(assert (=> b!57762 (= e!38043 (getValueByKey!124 (t!4733 lt!22958) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57761 () Bool)

(assert (=> b!57761 (= e!38042 e!38043)))

(declare-fun c!7183 () Bool)

(assert (=> b!57761 (= c!7183 (and ((_ is Cons!1415) lt!22958) (not (= (_1!1015 (h!1995 lt!22958)) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun d!10679 () Bool)

(declare-fun c!7182 () Bool)

(assert (=> d!10679 (= c!7182 (and ((_ is Cons!1415) lt!22958) (= (_1!1015 (h!1995 lt!22958)) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (=> d!10679 (= (getValueByKey!124 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) e!38042)))

(assert (= (and d!10679 c!7182) b!57760))

(assert (= (and d!10679 (not c!7182)) b!57761))

(assert (= (and b!57761 c!7183) b!57762))

(assert (= (and b!57761 (not c!7183)) b!57763))

(declare-fun m!48717 () Bool)

(assert (=> b!57762 m!48717))

(assert (=> d!10607 d!10679))

(declare-fun d!10681 () Bool)

(assert (=> d!10681 (= (getValueByKey!124 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (Some!129 (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun lt!23050 () Unit!1484)

(declare-fun choose!304 (List!1419 (_ BitVec 64) V!2833) Unit!1484)

(assert (=> d!10681 (= lt!23050 (choose!304 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun e!38046 () Bool)

(assert (=> d!10681 e!38046))

(declare-fun res!32287 () Bool)

(assert (=> d!10681 (=> (not res!32287) (not e!38046))))

(assert (=> d!10681 (= res!32287 (isStrictlySorted!270 lt!22958))))

(assert (=> d!10681 (= (lemmaContainsTupThenGetReturnValue!41 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!23050)))

(declare-fun b!57768 () Bool)

(declare-fun res!32288 () Bool)

(assert (=> b!57768 (=> (not res!32288) (not e!38046))))

(assert (=> b!57768 (= res!32288 (containsKey!127 lt!22958 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57769 () Bool)

(assert (=> b!57769 (= e!38046 (contains!677 lt!22958 (tuple2!2009 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (= (and d!10681 res!32287) b!57768))

(assert (= (and b!57768 res!32288) b!57769))

(assert (=> d!10681 m!48491))

(declare-fun m!48719 () Bool)

(assert (=> d!10681 m!48719))

(declare-fun m!48721 () Bool)

(assert (=> d!10681 m!48721))

(declare-fun m!48723 () Bool)

(assert (=> b!57768 m!48723))

(declare-fun m!48725 () Bool)

(assert (=> b!57769 m!48725))

(assert (=> d!10607 d!10681))

(declare-fun d!10683 () Bool)

(declare-fun e!38060 () Bool)

(assert (=> d!10683 e!38060))

(declare-fun res!32293 () Bool)

(assert (=> d!10683 (=> (not res!32293) (not e!38060))))

(declare-fun lt!23053 () List!1419)

(assert (=> d!10683 (= res!32293 (isStrictlySorted!270 lt!23053))))

(declare-fun e!38058 () List!1419)

(assert (=> d!10683 (= lt!23053 e!38058)))

(declare-fun c!7194 () Bool)

(assert (=> d!10683 (= c!7194 (and ((_ is Cons!1415) (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (bvslt (_1!1015 (h!1995 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (=> d!10683 (isStrictlySorted!270 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))))))

(assert (=> d!10683 (= (insertStrictlySorted!44 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!23053)))

(declare-fun bm!4202 () Bool)

(declare-fun call!4205 () List!1419)

(declare-fun call!4206 () List!1419)

(assert (=> bm!4202 (= call!4205 call!4206)))

(declare-fun bm!4203 () Bool)

(declare-fun call!4207 () List!1419)

(declare-fun e!38057 () List!1419)

(declare-fun $colon$colon!58 (List!1419 tuple2!2008) List!1419)

(assert (=> bm!4203 (= call!4207 ($colon$colon!58 e!38057 (ite c!7194 (h!1995 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (tuple2!2009 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun c!7193 () Bool)

(assert (=> bm!4203 (= c!7193 c!7194)))

(declare-fun b!57790 () Bool)

(declare-fun e!38059 () List!1419)

(assert (=> b!57790 (= e!38059 call!4206)))

(declare-fun b!57791 () Bool)

(assert (=> b!57791 (= e!38058 e!38059)))

(declare-fun c!7192 () Bool)

(assert (=> b!57791 (= c!7192 (and ((_ is Cons!1415) (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (= (_1!1015 (h!1995 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun b!57792 () Bool)

(assert (=> b!57792 (= e!38057 (insertStrictlySorted!44 (t!4733 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57793 () Bool)

(declare-fun e!38061 () List!1419)

(assert (=> b!57793 (= e!38061 call!4205)))

(declare-fun b!57794 () Bool)

(declare-fun res!32294 () Bool)

(assert (=> b!57794 (=> (not res!32294) (not e!38060))))

(assert (=> b!57794 (= res!32294 (containsKey!127 lt!23053 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun bm!4204 () Bool)

(assert (=> bm!4204 (= call!4206 call!4207)))

(declare-fun c!7195 () Bool)

(declare-fun b!57795 () Bool)

(assert (=> b!57795 (= e!38057 (ite c!7192 (t!4733 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (ite c!7195 (Cons!1415 (h!1995 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (t!4733 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))))) Nil!1416)))))

(declare-fun b!57796 () Bool)

(assert (=> b!57796 (= c!7195 (and ((_ is Cons!1415) (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142)))) (bvsgt (_1!1015 (h!1995 (toList!685 (ite c!7086 call!4139 (ite c!7088 call!4143 call!4142))))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (=> b!57796 (= e!38059 e!38061)))

(declare-fun b!57797 () Bool)

(assert (=> b!57797 (= e!38061 call!4205)))

(declare-fun b!57798 () Bool)

(assert (=> b!57798 (= e!38058 call!4207)))

(declare-fun b!57799 () Bool)

(assert (=> b!57799 (= e!38060 (contains!677 lt!23053 (tuple2!2009 (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (_2!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (= (and d!10683 c!7194) b!57798))

(assert (= (and d!10683 (not c!7194)) b!57791))

(assert (= (and b!57791 c!7192) b!57790))

(assert (= (and b!57791 (not c!7192)) b!57796))

(assert (= (and b!57796 c!7195) b!57793))

(assert (= (and b!57796 (not c!7195)) b!57797))

(assert (= (or b!57793 b!57797) bm!4202))

(assert (= (or b!57790 bm!4202) bm!4204))

(assert (= (or b!57798 bm!4204) bm!4203))

(assert (= (and bm!4203 c!7193) b!57792))

(assert (= (and bm!4203 (not c!7193)) b!57795))

(assert (= (and d!10683 res!32293) b!57794))

(assert (= (and b!57794 res!32294) b!57799))

(declare-fun m!48727 () Bool)

(assert (=> b!57792 m!48727))

(declare-fun m!48729 () Bool)

(assert (=> bm!4203 m!48729))

(declare-fun m!48731 () Bool)

(assert (=> b!57794 m!48731))

(declare-fun m!48733 () Bool)

(assert (=> d!10683 m!48733))

(declare-fun m!48735 () Bool)

(assert (=> d!10683 m!48735))

(declare-fun m!48737 () Bool)

(assert (=> b!57799 m!48737))

(assert (=> d!10607 d!10683))

(declare-fun d!10685 () Bool)

(declare-fun res!32295 () Bool)

(declare-fun e!38062 () Bool)

(assert (=> d!10685 (=> res!32295 e!38062)))

(assert (=> d!10685 (= res!32295 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10685 (= (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 Nil!1417) e!38062)))

(declare-fun b!57800 () Bool)

(declare-fun e!38065 () Bool)

(declare-fun call!4208 () Bool)

(assert (=> b!57800 (= e!38065 call!4208)))

(declare-fun bm!4205 () Bool)

(declare-fun c!7196 () Bool)

(assert (=> bm!4205 (= call!4208 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7196 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000) Nil!1417) Nil!1417)))))

(declare-fun b!57801 () Bool)

(declare-fun e!38063 () Bool)

(assert (=> b!57801 (= e!38062 e!38063)))

(declare-fun res!32296 () Bool)

(assert (=> b!57801 (=> (not res!32296) (not e!38063))))

(declare-fun e!38064 () Bool)

(assert (=> b!57801 (= res!32296 (not e!38064))))

(declare-fun res!32297 () Bool)

(assert (=> b!57801 (=> (not res!32297) (not e!38064))))

(assert (=> b!57801 (= res!32297 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!57802 () Bool)

(assert (=> b!57802 (= e!38063 e!38065)))

(assert (=> b!57802 (= c!7196 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!57803 () Bool)

(assert (=> b!57803 (= e!38065 call!4208)))

(declare-fun b!57804 () Bool)

(assert (=> b!57804 (= e!38064 (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!10685 (not res!32295)) b!57801))

(assert (= (and b!57801 res!32297) b!57804))

(assert (= (and b!57801 res!32296) b!57802))

(assert (= (and b!57802 c!7196) b!57803))

(assert (= (and b!57802 (not c!7196)) b!57800))

(assert (= (or b!57803 b!57800) bm!4205))

(declare-fun m!48739 () Bool)

(assert (=> bm!4205 m!48739))

(declare-fun m!48741 () Bool)

(assert (=> bm!4205 m!48741))

(assert (=> b!57801 m!48739))

(assert (=> b!57801 m!48739))

(declare-fun m!48743 () Bool)

(assert (=> b!57801 m!48743))

(assert (=> b!57802 m!48739))

(assert (=> b!57802 m!48739))

(assert (=> b!57802 m!48743))

(assert (=> b!57804 m!48739))

(assert (=> b!57804 m!48739))

(declare-fun m!48745 () Bool)

(assert (=> b!57804 m!48745))

(assert (=> b!57552 d!10685))

(declare-fun d!10687 () Bool)

(declare-fun e!38066 () Bool)

(assert (=> d!10687 e!38066))

(declare-fun res!32298 () Bool)

(assert (=> d!10687 (=> (not res!32298) (not e!38066))))

(declare-fun lt!23057 () ListLongMap!1339)

(assert (=> d!10687 (= res!32298 (contains!675 lt!23057 (_1!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(declare-fun lt!23055 () List!1419)

(assert (=> d!10687 (= lt!23057 (ListLongMap!1340 lt!23055))))

(declare-fun lt!23056 () Unit!1484)

(declare-fun lt!23054 () Unit!1484)

(assert (=> d!10687 (= lt!23056 lt!23054)))

(assert (=> d!10687 (= (getValueByKey!124 lt!23055 (_1!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))) (Some!129 (_2!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(assert (=> d!10687 (= lt!23054 (lemmaContainsTupThenGetReturnValue!41 lt!23055 (_1!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (_2!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(assert (=> d!10687 (= lt!23055 (insertStrictlySorted!44 (toList!685 (ite c!7143 call!4178 (ite c!7145 call!4182 call!4181))) (_1!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (_2!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(assert (=> d!10687 (= (+!79 (ite c!7143 call!4178 (ite c!7145 call!4182 call!4181)) (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) lt!23057)))

(declare-fun b!57805 () Bool)

(declare-fun res!32299 () Bool)

(assert (=> b!57805 (=> (not res!32299) (not e!38066))))

(assert (=> b!57805 (= res!32299 (= (getValueByKey!124 (toList!685 lt!23057) (_1!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))) (Some!129 (_2!1015 (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))))

(declare-fun b!57806 () Bool)

(assert (=> b!57806 (= e!38066 (contains!677 (toList!685 lt!23057) (ite (or c!7143 c!7145) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (= (and d!10687 res!32298) b!57805))

(assert (= (and b!57805 res!32299) b!57806))

(declare-fun m!48747 () Bool)

(assert (=> d!10687 m!48747))

(declare-fun m!48749 () Bool)

(assert (=> d!10687 m!48749))

(declare-fun m!48751 () Bool)

(assert (=> d!10687 m!48751))

(declare-fun m!48753 () Bool)

(assert (=> d!10687 m!48753))

(declare-fun m!48755 () Bool)

(assert (=> b!57805 m!48755))

(declare-fun m!48757 () Bool)

(assert (=> b!57806 m!48757))

(assert (=> bm!4175 d!10687))

(assert (=> b!57660 d!10667))

(declare-fun d!10689 () Bool)

(assert (=> d!10689 (not (contains!675 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980)) lt!22981))))

(declare-fun lt!23060 () Unit!1484)

(declare-fun choose!305 (ListLongMap!1339 (_ BitVec 64) V!2833 (_ BitVec 64)) Unit!1484)

(assert (=> d!10689 (= lt!23060 (choose!305 lt!22978 lt!22976 lt!22980 lt!22981))))

(declare-fun e!38069 () Bool)

(assert (=> d!10689 e!38069))

(declare-fun res!32302 () Bool)

(assert (=> d!10689 (=> (not res!32302) (not e!38069))))

(assert (=> d!10689 (= res!32302 (not (contains!675 lt!22978 lt!22981)))))

(assert (=> d!10689 (= (addStillNotContains!16 lt!22978 lt!22976 lt!22980 lt!22981) lt!23060)))

(declare-fun b!57810 () Bool)

(assert (=> b!57810 (= e!38069 (not (= lt!22976 lt!22981)))))

(assert (= (and d!10689 res!32302) b!57810))

(assert (=> d!10689 m!48517))

(assert (=> d!10689 m!48517))

(assert (=> d!10689 m!48519))

(declare-fun m!48759 () Bool)

(assert (=> d!10689 m!48759))

(declare-fun m!48761 () Bool)

(assert (=> d!10689 m!48761))

(assert (=> b!57660 d!10689))

(declare-fun d!10691 () Bool)

(declare-fun e!38070 () Bool)

(assert (=> d!10691 e!38070))

(declare-fun res!32303 () Bool)

(assert (=> d!10691 (=> (not res!32303) (not e!38070))))

(declare-fun lt!23064 () ListLongMap!1339)

(assert (=> d!10691 (= res!32303 (contains!675 lt!23064 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23062 () List!1419)

(assert (=> d!10691 (= lt!23064 (ListLongMap!1340 lt!23062))))

(declare-fun lt!23063 () Unit!1484)

(declare-fun lt!23061 () Unit!1484)

(assert (=> d!10691 (= lt!23063 lt!23061)))

(assert (=> d!10691 (= (getValueByKey!124 lt!23062 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10691 (= lt!23061 (lemmaContainsTupThenGetReturnValue!41 lt!23062 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10691 (= lt!23062 (insertStrictlySorted!44 (toList!685 call!4190) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10691 (= (+!79 call!4190 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23064)))

(declare-fun b!57811 () Bool)

(declare-fun res!32304 () Bool)

(assert (=> b!57811 (=> (not res!32304) (not e!38070))))

(assert (=> b!57811 (= res!32304 (= (getValueByKey!124 (toList!685 lt!23064) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57812 () Bool)

(assert (=> b!57812 (= e!38070 (contains!677 (toList!685 lt!23064) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10691 res!32303) b!57811))

(assert (= (and b!57811 res!32304) b!57812))

(declare-fun m!48763 () Bool)

(assert (=> d!10691 m!48763))

(declare-fun m!48765 () Bool)

(assert (=> d!10691 m!48765))

(declare-fun m!48767 () Bool)

(assert (=> d!10691 m!48767))

(declare-fun m!48769 () Bool)

(assert (=> d!10691 m!48769))

(declare-fun m!48771 () Bool)

(assert (=> b!57811 m!48771))

(declare-fun m!48773 () Bool)

(assert (=> b!57812 m!48773))

(assert (=> b!57660 d!10691))

(declare-fun d!10693 () Bool)

(declare-fun e!38072 () Bool)

(assert (=> d!10693 e!38072))

(declare-fun res!32305 () Bool)

(assert (=> d!10693 (=> res!32305 e!38072)))

(declare-fun lt!23066 () Bool)

(assert (=> d!10693 (= res!32305 (not lt!23066))))

(declare-fun lt!23067 () Bool)

(assert (=> d!10693 (= lt!23066 lt!23067)))

(declare-fun lt!23068 () Unit!1484)

(declare-fun e!38071 () Unit!1484)

(assert (=> d!10693 (= lt!23068 e!38071)))

(declare-fun c!7197 () Bool)

(assert (=> d!10693 (= c!7197 lt!23067)))

(assert (=> d!10693 (= lt!23067 (containsKey!127 (toList!685 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980))) lt!22981))))

(assert (=> d!10693 (= (contains!675 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980)) lt!22981) lt!23066)))

(declare-fun b!57813 () Bool)

(declare-fun lt!23065 () Unit!1484)

(assert (=> b!57813 (= e!38071 lt!23065)))

(assert (=> b!57813 (= lt!23065 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980))) lt!22981))))

(assert (=> b!57813 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980))) lt!22981))))

(declare-fun b!57814 () Bool)

(declare-fun Unit!1509 () Unit!1484)

(assert (=> b!57814 (= e!38071 Unit!1509)))

(declare-fun b!57815 () Bool)

(assert (=> b!57815 (= e!38072 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980))) lt!22981)))))

(assert (= (and d!10693 c!7197) b!57813))

(assert (= (and d!10693 (not c!7197)) b!57814))

(assert (= (and d!10693 (not res!32305)) b!57815))

(declare-fun m!48775 () Bool)

(assert (=> d!10693 m!48775))

(declare-fun m!48777 () Bool)

(assert (=> b!57813 m!48777))

(declare-fun m!48779 () Bool)

(assert (=> b!57813 m!48779))

(assert (=> b!57813 m!48779))

(declare-fun m!48781 () Bool)

(assert (=> b!57813 m!48781))

(assert (=> b!57815 m!48779))

(assert (=> b!57815 m!48779))

(assert (=> b!57815 m!48781))

(assert (=> b!57660 d!10693))

(declare-fun d!10695 () Bool)

(declare-fun e!38073 () Bool)

(assert (=> d!10695 e!38073))

(declare-fun res!32306 () Bool)

(assert (=> d!10695 (=> (not res!32306) (not e!38073))))

(declare-fun lt!23072 () ListLongMap!1339)

(assert (=> d!10695 (= res!32306 (contains!675 lt!23072 (_1!1015 (tuple2!2009 lt!22976 lt!22980))))))

(declare-fun lt!23070 () List!1419)

(assert (=> d!10695 (= lt!23072 (ListLongMap!1340 lt!23070))))

(declare-fun lt!23071 () Unit!1484)

(declare-fun lt!23069 () Unit!1484)

(assert (=> d!10695 (= lt!23071 lt!23069)))

(assert (=> d!10695 (= (getValueByKey!124 lt!23070 (_1!1015 (tuple2!2009 lt!22976 lt!22980))) (Some!129 (_2!1015 (tuple2!2009 lt!22976 lt!22980))))))

(assert (=> d!10695 (= lt!23069 (lemmaContainsTupThenGetReturnValue!41 lt!23070 (_1!1015 (tuple2!2009 lt!22976 lt!22980)) (_2!1015 (tuple2!2009 lt!22976 lt!22980))))))

(assert (=> d!10695 (= lt!23070 (insertStrictlySorted!44 (toList!685 lt!22978) (_1!1015 (tuple2!2009 lt!22976 lt!22980)) (_2!1015 (tuple2!2009 lt!22976 lt!22980))))))

(assert (=> d!10695 (= (+!79 lt!22978 (tuple2!2009 lt!22976 lt!22980)) lt!23072)))

(declare-fun b!57816 () Bool)

(declare-fun res!32307 () Bool)

(assert (=> b!57816 (=> (not res!32307) (not e!38073))))

(assert (=> b!57816 (= res!32307 (= (getValueByKey!124 (toList!685 lt!23072) (_1!1015 (tuple2!2009 lt!22976 lt!22980))) (Some!129 (_2!1015 (tuple2!2009 lt!22976 lt!22980)))))))

(declare-fun b!57817 () Bool)

(assert (=> b!57817 (= e!38073 (contains!677 (toList!685 lt!23072) (tuple2!2009 lt!22976 lt!22980)))))

(assert (= (and d!10695 res!32306) b!57816))

(assert (= (and b!57816 res!32307) b!57817))

(declare-fun m!48783 () Bool)

(assert (=> d!10695 m!48783))

(declare-fun m!48785 () Bool)

(assert (=> d!10695 m!48785))

(declare-fun m!48787 () Bool)

(assert (=> d!10695 m!48787))

(declare-fun m!48789 () Bool)

(assert (=> d!10695 m!48789))

(declare-fun m!48791 () Bool)

(assert (=> b!57816 m!48791))

(declare-fun m!48793 () Bool)

(assert (=> b!57817 m!48793))

(assert (=> b!57660 d!10695))

(declare-fun d!10697 () Bool)

(declare-fun e!38075 () Bool)

(assert (=> d!10697 e!38075))

(declare-fun res!32308 () Bool)

(assert (=> d!10697 (=> res!32308 e!38075)))

(declare-fun lt!23074 () Bool)

(assert (=> d!10697 (= res!32308 (not lt!23074))))

(declare-fun lt!23075 () Bool)

(assert (=> d!10697 (= lt!23074 lt!23075)))

(declare-fun lt!23076 () Unit!1484)

(declare-fun e!38074 () Unit!1484)

(assert (=> d!10697 (= lt!23076 e!38074)))

(declare-fun c!7198 () Bool)

(assert (=> d!10697 (= c!7198 lt!23075)))

(assert (=> d!10697 (= lt!23075 (containsKey!127 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10697 (= (contains!675 lt!22953 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23074)))

(declare-fun b!57818 () Bool)

(declare-fun lt!23073 () Unit!1484)

(assert (=> b!57818 (= e!38074 lt!23073)))

(assert (=> b!57818 (= lt!23073 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!57818 (isDefined!76 (getValueByKey!124 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57819 () Bool)

(declare-fun Unit!1510 () Unit!1484)

(assert (=> b!57819 (= e!38074 Unit!1510)))

(declare-fun b!57820 () Bool)

(assert (=> b!57820 (= e!38075 (isDefined!76 (getValueByKey!124 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!10697 c!7198) b!57818))

(assert (= (and d!10697 (not c!7198)) b!57819))

(assert (= (and d!10697 (not res!32308)) b!57820))

(declare-fun m!48795 () Bool)

(assert (=> d!10697 m!48795))

(declare-fun m!48797 () Bool)

(assert (=> b!57818 m!48797))

(assert (=> b!57818 m!48473))

(assert (=> b!57818 m!48473))

(declare-fun m!48799 () Bool)

(assert (=> b!57818 m!48799))

(assert (=> b!57820 m!48473))

(assert (=> b!57820 m!48473))

(assert (=> b!57820 m!48799))

(assert (=> d!10595 d!10697))

(declare-fun b!57824 () Bool)

(declare-fun e!38077 () Option!130)

(assert (=> b!57824 (= e!38077 None!128)))

(declare-fun b!57821 () Bool)

(declare-fun e!38076 () Option!130)

(assert (=> b!57821 (= e!38076 (Some!129 (_2!1015 (h!1995 lt!22951))))))

(declare-fun b!57823 () Bool)

(assert (=> b!57823 (= e!38077 (getValueByKey!124 (t!4733 lt!22951) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57822 () Bool)

(assert (=> b!57822 (= e!38076 e!38077)))

(declare-fun c!7200 () Bool)

(assert (=> b!57822 (= c!7200 (and ((_ is Cons!1415) lt!22951) (not (= (_1!1015 (h!1995 lt!22951)) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!10699 () Bool)

(declare-fun c!7199 () Bool)

(assert (=> d!10699 (= c!7199 (and ((_ is Cons!1415) lt!22951) (= (_1!1015 (h!1995 lt!22951)) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10699 (= (getValueByKey!124 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38076)))

(assert (= (and d!10699 c!7199) b!57821))

(assert (= (and d!10699 (not c!7199)) b!57822))

(assert (= (and b!57822 c!7200) b!57823))

(assert (= (and b!57822 (not c!7200)) b!57824))

(declare-fun m!48801 () Bool)

(assert (=> b!57823 m!48801))

(assert (=> d!10595 d!10699))

(declare-fun d!10701 () Bool)

(assert (=> d!10701 (= (getValueByKey!124 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23077 () Unit!1484)

(assert (=> d!10701 (= lt!23077 (choose!304 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38078 () Bool)

(assert (=> d!10701 e!38078))

(declare-fun res!32309 () Bool)

(assert (=> d!10701 (=> (not res!32309) (not e!38078))))

(assert (=> d!10701 (= res!32309 (isStrictlySorted!270 lt!22951))))

(assert (=> d!10701 (= (lemmaContainsTupThenGetReturnValue!41 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23077)))

(declare-fun b!57825 () Bool)

(declare-fun res!32310 () Bool)

(assert (=> b!57825 (=> (not res!32310) (not e!38078))))

(assert (=> b!57825 (= res!32310 (containsKey!127 lt!22951 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57826 () Bool)

(assert (=> b!57826 (= e!38078 (contains!677 lt!22951 (tuple2!2009 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!10701 res!32309) b!57825))

(assert (= (and b!57825 res!32310) b!57826))

(assert (=> d!10701 m!48467))

(declare-fun m!48803 () Bool)

(assert (=> d!10701 m!48803))

(declare-fun m!48805 () Bool)

(assert (=> d!10701 m!48805))

(declare-fun m!48807 () Bool)

(assert (=> b!57825 m!48807))

(declare-fun m!48809 () Bool)

(assert (=> b!57826 m!48809))

(assert (=> d!10595 d!10701))

(declare-fun d!10703 () Bool)

(declare-fun e!38082 () Bool)

(assert (=> d!10703 e!38082))

(declare-fun res!32311 () Bool)

(assert (=> d!10703 (=> (not res!32311) (not e!38082))))

(declare-fun lt!23078 () List!1419)

(assert (=> d!10703 (= res!32311 (isStrictlySorted!270 lt!23078))))

(declare-fun e!38080 () List!1419)

(assert (=> d!10703 (= lt!23078 e!38080)))

(declare-fun c!7203 () Bool)

(assert (=> d!10703 (= c!7203 (and ((_ is Cons!1415) (toList!685 call!4103)) (bvslt (_1!1015 (h!1995 (toList!685 call!4103))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10703 (isStrictlySorted!270 (toList!685 call!4103))))

(assert (=> d!10703 (= (insertStrictlySorted!44 (toList!685 call!4103) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23078)))

(declare-fun bm!4206 () Bool)

(declare-fun call!4209 () List!1419)

(declare-fun call!4210 () List!1419)

(assert (=> bm!4206 (= call!4209 call!4210)))

(declare-fun bm!4207 () Bool)

(declare-fun call!4211 () List!1419)

(declare-fun e!38079 () List!1419)

(assert (=> bm!4207 (= call!4211 ($colon$colon!58 e!38079 (ite c!7203 (h!1995 (toList!685 call!4103)) (tuple2!2009 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7202 () Bool)

(assert (=> bm!4207 (= c!7202 c!7203)))

(declare-fun b!57827 () Bool)

(declare-fun e!38081 () List!1419)

(assert (=> b!57827 (= e!38081 call!4210)))

(declare-fun b!57828 () Bool)

(assert (=> b!57828 (= e!38080 e!38081)))

(declare-fun c!7201 () Bool)

(assert (=> b!57828 (= c!7201 (and ((_ is Cons!1415) (toList!685 call!4103)) (= (_1!1015 (h!1995 (toList!685 call!4103))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57829 () Bool)

(assert (=> b!57829 (= e!38079 (insertStrictlySorted!44 (t!4733 (toList!685 call!4103)) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57830 () Bool)

(declare-fun e!38083 () List!1419)

(assert (=> b!57830 (= e!38083 call!4209)))

(declare-fun b!57831 () Bool)

(declare-fun res!32312 () Bool)

(assert (=> b!57831 (=> (not res!32312) (not e!38082))))

(assert (=> b!57831 (= res!32312 (containsKey!127 lt!23078 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4208 () Bool)

(assert (=> bm!4208 (= call!4210 call!4211)))

(declare-fun b!57832 () Bool)

(declare-fun c!7204 () Bool)

(assert (=> b!57832 (= e!38079 (ite c!7201 (t!4733 (toList!685 call!4103)) (ite c!7204 (Cons!1415 (h!1995 (toList!685 call!4103)) (t!4733 (toList!685 call!4103))) Nil!1416)))))

(declare-fun b!57833 () Bool)

(assert (=> b!57833 (= c!7204 (and ((_ is Cons!1415) (toList!685 call!4103)) (bvsgt (_1!1015 (h!1995 (toList!685 call!4103))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!57833 (= e!38081 e!38083)))

(declare-fun b!57834 () Bool)

(assert (=> b!57834 (= e!38083 call!4209)))

(declare-fun b!57835 () Bool)

(assert (=> b!57835 (= e!38080 call!4211)))

(declare-fun b!57836 () Bool)

(assert (=> b!57836 (= e!38082 (contains!677 lt!23078 (tuple2!2009 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!10703 c!7203) b!57835))

(assert (= (and d!10703 (not c!7203)) b!57828))

(assert (= (and b!57828 c!7201) b!57827))

(assert (= (and b!57828 (not c!7201)) b!57833))

(assert (= (and b!57833 c!7204) b!57830))

(assert (= (and b!57833 (not c!7204)) b!57834))

(assert (= (or b!57830 b!57834) bm!4206))

(assert (= (or b!57827 bm!4206) bm!4208))

(assert (= (or b!57835 bm!4208) bm!4207))

(assert (= (and bm!4207 c!7202) b!57829))

(assert (= (and bm!4207 (not c!7202)) b!57832))

(assert (= (and d!10703 res!32311) b!57831))

(assert (= (and b!57831 res!32312) b!57836))

(declare-fun m!48811 () Bool)

(assert (=> b!57829 m!48811))

(declare-fun m!48813 () Bool)

(assert (=> bm!4207 m!48813))

(declare-fun m!48815 () Bool)

(assert (=> b!57831 m!48815))

(declare-fun m!48817 () Bool)

(assert (=> d!10703 m!48817))

(declare-fun m!48819 () Bool)

(assert (=> d!10703 m!48819))

(declare-fun m!48821 () Bool)

(assert (=> b!57836 m!48821))

(assert (=> d!10595 d!10703))

(declare-fun b!57837 () Bool)

(declare-fun e!38084 () (_ BitVec 32))

(assert (=> b!57837 (= e!38084 #b00000000000000000000000000000000)))

(declare-fun b!57838 () Bool)

(declare-fun e!38085 () (_ BitVec 32))

(declare-fun call!4212 () (_ BitVec 32))

(assert (=> b!57838 (= e!38085 call!4212)))

(declare-fun bm!4209 () Bool)

(assert (=> bm!4209 (= call!4212 (arrayCountValidKeys!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57839 () Bool)

(assert (=> b!57839 (= e!38085 (bvadd #b00000000000000000000000000000001 call!4212))))

(declare-fun b!57840 () Bool)

(assert (=> b!57840 (= e!38084 e!38085)))

(declare-fun c!7205 () Bool)

(assert (=> b!57840 (= c!7205 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!10705 () Bool)

(declare-fun lt!23079 () (_ BitVec 32))

(assert (=> d!10705 (and (bvsge lt!23079 #b00000000000000000000000000000000) (bvsle lt!23079 (bvsub (size!1995 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!10705 (= lt!23079 e!38084)))

(declare-fun c!7206 () Bool)

(assert (=> d!10705 (= c!7206 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10705 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!1995 (_keys!3641 newMap!16)) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10705 (= (arrayCountValidKeys!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))) lt!23079)))

(assert (= (and d!10705 c!7206) b!57837))

(assert (= (and d!10705 (not c!7206)) b!57840))

(assert (= (and b!57840 c!7205) b!57839))

(assert (= (and b!57840 (not c!7205)) b!57838))

(assert (= (or b!57839 b!57838) bm!4209))

(declare-fun m!48823 () Bool)

(assert (=> bm!4209 m!48823))

(declare-fun m!48825 () Bool)

(assert (=> b!57840 m!48825))

(assert (=> b!57840 m!48825))

(declare-fun m!48827 () Bool)

(assert (=> b!57840 m!48827))

(assert (=> bm!4184 d!10705))

(declare-fun d!10707 () Bool)

(assert (=> d!10707 (= (isDefined!76 (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))) (not (isEmpty!296 (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))))

(declare-fun bs!2496 () Bool)

(assert (= bs!2496 d!10707))

(assert (=> bs!2496 m!48525))

(declare-fun m!48829 () Bool)

(assert (=> bs!2496 m!48829))

(assert (=> b!57664 d!10707))

(declare-fun b!57844 () Bool)

(declare-fun e!38087 () Option!130)

(assert (=> b!57844 (= e!38087 None!128)))

(declare-fun b!57841 () Bool)

(declare-fun e!38086 () Option!130)

(assert (=> b!57841 (= e!38086 (Some!129 (_2!1015 (h!1995 (toList!685 call!4122)))))))

(declare-fun b!57843 () Bool)

(assert (=> b!57843 (= e!38087 (getValueByKey!124 (t!4733 (toList!685 call!4122)) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(declare-fun b!57842 () Bool)

(assert (=> b!57842 (= e!38086 e!38087)))

(declare-fun c!7208 () Bool)

(assert (=> b!57842 (= c!7208 (and ((_ is Cons!1415) (toList!685 call!4122)) (not (= (_1!1015 (h!1995 (toList!685 call!4122))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))))

(declare-fun c!7207 () Bool)

(declare-fun d!10709 () Bool)

(assert (=> d!10709 (= c!7207 (and ((_ is Cons!1415) (toList!685 call!4122)) (= (_1!1015 (h!1995 (toList!685 call!4122))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))))

(assert (=> d!10709 (= (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))) e!38086)))

(assert (= (and d!10709 c!7207) b!57841))

(assert (= (and d!10709 (not c!7207)) b!57842))

(assert (= (and b!57842 c!7208) b!57843))

(assert (= (and b!57842 (not c!7208)) b!57844))

(assert (=> b!57843 m!48057))

(declare-fun m!48831 () Bool)

(assert (=> b!57843 m!48831))

(assert (=> b!57664 d!10709))

(declare-fun d!10711 () Bool)

(assert (=> d!10711 (= (get!1069 (getValueByKey!124 (toList!685 lt!22711) lt!22721)) (v!2372 (getValueByKey!124 (toList!685 lt!22711) lt!22721)))))

(assert (=> d!10647 d!10711))

(declare-fun b!57848 () Bool)

(declare-fun e!38089 () Option!130)

(assert (=> b!57848 (= e!38089 None!128)))

(declare-fun b!57845 () Bool)

(declare-fun e!38088 () Option!130)

(assert (=> b!57845 (= e!38088 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22711)))))))

(declare-fun b!57847 () Bool)

(assert (=> b!57847 (= e!38089 (getValueByKey!124 (t!4733 (toList!685 lt!22711)) lt!22721))))

(declare-fun b!57846 () Bool)

(assert (=> b!57846 (= e!38088 e!38089)))

(declare-fun c!7210 () Bool)

(assert (=> b!57846 (= c!7210 (and ((_ is Cons!1415) (toList!685 lt!22711)) (not (= (_1!1015 (h!1995 (toList!685 lt!22711))) lt!22721))))))

(declare-fun d!10713 () Bool)

(declare-fun c!7209 () Bool)

(assert (=> d!10713 (= c!7209 (and ((_ is Cons!1415) (toList!685 lt!22711)) (= (_1!1015 (h!1995 (toList!685 lt!22711))) lt!22721)))))

(assert (=> d!10713 (= (getValueByKey!124 (toList!685 lt!22711) lt!22721) e!38088)))

(assert (= (and d!10713 c!7209) b!57845))

(assert (= (and d!10713 (not c!7209)) b!57846))

(assert (= (and b!57846 c!7210) b!57847))

(assert (= (and b!57846 (not c!7210)) b!57848))

(declare-fun m!48833 () Bool)

(assert (=> b!57847 m!48833))

(assert (=> d!10647 d!10713))

(declare-fun d!10715 () Bool)

(assert (=> d!10715 (= (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57673 d!10715))

(declare-fun d!10717 () Bool)

(assert (=> d!10717 (= (validMask!0 (mask!5895 newMap!16)) (and (or (= (mask!5895 newMap!16) #b00000000000000000000000000000111) (= (mask!5895 newMap!16) #b00000000000000000000000000001111) (= (mask!5895 newMap!16) #b00000000000000000000000000011111) (= (mask!5895 newMap!16) #b00000000000000000000000000111111) (= (mask!5895 newMap!16) #b00000000000000000000000001111111) (= (mask!5895 newMap!16) #b00000000000000000000000011111111) (= (mask!5895 newMap!16) #b00000000000000000000000111111111) (= (mask!5895 newMap!16) #b00000000000000000000001111111111) (= (mask!5895 newMap!16) #b00000000000000000000011111111111) (= (mask!5895 newMap!16) #b00000000000000000000111111111111) (= (mask!5895 newMap!16) #b00000000000000000001111111111111) (= (mask!5895 newMap!16) #b00000000000000000011111111111111) (= (mask!5895 newMap!16) #b00000000000000000111111111111111) (= (mask!5895 newMap!16) #b00000000000000001111111111111111) (= (mask!5895 newMap!16) #b00000000000000011111111111111111) (= (mask!5895 newMap!16) #b00000000000000111111111111111111) (= (mask!5895 newMap!16) #b00000000000001111111111111111111) (= (mask!5895 newMap!16) #b00000000000011111111111111111111) (= (mask!5895 newMap!16) #b00000000000111111111111111111111) (= (mask!5895 newMap!16) #b00000000001111111111111111111111) (= (mask!5895 newMap!16) #b00000000011111111111111111111111) (= (mask!5895 newMap!16) #b00000000111111111111111111111111) (= (mask!5895 newMap!16) #b00000001111111111111111111111111) (= (mask!5895 newMap!16) #b00000011111111111111111111111111) (= (mask!5895 newMap!16) #b00000111111111111111111111111111) (= (mask!5895 newMap!16) #b00001111111111111111111111111111) (= (mask!5895 newMap!16) #b00011111111111111111111111111111) (= (mask!5895 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5895 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!10587 d!10717))

(declare-fun b!57849 () Bool)

(declare-fun e!38096 () Bool)

(assert (=> b!57849 (= e!38096 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57849 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!10719 () Bool)

(declare-fun e!38091 () Bool)

(assert (=> d!10719 e!38091))

(declare-fun res!32313 () Bool)

(assert (=> d!10719 (=> (not res!32313) (not e!38091))))

(declare-fun lt!23082 () ListLongMap!1339)

(assert (=> d!10719 (= res!32313 (not (contains!675 lt!23082 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38092 () ListLongMap!1339)

(assert (=> d!10719 (= lt!23082 e!38092)))

(declare-fun c!7214 () Bool)

(assert (=> d!10719 (= c!7214 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10719 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10719 (= (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23082)))

(declare-fun b!57850 () Bool)

(declare-fun e!38094 () Bool)

(declare-fun e!38093 () Bool)

(assert (=> b!57850 (= e!38094 e!38093)))

(assert (=> b!57850 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32315 () Bool)

(assert (=> b!57850 (= res!32315 (contains!675 lt!23082 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57850 (=> (not res!32315) (not e!38093))))

(declare-fun b!57851 () Bool)

(assert (=> b!57851 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> b!57851 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (_values!2004 newMap!16))))))

(assert (=> b!57851 (= e!38093 (= (apply!65 lt!23082 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!4210 () Bool)

(declare-fun call!4213 () ListLongMap!1339)

(assert (=> bm!4210 (= call!4213 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16)))))

(declare-fun b!57852 () Bool)

(declare-fun e!38090 () Bool)

(assert (=> b!57852 (= e!38094 e!38090)))

(declare-fun c!7211 () Bool)

(assert (=> b!57852 (= c!7211 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57853 () Bool)

(assert (=> b!57853 (= e!38092 (ListLongMap!1340 Nil!1416))))

(declare-fun b!57854 () Bool)

(assert (=> b!57854 (= e!38091 e!38094)))

(declare-fun c!7212 () Bool)

(assert (=> b!57854 (= c!7212 e!38096)))

(declare-fun res!32316 () Bool)

(assert (=> b!57854 (=> (not res!32316) (not e!38096))))

(assert (=> b!57854 (= res!32316 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57855 () Bool)

(assert (=> b!57855 (= e!38090 (isEmpty!297 lt!23082))))

(declare-fun b!57856 () Bool)

(declare-fun e!38095 () ListLongMap!1339)

(assert (=> b!57856 (= e!38092 e!38095)))

(declare-fun c!7213 () Bool)

(assert (=> b!57856 (= c!7213 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57857 () Bool)

(assert (=> b!57857 (= e!38095 call!4213)))

(declare-fun b!57858 () Bool)

(declare-fun res!32314 () Bool)

(assert (=> b!57858 (=> (not res!32314) (not e!38091))))

(assert (=> b!57858 (= res!32314 (not (contains!675 lt!23082 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57859 () Bool)

(declare-fun lt!23084 () Unit!1484)

(declare-fun lt!23080 () Unit!1484)

(assert (=> b!57859 (= lt!23084 lt!23080)))

(declare-fun lt!23085 () V!2833)

(declare-fun lt!23081 () (_ BitVec 64))

(declare-fun lt!23083 () ListLongMap!1339)

(declare-fun lt!23086 () (_ BitVec 64))

(assert (=> b!57859 (not (contains!675 (+!79 lt!23083 (tuple2!2009 lt!23081 lt!23085)) lt!23086))))

(assert (=> b!57859 (= lt!23080 (addStillNotContains!16 lt!23083 lt!23081 lt!23085 lt!23086))))

(assert (=> b!57859 (= lt!23086 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57859 (= lt!23085 (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57859 (= lt!23081 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57859 (= lt!23083 call!4213)))

(assert (=> b!57859 (= e!38095 (+!79 call!4213 (tuple2!2009 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!57860 () Bool)

(assert (=> b!57860 (= e!38090 (= lt!23082 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16))))))

(assert (= (and d!10719 c!7214) b!57853))

(assert (= (and d!10719 (not c!7214)) b!57856))

(assert (= (and b!57856 c!7213) b!57859))

(assert (= (and b!57856 (not c!7213)) b!57857))

(assert (= (or b!57859 b!57857) bm!4210))

(assert (= (and d!10719 res!32313) b!57858))

(assert (= (and b!57858 res!32314) b!57854))

(assert (= (and b!57854 res!32316) b!57849))

(assert (= (and b!57854 c!7212) b!57850))

(assert (= (and b!57854 (not c!7212)) b!57852))

(assert (= (and b!57850 res!32315) b!57851))

(assert (= (and b!57852 c!7211) b!57860))

(assert (= (and b!57852 (not c!7211)) b!57855))

(declare-fun b_lambda!2521 () Bool)

(assert (=> (not b_lambda!2521) (not b!57851)))

(assert (=> b!57851 t!4745))

(declare-fun b_and!3481 () Bool)

(assert (= b_and!3477 (and (=> t!4745 result!2353) b_and!3481)))

(assert (=> b!57851 t!4747))

(declare-fun b_and!3483 () Bool)

(assert (= b_and!3479 (and (=> t!4747 result!2355) b_and!3483)))

(declare-fun b_lambda!2523 () Bool)

(assert (=> (not b_lambda!2523) (not b!57859)))

(assert (=> b!57859 t!4745))

(declare-fun b_and!3485 () Bool)

(assert (= b_and!3481 (and (=> t!4745 result!2353) b_and!3485)))

(assert (=> b!57859 t!4747))

(declare-fun b_and!3487 () Bool)

(assert (= b_and!3483 (and (=> t!4747 result!2355) b_and!3487)))

(declare-fun m!48835 () Bool)

(assert (=> d!10719 m!48835))

(assert (=> d!10719 m!48151))

(assert (=> b!57851 m!48177))

(declare-fun m!48837 () Bool)

(assert (=> b!57851 m!48837))

(assert (=> b!57851 m!48341))

(assert (=> b!57851 m!48341))

(assert (=> b!57851 m!48203))

(assert (=> b!57851 m!48345))

(assert (=> b!57851 m!48177))

(assert (=> b!57851 m!48203))

(declare-fun m!48839 () Bool)

(assert (=> b!57860 m!48839))

(assert (=> b!57849 m!48177))

(assert (=> b!57849 m!48177))

(assert (=> b!57849 m!48187))

(declare-fun m!48841 () Bool)

(assert (=> b!57855 m!48841))

(declare-fun m!48843 () Bool)

(assert (=> b!57858 m!48843))

(assert (=> b!57850 m!48177))

(assert (=> b!57850 m!48177))

(declare-fun m!48845 () Bool)

(assert (=> b!57850 m!48845))

(declare-fun m!48847 () Bool)

(assert (=> b!57859 m!48847))

(assert (=> b!57859 m!48341))

(assert (=> b!57859 m!48341))

(assert (=> b!57859 m!48203))

(assert (=> b!57859 m!48345))

(declare-fun m!48849 () Bool)

(assert (=> b!57859 m!48849))

(assert (=> b!57859 m!48177))

(assert (=> b!57859 m!48203))

(declare-fun m!48851 () Bool)

(assert (=> b!57859 m!48851))

(declare-fun m!48853 () Bool)

(assert (=> b!57859 m!48853))

(assert (=> b!57859 m!48851))

(assert (=> bm!4210 m!48839))

(assert (=> b!57856 m!48177))

(assert (=> b!57856 m!48177))

(assert (=> b!57856 m!48187))

(assert (=> bm!4169 d!10719))

(declare-fun d!10721 () Bool)

(assert (=> d!10721 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23087 () Unit!1484)

(assert (=> d!10721 (= lt!23087 (choose!295 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38097 () Bool)

(assert (=> d!10721 e!38097))

(declare-fun res!32317 () Bool)

(assert (=> d!10721 (=> (not res!32317) (not e!38097))))

(assert (=> d!10721 (= res!32317 (isStrictlySorted!270 (toList!685 lt!22730)))))

(assert (=> d!10721 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000) lt!23087)))

(declare-fun b!57861 () Bool)

(assert (=> b!57861 (= e!38097 (containsKey!127 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10721 res!32317) b!57861))

(assert (=> d!10721 m!48257))

(assert (=> d!10721 m!48257))

(assert (=> d!10721 m!48259))

(declare-fun m!48855 () Bool)

(assert (=> d!10721 m!48855))

(declare-fun m!48857 () Bool)

(assert (=> d!10721 m!48857))

(assert (=> b!57861 m!48253))

(assert (=> b!57481 d!10721))

(declare-fun d!10723 () Bool)

(assert (=> d!10723 (= (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!296 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2497 () Bool)

(assert (= bs!2497 d!10723))

(assert (=> bs!2497 m!48257))

(declare-fun m!48859 () Bool)

(assert (=> bs!2497 m!48859))

(assert (=> b!57481 d!10723))

(declare-fun b!57865 () Bool)

(declare-fun e!38099 () Option!130)

(assert (=> b!57865 (= e!38099 None!128)))

(declare-fun b!57862 () Bool)

(declare-fun e!38098 () Option!130)

(assert (=> b!57862 (= e!38098 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22730)))))))

(declare-fun b!57864 () Bool)

(assert (=> b!57864 (= e!38099 (getValueByKey!124 (t!4733 (toList!685 lt!22730)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57863 () Bool)

(assert (=> b!57863 (= e!38098 e!38099)))

(declare-fun c!7216 () Bool)

(assert (=> b!57863 (= c!7216 (and ((_ is Cons!1415) (toList!685 lt!22730)) (not (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10725 () Bool)

(declare-fun c!7215 () Bool)

(assert (=> d!10725 (= c!7215 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10725 (= (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000) e!38098)))

(assert (= (and d!10725 c!7215) b!57862))

(assert (= (and d!10725 (not c!7215)) b!57863))

(assert (= (and b!57863 c!7216) b!57864))

(assert (= (and b!57863 (not c!7216)) b!57865))

(declare-fun m!48861 () Bool)

(assert (=> b!57864 m!48861))

(assert (=> b!57481 d!10725))

(assert (=> b!57526 d!10591))

(assert (=> d!10591 d!10553))

(declare-fun d!10727 () Bool)

(declare-fun e!38102 () Bool)

(assert (=> d!10727 e!38102))

(declare-fun res!32322 () Bool)

(assert (=> d!10727 (=> (not res!32322) (not e!38102))))

(declare-fun lt!23090 () SeekEntryResult!220)

(assert (=> d!10727 (= res!32322 ((_ is Found!220) lt!23090))))

(assert (=> d!10727 (= lt!23090 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(assert (=> d!10727 true))

(declare-fun _$33!39 () Unit!1484)

(assert (=> d!10727 (= (choose!297 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)) _$33!39)))

(declare-fun b!57870 () Bool)

(declare-fun res!32323 () Bool)

(assert (=> b!57870 (=> (not res!32323) (not e!38102))))

(assert (=> b!57870 (= res!32323 (inRange!0 (index!3003 lt!23090) (mask!5895 newMap!16)))))

(declare-fun b!57871 () Bool)

(assert (=> b!57871 (= e!38102 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!23090)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10727 res!32322) b!57870))

(assert (= (and b!57870 res!32323) b!57871))

(assert (=> d!10727 m!47875))

(assert (=> d!10727 m!48035))

(declare-fun m!48863 () Bool)

(assert (=> b!57870 m!48863))

(declare-fun m!48865 () Bool)

(assert (=> b!57871 m!48865))

(assert (=> d!10591 d!10727))

(assert (=> d!10591 d!10717))

(declare-fun d!10729 () Bool)

(declare-fun e!38104 () Bool)

(assert (=> d!10729 e!38104))

(declare-fun res!32324 () Bool)

(assert (=> d!10729 (=> res!32324 e!38104)))

(declare-fun lt!23092 () Bool)

(assert (=> d!10729 (= res!32324 (not lt!23092))))

(declare-fun lt!23093 () Bool)

(assert (=> d!10729 (= lt!23092 lt!23093)))

(declare-fun lt!23094 () Unit!1484)

(declare-fun e!38103 () Unit!1484)

(assert (=> d!10729 (= lt!23094 e!38103)))

(declare-fun c!7217 () Bool)

(assert (=> d!10729 (= c!7217 lt!23093)))

(assert (=> d!10729 (= lt!23093 (containsKey!127 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10729 (= (contains!675 lt!23010 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23092)))

(declare-fun b!57872 () Bool)

(declare-fun lt!23091 () Unit!1484)

(assert (=> b!57872 (= e!38103 lt!23091)))

(assert (=> b!57872 (= lt!23091 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> b!57872 (isDefined!76 (getValueByKey!124 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57873 () Bool)

(declare-fun Unit!1511 () Unit!1484)

(assert (=> b!57873 (= e!38103 Unit!1511)))

(declare-fun b!57874 () Bool)

(assert (=> b!57874 (= e!38104 (isDefined!76 (getValueByKey!124 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!10729 c!7217) b!57872))

(assert (= (and d!10729 (not c!7217)) b!57873))

(assert (= (and d!10729 (not res!32324)) b!57874))

(declare-fun m!48867 () Bool)

(assert (=> d!10729 m!48867))

(declare-fun m!48869 () Bool)

(assert (=> b!57872 m!48869))

(assert (=> b!57872 m!48595))

(assert (=> b!57872 m!48595))

(declare-fun m!48871 () Bool)

(assert (=> b!57872 m!48871))

(assert (=> b!57874 m!48595))

(assert (=> b!57874 m!48595))

(assert (=> b!57874 m!48871))

(assert (=> d!10633 d!10729))

(declare-fun b!57878 () Bool)

(declare-fun e!38106 () Option!130)

(assert (=> b!57878 (= e!38106 None!128)))

(declare-fun b!57875 () Bool)

(declare-fun e!38105 () Option!130)

(assert (=> b!57875 (= e!38105 (Some!129 (_2!1015 (h!1995 lt!23008))))))

(declare-fun b!57877 () Bool)

(assert (=> b!57877 (= e!38106 (getValueByKey!124 (t!4733 lt!23008) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57876 () Bool)

(assert (=> b!57876 (= e!38105 e!38106)))

(declare-fun c!7219 () Bool)

(assert (=> b!57876 (= c!7219 (and ((_ is Cons!1415) lt!23008) (not (= (_1!1015 (h!1995 lt!23008)) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!10731 () Bool)

(declare-fun c!7218 () Bool)

(assert (=> d!10731 (= c!7218 (and ((_ is Cons!1415) lt!23008) (= (_1!1015 (h!1995 lt!23008)) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10731 (= (getValueByKey!124 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38105)))

(assert (= (and d!10731 c!7218) b!57875))

(assert (= (and d!10731 (not c!7218)) b!57876))

(assert (= (and b!57876 c!7219) b!57877))

(assert (= (and b!57876 (not c!7219)) b!57878))

(declare-fun m!48873 () Bool)

(assert (=> b!57877 m!48873))

(assert (=> d!10633 d!10731))

(declare-fun d!10733 () Bool)

(assert (=> d!10733 (= (getValueByKey!124 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23095 () Unit!1484)

(assert (=> d!10733 (= lt!23095 (choose!304 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38107 () Bool)

(assert (=> d!10733 e!38107))

(declare-fun res!32325 () Bool)

(assert (=> d!10733 (=> (not res!32325) (not e!38107))))

(assert (=> d!10733 (= res!32325 (isStrictlySorted!270 lt!23008))))

(assert (=> d!10733 (= (lemmaContainsTupThenGetReturnValue!41 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23095)))

(declare-fun b!57879 () Bool)

(declare-fun res!32326 () Bool)

(assert (=> b!57879 (=> (not res!32326) (not e!38107))))

(assert (=> b!57879 (= res!32326 (containsKey!127 lt!23008 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57880 () Bool)

(assert (=> b!57880 (= e!38107 (contains!677 lt!23008 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!10733 res!32325) b!57879))

(assert (= (and b!57879 res!32326) b!57880))

(assert (=> d!10733 m!48589))

(declare-fun m!48875 () Bool)

(assert (=> d!10733 m!48875))

(declare-fun m!48877 () Bool)

(assert (=> d!10733 m!48877))

(declare-fun m!48879 () Bool)

(assert (=> b!57879 m!48879))

(declare-fun m!48881 () Bool)

(assert (=> b!57880 m!48881))

(assert (=> d!10633 d!10733))

(declare-fun d!10735 () Bool)

(declare-fun e!38111 () Bool)

(assert (=> d!10735 e!38111))

(declare-fun res!32327 () Bool)

(assert (=> d!10735 (=> (not res!32327) (not e!38111))))

(declare-fun lt!23096 () List!1419)

(assert (=> d!10735 (= res!32327 (isStrictlySorted!270 lt!23096))))

(declare-fun e!38109 () List!1419)

(assert (=> d!10735 (= lt!23096 e!38109)))

(declare-fun c!7222 () Bool)

(assert (=> d!10735 (= c!7222 (and ((_ is Cons!1415) (toList!685 lt!22713)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22713))) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10735 (isStrictlySorted!270 (toList!685 lt!22713))))

(assert (=> d!10735 (= (insertStrictlySorted!44 (toList!685 lt!22713) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23096)))

(declare-fun bm!4211 () Bool)

(declare-fun call!4214 () List!1419)

(declare-fun call!4215 () List!1419)

(assert (=> bm!4211 (= call!4214 call!4215)))

(declare-fun call!4216 () List!1419)

(declare-fun e!38108 () List!1419)

(declare-fun bm!4212 () Bool)

(assert (=> bm!4212 (= call!4216 ($colon$colon!58 e!38108 (ite c!7222 (h!1995 (toList!685 lt!22713)) (tuple2!2009 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7221 () Bool)

(assert (=> bm!4212 (= c!7221 c!7222)))

(declare-fun b!57881 () Bool)

(declare-fun e!38110 () List!1419)

(assert (=> b!57881 (= e!38110 call!4215)))

(declare-fun b!57882 () Bool)

(assert (=> b!57882 (= e!38109 e!38110)))

(declare-fun c!7220 () Bool)

(assert (=> b!57882 (= c!7220 (and ((_ is Cons!1415) (toList!685 lt!22713)) (= (_1!1015 (h!1995 (toList!685 lt!22713))) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57883 () Bool)

(assert (=> b!57883 (= e!38108 (insertStrictlySorted!44 (t!4733 (toList!685 lt!22713)) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57884 () Bool)

(declare-fun e!38112 () List!1419)

(assert (=> b!57884 (= e!38112 call!4214)))

(declare-fun b!57885 () Bool)

(declare-fun res!32328 () Bool)

(assert (=> b!57885 (=> (not res!32328) (not e!38111))))

(assert (=> b!57885 (= res!32328 (containsKey!127 lt!23096 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun bm!4213 () Bool)

(assert (=> bm!4213 (= call!4215 call!4216)))

(declare-fun c!7223 () Bool)

(declare-fun b!57886 () Bool)

(assert (=> b!57886 (= e!38108 (ite c!7220 (t!4733 (toList!685 lt!22713)) (ite c!7223 (Cons!1415 (h!1995 (toList!685 lt!22713)) (t!4733 (toList!685 lt!22713))) Nil!1416)))))

(declare-fun b!57887 () Bool)

(assert (=> b!57887 (= c!7223 (and ((_ is Cons!1415) (toList!685 lt!22713)) (bvsgt (_1!1015 (h!1995 (toList!685 lt!22713))) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!57887 (= e!38110 e!38112)))

(declare-fun b!57888 () Bool)

(assert (=> b!57888 (= e!38112 call!4214)))

(declare-fun b!57889 () Bool)

(assert (=> b!57889 (= e!38109 call!4216)))

(declare-fun b!57890 () Bool)

(assert (=> b!57890 (= e!38111 (contains!677 lt!23096 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!10735 c!7222) b!57889))

(assert (= (and d!10735 (not c!7222)) b!57882))

(assert (= (and b!57882 c!7220) b!57881))

(assert (= (and b!57882 (not c!7220)) b!57887))

(assert (= (and b!57887 c!7223) b!57884))

(assert (= (and b!57887 (not c!7223)) b!57888))

(assert (= (or b!57884 b!57888) bm!4211))

(assert (= (or b!57881 bm!4211) bm!4213))

(assert (= (or b!57889 bm!4213) bm!4212))

(assert (= (and bm!4212 c!7221) b!57883))

(assert (= (and bm!4212 (not c!7221)) b!57886))

(assert (= (and d!10735 res!32327) b!57885))

(assert (= (and b!57885 res!32328) b!57890))

(declare-fun m!48883 () Bool)

(assert (=> b!57883 m!48883))

(declare-fun m!48885 () Bool)

(assert (=> bm!4212 m!48885))

(declare-fun m!48887 () Bool)

(assert (=> b!57885 m!48887))

(declare-fun m!48889 () Bool)

(assert (=> d!10735 m!48889))

(declare-fun m!48891 () Bool)

(assert (=> d!10735 m!48891))

(declare-fun m!48893 () Bool)

(assert (=> b!57890 m!48893))

(assert (=> d!10633 d!10735))

(declare-fun d!10737 () Bool)

(declare-fun e!38114 () Bool)

(assert (=> d!10737 e!38114))

(declare-fun res!32329 () Bool)

(assert (=> d!10737 (=> res!32329 e!38114)))

(declare-fun lt!23098 () Bool)

(assert (=> d!10737 (= res!32329 (not lt!23098))))

(declare-fun lt!23099 () Bool)

(assert (=> d!10737 (= lt!23098 lt!23099)))

(declare-fun lt!23100 () Unit!1484)

(declare-fun e!38113 () Unit!1484)

(assert (=> d!10737 (= lt!23100 e!38113)))

(declare-fun c!7224 () Bool)

(assert (=> d!10737 (= c!7224 lt!23099)))

(assert (=> d!10737 (= lt!23099 (containsKey!127 (toList!685 lt!22787) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10737 (= (contains!675 lt!22787 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) lt!23098)))

(declare-fun b!57891 () Bool)

(declare-fun lt!23097 () Unit!1484)

(assert (=> b!57891 (= e!38113 lt!23097)))

(assert (=> b!57891 (= lt!23097 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22787) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57891 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57892 () Bool)

(declare-fun Unit!1512 () Unit!1484)

(assert (=> b!57892 (= e!38113 Unit!1512)))

(declare-fun b!57893 () Bool)

(assert (=> b!57893 (= e!38114 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!10737 c!7224) b!57891))

(assert (= (and d!10737 (not c!7224)) b!57892))

(assert (= (and d!10737 (not res!32329)) b!57893))

(assert (=> d!10737 m!48177))

(declare-fun m!48895 () Bool)

(assert (=> d!10737 m!48895))

(assert (=> b!57891 m!48177))

(declare-fun m!48897 () Bool)

(assert (=> b!57891 m!48897))

(assert (=> b!57891 m!48177))

(declare-fun m!48899 () Bool)

(assert (=> b!57891 m!48899))

(assert (=> b!57891 m!48899))

(declare-fun m!48901 () Bool)

(assert (=> b!57891 m!48901))

(assert (=> b!57893 m!48177))

(assert (=> b!57893 m!48899))

(assert (=> b!57893 m!48899))

(assert (=> b!57893 m!48901))

(assert (=> b!57467 d!10737))

(declare-fun d!10739 () Bool)

(assert (=> d!10739 (= (get!1069 (getValueByKey!124 (toList!685 lt!22729) lt!22717)) (v!2372 (getValueByKey!124 (toList!685 lt!22729) lt!22717)))))

(assert (=> d!10641 d!10739))

(declare-fun b!57897 () Bool)

(declare-fun e!38116 () Option!130)

(assert (=> b!57897 (= e!38116 None!128)))

(declare-fun b!57894 () Bool)

(declare-fun e!38115 () Option!130)

(assert (=> b!57894 (= e!38115 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22729)))))))

(declare-fun b!57896 () Bool)

(assert (=> b!57896 (= e!38116 (getValueByKey!124 (t!4733 (toList!685 lt!22729)) lt!22717))))

(declare-fun b!57895 () Bool)

(assert (=> b!57895 (= e!38115 e!38116)))

(declare-fun c!7226 () Bool)

(assert (=> b!57895 (= c!7226 (and ((_ is Cons!1415) (toList!685 lt!22729)) (not (= (_1!1015 (h!1995 (toList!685 lt!22729))) lt!22717))))))

(declare-fun d!10741 () Bool)

(declare-fun c!7225 () Bool)

(assert (=> d!10741 (= c!7225 (and ((_ is Cons!1415) (toList!685 lt!22729)) (= (_1!1015 (h!1995 (toList!685 lt!22729))) lt!22717)))))

(assert (=> d!10741 (= (getValueByKey!124 (toList!685 lt!22729) lt!22717) e!38115)))

(assert (= (and d!10741 c!7225) b!57894))

(assert (= (and d!10741 (not c!7225)) b!57895))

(assert (= (and b!57895 c!7226) b!57896))

(assert (= (and b!57895 (not c!7226)) b!57897))

(declare-fun m!48903 () Bool)

(assert (=> b!57896 m!48903))

(assert (=> d!10641 d!10741))

(declare-fun b!57899 () Bool)

(declare-fun res!32332 () Bool)

(declare-fun e!38117 () Bool)

(assert (=> b!57899 (=> (not res!32332) (not e!38117))))

(assert (=> b!57899 (= res!32332 (bvsge (size!2001 (_2!1016 lt!22658)) (_size!354 (_2!1016 lt!22658))))))

(declare-fun b!57898 () Bool)

(declare-fun res!32333 () Bool)

(assert (=> b!57898 (=> (not res!32333) (not e!38117))))

(assert (=> b!57898 (= res!32333 (and (= (size!1996 (_values!2004 (_2!1016 lt!22658))) (bvadd (mask!5895 (_2!1016 lt!22658)) #b00000000000000000000000000000001)) (= (size!1995 (_keys!3641 (_2!1016 lt!22658))) (size!1996 (_values!2004 (_2!1016 lt!22658)))) (bvsge (_size!354 (_2!1016 lt!22658)) #b00000000000000000000000000000000) (bvsle (_size!354 (_2!1016 lt!22658)) (bvadd (mask!5895 (_2!1016 lt!22658)) #b00000000000000000000000000000001))))))

(declare-fun d!10743 () Bool)

(declare-fun res!32331 () Bool)

(assert (=> d!10743 (=> (not res!32331) (not e!38117))))

(assert (=> d!10743 (= res!32331 (validMask!0 (mask!5895 (_2!1016 lt!22658))))))

(assert (=> d!10743 (= (simpleValid!41 (_2!1016 lt!22658)) e!38117)))

(declare-fun b!57900 () Bool)

(declare-fun res!32330 () Bool)

(assert (=> b!57900 (=> (not res!32330) (not e!38117))))

(assert (=> b!57900 (= res!32330 (= (size!2001 (_2!1016 lt!22658)) (bvadd (_size!354 (_2!1016 lt!22658)) (bvsdiv (bvadd (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!57901 () Bool)

(assert (=> b!57901 (= e!38117 (and (bvsge (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000000) (bvsle (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000011) (bvsge (_vacant!354 (_2!1016 lt!22658)) #b00000000000000000000000000000000)))))

(assert (= (and d!10743 res!32331) b!57898))

(assert (= (and b!57898 res!32333) b!57899))

(assert (= (and b!57899 res!32332) b!57900))

(assert (= (and b!57900 res!32330) b!57901))

(declare-fun m!48905 () Bool)

(assert (=> b!57899 m!48905))

(declare-fun m!48907 () Bool)

(assert (=> d!10743 m!48907))

(assert (=> b!57900 m!48905))

(assert (=> d!10605 d!10743))

(declare-fun d!10745 () Bool)

(assert (=> d!10745 (= (apply!65 lt!22928 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22928) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2498 () Bool)

(assert (= bs!2498 d!10745))

(declare-fun m!48909 () Bool)

(assert (=> bs!2498 m!48909))

(assert (=> bs!2498 m!48909))

(declare-fun m!48911 () Bool)

(assert (=> bs!2498 m!48911))

(assert (=> b!57593 d!10745))

(declare-fun d!10747 () Bool)

(declare-fun res!32334 () Bool)

(declare-fun e!38118 () Bool)

(assert (=> d!10747 (=> res!32334 e!38118)))

(assert (=> d!10747 (= res!32334 (= (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10747 (= (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!38118)))

(declare-fun b!57902 () Bool)

(declare-fun e!38119 () Bool)

(assert (=> b!57902 (= e!38118 e!38119)))

(declare-fun res!32335 () Bool)

(assert (=> b!57902 (=> (not res!32335) (not e!38119))))

(assert (=> b!57902 (= res!32335 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57903 () Bool)

(assert (=> b!57903 (= e!38119 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10747 (not res!32334)) b!57902))

(assert (= (and b!57902 res!32335) b!57903))

(assert (=> d!10747 m!48825))

(assert (=> b!57903 m!47875))

(declare-fun m!48913 () Bool)

(assert (=> b!57903 m!48913))

(assert (=> b!57480 d!10747))

(declare-fun d!10749 () Bool)

(assert (=> d!10749 (= (apply!65 lt!22887 lt!22897) (get!1069 (getValueByKey!124 (toList!685 lt!22887) lt!22897)))))

(declare-fun bs!2499 () Bool)

(assert (= bs!2499 d!10749))

(declare-fun m!48915 () Bool)

(assert (=> bs!2499 m!48915))

(assert (=> bs!2499 m!48915))

(declare-fun m!48917 () Bool)

(assert (=> bs!2499 m!48917))

(assert (=> b!57557 d!10749))

(declare-fun d!10751 () Bool)

(declare-fun e!38120 () Bool)

(assert (=> d!10751 e!38120))

(declare-fun res!32336 () Bool)

(assert (=> d!10751 (=> (not res!32336) (not e!38120))))

(declare-fun lt!23104 () ListLongMap!1339)

(assert (=> d!10751 (= res!32336 (contains!675 lt!23104 (_1!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))))))

(declare-fun lt!23102 () List!1419)

(assert (=> d!10751 (= lt!23104 (ListLongMap!1340 lt!23102))))

(declare-fun lt!23103 () Unit!1484)

(declare-fun lt!23101 () Unit!1484)

(assert (=> d!10751 (= lt!23103 lt!23101)))

(assert (=> d!10751 (= (getValueByKey!124 lt!23102 (_1!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10751 (= lt!23101 (lemmaContainsTupThenGetReturnValue!41 lt!23102 (_1!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10751 (= lt!23102 (insertStrictlySorted!44 (toList!685 lt!22889) (_1!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10751 (= (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) lt!23104)))

(declare-fun b!57904 () Bool)

(declare-fun res!32337 () Bool)

(assert (=> b!57904 (=> (not res!32337) (not e!38120))))

(assert (=> b!57904 (= res!32337 (= (getValueByKey!124 (toList!685 lt!23104) (_1!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))))))))

(declare-fun b!57905 () Bool)

(assert (=> b!57905 (= e!38120 (contains!677 (toList!685 lt!23104) (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))))))

(assert (= (and d!10751 res!32336) b!57904))

(assert (= (and b!57904 res!32337) b!57905))

(declare-fun m!48919 () Bool)

(assert (=> d!10751 m!48919))

(declare-fun m!48921 () Bool)

(assert (=> d!10751 m!48921))

(declare-fun m!48923 () Bool)

(assert (=> d!10751 m!48923))

(declare-fun m!48925 () Bool)

(assert (=> d!10751 m!48925))

(declare-fun m!48927 () Bool)

(assert (=> b!57904 m!48927))

(declare-fun m!48929 () Bool)

(assert (=> b!57905 m!48929))

(assert (=> b!57557 d!10751))

(declare-fun d!10753 () Bool)

(declare-fun e!38122 () Bool)

(assert (=> d!10753 e!38122))

(declare-fun res!32338 () Bool)

(assert (=> d!10753 (=> res!32338 e!38122)))

(declare-fun lt!23106 () Bool)

(assert (=> d!10753 (= res!32338 (not lt!23106))))

(declare-fun lt!23107 () Bool)

(assert (=> d!10753 (= lt!23106 lt!23107)))

(declare-fun lt!23108 () Unit!1484)

(declare-fun e!38121 () Unit!1484)

(assert (=> d!10753 (= lt!23108 e!38121)))

(declare-fun c!7227 () Bool)

(assert (=> d!10753 (= c!7227 lt!23107)))

(assert (=> d!10753 (= lt!23107 (containsKey!127 (toList!685 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) lt!22900))))

(assert (=> d!10753 (= (contains!675 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) lt!22900) lt!23106)))

(declare-fun b!57906 () Bool)

(declare-fun lt!23105 () Unit!1484)

(assert (=> b!57906 (= e!38121 lt!23105)))

(assert (=> b!57906 (= lt!23105 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) lt!22900))))

(assert (=> b!57906 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) lt!22900))))

(declare-fun b!57907 () Bool)

(declare-fun Unit!1513 () Unit!1484)

(assert (=> b!57907 (= e!38121 Unit!1513)))

(declare-fun b!57908 () Bool)

(assert (=> b!57908 (= e!38122 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16)))) lt!22900)))))

(assert (= (and d!10753 c!7227) b!57906))

(assert (= (and d!10753 (not c!7227)) b!57907))

(assert (= (and d!10753 (not res!32338)) b!57908))

(declare-fun m!48931 () Bool)

(assert (=> d!10753 m!48931))

(declare-fun m!48933 () Bool)

(assert (=> b!57906 m!48933))

(declare-fun m!48935 () Bool)

(assert (=> b!57906 m!48935))

(assert (=> b!57906 m!48935))

(declare-fun m!48937 () Bool)

(assert (=> b!57906 m!48937))

(assert (=> b!57908 m!48935))

(assert (=> b!57908 m!48935))

(assert (=> b!57908 m!48937))

(assert (=> b!57557 d!10753))

(declare-fun d!10755 () Bool)

(assert (=> d!10755 (= (apply!65 lt!22905 lt!22893) (get!1069 (getValueByKey!124 (toList!685 lt!22905) lt!22893)))))

(declare-fun bs!2500 () Bool)

(assert (= bs!2500 d!10755))

(declare-fun m!48939 () Bool)

(assert (=> bs!2500 m!48939))

(assert (=> bs!2500 m!48939))

(declare-fun m!48941 () Bool)

(assert (=> bs!2500 m!48941))

(assert (=> b!57557 d!10755))

(declare-fun d!10757 () Bool)

(assert (=> d!10757 (= (apply!65 (+!79 lt!22898 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) lt!22899) (apply!65 lt!22898 lt!22899))))

(declare-fun lt!23109 () Unit!1484)

(assert (=> d!10757 (= lt!23109 (choose!300 lt!22898 lt!22885 (minValue!1939 newMap!16) lt!22899))))

(declare-fun e!38123 () Bool)

(assert (=> d!10757 e!38123))

(declare-fun res!32339 () Bool)

(assert (=> d!10757 (=> (not res!32339) (not e!38123))))

(assert (=> d!10757 (= res!32339 (contains!675 lt!22898 lt!22899))))

(assert (=> d!10757 (= (addApplyDifferent!41 lt!22898 lt!22885 (minValue!1939 newMap!16) lt!22899) lt!23109)))

(declare-fun b!57909 () Bool)

(assert (=> b!57909 (= e!38123 (not (= lt!22899 lt!22885)))))

(assert (= (and d!10757 res!32339) b!57909))

(declare-fun m!48943 () Bool)

(assert (=> d!10757 m!48943))

(assert (=> d!10757 m!48373))

(assert (=> d!10757 m!48355))

(assert (=> d!10757 m!48355))

(assert (=> d!10757 m!48357))

(declare-fun m!48945 () Bool)

(assert (=> d!10757 m!48945))

(assert (=> b!57557 d!10757))

(declare-fun d!10759 () Bool)

(assert (=> d!10759 (= (apply!65 (+!79 lt!22905 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) lt!22893) (apply!65 lt!22905 lt!22893))))

(declare-fun lt!23110 () Unit!1484)

(assert (=> d!10759 (= lt!23110 (choose!300 lt!22905 lt!22903 (minValue!1939 newMap!16) lt!22893))))

(declare-fun e!38124 () Bool)

(assert (=> d!10759 e!38124))

(declare-fun res!32340 () Bool)

(assert (=> d!10759 (=> (not res!32340) (not e!38124))))

(assert (=> d!10759 (= res!32340 (contains!675 lt!22905 lt!22893))))

(assert (=> d!10759 (= (addApplyDifferent!41 lt!22905 lt!22903 (minValue!1939 newMap!16) lt!22893) lt!23110)))

(declare-fun b!57910 () Bool)

(assert (=> b!57910 (= e!38124 (not (= lt!22893 lt!22903)))))

(assert (= (and d!10759 res!32340) b!57910))

(declare-fun m!48947 () Bool)

(assert (=> d!10759 m!48947))

(assert (=> d!10759 m!48361))

(assert (=> d!10759 m!48369))

(assert (=> d!10759 m!48369))

(assert (=> d!10759 m!48371))

(declare-fun m!48949 () Bool)

(assert (=> d!10759 m!48949))

(assert (=> b!57557 d!10759))

(declare-fun d!10761 () Bool)

(declare-fun e!38125 () Bool)

(assert (=> d!10761 e!38125))

(declare-fun res!32341 () Bool)

(assert (=> d!10761 (=> (not res!32341) (not e!38125))))

(declare-fun lt!23114 () ListLongMap!1339)

(assert (=> d!10761 (= res!32341 (contains!675 lt!23114 (_1!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))))))

(declare-fun lt!23112 () List!1419)

(assert (=> d!10761 (= lt!23114 (ListLongMap!1340 lt!23112))))

(declare-fun lt!23113 () Unit!1484)

(declare-fun lt!23111 () Unit!1484)

(assert (=> d!10761 (= lt!23113 lt!23111)))

(assert (=> d!10761 (= (getValueByKey!124 lt!23112 (_1!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))))))

(assert (=> d!10761 (= lt!23111 (lemmaContainsTupThenGetReturnValue!41 lt!23112 (_1!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))))))

(assert (=> d!10761 (= lt!23112 (insertStrictlySorted!44 (toList!685 lt!22898) (_1!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))))))

(assert (=> d!10761 (= (+!79 lt!22898 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) lt!23114)))

(declare-fun b!57911 () Bool)

(declare-fun res!32342 () Bool)

(assert (=> b!57911 (=> (not res!32342) (not e!38125))))

(assert (=> b!57911 (= res!32342 (= (getValueByKey!124 (toList!685 lt!23114) (_1!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))))))))

(declare-fun b!57912 () Bool)

(assert (=> b!57912 (= e!38125 (contains!677 (toList!685 lt!23114) (tuple2!2009 lt!22885 (minValue!1939 newMap!16))))))

(assert (= (and d!10761 res!32341) b!57911))

(assert (= (and b!57911 res!32342) b!57912))

(declare-fun m!48951 () Bool)

(assert (=> d!10761 m!48951))

(declare-fun m!48953 () Bool)

(assert (=> d!10761 m!48953))

(declare-fun m!48955 () Bool)

(assert (=> d!10761 m!48955))

(declare-fun m!48957 () Bool)

(assert (=> d!10761 m!48957))

(declare-fun m!48959 () Bool)

(assert (=> b!57911 m!48959))

(declare-fun m!48961 () Bool)

(assert (=> b!57912 m!48961))

(assert (=> b!57557 d!10761))

(declare-fun d!10763 () Bool)

(assert (=> d!10763 (contains!675 (+!79 lt!22889 (tuple2!2009 lt!22894 (zeroValue!1939 newMap!16))) lt!22900)))

(declare-fun lt!23115 () Unit!1484)

(assert (=> d!10763 (= lt!23115 (choose!301 lt!22889 lt!22894 (zeroValue!1939 newMap!16) lt!22900))))

(assert (=> d!10763 (contains!675 lt!22889 lt!22900)))

(assert (=> d!10763 (= (addStillContains!41 lt!22889 lt!22894 (zeroValue!1939 newMap!16) lt!22900) lt!23115)))

(declare-fun bs!2501 () Bool)

(assert (= bs!2501 d!10763))

(assert (=> bs!2501 m!48363))

(assert (=> bs!2501 m!48363))

(assert (=> bs!2501 m!48379))

(declare-fun m!48963 () Bool)

(assert (=> bs!2501 m!48963))

(declare-fun m!48965 () Bool)

(assert (=> bs!2501 m!48965))

(assert (=> b!57557 d!10763))

(declare-fun d!10765 () Bool)

(declare-fun e!38126 () Bool)

(assert (=> d!10765 e!38126))

(declare-fun res!32343 () Bool)

(assert (=> d!10765 (=> (not res!32343) (not e!38126))))

(declare-fun lt!23119 () ListLongMap!1339)

(assert (=> d!10765 (= res!32343 (contains!675 lt!23119 (_1!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))))))

(declare-fun lt!23117 () List!1419)

(assert (=> d!10765 (= lt!23119 (ListLongMap!1340 lt!23117))))

(declare-fun lt!23118 () Unit!1484)

(declare-fun lt!23116 () Unit!1484)

(assert (=> d!10765 (= lt!23118 lt!23116)))

(assert (=> d!10765 (= (getValueByKey!124 lt!23117 (_1!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))))))

(assert (=> d!10765 (= lt!23116 (lemmaContainsTupThenGetReturnValue!41 lt!23117 (_1!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))))))

(assert (=> d!10765 (= lt!23117 (insertStrictlySorted!44 (toList!685 lt!22905) (_1!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))))))

(assert (=> d!10765 (= (+!79 lt!22905 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) lt!23119)))

(declare-fun b!57913 () Bool)

(declare-fun res!32344 () Bool)

(assert (=> b!57913 (=> (not res!32344) (not e!38126))))

(assert (=> b!57913 (= res!32344 (= (getValueByKey!124 (toList!685 lt!23119) (_1!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))))))))

(declare-fun b!57914 () Bool)

(assert (=> b!57914 (= e!38126 (contains!677 (toList!685 lt!23119) (tuple2!2009 lt!22903 (minValue!1939 newMap!16))))))

(assert (= (and d!10765 res!32343) b!57913))

(assert (= (and b!57913 res!32344) b!57914))

(declare-fun m!48967 () Bool)

(assert (=> d!10765 m!48967))

(declare-fun m!48969 () Bool)

(assert (=> d!10765 m!48969))

(declare-fun m!48971 () Bool)

(assert (=> d!10765 m!48971))

(declare-fun m!48973 () Bool)

(assert (=> d!10765 m!48973))

(declare-fun m!48975 () Bool)

(assert (=> b!57913 m!48975))

(declare-fun m!48977 () Bool)

(assert (=> b!57914 m!48977))

(assert (=> b!57557 d!10765))

(declare-fun d!10767 () Bool)

(assert (=> d!10767 (= (apply!65 (+!79 lt!22905 (tuple2!2009 lt!22903 (minValue!1939 newMap!16))) lt!22893) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22905 (tuple2!2009 lt!22903 (minValue!1939 newMap!16)))) lt!22893)))))

(declare-fun bs!2502 () Bool)

(assert (= bs!2502 d!10767))

(declare-fun m!48979 () Bool)

(assert (=> bs!2502 m!48979))

(assert (=> bs!2502 m!48979))

(declare-fun m!48981 () Bool)

(assert (=> bs!2502 m!48981))

(assert (=> b!57557 d!10767))

(declare-fun d!10769 () Bool)

(assert (=> d!10769 (= (apply!65 (+!79 lt!22887 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) lt!22897) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22887 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))) lt!22897)))))

(declare-fun bs!2503 () Bool)

(assert (= bs!2503 d!10769))

(declare-fun m!48983 () Bool)

(assert (=> bs!2503 m!48983))

(assert (=> bs!2503 m!48983))

(declare-fun m!48985 () Bool)

(assert (=> bs!2503 m!48985))

(assert (=> b!57557 d!10769))

(declare-fun d!10771 () Bool)

(assert (=> d!10771 (= (apply!65 (+!79 lt!22898 (tuple2!2009 lt!22885 (minValue!1939 newMap!16))) lt!22899) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22898 (tuple2!2009 lt!22885 (minValue!1939 newMap!16)))) lt!22899)))))

(declare-fun bs!2504 () Bool)

(assert (= bs!2504 d!10771))

(declare-fun m!48987 () Bool)

(assert (=> bs!2504 m!48987))

(assert (=> bs!2504 m!48987))

(declare-fun m!48989 () Bool)

(assert (=> bs!2504 m!48989))

(assert (=> b!57557 d!10771))

(declare-fun d!10773 () Bool)

(assert (=> d!10773 (= (apply!65 (+!79 lt!22887 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) lt!22897) (apply!65 lt!22887 lt!22897))))

(declare-fun lt!23120 () Unit!1484)

(assert (=> d!10773 (= lt!23120 (choose!300 lt!22887 lt!22901 (zeroValue!1939 newMap!16) lt!22897))))

(declare-fun e!38127 () Bool)

(assert (=> d!10773 e!38127))

(declare-fun res!32345 () Bool)

(assert (=> d!10773 (=> (not res!32345) (not e!38127))))

(assert (=> d!10773 (= res!32345 (contains!675 lt!22887 lt!22897))))

(assert (=> d!10773 (= (addApplyDifferent!41 lt!22887 lt!22901 (zeroValue!1939 newMap!16) lt!22897) lt!23120)))

(declare-fun b!57915 () Bool)

(assert (=> b!57915 (= e!38127 (not (= lt!22897 lt!22901)))))

(assert (= (and d!10773 res!32345) b!57915))

(declare-fun m!48991 () Bool)

(assert (=> d!10773 m!48991))

(assert (=> d!10773 m!48377))

(assert (=> d!10773 m!48367))

(assert (=> d!10773 m!48367))

(assert (=> d!10773 m!48385))

(declare-fun m!48993 () Bool)

(assert (=> d!10773 m!48993))

(assert (=> b!57557 d!10773))

(declare-fun d!10775 () Bool)

(declare-fun e!38128 () Bool)

(assert (=> d!10775 e!38128))

(declare-fun res!32346 () Bool)

(assert (=> d!10775 (=> (not res!32346) (not e!38128))))

(declare-fun lt!23124 () ListLongMap!1339)

(assert (=> d!10775 (= res!32346 (contains!675 lt!23124 (_1!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))))))

(declare-fun lt!23122 () List!1419)

(assert (=> d!10775 (= lt!23124 (ListLongMap!1340 lt!23122))))

(declare-fun lt!23123 () Unit!1484)

(declare-fun lt!23121 () Unit!1484)

(assert (=> d!10775 (= lt!23123 lt!23121)))

(assert (=> d!10775 (= (getValueByKey!124 lt!23122 (_1!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10775 (= lt!23121 (lemmaContainsTupThenGetReturnValue!41 lt!23122 (_1!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10775 (= lt!23122 (insertStrictlySorted!44 (toList!685 lt!22887) (_1!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))))))

(assert (=> d!10775 (= (+!79 lt!22887 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))) lt!23124)))

(declare-fun b!57916 () Bool)

(declare-fun res!32347 () Bool)

(assert (=> b!57916 (=> (not res!32347) (not e!38128))))

(assert (=> b!57916 (= res!32347 (= (getValueByKey!124 (toList!685 lt!23124) (_1!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))))))))

(declare-fun b!57917 () Bool)

(assert (=> b!57917 (= e!38128 (contains!677 (toList!685 lt!23124) (tuple2!2009 lt!22901 (zeroValue!1939 newMap!16))))))

(assert (= (and d!10775 res!32346) b!57916))

(assert (= (and b!57916 res!32347) b!57917))

(declare-fun m!48995 () Bool)

(assert (=> d!10775 m!48995))

(declare-fun m!48997 () Bool)

(assert (=> d!10775 m!48997))

(declare-fun m!48999 () Bool)

(assert (=> d!10775 m!48999))

(declare-fun m!49001 () Bool)

(assert (=> d!10775 m!49001))

(declare-fun m!49003 () Bool)

(assert (=> b!57916 m!49003))

(declare-fun m!49005 () Bool)

(assert (=> b!57917 m!49005))

(assert (=> b!57557 d!10775))

(declare-fun d!10777 () Bool)

(assert (=> d!10777 (= (apply!65 lt!22898 lt!22899) (get!1069 (getValueByKey!124 (toList!685 lt!22898) lt!22899)))))

(declare-fun bs!2505 () Bool)

(assert (= bs!2505 d!10777))

(declare-fun m!49007 () Bool)

(assert (=> bs!2505 m!49007))

(assert (=> bs!2505 m!49007))

(declare-fun m!49009 () Bool)

(assert (=> bs!2505 m!49009))

(assert (=> b!57557 d!10777))

(assert (=> b!57557 d!10719))

(declare-fun d!10779 () Bool)

(declare-fun res!32348 () Bool)

(declare-fun e!38129 () Bool)

(assert (=> d!10779 (=> res!32348 e!38129)))

(assert (=> d!10779 (= res!32348 (and ((_ is Cons!1415) (toList!685 call!4101)) (= (_1!1015 (h!1995 (toList!685 call!4101))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10779 (= (containsKey!127 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38129)))

(declare-fun b!57918 () Bool)

(declare-fun e!38130 () Bool)

(assert (=> b!57918 (= e!38129 e!38130)))

(declare-fun res!32349 () Bool)

(assert (=> b!57918 (=> (not res!32349) (not e!38130))))

(assert (=> b!57918 (= res!32349 (and (or (not ((_ is Cons!1415) (toList!685 call!4101))) (bvsle (_1!1015 (h!1995 (toList!685 call!4101))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1415) (toList!685 call!4101)) (bvslt (_1!1015 (h!1995 (toList!685 call!4101))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!57919 () Bool)

(assert (=> b!57919 (= e!38130 (containsKey!127 (t!4733 (toList!685 call!4101)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10779 (not res!32348)) b!57918))

(assert (= (and b!57918 res!32349) b!57919))

(assert (=> b!57919 m!47875))

(declare-fun m!49011 () Bool)

(assert (=> b!57919 m!49011))

(assert (=> d!10621 d!10779))

(declare-fun d!10781 () Bool)

(assert (=> d!10781 (= (apply!65 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22723) (apply!65 lt!22722 lt!22723))))

(assert (=> d!10781 true))

(declare-fun _$34!751 () Unit!1484)

(assert (=> d!10781 (= (choose!300 lt!22722 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22723) _$34!751)))

(declare-fun bs!2506 () Bool)

(assert (= bs!2506 d!10781))

(assert (=> bs!2506 m!48087))

(assert (=> bs!2506 m!48087))

(assert (=> bs!2506 m!48089))

(assert (=> bs!2506 m!48105))

(assert (=> d!10623 d!10781))

(assert (=> d!10623 d!10625))

(assert (=> d!10623 d!10631))

(assert (=> d!10623 d!10651))

(declare-fun d!10783 () Bool)

(declare-fun e!38132 () Bool)

(assert (=> d!10783 e!38132))

(declare-fun res!32350 () Bool)

(assert (=> d!10783 (=> res!32350 e!38132)))

(declare-fun lt!23126 () Bool)

(assert (=> d!10783 (= res!32350 (not lt!23126))))

(declare-fun lt!23127 () Bool)

(assert (=> d!10783 (= lt!23126 lt!23127)))

(declare-fun lt!23128 () Unit!1484)

(declare-fun e!38131 () Unit!1484)

(assert (=> d!10783 (= lt!23128 e!38131)))

(declare-fun c!7228 () Bool)

(assert (=> d!10783 (= c!7228 lt!23127)))

(assert (=> d!10783 (= lt!23127 (containsKey!127 (toList!685 lt!22722) lt!22723))))

(assert (=> d!10783 (= (contains!675 lt!22722 lt!22723) lt!23126)))

(declare-fun b!57921 () Bool)

(declare-fun lt!23125 () Unit!1484)

(assert (=> b!57921 (= e!38131 lt!23125)))

(assert (=> b!57921 (= lt!23125 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22722) lt!22723))))

(assert (=> b!57921 (isDefined!76 (getValueByKey!124 (toList!685 lt!22722) lt!22723))))

(declare-fun b!57922 () Bool)

(declare-fun Unit!1514 () Unit!1484)

(assert (=> b!57922 (= e!38131 Unit!1514)))

(declare-fun b!57923 () Bool)

(assert (=> b!57923 (= e!38132 (isDefined!76 (getValueByKey!124 (toList!685 lt!22722) lt!22723)))))

(assert (= (and d!10783 c!7228) b!57921))

(assert (= (and d!10783 (not c!7228)) b!57922))

(assert (= (and d!10783 (not res!32350)) b!57923))

(declare-fun m!49013 () Bool)

(assert (=> d!10783 m!49013))

(declare-fun m!49015 () Bool)

(assert (=> b!57921 m!49015))

(assert (=> b!57921 m!48643))

(assert (=> b!57921 m!48643))

(declare-fun m!49017 () Bool)

(assert (=> b!57921 m!49017))

(assert (=> b!57923 m!48643))

(assert (=> b!57923 m!48643))

(assert (=> b!57923 m!49017))

(assert (=> d!10623 d!10783))

(declare-fun d!10785 () Bool)

(declare-fun e!38134 () Bool)

(assert (=> d!10785 e!38134))

(declare-fun res!32351 () Bool)

(assert (=> d!10785 (=> res!32351 e!38134)))

(declare-fun lt!23130 () Bool)

(assert (=> d!10785 (= res!32351 (not lt!23130))))

(declare-fun lt!23131 () Bool)

(assert (=> d!10785 (= lt!23130 lt!23131)))

(declare-fun lt!23132 () Unit!1484)

(declare-fun e!38133 () Unit!1484)

(assert (=> d!10785 (= lt!23132 e!38133)))

(declare-fun c!7229 () Bool)

(assert (=> d!10785 (= c!7229 lt!23131)))

(assert (=> d!10785 (= lt!23131 (containsKey!127 (toList!685 lt!22977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10785 (= (contains!675 lt!22977 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23130)))

(declare-fun b!57924 () Bool)

(declare-fun lt!23129 () Unit!1484)

(assert (=> b!57924 (= e!38133 lt!23129)))

(assert (=> b!57924 (= lt!23129 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57924 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57925 () Bool)

(declare-fun Unit!1515 () Unit!1484)

(assert (=> b!57925 (= e!38133 Unit!1515)))

(declare-fun b!57926 () Bool)

(assert (=> b!57926 (= e!38134 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10785 c!7229) b!57924))

(assert (= (and d!10785 (not c!7229)) b!57925))

(assert (= (and d!10785 (not res!32351)) b!57926))

(declare-fun m!49019 () Bool)

(assert (=> d!10785 m!49019))

(declare-fun m!49021 () Bool)

(assert (=> b!57924 m!49021))

(declare-fun m!49023 () Bool)

(assert (=> b!57924 m!49023))

(assert (=> b!57924 m!49023))

(declare-fun m!49025 () Bool)

(assert (=> b!57924 m!49025))

(assert (=> b!57926 m!49023))

(assert (=> b!57926 m!49023))

(assert (=> b!57926 m!49025))

(assert (=> d!10611 d!10785))

(assert (=> d!10611 d!10541))

(declare-fun b!57930 () Bool)

(declare-fun e!38136 () Option!130)

(assert (=> b!57930 (= e!38136 None!128)))

(declare-fun b!57927 () Bool)

(declare-fun e!38135 () Option!130)

(assert (=> b!57927 (= e!38135 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22960)))))))

(declare-fun b!57929 () Bool)

(assert (=> b!57929 (= e!38136 (getValueByKey!124 (t!4733 (toList!685 lt!22960)) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!57928 () Bool)

(assert (=> b!57928 (= e!38135 e!38136)))

(declare-fun c!7231 () Bool)

(assert (=> b!57928 (= c!7231 (and ((_ is Cons!1415) (toList!685 lt!22960)) (not (= (_1!1015 (h!1995 (toList!685 lt!22960))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun d!10787 () Bool)

(declare-fun c!7230 () Bool)

(assert (=> d!10787 (= c!7230 (and ((_ is Cons!1415) (toList!685 lt!22960)) (= (_1!1015 (h!1995 (toList!685 lt!22960))) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(assert (=> d!10787 (= (getValueByKey!124 (toList!685 lt!22960) (_1!1015 (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) e!38135)))

(assert (= (and d!10787 c!7230) b!57927))

(assert (= (and d!10787 (not c!7230)) b!57928))

(assert (= (and b!57928 c!7231) b!57929))

(assert (= (and b!57928 (not c!7231)) b!57930))

(declare-fun m!49027 () Bool)

(assert (=> b!57929 m!49027))

(assert (=> b!57624 d!10787))

(assert (=> b!57745 d!10529))

(assert (=> b!57537 d!10675))

(declare-fun b!57931 () Bool)

(declare-fun e!38144 () ListLongMap!1339)

(declare-fun call!4223 () ListLongMap!1339)

(assert (=> b!57931 (= e!38144 call!4223)))

(declare-fun call!4217 () ListLongMap!1339)

(declare-fun c!7234 () Bool)

(declare-fun call!4220 () ListLongMap!1339)

(declare-fun bm!4214 () Bool)

(declare-fun call!4221 () ListLongMap!1339)

(declare-fun c!7236 () Bool)

(declare-fun call!4219 () ListLongMap!1339)

(assert (=> bm!4214 (= call!4219 (+!79 (ite c!7234 call!4217 (ite c!7236 call!4221 call!4220)) (ite (or c!7234 c!7236) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (_2!1016 lt!22658))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (_2!1016 lt!22658))))))))

(declare-fun b!57932 () Bool)

(declare-fun e!38147 () ListLongMap!1339)

(assert (=> b!57932 (= e!38147 e!38144)))

(assert (=> b!57932 (= c!7236 (and (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4215 () Bool)

(assert (=> bm!4215 (= call!4217 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun b!57933 () Bool)

(declare-fun e!38140 () Bool)

(declare-fun e!38137 () Bool)

(assert (=> b!57933 (= e!38140 e!38137)))

(declare-fun res!32357 () Bool)

(declare-fun call!4222 () Bool)

(assert (=> b!57933 (= res!32357 call!4222)))

(assert (=> b!57933 (=> (not res!32357) (not e!38137))))

(declare-fun b!57934 () Bool)

(declare-fun res!32354 () Bool)

(declare-fun e!38145 () Bool)

(assert (=> b!57934 (=> (not res!32354) (not e!38145))))

(declare-fun e!38148 () Bool)

(assert (=> b!57934 (= res!32354 e!38148)))

(declare-fun res!32353 () Bool)

(assert (=> b!57934 (=> res!32353 e!38148)))

(declare-fun e!38141 () Bool)

(assert (=> b!57934 (= res!32353 (not e!38141))))

(declare-fun res!32355 () Bool)

(assert (=> b!57934 (=> (not res!32355) (not e!38141))))

(assert (=> b!57934 (= res!32355 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(declare-fun bm!4216 () Bool)

(declare-fun lt!23154 () ListLongMap!1339)

(assert (=> bm!4216 (= call!4222 (contains!675 lt!23154 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57935 () Bool)

(declare-fun e!38146 () Unit!1484)

(declare-fun lt!23144 () Unit!1484)

(assert (=> b!57935 (= e!38146 lt!23144)))

(declare-fun lt!23137 () ListLongMap!1339)

(assert (=> b!57935 (= lt!23137 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun lt!23142 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23142 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23148 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23148 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000))))

(declare-fun lt!23140 () Unit!1484)

(assert (=> b!57935 (= lt!23140 (addStillContains!41 lt!23137 lt!23142 (zeroValue!1939 (_2!1016 lt!22658)) lt!23148))))

(assert (=> b!57935 (contains!675 (+!79 lt!23137 (tuple2!2009 lt!23142 (zeroValue!1939 (_2!1016 lt!22658)))) lt!23148)))

(declare-fun lt!23152 () Unit!1484)

(assert (=> b!57935 (= lt!23152 lt!23140)))

(declare-fun lt!23146 () ListLongMap!1339)

(assert (=> b!57935 (= lt!23146 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun lt!23133 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23133 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23147 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23147 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000))))

(declare-fun lt!23143 () Unit!1484)

(assert (=> b!57935 (= lt!23143 (addApplyDifferent!41 lt!23146 lt!23133 (minValue!1939 (_2!1016 lt!22658)) lt!23147))))

(assert (=> b!57935 (= (apply!65 (+!79 lt!23146 (tuple2!2009 lt!23133 (minValue!1939 (_2!1016 lt!22658)))) lt!23147) (apply!65 lt!23146 lt!23147))))

(declare-fun lt!23150 () Unit!1484)

(assert (=> b!57935 (= lt!23150 lt!23143)))

(declare-fun lt!23135 () ListLongMap!1339)

(assert (=> b!57935 (= lt!23135 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun lt!23149 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23149 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23145 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23145 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000))))

(declare-fun lt!23136 () Unit!1484)

(assert (=> b!57935 (= lt!23136 (addApplyDifferent!41 lt!23135 lt!23149 (zeroValue!1939 (_2!1016 lt!22658)) lt!23145))))

(assert (=> b!57935 (= (apply!65 (+!79 lt!23135 (tuple2!2009 lt!23149 (zeroValue!1939 (_2!1016 lt!22658)))) lt!23145) (apply!65 lt!23135 lt!23145))))

(declare-fun lt!23134 () Unit!1484)

(assert (=> b!57935 (= lt!23134 lt!23136)))

(declare-fun lt!23153 () ListLongMap!1339)

(assert (=> b!57935 (= lt!23153 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))))))

(declare-fun lt!23151 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23151 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23141 () (_ BitVec 64))

(assert (=> b!57935 (= lt!23141 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000))))

(assert (=> b!57935 (= lt!23144 (addApplyDifferent!41 lt!23153 lt!23151 (minValue!1939 (_2!1016 lt!22658)) lt!23141))))

(assert (=> b!57935 (= (apply!65 (+!79 lt!23153 (tuple2!2009 lt!23151 (minValue!1939 (_2!1016 lt!22658)))) lt!23141) (apply!65 lt!23153 lt!23141))))

(declare-fun d!10789 () Bool)

(assert (=> d!10789 e!38145))

(declare-fun res!32360 () Bool)

(assert (=> d!10789 (=> (not res!32360) (not e!38145))))

(assert (=> d!10789 (= res!32360 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))))

(declare-fun lt!23138 () ListLongMap!1339)

(assert (=> d!10789 (= lt!23154 lt!23138)))

(declare-fun lt!23139 () Unit!1484)

(assert (=> d!10789 (= lt!23139 e!38146)))

(declare-fun c!7233 () Bool)

(declare-fun e!38143 () Bool)

(assert (=> d!10789 (= c!7233 e!38143)))

(declare-fun res!32352 () Bool)

(assert (=> d!10789 (=> (not res!32352) (not e!38143))))

(assert (=> d!10789 (= res!32352 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(assert (=> d!10789 (= lt!23138 e!38147)))

(assert (=> d!10789 (= c!7234 (and (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10789 (validMask!0 (mask!5895 (_2!1016 lt!22658)))))

(assert (=> d!10789 (= (getCurrentListMap!386 (_keys!3641 (_2!1016 lt!22658)) (_values!2004 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658)) (extraKeys!1912 (_2!1016 lt!22658)) (zeroValue!1939 (_2!1016 lt!22658)) (minValue!1939 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22658))) lt!23154)))

(declare-fun b!57936 () Bool)

(assert (=> b!57936 (= e!38143 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(declare-fun b!57937 () Bool)

(declare-fun e!38138 () Bool)

(assert (=> b!57937 (= e!38145 e!38138)))

(declare-fun c!7237 () Bool)

(assert (=> b!57937 (= c!7237 (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4217 () Bool)

(declare-fun call!4218 () Bool)

(assert (=> bm!4217 (= call!4218 (contains!675 lt!23154 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4218 () Bool)

(assert (=> bm!4218 (= call!4221 call!4217)))

(declare-fun b!57938 () Bool)

(declare-fun e!38142 () Bool)

(assert (=> b!57938 (= e!38138 e!38142)))

(declare-fun res!32356 () Bool)

(assert (=> b!57938 (= res!32356 call!4218)))

(assert (=> b!57938 (=> (not res!32356) (not e!38142))))

(declare-fun b!57939 () Bool)

(declare-fun e!38139 () Bool)

(assert (=> b!57939 (= e!38139 (= (apply!65 lt!23154 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (_values!2004 (_2!1016 lt!22658))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 (_2!1016 lt!22658)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57939 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (_values!2004 (_2!1016 lt!22658)))))))

(assert (=> b!57939 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(declare-fun bm!4219 () Bool)

(assert (=> bm!4219 (= call!4223 call!4219)))

(declare-fun b!57940 () Bool)

(assert (=> b!57940 (= e!38148 e!38139)))

(declare-fun res!32358 () Bool)

(assert (=> b!57940 (=> (not res!32358) (not e!38139))))

(assert (=> b!57940 (= res!32358 (contains!675 lt!23154 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(assert (=> b!57940 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(declare-fun b!57941 () Bool)

(assert (=> b!57941 (= e!38138 (not call!4218))))

(declare-fun b!57942 () Bool)

(assert (=> b!57942 (= e!38140 (not call!4222))))

(declare-fun b!57943 () Bool)

(declare-fun Unit!1516 () Unit!1484)

(assert (=> b!57943 (= e!38146 Unit!1516)))

(declare-fun b!57944 () Bool)

(declare-fun e!38149 () ListLongMap!1339)

(assert (=> b!57944 (= e!38149 call!4223)))

(declare-fun bm!4220 () Bool)

(assert (=> bm!4220 (= call!4220 call!4221)))

(declare-fun b!57945 () Bool)

(assert (=> b!57945 (= e!38147 (+!79 call!4219 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (_2!1016 lt!22658)))))))

(declare-fun b!57946 () Bool)

(assert (=> b!57946 (= e!38149 call!4220)))

(declare-fun b!57947 () Bool)

(declare-fun c!7235 () Bool)

(assert (=> b!57947 (= c!7235 (and (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57947 (= e!38144 e!38149)))

(declare-fun b!57948 () Bool)

(declare-fun res!32359 () Bool)

(assert (=> b!57948 (=> (not res!32359) (not e!38145))))

(assert (=> b!57948 (= res!32359 e!38140)))

(declare-fun c!7232 () Bool)

(assert (=> b!57948 (= c!7232 (not (= (bvand (extraKeys!1912 (_2!1016 lt!22658)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!57949 () Bool)

(assert (=> b!57949 (= e!38137 (= (apply!65 lt!23154 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 (_2!1016 lt!22658))))))

(declare-fun b!57950 () Bool)

(assert (=> b!57950 (= e!38142 (= (apply!65 lt!23154 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 (_2!1016 lt!22658))))))

(declare-fun b!57951 () Bool)

(assert (=> b!57951 (= e!38141 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(assert (= (and d!10789 c!7234) b!57945))

(assert (= (and d!10789 (not c!7234)) b!57932))

(assert (= (and b!57932 c!7236) b!57931))

(assert (= (and b!57932 (not c!7236)) b!57947))

(assert (= (and b!57947 c!7235) b!57944))

(assert (= (and b!57947 (not c!7235)) b!57946))

(assert (= (or b!57944 b!57946) bm!4220))

(assert (= (or b!57931 bm!4220) bm!4218))

(assert (= (or b!57931 b!57944) bm!4219))

(assert (= (or b!57945 bm!4218) bm!4215))

(assert (= (or b!57945 bm!4219) bm!4214))

(assert (= (and d!10789 res!32352) b!57936))

(assert (= (and d!10789 c!7233) b!57935))

(assert (= (and d!10789 (not c!7233)) b!57943))

(assert (= (and d!10789 res!32360) b!57934))

(assert (= (and b!57934 res!32355) b!57951))

(assert (= (and b!57934 (not res!32353)) b!57940))

(assert (= (and b!57940 res!32358) b!57939))

(assert (= (and b!57934 res!32354) b!57948))

(assert (= (and b!57948 c!7232) b!57933))

(assert (= (and b!57948 (not c!7232)) b!57942))

(assert (= (and b!57933 res!32357) b!57949))

(assert (= (or b!57933 b!57942) bm!4216))

(assert (= (and b!57948 res!32359) b!57937))

(assert (= (and b!57937 c!7237) b!57938))

(assert (= (and b!57937 (not c!7237)) b!57941))

(assert (= (and b!57938 res!32356) b!57950))

(assert (= (or b!57938 b!57941) bm!4217))

(declare-fun b_lambda!2525 () Bool)

(assert (=> (not b_lambda!2525) (not b!57939)))

(declare-fun t!4749 () Bool)

(declare-fun tb!1305 () Bool)

(assert (=> (and b!57037 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 (_2!1016 lt!22658))) t!4749) tb!1305))

(declare-fun result!2357 () Bool)

(assert (=> tb!1305 (= result!2357 tp_is_empty!2389)))

(assert (=> b!57939 t!4749))

(declare-fun b_and!3489 () Bool)

(assert (= b_and!3485 (and (=> t!4749 result!2357) b_and!3489)))

(declare-fun tb!1307 () Bool)

(declare-fun t!4751 () Bool)

(assert (=> (and b!57033 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (_2!1016 lt!22658))) t!4751) tb!1307))

(declare-fun result!2359 () Bool)

(assert (= result!2359 result!2357))

(assert (=> b!57939 t!4751))

(declare-fun b_and!3491 () Bool)

(assert (= b_and!3487 (and (=> t!4751 result!2359) b_and!3491)))

(assert (=> d!10789 m!48907))

(declare-fun m!49029 () Bool)

(assert (=> bm!4217 m!49029))

(declare-fun m!49031 () Bool)

(assert (=> b!57945 m!49031))

(declare-fun m!49033 () Bool)

(assert (=> b!57939 m!49033))

(declare-fun m!49035 () Bool)

(assert (=> b!57939 m!49035))

(declare-fun m!49037 () Bool)

(assert (=> b!57939 m!49037))

(assert (=> b!57939 m!49033))

(declare-fun m!49039 () Bool)

(assert (=> b!57939 m!49039))

(assert (=> b!57939 m!49035))

(assert (=> b!57939 m!49037))

(declare-fun m!49041 () Bool)

(assert (=> b!57939 m!49041))

(assert (=> b!57936 m!49033))

(assert (=> b!57936 m!49033))

(declare-fun m!49043 () Bool)

(assert (=> b!57936 m!49043))

(declare-fun m!49045 () Bool)

(assert (=> bm!4216 m!49045))

(declare-fun m!49047 () Bool)

(assert (=> bm!4214 m!49047))

(declare-fun m!49049 () Bool)

(assert (=> b!57949 m!49049))

(assert (=> b!57940 m!49033))

(assert (=> b!57940 m!49033))

(declare-fun m!49051 () Bool)

(assert (=> b!57940 m!49051))

(declare-fun m!49053 () Bool)

(assert (=> b!57935 m!49053))

(declare-fun m!49055 () Bool)

(assert (=> b!57935 m!49055))

(declare-fun m!49057 () Bool)

(assert (=> b!57935 m!49057))

(declare-fun m!49059 () Bool)

(assert (=> b!57935 m!49059))

(declare-fun m!49061 () Bool)

(assert (=> b!57935 m!49061))

(declare-fun m!49063 () Bool)

(assert (=> b!57935 m!49063))

(declare-fun m!49065 () Bool)

(assert (=> b!57935 m!49065))

(declare-fun m!49067 () Bool)

(assert (=> b!57935 m!49067))

(assert (=> b!57935 m!49053))

(assert (=> b!57935 m!49067))

(declare-fun m!49069 () Bool)

(assert (=> b!57935 m!49069))

(assert (=> b!57935 m!49033))

(declare-fun m!49071 () Bool)

(assert (=> b!57935 m!49071))

(declare-fun m!49073 () Bool)

(assert (=> b!57935 m!49073))

(declare-fun m!49075 () Bool)

(assert (=> b!57935 m!49075))

(assert (=> b!57935 m!49061))

(declare-fun m!49077 () Bool)

(assert (=> b!57935 m!49077))

(declare-fun m!49079 () Bool)

(assert (=> b!57935 m!49079))

(declare-fun m!49081 () Bool)

(assert (=> b!57935 m!49081))

(assert (=> b!57935 m!49065))

(declare-fun m!49083 () Bool)

(assert (=> b!57935 m!49083))

(assert (=> bm!4215 m!49073))

(declare-fun m!49085 () Bool)

(assert (=> b!57950 m!49085))

(assert (=> b!57951 m!49033))

(assert (=> b!57951 m!49033))

(assert (=> b!57951 m!49043))

(assert (=> d!10573 d!10789))

(declare-fun b!57955 () Bool)

(declare-fun e!38151 () Option!130)

(assert (=> b!57955 (= e!38151 None!128)))

(declare-fun b!57952 () Bool)

(declare-fun e!38150 () Option!130)

(assert (=> b!57952 (= e!38150 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22953)))))))

(declare-fun b!57954 () Bool)

(assert (=> b!57954 (= e!38151 (getValueByKey!124 (t!4733 (toList!685 lt!22953)) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57953 () Bool)

(assert (=> b!57953 (= e!38150 e!38151)))

(declare-fun c!7239 () Bool)

(assert (=> b!57953 (= c!7239 (and ((_ is Cons!1415) (toList!685 lt!22953)) (not (= (_1!1015 (h!1995 (toList!685 lt!22953))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!10791 () Bool)

(declare-fun c!7238 () Bool)

(assert (=> d!10791 (= c!7238 (and ((_ is Cons!1415) (toList!685 lt!22953)) (= (_1!1015 (h!1995 (toList!685 lt!22953))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10791 (= (getValueByKey!124 (toList!685 lt!22953) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38150)))

(assert (= (and d!10791 c!7238) b!57952))

(assert (= (and d!10791 (not c!7238)) b!57953))

(assert (= (and b!57953 c!7239) b!57954))

(assert (= (and b!57953 (not c!7239)) b!57955))

(declare-fun m!49087 () Bool)

(assert (=> b!57954 m!49087))

(assert (=> b!57607 d!10791))

(declare-fun d!10793 () Bool)

(assert (=> d!10793 (= (apply!65 lt!22977 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1069 (getValueByKey!124 (toList!685 lt!22977) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2507 () Bool)

(assert (= bs!2507 d!10793))

(assert (=> bs!2507 m!48069))

(declare-fun m!49089 () Bool)

(assert (=> bs!2507 m!49089))

(assert (=> bs!2507 m!49089))

(declare-fun m!49091 () Bool)

(assert (=> bs!2507 m!49091))

(assert (=> b!57652 d!10793))

(assert (=> b!57652 d!10667))

(assert (=> b!57478 d!10715))

(declare-fun d!10795 () Bool)

(declare-fun e!38153 () Bool)

(assert (=> d!10795 e!38153))

(declare-fun res!32361 () Bool)

(assert (=> d!10795 (=> res!32361 e!38153)))

(declare-fun lt!23156 () Bool)

(assert (=> d!10795 (= res!32361 (not lt!23156))))

(declare-fun lt!23157 () Bool)

(assert (=> d!10795 (= lt!23156 lt!23157)))

(declare-fun lt!23158 () Unit!1484)

(declare-fun e!38152 () Unit!1484)

(assert (=> d!10795 (= lt!23158 e!38152)))

(declare-fun c!7240 () Bool)

(assert (=> d!10795 (= c!7240 lt!23157)))

(assert (=> d!10795 (= lt!23157 (containsKey!127 (toList!685 lt!22787) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10795 (= (contains!675 lt!22787 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23156)))

(declare-fun b!57956 () Bool)

(declare-fun lt!23155 () Unit!1484)

(assert (=> b!57956 (= e!38152 lt!23155)))

(assert (=> b!57956 (= lt!23155 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22787) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57956 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57957 () Bool)

(declare-fun Unit!1517 () Unit!1484)

(assert (=> b!57957 (= e!38152 Unit!1517)))

(declare-fun b!57958 () Bool)

(assert (=> b!57958 (= e!38153 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10795 c!7240) b!57956))

(assert (= (and d!10795 (not c!7240)) b!57957))

(assert (= (and d!10795 (not res!32361)) b!57958))

(declare-fun m!49093 () Bool)

(assert (=> d!10795 m!49093))

(declare-fun m!49095 () Bool)

(assert (=> b!57956 m!49095))

(declare-fun m!49097 () Bool)

(assert (=> b!57956 m!49097))

(assert (=> b!57956 m!49097))

(declare-fun m!49099 () Bool)

(assert (=> b!57956 m!49099))

(assert (=> b!57958 m!49097))

(assert (=> b!57958 m!49097))

(assert (=> b!57958 m!49099))

(assert (=> bm!4151 d!10795))

(declare-fun b!57962 () Bool)

(declare-fun e!38155 () Option!130)

(assert (=> b!57962 (= e!38155 None!128)))

(declare-fun b!57959 () Bool)

(declare-fun e!38154 () Option!130)

(assert (=> b!57959 (= e!38154 (Some!129 (_2!1015 (h!1995 (toList!685 lt!23010)))))))

(declare-fun b!57961 () Bool)

(assert (=> b!57961 (= e!38155 (getValueByKey!124 (t!4733 (toList!685 lt!23010)) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!57960 () Bool)

(assert (=> b!57960 (= e!38154 e!38155)))

(declare-fun c!7242 () Bool)

(assert (=> b!57960 (= c!7242 (and ((_ is Cons!1415) (toList!685 lt!23010)) (not (= (_1!1015 (h!1995 (toList!685 lt!23010))) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7241 () Bool)

(declare-fun d!10797 () Bool)

(assert (=> d!10797 (= c!7241 (and ((_ is Cons!1415) (toList!685 lt!23010)) (= (_1!1015 (h!1995 (toList!685 lt!23010))) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10797 (= (getValueByKey!124 (toList!685 lt!23010) (_1!1015 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38154)))

(assert (= (and d!10797 c!7241) b!57959))

(assert (= (and d!10797 (not c!7241)) b!57960))

(assert (= (and b!57960 c!7242) b!57961))

(assert (= (and b!57960 (not c!7242)) b!57962))

(declare-fun m!49101 () Bool)

(assert (=> b!57961 m!49101))

(assert (=> b!57687 d!10797))

(assert (=> b!57453 d!10715))

(declare-fun d!10799 () Bool)

(assert (=> d!10799 (= (apply!65 lt!22928 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!685 lt!22928) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2508 () Bool)

(assert (= bs!2508 d!10799))

(assert (=> bs!2508 m!48177))

(declare-fun m!49103 () Bool)

(assert (=> bs!2508 m!49103))

(assert (=> bs!2508 m!49103))

(declare-fun m!49105 () Bool)

(assert (=> bs!2508 m!49105))

(assert (=> b!57582 d!10799))

(declare-fun d!10801 () Bool)

(declare-fun c!7243 () Bool)

(assert (=> d!10801 (= c!7243 ((_ is ValueCellFull!851) (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000)))))

(declare-fun e!38156 () V!2833)

(assert (=> d!10801 (= (get!1066 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38156)))

(declare-fun b!57963 () Bool)

(assert (=> b!57963 (= e!38156 (get!1067 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57964 () Bool)

(assert (=> b!57964 (= e!38156 (get!1068 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10801 c!7243) b!57963))

(assert (= (and d!10801 (not c!7243)) b!57964))

(assert (=> b!57963 m!48393))

(assert (=> b!57963 m!48203))

(declare-fun m!49107 () Bool)

(assert (=> b!57963 m!49107))

(assert (=> b!57964 m!48393))

(assert (=> b!57964 m!48203))

(declare-fun m!49109 () Bool)

(assert (=> b!57964 m!49109))

(assert (=> b!57582 d!10801))

(declare-fun d!10803 () Bool)

(declare-fun res!32362 () Bool)

(declare-fun e!38157 () Bool)

(assert (=> d!10803 (=> res!32362 e!38157)))

(assert (=> d!10803 (= res!32362 (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10803 (= (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!38157)))

(declare-fun b!57965 () Bool)

(declare-fun e!38158 () Bool)

(assert (=> b!57965 (= e!38157 e!38158)))

(declare-fun res!32363 () Bool)

(assert (=> b!57965 (=> (not res!32363) (not e!38158))))

(assert (=> b!57965 (= res!32363 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!57966 () Bool)

(assert (=> b!57966 (= e!38158 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10803 (not res!32362)) b!57965))

(assert (= (and b!57965 res!32363) b!57966))

(declare-fun m!49111 () Bool)

(assert (=> d!10803 m!49111))

(assert (=> b!57966 m!47875))

(declare-fun m!49113 () Bool)

(assert (=> b!57966 m!49113))

(assert (=> b!57736 d!10803))

(assert (=> d!10669 d!10533))

(declare-fun d!10805 () Bool)

(declare-fun e!38159 () Bool)

(assert (=> d!10805 e!38159))

(declare-fun res!32364 () Bool)

(assert (=> d!10805 (=> (not res!32364) (not e!38159))))

(declare-fun lt!23162 () ListLongMap!1339)

(assert (=> d!10805 (= res!32364 (contains!675 lt!23162 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23160 () List!1419)

(assert (=> d!10805 (= lt!23162 (ListLongMap!1340 lt!23160))))

(declare-fun lt!23161 () Unit!1484)

(declare-fun lt!23159 () Unit!1484)

(assert (=> d!10805 (= lt!23161 lt!23159)))

(assert (=> d!10805 (= (getValueByKey!124 lt!23160 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10805 (= lt!23159 (lemmaContainsTupThenGetReturnValue!41 lt!23160 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10805 (= lt!23160 (insertStrictlySorted!44 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10805 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23162)))

(declare-fun b!57967 () Bool)

(declare-fun res!32365 () Bool)

(assert (=> b!57967 (=> (not res!32365) (not e!38159))))

(assert (=> b!57967 (= res!32365 (= (getValueByKey!124 (toList!685 lt!23162) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57968 () Bool)

(assert (=> b!57968 (= e!38159 (contains!677 (toList!685 lt!23162) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10805 res!32364) b!57967))

(assert (= (and b!57967 res!32365) b!57968))

(declare-fun m!49115 () Bool)

(assert (=> d!10805 m!49115))

(declare-fun m!49117 () Bool)

(assert (=> d!10805 m!49117))

(declare-fun m!49119 () Bool)

(assert (=> d!10805 m!49119))

(declare-fun m!49121 () Bool)

(assert (=> d!10805 m!49121))

(declare-fun m!49123 () Bool)

(assert (=> b!57967 m!49123))

(declare-fun m!49125 () Bool)

(assert (=> b!57968 m!49125))

(assert (=> d!10571 d!10805))

(declare-fun b!57969 () Bool)

(declare-fun e!38160 () (_ BitVec 32))

(assert (=> b!57969 (= e!38160 #b00000000000000000000000000000000)))

(declare-fun b!57970 () Bool)

(declare-fun e!38161 () (_ BitVec 32))

(declare-fun call!4224 () (_ BitVec 32))

(assert (=> b!57970 (= e!38161 call!4224)))

(declare-fun bm!4221 () Bool)

(assert (=> bm!4221 (= call!4224 (arrayCountValidKeys!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!57971 () Bool)

(assert (=> b!57971 (= e!38161 (bvadd #b00000000000000000000000000000001 call!4224))))

(declare-fun b!57972 () Bool)

(assert (=> b!57972 (= e!38160 e!38161)))

(declare-fun c!7244 () Bool)

(assert (=> b!57972 (= c!7244 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun lt!23163 () (_ BitVec 32))

(declare-fun d!10807 () Bool)

(assert (=> d!10807 (and (bvsge lt!23163 #b00000000000000000000000000000000) (bvsle lt!23163 (bvsub (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!10807 (= lt!23163 e!38160)))

(declare-fun c!7245 () Bool)

(assert (=> d!10807 (= c!7245 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10807 (and (bvsle #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1995 (_keys!3641 newMap!16)) (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(assert (=> d!10807 (= (arrayCountValidKeys!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) lt!23163)))

(assert (= (and d!10807 c!7245) b!57969))

(assert (= (and d!10807 (not c!7245)) b!57972))

(assert (= (and b!57972 c!7244) b!57971))

(assert (= (and b!57972 (not c!7244)) b!57970))

(assert (= (or b!57971 b!57970) bm!4221))

(declare-fun m!49127 () Bool)

(assert (=> bm!4221 m!49127))

(declare-fun m!49129 () Bool)

(assert (=> b!57972 m!49129))

(assert (=> b!57972 m!49129))

(declare-fun m!49131 () Bool)

(assert (=> b!57972 m!49131))

(assert (=> d!10571 d!10807))

(declare-fun d!10809 () Bool)

(declare-fun res!32366 () Bool)

(declare-fun e!38162 () Bool)

(assert (=> d!10809 (=> res!32366 e!38162)))

(assert (=> d!10809 (= res!32366 (bvsge lt!22869 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(assert (=> d!10809 (= (arrayNoDuplicates!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) lt!22869 lt!22857) e!38162)))

(declare-fun b!57973 () Bool)

(declare-fun e!38165 () Bool)

(declare-fun call!4225 () Bool)

(assert (=> b!57973 (= e!38165 call!4225)))

(declare-fun c!7246 () Bool)

(declare-fun bm!4222 () Bool)

(assert (=> bm!4222 (= call!4225 (arrayNoDuplicates!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (bvadd lt!22869 #b00000000000000000000000000000001) (ite c!7246 (Cons!1416 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) lt!22869) lt!22857) lt!22857)))))

(declare-fun b!57974 () Bool)

(declare-fun e!38163 () Bool)

(assert (=> b!57974 (= e!38162 e!38163)))

(declare-fun res!32367 () Bool)

(assert (=> b!57974 (=> (not res!32367) (not e!38163))))

(declare-fun e!38164 () Bool)

(assert (=> b!57974 (= res!32367 (not e!38164))))

(declare-fun res!32368 () Bool)

(assert (=> b!57974 (=> (not res!32368) (not e!38164))))

(assert (=> b!57974 (= res!32368 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) lt!22869)))))

(declare-fun b!57975 () Bool)

(assert (=> b!57975 (= e!38163 e!38165)))

(assert (=> b!57975 (= c!7246 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) lt!22869)))))

(declare-fun b!57976 () Bool)

(assert (=> b!57976 (= e!38165 call!4225)))

(declare-fun b!57977 () Bool)

(assert (=> b!57977 (= e!38164 (contains!676 lt!22857 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) lt!22869)))))

(assert (= (and d!10809 (not res!32366)) b!57974))

(assert (= (and b!57974 res!32368) b!57977))

(assert (= (and b!57974 res!32367) b!57975))

(assert (= (and b!57975 c!7246) b!57976))

(assert (= (and b!57975 (not c!7246)) b!57973))

(assert (= (or b!57976 b!57973) bm!4222))

(declare-fun m!49133 () Bool)

(assert (=> bm!4222 m!49133))

(declare-fun m!49135 () Bool)

(assert (=> bm!4222 m!49135))

(assert (=> b!57974 m!49133))

(assert (=> b!57974 m!49133))

(declare-fun m!49137 () Bool)

(assert (=> b!57974 m!49137))

(assert (=> b!57975 m!49133))

(assert (=> b!57975 m!49133))

(assert (=> b!57975 m!49137))

(assert (=> b!57977 m!49133))

(assert (=> b!57977 m!49133))

(declare-fun m!49139 () Bool)

(assert (=> b!57977 m!49139))

(assert (=> d!10571 d!10809))

(assert (=> d!10571 d!10547))

(declare-fun b!57978 () Bool)

(declare-fun e!38167 () Bool)

(declare-fun e!38168 () Bool)

(assert (=> b!57978 (= e!38167 e!38168)))

(declare-fun lt!23164 () (_ BitVec 64))

(assert (=> b!57978 (= lt!23164 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23166 () Unit!1484)

(assert (=> b!57978 (= lt!23166 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) lt!23164 #b00000000000000000000000000000000))))

(assert (=> b!57978 (arrayContainsKey!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) lt!23164 #b00000000000000000000000000000000)))

(declare-fun lt!23165 () Unit!1484)

(assert (=> b!57978 (= lt!23165 lt!23166)))

(declare-fun res!32369 () Bool)

(assert (=> b!57978 (= res!32369 (= (seekEntryOrOpen!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000) (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (mask!5895 newMap!16)) (Found!220 #b00000000000000000000000000000000)))))

(assert (=> b!57978 (=> (not res!32369) (not e!38168))))

(declare-fun d!10811 () Bool)

(declare-fun res!32370 () Bool)

(declare-fun e!38166 () Bool)

(assert (=> d!10811 (=> res!32370 e!38166)))

(assert (=> d!10811 (= res!32370 (bvsge #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(assert (=> d!10811 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (mask!5895 newMap!16)) e!38166)))

(declare-fun b!57979 () Bool)

(declare-fun call!4226 () Bool)

(assert (=> b!57979 (= e!38168 call!4226)))

(declare-fun bm!4223 () Bool)

(assert (=> bm!4223 (= call!4226 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (mask!5895 newMap!16)))))

(declare-fun b!57980 () Bool)

(assert (=> b!57980 (= e!38166 e!38167)))

(declare-fun c!7247 () Bool)

(assert (=> b!57980 (= c!7247 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!57981 () Bool)

(assert (=> b!57981 (= e!38167 call!4226)))

(assert (= (and d!10811 (not res!32370)) b!57980))

(assert (= (and b!57980 c!7247) b!57978))

(assert (= (and b!57980 (not c!7247)) b!57981))

(assert (= (and b!57978 res!32369) b!57979))

(assert (= (or b!57979 b!57981) bm!4223))

(assert (=> b!57978 m!49129))

(declare-fun m!49141 () Bool)

(assert (=> b!57978 m!49141))

(declare-fun m!49143 () Bool)

(assert (=> b!57978 m!49143))

(assert (=> b!57978 m!49129))

(declare-fun m!49145 () Bool)

(assert (=> b!57978 m!49145))

(declare-fun m!49147 () Bool)

(assert (=> bm!4223 m!49147))

(assert (=> b!57980 m!49129))

(assert (=> b!57980 m!49129))

(assert (=> b!57980 m!49131))

(assert (=> d!10571 d!10811))

(assert (=> d!10571 d!10597))

(declare-fun d!10813 () Bool)

(declare-fun e!38169 () Bool)

(assert (=> d!10813 e!38169))

(declare-fun res!32371 () Bool)

(assert (=> d!10813 (=> (not res!32371) (not e!38169))))

(assert (=> d!10813 (= res!32371 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 lt!22881))))))

(declare-fun lt!23167 () Unit!1484)

(assert (=> d!10813 (= lt!23167 (choose!298 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10813 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10813 (= (lemmaValidKeyInArrayIsInListMap!74 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (defaultEntry!2021 newMap!16)) lt!23167)))

(declare-fun b!57982 () Bool)

(assert (=> b!57982 (= e!38169 (contains!675 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 lt!22881) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(assert (= (and d!10813 res!32371) b!57982))

(declare-fun m!49149 () Bool)

(assert (=> d!10813 m!49149))

(assert (=> d!10813 m!48151))

(assert (=> b!57982 m!48277))

(declare-fun m!49151 () Bool)

(assert (=> b!57982 m!49151))

(assert (=> b!57982 m!48277))

(assert (=> b!57982 m!49151))

(declare-fun m!49153 () Bool)

(assert (=> b!57982 m!49153))

(assert (=> d!10571 d!10813))

(declare-fun d!10815 () Bool)

(declare-fun e!38172 () Bool)

(assert (=> d!10815 e!38172))

(declare-fun res!32374 () Bool)

(assert (=> d!10815 (=> (not res!32374) (not e!38172))))

(assert (=> d!10815 (= res!32374 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 (_keys!3641 newMap!16)))))))

(declare-fun lt!23170 () Unit!1484)

(declare-fun choose!41 (array!3689 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1420) Unit!1484)

(assert (=> d!10815 (= lt!23170 (choose!41 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) lt!22869 lt!22857))))

(assert (=> d!10815 (bvslt (size!1995 (_keys!3641 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!10815 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) lt!22869 lt!22857) lt!23170)))

(declare-fun b!57985 () Bool)

(assert (=> b!57985 (= e!38172 (arrayNoDuplicates!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) lt!22869 lt!22857))))

(assert (= (and d!10815 res!32374) b!57985))

(assert (=> d!10815 m!47875))

(declare-fun m!49155 () Bool)

(assert (=> d!10815 m!49155))

(assert (=> b!57985 m!48287))

(assert (=> b!57985 m!48285))

(assert (=> d!10571 d!10815))

(declare-fun d!10817 () Bool)

(assert (=> d!10817 (arrayContainsKey!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!23173 () Unit!1484)

(declare-fun choose!13 (array!3689 (_ BitVec 64) (_ BitVec 32)) Unit!1484)

(assert (=> d!10817 (= lt!23173 (choose!13 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(assert (=> d!10817 (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000)))

(assert (=> d!10817 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))) lt!23173)))

(declare-fun bs!2509 () Bool)

(assert (= bs!2509 d!10817))

(assert (=> bs!2509 m!47875))

(assert (=> bs!2509 m!48305))

(assert (=> bs!2509 m!47875))

(declare-fun m!49157 () Bool)

(assert (=> bs!2509 m!49157))

(assert (=> d!10571 d!10817))

(declare-fun d!10819 () Bool)

(assert (=> d!10819 (= (arrayCountValidKeys!0 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!23176 () Unit!1484)

(declare-fun choose!2 (array!3689 (_ BitVec 32)) Unit!1484)

(assert (=> d!10819 (= lt!23176 (choose!2 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))

(declare-fun e!38175 () Bool)

(assert (=> d!10819 e!38175))

(declare-fun res!32379 () Bool)

(assert (=> d!10819 (=> (not res!32379) (not e!38175))))

(assert (=> d!10819 (= res!32379 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 lt!22873))))))

(assert (=> d!10819 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))) lt!23176)))

(declare-fun b!57990 () Bool)

(declare-fun res!32380 () Bool)

(assert (=> b!57990 (=> (not res!32380) (not e!38175))))

(assert (=> b!57990 (= res!32380 (validKeyInArray!0 (select (arr!1766 lt!22873) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(declare-fun b!57991 () Bool)

(assert (=> b!57991 (= e!38175 (bvslt (size!1995 lt!22873) #b01111111111111111111111111111111))))

(assert (= (and d!10819 res!32379) b!57990))

(assert (= (and b!57990 res!32380) b!57991))

(assert (=> d!10819 m!48283))

(declare-fun m!49159 () Bool)

(assert (=> d!10819 m!49159))

(declare-fun m!49161 () Bool)

(assert (=> b!57990 m!49161))

(assert (=> b!57990 m!49161))

(declare-fun m!49163 () Bool)

(assert (=> b!57990 m!49163))

(assert (=> d!10571 d!10819))

(declare-fun d!10821 () Bool)

(declare-fun res!32381 () Bool)

(declare-fun e!38176 () Bool)

(assert (=> d!10821 (=> res!32381 e!38176)))

(assert (=> d!10821 (= res!32381 (= (select (arr!1766 lt!22872) #b00000000000000000000000000000000) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10821 (= (arrayContainsKey!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38176)))

(declare-fun b!57992 () Bool)

(declare-fun e!38177 () Bool)

(assert (=> b!57992 (= e!38176 e!38177)))

(declare-fun res!32382 () Bool)

(assert (=> b!57992 (=> (not res!32382) (not e!38177))))

(assert (=> b!57992 (= res!32382 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 lt!22872)))))

(declare-fun b!57993 () Bool)

(assert (=> b!57993 (= e!38177 (arrayContainsKey!0 lt!22872 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10821 (not res!32381)) b!57992))

(assert (= (and b!57992 res!32382) b!57993))

(declare-fun m!49165 () Bool)

(assert (=> d!10821 m!49165))

(assert (=> b!57993 m!47875))

(declare-fun m!49167 () Bool)

(assert (=> b!57993 m!49167))

(assert (=> d!10571 d!10821))

(declare-fun b!57994 () Bool)

(declare-fun e!38185 () ListLongMap!1339)

(declare-fun call!4233 () ListLongMap!1339)

(assert (=> b!57994 (= e!38185 call!4233)))

(declare-fun call!4229 () ListLongMap!1339)

(declare-fun c!7252 () Bool)

(declare-fun call!4227 () ListLongMap!1339)

(declare-fun call!4230 () ListLongMap!1339)

(declare-fun call!4231 () ListLongMap!1339)

(declare-fun c!7250 () Bool)

(declare-fun bm!4224 () Bool)

(assert (=> bm!4224 (= call!4229 (+!79 (ite c!7250 call!4227 (ite c!7252 call!4231 call!4230)) (ite (or c!7250 c!7252) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!57995 () Bool)

(declare-fun e!38188 () ListLongMap!1339)

(assert (=> b!57995 (= e!38188 e!38185)))

(assert (=> b!57995 (= c!7252 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4225 () Bool)

(assert (=> bm!4225 (= call!4227 (getCurrentListMapNoExtraKeys!43 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!57996 () Bool)

(declare-fun e!38181 () Bool)

(declare-fun e!38178 () Bool)

(assert (=> b!57996 (= e!38181 e!38178)))

(declare-fun res!32388 () Bool)

(declare-fun call!4232 () Bool)

(assert (=> b!57996 (= res!32388 call!4232)))

(assert (=> b!57996 (=> (not res!32388) (not e!38178))))

(declare-fun b!57997 () Bool)

(declare-fun res!32385 () Bool)

(declare-fun e!38186 () Bool)

(assert (=> b!57997 (=> (not res!32385) (not e!38186))))

(declare-fun e!38189 () Bool)

(assert (=> b!57997 (= res!32385 e!38189)))

(declare-fun res!32384 () Bool)

(assert (=> b!57997 (=> res!32384 e!38189)))

(declare-fun e!38182 () Bool)

(assert (=> b!57997 (= res!32384 (not e!38182))))

(declare-fun res!32386 () Bool)

(assert (=> b!57997 (=> (not res!32386) (not e!38182))))

(assert (=> b!57997 (= res!32386 (bvslt #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun bm!4226 () Bool)

(declare-fun lt!23198 () ListLongMap!1339)

(assert (=> bm!4226 (= call!4232 (contains!675 lt!23198 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57998 () Bool)

(declare-fun e!38187 () Unit!1484)

(declare-fun lt!23188 () Unit!1484)

(assert (=> b!57998 (= e!38187 lt!23188)))

(declare-fun lt!23181 () ListLongMap!1339)

(assert (=> b!57998 (= lt!23181 (getCurrentListMapNoExtraKeys!43 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23186 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23186 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23192 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23192 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23184 () Unit!1484)

(assert (=> b!57998 (= lt!23184 (addStillContains!41 lt!23181 lt!23186 (zeroValue!1939 newMap!16) lt!23192))))

(assert (=> b!57998 (contains!675 (+!79 lt!23181 (tuple2!2009 lt!23186 (zeroValue!1939 newMap!16))) lt!23192)))

(declare-fun lt!23196 () Unit!1484)

(assert (=> b!57998 (= lt!23196 lt!23184)))

(declare-fun lt!23190 () ListLongMap!1339)

(assert (=> b!57998 (= lt!23190 (getCurrentListMapNoExtraKeys!43 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23177 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23177 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23191 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23191 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23187 () Unit!1484)

(assert (=> b!57998 (= lt!23187 (addApplyDifferent!41 lt!23190 lt!23177 (minValue!1939 newMap!16) lt!23191))))

(assert (=> b!57998 (= (apply!65 (+!79 lt!23190 (tuple2!2009 lt!23177 (minValue!1939 newMap!16))) lt!23191) (apply!65 lt!23190 lt!23191))))

(declare-fun lt!23194 () Unit!1484)

(assert (=> b!57998 (= lt!23194 lt!23187)))

(declare-fun lt!23179 () ListLongMap!1339)

(assert (=> b!57998 (= lt!23179 (getCurrentListMapNoExtraKeys!43 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23193 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23193 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23189 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23189 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23180 () Unit!1484)

(assert (=> b!57998 (= lt!23180 (addApplyDifferent!41 lt!23179 lt!23193 (zeroValue!1939 newMap!16) lt!23189))))

(assert (=> b!57998 (= (apply!65 (+!79 lt!23179 (tuple2!2009 lt!23193 (zeroValue!1939 newMap!16))) lt!23189) (apply!65 lt!23179 lt!23189))))

(declare-fun lt!23178 () Unit!1484)

(assert (=> b!57998 (= lt!23178 lt!23180)))

(declare-fun lt!23197 () ListLongMap!1339)

(assert (=> b!57998 (= lt!23197 (getCurrentListMapNoExtraKeys!43 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23195 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23195 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23185 () (_ BitVec 64))

(assert (=> b!57998 (= lt!23185 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!57998 (= lt!23188 (addApplyDifferent!41 lt!23197 lt!23195 (minValue!1939 newMap!16) lt!23185))))

(assert (=> b!57998 (= (apply!65 (+!79 lt!23197 (tuple2!2009 lt!23195 (minValue!1939 newMap!16))) lt!23185) (apply!65 lt!23197 lt!23185))))

(declare-fun d!10823 () Bool)

(assert (=> d!10823 e!38186))

(declare-fun res!32391 () Bool)

(assert (=> d!10823 (=> (not res!32391) (not e!38186))))

(assert (=> d!10823 (= res!32391 (or (bvsge #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))))

(declare-fun lt!23182 () ListLongMap!1339)

(assert (=> d!10823 (= lt!23198 lt!23182)))

(declare-fun lt!23183 () Unit!1484)

(assert (=> d!10823 (= lt!23183 e!38187)))

(declare-fun c!7249 () Bool)

(declare-fun e!38184 () Bool)

(assert (=> d!10823 (= c!7249 e!38184)))

(declare-fun res!32383 () Bool)

(assert (=> d!10823 (=> (not res!32383) (not e!38184))))

(assert (=> d!10823 (= res!32383 (bvslt #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(assert (=> d!10823 (= lt!23182 e!38188)))

(assert (=> d!10823 (= c!7250 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10823 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10823 (= (getCurrentListMap!386 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23198)))

(declare-fun b!57999 () Bool)

(assert (=> b!57999 (= e!38184 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!58000 () Bool)

(declare-fun e!38179 () Bool)

(assert (=> b!58000 (= e!38186 e!38179)))

(declare-fun c!7253 () Bool)

(assert (=> b!58000 (= c!7253 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4227 () Bool)

(declare-fun call!4228 () Bool)

(assert (=> bm!4227 (= call!4228 (contains!675 lt!23198 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4228 () Bool)

(assert (=> bm!4228 (= call!4231 call!4227)))

(declare-fun b!58001 () Bool)

(declare-fun e!38183 () Bool)

(assert (=> b!58001 (= e!38179 e!38183)))

(declare-fun res!32387 () Bool)

(assert (=> b!58001 (= res!32387 call!4228)))

(assert (=> b!58001 (=> (not res!32387) (not e!38183))))

(declare-fun b!58002 () Bool)

(declare-fun e!38180 () Bool)

(assert (=> b!58002 (= e!38180 (= (apply!65 lt!23198 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58002 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))))))

(assert (=> b!58002 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun bm!4229 () Bool)

(assert (=> bm!4229 (= call!4233 call!4229)))

(declare-fun b!58003 () Bool)

(assert (=> b!58003 (= e!38189 e!38180)))

(declare-fun res!32389 () Bool)

(assert (=> b!58003 (=> (not res!32389) (not e!38180))))

(assert (=> b!58003 (= res!32389 (contains!675 lt!23198 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!58003 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun b!58004 () Bool)

(assert (=> b!58004 (= e!38179 (not call!4228))))

(declare-fun b!58005 () Bool)

(assert (=> b!58005 (= e!38181 (not call!4232))))

(declare-fun b!58006 () Bool)

(declare-fun Unit!1518 () Unit!1484)

(assert (=> b!58006 (= e!38187 Unit!1518)))

(declare-fun b!58007 () Bool)

(declare-fun e!38190 () ListLongMap!1339)

(assert (=> b!58007 (= e!38190 call!4233)))

(declare-fun bm!4230 () Bool)

(assert (=> bm!4230 (= call!4230 call!4231)))

(declare-fun b!58008 () Bool)

(assert (=> b!58008 (= e!38188 (+!79 call!4229 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!58009 () Bool)

(assert (=> b!58009 (= e!38190 call!4230)))

(declare-fun b!58010 () Bool)

(declare-fun c!7251 () Bool)

(assert (=> b!58010 (= c!7251 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58010 (= e!38185 e!38190)))

(declare-fun b!58011 () Bool)

(declare-fun res!32390 () Bool)

(assert (=> b!58011 (=> (not res!32390) (not e!38186))))

(assert (=> b!58011 (= res!32390 e!38181)))

(declare-fun c!7248 () Bool)

(assert (=> b!58011 (= c!7248 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58012 () Bool)

(assert (=> b!58012 (= e!38178 (= (apply!65 lt!23198 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!58013 () Bool)

(assert (=> b!58013 (= e!38183 (= (apply!65 lt!23198 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!58014 () Bool)

(assert (=> b!58014 (= e!38182 (validKeyInArray!0 (select (arr!1766 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!10823 c!7250) b!58008))

(assert (= (and d!10823 (not c!7250)) b!57995))

(assert (= (and b!57995 c!7252) b!57994))

(assert (= (and b!57995 (not c!7252)) b!58010))

(assert (= (and b!58010 c!7251) b!58007))

(assert (= (and b!58010 (not c!7251)) b!58009))

(assert (= (or b!58007 b!58009) bm!4230))

(assert (= (or b!57994 bm!4230) bm!4228))

(assert (= (or b!57994 b!58007) bm!4229))

(assert (= (or b!58008 bm!4228) bm!4225))

(assert (= (or b!58008 bm!4229) bm!4224))

(assert (= (and d!10823 res!32383) b!57999))

(assert (= (and d!10823 c!7249) b!57998))

(assert (= (and d!10823 (not c!7249)) b!58006))

(assert (= (and d!10823 res!32391) b!57997))

(assert (= (and b!57997 res!32386) b!58014))

(assert (= (and b!57997 (not res!32384)) b!58003))

(assert (= (and b!58003 res!32389) b!58002))

(assert (= (and b!57997 res!32385) b!58011))

(assert (= (and b!58011 c!7248) b!57996))

(assert (= (and b!58011 (not c!7248)) b!58005))

(assert (= (and b!57996 res!32388) b!58012))

(assert (= (or b!57996 b!58005) bm!4226))

(assert (= (and b!58011 res!32390) b!58000))

(assert (= (and b!58000 c!7253) b!58001))

(assert (= (and b!58000 (not c!7253)) b!58004))

(assert (= (and b!58001 res!32387) b!58013))

(assert (= (or b!58001 b!58004) bm!4227))

(declare-fun b_lambda!2527 () Bool)

(assert (=> (not b_lambda!2527) (not b!58002)))

(assert (=> b!58002 t!4745))

(declare-fun b_and!3493 () Bool)

(assert (= b_and!3489 (and (=> t!4745 result!2353) b_and!3493)))

(assert (=> b!58002 t!4747))

(declare-fun b_and!3495 () Bool)

(assert (= b_and!3491 (and (=> t!4747 result!2355) b_and!3495)))

(assert (=> d!10823 m!48151))

(declare-fun m!49169 () Bool)

(assert (=> bm!4227 m!49169))

(declare-fun m!49171 () Bool)

(assert (=> b!58008 m!49171))

(assert (=> b!58002 m!49129))

(declare-fun m!49173 () Bool)

(assert (=> b!58002 m!49173))

(assert (=> b!58002 m!48203))

(assert (=> b!58002 m!49129))

(declare-fun m!49175 () Bool)

(assert (=> b!58002 m!49175))

(assert (=> b!58002 m!49173))

(assert (=> b!58002 m!48203))

(declare-fun m!49177 () Bool)

(assert (=> b!58002 m!49177))

(assert (=> b!57999 m!49129))

(assert (=> b!57999 m!49129))

(assert (=> b!57999 m!49131))

(declare-fun m!49179 () Bool)

(assert (=> bm!4226 m!49179))

(declare-fun m!49181 () Bool)

(assert (=> bm!4224 m!49181))

(declare-fun m!49183 () Bool)

(assert (=> b!58012 m!49183))

(assert (=> b!58003 m!49129))

(assert (=> b!58003 m!49129))

(declare-fun m!49185 () Bool)

(assert (=> b!58003 m!49185))

(declare-fun m!49187 () Bool)

(assert (=> b!57998 m!49187))

(declare-fun m!49189 () Bool)

(assert (=> b!57998 m!49189))

(declare-fun m!49191 () Bool)

(assert (=> b!57998 m!49191))

(declare-fun m!49193 () Bool)

(assert (=> b!57998 m!49193))

(declare-fun m!49195 () Bool)

(assert (=> b!57998 m!49195))

(declare-fun m!49197 () Bool)

(assert (=> b!57998 m!49197))

(declare-fun m!49199 () Bool)

(assert (=> b!57998 m!49199))

(declare-fun m!49201 () Bool)

(assert (=> b!57998 m!49201))

(assert (=> b!57998 m!49187))

(assert (=> b!57998 m!49201))

(declare-fun m!49203 () Bool)

(assert (=> b!57998 m!49203))

(assert (=> b!57998 m!49129))

(declare-fun m!49205 () Bool)

(assert (=> b!57998 m!49205))

(declare-fun m!49207 () Bool)

(assert (=> b!57998 m!49207))

(declare-fun m!49209 () Bool)

(assert (=> b!57998 m!49209))

(assert (=> b!57998 m!49195))

(declare-fun m!49211 () Bool)

(assert (=> b!57998 m!49211))

(declare-fun m!49213 () Bool)

(assert (=> b!57998 m!49213))

(declare-fun m!49215 () Bool)

(assert (=> b!57998 m!49215))

(assert (=> b!57998 m!49199))

(declare-fun m!49217 () Bool)

(assert (=> b!57998 m!49217))

(assert (=> bm!4225 m!49207))

(declare-fun m!49219 () Bool)

(assert (=> b!58013 m!49219))

(assert (=> b!58014 m!49129))

(assert (=> b!58014 m!49129))

(assert (=> b!58014 m!49131))

(assert (=> d!10571 d!10823))

(declare-fun d!10825 () Bool)

(declare-fun e!38193 () Bool)

(assert (=> d!10825 e!38193))

(declare-fun res!32394 () Bool)

(assert (=> d!10825 (=> (not res!32394) (not e!38193))))

(assert (=> d!10825 (= res!32394 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 (_keys!3641 newMap!16)))))))

(declare-fun lt!23201 () Unit!1484)

(declare-fun choose!102 ((_ BitVec 64) array!3689 (_ BitVec 32) (_ BitVec 32)) Unit!1484)

(assert (=> d!10825 (= lt!23201 (choose!102 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (mask!5895 newMap!16)))))

(assert (=> d!10825 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10825 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (mask!5895 newMap!16)) lt!23201)))

(declare-fun b!58017 () Bool)

(assert (=> b!58017 (= e!38193 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (mask!5895 newMap!16)))))

(assert (= (and d!10825 res!32394) b!58017))

(assert (=> d!10825 m!47875))

(declare-fun m!49221 () Bool)

(assert (=> d!10825 m!49221))

(assert (=> d!10825 m!48151))

(assert (=> b!58017 m!48287))

(assert (=> b!58017 m!48293))

(assert (=> d!10571 d!10825))

(declare-fun d!10827 () Bool)

(declare-fun e!38196 () Bool)

(assert (=> d!10827 e!38196))

(declare-fun res!32397 () Bool)

(assert (=> d!10827 (=> (not res!32397) (not e!38196))))

(assert (=> d!10827 (= res!32397 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 (_keys!3641 newMap!16))) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1996 (_values!2004 newMap!16)))))))

(declare-fun lt!23204 () Unit!1484)

(declare-fun choose!306 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 32) (_ BitVec 64) V!2833 Int) Unit!1484)

(assert (=> d!10827 (= lt!23204 (choose!306 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)))))

(assert (=> d!10827 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10827 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)) lt!23204)))

(declare-fun b!58020 () Bool)

(assert (=> b!58020 (= e!38196 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))))))

(assert (= (and d!10827 res!32397) b!58020))

(assert (=> d!10827 m!47875))

(assert (=> d!10827 m!47873))

(declare-fun m!49223 () Bool)

(assert (=> d!10827 m!49223))

(assert (=> d!10827 m!48151))

(assert (=> b!58020 m!48287))

(assert (=> b!58020 m!48301))

(assert (=> b!58020 m!48027))

(assert (=> b!58020 m!48275))

(assert (=> b!58020 m!48027))

(assert (=> b!58020 m!48303))

(assert (=> d!10571 d!10827))

(declare-fun d!10829 () Bool)

(declare-fun e!38198 () Bool)

(assert (=> d!10829 e!38198))

(declare-fun res!32398 () Bool)

(assert (=> d!10829 (=> res!32398 e!38198)))

(declare-fun lt!23206 () Bool)

(assert (=> d!10829 (= res!32398 (not lt!23206))))

(declare-fun lt!23207 () Bool)

(assert (=> d!10829 (= lt!23206 lt!23207)))

(declare-fun lt!23208 () Unit!1484)

(declare-fun e!38197 () Unit!1484)

(assert (=> d!10829 (= lt!23208 e!38197)))

(declare-fun c!7254 () Bool)

(assert (=> d!10829 (= c!7254 lt!23207)))

(assert (=> d!10829 (= lt!23207 (containsKey!127 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10829 (= (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23206)))

(declare-fun b!58021 () Bool)

(declare-fun lt!23205 () Unit!1484)

(assert (=> b!58021 (= e!38197 lt!23205)))

(assert (=> b!58021 (= lt!23205 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!58021 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58022 () Bool)

(declare-fun Unit!1519 () Unit!1484)

(assert (=> b!58022 (= e!38197 Unit!1519)))

(declare-fun b!58023 () Bool)

(assert (=> b!58023 (= e!38198 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10829 c!7254) b!58021))

(assert (= (and d!10829 (not c!7254)) b!58022))

(assert (= (and d!10829 (not res!32398)) b!58023))

(assert (=> d!10829 m!47875))

(declare-fun m!49225 () Bool)

(assert (=> d!10829 m!49225))

(assert (=> b!58021 m!47875))

(declare-fun m!49227 () Bool)

(assert (=> b!58021 m!49227))

(assert (=> b!58021 m!47875))

(declare-fun m!49229 () Bool)

(assert (=> b!58021 m!49229))

(assert (=> b!58021 m!49229))

(declare-fun m!49231 () Bool)

(assert (=> b!58021 m!49231))

(assert (=> b!58023 m!47875))

(assert (=> b!58023 m!49229))

(assert (=> b!58023 m!49229))

(assert (=> b!58023 m!49231))

(assert (=> d!10571 d!10829))

(declare-fun b!58024 () Bool)

(declare-fun e!38206 () ListLongMap!1339)

(declare-fun call!4240 () ListLongMap!1339)

(assert (=> b!58024 (= e!38206 call!4240)))

(declare-fun call!4234 () ListLongMap!1339)

(declare-fun bm!4231 () Bool)

(declare-fun call!4236 () ListLongMap!1339)

(declare-fun call!4238 () ListLongMap!1339)

(declare-fun call!4237 () ListLongMap!1339)

(declare-fun c!7259 () Bool)

(declare-fun c!7257 () Bool)

(assert (=> bm!4231 (= call!4236 (+!79 (ite c!7257 call!4234 (ite c!7259 call!4238 call!4237)) (ite (or c!7257 c!7259) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!58025 () Bool)

(declare-fun e!38209 () ListLongMap!1339)

(assert (=> b!58025 (= e!38209 e!38206)))

(assert (=> b!58025 (= c!7259 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4232 () Bool)

(assert (=> bm!4232 (= call!4234 (getCurrentListMapNoExtraKeys!43 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!58026 () Bool)

(declare-fun e!38202 () Bool)

(declare-fun e!38199 () Bool)

(assert (=> b!58026 (= e!38202 e!38199)))

(declare-fun res!32404 () Bool)

(declare-fun call!4239 () Bool)

(assert (=> b!58026 (= res!32404 call!4239)))

(assert (=> b!58026 (=> (not res!32404) (not e!38199))))

(declare-fun b!58027 () Bool)

(declare-fun res!32401 () Bool)

(declare-fun e!38207 () Bool)

(assert (=> b!58027 (=> (not res!32401) (not e!38207))))

(declare-fun e!38210 () Bool)

(assert (=> b!58027 (= res!32401 e!38210)))

(declare-fun res!32400 () Bool)

(assert (=> b!58027 (=> res!32400 e!38210)))

(declare-fun e!38203 () Bool)

(assert (=> b!58027 (= res!32400 (not e!38203))))

(declare-fun res!32402 () Bool)

(assert (=> b!58027 (=> (not res!32402) (not e!38203))))

(assert (=> b!58027 (= res!32402 (bvslt #b00000000000000000000000000000000 (size!1995 lt!22881)))))

(declare-fun bm!4233 () Bool)

(declare-fun lt!23230 () ListLongMap!1339)

(assert (=> bm!4233 (= call!4239 (contains!675 lt!23230 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58028 () Bool)

(declare-fun e!38208 () Unit!1484)

(declare-fun lt!23220 () Unit!1484)

(assert (=> b!58028 (= e!38208 lt!23220)))

(declare-fun lt!23213 () ListLongMap!1339)

(assert (=> b!58028 (= lt!23213 (getCurrentListMapNoExtraKeys!43 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23218 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23218 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23224 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23224 (select (arr!1766 lt!22881) #b00000000000000000000000000000000))))

(declare-fun lt!23216 () Unit!1484)

(assert (=> b!58028 (= lt!23216 (addStillContains!41 lt!23213 lt!23218 (zeroValue!1939 newMap!16) lt!23224))))

(assert (=> b!58028 (contains!675 (+!79 lt!23213 (tuple2!2009 lt!23218 (zeroValue!1939 newMap!16))) lt!23224)))

(declare-fun lt!23228 () Unit!1484)

(assert (=> b!58028 (= lt!23228 lt!23216)))

(declare-fun lt!23222 () ListLongMap!1339)

(assert (=> b!58028 (= lt!23222 (getCurrentListMapNoExtraKeys!43 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23209 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23209 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23223 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23223 (select (arr!1766 lt!22881) #b00000000000000000000000000000000))))

(declare-fun lt!23219 () Unit!1484)

(assert (=> b!58028 (= lt!23219 (addApplyDifferent!41 lt!23222 lt!23209 (minValue!1939 newMap!16) lt!23223))))

(assert (=> b!58028 (= (apply!65 (+!79 lt!23222 (tuple2!2009 lt!23209 (minValue!1939 newMap!16))) lt!23223) (apply!65 lt!23222 lt!23223))))

(declare-fun lt!23226 () Unit!1484)

(assert (=> b!58028 (= lt!23226 lt!23219)))

(declare-fun lt!23211 () ListLongMap!1339)

(assert (=> b!58028 (= lt!23211 (getCurrentListMapNoExtraKeys!43 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23225 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23225 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23221 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23221 (select (arr!1766 lt!22881) #b00000000000000000000000000000000))))

(declare-fun lt!23212 () Unit!1484)

(assert (=> b!58028 (= lt!23212 (addApplyDifferent!41 lt!23211 lt!23225 (zeroValue!1939 newMap!16) lt!23221))))

(assert (=> b!58028 (= (apply!65 (+!79 lt!23211 (tuple2!2009 lt!23225 (zeroValue!1939 newMap!16))) lt!23221) (apply!65 lt!23211 lt!23221))))

(declare-fun lt!23210 () Unit!1484)

(assert (=> b!58028 (= lt!23210 lt!23212)))

(declare-fun lt!23229 () ListLongMap!1339)

(assert (=> b!58028 (= lt!23229 (getCurrentListMapNoExtraKeys!43 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23227 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23227 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23217 () (_ BitVec 64))

(assert (=> b!58028 (= lt!23217 (select (arr!1766 lt!22881) #b00000000000000000000000000000000))))

(assert (=> b!58028 (= lt!23220 (addApplyDifferent!41 lt!23229 lt!23227 (minValue!1939 newMap!16) lt!23217))))

(assert (=> b!58028 (= (apply!65 (+!79 lt!23229 (tuple2!2009 lt!23227 (minValue!1939 newMap!16))) lt!23217) (apply!65 lt!23229 lt!23217))))

(declare-fun d!10831 () Bool)

(assert (=> d!10831 e!38207))

(declare-fun res!32407 () Bool)

(assert (=> d!10831 (=> (not res!32407) (not e!38207))))

(assert (=> d!10831 (= res!32407 (or (bvsge #b00000000000000000000000000000000 (size!1995 lt!22881)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 lt!22881)))))))

(declare-fun lt!23214 () ListLongMap!1339)

(assert (=> d!10831 (= lt!23230 lt!23214)))

(declare-fun lt!23215 () Unit!1484)

(assert (=> d!10831 (= lt!23215 e!38208)))

(declare-fun c!7256 () Bool)

(declare-fun e!38205 () Bool)

(assert (=> d!10831 (= c!7256 e!38205)))

(declare-fun res!32399 () Bool)

(assert (=> d!10831 (=> (not res!32399) (not e!38205))))

(assert (=> d!10831 (= res!32399 (bvslt #b00000000000000000000000000000000 (size!1995 lt!22881)))))

(assert (=> d!10831 (= lt!23214 e!38209)))

(assert (=> d!10831 (= c!7257 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10831 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10831 (= (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23230)))

(declare-fun b!58029 () Bool)

(assert (=> b!58029 (= e!38205 (validKeyInArray!0 (select (arr!1766 lt!22881) #b00000000000000000000000000000000)))))

(declare-fun b!58030 () Bool)

(declare-fun e!38200 () Bool)

(assert (=> b!58030 (= e!38207 e!38200)))

(declare-fun c!7260 () Bool)

(assert (=> b!58030 (= c!7260 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4234 () Bool)

(declare-fun call!4235 () Bool)

(assert (=> bm!4234 (= call!4235 (contains!675 lt!23230 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4235 () Bool)

(assert (=> bm!4235 (= call!4238 call!4234)))

(declare-fun b!58031 () Bool)

(declare-fun e!38204 () Bool)

(assert (=> b!58031 (= e!38200 e!38204)))

(declare-fun res!32403 () Bool)

(assert (=> b!58031 (= res!32403 call!4235)))

(assert (=> b!58031 (=> (not res!32403) (not e!38204))))

(declare-fun e!38201 () Bool)

(declare-fun b!58032 () Bool)

(assert (=> b!58032 (= e!38201 (= (apply!65 lt!23230 (select (arr!1766 lt!22881) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 lt!22868) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58032 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 lt!22868)))))

(assert (=> b!58032 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 lt!22881)))))

(declare-fun bm!4236 () Bool)

(assert (=> bm!4236 (= call!4240 call!4236)))

(declare-fun b!58033 () Bool)

(assert (=> b!58033 (= e!38210 e!38201)))

(declare-fun res!32405 () Bool)

(assert (=> b!58033 (=> (not res!32405) (not e!38201))))

(assert (=> b!58033 (= res!32405 (contains!675 lt!23230 (select (arr!1766 lt!22881) #b00000000000000000000000000000000)))))

(assert (=> b!58033 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 lt!22881)))))

(declare-fun b!58034 () Bool)

(assert (=> b!58034 (= e!38200 (not call!4235))))

(declare-fun b!58035 () Bool)

(assert (=> b!58035 (= e!38202 (not call!4239))))

(declare-fun b!58036 () Bool)

(declare-fun Unit!1520 () Unit!1484)

(assert (=> b!58036 (= e!38208 Unit!1520)))

(declare-fun b!58037 () Bool)

(declare-fun e!38211 () ListLongMap!1339)

(assert (=> b!58037 (= e!38211 call!4240)))

(declare-fun bm!4237 () Bool)

(assert (=> bm!4237 (= call!4237 call!4238)))

(declare-fun b!58038 () Bool)

(assert (=> b!58038 (= e!38209 (+!79 call!4236 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!58039 () Bool)

(assert (=> b!58039 (= e!38211 call!4237)))

(declare-fun b!58040 () Bool)

(declare-fun c!7258 () Bool)

(assert (=> b!58040 (= c!7258 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58040 (= e!38206 e!38211)))

(declare-fun b!58041 () Bool)

(declare-fun res!32406 () Bool)

(assert (=> b!58041 (=> (not res!32406) (not e!38207))))

(assert (=> b!58041 (= res!32406 e!38202)))

(declare-fun c!7255 () Bool)

(assert (=> b!58041 (= c!7255 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58042 () Bool)

(assert (=> b!58042 (= e!38199 (= (apply!65 lt!23230 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!58043 () Bool)

(assert (=> b!58043 (= e!38204 (= (apply!65 lt!23230 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!58044 () Bool)

(assert (=> b!58044 (= e!38203 (validKeyInArray!0 (select (arr!1766 lt!22881) #b00000000000000000000000000000000)))))

(assert (= (and d!10831 c!7257) b!58038))

(assert (= (and d!10831 (not c!7257)) b!58025))

(assert (= (and b!58025 c!7259) b!58024))

(assert (= (and b!58025 (not c!7259)) b!58040))

(assert (= (and b!58040 c!7258) b!58037))

(assert (= (and b!58040 (not c!7258)) b!58039))

(assert (= (or b!58037 b!58039) bm!4237))

(assert (= (or b!58024 bm!4237) bm!4235))

(assert (= (or b!58024 b!58037) bm!4236))

(assert (= (or b!58038 bm!4235) bm!4232))

(assert (= (or b!58038 bm!4236) bm!4231))

(assert (= (and d!10831 res!32399) b!58029))

(assert (= (and d!10831 c!7256) b!58028))

(assert (= (and d!10831 (not c!7256)) b!58036))

(assert (= (and d!10831 res!32407) b!58027))

(assert (= (and b!58027 res!32402) b!58044))

(assert (= (and b!58027 (not res!32400)) b!58033))

(assert (= (and b!58033 res!32405) b!58032))

(assert (= (and b!58027 res!32401) b!58041))

(assert (= (and b!58041 c!7255) b!58026))

(assert (= (and b!58041 (not c!7255)) b!58035))

(assert (= (and b!58026 res!32404) b!58042))

(assert (= (or b!58026 b!58035) bm!4233))

(assert (= (and b!58041 res!32406) b!58030))

(assert (= (and b!58030 c!7260) b!58031))

(assert (= (and b!58030 (not c!7260)) b!58034))

(assert (= (and b!58031 res!32403) b!58043))

(assert (= (or b!58031 b!58034) bm!4234))

(declare-fun b_lambda!2529 () Bool)

(assert (=> (not b_lambda!2529) (not b!58032)))

(assert (=> b!58032 t!4745))

(declare-fun b_and!3497 () Bool)

(assert (= b_and!3493 (and (=> t!4745 result!2353) b_and!3497)))

(assert (=> b!58032 t!4747))

(declare-fun b_and!3499 () Bool)

(assert (= b_and!3495 (and (=> t!4747 result!2355) b_and!3499)))

(assert (=> d!10831 m!48151))

(declare-fun m!49233 () Bool)

(assert (=> bm!4234 m!49233))

(declare-fun m!49235 () Bool)

(assert (=> b!58038 m!49235))

(declare-fun m!49237 () Bool)

(assert (=> b!58032 m!49237))

(declare-fun m!49239 () Bool)

(assert (=> b!58032 m!49239))

(assert (=> b!58032 m!48203))

(assert (=> b!58032 m!49237))

(declare-fun m!49241 () Bool)

(assert (=> b!58032 m!49241))

(assert (=> b!58032 m!49239))

(assert (=> b!58032 m!48203))

(declare-fun m!49243 () Bool)

(assert (=> b!58032 m!49243))

(assert (=> b!58029 m!49237))

(assert (=> b!58029 m!49237))

(declare-fun m!49245 () Bool)

(assert (=> b!58029 m!49245))

(declare-fun m!49247 () Bool)

(assert (=> bm!4233 m!49247))

(declare-fun m!49249 () Bool)

(assert (=> bm!4231 m!49249))

(declare-fun m!49251 () Bool)

(assert (=> b!58042 m!49251))

(assert (=> b!58033 m!49237))

(assert (=> b!58033 m!49237))

(declare-fun m!49253 () Bool)

(assert (=> b!58033 m!49253))

(declare-fun m!49255 () Bool)

(assert (=> b!58028 m!49255))

(declare-fun m!49257 () Bool)

(assert (=> b!58028 m!49257))

(declare-fun m!49259 () Bool)

(assert (=> b!58028 m!49259))

(declare-fun m!49261 () Bool)

(assert (=> b!58028 m!49261))

(declare-fun m!49263 () Bool)

(assert (=> b!58028 m!49263))

(declare-fun m!49265 () Bool)

(assert (=> b!58028 m!49265))

(declare-fun m!49267 () Bool)

(assert (=> b!58028 m!49267))

(declare-fun m!49269 () Bool)

(assert (=> b!58028 m!49269))

(assert (=> b!58028 m!49255))

(assert (=> b!58028 m!49269))

(declare-fun m!49271 () Bool)

(assert (=> b!58028 m!49271))

(assert (=> b!58028 m!49237))

(declare-fun m!49273 () Bool)

(assert (=> b!58028 m!49273))

(declare-fun m!49275 () Bool)

(assert (=> b!58028 m!49275))

(declare-fun m!49277 () Bool)

(assert (=> b!58028 m!49277))

(assert (=> b!58028 m!49263))

(declare-fun m!49279 () Bool)

(assert (=> b!58028 m!49279))

(declare-fun m!49281 () Bool)

(assert (=> b!58028 m!49281))

(declare-fun m!49283 () Bool)

(assert (=> b!58028 m!49283))

(assert (=> b!58028 m!49267))

(declare-fun m!49285 () Bool)

(assert (=> b!58028 m!49285))

(assert (=> bm!4232 m!49275))

(declare-fun m!49287 () Bool)

(assert (=> b!58043 m!49287))

(assert (=> b!58044 m!49237))

(assert (=> b!58044 m!49237))

(assert (=> b!58044 m!49245))

(assert (=> d!10571 d!10831))

(assert (=> d!10571 d!10585))

(assert (=> d!10571 d!10567))

(declare-fun d!10833 () Bool)

(declare-fun e!38213 () Bool)

(assert (=> d!10833 e!38213))

(declare-fun res!32408 () Bool)

(assert (=> d!10833 (=> res!32408 e!38213)))

(declare-fun lt!23232 () Bool)

(assert (=> d!10833 (= res!32408 (not lt!23232))))

(declare-fun lt!23233 () Bool)

(assert (=> d!10833 (= lt!23232 lt!23233)))

(declare-fun lt!23234 () Unit!1484)

(declare-fun e!38212 () Unit!1484)

(assert (=> d!10833 (= lt!23234 e!38212)))

(declare-fun c!7261 () Bool)

(assert (=> d!10833 (= c!7261 lt!23233)))

(assert (=> d!10833 (= lt!23233 (containsKey!127 (toList!685 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(assert (=> d!10833 (= (contains!675 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))) lt!23232)))

(declare-fun b!58045 () Bool)

(declare-fun lt!23231 () Unit!1484)

(assert (=> b!58045 (= e!38212 lt!23231)))

(assert (=> b!58045 (= lt!23231 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(assert (=> b!58045 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(declare-fun b!58046 () Bool)

(declare-fun Unit!1521 () Unit!1484)

(assert (=> b!58046 (= e!38212 Unit!1521)))

(declare-fun b!58047 () Bool)

(assert (=> b!58047 (= e!38213 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 lt!22881 lt!22868 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))))

(assert (= (and d!10833 c!7261) b!58045))

(assert (= (and d!10833 (not c!7261)) b!58046))

(assert (= (and d!10833 (not res!32408)) b!58047))

(assert (=> d!10833 m!48279))

(declare-fun m!49289 () Bool)

(assert (=> d!10833 m!49289))

(assert (=> b!58045 m!48279))

(declare-fun m!49291 () Bool)

(assert (=> b!58045 m!49291))

(assert (=> b!58045 m!48279))

(declare-fun m!49293 () Bool)

(assert (=> b!58045 m!49293))

(assert (=> b!58045 m!49293))

(declare-fun m!49295 () Bool)

(assert (=> b!58045 m!49295))

(assert (=> b!58047 m!48279))

(assert (=> b!58047 m!49293))

(assert (=> b!58047 m!49293))

(assert (=> b!58047 m!49295))

(assert (=> d!10571 d!10833))

(declare-fun b!58058 () Bool)

(declare-fun e!38219 () Bool)

(assert (=> b!58058 (= e!38219 (bvslt (size!1995 (_keys!3641 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!10835 () Bool)

(declare-fun e!38218 () Bool)

(assert (=> d!10835 e!38218))

(declare-fun res!32419 () Bool)

(assert (=> d!10835 (=> (not res!32419) (not e!38218))))

(assert (=> d!10835 (= res!32419 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 (_keys!3641 newMap!16)))))))

(declare-fun lt!23237 () Unit!1484)

(declare-fun choose!1 (array!3689 (_ BitVec 32) (_ BitVec 64)) Unit!1484)

(assert (=> d!10835 (= lt!23237 (choose!1 (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10835 e!38219))

(declare-fun res!32418 () Bool)

(assert (=> d!10835 (=> (not res!32418) (not e!38219))))

(assert (=> d!10835 (= res!32418 (and (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvslt (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (size!1995 (_keys!3641 newMap!16)))))))

(assert (=> d!10835 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3641 newMap!16) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23237)))

(declare-fun b!58056 () Bool)

(declare-fun res!32420 () Bool)

(assert (=> b!58056 (=> (not res!32420) (not e!38219))))

(assert (=> b!58056 (= res!32420 (not (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638))))))))

(declare-fun b!58059 () Bool)

(assert (=> b!58059 (= e!38218 (= (arrayCountValidKeys!0 (array!3690 (store (arr!1766 (_keys!3641 newMap!16)) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (size!1995 (_keys!3641 newMap!16))) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3641 newMap!16) #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!58057 () Bool)

(declare-fun res!32417 () Bool)

(assert (=> b!58057 (=> (not res!32417) (not e!38219))))

(assert (=> b!58057 (= res!32417 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10835 res!32418) b!58056))

(assert (= (and b!58056 res!32420) b!58057))

(assert (= (and b!58057 res!32417) b!58058))

(assert (= (and d!10835 res!32419) b!58059))

(assert (=> d!10835 m!47875))

(declare-fun m!49297 () Bool)

(assert (=> d!10835 m!49297))

(declare-fun m!49299 () Bool)

(assert (=> b!58056 m!49299))

(assert (=> b!58056 m!49299))

(declare-fun m!49301 () Bool)

(assert (=> b!58056 m!49301))

(assert (=> b!58059 m!48287))

(assert (=> b!58059 m!48297))

(assert (=> b!58059 m!48139))

(assert (=> b!58057 m!47875))

(assert (=> b!58057 m!48131))

(assert (=> d!10571 d!10835))

(declare-fun b!58060 () Bool)

(declare-fun e!38220 () (_ BitVec 32))

(assert (=> b!58060 (= e!38220 #b00000000000000000000000000000000)))

(declare-fun b!58061 () Bool)

(declare-fun e!38221 () (_ BitVec 32))

(declare-fun call!4241 () (_ BitVec 32))

(assert (=> b!58061 (= e!38221 call!4241)))

(declare-fun bm!4238 () Bool)

(assert (=> bm!4238 (= call!4241 (arrayCountValidKeys!0 lt!22873 (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)))))

(declare-fun b!58062 () Bool)

(assert (=> b!58062 (= e!38221 (bvadd #b00000000000000000000000000000001 call!4241))))

(declare-fun b!58063 () Bool)

(assert (=> b!58063 (= e!38220 e!38221)))

(declare-fun c!7262 () Bool)

(assert (=> b!58063 (= c!7262 (validKeyInArray!0 (select (arr!1766 lt!22873) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(declare-fun d!10837 () Bool)

(declare-fun lt!23238 () (_ BitVec 32))

(assert (=> d!10837 (and (bvsge lt!23238 #b00000000000000000000000000000000) (bvsle lt!23238 (bvsub (size!1995 lt!22873) (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)))))))

(assert (=> d!10837 (= lt!23238 e!38220)))

(declare-fun c!7263 () Bool)

(assert (=> d!10837 (= c!7263 (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)))))

(assert (=> d!10837 (and (bvsle (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)) (bvsge (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001) (size!1995 lt!22873)))))

(assert (=> d!10837 (= (arrayCountValidKeys!0 lt!22873 (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) (bvadd (ite c!7063 (index!3005 lt!22638) (index!3002 lt!22638)) #b00000000000000000000000000000001)) lt!23238)))

(assert (= (and d!10837 c!7263) b!58060))

(assert (= (and d!10837 (not c!7263)) b!58063))

(assert (= (and b!58063 c!7262) b!58062))

(assert (= (and b!58063 (not c!7262)) b!58061))

(assert (= (or b!58062 b!58061) bm!4238))

(declare-fun m!49303 () Bool)

(assert (=> bm!4238 m!49303))

(assert (=> b!58063 m!49161))

(assert (=> b!58063 m!49161))

(assert (=> b!58063 m!49163))

(assert (=> d!10571 d!10837))

(declare-fun d!10839 () Bool)

(declare-fun res!32421 () Bool)

(declare-fun e!38222 () Bool)

(assert (=> d!10839 (=> res!32421 e!38222)))

(assert (=> d!10839 (= res!32421 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10839 (= (containsKey!127 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000) e!38222)))

(declare-fun b!58064 () Bool)

(declare-fun e!38223 () Bool)

(assert (=> b!58064 (= e!38222 e!38223)))

(declare-fun res!32422 () Bool)

(assert (=> b!58064 (=> (not res!32422) (not e!38223))))

(assert (=> b!58064 (= res!32422 (and (or (not ((_ is Cons!1415) (toList!685 lt!22730))) (bvsle (_1!1015 (h!1995 (toList!685 lt!22730))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1415) (toList!685 lt!22730)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22730))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58065 () Bool)

(assert (=> b!58065 (= e!38223 (containsKey!127 (t!4733 (toList!685 lt!22730)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10839 (not res!32421)) b!58064))

(assert (= (and b!58064 res!32422) b!58065))

(declare-fun m!49305 () Bool)

(assert (=> b!58065 m!49305))

(assert (=> d!10569 d!10839))

(assert (=> bm!4164 d!10553))

(declare-fun d!10841 () Bool)

(declare-fun res!32423 () Bool)

(declare-fun e!38224 () Bool)

(assert (=> d!10841 (=> res!32423 e!38224)))

(assert (=> d!10841 (= res!32423 (and ((_ is Cons!1415) (t!4733 (toList!685 lt!22525))) (= (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525)))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10841 (= (containsKey!127 (t!4733 (toList!685 lt!22525)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38224)))

(declare-fun b!58066 () Bool)

(declare-fun e!38225 () Bool)

(assert (=> b!58066 (= e!38224 e!38225)))

(declare-fun res!32424 () Bool)

(assert (=> b!58066 (=> (not res!32424) (not e!38225))))

(assert (=> b!58066 (= res!32424 (and (or (not ((_ is Cons!1415) (t!4733 (toList!685 lt!22525)))) (bvsle (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525)))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1415) (t!4733 (toList!685 lt!22525))) (bvslt (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525)))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!58067 () Bool)

(assert (=> b!58067 (= e!38225 (containsKey!127 (t!4733 (t!4733 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10841 (not res!32423)) b!58066))

(assert (= (and b!58066 res!32424) b!58067))

(assert (=> b!58067 m!47875))

(declare-fun m!49307 () Bool)

(assert (=> b!58067 m!49307))

(assert (=> b!57752 d!10841))

(declare-fun d!10843 () Bool)

(declare-fun e!38227 () Bool)

(assert (=> d!10843 e!38227))

(declare-fun res!32425 () Bool)

(assert (=> d!10843 (=> res!32425 e!38227)))

(declare-fun lt!23240 () Bool)

(assert (=> d!10843 (= res!32425 (not lt!23240))))

(declare-fun lt!23241 () Bool)

(assert (=> d!10843 (= lt!23240 lt!23241)))

(declare-fun lt!23242 () Unit!1484)

(declare-fun e!38226 () Unit!1484)

(assert (=> d!10843 (= lt!23242 e!38226)))

(declare-fun c!7264 () Bool)

(assert (=> d!10843 (= c!7264 lt!23241)))

(assert (=> d!10843 (= lt!23241 (containsKey!127 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10843 (= (contains!675 lt!22949 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23240)))

(declare-fun b!58068 () Bool)

(declare-fun lt!23239 () Unit!1484)

(assert (=> b!58068 (= e!38226 lt!23239)))

(assert (=> b!58068 (= lt!23239 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!58068 (isDefined!76 (getValueByKey!124 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58069 () Bool)

(declare-fun Unit!1522 () Unit!1484)

(assert (=> b!58069 (= e!38226 Unit!1522)))

(declare-fun b!58070 () Bool)

(assert (=> b!58070 (= e!38227 (isDefined!76 (getValueByKey!124 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!10843 c!7264) b!58068))

(assert (= (and d!10843 (not c!7264)) b!58069))

(assert (= (and d!10843 (not res!32425)) b!58070))

(declare-fun m!49309 () Bool)

(assert (=> d!10843 m!49309))

(declare-fun m!49311 () Bool)

(assert (=> b!58068 m!49311))

(assert (=> b!58068 m!48461))

(assert (=> b!58068 m!48461))

(declare-fun m!49313 () Bool)

(assert (=> b!58068 m!49313))

(assert (=> b!58070 m!48461))

(assert (=> b!58070 m!48461))

(assert (=> b!58070 m!49313))

(assert (=> d!10593 d!10843))

(declare-fun b!58074 () Bool)

(declare-fun e!38229 () Option!130)

(assert (=> b!58074 (= e!38229 None!128)))

(declare-fun b!58071 () Bool)

(declare-fun e!38228 () Option!130)

(assert (=> b!58071 (= e!38228 (Some!129 (_2!1015 (h!1995 lt!22947))))))

(declare-fun b!58073 () Bool)

(assert (=> b!58073 (= e!38229 (getValueByKey!124 (t!4733 lt!22947) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58072 () Bool)

(assert (=> b!58072 (= e!38228 e!38229)))

(declare-fun c!7266 () Bool)

(assert (=> b!58072 (= c!7266 (and ((_ is Cons!1415) lt!22947) (not (= (_1!1015 (h!1995 lt!22947)) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!10845 () Bool)

(declare-fun c!7265 () Bool)

(assert (=> d!10845 (= c!7265 (and ((_ is Cons!1415) lt!22947) (= (_1!1015 (h!1995 lt!22947)) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!10845 (= (getValueByKey!124 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38228)))

(assert (= (and d!10845 c!7265) b!58071))

(assert (= (and d!10845 (not c!7265)) b!58072))

(assert (= (and b!58072 c!7266) b!58073))

(assert (= (and b!58072 (not c!7266)) b!58074))

(declare-fun m!49315 () Bool)

(assert (=> b!58073 m!49315))

(assert (=> d!10593 d!10845))

(declare-fun d!10847 () Bool)

(assert (=> d!10847 (= (getValueByKey!124 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!23243 () Unit!1484)

(assert (=> d!10847 (= lt!23243 (choose!304 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!38230 () Bool)

(assert (=> d!10847 e!38230))

(declare-fun res!32426 () Bool)

(assert (=> d!10847 (=> (not res!32426) (not e!38230))))

(assert (=> d!10847 (= res!32426 (isStrictlySorted!270 lt!22947))))

(assert (=> d!10847 (= (lemmaContainsTupThenGetReturnValue!41 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23243)))

(declare-fun b!58075 () Bool)

(declare-fun res!32427 () Bool)

(assert (=> b!58075 (=> (not res!32427) (not e!38230))))

(assert (=> b!58075 (= res!32427 (containsKey!127 lt!22947 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58076 () Bool)

(assert (=> b!58076 (= e!38230 (contains!677 lt!22947 (tuple2!2009 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!10847 res!32426) b!58075))

(assert (= (and b!58075 res!32427) b!58076))

(assert (=> d!10847 m!48455))

(declare-fun m!49317 () Bool)

(assert (=> d!10847 m!49317))

(declare-fun m!49319 () Bool)

(assert (=> d!10847 m!49319))

(declare-fun m!49321 () Bool)

(assert (=> b!58075 m!49321))

(declare-fun m!49323 () Bool)

(assert (=> b!58076 m!49323))

(assert (=> d!10593 d!10847))

(declare-fun d!10849 () Bool)

(declare-fun e!38234 () Bool)

(assert (=> d!10849 e!38234))

(declare-fun res!32428 () Bool)

(assert (=> d!10849 (=> (not res!32428) (not e!38234))))

(declare-fun lt!23244 () List!1419)

(assert (=> d!10849 (= res!32428 (isStrictlySorted!270 lt!23244))))

(declare-fun e!38232 () List!1419)

(assert (=> d!10849 (= lt!23244 e!38232)))

(declare-fun c!7269 () Bool)

(assert (=> d!10849 (= c!7269 (and ((_ is Cons!1415) (toList!685 e!37742)) (bvslt (_1!1015 (h!1995 (toList!685 e!37742))) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!10849 (isStrictlySorted!270 (toList!685 e!37742))))

(assert (=> d!10849 (= (insertStrictlySorted!44 (toList!685 e!37742) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23244)))

(declare-fun bm!4239 () Bool)

(declare-fun call!4242 () List!1419)

(declare-fun call!4243 () List!1419)

(assert (=> bm!4239 (= call!4242 call!4243)))

(declare-fun bm!4240 () Bool)

(declare-fun call!4244 () List!1419)

(declare-fun e!38231 () List!1419)

(assert (=> bm!4240 (= call!4244 ($colon$colon!58 e!38231 (ite c!7269 (h!1995 (toList!685 e!37742)) (tuple2!2009 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7268 () Bool)

(assert (=> bm!4240 (= c!7268 c!7269)))

(declare-fun b!58077 () Bool)

(declare-fun e!38233 () List!1419)

(assert (=> b!58077 (= e!38233 call!4243)))

(declare-fun b!58078 () Bool)

(assert (=> b!58078 (= e!38232 e!38233)))

(declare-fun c!7267 () Bool)

(assert (=> b!58078 (= c!7267 (and ((_ is Cons!1415) (toList!685 e!37742)) (= (_1!1015 (h!1995 (toList!685 e!37742))) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58079 () Bool)

(assert (=> b!58079 (= e!38231 (insertStrictlySorted!44 (t!4733 (toList!685 e!37742)) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58080 () Bool)

(declare-fun e!38235 () List!1419)

(assert (=> b!58080 (= e!38235 call!4242)))

(declare-fun b!58081 () Bool)

(declare-fun res!32429 () Bool)

(assert (=> b!58081 (=> (not res!32429) (not e!38234))))

(assert (=> b!58081 (= res!32429 (containsKey!127 lt!23244 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4241 () Bool)

(assert (=> bm!4241 (= call!4243 call!4244)))

(declare-fun b!58082 () Bool)

(declare-fun c!7270 () Bool)

(assert (=> b!58082 (= e!38231 (ite c!7267 (t!4733 (toList!685 e!37742)) (ite c!7270 (Cons!1415 (h!1995 (toList!685 e!37742)) (t!4733 (toList!685 e!37742))) Nil!1416)))))

(declare-fun b!58083 () Bool)

(assert (=> b!58083 (= c!7270 (and ((_ is Cons!1415) (toList!685 e!37742)) (bvsgt (_1!1015 (h!1995 (toList!685 e!37742))) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!58083 (= e!38233 e!38235)))

(declare-fun b!58084 () Bool)

(assert (=> b!58084 (= e!38235 call!4242)))

(declare-fun b!58085 () Bool)

(assert (=> b!58085 (= e!38232 call!4244)))

(declare-fun b!58086 () Bool)

(assert (=> b!58086 (= e!38234 (contains!677 lt!23244 (tuple2!2009 (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!10849 c!7269) b!58085))

(assert (= (and d!10849 (not c!7269)) b!58078))

(assert (= (and b!58078 c!7267) b!58077))

(assert (= (and b!58078 (not c!7267)) b!58083))

(assert (= (and b!58083 c!7270) b!58080))

(assert (= (and b!58083 (not c!7270)) b!58084))

(assert (= (or b!58080 b!58084) bm!4239))

(assert (= (or b!58077 bm!4239) bm!4241))

(assert (= (or b!58085 bm!4241) bm!4240))

(assert (= (and bm!4240 c!7268) b!58079))

(assert (= (and bm!4240 (not c!7268)) b!58082))

(assert (= (and d!10849 res!32428) b!58081))

(assert (= (and b!58081 res!32429) b!58086))

(declare-fun m!49325 () Bool)

(assert (=> b!58079 m!49325))

(declare-fun m!49327 () Bool)

(assert (=> bm!4240 m!49327))

(declare-fun m!49329 () Bool)

(assert (=> b!58081 m!49329))

(declare-fun m!49331 () Bool)

(assert (=> d!10849 m!49331))

(declare-fun m!49333 () Bool)

(assert (=> d!10849 m!49333))

(declare-fun m!49335 () Bool)

(assert (=> b!58086 m!49335))

(assert (=> d!10593 d!10849))

(declare-fun d!10851 () Bool)

(declare-fun res!32430 () Bool)

(declare-fun e!38236 () Bool)

(assert (=> d!10851 (=> (not res!32430) (not e!38236))))

(assert (=> d!10851 (= res!32430 (simpleValid!41 (_2!1016 lt!22870)))))

(assert (=> d!10851 (= (valid!260 (_2!1016 lt!22870)) e!38236)))

(declare-fun b!58087 () Bool)

(declare-fun res!32431 () Bool)

(assert (=> b!58087 (=> (not res!32431) (not e!38236))))

(assert (=> b!58087 (= res!32431 (= (arrayCountValidKeys!0 (_keys!3641 (_2!1016 lt!22870)) #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22870)))) (_size!354 (_2!1016 lt!22870))))))

(declare-fun b!58088 () Bool)

(declare-fun res!32432 () Bool)

(assert (=> b!58088 (=> (not res!32432) (not e!38236))))

(assert (=> b!58088 (= res!32432 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 (_2!1016 lt!22870)) (mask!5895 (_2!1016 lt!22870))))))

(declare-fun b!58089 () Bool)

(assert (=> b!58089 (= e!38236 (arrayNoDuplicates!0 (_keys!3641 (_2!1016 lt!22870)) #b00000000000000000000000000000000 Nil!1417))))

(assert (= (and d!10851 res!32430) b!58087))

(assert (= (and b!58087 res!32431) b!58088))

(assert (= (and b!58088 res!32432) b!58089))

(declare-fun m!49337 () Bool)

(assert (=> d!10851 m!49337))

(declare-fun m!49339 () Bool)

(assert (=> b!58087 m!49339))

(declare-fun m!49341 () Bool)

(assert (=> b!58088 m!49341))

(declare-fun m!49343 () Bool)

(assert (=> b!58089 m!49343))

(assert (=> b!57523 d!10851))

(declare-fun b!58090 () Bool)

(declare-fun e!38243 () Bool)

(assert (=> b!58090 (= e!38243 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!58090 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun d!10853 () Bool)

(declare-fun e!38238 () Bool)

(assert (=> d!10853 e!38238))

(declare-fun res!32433 () Bool)

(assert (=> d!10853 (=> (not res!32433) (not e!38238))))

(declare-fun lt!23247 () ListLongMap!1339)

(assert (=> d!10853 (= res!32433 (not (contains!675 lt!23247 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38239 () ListLongMap!1339)

(assert (=> d!10853 (= lt!23247 e!38239)))

(declare-fun c!7274 () Bool)

(assert (=> d!10853 (= c!7274 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10853 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992))))))

(assert (=> d!10853 (= (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))) lt!23247)))

(declare-fun b!58091 () Bool)

(declare-fun e!38241 () Bool)

(declare-fun e!38240 () Bool)

(assert (=> b!58091 (= e!38241 e!38240)))

(assert (=> b!58091 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun res!32435 () Bool)

(assert (=> b!58091 (= res!32435 (contains!675 lt!23247 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!58091 (=> (not res!32435) (not e!38240))))

(declare-fun b!58092 () Bool)

(assert (=> b!58092 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> b!58092 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> b!58092 (= e!38240 (= (apply!65 lt!23247 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!4242 () Bool)

(declare-fun call!4245 () ListLongMap!1339)

(assert (=> bm!4242 (= call!4245 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!58093 () Bool)

(declare-fun e!38237 () Bool)

(assert (=> b!58093 (= e!38241 e!38237)))

(declare-fun c!7271 () Bool)

(assert (=> b!58093 (= c!7271 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58094 () Bool)

(assert (=> b!58094 (= e!38239 (ListLongMap!1340 Nil!1416))))

(declare-fun b!58095 () Bool)

(assert (=> b!58095 (= e!38238 e!38241)))

(declare-fun c!7272 () Bool)

(assert (=> b!58095 (= c!7272 e!38243)))

(declare-fun res!32436 () Bool)

(assert (=> b!58095 (=> (not res!32436) (not e!38243))))

(assert (=> b!58095 (= res!32436 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58096 () Bool)

(assert (=> b!58096 (= e!38237 (isEmpty!297 lt!23247))))

(declare-fun b!58097 () Bool)

(declare-fun e!38242 () ListLongMap!1339)

(assert (=> b!58097 (= e!38239 e!38242)))

(declare-fun c!7273 () Bool)

(assert (=> b!58097 (= c!7273 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!58098 () Bool)

(assert (=> b!58098 (= e!38242 call!4245)))

(declare-fun b!58099 () Bool)

(declare-fun res!32434 () Bool)

(assert (=> b!58099 (=> (not res!32434) (not e!38238))))

(assert (=> b!58099 (= res!32434 (not (contains!675 lt!23247 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58100 () Bool)

(declare-fun lt!23249 () Unit!1484)

(declare-fun lt!23245 () Unit!1484)

(assert (=> b!58100 (= lt!23249 lt!23245)))

(declare-fun lt!23250 () V!2833)

(declare-fun lt!23246 () (_ BitVec 64))

(declare-fun lt!23248 () ListLongMap!1339)

(declare-fun lt!23251 () (_ BitVec 64))

(assert (=> b!58100 (not (contains!675 (+!79 lt!23248 (tuple2!2009 lt!23246 lt!23250)) lt!23251))))

(assert (=> b!58100 (= lt!23245 (addStillNotContains!16 lt!23248 lt!23246 lt!23250 lt!23251))))

(assert (=> b!58100 (= lt!23251 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58100 (= lt!23250 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58100 (= lt!23246 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!58100 (= lt!23248 call!4245)))

(assert (=> b!58100 (= e!38242 (+!79 call!4245 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58101 () Bool)

(assert (=> b!58101 (= e!38237 (= lt!23247 (getCurrentListMapNoExtraKeys!43 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (_values!2004 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992))) (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) (minValue!1939 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10853 c!7274) b!58094))

(assert (= (and d!10853 (not c!7274)) b!58097))

(assert (= (and b!58097 c!7273) b!58100))

(assert (= (and b!58097 (not c!7273)) b!58098))

(assert (= (or b!58100 b!58098) bm!4242))

(assert (= (and d!10853 res!32433) b!58099))

(assert (= (and b!58099 res!32434) b!58095))

(assert (= (and b!58095 res!32436) b!58090))

(assert (= (and b!58095 c!7272) b!58091))

(assert (= (and b!58095 (not c!7272)) b!58093))

(assert (= (and b!58091 res!32435) b!58092))

(assert (= (and b!58093 c!7271) b!58101))

(assert (= (and b!58093 (not c!7271)) b!58096))

(declare-fun b_lambda!2531 () Bool)

(assert (=> (not b_lambda!2531) (not b!58092)))

(assert (=> b!58092 t!4730))

(declare-fun b_and!3501 () Bool)

(assert (= b_and!3497 (and (=> t!4730 result!2333) b_and!3501)))

(assert (=> b!58092 t!4732))

(declare-fun b_and!3503 () Bool)

(assert (= b_and!3499 (and (=> t!4732 result!2337) b_and!3503)))

(declare-fun b_lambda!2533 () Bool)

(assert (=> (not b_lambda!2533) (not b!58100)))

(assert (=> b!58100 t!4730))

(declare-fun b_and!3505 () Bool)

(assert (= b_and!3501 (and (=> t!4730 result!2333) b_and!3505)))

(assert (=> b!58100 t!4732))

(declare-fun b_and!3507 () Bool)

(assert (= b_and!3503 (and (=> t!4732 result!2337) b_and!3507)))

(declare-fun m!49345 () Bool)

(assert (=> d!10853 m!49345))

(assert (=> d!10853 m!47907))

(assert (=> b!58092 m!48683))

(declare-fun m!49347 () Bool)

(assert (=> b!58092 m!49347))

(declare-fun m!49349 () Bool)

(assert (=> b!58092 m!49349))

(assert (=> b!58092 m!49349))

(assert (=> b!58092 m!47871))

(declare-fun m!49351 () Bool)

(assert (=> b!58092 m!49351))

(assert (=> b!58092 m!48683))

(assert (=> b!58092 m!47871))

(declare-fun m!49353 () Bool)

(assert (=> b!58101 m!49353))

(assert (=> b!58090 m!48683))

(assert (=> b!58090 m!48683))

(declare-fun m!49355 () Bool)

(assert (=> b!58090 m!49355))

(declare-fun m!49357 () Bool)

(assert (=> b!58096 m!49357))

(declare-fun m!49359 () Bool)

(assert (=> b!58099 m!49359))

(assert (=> b!58091 m!48683))

(assert (=> b!58091 m!48683))

(declare-fun m!49361 () Bool)

(assert (=> b!58091 m!49361))

(declare-fun m!49363 () Bool)

(assert (=> b!58100 m!49363))

(assert (=> b!58100 m!49349))

(assert (=> b!58100 m!49349))

(assert (=> b!58100 m!47871))

(assert (=> b!58100 m!49351))

(declare-fun m!49365 () Bool)

(assert (=> b!58100 m!49365))

(assert (=> b!58100 m!48683))

(assert (=> b!58100 m!47871))

(declare-fun m!49367 () Bool)

(assert (=> b!58100 m!49367))

(declare-fun m!49369 () Bool)

(assert (=> b!58100 m!49369))

(assert (=> b!58100 m!49367))

(assert (=> bm!4242 m!49353))

(assert (=> b!58097 m!48683))

(assert (=> b!58097 m!48683))

(assert (=> b!58097 m!49355))

(assert (=> b!57661 d!10853))

(assert (=> b!57463 d!10715))

(declare-fun d!10855 () Bool)

(assert (=> d!10855 (= (get!1069 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2372 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10665 d!10855))

(declare-fun b!58105 () Bool)

(declare-fun e!38245 () Option!130)

(assert (=> b!58105 (= e!38245 None!128)))

(declare-fun b!58102 () Bool)

(declare-fun e!38244 () Option!130)

(assert (=> b!58102 (= e!38244 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22730)))))))

(declare-fun b!58104 () Bool)

(assert (=> b!58104 (= e!38245 (getValueByKey!124 (t!4733 (toList!685 lt!22730)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58103 () Bool)

(assert (=> b!58103 (= e!38244 e!38245)))

(declare-fun c!7276 () Bool)

(assert (=> b!58103 (= c!7276 (and ((_ is Cons!1415) (toList!685 lt!22730)) (not (= (_1!1015 (h!1995 (toList!685 lt!22730))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun c!7275 () Bool)

(declare-fun d!10857 () Bool)

(assert (=> d!10857 (= c!7275 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10857 (= (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38244)))

(assert (= (and d!10857 c!7275) b!58102))

(assert (= (and d!10857 (not c!7275)) b!58103))

(assert (= (and b!58103 c!7276) b!58104))

(assert (= (and b!58103 (not c!7276)) b!58105))

(assert (=> b!58104 m!48069))

(declare-fun m!49371 () Bool)

(assert (=> b!58104 m!49371))

(assert (=> d!10665 d!10857))

(declare-fun d!10859 () Bool)

(assert (=> d!10859 (= (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724)) (not (isEmpty!296 (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))))

(declare-fun bs!2510 () Bool)

(assert (= bs!2510 d!10859))

(assert (=> bs!2510 m!48627))

(declare-fun m!49373 () Bool)

(assert (=> bs!2510 m!49373))

(assert (=> b!57694 d!10859))

(declare-fun b!58109 () Bool)

(declare-fun e!38247 () Option!130)

(assert (=> b!58109 (= e!38247 None!128)))

(declare-fun b!58106 () Bool)

(declare-fun e!38246 () Option!130)

(assert (=> b!58106 (= e!38246 (Some!129 (_2!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun b!58108 () Bool)

(assert (=> b!58108 (= e!38247 (getValueByKey!124 (t!4733 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!22724))))

(declare-fun b!58107 () Bool)

(assert (=> b!58107 (= e!38246 e!38247)))

(declare-fun c!7278 () Bool)

(assert (=> b!58107 (= c!7278 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (not (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22724))))))

(declare-fun d!10861 () Bool)

(declare-fun c!7277 () Bool)

(assert (=> d!10861 (= c!7277 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22724)))))

(assert (=> d!10861 (= (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724) e!38246)))

(assert (= (and d!10861 c!7277) b!58106))

(assert (= (and d!10861 (not c!7277)) b!58107))

(assert (= (and b!58107 c!7278) b!58108))

(assert (= (and b!58107 (not c!7278)) b!58109))

(declare-fun m!49375 () Bool)

(assert (=> b!58108 m!49375))

(assert (=> b!57694 d!10861))

(declare-fun d!10863 () Bool)

(declare-fun res!32437 () Bool)

(declare-fun e!38248 () Bool)

(assert (=> d!10863 (=> res!32437 e!38248)))

(assert (=> d!10863 (= res!32437 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10863 (= (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7169 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417))) e!38248)))

(declare-fun b!58110 () Bool)

(declare-fun e!38251 () Bool)

(declare-fun call!4246 () Bool)

(assert (=> b!58110 (= e!38251 call!4246)))

(declare-fun c!7279 () Bool)

(declare-fun bm!4243 () Bool)

(assert (=> bm!4243 (= call!4246 (arrayNoDuplicates!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7279 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7169 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417))) (ite c!7169 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)))))))

(declare-fun b!58111 () Bool)

(declare-fun e!38249 () Bool)

(assert (=> b!58111 (= e!38248 e!38249)))

(declare-fun res!32438 () Bool)

(assert (=> b!58111 (=> (not res!32438) (not e!38249))))

(declare-fun e!38250 () Bool)

(assert (=> b!58111 (= res!32438 (not e!38250))))

(declare-fun res!32439 () Bool)

(assert (=> b!58111 (=> (not res!32439) (not e!38250))))

(assert (=> b!58111 (= res!32439 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!58112 () Bool)

(assert (=> b!58112 (= e!38249 e!38251)))

(assert (=> b!58112 (= c!7279 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!58113 () Bool)

(assert (=> b!58113 (= e!38251 call!4246)))

(declare-fun b!58114 () Bool)

(assert (=> b!58114 (= e!38250 (contains!676 (ite c!7169 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!10863 (not res!32437)) b!58111))

(assert (= (and b!58111 res!32439) b!58114))

(assert (= (and b!58111 res!32438) b!58112))

(assert (= (and b!58112 c!7279) b!58113))

(assert (= (and b!58112 (not c!7279)) b!58110))

(assert (= (or b!58113 b!58110) bm!4243))

(declare-fun m!49377 () Bool)

(assert (=> bm!4243 m!49377))

(declare-fun m!49379 () Bool)

(assert (=> bm!4243 m!49379))

(assert (=> b!58111 m!49377))

(assert (=> b!58111 m!49377))

(declare-fun m!49381 () Bool)

(assert (=> b!58111 m!49381))

(assert (=> b!58112 m!49377))

(assert (=> b!58112 m!49377))

(assert (=> b!58112 m!49381))

(assert (=> b!58114 m!49377))

(assert (=> b!58114 m!49377))

(declare-fun m!49383 () Bool)

(assert (=> b!58114 m!49383))

(assert (=> bm!4189 d!10863))

(declare-fun d!10865 () Bool)

(assert (=> d!10865 (= (size!2001 newMap!16) (bvadd (_size!354 newMap!16) (bvsdiv (bvadd (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!57419 d!10865))

(declare-fun d!10867 () Bool)

(declare-fun lt!23252 () Bool)

(assert (=> d!10867 (= lt!23252 (select (content!62 (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!38252 () Bool)

(assert (=> d!10867 (= lt!23252 e!38252)))

(declare-fun res!32440 () Bool)

(assert (=> d!10867 (=> (not res!32440) (not e!38252))))

(assert (=> d!10867 (= res!32440 ((_ is Cons!1416) (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)))))

(assert (=> d!10867 (= (contains!676 (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!23252)))

(declare-fun b!58115 () Bool)

(declare-fun e!38253 () Bool)

(assert (=> b!58115 (= e!38252 e!38253)))

(declare-fun res!32441 () Bool)

(assert (=> b!58115 (=> res!32441 e!38253)))

(assert (=> b!58115 (= res!32441 (= (h!1996 (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!58116 () Bool)

(assert (=> b!58116 (= e!38253 (contains!676 (t!4734 (ite c!7095 (Cons!1416 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) Nil!1417) Nil!1417)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!10867 res!32440) b!58115))

(assert (= (and b!58115 (not res!32441)) b!58116))

(declare-fun m!49385 () Bool)

(assert (=> d!10867 m!49385))

(assert (=> d!10867 m!48653))

(declare-fun m!49387 () Bool)

(assert (=> d!10867 m!49387))

(assert (=> b!58116 m!48653))

(declare-fun m!49389 () Bool)

(assert (=> b!58116 m!49389))

(assert (=> b!57701 d!10867))

(declare-fun d!10869 () Bool)

(assert (=> d!10869 (= (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!296 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2511 () Bool)

(assert (= bs!2511 d!10869))

(assert (=> bs!2511 m!48665))

(declare-fun m!49391 () Bool)

(assert (=> bs!2511 m!49391))

(assert (=> b!57704 d!10869))

(assert (=> b!57704 d!10857))

(assert (=> b!57594 d!10715))

(declare-fun b!58120 () Bool)

(declare-fun e!38255 () Option!130)

(assert (=> b!58120 (= e!38255 None!128)))

(declare-fun b!58117 () Bool)

(declare-fun e!38254 () Option!130)

(assert (=> b!58117 (= e!38254 (Some!129 (_2!1015 (h!1995 (toList!685 lt!23002)))))))

(declare-fun b!58119 () Bool)

(assert (=> b!58119 (= e!38255 (getValueByKey!124 (t!4733 (toList!685 lt!23002)) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58118 () Bool)

(assert (=> b!58118 (= e!38254 e!38255)))

(declare-fun c!7281 () Bool)

(assert (=> b!58118 (= c!7281 (and ((_ is Cons!1415) (toList!685 lt!23002)) (not (= (_1!1015 (h!1995 (toList!685 lt!23002))) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!10871 () Bool)

(declare-fun c!7280 () Bool)

(assert (=> d!10871 (= c!7280 (and ((_ is Cons!1415) (toList!685 lt!23002)) (= (_1!1015 (h!1995 (toList!685 lt!23002))) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10871 (= (getValueByKey!124 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38254)))

(assert (= (and d!10871 c!7280) b!58117))

(assert (= (and d!10871 (not c!7280)) b!58118))

(assert (= (and b!58118 c!7281) b!58119))

(assert (= (and b!58118 (not c!7281)) b!58120))

(declare-fun m!49393 () Bool)

(assert (=> b!58119 m!49393))

(assert (=> b!57683 d!10871))

(declare-fun d!10873 () Bool)

(declare-fun e!38257 () Bool)

(assert (=> d!10873 e!38257))

(declare-fun res!32442 () Bool)

(assert (=> d!10873 (=> res!32442 e!38257)))

(declare-fun lt!23254 () Bool)

(assert (=> d!10873 (= res!32442 (not lt!23254))))

(declare-fun lt!23255 () Bool)

(assert (=> d!10873 (= lt!23254 lt!23255)))

(declare-fun lt!23256 () Unit!1484)

(declare-fun e!38256 () Unit!1484)

(assert (=> d!10873 (= lt!23256 e!38256)))

(declare-fun c!7282 () Bool)

(assert (=> d!10873 (= c!7282 lt!23255)))

(assert (=> d!10873 (= lt!23255 (containsKey!127 (toList!685 lt!22928) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10873 (= (contains!675 lt!22928 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23254)))

(declare-fun b!58121 () Bool)

(declare-fun lt!23253 () Unit!1484)

(assert (=> b!58121 (= e!38256 lt!23253)))

(assert (=> b!58121 (= lt!23253 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22928) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58121 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58122 () Bool)

(declare-fun Unit!1523 () Unit!1484)

(assert (=> b!58122 (= e!38256 Unit!1523)))

(declare-fun b!58123 () Bool)

(assert (=> b!58123 (= e!38257 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10873 c!7282) b!58121))

(assert (= (and d!10873 (not c!7282)) b!58122))

(assert (= (and d!10873 (not res!32442)) b!58123))

(declare-fun m!49395 () Bool)

(assert (=> d!10873 m!49395))

(declare-fun m!49397 () Bool)

(assert (=> b!58121 m!49397))

(declare-fun m!49399 () Bool)

(assert (=> b!58121 m!49399))

(assert (=> b!58121 m!49399))

(declare-fun m!49401 () Bool)

(assert (=> b!58121 m!49401))

(assert (=> b!58123 m!49399))

(assert (=> b!58123 m!49399))

(assert (=> b!58123 m!49401))

(assert (=> bm!4177 d!10873))

(declare-fun d!10875 () Bool)

(assert (=> d!10875 (= (isDefined!76 (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!296 (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2512 () Bool)

(assert (= bs!2512 d!10875))

(assert (=> bs!2512 m!48193))

(declare-fun m!49403 () Bool)

(assert (=> bs!2512 m!49403))

(assert (=> b!57457 d!10875))

(declare-fun b!58127 () Bool)

(declare-fun e!38259 () Option!130)

(assert (=> b!58127 (= e!38259 None!128)))

(declare-fun b!58124 () Bool)

(declare-fun e!38258 () Option!130)

(assert (=> b!58124 (= e!38258 (Some!129 (_2!1015 (h!1995 (toList!685 e!37759)))))))

(declare-fun b!58126 () Bool)

(assert (=> b!58126 (= e!38259 (getValueByKey!124 (t!4733 (toList!685 e!37759)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58125 () Bool)

(assert (=> b!58125 (= e!38258 e!38259)))

(declare-fun c!7284 () Bool)

(assert (=> b!58125 (= c!7284 (and ((_ is Cons!1415) (toList!685 e!37759)) (not (= (_1!1015 (h!1995 (toList!685 e!37759))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun c!7283 () Bool)

(declare-fun d!10877 () Bool)

(assert (=> d!10877 (= c!7283 (and ((_ is Cons!1415) (toList!685 e!37759)) (= (_1!1015 (h!1995 (toList!685 e!37759))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10877 (= (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38258)))

(assert (= (and d!10877 c!7283) b!58124))

(assert (= (and d!10877 (not c!7283)) b!58125))

(assert (= (and b!58125 c!7284) b!58126))

(assert (= (and b!58125 (not c!7284)) b!58127))

(assert (=> b!58126 m!47875))

(declare-fun m!49405 () Bool)

(assert (=> b!58126 m!49405))

(assert (=> b!57457 d!10877))

(declare-fun d!10879 () Bool)

(assert (=> d!10879 (= (inRange!0 (ite c!7176 (index!3002 lt!23035) (index!3005 lt!23035)) (mask!5895 newMap!16)) (and (bvsge (ite c!7176 (index!3002 lt!23035) (index!3005 lt!23035)) #b00000000000000000000000000000000) (bvslt (ite c!7176 (index!3002 lt!23035) (index!3005 lt!23035)) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4194 d!10879))

(assert (=> bm!4195 d!10567))

(declare-fun d!10881 () Bool)

(declare-fun e!38260 () Bool)

(assert (=> d!10881 e!38260))

(declare-fun res!32443 () Bool)

(assert (=> d!10881 (=> (not res!32443) (not e!38260))))

(declare-fun lt!23260 () ListLongMap!1339)

(assert (=> d!10881 (= res!32443 (contains!675 lt!23260 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun lt!23258 () List!1419)

(assert (=> d!10881 (= lt!23260 (ListLongMap!1340 lt!23258))))

(declare-fun lt!23259 () Unit!1484)

(declare-fun lt!23257 () Unit!1484)

(assert (=> d!10881 (= lt!23259 lt!23257)))

(assert (=> d!10881 (= (getValueByKey!124 lt!23258 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!10881 (= lt!23257 (lemmaContainsTupThenGetReturnValue!41 lt!23258 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!10881 (= lt!23258 (insertStrictlySorted!44 (toList!685 call!4173) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!10881 (= (+!79 call!4173 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) lt!23260)))

(declare-fun b!58128 () Bool)

(declare-fun res!32444 () Bool)

(assert (=> b!58128 (=> (not res!32444) (not e!38260))))

(assert (=> b!58128 (= res!32444 (= (getValueByKey!124 (toList!685 lt!23260) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(declare-fun b!58129 () Bool)

(assert (=> b!58129 (= e!38260 (contains!677 (toList!685 lt!23260) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(assert (= (and d!10881 res!32443) b!58128))

(assert (= (and b!58128 res!32444) b!58129))

(declare-fun m!49407 () Bool)

(assert (=> d!10881 m!49407))

(declare-fun m!49409 () Bool)

(assert (=> d!10881 m!49409))

(declare-fun m!49411 () Bool)

(assert (=> d!10881 m!49411))

(declare-fun m!49413 () Bool)

(assert (=> d!10881 m!49413))

(declare-fun m!49415 () Bool)

(assert (=> b!58128 m!49415))

(declare-fun m!49417 () Bool)

(assert (=> b!58129 m!49417))

(assert (=> b!57567 d!10881))

(declare-fun d!10883 () Bool)

(assert (=> d!10883 (= (get!1067 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2365 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57737 d!10883))

(declare-fun d!10885 () Bool)

(declare-fun lt!23263 () Bool)

(declare-fun content!63 (List!1419) (InoxSet tuple2!2008))

(assert (=> d!10885 (= lt!23263 (select (content!63 (toList!685 lt!22953)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!38266 () Bool)

(assert (=> d!10885 (= lt!23263 e!38266)))

(declare-fun res!32449 () Bool)

(assert (=> d!10885 (=> (not res!32449) (not e!38266))))

(assert (=> d!10885 (= res!32449 ((_ is Cons!1415) (toList!685 lt!22953)))))

(assert (=> d!10885 (= (contains!677 (toList!685 lt!22953) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23263)))

(declare-fun b!58134 () Bool)

(declare-fun e!38265 () Bool)

(assert (=> b!58134 (= e!38266 e!38265)))

(declare-fun res!32450 () Bool)

(assert (=> b!58134 (=> res!32450 e!38265)))

(assert (=> b!58134 (= res!32450 (= (h!1995 (toList!685 lt!22953)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58135 () Bool)

(assert (=> b!58135 (= e!38265 (contains!677 (t!4733 (toList!685 lt!22953)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10885 res!32449) b!58134))

(assert (= (and b!58134 (not res!32450)) b!58135))

(declare-fun m!49419 () Bool)

(assert (=> d!10885 m!49419))

(declare-fun m!49421 () Bool)

(assert (=> d!10885 m!49421))

(declare-fun m!49423 () Bool)

(assert (=> b!58135 m!49423))

(assert (=> b!57608 d!10885))

(declare-fun d!10887 () Bool)

(declare-fun e!38267 () Bool)

(assert (=> d!10887 e!38267))

(declare-fun res!32451 () Bool)

(assert (=> d!10887 (=> (not res!32451) (not e!38267))))

(declare-fun lt!23267 () ListLongMap!1339)

(assert (=> d!10887 (= res!32451 (contains!675 lt!23267 (_1!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23265 () List!1419)

(assert (=> d!10887 (= lt!23267 (ListLongMap!1340 lt!23265))))

(declare-fun lt!23266 () Unit!1484)

(declare-fun lt!23264 () Unit!1484)

(assert (=> d!10887 (= lt!23266 lt!23264)))

(assert (=> d!10887 (= (getValueByKey!124 lt!23265 (_1!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10887 (= lt!23264 (lemmaContainsTupThenGetReturnValue!41 lt!23265 (_1!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10887 (= lt!23265 (insertStrictlySorted!44 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (_1!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10887 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23267)))

(declare-fun b!58136 () Bool)

(declare-fun res!32452 () Bool)

(assert (=> b!58136 (=> (not res!32452) (not e!38267))))

(assert (=> b!58136 (= res!32452 (= (getValueByKey!124 (toList!685 lt!23267) (_1!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58137 () Bool)

(assert (=> b!58137 (= e!38267 (contains!677 (toList!685 lt!23267) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10887 res!32451) b!58136))

(assert (= (and b!58136 res!32452) b!58137))

(declare-fun m!49425 () Bool)

(assert (=> d!10887 m!49425))

(declare-fun m!49427 () Bool)

(assert (=> d!10887 m!49427))

(declare-fun m!49429 () Bool)

(assert (=> d!10887 m!49429))

(declare-fun m!49431 () Bool)

(assert (=> d!10887 m!49431))

(declare-fun m!49433 () Bool)

(assert (=> b!58136 m!49433))

(declare-fun m!49435 () Bool)

(assert (=> b!58137 m!49435))

(assert (=> d!10653 d!10887))

(declare-fun b!58138 () Bool)

(declare-fun e!38275 () ListLongMap!1339)

(declare-fun call!4253 () ListLongMap!1339)

(assert (=> b!58138 (= e!38275 call!4253)))

(declare-fun c!7287 () Bool)

(declare-fun call!4250 () ListLongMap!1339)

(declare-fun call!4247 () ListLongMap!1339)

(declare-fun c!7289 () Bool)

(declare-fun bm!4244 () Bool)

(declare-fun call!4249 () ListLongMap!1339)

(declare-fun call!4251 () ListLongMap!1339)

(assert (=> bm!4244 (= call!4249 (+!79 (ite c!7287 call!4247 (ite c!7289 call!4251 call!4250)) (ite (or c!7287 c!7289) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!58139 () Bool)

(declare-fun e!38278 () ListLongMap!1339)

(assert (=> b!58139 (= e!38278 e!38275)))

(assert (=> b!58139 (= c!7289 (and (not (= (bvand lt!22652 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22652 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4245 () Bool)

(assert (=> bm!4245 (= call!4247 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!58140 () Bool)

(declare-fun e!38271 () Bool)

(declare-fun e!38268 () Bool)

(assert (=> b!58140 (= e!38271 e!38268)))

(declare-fun res!32458 () Bool)

(declare-fun call!4252 () Bool)

(assert (=> b!58140 (= res!32458 call!4252)))

(assert (=> b!58140 (=> (not res!32458) (not e!38268))))

(declare-fun b!58141 () Bool)

(declare-fun res!32455 () Bool)

(declare-fun e!38276 () Bool)

(assert (=> b!58141 (=> (not res!32455) (not e!38276))))

(declare-fun e!38279 () Bool)

(assert (=> b!58141 (= res!32455 e!38279)))

(declare-fun res!32454 () Bool)

(assert (=> b!58141 (=> res!32454 e!38279)))

(declare-fun e!38272 () Bool)

(assert (=> b!58141 (= res!32454 (not e!38272))))

(declare-fun res!32456 () Bool)

(assert (=> b!58141 (=> (not res!32456) (not e!38272))))

(assert (=> b!58141 (= res!32456 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4246 () Bool)

(declare-fun lt!23289 () ListLongMap!1339)

(assert (=> bm!4246 (= call!4252 (contains!675 lt!23289 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58142 () Bool)

(declare-fun e!38277 () Unit!1484)

(declare-fun lt!23279 () Unit!1484)

(assert (=> b!58142 (= e!38277 lt!23279)))

(declare-fun lt!23272 () ListLongMap!1339)

(assert (=> b!58142 (= lt!23272 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23277 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23277 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23283 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23283 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23275 () Unit!1484)

(assert (=> b!58142 (= lt!23275 (addStillContains!41 lt!23272 lt!23277 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23283))))

(assert (=> b!58142 (contains!675 (+!79 lt!23272 (tuple2!2009 lt!23277 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23283)))

(declare-fun lt!23287 () Unit!1484)

(assert (=> b!58142 (= lt!23287 lt!23275)))

(declare-fun lt!23281 () ListLongMap!1339)

(assert (=> b!58142 (= lt!23281 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23268 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23268 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23282 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23282 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23278 () Unit!1484)

(assert (=> b!58142 (= lt!23278 (addApplyDifferent!41 lt!23281 lt!23268 (minValue!1939 newMap!16) lt!23282))))

(assert (=> b!58142 (= (apply!65 (+!79 lt!23281 (tuple2!2009 lt!23268 (minValue!1939 newMap!16))) lt!23282) (apply!65 lt!23281 lt!23282))))

(declare-fun lt!23285 () Unit!1484)

(assert (=> b!58142 (= lt!23285 lt!23278)))

(declare-fun lt!23270 () ListLongMap!1339)

(assert (=> b!58142 (= lt!23270 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23284 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23284 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23280 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23280 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23271 () Unit!1484)

(assert (=> b!58142 (= lt!23271 (addApplyDifferent!41 lt!23270 lt!23284 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23280))))

(assert (=> b!58142 (= (apply!65 (+!79 lt!23270 (tuple2!2009 lt!23284 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23280) (apply!65 lt!23270 lt!23280))))

(declare-fun lt!23269 () Unit!1484)

(assert (=> b!58142 (= lt!23269 lt!23271)))

(declare-fun lt!23288 () ListLongMap!1339)

(assert (=> b!58142 (= lt!23288 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23286 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23286 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23276 () (_ BitVec 64))

(assert (=> b!58142 (= lt!23276 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58142 (= lt!23279 (addApplyDifferent!41 lt!23288 lt!23286 (minValue!1939 newMap!16) lt!23276))))

(assert (=> b!58142 (= (apply!65 (+!79 lt!23288 (tuple2!2009 lt!23286 (minValue!1939 newMap!16))) lt!23276) (apply!65 lt!23288 lt!23276))))

(declare-fun d!10889 () Bool)

(assert (=> d!10889 e!38276))

(declare-fun res!32461 () Bool)

(assert (=> d!10889 (=> (not res!32461) (not e!38276))))

(assert (=> d!10889 (= res!32461 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!23273 () ListLongMap!1339)

(assert (=> d!10889 (= lt!23289 lt!23273)))

(declare-fun lt!23274 () Unit!1484)

(assert (=> d!10889 (= lt!23274 e!38277)))

(declare-fun c!7286 () Bool)

(declare-fun e!38274 () Bool)

(assert (=> d!10889 (= c!7286 e!38274)))

(declare-fun res!32453 () Bool)

(assert (=> d!10889 (=> (not res!32453) (not e!38274))))

(assert (=> d!10889 (= res!32453 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10889 (= lt!23273 e!38278)))

(assert (=> d!10889 (= c!7287 (and (not (= (bvand lt!22652 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22652 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10889 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10889 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23289)))

(declare-fun b!58143 () Bool)

(assert (=> b!58143 (= e!38274 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58144 () Bool)

(declare-fun e!38269 () Bool)

(assert (=> b!58144 (= e!38276 e!38269)))

(declare-fun c!7290 () Bool)

(assert (=> b!58144 (= c!7290 (not (= (bvand lt!22652 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4247 () Bool)

(declare-fun call!4248 () Bool)

(assert (=> bm!4247 (= call!4248 (contains!675 lt!23289 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4248 () Bool)

(assert (=> bm!4248 (= call!4251 call!4247)))

(declare-fun b!58145 () Bool)

(declare-fun e!38273 () Bool)

(assert (=> b!58145 (= e!38269 e!38273)))

(declare-fun res!32457 () Bool)

(assert (=> b!58145 (= res!32457 call!4248)))

(assert (=> b!58145 (=> (not res!32457) (not e!38273))))

(declare-fun b!58146 () Bool)

(declare-fun e!38270 () Bool)

(assert (=> b!58146 (= e!38270 (= (apply!65 lt!23289 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58146 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (_values!2004 newMap!16))))))

(assert (=> b!58146 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4249 () Bool)

(assert (=> bm!4249 (= call!4253 call!4249)))

(declare-fun b!58147 () Bool)

(assert (=> b!58147 (= e!38279 e!38270)))

(declare-fun res!32459 () Bool)

(assert (=> b!58147 (=> (not res!32459) (not e!38270))))

(assert (=> b!58147 (= res!32459 (contains!675 lt!23289 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58147 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58148 () Bool)

(assert (=> b!58148 (= e!38269 (not call!4248))))

(declare-fun b!58149 () Bool)

(assert (=> b!58149 (= e!38271 (not call!4252))))

(declare-fun b!58150 () Bool)

(declare-fun Unit!1524 () Unit!1484)

(assert (=> b!58150 (= e!38277 Unit!1524)))

(declare-fun b!58151 () Bool)

(declare-fun e!38280 () ListLongMap!1339)

(assert (=> b!58151 (= e!38280 call!4253)))

(declare-fun bm!4250 () Bool)

(assert (=> bm!4250 (= call!4250 call!4251)))

(declare-fun b!58152 () Bool)

(assert (=> b!58152 (= e!38278 (+!79 call!4249 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!58153 () Bool)

(assert (=> b!58153 (= e!38280 call!4250)))

(declare-fun b!58154 () Bool)

(declare-fun c!7288 () Bool)

(assert (=> b!58154 (= c!7288 (and (not (= (bvand lt!22652 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22652 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58154 (= e!38275 e!38280)))

(declare-fun b!58155 () Bool)

(declare-fun res!32460 () Bool)

(assert (=> b!58155 (=> (not res!32460) (not e!38276))))

(assert (=> b!58155 (= res!32460 e!38271)))

(declare-fun c!7285 () Bool)

(assert (=> b!58155 (= c!7285 (not (= (bvand lt!22652 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58156 () Bool)

(assert (=> b!58156 (= e!38268 (= (apply!65 lt!23289 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58157 () Bool)

(assert (=> b!58157 (= e!38273 (= (apply!65 lt!23289 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!58158 () Bool)

(assert (=> b!58158 (= e!38272 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10889 c!7287) b!58152))

(assert (= (and d!10889 (not c!7287)) b!58139))

(assert (= (and b!58139 c!7289) b!58138))

(assert (= (and b!58139 (not c!7289)) b!58154))

(assert (= (and b!58154 c!7288) b!58151))

(assert (= (and b!58154 (not c!7288)) b!58153))

(assert (= (or b!58151 b!58153) bm!4250))

(assert (= (or b!58138 bm!4250) bm!4248))

(assert (= (or b!58138 b!58151) bm!4249))

(assert (= (or b!58152 bm!4248) bm!4245))

(assert (= (or b!58152 bm!4249) bm!4244))

(assert (= (and d!10889 res!32453) b!58143))

(assert (= (and d!10889 c!7286) b!58142))

(assert (= (and d!10889 (not c!7286)) b!58150))

(assert (= (and d!10889 res!32461) b!58141))

(assert (= (and b!58141 res!32456) b!58158))

(assert (= (and b!58141 (not res!32454)) b!58147))

(assert (= (and b!58147 res!32459) b!58146))

(assert (= (and b!58141 res!32455) b!58155))

(assert (= (and b!58155 c!7285) b!58140))

(assert (= (and b!58155 (not c!7285)) b!58149))

(assert (= (and b!58140 res!32458) b!58156))

(assert (= (or b!58140 b!58149) bm!4246))

(assert (= (and b!58155 res!32460) b!58144))

(assert (= (and b!58144 c!7290) b!58145))

(assert (= (and b!58144 (not c!7290)) b!58148))

(assert (= (and b!58145 res!32457) b!58157))

(assert (= (or b!58145 b!58148) bm!4247))

(declare-fun b_lambda!2535 () Bool)

(assert (=> (not b_lambda!2535) (not b!58146)))

(assert (=> b!58146 t!4745))

(declare-fun b_and!3509 () Bool)

(assert (= b_and!3505 (and (=> t!4745 result!2353) b_and!3509)))

(assert (=> b!58146 t!4747))

(declare-fun b_and!3511 () Bool)

(assert (= b_and!3507 (and (=> t!4747 result!2355) b_and!3511)))

(assert (=> d!10889 m!48151))

(declare-fun m!49437 () Bool)

(assert (=> bm!4247 m!49437))

(declare-fun m!49439 () Bool)

(assert (=> b!58152 m!49439))

(assert (=> b!58146 m!48177))

(assert (=> b!58146 m!48341))

(assert (=> b!58146 m!48203))

(assert (=> b!58146 m!48177))

(declare-fun m!49441 () Bool)

(assert (=> b!58146 m!49441))

(assert (=> b!58146 m!48341))

(assert (=> b!58146 m!48203))

(assert (=> b!58146 m!48345))

(assert (=> b!58143 m!48177))

(assert (=> b!58143 m!48177))

(assert (=> b!58143 m!48187))

(declare-fun m!49443 () Bool)

(assert (=> bm!4246 m!49443))

(declare-fun m!49445 () Bool)

(assert (=> bm!4244 m!49445))

(declare-fun m!49447 () Bool)

(assert (=> b!58156 m!49447))

(assert (=> b!58147 m!48177))

(assert (=> b!58147 m!48177))

(declare-fun m!49449 () Bool)

(assert (=> b!58147 m!49449))

(declare-fun m!49451 () Bool)

(assert (=> b!58142 m!49451))

(declare-fun m!49453 () Bool)

(assert (=> b!58142 m!49453))

(declare-fun m!49455 () Bool)

(assert (=> b!58142 m!49455))

(declare-fun m!49457 () Bool)

(assert (=> b!58142 m!49457))

(declare-fun m!49459 () Bool)

(assert (=> b!58142 m!49459))

(assert (=> b!58142 m!47873))

(declare-fun m!49461 () Bool)

(assert (=> b!58142 m!49461))

(declare-fun m!49463 () Bool)

(assert (=> b!58142 m!49463))

(declare-fun m!49465 () Bool)

(assert (=> b!58142 m!49465))

(assert (=> b!58142 m!49451))

(assert (=> b!58142 m!49465))

(declare-fun m!49467 () Bool)

(assert (=> b!58142 m!49467))

(assert (=> b!58142 m!48177))

(declare-fun m!49469 () Bool)

(assert (=> b!58142 m!49469))

(assert (=> b!58142 m!47873))

(declare-fun m!49471 () Bool)

(assert (=> b!58142 m!49471))

(declare-fun m!49473 () Bool)

(assert (=> b!58142 m!49473))

(assert (=> b!58142 m!49459))

(declare-fun m!49475 () Bool)

(assert (=> b!58142 m!49475))

(assert (=> b!58142 m!47873))

(declare-fun m!49477 () Bool)

(assert (=> b!58142 m!49477))

(declare-fun m!49479 () Bool)

(assert (=> b!58142 m!49479))

(assert (=> b!58142 m!49463))

(declare-fun m!49481 () Bool)

(assert (=> b!58142 m!49481))

(assert (=> bm!4245 m!47873))

(assert (=> bm!4245 m!49471))

(declare-fun m!49483 () Bool)

(assert (=> b!58157 m!49483))

(assert (=> b!58158 m!48177))

(assert (=> b!58158 m!48177))

(assert (=> b!58158 m!48187))

(assert (=> d!10653 d!10889))

(assert (=> d!10653 d!10585))

(declare-fun d!10891 () Bool)

(assert (=> d!10891 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22652 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(assert (=> d!10891 true))

(declare-fun _$7!41 () Unit!1484)

(assert (=> d!10891 (= (choose!302 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22652 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1939 newMap!16) (defaultEntry!2021 newMap!16)) _$7!41)))

(declare-fun bs!2513 () Bool)

(assert (= bs!2513 d!10891))

(assert (=> bs!2513 m!48027))

(assert (=> bs!2513 m!48027))

(assert (=> bs!2513 m!48649))

(assert (=> bs!2513 m!47873))

(assert (=> bs!2513 m!48647))

(assert (=> d!10653 d!10891))

(assert (=> d!10653 d!10717))

(declare-fun d!10893 () Bool)

(assert (=> d!10893 (= (inRange!0 (ite c!7125 (index!3003 lt!22852) (ite c!7128 (index!3002 lt!22865) (index!3005 lt!22865))) (mask!5895 newMap!16)) (and (bvsge (ite c!7125 (index!3003 lt!22852) (ite c!7128 (index!3002 lt!22865) (index!3005 lt!22865))) #b00000000000000000000000000000000) (bvslt (ite c!7125 (index!3003 lt!22852) (ite c!7128 (index!3002 lt!22865) (index!3005 lt!22865))) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4166 d!10893))

(declare-fun d!10895 () Bool)

(assert (=> d!10895 (= (inRange!0 (index!3003 lt!22937) (mask!5895 newMap!16)) (and (bvsge (index!3003 lt!22937) #b00000000000000000000000000000000) (bvslt (index!3003 lt!22937) (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!57599 d!10895))

(assert (=> b!57558 d!10715))

(declare-fun d!10897 () Bool)

(declare-fun res!32462 () Bool)

(declare-fun e!38281 () Bool)

(assert (=> d!10897 (=> res!32462 e!38281)))

(assert (=> d!10897 (= res!32462 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10897 (= (containsKey!127 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000) e!38281)))

(declare-fun b!58159 () Bool)

(declare-fun e!38282 () Bool)

(assert (=> b!58159 (= e!38281 e!38282)))

(declare-fun res!32463 () Bool)

(assert (=> b!58159 (=> (not res!32463) (not e!38282))))

(assert (=> b!58159 (= res!32463 (and (or (not ((_ is Cons!1415) (toList!685 lt!22730))) (bvsle (_1!1015 (h!1995 (toList!685 lt!22730))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1415) (toList!685 lt!22730)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22730))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58160 () Bool)

(assert (=> b!58160 (= e!38282 (containsKey!127 (t!4733 (toList!685 lt!22730)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10897 (not res!32462)) b!58159))

(assert (= (and b!58159 res!32463) b!58160))

(declare-fun m!49485 () Bool)

(assert (=> b!58160 m!49485))

(assert (=> d!10555 d!10897))

(declare-fun d!10899 () Bool)

(assert (=> d!10899 (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))

(declare-fun lt!23292 () Unit!1484)

(declare-fun choose!307 (array!3689 array!3691 (_ BitVec 32) (_ BitVec 32) V!2833 V!2833 (_ BitVec 64) (_ BitVec 32) Int) Unit!1484)

(assert (=> d!10899 (= lt!23292 (choose!307 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(assert (=> d!10899 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10899 (= (lemmaArrayContainsKeyThenInListMap!4 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23292)))

(declare-fun bs!2514 () Bool)

(assert (= bs!2514 d!10899))

(assert (=> bs!2514 m!48027))

(assert (=> bs!2514 m!48027))

(assert (=> bs!2514 m!47875))

(assert (=> bs!2514 m!48263))

(assert (=> bs!2514 m!47875))

(declare-fun m!49487 () Bool)

(assert (=> bs!2514 m!49487))

(assert (=> bs!2514 m!48151))

(assert (=> b!57531 d!10899))

(assert (=> b!57531 d!10829))

(assert (=> b!57531 d!10585))

(declare-fun d!10901 () Bool)

(assert (=> d!10901 (= (apply!65 lt!22906 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22906) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2515 () Bool)

(assert (= bs!2515 d!10901))

(declare-fun m!49489 () Bool)

(assert (=> bs!2515 m!49489))

(assert (=> bs!2515 m!49489))

(declare-fun m!49491 () Bool)

(assert (=> bs!2515 m!49491))

(assert (=> b!57571 d!10901))

(declare-fun b!58173 () Bool)

(declare-fun e!38290 () SeekEntryResult!220)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!58173 (= e!38290 (seekKeyOrZeroReturnVacant!0 (bvadd (x!9852 lt!22746) #b00000000000000000000000000000001) (nextIndex!0 (index!3004 lt!22746) (bvadd (x!9852 lt!22746) #b00000000000000000000000000000001) (mask!5895 newMap!16)) (index!3004 lt!22746) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!58175 () Bool)

(declare-fun e!38291 () SeekEntryResult!220)

(declare-fun e!38289 () SeekEntryResult!220)

(assert (=> b!58175 (= e!38291 e!38289)))

(declare-fun c!7299 () Bool)

(declare-fun lt!23297 () (_ BitVec 64))

(assert (=> b!58175 (= c!7299 (= lt!23297 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58176 () Bool)

(declare-fun c!7298 () Bool)

(assert (=> b!58176 (= c!7298 (= lt!23297 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58176 (= e!38289 e!38290)))

(declare-fun b!58177 () Bool)

(assert (=> b!58177 (= e!38290 (MissingVacant!220 (index!3004 lt!22746)))))

(declare-fun b!58178 () Bool)

(assert (=> b!58178 (= e!38289 (Found!220 (index!3004 lt!22746)))))

(declare-fun lt!23298 () SeekEntryResult!220)

(declare-fun d!10903 () Bool)

(assert (=> d!10903 (and (or ((_ is Undefined!220) lt!23298) (not ((_ is Found!220) lt!23298)) (and (bvsge (index!3003 lt!23298) #b00000000000000000000000000000000) (bvslt (index!3003 lt!23298) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!23298) ((_ is Found!220) lt!23298) (not ((_ is MissingVacant!220) lt!23298)) (not (= (index!3005 lt!23298) (index!3004 lt!22746))) (and (bvsge (index!3005 lt!23298) #b00000000000000000000000000000000) (bvslt (index!3005 lt!23298) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!23298) (ite ((_ is Found!220) lt!23298) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!23298)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (and ((_ is MissingVacant!220) lt!23298) (= (index!3005 lt!23298) (index!3004 lt!22746)) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!23298)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!10903 (= lt!23298 e!38291)))

(declare-fun c!7297 () Bool)

(assert (=> d!10903 (= c!7297 (bvsge (x!9852 lt!22746) #b01111111111111111111111111111110))))

(assert (=> d!10903 (= lt!23297 (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!22746)))))

(assert (=> d!10903 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10903 (= (seekKeyOrZeroReturnVacant!0 (x!9852 lt!22746) (index!3004 lt!22746) (index!3004 lt!22746) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)) lt!23298)))

(declare-fun b!58174 () Bool)

(assert (=> b!58174 (= e!38291 Undefined!220)))

(assert (= (and d!10903 c!7297) b!58174))

(assert (= (and d!10903 (not c!7297)) b!58175))

(assert (= (and b!58175 c!7299) b!58178))

(assert (= (and b!58175 (not c!7299)) b!58176))

(assert (= (and b!58176 c!7298) b!58177))

(assert (= (and b!58176 (not c!7298)) b!58173))

(declare-fun m!49493 () Bool)

(assert (=> b!58173 m!49493))

(assert (=> b!58173 m!49493))

(assert (=> b!58173 m!47875))

(declare-fun m!49495 () Bool)

(assert (=> b!58173 m!49495))

(declare-fun m!49497 () Bool)

(assert (=> d!10903 m!49497))

(declare-fun m!49499 () Bool)

(assert (=> d!10903 m!49499))

(assert (=> d!10903 m!48159))

(assert (=> d!10903 m!48151))

(assert (=> b!57434 d!10903))

(assert (=> bm!4187 d!10853))

(declare-fun d!10905 () Bool)

(declare-fun lt!23299 () Bool)

(assert (=> d!10905 (= lt!23299 (select (content!63 (toList!685 lt!22960)) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38293 () Bool)

(assert (=> d!10905 (= lt!23299 e!38293)))

(declare-fun res!32464 () Bool)

(assert (=> d!10905 (=> (not res!32464) (not e!38293))))

(assert (=> d!10905 (= res!32464 ((_ is Cons!1415) (toList!685 lt!22960)))))

(assert (=> d!10905 (= (contains!677 (toList!685 lt!22960) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23299)))

(declare-fun b!58179 () Bool)

(declare-fun e!38292 () Bool)

(assert (=> b!58179 (= e!38293 e!38292)))

(declare-fun res!32465 () Bool)

(assert (=> b!58179 (=> res!32465 e!38292)))

(assert (=> b!58179 (= res!32465 (= (h!1995 (toList!685 lt!22960)) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58180 () Bool)

(assert (=> b!58180 (= e!38292 (contains!677 (t!4733 (toList!685 lt!22960)) (ite (or c!7086 c!7088) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (= (and d!10905 res!32464) b!58179))

(assert (= (and b!58179 (not res!32465)) b!58180))

(declare-fun m!49501 () Bool)

(assert (=> d!10905 m!49501))

(declare-fun m!49503 () Bool)

(assert (=> d!10905 m!49503))

(declare-fun m!49505 () Bool)

(assert (=> b!58180 m!49505))

(assert (=> b!57625 d!10905))

(declare-fun b!58181 () Bool)

(declare-fun e!38294 () (_ BitVec 32))

(assert (=> b!58181 (= e!38294 #b00000000000000000000000000000000)))

(declare-fun b!58182 () Bool)

(declare-fun e!38295 () (_ BitVec 32))

(declare-fun call!4254 () (_ BitVec 32))

(assert (=> b!58182 (= e!38295 call!4254)))

(declare-fun bm!4251 () Bool)

(assert (=> bm!4251 (= call!4254 (arrayCountValidKeys!0 (_keys!3641 (_2!1016 lt!22658)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(declare-fun b!58183 () Bool)

(assert (=> b!58183 (= e!38295 (bvadd #b00000000000000000000000000000001 call!4254))))

(declare-fun b!58184 () Bool)

(assert (=> b!58184 (= e!38294 e!38295)))

(declare-fun c!7300 () Bool)

(assert (=> b!58184 (= c!7300 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(declare-fun d!10907 () Bool)

(declare-fun lt!23300 () (_ BitVec 32))

(assert (=> d!10907 (and (bvsge lt!23300 #b00000000000000000000000000000000) (bvsle lt!23300 (bvsub (size!1995 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(assert (=> d!10907 (= lt!23300 e!38294)))

(declare-fun c!7301 () Bool)

(assert (=> d!10907 (= c!7301 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(assert (=> d!10907 (and (bvsle #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1995 (_keys!3641 (_2!1016 lt!22658))) (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(assert (=> d!10907 (= (arrayCountValidKeys!0 (_keys!3641 (_2!1016 lt!22658)) #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))) lt!23300)))

(assert (= (and d!10907 c!7301) b!58181))

(assert (= (and d!10907 (not c!7301)) b!58184))

(assert (= (and b!58184 c!7300) b!58183))

(assert (= (and b!58184 (not c!7300)) b!58182))

(assert (= (or b!58183 b!58182) bm!4251))

(declare-fun m!49507 () Bool)

(assert (=> bm!4251 m!49507))

(assert (=> b!58184 m!49033))

(assert (=> b!58184 m!49033))

(assert (=> b!58184 m!49043))

(assert (=> b!57621 d!10907))

(declare-fun d!10909 () Bool)

(declare-fun e!38297 () Bool)

(assert (=> d!10909 e!38297))

(declare-fun res!32466 () Bool)

(assert (=> d!10909 (=> res!32466 e!38297)))

(declare-fun lt!23302 () Bool)

(assert (=> d!10909 (= res!32466 (not lt!23302))))

(declare-fun lt!23303 () Bool)

(assert (=> d!10909 (= lt!23302 lt!23303)))

(declare-fun lt!23304 () Unit!1484)

(declare-fun e!38296 () Unit!1484)

(assert (=> d!10909 (= lt!23304 e!38296)))

(declare-fun c!7302 () Bool)

(assert (=> d!10909 (= c!7302 lt!23303)))

(assert (=> d!10909 (= lt!23303 (containsKey!127 (toList!685 lt!22928) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10909 (= (contains!675 lt!22928 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23302)))

(declare-fun b!58185 () Bool)

(declare-fun lt!23301 () Unit!1484)

(assert (=> b!58185 (= e!38296 lt!23301)))

(assert (=> b!58185 (= lt!23301 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22928) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58185 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58186 () Bool)

(declare-fun Unit!1525 () Unit!1484)

(assert (=> b!58186 (= e!38296 Unit!1525)))

(declare-fun b!58187 () Bool)

(assert (=> b!58187 (= e!38297 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10909 c!7302) b!58185))

(assert (= (and d!10909 (not c!7302)) b!58186))

(assert (= (and d!10909 (not res!32466)) b!58187))

(declare-fun m!49509 () Bool)

(assert (=> d!10909 m!49509))

(declare-fun m!49511 () Bool)

(assert (=> b!58185 m!49511))

(assert (=> b!58185 m!48909))

(assert (=> b!58185 m!48909))

(declare-fun m!49513 () Bool)

(assert (=> b!58185 m!49513))

(assert (=> b!58187 m!48909))

(assert (=> b!58187 m!48909))

(assert (=> b!58187 m!49513))

(assert (=> bm!4178 d!10909))

(declare-fun d!10911 () Bool)

(declare-fun lt!23305 () Bool)

(assert (=> d!10911 (= lt!23305 (select (content!63 (toList!685 lt!23010)) (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun e!38299 () Bool)

(assert (=> d!10911 (= lt!23305 e!38299)))

(declare-fun res!32467 () Bool)

(assert (=> d!10911 (=> (not res!32467) (not e!38299))))

(assert (=> d!10911 (= res!32467 ((_ is Cons!1415) (toList!685 lt!23010)))))

(assert (=> d!10911 (= (contains!677 (toList!685 lt!23010) (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23305)))

(declare-fun b!58188 () Bool)

(declare-fun e!38298 () Bool)

(assert (=> b!58188 (= e!38299 e!38298)))

(declare-fun res!32468 () Bool)

(assert (=> b!58188 (=> res!32468 e!38298)))

(assert (=> b!58188 (= res!32468 (= (h!1995 (toList!685 lt!23010)) (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58189 () Bool)

(assert (=> b!58189 (= e!38298 (contains!677 (t!4733 (toList!685 lt!23010)) (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!10911 res!32467) b!58188))

(assert (= (and b!58188 (not res!32468)) b!58189))

(declare-fun m!49515 () Bool)

(assert (=> d!10911 m!49515))

(declare-fun m!49517 () Bool)

(assert (=> d!10911 m!49517))

(declare-fun m!49519 () Bool)

(assert (=> b!58189 m!49519))

(assert (=> b!57688 d!10911))

(declare-fun d!10913 () Bool)

(declare-fun isEmpty!298 (List!1419) Bool)

(assert (=> d!10913 (= (isEmpty!297 lt!22977) (isEmpty!298 (toList!685 lt!22977)))))

(declare-fun bs!2516 () Bool)

(assert (= bs!2516 d!10913))

(declare-fun m!49521 () Bool)

(assert (=> bs!2516 m!49521))

(assert (=> b!57656 d!10913))

(declare-fun d!10915 () Bool)

(declare-fun e!38301 () Bool)

(assert (=> d!10915 e!38301))

(declare-fun res!32469 () Bool)

(assert (=> d!10915 (=> res!32469 e!38301)))

(declare-fun lt!23307 () Bool)

(assert (=> d!10915 (= res!32469 (not lt!23307))))

(declare-fun lt!23308 () Bool)

(assert (=> d!10915 (= lt!23307 lt!23308)))

(declare-fun lt!23309 () Unit!1484)

(declare-fun e!38300 () Unit!1484)

(assert (=> d!10915 (= lt!23309 e!38300)))

(declare-fun c!7303 () Bool)

(assert (=> d!10915 (= c!7303 lt!23308)))

(assert (=> d!10915 (= lt!23308 (containsKey!127 (toList!685 lt!22711) lt!22721))))

(assert (=> d!10915 (= (contains!675 lt!22711 lt!22721) lt!23307)))

(declare-fun b!58190 () Bool)

(declare-fun lt!23306 () Unit!1484)

(assert (=> b!58190 (= e!38300 lt!23306)))

(assert (=> b!58190 (= lt!23306 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22711) lt!22721))))

(assert (=> b!58190 (isDefined!76 (getValueByKey!124 (toList!685 lt!22711) lt!22721))))

(declare-fun b!58191 () Bool)

(declare-fun Unit!1526 () Unit!1484)

(assert (=> b!58191 (= e!38300 Unit!1526)))

(declare-fun b!58192 () Bool)

(assert (=> b!58192 (= e!38301 (isDefined!76 (getValueByKey!124 (toList!685 lt!22711) lt!22721)))))

(assert (= (and d!10915 c!7303) b!58190))

(assert (= (and d!10915 (not c!7303)) b!58191))

(assert (= (and d!10915 (not res!32469)) b!58192))

(declare-fun m!49523 () Bool)

(assert (=> d!10915 m!49523))

(declare-fun m!49525 () Bool)

(assert (=> b!58190 m!49525))

(assert (=> b!58190 m!48635))

(assert (=> b!58190 m!48635))

(declare-fun m!49527 () Bool)

(assert (=> b!58190 m!49527))

(assert (=> b!58192 m!48635))

(assert (=> b!58192 m!48635))

(assert (=> b!58192 m!49527))

(assert (=> d!10637 d!10915))

(assert (=> d!10637 d!10639))

(declare-fun d!10917 () Bool)

(assert (=> d!10917 (= (apply!65 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22721) (apply!65 lt!22711 lt!22721))))

(assert (=> d!10917 true))

(declare-fun _$34!752 () Unit!1484)

(assert (=> d!10917 (= (choose!300 lt!22711 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22721) _$34!752)))

(declare-fun bs!2517 () Bool)

(assert (= bs!2517 d!10917))

(assert (=> bs!2517 m!48099))

(assert (=> bs!2517 m!48099))

(assert (=> bs!2517 m!48117))

(assert (=> bs!2517 m!48109))

(assert (=> d!10637 d!10917))

(assert (=> d!10637 d!10629))

(assert (=> d!10637 d!10647))

(declare-fun d!10919 () Bool)

(assert (=> d!10919 (contains!675 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22781)))

(declare-fun lt!23310 () Unit!1484)

(assert (=> d!10919 (= lt!23310 (choose!301 lt!22770 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22781))))

(assert (=> d!10919 (contains!675 lt!22770 lt!22781)))

(assert (=> d!10919 (= (addStillContains!41 lt!22770 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22781) lt!23310)))

(declare-fun bs!2518 () Bool)

(assert (= bs!2518 d!10919))

(assert (=> bs!2518 m!48225))

(assert (=> bs!2518 m!48225))

(assert (=> bs!2518 m!48241))

(declare-fun m!49529 () Bool)

(assert (=> bs!2518 m!49529))

(declare-fun m!49531 () Bool)

(assert (=> bs!2518 m!49531))

(assert (=> b!57462 d!10919))

(declare-fun d!10921 () Bool)

(assert (=> d!10921 (= (apply!65 lt!22768 lt!22778) (get!1069 (getValueByKey!124 (toList!685 lt!22768) lt!22778)))))

(declare-fun bs!2519 () Bool)

(assert (= bs!2519 d!10921))

(declare-fun m!49533 () Bool)

(assert (=> bs!2519 m!49533))

(assert (=> bs!2519 m!49533))

(declare-fun m!49535 () Bool)

(assert (=> bs!2519 m!49535))

(assert (=> b!57462 d!10921))

(declare-fun d!10923 () Bool)

(assert (=> d!10923 (= (apply!65 (+!79 lt!22779 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) lt!22780) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22779 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))) lt!22780)))))

(declare-fun bs!2520 () Bool)

(assert (= bs!2520 d!10923))

(declare-fun m!49537 () Bool)

(assert (=> bs!2520 m!49537))

(assert (=> bs!2520 m!49537))

(declare-fun m!49539 () Bool)

(assert (=> bs!2520 m!49539))

(assert (=> b!57462 d!10923))

(declare-fun d!10925 () Bool)

(assert (=> d!10925 (= (apply!65 (+!79 lt!22786 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) lt!22774) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22786 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))) lt!22774)))))

(declare-fun bs!2521 () Bool)

(assert (= bs!2521 d!10925))

(declare-fun m!49541 () Bool)

(assert (=> bs!2521 m!49541))

(assert (=> bs!2521 m!49541))

(declare-fun m!49543 () Bool)

(assert (=> bs!2521 m!49543))

(assert (=> b!57462 d!10925))

(declare-fun d!10927 () Bool)

(declare-fun e!38302 () Bool)

(assert (=> d!10927 e!38302))

(declare-fun res!32470 () Bool)

(assert (=> d!10927 (=> (not res!32470) (not e!38302))))

(declare-fun lt!23314 () ListLongMap!1339)

(assert (=> d!10927 (= res!32470 (contains!675 lt!23314 (_1!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(declare-fun lt!23312 () List!1419)

(assert (=> d!10927 (= lt!23314 (ListLongMap!1340 lt!23312))))

(declare-fun lt!23313 () Unit!1484)

(declare-fun lt!23311 () Unit!1484)

(assert (=> d!10927 (= lt!23313 lt!23311)))

(assert (=> d!10927 (= (getValueByKey!124 lt!23312 (_1!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10927 (= lt!23311 (lemmaContainsTupThenGetReturnValue!41 lt!23312 (_1!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10927 (= lt!23312 (insertStrictlySorted!44 (toList!685 lt!22770) (_1!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10927 (= (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!23314)))

(declare-fun b!58193 () Bool)

(declare-fun res!32471 () Bool)

(assert (=> b!58193 (=> (not res!32471) (not e!38302))))

(assert (=> b!58193 (= res!32471 (= (getValueByKey!124 (toList!685 lt!23314) (_1!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))))))))

(declare-fun b!58194 () Bool)

(assert (=> b!58194 (= e!38302 (contains!677 (toList!685 lt!23314) (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))))))

(assert (= (and d!10927 res!32470) b!58193))

(assert (= (and b!58193 res!32471) b!58194))

(declare-fun m!49545 () Bool)

(assert (=> d!10927 m!49545))

(declare-fun m!49547 () Bool)

(assert (=> d!10927 m!49547))

(declare-fun m!49549 () Bool)

(assert (=> d!10927 m!49549))

(declare-fun m!49551 () Bool)

(assert (=> d!10927 m!49551))

(declare-fun m!49553 () Bool)

(assert (=> b!58193 m!49553))

(declare-fun m!49555 () Bool)

(assert (=> b!58194 m!49555))

(assert (=> b!57462 d!10927))

(declare-fun d!10929 () Bool)

(declare-fun e!38303 () Bool)

(assert (=> d!10929 e!38303))

(declare-fun res!32472 () Bool)

(assert (=> d!10929 (=> (not res!32472) (not e!38303))))

(declare-fun lt!23318 () ListLongMap!1339)

(assert (=> d!10929 (= res!32472 (contains!675 lt!23318 (_1!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))))))

(declare-fun lt!23316 () List!1419)

(assert (=> d!10929 (= lt!23318 (ListLongMap!1340 lt!23316))))

(declare-fun lt!23317 () Unit!1484)

(declare-fun lt!23315 () Unit!1484)

(assert (=> d!10929 (= lt!23317 lt!23315)))

(assert (=> d!10929 (= (getValueByKey!124 lt!23316 (_1!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))))))

(assert (=> d!10929 (= lt!23315 (lemmaContainsTupThenGetReturnValue!41 lt!23316 (_1!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))))))

(assert (=> d!10929 (= lt!23316 (insertStrictlySorted!44 (toList!685 lt!22786) (_1!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))))))

(assert (=> d!10929 (= (+!79 lt!22786 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) lt!23318)))

(declare-fun b!58195 () Bool)

(declare-fun res!32473 () Bool)

(assert (=> b!58195 (=> (not res!32473) (not e!38303))))

(assert (=> b!58195 (= res!32473 (= (getValueByKey!124 (toList!685 lt!23318) (_1!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))))))))

(declare-fun b!58196 () Bool)

(assert (=> b!58196 (= e!38303 (contains!677 (toList!685 lt!23318) (tuple2!2009 lt!22784 (minValue!1939 newMap!16))))))

(assert (= (and d!10929 res!32472) b!58195))

(assert (= (and b!58195 res!32473) b!58196))

(declare-fun m!49557 () Bool)

(assert (=> d!10929 m!49557))

(declare-fun m!49559 () Bool)

(assert (=> d!10929 m!49559))

(declare-fun m!49561 () Bool)

(assert (=> d!10929 m!49561))

(declare-fun m!49563 () Bool)

(assert (=> d!10929 m!49563))

(declare-fun m!49565 () Bool)

(assert (=> b!58195 m!49565))

(declare-fun m!49567 () Bool)

(assert (=> b!58196 m!49567))

(assert (=> b!57462 d!10929))

(declare-fun d!10931 () Bool)

(assert (=> d!10931 (= (apply!65 (+!79 lt!22786 (tuple2!2009 lt!22784 (minValue!1939 newMap!16))) lt!22774) (apply!65 lt!22786 lt!22774))))

(declare-fun lt!23319 () Unit!1484)

(assert (=> d!10931 (= lt!23319 (choose!300 lt!22786 lt!22784 (minValue!1939 newMap!16) lt!22774))))

(declare-fun e!38304 () Bool)

(assert (=> d!10931 e!38304))

(declare-fun res!32474 () Bool)

(assert (=> d!10931 (=> (not res!32474) (not e!38304))))

(assert (=> d!10931 (= res!32474 (contains!675 lt!22786 lt!22774))))

(assert (=> d!10931 (= (addApplyDifferent!41 lt!22786 lt!22784 (minValue!1939 newMap!16) lt!22774) lt!23319)))

(declare-fun b!58197 () Bool)

(assert (=> b!58197 (= e!38304 (not (= lt!22774 lt!22784)))))

(assert (= (and d!10931 res!32474) b!58197))

(declare-fun m!49569 () Bool)

(assert (=> d!10931 m!49569))

(assert (=> d!10931 m!48223))

(assert (=> d!10931 m!48231))

(assert (=> d!10931 m!48231))

(assert (=> d!10931 m!48233))

(declare-fun m!49571 () Bool)

(assert (=> d!10931 m!49571))

(assert (=> b!57462 d!10931))

(declare-fun d!10933 () Bool)

(assert (=> d!10933 (= (apply!65 (+!79 lt!22768 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22778) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22768 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) lt!22778)))))

(declare-fun bs!2522 () Bool)

(assert (= bs!2522 d!10933))

(declare-fun m!49573 () Bool)

(assert (=> bs!2522 m!49573))

(assert (=> bs!2522 m!49573))

(declare-fun m!49575 () Bool)

(assert (=> bs!2522 m!49575))

(assert (=> b!57462 d!10933))

(declare-fun b!58198 () Bool)

(declare-fun e!38311 () Bool)

(assert (=> b!58198 (= e!38311 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58198 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!10935 () Bool)

(declare-fun e!38306 () Bool)

(assert (=> d!10935 e!38306))

(declare-fun res!32475 () Bool)

(assert (=> d!10935 (=> (not res!32475) (not e!38306))))

(declare-fun lt!23322 () ListLongMap!1339)

(assert (=> d!10935 (= res!32475 (not (contains!675 lt!23322 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38307 () ListLongMap!1339)

(assert (=> d!10935 (= lt!23322 e!38307)))

(declare-fun c!7307 () Bool)

(assert (=> d!10935 (= c!7307 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10935 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10935 (= (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23322)))

(declare-fun b!58199 () Bool)

(declare-fun e!38309 () Bool)

(declare-fun e!38308 () Bool)

(assert (=> b!58199 (= e!38309 e!38308)))

(assert (=> b!58199 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32477 () Bool)

(assert (=> b!58199 (= res!32477 (contains!675 lt!23322 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58199 (=> (not res!32477) (not e!38308))))

(declare-fun b!58200 () Bool)

(assert (=> b!58200 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> b!58200 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))))))))

(assert (=> b!58200 (= e!38308 (= (apply!65 lt!23322 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!4255 () ListLongMap!1339)

(declare-fun bm!4252 () Bool)

(assert (=> bm!4252 (= call!4255 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16)))))

(declare-fun b!58201 () Bool)

(declare-fun e!38305 () Bool)

(assert (=> b!58201 (= e!38309 e!38305)))

(declare-fun c!7304 () Bool)

(assert (=> b!58201 (= c!7304 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58202 () Bool)

(assert (=> b!58202 (= e!38307 (ListLongMap!1340 Nil!1416))))

(declare-fun b!58203 () Bool)

(assert (=> b!58203 (= e!38306 e!38309)))

(declare-fun c!7305 () Bool)

(assert (=> b!58203 (= c!7305 e!38311)))

(declare-fun res!32478 () Bool)

(assert (=> b!58203 (=> (not res!32478) (not e!38311))))

(assert (=> b!58203 (= res!32478 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58204 () Bool)

(assert (=> b!58204 (= e!38305 (isEmpty!297 lt!23322))))

(declare-fun b!58205 () Bool)

(declare-fun e!38310 () ListLongMap!1339)

(assert (=> b!58205 (= e!38307 e!38310)))

(declare-fun c!7306 () Bool)

(assert (=> b!58205 (= c!7306 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58206 () Bool)

(assert (=> b!58206 (= e!38310 call!4255)))

(declare-fun b!58207 () Bool)

(declare-fun res!32476 () Bool)

(assert (=> b!58207 (=> (not res!32476) (not e!38306))))

(assert (=> b!58207 (= res!32476 (not (contains!675 lt!23322 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58208 () Bool)

(declare-fun lt!23324 () Unit!1484)

(declare-fun lt!23320 () Unit!1484)

(assert (=> b!58208 (= lt!23324 lt!23320)))

(declare-fun lt!23326 () (_ BitVec 64))

(declare-fun lt!23321 () (_ BitVec 64))

(declare-fun lt!23325 () V!2833)

(declare-fun lt!23323 () ListLongMap!1339)

(assert (=> b!58208 (not (contains!675 (+!79 lt!23323 (tuple2!2009 lt!23321 lt!23325)) lt!23326))))

(assert (=> b!58208 (= lt!23320 (addStillNotContains!16 lt!23323 lt!23321 lt!23325 lt!23326))))

(assert (=> b!58208 (= lt!23326 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58208 (= lt!23325 (get!1066 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58208 (= lt!23321 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58208 (= lt!23323 call!4255)))

(assert (=> b!58208 (= e!38310 (+!79 call!4255 (tuple2!2009 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58209 () Bool)

(assert (=> b!58209 (= e!38305 (= lt!23322 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) (mask!5895 newMap!16) (ite (and c!7058 c!7060) lt!22652 (extraKeys!1912 newMap!16)) (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) (minValue!1939 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16))))))

(assert (= (and d!10935 c!7307) b!58202))

(assert (= (and d!10935 (not c!7307)) b!58205))

(assert (= (and b!58205 c!7306) b!58208))

(assert (= (and b!58205 (not c!7306)) b!58206))

(assert (= (or b!58208 b!58206) bm!4252))

(assert (= (and d!10935 res!32475) b!58207))

(assert (= (and b!58207 res!32476) b!58203))

(assert (= (and b!58203 res!32478) b!58198))

(assert (= (and b!58203 c!7305) b!58199))

(assert (= (and b!58203 (not c!7305)) b!58201))

(assert (= (and b!58199 res!32477) b!58200))

(assert (= (and b!58201 c!7304) b!58209))

(assert (= (and b!58201 (not c!7304)) b!58204))

(declare-fun b_lambda!2537 () Bool)

(assert (=> (not b_lambda!2537) (not b!58200)))

(assert (=> b!58200 t!4745))

(declare-fun b_and!3513 () Bool)

(assert (= b_and!3509 (and (=> t!4745 result!2353) b_and!3513)))

(assert (=> b!58200 t!4747))

(declare-fun b_and!3515 () Bool)

(assert (= b_and!3511 (and (=> t!4747 result!2355) b_and!3515)))

(declare-fun b_lambda!2539 () Bool)

(assert (=> (not b_lambda!2539) (not b!58208)))

(assert (=> b!58208 t!4745))

(declare-fun b_and!3517 () Bool)

(assert (= b_and!3513 (and (=> t!4745 result!2353) b_and!3517)))

(assert (=> b!58208 t!4747))

(declare-fun b_and!3519 () Bool)

(assert (= b_and!3515 (and (=> t!4747 result!2355) b_and!3519)))

(declare-fun m!49577 () Bool)

(assert (=> d!10935 m!49577))

(assert (=> d!10935 m!48151))

(assert (=> b!58200 m!48177))

(declare-fun m!49579 () Bool)

(assert (=> b!58200 m!49579))

(assert (=> b!58200 m!48201))

(assert (=> b!58200 m!48201))

(assert (=> b!58200 m!48203))

(assert (=> b!58200 m!48207))

(assert (=> b!58200 m!48177))

(assert (=> b!58200 m!48203))

(declare-fun m!49581 () Bool)

(assert (=> b!58209 m!49581))

(assert (=> b!58198 m!48177))

(assert (=> b!58198 m!48177))

(assert (=> b!58198 m!48187))

(declare-fun m!49583 () Bool)

(assert (=> b!58204 m!49583))

(declare-fun m!49585 () Bool)

(assert (=> b!58207 m!49585))

(assert (=> b!58199 m!48177))

(assert (=> b!58199 m!48177))

(declare-fun m!49587 () Bool)

(assert (=> b!58199 m!49587))

(declare-fun m!49589 () Bool)

(assert (=> b!58208 m!49589))

(assert (=> b!58208 m!48201))

(assert (=> b!58208 m!48201))

(assert (=> b!58208 m!48203))

(assert (=> b!58208 m!48207))

(declare-fun m!49591 () Bool)

(assert (=> b!58208 m!49591))

(assert (=> b!58208 m!48177))

(assert (=> b!58208 m!48203))

(declare-fun m!49593 () Bool)

(assert (=> b!58208 m!49593))

(declare-fun m!49595 () Bool)

(assert (=> b!58208 m!49595))

(assert (=> b!58208 m!49593))

(assert (=> bm!4252 m!49581))

(assert (=> b!58205 m!48177))

(assert (=> b!58205 m!48177))

(assert (=> b!58205 m!48187))

(assert (=> b!57462 d!10935))

(declare-fun d!10937 () Bool)

(declare-fun e!38312 () Bool)

(assert (=> d!10937 e!38312))

(declare-fun res!32479 () Bool)

(assert (=> d!10937 (=> (not res!32479) (not e!38312))))

(declare-fun lt!23330 () ListLongMap!1339)

(assert (=> d!10937 (= res!32479 (contains!675 lt!23330 (_1!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(declare-fun lt!23328 () List!1419)

(assert (=> d!10937 (= lt!23330 (ListLongMap!1340 lt!23328))))

(declare-fun lt!23329 () Unit!1484)

(declare-fun lt!23327 () Unit!1484)

(assert (=> d!10937 (= lt!23329 lt!23327)))

(assert (=> d!10937 (= (getValueByKey!124 lt!23328 (_1!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10937 (= lt!23327 (lemmaContainsTupThenGetReturnValue!41 lt!23328 (_1!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10937 (= lt!23328 (insertStrictlySorted!44 (toList!685 lt!22768) (_1!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))))))

(assert (=> d!10937 (= (+!79 lt!22768 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!23330)))

(declare-fun b!58210 () Bool)

(declare-fun res!32480 () Bool)

(assert (=> b!58210 (=> (not res!32480) (not e!38312))))

(assert (=> b!58210 (= res!32480 (= (getValueByKey!124 (toList!685 lt!23330) (_1!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))))))))

(declare-fun b!58211 () Bool)

(assert (=> b!58211 (= e!38312 (contains!677 (toList!685 lt!23330) (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))))))

(assert (= (and d!10937 res!32479) b!58210))

(assert (= (and b!58210 res!32480) b!58211))

(declare-fun m!49597 () Bool)

(assert (=> d!10937 m!49597))

(declare-fun m!49599 () Bool)

(assert (=> d!10937 m!49599))

(declare-fun m!49601 () Bool)

(assert (=> d!10937 m!49601))

(declare-fun m!49603 () Bool)

(assert (=> d!10937 m!49603))

(declare-fun m!49605 () Bool)

(assert (=> b!58210 m!49605))

(declare-fun m!49607 () Bool)

(assert (=> b!58211 m!49607))

(assert (=> b!57462 d!10937))

(declare-fun d!10939 () Bool)

(assert (=> d!10939 (= (apply!65 (+!79 lt!22779 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) lt!22780) (apply!65 lt!22779 lt!22780))))

(declare-fun lt!23331 () Unit!1484)

(assert (=> d!10939 (= lt!23331 (choose!300 lt!22779 lt!22766 (minValue!1939 newMap!16) lt!22780))))

(declare-fun e!38313 () Bool)

(assert (=> d!10939 e!38313))

(declare-fun res!32481 () Bool)

(assert (=> d!10939 (=> (not res!32481) (not e!38313))))

(assert (=> d!10939 (= res!32481 (contains!675 lt!22779 lt!22780))))

(assert (=> d!10939 (= (addApplyDifferent!41 lt!22779 lt!22766 (minValue!1939 newMap!16) lt!22780) lt!23331)))

(declare-fun b!58212 () Bool)

(assert (=> b!58212 (= e!38313 (not (= lt!22780 lt!22766)))))

(assert (= (and d!10939 res!32481) b!58212))

(declare-fun m!49609 () Bool)

(assert (=> d!10939 m!49609))

(assert (=> d!10939 m!48235))

(assert (=> d!10939 m!48217))

(assert (=> d!10939 m!48217))

(assert (=> d!10939 m!48219))

(declare-fun m!49611 () Bool)

(assert (=> d!10939 m!49611))

(assert (=> b!57462 d!10939))

(declare-fun d!10941 () Bool)

(assert (=> d!10941 (= (apply!65 (+!79 lt!22768 (tuple2!2009 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22778) (apply!65 lt!22768 lt!22778))))

(declare-fun lt!23332 () Unit!1484)

(assert (=> d!10941 (= lt!23332 (choose!300 lt!22768 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22778))))

(declare-fun e!38314 () Bool)

(assert (=> d!10941 e!38314))

(declare-fun res!32482 () Bool)

(assert (=> d!10941 (=> (not res!32482) (not e!38314))))

(assert (=> d!10941 (= res!32482 (contains!675 lt!22768 lt!22778))))

(assert (=> d!10941 (= (addApplyDifferent!41 lt!22768 lt!22782 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)) lt!22778) lt!23332)))

(declare-fun b!58213 () Bool)

(assert (=> b!58213 (= e!38314 (not (= lt!22778 lt!22782)))))

(assert (= (and d!10941 res!32482) b!58213))

(declare-fun m!49613 () Bool)

(assert (=> d!10941 m!49613))

(assert (=> d!10941 m!48239))

(assert (=> d!10941 m!48229))

(assert (=> d!10941 m!48229))

(assert (=> d!10941 m!48247))

(declare-fun m!49615 () Bool)

(assert (=> d!10941 m!49615))

(assert (=> b!57462 d!10941))

(declare-fun d!10943 () Bool)

(assert (=> d!10943 (= (apply!65 lt!22786 lt!22774) (get!1069 (getValueByKey!124 (toList!685 lt!22786) lt!22774)))))

(declare-fun bs!2523 () Bool)

(assert (= bs!2523 d!10943))

(declare-fun m!49617 () Bool)

(assert (=> bs!2523 m!49617))

(assert (=> bs!2523 m!49617))

(declare-fun m!49619 () Bool)

(assert (=> bs!2523 m!49619))

(assert (=> b!57462 d!10943))

(declare-fun d!10945 () Bool)

(declare-fun e!38316 () Bool)

(assert (=> d!10945 e!38316))

(declare-fun res!32483 () Bool)

(assert (=> d!10945 (=> res!32483 e!38316)))

(declare-fun lt!23334 () Bool)

(assert (=> d!10945 (= res!32483 (not lt!23334))))

(declare-fun lt!23335 () Bool)

(assert (=> d!10945 (= lt!23334 lt!23335)))

(declare-fun lt!23336 () Unit!1484)

(declare-fun e!38315 () Unit!1484)

(assert (=> d!10945 (= lt!23336 e!38315)))

(declare-fun c!7308 () Bool)

(assert (=> d!10945 (= c!7308 lt!23335)))

(assert (=> d!10945 (= lt!23335 (containsKey!127 (toList!685 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) lt!22781))))

(assert (=> d!10945 (= (contains!675 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16)))) lt!22781) lt!23334)))

(declare-fun b!58214 () Bool)

(declare-fun lt!23333 () Unit!1484)

(assert (=> b!58214 (= e!38315 lt!23333)))

(assert (=> b!58214 (= lt!23333 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) lt!22781))))

(assert (=> b!58214 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) lt!22781))))

(declare-fun b!58215 () Bool)

(declare-fun Unit!1527 () Unit!1484)

(assert (=> b!58215 (= e!38315 Unit!1527)))

(declare-fun b!58216 () Bool)

(assert (=> b!58216 (= e!38316 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22770 (tuple2!2009 lt!22775 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))))) lt!22781)))))

(assert (= (and d!10945 c!7308) b!58214))

(assert (= (and d!10945 (not c!7308)) b!58215))

(assert (= (and d!10945 (not res!32483)) b!58216))

(declare-fun m!49621 () Bool)

(assert (=> d!10945 m!49621))

(declare-fun m!49623 () Bool)

(assert (=> b!58214 m!49623))

(declare-fun m!49625 () Bool)

(assert (=> b!58214 m!49625))

(assert (=> b!58214 m!49625))

(declare-fun m!49627 () Bool)

(assert (=> b!58214 m!49627))

(assert (=> b!58216 m!49625))

(assert (=> b!58216 m!49625))

(assert (=> b!58216 m!49627))

(assert (=> b!57462 d!10945))

(declare-fun d!10947 () Bool)

(assert (=> d!10947 (= (apply!65 lt!22779 lt!22780) (get!1069 (getValueByKey!124 (toList!685 lt!22779) lt!22780)))))

(declare-fun bs!2524 () Bool)

(assert (= bs!2524 d!10947))

(declare-fun m!49629 () Bool)

(assert (=> bs!2524 m!49629))

(assert (=> bs!2524 m!49629))

(declare-fun m!49631 () Bool)

(assert (=> bs!2524 m!49631))

(assert (=> b!57462 d!10947))

(declare-fun d!10949 () Bool)

(declare-fun e!38317 () Bool)

(assert (=> d!10949 e!38317))

(declare-fun res!32484 () Bool)

(assert (=> d!10949 (=> (not res!32484) (not e!38317))))

(declare-fun lt!23340 () ListLongMap!1339)

(assert (=> d!10949 (= res!32484 (contains!675 lt!23340 (_1!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))))))

(declare-fun lt!23338 () List!1419)

(assert (=> d!10949 (= lt!23340 (ListLongMap!1340 lt!23338))))

(declare-fun lt!23339 () Unit!1484)

(declare-fun lt!23337 () Unit!1484)

(assert (=> d!10949 (= lt!23339 lt!23337)))

(assert (=> d!10949 (= (getValueByKey!124 lt!23338 (_1!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))))))

(assert (=> d!10949 (= lt!23337 (lemmaContainsTupThenGetReturnValue!41 lt!23338 (_1!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))))))

(assert (=> d!10949 (= lt!23338 (insertStrictlySorted!44 (toList!685 lt!22779) (_1!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))))))

(assert (=> d!10949 (= (+!79 lt!22779 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))) lt!23340)))

(declare-fun b!58217 () Bool)

(declare-fun res!32485 () Bool)

(assert (=> b!58217 (=> (not res!32485) (not e!38317))))

(assert (=> b!58217 (= res!32485 (= (getValueByKey!124 (toList!685 lt!23340) (_1!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22766 (minValue!1939 newMap!16))))))))

(declare-fun b!58218 () Bool)

(assert (=> b!58218 (= e!38317 (contains!677 (toList!685 lt!23340) (tuple2!2009 lt!22766 (minValue!1939 newMap!16))))))

(assert (= (and d!10949 res!32484) b!58217))

(assert (= (and b!58217 res!32485) b!58218))

(declare-fun m!49633 () Bool)

(assert (=> d!10949 m!49633))

(declare-fun m!49635 () Bool)

(assert (=> d!10949 m!49635))

(declare-fun m!49637 () Bool)

(assert (=> d!10949 m!49637))

(declare-fun m!49639 () Bool)

(assert (=> d!10949 m!49639))

(declare-fun m!49641 () Bool)

(assert (=> b!58217 m!49641))

(declare-fun m!49643 () Bool)

(assert (=> b!58218 m!49643))

(assert (=> b!57462 d!10949))

(declare-fun d!10951 () Bool)

(assert (=> d!10951 (= (get!1069 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2372 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10551 d!10951))

(declare-fun b!58222 () Bool)

(declare-fun e!38319 () Option!130)

(assert (=> b!58222 (= e!38319 None!128)))

(declare-fun b!58219 () Bool)

(declare-fun e!38318 () Option!130)

(assert (=> b!58219 (= e!38318 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22730)))))))

(declare-fun b!58221 () Bool)

(assert (=> b!58221 (= e!38319 (getValueByKey!124 (t!4733 (toList!685 lt!22730)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58220 () Bool)

(assert (=> b!58220 (= e!38318 e!38319)))

(declare-fun c!7310 () Bool)

(assert (=> b!58220 (= c!7310 (and ((_ is Cons!1415) (toList!685 lt!22730)) (not (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10953 () Bool)

(declare-fun c!7309 () Bool)

(assert (=> d!10953 (= c!7309 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10953 (= (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000) e!38318)))

(assert (= (and d!10953 c!7309) b!58219))

(assert (= (and d!10953 (not c!7309)) b!58220))

(assert (= (and b!58220 c!7310) b!58221))

(assert (= (and b!58220 (not c!7310)) b!58222))

(declare-fun m!49645 () Bool)

(assert (=> b!58221 m!49645))

(assert (=> d!10551 d!10953))

(assert (=> bm!4150 d!10935))

(assert (=> d!10603 d!10529))

(declare-fun d!10955 () Bool)

(assert (=> d!10955 (isDefined!76 (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!23341 () Unit!1484)

(assert (=> d!10955 (= lt!23341 (choose!295 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38320 () Bool)

(assert (=> d!10955 e!38320))

(declare-fun res!32486 () Bool)

(assert (=> d!10955 (=> (not res!32486) (not e!38320))))

(assert (=> d!10955 (= res!32486 (isStrictlySorted!270 (toList!685 call!4101)))))

(assert (=> d!10955 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23341)))

(declare-fun b!58223 () Bool)

(assert (=> b!58223 (= e!38320 (containsKey!127 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10955 res!32486) b!58223))

(assert (=> d!10955 m!47875))

(assert (=> d!10955 m!48547))

(assert (=> d!10955 m!48547))

(assert (=> d!10955 m!48549))

(assert (=> d!10955 m!47875))

(declare-fun m!49647 () Bool)

(assert (=> d!10955 m!49647))

(declare-fun m!49649 () Bool)

(assert (=> d!10955 m!49649))

(assert (=> b!58223 m!47875))

(assert (=> b!58223 m!48543))

(assert (=> b!57676 d!10955))

(declare-fun d!10957 () Bool)

(assert (=> d!10957 (= (isDefined!76 (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!296 (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2525 () Bool)

(assert (= bs!2525 d!10957))

(assert (=> bs!2525 m!48547))

(declare-fun m!49651 () Bool)

(assert (=> bs!2525 m!49651))

(assert (=> b!57676 d!10957))

(declare-fun b!58227 () Bool)

(declare-fun e!38322 () Option!130)

(assert (=> b!58227 (= e!38322 None!128)))

(declare-fun b!58224 () Bool)

(declare-fun e!38321 () Option!130)

(assert (=> b!58224 (= e!38321 (Some!129 (_2!1015 (h!1995 (toList!685 call!4101)))))))

(declare-fun b!58226 () Bool)

(assert (=> b!58226 (= e!38322 (getValueByKey!124 (t!4733 (toList!685 call!4101)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58225 () Bool)

(assert (=> b!58225 (= e!38321 e!38322)))

(declare-fun c!7312 () Bool)

(assert (=> b!58225 (= c!7312 (and ((_ is Cons!1415) (toList!685 call!4101)) (not (= (_1!1015 (h!1995 (toList!685 call!4101))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun d!10959 () Bool)

(declare-fun c!7311 () Bool)

(assert (=> d!10959 (= c!7311 (and ((_ is Cons!1415) (toList!685 call!4101)) (= (_1!1015 (h!1995 (toList!685 call!4101))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10959 (= (getValueByKey!124 (toList!685 call!4101) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38321)))

(assert (= (and d!10959 c!7311) b!58224))

(assert (= (and d!10959 (not c!7311)) b!58225))

(assert (= (and b!58225 c!7312) b!58226))

(assert (= (and b!58225 (not c!7312)) b!58227))

(assert (=> b!58226 m!47875))

(declare-fun m!49653 () Bool)

(assert (=> b!58226 m!49653))

(assert (=> b!57676 d!10959))

(assert (=> d!10575 d!10577))

(assert (=> d!10575 d!10579))

(declare-fun d!10961 () Bool)

(assert (=> d!10961 (isDefined!76 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10961 true))

(declare-fun _$12!302 () Unit!1484)

(assert (=> d!10961 (= (choose!295 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) _$12!302)))

(declare-fun bs!2526 () Bool)

(assert (= bs!2526 d!10961))

(assert (=> bs!2526 m!47875))

(assert (=> bs!2526 m!48001))

(assert (=> bs!2526 m!48001))

(assert (=> bs!2526 m!48003))

(assert (=> d!10575 d!10961))

(declare-fun d!10963 () Bool)

(declare-fun res!32491 () Bool)

(declare-fun e!38327 () Bool)

(assert (=> d!10963 (=> res!32491 e!38327)))

(assert (=> d!10963 (= res!32491 (or ((_ is Nil!1416) (toList!685 lt!22525)) ((_ is Nil!1416) (t!4733 (toList!685 lt!22525)))))))

(assert (=> d!10963 (= (isStrictlySorted!270 (toList!685 lt!22525)) e!38327)))

(declare-fun b!58232 () Bool)

(declare-fun e!38328 () Bool)

(assert (=> b!58232 (= e!38327 e!38328)))

(declare-fun res!32492 () Bool)

(assert (=> b!58232 (=> (not res!32492) (not e!38328))))

(assert (=> b!58232 (= res!32492 (bvslt (_1!1015 (h!1995 (toList!685 lt!22525))) (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525))))))))

(declare-fun b!58233 () Bool)

(assert (=> b!58233 (= e!38328 (isStrictlySorted!270 (t!4733 (toList!685 lt!22525))))))

(assert (= (and d!10963 (not res!32491)) b!58232))

(assert (= (and b!58232 res!32492) b!58233))

(declare-fun m!49655 () Bool)

(assert (=> b!58233 m!49655))

(assert (=> d!10575 d!10963))

(declare-fun d!10965 () Bool)

(assert (=> d!10965 (arrayContainsKey!0 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000)))

(declare-fun lt!23342 () Unit!1484)

(assert (=> d!10965 (= lt!23342 (choose!13 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000))))

(assert (=> d!10965 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!10965 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000) lt!23342)))

(declare-fun bs!2527 () Bool)

(assert (= bs!2527 d!10965))

(assert (=> bs!2527 m!48181))

(declare-fun m!49657 () Bool)

(assert (=> bs!2527 m!49657))

(assert (=> b!57451 d!10965))

(declare-fun d!10967 () Bool)

(declare-fun res!32493 () Bool)

(declare-fun e!38329 () Bool)

(assert (=> d!10967 (=> res!32493 e!38329)))

(assert (=> d!10967 (= res!32493 (= (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) lt!22759))))

(assert (=> d!10967 (= (arrayContainsKey!0 (_keys!3641 newMap!16) lt!22759 #b00000000000000000000000000000000) e!38329)))

(declare-fun b!58234 () Bool)

(declare-fun e!38330 () Bool)

(assert (=> b!58234 (= e!38329 e!38330)))

(declare-fun res!32494 () Bool)

(assert (=> b!58234 (=> (not res!32494) (not e!38330))))

(assert (=> b!58234 (= res!32494 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58235 () Bool)

(assert (=> b!58235 (= e!38330 (arrayContainsKey!0 (_keys!3641 newMap!16) lt!22759 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10967 (not res!32493)) b!58234))

(assert (= (and b!58234 res!32494) b!58235))

(assert (=> d!10967 m!48177))

(declare-fun m!49659 () Bool)

(assert (=> b!58235 m!49659))

(assert (=> b!57451 d!10967))

(declare-fun b!58236 () Bool)

(declare-fun e!38332 () SeekEntryResult!220)

(declare-fun lt!23343 () SeekEntryResult!220)

(assert (=> b!58236 (= e!38332 (seekKeyOrZeroReturnVacant!0 (x!9852 lt!23343) (index!3004 lt!23343) (index!3004 lt!23343) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!58237 () Bool)

(declare-fun e!38333 () SeekEntryResult!220)

(declare-fun e!38331 () SeekEntryResult!220)

(assert (=> b!58237 (= e!38333 e!38331)))

(declare-fun lt!23344 () (_ BitVec 64))

(assert (=> b!58237 (= lt!23344 (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!23343)))))

(declare-fun c!7314 () Bool)

(assert (=> b!58237 (= c!7314 (= lt!23344 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58238 () Bool)

(assert (=> b!58238 (= e!38331 (Found!220 (index!3004 lt!23343)))))

(declare-fun d!10969 () Bool)

(declare-fun lt!23345 () SeekEntryResult!220)

(assert (=> d!10969 (and (or ((_ is Undefined!220) lt!23345) (not ((_ is Found!220) lt!23345)) (and (bvsge (index!3003 lt!23345) #b00000000000000000000000000000000) (bvslt (index!3003 lt!23345) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!23345) ((_ is Found!220) lt!23345) (not ((_ is MissingZero!220) lt!23345)) (and (bvsge (index!3002 lt!23345) #b00000000000000000000000000000000) (bvslt (index!3002 lt!23345) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!23345) ((_ is Found!220) lt!23345) ((_ is MissingZero!220) lt!23345) (not ((_ is MissingVacant!220) lt!23345)) (and (bvsge (index!3005 lt!23345) #b00000000000000000000000000000000) (bvslt (index!3005 lt!23345) (size!1995 (_keys!3641 newMap!16))))) (or ((_ is Undefined!220) lt!23345) (ite ((_ is Found!220) lt!23345) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!23345)) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!220) lt!23345) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!23345)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!220) lt!23345) (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!23345)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10969 (= lt!23345 e!38333)))

(declare-fun c!7313 () Bool)

(assert (=> d!10969 (= c!7313 (and ((_ is Intermediate!220) lt!23343) (undefined!1032 lt!23343)))))

(assert (=> d!10969 (= lt!23343 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (mask!5895 newMap!16)) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(assert (=> d!10969 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10969 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (_keys!3641 newMap!16) (mask!5895 newMap!16)) lt!23345)))

(declare-fun b!58239 () Bool)

(declare-fun c!7315 () Bool)

(assert (=> b!58239 (= c!7315 (= lt!23344 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58239 (= e!38331 e!38332)))

(declare-fun b!58240 () Bool)

(assert (=> b!58240 (= e!38333 Undefined!220)))

(declare-fun b!58241 () Bool)

(assert (=> b!58241 (= e!38332 (MissingZero!220 (index!3004 lt!23343)))))

(assert (= (and d!10969 c!7313) b!58240))

(assert (= (and d!10969 (not c!7313)) b!58237))

(assert (= (and b!58237 c!7314) b!58238))

(assert (= (and b!58237 (not c!7314)) b!58239))

(assert (= (and b!58239 c!7315) b!58241))

(assert (= (and b!58239 (not c!7315)) b!58236))

(assert (=> b!58236 m!48177))

(declare-fun m!49661 () Bool)

(assert (=> b!58236 m!49661))

(declare-fun m!49663 () Bool)

(assert (=> b!58237 m!49663))

(declare-fun m!49665 () Bool)

(assert (=> d!10969 m!49665))

(declare-fun m!49667 () Bool)

(assert (=> d!10969 m!49667))

(assert (=> d!10969 m!48151))

(assert (=> d!10969 m!48177))

(declare-fun m!49669 () Bool)

(assert (=> d!10969 m!49669))

(declare-fun m!49671 () Bool)

(assert (=> d!10969 m!49671))

(assert (=> d!10969 m!49669))

(assert (=> d!10969 m!48177))

(declare-fun m!49673 () Bool)

(assert (=> d!10969 m!49673))

(assert (=> b!57451 d!10969))

(declare-fun d!10971 () Bool)

(assert (=> d!10971 (isDefined!76 (getValueByKey!124 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(declare-fun lt!23346 () Unit!1484)

(assert (=> d!10971 (= lt!23346 (choose!295 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(declare-fun e!38334 () Bool)

(assert (=> d!10971 e!38334))

(declare-fun res!32495 () Bool)

(assert (=> d!10971 (=> (not res!32495) (not e!38334))))

(assert (=> d!10971 (= res!32495 (isStrictlySorted!270 (toList!685 call!4122)))))

(assert (=> d!10971 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))) lt!23346)))

(declare-fun b!58242 () Bool)

(assert (=> b!58242 (= e!38334 (containsKey!127 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (= (and d!10971 res!32495) b!58242))

(assert (=> d!10971 m!48057))

(assert (=> d!10971 m!48525))

(assert (=> d!10971 m!48525))

(assert (=> d!10971 m!48527))

(assert (=> d!10971 m!48057))

(declare-fun m!49675 () Bool)

(assert (=> d!10971 m!49675))

(declare-fun m!49677 () Bool)

(assert (=> d!10971 m!49677))

(assert (=> b!58242 m!48057))

(assert (=> b!58242 m!48521))

(assert (=> b!57662 d!10971))

(assert (=> b!57662 d!10707))

(assert (=> b!57662 d!10709))

(declare-fun d!10973 () Bool)

(assert (=> d!10973 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(assert (=> d!10973 true))

(declare-fun _$5!59 () Unit!1484)

(assert (=> d!10973 (= (choose!299 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)) _$5!59)))

(declare-fun bs!2528 () Bool)

(assert (= bs!2528 d!10973))

(assert (=> bs!2528 m!48027))

(assert (=> bs!2528 m!48027))

(assert (=> bs!2528 m!48275))

(assert (=> bs!2528 m!48023))

(assert (=> bs!2528 m!48537))

(assert (=> d!10617 d!10973))

(assert (=> d!10617 d!10717))

(declare-fun d!10975 () Bool)

(declare-fun res!32496 () Bool)

(declare-fun e!38335 () Bool)

(assert (=> d!10975 (=> res!32496 e!38335)))

(assert (=> d!10975 (= res!32496 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10975 (= (arrayNoDuplicates!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7166 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) Nil!1417) Nil!1417)) e!38335)))

(declare-fun b!58243 () Bool)

(declare-fun e!38338 () Bool)

(declare-fun call!4256 () Bool)

(assert (=> b!58243 (= e!38338 call!4256)))

(declare-fun bm!4253 () Bool)

(declare-fun c!7316 () Bool)

(assert (=> bm!4253 (= call!4256 (arrayNoDuplicates!0 (_keys!3641 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7316 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7166 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) Nil!1417) Nil!1417)) (ite c!7166 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) Nil!1417) Nil!1417))))))

(declare-fun b!58244 () Bool)

(declare-fun e!38336 () Bool)

(assert (=> b!58244 (= e!38335 e!38336)))

(declare-fun res!32497 () Bool)

(assert (=> b!58244 (=> (not res!32497) (not e!38336))))

(declare-fun e!38337 () Bool)

(assert (=> b!58244 (= res!32497 (not e!38337))))

(declare-fun res!32498 () Bool)

(assert (=> b!58244 (=> (not res!32498) (not e!38337))))

(assert (=> b!58244 (= res!32498 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58245 () Bool)

(assert (=> b!58245 (= e!38336 e!38338)))

(assert (=> b!58245 (= c!7316 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58246 () Bool)

(assert (=> b!58246 (= e!38338 call!4256)))

(declare-fun b!58247 () Bool)

(assert (=> b!58247 (= e!38337 (contains!676 (ite c!7166 (Cons!1416 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) Nil!1417) Nil!1417) (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!10975 (not res!32496)) b!58244))

(assert (= (and b!58244 res!32498) b!58247))

(assert (= (and b!58244 res!32497) b!58245))

(assert (= (and b!58245 c!7316) b!58246))

(assert (= (and b!58245 (not c!7316)) b!58243))

(assert (= (or b!58246 b!58243) bm!4253))

(assert (=> bm!4253 m!48825))

(declare-fun m!49679 () Bool)

(assert (=> bm!4253 m!49679))

(assert (=> b!58244 m!48825))

(assert (=> b!58244 m!48825))

(assert (=> b!58244 m!48827))

(assert (=> b!58245 m!48825))

(assert (=> b!58245 m!48825))

(assert (=> b!58245 m!48827))

(assert (=> b!58247 m!48825))

(assert (=> b!58247 m!48825))

(declare-fun m!49681 () Bool)

(assert (=> b!58247 m!49681))

(assert (=> bm!4188 d!10975))

(assert (=> b!57678 d!10957))

(assert (=> b!57678 d!10959))

(declare-fun d!10977 () Bool)

(declare-fun e!38339 () Bool)

(assert (=> d!10977 e!38339))

(declare-fun res!32499 () Bool)

(assert (=> d!10977 (=> (not res!32499) (not e!38339))))

(declare-fun lt!23350 () ListLongMap!1339)

(assert (=> d!10977 (= res!32499 (contains!675 lt!23350 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23348 () List!1419)

(assert (=> d!10977 (= lt!23350 (ListLongMap!1340 lt!23348))))

(declare-fun lt!23349 () Unit!1484)

(declare-fun lt!23347 () Unit!1484)

(assert (=> d!10977 (= lt!23349 lt!23347)))

(assert (=> d!10977 (= (getValueByKey!124 lt!23348 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10977 (= lt!23347 (lemmaContainsTupThenGetReturnValue!41 lt!23348 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10977 (= lt!23348 (insertStrictlySorted!44 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10977 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23350)))

(declare-fun b!58248 () Bool)

(declare-fun res!32500 () Bool)

(assert (=> b!58248 (=> (not res!32500) (not e!38339))))

(assert (=> b!58248 (= res!32500 (= (getValueByKey!124 (toList!685 lt!23350) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58249 () Bool)

(assert (=> b!58249 (= e!38339 (contains!677 (toList!685 lt!23350) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10977 res!32499) b!58248))

(assert (= (and b!58248 res!32500) b!58249))

(declare-fun m!49683 () Bool)

(assert (=> d!10977 m!49683))

(declare-fun m!49685 () Bool)

(assert (=> d!10977 m!49685))

(declare-fun m!49687 () Bool)

(assert (=> d!10977 m!49687))

(declare-fun m!49689 () Bool)

(assert (=> d!10977 m!49689))

(declare-fun m!49691 () Bool)

(assert (=> b!58248 m!49691))

(declare-fun m!49693 () Bool)

(assert (=> b!58249 m!49693))

(assert (=> d!10589 d!10977))

(assert (=> d!10589 d!10585))

(declare-fun d!10979 () Bool)

(assert (=> d!10979 (= (+!79 (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(assert (=> d!10979 true))

(declare-fun _$8!43 () Unit!1484)

(assert (=> d!10979 (= (choose!296 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2021 newMap!16)) _$8!43)))

(declare-fun bs!2529 () Bool)

(assert (= bs!2529 d!10979))

(assert (=> bs!2529 m!48027))

(assert (=> bs!2529 m!48027))

(assert (=> bs!2529 m!48445))

(assert (=> bs!2529 m!47873))

(assert (=> bs!2529 m!48443))

(assert (=> d!10589 d!10979))

(assert (=> d!10589 d!10717))

(declare-fun b!58250 () Bool)

(declare-fun e!38347 () ListLongMap!1339)

(declare-fun call!4263 () ListLongMap!1339)

(assert (=> b!58250 (= e!38347 call!4263)))

(declare-fun c!7319 () Bool)

(declare-fun bm!4254 () Bool)

(declare-fun call!4259 () ListLongMap!1339)

(declare-fun c!7321 () Bool)

(declare-fun call!4257 () ListLongMap!1339)

(declare-fun call!4261 () ListLongMap!1339)

(declare-fun call!4260 () ListLongMap!1339)

(assert (=> bm!4254 (= call!4259 (+!79 (ite c!7319 call!4257 (ite c!7321 call!4261 call!4260)) (ite (or c!7319 c!7321) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58251 () Bool)

(declare-fun e!38350 () ListLongMap!1339)

(assert (=> b!58251 (= e!38350 e!38347)))

(assert (=> b!58251 (= c!7321 (and (not (= (bvand lt!22656 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22656 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4255 () Bool)

(assert (=> bm!4255 (= call!4257 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!58252 () Bool)

(declare-fun e!38343 () Bool)

(declare-fun e!38340 () Bool)

(assert (=> b!58252 (= e!38343 e!38340)))

(declare-fun res!32506 () Bool)

(declare-fun call!4262 () Bool)

(assert (=> b!58252 (= res!32506 call!4262)))

(assert (=> b!58252 (=> (not res!32506) (not e!38340))))

(declare-fun b!58253 () Bool)

(declare-fun res!32503 () Bool)

(declare-fun e!38348 () Bool)

(assert (=> b!58253 (=> (not res!32503) (not e!38348))))

(declare-fun e!38351 () Bool)

(assert (=> b!58253 (= res!32503 e!38351)))

(declare-fun res!32502 () Bool)

(assert (=> b!58253 (=> res!32502 e!38351)))

(declare-fun e!38344 () Bool)

(assert (=> b!58253 (= res!32502 (not e!38344))))

(declare-fun res!32504 () Bool)

(assert (=> b!58253 (=> (not res!32504) (not e!38344))))

(assert (=> b!58253 (= res!32504 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4256 () Bool)

(declare-fun lt!23372 () ListLongMap!1339)

(assert (=> bm!4256 (= call!4262 (contains!675 lt!23372 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58254 () Bool)

(declare-fun e!38349 () Unit!1484)

(declare-fun lt!23362 () Unit!1484)

(assert (=> b!58254 (= e!38349 lt!23362)))

(declare-fun lt!23355 () ListLongMap!1339)

(assert (=> b!58254 (= lt!23355 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23360 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23360 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23366 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23366 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23358 () Unit!1484)

(assert (=> b!58254 (= lt!23358 (addStillContains!41 lt!23355 lt!23360 (zeroValue!1939 newMap!16) lt!23366))))

(assert (=> b!58254 (contains!675 (+!79 lt!23355 (tuple2!2009 lt!23360 (zeroValue!1939 newMap!16))) lt!23366)))

(declare-fun lt!23370 () Unit!1484)

(assert (=> b!58254 (= lt!23370 lt!23358)))

(declare-fun lt!23364 () ListLongMap!1339)

(assert (=> b!58254 (= lt!23364 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23351 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23351 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23365 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23365 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23361 () Unit!1484)

(assert (=> b!58254 (= lt!23361 (addApplyDifferent!41 lt!23364 lt!23351 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23365))))

(assert (=> b!58254 (= (apply!65 (+!79 lt!23364 (tuple2!2009 lt!23351 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23365) (apply!65 lt!23364 lt!23365))))

(declare-fun lt!23368 () Unit!1484)

(assert (=> b!58254 (= lt!23368 lt!23361)))

(declare-fun lt!23353 () ListLongMap!1339)

(assert (=> b!58254 (= lt!23353 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23367 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23367 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23363 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23363 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23354 () Unit!1484)

(assert (=> b!58254 (= lt!23354 (addApplyDifferent!41 lt!23353 lt!23367 (zeroValue!1939 newMap!16) lt!23363))))

(assert (=> b!58254 (= (apply!65 (+!79 lt!23353 (tuple2!2009 lt!23367 (zeroValue!1939 newMap!16))) lt!23363) (apply!65 lt!23353 lt!23363))))

(declare-fun lt!23352 () Unit!1484)

(assert (=> b!58254 (= lt!23352 lt!23354)))

(declare-fun lt!23371 () ListLongMap!1339)

(assert (=> b!58254 (= lt!23371 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23369 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23369 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23359 () (_ BitVec 64))

(assert (=> b!58254 (= lt!23359 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58254 (= lt!23362 (addApplyDifferent!41 lt!23371 lt!23369 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23359))))

(assert (=> b!58254 (= (apply!65 (+!79 lt!23371 (tuple2!2009 lt!23369 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23359) (apply!65 lt!23371 lt!23359))))

(declare-fun d!10981 () Bool)

(assert (=> d!10981 e!38348))

(declare-fun res!32509 () Bool)

(assert (=> d!10981 (=> (not res!32509) (not e!38348))))

(assert (=> d!10981 (= res!32509 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!23356 () ListLongMap!1339)

(assert (=> d!10981 (= lt!23372 lt!23356)))

(declare-fun lt!23357 () Unit!1484)

(assert (=> d!10981 (= lt!23357 e!38349)))

(declare-fun c!7318 () Bool)

(declare-fun e!38346 () Bool)

(assert (=> d!10981 (= c!7318 e!38346)))

(declare-fun res!32501 () Bool)

(assert (=> d!10981 (=> (not res!32501) (not e!38346))))

(assert (=> d!10981 (= res!32501 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!10981 (= lt!23356 e!38350)))

(assert (=> d!10981 (= c!7319 (and (not (= (bvand lt!22656 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22656 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10981 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!10981 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) lt!22656 (zeroValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23372)))

(declare-fun b!58255 () Bool)

(assert (=> b!58255 (= e!38346 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58256 () Bool)

(declare-fun e!38341 () Bool)

(assert (=> b!58256 (= e!38348 e!38341)))

(declare-fun c!7322 () Bool)

(assert (=> b!58256 (= c!7322 (not (= (bvand lt!22656 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4257 () Bool)

(declare-fun call!4258 () Bool)

(assert (=> bm!4257 (= call!4258 (contains!675 lt!23372 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4258 () Bool)

(assert (=> bm!4258 (= call!4261 call!4257)))

(declare-fun b!58257 () Bool)

(declare-fun e!38345 () Bool)

(assert (=> b!58257 (= e!38341 e!38345)))

(declare-fun res!32505 () Bool)

(assert (=> b!58257 (= res!32505 call!4258)))

(assert (=> b!58257 (=> (not res!32505) (not e!38345))))

(declare-fun b!58258 () Bool)

(declare-fun e!38342 () Bool)

(assert (=> b!58258 (= e!38342 (= (apply!65 lt!23372 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58258 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (_values!2004 newMap!16))))))

(assert (=> b!58258 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4259 () Bool)

(assert (=> bm!4259 (= call!4263 call!4259)))

(declare-fun b!58259 () Bool)

(assert (=> b!58259 (= e!38351 e!38342)))

(declare-fun res!32507 () Bool)

(assert (=> b!58259 (=> (not res!32507) (not e!38342))))

(assert (=> b!58259 (= res!32507 (contains!675 lt!23372 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58259 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58260 () Bool)

(assert (=> b!58260 (= e!38341 (not call!4258))))

(declare-fun b!58261 () Bool)

(assert (=> b!58261 (= e!38343 (not call!4262))))

(declare-fun b!58262 () Bool)

(declare-fun Unit!1528 () Unit!1484)

(assert (=> b!58262 (= e!38349 Unit!1528)))

(declare-fun b!58263 () Bool)

(declare-fun e!38352 () ListLongMap!1339)

(assert (=> b!58263 (= e!38352 call!4263)))

(declare-fun bm!4260 () Bool)

(assert (=> bm!4260 (= call!4260 call!4261)))

(declare-fun b!58264 () Bool)

(assert (=> b!58264 (= e!38350 (+!79 call!4259 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58265 () Bool)

(assert (=> b!58265 (= e!38352 call!4260)))

(declare-fun b!58266 () Bool)

(declare-fun c!7320 () Bool)

(assert (=> b!58266 (= c!7320 (and (not (= (bvand lt!22656 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22656 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58266 (= e!38347 e!38352)))

(declare-fun b!58267 () Bool)

(declare-fun res!32508 () Bool)

(assert (=> b!58267 (=> (not res!32508) (not e!38348))))

(assert (=> b!58267 (= res!32508 e!38343)))

(declare-fun c!7317 () Bool)

(assert (=> b!58267 (= c!7317 (not (= (bvand lt!22656 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58268 () Bool)

(assert (=> b!58268 (= e!38340 (= (apply!65 lt!23372 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!58269 () Bool)

(assert (=> b!58269 (= e!38345 (= (apply!65 lt!23372 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58270 () Bool)

(assert (=> b!58270 (= e!38344 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10981 c!7319) b!58264))

(assert (= (and d!10981 (not c!7319)) b!58251))

(assert (= (and b!58251 c!7321) b!58250))

(assert (= (and b!58251 (not c!7321)) b!58266))

(assert (= (and b!58266 c!7320) b!58263))

(assert (= (and b!58266 (not c!7320)) b!58265))

(assert (= (or b!58263 b!58265) bm!4260))

(assert (= (or b!58250 bm!4260) bm!4258))

(assert (= (or b!58250 b!58263) bm!4259))

(assert (= (or b!58264 bm!4258) bm!4255))

(assert (= (or b!58264 bm!4259) bm!4254))

(assert (= (and d!10981 res!32501) b!58255))

(assert (= (and d!10981 c!7318) b!58254))

(assert (= (and d!10981 (not c!7318)) b!58262))

(assert (= (and d!10981 res!32509) b!58253))

(assert (= (and b!58253 res!32504) b!58270))

(assert (= (and b!58253 (not res!32502)) b!58259))

(assert (= (and b!58259 res!32507) b!58258))

(assert (= (and b!58253 res!32503) b!58267))

(assert (= (and b!58267 c!7317) b!58252))

(assert (= (and b!58267 (not c!7317)) b!58261))

(assert (= (and b!58252 res!32506) b!58268))

(assert (= (or b!58252 b!58261) bm!4256))

(assert (= (and b!58267 res!32508) b!58256))

(assert (= (and b!58256 c!7322) b!58257))

(assert (= (and b!58256 (not c!7322)) b!58260))

(assert (= (and b!58257 res!32505) b!58269))

(assert (= (or b!58257 b!58260) bm!4257))

(declare-fun b_lambda!2541 () Bool)

(assert (=> (not b_lambda!2541) (not b!58258)))

(assert (=> b!58258 t!4745))

(declare-fun b_and!3521 () Bool)

(assert (= b_and!3517 (and (=> t!4745 result!2353) b_and!3521)))

(assert (=> b!58258 t!4747))

(declare-fun b_and!3523 () Bool)

(assert (= b_and!3519 (and (=> t!4747 result!2355) b_and!3523)))

(assert (=> d!10981 m!48151))

(declare-fun m!49695 () Bool)

(assert (=> bm!4257 m!49695))

(declare-fun m!49697 () Bool)

(assert (=> b!58264 m!49697))

(assert (=> b!58258 m!48177))

(assert (=> b!58258 m!48341))

(assert (=> b!58258 m!48203))

(assert (=> b!58258 m!48177))

(declare-fun m!49699 () Bool)

(assert (=> b!58258 m!49699))

(assert (=> b!58258 m!48341))

(assert (=> b!58258 m!48203))

(assert (=> b!58258 m!48345))

(assert (=> b!58255 m!48177))

(assert (=> b!58255 m!48177))

(assert (=> b!58255 m!48187))

(declare-fun m!49701 () Bool)

(assert (=> bm!4256 m!49701))

(declare-fun m!49703 () Bool)

(assert (=> bm!4254 m!49703))

(declare-fun m!49705 () Bool)

(assert (=> b!58268 m!49705))

(assert (=> b!58259 m!48177))

(assert (=> b!58259 m!48177))

(declare-fun m!49707 () Bool)

(assert (=> b!58259 m!49707))

(declare-fun m!49709 () Bool)

(assert (=> b!58254 m!49709))

(declare-fun m!49711 () Bool)

(assert (=> b!58254 m!49711))

(assert (=> b!58254 m!47873))

(declare-fun m!49713 () Bool)

(assert (=> b!58254 m!49713))

(declare-fun m!49715 () Bool)

(assert (=> b!58254 m!49715))

(declare-fun m!49717 () Bool)

(assert (=> b!58254 m!49717))

(declare-fun m!49719 () Bool)

(assert (=> b!58254 m!49719))

(declare-fun m!49721 () Bool)

(assert (=> b!58254 m!49721))

(declare-fun m!49723 () Bool)

(assert (=> b!58254 m!49723))

(assert (=> b!58254 m!49709))

(assert (=> b!58254 m!49723))

(declare-fun m!49725 () Bool)

(assert (=> b!58254 m!49725))

(assert (=> b!58254 m!48177))

(declare-fun m!49727 () Bool)

(assert (=> b!58254 m!49727))

(assert (=> b!58254 m!47873))

(declare-fun m!49729 () Bool)

(assert (=> b!58254 m!49729))

(declare-fun m!49731 () Bool)

(assert (=> b!58254 m!49731))

(assert (=> b!58254 m!49717))

(declare-fun m!49733 () Bool)

(assert (=> b!58254 m!49733))

(declare-fun m!49735 () Bool)

(assert (=> b!58254 m!49735))

(assert (=> b!58254 m!47873))

(declare-fun m!49737 () Bool)

(assert (=> b!58254 m!49737))

(assert (=> b!58254 m!49721))

(declare-fun m!49739 () Bool)

(assert (=> b!58254 m!49739))

(assert (=> bm!4255 m!47873))

(assert (=> bm!4255 m!49729))

(declare-fun m!49741 () Bool)

(assert (=> b!58269 m!49741))

(assert (=> b!58270 m!48177))

(assert (=> b!58270 m!48177))

(assert (=> b!58270 m!48187))

(assert (=> d!10589 d!10981))

(declare-fun d!10983 () Bool)

(assert (=> d!10983 (= (apply!65 lt!22787 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!685 lt!22787) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2530 () Bool)

(assert (= bs!2530 d!10983))

(assert (=> bs!2530 m!48177))

(assert (=> bs!2530 m!48899))

(assert (=> bs!2530 m!48899))

(declare-fun m!49743 () Bool)

(assert (=> bs!2530 m!49743))

(assert (=> b!57466 d!10983))

(declare-fun d!10985 () Bool)

(declare-fun c!7323 () Bool)

(assert (=> d!10985 (= c!7323 ((_ is ValueCellFull!851) (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!38353 () V!2833)

(assert (=> d!10985 (= (get!1066 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38353)))

(declare-fun b!58271 () Bool)

(assert (=> b!58271 (= e!38353 (get!1067 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58272 () Bool)

(assert (=> b!58272 (= e!38353 (get!1068 (select (arr!1767 (ite (or c!7058 c!7059) (_values!2004 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10985 c!7323) b!58271))

(assert (= (and d!10985 (not c!7323)) b!58272))

(assert (=> b!58271 m!48201))

(assert (=> b!58271 m!48203))

(declare-fun m!49745 () Bool)

(assert (=> b!58271 m!49745))

(assert (=> b!58272 m!48201))

(assert (=> b!58272 m!48203))

(declare-fun m!49747 () Bool)

(assert (=> b!58272 m!49747))

(assert (=> b!57466 d!10985))

(declare-fun d!10987 () Bool)

(declare-fun lt!23373 () Bool)

(assert (=> d!10987 (= lt!23373 (select (content!62 Nil!1417) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38354 () Bool)

(assert (=> d!10987 (= lt!23373 e!38354)))

(declare-fun res!32510 () Bool)

(assert (=> d!10987 (=> (not res!32510) (not e!38354))))

(assert (=> d!10987 (= res!32510 ((_ is Cons!1416) Nil!1417))))

(assert (=> d!10987 (= (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) lt!23373)))

(declare-fun b!58273 () Bool)

(declare-fun e!38355 () Bool)

(assert (=> b!58273 (= e!38354 e!38355)))

(declare-fun res!32511 () Bool)

(assert (=> b!58273 (=> res!32511 e!38355)))

(assert (=> b!58273 (= res!32511 (= (h!1996 Nil!1417) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58274 () Bool)

(assert (=> b!58274 (= e!38355 (contains!676 (t!4734 Nil!1417) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10987 res!32510) b!58273))

(assert (= (and b!58273 (not res!32511)) b!58274))

(assert (=> d!10987 m!48677))

(assert (=> d!10987 m!48177))

(declare-fun m!49749 () Bool)

(assert (=> d!10987 m!49749))

(assert (=> b!58274 m!48177))

(declare-fun m!49751 () Bool)

(assert (=> b!58274 m!49751))

(assert (=> b!57675 d!10987))

(declare-fun d!10989 () Bool)

(assert (=> d!10989 (= (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57698 d!10989))

(assert (=> d!10549 d!10717))

(declare-fun b!58275 () Bool)

(declare-fun e!38356 () (_ BitVec 32))

(assert (=> b!58275 (= e!38356 #b00000000000000000000000000000000)))

(declare-fun b!58276 () Bool)

(declare-fun e!38357 () (_ BitVec 32))

(declare-fun call!4264 () (_ BitVec 32))

(assert (=> b!58276 (= e!38357 call!4264)))

(declare-fun bm!4261 () Bool)

(assert (=> bm!4261 (= call!4264 (arrayCountValidKeys!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58277 () Bool)

(assert (=> b!58277 (= e!38357 (bvadd #b00000000000000000000000000000001 call!4264))))

(declare-fun b!58278 () Bool)

(assert (=> b!58278 (= e!38356 e!38357)))

(declare-fun c!7324 () Bool)

(assert (=> b!58278 (= c!7324 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!10991 () Bool)

(declare-fun lt!23374 () (_ BitVec 32))

(assert (=> d!10991 (and (bvsge lt!23374 #b00000000000000000000000000000000) (bvsle lt!23374 (bvsub (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!10991 (= lt!23374 e!38356)))

(declare-fun c!7325 () Bool)

(assert (=> d!10991 (= c!7325 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10991 (and (bvsle #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!10991 (= (arrayCountValidKeys!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))) lt!23374)))

(assert (= (and d!10991 c!7325) b!58275))

(assert (= (and d!10991 (not c!7325)) b!58278))

(assert (= (and b!58278 c!7324) b!58277))

(assert (= (and b!58278 (not c!7324)) b!58276))

(assert (= (or b!58277 b!58276) bm!4261))

(declare-fun m!49753 () Bool)

(assert (=> bm!4261 m!49753))

(assert (=> b!58278 m!48739))

(assert (=> b!58278 m!48739))

(assert (=> b!58278 m!48743))

(assert (=> b!57550 d!10991))

(assert (=> b!57620 d!10715))

(declare-fun d!10993 () Bool)

(assert (=> d!10993 (= (content!62 Nil!1417) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!10661 d!10993))

(declare-fun d!10995 () Bool)

(declare-fun e!38359 () Bool)

(assert (=> d!10995 e!38359))

(declare-fun res!32512 () Bool)

(assert (=> d!10995 (=> res!32512 e!38359)))

(declare-fun lt!23376 () Bool)

(assert (=> d!10995 (= res!32512 (not lt!23376))))

(declare-fun lt!23377 () Bool)

(assert (=> d!10995 (= lt!23376 lt!23377)))

(declare-fun lt!23378 () Unit!1484)

(declare-fun e!38358 () Unit!1484)

(assert (=> d!10995 (= lt!23378 e!38358)))

(declare-fun c!7326 () Bool)

(assert (=> d!10995 (= c!7326 lt!23377)))

(assert (=> d!10995 (= lt!23377 (containsKey!127 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!10995 (= (contains!675 lt!23006 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23376)))

(declare-fun b!58279 () Bool)

(declare-fun lt!23375 () Unit!1484)

(assert (=> b!58279 (= e!38358 lt!23375)))

(assert (=> b!58279 (= lt!23375 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> b!58279 (isDefined!76 (getValueByKey!124 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58280 () Bool)

(declare-fun Unit!1529 () Unit!1484)

(assert (=> b!58280 (= e!38358 Unit!1529)))

(declare-fun b!58281 () Bool)

(assert (=> b!58281 (= e!38359 (isDefined!76 (getValueByKey!124 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!10995 c!7326) b!58279))

(assert (= (and d!10995 (not c!7326)) b!58280))

(assert (= (and d!10995 (not res!32512)) b!58281))

(declare-fun m!49755 () Bool)

(assert (=> d!10995 m!49755))

(declare-fun m!49757 () Bool)

(assert (=> b!58279 m!49757))

(assert (=> b!58279 m!48583))

(assert (=> b!58279 m!48583))

(declare-fun m!49759 () Bool)

(assert (=> b!58279 m!49759))

(assert (=> b!58281 m!48583))

(assert (=> b!58281 m!48583))

(assert (=> b!58281 m!49759))

(assert (=> d!10631 d!10995))

(declare-fun b!58285 () Bool)

(declare-fun e!38361 () Option!130)

(assert (=> b!58285 (= e!38361 None!128)))

(declare-fun b!58282 () Bool)

(declare-fun e!38360 () Option!130)

(assert (=> b!58282 (= e!38360 (Some!129 (_2!1015 (h!1995 lt!23004))))))

(declare-fun b!58284 () Bool)

(assert (=> b!58284 (= e!38361 (getValueByKey!124 (t!4733 lt!23004) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58283 () Bool)

(assert (=> b!58283 (= e!38360 e!38361)))

(declare-fun c!7328 () Bool)

(assert (=> b!58283 (= c!7328 (and ((_ is Cons!1415) lt!23004) (not (= (_1!1015 (h!1995 lt!23004)) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7327 () Bool)

(declare-fun d!10997 () Bool)

(assert (=> d!10997 (= c!7327 (and ((_ is Cons!1415) lt!23004) (= (_1!1015 (h!1995 lt!23004)) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!10997 (= (getValueByKey!124 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38360)))

(assert (= (and d!10997 c!7327) b!58282))

(assert (= (and d!10997 (not c!7327)) b!58283))

(assert (= (and b!58283 c!7328) b!58284))

(assert (= (and b!58283 (not c!7328)) b!58285))

(declare-fun m!49761 () Bool)

(assert (=> b!58284 m!49761))

(assert (=> d!10631 d!10997))

(declare-fun d!10999 () Bool)

(assert (=> d!10999 (= (getValueByKey!124 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23379 () Unit!1484)

(assert (=> d!10999 (= lt!23379 (choose!304 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38362 () Bool)

(assert (=> d!10999 e!38362))

(declare-fun res!32513 () Bool)

(assert (=> d!10999 (=> (not res!32513) (not e!38362))))

(assert (=> d!10999 (= res!32513 (isStrictlySorted!270 lt!23004))))

(assert (=> d!10999 (= (lemmaContainsTupThenGetReturnValue!41 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23379)))

(declare-fun b!58286 () Bool)

(declare-fun res!32514 () Bool)

(assert (=> b!58286 (=> (not res!32514) (not e!38362))))

(assert (=> b!58286 (= res!32514 (containsKey!127 lt!23004 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58287 () Bool)

(assert (=> b!58287 (= e!38362 (contains!677 lt!23004 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!10999 res!32513) b!58286))

(assert (= (and b!58286 res!32514) b!58287))

(assert (=> d!10999 m!48577))

(declare-fun m!49763 () Bool)

(assert (=> d!10999 m!49763))

(declare-fun m!49765 () Bool)

(assert (=> d!10999 m!49765))

(declare-fun m!49767 () Bool)

(assert (=> b!58286 m!49767))

(declare-fun m!49769 () Bool)

(assert (=> b!58287 m!49769))

(assert (=> d!10631 d!10999))

(declare-fun d!11001 () Bool)

(declare-fun e!38366 () Bool)

(assert (=> d!11001 e!38366))

(declare-fun res!32515 () Bool)

(assert (=> d!11001 (=> (not res!32515) (not e!38366))))

(declare-fun lt!23380 () List!1419)

(assert (=> d!11001 (= res!32515 (isStrictlySorted!270 lt!23380))))

(declare-fun e!38364 () List!1419)

(assert (=> d!11001 (= lt!23380 e!38364)))

(declare-fun c!7331 () Bool)

(assert (=> d!11001 (= c!7331 (and ((_ is Cons!1415) (toList!685 lt!22722)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22722))) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11001 (isStrictlySorted!270 (toList!685 lt!22722))))

(assert (=> d!11001 (= (insertStrictlySorted!44 (toList!685 lt!22722) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23380)))

(declare-fun bm!4262 () Bool)

(declare-fun call!4265 () List!1419)

(declare-fun call!4266 () List!1419)

(assert (=> bm!4262 (= call!4265 call!4266)))

(declare-fun e!38363 () List!1419)

(declare-fun call!4267 () List!1419)

(declare-fun bm!4263 () Bool)

(assert (=> bm!4263 (= call!4267 ($colon$colon!58 e!38363 (ite c!7331 (h!1995 (toList!685 lt!22722)) (tuple2!2009 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7330 () Bool)

(assert (=> bm!4263 (= c!7330 c!7331)))

(declare-fun b!58288 () Bool)

(declare-fun e!38365 () List!1419)

(assert (=> b!58288 (= e!38365 call!4266)))

(declare-fun b!58289 () Bool)

(assert (=> b!58289 (= e!38364 e!38365)))

(declare-fun c!7329 () Bool)

(assert (=> b!58289 (= c!7329 (and ((_ is Cons!1415) (toList!685 lt!22722)) (= (_1!1015 (h!1995 (toList!685 lt!22722))) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!58290 () Bool)

(assert (=> b!58290 (= e!38363 (insertStrictlySorted!44 (t!4733 (toList!685 lt!22722)) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58291 () Bool)

(declare-fun e!38367 () List!1419)

(assert (=> b!58291 (= e!38367 call!4265)))

(declare-fun b!58292 () Bool)

(declare-fun res!32516 () Bool)

(assert (=> b!58292 (=> (not res!32516) (not e!38366))))

(assert (=> b!58292 (= res!32516 (containsKey!127 lt!23380 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun bm!4264 () Bool)

(assert (=> bm!4264 (= call!4266 call!4267)))

(declare-fun c!7332 () Bool)

(declare-fun b!58293 () Bool)

(assert (=> b!58293 (= e!38363 (ite c!7329 (t!4733 (toList!685 lt!22722)) (ite c!7332 (Cons!1415 (h!1995 (toList!685 lt!22722)) (t!4733 (toList!685 lt!22722))) Nil!1416)))))

(declare-fun b!58294 () Bool)

(assert (=> b!58294 (= c!7332 (and ((_ is Cons!1415) (toList!685 lt!22722)) (bvsgt (_1!1015 (h!1995 (toList!685 lt!22722))) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!58294 (= e!38365 e!38367)))

(declare-fun b!58295 () Bool)

(assert (=> b!58295 (= e!38367 call!4265)))

(declare-fun b!58296 () Bool)

(assert (=> b!58296 (= e!38364 call!4267)))

(declare-fun b!58297 () Bool)

(assert (=> b!58297 (= e!38366 (contains!677 lt!23380 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11001 c!7331) b!58296))

(assert (= (and d!11001 (not c!7331)) b!58289))

(assert (= (and b!58289 c!7329) b!58288))

(assert (= (and b!58289 (not c!7329)) b!58294))

(assert (= (and b!58294 c!7332) b!58291))

(assert (= (and b!58294 (not c!7332)) b!58295))

(assert (= (or b!58291 b!58295) bm!4262))

(assert (= (or b!58288 bm!4262) bm!4264))

(assert (= (or b!58296 bm!4264) bm!4263))

(assert (= (and bm!4263 c!7330) b!58290))

(assert (= (and bm!4263 (not c!7330)) b!58293))

(assert (= (and d!11001 res!32515) b!58292))

(assert (= (and b!58292 res!32516) b!58297))

(declare-fun m!49771 () Bool)

(assert (=> b!58290 m!49771))

(declare-fun m!49773 () Bool)

(assert (=> bm!4263 m!49773))

(declare-fun m!49775 () Bool)

(assert (=> b!58292 m!49775))

(declare-fun m!49777 () Bool)

(assert (=> d!11001 m!49777))

(declare-fun m!49779 () Bool)

(assert (=> d!11001 m!49779))

(declare-fun m!49781 () Bool)

(assert (=> b!58297 m!49781))

(assert (=> d!10631 d!11001))

(declare-fun d!11003 () Bool)

(declare-fun e!38368 () Bool)

(assert (=> d!11003 e!38368))

(declare-fun res!32517 () Bool)

(assert (=> d!11003 (=> (not res!32517) (not e!38368))))

(declare-fun lt!23384 () ListLongMap!1339)

(assert (=> d!11003 (= res!32517 (contains!675 lt!23384 (_1!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(declare-fun lt!23382 () List!1419)

(assert (=> d!11003 (= lt!23384 (ListLongMap!1340 lt!23382))))

(declare-fun lt!23383 () Unit!1484)

(declare-fun lt!23381 () Unit!1484)

(assert (=> d!11003 (= lt!23383 lt!23381)))

(assert (=> d!11003 (= (getValueByKey!124 lt!23382 (_1!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11003 (= lt!23381 (lemmaContainsTupThenGetReturnValue!41 lt!23382 (_1!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (_2!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11003 (= lt!23382 (insertStrictlySorted!44 (toList!685 (ite c!7137 call!4171 (ite c!7139 call!4175 call!4174))) (_1!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (_2!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11003 (= (+!79 (ite c!7137 call!4171 (ite c!7139 call!4175 call!4174)) (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) lt!23384)))

(declare-fun b!58298 () Bool)

(declare-fun res!32518 () Bool)

(assert (=> b!58298 (=> (not res!32518) (not e!38368))))

(assert (=> b!58298 (= res!32518 (= (getValueByKey!124 (toList!685 lt!23384) (_1!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))))

(declare-fun b!58299 () Bool)

(assert (=> b!58299 (= e!38368 (contains!677 (toList!685 lt!23384) (ite (or c!7137 c!7139) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (= (and d!11003 res!32517) b!58298))

(assert (= (and b!58298 res!32518) b!58299))

(declare-fun m!49783 () Bool)

(assert (=> d!11003 m!49783))

(declare-fun m!49785 () Bool)

(assert (=> d!11003 m!49785))

(declare-fun m!49787 () Bool)

(assert (=> d!11003 m!49787))

(declare-fun m!49789 () Bool)

(assert (=> d!11003 m!49789))

(declare-fun m!49791 () Bool)

(assert (=> b!58298 m!49791))

(declare-fun m!49793 () Bool)

(assert (=> b!58299 m!49793))

(assert (=> bm!4168 d!11003))

(declare-fun d!11005 () Bool)

(declare-fun e!38370 () Bool)

(assert (=> d!11005 e!38370))

(declare-fun res!32519 () Bool)

(assert (=> d!11005 (=> res!32519 e!38370)))

(declare-fun lt!23386 () Bool)

(assert (=> d!11005 (= res!32519 (not lt!23386))))

(declare-fun lt!23387 () Bool)

(assert (=> d!11005 (= lt!23386 lt!23387)))

(declare-fun lt!23388 () Unit!1484)

(declare-fun e!38369 () Unit!1484)

(assert (=> d!11005 (= lt!23388 e!38369)))

(declare-fun c!7333 () Bool)

(assert (=> d!11005 (= c!7333 lt!23387)))

(assert (=> d!11005 (= lt!23387 (containsKey!127 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!11005 (= (contains!675 lt!23015 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23386)))

(declare-fun b!58300 () Bool)

(declare-fun lt!23385 () Unit!1484)

(assert (=> b!58300 (= e!38369 lt!23385)))

(assert (=> b!58300 (= lt!23385 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> b!58300 (isDefined!76 (getValueByKey!124 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58301 () Bool)

(declare-fun Unit!1530 () Unit!1484)

(assert (=> b!58301 (= e!38369 Unit!1530)))

(declare-fun b!58302 () Bool)

(assert (=> b!58302 (= e!38370 (isDefined!76 (getValueByKey!124 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11005 c!7333) b!58300))

(assert (= (and d!11005 (not c!7333)) b!58301))

(assert (= (and d!11005 (not res!32519)) b!58302))

(declare-fun m!49795 () Bool)

(assert (=> d!11005 m!49795))

(declare-fun m!49797 () Bool)

(assert (=> b!58300 m!49797))

(assert (=> b!58300 m!48615))

(assert (=> b!58300 m!48615))

(declare-fun m!49799 () Bool)

(assert (=> b!58300 m!49799))

(assert (=> b!58302 m!48615))

(assert (=> b!58302 m!48615))

(assert (=> b!58302 m!49799))

(assert (=> d!10639 d!11005))

(declare-fun b!58306 () Bool)

(declare-fun e!38372 () Option!130)

(assert (=> b!58306 (= e!38372 None!128)))

(declare-fun b!58303 () Bool)

(declare-fun e!38371 () Option!130)

(assert (=> b!58303 (= e!38371 (Some!129 (_2!1015 (h!1995 lt!23013))))))

(declare-fun b!58305 () Bool)

(assert (=> b!58305 (= e!38372 (getValueByKey!124 (t!4733 lt!23013) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58304 () Bool)

(assert (=> b!58304 (= e!38371 e!38372)))

(declare-fun c!7335 () Bool)

(assert (=> b!58304 (= c!7335 (and ((_ is Cons!1415) lt!23013) (not (= (_1!1015 (h!1995 lt!23013)) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11007 () Bool)

(declare-fun c!7334 () Bool)

(assert (=> d!11007 (= c!7334 (and ((_ is Cons!1415) lt!23013) (= (_1!1015 (h!1995 lt!23013)) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11007 (= (getValueByKey!124 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38371)))

(assert (= (and d!11007 c!7334) b!58303))

(assert (= (and d!11007 (not c!7334)) b!58304))

(assert (= (and b!58304 c!7335) b!58305))

(assert (= (and b!58304 (not c!7335)) b!58306))

(declare-fun m!49801 () Bool)

(assert (=> b!58305 m!49801))

(assert (=> d!10639 d!11007))

(declare-fun d!11009 () Bool)

(assert (=> d!11009 (= (getValueByKey!124 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23389 () Unit!1484)

(assert (=> d!11009 (= lt!23389 (choose!304 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38373 () Bool)

(assert (=> d!11009 e!38373))

(declare-fun res!32520 () Bool)

(assert (=> d!11009 (=> (not res!32520) (not e!38373))))

(assert (=> d!11009 (= res!32520 (isStrictlySorted!270 lt!23013))))

(assert (=> d!11009 (= (lemmaContainsTupThenGetReturnValue!41 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23389)))

(declare-fun b!58307 () Bool)

(declare-fun res!32521 () Bool)

(assert (=> b!58307 (=> (not res!32521) (not e!38373))))

(assert (=> b!58307 (= res!32521 (containsKey!127 lt!23013 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58308 () Bool)

(assert (=> b!58308 (= e!38373 (contains!677 lt!23013 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11009 res!32520) b!58307))

(assert (= (and b!58307 res!32521) b!58308))

(assert (=> d!11009 m!48609))

(declare-fun m!49803 () Bool)

(assert (=> d!11009 m!49803))

(declare-fun m!49805 () Bool)

(assert (=> d!11009 m!49805))

(declare-fun m!49807 () Bool)

(assert (=> b!58307 m!49807))

(declare-fun m!49809 () Bool)

(assert (=> b!58308 m!49809))

(assert (=> d!10639 d!11009))

(declare-fun d!11011 () Bool)

(declare-fun e!38377 () Bool)

(assert (=> d!11011 e!38377))

(declare-fun res!32522 () Bool)

(assert (=> d!11011 (=> (not res!32522) (not e!38377))))

(declare-fun lt!23390 () List!1419)

(assert (=> d!11011 (= res!32522 (isStrictlySorted!270 lt!23390))))

(declare-fun e!38375 () List!1419)

(assert (=> d!11011 (= lt!23390 e!38375)))

(declare-fun c!7338 () Bool)

(assert (=> d!11011 (= c!7338 (and ((_ is Cons!1415) (toList!685 lt!22711)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22711))) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11011 (isStrictlySorted!270 (toList!685 lt!22711))))

(assert (=> d!11011 (= (insertStrictlySorted!44 (toList!685 lt!22711) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23390)))

(declare-fun bm!4265 () Bool)

(declare-fun call!4268 () List!1419)

(declare-fun call!4269 () List!1419)

(assert (=> bm!4265 (= call!4268 call!4269)))

(declare-fun e!38374 () List!1419)

(declare-fun call!4270 () List!1419)

(declare-fun bm!4266 () Bool)

(assert (=> bm!4266 (= call!4270 ($colon$colon!58 e!38374 (ite c!7338 (h!1995 (toList!685 lt!22711)) (tuple2!2009 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7337 () Bool)

(assert (=> bm!4266 (= c!7337 c!7338)))

(declare-fun b!58309 () Bool)

(declare-fun e!38376 () List!1419)

(assert (=> b!58309 (= e!38376 call!4269)))

(declare-fun b!58310 () Bool)

(assert (=> b!58310 (= e!38375 e!38376)))

(declare-fun c!7336 () Bool)

(assert (=> b!58310 (= c!7336 (and ((_ is Cons!1415) (toList!685 lt!22711)) (= (_1!1015 (h!1995 (toList!685 lt!22711))) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!58311 () Bool)

(assert (=> b!58311 (= e!38374 (insertStrictlySorted!44 (t!4733 (toList!685 lt!22711)) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58312 () Bool)

(declare-fun e!38378 () List!1419)

(assert (=> b!58312 (= e!38378 call!4268)))

(declare-fun b!58313 () Bool)

(declare-fun res!32523 () Bool)

(assert (=> b!58313 (=> (not res!32523) (not e!38377))))

(assert (=> b!58313 (= res!32523 (containsKey!127 lt!23390 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun bm!4267 () Bool)

(assert (=> bm!4267 (= call!4269 call!4270)))

(declare-fun b!58314 () Bool)

(declare-fun c!7339 () Bool)

(assert (=> b!58314 (= e!38374 (ite c!7336 (t!4733 (toList!685 lt!22711)) (ite c!7339 (Cons!1415 (h!1995 (toList!685 lt!22711)) (t!4733 (toList!685 lt!22711))) Nil!1416)))))

(declare-fun b!58315 () Bool)

(assert (=> b!58315 (= c!7339 (and ((_ is Cons!1415) (toList!685 lt!22711)) (bvsgt (_1!1015 (h!1995 (toList!685 lt!22711))) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!58315 (= e!38376 e!38378)))

(declare-fun b!58316 () Bool)

(assert (=> b!58316 (= e!38378 call!4268)))

(declare-fun b!58317 () Bool)

(assert (=> b!58317 (= e!38375 call!4270)))

(declare-fun b!58318 () Bool)

(assert (=> b!58318 (= e!38377 (contains!677 lt!23390 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11011 c!7338) b!58317))

(assert (= (and d!11011 (not c!7338)) b!58310))

(assert (= (and b!58310 c!7336) b!58309))

(assert (= (and b!58310 (not c!7336)) b!58315))

(assert (= (and b!58315 c!7339) b!58312))

(assert (= (and b!58315 (not c!7339)) b!58316))

(assert (= (or b!58312 b!58316) bm!4265))

(assert (= (or b!58309 bm!4265) bm!4267))

(assert (= (or b!58317 bm!4267) bm!4266))

(assert (= (and bm!4266 c!7337) b!58311))

(assert (= (and bm!4266 (not c!7337)) b!58314))

(assert (= (and d!11011 res!32522) b!58313))

(assert (= (and b!58313 res!32523) b!58318))

(declare-fun m!49811 () Bool)

(assert (=> b!58311 m!49811))

(declare-fun m!49813 () Bool)

(assert (=> bm!4266 m!49813))

(declare-fun m!49815 () Bool)

(assert (=> b!58313 m!49815))

(declare-fun m!49817 () Bool)

(assert (=> d!11011 m!49817))

(declare-fun m!49819 () Bool)

(assert (=> d!11011 m!49819))

(declare-fun m!49821 () Bool)

(assert (=> b!58318 m!49821))

(assert (=> d!10639 d!11011))

(declare-fun d!11013 () Bool)

(assert (not d!11013))

(assert (=> b!57734 d!11013))

(assert (=> b!57420 d!10865))

(declare-fun d!11015 () Bool)

(declare-fun e!38379 () Bool)

(assert (=> d!11015 e!38379))

(declare-fun res!32524 () Bool)

(assert (=> d!11015 (=> (not res!32524) (not e!38379))))

(declare-fun lt!23394 () ListLongMap!1339)

(assert (=> d!11015 (= res!32524 (contains!675 lt!23394 (_1!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(declare-fun lt!23392 () List!1419)

(assert (=> d!11015 (= lt!23394 (ListLongMap!1340 lt!23392))))

(declare-fun lt!23393 () Unit!1484)

(declare-fun lt!23391 () Unit!1484)

(assert (=> d!11015 (= lt!23393 lt!23391)))

(assert (=> d!11015 (= (getValueByKey!124 lt!23392 (_1!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11015 (= lt!23391 (lemmaContainsTupThenGetReturnValue!41 lt!23392 (_1!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11015 (= lt!23392 (insertStrictlySorted!44 (toList!685 lt!22927) (_1!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11015 (= (+!79 lt!22927 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!23394)))

(declare-fun b!58319 () Bool)

(declare-fun res!32525 () Bool)

(assert (=> b!58319 (=> (not res!32525) (not e!38379))))

(assert (=> b!58319 (= res!32525 (= (getValueByKey!124 (toList!685 lt!23394) (_1!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(declare-fun b!58320 () Bool)

(assert (=> b!58320 (= e!38379 (contains!677 (toList!685 lt!23394) (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))

(assert (= (and d!11015 res!32524) b!58319))

(assert (= (and b!58319 res!32525) b!58320))

(declare-fun m!49823 () Bool)

(assert (=> d!11015 m!49823))

(declare-fun m!49825 () Bool)

(assert (=> d!11015 m!49825))

(declare-fun m!49827 () Bool)

(assert (=> d!11015 m!49827))

(declare-fun m!49829 () Bool)

(assert (=> d!11015 m!49829))

(declare-fun m!49831 () Bool)

(assert (=> b!58319 m!49831))

(declare-fun m!49833 () Bool)

(assert (=> b!58320 m!49833))

(assert (=> b!57578 d!11015))

(declare-fun d!11017 () Bool)

(declare-fun e!38381 () Bool)

(assert (=> d!11017 e!38381))

(declare-fun res!32526 () Bool)

(assert (=> d!11017 (=> res!32526 e!38381)))

(declare-fun lt!23396 () Bool)

(assert (=> d!11017 (= res!32526 (not lt!23396))))

(declare-fun lt!23397 () Bool)

(assert (=> d!11017 (= lt!23396 lt!23397)))

(declare-fun lt!23398 () Unit!1484)

(declare-fun e!38380 () Unit!1484)

(assert (=> d!11017 (= lt!23398 e!38380)))

(declare-fun c!7340 () Bool)

(assert (=> d!11017 (= c!7340 lt!23397)))

(assert (=> d!11017 (= lt!23397 (containsKey!127 (toList!685 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) lt!22922))))

(assert (=> d!11017 (= (contains!675 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) lt!22922) lt!23396)))

(declare-fun b!58321 () Bool)

(declare-fun lt!23395 () Unit!1484)

(assert (=> b!58321 (= e!38380 lt!23395)))

(assert (=> b!58321 (= lt!23395 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) lt!22922))))

(assert (=> b!58321 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) lt!22922))))

(declare-fun b!58322 () Bool)

(declare-fun Unit!1531 () Unit!1484)

(assert (=> b!58322 (= e!38380 Unit!1531)))

(declare-fun b!58323 () Bool)

(assert (=> b!58323 (= e!38381 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) lt!22922)))))

(assert (= (and d!11017 c!7340) b!58321))

(assert (= (and d!11017 (not c!7340)) b!58322))

(assert (= (and d!11017 (not res!32526)) b!58323))

(declare-fun m!49835 () Bool)

(assert (=> d!11017 m!49835))

(declare-fun m!49837 () Bool)

(assert (=> b!58321 m!49837))

(declare-fun m!49839 () Bool)

(assert (=> b!58321 m!49839))

(assert (=> b!58321 m!49839))

(declare-fun m!49841 () Bool)

(assert (=> b!58321 m!49841))

(assert (=> b!58323 m!49839))

(assert (=> b!58323 m!49839))

(assert (=> b!58323 m!49841))

(assert (=> b!57578 d!11017))

(declare-fun d!11019 () Bool)

(assert (=> d!11019 (= (apply!65 (+!79 lt!22920 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22921) (apply!65 lt!22920 lt!22921))))

(declare-fun lt!23399 () Unit!1484)

(assert (=> d!11019 (= lt!23399 (choose!300 lt!22920 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22921))))

(declare-fun e!38382 () Bool)

(assert (=> d!11019 e!38382))

(declare-fun res!32527 () Bool)

(assert (=> d!11019 (=> (not res!32527) (not e!38382))))

(assert (=> d!11019 (= res!32527 (contains!675 lt!22920 lt!22921))))

(assert (=> d!11019 (= (addApplyDifferent!41 lt!22920 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22921) lt!23399)))

(declare-fun b!58324 () Bool)

(assert (=> b!58324 (= e!38382 (not (= lt!22921 lt!22907)))))

(assert (= (and d!11019 res!32527) b!58324))

(declare-fun m!49843 () Bool)

(assert (=> d!11019 m!49843))

(assert (=> d!11019 m!48425))

(assert (=> d!11019 m!48407))

(assert (=> d!11019 m!48407))

(assert (=> d!11019 m!48409))

(declare-fun m!49845 () Bool)

(assert (=> d!11019 m!49845))

(assert (=> b!57578 d!11019))

(declare-fun b!58325 () Bool)

(declare-fun e!38389 () Bool)

(assert (=> b!58325 (= e!38389 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58325 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!11021 () Bool)

(declare-fun e!38384 () Bool)

(assert (=> d!11021 e!38384))

(declare-fun res!32528 () Bool)

(assert (=> d!11021 (=> (not res!32528) (not e!38384))))

(declare-fun lt!23402 () ListLongMap!1339)

(assert (=> d!11021 (= res!32528 (not (contains!675 lt!23402 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38385 () ListLongMap!1339)

(assert (=> d!11021 (= lt!23402 e!38385)))

(declare-fun c!7344 () Bool)

(assert (=> d!11021 (= c!7344 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!11021 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!11021 (= (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23402)))

(declare-fun b!58326 () Bool)

(declare-fun e!38387 () Bool)

(declare-fun e!38386 () Bool)

(assert (=> b!58326 (= e!38387 e!38386)))

(assert (=> b!58326 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32530 () Bool)

(assert (=> b!58326 (= res!32530 (contains!675 lt!23402 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58326 (=> (not res!32530) (not e!38386))))

(declare-fun b!58327 () Bool)

(assert (=> b!58327 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> b!58327 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (ite c!7058 (_values!2004 newMap!16) lt!22661))))))

(assert (=> b!58327 (= e!38386 (= (apply!65 lt!23402 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!4271 () ListLongMap!1339)

(declare-fun bm!4268 () Bool)

(assert (=> bm!4268 (= call!4271 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16)))))

(declare-fun b!58328 () Bool)

(declare-fun e!38383 () Bool)

(assert (=> b!58328 (= e!38387 e!38383)))

(declare-fun c!7341 () Bool)

(assert (=> b!58328 (= c!7341 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58329 () Bool)

(assert (=> b!58329 (= e!38385 (ListLongMap!1340 Nil!1416))))

(declare-fun b!58330 () Bool)

(assert (=> b!58330 (= e!38384 e!38387)))

(declare-fun c!7342 () Bool)

(assert (=> b!58330 (= c!7342 e!38389)))

(declare-fun res!32531 () Bool)

(assert (=> b!58330 (=> (not res!32531) (not e!38389))))

(assert (=> b!58330 (= res!32531 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58331 () Bool)

(assert (=> b!58331 (= e!38383 (isEmpty!297 lt!23402))))

(declare-fun b!58332 () Bool)

(declare-fun e!38388 () ListLongMap!1339)

(assert (=> b!58332 (= e!38385 e!38388)))

(declare-fun c!7343 () Bool)

(assert (=> b!58332 (= c!7343 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58333 () Bool)

(assert (=> b!58333 (= e!38388 call!4271)))

(declare-fun b!58334 () Bool)

(declare-fun res!32529 () Bool)

(assert (=> b!58334 (=> (not res!32529) (not e!38384))))

(assert (=> b!58334 (= res!32529 (not (contains!675 lt!23402 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58335 () Bool)

(declare-fun lt!23404 () Unit!1484)

(declare-fun lt!23400 () Unit!1484)

(assert (=> b!58335 (= lt!23404 lt!23400)))

(declare-fun lt!23401 () (_ BitVec 64))

(declare-fun lt!23406 () (_ BitVec 64))

(declare-fun lt!23403 () ListLongMap!1339)

(declare-fun lt!23405 () V!2833)

(assert (=> b!58335 (not (contains!675 (+!79 lt!23403 (tuple2!2009 lt!23401 lt!23405)) lt!23406))))

(assert (=> b!58335 (= lt!23400 (addStillNotContains!16 lt!23403 lt!23401 lt!23405 lt!23406))))

(assert (=> b!58335 (= lt!23406 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58335 (= lt!23405 (get!1066 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58335 (= lt!23401 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58335 (= lt!23403 call!4271)))

(assert (=> b!58335 (= e!38388 (+!79 call!4271 (tuple2!2009 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1767 (ite c!7058 (_values!2004 newMap!16) lt!22661)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58336 () Bool)

(assert (=> b!58336 (= e!38383 (= lt!23402 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (ite c!7058 (_values!2004 newMap!16) lt!22661) (mask!5895 newMap!16) (ite c!7058 (ite c!7060 (extraKeys!1912 newMap!16) lt!22656) (extraKeys!1912 newMap!16)) (zeroValue!1939 newMap!16) (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2021 newMap!16))))))

(assert (= (and d!11021 c!7344) b!58329))

(assert (= (and d!11021 (not c!7344)) b!58332))

(assert (= (and b!58332 c!7343) b!58335))

(assert (= (and b!58332 (not c!7343)) b!58333))

(assert (= (or b!58335 b!58333) bm!4268))

(assert (= (and d!11021 res!32528) b!58334))

(assert (= (and b!58334 res!32529) b!58330))

(assert (= (and b!58330 res!32531) b!58325))

(assert (= (and b!58330 c!7342) b!58326))

(assert (= (and b!58330 (not c!7342)) b!58328))

(assert (= (and b!58326 res!32530) b!58327))

(assert (= (and b!58328 c!7341) b!58336))

(assert (= (and b!58328 (not c!7341)) b!58331))

(declare-fun b_lambda!2543 () Bool)

(assert (=> (not b_lambda!2543) (not b!58327)))

(assert (=> b!58327 t!4745))

(declare-fun b_and!3525 () Bool)

(assert (= b_and!3521 (and (=> t!4745 result!2353) b_and!3525)))

(assert (=> b!58327 t!4747))

(declare-fun b_and!3527 () Bool)

(assert (= b_and!3523 (and (=> t!4747 result!2355) b_and!3527)))

(declare-fun b_lambda!2545 () Bool)

(assert (=> (not b_lambda!2545) (not b!58335)))

(assert (=> b!58335 t!4745))

(declare-fun b_and!3529 () Bool)

(assert (= b_and!3525 (and (=> t!4745 result!2353) b_and!3529)))

(assert (=> b!58335 t!4747))

(declare-fun b_and!3531 () Bool)

(assert (= b_and!3527 (and (=> t!4747 result!2355) b_and!3531)))

(declare-fun m!49847 () Bool)

(assert (=> d!11021 m!49847))

(assert (=> d!11021 m!48151))

(assert (=> b!58327 m!48177))

(declare-fun m!49849 () Bool)

(assert (=> b!58327 m!49849))

(assert (=> b!58327 m!48393))

(assert (=> b!58327 m!48393))

(assert (=> b!58327 m!48203))

(assert (=> b!58327 m!48397))

(assert (=> b!58327 m!48177))

(assert (=> b!58327 m!48203))

(declare-fun m!49851 () Bool)

(assert (=> b!58336 m!49851))

(assert (=> b!58325 m!48177))

(assert (=> b!58325 m!48177))

(assert (=> b!58325 m!48187))

(declare-fun m!49853 () Bool)

(assert (=> b!58331 m!49853))

(declare-fun m!49855 () Bool)

(assert (=> b!58334 m!49855))

(assert (=> b!58326 m!48177))

(assert (=> b!58326 m!48177))

(declare-fun m!49857 () Bool)

(assert (=> b!58326 m!49857))

(declare-fun m!49859 () Bool)

(assert (=> b!58335 m!49859))

(assert (=> b!58335 m!48393))

(assert (=> b!58335 m!48393))

(assert (=> b!58335 m!48203))

(assert (=> b!58335 m!48397))

(declare-fun m!49861 () Bool)

(assert (=> b!58335 m!49861))

(assert (=> b!58335 m!48177))

(assert (=> b!58335 m!48203))

(declare-fun m!49863 () Bool)

(assert (=> b!58335 m!49863))

(declare-fun m!49865 () Bool)

(assert (=> b!58335 m!49865))

(assert (=> b!58335 m!49863))

(assert (=> bm!4268 m!49851))

(assert (=> b!58332 m!48177))

(assert (=> b!58332 m!48177))

(assert (=> b!58332 m!48187))

(assert (=> b!57578 d!11021))

(declare-fun d!11023 () Bool)

(assert (=> d!11023 (= (apply!65 (+!79 lt!22920 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22921) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22920 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) lt!22921)))))

(declare-fun bs!2531 () Bool)

(assert (= bs!2531 d!11023))

(declare-fun m!49867 () Bool)

(assert (=> bs!2531 m!49867))

(assert (=> bs!2531 m!49867))

(declare-fun m!49869 () Bool)

(assert (=> bs!2531 m!49869))

(assert (=> b!57578 d!11023))

(declare-fun d!11025 () Bool)

(declare-fun e!38390 () Bool)

(assert (=> d!11025 e!38390))

(declare-fun res!32532 () Bool)

(assert (=> d!11025 (=> (not res!32532) (not e!38390))))

(declare-fun lt!23410 () ListLongMap!1339)

(assert (=> d!11025 (= res!32532 (contains!675 lt!23410 (_1!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))))))

(declare-fun lt!23408 () List!1419)

(assert (=> d!11025 (= lt!23410 (ListLongMap!1340 lt!23408))))

(declare-fun lt!23409 () Unit!1484)

(declare-fun lt!23407 () Unit!1484)

(assert (=> d!11025 (= lt!23409 lt!23407)))

(assert (=> d!11025 (= (getValueByKey!124 lt!23408 (_1!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11025 (= lt!23407 (lemmaContainsTupThenGetReturnValue!41 lt!23408 (_1!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11025 (= lt!23408 (insertStrictlySorted!44 (toList!685 lt!22911) (_1!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11025 (= (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) lt!23410)))

(declare-fun b!58337 () Bool)

(declare-fun res!32533 () Bool)

(assert (=> b!58337 (=> (not res!32533) (not e!38390))))

(assert (=> b!58337 (= res!32533 (= (getValueByKey!124 (toList!685 lt!23410) (_1!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))))))))

(declare-fun b!58338 () Bool)

(assert (=> b!58338 (= e!38390 (contains!677 (toList!685 lt!23410) (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))))))

(assert (= (and d!11025 res!32532) b!58337))

(assert (= (and b!58337 res!32533) b!58338))

(declare-fun m!49871 () Bool)

(assert (=> d!11025 m!49871))

(declare-fun m!49873 () Bool)

(assert (=> d!11025 m!49873))

(declare-fun m!49875 () Bool)

(assert (=> d!11025 m!49875))

(declare-fun m!49877 () Bool)

(assert (=> d!11025 m!49877))

(declare-fun m!49879 () Bool)

(assert (=> b!58337 m!49879))

(declare-fun m!49881 () Bool)

(assert (=> b!58338 m!49881))

(assert (=> b!57578 d!11025))

(declare-fun d!11027 () Bool)

(assert (=> d!11027 (= (apply!65 (+!79 lt!22927 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22915) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22927 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) lt!22915)))))

(declare-fun bs!2532 () Bool)

(assert (= bs!2532 d!11027))

(declare-fun m!49883 () Bool)

(assert (=> bs!2532 m!49883))

(assert (=> bs!2532 m!49883))

(declare-fun m!49885 () Bool)

(assert (=> bs!2532 m!49885))

(assert (=> b!57578 d!11027))

(declare-fun d!11029 () Bool)

(assert (=> d!11029 (= (apply!65 lt!22909 lt!22919) (get!1069 (getValueByKey!124 (toList!685 lt!22909) lt!22919)))))

(declare-fun bs!2533 () Bool)

(assert (= bs!2533 d!11029))

(declare-fun m!49887 () Bool)

(assert (=> bs!2533 m!49887))

(assert (=> bs!2533 m!49887))

(declare-fun m!49889 () Bool)

(assert (=> bs!2533 m!49889))

(assert (=> b!57578 d!11029))

(declare-fun d!11031 () Bool)

(assert (=> d!11031 (= (apply!65 (+!79 lt!22909 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) lt!22919) (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22909 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))) lt!22919)))))

(declare-fun bs!2534 () Bool)

(assert (= bs!2534 d!11031))

(declare-fun m!49891 () Bool)

(assert (=> bs!2534 m!49891))

(assert (=> bs!2534 m!49891))

(declare-fun m!49893 () Bool)

(assert (=> bs!2534 m!49893))

(assert (=> b!57578 d!11031))

(declare-fun d!11033 () Bool)

(declare-fun e!38391 () Bool)

(assert (=> d!11033 e!38391))

(declare-fun res!32534 () Bool)

(assert (=> d!11033 (=> (not res!32534) (not e!38391))))

(declare-fun lt!23414 () ListLongMap!1339)

(assert (=> d!11033 (= res!32534 (contains!675 lt!23414 (_1!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(declare-fun lt!23412 () List!1419)

(assert (=> d!11033 (= lt!23414 (ListLongMap!1340 lt!23412))))

(declare-fun lt!23413 () Unit!1484)

(declare-fun lt!23411 () Unit!1484)

(assert (=> d!11033 (= lt!23413 lt!23411)))

(assert (=> d!11033 (= (getValueByKey!124 lt!23412 (_1!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11033 (= lt!23411 (lemmaContainsTupThenGetReturnValue!41 lt!23412 (_1!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11033 (= lt!23412 (insertStrictlySorted!44 (toList!685 lt!22920) (_1!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11033 (= (+!79 lt!22920 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!23414)))

(declare-fun b!58339 () Bool)

(declare-fun res!32535 () Bool)

(assert (=> b!58339 (=> (not res!32535) (not e!38391))))

(assert (=> b!58339 (= res!32535 (= (getValueByKey!124 (toList!685 lt!23414) (_1!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(declare-fun b!58340 () Bool)

(assert (=> b!58340 (= e!38391 (contains!677 (toList!685 lt!23414) (tuple2!2009 lt!22907 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))

(assert (= (and d!11033 res!32534) b!58339))

(assert (= (and b!58339 res!32535) b!58340))

(declare-fun m!49895 () Bool)

(assert (=> d!11033 m!49895))

(declare-fun m!49897 () Bool)

(assert (=> d!11033 m!49897))

(declare-fun m!49899 () Bool)

(assert (=> d!11033 m!49899))

(declare-fun m!49901 () Bool)

(assert (=> d!11033 m!49901))

(declare-fun m!49903 () Bool)

(assert (=> b!58339 m!49903))

(declare-fun m!49905 () Bool)

(assert (=> b!58340 m!49905))

(assert (=> b!57578 d!11033))

(declare-fun d!11035 () Bool)

(declare-fun e!38392 () Bool)

(assert (=> d!11035 e!38392))

(declare-fun res!32536 () Bool)

(assert (=> d!11035 (=> (not res!32536) (not e!38392))))

(declare-fun lt!23418 () ListLongMap!1339)

(assert (=> d!11035 (= res!32536 (contains!675 lt!23418 (_1!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))))))

(declare-fun lt!23416 () List!1419)

(assert (=> d!11035 (= lt!23418 (ListLongMap!1340 lt!23416))))

(declare-fun lt!23417 () Unit!1484)

(declare-fun lt!23415 () Unit!1484)

(assert (=> d!11035 (= lt!23417 lt!23415)))

(assert (=> d!11035 (= (getValueByKey!124 lt!23416 (_1!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11035 (= lt!23415 (lemmaContainsTupThenGetReturnValue!41 lt!23416 (_1!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11035 (= lt!23416 (insertStrictlySorted!44 (toList!685 lt!22909) (_1!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) (_2!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))))))

(assert (=> d!11035 (= (+!79 lt!22909 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) lt!23418)))

(declare-fun b!58341 () Bool)

(declare-fun res!32537 () Bool)

(assert (=> b!58341 (=> (not res!32537) (not e!38392))))

(assert (=> b!58341 (= res!32537 (= (getValueByKey!124 (toList!685 lt!23418) (_1!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))))))))

(declare-fun b!58342 () Bool)

(assert (=> b!58342 (= e!38392 (contains!677 (toList!685 lt!23418) (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))))))

(assert (= (and d!11035 res!32536) b!58341))

(assert (= (and b!58341 res!32537) b!58342))

(declare-fun m!49907 () Bool)

(assert (=> d!11035 m!49907))

(declare-fun m!49909 () Bool)

(assert (=> d!11035 m!49909))

(declare-fun m!49911 () Bool)

(assert (=> d!11035 m!49911))

(declare-fun m!49913 () Bool)

(assert (=> d!11035 m!49913))

(declare-fun m!49915 () Bool)

(assert (=> b!58341 m!49915))

(declare-fun m!49917 () Bool)

(assert (=> b!58342 m!49917))

(assert (=> b!57578 d!11035))

(declare-fun d!11037 () Bool)

(assert (=> d!11037 (contains!675 (+!79 lt!22911 (tuple2!2009 lt!22916 (zeroValue!1939 newMap!16))) lt!22922)))

(declare-fun lt!23419 () Unit!1484)

(assert (=> d!11037 (= lt!23419 (choose!301 lt!22911 lt!22916 (zeroValue!1939 newMap!16) lt!22922))))

(assert (=> d!11037 (contains!675 lt!22911 lt!22922)))

(assert (=> d!11037 (= (addStillContains!41 lt!22911 lt!22916 (zeroValue!1939 newMap!16) lt!22922) lt!23419)))

(declare-fun bs!2535 () Bool)

(assert (= bs!2535 d!11037))

(assert (=> bs!2535 m!48415))

(assert (=> bs!2535 m!48415))

(assert (=> bs!2535 m!48431))

(declare-fun m!49919 () Bool)

(assert (=> bs!2535 m!49919))

(declare-fun m!49921 () Bool)

(assert (=> bs!2535 m!49921))

(assert (=> b!57578 d!11037))

(declare-fun d!11039 () Bool)

(assert (=> d!11039 (= (apply!65 (+!79 lt!22927 (tuple2!2009 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!22915) (apply!65 lt!22927 lt!22915))))

(declare-fun lt!23420 () Unit!1484)

(assert (=> d!11039 (= lt!23420 (choose!300 lt!22927 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22915))))

(declare-fun e!38393 () Bool)

(assert (=> d!11039 e!38393))

(declare-fun res!32538 () Bool)

(assert (=> d!11039 (=> (not res!32538) (not e!38393))))

(assert (=> d!11039 (= res!32538 (contains!675 lt!22927 lt!22915))))

(assert (=> d!11039 (= (addApplyDifferent!41 lt!22927 lt!22925 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)) lt!22915) lt!23420)))

(declare-fun b!58343 () Bool)

(assert (=> b!58343 (= e!38393 (not (= lt!22915 lt!22925)))))

(assert (= (and d!11039 res!32538) b!58343))

(declare-fun m!49923 () Bool)

(assert (=> d!11039 m!49923))

(assert (=> d!11039 m!48413))

(assert (=> d!11039 m!48421))

(assert (=> d!11039 m!48421))

(assert (=> d!11039 m!48423))

(declare-fun m!49925 () Bool)

(assert (=> d!11039 m!49925))

(assert (=> b!57578 d!11039))

(declare-fun d!11041 () Bool)

(assert (=> d!11041 (= (apply!65 lt!22920 lt!22921) (get!1069 (getValueByKey!124 (toList!685 lt!22920) lt!22921)))))

(declare-fun bs!2536 () Bool)

(assert (= bs!2536 d!11041))

(declare-fun m!49927 () Bool)

(assert (=> bs!2536 m!49927))

(assert (=> bs!2536 m!49927))

(declare-fun m!49929 () Bool)

(assert (=> bs!2536 m!49929))

(assert (=> b!57578 d!11041))

(declare-fun d!11043 () Bool)

(assert (=> d!11043 (= (apply!65 lt!22927 lt!22915) (get!1069 (getValueByKey!124 (toList!685 lt!22927) lt!22915)))))

(declare-fun bs!2537 () Bool)

(assert (= bs!2537 d!11043))

(declare-fun m!49931 () Bool)

(assert (=> bs!2537 m!49931))

(assert (=> bs!2537 m!49931))

(declare-fun m!49933 () Bool)

(assert (=> bs!2537 m!49933))

(assert (=> b!57578 d!11043))

(declare-fun d!11045 () Bool)

(assert (=> d!11045 (= (apply!65 (+!79 lt!22909 (tuple2!2009 lt!22923 (zeroValue!1939 newMap!16))) lt!22919) (apply!65 lt!22909 lt!22919))))

(declare-fun lt!23421 () Unit!1484)

(assert (=> d!11045 (= lt!23421 (choose!300 lt!22909 lt!22923 (zeroValue!1939 newMap!16) lt!22919))))

(declare-fun e!38394 () Bool)

(assert (=> d!11045 e!38394))

(declare-fun res!32539 () Bool)

(assert (=> d!11045 (=> (not res!32539) (not e!38394))))

(assert (=> d!11045 (= res!32539 (contains!675 lt!22909 lt!22919))))

(assert (=> d!11045 (= (addApplyDifferent!41 lt!22909 lt!22923 (zeroValue!1939 newMap!16) lt!22919) lt!23421)))

(declare-fun b!58344 () Bool)

(assert (=> b!58344 (= e!38394 (not (= lt!22919 lt!22923)))))

(assert (= (and d!11045 res!32539) b!58344))

(declare-fun m!49935 () Bool)

(assert (=> d!11045 m!49935))

(assert (=> d!11045 m!48429))

(assert (=> d!11045 m!48419))

(assert (=> d!11045 m!48419))

(assert (=> d!11045 m!48437))

(declare-fun m!49937 () Bool)

(assert (=> d!11045 m!49937))

(assert (=> b!57578 d!11045))

(declare-fun d!11047 () Bool)

(assert (=> d!11047 (= (get!1069 (getValueByKey!124 (toList!685 lt!22722) lt!22723)) (v!2372 (getValueByKey!124 (toList!685 lt!22722) lt!22723)))))

(assert (=> d!10651 d!11047))

(declare-fun b!58348 () Bool)

(declare-fun e!38396 () Option!130)

(assert (=> b!58348 (= e!38396 None!128)))

(declare-fun b!58345 () Bool)

(declare-fun e!38395 () Option!130)

(assert (=> b!58345 (= e!38395 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22722)))))))

(declare-fun b!58347 () Bool)

(assert (=> b!58347 (= e!38396 (getValueByKey!124 (t!4733 (toList!685 lt!22722)) lt!22723))))

(declare-fun b!58346 () Bool)

(assert (=> b!58346 (= e!38395 e!38396)))

(declare-fun c!7346 () Bool)

(assert (=> b!58346 (= c!7346 (and ((_ is Cons!1415) (toList!685 lt!22722)) (not (= (_1!1015 (h!1995 (toList!685 lt!22722))) lt!22723))))))

(declare-fun d!11049 () Bool)

(declare-fun c!7345 () Bool)

(assert (=> d!11049 (= c!7345 (and ((_ is Cons!1415) (toList!685 lt!22722)) (= (_1!1015 (h!1995 (toList!685 lt!22722))) lt!22723)))))

(assert (=> d!11049 (= (getValueByKey!124 (toList!685 lt!22722) lt!22723) e!38395)))

(assert (= (and d!11049 c!7345) b!58345))

(assert (= (and d!11049 (not c!7345)) b!58346))

(assert (= (and b!58346 c!7346) b!58347))

(assert (= (and b!58346 (not c!7346)) b!58348))

(declare-fun m!49939 () Bool)

(assert (=> b!58347 m!49939))

(assert (=> d!10651 d!11049))

(assert (=> b!57670 d!10805))

(assert (=> b!57670 d!10585))

(declare-fun b!58349 () Bool)

(declare-fun e!38404 () ListLongMap!1339)

(declare-fun call!4278 () ListLongMap!1339)

(assert (=> b!58349 (= e!38404 call!4278)))

(declare-fun bm!4269 () Bool)

(declare-fun call!4274 () ListLongMap!1339)

(declare-fun c!7349 () Bool)

(declare-fun call!4276 () ListLongMap!1339)

(declare-fun c!7351 () Bool)

(declare-fun call!4272 () ListLongMap!1339)

(declare-fun call!4275 () ListLongMap!1339)

(assert (=> bm!4269 (= call!4274 (+!79 (ite c!7349 call!4272 (ite c!7351 call!4276 call!4275)) (ite (or c!7349 c!7351) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!58350 () Bool)

(declare-fun e!38407 () ListLongMap!1339)

(assert (=> b!58350 (= e!38407 e!38404)))

(assert (=> b!58350 (= c!7351 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4270 () Bool)

(assert (=> bm!4270 (= call!4272 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!58351 () Bool)

(declare-fun e!38400 () Bool)

(declare-fun e!38397 () Bool)

(assert (=> b!58351 (= e!38400 e!38397)))

(declare-fun res!32545 () Bool)

(declare-fun call!4277 () Bool)

(assert (=> b!58351 (= res!32545 call!4277)))

(assert (=> b!58351 (=> (not res!32545) (not e!38397))))

(declare-fun b!58352 () Bool)

(declare-fun res!32542 () Bool)

(declare-fun e!38405 () Bool)

(assert (=> b!58352 (=> (not res!32542) (not e!38405))))

(declare-fun e!38408 () Bool)

(assert (=> b!58352 (= res!32542 e!38408)))

(declare-fun res!32541 () Bool)

(assert (=> b!58352 (=> res!32541 e!38408)))

(declare-fun e!38401 () Bool)

(assert (=> b!58352 (= res!32541 (not e!38401))))

(declare-fun res!32543 () Bool)

(assert (=> b!58352 (=> (not res!32543) (not e!38401))))

(assert (=> b!58352 (= res!32543 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4271 () Bool)

(declare-fun lt!23443 () ListLongMap!1339)

(assert (=> bm!4271 (= call!4277 (contains!675 lt!23443 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58353 () Bool)

(declare-fun e!38406 () Unit!1484)

(declare-fun lt!23433 () Unit!1484)

(assert (=> b!58353 (= e!38406 lt!23433)))

(declare-fun lt!23426 () ListLongMap!1339)

(assert (=> b!58353 (= lt!23426 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23431 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23431 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23437 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23437 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23429 () Unit!1484)

(assert (=> b!58353 (= lt!23429 (addStillContains!41 lt!23426 lt!23431 (zeroValue!1939 newMap!16) lt!23437))))

(assert (=> b!58353 (contains!675 (+!79 lt!23426 (tuple2!2009 lt!23431 (zeroValue!1939 newMap!16))) lt!23437)))

(declare-fun lt!23441 () Unit!1484)

(assert (=> b!58353 (= lt!23441 lt!23429)))

(declare-fun lt!23435 () ListLongMap!1339)

(assert (=> b!58353 (= lt!23435 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23422 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23422 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23436 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23436 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23432 () Unit!1484)

(assert (=> b!58353 (= lt!23432 (addApplyDifferent!41 lt!23435 lt!23422 (minValue!1939 newMap!16) lt!23436))))

(assert (=> b!58353 (= (apply!65 (+!79 lt!23435 (tuple2!2009 lt!23422 (minValue!1939 newMap!16))) lt!23436) (apply!65 lt!23435 lt!23436))))

(declare-fun lt!23439 () Unit!1484)

(assert (=> b!58353 (= lt!23439 lt!23432)))

(declare-fun lt!23424 () ListLongMap!1339)

(assert (=> b!58353 (= lt!23424 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23438 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23438 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23434 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23434 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23425 () Unit!1484)

(assert (=> b!58353 (= lt!23425 (addApplyDifferent!41 lt!23424 lt!23438 (zeroValue!1939 newMap!16) lt!23434))))

(assert (=> b!58353 (= (apply!65 (+!79 lt!23424 (tuple2!2009 lt!23438 (zeroValue!1939 newMap!16))) lt!23434) (apply!65 lt!23424 lt!23434))))

(declare-fun lt!23423 () Unit!1484)

(assert (=> b!58353 (= lt!23423 lt!23425)))

(declare-fun lt!23442 () ListLongMap!1339)

(assert (=> b!58353 (= lt!23442 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23440 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23440 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23430 () (_ BitVec 64))

(assert (=> b!58353 (= lt!23430 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58353 (= lt!23433 (addApplyDifferent!41 lt!23442 lt!23440 (minValue!1939 newMap!16) lt!23430))))

(assert (=> b!58353 (= (apply!65 (+!79 lt!23442 (tuple2!2009 lt!23440 (minValue!1939 newMap!16))) lt!23430) (apply!65 lt!23442 lt!23430))))

(declare-fun d!11051 () Bool)

(assert (=> d!11051 e!38405))

(declare-fun res!32548 () Bool)

(assert (=> d!11051 (=> (not res!32548) (not e!38405))))

(assert (=> d!11051 (= res!32548 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!23427 () ListLongMap!1339)

(assert (=> d!11051 (= lt!23443 lt!23427)))

(declare-fun lt!23428 () Unit!1484)

(assert (=> d!11051 (= lt!23428 e!38406)))

(declare-fun c!7348 () Bool)

(declare-fun e!38403 () Bool)

(assert (=> d!11051 (= c!7348 e!38403)))

(declare-fun res!32540 () Bool)

(assert (=> d!11051 (=> (not res!32540) (not e!38403))))

(assert (=> d!11051 (= res!32540 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!11051 (= lt!23427 e!38407)))

(assert (=> d!11051 (= c!7349 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11051 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!11051 (= (getCurrentListMap!386 (_keys!3641 newMap!16) (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23443)))

(declare-fun b!58354 () Bool)

(assert (=> b!58354 (= e!38403 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58355 () Bool)

(declare-fun e!38398 () Bool)

(assert (=> b!58355 (= e!38405 e!38398)))

(declare-fun c!7352 () Bool)

(assert (=> b!58355 (= c!7352 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4272 () Bool)

(declare-fun call!4273 () Bool)

(assert (=> bm!4272 (= call!4273 (contains!675 lt!23443 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4273 () Bool)

(assert (=> bm!4273 (= call!4276 call!4272)))

(declare-fun b!58356 () Bool)

(declare-fun e!38402 () Bool)

(assert (=> b!58356 (= e!38398 e!38402)))

(declare-fun res!32544 () Bool)

(assert (=> b!58356 (= res!32544 call!4273)))

(assert (=> b!58356 (=> (not res!32544) (not e!38402))))

(declare-fun e!38399 () Bool)

(declare-fun b!58357 () Bool)

(assert (=> b!58357 (= e!38399 (= (apply!65 lt!23443 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58357 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 (array!3692 (store (arr!1767 (_values!2004 newMap!16)) (index!3003 lt!22638) (ValueCellFull!851 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!1996 (_values!2004 newMap!16))))))))

(assert (=> b!58357 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4274 () Bool)

(assert (=> bm!4274 (= call!4278 call!4274)))

(declare-fun b!58358 () Bool)

(assert (=> b!58358 (= e!38408 e!38399)))

(declare-fun res!32546 () Bool)

(assert (=> b!58358 (=> (not res!32546) (not e!38399))))

(assert (=> b!58358 (= res!32546 (contains!675 lt!23443 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58358 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58359 () Bool)

(assert (=> b!58359 (= e!38398 (not call!4273))))

(declare-fun b!58360 () Bool)

(assert (=> b!58360 (= e!38400 (not call!4277))))

(declare-fun b!58361 () Bool)

(declare-fun Unit!1532 () Unit!1484)

(assert (=> b!58361 (= e!38406 Unit!1532)))

(declare-fun b!58362 () Bool)

(declare-fun e!38409 () ListLongMap!1339)

(assert (=> b!58362 (= e!38409 call!4278)))

(declare-fun bm!4275 () Bool)

(assert (=> bm!4275 (= call!4275 call!4276)))

(declare-fun b!58363 () Bool)

(assert (=> b!58363 (= e!38407 (+!79 call!4274 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!58364 () Bool)

(assert (=> b!58364 (= e!38409 call!4275)))

(declare-fun b!58365 () Bool)

(declare-fun c!7350 () Bool)

(assert (=> b!58365 (= c!7350 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58365 (= e!38404 e!38409)))

(declare-fun b!58366 () Bool)

(declare-fun res!32547 () Bool)

(assert (=> b!58366 (=> (not res!32547) (not e!38405))))

(assert (=> b!58366 (= res!32547 e!38400)))

(declare-fun c!7347 () Bool)

(assert (=> b!58366 (= c!7347 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58367 () Bool)

(assert (=> b!58367 (= e!38397 (= (apply!65 lt!23443 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!58368 () Bool)

(assert (=> b!58368 (= e!38402 (= (apply!65 lt!23443 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!58369 () Bool)

(assert (=> b!58369 (= e!38401 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11051 c!7349) b!58363))

(assert (= (and d!11051 (not c!7349)) b!58350))

(assert (= (and b!58350 c!7351) b!58349))

(assert (= (and b!58350 (not c!7351)) b!58365))

(assert (= (and b!58365 c!7350) b!58362))

(assert (= (and b!58365 (not c!7350)) b!58364))

(assert (= (or b!58362 b!58364) bm!4275))

(assert (= (or b!58349 bm!4275) bm!4273))

(assert (= (or b!58349 b!58362) bm!4274))

(assert (= (or b!58363 bm!4273) bm!4270))

(assert (= (or b!58363 bm!4274) bm!4269))

(assert (= (and d!11051 res!32540) b!58354))

(assert (= (and d!11051 c!7348) b!58353))

(assert (= (and d!11051 (not c!7348)) b!58361))

(assert (= (and d!11051 res!32548) b!58352))

(assert (= (and b!58352 res!32543) b!58369))

(assert (= (and b!58352 (not res!32541)) b!58358))

(assert (= (and b!58358 res!32546) b!58357))

(assert (= (and b!58352 res!32542) b!58366))

(assert (= (and b!58366 c!7347) b!58351))

(assert (= (and b!58366 (not c!7347)) b!58360))

(assert (= (and b!58351 res!32545) b!58367))

(assert (= (or b!58351 b!58360) bm!4271))

(assert (= (and b!58366 res!32547) b!58355))

(assert (= (and b!58355 c!7352) b!58356))

(assert (= (and b!58355 (not c!7352)) b!58359))

(assert (= (and b!58356 res!32544) b!58368))

(assert (= (or b!58356 b!58359) bm!4272))

(declare-fun b_lambda!2547 () Bool)

(assert (=> (not b_lambda!2547) (not b!58357)))

(assert (=> b!58357 t!4745))

(declare-fun b_and!3533 () Bool)

(assert (= b_and!3529 (and (=> t!4745 result!2353) b_and!3533)))

(assert (=> b!58357 t!4747))

(declare-fun b_and!3535 () Bool)

(assert (= b_and!3531 (and (=> t!4747 result!2355) b_and!3535)))

(assert (=> d!11051 m!48151))

(declare-fun m!49941 () Bool)

(assert (=> bm!4272 m!49941))

(declare-fun m!49943 () Bool)

(assert (=> b!58363 m!49943))

(assert (=> b!58357 m!48177))

(declare-fun m!49945 () Bool)

(assert (=> b!58357 m!49945))

(assert (=> b!58357 m!48203))

(assert (=> b!58357 m!48177))

(declare-fun m!49947 () Bool)

(assert (=> b!58357 m!49947))

(assert (=> b!58357 m!49945))

(assert (=> b!58357 m!48203))

(declare-fun m!49949 () Bool)

(assert (=> b!58357 m!49949))

(assert (=> b!58354 m!48177))

(assert (=> b!58354 m!48177))

(assert (=> b!58354 m!48187))

(declare-fun m!49951 () Bool)

(assert (=> bm!4271 m!49951))

(declare-fun m!49953 () Bool)

(assert (=> bm!4269 m!49953))

(declare-fun m!49955 () Bool)

(assert (=> b!58367 m!49955))

(assert (=> b!58358 m!48177))

(assert (=> b!58358 m!48177))

(declare-fun m!49957 () Bool)

(assert (=> b!58358 m!49957))

(declare-fun m!49959 () Bool)

(assert (=> b!58353 m!49959))

(declare-fun m!49961 () Bool)

(assert (=> b!58353 m!49961))

(declare-fun m!49963 () Bool)

(assert (=> b!58353 m!49963))

(declare-fun m!49965 () Bool)

(assert (=> b!58353 m!49965))

(declare-fun m!49967 () Bool)

(assert (=> b!58353 m!49967))

(declare-fun m!49969 () Bool)

(assert (=> b!58353 m!49969))

(declare-fun m!49971 () Bool)

(assert (=> b!58353 m!49971))

(declare-fun m!49973 () Bool)

(assert (=> b!58353 m!49973))

(assert (=> b!58353 m!49959))

(assert (=> b!58353 m!49973))

(declare-fun m!49975 () Bool)

(assert (=> b!58353 m!49975))

(assert (=> b!58353 m!48177))

(declare-fun m!49977 () Bool)

(assert (=> b!58353 m!49977))

(declare-fun m!49979 () Bool)

(assert (=> b!58353 m!49979))

(declare-fun m!49981 () Bool)

(assert (=> b!58353 m!49981))

(assert (=> b!58353 m!49967))

(declare-fun m!49983 () Bool)

(assert (=> b!58353 m!49983))

(declare-fun m!49985 () Bool)

(assert (=> b!58353 m!49985))

(declare-fun m!49987 () Bool)

(assert (=> b!58353 m!49987))

(assert (=> b!58353 m!49971))

(declare-fun m!49989 () Bool)

(assert (=> b!58353 m!49989))

(assert (=> bm!4270 m!49979))

(declare-fun m!49991 () Bool)

(assert (=> b!58368 m!49991))

(assert (=> b!58369 m!48177))

(assert (=> b!58369 m!48177))

(assert (=> b!58369 m!48187))

(assert (=> b!57670 d!11051))

(declare-fun d!11053 () Bool)

(assert (=> d!11053 (= (get!1069 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2372 (getValueByKey!124 (toList!685 lt!22730) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10599 d!11053))

(assert (=> d!10599 d!10725))

(assert (=> bm!4176 d!11021))

(declare-fun d!11055 () Bool)

(declare-fun e!38411 () Bool)

(assert (=> d!11055 e!38411))

(declare-fun res!32549 () Bool)

(assert (=> d!11055 (=> res!32549 e!38411)))

(declare-fun lt!23445 () Bool)

(assert (=> d!11055 (= res!32549 (not lt!23445))))

(declare-fun lt!23446 () Bool)

(assert (=> d!11055 (= lt!23445 lt!23446)))

(declare-fun lt!23447 () Unit!1484)

(declare-fun e!38410 () Unit!1484)

(assert (=> d!11055 (= lt!23447 e!38410)))

(declare-fun c!7353 () Bool)

(assert (=> d!11055 (= c!7353 lt!23446)))

(assert (=> d!11055 (= lt!23446 (containsKey!127 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!11055 (= (contains!675 lt!23043 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23445)))

(declare-fun b!58370 () Bool)

(declare-fun lt!23444 () Unit!1484)

(assert (=> b!58370 (= e!38410 lt!23444)))

(assert (=> b!58370 (= lt!23444 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> b!58370 (isDefined!76 (getValueByKey!124 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58371 () Bool)

(declare-fun Unit!1533 () Unit!1484)

(assert (=> b!58371 (= e!38410 Unit!1533)))

(declare-fun b!58372 () Bool)

(assert (=> b!58372 (= e!38411 (isDefined!76 (getValueByKey!124 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11055 c!7353) b!58370))

(assert (= (and d!11055 (not c!7353)) b!58371))

(assert (= (and d!11055 (not res!32549)) b!58372))

(declare-fun m!49993 () Bool)

(assert (=> d!11055 m!49993))

(declare-fun m!49995 () Bool)

(assert (=> b!58370 m!49995))

(assert (=> b!58370 m!48701))

(assert (=> b!58370 m!48701))

(declare-fun m!49997 () Bool)

(assert (=> b!58370 m!49997))

(assert (=> b!58372 m!48701))

(assert (=> b!58372 m!48701))

(assert (=> b!58372 m!49997))

(assert (=> d!10671 d!11055))

(declare-fun b!58376 () Bool)

(declare-fun e!38413 () Option!130)

(assert (=> b!58376 (= e!38413 None!128)))

(declare-fun b!58373 () Bool)

(declare-fun e!38412 () Option!130)

(assert (=> b!58373 (= e!38412 (Some!129 (_2!1015 (h!1995 lt!23041))))))

(declare-fun b!58375 () Bool)

(assert (=> b!58375 (= e!38413 (getValueByKey!124 (t!4733 lt!23041) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58374 () Bool)

(assert (=> b!58374 (= e!38412 e!38413)))

(declare-fun c!7355 () Bool)

(assert (=> b!58374 (= c!7355 (and ((_ is Cons!1415) lt!23041) (not (= (_1!1015 (h!1995 lt!23041)) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11057 () Bool)

(declare-fun c!7354 () Bool)

(assert (=> d!11057 (= c!7354 (and ((_ is Cons!1415) lt!23041) (= (_1!1015 (h!1995 lt!23041)) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11057 (= (getValueByKey!124 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38412)))

(assert (= (and d!11057 c!7354) b!58373))

(assert (= (and d!11057 (not c!7354)) b!58374))

(assert (= (and b!58374 c!7355) b!58375))

(assert (= (and b!58374 (not c!7355)) b!58376))

(declare-fun m!49999 () Bool)

(assert (=> b!58375 m!49999))

(assert (=> d!10671 d!11057))

(declare-fun d!11059 () Bool)

(assert (=> d!11059 (= (getValueByKey!124 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23448 () Unit!1484)

(assert (=> d!11059 (= lt!23448 (choose!304 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38414 () Bool)

(assert (=> d!11059 e!38414))

(declare-fun res!32550 () Bool)

(assert (=> d!11059 (=> (not res!32550) (not e!38414))))

(assert (=> d!11059 (= res!32550 (isStrictlySorted!270 lt!23041))))

(assert (=> d!11059 (= (lemmaContainsTupThenGetReturnValue!41 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23448)))

(declare-fun b!58377 () Bool)

(declare-fun res!32551 () Bool)

(assert (=> b!58377 (=> (not res!32551) (not e!38414))))

(assert (=> b!58377 (= res!32551 (containsKey!127 lt!23041 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58378 () Bool)

(assert (=> b!58378 (= e!38414 (contains!677 lt!23041 (tuple2!2009 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11059 res!32550) b!58377))

(assert (= (and b!58377 res!32551) b!58378))

(assert (=> d!11059 m!48695))

(declare-fun m!50001 () Bool)

(assert (=> d!11059 m!50001))

(declare-fun m!50003 () Bool)

(assert (=> d!11059 m!50003))

(declare-fun m!50005 () Bool)

(assert (=> b!58377 m!50005))

(declare-fun m!50007 () Bool)

(assert (=> b!58378 m!50007))

(assert (=> d!10671 d!11059))

(declare-fun d!11061 () Bool)

(declare-fun e!38418 () Bool)

(assert (=> d!11061 e!38418))

(declare-fun res!32552 () Bool)

(assert (=> d!11061 (=> (not res!32552) (not e!38418))))

(declare-fun lt!23449 () List!1419)

(assert (=> d!11061 (= res!32552 (isStrictlySorted!270 lt!23449))))

(declare-fun e!38416 () List!1419)

(assert (=> d!11061 (= lt!23449 e!38416)))

(declare-fun c!7358 () Bool)

(assert (=> d!11061 (= c!7358 (and ((_ is Cons!1415) (toList!685 call!4141)) (bvslt (_1!1015 (h!1995 (toList!685 call!4141))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11061 (isStrictlySorted!270 (toList!685 call!4141))))

(assert (=> d!11061 (= (insertStrictlySorted!44 (toList!685 call!4141) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23449)))

(declare-fun bm!4276 () Bool)

(declare-fun call!4279 () List!1419)

(declare-fun call!4280 () List!1419)

(assert (=> bm!4276 (= call!4279 call!4280)))

(declare-fun e!38415 () List!1419)

(declare-fun bm!4277 () Bool)

(declare-fun call!4281 () List!1419)

(assert (=> bm!4277 (= call!4281 ($colon$colon!58 e!38415 (ite c!7358 (h!1995 (toList!685 call!4141)) (tuple2!2009 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7357 () Bool)

(assert (=> bm!4277 (= c!7357 c!7358)))

(declare-fun b!58379 () Bool)

(declare-fun e!38417 () List!1419)

(assert (=> b!58379 (= e!38417 call!4280)))

(declare-fun b!58380 () Bool)

(assert (=> b!58380 (= e!38416 e!38417)))

(declare-fun c!7356 () Bool)

(assert (=> b!58380 (= c!7356 (and ((_ is Cons!1415) (toList!685 call!4141)) (= (_1!1015 (h!1995 (toList!685 call!4141))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!58381 () Bool)

(assert (=> b!58381 (= e!38415 (insertStrictlySorted!44 (t!4733 (toList!685 call!4141)) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58382 () Bool)

(declare-fun e!38419 () List!1419)

(assert (=> b!58382 (= e!38419 call!4279)))

(declare-fun b!58383 () Bool)

(declare-fun res!32553 () Bool)

(assert (=> b!58383 (=> (not res!32553) (not e!38418))))

(assert (=> b!58383 (= res!32553 (containsKey!127 lt!23449 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun bm!4278 () Bool)

(assert (=> bm!4278 (= call!4280 call!4281)))

(declare-fun c!7359 () Bool)

(declare-fun b!58384 () Bool)

(assert (=> b!58384 (= e!38415 (ite c!7356 (t!4733 (toList!685 call!4141)) (ite c!7359 (Cons!1415 (h!1995 (toList!685 call!4141)) (t!4733 (toList!685 call!4141))) Nil!1416)))))

(declare-fun b!58385 () Bool)

(assert (=> b!58385 (= c!7359 (and ((_ is Cons!1415) (toList!685 call!4141)) (bvsgt (_1!1015 (h!1995 (toList!685 call!4141))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!58385 (= e!38417 e!38419)))

(declare-fun b!58386 () Bool)

(assert (=> b!58386 (= e!38419 call!4279)))

(declare-fun b!58387 () Bool)

(assert (=> b!58387 (= e!38416 call!4281)))

(declare-fun b!58388 () Bool)

(assert (=> b!58388 (= e!38418 (contains!677 lt!23449 (tuple2!2009 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11061 c!7358) b!58387))

(assert (= (and d!11061 (not c!7358)) b!58380))

(assert (= (and b!58380 c!7356) b!58379))

(assert (= (and b!58380 (not c!7356)) b!58385))

(assert (= (and b!58385 c!7359) b!58382))

(assert (= (and b!58385 (not c!7359)) b!58386))

(assert (= (or b!58382 b!58386) bm!4276))

(assert (= (or b!58379 bm!4276) bm!4278))

(assert (= (or b!58387 bm!4278) bm!4277))

(assert (= (and bm!4277 c!7357) b!58381))

(assert (= (and bm!4277 (not c!7357)) b!58384))

(assert (= (and d!11061 res!32552) b!58383))

(assert (= (and b!58383 res!32553) b!58388))

(declare-fun m!50009 () Bool)

(assert (=> b!58381 m!50009))

(declare-fun m!50011 () Bool)

(assert (=> bm!4277 m!50011))

(declare-fun m!50013 () Bool)

(assert (=> b!58383 m!50013))

(declare-fun m!50015 () Bool)

(assert (=> d!11061 m!50015))

(declare-fun m!50017 () Bool)

(assert (=> d!11061 m!50017))

(declare-fun m!50019 () Bool)

(assert (=> b!58388 m!50019))

(assert (=> d!10671 d!11061))

(assert (=> b!57483 d!10723))

(assert (=> b!57483 d!10725))

(declare-fun d!11063 () Bool)

(declare-fun e!38421 () Bool)

(assert (=> d!11063 e!38421))

(declare-fun res!32554 () Bool)

(assert (=> d!11063 (=> res!32554 e!38421)))

(declare-fun lt!23451 () Bool)

(assert (=> d!11063 (= res!32554 (not lt!23451))))

(declare-fun lt!23452 () Bool)

(assert (=> d!11063 (= lt!23451 lt!23452)))

(declare-fun lt!23453 () Unit!1484)

(declare-fun e!38420 () Unit!1484)

(assert (=> d!11063 (= lt!23453 e!38420)))

(declare-fun c!7360 () Bool)

(assert (=> d!11063 (= c!7360 lt!23452)))

(assert (=> d!11063 (= lt!23452 (containsKey!127 (toList!685 (map!1104 (_2!1016 lt!22870))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!11063 (= (contains!675 (map!1104 (_2!1016 lt!22870)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23451)))

(declare-fun b!58389 () Bool)

(declare-fun lt!23450 () Unit!1484)

(assert (=> b!58389 (= e!38420 lt!23450)))

(assert (=> b!58389 (= lt!23450 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (map!1104 (_2!1016 lt!22870))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!58389 (isDefined!76 (getValueByKey!124 (toList!685 (map!1104 (_2!1016 lt!22870))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58390 () Bool)

(declare-fun Unit!1534 () Unit!1484)

(assert (=> b!58390 (= e!38420 Unit!1534)))

(declare-fun b!58391 () Bool)

(assert (=> b!58391 (= e!38421 (isDefined!76 (getValueByKey!124 (toList!685 (map!1104 (_2!1016 lt!22870))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!11063 c!7360) b!58389))

(assert (= (and d!11063 (not c!7360)) b!58390))

(assert (= (and d!11063 (not res!32554)) b!58391))

(assert (=> d!11063 m!47875))

(declare-fun m!50021 () Bool)

(assert (=> d!11063 m!50021))

(assert (=> b!58389 m!47875))

(declare-fun m!50023 () Bool)

(assert (=> b!58389 m!50023))

(assert (=> b!58389 m!47875))

(declare-fun m!50025 () Bool)

(assert (=> b!58389 m!50025))

(assert (=> b!58389 m!50025))

(declare-fun m!50027 () Bool)

(assert (=> b!58389 m!50027))

(assert (=> b!58391 m!47875))

(assert (=> b!58391 m!50025))

(assert (=> b!58391 m!50025))

(assert (=> b!58391 m!50027))

(assert (=> b!57528 d!11063))

(declare-fun d!11065 () Bool)

(assert (=> d!11065 (= (map!1104 (_2!1016 lt!22870)) (getCurrentListMap!386 (_keys!3641 (_2!1016 lt!22870)) (_values!2004 (_2!1016 lt!22870)) (mask!5895 (_2!1016 lt!22870)) (extraKeys!1912 (_2!1016 lt!22870)) (zeroValue!1939 (_2!1016 lt!22870)) (minValue!1939 (_2!1016 lt!22870)) #b00000000000000000000000000000000 (defaultEntry!2021 (_2!1016 lt!22870))))))

(declare-fun bs!2538 () Bool)

(assert (= bs!2538 d!11065))

(declare-fun m!50029 () Bool)

(assert (=> bs!2538 m!50029))

(assert (=> b!57528 d!11065))

(declare-fun d!11067 () Bool)

(declare-fun lt!23454 () Bool)

(assert (=> d!11067 (= lt!23454 (select (content!63 (toList!685 lt!23002)) (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun e!38423 () Bool)

(assert (=> d!11067 (= lt!23454 e!38423)))

(declare-fun res!32555 () Bool)

(assert (=> d!11067 (=> (not res!32555) (not e!38423))))

(assert (=> d!11067 (= res!32555 ((_ is Cons!1415) (toList!685 lt!23002)))))

(assert (=> d!11067 (= (contains!677 (toList!685 lt!23002) (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23454)))

(declare-fun b!58392 () Bool)

(declare-fun e!38422 () Bool)

(assert (=> b!58392 (= e!38423 e!38422)))

(declare-fun res!32556 () Bool)

(assert (=> b!58392 (=> res!32556 e!38422)))

(assert (=> b!58392 (= res!32556 (= (h!1995 (toList!685 lt!23002)) (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58393 () Bool)

(assert (=> b!58393 (= e!38422 (contains!677 (t!4733 (toList!685 lt!23002)) (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!11067 res!32555) b!58392))

(assert (= (and b!58392 (not res!32556)) b!58393))

(declare-fun m!50031 () Bool)

(assert (=> d!11067 m!50031))

(declare-fun m!50033 () Bool)

(assert (=> d!11067 m!50033))

(declare-fun m!50035 () Bool)

(assert (=> b!58393 m!50035))

(assert (=> b!57684 d!11067))

(assert (=> d!10585 d!10717))

(declare-fun b!58394 () Bool)

(declare-fun e!38425 () Bool)

(declare-fun e!38426 () Bool)

(assert (=> b!58394 (= e!38425 e!38426)))

(declare-fun lt!23455 () (_ BitVec 64))

(assert (=> b!58394 (= lt!23455 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000))))

(declare-fun lt!23457 () Unit!1484)

(assert (=> b!58394 (= lt!23457 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3641 (_2!1016 lt!22658)) lt!23455 #b00000000000000000000000000000000))))

(assert (=> b!58394 (arrayContainsKey!0 (_keys!3641 (_2!1016 lt!22658)) lt!23455 #b00000000000000000000000000000000)))

(declare-fun lt!23456 () Unit!1484)

(assert (=> b!58394 (= lt!23456 lt!23457)))

(declare-fun res!32557 () Bool)

(assert (=> b!58394 (= res!32557 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000) (_keys!3641 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658))) (Found!220 #b00000000000000000000000000000000)))))

(assert (=> b!58394 (=> (not res!32557) (not e!38426))))

(declare-fun d!11069 () Bool)

(declare-fun res!32558 () Bool)

(declare-fun e!38424 () Bool)

(assert (=> d!11069 (=> res!32558 e!38424)))

(assert (=> d!11069 (= res!32558 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(assert (=> d!11069 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658))) e!38424)))

(declare-fun b!58395 () Bool)

(declare-fun call!4282 () Bool)

(assert (=> b!58395 (= e!38426 call!4282)))

(declare-fun bm!4279 () Bool)

(assert (=> bm!4279 (= call!4282 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3641 (_2!1016 lt!22658)) (mask!5895 (_2!1016 lt!22658))))))

(declare-fun b!58396 () Bool)

(assert (=> b!58396 (= e!38424 e!38425)))

(declare-fun c!7361 () Bool)

(assert (=> b!58396 (= c!7361 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(declare-fun b!58397 () Bool)

(assert (=> b!58397 (= e!38425 call!4282)))

(assert (= (and d!11069 (not res!32558)) b!58396))

(assert (= (and b!58396 c!7361) b!58394))

(assert (= (and b!58396 (not c!7361)) b!58397))

(assert (= (and b!58394 res!32557) b!58395))

(assert (= (or b!58395 b!58397) bm!4279))

(assert (=> b!58394 m!49033))

(declare-fun m!50037 () Bool)

(assert (=> b!58394 m!50037))

(declare-fun m!50039 () Bool)

(assert (=> b!58394 m!50039))

(assert (=> b!58394 m!49033))

(declare-fun m!50041 () Bool)

(assert (=> b!58394 m!50041))

(declare-fun m!50043 () Bool)

(assert (=> bm!4279 m!50043))

(assert (=> b!58396 m!49033))

(assert (=> b!58396 m!49033))

(assert (=> b!58396 m!49043))

(assert (=> b!57622 d!11069))

(assert (=> b!57650 d!10561))

(declare-fun d!11071 () Bool)

(assert (=> d!11071 (= (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22717)) (v!2372 (getValueByKey!124 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22717)))))

(assert (=> d!10635 d!11071))

(declare-fun b!58401 () Bool)

(declare-fun e!38428 () Option!130)

(assert (=> b!58401 (= e!38428 None!128)))

(declare-fun e!38427 () Option!130)

(declare-fun b!58398 () Bool)

(assert (=> b!58398 (= e!38427 (Some!129 (_2!1015 (h!1995 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun b!58400 () Bool)

(assert (=> b!58400 (= e!38428 (getValueByKey!124 (t!4733 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!22717))))

(declare-fun b!58399 () Bool)

(assert (=> b!58399 (= e!38427 e!38428)))

(declare-fun c!7363 () Bool)

(assert (=> b!58399 (= c!7363 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (not (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22717))))))

(declare-fun d!11073 () Bool)

(declare-fun c!7362 () Bool)

(assert (=> d!11073 (= c!7362 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22717)))))

(assert (=> d!11073 (= (getValueByKey!124 (toList!685 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22717) e!38427)))

(assert (= (and d!11073 c!7362) b!58398))

(assert (= (and d!11073 (not c!7362)) b!58399))

(assert (= (and b!58399 c!7363) b!58400))

(assert (= (and b!58399 (not c!7363)) b!58401))

(declare-fun m!50045 () Bool)

(assert (=> b!58400 m!50045))

(assert (=> d!10635 d!11073))

(declare-fun b!58405 () Bool)

(declare-fun e!38430 () Option!130)

(assert (=> b!58405 (= e!38430 None!128)))

(declare-fun b!58402 () Bool)

(declare-fun e!38429 () Option!130)

(assert (=> b!58402 (= e!38429 (Some!129 (_2!1015 (h!1995 (toList!685 lt!23006)))))))

(declare-fun b!58404 () Bool)

(assert (=> b!58404 (= e!38430 (getValueByKey!124 (t!4733 (toList!685 lt!23006)) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58403 () Bool)

(assert (=> b!58403 (= e!38429 e!38430)))

(declare-fun c!7365 () Bool)

(assert (=> b!58403 (= c!7365 (and ((_ is Cons!1415) (toList!685 lt!23006)) (not (= (_1!1015 (h!1995 (toList!685 lt!23006))) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11075 () Bool)

(declare-fun c!7364 () Bool)

(assert (=> d!11075 (= c!7364 (and ((_ is Cons!1415) (toList!685 lt!23006)) (= (_1!1015 (h!1995 (toList!685 lt!23006))) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11075 (= (getValueByKey!124 (toList!685 lt!23006) (_1!1015 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38429)))

(assert (= (and d!11075 c!7364) b!58402))

(assert (= (and d!11075 (not c!7364)) b!58403))

(assert (= (and b!58403 c!7365) b!58404))

(assert (= (and b!58403 (not c!7365)) b!58405))

(declare-fun m!50047 () Bool)

(assert (=> b!58404 m!50047))

(assert (=> b!57685 d!11075))

(declare-fun b!58409 () Bool)

(declare-fun e!38432 () Option!130)

(assert (=> b!58409 (= e!38432 None!128)))

(declare-fun b!58406 () Bool)

(declare-fun e!38431 () Option!130)

(assert (=> b!58406 (= e!38431 (Some!129 (_2!1015 (h!1995 (toList!685 lt!22949)))))))

(declare-fun b!58408 () Bool)

(assert (=> b!58408 (= e!38432 (getValueByKey!124 (t!4733 (toList!685 lt!22949)) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58407 () Bool)

(assert (=> b!58407 (= e!38431 e!38432)))

(declare-fun c!7367 () Bool)

(assert (=> b!58407 (= c!7367 (and ((_ is Cons!1415) (toList!685 lt!22949)) (not (= (_1!1015 (h!1995 (toList!685 lt!22949))) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!11077 () Bool)

(declare-fun c!7366 () Bool)

(assert (=> d!11077 (= c!7366 (and ((_ is Cons!1415) (toList!685 lt!22949)) (= (_1!1015 (h!1995 (toList!685 lt!22949))) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11077 (= (getValueByKey!124 (toList!685 lt!22949) (_1!1015 (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38431)))

(assert (= (and d!11077 c!7366) b!58406))

(assert (= (and d!11077 (not c!7366)) b!58407))

(assert (= (and b!58407 c!7367) b!58408))

(assert (= (and b!58407 (not c!7367)) b!58409))

(declare-fun m!50049 () Bool)

(assert (=> b!58408 m!50049))

(assert (=> b!57605 d!11077))

(assert (=> bm!4165 d!10567))

(declare-fun b!58413 () Bool)

(declare-fun e!38434 () Option!130)

(assert (=> b!58413 (= e!38434 None!128)))

(declare-fun b!58410 () Bool)

(declare-fun e!38433 () Option!130)

(assert (=> b!58410 (= e!38433 (Some!129 (_2!1015 (h!1995 (toList!685 lt!23015)))))))

(declare-fun b!58412 () Bool)

(assert (=> b!58412 (= e!38434 (getValueByKey!124 (t!4733 (toList!685 lt!23015)) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58411 () Bool)

(assert (=> b!58411 (= e!38433 e!38434)))

(declare-fun c!7369 () Bool)

(assert (=> b!58411 (= c!7369 (and ((_ is Cons!1415) (toList!685 lt!23015)) (not (= (_1!1015 (h!1995 (toList!685 lt!23015))) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11079 () Bool)

(declare-fun c!7368 () Bool)

(assert (=> d!11079 (= c!7368 (and ((_ is Cons!1415) (toList!685 lt!23015)) (= (_1!1015 (h!1995 (toList!685 lt!23015))) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11079 (= (getValueByKey!124 (toList!685 lt!23015) (_1!1015 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38433)))

(assert (= (and d!11079 c!7368) b!58410))

(assert (= (and d!11079 (not c!7368)) b!58411))

(assert (= (and b!58411 c!7369) b!58412))

(assert (= (and b!58411 (not c!7369)) b!58413))

(declare-fun m!50051 () Bool)

(assert (=> b!58412 m!50051))

(assert (=> b!57690 d!11079))

(declare-fun d!11081 () Bool)

(declare-fun res!32559 () Bool)

(declare-fun e!38435 () Bool)

(assert (=> d!11081 (=> res!32559 e!38435)))

(assert (=> d!11081 (= res!32559 (and ((_ is Cons!1415) (toList!685 call!4122)) (= (_1!1015 (h!1995 (toList!685 call!4122))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))))

(assert (=> d!11081 (= (containsKey!127 (toList!685 call!4122) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))) e!38435)))

(declare-fun b!58414 () Bool)

(declare-fun e!38436 () Bool)

(assert (=> b!58414 (= e!38435 e!38436)))

(declare-fun res!32560 () Bool)

(assert (=> b!58414 (=> (not res!32560) (not e!38436))))

(assert (=> b!58414 (= res!32560 (and (or (not ((_ is Cons!1415) (toList!685 call!4122))) (bvsle (_1!1015 (h!1995 (toList!685 call!4122))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))) ((_ is Cons!1415) (toList!685 call!4122)) (bvslt (_1!1015 (h!1995 (toList!685 call!4122))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))))

(declare-fun b!58415 () Bool)

(assert (=> b!58415 (= e!38436 (containsKey!127 (t!4733 (toList!685 call!4122)) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (= (and d!11081 (not res!32559)) b!58414))

(assert (= (and b!58414 res!32560) b!58415))

(assert (=> b!58415 m!48057))

(declare-fun m!50053 () Bool)

(assert (=> b!58415 m!50053))

(assert (=> d!10613 d!11081))

(declare-fun d!11083 () Bool)

(assert (=> d!11083 (= (apply!65 lt!22906 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22906) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2539 () Bool)

(assert (= bs!2539 d!11083))

(declare-fun m!50055 () Bool)

(assert (=> bs!2539 m!50055))

(assert (=> bs!2539 m!50055))

(declare-fun m!50057 () Bool)

(assert (=> bs!2539 m!50057))

(assert (=> b!57572 d!11083))

(declare-fun d!11085 () Bool)

(assert (=> d!11085 (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))

(assert (=> d!11085 true))

(declare-fun _$16!75 () Unit!1484)

(assert (=> d!11085 (= (choose!298 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (index!3003 lt!22638) (defaultEntry!2021 newMap!16)) _$16!75)))

(declare-fun bs!2540 () Bool)

(assert (= bs!2540 d!11085))

(assert (=> bs!2540 m!48531))

(assert (=> bs!2540 m!48057))

(assert (=> bs!2540 m!48531))

(assert (=> bs!2540 m!48057))

(assert (=> bs!2540 m!48533))

(assert (=> d!10615 d!11085))

(assert (=> d!10615 d!10717))

(declare-fun d!11087 () Bool)

(assert (=> d!11087 (= (get!1068 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57738 d!11087))

(declare-fun d!11089 () Bool)

(declare-fun e!38437 () Bool)

(assert (=> d!11089 e!38437))

(declare-fun res!32561 () Bool)

(assert (=> d!11089 (=> (not res!32561) (not e!38437))))

(declare-fun lt!23461 () ListLongMap!1339)

(assert (=> d!11089 (= res!32561 (contains!675 lt!23461 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun lt!23459 () List!1419)

(assert (=> d!11089 (= lt!23461 (ListLongMap!1340 lt!23459))))

(declare-fun lt!23460 () Unit!1484)

(declare-fun lt!23458 () Unit!1484)

(assert (=> d!11089 (= lt!23460 lt!23458)))

(assert (=> d!11089 (= (getValueByKey!124 lt!23459 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!11089 (= lt!23458 (lemmaContainsTupThenGetReturnValue!41 lt!23459 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!11089 (= lt!23459 (insertStrictlySorted!44 (toList!685 call!4154) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (=> d!11089 (= (+!79 call!4154 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))) lt!23461)))

(declare-fun b!58416 () Bool)

(declare-fun res!32562 () Bool)

(assert (=> b!58416 (=> (not res!32562) (not e!38437))))

(assert (=> b!58416 (= res!32562 (= (getValueByKey!124 (toList!685 lt!23461) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(declare-fun b!58417 () Bool)

(assert (=> b!58417 (= e!38437 (contains!677 (toList!685 lt!23461) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(assert (= (and d!11089 res!32561) b!58416))

(assert (= (and b!58416 res!32562) b!58417))

(declare-fun m!50059 () Bool)

(assert (=> d!11089 m!50059))

(declare-fun m!50061 () Bool)

(assert (=> d!11089 m!50061))

(declare-fun m!50063 () Bool)

(assert (=> d!11089 m!50063))

(declare-fun m!50065 () Bool)

(assert (=> d!11089 m!50065))

(declare-fun m!50067 () Bool)

(assert (=> b!58416 m!50067))

(declare-fun m!50069 () Bool)

(assert (=> b!58417 m!50069))

(assert (=> b!57472 d!11089))

(declare-fun b!58421 () Bool)

(declare-fun e!38439 () Option!130)

(assert (=> b!58421 (= e!38439 None!128)))

(declare-fun b!58418 () Bool)

(declare-fun e!38438 () Option!130)

(assert (=> b!58418 (= e!38438 (Some!129 (_2!1015 (h!1995 (toList!685 lt!23043)))))))

(declare-fun b!58420 () Bool)

(assert (=> b!58420 (= e!38439 (getValueByKey!124 (t!4733 (toList!685 lt!23043)) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58419 () Bool)

(assert (=> b!58419 (= e!38438 e!38439)))

(declare-fun c!7371 () Bool)

(assert (=> b!58419 (= c!7371 (and ((_ is Cons!1415) (toList!685 lt!23043)) (not (= (_1!1015 (h!1995 (toList!685 lt!23043))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11091 () Bool)

(declare-fun c!7370 () Bool)

(assert (=> d!11091 (= c!7370 (and ((_ is Cons!1415) (toList!685 lt!23043)) (= (_1!1015 (h!1995 (toList!685 lt!23043))) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11091 (= (getValueByKey!124 (toList!685 lt!23043) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38438)))

(assert (= (and d!11091 c!7370) b!58418))

(assert (= (and d!11091 (not c!7370)) b!58419))

(assert (= (and b!58419 c!7371) b!58420))

(assert (= (and b!58419 (not c!7371)) b!58421))

(declare-fun m!50071 () Bool)

(assert (=> b!58420 m!50071))

(assert (=> b!57739 d!11091))

(declare-fun d!11093 () Bool)

(assert (=> d!11093 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23462 () Unit!1484)

(assert (=> d!11093 (= lt!23462 (choose!295 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38440 () Bool)

(assert (=> d!11093 e!38440))

(declare-fun res!32563 () Bool)

(assert (=> d!11093 (=> (not res!32563) (not e!38440))))

(assert (=> d!11093 (= res!32563 (isStrictlySorted!270 (toList!685 lt!22730)))))

(assert (=> d!11093 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000) lt!23462)))

(declare-fun b!58422 () Bool)

(assert (=> b!58422 (= e!38440 (containsKey!127 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11093 res!32563) b!58422))

(assert (=> d!11093 m!48153))

(assert (=> d!11093 m!48153))

(assert (=> d!11093 m!48175))

(declare-fun m!50073 () Bool)

(assert (=> d!11093 m!50073))

(assert (=> d!11093 m!48857))

(assert (=> b!58422 m!48171))

(assert (=> b!57440 d!11093))

(declare-fun d!11095 () Bool)

(assert (=> d!11095 (= (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!296 (getValueByKey!124 (toList!685 lt!22730) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2541 () Bool)

(assert (= bs!2541 d!11095))

(assert (=> bs!2541 m!48153))

(declare-fun m!50075 () Bool)

(assert (=> bs!2541 m!50075))

(assert (=> b!57440 d!11095))

(assert (=> b!57440 d!10953))

(declare-fun d!11097 () Bool)

(assert (=> d!11097 (= (apply!65 lt!22906 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!685 lt!22906) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2542 () Bool)

(assert (= bs!2542 d!11097))

(assert (=> bs!2542 m!48177))

(declare-fun m!50077 () Bool)

(assert (=> bs!2542 m!50077))

(assert (=> bs!2542 m!50077))

(declare-fun m!50079 () Bool)

(assert (=> bs!2542 m!50079))

(assert (=> b!57561 d!11097))

(declare-fun d!11099 () Bool)

(declare-fun c!7372 () Bool)

(assert (=> d!11099 (= c!7372 ((_ is ValueCellFull!851) (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38441 () V!2833)

(assert (=> d!11099 (= (get!1066 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38441)))

(declare-fun b!58423 () Bool)

(assert (=> b!58423 (= e!38441 (get!1067 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58424 () Bool)

(assert (=> b!58424 (= e!38441 (get!1068 (select (arr!1767 (_values!2004 newMap!16)) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11099 c!7372) b!58423))

(assert (= (and d!11099 (not c!7372)) b!58424))

(assert (=> b!58423 m!48341))

(assert (=> b!58423 m!48203))

(declare-fun m!50081 () Bool)

(assert (=> b!58423 m!50081))

(assert (=> b!58424 m!48341))

(assert (=> b!58424 m!48203))

(declare-fun m!50083 () Bool)

(assert (=> b!58424 m!50083))

(assert (=> b!57561 d!11099))

(declare-fun d!11101 () Bool)

(declare-fun e!38443 () Bool)

(assert (=> d!11101 e!38443))

(declare-fun res!32564 () Bool)

(assert (=> d!11101 (=> res!32564 e!38443)))

(declare-fun lt!23464 () Bool)

(assert (=> d!11101 (= res!32564 (not lt!23464))))

(declare-fun lt!23465 () Bool)

(assert (=> d!11101 (= lt!23464 lt!23465)))

(declare-fun lt!23466 () Unit!1484)

(declare-fun e!38442 () Unit!1484)

(assert (=> d!11101 (= lt!23466 e!38442)))

(declare-fun c!7373 () Bool)

(assert (=> d!11101 (= c!7373 lt!23465)))

(assert (=> d!11101 (= lt!23465 (containsKey!127 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> d!11101 (= (contains!675 lt!23002 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23464)))

(declare-fun b!58425 () Bool)

(declare-fun lt!23463 () Unit!1484)

(assert (=> b!58425 (= e!38442 lt!23463)))

(assert (=> b!58425 (= lt!23463 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(assert (=> b!58425 (isDefined!76 (getValueByKey!124 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58426 () Bool)

(declare-fun Unit!1535 () Unit!1484)

(assert (=> b!58426 (= e!38442 Unit!1535)))

(declare-fun b!58427 () Bool)

(assert (=> b!58427 (= e!38443 (isDefined!76 (getValueByKey!124 (toList!685 lt!23002) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11101 c!7373) b!58425))

(assert (= (and d!11101 (not c!7373)) b!58426))

(assert (= (and d!11101 (not res!32564)) b!58427))

(declare-fun m!50085 () Bool)

(assert (=> d!11101 m!50085))

(declare-fun m!50087 () Bool)

(assert (=> b!58425 m!50087))

(assert (=> b!58425 m!48567))

(assert (=> b!58425 m!48567))

(declare-fun m!50089 () Bool)

(assert (=> b!58425 m!50089))

(assert (=> b!58427 m!48567))

(assert (=> b!58427 m!48567))

(assert (=> b!58427 m!50089))

(assert (=> d!10627 d!11101))

(declare-fun b!58431 () Bool)

(declare-fun e!38445 () Option!130)

(assert (=> b!58431 (= e!38445 None!128)))

(declare-fun b!58428 () Bool)

(declare-fun e!38444 () Option!130)

(assert (=> b!58428 (= e!38444 (Some!129 (_2!1015 (h!1995 lt!23000))))))

(declare-fun b!58430 () Bool)

(assert (=> b!58430 (= e!38445 (getValueByKey!124 (t!4733 lt!23000) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58429 () Bool)

(assert (=> b!58429 (= e!38444 e!38445)))

(declare-fun c!7375 () Bool)

(assert (=> b!58429 (= c!7375 (and ((_ is Cons!1415) lt!23000) (not (= (_1!1015 (h!1995 lt!23000)) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun d!11103 () Bool)

(declare-fun c!7374 () Bool)

(assert (=> d!11103 (= c!7374 (and ((_ is Cons!1415) lt!23000) (= (_1!1015 (h!1995 lt!23000)) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11103 (= (getValueByKey!124 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) e!38444)))

(assert (= (and d!11103 c!7374) b!58428))

(assert (= (and d!11103 (not c!7374)) b!58429))

(assert (= (and b!58429 c!7375) b!58430))

(assert (= (and b!58429 (not c!7375)) b!58431))

(declare-fun m!50091 () Bool)

(assert (=> b!58430 m!50091))

(assert (=> d!10627 d!11103))

(declare-fun d!11105 () Bool)

(assert (=> d!11105 (= (getValueByKey!124 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) (Some!129 (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun lt!23467 () Unit!1484)

(assert (=> d!11105 (= lt!23467 (choose!304 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun e!38446 () Bool)

(assert (=> d!11105 e!38446))

(declare-fun res!32565 () Bool)

(assert (=> d!11105 (=> (not res!32565) (not e!38446))))

(assert (=> d!11105 (= res!32565 (isStrictlySorted!270 lt!23000))))

(assert (=> d!11105 (= (lemmaContainsTupThenGetReturnValue!41 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23467)))

(declare-fun b!58432 () Bool)

(declare-fun res!32566 () Bool)

(assert (=> b!58432 (=> (not res!32566) (not e!38446))))

(assert (=> b!58432 (= res!32566 (containsKey!127 lt!23000 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58433 () Bool)

(assert (=> b!58433 (= e!38446 (contains!677 lt!23000 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11105 res!32565) b!58432))

(assert (= (and b!58432 res!32566) b!58433))

(assert (=> d!11105 m!48561))

(declare-fun m!50093 () Bool)

(assert (=> d!11105 m!50093))

(declare-fun m!50095 () Bool)

(assert (=> d!11105 m!50095))

(declare-fun m!50097 () Bool)

(assert (=> b!58432 m!50097))

(declare-fun m!50099 () Bool)

(assert (=> b!58433 m!50099))

(assert (=> d!10627 d!11105))

(declare-fun d!11107 () Bool)

(declare-fun e!38450 () Bool)

(assert (=> d!11107 e!38450))

(declare-fun res!32567 () Bool)

(assert (=> d!11107 (=> (not res!32567) (not e!38450))))

(declare-fun lt!23468 () List!1419)

(assert (=> d!11107 (= res!32567 (isStrictlySorted!270 lt!23468))))

(declare-fun e!38448 () List!1419)

(assert (=> d!11107 (= lt!23468 e!38448)))

(declare-fun c!7378 () Bool)

(assert (=> d!11107 (= c!7378 (and ((_ is Cons!1415) (toList!685 lt!22729)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22729))) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11107 (isStrictlySorted!270 (toList!685 lt!22729))))

(assert (=> d!11107 (= (insertStrictlySorted!44 (toList!685 lt!22729) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!23468)))

(declare-fun bm!4280 () Bool)

(declare-fun call!4283 () List!1419)

(declare-fun call!4284 () List!1419)

(assert (=> bm!4280 (= call!4283 call!4284)))

(declare-fun call!4285 () List!1419)

(declare-fun bm!4281 () Bool)

(declare-fun e!38447 () List!1419)

(assert (=> bm!4281 (= call!4285 ($colon$colon!58 e!38447 (ite c!7378 (h!1995 (toList!685 lt!22729)) (tuple2!2009 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))))

(declare-fun c!7377 () Bool)

(assert (=> bm!4281 (= c!7377 c!7378)))

(declare-fun b!58434 () Bool)

(declare-fun e!38449 () List!1419)

(assert (=> b!58434 (= e!38449 call!4284)))

(declare-fun b!58435 () Bool)

(assert (=> b!58435 (= e!38448 e!38449)))

(declare-fun c!7376 () Bool)

(assert (=> b!58435 (= c!7376 (and ((_ is Cons!1415) (toList!685 lt!22729)) (= (_1!1015 (h!1995 (toList!685 lt!22729))) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(declare-fun b!58436 () Bool)

(assert (=> b!58436 (= e!38447 (insertStrictlySorted!44 (t!4733 (toList!685 lt!22729)) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun b!58437 () Bool)

(declare-fun e!38451 () List!1419)

(assert (=> b!58437 (= e!38451 call!4283)))

(declare-fun b!58438 () Bool)

(declare-fun res!32568 () Bool)

(assert (=> b!58438 (=> (not res!32568) (not e!38450))))

(assert (=> b!58438 (= res!32568 (containsKey!127 lt!23468 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))))

(declare-fun bm!4282 () Bool)

(assert (=> bm!4282 (= call!4284 call!4285)))

(declare-fun c!7379 () Bool)

(declare-fun b!58439 () Bool)

(assert (=> b!58439 (= e!38447 (ite c!7376 (t!4733 (toList!685 lt!22729)) (ite c!7379 (Cons!1415 (h!1995 (toList!685 lt!22729)) (t!4733 (toList!685 lt!22729))) Nil!1416)))))

(declare-fun b!58440 () Bool)

(assert (=> b!58440 (= c!7379 (and ((_ is Cons!1415) (toList!685 lt!22729)) (bvsgt (_1!1015 (h!1995 (toList!685 lt!22729))) (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> b!58440 (= e!38449 e!38451)))

(declare-fun b!58441 () Bool)

(assert (=> b!58441 (= e!38451 call!4283)))

(declare-fun b!58442 () Bool)

(assert (=> b!58442 (= e!38448 call!4285)))

(declare-fun b!58443 () Bool)

(assert (=> b!58443 (= e!38450 (contains!677 lt!23468 (tuple2!2009 (_1!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) (_2!1015 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (= (and d!11107 c!7378) b!58442))

(assert (= (and d!11107 (not c!7378)) b!58435))

(assert (= (and b!58435 c!7376) b!58434))

(assert (= (and b!58435 (not c!7376)) b!58440))

(assert (= (and b!58440 c!7379) b!58437))

(assert (= (and b!58440 (not c!7379)) b!58441))

(assert (= (or b!58437 b!58441) bm!4280))

(assert (= (or b!58434 bm!4280) bm!4282))

(assert (= (or b!58442 bm!4282) bm!4281))

(assert (= (and bm!4281 c!7377) b!58436))

(assert (= (and bm!4281 (not c!7377)) b!58439))

(assert (= (and d!11107 res!32567) b!58438))

(assert (= (and b!58438 res!32568) b!58443))

(declare-fun m!50101 () Bool)

(assert (=> b!58436 m!50101))

(declare-fun m!50103 () Bool)

(assert (=> bm!4281 m!50103))

(declare-fun m!50105 () Bool)

(assert (=> b!58438 m!50105))

(declare-fun m!50107 () Bool)

(assert (=> d!11107 m!50107))

(declare-fun m!50109 () Bool)

(assert (=> d!11107 m!50109))

(declare-fun m!50111 () Bool)

(assert (=> b!58443 m!50111))

(assert (=> d!10627 d!11107))

(declare-fun d!11109 () Bool)

(assert (=> d!11109 (= (apply!65 lt!22787 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22787) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2543 () Bool)

(assert (= bs!2543 d!11109))

(assert (=> bs!2543 m!49097))

(assert (=> bs!2543 m!49097))

(declare-fun m!50113 () Bool)

(assert (=> bs!2543 m!50113))

(assert (=> b!57476 d!11109))

(declare-fun b!58445 () Bool)

(declare-fun res!32571 () Bool)

(declare-fun e!38452 () Bool)

(assert (=> b!58445 (=> (not res!32571) (not e!38452))))

(assert (=> b!58445 (= res!32571 (bvsge (size!2001 (v!2366 (underlying!222 thiss!992))) (_size!354 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!58444 () Bool)

(declare-fun res!32572 () Bool)

(assert (=> b!58444 (=> (not res!32572) (not e!38452))))

(assert (=> b!58444 (= res!32572 (and (= (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992)))) (bvadd (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001)) (= (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (size!1996 (_values!2004 (v!2366 (underlying!222 thiss!992))))) (bvsge (_size!354 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!354 (v!2366 (underlying!222 thiss!992))) (bvadd (mask!5895 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun d!11111 () Bool)

(declare-fun res!32570 () Bool)

(assert (=> d!11111 (=> (not res!32570) (not e!38452))))

(assert (=> d!11111 (= res!32570 (validMask!0 (mask!5895 (v!2366 (underlying!222 thiss!992)))))))

(assert (=> d!11111 (= (simpleValid!41 (v!2366 (underlying!222 thiss!992))) e!38452)))

(declare-fun b!58446 () Bool)

(declare-fun res!32569 () Bool)

(assert (=> b!58446 (=> (not res!32569) (not e!38452))))

(assert (=> b!58446 (= res!32569 (= (size!2001 (v!2366 (underlying!222 thiss!992))) (bvadd (_size!354 (v!2366 (underlying!222 thiss!992))) (bvsdiv (bvadd (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!58447 () Bool)

(assert (=> b!58447 (= e!38452 (and (bvsge (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1912 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!354 (v!2366 (underlying!222 thiss!992))) #b00000000000000000000000000000000)))))

(assert (= (and d!11111 res!32570) b!58444))

(assert (= (and b!58444 res!32572) b!58445))

(assert (= (and b!58445 res!32571) b!58446))

(assert (= (and b!58446 res!32569) b!58447))

(declare-fun m!50115 () Bool)

(assert (=> b!58445 m!50115))

(assert (=> d!11111 m!47907))

(assert (=> b!58446 m!50115))

(assert (=> d!10583 d!11111))

(assert (=> b!57657 d!10561))

(declare-fun d!11113 () Bool)

(declare-fun e!38454 () Bool)

(assert (=> d!11113 e!38454))

(declare-fun res!32573 () Bool)

(assert (=> d!11113 (=> res!32573 e!38454)))

(declare-fun lt!23470 () Bool)

(assert (=> d!11113 (= res!32573 (not lt!23470))))

(declare-fun lt!23471 () Bool)

(assert (=> d!11113 (= lt!23470 lt!23471)))

(declare-fun lt!23472 () Unit!1484)

(declare-fun e!38453 () Unit!1484)

(assert (=> d!11113 (= lt!23472 e!38453)))

(declare-fun c!7380 () Bool)

(assert (=> d!11113 (= c!7380 lt!23471)))

(assert (=> d!11113 (= lt!23471 (containsKey!127 (toList!685 lt!22928) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11113 (= (contains!675 lt!22928 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) lt!23470)))

(declare-fun b!58448 () Bool)

(declare-fun lt!23469 () Unit!1484)

(assert (=> b!58448 (= e!38453 lt!23469)))

(assert (=> b!58448 (= lt!23469 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22928) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58448 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58449 () Bool)

(declare-fun Unit!1536 () Unit!1484)

(assert (=> b!58449 (= e!38453 Unit!1536)))

(declare-fun b!58450 () Bool)

(assert (=> b!58450 (= e!38454 (isDefined!76 (getValueByKey!124 (toList!685 lt!22928) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11113 c!7380) b!58448))

(assert (= (and d!11113 (not c!7380)) b!58449))

(assert (= (and d!11113 (not res!32573)) b!58450))

(assert (=> d!11113 m!48177))

(declare-fun m!50117 () Bool)

(assert (=> d!11113 m!50117))

(assert (=> b!58448 m!48177))

(declare-fun m!50119 () Bool)

(assert (=> b!58448 m!50119))

(assert (=> b!58448 m!48177))

(assert (=> b!58448 m!49103))

(assert (=> b!58448 m!49103))

(declare-fun m!50121 () Bool)

(assert (=> b!58448 m!50121))

(assert (=> b!58450 m!48177))

(assert (=> b!58450 m!49103))

(assert (=> b!58450 m!49103))

(assert (=> b!58450 m!50121))

(assert (=> b!57583 d!11113))

(declare-fun d!11115 () Bool)

(assert (=> d!11115 (= (isEmpty!296 (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) (not ((_ is Some!129) (getValueByKey!124 (toList!685 lt!22525) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(assert (=> d!10577 d!11115))

(declare-fun d!11117 () Bool)

(declare-fun e!38455 () Bool)

(assert (=> d!11117 e!38455))

(declare-fun res!32574 () Bool)

(assert (=> d!11117 (=> (not res!32574) (not e!38455))))

(declare-fun lt!23476 () ListLongMap!1339)

(assert (=> d!11117 (= res!32574 (contains!675 lt!23476 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(declare-fun lt!23474 () List!1419)

(assert (=> d!11117 (= lt!23476 (ListLongMap!1340 lt!23474))))

(declare-fun lt!23475 () Unit!1484)

(declare-fun lt!23473 () Unit!1484)

(assert (=> d!11117 (= lt!23475 lt!23473)))

(assert (=> d!11117 (= (getValueByKey!124 lt!23474 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11117 (= lt!23473 (lemmaContainsTupThenGetReturnValue!41 lt!23474 (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11117 (= lt!23474 (insertStrictlySorted!44 (toList!685 call!4180) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))))))

(assert (=> d!11117 (= (+!79 call!4180 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))) lt!23476)))

(declare-fun b!58451 () Bool)

(declare-fun res!32575 () Bool)

(assert (=> b!58451 (=> (not res!32575) (not e!38455))))

(assert (=> b!58451 (= res!32575 (= (getValueByKey!124 (toList!685 lt!23476) (_1!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))))

(declare-fun b!58452 () Bool)

(assert (=> b!58452 (= e!38455 (contains!677 (toList!685 lt!23476) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7058 (ite c!7060 (minValue!1939 newMap!16) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1939 newMap!16)))))))

(assert (= (and d!11117 res!32574) b!58451))

(assert (= (and b!58451 res!32575) b!58452))

(declare-fun m!50123 () Bool)

(assert (=> d!11117 m!50123))

(declare-fun m!50125 () Bool)

(assert (=> d!11117 m!50125))

(declare-fun m!50127 () Bool)

(assert (=> d!11117 m!50127))

(declare-fun m!50129 () Bool)

(assert (=> d!11117 m!50129))

(declare-fun m!50131 () Bool)

(assert (=> b!58451 m!50131))

(declare-fun m!50133 () Bool)

(assert (=> b!58452 m!50133))

(assert (=> b!57588 d!11117))

(assert (=> b!57672 d!10715))

(declare-fun d!11119 () Bool)

(assert (=> d!11119 (= (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22721)) (v!2372 (getValueByKey!124 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22721)))))

(assert (=> d!10629 d!11119))

(declare-fun b!58456 () Bool)

(declare-fun e!38457 () Option!130)

(assert (=> b!58456 (= e!38457 None!128)))

(declare-fun e!38456 () Option!130)

(declare-fun b!58453 () Bool)

(assert (=> b!58453 (= e!38456 (Some!129 (_2!1015 (h!1995 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun b!58455 () Bool)

(assert (=> b!58455 (= e!38457 (getValueByKey!124 (t!4733 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!22721))))

(declare-fun b!58454 () Bool)

(assert (=> b!58454 (= e!38456 e!38457)))

(declare-fun c!7382 () Bool)

(assert (=> b!58454 (= c!7382 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (not (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22721))))))

(declare-fun c!7381 () Bool)

(declare-fun d!11121 () Bool)

(assert (=> d!11121 (= c!7381 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22721)))))

(assert (=> d!11121 (= (getValueByKey!124 (toList!685 (+!79 lt!22711 (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22721) e!38456)))

(assert (= (and d!11121 c!7381) b!58453))

(assert (= (and d!11121 (not c!7381)) b!58454))

(assert (= (and b!58454 c!7382) b!58455))

(assert (= (and b!58454 (not c!7382)) b!58456))

(declare-fun m!50135 () Bool)

(assert (=> b!58455 m!50135))

(assert (=> d!10629 d!11121))

(declare-fun d!11123 () Bool)

(declare-fun e!38459 () Bool)

(assert (=> d!11123 e!38459))

(declare-fun res!32576 () Bool)

(assert (=> d!11123 (=> res!32576 e!38459)))

(declare-fun lt!23478 () Bool)

(assert (=> d!11123 (= res!32576 (not lt!23478))))

(declare-fun lt!23479 () Bool)

(assert (=> d!11123 (= lt!23478 lt!23479)))

(declare-fun lt!23480 () Unit!1484)

(declare-fun e!38458 () Unit!1484)

(assert (=> d!11123 (= lt!23480 e!38458)))

(declare-fun c!7383 () Bool)

(assert (=> d!11123 (= c!7383 lt!23479)))

(assert (=> d!11123 (= lt!23479 (containsKey!127 (toList!685 lt!22977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11123 (= (contains!675 lt!22977 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23478)))

(declare-fun b!58457 () Bool)

(declare-fun lt!23477 () Unit!1484)

(assert (=> b!58457 (= e!38458 lt!23477)))

(assert (=> b!58457 (= lt!23477 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58457 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58458 () Bool)

(declare-fun Unit!1537 () Unit!1484)

(assert (=> b!58458 (= e!38458 Unit!1537)))

(declare-fun b!58459 () Bool)

(assert (=> b!58459 (= e!38459 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11123 c!7383) b!58457))

(assert (= (and d!11123 (not c!7383)) b!58458))

(assert (= (and d!11123 (not res!32576)) b!58459))

(declare-fun m!50137 () Bool)

(assert (=> d!11123 m!50137))

(declare-fun m!50139 () Bool)

(assert (=> b!58457 m!50139))

(declare-fun m!50141 () Bool)

(assert (=> b!58457 m!50141))

(assert (=> b!58457 m!50141))

(declare-fun m!50143 () Bool)

(assert (=> b!58457 m!50143))

(assert (=> b!58459 m!50141))

(assert (=> b!58459 m!50141))

(assert (=> b!58459 m!50143))

(assert (=> b!57659 d!11123))

(assert (=> b!57521 d!11065))

(declare-fun d!11125 () Bool)

(declare-fun e!38460 () Bool)

(assert (=> d!11125 e!38460))

(declare-fun res!32577 () Bool)

(assert (=> d!11125 (=> (not res!32577) (not e!38460))))

(declare-fun lt!23484 () ListLongMap!1339)

(assert (=> d!11125 (= res!32577 (contains!675 lt!23484 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23482 () List!1419)

(assert (=> d!11125 (= lt!23484 (ListLongMap!1340 lt!23482))))

(declare-fun lt!23483 () Unit!1484)

(declare-fun lt!23481 () Unit!1484)

(assert (=> d!11125 (= lt!23483 lt!23481)))

(assert (=> d!11125 (= (getValueByKey!124 lt!23482 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11125 (= lt!23481 (lemmaContainsTupThenGetReturnValue!41 lt!23482 (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11125 (= lt!23482 (insertStrictlySorted!44 (toList!685 (map!1104 newMap!16)) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11125 (= (+!79 (map!1104 newMap!16) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23484)))

(declare-fun b!58460 () Bool)

(declare-fun res!32578 () Bool)

(assert (=> b!58460 (=> (not res!32578) (not e!38460))))

(assert (=> b!58460 (= res!32578 (= (getValueByKey!124 (toList!685 lt!23484) (_1!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1015 (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58461 () Bool)

(assert (=> b!58461 (= e!38460 (contains!677 (toList!685 lt!23484) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11125 res!32577) b!58460))

(assert (= (and b!58460 res!32578) b!58461))

(declare-fun m!50145 () Bool)

(assert (=> d!11125 m!50145))

(declare-fun m!50147 () Bool)

(assert (=> d!11125 m!50147))

(declare-fun m!50149 () Bool)

(assert (=> d!11125 m!50149))

(declare-fun m!50151 () Bool)

(assert (=> d!11125 m!50151))

(declare-fun m!50153 () Bool)

(assert (=> b!58460 m!50153))

(declare-fun m!50155 () Bool)

(assert (=> b!58461 m!50155))

(assert (=> b!57521 d!11125))

(assert (=> b!57521 d!10521))

(assert (=> b!57442 d!11095))

(assert (=> b!57442 d!10953))

(declare-fun d!11127 () Bool)

(declare-fun e!38462 () Bool)

(assert (=> d!11127 e!38462))

(declare-fun res!32579 () Bool)

(assert (=> d!11127 (=> res!32579 e!38462)))

(declare-fun lt!23486 () Bool)

(assert (=> d!11127 (= res!32579 (not lt!23486))))

(declare-fun lt!23487 () Bool)

(assert (=> d!11127 (= lt!23486 lt!23487)))

(declare-fun lt!23488 () Unit!1484)

(declare-fun e!38461 () Unit!1484)

(assert (=> d!11127 (= lt!23488 e!38461)))

(declare-fun c!7384 () Bool)

(assert (=> d!11127 (= c!7384 lt!23487)))

(assert (=> d!11127 (= lt!23487 (containsKey!127 (toList!685 lt!22906) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11127 (= (contains!675 lt!22906 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) lt!23486)))

(declare-fun b!58462 () Bool)

(declare-fun lt!23485 () Unit!1484)

(assert (=> b!58462 (= e!38461 lt!23485)))

(assert (=> b!58462 (= lt!23485 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22906) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58462 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58463 () Bool)

(declare-fun Unit!1538 () Unit!1484)

(assert (=> b!58463 (= e!38461 Unit!1538)))

(declare-fun b!58464 () Bool)

(assert (=> b!58464 (= e!38462 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11127 c!7384) b!58462))

(assert (= (and d!11127 (not c!7384)) b!58463))

(assert (= (and d!11127 (not res!32579)) b!58464))

(assert (=> d!11127 m!48177))

(declare-fun m!50157 () Bool)

(assert (=> d!11127 m!50157))

(assert (=> b!58462 m!48177))

(declare-fun m!50159 () Bool)

(assert (=> b!58462 m!50159))

(assert (=> b!58462 m!48177))

(assert (=> b!58462 m!50077))

(assert (=> b!58462 m!50077))

(declare-fun m!50161 () Bool)

(assert (=> b!58462 m!50161))

(assert (=> b!58464 m!48177))

(assert (=> b!58464 m!50077))

(assert (=> b!58464 m!50077))

(assert (=> b!58464 m!50161))

(assert (=> b!57562 d!11127))

(declare-fun d!11129 () Bool)

(declare-fun e!38464 () Bool)

(assert (=> d!11129 e!38464))

(declare-fun res!32580 () Bool)

(assert (=> d!11129 (=> res!32580 e!38464)))

(declare-fun lt!23490 () Bool)

(assert (=> d!11129 (= res!32580 (not lt!23490))))

(declare-fun lt!23491 () Bool)

(assert (=> d!11129 (= lt!23490 lt!23491)))

(declare-fun lt!23492 () Unit!1484)

(declare-fun e!38463 () Unit!1484)

(assert (=> d!11129 (= lt!23492 e!38463)))

(declare-fun c!7385 () Bool)

(assert (=> d!11129 (= c!7385 lt!23491)))

(assert (=> d!11129 (= lt!23491 (containsKey!127 (toList!685 lt!22787) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11129 (= (contains!675 lt!22787 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23490)))

(declare-fun b!58465 () Bool)

(declare-fun lt!23489 () Unit!1484)

(assert (=> b!58465 (= e!38463 lt!23489)))

(assert (=> b!58465 (= lt!23489 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22787) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58465 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58466 () Bool)

(declare-fun Unit!1539 () Unit!1484)

(assert (=> b!58466 (= e!38463 Unit!1539)))

(declare-fun b!58467 () Bool)

(assert (=> b!58467 (= e!38464 (isDefined!76 (getValueByKey!124 (toList!685 lt!22787) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11129 c!7385) b!58465))

(assert (= (and d!11129 (not c!7385)) b!58466))

(assert (= (and d!11129 (not res!32580)) b!58467))

(declare-fun m!50163 () Bool)

(assert (=> d!11129 m!50163))

(declare-fun m!50165 () Bool)

(assert (=> b!58465 m!50165))

(declare-fun m!50167 () Bool)

(assert (=> b!58465 m!50167))

(assert (=> b!58465 m!50167))

(declare-fun m!50169 () Bool)

(assert (=> b!58465 m!50169))

(assert (=> b!58467 m!50167))

(assert (=> b!58467 m!50167))

(assert (=> b!58467 m!50169))

(assert (=> bm!4152 d!11129))

(declare-fun d!11131 () Bool)

(assert (=> d!11131 (isDefined!76 (getValueByKey!124 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(declare-fun lt!23493 () Unit!1484)

(assert (=> d!11131 (= lt!23493 (choose!295 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(declare-fun e!38465 () Bool)

(assert (=> d!11131 e!38465))

(declare-fun res!32581 () Bool)

(assert (=> d!11131 (=> (not res!32581) (not e!38465))))

(assert (=> d!11131 (= res!32581 (isStrictlySorted!270 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))))

(assert (=> d!11131 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724) lt!23493)))

(declare-fun b!58468 () Bool)

(assert (=> b!58468 (= e!38465 (containsKey!127 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724))))

(assert (= (and d!11131 res!32581) b!58468))

(assert (=> d!11131 m!48627))

(assert (=> d!11131 m!48627))

(assert (=> d!11131 m!48629))

(declare-fun m!50171 () Bool)

(assert (=> d!11131 m!50171))

(declare-fun m!50173 () Bool)

(assert (=> d!11131 m!50173))

(assert (=> b!58468 m!48623))

(assert (=> b!57692 d!11131))

(assert (=> b!57692 d!10859))

(assert (=> b!57692 d!10861))

(declare-fun b!58469 () Bool)

(declare-fun e!38467 () Bool)

(declare-fun e!38468 () Bool)

(assert (=> b!58469 (= e!38467 e!38468)))

(declare-fun lt!23494 () (_ BitVec 64))

(assert (=> b!58469 (= lt!23494 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!23496 () Unit!1484)

(assert (=> b!58469 (= lt!23496 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) lt!23494 #b00000000000000000000000000000000))))

(assert (=> b!58469 (arrayContainsKey!0 (_keys!3641 (v!2366 (underlying!222 thiss!992))) lt!23494 #b00000000000000000000000000000000)))

(declare-fun lt!23495 () Unit!1484)

(assert (=> b!58469 (= lt!23495 lt!23496)))

(declare-fun res!32582 () Bool)

(assert (=> b!58469 (= res!32582 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000) (_keys!3641 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992)))) (Found!220 #b00000000000000000000000000000000)))))

(assert (=> b!58469 (=> (not res!32582) (not e!38468))))

(declare-fun d!11133 () Bool)

(declare-fun res!32583 () Bool)

(declare-fun e!38466 () Bool)

(assert (=> d!11133 (=> res!32583 e!38466)))

(assert (=> d!11133 (= res!32583 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (v!2366 (underlying!222 thiss!992))))))))

(assert (=> d!11133 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3641 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992)))) e!38466)))

(declare-fun b!58470 () Bool)

(declare-fun call!4286 () Bool)

(assert (=> b!58470 (= e!38468 call!4286)))

(declare-fun bm!4283 () Bool)

(assert (=> bm!4283 (= call!4286 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3641 (v!2366 (underlying!222 thiss!992))) (mask!5895 (v!2366 (underlying!222 thiss!992)))))))

(declare-fun b!58471 () Bool)

(assert (=> b!58471 (= e!38466 e!38467)))

(declare-fun c!7386 () Bool)

(assert (=> b!58471 (= c!7386 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!58472 () Bool)

(assert (=> b!58472 (= e!38467 call!4286)))

(assert (= (and d!11133 (not res!32583)) b!58471))

(assert (= (and b!58471 c!7386) b!58469))

(assert (= (and b!58471 (not c!7386)) b!58472))

(assert (= (and b!58469 res!32582) b!58470))

(assert (= (or b!58470 b!58472) bm!4283))

(assert (=> b!58469 m!48739))

(declare-fun m!50175 () Bool)

(assert (=> b!58469 m!50175))

(declare-fun m!50177 () Bool)

(assert (=> b!58469 m!50177))

(assert (=> b!58469 m!48739))

(declare-fun m!50179 () Bool)

(assert (=> b!58469 m!50179))

(declare-fun m!50181 () Bool)

(assert (=> bm!4283 m!50181))

(assert (=> b!58471 m!48739))

(assert (=> b!58471 m!48739))

(assert (=> b!58471 m!48743))

(assert (=> b!57551 d!11133))

(assert (=> b!57529 d!10659))

(assert (=> b!57699 d!10989))

(declare-fun d!11135 () Bool)

(assert (=> d!11135 (isDefined!76 (getValueByKey!124 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!23497 () Unit!1484)

(assert (=> d!11135 (= lt!23497 (choose!295 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38469 () Bool)

(assert (=> d!11135 e!38469))

(declare-fun res!32584 () Bool)

(assert (=> d!11135 (=> (not res!32584) (not e!38469))))

(assert (=> d!11135 (= res!32584 (isStrictlySorted!270 (toList!685 lt!22730)))))

(assert (=> d!11135 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23497)))

(declare-fun b!58473 () Bool)

(assert (=> b!58473 (= e!38469 (containsKey!127 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11135 res!32584) b!58473))

(assert (=> d!11135 m!48069))

(assert (=> d!11135 m!48665))

(assert (=> d!11135 m!48665))

(assert (=> d!11135 m!48667))

(assert (=> d!11135 m!48069))

(declare-fun m!50183 () Bool)

(assert (=> d!11135 m!50183))

(assert (=> d!11135 m!48857))

(assert (=> b!58473 m!48069))

(assert (=> b!58473 m!48661))

(assert (=> b!57702 d!11135))

(assert (=> b!57702 d!10869))

(assert (=> b!57702 d!10857))

(declare-fun b!58492 () Bool)

(declare-fun e!38483 () Bool)

(declare-fun lt!23503 () SeekEntryResult!220)

(assert (=> b!58492 (= e!38483 (bvsge (x!9852 lt!23503) #b01111111111111111111111111111110))))

(declare-fun b!58493 () Bool)

(assert (=> b!58493 (and (bvsge (index!3004 lt!23503) #b00000000000000000000000000000000) (bvslt (index!3004 lt!23503) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32592 () Bool)

(assert (=> b!58493 (= res!32592 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!23503)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38484 () Bool)

(assert (=> b!58493 (=> res!32592 e!38484)))

(declare-fun e!38480 () Bool)

(assert (=> b!58493 (= e!38480 e!38484)))

(declare-fun b!58494 () Bool)

(assert (=> b!58494 (and (bvsge (index!3004 lt!23503) #b00000000000000000000000000000000) (bvslt (index!3004 lt!23503) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> b!58494 (= e!38484 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!23503)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58495 () Bool)

(declare-fun e!38481 () SeekEntryResult!220)

(declare-fun e!38482 () SeekEntryResult!220)

(assert (=> b!58495 (= e!38481 e!38482)))

(declare-fun lt!23502 () (_ BitVec 64))

(declare-fun c!7393 () Bool)

(assert (=> b!58495 (= c!7393 (or (= lt!23502 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) (= (bvadd lt!23502 lt!23502) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58496 () Bool)

(assert (=> b!58496 (= e!38482 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!5895 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!58497 () Bool)

(assert (=> b!58497 (= e!38483 e!38480)))

(declare-fun res!32593 () Bool)

(assert (=> b!58497 (= res!32593 (and ((_ is Intermediate!220) lt!23503) (not (undefined!1032 lt!23503)) (bvslt (x!9852 lt!23503) #b01111111111111111111111111111110) (bvsge (x!9852 lt!23503) #b00000000000000000000000000000000) (bvsge (x!9852 lt!23503) #b00000000000000000000000000000000)))))

(assert (=> b!58497 (=> (not res!32593) (not e!38480))))

(declare-fun d!11137 () Bool)

(assert (=> d!11137 e!38483))

(declare-fun c!7395 () Bool)

(assert (=> d!11137 (= c!7395 (and ((_ is Intermediate!220) lt!23503) (undefined!1032 lt!23503)))))

(assert (=> d!11137 (= lt!23503 e!38481)))

(declare-fun c!7394 () Bool)

(assert (=> d!11137 (= c!7394 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!11137 (= lt!23502 (select (arr!1766 (_keys!3641 newMap!16)) (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16))))))

(assert (=> d!11137 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!11137 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)) lt!23503)))

(declare-fun b!58498 () Bool)

(assert (=> b!58498 (= e!38482 (Intermediate!220 false (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!58499 () Bool)

(assert (=> b!58499 (and (bvsge (index!3004 lt!23503) #b00000000000000000000000000000000) (bvslt (index!3004 lt!23503) (size!1995 (_keys!3641 newMap!16))))))

(declare-fun res!32591 () Bool)

(assert (=> b!58499 (= res!32591 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3004 lt!23503)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58499 (=> res!32591 e!38484)))

(declare-fun b!58500 () Bool)

(assert (=> b!58500 (= e!38481 (Intermediate!220 true (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!11137 c!7394) b!58500))

(assert (= (and d!11137 (not c!7394)) b!58495))

(assert (= (and b!58495 c!7393) b!58498))

(assert (= (and b!58495 (not c!7393)) b!58496))

(assert (= (and d!11137 c!7395) b!58492))

(assert (= (and d!11137 (not c!7395)) b!58497))

(assert (= (and b!58497 res!32593) b!58493))

(assert (= (and b!58493 (not res!32592)) b!58499))

(assert (= (and b!58499 (not res!32591)) b!58494))

(assert (=> d!11137 m!48165))

(declare-fun m!50185 () Bool)

(assert (=> d!11137 m!50185))

(assert (=> d!11137 m!48151))

(declare-fun m!50187 () Bool)

(assert (=> b!58493 m!50187))

(assert (=> b!58496 m!48165))

(declare-fun m!50189 () Bool)

(assert (=> b!58496 m!50189))

(assert (=> b!58496 m!50189))

(assert (=> b!58496 m!47875))

(declare-fun m!50191 () Bool)

(assert (=> b!58496 m!50191))

(assert (=> b!58494 m!50187))

(assert (=> b!58499 m!50187))

(assert (=> d!10553 d!11137))

(declare-fun d!11139 () Bool)

(declare-fun lt!23509 () (_ BitVec 32))

(declare-fun lt!23508 () (_ BitVec 32))

(assert (=> d!11139 (= lt!23509 (bvmul (bvxor lt!23508 (bvlshr lt!23508 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!11139 (= lt!23508 ((_ extract 31 0) (bvand (bvxor (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvlshr (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!11139 (and (bvsge (mask!5895 newMap!16) #b00000000000000000000000000000000) (let ((res!32594 (let ((h!1998 ((_ extract 31 0) (bvand (bvxor (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (bvlshr (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!9956 (bvmul (bvxor h!1998 (bvlshr h!1998 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!9956 (bvlshr x!9956 #b00000000000000000000000000001101)) (mask!5895 newMap!16)))))) (and (bvslt res!32594 (bvadd (mask!5895 newMap!16) #b00000000000000000000000000000001)) (bvsge res!32594 #b00000000000000000000000000000000))))))

(assert (=> d!11139 (= (toIndex!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (mask!5895 newMap!16)) (bvand (bvxor lt!23509 (bvlshr lt!23509 #b00000000000000000000000000001101)) (mask!5895 newMap!16)))))

(assert (=> d!10553 d!11139))

(assert (=> d!10553 d!10717))

(declare-fun d!11141 () Bool)

(assert (=> d!11141 (= (apply!65 lt!22928 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22928) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2544 () Bool)

(assert (= bs!2544 d!11141))

(assert (=> bs!2544 m!49399))

(assert (=> bs!2544 m!49399))

(declare-fun m!50193 () Bool)

(assert (=> bs!2544 m!50193))

(assert (=> b!57592 d!11141))

(declare-fun d!11143 () Bool)

(assert (=> d!11143 (isDefined!76 (getValueByKey!124 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!23510 () Unit!1484)

(assert (=> d!11143 (= lt!23510 (choose!295 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38485 () Bool)

(assert (=> d!11143 e!38485))

(declare-fun res!32595 () Bool)

(assert (=> d!11143 (=> (not res!32595) (not e!38485))))

(assert (=> d!11143 (= res!32595 (isStrictlySorted!270 (toList!685 e!37759)))))

(assert (=> d!11143 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) lt!23510)))

(declare-fun b!58501 () Bool)

(assert (=> b!58501 (= e!38485 (containsKey!127 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!11143 res!32595) b!58501))

(assert (=> d!11143 m!47875))

(assert (=> d!11143 m!48193))

(assert (=> d!11143 m!48193))

(assert (=> d!11143 m!48195))

(assert (=> d!11143 m!47875))

(declare-fun m!50195 () Bool)

(assert (=> d!11143 m!50195))

(declare-fun m!50197 () Bool)

(assert (=> d!11143 m!50197))

(assert (=> b!58501 m!47875))

(assert (=> b!58501 m!48189))

(assert (=> b!57455 d!11143))

(assert (=> b!57455 d!10875))

(assert (=> b!57455 d!10877))

(declare-fun d!11145 () Bool)

(declare-fun e!38487 () Bool)

(assert (=> d!11145 e!38487))

(declare-fun res!32596 () Bool)

(assert (=> d!11145 (=> res!32596 e!38487)))

(declare-fun lt!23512 () Bool)

(assert (=> d!11145 (= res!32596 (not lt!23512))))

(declare-fun lt!23513 () Bool)

(assert (=> d!11145 (= lt!23512 lt!23513)))

(declare-fun lt!23514 () Unit!1484)

(declare-fun e!38486 () Unit!1484)

(assert (=> d!11145 (= lt!23514 e!38486)))

(declare-fun c!7396 () Bool)

(assert (=> d!11145 (= c!7396 lt!23513)))

(assert (=> d!11145 (= lt!23513 (containsKey!127 (toList!685 lt!22906) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11145 (= (contains!675 lt!22906 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23512)))

(declare-fun b!58502 () Bool)

(declare-fun lt!23511 () Unit!1484)

(assert (=> b!58502 (= e!38486 lt!23511)))

(assert (=> b!58502 (= lt!23511 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22906) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58502 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58503 () Bool)

(declare-fun Unit!1540 () Unit!1484)

(assert (=> b!58503 (= e!38486 Unit!1540)))

(declare-fun b!58504 () Bool)

(assert (=> b!58504 (= e!38487 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11145 c!7396) b!58502))

(assert (= (and d!11145 (not c!7396)) b!58503))

(assert (= (and d!11145 (not res!32596)) b!58504))

(declare-fun m!50199 () Bool)

(assert (=> d!11145 m!50199))

(declare-fun m!50201 () Bool)

(assert (=> b!58502 m!50201))

(assert (=> b!58502 m!49489))

(assert (=> b!58502 m!49489))

(declare-fun m!50203 () Bool)

(assert (=> b!58502 m!50203))

(assert (=> b!58504 m!49489))

(assert (=> b!58504 m!49489))

(assert (=> b!58504 m!50203))

(assert (=> bm!4170 d!11145))

(declare-fun d!11147 () Bool)

(declare-fun e!38489 () Bool)

(assert (=> d!11147 e!38489))

(declare-fun res!32597 () Bool)

(assert (=> d!11147 (=> res!32597 e!38489)))

(declare-fun lt!23516 () Bool)

(assert (=> d!11147 (= res!32597 (not lt!23516))))

(declare-fun lt!23517 () Bool)

(assert (=> d!11147 (= lt!23516 lt!23517)))

(declare-fun lt!23518 () Unit!1484)

(declare-fun e!38488 () Unit!1484)

(assert (=> d!11147 (= lt!23518 e!38488)))

(declare-fun c!7397 () Bool)

(assert (=> d!11147 (= c!7397 lt!23517)))

(assert (=> d!11147 (= lt!23517 (containsKey!127 (toList!685 lt!22977) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11147 (= (contains!675 lt!22977 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23516)))

(declare-fun b!58505 () Bool)

(declare-fun lt!23515 () Unit!1484)

(assert (=> b!58505 (= e!38488 lt!23515)))

(assert (=> b!58505 (= lt!23515 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22977) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!58505 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58506 () Bool)

(declare-fun Unit!1541 () Unit!1484)

(assert (=> b!58506 (= e!38488 Unit!1541)))

(declare-fun b!58507 () Bool)

(assert (=> b!58507 (= e!38489 (isDefined!76 (getValueByKey!124 (toList!685 lt!22977) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11147 c!7397) b!58505))

(assert (= (and d!11147 (not c!7397)) b!58506))

(assert (= (and d!11147 (not res!32597)) b!58507))

(assert (=> d!11147 m!48069))

(declare-fun m!50205 () Bool)

(assert (=> d!11147 m!50205))

(assert (=> b!58505 m!48069))

(declare-fun m!50207 () Bool)

(assert (=> b!58505 m!50207))

(assert (=> b!58505 m!48069))

(assert (=> b!58505 m!49089))

(assert (=> b!58505 m!49089))

(declare-fun m!50209 () Bool)

(assert (=> b!58505 m!50209))

(assert (=> b!58507 m!48069))

(assert (=> b!58507 m!49089))

(assert (=> b!58507 m!49089))

(assert (=> b!58507 m!50209))

(assert (=> b!57651 d!11147))

(declare-fun d!11149 () Bool)

(declare-fun e!38490 () Bool)

(assert (=> d!11149 e!38490))

(declare-fun res!32598 () Bool)

(assert (=> d!11149 (=> (not res!32598) (not e!38490))))

(declare-fun lt!23522 () ListLongMap!1339)

(assert (=> d!11149 (= res!32598 (contains!675 lt!23522 (_1!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(declare-fun lt!23520 () List!1419)

(assert (=> d!11149 (= lt!23522 (ListLongMap!1340 lt!23520))))

(declare-fun lt!23521 () Unit!1484)

(declare-fun lt!23519 () Unit!1484)

(assert (=> d!11149 (= lt!23521 lt!23519)))

(assert (=> d!11149 (= (getValueByKey!124 lt!23520 (_1!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11149 (= lt!23519 (lemmaContainsTupThenGetReturnValue!41 lt!23520 (_1!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (_2!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11149 (= lt!23520 (insertStrictlySorted!44 (toList!685 (ite c!7112 call!4152 (ite c!7114 call!4156 call!4155))) (_1!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) (_2!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))))

(assert (=> d!11149 (= (+!79 (ite c!7112 call!4152 (ite c!7114 call!4156 call!4155)) (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))) lt!23522)))

(declare-fun b!58508 () Bool)

(declare-fun res!32599 () Bool)

(assert (=> b!58508 (=> (not res!32599) (not e!38490))))

(assert (=> b!58508 (= res!32599 (= (getValueByKey!124 (toList!685 lt!23522) (_1!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))) (Some!129 (_2!1015 (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))))

(declare-fun b!58509 () Bool)

(assert (=> b!58509 (= e!38490 (contains!677 (toList!685 lt!23522) (ite (or c!7112 c!7114) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7058 c!7060) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1939 newMap!16))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(assert (= (and d!11149 res!32598) b!58508))

(assert (= (and b!58508 res!32599) b!58509))

(declare-fun m!50211 () Bool)

(assert (=> d!11149 m!50211))

(declare-fun m!50213 () Bool)

(assert (=> d!11149 m!50213))

(declare-fun m!50215 () Bool)

(assert (=> d!11149 m!50215))

(declare-fun m!50217 () Bool)

(assert (=> d!11149 m!50217))

(declare-fun m!50219 () Bool)

(assert (=> b!58508 m!50219))

(declare-fun m!50221 () Bool)

(assert (=> b!58509 m!50221))

(assert (=> bm!4149 d!11149))

(declare-fun d!11151 () Bool)

(declare-fun res!32600 () Bool)

(declare-fun e!38491 () Bool)

(assert (=> d!11151 (=> res!32600 e!38491)))

(assert (=> d!11151 (= res!32600 (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 (_2!1016 lt!22658)))))))

(assert (=> d!11151 (= (arrayNoDuplicates!0 (_keys!3641 (_2!1016 lt!22658)) #b00000000000000000000000000000000 Nil!1417) e!38491)))

(declare-fun b!58510 () Bool)

(declare-fun e!38494 () Bool)

(declare-fun call!4287 () Bool)

(assert (=> b!58510 (= e!38494 call!4287)))

(declare-fun bm!4284 () Bool)

(declare-fun c!7398 () Bool)

(assert (=> bm!4284 (= call!4287 (arrayNoDuplicates!0 (_keys!3641 (_2!1016 lt!22658)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7398 (Cons!1416 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000) Nil!1417) Nil!1417)))))

(declare-fun b!58511 () Bool)

(declare-fun e!38492 () Bool)

(assert (=> b!58511 (= e!38491 e!38492)))

(declare-fun res!32601 () Bool)

(assert (=> b!58511 (=> (not res!32601) (not e!38492))))

(declare-fun e!38493 () Bool)

(assert (=> b!58511 (= res!32601 (not e!38493))))

(declare-fun res!32602 () Bool)

(assert (=> b!58511 (=> (not res!32602) (not e!38493))))

(assert (=> b!58511 (= res!32602 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(declare-fun b!58512 () Bool)

(assert (=> b!58512 (= e!38492 e!38494)))

(assert (=> b!58512 (= c!7398 (validKeyInArray!0 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(declare-fun b!58513 () Bool)

(assert (=> b!58513 (= e!38494 call!4287)))

(declare-fun b!58514 () Bool)

(assert (=> b!58514 (= e!38493 (contains!676 Nil!1417 (select (arr!1766 (_keys!3641 (_2!1016 lt!22658))) #b00000000000000000000000000000000)))))

(assert (= (and d!11151 (not res!32600)) b!58511))

(assert (= (and b!58511 res!32602) b!58514))

(assert (= (and b!58511 res!32601) b!58512))

(assert (= (and b!58512 c!7398) b!58513))

(assert (= (and b!58512 (not c!7398)) b!58510))

(assert (= (or b!58513 b!58510) bm!4284))

(assert (=> bm!4284 m!49033))

(declare-fun m!50223 () Bool)

(assert (=> bm!4284 m!50223))

(assert (=> b!58511 m!49033))

(assert (=> b!58511 m!49033))

(assert (=> b!58511 m!49043))

(assert (=> b!58512 m!49033))

(assert (=> b!58512 m!49033))

(assert (=> b!58512 m!49043))

(assert (=> b!58514 m!49033))

(assert (=> b!58514 m!49033))

(declare-fun m!50225 () Bool)

(assert (=> b!58514 m!50225))

(assert (=> b!57623 d!11151))

(assert (=> d!10649 d!10643))

(assert (=> d!10649 d!10633))

(declare-fun d!11153 () Bool)

(assert (=> d!11153 (contains!675 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22724)))

(assert (=> d!11153 true))

(declare-fun _$35!297 () Unit!1484)

(assert (=> d!11153 (= (choose!301 lt!22713 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22724) _$35!297)))

(declare-fun bs!2545 () Bool)

(assert (= bs!2545 d!11153))

(assert (=> bs!2545 m!48095))

(assert (=> bs!2545 m!48095))

(assert (=> bs!2545 m!48111))

(assert (=> d!10649 d!11153))

(declare-fun d!11155 () Bool)

(declare-fun e!38496 () Bool)

(assert (=> d!11155 e!38496))

(declare-fun res!32603 () Bool)

(assert (=> d!11155 (=> res!32603 e!38496)))

(declare-fun lt!23524 () Bool)

(assert (=> d!11155 (= res!32603 (not lt!23524))))

(declare-fun lt!23525 () Bool)

(assert (=> d!11155 (= lt!23524 lt!23525)))

(declare-fun lt!23526 () Unit!1484)

(declare-fun e!38495 () Unit!1484)

(assert (=> d!11155 (= lt!23526 e!38495)))

(declare-fun c!7399 () Bool)

(assert (=> d!11155 (= c!7399 lt!23525)))

(assert (=> d!11155 (= lt!23525 (containsKey!127 (toList!685 lt!22713) lt!22724))))

(assert (=> d!11155 (= (contains!675 lt!22713 lt!22724) lt!23524)))

(declare-fun b!58516 () Bool)

(declare-fun lt!23523 () Unit!1484)

(assert (=> b!58516 (= e!38495 lt!23523)))

(assert (=> b!58516 (= lt!23523 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22713) lt!22724))))

(assert (=> b!58516 (isDefined!76 (getValueByKey!124 (toList!685 lt!22713) lt!22724))))

(declare-fun b!58517 () Bool)

(declare-fun Unit!1542 () Unit!1484)

(assert (=> b!58517 (= e!38495 Unit!1542)))

(declare-fun b!58518 () Bool)

(assert (=> b!58518 (= e!38496 (isDefined!76 (getValueByKey!124 (toList!685 lt!22713) lt!22724)))))

(assert (= (and d!11155 c!7399) b!58516))

(assert (= (and d!11155 (not c!7399)) b!58517))

(assert (= (and d!11155 (not res!32603)) b!58518))

(declare-fun m!50227 () Bool)

(assert (=> d!11155 m!50227))

(declare-fun m!50229 () Bool)

(assert (=> b!58516 m!50229))

(declare-fun m!50231 () Bool)

(assert (=> b!58516 m!50231))

(assert (=> b!58516 m!50231))

(declare-fun m!50233 () Bool)

(assert (=> b!58516 m!50233))

(assert (=> b!58518 m!50231))

(assert (=> b!58518 m!50231))

(assert (=> b!58518 m!50233))

(assert (=> d!10649 d!11155))

(declare-fun b!58522 () Bool)

(declare-fun e!38498 () Option!130)

(assert (=> b!58522 (= e!38498 None!128)))

(declare-fun b!58519 () Bool)

(declare-fun e!38497 () Option!130)

(assert (=> b!58519 (= e!38497 (Some!129 (_2!1015 (h!1995 (t!4733 (toList!685 lt!22525))))))))

(declare-fun b!58521 () Bool)

(assert (=> b!58521 (= e!38498 (getValueByKey!124 (t!4733 (t!4733 (toList!685 lt!22525))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58520 () Bool)

(assert (=> b!58520 (= e!38497 e!38498)))

(declare-fun c!7401 () Bool)

(assert (=> b!58520 (= c!7401 (and ((_ is Cons!1415) (t!4733 (toList!685 lt!22525))) (not (= (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525)))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun d!11157 () Bool)

(declare-fun c!7400 () Bool)

(assert (=> d!11157 (= c!7400 (and ((_ is Cons!1415) (t!4733 (toList!685 lt!22525))) (= (_1!1015 (h!1995 (t!4733 (toList!685 lt!22525)))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!11157 (= (getValueByKey!124 (t!4733 (toList!685 lt!22525)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38497)))

(assert (= (and d!11157 c!7400) b!58519))

(assert (= (and d!11157 (not c!7400)) b!58520))

(assert (= (and b!58520 c!7401) b!58521))

(assert (= (and b!58520 (not c!7401)) b!58522))

(assert (=> b!58521 m!47875))

(declare-fun m!50235 () Bool)

(assert (=> b!58521 m!50235))

(assert (=> b!57548 d!11157))

(declare-fun d!11159 () Bool)

(declare-fun lt!23527 () Bool)

(assert (=> d!11159 (= lt!23527 (select (content!63 (toList!685 lt!23015)) (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun e!38500 () Bool)

(assert (=> d!11159 (= lt!23527 e!38500)))

(declare-fun res!32604 () Bool)

(assert (=> d!11159 (=> (not res!32604) (not e!38500))))

(assert (=> d!11159 (= res!32604 ((_ is Cons!1415) (toList!685 lt!23015)))))

(assert (=> d!11159 (= (contains!677 (toList!685 lt!23015) (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23527)))

(declare-fun b!58523 () Bool)

(declare-fun e!38499 () Bool)

(assert (=> b!58523 (= e!38500 e!38499)))

(declare-fun res!32605 () Bool)

(assert (=> b!58523 (=> res!32605 e!38499)))

(assert (=> b!58523 (= res!32605 (= (h!1995 (toList!685 lt!23015)) (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58524 () Bool)

(assert (=> b!58524 (= e!38499 (contains!677 (t!4733 (toList!685 lt!23015)) (tuple2!2009 lt!22725 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!11159 res!32604) b!58523))

(assert (= (and b!58523 (not res!32605)) b!58524))

(declare-fun m!50237 () Bool)

(assert (=> d!11159 m!50237))

(declare-fun m!50239 () Bool)

(assert (=> d!11159 m!50239))

(declare-fun m!50241 () Bool)

(assert (=> b!58524 m!50241))

(assert (=> b!57691 d!11159))

(assert (=> b!57579 d!10715))

(declare-fun d!11161 () Bool)

(declare-fun res!32606 () Bool)

(declare-fun e!38501 () Bool)

(assert (=> d!11161 (=> res!32606 e!38501)))

(assert (=> d!11161 (= res!32606 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22724)))))

(assert (=> d!11161 (= (containsKey!127 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22724) e!38501)))

(declare-fun b!58525 () Bool)

(declare-fun e!38502 () Bool)

(assert (=> b!58525 (= e!38501 e!38502)))

(declare-fun res!32607 () Bool)

(assert (=> b!58525 (=> (not res!32607) (not e!38502))))

(assert (=> b!58525 (= res!32607 (and (or (not ((_ is Cons!1415) (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) (bvsle (_1!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22724)) ((_ is Cons!1415) (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) (bvslt (_1!1015 (h!1995 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22724)))))

(declare-fun b!58526 () Bool)

(assert (=> b!58526 (= e!38502 (containsKey!127 (t!4733 (toList!685 (+!79 lt!22713 (tuple2!2009 lt!22718 (zeroValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!22724))))

(assert (= (and d!11161 (not res!32606)) b!58525))

(assert (= (and b!58525 res!32607) b!58526))

(declare-fun m!50243 () Bool)

(assert (=> b!58526 m!50243))

(assert (=> d!10643 d!11161))

(declare-fun d!11163 () Bool)

(assert (=> d!11163 (= (apply!65 (+!79 lt!22729 (tuple2!2009 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!22717) (apply!65 lt!22729 lt!22717))))

(assert (=> d!11163 true))

(declare-fun _$34!753 () Unit!1484)

(assert (=> d!11163 (= (choose!300 lt!22729 lt!22727 (minValue!1939 (v!2366 (underlying!222 thiss!992))) lt!22717) _$34!753)))

(declare-fun bs!2546 () Bool)

(assert (= bs!2546 d!11163))

(assert (=> bs!2546 m!48101))

(assert (=> bs!2546 m!48101))

(assert (=> bs!2546 m!48103))

(assert (=> bs!2546 m!48093))

(assert (=> d!10645 d!11163))

(assert (=> d!10645 d!10641))

(assert (=> d!10645 d!10627))

(declare-fun d!11165 () Bool)

(declare-fun e!38504 () Bool)

(assert (=> d!11165 e!38504))

(declare-fun res!32608 () Bool)

(assert (=> d!11165 (=> res!32608 e!38504)))

(declare-fun lt!23529 () Bool)

(assert (=> d!11165 (= res!32608 (not lt!23529))))

(declare-fun lt!23530 () Bool)

(assert (=> d!11165 (= lt!23529 lt!23530)))

(declare-fun lt!23531 () Unit!1484)

(declare-fun e!38503 () Unit!1484)

(assert (=> d!11165 (= lt!23531 e!38503)))

(declare-fun c!7402 () Bool)

(assert (=> d!11165 (= c!7402 lt!23530)))

(assert (=> d!11165 (= lt!23530 (containsKey!127 (toList!685 lt!22729) lt!22717))))

(assert (=> d!11165 (= (contains!675 lt!22729 lt!22717) lt!23529)))

(declare-fun b!58527 () Bool)

(declare-fun lt!23528 () Unit!1484)

(assert (=> b!58527 (= e!38503 lt!23528)))

(assert (=> b!58527 (= lt!23528 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22729) lt!22717))))

(assert (=> b!58527 (isDefined!76 (getValueByKey!124 (toList!685 lt!22729) lt!22717))))

(declare-fun b!58528 () Bool)

(declare-fun Unit!1543 () Unit!1484)

(assert (=> b!58528 (= e!38503 Unit!1543)))

(declare-fun b!58529 () Bool)

(assert (=> b!58529 (= e!38504 (isDefined!76 (getValueByKey!124 (toList!685 lt!22729) lt!22717)))))

(assert (= (and d!11165 c!7402) b!58527))

(assert (= (and d!11165 (not c!7402)) b!58528))

(assert (= (and d!11165 (not res!32608)) b!58529))

(declare-fun m!50245 () Bool)

(assert (=> d!11165 m!50245))

(declare-fun m!50247 () Bool)

(assert (=> b!58527 m!50247))

(assert (=> b!58527 m!48619))

(assert (=> b!58527 m!48619))

(declare-fun m!50249 () Bool)

(assert (=> b!58527 m!50249))

(assert (=> b!58529 m!48619))

(assert (=> b!58529 m!48619))

(assert (=> b!58529 m!50249))

(assert (=> d!10645 d!11165))

(assert (=> d!10645 d!10635))

(declare-fun d!11167 () Bool)

(declare-fun e!38506 () Bool)

(assert (=> d!11167 e!38506))

(declare-fun res!32609 () Bool)

(assert (=> d!11167 (=> res!32609 e!38506)))

(declare-fun lt!23533 () Bool)

(assert (=> d!11167 (= res!32609 (not lt!23533))))

(declare-fun lt!23534 () Bool)

(assert (=> d!11167 (= lt!23533 lt!23534)))

(declare-fun lt!23535 () Unit!1484)

(declare-fun e!38505 () Unit!1484)

(assert (=> d!11167 (= lt!23535 e!38505)))

(declare-fun c!7403 () Bool)

(assert (=> d!11167 (= c!7403 lt!23534)))

(assert (=> d!11167 (= lt!23534 (containsKey!127 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (=> d!11167 (= (contains!675 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))) lt!23533)))

(declare-fun b!58530 () Bool)

(declare-fun lt!23532 () Unit!1484)

(assert (=> b!58530 (= e!38505 lt!23532)))

(assert (=> b!58530 (= lt!23532 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(assert (=> b!58530 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638))))))

(declare-fun b!58531 () Bool)

(declare-fun Unit!1544 () Unit!1484)

(assert (=> b!58531 (= e!38505 Unit!1544)))

(declare-fun b!58532 () Bool)

(assert (=> b!58532 (= e!38506 (isDefined!76 (getValueByKey!124 (toList!685 (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16))) (select (arr!1766 (_keys!3641 newMap!16)) (index!3003 lt!22638)))))))

(assert (= (and d!11167 c!7403) b!58530))

(assert (= (and d!11167 (not c!7403)) b!58531))

(assert (= (and d!11167 (not res!32609)) b!58532))

(assert (=> d!11167 m!48057))

(declare-fun m!50251 () Bool)

(assert (=> d!11167 m!50251))

(assert (=> b!58530 m!48057))

(declare-fun m!50253 () Bool)

(assert (=> b!58530 m!50253))

(assert (=> b!58530 m!48057))

(declare-fun m!50255 () Bool)

(assert (=> b!58530 m!50255))

(assert (=> b!58530 m!50255))

(declare-fun m!50257 () Bool)

(assert (=> b!58530 m!50257))

(assert (=> b!58532 m!48057))

(assert (=> b!58532 m!50255))

(assert (=> b!58532 m!50255))

(assert (=> b!58532 m!50257))

(assert (=> b!57667 d!11167))

(declare-fun b!58533 () Bool)

(declare-fun e!38514 () ListLongMap!1339)

(declare-fun call!4294 () ListLongMap!1339)

(assert (=> b!58533 (= e!38514 call!4294)))

(declare-fun call!4290 () ListLongMap!1339)

(declare-fun call!4291 () ListLongMap!1339)

(declare-fun call!4288 () ListLongMap!1339)

(declare-fun bm!4285 () Bool)

(declare-fun call!4292 () ListLongMap!1339)

(declare-fun c!7408 () Bool)

(declare-fun c!7406 () Bool)

(assert (=> bm!4285 (= call!4290 (+!79 (ite c!7406 call!4288 (ite c!7408 call!4292 call!4291)) (ite (or c!7406 c!7408) (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1939 newMap!16)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16)))))))

(declare-fun b!58534 () Bool)

(declare-fun e!38517 () ListLongMap!1339)

(assert (=> b!58534 (= e!38517 e!38514)))

(assert (=> b!58534 (= c!7408 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4286 () Bool)

(assert (=> bm!4286 (= call!4288 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun b!58535 () Bool)

(declare-fun e!38510 () Bool)

(declare-fun e!38507 () Bool)

(assert (=> b!58535 (= e!38510 e!38507)))

(declare-fun res!32615 () Bool)

(declare-fun call!4293 () Bool)

(assert (=> b!58535 (= res!32615 call!4293)))

(assert (=> b!58535 (=> (not res!32615) (not e!38507))))

(declare-fun b!58536 () Bool)

(declare-fun res!32612 () Bool)

(declare-fun e!38515 () Bool)

(assert (=> b!58536 (=> (not res!32612) (not e!38515))))

(declare-fun e!38518 () Bool)

(assert (=> b!58536 (= res!32612 e!38518)))

(declare-fun res!32611 () Bool)

(assert (=> b!58536 (=> res!32611 e!38518)))

(declare-fun e!38511 () Bool)

(assert (=> b!58536 (= res!32611 (not e!38511))))

(declare-fun res!32613 () Bool)

(assert (=> b!58536 (=> (not res!32613) (not e!38511))))

(assert (=> b!58536 (= res!32613 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4287 () Bool)

(declare-fun lt!23557 () ListLongMap!1339)

(assert (=> bm!4287 (= call!4293 (contains!675 lt!23557 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58537 () Bool)

(declare-fun e!38516 () Unit!1484)

(declare-fun lt!23547 () Unit!1484)

(assert (=> b!58537 (= e!38516 lt!23547)))

(declare-fun lt!23540 () ListLongMap!1339)

(assert (=> b!58537 (= lt!23540 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23545 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23545 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23551 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23551 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23543 () Unit!1484)

(assert (=> b!58537 (= lt!23543 (addStillContains!41 lt!23540 lt!23545 (zeroValue!1939 newMap!16) lt!23551))))

(assert (=> b!58537 (contains!675 (+!79 lt!23540 (tuple2!2009 lt!23545 (zeroValue!1939 newMap!16))) lt!23551)))

(declare-fun lt!23555 () Unit!1484)

(assert (=> b!58537 (= lt!23555 lt!23543)))

(declare-fun lt!23549 () ListLongMap!1339)

(assert (=> b!58537 (= lt!23549 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23536 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23536 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23550 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23550 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23546 () Unit!1484)

(assert (=> b!58537 (= lt!23546 (addApplyDifferent!41 lt!23549 lt!23536 (minValue!1939 newMap!16) lt!23550))))

(assert (=> b!58537 (= (apply!65 (+!79 lt!23549 (tuple2!2009 lt!23536 (minValue!1939 newMap!16))) lt!23550) (apply!65 lt!23549 lt!23550))))

(declare-fun lt!23553 () Unit!1484)

(assert (=> b!58537 (= lt!23553 lt!23546)))

(declare-fun lt!23538 () ListLongMap!1339)

(assert (=> b!58537 (= lt!23538 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23552 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23552 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23548 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23548 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23539 () Unit!1484)

(assert (=> b!58537 (= lt!23539 (addApplyDifferent!41 lt!23538 lt!23552 (zeroValue!1939 newMap!16) lt!23548))))

(assert (=> b!58537 (= (apply!65 (+!79 lt!23538 (tuple2!2009 lt!23552 (zeroValue!1939 newMap!16))) lt!23548) (apply!65 lt!23538 lt!23548))))

(declare-fun lt!23537 () Unit!1484)

(assert (=> b!58537 (= lt!23537 lt!23539)))

(declare-fun lt!23556 () ListLongMap!1339)

(assert (=> b!58537 (= lt!23556 (getCurrentListMapNoExtraKeys!43 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)))))

(declare-fun lt!23554 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23554 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23544 () (_ BitVec 64))

(assert (=> b!58537 (= lt!23544 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58537 (= lt!23547 (addApplyDifferent!41 lt!23556 lt!23554 (minValue!1939 newMap!16) lt!23544))))

(assert (=> b!58537 (= (apply!65 (+!79 lt!23556 (tuple2!2009 lt!23554 (minValue!1939 newMap!16))) lt!23544) (apply!65 lt!23556 lt!23544))))

(declare-fun d!11169 () Bool)

(assert (=> d!11169 e!38515))

(declare-fun res!32618 () Bool)

(assert (=> d!11169 (=> (not res!32618) (not e!38515))))

(assert (=> d!11169 (= res!32618 (or (bvsge #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))))

(declare-fun lt!23541 () ListLongMap!1339)

(assert (=> d!11169 (= lt!23557 lt!23541)))

(declare-fun lt!23542 () Unit!1484)

(assert (=> d!11169 (= lt!23542 e!38516)))

(declare-fun c!7405 () Bool)

(declare-fun e!38513 () Bool)

(assert (=> d!11169 (= c!7405 e!38513)))

(declare-fun res!32610 () Bool)

(assert (=> d!11169 (=> (not res!32610) (not e!38513))))

(assert (=> d!11169 (= res!32610 (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!11169 (= lt!23541 e!38517)))

(assert (=> d!11169 (= c!7406 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11169 (validMask!0 (mask!5895 newMap!16))))

(assert (=> d!11169 (= (getCurrentListMap!386 (_keys!3641 newMap!16) lt!22661 (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2021 newMap!16)) lt!23557)))

(declare-fun b!58538 () Bool)

(assert (=> b!58538 (= e!38513 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58539 () Bool)

(declare-fun e!38508 () Bool)

(assert (=> b!58539 (= e!38515 e!38508)))

(declare-fun c!7409 () Bool)

(assert (=> b!58539 (= c!7409 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4288 () Bool)

(declare-fun call!4289 () Bool)

(assert (=> bm!4288 (= call!4289 (contains!675 lt!23557 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4289 () Bool)

(assert (=> bm!4289 (= call!4292 call!4288)))

(declare-fun b!58540 () Bool)

(declare-fun e!38512 () Bool)

(assert (=> b!58540 (= e!38508 e!38512)))

(declare-fun res!32614 () Bool)

(assert (=> b!58540 (= res!32614 call!4289)))

(assert (=> b!58540 (=> (not res!32614) (not e!38512))))

(declare-fun b!58541 () Bool)

(declare-fun e!38509 () Bool)

(assert (=> b!58541 (= e!38509 (= (apply!65 lt!23557 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1767 lt!22661) #b00000000000000000000000000000000) (dynLambda!303 (defaultEntry!2021 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58541 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1996 lt!22661)))))

(assert (=> b!58541 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun bm!4290 () Bool)

(assert (=> bm!4290 (= call!4294 call!4290)))

(declare-fun b!58542 () Bool)

(assert (=> b!58542 (= e!38518 e!38509)))

(declare-fun res!32616 () Bool)

(assert (=> b!58542 (=> (not res!32616) (not e!38509))))

(assert (=> b!58542 (= res!32616 (contains!675 lt!23557 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58542 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1995 (_keys!3641 newMap!16))))))

(declare-fun b!58543 () Bool)

(assert (=> b!58543 (= e!38508 (not call!4289))))

(declare-fun b!58544 () Bool)

(assert (=> b!58544 (= e!38510 (not call!4293))))

(declare-fun b!58545 () Bool)

(declare-fun Unit!1545 () Unit!1484)

(assert (=> b!58545 (= e!38516 Unit!1545)))

(declare-fun b!58546 () Bool)

(declare-fun e!38519 () ListLongMap!1339)

(assert (=> b!58546 (= e!38519 call!4294)))

(declare-fun bm!4291 () Bool)

(assert (=> bm!4291 (= call!4291 call!4292)))

(declare-fun b!58547 () Bool)

(assert (=> b!58547 (= e!38517 (+!79 call!4290 (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 newMap!16))))))

(declare-fun b!58548 () Bool)

(assert (=> b!58548 (= e!38519 call!4291)))

(declare-fun b!58549 () Bool)

(declare-fun c!7407 () Bool)

(assert (=> b!58549 (= c!7407 (and (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58549 (= e!38514 e!38519)))

(declare-fun b!58550 () Bool)

(declare-fun res!32617 () Bool)

(assert (=> b!58550 (=> (not res!32617) (not e!38515))))

(assert (=> b!58550 (= res!32617 e!38510)))

(declare-fun c!7404 () Bool)

(assert (=> b!58550 (= c!7404 (not (= (bvand (extraKeys!1912 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58551 () Bool)

(assert (=> b!58551 (= e!38507 (= (apply!65 lt!23557 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1939 newMap!16)))))

(declare-fun b!58552 () Bool)

(assert (=> b!58552 (= e!38512 (= (apply!65 lt!23557 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1939 newMap!16)))))

(declare-fun b!58553 () Bool)

(assert (=> b!58553 (= e!38511 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11169 c!7406) b!58547))

(assert (= (and d!11169 (not c!7406)) b!58534))

(assert (= (and b!58534 c!7408) b!58533))

(assert (= (and b!58534 (not c!7408)) b!58549))

(assert (= (and b!58549 c!7407) b!58546))

(assert (= (and b!58549 (not c!7407)) b!58548))

(assert (= (or b!58546 b!58548) bm!4291))

(assert (= (or b!58533 bm!4291) bm!4289))

(assert (= (or b!58533 b!58546) bm!4290))

(assert (= (or b!58547 bm!4289) bm!4286))

(assert (= (or b!58547 bm!4290) bm!4285))

(assert (= (and d!11169 res!32610) b!58538))

(assert (= (and d!11169 c!7405) b!58537))

(assert (= (and d!11169 (not c!7405)) b!58545))

(assert (= (and d!11169 res!32618) b!58536))

(assert (= (and b!58536 res!32613) b!58553))

(assert (= (and b!58536 (not res!32611)) b!58542))

(assert (= (and b!58542 res!32616) b!58541))

(assert (= (and b!58536 res!32612) b!58550))

(assert (= (and b!58550 c!7404) b!58535))

(assert (= (and b!58550 (not c!7404)) b!58544))

(assert (= (and b!58535 res!32615) b!58551))

(assert (= (or b!58535 b!58544) bm!4287))

(assert (= (and b!58550 res!32617) b!58539))

(assert (= (and b!58539 c!7409) b!58540))

(assert (= (and b!58539 (not c!7409)) b!58543))

(assert (= (and b!58540 res!32614) b!58552))

(assert (= (or b!58540 b!58543) bm!4288))

(declare-fun b_lambda!2549 () Bool)

(assert (=> (not b_lambda!2549) (not b!58541)))

(assert (=> b!58541 t!4745))

(declare-fun b_and!3537 () Bool)

(assert (= b_and!3533 (and (=> t!4745 result!2353) b_and!3537)))

(assert (=> b!58541 t!4747))

(declare-fun b_and!3539 () Bool)

(assert (= b_and!3535 (and (=> t!4747 result!2355) b_and!3539)))

(assert (=> d!11169 m!48151))

(declare-fun m!50259 () Bool)

(assert (=> bm!4288 m!50259))

(declare-fun m!50261 () Bool)

(assert (=> b!58547 m!50261))

(assert (=> b!58541 m!48177))

(declare-fun m!50263 () Bool)

(assert (=> b!58541 m!50263))

(assert (=> b!58541 m!48203))

(assert (=> b!58541 m!48177))

(declare-fun m!50265 () Bool)

(assert (=> b!58541 m!50265))

(assert (=> b!58541 m!50263))

(assert (=> b!58541 m!48203))

(declare-fun m!50267 () Bool)

(assert (=> b!58541 m!50267))

(assert (=> b!58538 m!48177))

(assert (=> b!58538 m!48177))

(assert (=> b!58538 m!48187))

(declare-fun m!50269 () Bool)

(assert (=> bm!4287 m!50269))

(declare-fun m!50271 () Bool)

(assert (=> bm!4285 m!50271))

(declare-fun m!50273 () Bool)

(assert (=> b!58551 m!50273))

(assert (=> b!58542 m!48177))

(assert (=> b!58542 m!48177))

(declare-fun m!50275 () Bool)

(assert (=> b!58542 m!50275))

(declare-fun m!50277 () Bool)

(assert (=> b!58537 m!50277))

(declare-fun m!50279 () Bool)

(assert (=> b!58537 m!50279))

(declare-fun m!50281 () Bool)

(assert (=> b!58537 m!50281))

(declare-fun m!50283 () Bool)

(assert (=> b!58537 m!50283))

(declare-fun m!50285 () Bool)

(assert (=> b!58537 m!50285))

(declare-fun m!50287 () Bool)

(assert (=> b!58537 m!50287))

(declare-fun m!50289 () Bool)

(assert (=> b!58537 m!50289))

(declare-fun m!50291 () Bool)

(assert (=> b!58537 m!50291))

(assert (=> b!58537 m!50277))

(assert (=> b!58537 m!50291))

(declare-fun m!50293 () Bool)

(assert (=> b!58537 m!50293))

(assert (=> b!58537 m!48177))

(declare-fun m!50295 () Bool)

(assert (=> b!58537 m!50295))

(declare-fun m!50297 () Bool)

(assert (=> b!58537 m!50297))

(declare-fun m!50299 () Bool)

(assert (=> b!58537 m!50299))

(assert (=> b!58537 m!50285))

(declare-fun m!50301 () Bool)

(assert (=> b!58537 m!50301))

(declare-fun m!50303 () Bool)

(assert (=> b!58537 m!50303))

(declare-fun m!50305 () Bool)

(assert (=> b!58537 m!50305))

(assert (=> b!58537 m!50289))

(declare-fun m!50307 () Bool)

(assert (=> b!58537 m!50307))

(assert (=> bm!4286 m!50297))

(declare-fun m!50309 () Bool)

(assert (=> b!58552 m!50309))

(assert (=> b!58553 m!48177))

(assert (=> b!58553 m!48177))

(assert (=> b!58553 m!48187))

(assert (=> b!57667 d!11169))

(declare-fun lt!23558 () Bool)

(declare-fun d!11171 () Bool)

(assert (=> d!11171 (= lt!23558 (select (content!63 (toList!685 lt!22949)) (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38521 () Bool)

(assert (=> d!11171 (= lt!23558 e!38521)))

(declare-fun res!32619 () Bool)

(assert (=> d!11171 (=> (not res!32619) (not e!38521))))

(assert (=> d!11171 (= res!32619 ((_ is Cons!1415) (toList!685 lt!22949)))))

(assert (=> d!11171 (= (contains!677 (toList!685 lt!22949) (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23558)))

(declare-fun b!58554 () Bool)

(declare-fun e!38520 () Bool)

(assert (=> b!58554 (= e!38521 e!38520)))

(declare-fun res!32620 () Bool)

(assert (=> b!58554 (=> res!32620 e!38520)))

(assert (=> b!58554 (= res!32620 (= (h!1995 (toList!685 lt!22949)) (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58555 () Bool)

(assert (=> b!58555 (= e!38520 (contains!677 (t!4733 (toList!685 lt!22949)) (ite c!7058 (ite c!7060 (tuple2!2009 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2009 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (get!1066 (select (arr!1767 (_values!2004 (v!2366 (underlying!222 thiss!992)))) from!355) (dynLambda!303 (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11171 res!32619) b!58554))

(assert (= (and b!58554 (not res!32620)) b!58555))

(declare-fun m!50311 () Bool)

(assert (=> d!11171 m!50311))

(declare-fun m!50313 () Bool)

(assert (=> d!11171 m!50313))

(declare-fun m!50315 () Bool)

(assert (=> b!58555 m!50315))

(assert (=> b!57606 d!11171))

(assert (=> b!57573 d!10715))

(declare-fun d!11173 () Bool)

(assert (=> d!11173 (= (get!1069 (getValueByKey!124 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22723)) (v!2372 (getValueByKey!124 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22723)))))

(assert (=> d!10625 d!11173))

(declare-fun b!58559 () Bool)

(declare-fun e!38523 () Option!130)

(assert (=> b!58559 (= e!38523 None!128)))

(declare-fun e!38522 () Option!130)

(declare-fun b!58556 () Bool)

(assert (=> b!58556 (= e!38522 (Some!129 (_2!1015 (h!1995 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))))))

(declare-fun b!58558 () Bool)

(assert (=> b!58558 (= e!38523 (getValueByKey!124 (t!4733 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) lt!22723))))

(declare-fun b!58557 () Bool)

(assert (=> b!58557 (= e!38522 e!38523)))

(declare-fun c!7411 () Bool)

(assert (=> b!58557 (= c!7411 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (not (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22723))))))

(declare-fun d!11175 () Bool)

(declare-fun c!7410 () Bool)

(assert (=> d!11175 (= c!7410 (and ((_ is Cons!1415) (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))) (= (_1!1015 (h!1995 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))))) lt!22723)))))

(assert (=> d!11175 (= (getValueByKey!124 (toList!685 (+!79 lt!22722 (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992)))))) lt!22723) e!38522)))

(assert (= (and d!11175 c!7410) b!58556))

(assert (= (and d!11175 (not c!7410)) b!58557))

(assert (= (and b!58557 c!7411) b!58558))

(assert (= (and b!58557 (not c!7411)) b!58559))

(declare-fun m!50317 () Bool)

(assert (=> b!58558 m!50317))

(assert (=> d!10625 d!11175))

(declare-fun d!11177 () Bool)

(declare-fun res!32621 () Bool)

(declare-fun e!38524 () Bool)

(assert (=> d!11177 (=> res!32621 e!38524)))

(assert (=> d!11177 (= res!32621 (and ((_ is Cons!1415) (toList!685 e!37759)) (= (_1!1015 (h!1995 (toList!685 e!37759))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!11177 (= (containsKey!127 (toList!685 e!37759) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)) e!38524)))

(declare-fun b!58560 () Bool)

(declare-fun e!38525 () Bool)

(assert (=> b!58560 (= e!38524 e!38525)))

(declare-fun res!32622 () Bool)

(assert (=> b!58560 (=> (not res!32622) (not e!38525))))

(assert (=> b!58560 (= res!32622 (and (or (not ((_ is Cons!1415) (toList!685 e!37759))) (bvsle (_1!1015 (h!1995 (toList!685 e!37759))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1415) (toList!685 e!37759)) (bvslt (_1!1015 (h!1995 (toList!685 e!37759))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!58561 () Bool)

(assert (=> b!58561 (= e!38525 (containsKey!127 (t!4733 (toList!685 e!37759)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!11177 (not res!32621)) b!58560))

(assert (= (and b!58560 res!32622) b!58561))

(assert (=> b!58561 m!47875))

(declare-fun m!50319 () Bool)

(assert (=> b!58561 m!50319))

(assert (=> d!10563 d!11177))

(declare-fun d!11179 () Bool)

(declare-fun res!32623 () Bool)

(declare-fun e!38526 () Bool)

(assert (=> d!11179 (=> res!32623 e!38526)))

(assert (=> d!11179 (= res!32623 (and ((_ is Cons!1415) (toList!685 lt!22730)) (= (_1!1015 (h!1995 (toList!685 lt!22730))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11179 (= (containsKey!127 (toList!685 lt!22730) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38526)))

(declare-fun b!58562 () Bool)

(declare-fun e!38527 () Bool)

(assert (=> b!58562 (= e!38526 e!38527)))

(declare-fun res!32624 () Bool)

(assert (=> b!58562 (=> (not res!32624) (not e!38527))))

(assert (=> b!58562 (= res!32624 (and (or (not ((_ is Cons!1415) (toList!685 lt!22730))) (bvsle (_1!1015 (h!1995 (toList!685 lt!22730))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1415) (toList!685 lt!22730)) (bvslt (_1!1015 (h!1995 (toList!685 lt!22730))) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!58563 () Bool)

(assert (=> b!58563 (= e!38527 (containsKey!127 (t!4733 (toList!685 lt!22730)) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11179 (not res!32623)) b!58562))

(assert (= (and b!58562 res!32624) b!58563))

(assert (=> b!58563 m!48069))

(declare-fun m!50321 () Bool)

(assert (=> b!58563 m!50321))

(assert (=> d!10657 d!11179))

(assert (=> d!10565 d!10717))

(assert (=> d!10659 d!10553))

(declare-fun b!58580 () Bool)

(declare-fun e!38538 () Bool)

(declare-fun e!38537 () Bool)

(assert (=> b!58580 (= e!38538 e!38537)))

(declare-fun res!32636 () Bool)

(declare-fun call!4300 () Bool)

(assert (=> b!58580 (= res!32636 call!4300)))

(assert (=> b!58580 (=> (not res!32636) (not e!38537))))

(declare-fun b!58581 () Bool)

(declare-fun e!38536 () Bool)

(declare-fun call!4299 () Bool)

(assert (=> b!58581 (= e!38536 (not call!4299))))

(declare-fun b!58582 () Bool)

(declare-fun res!32634 () Bool)

(declare-fun lt!23561 () SeekEntryResult!220)

(assert (=> b!58582 (= res!32634 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3002 lt!23561)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58582 (=> (not res!32634) (not e!38537))))

(declare-fun b!58583 () Bool)

(declare-fun e!38539 () Bool)

(assert (=> b!58583 (= e!38539 ((_ is Undefined!220) lt!23561))))

(declare-fun c!7417 () Bool)

(declare-fun bm!4296 () Bool)

(assert (=> bm!4296 (= call!4300 (inRange!0 (ite c!7417 (index!3002 lt!23561) (index!3005 lt!23561)) (mask!5895 newMap!16)))))

(declare-fun bm!4297 () Bool)

(assert (=> bm!4297 (= call!4299 (arrayContainsKey!0 (_keys!3641 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!58584 () Bool)

(declare-fun res!32633 () Bool)

(assert (=> b!58584 (=> (not res!32633) (not e!38536))))

(assert (=> b!58584 (= res!32633 call!4300)))

(assert (=> b!58584 (= e!38539 e!38536)))

(declare-fun b!58585 () Bool)

(assert (=> b!58585 (= e!38538 e!38539)))

(declare-fun c!7416 () Bool)

(assert (=> b!58585 (= c!7416 ((_ is MissingVacant!220) lt!23561))))

(declare-fun b!58586 () Bool)

(assert (=> b!58586 (= e!38537 (not call!4299))))

(declare-fun d!11181 () Bool)

(assert (=> d!11181 e!38538))

(assert (=> d!11181 (= c!7417 ((_ is MissingZero!220) lt!23561))))

(assert (=> d!11181 (= lt!23561 (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(assert (=> d!11181 true))

(declare-fun _$34!756 () Unit!1484)

(assert (=> d!11181 (= (choose!303 (_keys!3641 newMap!16) (_values!2004 newMap!16) (mask!5895 newMap!16) (extraKeys!1912 newMap!16) (zeroValue!1939 newMap!16) (minValue!1939 newMap!16) (select (arr!1766 (_keys!3641 (v!2366 (underlying!222 thiss!992)))) from!355) (defaultEntry!2021 newMap!16)) _$34!756)))

(declare-fun b!58587 () Bool)

(declare-fun res!32635 () Bool)

(assert (=> b!58587 (=> (not res!32635) (not e!38536))))

(assert (=> b!58587 (= res!32635 (= (select (arr!1766 (_keys!3641 newMap!16)) (index!3005 lt!23561)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11181 c!7417) b!58580))

(assert (= (and d!11181 (not c!7417)) b!58585))

(assert (= (and b!58580 res!32636) b!58582))

(assert (= (and b!58582 res!32634) b!58586))

(assert (= (and b!58585 c!7416) b!58584))

(assert (= (and b!58585 (not c!7416)) b!58583))

(assert (= (and b!58584 res!32633) b!58587))

(assert (= (and b!58587 res!32635) b!58581))

(assert (= (or b!58580 b!58584) bm!4296))

(assert (= (or b!58586 b!58581) bm!4297))

(declare-fun m!50323 () Bool)

(assert (=> b!58587 m!50323))

(declare-fun m!50325 () Bool)

(assert (=> bm!4296 m!50325))

(declare-fun m!50327 () Bool)

(assert (=> b!58582 m!50327))

(assert (=> bm!4297 m!47875))

(assert (=> bm!4297 m!48011))

(assert (=> d!11181 m!47875))

(assert (=> d!11181 m!48035))

(assert (=> d!10659 d!11181))

(assert (=> d!10659 d!10717))

(declare-fun b!58588 () Bool)

(declare-fun e!38541 () Bool)

(declare-fun e!38542 () Bool)

(assert (=> b!58588 (= e!38541 e!38542)))

(declare-fun lt!23562 () (_ BitVec 64))

(assert (=> b!58588 (= lt!23562 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!23564 () Unit!1484)

(assert (=> b!58588 (= lt!23564 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3641 newMap!16) lt!23562 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!58588 (arrayContainsKey!0 (_keys!3641 newMap!16) lt!23562 #b00000000000000000000000000000000)))

(declare-fun lt!23563 () Unit!1484)

(assert (=> b!58588 (= lt!23563 lt!23564)))

(declare-fun res!32637 () Bool)

(assert (=> b!58588 (= res!32637 (= (seekEntryOrOpen!0 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3641 newMap!16) (mask!5895 newMap!16)) (Found!220 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!58588 (=> (not res!32637) (not e!38542))))

(declare-fun d!11183 () Bool)

(declare-fun res!32638 () Bool)

(declare-fun e!38540 () Bool)

(assert (=> d!11183 (=> res!32638 e!38540)))

(assert (=> d!11183 (= res!32638 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1995 (_keys!3641 newMap!16))))))

(assert (=> d!11183 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3641 newMap!16) (mask!5895 newMap!16)) e!38540)))

(declare-fun b!58589 () Bool)

(declare-fun call!4301 () Bool)

(assert (=> b!58589 (= e!38542 call!4301)))

(declare-fun bm!4298 () Bool)

(assert (=> bm!4298 (= call!4301 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3641 newMap!16) (mask!5895 newMap!16)))))

(declare-fun b!58590 () Bool)

(assert (=> b!58590 (= e!38540 e!38541)))

(declare-fun c!7418 () Bool)

(assert (=> b!58590 (= c!7418 (validKeyInArray!0 (select (arr!1766 (_keys!3641 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58591 () Bool)

(assert (=> b!58591 (= e!38541 call!4301)))

(assert (= (and d!11183 (not res!32638)) b!58590))

(assert (= (and b!58590 c!7418) b!58588))

(assert (= (and b!58590 (not c!7418)) b!58591))

(assert (= (and b!58588 res!32637) b!58589))

(assert (= (or b!58589 b!58591) bm!4298))

(assert (=> b!58588 m!48825))

(declare-fun m!50329 () Bool)

(assert (=> b!58588 m!50329))

(declare-fun m!50331 () Bool)

(assert (=> b!58588 m!50331))

(assert (=> b!58588 m!48825))

(declare-fun m!50333 () Bool)

(assert (=> b!58588 m!50333))

(declare-fun m!50335 () Bool)

(assert (=> bm!4298 m!50335))

(assert (=> b!58590 m!48825))

(assert (=> b!58590 m!48825))

(assert (=> b!58590 m!48827))

(assert (=> bm!4148 d!11183))

(declare-fun d!11185 () Bool)

(declare-fun lt!23565 () Bool)

(assert (=> d!11185 (= lt!23565 (select (content!63 (toList!685 lt!23006)) (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun e!38544 () Bool)

(assert (=> d!11185 (= lt!23565 e!38544)))

(declare-fun res!32639 () Bool)

(assert (=> d!11185 (=> (not res!32639) (not e!38544))))

(assert (=> d!11185 (= res!32639 ((_ is Cons!1415) (toList!685 lt!23006)))))

(assert (=> d!11185 (= (contains!677 (toList!685 lt!23006) (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23565)))

(declare-fun b!58592 () Bool)

(declare-fun e!38543 () Bool)

(assert (=> b!58592 (= e!38544 e!38543)))

(declare-fun res!32640 () Bool)

(assert (=> b!58592 (=> res!32640 e!38543)))

(assert (=> b!58592 (= res!32640 (= (h!1995 (toList!685 lt!23006)) (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58593 () Bool)

(assert (=> b!58593 (= e!38543 (contains!677 (t!4733 (toList!685 lt!23006)) (tuple2!2009 lt!22709 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!11185 res!32639) b!58592))

(assert (= (and b!58592 (not res!32640)) b!58593))

(declare-fun m!50337 () Bool)

(assert (=> d!11185 m!50337))

(declare-fun m!50339 () Bool)

(assert (=> d!11185 m!50339))

(declare-fun m!50341 () Bool)

(assert (=> b!58593 m!50341))

(assert (=> b!57686 d!11185))

(declare-fun d!11187 () Bool)

(declare-fun e!38546 () Bool)

(assert (=> d!11187 e!38546))

(declare-fun res!32641 () Bool)

(assert (=> d!11187 (=> res!32641 e!38546)))

(declare-fun lt!23567 () Bool)

(assert (=> d!11187 (= res!32641 (not lt!23567))))

(declare-fun lt!23568 () Bool)

(assert (=> d!11187 (= lt!23567 lt!23568)))

(declare-fun lt!23569 () Unit!1484)

(declare-fun e!38545 () Unit!1484)

(assert (=> d!11187 (= lt!23569 e!38545)))

(declare-fun c!7419 () Bool)

(assert (=> d!11187 (= c!7419 lt!23568)))

(assert (=> d!11187 (= lt!23568 (containsKey!127 (toList!685 lt!22906) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11187 (= (contains!675 lt!22906 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23567)))

(declare-fun b!58594 () Bool)

(declare-fun lt!23566 () Unit!1484)

(assert (=> b!58594 (= e!38545 lt!23566)))

(assert (=> b!58594 (= lt!23566 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!685 lt!22906) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58594 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58595 () Bool)

(declare-fun Unit!1546 () Unit!1484)

(assert (=> b!58595 (= e!38545 Unit!1546)))

(declare-fun b!58596 () Bool)

(assert (=> b!58596 (= e!38546 (isDefined!76 (getValueByKey!124 (toList!685 lt!22906) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11187 c!7419) b!58594))

(assert (= (and d!11187 (not c!7419)) b!58595))

(assert (= (and d!11187 (not res!32641)) b!58596))

(declare-fun m!50343 () Bool)

(assert (=> d!11187 m!50343))

(declare-fun m!50345 () Bool)

(assert (=> b!58594 m!50345))

(assert (=> b!58594 m!50055))

(assert (=> b!58594 m!50055))

(declare-fun m!50347 () Bool)

(assert (=> b!58594 m!50347))

(assert (=> b!58596 m!50055))

(assert (=> b!58596 m!50055))

(assert (=> b!58596 m!50347))

(assert (=> bm!4171 d!11187))

(declare-fun d!11189 () Bool)

(assert (=> d!11189 (= (apply!65 lt!22787 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!685 lt!22787) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2547 () Bool)

(assert (= bs!2547 d!11189))

(assert (=> bs!2547 m!50167))

(assert (=> bs!2547 m!50167))

(declare-fun m!50349 () Bool)

(assert (=> bs!2547 m!50349))

(assert (=> b!57477 d!11189))

(declare-fun d!11191 () Bool)

(declare-fun lt!23570 () Bool)

(assert (=> d!11191 (= lt!23570 (select (content!63 (toList!685 lt!23043)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun e!38548 () Bool)

(assert (=> d!11191 (= lt!23570 e!38548)))

(declare-fun res!32642 () Bool)

(assert (=> d!11191 (=> (not res!32642) (not e!38548))))

(assert (=> d!11191 (= res!32642 ((_ is Cons!1415) (toList!685 lt!23043)))))

(assert (=> d!11191 (= (contains!677 (toList!685 lt!23043) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))) lt!23570)))

(declare-fun b!58597 () Bool)

(declare-fun e!38547 () Bool)

(assert (=> b!58597 (= e!38548 e!38547)))

(declare-fun res!32643 () Bool)

(assert (=> b!58597 (=> res!32643 e!38547)))

(assert (=> b!58597 (= res!32643 (= (h!1995 (toList!685 lt!23043)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(declare-fun b!58598 () Bool)

(assert (=> b!58598 (= e!38547 (contains!677 (t!4733 (toList!685 lt!23043)) (tuple2!2009 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1939 (v!2366 (underlying!222 thiss!992))))))))

(assert (= (and d!11191 res!32642) b!58597))

(assert (= (and b!58597 (not res!32643)) b!58598))

(declare-fun m!50351 () Bool)

(assert (=> d!11191 m!50351))

(declare-fun m!50353 () Bool)

(assert (=> d!11191 m!50353))

(declare-fun m!50355 () Bool)

(assert (=> b!58598 m!50355))

(assert (=> b!57740 d!11191))

(declare-fun mapIsEmpty!2861 () Bool)

(declare-fun mapRes!2861 () Bool)

(assert (=> mapIsEmpty!2861 mapRes!2861))

(declare-fun mapNonEmpty!2861 () Bool)

(declare-fun tp!7973 () Bool)

(declare-fun e!38549 () Bool)

(assert (=> mapNonEmpty!2861 (= mapRes!2861 (and tp!7973 e!38549))))

(declare-fun mapValue!2861 () ValueCell!851)

(declare-fun mapKey!2861 () (_ BitVec 32))

(declare-fun mapRest!2861 () (Array (_ BitVec 32) ValueCell!851))

(assert (=> mapNonEmpty!2861 (= mapRest!2859 (store mapRest!2861 mapKey!2861 mapValue!2861))))

(declare-fun b!58600 () Bool)

(declare-fun e!38550 () Bool)

(assert (=> b!58600 (= e!38550 tp_is_empty!2389)))

(declare-fun condMapEmpty!2861 () Bool)

(declare-fun mapDefault!2861 () ValueCell!851)

(assert (=> mapNonEmpty!2859 (= condMapEmpty!2861 (= mapRest!2859 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2861)))))

(assert (=> mapNonEmpty!2859 (= tp!7971 (and e!38550 mapRes!2861))))

(declare-fun b!58599 () Bool)

(assert (=> b!58599 (= e!38549 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2859 condMapEmpty!2861) mapIsEmpty!2861))

(assert (= (and mapNonEmpty!2859 (not condMapEmpty!2861)) mapNonEmpty!2861))

(assert (= (and mapNonEmpty!2861 ((_ is ValueCellFull!851) mapValue!2861)) b!58599))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!851) mapDefault!2861)) b!58600))

(declare-fun m!50357 () Bool)

(assert (=> mapNonEmpty!2861 m!50357))

(declare-fun mapIsEmpty!2862 () Bool)

(declare-fun mapRes!2862 () Bool)

(assert (=> mapIsEmpty!2862 mapRes!2862))

(declare-fun mapNonEmpty!2862 () Bool)

(declare-fun tp!7974 () Bool)

(declare-fun e!38551 () Bool)

(assert (=> mapNonEmpty!2862 (= mapRes!2862 (and tp!7974 e!38551))))

(declare-fun mapValue!2862 () ValueCell!851)

(declare-fun mapRest!2862 () (Array (_ BitVec 32) ValueCell!851))

(declare-fun mapKey!2862 () (_ BitVec 32))

(assert (=> mapNonEmpty!2862 (= mapRest!2860 (store mapRest!2862 mapKey!2862 mapValue!2862))))

(declare-fun b!58602 () Bool)

(declare-fun e!38552 () Bool)

(assert (=> b!58602 (= e!38552 tp_is_empty!2389)))

(declare-fun condMapEmpty!2862 () Bool)

(declare-fun mapDefault!2862 () ValueCell!851)

(assert (=> mapNonEmpty!2860 (= condMapEmpty!2862 (= mapRest!2860 ((as const (Array (_ BitVec 32) ValueCell!851)) mapDefault!2862)))))

(assert (=> mapNonEmpty!2860 (= tp!7972 (and e!38552 mapRes!2862))))

(declare-fun b!58601 () Bool)

(assert (=> b!58601 (= e!38551 tp_is_empty!2389)))

(assert (= (and mapNonEmpty!2860 condMapEmpty!2862) mapIsEmpty!2862))

(assert (= (and mapNonEmpty!2860 (not condMapEmpty!2862)) mapNonEmpty!2862))

(assert (= (and mapNonEmpty!2862 ((_ is ValueCellFull!851) mapValue!2862)) b!58601))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!851) mapDefault!2862)) b!58602))

(declare-fun m!50359 () Bool)

(assert (=> mapNonEmpty!2862 m!50359))

(declare-fun b_lambda!2551 () Bool)

(assert (= b_lambda!2549 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2551)))

(declare-fun b_lambda!2553 () Bool)

(assert (= b_lambda!2521 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2553)))

(declare-fun b_lambda!2555 () Bool)

(assert (= b_lambda!2523 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2555)))

(declare-fun b_lambda!2557 () Bool)

(assert (= b_lambda!2529 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2557)))

(declare-fun b_lambda!2559 () Bool)

(assert (= b_lambda!2543 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2559)))

(declare-fun b_lambda!2561 () Bool)

(assert (= b_lambda!2539 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2561)))

(declare-fun b_lambda!2563 () Bool)

(assert (= b_lambda!2545 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2563)))

(declare-fun b_lambda!2565 () Bool)

(assert (= b_lambda!2533 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2565)))

(declare-fun b_lambda!2567 () Bool)

(assert (= b_lambda!2537 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2567)))

(declare-fun b_lambda!2569 () Bool)

(assert (= b_lambda!2527 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2569)))

(declare-fun b_lambda!2571 () Bool)

(assert (= b_lambda!2531 (or (and b!57037 b_free!1945) (and b!57033 b_free!1947 (= (defaultEntry!2021 newMap!16) (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))))) b_lambda!2571)))

(declare-fun b_lambda!2573 () Bool)

(assert (= b_lambda!2547 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2573)))

(declare-fun b_lambda!2575 () Bool)

(assert (= b_lambda!2541 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2575)))

(declare-fun b_lambda!2577 () Bool)

(assert (= b_lambda!2535 (or (and b!57037 b_free!1945 (= (defaultEntry!2021 (v!2366 (underlying!222 thiss!992))) (defaultEntry!2021 newMap!16))) (and b!57033 b_free!1947) b_lambda!2577)))

(check-sat (not b!58271) (not d!10899) (not d!10909) (not b!57817) (not b!58111) (not d!10781) (not d!10805) (not b!58298) (not d!10955) (not d!10833) (not b!58430) (not d!10693) (not b!58538) (not b!57858) (not d!10819) (not b!58194) (not b!58211) (not b!58363) (not d!10875) (not b!57964) (not b!58248) (not d!10889) (not d!10753) (not bm!4214) (not b!57820) (not b!58471) (not d!10891) (not b!58121) (not d!10789) (not bm!4286) (not b!57874) (not d!11003) (not b!58013) (not d!11015) (not d!10979) (not bm!4253) (not bm!4246) (not b!58452) (not d!11035) (not d!10749) (not b!57799) (not d!10777) (not d!10825) (not b!57929) (not b!58221) (not b!58032) (not b_lambda!2515) (not b!57859) (not d!10849) (not b!57974) (not b!58416) (not b!58367) (not b!58081) (not b!58459) (not b!58339) (not d!10681) (not b!57849) (not b!58086) (not bm!4225) (not bm!4266) (not b!58129) (not d!10957) (not b!58422) (not b!58029) (not b!58204) (not b!57805) (not b!58521) (not b!57851) (not d!10887) (not d!11191) (not b_lambda!2513) (not b!58207) (not b_lambda!2499) (not d!11111) (not b!58047) (not bm!4221) (not b!58216) (not bm!4231) (not b!57917) (not b!58353) (not b!58467) (not b!58588) (not b!58594) (not b!57972) (not d!10697) (not d!11167) (not d!10743) (not d!10813) (not b!57919) (not d!10999) (not b!58076) (not b!58156) (not b!58114) (not d!10729) (not d!10853) (not b!57985) (not b!58196) (not bm!4279) (not b!58297) (not d!10917) (not bm!4298) (not b!57840) (not b_next!1947) (not d!10721) (not d!10765) (not b!58547) (not b!58185) (not b!58427) (not b!58450) (not b!58377) (not d!10995) (not b!58079) (not b!58068) (not b!58287) (not b!58200) (not d!10727) (not b!58242) (not b!58157) (not bm!4210) (not b!58368) (not mapNonEmpty!2861) (not d!11155) (not d!10827) (not b!57883) (not b!57831) (not b!58417) (not b!58092) (not b!58209) (not b!58393) (not b!58369) (not b!57847) (not b!58433) (not b!57850) (not b!57802) (not b!58436) (not d!10737) (not d!11125) (not b!57826) (not b!57921) (not mapNonEmpty!2862) (not b!58067) (not d!10911) (not d!10913) (not b!58278) (not d!10783) (not b!57900) (not b!58205) (not d!11085) (not b!58146) (not bm!4256) (not b!57816) (not b!58045) (not bm!4226) (not b!58331) (not b!57885) (not bm!4223) (not b!58473) (not b!58445) (not b!57905) (not bm!4296) (not d!11061) (not d!10943) (not b!58308) (not b!58088) (not b!57856) (not bm!4272) (not b!58561) (not d!10851) (not b_lambda!2555) (not d!11093) (not b!58508) (not b!58135) (not b!58378) (not d!11065) (not b_lambda!2577) (not bm!4277) (not b!58404) (not b!58502) (not bm!4243) (not d!10703) (not d!10881) (not b!58099) (not b!58274) (not b!57893) (not b_lambda!2557) (not d!10915) (not d!11181) (not b_lambda!2571) (not b!58057) (not d!10947) (not d!10767) (not bm!4269) (not b!58023) (not b!58400) (not b!58448) (not b!57877) (not b!58087) (not b!57951) (not b!58180) (not b_lambda!2563) (not d!11135) (not d!10923) (not d!10677) (not b!58443) (not b!57978) (not bm!4245) (not d!10745) (not d!10935) (not b!58292) (not b!58325) (not bm!4232) (not b!58128) (not d!10691) (not b!58338) (not b!58245) (not b!58326) b_and!3539 (not d!10707) (not d!11019) (not b_lambda!2517) (not d!10859) (not d!10847) (not b!58208) (not b!58551) (not bm!4261) (not b!58563) (not d!11001) (not bm!4270) (not b!58223) (not b!58537) (not b!58507) (not b!58347) (not d!11171) tp_is_empty!2389 (not d!10933) (not b!58305) (not b!58096) (not b!57899) (not b!58370) (not d!11159) (not b!58341) (not b!57939) (not b!58381) (not bm!4252) (not b!58255) (not b!58264) (not b!58244) (not b!58512) (not d!10929) (not b!58028) (not b!58100) (not b!58524) (not b!58063) (not bm!4215) (not b!57963) (not d!11149) (not b_lambda!2553) (not b!57958) (not bm!4254) (not bm!4222) (not bm!4247) (not b!57903) (not b!58158) (not b!58501) (not b!57982) (not b!57908) (not d!10823) (not bm!4284) (not b!57879) (not b!58002) (not d!10981) (not b!58199) (not b!57818) (not b!57998) (not b!58012) (not bm!4242) (not b_lambda!2495) (not bm!4283) (not b!58527) (not b!57880) (not b!58249) (not d!11147) (not d!11123) (not b!57924) (not b!57870) (not b!58299) (not d!10815) (not b!58033) (not b!57923) (not b!57812) (not b!58424) (not b!58469) (not d!10689) (not d!11027) (not d!11117) (not d!11043) (not b!58043) (not d!11095) (not b!58008) (not d!11129) (not d!11109) (not d!10683) (not d!10769) (not bm!4233) (not d!11097) (not d!10873) (not b!58593) (not b!57967) (not d!11145) (not b!58526) (not d!10919) (not d!10793) (not bm!4212) (not b!57980) (not b!58555) (not d!11023) (not bm!4251) (not d!10831) (not bm!4217) (not d!10733) (not d!11165) (not b!57891) (not d!10719) (not d!10941) (not bm!4227) (not b!57968) (not b!57999) (not b!58590) (not b!58451) (not b!58284) (not d!11137) (not d!10885) (not b!58553) (not b!58388) (not bm!4205) (not b!58321) (not d!10969) (not b!58281) (not b!58104) (not b!58195) (not b!58218) (not b!58233) (not b_lambda!2551) (not b!58311) (not b!58226) (not d!10687) (not d!10983) (not b!57993) (not b!58070) (not d!10905) (not b!58258) (not b!58383) (not b_lambda!2559) (not b!58286) (not bm!4257) (not b!57911) (not b!58336) (not b!58408) (not b!57904) (not d!11185) (not d!11045) (not b!58044) (not bm!4216) (not b!58598) (not b!58152) (not b!58372) (not b!58300) (not b!57829) (not b!58462) (not bm!4271) (not b!58089) (not b!58279) (not d!10901) (not b!58192) (not b!58358) (not b!58290) (not b!58375) (not b!58142) (not b!58020) (not b!58332) (not d!10927) (not b!58396) (not b!58496) (not d!10755) (not d!11163) (not b!58542) (not b!58189) (not b!57926) (not b!57757) (not b_lambda!2511) (not b!57913) (not d!10835) (not b!58147) (not b!58091) (not b!57860) (not b!57768) (not b_lambda!2519) (not b!58112) (not b!57855) (not d!10751) (not d!11127) (not b!58516) (not b!58187) (not bm!4244) (not d!10761) (not d!10931) (not d!10759) (not b!58320) (not b!57945) (not b!58236) (not b!58334) (not b!57815) (not d!11017) (not b!58438) (not b!58505) (not bm!4238) (not d!11021) (not b!57912) (not b!58307) (not d!10949) (not b_lambda!2573) (not b!57896) (not b!57936) (not d!10695) (not d!11113) (not b!58323) (not b!57813) (not b!58389) (not b!57872) (not b!58455) (not b!58137) (not b!58342) (not b!57792) (not b!57836) (not d!10939) (not b!58335) (not b!58136) (not bm!4263) (not b!58247) (not d!10757) (not b!58596) (not d!11153) (not b!58412) (not b!57906) (not b!57861) (not b!58514) (not b!57801) (not b!58038) (not b!57949) (not b!58123) (not b_lambda!2561) (not b!57977) (not b!58318) (not b!58259) (not d!11063) (not b!57806) (not d!10785) (not b_next!1945) (not b!58302) (not d!11067) (not b!57956) (not b!58509) (not b!58432) (not b!58119) (not b!58337) (not b!58415) (not b!58126) (not b!58075) (not b!57961) (not b!58457) (not b!58214) (not bm!4240) (not b!58184) (not b!58097) (not b!58530) (not b!58357) (not d!11131) (not b!58193) (not d!10701) (not b!57825) (not b!57890) (not b!58190) (not d!10971) (not d!10771) (not b!58532) (not b!58198) (not bm!4285) (not b!57804) (not b!57794) (not d!11141) (not b!58354) (not bm!4255) (not b!58101) (not b!57811) (not b!57762) (not b!58327) (not b!58073) (not b!57975) (not bm!4209) (not bm!4207) (not d!11089) (not b!58065) (not b!58108) (not b!58143) (not b_lambda!2575) (not b!58465) (not b!57769) (not d!10799) (not b_lambda!2567) (not d!10795) (not b!58423) (not d!11031) (not b!58552) (not b!58529) (not b!58518) (not d!11189) (not d!11029) (not b!58558) (not b!57843) (not d!10723) (not b!58464) (not d!10869) (not b!58116) (not b!57914) (not b_lambda!2525) (not b!58468) (not d!11039) (not d!10937) (not d!11033) (not b!57966) (not d!10735) (not b!58017) (not b!58504) (not b!58042) (not d!10987) (not bm!4281) (not d!11187) (not b!58173) (not d!11005) (not d!11051) (not b!57940) (not b!58270) (not d!11107) (not bm!4297) (not d!10763) (not b!58394) (not d!10903) (not b!58425) (not d!10773) (not b!57990) (not d!10775) (not d!11143) (not b!57950) (not b!58056) (not bm!4203) (not b!57823) (not d!10965) (not d!11083) (not d!10977) (not d!10973) (not b_lambda!2565) (not b!58235) (not d!11011) (not b!57916) (not b!58511) (not b!57759) (not bm!4234) (not bm!4287) (not d!11055) (not d!11059) (not b!57935) (not d!11009) (not b!58460) (not bm!4224) (not d!10843) (not b!58014) (not b!58313) b_and!3537 (not b!58446) (not d!10829) (not d!11025) (not d!10961) (not b!58319) (not b!58269) (not b_lambda!2569) (not d!10921) (not b!58003) (not d!11105) (not b!58541) (not b!58268) (not d!10945) (not d!11041) (not b!58254) (not b!58391) (not d!10867) (not d!10817) (not d!11037) (not d!10925) (not b!58340) (not b!57864) (not b!58059) (not b!58217) (not b!58021) (not d!11101) (not b!58210) (not d!11169) (not b!58420) (not bm!4268) (not bm!4288) (not b!58160) (not b!58461) (not b!58090) (not b!58272) (not b!57954))
(check-sat b_and!3537 b_and!3539 (not b_next!1945) (not b_next!1947))
