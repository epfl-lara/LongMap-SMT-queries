; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!13964 () Bool)

(assert start!13964)

(declare-fun b!129373 () Bool)

(declare-fun b_free!2881 () Bool)

(declare-fun b_next!2881 () Bool)

(assert (=> b!129373 (= b_free!2881 (not b_next!2881))))

(declare-fun tp!11067 () Bool)

(declare-fun b_and!7997 () Bool)

(assert (=> b!129373 (= tp!11067 b_and!7997)))

(declare-fun b!129382 () Bool)

(declare-fun b_free!2883 () Bool)

(declare-fun b_next!2883 () Bool)

(assert (=> b!129382 (= b_free!2883 (not b_next!2883))))

(declare-fun tp!11066 () Bool)

(declare-fun b_and!7999 () Bool)

(assert (=> b!129382 (= tp!11066 b_and!7999)))

(declare-fun mapNonEmpty!4563 () Bool)

(declare-fun mapRes!4564 () Bool)

(declare-fun tp!11065 () Bool)

(declare-fun e!84432 () Bool)

(assert (=> mapNonEmpty!4563 (= mapRes!4564 (and tp!11065 e!84432))))

(declare-datatypes ((V!3457 0))(
  ( (V!3458 (val!1473 Int)) )
))
(declare-datatypes ((ValueCell!1085 0))(
  ( (ValueCellFull!1085 (v!3159 V!3457)) (EmptyCell!1085) )
))
(declare-fun mapValue!4563 () ValueCell!1085)

(declare-datatypes ((array!4721 0))(
  ( (array!4722 (arr!2234 (Array (_ BitVec 32) (_ BitVec 64))) (size!2500 (_ BitVec 32))) )
))
(declare-datatypes ((array!4723 0))(
  ( (array!4724 (arr!2235 (Array (_ BitVec 32) ValueCell!1085)) (size!2501 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!1078 0))(
  ( (LongMapFixedSize!1079 (defaultEntry!2823 Int) (mask!7101 (_ BitVec 32)) (extraKeys!2596 (_ BitVec 32)) (zeroValue!2682 V!3457) (minValue!2682 V!3457) (_size!588 (_ BitVec 32)) (_keys!4564 array!4721) (_values!2806 array!4723) (_vacant!588 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!870 0))(
  ( (Cell!871 (v!3160 LongMapFixedSize!1078)) )
))
(declare-datatypes ((LongMap!870 0))(
  ( (LongMap!871 (underlying!446 Cell!870)) )
))
(declare-fun thiss!992 () LongMap!870)

(declare-fun mapKey!4563 () (_ BitVec 32))

(declare-fun mapRest!4563 () (Array (_ BitVec 32) ValueCell!1085))

(assert (=> mapNonEmpty!4563 (= (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (store mapRest!4563 mapKey!4563 mapValue!4563))))

(declare-fun b!129372 () Bool)

(declare-fun res!62418 () Bool)

(declare-fun e!84427 () Bool)

(assert (=> b!129372 (=> (not res!62418) (not e!84427))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!129372 (= res!62418 (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun e!84426 () Bool)

(declare-fun e!84437 () Bool)

(declare-fun tp_is_empty!2857 () Bool)

(declare-fun array_inv!1399 (array!4721) Bool)

(declare-fun array_inv!1400 (array!4723) Bool)

(assert (=> b!129373 (= e!84437 (and tp!11067 tp_is_empty!2857 (array_inv!1399 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (array_inv!1400 (_values!2806 (v!3160 (underlying!446 thiss!992)))) e!84426))))

(declare-fun b!129374 () Bool)

(declare-fun e!84425 () Bool)

(assert (=> b!129374 (= e!84425 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4563 () Bool)

(declare-fun mapRes!4563 () Bool)

(assert (=> mapIsEmpty!4563 mapRes!4563))

(declare-fun b!129375 () Bool)

(declare-fun e!84429 () Bool)

(assert (=> b!129375 (= e!84426 (and e!84429 mapRes!4564))))

(declare-fun condMapEmpty!4563 () Bool)

(declare-fun mapDefault!4564 () ValueCell!1085)

(assert (=> b!129375 (= condMapEmpty!4563 (= (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4564)))))

(declare-fun b!129376 () Bool)

(declare-fun res!62417 () Bool)

(declare-fun e!84438 () Bool)

(assert (=> b!129376 (=> (not res!62417) (not e!84438))))

(declare-fun newMap!16 () LongMapFixedSize!1078)

(declare-fun valid!530 (LongMapFixedSize!1078) Bool)

(assert (=> b!129376 (= res!62417 (valid!530 newMap!16))))

(declare-fun b!129377 () Bool)

(declare-fun e!84436 () Bool)

(assert (=> b!129377 (= e!84436 tp_is_empty!2857)))

(declare-fun b!129378 () Bool)

(declare-fun e!84430 () Bool)

(assert (=> b!129378 (= e!84430 e!84427)))

(declare-fun res!62419 () Bool)

(assert (=> b!129378 (=> (not res!62419) (not e!84427))))

(declare-fun from!355 () (_ BitVec 32))

(declare-datatypes ((tuple2!2544 0))(
  ( (tuple2!2545 (_1!1283 (_ BitVec 64)) (_2!1283 V!3457)) )
))
(declare-datatypes ((List!1685 0))(
  ( (Nil!1682) (Cons!1681 (h!2285 tuple2!2544) (t!6076 List!1685)) )
))
(declare-datatypes ((ListLongMap!1643 0))(
  ( (ListLongMap!1644 (toList!837 List!1685)) )
))
(declare-fun lt!67103 () ListLongMap!1643)

(declare-fun contains!873 (ListLongMap!1643 (_ BitVec 64)) Bool)

(assert (=> b!129378 (= res!62419 (contains!873 lt!67103 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-datatypes ((tuple2!2546 0))(
  ( (tuple2!2547 (_1!1284 Bool) (_2!1284 LongMapFixedSize!1078)) )
))
(declare-fun lt!67104 () tuple2!2546)

(declare-fun update!191 (LongMapFixedSize!1078 (_ BitVec 64) V!3457) tuple2!2546)

(declare-fun get!1469 (ValueCell!1085 V!3457) V!3457)

(declare-fun dynLambda!421 (Int (_ BitVec 64)) V!3457)

(assert (=> b!129378 (= lt!67104 (update!191 newMap!16 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!129379 () Bool)

(assert (=> b!129379 (= e!84432 tp_is_empty!2857)))

(declare-fun res!62416 () Bool)

(assert (=> start!13964 (=> (not res!62416) (not e!84438))))

(declare-fun valid!531 (LongMap!870) Bool)

(assert (=> start!13964 (= res!62416 (valid!531 thiss!992))))

(assert (=> start!13964 e!84438))

(declare-fun e!84431 () Bool)

(assert (=> start!13964 e!84431))

(assert (=> start!13964 true))

(declare-fun e!84424 () Bool)

(assert (=> start!13964 e!84424))

(declare-fun b!129380 () Bool)

(declare-fun e!84428 () Bool)

(assert (=> b!129380 (= e!84431 e!84428)))

(declare-fun mapIsEmpty!4564 () Bool)

(assert (=> mapIsEmpty!4564 mapRes!4564))

(declare-fun b!129381 () Bool)

(assert (=> b!129381 (= e!84429 tp_is_empty!2857)))

(declare-fun e!84434 () Bool)

(assert (=> b!129382 (= e!84424 (and tp!11066 tp_is_empty!2857 (array_inv!1399 (_keys!4564 newMap!16)) (array_inv!1400 (_values!2806 newMap!16)) e!84434))))

(declare-fun b!129383 () Bool)

(assert (=> b!129383 (= e!84438 e!84430)))

(declare-fun res!62420 () Bool)

(assert (=> b!129383 (=> (not res!62420) (not e!84430))))

(declare-fun lt!67102 () ListLongMap!1643)

(assert (=> b!129383 (= res!62420 (and (= lt!67102 lt!67103) (not (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1389 (LongMapFixedSize!1078) ListLongMap!1643)

(assert (=> b!129383 (= lt!67103 (map!1389 newMap!16))))

(declare-fun getCurrentListMap!515 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) Int) ListLongMap!1643)

(assert (=> b!129383 (= lt!67102 (getCurrentListMap!515 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun mapNonEmpty!4564 () Bool)

(declare-fun tp!11068 () Bool)

(assert (=> mapNonEmpty!4564 (= mapRes!4563 (and tp!11068 e!84436))))

(declare-fun mapRest!4564 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapValue!4564 () ValueCell!1085)

(declare-fun mapKey!4564 () (_ BitVec 32))

(assert (=> mapNonEmpty!4564 (= (arr!2235 (_values!2806 newMap!16)) (store mapRest!4564 mapKey!4564 mapValue!4564))))

(declare-fun b!129384 () Bool)

(assert (=> b!129384 (= e!84434 (and e!84425 mapRes!4563))))

(declare-fun condMapEmpty!4564 () Bool)

(declare-fun mapDefault!4563 () ValueCell!1085)

(assert (=> b!129384 (= condMapEmpty!4564 (= (arr!2235 (_values!2806 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4563)))))

(declare-fun b!129385 () Bool)

(assert (=> b!129385 (= e!84428 e!84437)))

(declare-fun b!129386 () Bool)

(declare-fun res!62422 () Bool)

(assert (=> b!129386 (=> (not res!62422) (not e!84438))))

(assert (=> b!129386 (= res!62422 (bvsge (bvadd #b00000000000000000000000000000001 (mask!7101 newMap!16)) (_size!588 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!129387 () Bool)

(declare-fun res!62421 () Bool)

(assert (=> b!129387 (=> (not res!62421) (not e!84438))))

(assert (=> b!129387 (= res!62421 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!129388 () Bool)

(assert (=> b!129388 (= e!84427 (and (= (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!7101 (v!3160 (underlying!446 thiss!992))))) (= (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992))))) (bvsge (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000011)))))

(assert (= (and start!13964 res!62416) b!129387))

(assert (= (and b!129387 res!62421) b!129376))

(assert (= (and b!129376 res!62417) b!129386))

(assert (= (and b!129386 res!62422) b!129383))

(assert (= (and b!129383 res!62420) b!129378))

(assert (= (and b!129378 res!62419) b!129372))

(assert (= (and b!129372 res!62418) b!129388))

(assert (= (and b!129375 condMapEmpty!4563) mapIsEmpty!4564))

(assert (= (and b!129375 (not condMapEmpty!4563)) mapNonEmpty!4563))

(get-info :version)

(assert (= (and mapNonEmpty!4563 ((_ is ValueCellFull!1085) mapValue!4563)) b!129379))

(assert (= (and b!129375 ((_ is ValueCellFull!1085) mapDefault!4564)) b!129381))

(assert (= b!129373 b!129375))

(assert (= b!129385 b!129373))

(assert (= b!129380 b!129385))

(assert (= start!13964 b!129380))

(assert (= (and b!129384 condMapEmpty!4564) mapIsEmpty!4563))

(assert (= (and b!129384 (not condMapEmpty!4564)) mapNonEmpty!4564))

(assert (= (and mapNonEmpty!4564 ((_ is ValueCellFull!1085) mapValue!4564)) b!129377))

(assert (= (and b!129384 ((_ is ValueCellFull!1085) mapDefault!4563)) b!129374))

(assert (= b!129382 b!129384))

(assert (= start!13964 b!129382))

(declare-fun b_lambda!5751 () Bool)

(assert (=> (not b_lambda!5751) (not b!129378)))

(declare-fun t!6073 () Bool)

(declare-fun tb!2353 () Bool)

(assert (=> (and b!129373 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))) t!6073) tb!2353))

(declare-fun result!3897 () Bool)

(assert (=> tb!2353 (= result!3897 tp_is_empty!2857)))

(assert (=> b!129378 t!6073))

(declare-fun b_and!8001 () Bool)

(assert (= b_and!7997 (and (=> t!6073 result!3897) b_and!8001)))

(declare-fun tb!2355 () Bool)

(declare-fun t!6075 () Bool)

(assert (=> (and b!129382 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))) t!6075) tb!2355))

(declare-fun result!3901 () Bool)

(assert (= result!3901 result!3897))

(assert (=> b!129378 t!6075))

(declare-fun b_and!8003 () Bool)

(assert (= b_and!7999 (and (=> t!6075 result!3901) b_and!8003)))

(declare-fun m!152127 () Bool)

(assert (=> start!13964 m!152127))

(declare-fun m!152129 () Bool)

(assert (=> b!129383 m!152129))

(declare-fun m!152131 () Bool)

(assert (=> b!129383 m!152131))

(declare-fun m!152133 () Bool)

(assert (=> b!129383 m!152133))

(declare-fun m!152135 () Bool)

(assert (=> mapNonEmpty!4564 m!152135))

(declare-fun m!152137 () Bool)

(assert (=> mapNonEmpty!4563 m!152137))

(declare-fun m!152139 () Bool)

(assert (=> b!129382 m!152139))

(declare-fun m!152141 () Bool)

(assert (=> b!129382 m!152141))

(declare-fun m!152143 () Bool)

(assert (=> b!129373 m!152143))

(declare-fun m!152145 () Bool)

(assert (=> b!129373 m!152145))

(declare-fun m!152147 () Bool)

(assert (=> b!129378 m!152147))

(declare-fun m!152149 () Bool)

(assert (=> b!129378 m!152149))

(declare-fun m!152151 () Bool)

(assert (=> b!129378 m!152151))

(assert (=> b!129378 m!152129))

(assert (=> b!129378 m!152129))

(declare-fun m!152153 () Bool)

(assert (=> b!129378 m!152153))

(assert (=> b!129378 m!152149))

(assert (=> b!129378 m!152129))

(assert (=> b!129378 m!152151))

(declare-fun m!152155 () Bool)

(assert (=> b!129378 m!152155))

(assert (=> b!129378 m!152147))

(declare-fun m!152157 () Bool)

(assert (=> b!129372 m!152157))

(declare-fun m!152159 () Bool)

(assert (=> b!129376 m!152159))

(check-sat (not b!129383) (not b_next!2883) (not b_next!2881) b_and!8003 (not b!129378) tp_is_empty!2857 (not b!129373) (not b!129372) (not mapNonEmpty!4564) b_and!8001 (not b!129376) (not mapNonEmpty!4563) (not b_lambda!5751) (not start!13964) (not b!129382))
(check-sat b_and!8001 b_and!8003 (not b_next!2881) (not b_next!2883))
(get-model)

(declare-fun b_lambda!5757 () Bool)

(assert (= b_lambda!5751 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5757)))

(check-sat (not b!129383) (not b_next!2883) (not b_next!2881) b_and!8003 (not b!129378) tp_is_empty!2857 (not b!129373) (not b!129372) (not mapNonEmpty!4564) b_and!8001 (not mapNonEmpty!4563) (not start!13964) (not b!129382) (not b!129376) (not b_lambda!5757))
(check-sat b_and!8001 b_and!8003 (not b_next!2881) (not b_next!2883))
(get-model)

(declare-fun d!39421 () Bool)

(declare-fun res!62471 () Bool)

(declare-fun e!84531 () Bool)

(assert (=> d!39421 (=> (not res!62471) (not e!84531))))

(declare-fun simpleValid!89 (LongMapFixedSize!1078) Bool)

(assert (=> d!39421 (= res!62471 (simpleValid!89 newMap!16))))

(assert (=> d!39421 (= (valid!530 newMap!16) e!84531)))

(declare-fun b!129503 () Bool)

(declare-fun res!62472 () Bool)

(assert (=> b!129503 (=> (not res!62472) (not e!84531))))

(declare-fun arrayCountValidKeys!0 (array!4721 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!129503 (= res!62472 (= (arrayCountValidKeys!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (_size!588 newMap!16)))))

(declare-fun b!129504 () Bool)

(declare-fun res!62473 () Bool)

(assert (=> b!129504 (=> (not res!62473) (not e!84531))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4721 (_ BitVec 32)) Bool)

(assert (=> b!129504 (= res!62473 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!129505 () Bool)

(declare-datatypes ((List!1687 0))(
  ( (Nil!1684) (Cons!1683 (h!2287 (_ BitVec 64)) (t!6086 List!1687)) )
))
(declare-fun arrayNoDuplicates!0 (array!4721 (_ BitVec 32) List!1687) Bool)

(assert (=> b!129505 (= e!84531 (arrayNoDuplicates!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 Nil!1684))))

(assert (= (and d!39421 res!62471) b!129503))

(assert (= (and b!129503 res!62472) b!129504))

(assert (= (and b!129504 res!62473) b!129505))

(declare-fun m!152229 () Bool)

(assert (=> d!39421 m!152229))

(declare-fun m!152231 () Bool)

(assert (=> b!129503 m!152231))

(declare-fun m!152233 () Bool)

(assert (=> b!129504 m!152233))

(declare-fun m!152235 () Bool)

(assert (=> b!129505 m!152235))

(assert (=> b!129376 d!39421))

(declare-fun d!39423 () Bool)

(assert (=> d!39423 (= (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992)))) (and (or (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000001111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000011111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000001111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000011111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000001111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000011111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000001111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000011111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000001111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000011111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000001111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000011111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000001111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000011111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000001111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000011111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000111111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00001111111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00011111111111111111111111111111) (= (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!129372 d!39423))

(declare-fun d!39425 () Bool)

(assert (=> d!39425 (= (array_inv!1399 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvsge (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!129373 d!39425))

(declare-fun d!39427 () Bool)

(assert (=> d!39427 (= (array_inv!1400 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvsge (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!129373 d!39427))

(declare-fun d!39429 () Bool)

(assert (=> d!39429 (= (array_inv!1399 (_keys!4564 newMap!16)) (bvsge (size!2500 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129382 d!39429))

(declare-fun d!39431 () Bool)

(assert (=> d!39431 (= (array_inv!1400 (_values!2806 newMap!16)) (bvsge (size!2501 (_values!2806 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129382 d!39431))

(declare-fun d!39433 () Bool)

(declare-fun e!84536 () Bool)

(assert (=> d!39433 e!84536))

(declare-fun res!62476 () Bool)

(assert (=> d!39433 (=> res!62476 e!84536)))

(declare-fun lt!67131 () Bool)

(assert (=> d!39433 (= res!62476 (not lt!67131))))

(declare-fun lt!67133 () Bool)

(assert (=> d!39433 (= lt!67131 lt!67133)))

(declare-datatypes ((Unit!4042 0))(
  ( (Unit!4043) )
))
(declare-fun lt!67132 () Unit!4042)

(declare-fun e!84537 () Unit!4042)

(assert (=> d!39433 (= lt!67132 e!84537)))

(declare-fun c!23819 () Bool)

(assert (=> d!39433 (= c!23819 lt!67133)))

(declare-fun containsKey!173 (List!1685 (_ BitVec 64)) Bool)

(assert (=> d!39433 (= lt!67133 (containsKey!173 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39433 (= (contains!873 lt!67103 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67131)))

(declare-fun b!129512 () Bool)

(declare-fun lt!67134 () Unit!4042)

(assert (=> b!129512 (= e!84537 lt!67134)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!121 (List!1685 (_ BitVec 64)) Unit!4042)

(assert (=> b!129512 (= lt!67134 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-datatypes ((Option!176 0))(
  ( (Some!175 (v!3166 V!3457)) (None!174) )
))
(declare-fun isDefined!122 (Option!176) Bool)

(declare-fun getValueByKey!170 (List!1685 (_ BitVec 64)) Option!176)

(assert (=> b!129512 (isDefined!122 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129513 () Bool)

(declare-fun Unit!4044 () Unit!4042)

(assert (=> b!129513 (= e!84537 Unit!4044)))

(declare-fun b!129514 () Bool)

(assert (=> b!129514 (= e!84536 (isDefined!122 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (= (and d!39433 c!23819) b!129512))

(assert (= (and d!39433 (not c!23819)) b!129513))

(assert (= (and d!39433 (not res!62476)) b!129514))

(assert (=> d!39433 m!152129))

(declare-fun m!152237 () Bool)

(assert (=> d!39433 m!152237))

(assert (=> b!129512 m!152129))

(declare-fun m!152239 () Bool)

(assert (=> b!129512 m!152239))

(assert (=> b!129512 m!152129))

(declare-fun m!152241 () Bool)

(assert (=> b!129512 m!152241))

(assert (=> b!129512 m!152241))

(declare-fun m!152243 () Bool)

(assert (=> b!129512 m!152243))

(assert (=> b!129514 m!152129))

(assert (=> b!129514 m!152241))

(assert (=> b!129514 m!152241))

(assert (=> b!129514 m!152243))

(assert (=> b!129378 d!39433))

(declare-fun call!14058 () ListLongMap!1643)

(declare-fun b!129595 () Bool)

(declare-fun call!14061 () ListLongMap!1643)

(declare-fun e!84583 () Bool)

(declare-fun +!166 (ListLongMap!1643 tuple2!2544) ListLongMap!1643)

(assert (=> b!129595 (= e!84583 (= call!14061 (+!166 call!14058 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!14037 () Bool)

(declare-datatypes ((SeekEntryResult!266 0))(
  ( (MissingZero!266 (index!3221 (_ BitVec 32))) (Found!266 (index!3222 (_ BitVec 32))) (Intermediate!266 (undefined!1078 Bool) (index!3223 (_ BitVec 32)) (x!15261 (_ BitVec 32))) (Undefined!266) (MissingVacant!266 (index!3224 (_ BitVec 32))) )
))
(declare-fun call!14053 () SeekEntryResult!266)

(declare-fun call!14057 () SeekEntryResult!266)

(assert (=> bm!14037 (= call!14053 call!14057)))

(declare-fun b!129596 () Bool)

(declare-fun e!84590 () tuple2!2546)

(declare-fun e!84584 () tuple2!2546)

(assert (=> b!129596 (= e!84590 e!84584)))

(declare-fun c!23847 () Bool)

(declare-fun lt!67192 () SeekEntryResult!266)

(assert (=> b!129596 (= c!23847 ((_ is MissingZero!266) lt!67192))))

(declare-fun bm!14038 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4721 (_ BitVec 32)) SeekEntryResult!266)

(assert (=> bm!14038 (= call!14057 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!129597 () Bool)

(declare-fun e!84592 () ListLongMap!1643)

(declare-fun call!14060 () ListLongMap!1643)

(assert (=> b!129597 (= e!84592 call!14060)))

(declare-fun bm!14039 () Bool)

(declare-fun call!14055 () Bool)

(declare-fun call!14050 () Bool)

(assert (=> bm!14039 (= call!14055 call!14050)))

(declare-fun b!129598 () Bool)

(declare-fun lt!67206 () Unit!4042)

(declare-fun lt!67194 () Unit!4042)

(assert (=> b!129598 (= lt!67206 lt!67194)))

(declare-fun call!14059 () ListLongMap!1643)

(declare-fun call!14063 () ListLongMap!1643)

(assert (=> b!129598 (= call!14059 call!14063)))

(declare-fun lt!67215 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!58 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 V!3457 Int) Unit!4042)

(assert (=> b!129598 (= lt!67194 (lemmaChangeLongMinValueKeyThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(assert (=> b!129598 (= lt!67215 (bvor (extraKeys!2596 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!84593 () tuple2!2546)

(assert (=> b!129598 (= e!84593 (tuple2!2547 true (LongMapFixedSize!1079 (defaultEntry!2823 newMap!16) (mask!7101 newMap!16) (bvor (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!588 newMap!16) (_keys!4564 newMap!16) (_values!2806 newMap!16) (_vacant!588 newMap!16))))))

(declare-fun b!129599 () Bool)

(declare-fun e!84589 () Bool)

(declare-fun call!14049 () Bool)

(assert (=> b!129599 (= e!84589 (not call!14049))))

(declare-fun bm!14040 () Bool)

(declare-fun call!14062 () Bool)

(declare-fun call!14054 () Bool)

(assert (=> bm!14040 (= call!14062 call!14054)))

(declare-fun bm!14041 () Bool)

(declare-fun call!14056 () Bool)

(declare-fun call!14045 () Bool)

(assert (=> bm!14041 (= call!14056 call!14045)))

(declare-fun b!129600 () Bool)

(declare-fun c!23852 () Bool)

(declare-fun lt!67207 () SeekEntryResult!266)

(assert (=> b!129600 (= c!23852 ((_ is MissingVacant!266) lt!67207))))

(declare-fun e!84585 () Bool)

(declare-fun e!84598 () Bool)

(assert (=> b!129600 (= e!84585 e!84598)))

(declare-fun b!129601 () Bool)

(declare-fun res!62513 () Bool)

(assert (=> b!129601 (= res!62513 call!14050)))

(declare-fun e!84582 () Bool)

(assert (=> b!129601 (=> (not res!62513) (not e!84582))))

(declare-fun bm!14042 () Bool)

(assert (=> bm!14042 (= call!14058 (map!1389 newMap!16))))

(declare-fun bm!14043 () Bool)

(declare-fun call!14042 () Bool)

(assert (=> bm!14043 (= call!14050 call!14042)))

(declare-fun b!129602 () Bool)

(declare-fun e!84597 () Bool)

(declare-fun lt!67213 () SeekEntryResult!266)

(assert (=> b!129602 (= e!84597 ((_ is Undefined!266) lt!67213))))

(declare-fun b!129603 () Bool)

(declare-fun e!84581 () Bool)

(assert (=> b!129603 (= e!84581 (not call!14049))))

(declare-fun b!129604 () Bool)

(declare-fun e!84595 () Unit!4042)

(declare-fun Unit!4045 () Unit!4042)

(assert (=> b!129604 (= e!84595 Unit!4045)))

(declare-fun lt!67202 () Unit!4042)

(declare-fun call!14044 () Unit!4042)

(assert (=> b!129604 (= lt!67202 call!14044)))

(declare-fun lt!67196 () SeekEntryResult!266)

(assert (=> b!129604 (= lt!67196 call!14053)))

(declare-fun res!62505 () Bool)

(assert (=> b!129604 (= res!62505 ((_ is Found!266) lt!67196))))

(declare-fun e!84588 () Bool)

(assert (=> b!129604 (=> (not res!62505) (not e!84588))))

(assert (=> b!129604 e!84588))

(declare-fun lt!67201 () Unit!4042)

(assert (=> b!129604 (= lt!67201 lt!67202)))

(assert (=> b!129604 false))

(declare-fun b!129605 () Bool)

(declare-fun lt!67210 () tuple2!2546)

(declare-fun call!14048 () tuple2!2546)

(assert (=> b!129605 (= lt!67210 call!14048)))

(assert (=> b!129605 (= e!84584 (tuple2!2547 (_1!1284 lt!67210) (_2!1284 lt!67210)))))

(declare-fun bm!14044 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!58 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) Int) Unit!4042)

(assert (=> bm!14044 (= call!14044 (lemmaInListMapThenSeekEntryOrOpenFindsIt!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(declare-fun bm!14045 () Bool)

(declare-fun arrayContainsKey!0 (array!4721 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> bm!14045 (= call!14045 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!14046 () Bool)

(declare-fun c!23850 () Bool)

(declare-fun c!23855 () Bool)

(declare-fun lt!67200 () (_ BitVec 32))

(assert (=> bm!14046 (= call!14060 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun b!129606 () Bool)

(declare-fun res!62512 () Bool)

(assert (=> b!129606 (= res!62512 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67213)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!84586 () Bool)

(assert (=> b!129606 (=> (not res!62512) (not e!84586))))

(declare-fun b!129607 () Bool)

(declare-fun res!62509 () Bool)

(declare-fun e!84594 () Bool)

(assert (=> b!129607 (=> (not res!62509) (not e!84594))))

(assert (=> b!129607 (= res!62509 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67213)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129608 () Bool)

(declare-fun call!14041 () ListLongMap!1643)

(assert (=> b!129608 (= e!84592 call!14041)))

(declare-fun bm!14047 () Bool)

(assert (=> bm!14047 (= call!14049 call!14045)))

(declare-fun b!129609 () Bool)

(assert (=> b!129609 (= e!84597 e!84586)))

(declare-fun res!62507 () Bool)

(assert (=> b!129609 (= res!62507 call!14062)))

(assert (=> b!129609 (=> (not res!62507) (not e!84586))))

(declare-fun b!129610 () Bool)

(declare-fun lt!67195 () Unit!4042)

(declare-fun lt!67203 () Unit!4042)

(assert (=> b!129610 (= lt!67195 lt!67203)))

(declare-fun lt!67193 () array!4723)

(assert (=> b!129610 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!118 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) Int) Unit!4042)

(assert (=> b!129610 (= lt!67203 (lemmaValidKeyInArrayIsInListMap!118 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (defaultEntry!2823 newMap!16)))))

(assert (=> b!129610 (= lt!67193 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))))

(declare-fun lt!67211 () Unit!4042)

(declare-fun lt!67199 () Unit!4042)

(assert (=> b!129610 (= lt!67211 lt!67199)))

(declare-fun call!14051 () ListLongMap!1643)

(assert (=> b!129610 (= call!14051 call!14041)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!58 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) (_ BitVec 64) V!3457 Int) Unit!4042)

(assert (=> b!129610 (= lt!67199 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67212 () Unit!4042)

(declare-fun e!84591 () Unit!4042)

(assert (=> b!129610 (= lt!67212 e!84591)))

(declare-fun c!23858 () Bool)

(declare-fun call!14043 () Bool)

(assert (=> b!129610 (= c!23858 call!14043)))

(assert (=> b!129610 (= e!84584 (tuple2!2547 true (LongMapFixedSize!1079 (defaultEntry!2823 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (_size!588 newMap!16) (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (_vacant!588 newMap!16))))))

(declare-fun b!129611 () Bool)

(declare-fun res!62510 () Bool)

(assert (=> b!129611 (= res!62510 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67207)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129611 (=> (not res!62510) (not e!84581))))

(declare-fun b!129612 () Bool)

(declare-fun c!23853 () Bool)

(assert (=> b!129612 (= c!23853 ((_ is MissingVacant!266) lt!67192))))

(declare-fun e!84599 () tuple2!2546)

(assert (=> b!129612 (= e!84599 e!84590)))

(declare-fun bm!14048 () Bool)

(assert (=> bm!14048 (= call!14054 call!14042)))

(declare-fun b!129613 () Bool)

(declare-fun Unit!4046 () Unit!4042)

(assert (=> b!129613 (= e!84591 Unit!4046)))

(declare-fun lt!67209 () Unit!4042)

(declare-fun call!14046 () Unit!4042)

(assert (=> b!129613 (= lt!67209 call!14046)))

(declare-fun call!14052 () SeekEntryResult!266)

(assert (=> b!129613 (= lt!67207 call!14052)))

(declare-fun c!23856 () Bool)

(assert (=> b!129613 (= c!23856 ((_ is MissingZero!266) lt!67207))))

(assert (=> b!129613 e!84585))

(declare-fun lt!67189 () Unit!4042)

(assert (=> b!129613 (= lt!67189 lt!67209)))

(assert (=> b!129613 false))

(declare-fun b!129614 () Bool)

(assert (=> b!129614 (= e!84588 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67196)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129615 () Bool)

(declare-fun lt!67205 () Unit!4042)

(assert (=> b!129615 (= e!84595 lt!67205)))

(assert (=> b!129615 (= lt!67205 call!14046)))

(assert (=> b!129615 (= lt!67213 call!14053)))

(declare-fun c!23854 () Bool)

(assert (=> b!129615 (= c!23854 ((_ is MissingZero!266) lt!67213))))

(declare-fun e!84580 () Bool)

(assert (=> b!129615 e!84580))

(declare-fun b!129616 () Bool)

(declare-fun lt!67190 () Unit!4042)

(assert (=> b!129616 (= e!84591 lt!67190)))

(assert (=> b!129616 (= lt!67190 call!14044)))

(declare-fun lt!67197 () SeekEntryResult!266)

(assert (=> b!129616 (= lt!67197 call!14052)))

(declare-fun res!62511 () Bool)

(assert (=> b!129616 (= res!62511 ((_ is Found!266) lt!67197))))

(assert (=> b!129616 (=> (not res!62511) (not e!84582))))

(assert (=> b!129616 e!84582))

(declare-fun b!129617 () Bool)

(declare-fun lt!67208 () Unit!4042)

(declare-fun lt!67214 () Unit!4042)

(assert (=> b!129617 (= lt!67208 lt!67214)))

(assert (=> b!129617 (= call!14059 call!14063)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!58 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 V!3457 Int) Unit!4042)

(assert (=> b!129617 (= lt!67214 (lemmaChangeZeroKeyThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67200 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) (defaultEntry!2823 newMap!16)))))

(assert (=> b!129617 (= lt!67200 (bvor (extraKeys!2596 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!129617 (= e!84593 (tuple2!2547 true (LongMapFixedSize!1079 (defaultEntry!2823 newMap!16) (mask!7101 newMap!16) (bvor (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) (_size!588 newMap!16) (_keys!4564 newMap!16) (_values!2806 newMap!16) (_vacant!588 newMap!16))))))

(declare-fun bm!14049 () Bool)

(assert (=> bm!14049 (= call!14063 call!14060)))

(declare-fun b!129618 () Bool)

(declare-fun res!62506 () Bool)

(assert (=> b!129618 (=> (not res!62506) (not e!84589))))

(assert (=> b!129618 (= res!62506 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67207)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129619 () Bool)

(declare-fun e!84587 () Bool)

(declare-fun e!84596 () Bool)

(assert (=> b!129619 (= e!84587 e!84596)))

(declare-fun c!23851 () Bool)

(declare-fun lt!67191 () tuple2!2546)

(assert (=> b!129619 (= c!23851 (_1!1284 lt!67191))))

(declare-fun bm!14050 () Bool)

(assert (=> bm!14050 (= call!14061 (map!1389 (_2!1284 lt!67191)))))

(declare-fun b!129620 () Bool)

(declare-fun lt!67198 () tuple2!2546)

(assert (=> b!129620 (= e!84590 (tuple2!2547 (_1!1284 lt!67198) (_2!1284 lt!67198)))))

(assert (=> b!129620 (= lt!67198 call!14048)))

(declare-fun bm!14051 () Bool)

(assert (=> bm!14051 (= call!14052 call!14057)))

(declare-fun b!129621 () Bool)

(declare-fun lt!67204 () Unit!4042)

(assert (=> b!129621 (= lt!67204 e!84595)))

(declare-fun c!23857 () Bool)

(assert (=> b!129621 (= c!23857 call!14043)))

(assert (=> b!129621 (= e!84599 (tuple2!2547 false newMap!16))))

(declare-fun bm!14052 () Bool)

(declare-fun call!14040 () ListLongMap!1643)

(assert (=> bm!14052 (= call!14051 (+!166 (ite c!23855 call!14040 call!14060) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!129622 () Bool)

(assert (=> b!129622 (= e!84586 (not call!14056))))

(declare-fun bm!14053 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!58 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) Int) Unit!4042)

(assert (=> bm!14053 (= call!14046 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(declare-fun b!129623 () Bool)

(declare-fun e!84600 () tuple2!2546)

(assert (=> b!129623 (= e!84600 e!84599)))

(assert (=> b!129623 (= lt!67192 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun c!23846 () Bool)

(assert (=> b!129623 (= c!23846 ((_ is Undefined!266) lt!67192))))

(declare-fun b!129624 () Bool)

(assert (=> b!129624 (= e!84598 ((_ is Undefined!266) lt!67207))))

(declare-fun b!129625 () Bool)

(declare-fun res!62515 () Bool)

(assert (=> b!129625 (= res!62515 call!14054)))

(assert (=> b!129625 (=> (not res!62515) (not e!84588))))

(declare-fun bm!14054 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!14054 (= call!14042 (inRange!0 (ite c!23846 (ite c!23857 (index!3222 lt!67196) (ite c!23854 (index!3221 lt!67213) (index!3224 lt!67213))) (ite c!23858 (index!3222 lt!67197) (ite c!23856 (index!3221 lt!67207) (index!3224 lt!67207)))) (mask!7101 newMap!16)))))

(declare-fun b!129626 () Bool)

(assert (=> b!129626 (= e!84598 e!84581)))

(declare-fun res!62517 () Bool)

(assert (=> b!129626 (= res!62517 call!14055)))

(assert (=> b!129626 (=> (not res!62517) (not e!84581))))

(declare-fun b!129627 () Bool)

(assert (=> b!129627 (= e!84582 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67197)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129628 () Bool)

(declare-fun res!62516 () Bool)

(assert (=> b!129628 (=> (not res!62516) (not e!84594))))

(assert (=> b!129628 (= res!62516 call!14062)))

(assert (=> b!129628 (= e!84580 e!84594)))

(declare-fun bm!14055 () Bool)

(declare-fun call!14047 () ListLongMap!1643)

(assert (=> bm!14055 (= call!14041 call!14047)))

(declare-fun bm!14056 () Bool)

(assert (=> bm!14056 (= call!14040 call!14047)))

(declare-fun b!129629 () Bool)

(declare-fun res!62508 () Bool)

(assert (=> b!129629 (=> (not res!62508) (not e!84589))))

(assert (=> b!129629 (= res!62508 call!14055)))

(assert (=> b!129629 (= e!84585 e!84589)))

(declare-fun bm!14057 () Bool)

(declare-fun updateHelperNewKey!58 (LongMapFixedSize!1078 (_ BitVec 64) V!3457 (_ BitVec 32)) tuple2!2546)

(assert (=> bm!14057 (= call!14048 (updateHelperNewKey!58 newMap!16 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(declare-fun bm!14058 () Bool)

(declare-fun c!23849 () Bool)

(assert (=> bm!14058 (= c!23849 c!23846)))

(assert (=> bm!14058 (= call!14043 (contains!873 e!84592 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129630 () Bool)

(assert (=> b!129630 (= e!84596 e!84583)))

(declare-fun res!62514 () Bool)

(assert (=> b!129630 (= res!62514 (contains!873 call!14061 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!129630 (=> (not res!62514) (not e!84583))))

(declare-fun d!39435 () Bool)

(assert (=> d!39435 e!84587))

(declare-fun res!62518 () Bool)

(assert (=> d!39435 (=> (not res!62518) (not e!84587))))

(assert (=> d!39435 (= res!62518 (valid!530 (_2!1284 lt!67191)))))

(assert (=> d!39435 (= lt!67191 e!84600)))

(assert (=> d!39435 (= c!23855 (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvneg (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39435 (valid!530 newMap!16)))

(assert (=> d!39435 (= (update!191 newMap!16 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!67191)))

(declare-fun b!129631 () Bool)

(assert (=> b!129631 (= e!84594 (not call!14056))))

(declare-fun b!129632 () Bool)

(declare-fun c!23848 () Bool)

(assert (=> b!129632 (= c!23848 ((_ is MissingVacant!266) lt!67213))))

(assert (=> b!129632 (= e!84580 e!84597)))

(declare-fun bm!14059 () Bool)

(assert (=> bm!14059 (= call!14047 (getCurrentListMap!515 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun b!129633 () Bool)

(assert (=> b!129633 (= e!84596 (= call!14061 call!14058))))

(declare-fun b!129634 () Bool)

(assert (=> b!129634 (= e!84600 e!84593)))

(assert (=> b!129634 (= c!23850 (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14060 () Bool)

(assert (=> bm!14060 (= call!14059 call!14051)))

(assert (= (and d!39435 c!23855) b!129634))

(assert (= (and d!39435 (not c!23855)) b!129623))

(assert (= (and b!129634 c!23850) b!129617))

(assert (= (and b!129634 (not c!23850)) b!129598))

(assert (= (or b!129617 b!129598) bm!14049))

(assert (= (or b!129617 b!129598) bm!14056))

(assert (= (or b!129617 b!129598) bm!14060))

(assert (= (and b!129623 c!23846) b!129621))

(assert (= (and b!129623 (not c!23846)) b!129612))

(assert (= (and b!129621 c!23857) b!129604))

(assert (= (and b!129621 (not c!23857)) b!129615))

(assert (= (and b!129604 res!62505) b!129625))

(assert (= (and b!129625 res!62515) b!129614))

(assert (= (and b!129615 c!23854) b!129628))

(assert (= (and b!129615 (not c!23854)) b!129632))

(assert (= (and b!129628 res!62516) b!129607))

(assert (= (and b!129607 res!62509) b!129631))

(assert (= (and b!129632 c!23848) b!129609))

(assert (= (and b!129632 (not c!23848)) b!129602))

(assert (= (and b!129609 res!62507) b!129606))

(assert (= (and b!129606 res!62512) b!129622))

(assert (= (or b!129628 b!129609) bm!14040))

(assert (= (or b!129631 b!129622) bm!14041))

(assert (= (or b!129625 bm!14040) bm!14048))

(assert (= (or b!129604 b!129615) bm!14037))

(assert (= (and b!129612 c!23853) b!129620))

(assert (= (and b!129612 (not c!23853)) b!129596))

(assert (= (and b!129596 c!23847) b!129605))

(assert (= (and b!129596 (not c!23847)) b!129610))

(assert (= (and b!129610 c!23858) b!129616))

(assert (= (and b!129610 (not c!23858)) b!129613))

(assert (= (and b!129616 res!62511) b!129601))

(assert (= (and b!129601 res!62513) b!129627))

(assert (= (and b!129613 c!23856) b!129629))

(assert (= (and b!129613 (not c!23856)) b!129600))

(assert (= (and b!129629 res!62508) b!129618))

(assert (= (and b!129618 res!62506) b!129599))

(assert (= (and b!129600 c!23852) b!129626))

(assert (= (and b!129600 (not c!23852)) b!129624))

(assert (= (and b!129626 res!62517) b!129611))

(assert (= (and b!129611 res!62510) b!129603))

(assert (= (or b!129629 b!129626) bm!14039))

(assert (= (or b!129599 b!129603) bm!14047))

(assert (= (or b!129601 bm!14039) bm!14043))

(assert (= (or b!129616 b!129613) bm!14051))

(assert (= (or b!129620 b!129605) bm!14057))

(assert (= (or bm!14041 bm!14047) bm!14045))

(assert (= (or b!129615 b!129613) bm!14053))

(assert (= (or b!129604 b!129616) bm!14044))

(assert (= (or bm!14037 bm!14051) bm!14038))

(assert (= (or bm!14048 bm!14043) bm!14054))

(assert (= (or b!129621 b!129610) bm!14055))

(assert (= (or b!129621 b!129610) bm!14058))

(assert (= (and bm!14058 c!23849) b!129608))

(assert (= (and bm!14058 (not c!23849)) b!129597))

(assert (= (or bm!14056 bm!14055) bm!14059))

(assert (= (or bm!14049 b!129597 b!129610) bm!14046))

(assert (= (or bm!14060 b!129610) bm!14052))

(assert (= (and d!39435 res!62518) b!129619))

(assert (= (and b!129619 c!23851) b!129630))

(assert (= (and b!129619 (not c!23851)) b!129633))

(assert (= (and b!129630 res!62514) b!129595))

(assert (= (or b!129595 b!129633) bm!14042))

(assert (= (or b!129630 b!129595 b!129633) bm!14050))

(assert (=> bm!14038 m!152129))

(declare-fun m!152245 () Bool)

(assert (=> bm!14038 m!152245))

(assert (=> bm!14045 m!152129))

(declare-fun m!152247 () Bool)

(assert (=> bm!14045 m!152247))

(assert (=> b!129630 m!152129))

(declare-fun m!152249 () Bool)

(assert (=> b!129630 m!152249))

(declare-fun m!152251 () Bool)

(assert (=> b!129607 m!152251))

(declare-fun m!152253 () Bool)

(assert (=> bm!14052 m!152253))

(declare-fun m!152255 () Bool)

(assert (=> b!129618 m!152255))

(declare-fun m!152257 () Bool)

(assert (=> bm!14059 m!152257))

(declare-fun m!152259 () Bool)

(assert (=> bm!14059 m!152259))

(assert (=> bm!14058 m!152129))

(declare-fun m!152261 () Bool)

(assert (=> bm!14058 m!152261))

(declare-fun m!152263 () Bool)

(assert (=> b!129611 m!152263))

(declare-fun m!152265 () Bool)

(assert (=> b!129627 m!152265))

(assert (=> bm!14044 m!152129))

(declare-fun m!152267 () Bool)

(assert (=> bm!14044 m!152267))

(declare-fun m!152269 () Bool)

(assert (=> b!129595 m!152269))

(assert (=> bm!14042 m!152131))

(declare-fun m!152271 () Bool)

(assert (=> bm!14054 m!152271))

(assert (=> b!129598 m!152151))

(declare-fun m!152273 () Bool)

(assert (=> b!129598 m!152273))

(declare-fun m!152275 () Bool)

(assert (=> d!39435 m!152275))

(assert (=> d!39435 m!152159))

(declare-fun m!152277 () Bool)

(assert (=> bm!14050 m!152277))

(declare-fun m!152279 () Bool)

(assert (=> b!129610 m!152279))

(declare-fun m!152281 () Bool)

(assert (=> b!129610 m!152281))

(declare-fun m!152283 () Bool)

(assert (=> b!129610 m!152283))

(assert (=> b!129610 m!152257))

(assert (=> b!129610 m!152129))

(assert (=> b!129610 m!152151))

(declare-fun m!152285 () Bool)

(assert (=> b!129610 m!152285))

(assert (=> b!129610 m!152281))

(declare-fun m!152287 () Bool)

(assert (=> b!129610 m!152287))

(assert (=> b!129610 m!152279))

(declare-fun m!152289 () Bool)

(assert (=> b!129614 m!152289))

(assert (=> bm!14057 m!152129))

(assert (=> bm!14057 m!152151))

(declare-fun m!152291 () Bool)

(assert (=> bm!14057 m!152291))

(assert (=> b!129623 m!152129))

(assert (=> b!129623 m!152245))

(assert (=> b!129617 m!152151))

(declare-fun m!152293 () Bool)

(assert (=> b!129617 m!152293))

(declare-fun m!152295 () Bool)

(assert (=> b!129606 m!152295))

(assert (=> bm!14053 m!152129))

(declare-fun m!152297 () Bool)

(assert (=> bm!14053 m!152297))

(declare-fun m!152299 () Bool)

(assert (=> bm!14046 m!152299))

(assert (=> b!129378 d!39435))

(declare-fun d!39437 () Bool)

(declare-fun c!23861 () Bool)

(assert (=> d!39437 (= c!23861 ((_ is ValueCellFull!1085) (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun e!84603 () V!3457)

(assert (=> d!39437 (= (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!84603)))

(declare-fun b!129639 () Bool)

(declare-fun get!1471 (ValueCell!1085 V!3457) V!3457)

(assert (=> b!129639 (= e!84603 (get!1471 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!129640 () Bool)

(declare-fun get!1472 (ValueCell!1085 V!3457) V!3457)

(assert (=> b!129640 (= e!84603 (get!1472 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39437 c!23861) b!129639))

(assert (= (and d!39437 (not c!23861)) b!129640))

(assert (=> b!129639 m!152147))

(assert (=> b!129639 m!152149))

(declare-fun m!152301 () Bool)

(assert (=> b!129639 m!152301))

(assert (=> b!129640 m!152147))

(assert (=> b!129640 m!152149))

(declare-fun m!152303 () Bool)

(assert (=> b!129640 m!152303))

(assert (=> b!129378 d!39437))

(declare-fun d!39439 () Bool)

(assert (=> d!39439 (= (valid!531 thiss!992) (valid!530 (v!3160 (underlying!446 thiss!992))))))

(declare-fun bs!5383 () Bool)

(assert (= bs!5383 d!39439))

(declare-fun m!152305 () Bool)

(assert (=> bs!5383 m!152305))

(assert (=> start!13964 d!39439))

(declare-fun d!39441 () Bool)

(assert (=> d!39441 (= (map!1389 newMap!16) (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun bs!5384 () Bool)

(assert (= bs!5384 d!39441))

(declare-fun m!152307 () Bool)

(assert (=> bs!5384 m!152307))

(assert (=> b!129383 d!39441))

(declare-fun b!129683 () Bool)

(declare-fun e!84636 () Unit!4042)

(declare-fun Unit!4047 () Unit!4042)

(assert (=> b!129683 (= e!84636 Unit!4047)))

(declare-fun b!129684 () Bool)

(declare-fun e!84632 () ListLongMap!1643)

(declare-fun call!14080 () ListLongMap!1643)

(assert (=> b!129684 (= e!84632 (+!166 call!14080 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!129685 () Bool)

(declare-fun e!84642 () Bool)

(declare-fun lt!67261 () ListLongMap!1643)

(declare-fun apply!113 (ListLongMap!1643 (_ BitVec 64)) V!3457)

(assert (=> b!129685 (= e!84642 (= (apply!113 lt!67261 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!129686 () Bool)

(declare-fun e!84639 () ListLongMap!1643)

(declare-fun call!14079 () ListLongMap!1643)

(assert (=> b!129686 (= e!84639 call!14079)))

(declare-fun b!129687 () Bool)

(declare-fun e!84633 () Bool)

(assert (=> b!129687 (= e!84633 e!84642)))

(declare-fun res!62537 () Bool)

(declare-fun call!14082 () Bool)

(assert (=> b!129687 (= res!62537 call!14082)))

(assert (=> b!129687 (=> (not res!62537) (not e!84642))))

(declare-fun b!129688 () Bool)

(declare-fun e!84638 () Bool)

(assert (=> b!129688 (= e!84638 (= (apply!113 lt!67261 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129688 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> b!129688 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!129689 () Bool)

(declare-fun e!84635 () Bool)

(assert (=> b!129689 (= e!84635 e!84633)))

(declare-fun c!23879 () Bool)

(assert (=> b!129689 (= c!23879 (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14075 () Bool)

(declare-fun call!14083 () ListLongMap!1643)

(declare-fun getCurrentListMapNoExtraKeys!133 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) Int) ListLongMap!1643)

(assert (=> bm!14075 (= call!14083 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun d!39443 () Bool)

(assert (=> d!39443 e!84635))

(declare-fun res!62539 () Bool)

(assert (=> d!39443 (=> (not res!62539) (not e!84635))))

(assert (=> d!39443 (= res!62539 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun lt!67281 () ListLongMap!1643)

(assert (=> d!39443 (= lt!67261 lt!67281)))

(declare-fun lt!67273 () Unit!4042)

(assert (=> d!39443 (= lt!67273 e!84636)))

(declare-fun c!23878 () Bool)

(declare-fun e!84640 () Bool)

(assert (=> d!39443 (= c!23878 e!84640)))

(declare-fun res!62541 () Bool)

(assert (=> d!39443 (=> (not res!62541) (not e!84640))))

(assert (=> d!39443 (= res!62541 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39443 (= lt!67281 e!84632)))

(declare-fun c!23875 () Bool)

(assert (=> d!39443 (= c!23875 (and (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39443 (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992))))))

(assert (=> d!39443 (= (getCurrentListMap!515 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))) lt!67261)))

(declare-fun b!129690 () Bool)

(declare-fun e!84641 () Bool)

(assert (=> b!129690 (= e!84641 (= (apply!113 lt!67261 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!129691 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!129691 (= e!84640 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!14076 () Bool)

(declare-fun call!14084 () ListLongMap!1643)

(declare-fun call!14081 () ListLongMap!1643)

(assert (=> bm!14076 (= call!14084 call!14081)))

(declare-fun b!129692 () Bool)

(declare-fun lt!67266 () Unit!4042)

(assert (=> b!129692 (= e!84636 lt!67266)))

(declare-fun lt!67267 () ListLongMap!1643)

(assert (=> b!129692 (= lt!67267 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun lt!67262 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67262 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67274 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67274 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!67275 () Unit!4042)

(declare-fun addStillContains!89 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> b!129692 (= lt!67275 (addStillContains!89 lt!67267 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67274))))

(assert (=> b!129692 (contains!873 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67274)))

(declare-fun lt!67280 () Unit!4042)

(assert (=> b!129692 (= lt!67280 lt!67275)))

(declare-fun lt!67260 () ListLongMap!1643)

(assert (=> b!129692 (= lt!67260 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun lt!67268 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67268 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67279 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67279 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!67264 () Unit!4042)

(declare-fun addApplyDifferent!89 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> b!129692 (= lt!67264 (addApplyDifferent!89 lt!67260 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67279))))

(assert (=> b!129692 (= (apply!113 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67279) (apply!113 lt!67260 lt!67279))))

(declare-fun lt!67276 () Unit!4042)

(assert (=> b!129692 (= lt!67276 lt!67264)))

(declare-fun lt!67269 () ListLongMap!1643)

(assert (=> b!129692 (= lt!67269 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun lt!67278 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67278 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67263 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67263 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!67270 () Unit!4042)

(assert (=> b!129692 (= lt!67270 (addApplyDifferent!89 lt!67269 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67263))))

(assert (=> b!129692 (= (apply!113 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67263) (apply!113 lt!67269 lt!67263))))

(declare-fun lt!67271 () Unit!4042)

(assert (=> b!129692 (= lt!67271 lt!67270)))

(declare-fun lt!67277 () ListLongMap!1643)

(assert (=> b!129692 (= lt!67277 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun lt!67265 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67265 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67272 () (_ BitVec 64))

(assert (=> b!129692 (= lt!67272 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!129692 (= lt!67266 (addApplyDifferent!89 lt!67277 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67272))))

(assert (=> b!129692 (= (apply!113 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67272) (apply!113 lt!67277 lt!67272))))

(declare-fun b!129693 () Bool)

(declare-fun res!62545 () Bool)

(assert (=> b!129693 (=> (not res!62545) (not e!84635))))

(declare-fun e!84630 () Bool)

(assert (=> b!129693 (= res!62545 e!84630)))

(declare-fun c!23877 () Bool)

(assert (=> b!129693 (= c!23877 (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!129694 () Bool)

(declare-fun res!62542 () Bool)

(assert (=> b!129694 (=> (not res!62542) (not e!84635))))

(declare-fun e!84631 () Bool)

(assert (=> b!129694 (= res!62542 e!84631)))

(declare-fun res!62543 () Bool)

(assert (=> b!129694 (=> res!62543 e!84631)))

(declare-fun e!84634 () Bool)

(assert (=> b!129694 (= res!62543 (not e!84634))))

(declare-fun res!62544 () Bool)

(assert (=> b!129694 (=> (not res!62544) (not e!84634))))

(assert (=> b!129694 (= res!62544 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun bm!14077 () Bool)

(declare-fun call!14078 () Bool)

(assert (=> bm!14077 (= call!14078 (contains!873 lt!67261 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!23874 () Bool)

(declare-fun bm!14078 () Bool)

(assert (=> bm!14078 (= call!14080 (+!166 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun bm!14079 () Bool)

(assert (=> bm!14079 (= call!14081 call!14083)))

(declare-fun b!129695 () Bool)

(declare-fun e!84637 () ListLongMap!1643)

(assert (=> b!129695 (= e!84637 call!14079)))

(declare-fun b!129696 () Bool)

(assert (=> b!129696 (= e!84634 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!14080 () Bool)

(assert (=> bm!14080 (= call!14079 call!14080)))

(declare-fun b!129697 () Bool)

(assert (=> b!129697 (= e!84633 (not call!14082))))

(declare-fun b!129698 () Bool)

(declare-fun c!23876 () Bool)

(assert (=> b!129698 (= c!23876 (and (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!129698 (= e!84639 e!84637)))

(declare-fun b!129699 () Bool)

(assert (=> b!129699 (= e!84630 (not call!14078))))

(declare-fun b!129700 () Bool)

(assert (=> b!129700 (= e!84630 e!84641)))

(declare-fun res!62540 () Bool)

(assert (=> b!129700 (= res!62540 call!14078)))

(assert (=> b!129700 (=> (not res!62540) (not e!84641))))

(declare-fun b!129701 () Bool)

(assert (=> b!129701 (= e!84632 e!84639)))

(assert (=> b!129701 (= c!23874 (and (not (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14081 () Bool)

(assert (=> bm!14081 (= call!14082 (contains!873 lt!67261 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129702 () Bool)

(assert (=> b!129702 (= e!84637 call!14084)))

(declare-fun b!129703 () Bool)

(assert (=> b!129703 (= e!84631 e!84638)))

(declare-fun res!62538 () Bool)

(assert (=> b!129703 (=> (not res!62538) (not e!84638))))

(assert (=> b!129703 (= res!62538 (contains!873 lt!67261 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!129703 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39443 c!23875) b!129684))

(assert (= (and d!39443 (not c!23875)) b!129701))

(assert (= (and b!129701 c!23874) b!129686))

(assert (= (and b!129701 (not c!23874)) b!129698))

(assert (= (and b!129698 c!23876) b!129695))

(assert (= (and b!129698 (not c!23876)) b!129702))

(assert (= (or b!129695 b!129702) bm!14076))

(assert (= (or b!129686 bm!14076) bm!14079))

(assert (= (or b!129686 b!129695) bm!14080))

(assert (= (or b!129684 bm!14079) bm!14075))

(assert (= (or b!129684 bm!14080) bm!14078))

(assert (= (and d!39443 res!62541) b!129691))

(assert (= (and d!39443 c!23878) b!129692))

(assert (= (and d!39443 (not c!23878)) b!129683))

(assert (= (and d!39443 res!62539) b!129694))

(assert (= (and b!129694 res!62544) b!129696))

(assert (= (and b!129694 (not res!62543)) b!129703))

(assert (= (and b!129703 res!62538) b!129688))

(assert (= (and b!129694 res!62542) b!129693))

(assert (= (and b!129693 c!23877) b!129700))

(assert (= (and b!129693 (not c!23877)) b!129699))

(assert (= (and b!129700 res!62540) b!129690))

(assert (= (or b!129700 b!129699) bm!14077))

(assert (= (and b!129693 res!62545) b!129689))

(assert (= (and b!129689 c!23879) b!129687))

(assert (= (and b!129689 (not c!23879)) b!129697))

(assert (= (and b!129687 res!62537) b!129685))

(assert (= (or b!129687 b!129697) bm!14081))

(declare-fun b_lambda!5759 () Bool)

(assert (=> (not b_lambda!5759) (not b!129688)))

(assert (=> b!129688 t!6073))

(declare-fun b_and!8021 () Bool)

(assert (= b_and!8001 (and (=> t!6073 result!3897) b_and!8021)))

(assert (=> b!129688 t!6075))

(declare-fun b_and!8023 () Bool)

(assert (= b_and!8003 (and (=> t!6075 result!3901) b_and!8023)))

(declare-fun m!152309 () Bool)

(assert (=> b!129685 m!152309))

(declare-fun m!152311 () Bool)

(assert (=> bm!14075 m!152311))

(declare-fun m!152313 () Bool)

(assert (=> b!129684 m!152313))

(assert (=> d!39443 m!152157))

(declare-fun m!152315 () Bool)

(assert (=> b!129703 m!152315))

(assert (=> b!129703 m!152315))

(declare-fun m!152317 () Bool)

(assert (=> b!129703 m!152317))

(assert (=> b!129691 m!152315))

(assert (=> b!129691 m!152315))

(declare-fun m!152319 () Bool)

(assert (=> b!129691 m!152319))

(declare-fun m!152321 () Bool)

(assert (=> b!129692 m!152321))

(declare-fun m!152323 () Bool)

(assert (=> b!129692 m!152323))

(declare-fun m!152325 () Bool)

(assert (=> b!129692 m!152325))

(assert (=> b!129692 m!152315))

(declare-fun m!152327 () Bool)

(assert (=> b!129692 m!152327))

(declare-fun m!152329 () Bool)

(assert (=> b!129692 m!152329))

(declare-fun m!152331 () Bool)

(assert (=> b!129692 m!152331))

(declare-fun m!152333 () Bool)

(assert (=> b!129692 m!152333))

(assert (=> b!129692 m!152323))

(declare-fun m!152335 () Bool)

(assert (=> b!129692 m!152335))

(declare-fun m!152337 () Bool)

(assert (=> b!129692 m!152337))

(assert (=> b!129692 m!152311))

(assert (=> b!129692 m!152335))

(declare-fun m!152339 () Bool)

(assert (=> b!129692 m!152339))

(declare-fun m!152341 () Bool)

(assert (=> b!129692 m!152341))

(assert (=> b!129692 m!152329))

(declare-fun m!152343 () Bool)

(assert (=> b!129692 m!152343))

(declare-fun m!152345 () Bool)

(assert (=> b!129692 m!152345))

(declare-fun m!152347 () Bool)

(assert (=> b!129692 m!152347))

(declare-fun m!152349 () Bool)

(assert (=> b!129692 m!152349))

(assert (=> b!129692 m!152331))

(declare-fun m!152351 () Bool)

(assert (=> bm!14077 m!152351))

(assert (=> b!129696 m!152315))

(assert (=> b!129696 m!152315))

(assert (=> b!129696 m!152319))

(declare-fun m!152353 () Bool)

(assert (=> b!129690 m!152353))

(assert (=> b!129688 m!152315))

(declare-fun m!152355 () Bool)

(assert (=> b!129688 m!152355))

(assert (=> b!129688 m!152149))

(declare-fun m!152357 () Bool)

(assert (=> b!129688 m!152357))

(assert (=> b!129688 m!152315))

(declare-fun m!152359 () Bool)

(assert (=> b!129688 m!152359))

(assert (=> b!129688 m!152149))

(assert (=> b!129688 m!152355))

(declare-fun m!152361 () Bool)

(assert (=> bm!14078 m!152361))

(declare-fun m!152363 () Bool)

(assert (=> bm!14081 m!152363))

(assert (=> b!129383 d!39443))

(declare-fun b!129711 () Bool)

(declare-fun e!84647 () Bool)

(assert (=> b!129711 (= e!84647 tp_is_empty!2857)))

(declare-fun b!129710 () Bool)

(declare-fun e!84648 () Bool)

(assert (=> b!129710 (= e!84648 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4579 () Bool)

(declare-fun mapRes!4579 () Bool)

(assert (=> mapIsEmpty!4579 mapRes!4579))

(declare-fun mapNonEmpty!4579 () Bool)

(declare-fun tp!11095 () Bool)

(assert (=> mapNonEmpty!4579 (= mapRes!4579 (and tp!11095 e!84648))))

(declare-fun mapRest!4579 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapKey!4579 () (_ BitVec 32))

(declare-fun mapValue!4579 () ValueCell!1085)

(assert (=> mapNonEmpty!4579 (= mapRest!4563 (store mapRest!4579 mapKey!4579 mapValue!4579))))

(declare-fun condMapEmpty!4579 () Bool)

(declare-fun mapDefault!4579 () ValueCell!1085)

(assert (=> mapNonEmpty!4563 (= condMapEmpty!4579 (= mapRest!4563 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4579)))))

(assert (=> mapNonEmpty!4563 (= tp!11065 (and e!84647 mapRes!4579))))

(assert (= (and mapNonEmpty!4563 condMapEmpty!4579) mapIsEmpty!4579))

(assert (= (and mapNonEmpty!4563 (not condMapEmpty!4579)) mapNonEmpty!4579))

(assert (= (and mapNonEmpty!4579 ((_ is ValueCellFull!1085) mapValue!4579)) b!129710))

(assert (= (and mapNonEmpty!4563 ((_ is ValueCellFull!1085) mapDefault!4579)) b!129711))

(declare-fun m!152365 () Bool)

(assert (=> mapNonEmpty!4579 m!152365))

(declare-fun b!129713 () Bool)

(declare-fun e!84649 () Bool)

(assert (=> b!129713 (= e!84649 tp_is_empty!2857)))

(declare-fun b!129712 () Bool)

(declare-fun e!84650 () Bool)

(assert (=> b!129712 (= e!84650 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4580 () Bool)

(declare-fun mapRes!4580 () Bool)

(assert (=> mapIsEmpty!4580 mapRes!4580))

(declare-fun mapNonEmpty!4580 () Bool)

(declare-fun tp!11096 () Bool)

(assert (=> mapNonEmpty!4580 (= mapRes!4580 (and tp!11096 e!84650))))

(declare-fun mapRest!4580 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapKey!4580 () (_ BitVec 32))

(declare-fun mapValue!4580 () ValueCell!1085)

(assert (=> mapNonEmpty!4580 (= mapRest!4564 (store mapRest!4580 mapKey!4580 mapValue!4580))))

(declare-fun condMapEmpty!4580 () Bool)

(declare-fun mapDefault!4580 () ValueCell!1085)

(assert (=> mapNonEmpty!4564 (= condMapEmpty!4580 (= mapRest!4564 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4580)))))

(assert (=> mapNonEmpty!4564 (= tp!11068 (and e!84649 mapRes!4580))))

(assert (= (and mapNonEmpty!4564 condMapEmpty!4580) mapIsEmpty!4580))

(assert (= (and mapNonEmpty!4564 (not condMapEmpty!4580)) mapNonEmpty!4580))

(assert (= (and mapNonEmpty!4580 ((_ is ValueCellFull!1085) mapValue!4580)) b!129712))

(assert (= (and mapNonEmpty!4564 ((_ is ValueCellFull!1085) mapDefault!4580)) b!129713))

(declare-fun m!152367 () Bool)

(assert (=> mapNonEmpty!4580 m!152367))

(declare-fun b_lambda!5761 () Bool)

(assert (= b_lambda!5759 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5761)))

(check-sat (not b!129512) (not bm!14042) (not b!129692) (not bm!14059) (not d!39433) (not b!129505) (not d!39435) (not b!129514) (not b!129504) (not bm!14077) (not bm!14046) (not d!39441) (not b_next!2883) (not b!129503) (not bm!14052) (not b!129690) (not bm!14053) (not b!129696) (not bm!14054) (not d!39439) (not b!129685) (not b!129691) (not b!129688) (not b_next!2881) (not b!129610) (not b!129630) (not bm!14038) b_and!8023 (not b!129640) (not bm!14075) (not bm!14081) (not mapNonEmpty!4580) (not mapNonEmpty!4579) (not bm!14057) tp_is_empty!2857 (not b!129703) (not d!39421) (not b!129623) (not bm!14044) (not bm!14050) (not bm!14078) b_and!8021 (not b!129639) (not b_lambda!5761) (not b!129617) (not bm!14058) (not d!39443) (not b!129684) (not b!129595) (not b!129598) (not bm!14045) (not b_lambda!5757))
(check-sat b_and!8021 b_and!8023 (not b_next!2881) (not b_next!2883))
(get-model)

(declare-fun d!39445 () Bool)

(declare-fun res!62550 () Bool)

(declare-fun e!84655 () Bool)

(assert (=> d!39445 (=> res!62550 e!84655)))

(assert (=> d!39445 (= res!62550 (= (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39445 (= (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000) e!84655)))

(declare-fun b!129718 () Bool)

(declare-fun e!84656 () Bool)

(assert (=> b!129718 (= e!84655 e!84656)))

(declare-fun res!62551 () Bool)

(assert (=> b!129718 (=> (not res!62551) (not e!84656))))

(assert (=> b!129718 (= res!62551 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129719 () Bool)

(assert (=> b!129719 (= e!84656 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!39445 (not res!62550)) b!129718))

(assert (= (and b!129718 res!62551) b!129719))

(declare-fun m!152369 () Bool)

(assert (=> d!39445 m!152369))

(assert (=> b!129719 m!152129))

(declare-fun m!152371 () Bool)

(assert (=> b!129719 m!152371))

(assert (=> bm!14045 d!39445))

(declare-fun d!39447 () Bool)

(declare-fun e!84657 () Bool)

(assert (=> d!39447 e!84657))

(declare-fun res!62552 () Bool)

(assert (=> d!39447 (=> res!62552 e!84657)))

(declare-fun lt!67282 () Bool)

(assert (=> d!39447 (= res!62552 (not lt!67282))))

(declare-fun lt!67284 () Bool)

(assert (=> d!39447 (= lt!67282 lt!67284)))

(declare-fun lt!67283 () Unit!4042)

(declare-fun e!84658 () Unit!4042)

(assert (=> d!39447 (= lt!67283 e!84658)))

(declare-fun c!23880 () Bool)

(assert (=> d!39447 (= c!23880 lt!67284)))

(assert (=> d!39447 (= lt!67284 (containsKey!173 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!39447 (= (contains!873 lt!67261 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!67282)))

(declare-fun b!129720 () Bool)

(declare-fun lt!67285 () Unit!4042)

(assert (=> b!129720 (= e!84658 lt!67285)))

(assert (=> b!129720 (= lt!67285 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!129720 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!129721 () Bool)

(declare-fun Unit!4048 () Unit!4042)

(assert (=> b!129721 (= e!84658 Unit!4048)))

(declare-fun b!129722 () Bool)

(assert (=> b!129722 (= e!84657 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!39447 c!23880) b!129720))

(assert (= (and d!39447 (not c!23880)) b!129721))

(assert (= (and d!39447 (not res!62552)) b!129722))

(assert (=> d!39447 m!152315))

(declare-fun m!152373 () Bool)

(assert (=> d!39447 m!152373))

(assert (=> b!129720 m!152315))

(declare-fun m!152375 () Bool)

(assert (=> b!129720 m!152375))

(assert (=> b!129720 m!152315))

(declare-fun m!152377 () Bool)

(assert (=> b!129720 m!152377))

(assert (=> b!129720 m!152377))

(declare-fun m!152379 () Bool)

(assert (=> b!129720 m!152379))

(assert (=> b!129722 m!152315))

(assert (=> b!129722 m!152377))

(assert (=> b!129722 m!152377))

(assert (=> b!129722 m!152379))

(assert (=> b!129703 d!39447))

(declare-fun d!39449 () Bool)

(declare-fun get!1473 (Option!176) V!3457)

(assert (=> d!39449 (= (apply!113 lt!67261 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1473 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5385 () Bool)

(assert (= bs!5385 d!39449))

(assert (=> bs!5385 m!152315))

(assert (=> bs!5385 m!152377))

(assert (=> bs!5385 m!152377))

(declare-fun m!152381 () Bool)

(assert (=> bs!5385 m!152381))

(assert (=> b!129688 d!39449))

(declare-fun d!39451 () Bool)

(declare-fun c!23881 () Bool)

(assert (=> d!39451 (= c!23881 ((_ is ValueCellFull!1085) (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!84659 () V!3457)

(assert (=> d!39451 (= (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!84659)))

(declare-fun b!129723 () Bool)

(assert (=> b!129723 (= e!84659 (get!1471 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!129724 () Bool)

(assert (=> b!129724 (= e!84659 (get!1472 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39451 c!23881) b!129723))

(assert (= (and d!39451 (not c!23881)) b!129724))

(assert (=> b!129723 m!152355))

(assert (=> b!129723 m!152149))

(declare-fun m!152383 () Bool)

(assert (=> b!129723 m!152383))

(assert (=> b!129724 m!152355))

(assert (=> b!129724 m!152149))

(declare-fun m!152385 () Bool)

(assert (=> b!129724 m!152385))

(assert (=> b!129688 d!39451))

(declare-fun d!39453 () Bool)

(declare-fun e!84662 () Bool)

(assert (=> d!39453 e!84662))

(declare-fun res!62557 () Bool)

(assert (=> d!39453 (=> (not res!62557) (not e!84662))))

(declare-fun lt!67291 () SeekEntryResult!266)

(assert (=> d!39453 (= res!62557 ((_ is Found!266) lt!67291))))

(assert (=> d!39453 (= lt!67291 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun lt!67290 () Unit!4042)

(declare-fun choose!793 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) Int) Unit!4042)

(assert (=> d!39453 (= lt!67290 (choose!793 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39453 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39453 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)) lt!67290)))

(declare-fun b!129729 () Bool)

(declare-fun res!62558 () Bool)

(assert (=> b!129729 (=> (not res!62558) (not e!84662))))

(assert (=> b!129729 (= res!62558 (inRange!0 (index!3222 lt!67291) (mask!7101 newMap!16)))))

(declare-fun b!129730 () Bool)

(assert (=> b!129730 (= e!84662 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67291)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!129730 (and (bvsge (index!3222 lt!67291) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67291) (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39453 res!62557) b!129729))

(assert (= (and b!129729 res!62558) b!129730))

(assert (=> d!39453 m!152129))

(assert (=> d!39453 m!152245))

(assert (=> d!39453 m!152129))

(declare-fun m!152387 () Bool)

(assert (=> d!39453 m!152387))

(declare-fun m!152389 () Bool)

(assert (=> d!39453 m!152389))

(declare-fun m!152391 () Bool)

(assert (=> b!129729 m!152391))

(declare-fun m!152393 () Bool)

(assert (=> b!129730 m!152393))

(assert (=> bm!14044 d!39453))

(declare-fun b!129731 () Bool)

(declare-fun e!84669 () Unit!4042)

(declare-fun Unit!4049 () Unit!4042)

(assert (=> b!129731 (= e!84669 Unit!4049)))

(declare-fun b!129732 () Bool)

(declare-fun e!84665 () ListLongMap!1643)

(declare-fun call!14087 () ListLongMap!1643)

(assert (=> b!129732 (= e!84665 (+!166 call!14087 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!129733 () Bool)

(declare-fun e!84675 () Bool)

(declare-fun lt!67293 () ListLongMap!1643)

(assert (=> b!129733 (= e!84675 (= (apply!113 lt!67293 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!129734 () Bool)

(declare-fun e!84672 () ListLongMap!1643)

(declare-fun call!14086 () ListLongMap!1643)

(assert (=> b!129734 (= e!84672 call!14086)))

(declare-fun b!129735 () Bool)

(declare-fun e!84666 () Bool)

(assert (=> b!129735 (= e!84666 e!84675)))

(declare-fun res!62559 () Bool)

(declare-fun call!14089 () Bool)

(assert (=> b!129735 (= res!62559 call!14089)))

(assert (=> b!129735 (=> (not res!62559) (not e!84675))))

(declare-fun e!84671 () Bool)

(declare-fun b!129736 () Bool)

(assert (=> b!129736 (= e!84671 (= (apply!113 lt!67293 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129736 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))))))))

(assert (=> b!129736 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129737 () Bool)

(declare-fun e!84668 () Bool)

(assert (=> b!129737 (= e!84668 e!84666)))

(declare-fun c!23887 () Bool)

(assert (=> b!129737 (= c!23887 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!14090 () ListLongMap!1643)

(declare-fun bm!14082 () Bool)

(assert (=> bm!14082 (= call!14090 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39455 () Bool)

(assert (=> d!39455 e!84668))

(declare-fun res!62561 () Bool)

(assert (=> d!39455 (=> (not res!62561) (not e!84668))))

(assert (=> d!39455 (= res!62561 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67313 () ListLongMap!1643)

(assert (=> d!39455 (= lt!67293 lt!67313)))

(declare-fun lt!67305 () Unit!4042)

(assert (=> d!39455 (= lt!67305 e!84669)))

(declare-fun c!23886 () Bool)

(declare-fun e!84673 () Bool)

(assert (=> d!39455 (= c!23886 e!84673)))

(declare-fun res!62563 () Bool)

(assert (=> d!39455 (=> (not res!62563) (not e!84673))))

(assert (=> d!39455 (= res!62563 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39455 (= lt!67313 e!84665)))

(declare-fun c!23883 () Bool)

(assert (=> d!39455 (= c!23883 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39455 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39455 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67293)))

(declare-fun b!129738 () Bool)

(declare-fun e!84674 () Bool)

(assert (=> b!129738 (= e!84674 (= (apply!113 lt!67293 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!129739 () Bool)

(assert (=> b!129739 (= e!84673 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14083 () Bool)

(declare-fun call!14091 () ListLongMap!1643)

(declare-fun call!14088 () ListLongMap!1643)

(assert (=> bm!14083 (= call!14091 call!14088)))

(declare-fun b!129740 () Bool)

(declare-fun lt!67298 () Unit!4042)

(assert (=> b!129740 (= e!84669 lt!67298)))

(declare-fun lt!67299 () ListLongMap!1643)

(assert (=> b!129740 (= lt!67299 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67294 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67294 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67306 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67306 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67307 () Unit!4042)

(assert (=> b!129740 (= lt!67307 (addStillContains!89 lt!67299 lt!67294 (zeroValue!2682 newMap!16) lt!67306))))

(assert (=> b!129740 (contains!873 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) lt!67306)))

(declare-fun lt!67312 () Unit!4042)

(assert (=> b!129740 (= lt!67312 lt!67307)))

(declare-fun lt!67292 () ListLongMap!1643)

(assert (=> b!129740 (= lt!67292 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67300 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67300 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67311 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67311 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67296 () Unit!4042)

(assert (=> b!129740 (= lt!67296 (addApplyDifferent!89 lt!67292 lt!67300 (minValue!2682 newMap!16) lt!67311))))

(assert (=> b!129740 (= (apply!113 (+!166 lt!67292 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) lt!67311) (apply!113 lt!67292 lt!67311))))

(declare-fun lt!67308 () Unit!4042)

(assert (=> b!129740 (= lt!67308 lt!67296)))

(declare-fun lt!67301 () ListLongMap!1643)

(assert (=> b!129740 (= lt!67301 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67310 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67310 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67295 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67295 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67302 () Unit!4042)

(assert (=> b!129740 (= lt!67302 (addApplyDifferent!89 lt!67301 lt!67310 (zeroValue!2682 newMap!16) lt!67295))))

(assert (=> b!129740 (= (apply!113 (+!166 lt!67301 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) lt!67295) (apply!113 lt!67301 lt!67295))))

(declare-fun lt!67303 () Unit!4042)

(assert (=> b!129740 (= lt!67303 lt!67302)))

(declare-fun lt!67309 () ListLongMap!1643)

(assert (=> b!129740 (= lt!67309 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67297 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67297 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67304 () (_ BitVec 64))

(assert (=> b!129740 (= lt!67304 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129740 (= lt!67298 (addApplyDifferent!89 lt!67309 lt!67297 (minValue!2682 newMap!16) lt!67304))))

(assert (=> b!129740 (= (apply!113 (+!166 lt!67309 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) lt!67304) (apply!113 lt!67309 lt!67304))))

(declare-fun b!129741 () Bool)

(declare-fun res!62567 () Bool)

(assert (=> b!129741 (=> (not res!62567) (not e!84668))))

(declare-fun e!84663 () Bool)

(assert (=> b!129741 (= res!62567 e!84663)))

(declare-fun c!23885 () Bool)

(assert (=> b!129741 (= c!23885 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!129742 () Bool)

(declare-fun res!62564 () Bool)

(assert (=> b!129742 (=> (not res!62564) (not e!84668))))

(declare-fun e!84664 () Bool)

(assert (=> b!129742 (= res!62564 e!84664)))

(declare-fun res!62565 () Bool)

(assert (=> b!129742 (=> res!62565 e!84664)))

(declare-fun e!84667 () Bool)

(assert (=> b!129742 (= res!62565 (not e!84667))))

(declare-fun res!62566 () Bool)

(assert (=> b!129742 (=> (not res!62566) (not e!84667))))

(assert (=> b!129742 (= res!62566 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14084 () Bool)

(declare-fun call!14085 () Bool)

(assert (=> bm!14084 (= call!14085 (contains!873 lt!67293 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!23882 () Bool)

(declare-fun bm!14085 () Bool)

(assert (=> bm!14085 (= call!14087 (+!166 (ite c!23883 call!14090 (ite c!23882 call!14088 call!14091)) (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14086 () Bool)

(assert (=> bm!14086 (= call!14088 call!14090)))

(declare-fun b!129743 () Bool)

(declare-fun e!84670 () ListLongMap!1643)

(assert (=> b!129743 (= e!84670 call!14086)))

(declare-fun b!129744 () Bool)

(assert (=> b!129744 (= e!84667 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14087 () Bool)

(assert (=> bm!14087 (= call!14086 call!14087)))

(declare-fun b!129745 () Bool)

(assert (=> b!129745 (= e!84666 (not call!14089))))

(declare-fun b!129746 () Bool)

(declare-fun c!23884 () Bool)

(assert (=> b!129746 (= c!23884 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!129746 (= e!84672 e!84670)))

(declare-fun b!129747 () Bool)

(assert (=> b!129747 (= e!84663 (not call!14085))))

(declare-fun b!129748 () Bool)

(assert (=> b!129748 (= e!84663 e!84674)))

(declare-fun res!62562 () Bool)

(assert (=> b!129748 (= res!62562 call!14085)))

(assert (=> b!129748 (=> (not res!62562) (not e!84674))))

(declare-fun b!129749 () Bool)

(assert (=> b!129749 (= e!84665 e!84672)))

(assert (=> b!129749 (= c!23882 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14088 () Bool)

(assert (=> bm!14088 (= call!14089 (contains!873 lt!67293 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129750 () Bool)

(assert (=> b!129750 (= e!84670 call!14091)))

(declare-fun b!129751 () Bool)

(assert (=> b!129751 (= e!84664 e!84671)))

(declare-fun res!62560 () Bool)

(assert (=> b!129751 (=> (not res!62560) (not e!84671))))

(assert (=> b!129751 (= res!62560 (contains!873 lt!67293 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!129751 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39455 c!23883) b!129732))

(assert (= (and d!39455 (not c!23883)) b!129749))

(assert (= (and b!129749 c!23882) b!129734))

(assert (= (and b!129749 (not c!23882)) b!129746))

(assert (= (and b!129746 c!23884) b!129743))

(assert (= (and b!129746 (not c!23884)) b!129750))

(assert (= (or b!129743 b!129750) bm!14083))

(assert (= (or b!129734 bm!14083) bm!14086))

(assert (= (or b!129734 b!129743) bm!14087))

(assert (= (or b!129732 bm!14086) bm!14082))

(assert (= (or b!129732 bm!14087) bm!14085))

(assert (= (and d!39455 res!62563) b!129739))

(assert (= (and d!39455 c!23886) b!129740))

(assert (= (and d!39455 (not c!23886)) b!129731))

(assert (= (and d!39455 res!62561) b!129742))

(assert (= (and b!129742 res!62566) b!129744))

(assert (= (and b!129742 (not res!62565)) b!129751))

(assert (= (and b!129751 res!62560) b!129736))

(assert (= (and b!129742 res!62564) b!129741))

(assert (= (and b!129741 c!23885) b!129748))

(assert (= (and b!129741 (not c!23885)) b!129747))

(assert (= (and b!129748 res!62562) b!129738))

(assert (= (or b!129748 b!129747) bm!14084))

(assert (= (and b!129741 res!62567) b!129737))

(assert (= (and b!129737 c!23887) b!129735))

(assert (= (and b!129737 (not c!23887)) b!129745))

(assert (= (and b!129735 res!62559) b!129733))

(assert (= (or b!129735 b!129745) bm!14088))

(declare-fun b_lambda!5763 () Bool)

(assert (=> (not b_lambda!5763) (not b!129736)))

(declare-fun tb!2365 () Bool)

(declare-fun t!6088 () Bool)

(assert (=> (and b!129373 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16)) t!6088) tb!2365))

(declare-fun result!3917 () Bool)

(assert (=> tb!2365 (= result!3917 tp_is_empty!2857)))

(assert (=> b!129736 t!6088))

(declare-fun b_and!8025 () Bool)

(assert (= b_and!8021 (and (=> t!6088 result!3917) b_and!8025)))

(declare-fun t!6090 () Bool)

(declare-fun tb!2367 () Bool)

(assert (=> (and b!129382 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 newMap!16)) t!6090) tb!2367))

(declare-fun result!3919 () Bool)

(assert (= result!3919 result!3917))

(assert (=> b!129736 t!6090))

(declare-fun b_and!8027 () Bool)

(assert (= b_and!8023 (and (=> t!6090 result!3919) b_and!8027)))

(declare-fun m!152395 () Bool)

(assert (=> b!129733 m!152395))

(declare-fun m!152397 () Bool)

(assert (=> bm!14082 m!152397))

(declare-fun m!152399 () Bool)

(assert (=> b!129732 m!152399))

(assert (=> d!39455 m!152389))

(assert (=> b!129751 m!152369))

(assert (=> b!129751 m!152369))

(declare-fun m!152401 () Bool)

(assert (=> b!129751 m!152401))

(assert (=> b!129739 m!152369))

(assert (=> b!129739 m!152369))

(declare-fun m!152403 () Bool)

(assert (=> b!129739 m!152403))

(declare-fun m!152405 () Bool)

(assert (=> b!129740 m!152405))

(declare-fun m!152407 () Bool)

(assert (=> b!129740 m!152407))

(declare-fun m!152409 () Bool)

(assert (=> b!129740 m!152409))

(assert (=> b!129740 m!152369))

(declare-fun m!152411 () Bool)

(assert (=> b!129740 m!152411))

(declare-fun m!152413 () Bool)

(assert (=> b!129740 m!152413))

(declare-fun m!152415 () Bool)

(assert (=> b!129740 m!152415))

(declare-fun m!152417 () Bool)

(assert (=> b!129740 m!152417))

(assert (=> b!129740 m!152407))

(declare-fun m!152419 () Bool)

(assert (=> b!129740 m!152419))

(declare-fun m!152421 () Bool)

(assert (=> b!129740 m!152421))

(assert (=> b!129740 m!152397))

(assert (=> b!129740 m!152419))

(declare-fun m!152423 () Bool)

(assert (=> b!129740 m!152423))

(declare-fun m!152425 () Bool)

(assert (=> b!129740 m!152425))

(assert (=> b!129740 m!152413))

(declare-fun m!152427 () Bool)

(assert (=> b!129740 m!152427))

(declare-fun m!152429 () Bool)

(assert (=> b!129740 m!152429))

(declare-fun m!152431 () Bool)

(assert (=> b!129740 m!152431))

(declare-fun m!152433 () Bool)

(assert (=> b!129740 m!152433))

(assert (=> b!129740 m!152415))

(declare-fun m!152435 () Bool)

(assert (=> bm!14084 m!152435))

(assert (=> b!129744 m!152369))

(assert (=> b!129744 m!152369))

(assert (=> b!129744 m!152403))

(declare-fun m!152437 () Bool)

(assert (=> b!129738 m!152437))

(assert (=> b!129736 m!152369))

(declare-fun m!152439 () Bool)

(assert (=> b!129736 m!152439))

(declare-fun m!152441 () Bool)

(assert (=> b!129736 m!152441))

(declare-fun m!152443 () Bool)

(assert (=> b!129736 m!152443))

(assert (=> b!129736 m!152369))

(declare-fun m!152445 () Bool)

(assert (=> b!129736 m!152445))

(assert (=> b!129736 m!152441))

(assert (=> b!129736 m!152439))

(declare-fun m!152447 () Bool)

(assert (=> bm!14085 m!152447))

(declare-fun m!152449 () Bool)

(assert (=> bm!14088 m!152449))

(assert (=> bm!14059 d!39455))

(declare-fun d!39457 () Bool)

(declare-fun res!62568 () Bool)

(declare-fun e!84676 () Bool)

(assert (=> d!39457 (=> (not res!62568) (not e!84676))))

(assert (=> d!39457 (= res!62568 (simpleValid!89 (_2!1284 lt!67191)))))

(assert (=> d!39457 (= (valid!530 (_2!1284 lt!67191)) e!84676)))

(declare-fun b!129752 () Bool)

(declare-fun res!62569 () Bool)

(assert (=> b!129752 (=> (not res!62569) (not e!84676))))

(assert (=> b!129752 (= res!62569 (= (arrayCountValidKeys!0 (_keys!4564 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))) (_size!588 (_2!1284 lt!67191))))))

(declare-fun b!129753 () Bool)

(declare-fun res!62570 () Bool)

(assert (=> b!129753 (=> (not res!62570) (not e!84676))))

(assert (=> b!129753 (= res!62570 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191))))))

(declare-fun b!129754 () Bool)

(assert (=> b!129754 (= e!84676 (arrayNoDuplicates!0 (_keys!4564 (_2!1284 lt!67191)) #b00000000000000000000000000000000 Nil!1684))))

(assert (= (and d!39457 res!62568) b!129752))

(assert (= (and b!129752 res!62569) b!129753))

(assert (= (and b!129753 res!62570) b!129754))

(declare-fun m!152451 () Bool)

(assert (=> d!39457 m!152451))

(declare-fun m!152453 () Bool)

(assert (=> b!129752 m!152453))

(declare-fun m!152455 () Bool)

(assert (=> b!129753 m!152455))

(declare-fun m!152457 () Bool)

(assert (=> b!129754 m!152457))

(assert (=> d!39435 d!39457))

(assert (=> d!39435 d!39421))

(declare-fun d!39459 () Bool)

(declare-fun e!84677 () Bool)

(assert (=> d!39459 e!84677))

(declare-fun res!62571 () Bool)

(assert (=> d!39459 (=> res!62571 e!84677)))

(declare-fun lt!67314 () Bool)

(assert (=> d!39459 (= res!62571 (not lt!67314))))

(declare-fun lt!67316 () Bool)

(assert (=> d!39459 (= lt!67314 lt!67316)))

(declare-fun lt!67315 () Unit!4042)

(declare-fun e!84678 () Unit!4042)

(assert (=> d!39459 (= lt!67315 e!84678)))

(declare-fun c!23888 () Bool)

(assert (=> d!39459 (= c!23888 lt!67316)))

(assert (=> d!39459 (= lt!67316 (containsKey!173 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39459 (= (contains!873 lt!67261 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67314)))

(declare-fun b!129755 () Bool)

(declare-fun lt!67317 () Unit!4042)

(assert (=> b!129755 (= e!84678 lt!67317)))

(assert (=> b!129755 (= lt!67317 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129755 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129756 () Bool)

(declare-fun Unit!4050 () Unit!4042)

(assert (=> b!129756 (= e!84678 Unit!4050)))

(declare-fun b!129757 () Bool)

(assert (=> b!129757 (= e!84677 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39459 c!23888) b!129755))

(assert (= (and d!39459 (not c!23888)) b!129756))

(assert (= (and d!39459 (not res!62571)) b!129757))

(declare-fun m!152459 () Bool)

(assert (=> d!39459 m!152459))

(declare-fun m!152461 () Bool)

(assert (=> b!129755 m!152461))

(declare-fun m!152463 () Bool)

(assert (=> b!129755 m!152463))

(assert (=> b!129755 m!152463))

(declare-fun m!152465 () Bool)

(assert (=> b!129755 m!152465))

(assert (=> b!129757 m!152463))

(assert (=> b!129757 m!152463))

(assert (=> b!129757 m!152465))

(assert (=> bm!14081 d!39459))

(declare-fun d!39461 () Bool)

(assert (=> d!39461 (= (map!1389 (_2!1284 lt!67191)) (getCurrentListMap!515 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun bs!5386 () Bool)

(assert (= bs!5386 d!39461))

(declare-fun m!152467 () Bool)

(assert (=> bs!5386 m!152467))

(assert (=> bm!14050 d!39461))

(declare-fun d!39463 () Bool)

(declare-fun e!84681 () Bool)

(assert (=> d!39463 e!84681))

(declare-fun res!62577 () Bool)

(assert (=> d!39463 (=> (not res!62577) (not e!84681))))

(declare-fun lt!67327 () ListLongMap!1643)

(assert (=> d!39463 (= res!62577 (contains!873 lt!67327 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67328 () List!1685)

(assert (=> d!39463 (= lt!67327 (ListLongMap!1644 lt!67328))))

(declare-fun lt!67329 () Unit!4042)

(declare-fun lt!67326 () Unit!4042)

(assert (=> d!39463 (= lt!67329 lt!67326)))

(assert (=> d!39463 (= (getValueByKey!170 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!85 (List!1685 (_ BitVec 64) V!3457) Unit!4042)

(assert (=> d!39463 (= lt!67326 (lemmaContainsTupThenGetReturnValue!85 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun insertStrictlySorted!88 (List!1685 (_ BitVec 64) V!3457) List!1685)

(assert (=> d!39463 (= lt!67328 (insertStrictlySorted!88 (toList!837 call!14058) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39463 (= (+!166 call!14058 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67327)))

(declare-fun b!129762 () Bool)

(declare-fun res!62576 () Bool)

(assert (=> b!129762 (=> (not res!62576) (not e!84681))))

(assert (=> b!129762 (= res!62576 (= (getValueByKey!170 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!129763 () Bool)

(declare-fun contains!875 (List!1685 tuple2!2544) Bool)

(assert (=> b!129763 (= e!84681 (contains!875 (toList!837 lt!67327) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39463 res!62577) b!129762))

(assert (= (and b!129762 res!62576) b!129763))

(declare-fun m!152469 () Bool)

(assert (=> d!39463 m!152469))

(declare-fun m!152471 () Bool)

(assert (=> d!39463 m!152471))

(declare-fun m!152473 () Bool)

(assert (=> d!39463 m!152473))

(declare-fun m!152475 () Bool)

(assert (=> d!39463 m!152475))

(declare-fun m!152477 () Bool)

(assert (=> b!129762 m!152477))

(declare-fun m!152479 () Bool)

(assert (=> b!129763 m!152479))

(assert (=> b!129595 d!39463))

(declare-fun d!39465 () Bool)

(declare-fun e!84682 () Bool)

(assert (=> d!39465 e!84682))

(declare-fun res!62579 () Bool)

(assert (=> d!39465 (=> (not res!62579) (not e!84682))))

(declare-fun lt!67331 () ListLongMap!1643)

(assert (=> d!39465 (= res!62579 (contains!873 lt!67331 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!67332 () List!1685)

(assert (=> d!39465 (= lt!67331 (ListLongMap!1644 lt!67332))))

(declare-fun lt!67333 () Unit!4042)

(declare-fun lt!67330 () Unit!4042)

(assert (=> d!39465 (= lt!67333 lt!67330)))

(assert (=> d!39465 (= (getValueByKey!170 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!175 (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39465 (= lt!67330 (lemmaContainsTupThenGetReturnValue!85 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39465 (= lt!67332 (insertStrictlySorted!88 (toList!837 (ite c!23855 call!14040 call!14060)) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39465 (= (+!166 (ite c!23855 call!14040 call!14060) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!67331)))

(declare-fun b!129764 () Bool)

(declare-fun res!62578 () Bool)

(assert (=> b!129764 (=> (not res!62578) (not e!84682))))

(assert (=> b!129764 (= res!62578 (= (getValueByKey!170 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!175 (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!129765 () Bool)

(assert (=> b!129765 (= e!84682 (contains!875 (toList!837 lt!67331) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!39465 res!62579) b!129764))

(assert (= (and b!129764 res!62578) b!129765))

(declare-fun m!152481 () Bool)

(assert (=> d!39465 m!152481))

(declare-fun m!152483 () Bool)

(assert (=> d!39465 m!152483))

(declare-fun m!152485 () Bool)

(assert (=> d!39465 m!152485))

(declare-fun m!152487 () Bool)

(assert (=> d!39465 m!152487))

(declare-fun m!152489 () Bool)

(assert (=> b!129764 m!152489))

(declare-fun m!152491 () Bool)

(assert (=> b!129765 m!152491))

(assert (=> bm!14052 d!39465))

(declare-fun d!39467 () Bool)

(assert (=> d!39467 (= (apply!113 lt!67261 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5387 () Bool)

(assert (= bs!5387 d!39467))

(declare-fun m!152493 () Bool)

(assert (=> bs!5387 m!152493))

(assert (=> bs!5387 m!152493))

(declare-fun m!152495 () Bool)

(assert (=> bs!5387 m!152495))

(assert (=> b!129690 d!39467))

(declare-fun b!129790 () Bool)

(declare-fun e!84703 () Bool)

(declare-fun e!84699 () Bool)

(assert (=> b!129790 (= e!84703 e!84699)))

(declare-fun c!23900 () Bool)

(declare-fun e!84698 () Bool)

(assert (=> b!129790 (= c!23900 e!84698)))

(declare-fun res!62591 () Bool)

(assert (=> b!129790 (=> (not res!62591) (not e!84698))))

(assert (=> b!129790 (= res!62591 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!129791 () Bool)

(assert (=> b!129791 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> b!129791 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!84702 () Bool)

(declare-fun lt!67352 () ListLongMap!1643)

(assert (=> b!129791 (= e!84702 (= (apply!113 lt!67352 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!129792 () Bool)

(declare-fun e!84700 () Bool)

(assert (=> b!129792 (= e!84700 (= lt!67352 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!129793 () Bool)

(declare-fun lt!67351 () Unit!4042)

(declare-fun lt!67354 () Unit!4042)

(assert (=> b!129793 (= lt!67351 lt!67354)))

(declare-fun lt!67348 () ListLongMap!1643)

(declare-fun lt!67350 () V!3457)

(declare-fun lt!67349 () (_ BitVec 64))

(declare-fun lt!67353 () (_ BitVec 64))

(assert (=> b!129793 (not (contains!873 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350)) lt!67353))))

(declare-fun addStillNotContains!60 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> b!129793 (= lt!67354 (addStillNotContains!60 lt!67348 lt!67349 lt!67350 lt!67353))))

(assert (=> b!129793 (= lt!67353 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!129793 (= lt!67350 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!129793 (= lt!67349 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!14094 () ListLongMap!1643)

(assert (=> b!129793 (= lt!67348 call!14094)))

(declare-fun e!84701 () ListLongMap!1643)

(assert (=> b!129793 (= e!84701 (+!166 call!14094 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!129794 () Bool)

(declare-fun isEmpty!408 (ListLongMap!1643) Bool)

(assert (=> b!129794 (= e!84700 (isEmpty!408 lt!67352))))

(declare-fun d!39469 () Bool)

(assert (=> d!39469 e!84703))

(declare-fun res!62588 () Bool)

(assert (=> d!39469 (=> (not res!62588) (not e!84703))))

(assert (=> d!39469 (= res!62588 (not (contains!873 lt!67352 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!84697 () ListLongMap!1643)

(assert (=> d!39469 (= lt!67352 e!84697)))

(declare-fun c!23899 () Bool)

(assert (=> d!39469 (= c!23899 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39469 (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992))))))

(assert (=> d!39469 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))) lt!67352)))

(declare-fun b!129795 () Bool)

(assert (=> b!129795 (= e!84698 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!129795 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!129796 () Bool)

(assert (=> b!129796 (= e!84699 e!84702)))

(assert (=> b!129796 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun res!62589 () Bool)

(assert (=> b!129796 (= res!62589 (contains!873 lt!67352 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!129796 (=> (not res!62589) (not e!84702))))

(declare-fun b!129797 () Bool)

(assert (=> b!129797 (= e!84699 e!84700)))

(declare-fun c!23897 () Bool)

(assert (=> b!129797 (= c!23897 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!129798 () Bool)

(assert (=> b!129798 (= e!84697 e!84701)))

(declare-fun c!23898 () Bool)

(assert (=> b!129798 (= c!23898 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!129799 () Bool)

(assert (=> b!129799 (= e!84697 (ListLongMap!1644 Nil!1682))))

(declare-fun b!129800 () Bool)

(assert (=> b!129800 (= e!84701 call!14094)))

(declare-fun bm!14091 () Bool)

(assert (=> bm!14091 (= call!14094 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!129801 () Bool)

(declare-fun res!62590 () Bool)

(assert (=> b!129801 (=> (not res!62590) (not e!84703))))

(assert (=> b!129801 (= res!62590 (not (contains!873 lt!67352 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39469 c!23899) b!129799))

(assert (= (and d!39469 (not c!23899)) b!129798))

(assert (= (and b!129798 c!23898) b!129793))

(assert (= (and b!129798 (not c!23898)) b!129800))

(assert (= (or b!129793 b!129800) bm!14091))

(assert (= (and d!39469 res!62588) b!129801))

(assert (= (and b!129801 res!62590) b!129790))

(assert (= (and b!129790 res!62591) b!129795))

(assert (= (and b!129790 c!23900) b!129796))

(assert (= (and b!129790 (not c!23900)) b!129797))

(assert (= (and b!129796 res!62589) b!129791))

(assert (= (and b!129797 c!23897) b!129792))

(assert (= (and b!129797 (not c!23897)) b!129794))

(declare-fun b_lambda!5765 () Bool)

(assert (=> (not b_lambda!5765) (not b!129791)))

(assert (=> b!129791 t!6073))

(declare-fun b_and!8029 () Bool)

(assert (= b_and!8025 (and (=> t!6073 result!3897) b_and!8029)))

(assert (=> b!129791 t!6075))

(declare-fun b_and!8031 () Bool)

(assert (= b_and!8027 (and (=> t!6075 result!3901) b_and!8031)))

(declare-fun b_lambda!5767 () Bool)

(assert (=> (not b_lambda!5767) (not b!129793)))

(assert (=> b!129793 t!6073))

(declare-fun b_and!8033 () Bool)

(assert (= b_and!8029 (and (=> t!6073 result!3897) b_and!8033)))

(assert (=> b!129793 t!6075))

(declare-fun b_and!8035 () Bool)

(assert (= b_and!8031 (and (=> t!6075 result!3901) b_and!8035)))

(declare-fun m!152497 () Bool)

(assert (=> b!129794 m!152497))

(declare-fun m!152499 () Bool)

(assert (=> bm!14091 m!152499))

(assert (=> b!129792 m!152499))

(assert (=> b!129796 m!152315))

(assert (=> b!129796 m!152315))

(declare-fun m!152501 () Bool)

(assert (=> b!129796 m!152501))

(assert (=> b!129791 m!152315))

(declare-fun m!152503 () Bool)

(assert (=> b!129791 m!152503))

(assert (=> b!129791 m!152149))

(assert (=> b!129791 m!152355))

(assert (=> b!129791 m!152149))

(assert (=> b!129791 m!152357))

(assert (=> b!129791 m!152315))

(assert (=> b!129791 m!152355))

(declare-fun m!152505 () Bool)

(assert (=> b!129801 m!152505))

(declare-fun m!152507 () Bool)

(assert (=> b!129793 m!152507))

(declare-fun m!152509 () Bool)

(assert (=> b!129793 m!152509))

(assert (=> b!129793 m!152507))

(declare-fun m!152511 () Bool)

(assert (=> b!129793 m!152511))

(assert (=> b!129793 m!152149))

(assert (=> b!129793 m!152355))

(assert (=> b!129793 m!152149))

(assert (=> b!129793 m!152357))

(assert (=> b!129793 m!152315))

(assert (=> b!129793 m!152355))

(declare-fun m!152513 () Bool)

(assert (=> b!129793 m!152513))

(assert (=> b!129798 m!152315))

(assert (=> b!129798 m!152315))

(assert (=> b!129798 m!152319))

(declare-fun m!152515 () Bool)

(assert (=> d!39469 m!152515))

(assert (=> d!39469 m!152157))

(assert (=> b!129795 m!152315))

(assert (=> b!129795 m!152315))

(assert (=> b!129795 m!152319))

(assert (=> bm!14075 d!39469))

(declare-fun b!129802 () Bool)

(declare-fun e!84710 () Unit!4042)

(declare-fun Unit!4051 () Unit!4042)

(assert (=> b!129802 (= e!84710 Unit!4051)))

(declare-fun call!14097 () ListLongMap!1643)

(declare-fun e!84706 () ListLongMap!1643)

(declare-fun b!129803 () Bool)

(assert (=> b!129803 (= e!84706 (+!166 call!14097 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))

(declare-fun b!129804 () Bool)

(declare-fun lt!67356 () ListLongMap!1643)

(declare-fun e!84716 () Bool)

(assert (=> b!129804 (= e!84716 (= (apply!113 lt!67356 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))

(declare-fun b!129805 () Bool)

(declare-fun e!84713 () ListLongMap!1643)

(declare-fun call!14096 () ListLongMap!1643)

(assert (=> b!129805 (= e!84713 call!14096)))

(declare-fun b!129806 () Bool)

(declare-fun e!84707 () Bool)

(assert (=> b!129806 (= e!84707 e!84716)))

(declare-fun res!62592 () Bool)

(declare-fun call!14099 () Bool)

(assert (=> b!129806 (= res!62592 call!14099)))

(assert (=> b!129806 (=> (not res!62592) (not e!84716))))

(declare-fun b!129807 () Bool)

(declare-fun e!84712 () Bool)

(assert (=> b!129807 (= e!84712 (= (apply!113 lt!67356 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(assert (=> b!129807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129808 () Bool)

(declare-fun e!84709 () Bool)

(assert (=> b!129808 (= e!84709 e!84707)))

(declare-fun c!23906 () Bool)

(assert (=> b!129808 (= c!23906 (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!14100 () ListLongMap!1643)

(declare-fun bm!14092 () Bool)

(assert (=> bm!14092 (= call!14100 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39471 () Bool)

(assert (=> d!39471 e!84709))

(declare-fun res!62594 () Bool)

(assert (=> d!39471 (=> (not res!62594) (not e!84709))))

(assert (=> d!39471 (= res!62594 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67376 () ListLongMap!1643)

(assert (=> d!39471 (= lt!67356 lt!67376)))

(declare-fun lt!67368 () Unit!4042)

(assert (=> d!39471 (= lt!67368 e!84710)))

(declare-fun c!23905 () Bool)

(declare-fun e!84714 () Bool)

(assert (=> d!39471 (= c!23905 e!84714)))

(declare-fun res!62596 () Bool)

(assert (=> d!39471 (=> (not res!62596) (not e!84714))))

(assert (=> d!39471 (= res!62596 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39471 (= lt!67376 e!84706)))

(declare-fun c!23902 () Bool)

(assert (=> d!39471 (= c!23902 (and (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39471 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39471 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67356)))

(declare-fun e!84715 () Bool)

(declare-fun b!129809 () Bool)

(assert (=> b!129809 (= e!84715 (= (apply!113 lt!67356 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))

(declare-fun b!129810 () Bool)

(assert (=> b!129810 (= e!84714 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14093 () Bool)

(declare-fun call!14101 () ListLongMap!1643)

(declare-fun call!14098 () ListLongMap!1643)

(assert (=> bm!14093 (= call!14101 call!14098)))

(declare-fun b!129811 () Bool)

(declare-fun lt!67361 () Unit!4042)

(assert (=> b!129811 (= e!84710 lt!67361)))

(declare-fun lt!67362 () ListLongMap!1643)

(assert (=> b!129811 (= lt!67362 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67357 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67357 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67369 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67369 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67370 () Unit!4042)

(assert (=> b!129811 (= lt!67370 (addStillContains!89 lt!67362 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67369))))

(assert (=> b!129811 (contains!873 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67369)))

(declare-fun lt!67375 () Unit!4042)

(assert (=> b!129811 (= lt!67375 lt!67370)))

(declare-fun lt!67355 () ListLongMap!1643)

(assert (=> b!129811 (= lt!67355 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67363 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67363 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67374 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67374 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67359 () Unit!4042)

(assert (=> b!129811 (= lt!67359 (addApplyDifferent!89 lt!67355 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67374))))

(assert (=> b!129811 (= (apply!113 (+!166 lt!67355 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67374) (apply!113 lt!67355 lt!67374))))

(declare-fun lt!67371 () Unit!4042)

(assert (=> b!129811 (= lt!67371 lt!67359)))

(declare-fun lt!67364 () ListLongMap!1643)

(assert (=> b!129811 (= lt!67364 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67373 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67373 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67358 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67358 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67365 () Unit!4042)

(assert (=> b!129811 (= lt!67365 (addApplyDifferent!89 lt!67364 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67358))))

(assert (=> b!129811 (= (apply!113 (+!166 lt!67364 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67358) (apply!113 lt!67364 lt!67358))))

(declare-fun lt!67366 () Unit!4042)

(assert (=> b!129811 (= lt!67366 lt!67365)))

(declare-fun lt!67372 () ListLongMap!1643)

(assert (=> b!129811 (= lt!67372 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67360 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67360 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67367 () (_ BitVec 64))

(assert (=> b!129811 (= lt!67367 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129811 (= lt!67361 (addApplyDifferent!89 lt!67372 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67367))))

(assert (=> b!129811 (= (apply!113 (+!166 lt!67372 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67367) (apply!113 lt!67372 lt!67367))))

(declare-fun b!129812 () Bool)

(declare-fun res!62600 () Bool)

(assert (=> b!129812 (=> (not res!62600) (not e!84709))))

(declare-fun e!84704 () Bool)

(assert (=> b!129812 (= res!62600 e!84704)))

(declare-fun c!23904 () Bool)

(assert (=> b!129812 (= c!23904 (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!129813 () Bool)

(declare-fun res!62597 () Bool)

(assert (=> b!129813 (=> (not res!62597) (not e!84709))))

(declare-fun e!84705 () Bool)

(assert (=> b!129813 (= res!62597 e!84705)))

(declare-fun res!62598 () Bool)

(assert (=> b!129813 (=> res!62598 e!84705)))

(declare-fun e!84708 () Bool)

(assert (=> b!129813 (= res!62598 (not e!84708))))

(declare-fun res!62599 () Bool)

(assert (=> b!129813 (=> (not res!62599) (not e!84708))))

(assert (=> b!129813 (= res!62599 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14094 () Bool)

(declare-fun call!14095 () Bool)

(assert (=> bm!14094 (= call!14095 (contains!873 lt!67356 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14095 () Bool)

(declare-fun c!23901 () Bool)

(assert (=> bm!14095 (= call!14097 (+!166 (ite c!23902 call!14100 (ite c!23901 call!14098 call!14101)) (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(declare-fun bm!14096 () Bool)

(assert (=> bm!14096 (= call!14098 call!14100)))

(declare-fun b!129814 () Bool)

(declare-fun e!84711 () ListLongMap!1643)

(assert (=> b!129814 (= e!84711 call!14096)))

(declare-fun b!129815 () Bool)

(assert (=> b!129815 (= e!84708 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14097 () Bool)

(assert (=> bm!14097 (= call!14096 call!14097)))

(declare-fun b!129816 () Bool)

(assert (=> b!129816 (= e!84707 (not call!14099))))

(declare-fun c!23903 () Bool)

(declare-fun b!129817 () Bool)

(assert (=> b!129817 (= c!23903 (and (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!129817 (= e!84713 e!84711)))

(declare-fun b!129818 () Bool)

(assert (=> b!129818 (= e!84704 (not call!14095))))

(declare-fun b!129819 () Bool)

(assert (=> b!129819 (= e!84704 e!84715)))

(declare-fun res!62595 () Bool)

(assert (=> b!129819 (= res!62595 call!14095)))

(assert (=> b!129819 (=> (not res!62595) (not e!84715))))

(declare-fun b!129820 () Bool)

(assert (=> b!129820 (= e!84706 e!84713)))

(assert (=> b!129820 (= c!23901 (and (not (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14098 () Bool)

(assert (=> bm!14098 (= call!14099 (contains!873 lt!67356 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129821 () Bool)

(assert (=> b!129821 (= e!84711 call!14101)))

(declare-fun b!129822 () Bool)

(assert (=> b!129822 (= e!84705 e!84712)))

(declare-fun res!62593 () Bool)

(assert (=> b!129822 (=> (not res!62593) (not e!84712))))

(assert (=> b!129822 (= res!62593 (contains!873 lt!67356 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!129822 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39471 c!23902) b!129803))

(assert (= (and d!39471 (not c!23902)) b!129820))

(assert (= (and b!129820 c!23901) b!129805))

(assert (= (and b!129820 (not c!23901)) b!129817))

(assert (= (and b!129817 c!23903) b!129814))

(assert (= (and b!129817 (not c!23903)) b!129821))

(assert (= (or b!129814 b!129821) bm!14093))

(assert (= (or b!129805 bm!14093) bm!14096))

(assert (= (or b!129805 b!129814) bm!14097))

(assert (= (or b!129803 bm!14096) bm!14092))

(assert (= (or b!129803 bm!14097) bm!14095))

(assert (= (and d!39471 res!62596) b!129810))

(assert (= (and d!39471 c!23905) b!129811))

(assert (= (and d!39471 (not c!23905)) b!129802))

(assert (= (and d!39471 res!62594) b!129813))

(assert (= (and b!129813 res!62599) b!129815))

(assert (= (and b!129813 (not res!62598)) b!129822))

(assert (= (and b!129822 res!62593) b!129807))

(assert (= (and b!129813 res!62597) b!129812))

(assert (= (and b!129812 c!23904) b!129819))

(assert (= (and b!129812 (not c!23904)) b!129818))

(assert (= (and b!129819 res!62595) b!129809))

(assert (= (or b!129819 b!129818) bm!14094))

(assert (= (and b!129812 res!62600) b!129808))

(assert (= (and b!129808 c!23906) b!129806))

(assert (= (and b!129808 (not c!23906)) b!129816))

(assert (= (and b!129806 res!62592) b!129804))

(assert (= (or b!129806 b!129816) bm!14098))

(declare-fun b_lambda!5769 () Bool)

(assert (=> (not b_lambda!5769) (not b!129807)))

(assert (=> b!129807 t!6088))

(declare-fun b_and!8037 () Bool)

(assert (= b_and!8033 (and (=> t!6088 result!3917) b_and!8037)))

(assert (=> b!129807 t!6090))

(declare-fun b_and!8039 () Bool)

(assert (= b_and!8035 (and (=> t!6090 result!3919) b_and!8039)))

(declare-fun m!152517 () Bool)

(assert (=> b!129804 m!152517))

(declare-fun m!152519 () Bool)

(assert (=> bm!14092 m!152519))

(declare-fun m!152521 () Bool)

(assert (=> b!129803 m!152521))

(assert (=> d!39471 m!152389))

(assert (=> b!129822 m!152369))

(assert (=> b!129822 m!152369))

(declare-fun m!152523 () Bool)

(assert (=> b!129822 m!152523))

(assert (=> b!129810 m!152369))

(assert (=> b!129810 m!152369))

(assert (=> b!129810 m!152403))

(declare-fun m!152525 () Bool)

(assert (=> b!129811 m!152525))

(declare-fun m!152527 () Bool)

(assert (=> b!129811 m!152527))

(declare-fun m!152529 () Bool)

(assert (=> b!129811 m!152529))

(assert (=> b!129811 m!152369))

(declare-fun m!152531 () Bool)

(assert (=> b!129811 m!152531))

(declare-fun m!152533 () Bool)

(assert (=> b!129811 m!152533))

(declare-fun m!152535 () Bool)

(assert (=> b!129811 m!152535))

(declare-fun m!152537 () Bool)

(assert (=> b!129811 m!152537))

(assert (=> b!129811 m!152527))

(declare-fun m!152539 () Bool)

(assert (=> b!129811 m!152539))

(declare-fun m!152541 () Bool)

(assert (=> b!129811 m!152541))

(assert (=> b!129811 m!152519))

(assert (=> b!129811 m!152539))

(declare-fun m!152543 () Bool)

(assert (=> b!129811 m!152543))

(declare-fun m!152545 () Bool)

(assert (=> b!129811 m!152545))

(assert (=> b!129811 m!152533))

(declare-fun m!152547 () Bool)

(assert (=> b!129811 m!152547))

(declare-fun m!152549 () Bool)

(assert (=> b!129811 m!152549))

(declare-fun m!152551 () Bool)

(assert (=> b!129811 m!152551))

(declare-fun m!152553 () Bool)

(assert (=> b!129811 m!152553))

(assert (=> b!129811 m!152535))

(declare-fun m!152555 () Bool)

(assert (=> bm!14094 m!152555))

(assert (=> b!129815 m!152369))

(assert (=> b!129815 m!152369))

(assert (=> b!129815 m!152403))

(declare-fun m!152557 () Bool)

(assert (=> b!129809 m!152557))

(assert (=> b!129807 m!152369))

(declare-fun m!152559 () Bool)

(assert (=> b!129807 m!152559))

(assert (=> b!129807 m!152441))

(declare-fun m!152561 () Bool)

(assert (=> b!129807 m!152561))

(assert (=> b!129807 m!152369))

(declare-fun m!152563 () Bool)

(assert (=> b!129807 m!152563))

(assert (=> b!129807 m!152441))

(assert (=> b!129807 m!152559))

(declare-fun m!152565 () Bool)

(assert (=> bm!14095 m!152565))

(declare-fun m!152567 () Bool)

(assert (=> bm!14098 m!152567))

(assert (=> bm!14046 d!39471))

(declare-fun lt!67385 () SeekEntryResult!266)

(declare-fun d!39473 () Bool)

(assert (=> d!39473 (and (or ((_ is Undefined!266) lt!67385) (not ((_ is Found!266) lt!67385)) (and (bvsge (index!3222 lt!67385) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67385) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67385) ((_ is Found!266) lt!67385) (not ((_ is MissingZero!266) lt!67385)) (and (bvsge (index!3221 lt!67385) #b00000000000000000000000000000000) (bvslt (index!3221 lt!67385) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67385) ((_ is Found!266) lt!67385) ((_ is MissingZero!266) lt!67385) (not ((_ is MissingVacant!266) lt!67385)) (and (bvsge (index!3224 lt!67385) #b00000000000000000000000000000000) (bvslt (index!3224 lt!67385) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67385) (ite ((_ is Found!266) lt!67385) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67385)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite ((_ is MissingZero!266) lt!67385) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67385)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!266) lt!67385) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67385)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!84723 () SeekEntryResult!266)

(assert (=> d!39473 (= lt!67385 e!84723)))

(declare-fun c!23915 () Bool)

(declare-fun lt!67383 () SeekEntryResult!266)

(assert (=> d!39473 (= c!23915 (and ((_ is Intermediate!266) lt!67383) (undefined!1078 lt!67383)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4721 (_ BitVec 32)) SeekEntryResult!266)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!39473 (= lt!67383 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(assert (=> d!39473 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39473 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)) lt!67385)))

(declare-fun b!129835 () Bool)

(declare-fun e!84725 () SeekEntryResult!266)

(assert (=> b!129835 (= e!84723 e!84725)))

(declare-fun lt!67384 () (_ BitVec 64))

(assert (=> b!129835 (= lt!67384 (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!67383)))))

(declare-fun c!23914 () Bool)

(assert (=> b!129835 (= c!23914 (= lt!67384 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129836 () Bool)

(assert (=> b!129836 (= e!84723 Undefined!266)))

(declare-fun b!129837 () Bool)

(declare-fun e!84724 () SeekEntryResult!266)

(assert (=> b!129837 (= e!84724 (MissingZero!266 (index!3223 lt!67383)))))

(declare-fun b!129838 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4721 (_ BitVec 32)) SeekEntryResult!266)

(assert (=> b!129838 (= e!84724 (seekKeyOrZeroReturnVacant!0 (x!15261 lt!67383) (index!3223 lt!67383) (index!3223 lt!67383) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!129839 () Bool)

(declare-fun c!23913 () Bool)

(assert (=> b!129839 (= c!23913 (= lt!67384 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129839 (= e!84725 e!84724)))

(declare-fun b!129840 () Bool)

(assert (=> b!129840 (= e!84725 (Found!266 (index!3223 lt!67383)))))

(assert (= (and d!39473 c!23915) b!129836))

(assert (= (and d!39473 (not c!23915)) b!129835))

(assert (= (and b!129835 c!23914) b!129840))

(assert (= (and b!129835 (not c!23914)) b!129839))

(assert (= (and b!129839 c!23913) b!129837))

(assert (= (and b!129839 (not c!23913)) b!129838))

(assert (=> d!39473 m!152129))

(declare-fun m!152569 () Bool)

(assert (=> d!39473 m!152569))

(declare-fun m!152571 () Bool)

(assert (=> d!39473 m!152571))

(assert (=> d!39473 m!152389))

(assert (=> d!39473 m!152569))

(assert (=> d!39473 m!152129))

(declare-fun m!152573 () Bool)

(assert (=> d!39473 m!152573))

(declare-fun m!152575 () Bool)

(assert (=> d!39473 m!152575))

(declare-fun m!152577 () Bool)

(assert (=> d!39473 m!152577))

(declare-fun m!152579 () Bool)

(assert (=> b!129835 m!152579))

(assert (=> b!129838 m!152129))

(declare-fun m!152581 () Bool)

(assert (=> b!129838 m!152581))

(assert (=> bm!14038 d!39473))

(declare-fun b!129849 () Bool)

(declare-fun e!84730 () (_ BitVec 32))

(declare-fun call!14104 () (_ BitVec 32))

(assert (=> b!129849 (= e!84730 (bvadd #b00000000000000000000000000000001 call!14104))))

(declare-fun b!129850 () Bool)

(declare-fun e!84731 () (_ BitVec 32))

(assert (=> b!129850 (= e!84731 e!84730)))

(declare-fun c!23920 () Bool)

(assert (=> b!129850 (= c!23920 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14101 () Bool)

(assert (=> bm!14101 (= call!14104 (arrayCountValidKeys!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129851 () Bool)

(assert (=> b!129851 (= e!84730 call!14104)))

(declare-fun b!129852 () Bool)

(assert (=> b!129852 (= e!84731 #b00000000000000000000000000000000)))

(declare-fun d!39475 () Bool)

(declare-fun lt!67388 () (_ BitVec 32))

(assert (=> d!39475 (and (bvsge lt!67388 #b00000000000000000000000000000000) (bvsle lt!67388 (bvsub (size!2500 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!39475 (= lt!67388 e!84731)))

(declare-fun c!23921 () Bool)

(assert (=> d!39475 (= c!23921 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39475 (and (bvsle #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2500 (_keys!4564 newMap!16)) (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39475 (= (arrayCountValidKeys!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) lt!67388)))

(assert (= (and d!39475 c!23921) b!129852))

(assert (= (and d!39475 (not c!23921)) b!129850))

(assert (= (and b!129850 c!23920) b!129849))

(assert (= (and b!129850 (not c!23920)) b!129851))

(assert (= (or b!129849 b!129851) bm!14101))

(assert (=> b!129850 m!152369))

(assert (=> b!129850 m!152369))

(assert (=> b!129850 m!152403))

(declare-fun m!152583 () Bool)

(assert (=> bm!14101 m!152583))

(assert (=> b!129503 d!39475))

(declare-fun d!39477 () Bool)

(assert (=> d!39477 (= (apply!113 lt!67260 lt!67279) (get!1473 (getValueByKey!170 (toList!837 lt!67260) lt!67279)))))

(declare-fun bs!5388 () Bool)

(assert (= bs!5388 d!39477))

(declare-fun m!152585 () Bool)

(assert (=> bs!5388 m!152585))

(assert (=> bs!5388 m!152585))

(declare-fun m!152587 () Bool)

(assert (=> bs!5388 m!152587))

(assert (=> b!129692 d!39477))

(declare-fun d!39479 () Bool)

(assert (=> d!39479 (= (apply!113 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67263) (apply!113 lt!67269 lt!67263))))

(declare-fun lt!67391 () Unit!4042)

(declare-fun choose!794 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> d!39479 (= lt!67391 (choose!794 lt!67269 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67263))))

(declare-fun e!84734 () Bool)

(assert (=> d!39479 e!84734))

(declare-fun res!62603 () Bool)

(assert (=> d!39479 (=> (not res!62603) (not e!84734))))

(assert (=> d!39479 (= res!62603 (contains!873 lt!67269 lt!67263))))

(assert (=> d!39479 (= (addApplyDifferent!89 lt!67269 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67263) lt!67391)))

(declare-fun b!129856 () Bool)

(assert (=> b!129856 (= e!84734 (not (= lt!67263 lt!67278)))))

(assert (= (and d!39479 res!62603) b!129856))

(declare-fun m!152589 () Bool)

(assert (=> d!39479 m!152589))

(assert (=> d!39479 m!152335))

(assert (=> d!39479 m!152339))

(assert (=> d!39479 m!152335))

(assert (=> d!39479 m!152347))

(declare-fun m!152591 () Bool)

(assert (=> d!39479 m!152591))

(assert (=> b!129692 d!39479))

(declare-fun d!39481 () Bool)

(declare-fun e!84735 () Bool)

(assert (=> d!39481 e!84735))

(declare-fun res!62605 () Bool)

(assert (=> d!39481 (=> (not res!62605) (not e!84735))))

(declare-fun lt!67393 () ListLongMap!1643)

(assert (=> d!39481 (= res!62605 (contains!873 lt!67393 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67394 () List!1685)

(assert (=> d!39481 (= lt!67393 (ListLongMap!1644 lt!67394))))

(declare-fun lt!67395 () Unit!4042)

(declare-fun lt!67392 () Unit!4042)

(assert (=> d!39481 (= lt!67395 lt!67392)))

(assert (=> d!39481 (= (getValueByKey!170 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39481 (= lt!67392 (lemmaContainsTupThenGetReturnValue!85 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39481 (= lt!67394 (insertStrictlySorted!88 (toList!837 lt!67277) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39481 (= (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67393)))

(declare-fun b!129857 () Bool)

(declare-fun res!62604 () Bool)

(assert (=> b!129857 (=> (not res!62604) (not e!84735))))

(assert (=> b!129857 (= res!62604 (= (getValueByKey!170 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!129858 () Bool)

(assert (=> b!129858 (= e!84735 (contains!875 (toList!837 lt!67393) (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39481 res!62605) b!129857))

(assert (= (and b!129857 res!62604) b!129858))

(declare-fun m!152593 () Bool)

(assert (=> d!39481 m!152593))

(declare-fun m!152595 () Bool)

(assert (=> d!39481 m!152595))

(declare-fun m!152597 () Bool)

(assert (=> d!39481 m!152597))

(declare-fun m!152599 () Bool)

(assert (=> d!39481 m!152599))

(declare-fun m!152601 () Bool)

(assert (=> b!129857 m!152601))

(declare-fun m!152603 () Bool)

(assert (=> b!129858 m!152603))

(assert (=> b!129692 d!39481))

(declare-fun d!39483 () Bool)

(assert (=> d!39483 (= (apply!113 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67272) (apply!113 lt!67277 lt!67272))))

(declare-fun lt!67396 () Unit!4042)

(assert (=> d!39483 (= lt!67396 (choose!794 lt!67277 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67272))))

(declare-fun e!84736 () Bool)

(assert (=> d!39483 e!84736))

(declare-fun res!62606 () Bool)

(assert (=> d!39483 (=> (not res!62606) (not e!84736))))

(assert (=> d!39483 (= res!62606 (contains!873 lt!67277 lt!67272))))

(assert (=> d!39483 (= (addApplyDifferent!89 lt!67277 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67272) lt!67396)))

(declare-fun b!129859 () Bool)

(assert (=> b!129859 (= e!84736 (not (= lt!67272 lt!67265)))))

(assert (= (and d!39483 res!62606) b!129859))

(declare-fun m!152605 () Bool)

(assert (=> d!39483 m!152605))

(assert (=> d!39483 m!152331))

(assert (=> d!39483 m!152333))

(assert (=> d!39483 m!152331))

(assert (=> d!39483 m!152321))

(declare-fun m!152607 () Bool)

(assert (=> d!39483 m!152607))

(assert (=> b!129692 d!39483))

(declare-fun d!39485 () Bool)

(assert (=> d!39485 (= (apply!113 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67263) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67263)))))

(declare-fun bs!5389 () Bool)

(assert (= bs!5389 d!39485))

(declare-fun m!152609 () Bool)

(assert (=> bs!5389 m!152609))

(assert (=> bs!5389 m!152609))

(declare-fun m!152611 () Bool)

(assert (=> bs!5389 m!152611))

(assert (=> b!129692 d!39485))

(declare-fun d!39487 () Bool)

(assert (=> d!39487 (= (apply!113 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67279) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67279)))))

(declare-fun bs!5390 () Bool)

(assert (= bs!5390 d!39487))

(declare-fun m!152613 () Bool)

(assert (=> bs!5390 m!152613))

(assert (=> bs!5390 m!152613))

(declare-fun m!152615 () Bool)

(assert (=> bs!5390 m!152615))

(assert (=> b!129692 d!39487))

(declare-fun d!39489 () Bool)

(assert (=> d!39489 (= (apply!113 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67272) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67272)))))

(declare-fun bs!5391 () Bool)

(assert (= bs!5391 d!39489))

(declare-fun m!152617 () Bool)

(assert (=> bs!5391 m!152617))

(assert (=> bs!5391 m!152617))

(declare-fun m!152619 () Bool)

(assert (=> bs!5391 m!152619))

(assert (=> b!129692 d!39489))

(declare-fun d!39491 () Bool)

(assert (=> d!39491 (= (apply!113 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67279) (apply!113 lt!67260 lt!67279))))

(declare-fun lt!67397 () Unit!4042)

(assert (=> d!39491 (= lt!67397 (choose!794 lt!67260 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67279))))

(declare-fun e!84737 () Bool)

(assert (=> d!39491 e!84737))

(declare-fun res!62607 () Bool)

(assert (=> d!39491 (=> (not res!62607) (not e!84737))))

(assert (=> d!39491 (= res!62607 (contains!873 lt!67260 lt!67279))))

(assert (=> d!39491 (= (addApplyDifferent!89 lt!67260 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67279) lt!67397)))

(declare-fun b!129860 () Bool)

(assert (=> b!129860 (= e!84737 (not (= lt!67279 lt!67268)))))

(assert (= (and d!39491 res!62607) b!129860))

(declare-fun m!152621 () Bool)

(assert (=> d!39491 m!152621))

(assert (=> d!39491 m!152323))

(assert (=> d!39491 m!152325))

(assert (=> d!39491 m!152323))

(assert (=> d!39491 m!152341))

(declare-fun m!152623 () Bool)

(assert (=> d!39491 m!152623))

(assert (=> b!129692 d!39491))

(declare-fun d!39493 () Bool)

(declare-fun e!84738 () Bool)

(assert (=> d!39493 e!84738))

(declare-fun res!62609 () Bool)

(assert (=> d!39493 (=> (not res!62609) (not e!84738))))

(declare-fun lt!67399 () ListLongMap!1643)

(assert (=> d!39493 (= res!62609 (contains!873 lt!67399 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67400 () List!1685)

(assert (=> d!39493 (= lt!67399 (ListLongMap!1644 lt!67400))))

(declare-fun lt!67401 () Unit!4042)

(declare-fun lt!67398 () Unit!4042)

(assert (=> d!39493 (= lt!67401 lt!67398)))

(assert (=> d!39493 (= (getValueByKey!170 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39493 (= lt!67398 (lemmaContainsTupThenGetReturnValue!85 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39493 (= lt!67400 (insertStrictlySorted!88 (toList!837 lt!67260) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39493 (= (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67399)))

(declare-fun b!129861 () Bool)

(declare-fun res!62608 () Bool)

(assert (=> b!129861 (=> (not res!62608) (not e!84738))))

(assert (=> b!129861 (= res!62608 (= (getValueByKey!170 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!129862 () Bool)

(assert (=> b!129862 (= e!84738 (contains!875 (toList!837 lt!67399) (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39493 res!62609) b!129861))

(assert (= (and b!129861 res!62608) b!129862))

(declare-fun m!152625 () Bool)

(assert (=> d!39493 m!152625))

(declare-fun m!152627 () Bool)

(assert (=> d!39493 m!152627))

(declare-fun m!152629 () Bool)

(assert (=> d!39493 m!152629))

(declare-fun m!152631 () Bool)

(assert (=> d!39493 m!152631))

(declare-fun m!152633 () Bool)

(assert (=> b!129861 m!152633))

(declare-fun m!152635 () Bool)

(assert (=> b!129862 m!152635))

(assert (=> b!129692 d!39493))

(declare-fun d!39495 () Bool)

(assert (=> d!39495 (= (apply!113 lt!67269 lt!67263) (get!1473 (getValueByKey!170 (toList!837 lt!67269) lt!67263)))))

(declare-fun bs!5392 () Bool)

(assert (= bs!5392 d!39495))

(declare-fun m!152637 () Bool)

(assert (=> bs!5392 m!152637))

(assert (=> bs!5392 m!152637))

(declare-fun m!152639 () Bool)

(assert (=> bs!5392 m!152639))

(assert (=> b!129692 d!39495))

(declare-fun d!39497 () Bool)

(declare-fun e!84739 () Bool)

(assert (=> d!39497 e!84739))

(declare-fun res!62611 () Bool)

(assert (=> d!39497 (=> (not res!62611) (not e!84739))))

(declare-fun lt!67403 () ListLongMap!1643)

(assert (=> d!39497 (= res!62611 (contains!873 lt!67403 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67404 () List!1685)

(assert (=> d!39497 (= lt!67403 (ListLongMap!1644 lt!67404))))

(declare-fun lt!67405 () Unit!4042)

(declare-fun lt!67402 () Unit!4042)

(assert (=> d!39497 (= lt!67405 lt!67402)))

(assert (=> d!39497 (= (getValueByKey!170 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39497 (= lt!67402 (lemmaContainsTupThenGetReturnValue!85 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39497 (= lt!67404 (insertStrictlySorted!88 (toList!837 lt!67269) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39497 (= (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67403)))

(declare-fun b!129863 () Bool)

(declare-fun res!62610 () Bool)

(assert (=> b!129863 (=> (not res!62610) (not e!84739))))

(assert (=> b!129863 (= res!62610 (= (getValueByKey!170 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!129864 () Bool)

(assert (=> b!129864 (= e!84739 (contains!875 (toList!837 lt!67403) (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39497 res!62611) b!129863))

(assert (= (and b!129863 res!62610) b!129864))

(declare-fun m!152641 () Bool)

(assert (=> d!39497 m!152641))

(declare-fun m!152643 () Bool)

(assert (=> d!39497 m!152643))

(declare-fun m!152645 () Bool)

(assert (=> d!39497 m!152645))

(declare-fun m!152647 () Bool)

(assert (=> d!39497 m!152647))

(declare-fun m!152649 () Bool)

(assert (=> b!129863 m!152649))

(declare-fun m!152651 () Bool)

(assert (=> b!129864 m!152651))

(assert (=> b!129692 d!39497))

(declare-fun d!39499 () Bool)

(declare-fun e!84740 () Bool)

(assert (=> d!39499 e!84740))

(declare-fun res!62612 () Bool)

(assert (=> d!39499 (=> res!62612 e!84740)))

(declare-fun lt!67406 () Bool)

(assert (=> d!39499 (= res!62612 (not lt!67406))))

(declare-fun lt!67408 () Bool)

(assert (=> d!39499 (= lt!67406 lt!67408)))

(declare-fun lt!67407 () Unit!4042)

(declare-fun e!84741 () Unit!4042)

(assert (=> d!39499 (= lt!67407 e!84741)))

(declare-fun c!23922 () Bool)

(assert (=> d!39499 (= c!23922 lt!67408)))

(assert (=> d!39499 (= lt!67408 (containsKey!173 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(assert (=> d!39499 (= (contains!873 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67274) lt!67406)))

(declare-fun b!129865 () Bool)

(declare-fun lt!67409 () Unit!4042)

(assert (=> b!129865 (= e!84741 lt!67409)))

(assert (=> b!129865 (= lt!67409 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(assert (=> b!129865 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(declare-fun b!129866 () Bool)

(declare-fun Unit!4052 () Unit!4042)

(assert (=> b!129866 (= e!84741 Unit!4052)))

(declare-fun b!129867 () Bool)

(assert (=> b!129867 (= e!84740 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274)))))

(assert (= (and d!39499 c!23922) b!129865))

(assert (= (and d!39499 (not c!23922)) b!129866))

(assert (= (and d!39499 (not res!62612)) b!129867))

(declare-fun m!152653 () Bool)

(assert (=> d!39499 m!152653))

(declare-fun m!152655 () Bool)

(assert (=> b!129865 m!152655))

(declare-fun m!152657 () Bool)

(assert (=> b!129865 m!152657))

(assert (=> b!129865 m!152657))

(declare-fun m!152659 () Bool)

(assert (=> b!129865 m!152659))

(assert (=> b!129867 m!152657))

(assert (=> b!129867 m!152657))

(assert (=> b!129867 m!152659))

(assert (=> b!129692 d!39499))

(declare-fun d!39501 () Bool)

(assert (=> d!39501 (= (apply!113 lt!67277 lt!67272) (get!1473 (getValueByKey!170 (toList!837 lt!67277) lt!67272)))))

(declare-fun bs!5393 () Bool)

(assert (= bs!5393 d!39501))

(declare-fun m!152661 () Bool)

(assert (=> bs!5393 m!152661))

(assert (=> bs!5393 m!152661))

(declare-fun m!152663 () Bool)

(assert (=> bs!5393 m!152663))

(assert (=> b!129692 d!39501))

(assert (=> b!129692 d!39469))

(declare-fun d!39503 () Bool)

(assert (=> d!39503 (contains!873 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67274)))

(declare-fun lt!67412 () Unit!4042)

(declare-fun choose!795 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> d!39503 (= lt!67412 (choose!795 lt!67267 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67274))))

(assert (=> d!39503 (contains!873 lt!67267 lt!67274)))

(assert (=> d!39503 (= (addStillContains!89 lt!67267 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67274) lt!67412)))

(declare-fun bs!5394 () Bool)

(assert (= bs!5394 d!39503))

(assert (=> bs!5394 m!152329))

(assert (=> bs!5394 m!152329))

(assert (=> bs!5394 m!152343))

(declare-fun m!152665 () Bool)

(assert (=> bs!5394 m!152665))

(declare-fun m!152667 () Bool)

(assert (=> bs!5394 m!152667))

(assert (=> b!129692 d!39503))

(declare-fun d!39505 () Bool)

(declare-fun e!84742 () Bool)

(assert (=> d!39505 e!84742))

(declare-fun res!62614 () Bool)

(assert (=> d!39505 (=> (not res!62614) (not e!84742))))

(declare-fun lt!67414 () ListLongMap!1643)

(assert (=> d!39505 (= res!62614 (contains!873 lt!67414 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67415 () List!1685)

(assert (=> d!39505 (= lt!67414 (ListLongMap!1644 lt!67415))))

(declare-fun lt!67416 () Unit!4042)

(declare-fun lt!67413 () Unit!4042)

(assert (=> d!39505 (= lt!67416 lt!67413)))

(assert (=> d!39505 (= (getValueByKey!170 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39505 (= lt!67413 (lemmaContainsTupThenGetReturnValue!85 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39505 (= lt!67415 (insertStrictlySorted!88 (toList!837 lt!67267) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39505 (= (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67414)))

(declare-fun b!129869 () Bool)

(declare-fun res!62613 () Bool)

(assert (=> b!129869 (=> (not res!62613) (not e!84742))))

(assert (=> b!129869 (= res!62613 (= (getValueByKey!170 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!129870 () Bool)

(assert (=> b!129870 (= e!84742 (contains!875 (toList!837 lt!67414) (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39505 res!62614) b!129869))

(assert (= (and b!129869 res!62613) b!129870))

(declare-fun m!152669 () Bool)

(assert (=> d!39505 m!152669))

(declare-fun m!152671 () Bool)

(assert (=> d!39505 m!152671))

(declare-fun m!152673 () Bool)

(assert (=> d!39505 m!152673))

(declare-fun m!152675 () Bool)

(assert (=> d!39505 m!152675))

(declare-fun m!152677 () Bool)

(assert (=> b!129869 m!152677))

(declare-fun m!152679 () Bool)

(assert (=> b!129870 m!152679))

(assert (=> b!129692 d!39505))

(assert (=> b!129623 d!39473))

(declare-fun d!39507 () Bool)

(declare-fun res!62626 () Bool)

(declare-fun e!84745 () Bool)

(assert (=> d!39507 (=> (not res!62626) (not e!84745))))

(assert (=> d!39507 (= res!62626 (validMask!0 (mask!7101 newMap!16)))))

(assert (=> d!39507 (= (simpleValid!89 newMap!16) e!84745)))

(declare-fun b!129882 () Bool)

(assert (=> b!129882 (= e!84745 (and (bvsge (extraKeys!2596 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2596 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!588 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!129880 () Bool)

(declare-fun res!62624 () Bool)

(assert (=> b!129880 (=> (not res!62624) (not e!84745))))

(declare-fun size!2506 (LongMapFixedSize!1078) (_ BitVec 32))

(assert (=> b!129880 (= res!62624 (bvsge (size!2506 newMap!16) (_size!588 newMap!16)))))

(declare-fun b!129879 () Bool)

(declare-fun res!62623 () Bool)

(assert (=> b!129879 (=> (not res!62623) (not e!84745))))

(assert (=> b!129879 (= res!62623 (and (= (size!2501 (_values!2806 newMap!16)) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001)) (= (size!2500 (_keys!4564 newMap!16)) (size!2501 (_values!2806 newMap!16))) (bvsge (_size!588 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!588 newMap!16) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!129881 () Bool)

(declare-fun res!62625 () Bool)

(assert (=> b!129881 (=> (not res!62625) (not e!84745))))

(assert (=> b!129881 (= res!62625 (= (size!2506 newMap!16) (bvadd (_size!588 newMap!16) (bvsdiv (bvadd (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!39507 res!62626) b!129879))

(assert (= (and b!129879 res!62623) b!129880))

(assert (= (and b!129880 res!62624) b!129881))

(assert (= (and b!129881 res!62625) b!129882))

(assert (=> d!39507 m!152389))

(declare-fun m!152681 () Bool)

(assert (=> b!129880 m!152681))

(assert (=> b!129881 m!152681))

(assert (=> d!39421 d!39507))

(declare-fun b!129899 () Bool)

(declare-fun e!84754 () Bool)

(declare-fun lt!67422 () SeekEntryResult!266)

(assert (=> b!129899 (= e!84754 ((_ is Undefined!266) lt!67422))))

(declare-fun b!129900 () Bool)

(declare-fun res!62635 () Bool)

(declare-fun e!84757 () Bool)

(assert (=> b!129900 (=> (not res!62635) (not e!84757))))

(declare-fun call!14110 () Bool)

(assert (=> b!129900 (= res!62635 call!14110)))

(assert (=> b!129900 (= e!84754 e!84757)))

(declare-fun b!129901 () Bool)

(declare-fun e!84756 () Bool)

(declare-fun call!14109 () Bool)

(assert (=> b!129901 (= e!84756 (not call!14109))))

(declare-fun b!129902 () Bool)

(assert (=> b!129902 (and (bvsge (index!3221 lt!67422) #b00000000000000000000000000000000) (bvslt (index!3221 lt!67422) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!62637 () Bool)

(assert (=> b!129902 (= res!62637 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67422)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129902 (=> (not res!62637) (not e!84756))))

(declare-fun bm!14106 () Bool)

(assert (=> bm!14106 (= call!14109 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!129904 () Bool)

(assert (=> b!129904 (= e!84757 (not call!14109))))

(declare-fun bm!14107 () Bool)

(declare-fun c!23928 () Bool)

(assert (=> bm!14107 (= call!14110 (inRange!0 (ite c!23928 (index!3221 lt!67422) (index!3224 lt!67422)) (mask!7101 newMap!16)))))

(declare-fun d!39509 () Bool)

(declare-fun e!84755 () Bool)

(assert (=> d!39509 e!84755))

(assert (=> d!39509 (= c!23928 ((_ is MissingZero!266) lt!67422))))

(assert (=> d!39509 (= lt!67422 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun lt!67421 () Unit!4042)

(declare-fun choose!796 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) Int) Unit!4042)

(assert (=> d!39509 (= lt!67421 (choose!796 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39509 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39509 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)) lt!67421)))

(declare-fun b!129903 () Bool)

(declare-fun res!62638 () Bool)

(assert (=> b!129903 (=> (not res!62638) (not e!84757))))

(assert (=> b!129903 (= res!62638 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67422)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129903 (and (bvsge (index!3224 lt!67422) #b00000000000000000000000000000000) (bvslt (index!3224 lt!67422) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129905 () Bool)

(assert (=> b!129905 (= e!84755 e!84756)))

(declare-fun res!62636 () Bool)

(assert (=> b!129905 (= res!62636 call!14110)))

(assert (=> b!129905 (=> (not res!62636) (not e!84756))))

(declare-fun b!129906 () Bool)

(assert (=> b!129906 (= e!84755 e!84754)))

(declare-fun c!23927 () Bool)

(assert (=> b!129906 (= c!23927 ((_ is MissingVacant!266) lt!67422))))

(assert (= (and d!39509 c!23928) b!129905))

(assert (= (and d!39509 (not c!23928)) b!129906))

(assert (= (and b!129905 res!62636) b!129902))

(assert (= (and b!129902 res!62637) b!129901))

(assert (= (and b!129906 c!23927) b!129900))

(assert (= (and b!129906 (not c!23927)) b!129899))

(assert (= (and b!129900 res!62635) b!129903))

(assert (= (and b!129903 res!62638) b!129904))

(assert (= (or b!129905 b!129900) bm!14107))

(assert (= (or b!129901 b!129904) bm!14106))

(declare-fun m!152683 () Bool)

(assert (=> bm!14107 m!152683))

(declare-fun m!152685 () Bool)

(assert (=> b!129903 m!152685))

(declare-fun m!152687 () Bool)

(assert (=> b!129902 m!152687))

(assert (=> d!39509 m!152129))

(assert (=> d!39509 m!152245))

(assert (=> d!39509 m!152129))

(declare-fun m!152689 () Bool)

(assert (=> d!39509 m!152689))

(assert (=> d!39509 m!152389))

(assert (=> bm!14106 m!152129))

(assert (=> bm!14106 m!152247))

(assert (=> bm!14053 d!39509))

(declare-fun b!129907 () Bool)

(declare-fun e!84764 () Unit!4042)

(declare-fun Unit!4053 () Unit!4042)

(assert (=> b!129907 (= e!84764 Unit!4053)))

(declare-fun b!129908 () Bool)

(declare-fun e!84760 () ListLongMap!1643)

(declare-fun call!14113 () ListLongMap!1643)

(assert (=> b!129908 (= e!84760 (+!166 call!14113 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!129909 () Bool)

(declare-fun e!84770 () Bool)

(declare-fun lt!67424 () ListLongMap!1643)

(assert (=> b!129909 (= e!84770 (= (apply!113 lt!67424 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!129910 () Bool)

(declare-fun e!84767 () ListLongMap!1643)

(declare-fun call!14112 () ListLongMap!1643)

(assert (=> b!129910 (= e!84767 call!14112)))

(declare-fun b!129911 () Bool)

(declare-fun e!84761 () Bool)

(assert (=> b!129911 (= e!84761 e!84770)))

(declare-fun res!62639 () Bool)

(declare-fun call!14115 () Bool)

(assert (=> b!129911 (= res!62639 call!14115)))

(assert (=> b!129911 (=> (not res!62639) (not e!84770))))

(declare-fun b!129912 () Bool)

(declare-fun e!84766 () Bool)

(assert (=> b!129912 (= e!84766 (= (apply!113 lt!67424 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129912 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(assert (=> b!129912 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129913 () Bool)

(declare-fun e!84763 () Bool)

(assert (=> b!129913 (= e!84763 e!84761)))

(declare-fun c!23934 () Bool)

(assert (=> b!129913 (= c!23934 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14108 () Bool)

(declare-fun call!14116 () ListLongMap!1643)

(assert (=> bm!14108 (= call!14116 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39511 () Bool)

(assert (=> d!39511 e!84763))

(declare-fun res!62641 () Bool)

(assert (=> d!39511 (=> (not res!62641) (not e!84763))))

(assert (=> d!39511 (= res!62641 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67444 () ListLongMap!1643)

(assert (=> d!39511 (= lt!67424 lt!67444)))

(declare-fun lt!67436 () Unit!4042)

(assert (=> d!39511 (= lt!67436 e!84764)))

(declare-fun c!23933 () Bool)

(declare-fun e!84768 () Bool)

(assert (=> d!39511 (= c!23933 e!84768)))

(declare-fun res!62643 () Bool)

(assert (=> d!39511 (=> (not res!62643) (not e!84768))))

(assert (=> d!39511 (= res!62643 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39511 (= lt!67444 e!84760)))

(declare-fun c!23930 () Bool)

(assert (=> d!39511 (= c!23930 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39511 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39511 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67424)))

(declare-fun b!129914 () Bool)

(declare-fun e!84769 () Bool)

(assert (=> b!129914 (= e!84769 (= (apply!113 lt!67424 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!129915 () Bool)

(assert (=> b!129915 (= e!84768 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14109 () Bool)

(declare-fun call!14117 () ListLongMap!1643)

(declare-fun call!14114 () ListLongMap!1643)

(assert (=> bm!14109 (= call!14117 call!14114)))

(declare-fun b!129916 () Bool)

(declare-fun lt!67429 () Unit!4042)

(assert (=> b!129916 (= e!84764 lt!67429)))

(declare-fun lt!67430 () ListLongMap!1643)

(assert (=> b!129916 (= lt!67430 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67425 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67425 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67437 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67437 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67438 () Unit!4042)

(assert (=> b!129916 (= lt!67438 (addStillContains!89 lt!67430 lt!67425 (zeroValue!2682 newMap!16) lt!67437))))

(assert (=> b!129916 (contains!873 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) lt!67437)))

(declare-fun lt!67443 () Unit!4042)

(assert (=> b!129916 (= lt!67443 lt!67438)))

(declare-fun lt!67423 () ListLongMap!1643)

(assert (=> b!129916 (= lt!67423 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67431 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67431 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67442 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67442 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67427 () Unit!4042)

(assert (=> b!129916 (= lt!67427 (addApplyDifferent!89 lt!67423 lt!67431 (minValue!2682 newMap!16) lt!67442))))

(assert (=> b!129916 (= (apply!113 (+!166 lt!67423 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) lt!67442) (apply!113 lt!67423 lt!67442))))

(declare-fun lt!67439 () Unit!4042)

(assert (=> b!129916 (= lt!67439 lt!67427)))

(declare-fun lt!67432 () ListLongMap!1643)

(assert (=> b!129916 (= lt!67432 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67441 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67441 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67426 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67426 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67433 () Unit!4042)

(assert (=> b!129916 (= lt!67433 (addApplyDifferent!89 lt!67432 lt!67441 (zeroValue!2682 newMap!16) lt!67426))))

(assert (=> b!129916 (= (apply!113 (+!166 lt!67432 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) lt!67426) (apply!113 lt!67432 lt!67426))))

(declare-fun lt!67434 () Unit!4042)

(assert (=> b!129916 (= lt!67434 lt!67433)))

(declare-fun lt!67440 () ListLongMap!1643)

(assert (=> b!129916 (= lt!67440 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67428 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67428 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67435 () (_ BitVec 64))

(assert (=> b!129916 (= lt!67435 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129916 (= lt!67429 (addApplyDifferent!89 lt!67440 lt!67428 (minValue!2682 newMap!16) lt!67435))))

(assert (=> b!129916 (= (apply!113 (+!166 lt!67440 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) lt!67435) (apply!113 lt!67440 lt!67435))))

(declare-fun b!129917 () Bool)

(declare-fun res!62647 () Bool)

(assert (=> b!129917 (=> (not res!62647) (not e!84763))))

(declare-fun e!84758 () Bool)

(assert (=> b!129917 (= res!62647 e!84758)))

(declare-fun c!23932 () Bool)

(assert (=> b!129917 (= c!23932 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!129918 () Bool)

(declare-fun res!62644 () Bool)

(assert (=> b!129918 (=> (not res!62644) (not e!84763))))

(declare-fun e!84759 () Bool)

(assert (=> b!129918 (= res!62644 e!84759)))

(declare-fun res!62645 () Bool)

(assert (=> b!129918 (=> res!62645 e!84759)))

(declare-fun e!84762 () Bool)

(assert (=> b!129918 (= res!62645 (not e!84762))))

(declare-fun res!62646 () Bool)

(assert (=> b!129918 (=> (not res!62646) (not e!84762))))

(assert (=> b!129918 (= res!62646 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14110 () Bool)

(declare-fun call!14111 () Bool)

(assert (=> bm!14110 (= call!14111 (contains!873 lt!67424 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!23929 () Bool)

(declare-fun bm!14111 () Bool)

(assert (=> bm!14111 (= call!14113 (+!166 (ite c!23930 call!14116 (ite c!23929 call!14114 call!14117)) (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14112 () Bool)

(assert (=> bm!14112 (= call!14114 call!14116)))

(declare-fun b!129919 () Bool)

(declare-fun e!84765 () ListLongMap!1643)

(assert (=> b!129919 (= e!84765 call!14112)))

(declare-fun b!129920 () Bool)

(assert (=> b!129920 (= e!84762 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14113 () Bool)

(assert (=> bm!14113 (= call!14112 call!14113)))

(declare-fun b!129921 () Bool)

(assert (=> b!129921 (= e!84761 (not call!14115))))

(declare-fun b!129922 () Bool)

(declare-fun c!23931 () Bool)

(assert (=> b!129922 (= c!23931 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!129922 (= e!84767 e!84765)))

(declare-fun b!129923 () Bool)

(assert (=> b!129923 (= e!84758 (not call!14111))))

(declare-fun b!129924 () Bool)

(assert (=> b!129924 (= e!84758 e!84769)))

(declare-fun res!62642 () Bool)

(assert (=> b!129924 (= res!62642 call!14111)))

(assert (=> b!129924 (=> (not res!62642) (not e!84769))))

(declare-fun b!129925 () Bool)

(assert (=> b!129925 (= e!84760 e!84767)))

(assert (=> b!129925 (= c!23929 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14114 () Bool)

(assert (=> bm!14114 (= call!14115 (contains!873 lt!67424 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129926 () Bool)

(assert (=> b!129926 (= e!84765 call!14117)))

(declare-fun b!129927 () Bool)

(assert (=> b!129927 (= e!84759 e!84766)))

(declare-fun res!62640 () Bool)

(assert (=> b!129927 (=> (not res!62640) (not e!84766))))

(assert (=> b!129927 (= res!62640 (contains!873 lt!67424 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!129927 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39511 c!23930) b!129908))

(assert (= (and d!39511 (not c!23930)) b!129925))

(assert (= (and b!129925 c!23929) b!129910))

(assert (= (and b!129925 (not c!23929)) b!129922))

(assert (= (and b!129922 c!23931) b!129919))

(assert (= (and b!129922 (not c!23931)) b!129926))

(assert (= (or b!129919 b!129926) bm!14109))

(assert (= (or b!129910 bm!14109) bm!14112))

(assert (= (or b!129910 b!129919) bm!14113))

(assert (= (or b!129908 bm!14112) bm!14108))

(assert (= (or b!129908 bm!14113) bm!14111))

(assert (= (and d!39511 res!62643) b!129915))

(assert (= (and d!39511 c!23933) b!129916))

(assert (= (and d!39511 (not c!23933)) b!129907))

(assert (= (and d!39511 res!62641) b!129918))

(assert (= (and b!129918 res!62646) b!129920))

(assert (= (and b!129918 (not res!62645)) b!129927))

(assert (= (and b!129927 res!62640) b!129912))

(assert (= (and b!129918 res!62644) b!129917))

(assert (= (and b!129917 c!23932) b!129924))

(assert (= (and b!129917 (not c!23932)) b!129923))

(assert (= (and b!129924 res!62642) b!129914))

(assert (= (or b!129924 b!129923) bm!14110))

(assert (= (and b!129917 res!62647) b!129913))

(assert (= (and b!129913 c!23934) b!129911))

(assert (= (and b!129913 (not c!23934)) b!129921))

(assert (= (and b!129911 res!62639) b!129909))

(assert (= (or b!129911 b!129921) bm!14114))

(declare-fun b_lambda!5771 () Bool)

(assert (=> (not b_lambda!5771) (not b!129912)))

(assert (=> b!129912 t!6088))

(declare-fun b_and!8041 () Bool)

(assert (= b_and!8037 (and (=> t!6088 result!3917) b_and!8041)))

(assert (=> b!129912 t!6090))

(declare-fun b_and!8043 () Bool)

(assert (= b_and!8039 (and (=> t!6090 result!3919) b_and!8043)))

(declare-fun m!152691 () Bool)

(assert (=> b!129909 m!152691))

(declare-fun m!152693 () Bool)

(assert (=> bm!14108 m!152693))

(declare-fun m!152695 () Bool)

(assert (=> b!129908 m!152695))

(assert (=> d!39511 m!152389))

(assert (=> b!129927 m!152369))

(assert (=> b!129927 m!152369))

(declare-fun m!152697 () Bool)

(assert (=> b!129927 m!152697))

(assert (=> b!129915 m!152369))

(assert (=> b!129915 m!152369))

(assert (=> b!129915 m!152403))

(declare-fun m!152699 () Bool)

(assert (=> b!129916 m!152699))

(declare-fun m!152701 () Bool)

(assert (=> b!129916 m!152701))

(declare-fun m!152703 () Bool)

(assert (=> b!129916 m!152703))

(assert (=> b!129916 m!152369))

(declare-fun m!152705 () Bool)

(assert (=> b!129916 m!152705))

(declare-fun m!152707 () Bool)

(assert (=> b!129916 m!152707))

(declare-fun m!152709 () Bool)

(assert (=> b!129916 m!152709))

(declare-fun m!152711 () Bool)

(assert (=> b!129916 m!152711))

(assert (=> b!129916 m!152701))

(declare-fun m!152713 () Bool)

(assert (=> b!129916 m!152713))

(declare-fun m!152715 () Bool)

(assert (=> b!129916 m!152715))

(assert (=> b!129916 m!152693))

(assert (=> b!129916 m!152713))

(declare-fun m!152717 () Bool)

(assert (=> b!129916 m!152717))

(declare-fun m!152719 () Bool)

(assert (=> b!129916 m!152719))

(assert (=> b!129916 m!152707))

(declare-fun m!152721 () Bool)

(assert (=> b!129916 m!152721))

(declare-fun m!152723 () Bool)

(assert (=> b!129916 m!152723))

(declare-fun m!152725 () Bool)

(assert (=> b!129916 m!152725))

(declare-fun m!152727 () Bool)

(assert (=> b!129916 m!152727))

(assert (=> b!129916 m!152709))

(declare-fun m!152729 () Bool)

(assert (=> bm!14110 m!152729))

(assert (=> b!129920 m!152369))

(assert (=> b!129920 m!152369))

(assert (=> b!129920 m!152403))

(declare-fun m!152731 () Bool)

(assert (=> b!129914 m!152731))

(assert (=> b!129912 m!152369))

(assert (=> b!129912 m!152559))

(assert (=> b!129912 m!152441))

(assert (=> b!129912 m!152561))

(assert (=> b!129912 m!152369))

(declare-fun m!152733 () Bool)

(assert (=> b!129912 m!152733))

(assert (=> b!129912 m!152441))

(assert (=> b!129912 m!152559))

(declare-fun m!152735 () Bool)

(assert (=> bm!14111 m!152735))

(declare-fun m!152737 () Bool)

(assert (=> bm!14114 m!152737))

(assert (=> d!39441 d!39511))

(declare-fun d!39513 () Bool)

(assert (=> d!39513 (= (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129691 d!39513))

(declare-fun d!39515 () Bool)

(assert (=> d!39515 (= (inRange!0 (ite c!23846 (ite c!23857 (index!3222 lt!67196) (ite c!23854 (index!3221 lt!67213) (index!3224 lt!67213))) (ite c!23858 (index!3222 lt!67197) (ite c!23856 (index!3221 lt!67207) (index!3224 lt!67207)))) (mask!7101 newMap!16)) (and (bvsge (ite c!23846 (ite c!23857 (index!3222 lt!67196) (ite c!23854 (index!3221 lt!67213) (index!3224 lt!67213))) (ite c!23858 (index!3222 lt!67197) (ite c!23856 (index!3221 lt!67207) (index!3224 lt!67207)))) #b00000000000000000000000000000000) (bvslt (ite c!23846 (ite c!23857 (index!3222 lt!67196) (ite c!23854 (index!3221 lt!67213) (index!3224 lt!67213))) (ite c!23858 (index!3222 lt!67197) (ite c!23856 (index!3221 lt!67207) (index!3224 lt!67207)))) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!14054 d!39515))

(declare-fun d!39517 () Bool)

(declare-fun e!84771 () Bool)

(assert (=> d!39517 e!84771))

(declare-fun res!62648 () Bool)

(assert (=> d!39517 (=> res!62648 e!84771)))

(declare-fun lt!67445 () Bool)

(assert (=> d!39517 (= res!62648 (not lt!67445))))

(declare-fun lt!67447 () Bool)

(assert (=> d!39517 (= lt!67445 lt!67447)))

(declare-fun lt!67446 () Unit!4042)

(declare-fun e!84772 () Unit!4042)

(assert (=> d!39517 (= lt!67446 e!84772)))

(declare-fun c!23935 () Bool)

(assert (=> d!39517 (= c!23935 lt!67447)))

(assert (=> d!39517 (= lt!67447 (containsKey!173 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39517 (= (contains!873 lt!67261 #b0000000000000000000000000000000000000000000000000000000000000000) lt!67445)))

(declare-fun b!129928 () Bool)

(declare-fun lt!67448 () Unit!4042)

(assert (=> b!129928 (= e!84772 lt!67448)))

(assert (=> b!129928 (= lt!67448 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129928 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129929 () Bool)

(declare-fun Unit!4054 () Unit!4042)

(assert (=> b!129929 (= e!84772 Unit!4054)))

(declare-fun b!129930 () Bool)

(assert (=> b!129930 (= e!84771 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39517 c!23935) b!129928))

(assert (= (and d!39517 (not c!23935)) b!129929))

(assert (= (and d!39517 (not res!62648)) b!129930))

(declare-fun m!152739 () Bool)

(assert (=> d!39517 m!152739))

(declare-fun m!152741 () Bool)

(assert (=> b!129928 m!152741))

(assert (=> b!129928 m!152493))

(assert (=> b!129928 m!152493))

(declare-fun m!152743 () Bool)

(assert (=> b!129928 m!152743))

(assert (=> b!129930 m!152493))

(assert (=> b!129930 m!152493))

(assert (=> b!129930 m!152743))

(assert (=> bm!14077 d!39517))

(declare-fun b!129941 () Bool)

(declare-fun e!84782 () Bool)

(declare-fun call!14120 () Bool)

(assert (=> b!129941 (= e!84782 call!14120)))

(declare-fun b!129942 () Bool)

(declare-fun e!84784 () Bool)

(declare-fun contains!876 (List!1687 (_ BitVec 64)) Bool)

(assert (=> b!129942 (= e!84784 (contains!876 Nil!1684 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!39519 () Bool)

(declare-fun res!62657 () Bool)

(declare-fun e!84783 () Bool)

(assert (=> d!39519 (=> res!62657 e!84783)))

(assert (=> d!39519 (= res!62657 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39519 (= (arrayNoDuplicates!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 Nil!1684) e!84783)))

(declare-fun b!129943 () Bool)

(declare-fun e!84781 () Bool)

(assert (=> b!129943 (= e!84783 e!84781)))

(declare-fun res!62656 () Bool)

(assert (=> b!129943 (=> (not res!62656) (not e!84781))))

(assert (=> b!129943 (= res!62656 (not e!84784))))

(declare-fun res!62655 () Bool)

(assert (=> b!129943 (=> (not res!62655) (not e!84784))))

(assert (=> b!129943 (= res!62655 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14117 () Bool)

(declare-fun c!23938 () Bool)

(assert (=> bm!14117 (= call!14120 (arrayNoDuplicates!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!23938 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) Nil!1684) Nil!1684)))))

(declare-fun b!129944 () Bool)

(assert (=> b!129944 (= e!84781 e!84782)))

(assert (=> b!129944 (= c!23938 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!129945 () Bool)

(assert (=> b!129945 (= e!84782 call!14120)))

(assert (= (and d!39519 (not res!62657)) b!129943))

(assert (= (and b!129943 res!62655) b!129942))

(assert (= (and b!129943 res!62656) b!129944))

(assert (= (and b!129944 c!23938) b!129945))

(assert (= (and b!129944 (not c!23938)) b!129941))

(assert (= (or b!129945 b!129941) bm!14117))

(assert (=> b!129942 m!152369))

(assert (=> b!129942 m!152369))

(declare-fun m!152745 () Bool)

(assert (=> b!129942 m!152745))

(assert (=> b!129943 m!152369))

(assert (=> b!129943 m!152369))

(assert (=> b!129943 m!152403))

(assert (=> bm!14117 m!152369))

(declare-fun m!152747 () Bool)

(assert (=> bm!14117 m!152747))

(assert (=> b!129944 m!152369))

(assert (=> b!129944 m!152369))

(assert (=> b!129944 m!152403))

(assert (=> b!129505 d!39519))

(declare-fun d!39521 () Bool)

(assert (=> d!39521 (isDefined!122 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun lt!67451 () Unit!4042)

(declare-fun choose!797 (List!1685 (_ BitVec 64)) Unit!4042)

(assert (=> d!39521 (= lt!67451 (choose!797 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun e!84787 () Bool)

(assert (=> d!39521 e!84787))

(declare-fun res!62660 () Bool)

(assert (=> d!39521 (=> (not res!62660) (not e!84787))))

(declare-fun isStrictlySorted!306 (List!1685) Bool)

(assert (=> d!39521 (= res!62660 (isStrictlySorted!306 (toList!837 lt!67103)))))

(assert (=> d!39521 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67451)))

(declare-fun b!129948 () Bool)

(assert (=> b!129948 (= e!84787 (containsKey!173 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39521 res!62660) b!129948))

(assert (=> d!39521 m!152129))

(assert (=> d!39521 m!152241))

(assert (=> d!39521 m!152241))

(assert (=> d!39521 m!152243))

(assert (=> d!39521 m!152129))

(declare-fun m!152749 () Bool)

(assert (=> d!39521 m!152749))

(declare-fun m!152751 () Bool)

(assert (=> d!39521 m!152751))

(assert (=> b!129948 m!152129))

(assert (=> b!129948 m!152237))

(assert (=> b!129512 d!39521))

(declare-fun d!39523 () Bool)

(declare-fun isEmpty!409 (Option!176) Bool)

(assert (=> d!39523 (= (isDefined!122 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) (not (isEmpty!409 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun bs!5395 () Bool)

(assert (= bs!5395 d!39523))

(assert (=> bs!5395 m!152241))

(declare-fun m!152753 () Bool)

(assert (=> bs!5395 m!152753))

(assert (=> b!129512 d!39523))

(declare-fun b!129957 () Bool)

(declare-fun e!84792 () Option!176)

(assert (=> b!129957 (= e!84792 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67103)))))))

(declare-fun b!129960 () Bool)

(declare-fun e!84793 () Option!176)

(assert (=> b!129960 (= e!84793 None!174)))

(declare-fun b!129959 () Bool)

(assert (=> b!129959 (= e!84793 (getValueByKey!170 (t!6076 (toList!837 lt!67103)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!129958 () Bool)

(assert (=> b!129958 (= e!84792 e!84793)))

(declare-fun c!23944 () Bool)

(assert (=> b!129958 (= c!23944 (and ((_ is Cons!1681) (toList!837 lt!67103)) (not (= (_1!1283 (h!2285 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun c!23943 () Bool)

(declare-fun d!39525 () Bool)

(assert (=> d!39525 (= c!23943 (and ((_ is Cons!1681) (toList!837 lt!67103)) (= (_1!1283 (h!2285 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39525 (= (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!84792)))

(assert (= (and d!39525 c!23943) b!129957))

(assert (= (and d!39525 (not c!23943)) b!129958))

(assert (= (and b!129958 c!23944) b!129959))

(assert (= (and b!129958 (not c!23944)) b!129960))

(assert (=> b!129959 m!152129))

(declare-fun m!152755 () Bool)

(assert (=> b!129959 m!152755))

(assert (=> b!129512 d!39525))

(declare-fun d!39527 () Bool)

(declare-fun e!84794 () Bool)

(assert (=> d!39527 e!84794))

(declare-fun res!62661 () Bool)

(assert (=> d!39527 (=> res!62661 e!84794)))

(declare-fun lt!67452 () Bool)

(assert (=> d!39527 (= res!62661 (not lt!67452))))

(declare-fun lt!67454 () Bool)

(assert (=> d!39527 (= lt!67452 lt!67454)))

(declare-fun lt!67453 () Unit!4042)

(declare-fun e!84795 () Unit!4042)

(assert (=> d!39527 (= lt!67453 e!84795)))

(declare-fun c!23945 () Bool)

(assert (=> d!39527 (= c!23945 lt!67454)))

(assert (=> d!39527 (= lt!67454 (containsKey!173 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(assert (=> d!39527 (= (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))) lt!67452)))

(declare-fun b!129961 () Bool)

(declare-fun lt!67455 () Unit!4042)

(assert (=> b!129961 (= e!84795 lt!67455)))

(assert (=> b!129961 (= lt!67455 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(assert (=> b!129961 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(declare-fun b!129962 () Bool)

(declare-fun Unit!4055 () Unit!4042)

(assert (=> b!129962 (= e!84795 Unit!4055)))

(declare-fun b!129963 () Bool)

(assert (=> b!129963 (= e!84794 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))))

(assert (= (and d!39527 c!23945) b!129961))

(assert (= (and d!39527 (not c!23945)) b!129962))

(assert (= (and d!39527 (not res!62661)) b!129963))

(assert (=> d!39527 m!152281))

(declare-fun m!152757 () Bool)

(assert (=> d!39527 m!152757))

(assert (=> b!129961 m!152281))

(declare-fun m!152759 () Bool)

(assert (=> b!129961 m!152759))

(assert (=> b!129961 m!152281))

(declare-fun m!152761 () Bool)

(assert (=> b!129961 m!152761))

(assert (=> b!129961 m!152761))

(declare-fun m!152763 () Bool)

(assert (=> b!129961 m!152763))

(assert (=> b!129963 m!152281))

(assert (=> b!129963 m!152761))

(assert (=> b!129963 m!152761))

(assert (=> b!129963 m!152763))

(assert (=> b!129610 d!39527))

(declare-fun b!129964 () Bool)

(declare-fun e!84802 () Unit!4042)

(declare-fun Unit!4056 () Unit!4042)

(assert (=> b!129964 (= e!84802 Unit!4056)))

(declare-fun b!129965 () Bool)

(declare-fun e!84798 () ListLongMap!1643)

(declare-fun call!14123 () ListLongMap!1643)

(assert (=> b!129965 (= e!84798 (+!166 call!14123 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!129966 () Bool)

(declare-fun e!84808 () Bool)

(declare-fun lt!67457 () ListLongMap!1643)

(assert (=> b!129966 (= e!84808 (= (apply!113 lt!67457 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!129967 () Bool)

(declare-fun e!84805 () ListLongMap!1643)

(declare-fun call!14122 () ListLongMap!1643)

(assert (=> b!129967 (= e!84805 call!14122)))

(declare-fun b!129968 () Bool)

(declare-fun e!84799 () Bool)

(assert (=> b!129968 (= e!84799 e!84808)))

(declare-fun res!62662 () Bool)

(declare-fun call!14125 () Bool)

(assert (=> b!129968 (= res!62662 call!14125)))

(assert (=> b!129968 (=> (not res!62662) (not e!84808))))

(declare-fun b!129969 () Bool)

(declare-fun e!84804 () Bool)

(assert (=> b!129969 (= e!84804 (= (apply!113 lt!67457 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 lt!67193)))))

(assert (=> b!129969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!129970 () Bool)

(declare-fun e!84801 () Bool)

(assert (=> b!129970 (= e!84801 e!84799)))

(declare-fun c!23951 () Bool)

(assert (=> b!129970 (= c!23951 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14118 () Bool)

(declare-fun call!14126 () ListLongMap!1643)

(assert (=> bm!14118 (= call!14126 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39529 () Bool)

(assert (=> d!39529 e!84801))

(declare-fun res!62664 () Bool)

(assert (=> d!39529 (=> (not res!62664) (not e!84801))))

(assert (=> d!39529 (= res!62664 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67477 () ListLongMap!1643)

(assert (=> d!39529 (= lt!67457 lt!67477)))

(declare-fun lt!67469 () Unit!4042)

(assert (=> d!39529 (= lt!67469 e!84802)))

(declare-fun c!23950 () Bool)

(declare-fun e!84806 () Bool)

(assert (=> d!39529 (= c!23950 e!84806)))

(declare-fun res!62666 () Bool)

(assert (=> d!39529 (=> (not res!62666) (not e!84806))))

(assert (=> d!39529 (= res!62666 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39529 (= lt!67477 e!84798)))

(declare-fun c!23947 () Bool)

(assert (=> d!39529 (= c!23947 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39529 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39529 (= (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67457)))

(declare-fun b!129971 () Bool)

(declare-fun e!84807 () Bool)

(assert (=> b!129971 (= e!84807 (= (apply!113 lt!67457 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!129972 () Bool)

(assert (=> b!129972 (= e!84806 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14119 () Bool)

(declare-fun call!14127 () ListLongMap!1643)

(declare-fun call!14124 () ListLongMap!1643)

(assert (=> bm!14119 (= call!14127 call!14124)))

(declare-fun b!129973 () Bool)

(declare-fun lt!67462 () Unit!4042)

(assert (=> b!129973 (= e!84802 lt!67462)))

(declare-fun lt!67463 () ListLongMap!1643)

(assert (=> b!129973 (= lt!67463 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67458 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67458 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67470 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67470 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67471 () Unit!4042)

(assert (=> b!129973 (= lt!67471 (addStillContains!89 lt!67463 lt!67458 (zeroValue!2682 newMap!16) lt!67470))))

(assert (=> b!129973 (contains!873 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) lt!67470)))

(declare-fun lt!67476 () Unit!4042)

(assert (=> b!129973 (= lt!67476 lt!67471)))

(declare-fun lt!67456 () ListLongMap!1643)

(assert (=> b!129973 (= lt!67456 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67464 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67464 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67475 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67475 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67460 () Unit!4042)

(assert (=> b!129973 (= lt!67460 (addApplyDifferent!89 lt!67456 lt!67464 (minValue!2682 newMap!16) lt!67475))))

(assert (=> b!129973 (= (apply!113 (+!166 lt!67456 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) lt!67475) (apply!113 lt!67456 lt!67475))))

(declare-fun lt!67472 () Unit!4042)

(assert (=> b!129973 (= lt!67472 lt!67460)))

(declare-fun lt!67465 () ListLongMap!1643)

(assert (=> b!129973 (= lt!67465 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67474 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67474 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67459 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67459 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67466 () Unit!4042)

(assert (=> b!129973 (= lt!67466 (addApplyDifferent!89 lt!67465 lt!67474 (zeroValue!2682 newMap!16) lt!67459))))

(assert (=> b!129973 (= (apply!113 (+!166 lt!67465 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) lt!67459) (apply!113 lt!67465 lt!67459))))

(declare-fun lt!67467 () Unit!4042)

(assert (=> b!129973 (= lt!67467 lt!67466)))

(declare-fun lt!67473 () ListLongMap!1643)

(assert (=> b!129973 (= lt!67473 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67461 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67461 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67468 () (_ BitVec 64))

(assert (=> b!129973 (= lt!67468 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!129973 (= lt!67462 (addApplyDifferent!89 lt!67473 lt!67461 (minValue!2682 newMap!16) lt!67468))))

(assert (=> b!129973 (= (apply!113 (+!166 lt!67473 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) lt!67468) (apply!113 lt!67473 lt!67468))))

(declare-fun b!129974 () Bool)

(declare-fun res!62670 () Bool)

(assert (=> b!129974 (=> (not res!62670) (not e!84801))))

(declare-fun e!84796 () Bool)

(assert (=> b!129974 (= res!62670 e!84796)))

(declare-fun c!23949 () Bool)

(assert (=> b!129974 (= c!23949 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!129975 () Bool)

(declare-fun res!62667 () Bool)

(assert (=> b!129975 (=> (not res!62667) (not e!84801))))

(declare-fun e!84797 () Bool)

(assert (=> b!129975 (= res!62667 e!84797)))

(declare-fun res!62668 () Bool)

(assert (=> b!129975 (=> res!62668 e!84797)))

(declare-fun e!84800 () Bool)

(assert (=> b!129975 (= res!62668 (not e!84800))))

(declare-fun res!62669 () Bool)

(assert (=> b!129975 (=> (not res!62669) (not e!84800))))

(assert (=> b!129975 (= res!62669 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14120 () Bool)

(declare-fun call!14121 () Bool)

(assert (=> bm!14120 (= call!14121 (contains!873 lt!67457 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!23946 () Bool)

(declare-fun bm!14121 () Bool)

(assert (=> bm!14121 (= call!14123 (+!166 (ite c!23947 call!14126 (ite c!23946 call!14124 call!14127)) (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14122 () Bool)

(assert (=> bm!14122 (= call!14124 call!14126)))

(declare-fun b!129976 () Bool)

(declare-fun e!84803 () ListLongMap!1643)

(assert (=> b!129976 (= e!84803 call!14122)))

(declare-fun b!129977 () Bool)

(assert (=> b!129977 (= e!84800 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14123 () Bool)

(assert (=> bm!14123 (= call!14122 call!14123)))

(declare-fun b!129978 () Bool)

(assert (=> b!129978 (= e!84799 (not call!14125))))

(declare-fun b!129979 () Bool)

(declare-fun c!23948 () Bool)

(assert (=> b!129979 (= c!23948 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!129979 (= e!84805 e!84803)))

(declare-fun b!129980 () Bool)

(assert (=> b!129980 (= e!84796 (not call!14121))))

(declare-fun b!129981 () Bool)

(assert (=> b!129981 (= e!84796 e!84807)))

(declare-fun res!62665 () Bool)

(assert (=> b!129981 (= res!62665 call!14121)))

(assert (=> b!129981 (=> (not res!62665) (not e!84807))))

(declare-fun b!129982 () Bool)

(assert (=> b!129982 (= e!84798 e!84805)))

(assert (=> b!129982 (= c!23946 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14124 () Bool)

(assert (=> bm!14124 (= call!14125 (contains!873 lt!67457 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!129983 () Bool)

(assert (=> b!129983 (= e!84803 call!14127)))

(declare-fun b!129984 () Bool)

(assert (=> b!129984 (= e!84797 e!84804)))

(declare-fun res!62663 () Bool)

(assert (=> b!129984 (=> (not res!62663) (not e!84804))))

(assert (=> b!129984 (= res!62663 (contains!873 lt!67457 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!129984 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39529 c!23947) b!129965))

(assert (= (and d!39529 (not c!23947)) b!129982))

(assert (= (and b!129982 c!23946) b!129967))

(assert (= (and b!129982 (not c!23946)) b!129979))

(assert (= (and b!129979 c!23948) b!129976))

(assert (= (and b!129979 (not c!23948)) b!129983))

(assert (= (or b!129976 b!129983) bm!14119))

(assert (= (or b!129967 bm!14119) bm!14122))

(assert (= (or b!129967 b!129976) bm!14123))

(assert (= (or b!129965 bm!14122) bm!14118))

(assert (= (or b!129965 bm!14123) bm!14121))

(assert (= (and d!39529 res!62666) b!129972))

(assert (= (and d!39529 c!23950) b!129973))

(assert (= (and d!39529 (not c!23950)) b!129964))

(assert (= (and d!39529 res!62664) b!129975))

(assert (= (and b!129975 res!62669) b!129977))

(assert (= (and b!129975 (not res!62668)) b!129984))

(assert (= (and b!129984 res!62663) b!129969))

(assert (= (and b!129975 res!62667) b!129974))

(assert (= (and b!129974 c!23949) b!129981))

(assert (= (and b!129974 (not c!23949)) b!129980))

(assert (= (and b!129981 res!62665) b!129971))

(assert (= (or b!129981 b!129980) bm!14120))

(assert (= (and b!129974 res!62670) b!129970))

(assert (= (and b!129970 c!23951) b!129968))

(assert (= (and b!129970 (not c!23951)) b!129978))

(assert (= (and b!129968 res!62662) b!129966))

(assert (= (or b!129968 b!129978) bm!14124))

(declare-fun b_lambda!5773 () Bool)

(assert (=> (not b_lambda!5773) (not b!129969)))

(assert (=> b!129969 t!6088))

(declare-fun b_and!8045 () Bool)

(assert (= b_and!8041 (and (=> t!6088 result!3917) b_and!8045)))

(assert (=> b!129969 t!6090))

(declare-fun b_and!8047 () Bool)

(assert (= b_and!8043 (and (=> t!6090 result!3919) b_and!8047)))

(declare-fun m!152765 () Bool)

(assert (=> b!129966 m!152765))

(declare-fun m!152767 () Bool)

(assert (=> bm!14118 m!152767))

(declare-fun m!152769 () Bool)

(assert (=> b!129965 m!152769))

(assert (=> d!39529 m!152389))

(assert (=> b!129984 m!152369))

(assert (=> b!129984 m!152369))

(declare-fun m!152771 () Bool)

(assert (=> b!129984 m!152771))

(assert (=> b!129972 m!152369))

(assert (=> b!129972 m!152369))

(assert (=> b!129972 m!152403))

(declare-fun m!152773 () Bool)

(assert (=> b!129973 m!152773))

(declare-fun m!152775 () Bool)

(assert (=> b!129973 m!152775))

(declare-fun m!152777 () Bool)

(assert (=> b!129973 m!152777))

(assert (=> b!129973 m!152369))

(declare-fun m!152779 () Bool)

(assert (=> b!129973 m!152779))

(declare-fun m!152781 () Bool)

(assert (=> b!129973 m!152781))

(declare-fun m!152783 () Bool)

(assert (=> b!129973 m!152783))

(declare-fun m!152785 () Bool)

(assert (=> b!129973 m!152785))

(assert (=> b!129973 m!152775))

(declare-fun m!152787 () Bool)

(assert (=> b!129973 m!152787))

(declare-fun m!152789 () Bool)

(assert (=> b!129973 m!152789))

(assert (=> b!129973 m!152767))

(assert (=> b!129973 m!152787))

(declare-fun m!152791 () Bool)

(assert (=> b!129973 m!152791))

(declare-fun m!152793 () Bool)

(assert (=> b!129973 m!152793))

(assert (=> b!129973 m!152781))

(declare-fun m!152795 () Bool)

(assert (=> b!129973 m!152795))

(declare-fun m!152797 () Bool)

(assert (=> b!129973 m!152797))

(declare-fun m!152799 () Bool)

(assert (=> b!129973 m!152799))

(declare-fun m!152801 () Bool)

(assert (=> b!129973 m!152801))

(assert (=> b!129973 m!152783))

(declare-fun m!152803 () Bool)

(assert (=> bm!14120 m!152803))

(assert (=> b!129977 m!152369))

(assert (=> b!129977 m!152369))

(assert (=> b!129977 m!152403))

(declare-fun m!152805 () Bool)

(assert (=> b!129971 m!152805))

(assert (=> b!129969 m!152369))

(declare-fun m!152807 () Bool)

(assert (=> b!129969 m!152807))

(assert (=> b!129969 m!152441))

(declare-fun m!152809 () Bool)

(assert (=> b!129969 m!152809))

(assert (=> b!129969 m!152369))

(declare-fun m!152811 () Bool)

(assert (=> b!129969 m!152811))

(assert (=> b!129969 m!152441))

(assert (=> b!129969 m!152807))

(declare-fun m!152813 () Bool)

(assert (=> bm!14121 m!152813))

(declare-fun m!152815 () Bool)

(assert (=> bm!14124 m!152815))

(assert (=> b!129610 d!39529))

(declare-fun d!39531 () Bool)

(declare-fun e!84811 () Bool)

(assert (=> d!39531 e!84811))

(declare-fun res!62673 () Bool)

(assert (=> d!39531 (=> (not res!62673) (not e!84811))))

(assert (=> d!39531 (= res!62673 (and (bvsge (index!3222 lt!67192) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67192) (size!2500 (_keys!4564 newMap!16)))))))

(declare-fun lt!67480 () Unit!4042)

(declare-fun choose!798 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) Int) Unit!4042)

(assert (=> d!39531 (= lt!67480 (choose!798 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39531 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39531 (= (lemmaValidKeyInArrayIsInListMap!118 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (defaultEntry!2823 newMap!16)) lt!67480)))

(declare-fun b!129987 () Bool)

(assert (=> b!129987 (= e!84811 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(assert (= (and d!39531 res!62673) b!129987))

(declare-fun m!152817 () Bool)

(assert (=> d!39531 m!152817))

(assert (=> d!39531 m!152389))

(assert (=> b!129987 m!152279))

(assert (=> b!129987 m!152281))

(assert (=> b!129987 m!152279))

(assert (=> b!129987 m!152281))

(assert (=> b!129987 m!152283))

(assert (=> b!129610 d!39531))

(declare-fun d!39533 () Bool)

(declare-fun e!84814 () Bool)

(assert (=> d!39533 e!84814))

(declare-fun res!62676 () Bool)

(assert (=> d!39533 (=> (not res!62676) (not e!84814))))

(assert (=> d!39533 (= res!62676 (and (bvsge (index!3222 lt!67192) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67192) (size!2501 (_values!2806 newMap!16)))))))

(declare-fun lt!67483 () Unit!4042)

(declare-fun choose!799 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) (_ BitVec 64) V!3457 Int) Unit!4042)

(assert (=> d!39533 (= lt!67483 (choose!799 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39533 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39533 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)) lt!67483)))

(declare-fun b!129990 () Bool)

(assert (=> b!129990 (= e!84814 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))))

(assert (= (and d!39533 res!62676) b!129990))

(assert (=> d!39533 m!152129))

(assert (=> d!39533 m!152151))

(declare-fun m!152819 () Bool)

(assert (=> d!39533 m!152819))

(assert (=> d!39533 m!152389))

(assert (=> b!129990 m!152307))

(assert (=> b!129990 m!152307))

(declare-fun m!152821 () Bool)

(assert (=> b!129990 m!152821))

(assert (=> b!129990 m!152257))

(declare-fun m!152823 () Bool)

(assert (=> b!129990 m!152823))

(assert (=> b!129610 d!39533))

(declare-fun bm!14127 () Bool)

(declare-fun call!14130 () Bool)

(assert (=> bm!14127 (= call!14130 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!129999 () Bool)

(declare-fun e!84823 () Bool)

(assert (=> b!129999 (= e!84823 call!14130)))

(declare-fun b!130000 () Bool)

(declare-fun e!84821 () Bool)

(assert (=> b!130000 (= e!84821 call!14130)))

(declare-fun d!39535 () Bool)

(declare-fun res!62681 () Bool)

(declare-fun e!84822 () Bool)

(assert (=> d!39535 (=> res!62681 e!84822)))

(assert (=> d!39535 (= res!62681 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39535 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 newMap!16) (mask!7101 newMap!16)) e!84822)))

(declare-fun b!130001 () Bool)

(assert (=> b!130001 (= e!84822 e!84823)))

(declare-fun c!23954 () Bool)

(assert (=> b!130001 (= c!23954 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130002 () Bool)

(assert (=> b!130002 (= e!84823 e!84821)))

(declare-fun lt!67492 () (_ BitVec 64))

(assert (=> b!130002 (= lt!67492 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67490 () Unit!4042)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4721 (_ BitVec 64) (_ BitVec 32)) Unit!4042)

(assert (=> b!130002 (= lt!67490 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000))))

(assert (=> b!130002 (arrayContainsKey!0 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000)))

(declare-fun lt!67491 () Unit!4042)

(assert (=> b!130002 (= lt!67491 lt!67490)))

(declare-fun res!62682 () Bool)

(assert (=> b!130002 (= res!62682 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (_keys!4564 newMap!16) (mask!7101 newMap!16)) (Found!266 #b00000000000000000000000000000000)))))

(assert (=> b!130002 (=> (not res!62682) (not e!84821))))

(assert (= (and d!39535 (not res!62681)) b!130001))

(assert (= (and b!130001 c!23954) b!130002))

(assert (= (and b!130001 (not c!23954)) b!129999))

(assert (= (and b!130002 res!62682) b!130000))

(assert (= (or b!130000 b!129999) bm!14127))

(declare-fun m!152825 () Bool)

(assert (=> bm!14127 m!152825))

(assert (=> b!130001 m!152369))

(assert (=> b!130001 m!152369))

(assert (=> b!130001 m!152403))

(assert (=> b!130002 m!152369))

(declare-fun m!152827 () Bool)

(assert (=> b!130002 m!152827))

(declare-fun m!152829 () Bool)

(assert (=> b!130002 m!152829))

(assert (=> b!130002 m!152369))

(declare-fun m!152831 () Bool)

(assert (=> b!130002 m!152831))

(assert (=> b!129504 d!39535))

(declare-fun d!39537 () Bool)

(assert (=> d!39537 (= (get!1471 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3159 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!129639 d!39537))

(assert (=> b!129514 d!39523))

(assert (=> b!129514 d!39525))

(declare-fun d!39539 () Bool)

(declare-fun e!84824 () Bool)

(assert (=> d!39539 e!84824))

(declare-fun res!62684 () Bool)

(assert (=> d!39539 (=> (not res!62684) (not e!84824))))

(declare-fun lt!67494 () ListLongMap!1643)

(assert (=> d!39539 (= res!62684 (contains!873 lt!67494 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun lt!67495 () List!1685)

(assert (=> d!39539 (= lt!67494 (ListLongMap!1644 lt!67495))))

(declare-fun lt!67496 () Unit!4042)

(declare-fun lt!67493 () Unit!4042)

(assert (=> d!39539 (= lt!67496 lt!67493)))

(assert (=> d!39539 (= (getValueByKey!170 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (Some!175 (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39539 (= lt!67493 (lemmaContainsTupThenGetReturnValue!85 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39539 (= lt!67495 (insertStrictlySorted!88 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39539 (= (+!166 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67494)))

(declare-fun b!130003 () Bool)

(declare-fun res!62683 () Bool)

(assert (=> b!130003 (=> (not res!62683) (not e!84824))))

(assert (=> b!130003 (= res!62683 (= (getValueByKey!170 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (Some!175 (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun b!130004 () Bool)

(assert (=> b!130004 (= e!84824 (contains!875 (toList!837 lt!67494) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (= (and d!39539 res!62684) b!130003))

(assert (= (and b!130003 res!62683) b!130004))

(declare-fun m!152833 () Bool)

(assert (=> d!39539 m!152833))

(declare-fun m!152835 () Bool)

(assert (=> d!39539 m!152835))

(declare-fun m!152837 () Bool)

(assert (=> d!39539 m!152837))

(declare-fun m!152839 () Bool)

(assert (=> d!39539 m!152839))

(declare-fun m!152841 () Bool)

(assert (=> b!130003 m!152841))

(declare-fun m!152843 () Bool)

(assert (=> b!130004 m!152843))

(assert (=> bm!14078 d!39539))

(declare-fun d!39541 () Bool)

(assert (=> d!39541 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67499 () Unit!4042)

(declare-fun choose!800 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 V!3457 Int) Unit!4042)

(assert (=> d!39541 (= lt!67499 (choose!800 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39541 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39541 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)) lt!67499)))

(declare-fun bs!5396 () Bool)

(assert (= bs!5396 d!39541))

(assert (=> bs!5396 m!152307))

(assert (=> bs!5396 m!152389))

(assert (=> bs!5396 m!152151))

(declare-fun m!152845 () Bool)

(assert (=> bs!5396 m!152845))

(assert (=> bs!5396 m!152307))

(declare-fun m!152847 () Bool)

(assert (=> bs!5396 m!152847))

(assert (=> bs!5396 m!152151))

(declare-fun m!152849 () Bool)

(assert (=> bs!5396 m!152849))

(assert (=> b!129598 d!39541))

(assert (=> b!129696 d!39513))

(assert (=> d!39443 d!39423))

(declare-fun d!39543 () Bool)

(assert (=> d!39543 (= (get!1472 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129640 d!39543))

(declare-fun d!39545 () Bool)

(declare-fun e!84825 () Bool)

(assert (=> d!39545 e!84825))

(declare-fun res!62685 () Bool)

(assert (=> d!39545 (=> res!62685 e!84825)))

(declare-fun lt!67500 () Bool)

(assert (=> d!39545 (= res!62685 (not lt!67500))))

(declare-fun lt!67502 () Bool)

(assert (=> d!39545 (= lt!67500 lt!67502)))

(declare-fun lt!67501 () Unit!4042)

(declare-fun e!84826 () Unit!4042)

(assert (=> d!39545 (= lt!67501 e!84826)))

(declare-fun c!23955 () Bool)

(assert (=> d!39545 (= c!23955 lt!67502)))

(assert (=> d!39545 (= lt!67502 (containsKey!173 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39545 (= (contains!873 e!84592 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67500)))

(declare-fun b!130005 () Bool)

(declare-fun lt!67503 () Unit!4042)

(assert (=> b!130005 (= e!84826 lt!67503)))

(assert (=> b!130005 (= lt!67503 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!130005 (isDefined!122 (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130006 () Bool)

(declare-fun Unit!4057 () Unit!4042)

(assert (=> b!130006 (= e!84826 Unit!4057)))

(declare-fun b!130007 () Bool)

(assert (=> b!130007 (= e!84825 (isDefined!122 (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (= (and d!39545 c!23955) b!130005))

(assert (= (and d!39545 (not c!23955)) b!130006))

(assert (= (and d!39545 (not res!62685)) b!130007))

(assert (=> d!39545 m!152129))

(declare-fun m!152851 () Bool)

(assert (=> d!39545 m!152851))

(assert (=> b!130005 m!152129))

(declare-fun m!152853 () Bool)

(assert (=> b!130005 m!152853))

(assert (=> b!130005 m!152129))

(declare-fun m!152855 () Bool)

(assert (=> b!130005 m!152855))

(assert (=> b!130005 m!152855))

(declare-fun m!152857 () Bool)

(assert (=> b!130005 m!152857))

(assert (=> b!130007 m!152129))

(assert (=> b!130007 m!152855))

(assert (=> b!130007 m!152855))

(assert (=> b!130007 m!152857))

(assert (=> bm!14058 d!39545))

(declare-fun d!39547 () Bool)

(assert (=> d!39547 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67506 () Unit!4042)

(declare-fun choose!801 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 V!3457 Int) Unit!4042)

(assert (=> d!39547 (= lt!67506 (choose!801 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67200 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39547 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39547 (= (lemmaChangeZeroKeyThenAddPairToListMap!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67200 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) (defaultEntry!2823 newMap!16)) lt!67506)))

(declare-fun bs!5397 () Bool)

(assert (= bs!5397 d!39547))

(assert (=> bs!5397 m!152389))

(assert (=> bs!5397 m!152307))

(assert (=> bs!5397 m!152151))

(declare-fun m!152859 () Bool)

(assert (=> bs!5397 m!152859))

(assert (=> bs!5397 m!152307))

(declare-fun m!152861 () Bool)

(assert (=> bs!5397 m!152861))

(assert (=> bs!5397 m!152151))

(declare-fun m!152863 () Bool)

(assert (=> bs!5397 m!152863))

(assert (=> b!129617 d!39547))

(declare-fun d!39549 () Bool)

(declare-fun res!62690 () Bool)

(declare-fun e!84831 () Bool)

(assert (=> d!39549 (=> res!62690 e!84831)))

(assert (=> d!39549 (= res!62690 (and ((_ is Cons!1681) (toList!837 lt!67103)) (= (_1!1283 (h!2285 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39549 (= (containsKey!173 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!84831)))

(declare-fun b!130012 () Bool)

(declare-fun e!84832 () Bool)

(assert (=> b!130012 (= e!84831 e!84832)))

(declare-fun res!62691 () Bool)

(assert (=> b!130012 (=> (not res!62691) (not e!84832))))

(assert (=> b!130012 (= res!62691 (and (or (not ((_ is Cons!1681) (toList!837 lt!67103))) (bvsle (_1!1283 (h!2285 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) ((_ is Cons!1681) (toList!837 lt!67103)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(declare-fun b!130013 () Bool)

(assert (=> b!130013 (= e!84832 (containsKey!173 (t!6076 (toList!837 lt!67103)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39549 (not res!62690)) b!130012))

(assert (= (and b!130012 res!62691) b!130013))

(assert (=> b!130013 m!152129))

(declare-fun m!152865 () Bool)

(assert (=> b!130013 m!152865))

(assert (=> d!39433 d!39549))

(declare-fun b!130048 () Bool)

(declare-fun res!62715 () Bool)

(declare-fun call!14140 () Bool)

(assert (=> b!130048 (= res!62715 call!14140)))

(declare-fun e!84854 () Bool)

(assert (=> b!130048 (=> (not res!62715) (not e!84854))))

(declare-fun b!130049 () Bool)

(declare-fun lt!67576 () SeekEntryResult!266)

(assert (=> b!130049 (= e!84854 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67576)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130050 () Bool)

(declare-fun res!62716 () Bool)

(declare-fun e!84849 () Bool)

(assert (=> b!130050 (=> (not res!62716) (not e!84849))))

(declare-fun lt!67580 () SeekEntryResult!266)

(assert (=> b!130050 (= res!62716 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67580)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130051 () Bool)

(declare-fun res!62714 () Bool)

(assert (=> b!130051 (= res!62714 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67580)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!84855 () Bool)

(assert (=> b!130051 (=> (not res!62714) (not e!84855))))

(declare-fun b!130052 () Bool)

(declare-fun call!14142 () Bool)

(assert (=> b!130052 (= e!84855 (not call!14142))))

(declare-fun b!130053 () Bool)

(assert (=> b!130053 (= e!84849 (not call!14142))))

(declare-fun call!14139 () SeekEntryResult!266)

(declare-fun bm!14136 () Bool)

(assert (=> bm!14136 (= call!14139 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun bm!14137 () Bool)

(declare-fun c!23967 () Bool)

(declare-fun c!23964 () Bool)

(assert (=> bm!14137 (= call!14140 (inRange!0 (ite c!23967 (index!3222 lt!67576) (ite c!23964 (index!3221 lt!67580) (index!3224 lt!67580))) (mask!7101 newMap!16)))))

(declare-fun b!130054 () Bool)

(declare-fun res!62717 () Bool)

(assert (=> b!130054 (=> (not res!62717) (not e!84849))))

(declare-fun call!14141 () Bool)

(assert (=> b!130054 (= res!62717 call!14141)))

(declare-fun e!84850 () Bool)

(assert (=> b!130054 (= e!84850 e!84849)))

(declare-fun b!130055 () Bool)

(declare-fun c!23966 () Bool)

(assert (=> b!130055 (= c!23966 ((_ is MissingVacant!266) lt!67580))))

(declare-fun e!84851 () Bool)

(assert (=> b!130055 (= e!84850 e!84851)))

(declare-fun b!130056 () Bool)

(assert (=> b!130056 (= e!84851 ((_ is Undefined!266) lt!67580))))

(declare-fun b!130057 () Bool)

(declare-fun e!84856 () Unit!4042)

(declare-fun Unit!4058 () Unit!4042)

(assert (=> b!130057 (= e!84856 Unit!4058)))

(declare-fun b!130058 () Bool)

(declare-fun e!84852 () Unit!4042)

(declare-fun Unit!4059 () Unit!4042)

(assert (=> b!130058 (= e!84852 Unit!4059)))

(declare-fun lt!67585 () Unit!4042)

(assert (=> b!130058 (= lt!67585 (lemmaInListMapThenSeekEntryOrOpenFindsIt!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(assert (=> b!130058 (= lt!67576 call!14139)))

(declare-fun res!62718 () Bool)

(assert (=> b!130058 (= res!62718 ((_ is Found!266) lt!67576))))

(assert (=> b!130058 (=> (not res!62718) (not e!84854))))

(assert (=> b!130058 e!84854))

(declare-fun lt!67574 () Unit!4042)

(assert (=> b!130058 (= lt!67574 lt!67585)))

(assert (=> b!130058 false))

(declare-fun bm!14138 () Bool)

(assert (=> bm!14138 (= call!14141 call!14140)))

(declare-fun bm!14139 () Bool)

(assert (=> bm!14139 (= call!14142 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!130059 () Bool)

(declare-fun lt!67588 () Unit!4042)

(assert (=> b!130059 (= e!84852 lt!67588)))

(assert (=> b!130059 (= lt!67588 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!58 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)))))

(assert (=> b!130059 (= lt!67580 call!14139)))

(assert (=> b!130059 (= c!23964 ((_ is MissingZero!266) lt!67580))))

(assert (=> b!130059 e!84850))

(declare-fun b!130060 () Bool)

(declare-fun Unit!4060 () Unit!4042)

(assert (=> b!130060 (= e!84856 Unit!4060)))

(declare-fun lt!67584 () Unit!4042)

(declare-fun lemmaArrayContainsKeyThenInListMap!39 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) (_ BitVec 32) Int) Unit!4042)

(assert (=> b!130060 (= lt!67584 (lemmaArrayContainsKeyThenInListMap!39 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(assert (=> b!130060 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))

(declare-fun lt!67572 () Unit!4042)

(assert (=> b!130060 (= lt!67572 lt!67584)))

(assert (=> b!130060 false))

(declare-fun b!130061 () Bool)

(assert (=> b!130061 (= e!84851 e!84855)))

(declare-fun res!62712 () Bool)

(assert (=> b!130061 (= res!62712 call!14141)))

(assert (=> b!130061 (=> (not res!62712) (not e!84855))))

(declare-fun b!130062 () Bool)

(declare-fun res!62713 () Bool)

(declare-fun e!84853 () Bool)

(assert (=> b!130062 (=> (not res!62713) (not e!84853))))

(declare-fun lt!67593 () tuple2!2546)

(assert (=> b!130062 (= res!62713 (contains!873 (map!1389 (_2!1284 lt!67593)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun d!39551 () Bool)

(assert (=> d!39551 e!84853))

(declare-fun res!62711 () Bool)

(assert (=> d!39551 (=> (not res!62711) (not e!84853))))

(assert (=> d!39551 (= res!62711 (_1!1284 lt!67593))))

(assert (=> d!39551 (= lt!67593 (tuple2!2547 true (LongMapFixedSize!1079 (defaultEntry!2823 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd (_size!588 newMap!16) #b00000000000000000000000000000001) (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (_vacant!588 newMap!16))))))

(declare-fun lt!67590 () Unit!4042)

(declare-fun lt!67586 () Unit!4042)

(assert (=> d!39551 (= lt!67590 lt!67586)))

(declare-fun lt!67573 () array!4721)

(declare-fun lt!67594 () array!4723)

(assert (=> d!39551 (contains!873 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(assert (=> d!39551 (= lt!67586 (lemmaValidKeyInArrayIsInListMap!118 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39551 (= lt!67594 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))))

(assert (=> d!39551 (= lt!67573 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun lt!67589 () Unit!4042)

(declare-fun lt!67577 () Unit!4042)

(assert (=> d!39551 (= lt!67589 lt!67577)))

(declare-fun lt!67592 () array!4721)

(assert (=> d!39551 (= (arrayCountValidKeys!0 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4721 (_ BitVec 32)) Unit!4042)

(assert (=> d!39551 (= lt!67577 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(assert (=> d!39551 (= lt!67592 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun lt!67568 () Unit!4042)

(declare-fun lt!67570 () Unit!4042)

(assert (=> d!39551 (= lt!67568 lt!67570)))

(declare-fun lt!67575 () array!4721)

(assert (=> d!39551 (arrayContainsKey!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!39551 (= lt!67570 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(assert (=> d!39551 (= lt!67575 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun lt!67569 () Unit!4042)

(declare-fun lt!67567 () Unit!4042)

(assert (=> d!39551 (= lt!67569 lt!67567)))

(assert (=> d!39551 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!39 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) (_ BitVec 64) V!3457 Int) Unit!4042)

(assert (=> d!39551 (= lt!67567 (lemmaAddValidKeyToArrayThenAddPairToListMap!39 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67571 () Unit!4042)

(declare-fun lt!67596 () Unit!4042)

(assert (=> d!39551 (= lt!67571 lt!67596)))

(assert (=> d!39551 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (mask!7101 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4721 (_ BitVec 32) (_ BitVec 32)) Unit!4042)

(assert (=> d!39551 (= lt!67596 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (mask!7101 newMap!16)))))

(declare-fun lt!67583 () Unit!4042)

(declare-fun lt!67591 () Unit!4042)

(assert (=> d!39551 (= lt!67583 lt!67591)))

(assert (=> d!39551 (= (arrayCountValidKeys!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4721 (_ BitVec 32) (_ BitVec 64)) Unit!4042)

(assert (=> d!39551 (= lt!67591 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun lt!67595 () Unit!4042)

(declare-fun lt!67587 () Unit!4042)

(assert (=> d!39551 (= lt!67595 lt!67587)))

(declare-fun lt!67582 () (_ BitVec 32))

(declare-fun lt!67581 () List!1687)

(assert (=> d!39551 (arrayNoDuplicates!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) lt!67582 lt!67581)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4721 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1687) Unit!4042)

(assert (=> d!39551 (= lt!67587 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) lt!67582 lt!67581))))

(assert (=> d!39551 (= lt!67581 Nil!1684)))

(assert (=> d!39551 (= lt!67582 #b00000000000000000000000000000000)))

(declare-fun lt!67578 () Unit!4042)

(assert (=> d!39551 (= lt!67578 e!84856)))

(declare-fun c!23965 () Bool)

(assert (=> d!39551 (= c!23965 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!67579 () Unit!4042)

(assert (=> d!39551 (= lt!67579 e!84852)))

(assert (=> d!39551 (= c!23967 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39551 (valid!530 newMap!16)))

(assert (=> d!39551 (= (updateHelperNewKey!58 newMap!16 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))) lt!67593)))

(declare-fun b!130063 () Bool)

(declare-fun res!62710 () Bool)

(assert (=> b!130063 (=> (not res!62710) (not e!84853))))

(assert (=> b!130063 (= res!62710 (valid!530 (_2!1284 lt!67593)))))

(declare-fun b!130064 () Bool)

(assert (=> b!130064 (= e!84853 (= (map!1389 (_2!1284 lt!67593)) (+!166 (map!1389 newMap!16) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!39551 c!23967) b!130058))

(assert (= (and d!39551 (not c!23967)) b!130059))

(assert (= (and b!130058 res!62718) b!130048))

(assert (= (and b!130048 res!62715) b!130049))

(assert (= (and b!130059 c!23964) b!130054))

(assert (= (and b!130059 (not c!23964)) b!130055))

(assert (= (and b!130054 res!62717) b!130050))

(assert (= (and b!130050 res!62716) b!130053))

(assert (= (and b!130055 c!23966) b!130061))

(assert (= (and b!130055 (not c!23966)) b!130056))

(assert (= (and b!130061 res!62712) b!130051))

(assert (= (and b!130051 res!62714) b!130052))

(assert (= (or b!130054 b!130061) bm!14138))

(assert (= (or b!130053 b!130052) bm!14139))

(assert (= (or b!130048 bm!14138) bm!14137))

(assert (= (or b!130058 b!130059) bm!14136))

(assert (= (and d!39551 c!23965) b!130060))

(assert (= (and d!39551 (not c!23965)) b!130057))

(assert (= (and d!39551 res!62711) b!130063))

(assert (= (and b!130063 res!62710) b!130062))

(assert (= (and b!130062 res!62713) b!130064))

(assert (=> bm!14136 m!152129))

(assert (=> bm!14136 m!152245))

(assert (=> b!130059 m!152129))

(assert (=> b!130059 m!152297))

(assert (=> b!130058 m!152129))

(assert (=> b!130058 m!152267))

(declare-fun m!152867 () Bool)

(assert (=> b!130051 m!152867))

(declare-fun m!152869 () Bool)

(assert (=> b!130050 m!152869))

(declare-fun m!152871 () Bool)

(assert (=> b!130062 m!152871))

(assert (=> b!130062 m!152871))

(assert (=> b!130062 m!152129))

(declare-fun m!152873 () Bool)

(assert (=> b!130062 m!152873))

(declare-fun m!152875 () Bool)

(assert (=> b!130049 m!152875))

(assert (=> b!130060 m!152129))

(declare-fun m!152877 () Bool)

(assert (=> b!130060 m!152877))

(assert (=> b!130060 m!152307))

(assert (=> b!130060 m!152307))

(assert (=> b!130060 m!152129))

(declare-fun m!152879 () Bool)

(assert (=> b!130060 m!152879))

(assert (=> b!130064 m!152871))

(assert (=> b!130064 m!152131))

(assert (=> b!130064 m!152131))

(declare-fun m!152881 () Bool)

(assert (=> b!130064 m!152881))

(assert (=> bm!14139 m!152129))

(assert (=> bm!14139 m!152247))

(declare-fun m!152883 () Bool)

(assert (=> bm!14137 m!152883))

(declare-fun m!152885 () Bool)

(assert (=> b!130063 m!152885))

(declare-fun m!152887 () Bool)

(assert (=> d!39551 m!152887))

(declare-fun m!152889 () Bool)

(assert (=> d!39551 m!152889))

(declare-fun m!152891 () Bool)

(assert (=> d!39551 m!152891))

(assert (=> d!39551 m!152307))

(assert (=> d!39551 m!152129))

(assert (=> d!39551 m!152879))

(declare-fun m!152893 () Bool)

(assert (=> d!39551 m!152893))

(declare-fun m!152895 () Bool)

(assert (=> d!39551 m!152895))

(declare-fun m!152897 () Bool)

(assert (=> d!39551 m!152897))

(declare-fun m!152899 () Bool)

(assert (=> d!39551 m!152899))

(assert (=> d!39551 m!152895))

(assert (=> d!39551 m!152231))

(declare-fun m!152901 () Bool)

(assert (=> d!39551 m!152901))

(assert (=> d!39551 m!152129))

(declare-fun m!152903 () Bool)

(assert (=> d!39551 m!152903))

(declare-fun m!152905 () Bool)

(assert (=> d!39551 m!152905))

(assert (=> d!39551 m!152159))

(assert (=> d!39551 m!152129))

(assert (=> d!39551 m!152151))

(declare-fun m!152907 () Bool)

(assert (=> d!39551 m!152907))

(assert (=> d!39551 m!152129))

(declare-fun m!152909 () Bool)

(assert (=> d!39551 m!152909))

(assert (=> d!39551 m!152129))

(declare-fun m!152911 () Bool)

(assert (=> d!39551 m!152911))

(declare-fun m!152913 () Bool)

(assert (=> d!39551 m!152913))

(assert (=> d!39551 m!152307))

(assert (=> d!39551 m!152821))

(assert (=> d!39551 m!152129))

(assert (=> d!39551 m!152247))

(declare-fun m!152915 () Bool)

(assert (=> d!39551 m!152915))

(declare-fun m!152917 () Bool)

(assert (=> d!39551 m!152917))

(assert (=> d!39551 m!152893))

(assert (=> d!39551 m!152307))

(assert (=> d!39551 m!152129))

(declare-fun m!152919 () Bool)

(assert (=> d!39551 m!152919))

(assert (=> d!39551 m!152129))

(declare-fun m!152921 () Bool)

(assert (=> d!39551 m!152921))

(assert (=> bm!14057 d!39551))

(assert (=> bm!14042 d!39441))

(declare-fun d!39553 () Bool)

(assert (=> d!39553 (= (apply!113 lt!67261 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5398 () Bool)

(assert (= bs!5398 d!39553))

(assert (=> bs!5398 m!152463))

(assert (=> bs!5398 m!152463))

(declare-fun m!152923 () Bool)

(assert (=> bs!5398 m!152923))

(assert (=> b!129685 d!39553))

(declare-fun d!39555 () Bool)

(declare-fun res!62719 () Bool)

(declare-fun e!84857 () Bool)

(assert (=> d!39555 (=> (not res!62719) (not e!84857))))

(assert (=> d!39555 (= res!62719 (simpleValid!89 (v!3160 (underlying!446 thiss!992))))))

(assert (=> d!39555 (= (valid!530 (v!3160 (underlying!446 thiss!992))) e!84857)))

(declare-fun b!130065 () Bool)

(declare-fun res!62720 () Bool)

(assert (=> b!130065 (=> (not res!62720) (not e!84857))))

(assert (=> b!130065 (= res!62720 (= (arrayCountValidKeys!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))) (_size!588 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!130066 () Bool)

(declare-fun res!62721 () Bool)

(assert (=> b!130066 (=> (not res!62721) (not e!84857))))

(assert (=> b!130066 (= res!62721 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!130067 () Bool)

(assert (=> b!130067 (= e!84857 (arrayNoDuplicates!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000 Nil!1684))))

(assert (= (and d!39555 res!62719) b!130065))

(assert (= (and b!130065 res!62720) b!130066))

(assert (= (and b!130066 res!62721) b!130067))

(declare-fun m!152925 () Bool)

(assert (=> d!39555 m!152925))

(declare-fun m!152927 () Bool)

(assert (=> b!130065 m!152927))

(declare-fun m!152929 () Bool)

(assert (=> b!130066 m!152929))

(declare-fun m!152931 () Bool)

(assert (=> b!130067 m!152931))

(assert (=> d!39439 d!39555))

(declare-fun d!39557 () Bool)

(declare-fun e!84858 () Bool)

(assert (=> d!39557 e!84858))

(declare-fun res!62722 () Bool)

(assert (=> d!39557 (=> res!62722 e!84858)))

(declare-fun lt!67597 () Bool)

(assert (=> d!39557 (= res!62722 (not lt!67597))))

(declare-fun lt!67599 () Bool)

(assert (=> d!39557 (= lt!67597 lt!67599)))

(declare-fun lt!67598 () Unit!4042)

(declare-fun e!84859 () Unit!4042)

(assert (=> d!39557 (= lt!67598 e!84859)))

(declare-fun c!23968 () Bool)

(assert (=> d!39557 (= c!23968 lt!67599)))

(assert (=> d!39557 (= lt!67599 (containsKey!173 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39557 (= (contains!873 call!14061 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67597)))

(declare-fun b!130068 () Bool)

(declare-fun lt!67600 () Unit!4042)

(assert (=> b!130068 (= e!84859 lt!67600)))

(assert (=> b!130068 (= lt!67600 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!130068 (isDefined!122 (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130069 () Bool)

(declare-fun Unit!4061 () Unit!4042)

(assert (=> b!130069 (= e!84859 Unit!4061)))

(declare-fun b!130070 () Bool)

(assert (=> b!130070 (= e!84858 (isDefined!122 (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (= (and d!39557 c!23968) b!130068))

(assert (= (and d!39557 (not c!23968)) b!130069))

(assert (= (and d!39557 (not res!62722)) b!130070))

(assert (=> d!39557 m!152129))

(declare-fun m!152933 () Bool)

(assert (=> d!39557 m!152933))

(assert (=> b!130068 m!152129))

(declare-fun m!152935 () Bool)

(assert (=> b!130068 m!152935))

(assert (=> b!130068 m!152129))

(declare-fun m!152937 () Bool)

(assert (=> b!130068 m!152937))

(assert (=> b!130068 m!152937))

(declare-fun m!152939 () Bool)

(assert (=> b!130068 m!152939))

(assert (=> b!130070 m!152129))

(assert (=> b!130070 m!152937))

(assert (=> b!130070 m!152937))

(assert (=> b!130070 m!152939))

(assert (=> b!129630 d!39557))

(declare-fun d!39559 () Bool)

(declare-fun e!84860 () Bool)

(assert (=> d!39559 e!84860))

(declare-fun res!62724 () Bool)

(assert (=> d!39559 (=> (not res!62724) (not e!84860))))

(declare-fun lt!67602 () ListLongMap!1643)

(assert (=> d!39559 (= res!62724 (contains!873 lt!67602 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67603 () List!1685)

(assert (=> d!39559 (= lt!67602 (ListLongMap!1644 lt!67603))))

(declare-fun lt!67604 () Unit!4042)

(declare-fun lt!67601 () Unit!4042)

(assert (=> d!39559 (= lt!67604 lt!67601)))

(assert (=> d!39559 (= (getValueByKey!170 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39559 (= lt!67601 (lemmaContainsTupThenGetReturnValue!85 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39559 (= lt!67603 (insertStrictlySorted!88 (toList!837 call!14080) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39559 (= (+!166 call!14080 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67602)))

(declare-fun b!130071 () Bool)

(declare-fun res!62723 () Bool)

(assert (=> b!130071 (=> (not res!62723) (not e!84860))))

(assert (=> b!130071 (= res!62723 (= (getValueByKey!170 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130072 () Bool)

(assert (=> b!130072 (= e!84860 (contains!875 (toList!837 lt!67602) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39559 res!62724) b!130071))

(assert (= (and b!130071 res!62723) b!130072))

(declare-fun m!152941 () Bool)

(assert (=> d!39559 m!152941))

(declare-fun m!152943 () Bool)

(assert (=> d!39559 m!152943))

(declare-fun m!152945 () Bool)

(assert (=> d!39559 m!152945))

(declare-fun m!152947 () Bool)

(assert (=> d!39559 m!152947))

(declare-fun m!152949 () Bool)

(assert (=> b!130071 m!152949))

(declare-fun m!152951 () Bool)

(assert (=> b!130072 m!152951))

(assert (=> b!129684 d!39559))

(declare-fun b!130074 () Bool)

(declare-fun e!84861 () Bool)

(assert (=> b!130074 (= e!84861 tp_is_empty!2857)))

(declare-fun b!130073 () Bool)

(declare-fun e!84862 () Bool)

(assert (=> b!130073 (= e!84862 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4581 () Bool)

(declare-fun mapRes!4581 () Bool)

(assert (=> mapIsEmpty!4581 mapRes!4581))

(declare-fun mapNonEmpty!4581 () Bool)

(declare-fun tp!11097 () Bool)

(assert (=> mapNonEmpty!4581 (= mapRes!4581 (and tp!11097 e!84862))))

(declare-fun mapKey!4581 () (_ BitVec 32))

(declare-fun mapRest!4581 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapValue!4581 () ValueCell!1085)

(assert (=> mapNonEmpty!4581 (= mapRest!4579 (store mapRest!4581 mapKey!4581 mapValue!4581))))

(declare-fun condMapEmpty!4581 () Bool)

(declare-fun mapDefault!4581 () ValueCell!1085)

(assert (=> mapNonEmpty!4579 (= condMapEmpty!4581 (= mapRest!4579 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4581)))))

(assert (=> mapNonEmpty!4579 (= tp!11095 (and e!84861 mapRes!4581))))

(assert (= (and mapNonEmpty!4579 condMapEmpty!4581) mapIsEmpty!4581))

(assert (= (and mapNonEmpty!4579 (not condMapEmpty!4581)) mapNonEmpty!4581))

(assert (= (and mapNonEmpty!4581 ((_ is ValueCellFull!1085) mapValue!4581)) b!130073))

(assert (= (and mapNonEmpty!4579 ((_ is ValueCellFull!1085) mapDefault!4581)) b!130074))

(declare-fun m!152953 () Bool)

(assert (=> mapNonEmpty!4581 m!152953))

(declare-fun b!130076 () Bool)

(declare-fun e!84863 () Bool)

(assert (=> b!130076 (= e!84863 tp_is_empty!2857)))

(declare-fun b!130075 () Bool)

(declare-fun e!84864 () Bool)

(assert (=> b!130075 (= e!84864 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4582 () Bool)

(declare-fun mapRes!4582 () Bool)

(assert (=> mapIsEmpty!4582 mapRes!4582))

(declare-fun mapNonEmpty!4582 () Bool)

(declare-fun tp!11098 () Bool)

(assert (=> mapNonEmpty!4582 (= mapRes!4582 (and tp!11098 e!84864))))

(declare-fun mapKey!4582 () (_ BitVec 32))

(declare-fun mapRest!4582 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapValue!4582 () ValueCell!1085)

(assert (=> mapNonEmpty!4582 (= mapRest!4580 (store mapRest!4582 mapKey!4582 mapValue!4582))))

(declare-fun condMapEmpty!4582 () Bool)

(declare-fun mapDefault!4582 () ValueCell!1085)

(assert (=> mapNonEmpty!4580 (= condMapEmpty!4582 (= mapRest!4580 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4582)))))

(assert (=> mapNonEmpty!4580 (= tp!11096 (and e!84863 mapRes!4582))))

(assert (= (and mapNonEmpty!4580 condMapEmpty!4582) mapIsEmpty!4582))

(assert (= (and mapNonEmpty!4580 (not condMapEmpty!4582)) mapNonEmpty!4582))

(assert (= (and mapNonEmpty!4582 ((_ is ValueCellFull!1085) mapValue!4582)) b!130075))

(assert (= (and mapNonEmpty!4580 ((_ is ValueCellFull!1085) mapDefault!4582)) b!130076))

(declare-fun m!152955 () Bool)

(assert (=> mapNonEmpty!4582 m!152955))

(declare-fun b_lambda!5775 () Bool)

(assert (= b_lambda!5763 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5775)))

(declare-fun b_lambda!5777 () Bool)

(assert (= b_lambda!5771 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5777)))

(declare-fun b_lambda!5779 () Bool)

(assert (= b_lambda!5767 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5779)))

(declare-fun b_lambda!5781 () Bool)

(assert (= b_lambda!5773 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5781)))

(declare-fun b_lambda!5783 () Bool)

(assert (= b_lambda!5769 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5783)))

(declare-fun b_lambda!5785 () Bool)

(assert (= b_lambda!5765 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5785)))

(check-sat (not b!130001) (not d!39531) (not d!39523) (not b!129724) (not b_lambda!5781) (not b!129861) (not b!129755) (not d!39505) (not d!39551) (not d!39559) (not b_next!2883) (not b!129850) (not b!129984) (not b!129801) (not d!39547) (not b!129965) (not d!39497) (not b!129927) (not b!130062) (not b!129943) (not b!129762) (not d!39467) (not d!39491) (not b!129794) (not d!39529) (not bm!14117) (not d!39511) (not b!129865) (not b!129722) (not bm!14124) (not b!130005) (not b!129869) (not b_lambda!5779) (not b!129972) (not b!129912) (not b!129909) (not b!129791) (not bm!14120) (not b_next!2881) (not mapNonEmpty!4582) (not b!129754) (not b!129729) (not b!129944) (not d!39509) (not b!130064) (not b!129796) (not bm!14101) (not d!39473) (not bm!14137) (not bm!14098) (not d!39493) (not bm!14095) (not d!39455) (not bm!14118) (not d!39457) (not b!129811) (not d!39501) (not b!129838) (not d!39539) (not d!39499) (not bm!14088) (not b!130071) (not b!129961) (not bm!14085) (not bm!14091) (not d!39471) (not b!129862) (not b!130058) (not b!129751) (not b!129920) (not d!39485) (not b!129930) (not b!129880) (not bm!14111) (not b!129870) (not b!129915) (not b!129739) (not b!130063) (not b!130003) tp_is_empty!2857 (not b!130060) (not bm!14114) (not b!130065) (not b!129987) (not b!129914) (not d!39503) (not b_lambda!5777) b_and!8047 (not b!129792) (not b!129757) (not d!39557) (not b!129864) (not b!130068) (not d!39517) (not b!129793) (not b!129736) (not d!39465) (not b!129969) (not b!129809) (not b!129764) (not b!129916) (not b!130066) (not b!129963) (not b!129971) (not b!130059) b_and!8045 (not b!129752) (not bm!14092) (not d!39463) (not d!39461) (not b!130067) (not bm!14110) (not bm!14136) (not b!129723) (not b!129867) (not d!39449) (not bm!14108) (not d!39555) (not b!129959) (not b!130013) (not b!129908) (not b!129857) (not bm!14082) (not b_lambda!5761) (not b!129744) (not b!129763) (not b!129732) (not d!39527) (not b!129815) (not b!129977) (not d!39481) (not b_lambda!5785) (not d!39545) (not d!39553) (not b!130072) (not b!130002) (not d!39483) (not d!39477) (not b!130070) (not b!129765) (not b!129990) (not b!129863) (not b_lambda!5783) (not b!130007) (not d!39447) (not b_lambda!5775) (not b!130004) (not d!39521) (not b!129733) (not b!129810) (not bm!14121) (not b!129881) (not b!129973) (not bm!14127) (not b!129966) (not bm!14094) (not d!39533) (not bm!14107) (not d!39453) (not b!129753) (not b!129948) (not b!129804) (not b!129798) (not mapNonEmpty!4581) (not bm!14139) (not d!39495) (not b!129738) (not bm!14084) (not b!129822) (not b!129928) (not b!129740) (not d!39541) (not d!39489) (not b!129807) (not b!129942) (not bm!14106) (not b!129803) (not d!39459) (not d!39507) (not b_lambda!5757) (not d!39469) (not b!129858) (not b!129795) (not b!129719) (not d!39479) (not b!129720) (not d!39487))
(check-sat b_and!8045 b_and!8047 (not b_next!2881) (not b_next!2883))
(get-model)

(declare-fun d!39561 () Bool)

(assert (=> d!39561 (= (get!1473 (getValueByKey!170 (toList!837 lt!67260) lt!67279)) (v!3166 (getValueByKey!170 (toList!837 lt!67260) lt!67279)))))

(assert (=> d!39477 d!39561))

(declare-fun b!130077 () Bool)

(declare-fun e!84865 () Option!176)

(assert (=> b!130077 (= e!84865 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67260)))))))

(declare-fun b!130080 () Bool)

(declare-fun e!84866 () Option!176)

(assert (=> b!130080 (= e!84866 None!174)))

(declare-fun b!130079 () Bool)

(assert (=> b!130079 (= e!84866 (getValueByKey!170 (t!6076 (toList!837 lt!67260)) lt!67279))))

(declare-fun b!130078 () Bool)

(assert (=> b!130078 (= e!84865 e!84866)))

(declare-fun c!23970 () Bool)

(assert (=> b!130078 (= c!23970 (and ((_ is Cons!1681) (toList!837 lt!67260)) (not (= (_1!1283 (h!2285 (toList!837 lt!67260))) lt!67279))))))

(declare-fun d!39563 () Bool)

(declare-fun c!23969 () Bool)

(assert (=> d!39563 (= c!23969 (and ((_ is Cons!1681) (toList!837 lt!67260)) (= (_1!1283 (h!2285 (toList!837 lt!67260))) lt!67279)))))

(assert (=> d!39563 (= (getValueByKey!170 (toList!837 lt!67260) lt!67279) e!84865)))

(assert (= (and d!39563 c!23969) b!130077))

(assert (= (and d!39563 (not c!23969)) b!130078))

(assert (= (and b!130078 c!23970) b!130079))

(assert (= (and b!130078 (not c!23970)) b!130080))

(declare-fun m!152957 () Bool)

(assert (=> b!130079 m!152957))

(assert (=> d!39477 d!39563))

(declare-fun d!39565 () Bool)

(assert (=> d!39565 (= (validMask!0 (mask!7101 newMap!16)) (and (or (= (mask!7101 newMap!16) #b00000000000000000000000000000111) (= (mask!7101 newMap!16) #b00000000000000000000000000001111) (= (mask!7101 newMap!16) #b00000000000000000000000000011111) (= (mask!7101 newMap!16) #b00000000000000000000000000111111) (= (mask!7101 newMap!16) #b00000000000000000000000001111111) (= (mask!7101 newMap!16) #b00000000000000000000000011111111) (= (mask!7101 newMap!16) #b00000000000000000000000111111111) (= (mask!7101 newMap!16) #b00000000000000000000001111111111) (= (mask!7101 newMap!16) #b00000000000000000000011111111111) (= (mask!7101 newMap!16) #b00000000000000000000111111111111) (= (mask!7101 newMap!16) #b00000000000000000001111111111111) (= (mask!7101 newMap!16) #b00000000000000000011111111111111) (= (mask!7101 newMap!16) #b00000000000000000111111111111111) (= (mask!7101 newMap!16) #b00000000000000001111111111111111) (= (mask!7101 newMap!16) #b00000000000000011111111111111111) (= (mask!7101 newMap!16) #b00000000000000111111111111111111) (= (mask!7101 newMap!16) #b00000000000001111111111111111111) (= (mask!7101 newMap!16) #b00000000000011111111111111111111) (= (mask!7101 newMap!16) #b00000000000111111111111111111111) (= (mask!7101 newMap!16) #b00000000001111111111111111111111) (= (mask!7101 newMap!16) #b00000000011111111111111111111111) (= (mask!7101 newMap!16) #b00000000111111111111111111111111) (= (mask!7101 newMap!16) #b00000001111111111111111111111111) (= (mask!7101 newMap!16) #b00000011111111111111111111111111) (= (mask!7101 newMap!16) #b00000111111111111111111111111111) (= (mask!7101 newMap!16) #b00001111111111111111111111111111) (= (mask!7101 newMap!16) #b00011111111111111111111111111111) (= (mask!7101 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!7101 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!39471 d!39565))

(declare-fun d!39567 () Bool)

(declare-fun isEmpty!410 (List!1685) Bool)

(assert (=> d!39567 (= (isEmpty!408 lt!67352) (isEmpty!410 (toList!837 lt!67352)))))

(declare-fun bs!5399 () Bool)

(assert (= bs!5399 d!39567))

(declare-fun m!152959 () Bool)

(assert (=> bs!5399 m!152959))

(assert (=> b!129794 d!39567))

(declare-fun d!39569 () Bool)

(assert (=> d!39569 (isDefined!122 (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun lt!67605 () Unit!4042)

(assert (=> d!39569 (= lt!67605 (choose!797 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun e!84867 () Bool)

(assert (=> d!39569 e!84867))

(declare-fun res!62725 () Bool)

(assert (=> d!39569 (=> (not res!62725) (not e!84867))))

(assert (=> d!39569 (= res!62725 (isStrictlySorted!306 (toList!837 e!84592)))))

(assert (=> d!39569 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67605)))

(declare-fun b!130081 () Bool)

(assert (=> b!130081 (= e!84867 (containsKey!173 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39569 res!62725) b!130081))

(assert (=> d!39569 m!152129))

(assert (=> d!39569 m!152855))

(assert (=> d!39569 m!152855))

(assert (=> d!39569 m!152857))

(assert (=> d!39569 m!152129))

(declare-fun m!152961 () Bool)

(assert (=> d!39569 m!152961))

(declare-fun m!152963 () Bool)

(assert (=> d!39569 m!152963))

(assert (=> b!130081 m!152129))

(assert (=> b!130081 m!152851))

(assert (=> b!130005 d!39569))

(declare-fun d!39571 () Bool)

(assert (=> d!39571 (= (isDefined!122 (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) (not (isEmpty!409 (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun bs!5400 () Bool)

(assert (= bs!5400 d!39571))

(assert (=> bs!5400 m!152855))

(declare-fun m!152965 () Bool)

(assert (=> bs!5400 m!152965))

(assert (=> b!130005 d!39571))

(declare-fun b!130082 () Bool)

(declare-fun e!84868 () Option!176)

(assert (=> b!130082 (= e!84868 (Some!175 (_2!1283 (h!2285 (toList!837 e!84592)))))))

(declare-fun b!130085 () Bool)

(declare-fun e!84869 () Option!176)

(assert (=> b!130085 (= e!84869 None!174)))

(declare-fun b!130084 () Bool)

(assert (=> b!130084 (= e!84869 (getValueByKey!170 (t!6076 (toList!837 e!84592)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130083 () Bool)

(assert (=> b!130083 (= e!84868 e!84869)))

(declare-fun c!23972 () Bool)

(assert (=> b!130083 (= c!23972 (and ((_ is Cons!1681) (toList!837 e!84592)) (not (= (_1!1283 (h!2285 (toList!837 e!84592))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun c!23971 () Bool)

(declare-fun d!39573 () Bool)

(assert (=> d!39573 (= c!23971 (and ((_ is Cons!1681) (toList!837 e!84592)) (= (_1!1283 (h!2285 (toList!837 e!84592))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39573 (= (getValueByKey!170 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!84868)))

(assert (= (and d!39573 c!23971) b!130082))

(assert (= (and d!39573 (not c!23971)) b!130083))

(assert (= (and b!130083 c!23972) b!130084))

(assert (= (and b!130083 (not c!23972)) b!130085))

(assert (=> b!130084 m!152129))

(declare-fun m!152967 () Bool)

(assert (=> b!130084 m!152967))

(assert (=> b!130005 d!39573))

(declare-fun d!39575 () Bool)

(assert (=> d!39575 (= (apply!113 lt!67356 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1473 (getValueByKey!170 (toList!837 lt!67356) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5401 () Bool)

(assert (= bs!5401 d!39575))

(assert (=> bs!5401 m!152369))

(declare-fun m!152969 () Bool)

(assert (=> bs!5401 m!152969))

(assert (=> bs!5401 m!152969))

(declare-fun m!152971 () Bool)

(assert (=> bs!5401 m!152971))

(assert (=> b!129807 d!39575))

(declare-fun d!39577 () Bool)

(declare-fun c!23973 () Bool)

(assert (=> d!39577 (= c!23973 ((_ is ValueCellFull!1085) (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!84870 () V!3457)

(assert (=> d!39577 (= (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!84870)))

(declare-fun b!130086 () Bool)

(assert (=> b!130086 (= e!84870 (get!1471 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!130087 () Bool)

(assert (=> b!130087 (= e!84870 (get!1472 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39577 c!23973) b!130086))

(assert (= (and d!39577 (not c!23973)) b!130087))

(assert (=> b!130086 m!152559))

(assert (=> b!130086 m!152441))

(declare-fun m!152973 () Bool)

(assert (=> b!130086 m!152973))

(assert (=> b!130087 m!152559))

(assert (=> b!130087 m!152441))

(declare-fun m!152975 () Bool)

(assert (=> b!130087 m!152975))

(assert (=> b!129807 d!39577))

(declare-fun d!39579 () Bool)

(assert (=> d!39579 (= (isDefined!122 (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) (not (isEmpty!409 (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun bs!5402 () Bool)

(assert (= bs!5402 d!39579))

(assert (=> bs!5402 m!152937))

(declare-fun m!152977 () Bool)

(assert (=> bs!5402 m!152977))

(assert (=> b!130070 d!39579))

(declare-fun b!130088 () Bool)

(declare-fun e!84871 () Option!176)

(assert (=> b!130088 (= e!84871 (Some!175 (_2!1283 (h!2285 (toList!837 call!14061)))))))

(declare-fun b!130091 () Bool)

(declare-fun e!84872 () Option!176)

(assert (=> b!130091 (= e!84872 None!174)))

(declare-fun b!130090 () Bool)

(assert (=> b!130090 (= e!84872 (getValueByKey!170 (t!6076 (toList!837 call!14061)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130089 () Bool)

(assert (=> b!130089 (= e!84871 e!84872)))

(declare-fun c!23975 () Bool)

(assert (=> b!130089 (= c!23975 (and ((_ is Cons!1681) (toList!837 call!14061)) (not (= (_1!1283 (h!2285 (toList!837 call!14061))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun d!39581 () Bool)

(declare-fun c!23974 () Bool)

(assert (=> d!39581 (= c!23974 (and ((_ is Cons!1681) (toList!837 call!14061)) (= (_1!1283 (h!2285 (toList!837 call!14061))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39581 (= (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!84871)))

(assert (= (and d!39581 c!23974) b!130088))

(assert (= (and d!39581 (not c!23974)) b!130089))

(assert (= (and b!130089 c!23975) b!130090))

(assert (= (and b!130089 (not c!23975)) b!130091))

(assert (=> b!130090 m!152129))

(declare-fun m!152979 () Bool)

(assert (=> b!130090 m!152979))

(assert (=> b!130070 d!39581))

(declare-fun d!39583 () Bool)

(declare-fun lt!67608 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!130 (List!1687) (InoxSet (_ BitVec 64)))

(assert (=> d!39583 (= lt!67608 (select (content!130 Nil!1684) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!84877 () Bool)

(assert (=> d!39583 (= lt!67608 e!84877)))

(declare-fun res!62731 () Bool)

(assert (=> d!39583 (=> (not res!62731) (not e!84877))))

(assert (=> d!39583 (= res!62731 ((_ is Cons!1683) Nil!1684))))

(assert (=> d!39583 (= (contains!876 Nil!1684 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) lt!67608)))

(declare-fun b!130096 () Bool)

(declare-fun e!84878 () Bool)

(assert (=> b!130096 (= e!84877 e!84878)))

(declare-fun res!62730 () Bool)

(assert (=> b!130096 (=> res!62730 e!84878)))

(assert (=> b!130096 (= res!62730 (= (h!2287 Nil!1684) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130097 () Bool)

(assert (=> b!130097 (= e!84878 (contains!876 (t!6086 Nil!1684) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!39583 res!62731) b!130096))

(assert (= (and b!130096 (not res!62730)) b!130097))

(declare-fun m!152981 () Bool)

(assert (=> d!39583 m!152981))

(assert (=> d!39583 m!152369))

(declare-fun m!152983 () Bool)

(assert (=> d!39583 m!152983))

(assert (=> b!130097 m!152369))

(declare-fun m!152985 () Bool)

(assert (=> b!130097 m!152985))

(assert (=> b!129942 d!39583))

(declare-fun b!130098 () Bool)

(declare-fun e!84880 () Bool)

(declare-fun call!14143 () Bool)

(assert (=> b!130098 (= e!84880 call!14143)))

(declare-fun b!130099 () Bool)

(declare-fun e!84882 () Bool)

(assert (=> b!130099 (= e!84882 (contains!876 Nil!1684 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!39585 () Bool)

(declare-fun res!62734 () Bool)

(declare-fun e!84881 () Bool)

(assert (=> d!39585 (=> res!62734 e!84881)))

(assert (=> d!39585 (= res!62734 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39585 (= (arrayNoDuplicates!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000 Nil!1684) e!84881)))

(declare-fun b!130100 () Bool)

(declare-fun e!84879 () Bool)

(assert (=> b!130100 (= e!84881 e!84879)))

(declare-fun res!62733 () Bool)

(assert (=> b!130100 (=> (not res!62733) (not e!84879))))

(assert (=> b!130100 (= res!62733 (not e!84882))))

(declare-fun res!62732 () Bool)

(assert (=> b!130100 (=> (not res!62732) (not e!84882))))

(assert (=> b!130100 (= res!62732 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!14140 () Bool)

(declare-fun c!23976 () Bool)

(assert (=> bm!14140 (= call!14143 (arrayNoDuplicates!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!23976 (Cons!1683 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000) Nil!1684) Nil!1684)))))

(declare-fun b!130101 () Bool)

(assert (=> b!130101 (= e!84879 e!84880)))

(assert (=> b!130101 (= c!23976 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!130102 () Bool)

(assert (=> b!130102 (= e!84880 call!14143)))

(assert (= (and d!39585 (not res!62734)) b!130100))

(assert (= (and b!130100 res!62732) b!130099))

(assert (= (and b!130100 res!62733) b!130101))

(assert (= (and b!130101 c!23976) b!130102))

(assert (= (and b!130101 (not c!23976)) b!130098))

(assert (= (or b!130102 b!130098) bm!14140))

(declare-fun m!152987 () Bool)

(assert (=> b!130099 m!152987))

(assert (=> b!130099 m!152987))

(declare-fun m!152989 () Bool)

(assert (=> b!130099 m!152989))

(assert (=> b!130100 m!152987))

(assert (=> b!130100 m!152987))

(declare-fun m!152991 () Bool)

(assert (=> b!130100 m!152991))

(assert (=> bm!14140 m!152987))

(declare-fun m!152993 () Bool)

(assert (=> bm!14140 m!152993))

(assert (=> b!130101 m!152987))

(assert (=> b!130101 m!152987))

(assert (=> b!130101 m!152991))

(assert (=> b!130067 d!39585))

(declare-fun d!39587 () Bool)

(assert (=> d!39587 (= (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!129810 d!39587))

(declare-fun d!39589 () Bool)

(assert (=> d!39589 (= (apply!113 lt!67424 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67424) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5403 () Bool)

(assert (= bs!5403 d!39589))

(declare-fun m!152995 () Bool)

(assert (=> bs!5403 m!152995))

(assert (=> bs!5403 m!152995))

(declare-fun m!152997 () Bool)

(assert (=> bs!5403 m!152997))

(assert (=> b!129914 d!39589))

(assert (=> d!39503 d!39499))

(assert (=> d!39503 d!39505))

(declare-fun d!39591 () Bool)

(assert (=> d!39591 (contains!873 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67274)))

(assert (=> d!39591 true))

(declare-fun _$35!378 () Unit!4042)

(assert (=> d!39591 (= (choose!795 lt!67267 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67274) _$35!378)))

(declare-fun bs!5404 () Bool)

(assert (= bs!5404 d!39591))

(assert (=> bs!5404 m!152329))

(assert (=> bs!5404 m!152329))

(assert (=> bs!5404 m!152343))

(assert (=> d!39503 d!39591))

(declare-fun d!39593 () Bool)

(declare-fun e!84883 () Bool)

(assert (=> d!39593 e!84883))

(declare-fun res!62735 () Bool)

(assert (=> d!39593 (=> res!62735 e!84883)))

(declare-fun lt!67609 () Bool)

(assert (=> d!39593 (= res!62735 (not lt!67609))))

(declare-fun lt!67611 () Bool)

(assert (=> d!39593 (= lt!67609 lt!67611)))

(declare-fun lt!67610 () Unit!4042)

(declare-fun e!84884 () Unit!4042)

(assert (=> d!39593 (= lt!67610 e!84884)))

(declare-fun c!23977 () Bool)

(assert (=> d!39593 (= c!23977 lt!67611)))

(assert (=> d!39593 (= lt!67611 (containsKey!173 (toList!837 lt!67267) lt!67274))))

(assert (=> d!39593 (= (contains!873 lt!67267 lt!67274) lt!67609)))

(declare-fun b!130104 () Bool)

(declare-fun lt!67612 () Unit!4042)

(assert (=> b!130104 (= e!84884 lt!67612)))

(assert (=> b!130104 (= lt!67612 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67267) lt!67274))))

(assert (=> b!130104 (isDefined!122 (getValueByKey!170 (toList!837 lt!67267) lt!67274))))

(declare-fun b!130105 () Bool)

(declare-fun Unit!4062 () Unit!4042)

(assert (=> b!130105 (= e!84884 Unit!4062)))

(declare-fun b!130106 () Bool)

(assert (=> b!130106 (= e!84883 (isDefined!122 (getValueByKey!170 (toList!837 lt!67267) lt!67274)))))

(assert (= (and d!39593 c!23977) b!130104))

(assert (= (and d!39593 (not c!23977)) b!130105))

(assert (= (and d!39593 (not res!62735)) b!130106))

(declare-fun m!152999 () Bool)

(assert (=> d!39593 m!152999))

(declare-fun m!153001 () Bool)

(assert (=> b!130104 m!153001))

(declare-fun m!153003 () Bool)

(assert (=> b!130104 m!153003))

(assert (=> b!130104 m!153003))

(declare-fun m!153005 () Bool)

(assert (=> b!130104 m!153005))

(assert (=> b!130106 m!153003))

(assert (=> b!130106 m!153003))

(assert (=> b!130106 m!153005))

(assert (=> d!39503 d!39593))

(declare-fun d!39595 () Bool)

(declare-fun e!84885 () Bool)

(assert (=> d!39595 e!84885))

(declare-fun res!62737 () Bool)

(assert (=> d!39595 (=> (not res!62737) (not e!84885))))

(declare-fun lt!67614 () ListLongMap!1643)

(assert (=> d!39595 (= res!62737 (contains!873 lt!67614 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67615 () List!1685)

(assert (=> d!39595 (= lt!67614 (ListLongMap!1644 lt!67615))))

(declare-fun lt!67616 () Unit!4042)

(declare-fun lt!67613 () Unit!4042)

(assert (=> d!39595 (= lt!67616 lt!67613)))

(assert (=> d!39595 (= (getValueByKey!170 lt!67615 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39595 (= lt!67613 (lemmaContainsTupThenGetReturnValue!85 lt!67615 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39595 (= lt!67615 (insertStrictlySorted!88 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39595 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67614)))

(declare-fun b!130107 () Bool)

(declare-fun res!62736 () Bool)

(assert (=> b!130107 (=> (not res!62736) (not e!84885))))

(assert (=> b!130107 (= res!62736 (= (getValueByKey!170 (toList!837 lt!67614) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130108 () Bool)

(assert (=> b!130108 (= e!84885 (contains!875 (toList!837 lt!67614) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39595 res!62737) b!130107))

(assert (= (and b!130107 res!62736) b!130108))

(declare-fun m!153007 () Bool)

(assert (=> d!39595 m!153007))

(declare-fun m!153009 () Bool)

(assert (=> d!39595 m!153009))

(declare-fun m!153011 () Bool)

(assert (=> d!39595 m!153011))

(declare-fun m!153013 () Bool)

(assert (=> d!39595 m!153013))

(declare-fun m!153015 () Bool)

(assert (=> b!130107 m!153015))

(declare-fun m!153017 () Bool)

(assert (=> b!130108 m!153017))

(assert (=> d!39541 d!39595))

(assert (=> d!39541 d!39511))

(declare-fun d!39597 () Bool)

(assert (=> d!39597 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(assert (=> d!39597 true))

(declare-fun _$8!115 () Unit!4042)

(assert (=> d!39597 (= (choose!800 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)) _$8!115)))

(declare-fun bs!5405 () Bool)

(assert (= bs!5405 d!39597))

(assert (=> bs!5405 m!152307))

(assert (=> bs!5405 m!152307))

(assert (=> bs!5405 m!152847))

(assert (=> bs!5405 m!152151))

(assert (=> bs!5405 m!152845))

(assert (=> d!39541 d!39597))

(assert (=> d!39541 d!39565))

(declare-fun b!130109 () Bool)

(declare-fun e!84892 () Unit!4042)

(declare-fun Unit!4063 () Unit!4042)

(assert (=> b!130109 (= e!84892 Unit!4063)))

(declare-fun b!130110 () Bool)

(declare-fun e!84888 () ListLongMap!1643)

(declare-fun call!14146 () ListLongMap!1643)

(assert (=> b!130110 (= e!84888 (+!166 call!14146 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun lt!67618 () ListLongMap!1643)

(declare-fun b!130111 () Bool)

(declare-fun e!84898 () Bool)

(assert (=> b!130111 (= e!84898 (= (apply!113 lt!67618 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!130112 () Bool)

(declare-fun e!84895 () ListLongMap!1643)

(declare-fun call!14145 () ListLongMap!1643)

(assert (=> b!130112 (= e!84895 call!14145)))

(declare-fun b!130113 () Bool)

(declare-fun e!84889 () Bool)

(assert (=> b!130113 (= e!84889 e!84898)))

(declare-fun res!62738 () Bool)

(declare-fun call!14148 () Bool)

(assert (=> b!130113 (= res!62738 call!14148)))

(assert (=> b!130113 (=> (not res!62738) (not e!84898))))

(declare-fun b!130114 () Bool)

(declare-fun e!84894 () Bool)

(assert (=> b!130114 (= e!84894 (= (apply!113 lt!67618 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130114 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(assert (=> b!130114 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130115 () Bool)

(declare-fun e!84891 () Bool)

(assert (=> b!130115 (= e!84891 e!84889)))

(declare-fun c!23983 () Bool)

(assert (=> b!130115 (= c!23983 (not (= (bvand lt!67215 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14141 () Bool)

(declare-fun call!14149 () ListLongMap!1643)

(assert (=> bm!14141 (= call!14149 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39599 () Bool)

(assert (=> d!39599 e!84891))

(declare-fun res!62740 () Bool)

(assert (=> d!39599 (=> (not res!62740) (not e!84891))))

(assert (=> d!39599 (= res!62740 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67638 () ListLongMap!1643)

(assert (=> d!39599 (= lt!67618 lt!67638)))

(declare-fun lt!67630 () Unit!4042)

(assert (=> d!39599 (= lt!67630 e!84892)))

(declare-fun c!23982 () Bool)

(declare-fun e!84896 () Bool)

(assert (=> d!39599 (= c!23982 e!84896)))

(declare-fun res!62742 () Bool)

(assert (=> d!39599 (=> (not res!62742) (not e!84896))))

(assert (=> d!39599 (= res!62742 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39599 (= lt!67638 e!84888)))

(declare-fun c!23979 () Bool)

(assert (=> d!39599 (= c!23979 (and (not (= (bvand lt!67215 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!67215 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39599 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39599 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67618)))

(declare-fun b!130116 () Bool)

(declare-fun e!84897 () Bool)

(assert (=> b!130116 (= e!84897 (= (apply!113 lt!67618 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!130117 () Bool)

(assert (=> b!130117 (= e!84896 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14142 () Bool)

(declare-fun call!14150 () ListLongMap!1643)

(declare-fun call!14147 () ListLongMap!1643)

(assert (=> bm!14142 (= call!14150 call!14147)))

(declare-fun b!130118 () Bool)

(declare-fun lt!67623 () Unit!4042)

(assert (=> b!130118 (= e!84892 lt!67623)))

(declare-fun lt!67624 () ListLongMap!1643)

(assert (=> b!130118 (= lt!67624 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67619 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67619 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67631 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67631 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67632 () Unit!4042)

(assert (=> b!130118 (= lt!67632 (addStillContains!89 lt!67624 lt!67619 (zeroValue!2682 newMap!16) lt!67631))))

(assert (=> b!130118 (contains!873 (+!166 lt!67624 (tuple2!2545 lt!67619 (zeroValue!2682 newMap!16))) lt!67631)))

(declare-fun lt!67637 () Unit!4042)

(assert (=> b!130118 (= lt!67637 lt!67632)))

(declare-fun lt!67617 () ListLongMap!1643)

(assert (=> b!130118 (= lt!67617 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67625 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67625 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67636 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67636 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67621 () Unit!4042)

(assert (=> b!130118 (= lt!67621 (addApplyDifferent!89 lt!67617 lt!67625 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!67636))))

(assert (=> b!130118 (= (apply!113 (+!166 lt!67617 (tuple2!2545 lt!67625 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67636) (apply!113 lt!67617 lt!67636))))

(declare-fun lt!67633 () Unit!4042)

(assert (=> b!130118 (= lt!67633 lt!67621)))

(declare-fun lt!67626 () ListLongMap!1643)

(assert (=> b!130118 (= lt!67626 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67635 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67635 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67620 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67620 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67627 () Unit!4042)

(assert (=> b!130118 (= lt!67627 (addApplyDifferent!89 lt!67626 lt!67635 (zeroValue!2682 newMap!16) lt!67620))))

(assert (=> b!130118 (= (apply!113 (+!166 lt!67626 (tuple2!2545 lt!67635 (zeroValue!2682 newMap!16))) lt!67620) (apply!113 lt!67626 lt!67620))))

(declare-fun lt!67628 () Unit!4042)

(assert (=> b!130118 (= lt!67628 lt!67627)))

(declare-fun lt!67634 () ListLongMap!1643)

(assert (=> b!130118 (= lt!67634 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67215 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67622 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67622 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67629 () (_ BitVec 64))

(assert (=> b!130118 (= lt!67629 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!130118 (= lt!67623 (addApplyDifferent!89 lt!67634 lt!67622 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!67629))))

(assert (=> b!130118 (= (apply!113 (+!166 lt!67634 (tuple2!2545 lt!67622 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67629) (apply!113 lt!67634 lt!67629))))

(declare-fun b!130119 () Bool)

(declare-fun res!62746 () Bool)

(assert (=> b!130119 (=> (not res!62746) (not e!84891))))

(declare-fun e!84886 () Bool)

(assert (=> b!130119 (= res!62746 e!84886)))

(declare-fun c!23981 () Bool)

(assert (=> b!130119 (= c!23981 (not (= (bvand lt!67215 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130120 () Bool)

(declare-fun res!62743 () Bool)

(assert (=> b!130120 (=> (not res!62743) (not e!84891))))

(declare-fun e!84887 () Bool)

(assert (=> b!130120 (= res!62743 e!84887)))

(declare-fun res!62744 () Bool)

(assert (=> b!130120 (=> res!62744 e!84887)))

(declare-fun e!84890 () Bool)

(assert (=> b!130120 (= res!62744 (not e!84890))))

(declare-fun res!62745 () Bool)

(assert (=> b!130120 (=> (not res!62745) (not e!84890))))

(assert (=> b!130120 (= res!62745 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14143 () Bool)

(declare-fun call!14144 () Bool)

(assert (=> bm!14143 (= call!14144 (contains!873 lt!67618 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!23978 () Bool)

(declare-fun bm!14144 () Bool)

(assert (=> bm!14144 (= call!14146 (+!166 (ite c!23979 call!14149 (ite c!23978 call!14147 call!14150)) (ite (or c!23979 c!23978) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!14145 () Bool)

(assert (=> bm!14145 (= call!14147 call!14149)))

(declare-fun b!130121 () Bool)

(declare-fun e!84893 () ListLongMap!1643)

(assert (=> b!130121 (= e!84893 call!14145)))

(declare-fun b!130122 () Bool)

(assert (=> b!130122 (= e!84890 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14146 () Bool)

(assert (=> bm!14146 (= call!14145 call!14146)))

(declare-fun b!130123 () Bool)

(assert (=> b!130123 (= e!84889 (not call!14148))))

(declare-fun b!130124 () Bool)

(declare-fun c!23980 () Bool)

(assert (=> b!130124 (= c!23980 (and (not (= (bvand lt!67215 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!67215 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130124 (= e!84895 e!84893)))

(declare-fun b!130125 () Bool)

(assert (=> b!130125 (= e!84886 (not call!14144))))

(declare-fun b!130126 () Bool)

(assert (=> b!130126 (= e!84886 e!84897)))

(declare-fun res!62741 () Bool)

(assert (=> b!130126 (= res!62741 call!14144)))

(assert (=> b!130126 (=> (not res!62741) (not e!84897))))

(declare-fun b!130127 () Bool)

(assert (=> b!130127 (= e!84888 e!84895)))

(assert (=> b!130127 (= c!23978 (and (not (= (bvand lt!67215 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!67215 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14147 () Bool)

(assert (=> bm!14147 (= call!14148 (contains!873 lt!67618 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130128 () Bool)

(assert (=> b!130128 (= e!84893 call!14150)))

(declare-fun b!130129 () Bool)

(assert (=> b!130129 (= e!84887 e!84894)))

(declare-fun res!62739 () Bool)

(assert (=> b!130129 (=> (not res!62739) (not e!84894))))

(assert (=> b!130129 (= res!62739 (contains!873 lt!67618 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130129 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39599 c!23979) b!130110))

(assert (= (and d!39599 (not c!23979)) b!130127))

(assert (= (and b!130127 c!23978) b!130112))

(assert (= (and b!130127 (not c!23978)) b!130124))

(assert (= (and b!130124 c!23980) b!130121))

(assert (= (and b!130124 (not c!23980)) b!130128))

(assert (= (or b!130121 b!130128) bm!14142))

(assert (= (or b!130112 bm!14142) bm!14145))

(assert (= (or b!130112 b!130121) bm!14146))

(assert (= (or b!130110 bm!14145) bm!14141))

(assert (= (or b!130110 bm!14146) bm!14144))

(assert (= (and d!39599 res!62742) b!130117))

(assert (= (and d!39599 c!23982) b!130118))

(assert (= (and d!39599 (not c!23982)) b!130109))

(assert (= (and d!39599 res!62740) b!130120))

(assert (= (and b!130120 res!62745) b!130122))

(assert (= (and b!130120 (not res!62744)) b!130129))

(assert (= (and b!130129 res!62739) b!130114))

(assert (= (and b!130120 res!62743) b!130119))

(assert (= (and b!130119 c!23981) b!130126))

(assert (= (and b!130119 (not c!23981)) b!130125))

(assert (= (and b!130126 res!62741) b!130116))

(assert (= (or b!130126 b!130125) bm!14143))

(assert (= (and b!130119 res!62746) b!130115))

(assert (= (and b!130115 c!23983) b!130113))

(assert (= (and b!130115 (not c!23983)) b!130123))

(assert (= (and b!130113 res!62738) b!130111))

(assert (= (or b!130113 b!130123) bm!14147))

(declare-fun b_lambda!5787 () Bool)

(assert (=> (not b_lambda!5787) (not b!130114)))

(assert (=> b!130114 t!6088))

(declare-fun b_and!8049 () Bool)

(assert (= b_and!8045 (and (=> t!6088 result!3917) b_and!8049)))

(assert (=> b!130114 t!6090))

(declare-fun b_and!8051 () Bool)

(assert (= b_and!8047 (and (=> t!6090 result!3919) b_and!8051)))

(declare-fun m!153019 () Bool)

(assert (=> b!130111 m!153019))

(assert (=> bm!14141 m!152151))

(declare-fun m!153021 () Bool)

(assert (=> bm!14141 m!153021))

(declare-fun m!153023 () Bool)

(assert (=> b!130110 m!153023))

(assert (=> d!39599 m!152389))

(assert (=> b!130129 m!152369))

(assert (=> b!130129 m!152369))

(declare-fun m!153025 () Bool)

(assert (=> b!130129 m!153025))

(assert (=> b!130117 m!152369))

(assert (=> b!130117 m!152369))

(assert (=> b!130117 m!152403))

(declare-fun m!153027 () Bool)

(assert (=> b!130118 m!153027))

(declare-fun m!153029 () Bool)

(assert (=> b!130118 m!153029))

(declare-fun m!153031 () Bool)

(assert (=> b!130118 m!153031))

(assert (=> b!130118 m!152369))

(assert (=> b!130118 m!152151))

(declare-fun m!153033 () Bool)

(assert (=> b!130118 m!153033))

(declare-fun m!153035 () Bool)

(assert (=> b!130118 m!153035))

(declare-fun m!153037 () Bool)

(assert (=> b!130118 m!153037))

(declare-fun m!153039 () Bool)

(assert (=> b!130118 m!153039))

(assert (=> b!130118 m!153029))

(declare-fun m!153041 () Bool)

(assert (=> b!130118 m!153041))

(declare-fun m!153043 () Bool)

(assert (=> b!130118 m!153043))

(assert (=> b!130118 m!152151))

(assert (=> b!130118 m!153021))

(assert (=> b!130118 m!153041))

(declare-fun m!153045 () Bool)

(assert (=> b!130118 m!153045))

(declare-fun m!153047 () Bool)

(assert (=> b!130118 m!153047))

(assert (=> b!130118 m!153035))

(declare-fun m!153049 () Bool)

(assert (=> b!130118 m!153049))

(declare-fun m!153051 () Bool)

(assert (=> b!130118 m!153051))

(declare-fun m!153053 () Bool)

(assert (=> b!130118 m!153053))

(assert (=> b!130118 m!152151))

(declare-fun m!153055 () Bool)

(assert (=> b!130118 m!153055))

(assert (=> b!130118 m!153037))

(declare-fun m!153057 () Bool)

(assert (=> bm!14143 m!153057))

(assert (=> b!130122 m!152369))

(assert (=> b!130122 m!152369))

(assert (=> b!130122 m!152403))

(declare-fun m!153059 () Bool)

(assert (=> b!130116 m!153059))

(assert (=> b!130114 m!152369))

(assert (=> b!130114 m!152559))

(assert (=> b!130114 m!152441))

(assert (=> b!130114 m!152561))

(assert (=> b!130114 m!152369))

(declare-fun m!153061 () Bool)

(assert (=> b!130114 m!153061))

(assert (=> b!130114 m!152441))

(assert (=> b!130114 m!152559))

(declare-fun m!153063 () Bool)

(assert (=> bm!14144 m!153063))

(declare-fun m!153065 () Bool)

(assert (=> bm!14147 m!153065))

(assert (=> d!39541 d!39599))

(declare-fun lt!67641 () Bool)

(declare-fun d!39601 () Bool)

(declare-fun content!131 (List!1685) (InoxSet tuple2!2544))

(assert (=> d!39601 (= lt!67641 (select (content!131 (toList!837 lt!67403)) (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!84904 () Bool)

(assert (=> d!39601 (= lt!67641 e!84904)))

(declare-fun res!62751 () Bool)

(assert (=> d!39601 (=> (not res!62751) (not e!84904))))

(assert (=> d!39601 (= res!62751 ((_ is Cons!1681) (toList!837 lt!67403)))))

(assert (=> d!39601 (= (contains!875 (toList!837 lt!67403) (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67641)))

(declare-fun b!130134 () Bool)

(declare-fun e!84903 () Bool)

(assert (=> b!130134 (= e!84904 e!84903)))

(declare-fun res!62752 () Bool)

(assert (=> b!130134 (=> res!62752 e!84903)))

(assert (=> b!130134 (= res!62752 (= (h!2285 (toList!837 lt!67403)) (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130135 () Bool)

(assert (=> b!130135 (= e!84903 (contains!875 (t!6076 (toList!837 lt!67403)) (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39601 res!62751) b!130134))

(assert (= (and b!130134 (not res!62752)) b!130135))

(declare-fun m!153067 () Bool)

(assert (=> d!39601 m!153067))

(declare-fun m!153069 () Bool)

(assert (=> d!39601 m!153069))

(declare-fun m!153071 () Bool)

(assert (=> b!130135 m!153071))

(assert (=> b!129864 d!39601))

(assert (=> b!129798 d!39513))

(assert (=> bm!14136 d!39473))

(declare-fun d!39603 () Bool)

(declare-fun e!84905 () Bool)

(assert (=> d!39603 e!84905))

(declare-fun res!62753 () Bool)

(assert (=> d!39603 (=> res!62753 e!84905)))

(declare-fun lt!67642 () Bool)

(assert (=> d!39603 (= res!62753 (not lt!67642))))

(declare-fun lt!67644 () Bool)

(assert (=> d!39603 (= lt!67642 lt!67644)))

(declare-fun lt!67643 () Unit!4042)

(declare-fun e!84906 () Unit!4042)

(assert (=> d!39603 (= lt!67643 e!84906)))

(declare-fun c!23984 () Bool)

(assert (=> d!39603 (= c!23984 lt!67644)))

(assert (=> d!39603 (= lt!67644 (containsKey!173 (toList!837 lt!67352) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39603 (= (contains!873 lt!67352 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67642)))

(declare-fun b!130136 () Bool)

(declare-fun lt!67645 () Unit!4042)

(assert (=> b!130136 (= e!84906 lt!67645)))

(assert (=> b!130136 (= lt!67645 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67352) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130136 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130137 () Bool)

(declare-fun Unit!4064 () Unit!4042)

(assert (=> b!130137 (= e!84906 Unit!4064)))

(declare-fun b!130138 () Bool)

(assert (=> b!130138 (= e!84905 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39603 c!23984) b!130136))

(assert (= (and d!39603 (not c!23984)) b!130137))

(assert (= (and d!39603 (not res!62753)) b!130138))

(declare-fun m!153073 () Bool)

(assert (=> d!39603 m!153073))

(declare-fun m!153075 () Bool)

(assert (=> b!130136 m!153075))

(declare-fun m!153077 () Bool)

(assert (=> b!130136 m!153077))

(assert (=> b!130136 m!153077))

(declare-fun m!153079 () Bool)

(assert (=> b!130136 m!153079))

(assert (=> b!130138 m!153077))

(assert (=> b!130138 m!153077))

(assert (=> b!130138 m!153079))

(assert (=> b!129801 d!39603))

(declare-fun d!39605 () Bool)

(declare-fun e!84907 () Bool)

(assert (=> d!39605 e!84907))

(declare-fun res!62754 () Bool)

(assert (=> d!39605 (=> res!62754 e!84907)))

(declare-fun lt!67646 () Bool)

(assert (=> d!39605 (= res!62754 (not lt!67646))))

(declare-fun lt!67648 () Bool)

(assert (=> d!39605 (= lt!67646 lt!67648)))

(declare-fun lt!67647 () Unit!4042)

(declare-fun e!84908 () Unit!4042)

(assert (=> d!39605 (= lt!67647 e!84908)))

(declare-fun c!23985 () Bool)

(assert (=> d!39605 (= c!23985 lt!67648)))

(assert (=> d!39605 (= lt!67648 (containsKey!173 (toList!837 lt!67457) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39605 (= (contains!873 lt!67457 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67646)))

(declare-fun b!130139 () Bool)

(declare-fun lt!67649 () Unit!4042)

(assert (=> b!130139 (= e!84908 lt!67649)))

(assert (=> b!130139 (= lt!67649 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67457) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130139 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130140 () Bool)

(declare-fun Unit!4065 () Unit!4042)

(assert (=> b!130140 (= e!84908 Unit!4065)))

(declare-fun b!130141 () Bool)

(assert (=> b!130141 (= e!84907 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39605 c!23985) b!130139))

(assert (= (and d!39605 (not c!23985)) b!130140))

(assert (= (and d!39605 (not res!62754)) b!130141))

(declare-fun m!153081 () Bool)

(assert (=> d!39605 m!153081))

(declare-fun m!153083 () Bool)

(assert (=> b!130139 m!153083))

(declare-fun m!153085 () Bool)

(assert (=> b!130139 m!153085))

(assert (=> b!130139 m!153085))

(declare-fun m!153087 () Bool)

(assert (=> b!130139 m!153087))

(assert (=> b!130141 m!153085))

(assert (=> b!130141 m!153085))

(assert (=> b!130141 m!153087))

(assert (=> bm!14124 d!39605))

(declare-fun d!39607 () Bool)

(assert (=> d!39607 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!67650 () Unit!4042)

(assert (=> d!39607 (= lt!67650 (choose!797 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!84909 () Bool)

(assert (=> d!39607 e!84909))

(declare-fun res!62755 () Bool)

(assert (=> d!39607 (=> (not res!62755) (not e!84909))))

(assert (=> d!39607 (= res!62755 (isStrictlySorted!306 (toList!837 lt!67261)))))

(assert (=> d!39607 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!67650)))

(declare-fun b!130142 () Bool)

(assert (=> b!130142 (= e!84909 (containsKey!173 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!39607 res!62755) b!130142))

(assert (=> d!39607 m!152315))

(assert (=> d!39607 m!152377))

(assert (=> d!39607 m!152377))

(assert (=> d!39607 m!152379))

(assert (=> d!39607 m!152315))

(declare-fun m!153089 () Bool)

(assert (=> d!39607 m!153089))

(declare-fun m!153091 () Bool)

(assert (=> d!39607 m!153091))

(assert (=> b!130142 m!152315))

(assert (=> b!130142 m!152373))

(assert (=> b!129720 d!39607))

(declare-fun d!39609 () Bool)

(assert (=> d!39609 (= (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!409 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!5406 () Bool)

(assert (= bs!5406 d!39609))

(assert (=> bs!5406 m!152377))

(declare-fun m!153093 () Bool)

(assert (=> bs!5406 m!153093))

(assert (=> b!129720 d!39609))

(declare-fun b!130143 () Bool)

(declare-fun e!84910 () Option!176)

(assert (=> b!130143 (= e!84910 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67261)))))))

(declare-fun b!130146 () Bool)

(declare-fun e!84911 () Option!176)

(assert (=> b!130146 (= e!84911 None!174)))

(declare-fun b!130145 () Bool)

(assert (=> b!130145 (= e!84911 (getValueByKey!170 (t!6076 (toList!837 lt!67261)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!130144 () Bool)

(assert (=> b!130144 (= e!84910 e!84911)))

(declare-fun c!23987 () Bool)

(assert (=> b!130144 (= c!23987 (and ((_ is Cons!1681) (toList!837 lt!67261)) (not (= (_1!1283 (h!2285 (toList!837 lt!67261))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun c!23986 () Bool)

(declare-fun d!39611 () Bool)

(assert (=> d!39611 (= c!23986 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!39611 (= (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!84910)))

(assert (= (and d!39611 c!23986) b!130143))

(assert (= (and d!39611 (not c!23986)) b!130144))

(assert (= (and b!130144 c!23987) b!130145))

(assert (= (and b!130144 (not c!23987)) b!130146))

(assert (=> b!130145 m!152315))

(declare-fun m!153095 () Bool)

(assert (=> b!130145 m!153095))

(assert (=> b!129720 d!39611))

(declare-fun d!39613 () Bool)

(assert (=> d!39613 (= (size!2506 newMap!16) (bvadd (_size!588 newMap!16) (bvsdiv (bvadd (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!129880 d!39613))

(declare-fun b!130147 () Bool)

(declare-fun e!84912 () Option!176)

(assert (=> b!130147 (= e!84912 (Some!175 (_2!1283 (h!2285 (t!6076 (toList!837 lt!67103))))))))

(declare-fun b!130150 () Bool)

(declare-fun e!84913 () Option!176)

(assert (=> b!130150 (= e!84913 None!174)))

(declare-fun b!130149 () Bool)

(assert (=> b!130149 (= e!84913 (getValueByKey!170 (t!6076 (t!6076 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130148 () Bool)

(assert (=> b!130148 (= e!84912 e!84913)))

(declare-fun c!23989 () Bool)

(assert (=> b!130148 (= c!23989 (and ((_ is Cons!1681) (t!6076 (toList!837 lt!67103))) (not (= (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103)))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(declare-fun d!39615 () Bool)

(declare-fun c!23988 () Bool)

(assert (=> d!39615 (= c!23988 (and ((_ is Cons!1681) (t!6076 (toList!837 lt!67103))) (= (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103)))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39615 (= (getValueByKey!170 (t!6076 (toList!837 lt!67103)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!84912)))

(assert (= (and d!39615 c!23988) b!130147))

(assert (= (and d!39615 (not c!23988)) b!130148))

(assert (= (and b!130148 c!23989) b!130149))

(assert (= (and b!130148 (not c!23989)) b!130150))

(assert (=> b!130149 m!152129))

(declare-fun m!153097 () Bool)

(assert (=> b!130149 m!153097))

(assert (=> b!129959 d!39615))

(assert (=> bm!14106 d!39445))

(declare-fun d!39617 () Bool)

(assert (=> d!39617 (= (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67279)) (v!3166 (getValueByKey!170 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67279)))))

(assert (=> d!39487 d!39617))

(declare-fun b!130151 () Bool)

(declare-fun e!84914 () Option!176)

(assert (=> b!130151 (= e!84914 (Some!175 (_2!1283 (h!2285 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun b!130154 () Bool)

(declare-fun e!84915 () Option!176)

(assert (=> b!130154 (= e!84915 None!174)))

(declare-fun b!130153 () Bool)

(assert (=> b!130153 (= e!84915 (getValueByKey!170 (t!6076 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67279))))

(declare-fun b!130152 () Bool)

(assert (=> b!130152 (= e!84914 e!84915)))

(declare-fun c!23991 () Bool)

(assert (=> b!130152 (= c!23991 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (not (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67279))))))

(declare-fun d!39619 () Bool)

(declare-fun c!23990 () Bool)

(assert (=> d!39619 (= c!23990 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67279)))))

(assert (=> d!39619 (= (getValueByKey!170 (toList!837 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67279) e!84914)))

(assert (= (and d!39619 c!23990) b!130151))

(assert (= (and d!39619 (not c!23990)) b!130152))

(assert (= (and b!130152 c!23991) b!130153))

(assert (= (and b!130152 (not c!23991)) b!130154))

(declare-fun m!153099 () Bool)

(assert (=> b!130153 m!153099))

(assert (=> d!39487 d!39619))

(assert (=> b!129987 d!39527))

(assert (=> b!129987 d!39529))

(declare-fun d!39621 () Bool)

(declare-fun e!84916 () Bool)

(assert (=> d!39621 e!84916))

(declare-fun res!62757 () Bool)

(assert (=> d!39621 (=> (not res!62757) (not e!84916))))

(declare-fun lt!67652 () ListLongMap!1643)

(assert (=> d!39621 (= res!62757 (contains!873 lt!67652 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun lt!67653 () List!1685)

(assert (=> d!39621 (= lt!67652 (ListLongMap!1644 lt!67653))))

(declare-fun lt!67654 () Unit!4042)

(declare-fun lt!67651 () Unit!4042)

(assert (=> d!39621 (= lt!67654 lt!67651)))

(assert (=> d!39621 (= (getValueByKey!170 lt!67653 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!39621 (= lt!67651 (lemmaContainsTupThenGetReturnValue!85 lt!67653 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!39621 (= lt!67653 (insertStrictlySorted!88 (toList!837 call!14087) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!39621 (= (+!166 call!14087 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) lt!67652)))

(declare-fun b!130155 () Bool)

(declare-fun res!62756 () Bool)

(assert (=> b!130155 (=> (not res!62756) (not e!84916))))

(assert (=> b!130155 (= res!62756 (= (getValueByKey!170 (toList!837 lt!67652) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun b!130156 () Bool)

(assert (=> b!130156 (= e!84916 (contains!875 (toList!837 lt!67652) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(assert (= (and d!39621 res!62757) b!130155))

(assert (= (and b!130155 res!62756) b!130156))

(declare-fun m!153101 () Bool)

(assert (=> d!39621 m!153101))

(declare-fun m!153103 () Bool)

(assert (=> d!39621 m!153103))

(declare-fun m!153105 () Bool)

(assert (=> d!39621 m!153105))

(declare-fun m!153107 () Bool)

(assert (=> d!39621 m!153107))

(declare-fun m!153109 () Bool)

(assert (=> b!130155 m!153109))

(declare-fun m!153111 () Bool)

(assert (=> b!130156 m!153111))

(assert (=> b!129732 d!39621))

(declare-fun d!39623 () Bool)

(declare-fun res!62758 () Bool)

(declare-fun e!84917 () Bool)

(assert (=> d!39623 (=> res!62758 e!84917)))

(assert (=> d!39623 (= res!62758 (and ((_ is Cons!1681) (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (= (_1!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))))

(assert (=> d!39623 (= (containsKey!173 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))) e!84917)))

(declare-fun b!130157 () Bool)

(declare-fun e!84918 () Bool)

(assert (=> b!130157 (= e!84917 e!84918)))

(declare-fun res!62759 () Bool)

(assert (=> b!130157 (=> (not res!62759) (not e!84918))))

(assert (=> b!130157 (= res!62759 (and (or (not ((_ is Cons!1681) (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (bvsle (_1!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))) ((_ is Cons!1681) (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (bvslt (_1!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))))

(declare-fun b!130158 () Bool)

(assert (=> b!130158 (= e!84918 (containsKey!173 (t!6076 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(assert (= (and d!39623 (not res!62758)) b!130157))

(assert (= (and b!130157 res!62759) b!130158))

(assert (=> b!130158 m!152281))

(declare-fun m!153113 () Bool)

(assert (=> b!130158 m!153113))

(assert (=> d!39527 d!39623))

(declare-fun d!39625 () Bool)

(assert (=> d!39625 (= (get!1473 (getValueByKey!170 (toList!837 lt!67269) lt!67263)) (v!3166 (getValueByKey!170 (toList!837 lt!67269) lt!67263)))))

(assert (=> d!39495 d!39625))

(declare-fun b!130159 () Bool)

(declare-fun e!84919 () Option!176)

(assert (=> b!130159 (= e!84919 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67269)))))))

(declare-fun b!130162 () Bool)

(declare-fun e!84920 () Option!176)

(assert (=> b!130162 (= e!84920 None!174)))

(declare-fun b!130161 () Bool)

(assert (=> b!130161 (= e!84920 (getValueByKey!170 (t!6076 (toList!837 lt!67269)) lt!67263))))

(declare-fun b!130160 () Bool)

(assert (=> b!130160 (= e!84919 e!84920)))

(declare-fun c!23993 () Bool)

(assert (=> b!130160 (= c!23993 (and ((_ is Cons!1681) (toList!837 lt!67269)) (not (= (_1!1283 (h!2285 (toList!837 lt!67269))) lt!67263))))))

(declare-fun d!39627 () Bool)

(declare-fun c!23992 () Bool)

(assert (=> d!39627 (= c!23992 (and ((_ is Cons!1681) (toList!837 lt!67269)) (= (_1!1283 (h!2285 (toList!837 lt!67269))) lt!67263)))))

(assert (=> d!39627 (= (getValueByKey!170 (toList!837 lt!67269) lt!67263) e!84919)))

(assert (= (and d!39627 c!23992) b!130159))

(assert (= (and d!39627 (not c!23992)) b!130160))

(assert (= (and b!130160 c!23993) b!130161))

(assert (= (and b!130160 (not c!23993)) b!130162))

(declare-fun m!153115 () Bool)

(assert (=> b!130161 m!153115))

(assert (=> d!39495 d!39627))

(assert (=> d!39529 d!39565))

(assert (=> b!129881 d!39613))

(declare-fun d!39629 () Bool)

(assert (=> d!39629 (= (apply!113 lt!67457 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1473 (getValueByKey!170 (toList!837 lt!67457) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5407 () Bool)

(assert (= bs!5407 d!39629))

(assert (=> bs!5407 m!152369))

(declare-fun m!153117 () Bool)

(assert (=> bs!5407 m!153117))

(assert (=> bs!5407 m!153117))

(declare-fun m!153119 () Bool)

(assert (=> bs!5407 m!153119))

(assert (=> b!129969 d!39629))

(declare-fun d!39631 () Bool)

(declare-fun c!23994 () Bool)

(assert (=> d!39631 (= c!23994 ((_ is ValueCellFull!1085) (select (arr!2235 lt!67193) #b00000000000000000000000000000000)))))

(declare-fun e!84921 () V!3457)

(assert (=> d!39631 (= (get!1469 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!84921)))

(declare-fun b!130163 () Bool)

(assert (=> b!130163 (= e!84921 (get!1471 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!130164 () Bool)

(assert (=> b!130164 (= e!84921 (get!1472 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39631 c!23994) b!130163))

(assert (= (and d!39631 (not c!23994)) b!130164))

(assert (=> b!130163 m!152807))

(assert (=> b!130163 m!152441))

(declare-fun m!153121 () Bool)

(assert (=> b!130163 m!153121))

(assert (=> b!130164 m!152807))

(assert (=> b!130164 m!152441))

(declare-fun m!153123 () Bool)

(assert (=> b!130164 m!153123))

(assert (=> b!129969 d!39631))

(declare-fun d!39633 () Bool)

(assert (=> d!39633 (= (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!409 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5408 () Bool)

(assert (= bs!5408 d!39633))

(assert (=> bs!5408 m!152493))

(declare-fun m!153125 () Bool)

(assert (=> bs!5408 m!153125))

(assert (=> b!129930 d!39633))

(declare-fun b!130165 () Bool)

(declare-fun e!84922 () Option!176)

(assert (=> b!130165 (= e!84922 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67261)))))))

(declare-fun b!130168 () Bool)

(declare-fun e!84923 () Option!176)

(assert (=> b!130168 (= e!84923 None!174)))

(declare-fun b!130167 () Bool)

(assert (=> b!130167 (= e!84923 (getValueByKey!170 (t!6076 (toList!837 lt!67261)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130166 () Bool)

(assert (=> b!130166 (= e!84922 e!84923)))

(declare-fun c!23996 () Bool)

(assert (=> b!130166 (= c!23996 (and ((_ is Cons!1681) (toList!837 lt!67261)) (not (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!39635 () Bool)

(declare-fun c!23995 () Bool)

(assert (=> d!39635 (= c!23995 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39635 (= (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000) e!84922)))

(assert (= (and d!39635 c!23995) b!130165))

(assert (= (and d!39635 (not c!23995)) b!130166))

(assert (= (and b!130166 c!23996) b!130167))

(assert (= (and b!130166 (not c!23996)) b!130168))

(declare-fun m!153127 () Bool)

(assert (=> b!130167 m!153127))

(assert (=> b!129930 d!39635))

(assert (=> b!130059 d!39509))

(declare-fun d!39637 () Bool)

(assert (=> d!39637 (= (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!409 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5409 () Bool)

(assert (= bs!5409 d!39637))

(assert (=> bs!5409 m!152463))

(declare-fun m!153129 () Bool)

(assert (=> bs!5409 m!153129))

(assert (=> b!129757 d!39637))

(declare-fun b!130169 () Bool)

(declare-fun e!84924 () Option!176)

(assert (=> b!130169 (= e!84924 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67261)))))))

(declare-fun b!130172 () Bool)

(declare-fun e!84925 () Option!176)

(assert (=> b!130172 (= e!84925 None!174)))

(declare-fun b!130171 () Bool)

(assert (=> b!130171 (= e!84925 (getValueByKey!170 (t!6076 (toList!837 lt!67261)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130170 () Bool)

(assert (=> b!130170 (= e!84924 e!84925)))

(declare-fun c!23998 () Bool)

(assert (=> b!130170 (= c!23998 (and ((_ is Cons!1681) (toList!837 lt!67261)) (not (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!39639 () Bool)

(declare-fun c!23997 () Bool)

(assert (=> d!39639 (= c!23997 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39639 (= (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000) e!84924)))

(assert (= (and d!39639 c!23997) b!130169))

(assert (= (and d!39639 (not c!23997)) b!130170))

(assert (= (and b!130170 c!23998) b!130171))

(assert (= (and b!130170 (not c!23998)) b!130172))

(declare-fun m!153131 () Bool)

(assert (=> b!130171 m!153131))

(assert (=> b!129757 d!39639))

(assert (=> b!129972 d!39587))

(declare-fun b!130173 () Bool)

(declare-fun e!84927 () Bool)

(declare-fun call!14151 () Bool)

(assert (=> b!130173 (= e!84927 call!14151)))

(declare-fun b!130174 () Bool)

(declare-fun e!84929 () Bool)

(assert (=> b!130174 (= e!84929 (contains!876 Nil!1684 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun d!39641 () Bool)

(declare-fun res!62762 () Bool)

(declare-fun e!84928 () Bool)

(assert (=> d!39641 (=> res!62762 e!84928)))

(assert (=> d!39641 (= res!62762 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (=> d!39641 (= (arrayNoDuplicates!0 (_keys!4564 (_2!1284 lt!67191)) #b00000000000000000000000000000000 Nil!1684) e!84928)))

(declare-fun b!130175 () Bool)

(declare-fun e!84926 () Bool)

(assert (=> b!130175 (= e!84928 e!84926)))

(declare-fun res!62761 () Bool)

(assert (=> b!130175 (=> (not res!62761) (not e!84926))))

(assert (=> b!130175 (= res!62761 (not e!84929))))

(declare-fun res!62760 () Bool)

(assert (=> b!130175 (=> (not res!62760) (not e!84929))))

(assert (=> b!130175 (= res!62760 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun bm!14148 () Bool)

(declare-fun c!23999 () Bool)

(assert (=> bm!14148 (= call!14151 (arrayNoDuplicates!0 (_keys!4564 (_2!1284 lt!67191)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!23999 (Cons!1683 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000) Nil!1684) Nil!1684)))))

(declare-fun b!130176 () Bool)

(assert (=> b!130176 (= e!84926 e!84927)))

(assert (=> b!130176 (= c!23999 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun b!130177 () Bool)

(assert (=> b!130177 (= e!84927 call!14151)))

(assert (= (and d!39641 (not res!62762)) b!130175))

(assert (= (and b!130175 res!62760) b!130174))

(assert (= (and b!130175 res!62761) b!130176))

(assert (= (and b!130176 c!23999) b!130177))

(assert (= (and b!130176 (not c!23999)) b!130173))

(assert (= (or b!130177 b!130173) bm!14148))

(declare-fun m!153133 () Bool)

(assert (=> b!130174 m!153133))

(assert (=> b!130174 m!153133))

(declare-fun m!153135 () Bool)

(assert (=> b!130174 m!153135))

(assert (=> b!130175 m!153133))

(assert (=> b!130175 m!153133))

(declare-fun m!153137 () Bool)

(assert (=> b!130175 m!153137))

(assert (=> bm!14148 m!153133))

(declare-fun m!153139 () Bool)

(assert (=> bm!14148 m!153139))

(assert (=> b!130176 m!153133))

(assert (=> b!130176 m!153133))

(assert (=> b!130176 m!153137))

(assert (=> b!129754 d!39641))

(assert (=> b!129815 d!39587))

(declare-fun d!39643 () Bool)

(assert (=> d!39643 (= (get!1473 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!3166 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39553 d!39643))

(assert (=> d!39553 d!39639))

(declare-fun d!39645 () Bool)

(declare-fun lt!67655 () Bool)

(assert (=> d!39645 (= lt!67655 (select (content!131 (toList!837 lt!67327)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!84931 () Bool)

(assert (=> d!39645 (= lt!67655 e!84931)))

(declare-fun res!62763 () Bool)

(assert (=> d!39645 (=> (not res!62763) (not e!84931))))

(assert (=> d!39645 (= res!62763 ((_ is Cons!1681) (toList!837 lt!67327)))))

(assert (=> d!39645 (= (contains!875 (toList!837 lt!67327) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67655)))

(declare-fun b!130178 () Bool)

(declare-fun e!84930 () Bool)

(assert (=> b!130178 (= e!84931 e!84930)))

(declare-fun res!62764 () Bool)

(assert (=> b!130178 (=> res!62764 e!84930)))

(assert (=> b!130178 (= res!62764 (= (h!2285 (toList!837 lt!67327)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130179 () Bool)

(assert (=> b!130179 (= e!84930 (contains!875 (t!6076 (toList!837 lt!67327)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39645 res!62763) b!130178))

(assert (= (and b!130178 (not res!62764)) b!130179))

(declare-fun m!153141 () Bool)

(assert (=> d!39645 m!153141))

(declare-fun m!153143 () Bool)

(assert (=> d!39645 m!153143))

(declare-fun m!153145 () Bool)

(assert (=> b!130179 m!153145))

(assert (=> b!129763 d!39645))

(assert (=> d!39455 d!39565))

(declare-fun d!39647 () Bool)

(declare-fun e!84932 () Bool)

(assert (=> d!39647 e!84932))

(declare-fun res!62766 () Bool)

(assert (=> d!39647 (=> (not res!62766) (not e!84932))))

(declare-fun lt!67657 () ListLongMap!1643)

(assert (=> d!39647 (= res!62766 (contains!873 lt!67657 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(declare-fun lt!67658 () List!1685)

(assert (=> d!39647 (= lt!67657 (ListLongMap!1644 lt!67658))))

(declare-fun lt!67659 () Unit!4042)

(declare-fun lt!67656 () Unit!4042)

(assert (=> d!39647 (= lt!67659 lt!67656)))

(assert (=> d!39647 (= (getValueByKey!170 lt!67658 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39647 (= lt!67656 (lemmaContainsTupThenGetReturnValue!85 lt!67658 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39647 (= lt!67658 (insertStrictlySorted!88 (toList!837 call!14097) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39647 (= (+!166 call!14097 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67657)))

(declare-fun b!130180 () Bool)

(declare-fun res!62765 () Bool)

(assert (=> b!130180 (=> (not res!62765) (not e!84932))))

(assert (=> b!130180 (= res!62765 (= (getValueByKey!170 (toList!837 lt!67657) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(declare-fun b!130181 () Bool)

(assert (=> b!130181 (= e!84932 (contains!875 (toList!837 lt!67657) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))

(assert (= (and d!39647 res!62766) b!130180))

(assert (= (and b!130180 res!62765) b!130181))

(declare-fun m!153147 () Bool)

(assert (=> d!39647 m!153147))

(declare-fun m!153149 () Bool)

(assert (=> d!39647 m!153149))

(declare-fun m!153151 () Bool)

(assert (=> d!39647 m!153151))

(declare-fun m!153153 () Bool)

(assert (=> d!39647 m!153153))

(declare-fun m!153155 () Bool)

(assert (=> b!130180 m!153155))

(declare-fun m!153157 () Bool)

(assert (=> b!130181 m!153157))

(assert (=> b!129803 d!39647))

(declare-fun d!39649 () Bool)

(assert (=> d!39649 (= (apply!113 lt!67293 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1473 (getValueByKey!170 (toList!837 lt!67293) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5410 () Bool)

(assert (= bs!5410 d!39649))

(assert (=> bs!5410 m!152369))

(declare-fun m!153159 () Bool)

(assert (=> bs!5410 m!153159))

(assert (=> bs!5410 m!153159))

(declare-fun m!153161 () Bool)

(assert (=> bs!5410 m!153161))

(assert (=> b!129736 d!39649))

(declare-fun c!24000 () Bool)

(declare-fun d!39651 () Bool)

(assert (=> d!39651 (= c!24000 ((_ is ValueCellFull!1085) (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!84933 () V!3457)

(assert (=> d!39651 (= (get!1469 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!84933)))

(declare-fun b!130182 () Bool)

(assert (=> b!130182 (= e!84933 (get!1471 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!130183 () Bool)

(assert (=> b!130183 (= e!84933 (get!1472 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39651 c!24000) b!130182))

(assert (= (and d!39651 (not c!24000)) b!130183))

(assert (=> b!130182 m!152439))

(assert (=> b!130182 m!152441))

(declare-fun m!153163 () Bool)

(assert (=> b!130182 m!153163))

(assert (=> b!130183 m!152439))

(assert (=> b!130183 m!152441))

(declare-fun m!153165 () Bool)

(assert (=> b!130183 m!153165))

(assert (=> b!129736 d!39651))

(assert (=> b!129739 d!39587))

(declare-fun d!39653 () Bool)

(declare-fun e!84934 () Bool)

(assert (=> d!39653 e!84934))

(declare-fun res!62767 () Bool)

(assert (=> d!39653 (=> res!62767 e!84934)))

(declare-fun lt!67660 () Bool)

(assert (=> d!39653 (= res!62767 (not lt!67660))))

(declare-fun lt!67662 () Bool)

(assert (=> d!39653 (= lt!67660 lt!67662)))

(declare-fun lt!67661 () Unit!4042)

(declare-fun e!84935 () Unit!4042)

(assert (=> d!39653 (= lt!67661 e!84935)))

(declare-fun c!24001 () Bool)

(assert (=> d!39653 (= c!24001 lt!67662)))

(assert (=> d!39653 (= lt!67662 (containsKey!173 (toList!837 lt!67424) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39653 (= (contains!873 lt!67424 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67660)))

(declare-fun b!130184 () Bool)

(declare-fun lt!67663 () Unit!4042)

(assert (=> b!130184 (= e!84935 lt!67663)))

(assert (=> b!130184 (= lt!67663 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67424) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130184 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130185 () Bool)

(declare-fun Unit!4066 () Unit!4042)

(assert (=> b!130185 (= e!84935 Unit!4066)))

(declare-fun b!130186 () Bool)

(assert (=> b!130186 (= e!84934 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39653 c!24001) b!130184))

(assert (= (and d!39653 (not c!24001)) b!130185))

(assert (= (and d!39653 (not res!62767)) b!130186))

(declare-fun m!153167 () Bool)

(assert (=> d!39653 m!153167))

(declare-fun m!153169 () Bool)

(assert (=> b!130184 m!153169))

(declare-fun m!153171 () Bool)

(assert (=> b!130184 m!153171))

(assert (=> b!130184 m!153171))

(declare-fun m!153173 () Bool)

(assert (=> b!130184 m!153173))

(assert (=> b!130186 m!153171))

(assert (=> b!130186 m!153171))

(assert (=> b!130186 m!153173))

(assert (=> bm!14114 d!39653))

(declare-fun d!39655 () Bool)

(declare-fun res!62768 () Bool)

(declare-fun e!84936 () Bool)

(assert (=> d!39655 (=> (not res!62768) (not e!84936))))

(assert (=> d!39655 (= res!62768 (simpleValid!89 (_2!1284 lt!67593)))))

(assert (=> d!39655 (= (valid!530 (_2!1284 lt!67593)) e!84936)))

(declare-fun b!130187 () Bool)

(declare-fun res!62769 () Bool)

(assert (=> b!130187 (=> (not res!62769) (not e!84936))))

(assert (=> b!130187 (= res!62769 (= (arrayCountValidKeys!0 (_keys!4564 (_2!1284 lt!67593)) #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67593)))) (_size!588 (_2!1284 lt!67593))))))

(declare-fun b!130188 () Bool)

(declare-fun res!62770 () Bool)

(assert (=> b!130188 (=> (not res!62770) (not e!84936))))

(assert (=> b!130188 (= res!62770 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 (_2!1284 lt!67593)) (mask!7101 (_2!1284 lt!67593))))))

(declare-fun b!130189 () Bool)

(assert (=> b!130189 (= e!84936 (arrayNoDuplicates!0 (_keys!4564 (_2!1284 lt!67593)) #b00000000000000000000000000000000 Nil!1684))))

(assert (= (and d!39655 res!62768) b!130187))

(assert (= (and b!130187 res!62769) b!130188))

(assert (= (and b!130188 res!62770) b!130189))

(declare-fun m!153175 () Bool)

(assert (=> d!39655 m!153175))

(declare-fun m!153177 () Bool)

(assert (=> b!130187 m!153177))

(declare-fun m!153179 () Bool)

(assert (=> b!130188 m!153179))

(declare-fun m!153181 () Bool)

(assert (=> b!130189 m!153181))

(assert (=> b!130063 d!39655))

(declare-fun d!39657 () Bool)

(declare-fun e!84937 () Bool)

(assert (=> d!39657 e!84937))

(declare-fun res!62771 () Bool)

(assert (=> d!39657 (=> res!62771 e!84937)))

(declare-fun lt!67664 () Bool)

(assert (=> d!39657 (= res!62771 (not lt!67664))))

(declare-fun lt!67666 () Bool)

(assert (=> d!39657 (= lt!67664 lt!67666)))

(declare-fun lt!67665 () Unit!4042)

(declare-fun e!84938 () Unit!4042)

(assert (=> d!39657 (= lt!67665 e!84938)))

(declare-fun c!24002 () Bool)

(assert (=> d!39657 (= c!24002 lt!67666)))

(assert (=> d!39657 (= lt!67666 (containsKey!173 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39657 (= (contains!873 lt!67414 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67664)))

(declare-fun b!130190 () Bool)

(declare-fun lt!67667 () Unit!4042)

(assert (=> b!130190 (= e!84938 lt!67667)))

(assert (=> b!130190 (= lt!67667 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> b!130190 (isDefined!122 (getValueByKey!170 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130191 () Bool)

(declare-fun Unit!4067 () Unit!4042)

(assert (=> b!130191 (= e!84938 Unit!4067)))

(declare-fun b!130192 () Bool)

(assert (=> b!130192 (= e!84937 (isDefined!122 (getValueByKey!170 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39657 c!24002) b!130190))

(assert (= (and d!39657 (not c!24002)) b!130191))

(assert (= (and d!39657 (not res!62771)) b!130192))

(declare-fun m!153183 () Bool)

(assert (=> d!39657 m!153183))

(declare-fun m!153185 () Bool)

(assert (=> b!130190 m!153185))

(assert (=> b!130190 m!152677))

(assert (=> b!130190 m!152677))

(declare-fun m!153187 () Bool)

(assert (=> b!130190 m!153187))

(assert (=> b!130192 m!152677))

(assert (=> b!130192 m!152677))

(assert (=> b!130192 m!153187))

(assert (=> d!39505 d!39657))

(declare-fun b!130193 () Bool)

(declare-fun e!84939 () Option!176)

(assert (=> b!130193 (= e!84939 (Some!175 (_2!1283 (h!2285 lt!67415))))))

(declare-fun b!130196 () Bool)

(declare-fun e!84940 () Option!176)

(assert (=> b!130196 (= e!84940 None!174)))

(declare-fun b!130195 () Bool)

(assert (=> b!130195 (= e!84940 (getValueByKey!170 (t!6076 lt!67415) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130194 () Bool)

(assert (=> b!130194 (= e!84939 e!84940)))

(declare-fun c!24004 () Bool)

(assert (=> b!130194 (= c!24004 (and ((_ is Cons!1681) lt!67415) (not (= (_1!1283 (h!2285 lt!67415)) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24003 () Bool)

(declare-fun d!39659 () Bool)

(assert (=> d!39659 (= c!24003 (and ((_ is Cons!1681) lt!67415) (= (_1!1283 (h!2285 lt!67415)) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39659 (= (getValueByKey!170 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!84939)))

(assert (= (and d!39659 c!24003) b!130193))

(assert (= (and d!39659 (not c!24003)) b!130194))

(assert (= (and b!130194 c!24004) b!130195))

(assert (= (and b!130194 (not c!24004)) b!130196))

(declare-fun m!153189 () Bool)

(assert (=> b!130195 m!153189))

(assert (=> d!39505 d!39659))

(declare-fun d!39661 () Bool)

(assert (=> d!39661 (= (getValueByKey!170 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67670 () Unit!4042)

(declare-fun choose!802 (List!1685 (_ BitVec 64) V!3457) Unit!4042)

(assert (=> d!39661 (= lt!67670 (choose!802 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!84943 () Bool)

(assert (=> d!39661 e!84943))

(declare-fun res!62776 () Bool)

(assert (=> d!39661 (=> (not res!62776) (not e!84943))))

(assert (=> d!39661 (= res!62776 (isStrictlySorted!306 lt!67415))))

(assert (=> d!39661 (= (lemmaContainsTupThenGetReturnValue!85 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67670)))

(declare-fun b!130201 () Bool)

(declare-fun res!62777 () Bool)

(assert (=> b!130201 (=> (not res!62777) (not e!84943))))

(assert (=> b!130201 (= res!62777 (containsKey!173 lt!67415 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130202 () Bool)

(assert (=> b!130202 (= e!84943 (contains!875 lt!67415 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39661 res!62776) b!130201))

(assert (= (and b!130201 res!62777) b!130202))

(assert (=> d!39661 m!152671))

(declare-fun m!153191 () Bool)

(assert (=> d!39661 m!153191))

(declare-fun m!153193 () Bool)

(assert (=> d!39661 m!153193))

(declare-fun m!153195 () Bool)

(assert (=> b!130201 m!153195))

(declare-fun m!153197 () Bool)

(assert (=> b!130202 m!153197))

(assert (=> d!39505 d!39661))

(declare-fun e!84954 () List!1685)

(declare-fun call!14158 () List!1685)

(declare-fun bm!14155 () Bool)

(declare-fun c!24014 () Bool)

(declare-fun $colon$colon!90 (List!1685 tuple2!2544) List!1685)

(assert (=> bm!14155 (= call!14158 ($colon$colon!90 e!84954 (ite c!24014 (h!2285 (toList!837 lt!67267)) (tuple2!2545 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24016 () Bool)

(assert (=> bm!14155 (= c!24016 c!24014)))

(declare-fun b!130224 () Bool)

(assert (=> b!130224 (= e!84954 (insertStrictlySorted!88 (t!6076 (toList!837 lt!67267)) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130225 () Bool)

(declare-fun res!62783 () Bool)

(declare-fun e!84958 () Bool)

(assert (=> b!130225 (=> (not res!62783) (not e!84958))))

(declare-fun lt!67673 () List!1685)

(assert (=> b!130225 (= res!62783 (containsKey!173 lt!67673 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun c!24015 () Bool)

(declare-fun b!130226 () Bool)

(assert (=> b!130226 (= c!24015 (and ((_ is Cons!1681) (toList!837 lt!67267)) (bvsgt (_1!1283 (h!2285 (toList!837 lt!67267))) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!84956 () List!1685)

(declare-fun e!84955 () List!1685)

(assert (=> b!130226 (= e!84956 e!84955)))

(declare-fun c!24013 () Bool)

(declare-fun b!130223 () Bool)

(assert (=> b!130223 (= e!84954 (ite c!24013 (t!6076 (toList!837 lt!67267)) (ite c!24015 (Cons!1681 (h!2285 (toList!837 lt!67267)) (t!6076 (toList!837 lt!67267))) Nil!1682)))))

(declare-fun d!39663 () Bool)

(assert (=> d!39663 e!84958))

(declare-fun res!62782 () Bool)

(assert (=> d!39663 (=> (not res!62782) (not e!84958))))

(assert (=> d!39663 (= res!62782 (isStrictlySorted!306 lt!67673))))

(declare-fun e!84957 () List!1685)

(assert (=> d!39663 (= lt!67673 e!84957)))

(assert (=> d!39663 (= c!24014 (and ((_ is Cons!1681) (toList!837 lt!67267)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67267))) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39663 (isStrictlySorted!306 (toList!837 lt!67267))))

(assert (=> d!39663 (= (insertStrictlySorted!88 (toList!837 lt!67267) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67673)))

(declare-fun bm!14156 () Bool)

(declare-fun call!14159 () List!1685)

(declare-fun call!14160 () List!1685)

(assert (=> bm!14156 (= call!14159 call!14160)))

(declare-fun bm!14157 () Bool)

(assert (=> bm!14157 (= call!14160 call!14158)))

(declare-fun b!130227 () Bool)

(assert (=> b!130227 (= e!84957 e!84956)))

(assert (=> b!130227 (= c!24013 (and ((_ is Cons!1681) (toList!837 lt!67267)) (= (_1!1283 (h!2285 (toList!837 lt!67267))) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130228 () Bool)

(assert (=> b!130228 (= e!84958 (contains!875 lt!67673 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130229 () Bool)

(assert (=> b!130229 (= e!84956 call!14160)))

(declare-fun b!130230 () Bool)

(assert (=> b!130230 (= e!84955 call!14159)))

(declare-fun b!130231 () Bool)

(assert (=> b!130231 (= e!84957 call!14158)))

(declare-fun b!130232 () Bool)

(assert (=> b!130232 (= e!84955 call!14159)))

(assert (= (and d!39663 c!24014) b!130231))

(assert (= (and d!39663 (not c!24014)) b!130227))

(assert (= (and b!130227 c!24013) b!130229))

(assert (= (and b!130227 (not c!24013)) b!130226))

(assert (= (and b!130226 c!24015) b!130232))

(assert (= (and b!130226 (not c!24015)) b!130230))

(assert (= (or b!130232 b!130230) bm!14156))

(assert (= (or b!130229 bm!14156) bm!14157))

(assert (= (or b!130231 bm!14157) bm!14155))

(assert (= (and bm!14155 c!24016) b!130224))

(assert (= (and bm!14155 (not c!24016)) b!130223))

(assert (= (and d!39663 res!62782) b!130225))

(assert (= (and b!130225 res!62783) b!130228))

(declare-fun m!153199 () Bool)

(assert (=> bm!14155 m!153199))

(declare-fun m!153201 () Bool)

(assert (=> b!130224 m!153201))

(declare-fun m!153203 () Bool)

(assert (=> b!130225 m!153203))

(declare-fun m!153205 () Bool)

(assert (=> b!130228 m!153205))

(declare-fun m!153207 () Bool)

(assert (=> d!39663 m!153207))

(declare-fun m!153209 () Bool)

(assert (=> d!39663 m!153209))

(assert (=> d!39505 d!39663))

(assert (=> b!129793 d!39451))

(declare-fun d!39665 () Bool)

(declare-fun e!84959 () Bool)

(assert (=> d!39665 e!84959))

(declare-fun res!62785 () Bool)

(assert (=> d!39665 (=> (not res!62785) (not e!84959))))

(declare-fun lt!67675 () ListLongMap!1643)

(assert (=> d!39665 (= res!62785 (contains!873 lt!67675 (_1!1283 (tuple2!2545 lt!67349 lt!67350))))))

(declare-fun lt!67676 () List!1685)

(assert (=> d!39665 (= lt!67675 (ListLongMap!1644 lt!67676))))

(declare-fun lt!67677 () Unit!4042)

(declare-fun lt!67674 () Unit!4042)

(assert (=> d!39665 (= lt!67677 lt!67674)))

(assert (=> d!39665 (= (getValueByKey!170 lt!67676 (_1!1283 (tuple2!2545 lt!67349 lt!67350))) (Some!175 (_2!1283 (tuple2!2545 lt!67349 lt!67350))))))

(assert (=> d!39665 (= lt!67674 (lemmaContainsTupThenGetReturnValue!85 lt!67676 (_1!1283 (tuple2!2545 lt!67349 lt!67350)) (_2!1283 (tuple2!2545 lt!67349 lt!67350))))))

(assert (=> d!39665 (= lt!67676 (insertStrictlySorted!88 (toList!837 lt!67348) (_1!1283 (tuple2!2545 lt!67349 lt!67350)) (_2!1283 (tuple2!2545 lt!67349 lt!67350))))))

(assert (=> d!39665 (= (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350)) lt!67675)))

(declare-fun b!130233 () Bool)

(declare-fun res!62784 () Bool)

(assert (=> b!130233 (=> (not res!62784) (not e!84959))))

(assert (=> b!130233 (= res!62784 (= (getValueByKey!170 (toList!837 lt!67675) (_1!1283 (tuple2!2545 lt!67349 lt!67350))) (Some!175 (_2!1283 (tuple2!2545 lt!67349 lt!67350)))))))

(declare-fun b!130234 () Bool)

(assert (=> b!130234 (= e!84959 (contains!875 (toList!837 lt!67675) (tuple2!2545 lt!67349 lt!67350)))))

(assert (= (and d!39665 res!62785) b!130233))

(assert (= (and b!130233 res!62784) b!130234))

(declare-fun m!153211 () Bool)

(assert (=> d!39665 m!153211))

(declare-fun m!153213 () Bool)

(assert (=> d!39665 m!153213))

(declare-fun m!153215 () Bool)

(assert (=> d!39665 m!153215))

(declare-fun m!153217 () Bool)

(assert (=> d!39665 m!153217))

(declare-fun m!153219 () Bool)

(assert (=> b!130233 m!153219))

(declare-fun m!153221 () Bool)

(assert (=> b!130234 m!153221))

(assert (=> b!129793 d!39665))

(declare-fun d!39667 () Bool)

(declare-fun e!84960 () Bool)

(assert (=> d!39667 e!84960))

(declare-fun res!62786 () Bool)

(assert (=> d!39667 (=> res!62786 e!84960)))

(declare-fun lt!67678 () Bool)

(assert (=> d!39667 (= res!62786 (not lt!67678))))

(declare-fun lt!67680 () Bool)

(assert (=> d!39667 (= lt!67678 lt!67680)))

(declare-fun lt!67679 () Unit!4042)

(declare-fun e!84961 () Unit!4042)

(assert (=> d!39667 (= lt!67679 e!84961)))

(declare-fun c!24017 () Bool)

(assert (=> d!39667 (= c!24017 lt!67680)))

(assert (=> d!39667 (= lt!67680 (containsKey!173 (toList!837 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350))) lt!67353))))

(assert (=> d!39667 (= (contains!873 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350)) lt!67353) lt!67678)))

(declare-fun b!130235 () Bool)

(declare-fun lt!67681 () Unit!4042)

(assert (=> b!130235 (= e!84961 lt!67681)))

(assert (=> b!130235 (= lt!67681 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350))) lt!67353))))

(assert (=> b!130235 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350))) lt!67353))))

(declare-fun b!130236 () Bool)

(declare-fun Unit!4068 () Unit!4042)

(assert (=> b!130236 (= e!84961 Unit!4068)))

(declare-fun b!130237 () Bool)

(assert (=> b!130237 (= e!84960 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350))) lt!67353)))))

(assert (= (and d!39667 c!24017) b!130235))

(assert (= (and d!39667 (not c!24017)) b!130236))

(assert (= (and d!39667 (not res!62786)) b!130237))

(declare-fun m!153223 () Bool)

(assert (=> d!39667 m!153223))

(declare-fun m!153225 () Bool)

(assert (=> b!130235 m!153225))

(declare-fun m!153227 () Bool)

(assert (=> b!130235 m!153227))

(assert (=> b!130235 m!153227))

(declare-fun m!153229 () Bool)

(assert (=> b!130235 m!153229))

(assert (=> b!130237 m!153227))

(assert (=> b!130237 m!153227))

(assert (=> b!130237 m!153229))

(assert (=> b!129793 d!39667))

(declare-fun d!39669 () Bool)

(declare-fun e!84962 () Bool)

(assert (=> d!39669 e!84962))

(declare-fun res!62788 () Bool)

(assert (=> d!39669 (=> (not res!62788) (not e!84962))))

(declare-fun lt!67683 () ListLongMap!1643)

(assert (=> d!39669 (= res!62788 (contains!873 lt!67683 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67684 () List!1685)

(assert (=> d!39669 (= lt!67683 (ListLongMap!1644 lt!67684))))

(declare-fun lt!67685 () Unit!4042)

(declare-fun lt!67682 () Unit!4042)

(assert (=> d!39669 (= lt!67685 lt!67682)))

(assert (=> d!39669 (= (getValueByKey!170 lt!67684 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39669 (= lt!67682 (lemmaContainsTupThenGetReturnValue!85 lt!67684 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39669 (= lt!67684 (insertStrictlySorted!88 (toList!837 call!14094) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39669 (= (+!166 call!14094 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67683)))

(declare-fun b!130238 () Bool)

(declare-fun res!62787 () Bool)

(assert (=> b!130238 (=> (not res!62787) (not e!84962))))

(assert (=> b!130238 (= res!62787 (= (getValueByKey!170 (toList!837 lt!67683) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130239 () Bool)

(assert (=> b!130239 (= e!84962 (contains!875 (toList!837 lt!67683) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39669 res!62788) b!130238))

(assert (= (and b!130238 res!62787) b!130239))

(declare-fun m!153231 () Bool)

(assert (=> d!39669 m!153231))

(declare-fun m!153233 () Bool)

(assert (=> d!39669 m!153233))

(declare-fun m!153235 () Bool)

(assert (=> d!39669 m!153235))

(declare-fun m!153237 () Bool)

(assert (=> d!39669 m!153237))

(declare-fun m!153239 () Bool)

(assert (=> b!130238 m!153239))

(declare-fun m!153241 () Bool)

(assert (=> b!130239 m!153241))

(assert (=> b!129793 d!39669))

(declare-fun d!39671 () Bool)

(assert (=> d!39671 (not (contains!873 (+!166 lt!67348 (tuple2!2545 lt!67349 lt!67350)) lt!67353))))

(declare-fun lt!67688 () Unit!4042)

(declare-fun choose!803 (ListLongMap!1643 (_ BitVec 64) V!3457 (_ BitVec 64)) Unit!4042)

(assert (=> d!39671 (= lt!67688 (choose!803 lt!67348 lt!67349 lt!67350 lt!67353))))

(declare-fun e!84965 () Bool)

(assert (=> d!39671 e!84965))

(declare-fun res!62791 () Bool)

(assert (=> d!39671 (=> (not res!62791) (not e!84965))))

(assert (=> d!39671 (= res!62791 (not (contains!873 lt!67348 lt!67353)))))

(assert (=> d!39671 (= (addStillNotContains!60 lt!67348 lt!67349 lt!67350 lt!67353) lt!67688)))

(declare-fun b!130243 () Bool)

(assert (=> b!130243 (= e!84965 (not (= lt!67349 lt!67353)))))

(assert (= (and d!39671 res!62791) b!130243))

(assert (=> d!39671 m!152507))

(assert (=> d!39671 m!152507))

(assert (=> d!39671 m!152509))

(declare-fun m!153243 () Bool)

(assert (=> d!39671 m!153243))

(declare-fun m!153245 () Bool)

(assert (=> d!39671 m!153245))

(assert (=> b!129793 d!39671))

(declare-fun b!130244 () Bool)

(declare-fun e!84972 () Bool)

(declare-fun e!84968 () Bool)

(assert (=> b!130244 (= e!84972 e!84968)))

(declare-fun c!24021 () Bool)

(declare-fun e!84967 () Bool)

(assert (=> b!130244 (= c!24021 e!84967)))

(declare-fun res!62795 () Bool)

(assert (=> b!130244 (=> (not res!62795) (not e!84967))))

(assert (=> b!130244 (= res!62795 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130245 () Bool)

(assert (=> b!130245 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> b!130245 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(declare-fun e!84971 () Bool)

(declare-fun lt!67693 () ListLongMap!1643)

(assert (=> b!130245 (= e!84971 (= (apply!113 lt!67693 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!130246 () Bool)

(declare-fun e!84969 () Bool)

(assert (=> b!130246 (= e!84969 (= lt!67693 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16))))))

(declare-fun b!130247 () Bool)

(declare-fun lt!67692 () Unit!4042)

(declare-fun lt!67695 () Unit!4042)

(assert (=> b!130247 (= lt!67692 lt!67695)))

(declare-fun lt!67694 () (_ BitVec 64))

(declare-fun lt!67690 () (_ BitVec 64))

(declare-fun lt!67689 () ListLongMap!1643)

(declare-fun lt!67691 () V!3457)

(assert (=> b!130247 (not (contains!873 (+!166 lt!67689 (tuple2!2545 lt!67690 lt!67691)) lt!67694))))

(assert (=> b!130247 (= lt!67695 (addStillNotContains!60 lt!67689 lt!67690 lt!67691 lt!67694))))

(assert (=> b!130247 (= lt!67694 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!130247 (= lt!67691 (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!130247 (= lt!67690 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!14161 () ListLongMap!1643)

(assert (=> b!130247 (= lt!67689 call!14161)))

(declare-fun e!84970 () ListLongMap!1643)

(assert (=> b!130247 (= e!84970 (+!166 call!14161 (tuple2!2545 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130248 () Bool)

(assert (=> b!130248 (= e!84969 (isEmpty!408 lt!67693))))

(declare-fun d!39673 () Bool)

(assert (=> d!39673 e!84972))

(declare-fun res!62792 () Bool)

(assert (=> d!39673 (=> (not res!62792) (not e!84972))))

(assert (=> d!39673 (= res!62792 (not (contains!873 lt!67693 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!84966 () ListLongMap!1643)

(assert (=> d!39673 (= lt!67693 e!84966)))

(declare-fun c!24020 () Bool)

(assert (=> d!39673 (= c!24020 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39673 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39673 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67693)))

(declare-fun b!130249 () Bool)

(assert (=> b!130249 (= e!84967 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130249 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!130250 () Bool)

(assert (=> b!130250 (= e!84968 e!84971)))

(assert (=> b!130250 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!62793 () Bool)

(assert (=> b!130250 (= res!62793 (contains!873 lt!67693 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130250 (=> (not res!62793) (not e!84971))))

(declare-fun b!130251 () Bool)

(assert (=> b!130251 (= e!84968 e!84969)))

(declare-fun c!24018 () Bool)

(assert (=> b!130251 (= c!24018 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130252 () Bool)

(assert (=> b!130252 (= e!84966 e!84970)))

(declare-fun c!24019 () Bool)

(assert (=> b!130252 (= c!24019 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130253 () Bool)

(assert (=> b!130253 (= e!84966 (ListLongMap!1644 Nil!1682))))

(declare-fun b!130254 () Bool)

(assert (=> b!130254 (= e!84970 call!14161)))

(declare-fun bm!14158 () Bool)

(assert (=> bm!14158 (= call!14161 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16)))))

(declare-fun b!130255 () Bool)

(declare-fun res!62794 () Bool)

(assert (=> b!130255 (=> (not res!62794) (not e!84972))))

(assert (=> b!130255 (= res!62794 (not (contains!873 lt!67693 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39673 c!24020) b!130253))

(assert (= (and d!39673 (not c!24020)) b!130252))

(assert (= (and b!130252 c!24019) b!130247))

(assert (= (and b!130252 (not c!24019)) b!130254))

(assert (= (or b!130247 b!130254) bm!14158))

(assert (= (and d!39673 res!62792) b!130255))

(assert (= (and b!130255 res!62794) b!130244))

(assert (= (and b!130244 res!62795) b!130249))

(assert (= (and b!130244 c!24021) b!130250))

(assert (= (and b!130244 (not c!24021)) b!130251))

(assert (= (and b!130250 res!62793) b!130245))

(assert (= (and b!130251 c!24018) b!130246))

(assert (= (and b!130251 (not c!24018)) b!130248))

(declare-fun b_lambda!5789 () Bool)

(assert (=> (not b_lambda!5789) (not b!130245)))

(assert (=> b!130245 t!6088))

(declare-fun b_and!8053 () Bool)

(assert (= b_and!8049 (and (=> t!6088 result!3917) b_and!8053)))

(assert (=> b!130245 t!6090))

(declare-fun b_and!8055 () Bool)

(assert (= b_and!8051 (and (=> t!6090 result!3919) b_and!8055)))

(declare-fun b_lambda!5791 () Bool)

(assert (=> (not b_lambda!5791) (not b!130247)))

(assert (=> b!130247 t!6088))

(declare-fun b_and!8057 () Bool)

(assert (= b_and!8053 (and (=> t!6088 result!3917) b_and!8057)))

(assert (=> b!130247 t!6090))

(declare-fun b_and!8059 () Bool)

(assert (= b_and!8055 (and (=> t!6090 result!3919) b_and!8059)))

(declare-fun m!153247 () Bool)

(assert (=> b!130248 m!153247))

(declare-fun m!153249 () Bool)

(assert (=> bm!14158 m!153249))

(assert (=> b!130246 m!153249))

(assert (=> b!130250 m!152369))

(assert (=> b!130250 m!152369))

(declare-fun m!153251 () Bool)

(assert (=> b!130250 m!153251))

(assert (=> b!130245 m!152369))

(declare-fun m!153253 () Bool)

(assert (=> b!130245 m!153253))

(assert (=> b!130245 m!152441))

(assert (=> b!130245 m!152559))

(assert (=> b!130245 m!152441))

(assert (=> b!130245 m!152561))

(assert (=> b!130245 m!152369))

(assert (=> b!130245 m!152559))

(declare-fun m!153255 () Bool)

(assert (=> b!130255 m!153255))

(declare-fun m!153257 () Bool)

(assert (=> b!130247 m!153257))

(declare-fun m!153259 () Bool)

(assert (=> b!130247 m!153259))

(assert (=> b!130247 m!153257))

(declare-fun m!153261 () Bool)

(assert (=> b!130247 m!153261))

(assert (=> b!130247 m!152441))

(assert (=> b!130247 m!152559))

(assert (=> b!130247 m!152441))

(assert (=> b!130247 m!152561))

(assert (=> b!130247 m!152369))

(assert (=> b!130247 m!152559))

(declare-fun m!153263 () Bool)

(assert (=> b!130247 m!153263))

(assert (=> b!130252 m!152369))

(assert (=> b!130252 m!152369))

(assert (=> b!130252 m!152403))

(declare-fun m!153265 () Bool)

(assert (=> d!39673 m!153265))

(assert (=> d!39673 m!152389))

(assert (=> b!130249 m!152369))

(assert (=> b!130249 m!152369))

(assert (=> b!130249 m!152403))

(assert (=> bm!14108 d!39673))

(declare-fun d!39675 () Bool)

(declare-fun res!62796 () Bool)

(declare-fun e!84973 () Bool)

(assert (=> d!39675 (=> res!62796 e!84973)))

(assert (=> d!39675 (= res!62796 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!39675 (= (containsKey!173 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!84973)))

(declare-fun b!130256 () Bool)

(declare-fun e!84974 () Bool)

(assert (=> b!130256 (= e!84973 e!84974)))

(declare-fun res!62797 () Bool)

(assert (=> b!130256 (=> (not res!62797) (not e!84974))))

(assert (=> b!130256 (= res!62797 (and (or (not ((_ is Cons!1681) (toList!837 lt!67261))) (bvsle (_1!1283 (h!2285 (toList!837 lt!67261))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1681) (toList!837 lt!67261)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67261))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!130257 () Bool)

(assert (=> b!130257 (= e!84974 (containsKey!173 (t!6076 (toList!837 lt!67261)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!39675 (not res!62796)) b!130256))

(assert (= (and b!130256 res!62797) b!130257))

(assert (=> b!130257 m!152315))

(declare-fun m!153267 () Bool)

(assert (=> b!130257 m!153267))

(assert (=> d!39447 d!39675))

(declare-fun d!39677 () Bool)

(assert (=> d!39677 (= (get!1473 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!3166 (getValueByKey!170 (toList!837 lt!67261) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!39449 d!39677))

(assert (=> d!39449 d!39611))

(declare-fun d!39679 () Bool)

(assert (=> d!39679 (= (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))) (not (isEmpty!409 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))))

(declare-fun bs!5411 () Bool)

(assert (= bs!5411 d!39679))

(assert (=> bs!5411 m!152761))

(declare-fun m!153269 () Bool)

(assert (=> bs!5411 m!153269))

(assert (=> b!129963 d!39679))

(declare-fun b!130258 () Bool)

(declare-fun e!84975 () Option!176)

(assert (=> b!130258 (= e!84975 (Some!175 (_2!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))))))

(declare-fun b!130261 () Bool)

(declare-fun e!84976 () Option!176)

(assert (=> b!130261 (= e!84976 None!174)))

(declare-fun b!130260 () Bool)

(assert (=> b!130260 (= e!84976 (getValueByKey!170 (t!6076 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(declare-fun b!130259 () Bool)

(assert (=> b!130259 (= e!84975 e!84976)))

(declare-fun c!24023 () Bool)

(assert (=> b!130259 (= c!24023 (and ((_ is Cons!1681) (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (not (= (_1!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))))

(declare-fun c!24022 () Bool)

(declare-fun d!39681 () Bool)

(assert (=> d!39681 (= c!24022 (and ((_ is Cons!1681) (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))) (= (_1!1283 (h!2285 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))))

(assert (=> d!39681 (= (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))) e!84975)))

(assert (= (and d!39681 c!24022) b!130258))

(assert (= (and d!39681 (not c!24022)) b!130259))

(assert (= (and b!130259 c!24023) b!130260))

(assert (= (and b!130259 (not c!24023)) b!130261))

(assert (=> b!130260 m!152281))

(declare-fun m!153271 () Bool)

(assert (=> b!130260 m!153271))

(assert (=> b!129963 d!39681))

(declare-fun d!39683 () Bool)

(assert (=> d!39683 (= (apply!113 lt!67356 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67356) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5412 () Bool)

(assert (= bs!5412 d!39683))

(declare-fun m!153273 () Bool)

(assert (=> bs!5412 m!153273))

(assert (=> bs!5412 m!153273))

(declare-fun m!153275 () Bool)

(assert (=> bs!5412 m!153275))

(assert (=> b!129809 d!39683))

(declare-fun bm!14159 () Bool)

(declare-fun call!14162 () Bool)

(assert (=> bm!14159 (= call!14162 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4564 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!130262 () Bool)

(declare-fun e!84979 () Bool)

(assert (=> b!130262 (= e!84979 call!14162)))

(declare-fun b!130263 () Bool)

(declare-fun e!84977 () Bool)

(assert (=> b!130263 (= e!84977 call!14162)))

(declare-fun d!39685 () Bool)

(declare-fun res!62798 () Bool)

(declare-fun e!84978 () Bool)

(assert (=> d!39685 (=> res!62798 e!84978)))

(assert (=> d!39685 (= res!62798 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39685 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992)))) e!84978)))

(declare-fun b!130264 () Bool)

(assert (=> b!130264 (= e!84978 e!84979)))

(declare-fun c!24024 () Bool)

(assert (=> b!130264 (= c!24024 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!130265 () Bool)

(assert (=> b!130265 (= e!84979 e!84977)))

(declare-fun lt!67698 () (_ BitVec 64))

(assert (=> b!130265 (= lt!67698 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!67696 () Unit!4042)

(assert (=> b!130265 (= lt!67696 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) lt!67698 #b00000000000000000000000000000000))))

(assert (=> b!130265 (arrayContainsKey!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) lt!67698 #b00000000000000000000000000000000)))

(declare-fun lt!67697 () Unit!4042)

(assert (=> b!130265 (= lt!67697 lt!67696)))

(declare-fun res!62799 () Bool)

(assert (=> b!130265 (= res!62799 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000) (_keys!4564 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992)))) (Found!266 #b00000000000000000000000000000000)))))

(assert (=> b!130265 (=> (not res!62799) (not e!84977))))

(assert (= (and d!39685 (not res!62798)) b!130264))

(assert (= (and b!130264 c!24024) b!130265))

(assert (= (and b!130264 (not c!24024)) b!130262))

(assert (= (and b!130265 res!62799) b!130263))

(assert (= (or b!130263 b!130262) bm!14159))

(declare-fun m!153277 () Bool)

(assert (=> bm!14159 m!153277))

(assert (=> b!130264 m!152987))

(assert (=> b!130264 m!152987))

(assert (=> b!130264 m!152991))

(assert (=> b!130265 m!152987))

(declare-fun m!153279 () Bool)

(assert (=> b!130265 m!153279))

(declare-fun m!153281 () Bool)

(assert (=> b!130265 m!153281))

(assert (=> b!130265 m!152987))

(declare-fun m!153283 () Bool)

(assert (=> b!130265 m!153283))

(assert (=> b!130066 d!39685))

(declare-fun bm!14160 () Bool)

(declare-fun call!14163 () Bool)

(assert (=> bm!14160 (= call!14163 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!130266 () Bool)

(declare-fun e!84982 () Bool)

(assert (=> b!130266 (= e!84982 call!14163)))

(declare-fun b!130267 () Bool)

(declare-fun e!84980 () Bool)

(assert (=> b!130267 (= e!84980 call!14163)))

(declare-fun d!39687 () Bool)

(declare-fun res!62800 () Bool)

(declare-fun e!84981 () Bool)

(assert (=> d!39687 (=> res!62800 e!84981)))

(assert (=> d!39687 (= res!62800 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39687 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4564 newMap!16) (mask!7101 newMap!16)) e!84981)))

(declare-fun b!130268 () Bool)

(assert (=> b!130268 (= e!84981 e!84982)))

(declare-fun c!24025 () Bool)

(assert (=> b!130268 (= c!24025 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!130269 () Bool)

(assert (=> b!130269 (= e!84982 e!84980)))

(declare-fun lt!67701 () (_ BitVec 64))

(assert (=> b!130269 (= lt!67701 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!67699 () Unit!4042)

(assert (=> b!130269 (= lt!67699 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4564 newMap!16) lt!67701 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!130269 (arrayContainsKey!0 (_keys!4564 newMap!16) lt!67701 #b00000000000000000000000000000000)))

(declare-fun lt!67700 () Unit!4042)

(assert (=> b!130269 (= lt!67700 lt!67699)))

(declare-fun res!62801 () Bool)

(assert (=> b!130269 (= res!62801 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4564 newMap!16) (mask!7101 newMap!16)) (Found!266 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!130269 (=> (not res!62801) (not e!84980))))

(assert (= (and d!39687 (not res!62800)) b!130268))

(assert (= (and b!130268 c!24025) b!130269))

(assert (= (and b!130268 (not c!24025)) b!130266))

(assert (= (and b!130269 res!62801) b!130267))

(assert (= (or b!130267 b!130266) bm!14160))

(declare-fun m!153285 () Bool)

(assert (=> bm!14160 m!153285))

(declare-fun m!153287 () Bool)

(assert (=> b!130268 m!153287))

(assert (=> b!130268 m!153287))

(declare-fun m!153289 () Bool)

(assert (=> b!130268 m!153289))

(assert (=> b!130269 m!153287))

(declare-fun m!153291 () Bool)

(assert (=> b!130269 m!153291))

(declare-fun m!153293 () Bool)

(assert (=> b!130269 m!153293))

(assert (=> b!130269 m!153287))

(declare-fun m!153295 () Bool)

(assert (=> b!130269 m!153295))

(assert (=> bm!14127 d!39687))

(declare-fun b!130270 () Bool)

(declare-fun e!84983 () Option!176)

(assert (=> b!130270 (= e!84983 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67403)))))))

(declare-fun b!130273 () Bool)

(declare-fun e!84984 () Option!176)

(assert (=> b!130273 (= e!84984 None!174)))

(declare-fun b!130272 () Bool)

(assert (=> b!130272 (= e!84984 (getValueByKey!170 (t!6076 (toList!837 lt!67403)) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130271 () Bool)

(assert (=> b!130271 (= e!84983 e!84984)))

(declare-fun c!24027 () Bool)

(assert (=> b!130271 (= c!24027 (and ((_ is Cons!1681) (toList!837 lt!67403)) (not (= (_1!1283 (h!2285 (toList!837 lt!67403))) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!39689 () Bool)

(declare-fun c!24026 () Bool)

(assert (=> d!39689 (= c!24026 (and ((_ is Cons!1681) (toList!837 lt!67403)) (= (_1!1283 (h!2285 (toList!837 lt!67403))) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39689 (= (getValueByKey!170 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!84983)))

(assert (= (and d!39689 c!24026) b!130270))

(assert (= (and d!39689 (not c!24026)) b!130271))

(assert (= (and b!130271 c!24027) b!130272))

(assert (= (and b!130271 (not c!24027)) b!130273))

(declare-fun m!153297 () Bool)

(assert (=> b!130272 m!153297))

(assert (=> b!129863 d!39689))

(declare-fun b!130286 () Bool)

(declare-fun e!84992 () SeekEntryResult!266)

(assert (=> b!130286 (= e!84992 (Found!266 (index!3223 lt!67383)))))

(declare-fun b!130288 () Bool)

(declare-fun e!84991 () SeekEntryResult!266)

(assert (=> b!130288 (= e!84991 (MissingVacant!266 (index!3223 lt!67383)))))

(declare-fun b!130289 () Bool)

(declare-fun c!24036 () Bool)

(declare-fun lt!67706 () (_ BitVec 64))

(assert (=> b!130289 (= c!24036 (= lt!67706 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130289 (= e!84992 e!84991)))

(declare-fun b!130290 () Bool)

(declare-fun e!84993 () SeekEntryResult!266)

(assert (=> b!130290 (= e!84993 e!84992)))

(declare-fun c!24035 () Bool)

(assert (=> b!130290 (= c!24035 (= lt!67706 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130291 () Bool)

(assert (=> b!130291 (= e!84993 Undefined!266)))

(declare-fun d!39691 () Bool)

(declare-fun lt!67707 () SeekEntryResult!266)

(assert (=> d!39691 (and (or ((_ is Undefined!266) lt!67707) (not ((_ is Found!266) lt!67707)) (and (bvsge (index!3222 lt!67707) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67707) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67707) ((_ is Found!266) lt!67707) (not ((_ is MissingVacant!266) lt!67707)) (not (= (index!3224 lt!67707) (index!3223 lt!67383))) (and (bvsge (index!3224 lt!67707) #b00000000000000000000000000000000) (bvslt (index!3224 lt!67707) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67707) (ite ((_ is Found!266) lt!67707) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67707)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (and ((_ is MissingVacant!266) lt!67707) (= (index!3224 lt!67707) (index!3223 lt!67383)) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67707)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!39691 (= lt!67707 e!84993)))

(declare-fun c!24034 () Bool)

(assert (=> d!39691 (= c!24034 (bvsge (x!15261 lt!67383) #b01111111111111111111111111111110))))

(assert (=> d!39691 (= lt!67706 (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!67383)))))

(assert (=> d!39691 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39691 (= (seekKeyOrZeroReturnVacant!0 (x!15261 lt!67383) (index!3223 lt!67383) (index!3223 lt!67383) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)) lt!67707)))

(declare-fun b!130287 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!130287 (= e!84991 (seekKeyOrZeroReturnVacant!0 (bvadd (x!15261 lt!67383) #b00000000000000000000000000000001) (nextIndex!0 (index!3223 lt!67383) (bvadd (x!15261 lt!67383) #b00000000000000000000000000000001) (mask!7101 newMap!16)) (index!3223 lt!67383) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(assert (= (and d!39691 c!24034) b!130291))

(assert (= (and d!39691 (not c!24034)) b!130290))

(assert (= (and b!130290 c!24035) b!130286))

(assert (= (and b!130290 (not c!24035)) b!130289))

(assert (= (and b!130289 c!24036) b!130288))

(assert (= (and b!130289 (not c!24036)) b!130287))

(declare-fun m!153299 () Bool)

(assert (=> d!39691 m!153299))

(declare-fun m!153301 () Bool)

(assert (=> d!39691 m!153301))

(assert (=> d!39691 m!152579))

(assert (=> d!39691 m!152389))

(declare-fun m!153303 () Bool)

(assert (=> b!130287 m!153303))

(assert (=> b!130287 m!153303))

(assert (=> b!130287 m!152129))

(declare-fun m!153305 () Bool)

(assert (=> b!130287 m!153305))

(assert (=> b!129838 d!39691))

(declare-fun d!39693 () Bool)

(declare-fun e!84994 () Bool)

(assert (=> d!39693 e!84994))

(declare-fun res!62803 () Bool)

(assert (=> d!39693 (=> (not res!62803) (not e!84994))))

(declare-fun lt!67709 () ListLongMap!1643)

(assert (=> d!39693 (= res!62803 (contains!873 lt!67709 (_1!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67710 () List!1685)

(assert (=> d!39693 (= lt!67709 (ListLongMap!1644 lt!67710))))

(declare-fun lt!67711 () Unit!4042)

(declare-fun lt!67708 () Unit!4042)

(assert (=> d!39693 (= lt!67711 lt!67708)))

(assert (=> d!39693 (= (getValueByKey!170 lt!67710 (_1!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39693 (= lt!67708 (lemmaContainsTupThenGetReturnValue!85 lt!67710 (_1!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39693 (= lt!67710 (insertStrictlySorted!88 (toList!837 lt!67430) (_1!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39693 (= (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) lt!67709)))

(declare-fun b!130292 () Bool)

(declare-fun res!62802 () Bool)

(assert (=> b!130292 (=> (not res!62802) (not e!84994))))

(assert (=> b!130292 (= res!62802 (= (getValueByKey!170 (toList!837 lt!67709) (_1!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130293 () Bool)

(assert (=> b!130293 (= e!84994 (contains!875 (toList!837 lt!67709) (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39693 res!62803) b!130292))

(assert (= (and b!130292 res!62802) b!130293))

(declare-fun m!153307 () Bool)

(assert (=> d!39693 m!153307))

(declare-fun m!153309 () Bool)

(assert (=> d!39693 m!153309))

(declare-fun m!153311 () Bool)

(assert (=> d!39693 m!153311))

(declare-fun m!153313 () Bool)

(assert (=> d!39693 m!153313))

(declare-fun m!153315 () Bool)

(assert (=> b!130292 m!153315))

(declare-fun m!153317 () Bool)

(assert (=> b!130293 m!153317))

(assert (=> b!129916 d!39693))

(declare-fun d!39695 () Bool)

(declare-fun e!84995 () Bool)

(assert (=> d!39695 e!84995))

(declare-fun res!62805 () Bool)

(assert (=> d!39695 (=> (not res!62805) (not e!84995))))

(declare-fun lt!67713 () ListLongMap!1643)

(assert (=> d!39695 (= res!62805 (contains!873 lt!67713 (_1!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))))))

(declare-fun lt!67714 () List!1685)

(assert (=> d!39695 (= lt!67713 (ListLongMap!1644 lt!67714))))

(declare-fun lt!67715 () Unit!4042)

(declare-fun lt!67712 () Unit!4042)

(assert (=> d!39695 (= lt!67715 lt!67712)))

(assert (=> d!39695 (= (getValueByKey!170 lt!67714 (_1!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))))))

(assert (=> d!39695 (= lt!67712 (lemmaContainsTupThenGetReturnValue!85 lt!67714 (_1!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))))))

(assert (=> d!39695 (= lt!67714 (insertStrictlySorted!88 (toList!837 lt!67440) (_1!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))))))

(assert (=> d!39695 (= (+!166 lt!67440 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) lt!67713)))

(declare-fun b!130294 () Bool)

(declare-fun res!62804 () Bool)

(assert (=> b!130294 (=> (not res!62804) (not e!84995))))

(assert (=> b!130294 (= res!62804 (= (getValueByKey!170 (toList!837 lt!67713) (_1!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))))))))

(declare-fun b!130295 () Bool)

(assert (=> b!130295 (= e!84995 (contains!875 (toList!837 lt!67713) (tuple2!2545 lt!67428 (minValue!2682 newMap!16))))))

(assert (= (and d!39695 res!62805) b!130294))

(assert (= (and b!130294 res!62804) b!130295))

(declare-fun m!153319 () Bool)

(assert (=> d!39695 m!153319))

(declare-fun m!153321 () Bool)

(assert (=> d!39695 m!153321))

(declare-fun m!153323 () Bool)

(assert (=> d!39695 m!153323))

(declare-fun m!153325 () Bool)

(assert (=> d!39695 m!153325))

(declare-fun m!153327 () Bool)

(assert (=> b!130294 m!153327))

(declare-fun m!153329 () Bool)

(assert (=> b!130295 m!153329))

(assert (=> b!129916 d!39695))

(declare-fun d!39697 () Bool)

(assert (=> d!39697 (= (apply!113 (+!166 lt!67440 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) lt!67435) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67440 (tuple2!2545 lt!67428 (minValue!2682 newMap!16)))) lt!67435)))))

(declare-fun bs!5413 () Bool)

(assert (= bs!5413 d!39697))

(declare-fun m!153331 () Bool)

(assert (=> bs!5413 m!153331))

(assert (=> bs!5413 m!153331))

(declare-fun m!153333 () Bool)

(assert (=> bs!5413 m!153333))

(assert (=> b!129916 d!39697))

(declare-fun d!39699 () Bool)

(assert (=> d!39699 (= (apply!113 (+!166 lt!67432 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) lt!67426) (apply!113 lt!67432 lt!67426))))

(declare-fun lt!67716 () Unit!4042)

(assert (=> d!39699 (= lt!67716 (choose!794 lt!67432 lt!67441 (zeroValue!2682 newMap!16) lt!67426))))

(declare-fun e!84996 () Bool)

(assert (=> d!39699 e!84996))

(declare-fun res!62806 () Bool)

(assert (=> d!39699 (=> (not res!62806) (not e!84996))))

(assert (=> d!39699 (= res!62806 (contains!873 lt!67432 lt!67426))))

(assert (=> d!39699 (= (addApplyDifferent!89 lt!67432 lt!67441 (zeroValue!2682 newMap!16) lt!67426) lt!67716)))

(declare-fun b!130296 () Bool)

(assert (=> b!130296 (= e!84996 (not (= lt!67426 lt!67441)))))

(assert (= (and d!39699 res!62806) b!130296))

(declare-fun m!153335 () Bool)

(assert (=> d!39699 m!153335))

(assert (=> d!39699 m!152713))

(assert (=> d!39699 m!152717))

(assert (=> d!39699 m!152713))

(assert (=> d!39699 m!152725))

(declare-fun m!153337 () Bool)

(assert (=> d!39699 m!153337))

(assert (=> b!129916 d!39699))

(declare-fun d!39701 () Bool)

(declare-fun e!84997 () Bool)

(assert (=> d!39701 e!84997))

(declare-fun res!62807 () Bool)

(assert (=> d!39701 (=> res!62807 e!84997)))

(declare-fun lt!67717 () Bool)

(assert (=> d!39701 (= res!62807 (not lt!67717))))

(declare-fun lt!67719 () Bool)

(assert (=> d!39701 (= lt!67717 lt!67719)))

(declare-fun lt!67718 () Unit!4042)

(declare-fun e!84998 () Unit!4042)

(assert (=> d!39701 (= lt!67718 e!84998)))

(declare-fun c!24037 () Bool)

(assert (=> d!39701 (= c!24037 lt!67719)))

(assert (=> d!39701 (= lt!67719 (containsKey!173 (toList!837 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) lt!67437))))

(assert (=> d!39701 (= (contains!873 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) lt!67437) lt!67717)))

(declare-fun b!130297 () Bool)

(declare-fun lt!67720 () Unit!4042)

(assert (=> b!130297 (= e!84998 lt!67720)))

(assert (=> b!130297 (= lt!67720 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) lt!67437))))

(assert (=> b!130297 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) lt!67437))))

(declare-fun b!130298 () Bool)

(declare-fun Unit!4069 () Unit!4042)

(assert (=> b!130298 (= e!84998 Unit!4069)))

(declare-fun b!130299 () Bool)

(assert (=> b!130299 (= e!84997 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16)))) lt!67437)))))

(assert (= (and d!39701 c!24037) b!130297))

(assert (= (and d!39701 (not c!24037)) b!130298))

(assert (= (and d!39701 (not res!62807)) b!130299))

(declare-fun m!153339 () Bool)

(assert (=> d!39701 m!153339))

(declare-fun m!153341 () Bool)

(assert (=> b!130297 m!153341))

(declare-fun m!153343 () Bool)

(assert (=> b!130297 m!153343))

(assert (=> b!130297 m!153343))

(declare-fun m!153345 () Bool)

(assert (=> b!130297 m!153345))

(assert (=> b!130299 m!153343))

(assert (=> b!130299 m!153343))

(assert (=> b!130299 m!153345))

(assert (=> b!129916 d!39701))

(declare-fun d!39703 () Bool)

(declare-fun e!84999 () Bool)

(assert (=> d!39703 e!84999))

(declare-fun res!62809 () Bool)

(assert (=> d!39703 (=> (not res!62809) (not e!84999))))

(declare-fun lt!67722 () ListLongMap!1643)

(assert (=> d!39703 (= res!62809 (contains!873 lt!67722 (_1!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))))))

(declare-fun lt!67723 () List!1685)

(assert (=> d!39703 (= lt!67722 (ListLongMap!1644 lt!67723))))

(declare-fun lt!67724 () Unit!4042)

(declare-fun lt!67721 () Unit!4042)

(assert (=> d!39703 (= lt!67724 lt!67721)))

(assert (=> d!39703 (= (getValueByKey!170 lt!67723 (_1!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))))))

(assert (=> d!39703 (= lt!67721 (lemmaContainsTupThenGetReturnValue!85 lt!67723 (_1!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))))))

(assert (=> d!39703 (= lt!67723 (insertStrictlySorted!88 (toList!837 lt!67423) (_1!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))))))

(assert (=> d!39703 (= (+!166 lt!67423 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) lt!67722)))

(declare-fun b!130300 () Bool)

(declare-fun res!62808 () Bool)

(assert (=> b!130300 (=> (not res!62808) (not e!84999))))

(assert (=> b!130300 (= res!62808 (= (getValueByKey!170 (toList!837 lt!67722) (_1!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))))))))

(declare-fun b!130301 () Bool)

(assert (=> b!130301 (= e!84999 (contains!875 (toList!837 lt!67722) (tuple2!2545 lt!67431 (minValue!2682 newMap!16))))))

(assert (= (and d!39703 res!62809) b!130300))

(assert (= (and b!130300 res!62808) b!130301))

(declare-fun m!153347 () Bool)

(assert (=> d!39703 m!153347))

(declare-fun m!153349 () Bool)

(assert (=> d!39703 m!153349))

(declare-fun m!153351 () Bool)

(assert (=> d!39703 m!153351))

(declare-fun m!153353 () Bool)

(assert (=> d!39703 m!153353))

(declare-fun m!153355 () Bool)

(assert (=> b!130300 m!153355))

(declare-fun m!153357 () Bool)

(assert (=> b!130301 m!153357))

(assert (=> b!129916 d!39703))

(declare-fun d!39705 () Bool)

(declare-fun e!85000 () Bool)

(assert (=> d!39705 e!85000))

(declare-fun res!62811 () Bool)

(assert (=> d!39705 (=> (not res!62811) (not e!85000))))

(declare-fun lt!67726 () ListLongMap!1643)

(assert (=> d!39705 (= res!62811 (contains!873 lt!67726 (_1!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67727 () List!1685)

(assert (=> d!39705 (= lt!67726 (ListLongMap!1644 lt!67727))))

(declare-fun lt!67728 () Unit!4042)

(declare-fun lt!67725 () Unit!4042)

(assert (=> d!39705 (= lt!67728 lt!67725)))

(assert (=> d!39705 (= (getValueByKey!170 lt!67727 (_1!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39705 (= lt!67725 (lemmaContainsTupThenGetReturnValue!85 lt!67727 (_1!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39705 (= lt!67727 (insertStrictlySorted!88 (toList!837 lt!67432) (_1!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39705 (= (+!166 lt!67432 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) lt!67726)))

(declare-fun b!130302 () Bool)

(declare-fun res!62810 () Bool)

(assert (=> b!130302 (=> (not res!62810) (not e!85000))))

(assert (=> b!130302 (= res!62810 (= (getValueByKey!170 (toList!837 lt!67726) (_1!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130303 () Bool)

(assert (=> b!130303 (= e!85000 (contains!875 (toList!837 lt!67726) (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39705 res!62811) b!130302))

(assert (= (and b!130302 res!62810) b!130303))

(declare-fun m!153359 () Bool)

(assert (=> d!39705 m!153359))

(declare-fun m!153361 () Bool)

(assert (=> d!39705 m!153361))

(declare-fun m!153363 () Bool)

(assert (=> d!39705 m!153363))

(declare-fun m!153365 () Bool)

(assert (=> d!39705 m!153365))

(declare-fun m!153367 () Bool)

(assert (=> b!130302 m!153367))

(declare-fun m!153369 () Bool)

(assert (=> b!130303 m!153369))

(assert (=> b!129916 d!39705))

(declare-fun d!39707 () Bool)

(assert (=> d!39707 (= (apply!113 lt!67440 lt!67435) (get!1473 (getValueByKey!170 (toList!837 lt!67440) lt!67435)))))

(declare-fun bs!5414 () Bool)

(assert (= bs!5414 d!39707))

(declare-fun m!153371 () Bool)

(assert (=> bs!5414 m!153371))

(assert (=> bs!5414 m!153371))

(declare-fun m!153373 () Bool)

(assert (=> bs!5414 m!153373))

(assert (=> b!129916 d!39707))

(declare-fun d!39709 () Bool)

(assert (=> d!39709 (contains!873 (+!166 lt!67430 (tuple2!2545 lt!67425 (zeroValue!2682 newMap!16))) lt!67437)))

(declare-fun lt!67729 () Unit!4042)

(assert (=> d!39709 (= lt!67729 (choose!795 lt!67430 lt!67425 (zeroValue!2682 newMap!16) lt!67437))))

(assert (=> d!39709 (contains!873 lt!67430 lt!67437)))

(assert (=> d!39709 (= (addStillContains!89 lt!67430 lt!67425 (zeroValue!2682 newMap!16) lt!67437) lt!67729)))

(declare-fun bs!5415 () Bool)

(assert (= bs!5415 d!39709))

(assert (=> bs!5415 m!152707))

(assert (=> bs!5415 m!152707))

(assert (=> bs!5415 m!152721))

(declare-fun m!153375 () Bool)

(assert (=> bs!5415 m!153375))

(declare-fun m!153377 () Bool)

(assert (=> bs!5415 m!153377))

(assert (=> b!129916 d!39709))

(declare-fun d!39711 () Bool)

(assert (=> d!39711 (= (apply!113 (+!166 lt!67423 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) lt!67442) (apply!113 lt!67423 lt!67442))))

(declare-fun lt!67730 () Unit!4042)

(assert (=> d!39711 (= lt!67730 (choose!794 lt!67423 lt!67431 (minValue!2682 newMap!16) lt!67442))))

(declare-fun e!85001 () Bool)

(assert (=> d!39711 e!85001))

(declare-fun res!62812 () Bool)

(assert (=> d!39711 (=> (not res!62812) (not e!85001))))

(assert (=> d!39711 (= res!62812 (contains!873 lt!67423 lt!67442))))

(assert (=> d!39711 (= (addApplyDifferent!89 lt!67423 lt!67431 (minValue!2682 newMap!16) lt!67442) lt!67730)))

(declare-fun b!130304 () Bool)

(assert (=> b!130304 (= e!85001 (not (= lt!67442 lt!67431)))))

(assert (= (and d!39711 res!62812) b!130304))

(declare-fun m!153379 () Bool)

(assert (=> d!39711 m!153379))

(assert (=> d!39711 m!152701))

(assert (=> d!39711 m!152703))

(assert (=> d!39711 m!152701))

(assert (=> d!39711 m!152719))

(declare-fun m!153381 () Bool)

(assert (=> d!39711 m!153381))

(assert (=> b!129916 d!39711))

(declare-fun d!39713 () Bool)

(assert (=> d!39713 (= (apply!113 (+!166 lt!67432 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16))) lt!67426) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67432 (tuple2!2545 lt!67441 (zeroValue!2682 newMap!16)))) lt!67426)))))

(declare-fun bs!5416 () Bool)

(assert (= bs!5416 d!39713))

(declare-fun m!153383 () Bool)

(assert (=> bs!5416 m!153383))

(assert (=> bs!5416 m!153383))

(declare-fun m!153385 () Bool)

(assert (=> bs!5416 m!153385))

(assert (=> b!129916 d!39713))

(declare-fun d!39715 () Bool)

(assert (=> d!39715 (= (apply!113 (+!166 lt!67440 (tuple2!2545 lt!67428 (minValue!2682 newMap!16))) lt!67435) (apply!113 lt!67440 lt!67435))))

(declare-fun lt!67731 () Unit!4042)

(assert (=> d!39715 (= lt!67731 (choose!794 lt!67440 lt!67428 (minValue!2682 newMap!16) lt!67435))))

(declare-fun e!85002 () Bool)

(assert (=> d!39715 e!85002))

(declare-fun res!62813 () Bool)

(assert (=> d!39715 (=> (not res!62813) (not e!85002))))

(assert (=> d!39715 (= res!62813 (contains!873 lt!67440 lt!67435))))

(assert (=> d!39715 (= (addApplyDifferent!89 lt!67440 lt!67428 (minValue!2682 newMap!16) lt!67435) lt!67731)))

(declare-fun b!130305 () Bool)

(assert (=> b!130305 (= e!85002 (not (= lt!67435 lt!67428)))))

(assert (= (and d!39715 res!62813) b!130305))

(declare-fun m!153387 () Bool)

(assert (=> d!39715 m!153387))

(assert (=> d!39715 m!152709))

(assert (=> d!39715 m!152711))

(assert (=> d!39715 m!152709))

(assert (=> d!39715 m!152699))

(declare-fun m!153389 () Bool)

(assert (=> d!39715 m!153389))

(assert (=> b!129916 d!39715))

(declare-fun d!39717 () Bool)

(assert (=> d!39717 (= (apply!113 (+!166 lt!67423 (tuple2!2545 lt!67431 (minValue!2682 newMap!16))) lt!67442) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67423 (tuple2!2545 lt!67431 (minValue!2682 newMap!16)))) lt!67442)))))

(declare-fun bs!5417 () Bool)

(assert (= bs!5417 d!39717))

(declare-fun m!153391 () Bool)

(assert (=> bs!5417 m!153391))

(assert (=> bs!5417 m!153391))

(declare-fun m!153393 () Bool)

(assert (=> bs!5417 m!153393))

(assert (=> b!129916 d!39717))

(declare-fun d!39719 () Bool)

(assert (=> d!39719 (= (apply!113 lt!67432 lt!67426) (get!1473 (getValueByKey!170 (toList!837 lt!67432) lt!67426)))))

(declare-fun bs!5418 () Bool)

(assert (= bs!5418 d!39719))

(declare-fun m!153395 () Bool)

(assert (=> bs!5418 m!153395))

(assert (=> bs!5418 m!153395))

(declare-fun m!153397 () Bool)

(assert (=> bs!5418 m!153397))

(assert (=> b!129916 d!39719))

(declare-fun d!39721 () Bool)

(assert (=> d!39721 (= (apply!113 lt!67423 lt!67442) (get!1473 (getValueByKey!170 (toList!837 lt!67423) lt!67442)))))

(declare-fun bs!5419 () Bool)

(assert (= bs!5419 d!39721))

(declare-fun m!153399 () Bool)

(assert (=> bs!5419 m!153399))

(assert (=> bs!5419 m!153399))

(declare-fun m!153401 () Bool)

(assert (=> bs!5419 m!153401))

(assert (=> b!129916 d!39721))

(assert (=> b!129916 d!39673))

(declare-fun b!130306 () Bool)

(declare-fun e!85003 () Option!176)

(assert (=> b!130306 (= e!85003 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67414)))))))

(declare-fun b!130309 () Bool)

(declare-fun e!85004 () Option!176)

(assert (=> b!130309 (= e!85004 None!174)))

(declare-fun b!130308 () Bool)

(assert (=> b!130308 (= e!85004 (getValueByKey!170 (t!6076 (toList!837 lt!67414)) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130307 () Bool)

(assert (=> b!130307 (= e!85003 e!85004)))

(declare-fun c!24039 () Bool)

(assert (=> b!130307 (= c!24039 (and ((_ is Cons!1681) (toList!837 lt!67414)) (not (= (_1!1283 (h!2285 (toList!837 lt!67414))) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24038 () Bool)

(declare-fun d!39723 () Bool)

(assert (=> d!39723 (= c!24038 (and ((_ is Cons!1681) (toList!837 lt!67414)) (= (_1!1283 (h!2285 (toList!837 lt!67414))) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39723 (= (getValueByKey!170 (toList!837 lt!67414) (_1!1283 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85003)))

(assert (= (and d!39723 c!24038) b!130306))

(assert (= (and d!39723 (not c!24038)) b!130307))

(assert (= (and b!130307 c!24039) b!130308))

(assert (= (and b!130307 (not c!24039)) b!130309))

(declare-fun m!153403 () Bool)

(assert (=> b!130308 m!153403))

(assert (=> b!129869 d!39723))

(declare-fun b!130310 () Bool)

(declare-fun e!85011 () Bool)

(declare-fun e!85007 () Bool)

(assert (=> b!130310 (= e!85011 e!85007)))

(declare-fun c!24043 () Bool)

(declare-fun e!85006 () Bool)

(assert (=> b!130310 (= c!24043 e!85006)))

(declare-fun res!62817 () Bool)

(assert (=> b!130310 (=> (not res!62817) (not e!85006))))

(assert (=> b!130310 (= res!62817 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130311 () Bool)

(assert (=> b!130311 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> b!130311 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun lt!67736 () ListLongMap!1643)

(declare-fun e!85010 () Bool)

(assert (=> b!130311 (= e!85010 (= (apply!113 lt!67736 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!85008 () Bool)

(declare-fun b!130312 () Bool)

(assert (=> b!130312 (= e!85008 (= lt!67736 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130313 () Bool)

(declare-fun lt!67735 () Unit!4042)

(declare-fun lt!67738 () Unit!4042)

(assert (=> b!130313 (= lt!67735 lt!67738)))

(declare-fun lt!67734 () V!3457)

(declare-fun lt!67737 () (_ BitVec 64))

(declare-fun lt!67732 () ListLongMap!1643)

(declare-fun lt!67733 () (_ BitVec 64))

(assert (=> b!130313 (not (contains!873 (+!166 lt!67732 (tuple2!2545 lt!67733 lt!67734)) lt!67737))))

(assert (=> b!130313 (= lt!67738 (addStillNotContains!60 lt!67732 lt!67733 lt!67734 lt!67737))))

(assert (=> b!130313 (= lt!67737 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!130313 (= lt!67734 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!130313 (= lt!67733 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!14164 () ListLongMap!1643)

(assert (=> b!130313 (= lt!67732 call!14164)))

(declare-fun e!85009 () ListLongMap!1643)

(assert (=> b!130313 (= e!85009 (+!166 call!14164 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130314 () Bool)

(assert (=> b!130314 (= e!85008 (isEmpty!408 lt!67736))))

(declare-fun d!39725 () Bool)

(assert (=> d!39725 e!85011))

(declare-fun res!62814 () Bool)

(assert (=> d!39725 (=> (not res!62814) (not e!85011))))

(assert (=> d!39725 (= res!62814 (not (contains!873 lt!67736 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!85005 () ListLongMap!1643)

(assert (=> d!39725 (= lt!67736 e!85005)))

(declare-fun c!24042 () Bool)

(assert (=> d!39725 (= c!24042 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39725 (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992))))))

(assert (=> d!39725 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))) lt!67736)))

(declare-fun b!130315 () Bool)

(assert (=> b!130315 (= e!85006 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!130315 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!130316 () Bool)

(assert (=> b!130316 (= e!85007 e!85010)))

(assert (=> b!130316 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun res!62815 () Bool)

(assert (=> b!130316 (= res!62815 (contains!873 lt!67736 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!130316 (=> (not res!62815) (not e!85010))))

(declare-fun b!130317 () Bool)

(assert (=> b!130317 (= e!85007 e!85008)))

(declare-fun c!24040 () Bool)

(assert (=> b!130317 (= c!24040 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130318 () Bool)

(assert (=> b!130318 (= e!85005 e!85009)))

(declare-fun c!24041 () Bool)

(assert (=> b!130318 (= c!24041 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!130319 () Bool)

(assert (=> b!130319 (= e!85005 (ListLongMap!1644 Nil!1682))))

(declare-fun b!130320 () Bool)

(assert (=> b!130320 (= e!85009 call!14164)))

(declare-fun bm!14161 () Bool)

(assert (=> bm!14161 (= call!14164 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (_values!2806 (v!3160 (underlying!446 thiss!992))) (mask!7101 (v!3160 (underlying!446 thiss!992))) (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) (minValue!2682 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!130321 () Bool)

(declare-fun res!62816 () Bool)

(assert (=> b!130321 (=> (not res!62816) (not e!85011))))

(assert (=> b!130321 (= res!62816 (not (contains!873 lt!67736 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39725 c!24042) b!130319))

(assert (= (and d!39725 (not c!24042)) b!130318))

(assert (= (and b!130318 c!24041) b!130313))

(assert (= (and b!130318 (not c!24041)) b!130320))

(assert (= (or b!130313 b!130320) bm!14161))

(assert (= (and d!39725 res!62814) b!130321))

(assert (= (and b!130321 res!62816) b!130310))

(assert (= (and b!130310 res!62817) b!130315))

(assert (= (and b!130310 c!24043) b!130316))

(assert (= (and b!130310 (not c!24043)) b!130317))

(assert (= (and b!130316 res!62815) b!130311))

(assert (= (and b!130317 c!24040) b!130312))

(assert (= (and b!130317 (not c!24040)) b!130314))

(declare-fun b_lambda!5793 () Bool)

(assert (=> (not b_lambda!5793) (not b!130311)))

(assert (=> b!130311 t!6073))

(declare-fun b_and!8061 () Bool)

(assert (= b_and!8057 (and (=> t!6073 result!3897) b_and!8061)))

(assert (=> b!130311 t!6075))

(declare-fun b_and!8063 () Bool)

(assert (= b_and!8059 (and (=> t!6075 result!3901) b_and!8063)))

(declare-fun b_lambda!5795 () Bool)

(assert (=> (not b_lambda!5795) (not b!130313)))

(assert (=> b!130313 t!6073))

(declare-fun b_and!8065 () Bool)

(assert (= b_and!8061 (and (=> t!6073 result!3897) b_and!8065)))

(assert (=> b!130313 t!6075))

(declare-fun b_and!8067 () Bool)

(assert (= b_and!8063 (and (=> t!6075 result!3901) b_and!8067)))

(declare-fun m!153405 () Bool)

(assert (=> b!130314 m!153405))

(declare-fun m!153407 () Bool)

(assert (=> bm!14161 m!153407))

(assert (=> b!130312 m!153407))

(declare-fun m!153409 () Bool)

(assert (=> b!130316 m!153409))

(assert (=> b!130316 m!153409))

(declare-fun m!153411 () Bool)

(assert (=> b!130316 m!153411))

(assert (=> b!130311 m!153409))

(declare-fun m!153413 () Bool)

(assert (=> b!130311 m!153413))

(assert (=> b!130311 m!152149))

(declare-fun m!153415 () Bool)

(assert (=> b!130311 m!153415))

(assert (=> b!130311 m!152149))

(declare-fun m!153417 () Bool)

(assert (=> b!130311 m!153417))

(assert (=> b!130311 m!153409))

(assert (=> b!130311 m!153415))

(declare-fun m!153419 () Bool)

(assert (=> b!130321 m!153419))

(declare-fun m!153421 () Bool)

(assert (=> b!130313 m!153421))

(declare-fun m!153423 () Bool)

(assert (=> b!130313 m!153423))

(assert (=> b!130313 m!153421))

(declare-fun m!153425 () Bool)

(assert (=> b!130313 m!153425))

(assert (=> b!130313 m!152149))

(assert (=> b!130313 m!153415))

(assert (=> b!130313 m!152149))

(assert (=> b!130313 m!153417))

(assert (=> b!130313 m!153409))

(assert (=> b!130313 m!153415))

(declare-fun m!153427 () Bool)

(assert (=> b!130313 m!153427))

(assert (=> b!130318 m!153409))

(assert (=> b!130318 m!153409))

(declare-fun m!153429 () Bool)

(assert (=> b!130318 m!153429))

(declare-fun m!153431 () Bool)

(assert (=> d!39725 m!153431))

(assert (=> d!39725 m!152157))

(assert (=> b!130315 m!153409))

(assert (=> b!130315 m!153409))

(assert (=> b!130315 m!153429))

(assert (=> bm!14091 d!39725))

(declare-fun d!39727 () Bool)

(declare-fun e!85012 () Bool)

(assert (=> d!39727 e!85012))

(declare-fun res!62819 () Bool)

(assert (=> d!39727 (=> (not res!62819) (not e!85012))))

(declare-fun lt!67740 () ListLongMap!1643)

(assert (=> d!39727 (= res!62819 (contains!873 lt!67740 (_1!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun lt!67741 () List!1685)

(assert (=> d!39727 (= lt!67740 (ListLongMap!1644 lt!67741))))

(declare-fun lt!67742 () Unit!4042)

(declare-fun lt!67739 () Unit!4042)

(assert (=> d!39727 (= lt!67742 lt!67739)))

(assert (=> d!39727 (= (getValueByKey!170 lt!67741 (_1!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39727 (= lt!67739 (lemmaContainsTupThenGetReturnValue!85 lt!67741 (_1!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39727 (= lt!67741 (insertStrictlySorted!88 (toList!837 (ite c!23930 call!14116 (ite c!23929 call!14114 call!14117))) (_1!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39727 (= (+!166 (ite c!23930 call!14116 (ite c!23929 call!14114 call!14117)) (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) lt!67740)))

(declare-fun b!130322 () Bool)

(declare-fun res!62818 () Bool)

(assert (=> b!130322 (=> (not res!62818) (not e!85012))))

(assert (=> b!130322 (= res!62818 (= (getValueByKey!170 (toList!837 lt!67740) (_1!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))))

(declare-fun b!130323 () Bool)

(assert (=> b!130323 (= e!85012 (contains!875 (toList!837 lt!67740) (ite (or c!23930 c!23929) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (= (and d!39727 res!62819) b!130322))

(assert (= (and b!130322 res!62818) b!130323))

(declare-fun m!153433 () Bool)

(assert (=> d!39727 m!153433))

(declare-fun m!153435 () Bool)

(assert (=> d!39727 m!153435))

(declare-fun m!153437 () Bool)

(assert (=> d!39727 m!153437))

(declare-fun m!153439 () Bool)

(assert (=> d!39727 m!153439))

(declare-fun m!153441 () Bool)

(assert (=> b!130322 m!153441))

(declare-fun m!153443 () Bool)

(assert (=> b!130323 m!153443))

(assert (=> bm!14111 d!39727))

(declare-fun d!39729 () Bool)

(assert (=> d!39729 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192)))))

(assert (=> d!39729 true))

(declare-fun _$16!148 () Unit!4042)

(assert (=> d!39729 (= (choose!798 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (defaultEntry!2823 newMap!16)) _$16!148)))

(declare-fun bs!5420 () Bool)

(assert (= bs!5420 d!39729))

(assert (=> bs!5420 m!152279))

(assert (=> bs!5420 m!152281))

(assert (=> bs!5420 m!152279))

(assert (=> bs!5420 m!152281))

(assert (=> bs!5420 m!152283))

(assert (=> d!39531 d!39729))

(assert (=> d!39531 d!39565))

(assert (=> b!129944 d!39587))

(declare-fun d!39731 () Bool)

(declare-fun e!85013 () Bool)

(assert (=> d!39731 e!85013))

(declare-fun res!62820 () Bool)

(assert (=> d!39731 (=> res!62820 e!85013)))

(declare-fun lt!67743 () Bool)

(assert (=> d!39731 (= res!62820 (not lt!67743))))

(declare-fun lt!67745 () Bool)

(assert (=> d!39731 (= lt!67743 lt!67745)))

(declare-fun lt!67744 () Unit!4042)

(declare-fun e!85014 () Unit!4042)

(assert (=> d!39731 (= lt!67744 e!85014)))

(declare-fun c!24044 () Bool)

(assert (=> d!39731 (= c!24044 lt!67745)))

(assert (=> d!39731 (= lt!67745 (containsKey!173 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39731 (= (contains!873 lt!67327 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!67743)))

(declare-fun b!130324 () Bool)

(declare-fun lt!67746 () Unit!4042)

(assert (=> b!130324 (= e!85014 lt!67746)))

(assert (=> b!130324 (= lt!67746 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!130324 (isDefined!122 (getValueByKey!170 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130325 () Bool)

(declare-fun Unit!4070 () Unit!4042)

(assert (=> b!130325 (= e!85014 Unit!4070)))

(declare-fun b!130326 () Bool)

(assert (=> b!130326 (= e!85013 (isDefined!122 (getValueByKey!170 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!39731 c!24044) b!130324))

(assert (= (and d!39731 (not c!24044)) b!130325))

(assert (= (and d!39731 (not res!62820)) b!130326))

(declare-fun m!153445 () Bool)

(assert (=> d!39731 m!153445))

(declare-fun m!153447 () Bool)

(assert (=> b!130324 m!153447))

(assert (=> b!130324 m!152477))

(assert (=> b!130324 m!152477))

(declare-fun m!153449 () Bool)

(assert (=> b!130324 m!153449))

(assert (=> b!130326 m!152477))

(assert (=> b!130326 m!152477))

(assert (=> b!130326 m!153449))

(assert (=> d!39463 d!39731))

(declare-fun b!130327 () Bool)

(declare-fun e!85015 () Option!176)

(assert (=> b!130327 (= e!85015 (Some!175 (_2!1283 (h!2285 lt!67328))))))

(declare-fun b!130330 () Bool)

(declare-fun e!85016 () Option!176)

(assert (=> b!130330 (= e!85016 None!174)))

(declare-fun b!130329 () Bool)

(assert (=> b!130329 (= e!85016 (getValueByKey!170 (t!6076 lt!67328) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130328 () Bool)

(assert (=> b!130328 (= e!85015 e!85016)))

(declare-fun c!24046 () Bool)

(assert (=> b!130328 (= c!24046 (and ((_ is Cons!1681) lt!67328) (not (= (_1!1283 (h!2285 lt!67328)) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!39733 () Bool)

(declare-fun c!24045 () Bool)

(assert (=> d!39733 (= c!24045 (and ((_ is Cons!1681) lt!67328) (= (_1!1283 (h!2285 lt!67328)) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39733 (= (getValueByKey!170 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!85015)))

(assert (= (and d!39733 c!24045) b!130327))

(assert (= (and d!39733 (not c!24045)) b!130328))

(assert (= (and b!130328 c!24046) b!130329))

(assert (= (and b!130328 (not c!24046)) b!130330))

(declare-fun m!153451 () Bool)

(assert (=> b!130329 m!153451))

(assert (=> d!39463 d!39733))

(declare-fun d!39735 () Bool)

(assert (=> d!39735 (= (getValueByKey!170 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67747 () Unit!4042)

(assert (=> d!39735 (= lt!67747 (choose!802 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!85017 () Bool)

(assert (=> d!39735 e!85017))

(declare-fun res!62821 () Bool)

(assert (=> d!39735 (=> (not res!62821) (not e!85017))))

(assert (=> d!39735 (= res!62821 (isStrictlySorted!306 lt!67328))))

(assert (=> d!39735 (= (lemmaContainsTupThenGetReturnValue!85 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!67747)))

(declare-fun b!130331 () Bool)

(declare-fun res!62822 () Bool)

(assert (=> b!130331 (=> (not res!62822) (not e!85017))))

(assert (=> b!130331 (= res!62822 (containsKey!173 lt!67328 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130332 () Bool)

(assert (=> b!130332 (= e!85017 (contains!875 lt!67328 (tuple2!2545 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!39735 res!62821) b!130331))

(assert (= (and b!130331 res!62822) b!130332))

(assert (=> d!39735 m!152471))

(declare-fun m!153453 () Bool)

(assert (=> d!39735 m!153453))

(declare-fun m!153455 () Bool)

(assert (=> d!39735 m!153455))

(declare-fun m!153457 () Bool)

(assert (=> b!130331 m!153457))

(declare-fun m!153459 () Bool)

(assert (=> b!130332 m!153459))

(assert (=> d!39463 d!39735))

(declare-fun call!14165 () List!1685)

(declare-fun e!85018 () List!1685)

(declare-fun c!24048 () Bool)

(declare-fun bm!14162 () Bool)

(assert (=> bm!14162 (= call!14165 ($colon$colon!90 e!85018 (ite c!24048 (h!2285 (toList!837 call!14058)) (tuple2!2545 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!24050 () Bool)

(assert (=> bm!14162 (= c!24050 c!24048)))

(declare-fun b!130334 () Bool)

(assert (=> b!130334 (= e!85018 (insertStrictlySorted!88 (t!6076 (toList!837 call!14058)) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130335 () Bool)

(declare-fun res!62824 () Bool)

(declare-fun e!85022 () Bool)

(assert (=> b!130335 (=> (not res!62824) (not e!85022))))

(declare-fun lt!67748 () List!1685)

(assert (=> b!130335 (= res!62824 (containsKey!173 lt!67748 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!24049 () Bool)

(declare-fun b!130336 () Bool)

(assert (=> b!130336 (= c!24049 (and ((_ is Cons!1681) (toList!837 call!14058)) (bvsgt (_1!1283 (h!2285 (toList!837 call!14058))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!85020 () List!1685)

(declare-fun e!85019 () List!1685)

(assert (=> b!130336 (= e!85020 e!85019)))

(declare-fun c!24047 () Bool)

(declare-fun b!130333 () Bool)

(assert (=> b!130333 (= e!85018 (ite c!24047 (t!6076 (toList!837 call!14058)) (ite c!24049 (Cons!1681 (h!2285 (toList!837 call!14058)) (t!6076 (toList!837 call!14058))) Nil!1682)))))

(declare-fun d!39737 () Bool)

(assert (=> d!39737 e!85022))

(declare-fun res!62823 () Bool)

(assert (=> d!39737 (=> (not res!62823) (not e!85022))))

(assert (=> d!39737 (= res!62823 (isStrictlySorted!306 lt!67748))))

(declare-fun e!85021 () List!1685)

(assert (=> d!39737 (= lt!67748 e!85021)))

(assert (=> d!39737 (= c!24048 (and ((_ is Cons!1681) (toList!837 call!14058)) (bvslt (_1!1283 (h!2285 (toList!837 call!14058))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39737 (isStrictlySorted!306 (toList!837 call!14058))))

(assert (=> d!39737 (= (insertStrictlySorted!88 (toList!837 call!14058) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!67748)))

(declare-fun bm!14163 () Bool)

(declare-fun call!14166 () List!1685)

(declare-fun call!14167 () List!1685)

(assert (=> bm!14163 (= call!14166 call!14167)))

(declare-fun bm!14164 () Bool)

(assert (=> bm!14164 (= call!14167 call!14165)))

(declare-fun b!130337 () Bool)

(assert (=> b!130337 (= e!85021 e!85020)))

(assert (=> b!130337 (= c!24047 (and ((_ is Cons!1681) (toList!837 call!14058)) (= (_1!1283 (h!2285 (toList!837 call!14058))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130338 () Bool)

(assert (=> b!130338 (= e!85022 (contains!875 lt!67748 (tuple2!2545 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130339 () Bool)

(assert (=> b!130339 (= e!85020 call!14167)))

(declare-fun b!130340 () Bool)

(assert (=> b!130340 (= e!85019 call!14166)))

(declare-fun b!130341 () Bool)

(assert (=> b!130341 (= e!85021 call!14165)))

(declare-fun b!130342 () Bool)

(assert (=> b!130342 (= e!85019 call!14166)))

(assert (= (and d!39737 c!24048) b!130341))

(assert (= (and d!39737 (not c!24048)) b!130337))

(assert (= (and b!130337 c!24047) b!130339))

(assert (= (and b!130337 (not c!24047)) b!130336))

(assert (= (and b!130336 c!24049) b!130342))

(assert (= (and b!130336 (not c!24049)) b!130340))

(assert (= (or b!130342 b!130340) bm!14163))

(assert (= (or b!130339 bm!14163) bm!14164))

(assert (= (or b!130341 bm!14164) bm!14162))

(assert (= (and bm!14162 c!24050) b!130334))

(assert (= (and bm!14162 (not c!24050)) b!130333))

(assert (= (and d!39737 res!62823) b!130335))

(assert (= (and b!130335 res!62824) b!130338))

(declare-fun m!153461 () Bool)

(assert (=> bm!14162 m!153461))

(declare-fun m!153463 () Bool)

(assert (=> b!130334 m!153463))

(declare-fun m!153465 () Bool)

(assert (=> b!130335 m!153465))

(declare-fun m!153467 () Bool)

(assert (=> b!130338 m!153467))

(declare-fun m!153469 () Bool)

(assert (=> d!39737 m!153469))

(declare-fun m!153471 () Bool)

(assert (=> d!39737 m!153471))

(assert (=> d!39463 d!39737))

(assert (=> d!39479 d!39497))

(declare-fun d!39739 () Bool)

(declare-fun e!85023 () Bool)

(assert (=> d!39739 e!85023))

(declare-fun res!62825 () Bool)

(assert (=> d!39739 (=> res!62825 e!85023)))

(declare-fun lt!67749 () Bool)

(assert (=> d!39739 (= res!62825 (not lt!67749))))

(declare-fun lt!67751 () Bool)

(assert (=> d!39739 (= lt!67749 lt!67751)))

(declare-fun lt!67750 () Unit!4042)

(declare-fun e!85024 () Unit!4042)

(assert (=> d!39739 (= lt!67750 e!85024)))

(declare-fun c!24051 () Bool)

(assert (=> d!39739 (= c!24051 lt!67751)))

(assert (=> d!39739 (= lt!67751 (containsKey!173 (toList!837 lt!67269) lt!67263))))

(assert (=> d!39739 (= (contains!873 lt!67269 lt!67263) lt!67749)))

(declare-fun b!130343 () Bool)

(declare-fun lt!67752 () Unit!4042)

(assert (=> b!130343 (= e!85024 lt!67752)))

(assert (=> b!130343 (= lt!67752 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67269) lt!67263))))

(assert (=> b!130343 (isDefined!122 (getValueByKey!170 (toList!837 lt!67269) lt!67263))))

(declare-fun b!130344 () Bool)

(declare-fun Unit!4071 () Unit!4042)

(assert (=> b!130344 (= e!85024 Unit!4071)))

(declare-fun b!130345 () Bool)

(assert (=> b!130345 (= e!85023 (isDefined!122 (getValueByKey!170 (toList!837 lt!67269) lt!67263)))))

(assert (= (and d!39739 c!24051) b!130343))

(assert (= (and d!39739 (not c!24051)) b!130344))

(assert (= (and d!39739 (not res!62825)) b!130345))

(declare-fun m!153473 () Bool)

(assert (=> d!39739 m!153473))

(declare-fun m!153475 () Bool)

(assert (=> b!130343 m!153475))

(assert (=> b!130343 m!152637))

(assert (=> b!130343 m!152637))

(declare-fun m!153477 () Bool)

(assert (=> b!130343 m!153477))

(assert (=> b!130345 m!152637))

(assert (=> b!130345 m!152637))

(assert (=> b!130345 m!153477))

(assert (=> d!39479 d!39739))

(assert (=> d!39479 d!39485))

(declare-fun d!39741 () Bool)

(assert (=> d!39741 (= (apply!113 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67263) (apply!113 lt!67269 lt!67263))))

(assert (=> d!39741 true))

(declare-fun _$34!966 () Unit!4042)

(assert (=> d!39741 (= (choose!794 lt!67269 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67263) _$34!966)))

(declare-fun bs!5421 () Bool)

(assert (= bs!5421 d!39741))

(assert (=> bs!5421 m!152335))

(assert (=> bs!5421 m!152335))

(assert (=> bs!5421 m!152339))

(assert (=> bs!5421 m!152347))

(assert (=> d!39479 d!39741))

(assert (=> d!39479 d!39495))

(declare-fun d!39743 () Bool)

(declare-fun e!85025 () Bool)

(assert (=> d!39743 e!85025))

(declare-fun res!62826 () Bool)

(assert (=> d!39743 (=> res!62826 e!85025)))

(declare-fun lt!67753 () Bool)

(assert (=> d!39743 (= res!62826 (not lt!67753))))

(declare-fun lt!67755 () Bool)

(assert (=> d!39743 (= lt!67753 lt!67755)))

(declare-fun lt!67754 () Unit!4042)

(declare-fun e!85026 () Unit!4042)

(assert (=> d!39743 (= lt!67754 e!85026)))

(declare-fun c!24052 () Bool)

(assert (=> d!39743 (= c!24052 lt!67755)))

(assert (=> d!39743 (= lt!67755 (containsKey!173 (toList!837 lt!67277) lt!67272))))

(assert (=> d!39743 (= (contains!873 lt!67277 lt!67272) lt!67753)))

(declare-fun b!130347 () Bool)

(declare-fun lt!67756 () Unit!4042)

(assert (=> b!130347 (= e!85026 lt!67756)))

(assert (=> b!130347 (= lt!67756 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67277) lt!67272))))

(assert (=> b!130347 (isDefined!122 (getValueByKey!170 (toList!837 lt!67277) lt!67272))))

(declare-fun b!130348 () Bool)

(declare-fun Unit!4072 () Unit!4042)

(assert (=> b!130348 (= e!85026 Unit!4072)))

(declare-fun b!130349 () Bool)

(assert (=> b!130349 (= e!85025 (isDefined!122 (getValueByKey!170 (toList!837 lt!67277) lt!67272)))))

(assert (= (and d!39743 c!24052) b!130347))

(assert (= (and d!39743 (not c!24052)) b!130348))

(assert (= (and d!39743 (not res!62826)) b!130349))

(declare-fun m!153479 () Bool)

(assert (=> d!39743 m!153479))

(declare-fun m!153481 () Bool)

(assert (=> b!130347 m!153481))

(assert (=> b!130347 m!152661))

(assert (=> b!130347 m!152661))

(declare-fun m!153483 () Bool)

(assert (=> b!130347 m!153483))

(assert (=> b!130349 m!152661))

(assert (=> b!130349 m!152661))

(assert (=> b!130349 m!153483))

(assert (=> d!39483 d!39743))

(assert (=> d!39483 d!39501))

(assert (=> d!39483 d!39481))

(declare-fun d!39745 () Bool)

(assert (=> d!39745 (= (apply!113 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67272) (apply!113 lt!67277 lt!67272))))

(assert (=> d!39745 true))

(declare-fun _$34!967 () Unit!4042)

(assert (=> d!39745 (= (choose!794 lt!67277 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67272) _$34!967)))

(declare-fun bs!5422 () Bool)

(assert (= bs!5422 d!39745))

(assert (=> bs!5422 m!152331))

(assert (=> bs!5422 m!152331))

(assert (=> bs!5422 m!152333))

(assert (=> bs!5422 m!152321))

(assert (=> d!39483 d!39745))

(assert (=> d!39483 d!39489))

(declare-fun d!39747 () Bool)

(assert (=> d!39747 (= (get!1473 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3166 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39467 d!39747))

(assert (=> d!39467 d!39635))

(declare-fun d!39749 () Bool)

(assert (=> d!39749 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(assert (=> d!39749 true))

(declare-fun _$5!131 () Unit!4042)

(assert (=> d!39749 (= (choose!799 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (index!3222 lt!67192) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)) _$5!131)))

(declare-fun bs!5423 () Bool)

(assert (= bs!5423 d!39749))

(assert (=> bs!5423 m!152307))

(assert (=> bs!5423 m!152307))

(assert (=> bs!5423 m!152821))

(assert (=> bs!5423 m!152257))

(assert (=> bs!5423 m!152823))

(assert (=> d!39533 d!39749))

(assert (=> d!39533 d!39565))

(declare-fun lt!67757 () Bool)

(declare-fun d!39751 () Bool)

(assert (=> d!39751 (= lt!67757 (select (content!131 (toList!837 lt!67414)) (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!85028 () Bool)

(assert (=> d!39751 (= lt!67757 e!85028)))

(declare-fun res!62827 () Bool)

(assert (=> d!39751 (=> (not res!62827) (not e!85028))))

(assert (=> d!39751 (= res!62827 ((_ is Cons!1681) (toList!837 lt!67414)))))

(assert (=> d!39751 (= (contains!875 (toList!837 lt!67414) (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67757)))

(declare-fun b!130350 () Bool)

(declare-fun e!85027 () Bool)

(assert (=> b!130350 (= e!85028 e!85027)))

(declare-fun res!62828 () Bool)

(assert (=> b!130350 (=> res!62828 e!85027)))

(assert (=> b!130350 (= res!62828 (= (h!2285 (toList!837 lt!67414)) (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130351 () Bool)

(assert (=> b!130351 (= e!85027 (contains!875 (t!6076 (toList!837 lt!67414)) (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39751 res!62827) b!130350))

(assert (= (and b!130350 (not res!62828)) b!130351))

(declare-fun m!153485 () Bool)

(assert (=> d!39751 m!153485))

(declare-fun m!153487 () Bool)

(assert (=> d!39751 m!153487))

(declare-fun m!153489 () Bool)

(assert (=> b!130351 m!153489))

(assert (=> b!129870 d!39751))

(declare-fun d!39753 () Bool)

(assert (=> d!39753 (= (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274)) (not (isEmpty!409 (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))))

(declare-fun bs!5424 () Bool)

(assert (= bs!5424 d!39753))

(assert (=> bs!5424 m!152657))

(declare-fun m!153491 () Bool)

(assert (=> bs!5424 m!153491))

(assert (=> b!129867 d!39753))

(declare-fun b!130352 () Bool)

(declare-fun e!85029 () Option!176)

(assert (=> b!130352 (= e!85029 (Some!175 (_2!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun b!130355 () Bool)

(declare-fun e!85030 () Option!176)

(assert (=> b!130355 (= e!85030 None!174)))

(declare-fun b!130354 () Bool)

(assert (=> b!130354 (= e!85030 (getValueByKey!170 (t!6076 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67274))))

(declare-fun b!130353 () Bool)

(assert (=> b!130353 (= e!85029 e!85030)))

(declare-fun c!24054 () Bool)

(assert (=> b!130353 (= c!24054 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (not (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67274))))))

(declare-fun c!24053 () Bool)

(declare-fun d!39755 () Bool)

(assert (=> d!39755 (= c!24053 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67274)))))

(assert (=> d!39755 (= (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274) e!85029)))

(assert (= (and d!39755 c!24053) b!130352))

(assert (= (and d!39755 (not c!24053)) b!130353))

(assert (= (and b!130353 c!24054) b!130354))

(assert (= (and b!130353 (not c!24054)) b!130355))

(declare-fun m!153493 () Bool)

(assert (=> b!130354 m!153493))

(assert (=> b!129867 d!39755))

(declare-fun d!39757 () Bool)

(declare-fun e!85031 () Bool)

(assert (=> d!39757 e!85031))

(declare-fun res!62829 () Bool)

(assert (=> d!39757 (=> res!62829 e!85031)))

(declare-fun lt!67758 () Bool)

(assert (=> d!39757 (= res!62829 (not lt!67758))))

(declare-fun lt!67760 () Bool)

(assert (=> d!39757 (= lt!67758 lt!67760)))

(declare-fun lt!67759 () Unit!4042)

(declare-fun e!85032 () Unit!4042)

(assert (=> d!39757 (= lt!67759 e!85032)))

(declare-fun c!24055 () Bool)

(assert (=> d!39757 (= c!24055 lt!67760)))

(assert (=> d!39757 (= lt!67760 (containsKey!173 (toList!837 lt!67293) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39757 (= (contains!873 lt!67293 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67758)))

(declare-fun b!130356 () Bool)

(declare-fun lt!67761 () Unit!4042)

(assert (=> b!130356 (= e!85032 lt!67761)))

(assert (=> b!130356 (= lt!67761 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67293) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130356 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130357 () Bool)

(declare-fun Unit!4073 () Unit!4042)

(assert (=> b!130357 (= e!85032 Unit!4073)))

(declare-fun b!130358 () Bool)

(assert (=> b!130358 (= e!85031 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39757 c!24055) b!130356))

(assert (= (and d!39757 (not c!24055)) b!130357))

(assert (= (and d!39757 (not res!62829)) b!130358))

(declare-fun m!153495 () Bool)

(assert (=> d!39757 m!153495))

(declare-fun m!153497 () Bool)

(assert (=> b!130356 m!153497))

(declare-fun m!153499 () Bool)

(assert (=> b!130356 m!153499))

(assert (=> b!130356 m!153499))

(declare-fun m!153501 () Bool)

(assert (=> b!130356 m!153501))

(assert (=> b!130358 m!153499))

(assert (=> b!130358 m!153499))

(assert (=> b!130358 m!153501))

(assert (=> bm!14088 d!39757))

(declare-fun d!39759 () Bool)

(declare-fun res!62830 () Bool)

(declare-fun e!85033 () Bool)

(assert (=> d!39759 (=> res!62830 e!85033)))

(assert (=> d!39759 (= res!62830 (and ((_ is Cons!1681) (toList!837 e!84592)) (= (_1!1283 (h!2285 (toList!837 e!84592))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39759 (= (containsKey!173 (toList!837 e!84592) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!85033)))

(declare-fun b!130359 () Bool)

(declare-fun e!85034 () Bool)

(assert (=> b!130359 (= e!85033 e!85034)))

(declare-fun res!62831 () Bool)

(assert (=> b!130359 (=> (not res!62831) (not e!85034))))

(assert (=> b!130359 (= res!62831 (and (or (not ((_ is Cons!1681) (toList!837 e!84592))) (bvsle (_1!1283 (h!2285 (toList!837 e!84592))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) ((_ is Cons!1681) (toList!837 e!84592)) (bvslt (_1!1283 (h!2285 (toList!837 e!84592))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(declare-fun b!130360 () Bool)

(assert (=> b!130360 (= e!85034 (containsKey!173 (t!6076 (toList!837 e!84592)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39759 (not res!62830)) b!130359))

(assert (= (and b!130359 res!62831) b!130360))

(assert (=> b!130360 m!152129))

(declare-fun m!153503 () Bool)

(assert (=> b!130360 m!153503))

(assert (=> d!39545 d!39759))

(declare-fun d!39761 () Bool)

(assert (=> d!39761 (= (apply!113 lt!67457 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67457) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5425 () Bool)

(assert (= bs!5425 d!39761))

(declare-fun m!153505 () Bool)

(assert (=> bs!5425 m!153505))

(assert (=> bs!5425 m!153505))

(declare-fun m!153507 () Bool)

(assert (=> bs!5425 m!153507))

(assert (=> b!129971 d!39761))

(declare-fun bm!14165 () Bool)

(declare-fun call!14168 () Bool)

(assert (=> bm!14165 (= call!14168 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4564 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191))))))

(declare-fun b!130361 () Bool)

(declare-fun e!85037 () Bool)

(assert (=> b!130361 (= e!85037 call!14168)))

(declare-fun b!130362 () Bool)

(declare-fun e!85035 () Bool)

(assert (=> b!130362 (= e!85035 call!14168)))

(declare-fun d!39763 () Bool)

(declare-fun res!62832 () Bool)

(declare-fun e!85036 () Bool)

(assert (=> d!39763 (=> res!62832 e!85036)))

(assert (=> d!39763 (= res!62832 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (=> d!39763 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4564 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191))) e!85036)))

(declare-fun b!130363 () Bool)

(assert (=> b!130363 (= e!85036 e!85037)))

(declare-fun c!24056 () Bool)

(assert (=> b!130363 (= c!24056 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun b!130364 () Bool)

(assert (=> b!130364 (= e!85037 e!85035)))

(declare-fun lt!67764 () (_ BitVec 64))

(assert (=> b!130364 (= lt!67764 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000))))

(declare-fun lt!67762 () Unit!4042)

(assert (=> b!130364 (= lt!67762 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4564 (_2!1284 lt!67191)) lt!67764 #b00000000000000000000000000000000))))

(assert (=> b!130364 (arrayContainsKey!0 (_keys!4564 (_2!1284 lt!67191)) lt!67764 #b00000000000000000000000000000000)))

(declare-fun lt!67763 () Unit!4042)

(assert (=> b!130364 (= lt!67763 lt!67762)))

(declare-fun res!62833 () Bool)

(assert (=> b!130364 (= res!62833 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000) (_keys!4564 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191))) (Found!266 #b00000000000000000000000000000000)))))

(assert (=> b!130364 (=> (not res!62833) (not e!85035))))

(assert (= (and d!39763 (not res!62832)) b!130363))

(assert (= (and b!130363 c!24056) b!130364))

(assert (= (and b!130363 (not c!24056)) b!130361))

(assert (= (and b!130364 res!62833) b!130362))

(assert (= (or b!130362 b!130361) bm!14165))

(declare-fun m!153509 () Bool)

(assert (=> bm!14165 m!153509))

(assert (=> b!130363 m!153133))

(assert (=> b!130363 m!153133))

(assert (=> b!130363 m!153137))

(assert (=> b!130364 m!153133))

(declare-fun m!153511 () Bool)

(assert (=> b!130364 m!153511))

(declare-fun m!153513 () Bool)

(assert (=> b!130364 m!153513))

(assert (=> b!130364 m!153133))

(declare-fun m!153515 () Bool)

(assert (=> b!130364 m!153515))

(assert (=> b!129753 d!39763))

(declare-fun d!39765 () Bool)

(assert (=> d!39765 (= (get!1472 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!129724 d!39765))

(assert (=> bm!14139 d!39445))

(declare-fun d!39767 () Bool)

(declare-fun e!85038 () Bool)

(assert (=> d!39767 e!85038))

(declare-fun res!62835 () Bool)

(assert (=> d!39767 (=> (not res!62835) (not e!85038))))

(declare-fun lt!67766 () ListLongMap!1643)

(assert (=> d!39767 (= res!62835 (contains!873 lt!67766 (_1!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67767 () List!1685)

(assert (=> d!39767 (= lt!67766 (ListLongMap!1644 lt!67767))))

(declare-fun lt!67768 () Unit!4042)

(declare-fun lt!67765 () Unit!4042)

(assert (=> d!39767 (= lt!67768 lt!67765)))

(assert (=> d!39767 (= (getValueByKey!170 lt!67767 (_1!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39767 (= lt!67765 (lemmaContainsTupThenGetReturnValue!85 lt!67767 (_1!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39767 (= lt!67767 (insertStrictlySorted!88 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (_1!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39767 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67766)))

(declare-fun b!130365 () Bool)

(declare-fun res!62834 () Bool)

(assert (=> b!130365 (=> (not res!62834) (not e!85038))))

(assert (=> b!130365 (= res!62834 (= (getValueByKey!170 (toList!837 lt!67766) (_1!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130366 () Bool)

(assert (=> b!130366 (= e!85038 (contains!875 (toList!837 lt!67766) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39767 res!62835) b!130365))

(assert (= (and b!130365 res!62834) b!130366))

(declare-fun m!153517 () Bool)

(assert (=> d!39767 m!153517))

(declare-fun m!153519 () Bool)

(assert (=> d!39767 m!153519))

(declare-fun m!153521 () Bool)

(assert (=> d!39767 m!153521))

(declare-fun m!153523 () Bool)

(assert (=> d!39767 m!153523))

(declare-fun m!153525 () Bool)

(assert (=> b!130365 m!153525))

(declare-fun m!153527 () Bool)

(assert (=> b!130366 m!153527))

(assert (=> d!39547 d!39767))

(declare-fun b!130367 () Bool)

(declare-fun e!85045 () Unit!4042)

(declare-fun Unit!4074 () Unit!4042)

(assert (=> b!130367 (= e!85045 Unit!4074)))

(declare-fun b!130368 () Bool)

(declare-fun e!85041 () ListLongMap!1643)

(declare-fun call!14171 () ListLongMap!1643)

(assert (=> b!130368 (= e!85041 (+!166 call!14171 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!130369 () Bool)

(declare-fun e!85051 () Bool)

(declare-fun lt!67770 () ListLongMap!1643)

(assert (=> b!130369 (= e!85051 (= (apply!113 lt!67770 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!130370 () Bool)

(declare-fun e!85048 () ListLongMap!1643)

(declare-fun call!14170 () ListLongMap!1643)

(assert (=> b!130370 (= e!85048 call!14170)))

(declare-fun b!130371 () Bool)

(declare-fun e!85042 () Bool)

(assert (=> b!130371 (= e!85042 e!85051)))

(declare-fun res!62836 () Bool)

(declare-fun call!14173 () Bool)

(assert (=> b!130371 (= res!62836 call!14173)))

(assert (=> b!130371 (=> (not res!62836) (not e!85051))))

(declare-fun b!130372 () Bool)

(declare-fun e!85047 () Bool)

(assert (=> b!130372 (= e!85047 (= (apply!113 lt!67770 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130372 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(assert (=> b!130372 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130373 () Bool)

(declare-fun e!85044 () Bool)

(assert (=> b!130373 (= e!85044 e!85042)))

(declare-fun c!24062 () Bool)

(assert (=> b!130373 (= c!24062 (not (= (bvand lt!67200 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!14174 () ListLongMap!1643)

(declare-fun bm!14166 () Bool)

(assert (=> bm!14166 (= call!14174 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39769 () Bool)

(assert (=> d!39769 e!85044))

(declare-fun res!62838 () Bool)

(assert (=> d!39769 (=> (not res!62838) (not e!85044))))

(assert (=> d!39769 (= res!62838 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67790 () ListLongMap!1643)

(assert (=> d!39769 (= lt!67770 lt!67790)))

(declare-fun lt!67782 () Unit!4042)

(assert (=> d!39769 (= lt!67782 e!85045)))

(declare-fun c!24061 () Bool)

(declare-fun e!85049 () Bool)

(assert (=> d!39769 (= c!24061 e!85049)))

(declare-fun res!62840 () Bool)

(assert (=> d!39769 (=> (not res!62840) (not e!85049))))

(assert (=> d!39769 (= res!62840 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39769 (= lt!67790 e!85041)))

(declare-fun c!24058 () Bool)

(assert (=> d!39769 (= c!24058 (and (not (= (bvand lt!67200 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!67200 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39769 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39769 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67770)))

(declare-fun b!130374 () Bool)

(declare-fun e!85050 () Bool)

(assert (=> b!130374 (= e!85050 (= (apply!113 lt!67770 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!130375 () Bool)

(assert (=> b!130375 (= e!85049 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14167 () Bool)

(declare-fun call!14175 () ListLongMap!1643)

(declare-fun call!14172 () ListLongMap!1643)

(assert (=> bm!14167 (= call!14175 call!14172)))

(declare-fun b!130376 () Bool)

(declare-fun lt!67775 () Unit!4042)

(assert (=> b!130376 (= e!85045 lt!67775)))

(declare-fun lt!67776 () ListLongMap!1643)

(assert (=> b!130376 (= lt!67776 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67771 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67771 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67783 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67783 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67784 () Unit!4042)

(assert (=> b!130376 (= lt!67784 (addStillContains!89 lt!67776 lt!67771 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!67783))))

(assert (=> b!130376 (contains!873 (+!166 lt!67776 (tuple2!2545 lt!67771 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67783)))

(declare-fun lt!67789 () Unit!4042)

(assert (=> b!130376 (= lt!67789 lt!67784)))

(declare-fun lt!67769 () ListLongMap!1643)

(assert (=> b!130376 (= lt!67769 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67777 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67777 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67788 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67788 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67773 () Unit!4042)

(assert (=> b!130376 (= lt!67773 (addApplyDifferent!89 lt!67769 lt!67777 (minValue!2682 newMap!16) lt!67788))))

(assert (=> b!130376 (= (apply!113 (+!166 lt!67769 (tuple2!2545 lt!67777 (minValue!2682 newMap!16))) lt!67788) (apply!113 lt!67769 lt!67788))))

(declare-fun lt!67785 () Unit!4042)

(assert (=> b!130376 (= lt!67785 lt!67773)))

(declare-fun lt!67778 () ListLongMap!1643)

(assert (=> b!130376 (= lt!67778 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67787 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67787 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67772 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67772 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67779 () Unit!4042)

(assert (=> b!130376 (= lt!67779 (addApplyDifferent!89 lt!67778 lt!67787 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!67772))))

(assert (=> b!130376 (= (apply!113 (+!166 lt!67778 (tuple2!2545 lt!67787 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67772) (apply!113 lt!67778 lt!67772))))

(declare-fun lt!67780 () Unit!4042)

(assert (=> b!130376 (= lt!67780 lt!67779)))

(declare-fun lt!67786 () ListLongMap!1643)

(assert (=> b!130376 (= lt!67786 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67774 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67774 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67781 () (_ BitVec 64))

(assert (=> b!130376 (= lt!67781 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!130376 (= lt!67775 (addApplyDifferent!89 lt!67786 lt!67774 (minValue!2682 newMap!16) lt!67781))))

(assert (=> b!130376 (= (apply!113 (+!166 lt!67786 (tuple2!2545 lt!67774 (minValue!2682 newMap!16))) lt!67781) (apply!113 lt!67786 lt!67781))))

(declare-fun b!130377 () Bool)

(declare-fun res!62844 () Bool)

(assert (=> b!130377 (=> (not res!62844) (not e!85044))))

(declare-fun e!85039 () Bool)

(assert (=> b!130377 (= res!62844 e!85039)))

(declare-fun c!24060 () Bool)

(assert (=> b!130377 (= c!24060 (not (= (bvand lt!67200 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130378 () Bool)

(declare-fun res!62841 () Bool)

(assert (=> b!130378 (=> (not res!62841) (not e!85044))))

(declare-fun e!85040 () Bool)

(assert (=> b!130378 (= res!62841 e!85040)))

(declare-fun res!62842 () Bool)

(assert (=> b!130378 (=> res!62842 e!85040)))

(declare-fun e!85043 () Bool)

(assert (=> b!130378 (= res!62842 (not e!85043))))

(declare-fun res!62843 () Bool)

(assert (=> b!130378 (=> (not res!62843) (not e!85043))))

(assert (=> b!130378 (= res!62843 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14168 () Bool)

(declare-fun call!14169 () Bool)

(assert (=> bm!14168 (= call!14169 (contains!873 lt!67770 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!24057 () Bool)

(declare-fun bm!14169 () Bool)

(assert (=> bm!14169 (= call!14171 (+!166 (ite c!24058 call!14174 (ite c!24057 call!14172 call!14175)) (ite (or c!24058 c!24057) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14170 () Bool)

(assert (=> bm!14170 (= call!14172 call!14174)))

(declare-fun b!130379 () Bool)

(declare-fun e!85046 () ListLongMap!1643)

(assert (=> b!130379 (= e!85046 call!14170)))

(declare-fun b!130380 () Bool)

(assert (=> b!130380 (= e!85043 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14171 () Bool)

(assert (=> bm!14171 (= call!14170 call!14171)))

(declare-fun b!130381 () Bool)

(assert (=> b!130381 (= e!85042 (not call!14173))))

(declare-fun b!130382 () Bool)

(declare-fun c!24059 () Bool)

(assert (=> b!130382 (= c!24059 (and (not (= (bvand lt!67200 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!67200 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130382 (= e!85048 e!85046)))

(declare-fun b!130383 () Bool)

(assert (=> b!130383 (= e!85039 (not call!14169))))

(declare-fun b!130384 () Bool)

(assert (=> b!130384 (= e!85039 e!85050)))

(declare-fun res!62839 () Bool)

(assert (=> b!130384 (= res!62839 call!14169)))

(assert (=> b!130384 (=> (not res!62839) (not e!85050))))

(declare-fun b!130385 () Bool)

(assert (=> b!130385 (= e!85041 e!85048)))

(assert (=> b!130385 (= c!24057 (and (not (= (bvand lt!67200 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!67200 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14172 () Bool)

(assert (=> bm!14172 (= call!14173 (contains!873 lt!67770 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130386 () Bool)

(assert (=> b!130386 (= e!85046 call!14175)))

(declare-fun b!130387 () Bool)

(assert (=> b!130387 (= e!85040 e!85047)))

(declare-fun res!62837 () Bool)

(assert (=> b!130387 (=> (not res!62837) (not e!85047))))

(assert (=> b!130387 (= res!62837 (contains!873 lt!67770 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130387 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39769 c!24058) b!130368))

(assert (= (and d!39769 (not c!24058)) b!130385))

(assert (= (and b!130385 c!24057) b!130370))

(assert (= (and b!130385 (not c!24057)) b!130382))

(assert (= (and b!130382 c!24059) b!130379))

(assert (= (and b!130382 (not c!24059)) b!130386))

(assert (= (or b!130379 b!130386) bm!14167))

(assert (= (or b!130370 bm!14167) bm!14170))

(assert (= (or b!130370 b!130379) bm!14171))

(assert (= (or b!130368 bm!14170) bm!14166))

(assert (= (or b!130368 bm!14171) bm!14169))

(assert (= (and d!39769 res!62840) b!130375))

(assert (= (and d!39769 c!24061) b!130376))

(assert (= (and d!39769 (not c!24061)) b!130367))

(assert (= (and d!39769 res!62838) b!130378))

(assert (= (and b!130378 res!62843) b!130380))

(assert (= (and b!130378 (not res!62842)) b!130387))

(assert (= (and b!130387 res!62837) b!130372))

(assert (= (and b!130378 res!62841) b!130377))

(assert (= (and b!130377 c!24060) b!130384))

(assert (= (and b!130377 (not c!24060)) b!130383))

(assert (= (and b!130384 res!62839) b!130374))

(assert (= (or b!130384 b!130383) bm!14168))

(assert (= (and b!130377 res!62844) b!130373))

(assert (= (and b!130373 c!24062) b!130371))

(assert (= (and b!130373 (not c!24062)) b!130381))

(assert (= (and b!130371 res!62836) b!130369))

(assert (= (or b!130371 b!130381) bm!14172))

(declare-fun b_lambda!5797 () Bool)

(assert (=> (not b_lambda!5797) (not b!130372)))

(assert (=> b!130372 t!6088))

(declare-fun b_and!8069 () Bool)

(assert (= b_and!8065 (and (=> t!6088 result!3917) b_and!8069)))

(assert (=> b!130372 t!6090))

(declare-fun b_and!8071 () Bool)

(assert (= b_and!8067 (and (=> t!6090 result!3919) b_and!8071)))

(declare-fun m!153529 () Bool)

(assert (=> b!130369 m!153529))

(assert (=> bm!14166 m!152151))

(declare-fun m!153531 () Bool)

(assert (=> bm!14166 m!153531))

(declare-fun m!153533 () Bool)

(assert (=> b!130368 m!153533))

(assert (=> d!39769 m!152389))

(assert (=> b!130387 m!152369))

(assert (=> b!130387 m!152369))

(declare-fun m!153535 () Bool)

(assert (=> b!130387 m!153535))

(assert (=> b!130375 m!152369))

(assert (=> b!130375 m!152369))

(assert (=> b!130375 m!152403))

(declare-fun m!153537 () Bool)

(assert (=> b!130376 m!153537))

(declare-fun m!153539 () Bool)

(assert (=> b!130376 m!153539))

(declare-fun m!153541 () Bool)

(assert (=> b!130376 m!153541))

(assert (=> b!130376 m!152369))

(declare-fun m!153543 () Bool)

(assert (=> b!130376 m!153543))

(declare-fun m!153545 () Bool)

(assert (=> b!130376 m!153545))

(declare-fun m!153547 () Bool)

(assert (=> b!130376 m!153547))

(declare-fun m!153549 () Bool)

(assert (=> b!130376 m!153549))

(assert (=> b!130376 m!153539))

(declare-fun m!153551 () Bool)

(assert (=> b!130376 m!153551))

(assert (=> b!130376 m!152151))

(declare-fun m!153553 () Bool)

(assert (=> b!130376 m!153553))

(assert (=> b!130376 m!152151))

(assert (=> b!130376 m!153531))

(assert (=> b!130376 m!153551))

(declare-fun m!153555 () Bool)

(assert (=> b!130376 m!153555))

(declare-fun m!153557 () Bool)

(assert (=> b!130376 m!153557))

(assert (=> b!130376 m!153545))

(declare-fun m!153559 () Bool)

(assert (=> b!130376 m!153559))

(assert (=> b!130376 m!152151))

(declare-fun m!153561 () Bool)

(assert (=> b!130376 m!153561))

(declare-fun m!153563 () Bool)

(assert (=> b!130376 m!153563))

(declare-fun m!153565 () Bool)

(assert (=> b!130376 m!153565))

(assert (=> b!130376 m!153547))

(declare-fun m!153567 () Bool)

(assert (=> bm!14168 m!153567))

(assert (=> b!130380 m!152369))

(assert (=> b!130380 m!152369))

(assert (=> b!130380 m!152403))

(declare-fun m!153569 () Bool)

(assert (=> b!130374 m!153569))

(assert (=> b!130372 m!152369))

(assert (=> b!130372 m!152559))

(assert (=> b!130372 m!152441))

(assert (=> b!130372 m!152561))

(assert (=> b!130372 m!152369))

(declare-fun m!153571 () Bool)

(assert (=> b!130372 m!153571))

(assert (=> b!130372 m!152441))

(assert (=> b!130372 m!152559))

(declare-fun m!153573 () Bool)

(assert (=> bm!14169 m!153573))

(declare-fun m!153575 () Bool)

(assert (=> bm!14172 m!153575))

(assert (=> d!39547 d!39769))

(assert (=> d!39547 d!39511))

(declare-fun d!39771 () Bool)

(assert (=> d!39771 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) lt!67200 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(assert (=> d!39771 true))

(declare-fun _$7!113 () Unit!4042)

(assert (=> d!39771 (= (choose!801 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) lt!67200 (zeroValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2682 newMap!16) (defaultEntry!2823 newMap!16)) _$7!113)))

(declare-fun bs!5426 () Bool)

(assert (= bs!5426 d!39771))

(assert (=> bs!5426 m!152307))

(assert (=> bs!5426 m!152307))

(assert (=> bs!5426 m!152861))

(assert (=> bs!5426 m!152151))

(assert (=> bs!5426 m!152859))

(assert (=> d!39547 d!39771))

(assert (=> d!39547 d!39565))

(declare-fun d!39773 () Bool)

(declare-fun e!85052 () Bool)

(assert (=> d!39773 e!85052))

(declare-fun res!62845 () Bool)

(assert (=> d!39773 (=> res!62845 e!85052)))

(declare-fun lt!67791 () Bool)

(assert (=> d!39773 (= res!62845 (not lt!67791))))

(declare-fun lt!67793 () Bool)

(assert (=> d!39773 (= lt!67791 lt!67793)))

(declare-fun lt!67792 () Unit!4042)

(declare-fun e!85053 () Unit!4042)

(assert (=> d!39773 (= lt!67792 e!85053)))

(declare-fun c!24063 () Bool)

(assert (=> d!39773 (= c!24063 lt!67793)))

(assert (=> d!39773 (= lt!67793 (containsKey!173 (toList!837 (map!1389 (_2!1284 lt!67593))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39773 (= (contains!873 (map!1389 (_2!1284 lt!67593)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67791)))

(declare-fun b!130388 () Bool)

(declare-fun lt!67794 () Unit!4042)

(assert (=> b!130388 (= e!85053 lt!67794)))

(assert (=> b!130388 (= lt!67794 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (map!1389 (_2!1284 lt!67593))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!130388 (isDefined!122 (getValueByKey!170 (toList!837 (map!1389 (_2!1284 lt!67593))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130389 () Bool)

(declare-fun Unit!4075 () Unit!4042)

(assert (=> b!130389 (= e!85053 Unit!4075)))

(declare-fun b!130390 () Bool)

(assert (=> b!130390 (= e!85052 (isDefined!122 (getValueByKey!170 (toList!837 (map!1389 (_2!1284 lt!67593))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (= (and d!39773 c!24063) b!130388))

(assert (= (and d!39773 (not c!24063)) b!130389))

(assert (= (and d!39773 (not res!62845)) b!130390))

(assert (=> d!39773 m!152129))

(declare-fun m!153577 () Bool)

(assert (=> d!39773 m!153577))

(assert (=> b!130388 m!152129))

(declare-fun m!153579 () Bool)

(assert (=> b!130388 m!153579))

(assert (=> b!130388 m!152129))

(declare-fun m!153581 () Bool)

(assert (=> b!130388 m!153581))

(assert (=> b!130388 m!153581))

(declare-fun m!153583 () Bool)

(assert (=> b!130388 m!153583))

(assert (=> b!130390 m!152129))

(assert (=> b!130390 m!153581))

(assert (=> b!130390 m!153581))

(assert (=> b!130390 m!153583))

(assert (=> b!130062 d!39773))

(declare-fun d!39775 () Bool)

(assert (=> d!39775 (= (map!1389 (_2!1284 lt!67593)) (getCurrentListMap!515 (_keys!4564 (_2!1284 lt!67593)) (_values!2806 (_2!1284 lt!67593)) (mask!7101 (_2!1284 lt!67593)) (extraKeys!2596 (_2!1284 lt!67593)) (zeroValue!2682 (_2!1284 lt!67593)) (minValue!2682 (_2!1284 lt!67593)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67593))))))

(declare-fun bs!5427 () Bool)

(assert (= bs!5427 d!39775))

(declare-fun m!153585 () Bool)

(assert (=> bs!5427 m!153585))

(assert (=> b!130062 d!39775))

(declare-fun b!130391 () Bool)

(declare-fun e!85054 () Option!176)

(assert (=> b!130391 (= e!85054 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67327)))))))

(declare-fun b!130394 () Bool)

(declare-fun e!85055 () Option!176)

(assert (=> b!130394 (= e!85055 None!174)))

(declare-fun b!130393 () Bool)

(assert (=> b!130393 (= e!85055 (getValueByKey!170 (t!6076 (toList!837 lt!67327)) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130392 () Bool)

(assert (=> b!130392 (= e!85054 e!85055)))

(declare-fun c!24065 () Bool)

(assert (=> b!130392 (= c!24065 (and ((_ is Cons!1681) (toList!837 lt!67327)) (not (= (_1!1283 (h!2285 (toList!837 lt!67327))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!24064 () Bool)

(declare-fun d!39777 () Bool)

(assert (=> d!39777 (= c!24064 (and ((_ is Cons!1681) (toList!837 lt!67327)) (= (_1!1283 (h!2285 (toList!837 lt!67327))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!39777 (= (getValueByKey!170 (toList!837 lt!67327) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!85054)))

(assert (= (and d!39777 c!24064) b!130391))

(assert (= (and d!39777 (not c!24064)) b!130392))

(assert (= (and b!130392 c!24065) b!130393))

(assert (= (and b!130392 (not c!24065)) b!130394))

(declare-fun m!153587 () Bool)

(assert (=> b!130393 m!153587))

(assert (=> b!129762 d!39777))

(declare-fun d!39779 () Bool)

(declare-fun e!85056 () Bool)

(assert (=> d!39779 e!85056))

(declare-fun res!62847 () Bool)

(assert (=> d!39779 (=> (not res!62847) (not e!85056))))

(declare-fun lt!67796 () ListLongMap!1643)

(assert (=> d!39779 (= res!62847 (contains!873 lt!67796 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!67797 () List!1685)

(assert (=> d!39779 (= lt!67796 (ListLongMap!1644 lt!67797))))

(declare-fun lt!67798 () Unit!4042)

(declare-fun lt!67795 () Unit!4042)

(assert (=> d!39779 (= lt!67798 lt!67795)))

(assert (=> d!39779 (= (getValueByKey!170 lt!67797 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39779 (= lt!67795 (lemmaContainsTupThenGetReturnValue!85 lt!67797 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39779 (= lt!67797 (insertStrictlySorted!88 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!39779 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!67796)))

(declare-fun b!130395 () Bool)

(declare-fun res!62846 () Bool)

(assert (=> b!130395 (=> (not res!62846) (not e!85056))))

(assert (=> b!130395 (= res!62846 (= (getValueByKey!170 (toList!837 lt!67796) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130396 () Bool)

(assert (=> b!130396 (= e!85056 (contains!875 (toList!837 lt!67796) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!39779 res!62847) b!130395))

(assert (= (and b!130395 res!62846) b!130396))

(declare-fun m!153589 () Bool)

(assert (=> d!39779 m!153589))

(declare-fun m!153591 () Bool)

(assert (=> d!39779 m!153591))

(declare-fun m!153593 () Bool)

(assert (=> d!39779 m!153593))

(declare-fun m!153595 () Bool)

(assert (=> d!39779 m!153595))

(declare-fun m!153597 () Bool)

(assert (=> b!130395 m!153597))

(declare-fun m!153599 () Bool)

(assert (=> b!130396 m!153599))

(assert (=> b!129990 d!39779))

(assert (=> b!129990 d!39511))

(declare-fun b!130397 () Bool)

(declare-fun e!85063 () Unit!4042)

(declare-fun Unit!4076 () Unit!4042)

(assert (=> b!130397 (= e!85063 Unit!4076)))

(declare-fun b!130398 () Bool)

(declare-fun e!85059 () ListLongMap!1643)

(declare-fun call!14178 () ListLongMap!1643)

(assert (=> b!130398 (= e!85059 (+!166 call!14178 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!130399 () Bool)

(declare-fun e!85069 () Bool)

(declare-fun lt!67800 () ListLongMap!1643)

(assert (=> b!130399 (= e!85069 (= (apply!113 lt!67800 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!130400 () Bool)

(declare-fun e!85066 () ListLongMap!1643)

(declare-fun call!14177 () ListLongMap!1643)

(assert (=> b!130400 (= e!85066 call!14177)))

(declare-fun b!130401 () Bool)

(declare-fun e!85060 () Bool)

(assert (=> b!130401 (= e!85060 e!85069)))

(declare-fun res!62848 () Bool)

(declare-fun call!14180 () Bool)

(assert (=> b!130401 (= res!62848 call!14180)))

(assert (=> b!130401 (=> (not res!62848) (not e!85069))))

(declare-fun e!85065 () Bool)

(declare-fun b!130402 () Bool)

(assert (=> b!130402 (= e!85065 (= (apply!113 lt!67800 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130402 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))))))

(assert (=> b!130402 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130403 () Bool)

(declare-fun e!85062 () Bool)

(assert (=> b!130403 (= e!85062 e!85060)))

(declare-fun c!24071 () Bool)

(assert (=> b!130403 (= c!24071 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14173 () Bool)

(declare-fun call!14181 () ListLongMap!1643)

(assert (=> bm!14173 (= call!14181 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39781 () Bool)

(assert (=> d!39781 e!85062))

(declare-fun res!62850 () Bool)

(assert (=> d!39781 (=> (not res!62850) (not e!85062))))

(assert (=> d!39781 (= res!62850 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun lt!67820 () ListLongMap!1643)

(assert (=> d!39781 (= lt!67800 lt!67820)))

(declare-fun lt!67812 () Unit!4042)

(assert (=> d!39781 (= lt!67812 e!85063)))

(declare-fun c!24070 () Bool)

(declare-fun e!85067 () Bool)

(assert (=> d!39781 (= c!24070 e!85067)))

(declare-fun res!62852 () Bool)

(assert (=> d!39781 (=> (not res!62852) (not e!85067))))

(assert (=> d!39781 (= res!62852 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39781 (= lt!67820 e!85059)))

(declare-fun c!24067 () Bool)

(assert (=> d!39781 (= c!24067 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39781 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39781 (= (getCurrentListMap!515 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67800)))

(declare-fun b!130404 () Bool)

(declare-fun e!85068 () Bool)

(assert (=> b!130404 (= e!85068 (= (apply!113 lt!67800 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!130405 () Bool)

(assert (=> b!130405 (= e!85067 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14174 () Bool)

(declare-fun call!14182 () ListLongMap!1643)

(declare-fun call!14179 () ListLongMap!1643)

(assert (=> bm!14174 (= call!14182 call!14179)))

(declare-fun b!130406 () Bool)

(declare-fun lt!67805 () Unit!4042)

(assert (=> b!130406 (= e!85063 lt!67805)))

(declare-fun lt!67806 () ListLongMap!1643)

(assert (=> b!130406 (= lt!67806 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67801 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67801 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67813 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67813 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67814 () Unit!4042)

(assert (=> b!130406 (= lt!67814 (addStillContains!89 lt!67806 lt!67801 (zeroValue!2682 newMap!16) lt!67813))))

(assert (=> b!130406 (contains!873 (+!166 lt!67806 (tuple2!2545 lt!67801 (zeroValue!2682 newMap!16))) lt!67813)))

(declare-fun lt!67819 () Unit!4042)

(assert (=> b!130406 (= lt!67819 lt!67814)))

(declare-fun lt!67799 () ListLongMap!1643)

(assert (=> b!130406 (= lt!67799 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67807 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67807 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67818 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67818 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67803 () Unit!4042)

(assert (=> b!130406 (= lt!67803 (addApplyDifferent!89 lt!67799 lt!67807 (minValue!2682 newMap!16) lt!67818))))

(assert (=> b!130406 (= (apply!113 (+!166 lt!67799 (tuple2!2545 lt!67807 (minValue!2682 newMap!16))) lt!67818) (apply!113 lt!67799 lt!67818))))

(declare-fun lt!67815 () Unit!4042)

(assert (=> b!130406 (= lt!67815 lt!67803)))

(declare-fun lt!67808 () ListLongMap!1643)

(assert (=> b!130406 (= lt!67808 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67817 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67817 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67802 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67802 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!67809 () Unit!4042)

(assert (=> b!130406 (= lt!67809 (addApplyDifferent!89 lt!67808 lt!67817 (zeroValue!2682 newMap!16) lt!67802))))

(assert (=> b!130406 (= (apply!113 (+!166 lt!67808 (tuple2!2545 lt!67817 (zeroValue!2682 newMap!16))) lt!67802) (apply!113 lt!67808 lt!67802))))

(declare-fun lt!67810 () Unit!4042)

(assert (=> b!130406 (= lt!67810 lt!67809)))

(declare-fun lt!67816 () ListLongMap!1643)

(assert (=> b!130406 (= lt!67816 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!67804 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67804 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67811 () (_ BitVec 64))

(assert (=> b!130406 (= lt!67811 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!130406 (= lt!67805 (addApplyDifferent!89 lt!67816 lt!67804 (minValue!2682 newMap!16) lt!67811))))

(assert (=> b!130406 (= (apply!113 (+!166 lt!67816 (tuple2!2545 lt!67804 (minValue!2682 newMap!16))) lt!67811) (apply!113 lt!67816 lt!67811))))

(declare-fun b!130407 () Bool)

(declare-fun res!62856 () Bool)

(assert (=> b!130407 (=> (not res!62856) (not e!85062))))

(declare-fun e!85057 () Bool)

(assert (=> b!130407 (= res!62856 e!85057)))

(declare-fun c!24069 () Bool)

(assert (=> b!130407 (= c!24069 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130408 () Bool)

(declare-fun res!62853 () Bool)

(assert (=> b!130408 (=> (not res!62853) (not e!85062))))

(declare-fun e!85058 () Bool)

(assert (=> b!130408 (= res!62853 e!85058)))

(declare-fun res!62854 () Bool)

(assert (=> b!130408 (=> res!62854 e!85058)))

(declare-fun e!85061 () Bool)

(assert (=> b!130408 (= res!62854 (not e!85061))))

(declare-fun res!62855 () Bool)

(assert (=> b!130408 (=> (not res!62855) (not e!85061))))

(assert (=> b!130408 (= res!62855 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun bm!14175 () Bool)

(declare-fun call!14176 () Bool)

(assert (=> bm!14175 (= call!14176 (contains!873 lt!67800 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!24066 () Bool)

(declare-fun bm!14176 () Bool)

(assert (=> bm!14176 (= call!14178 (+!166 (ite c!24067 call!14181 (ite c!24066 call!14179 call!14182)) (ite (or c!24067 c!24066) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14177 () Bool)

(assert (=> bm!14177 (= call!14179 call!14181)))

(declare-fun b!130409 () Bool)

(declare-fun e!85064 () ListLongMap!1643)

(assert (=> b!130409 (= e!85064 call!14177)))

(declare-fun b!130410 () Bool)

(assert (=> b!130410 (= e!85061 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!14178 () Bool)

(assert (=> bm!14178 (= call!14177 call!14178)))

(declare-fun b!130411 () Bool)

(assert (=> b!130411 (= e!85060 (not call!14180))))

(declare-fun b!130412 () Bool)

(declare-fun c!24068 () Bool)

(assert (=> b!130412 (= c!24068 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130412 (= e!85066 e!85064)))

(declare-fun b!130413 () Bool)

(assert (=> b!130413 (= e!85057 (not call!14176))))

(declare-fun b!130414 () Bool)

(assert (=> b!130414 (= e!85057 e!85068)))

(declare-fun res!62851 () Bool)

(assert (=> b!130414 (= res!62851 call!14176)))

(assert (=> b!130414 (=> (not res!62851) (not e!85068))))

(declare-fun b!130415 () Bool)

(assert (=> b!130415 (= e!85059 e!85066)))

(assert (=> b!130415 (= c!24066 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14179 () Bool)

(assert (=> bm!14179 (= call!14180 (contains!873 lt!67800 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130416 () Bool)

(assert (=> b!130416 (= e!85064 call!14182)))

(declare-fun b!130417 () Bool)

(assert (=> b!130417 (= e!85058 e!85065)))

(declare-fun res!62849 () Bool)

(assert (=> b!130417 (=> (not res!62849) (not e!85065))))

(assert (=> b!130417 (= res!62849 (contains!873 lt!67800 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130417 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (= (and d!39781 c!24067) b!130398))

(assert (= (and d!39781 (not c!24067)) b!130415))

(assert (= (and b!130415 c!24066) b!130400))

(assert (= (and b!130415 (not c!24066)) b!130412))

(assert (= (and b!130412 c!24068) b!130409))

(assert (= (and b!130412 (not c!24068)) b!130416))

(assert (= (or b!130409 b!130416) bm!14174))

(assert (= (or b!130400 bm!14174) bm!14177))

(assert (= (or b!130400 b!130409) bm!14178))

(assert (= (or b!130398 bm!14177) bm!14173))

(assert (= (or b!130398 bm!14178) bm!14176))

(assert (= (and d!39781 res!62852) b!130405))

(assert (= (and d!39781 c!24070) b!130406))

(assert (= (and d!39781 (not c!24070)) b!130397))

(assert (= (and d!39781 res!62850) b!130408))

(assert (= (and b!130408 res!62855) b!130410))

(assert (= (and b!130408 (not res!62854)) b!130417))

(assert (= (and b!130417 res!62849) b!130402))

(assert (= (and b!130408 res!62853) b!130407))

(assert (= (and b!130407 c!24069) b!130414))

(assert (= (and b!130407 (not c!24069)) b!130413))

(assert (= (and b!130414 res!62851) b!130404))

(assert (= (or b!130414 b!130413) bm!14175))

(assert (= (and b!130407 res!62856) b!130403))

(assert (= (and b!130403 c!24071) b!130401))

(assert (= (and b!130403 (not c!24071)) b!130411))

(assert (= (and b!130401 res!62848) b!130399))

(assert (= (or b!130401 b!130411) bm!14179))

(declare-fun b_lambda!5799 () Bool)

(assert (=> (not b_lambda!5799) (not b!130402)))

(assert (=> b!130402 t!6088))

(declare-fun b_and!8073 () Bool)

(assert (= b_and!8069 (and (=> t!6088 result!3917) b_and!8073)))

(assert (=> b!130402 t!6090))

(declare-fun b_and!8075 () Bool)

(assert (= b_and!8071 (and (=> t!6090 result!3919) b_and!8075)))

(declare-fun m!153601 () Bool)

(assert (=> b!130399 m!153601))

(declare-fun m!153603 () Bool)

(assert (=> bm!14173 m!153603))

(declare-fun m!153605 () Bool)

(assert (=> b!130398 m!153605))

(assert (=> d!39781 m!152389))

(assert (=> b!130417 m!152369))

(assert (=> b!130417 m!152369))

(declare-fun m!153607 () Bool)

(assert (=> b!130417 m!153607))

(assert (=> b!130405 m!152369))

(assert (=> b!130405 m!152369))

(assert (=> b!130405 m!152403))

(declare-fun m!153609 () Bool)

(assert (=> b!130406 m!153609))

(declare-fun m!153611 () Bool)

(assert (=> b!130406 m!153611))

(declare-fun m!153613 () Bool)

(assert (=> b!130406 m!153613))

(assert (=> b!130406 m!152369))

(declare-fun m!153615 () Bool)

(assert (=> b!130406 m!153615))

(declare-fun m!153617 () Bool)

(assert (=> b!130406 m!153617))

(declare-fun m!153619 () Bool)

(assert (=> b!130406 m!153619))

(declare-fun m!153621 () Bool)

(assert (=> b!130406 m!153621))

(assert (=> b!130406 m!153611))

(declare-fun m!153623 () Bool)

(assert (=> b!130406 m!153623))

(declare-fun m!153625 () Bool)

(assert (=> b!130406 m!153625))

(assert (=> b!130406 m!153603))

(assert (=> b!130406 m!153623))

(declare-fun m!153627 () Bool)

(assert (=> b!130406 m!153627))

(declare-fun m!153629 () Bool)

(assert (=> b!130406 m!153629))

(assert (=> b!130406 m!153617))

(declare-fun m!153631 () Bool)

(assert (=> b!130406 m!153631))

(declare-fun m!153633 () Bool)

(assert (=> b!130406 m!153633))

(declare-fun m!153635 () Bool)

(assert (=> b!130406 m!153635))

(declare-fun m!153637 () Bool)

(assert (=> b!130406 m!153637))

(assert (=> b!130406 m!153619))

(declare-fun m!153639 () Bool)

(assert (=> bm!14175 m!153639))

(assert (=> b!130410 m!152369))

(assert (=> b!130410 m!152369))

(assert (=> b!130410 m!152403))

(declare-fun m!153641 () Bool)

(assert (=> b!130404 m!153641))

(assert (=> b!130402 m!152369))

(declare-fun m!153643 () Bool)

(assert (=> b!130402 m!153643))

(assert (=> b!130402 m!152441))

(declare-fun m!153645 () Bool)

(assert (=> b!130402 m!153645))

(assert (=> b!130402 m!152369))

(declare-fun m!153647 () Bool)

(assert (=> b!130402 m!153647))

(assert (=> b!130402 m!152441))

(assert (=> b!130402 m!153643))

(declare-fun m!153649 () Bool)

(assert (=> bm!14176 m!153649))

(declare-fun m!153651 () Bool)

(assert (=> bm!14179 m!153651))

(assert (=> b!129990 d!39781))

(declare-fun lt!67821 () Bool)

(declare-fun d!39783 () Bool)

(assert (=> d!39783 (= lt!67821 (select (content!131 (toList!837 lt!67399)) (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!85071 () Bool)

(assert (=> d!39783 (= lt!67821 e!85071)))

(declare-fun res!62857 () Bool)

(assert (=> d!39783 (=> (not res!62857) (not e!85071))))

(assert (=> d!39783 (= res!62857 ((_ is Cons!1681) (toList!837 lt!67399)))))

(assert (=> d!39783 (= (contains!875 (toList!837 lt!67399) (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67821)))

(declare-fun b!130418 () Bool)

(declare-fun e!85070 () Bool)

(assert (=> b!130418 (= e!85071 e!85070)))

(declare-fun res!62858 () Bool)

(assert (=> b!130418 (=> res!62858 e!85070)))

(assert (=> b!130418 (= res!62858 (= (h!2285 (toList!837 lt!67399)) (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130419 () Bool)

(assert (=> b!130419 (= e!85070 (contains!875 (t!6076 (toList!837 lt!67399)) (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39783 res!62857) b!130418))

(assert (= (and b!130418 (not res!62858)) b!130419))

(declare-fun m!153653 () Bool)

(assert (=> d!39783 m!153653))

(declare-fun m!153655 () Bool)

(assert (=> d!39783 m!153655))

(declare-fun m!153657 () Bool)

(assert (=> b!130419 m!153657))

(assert (=> b!129862 d!39783))

(declare-fun d!39785 () Bool)

(declare-fun e!85072 () Bool)

(assert (=> d!39785 e!85072))

(declare-fun res!62859 () Bool)

(assert (=> d!39785 (=> res!62859 e!85072)))

(declare-fun lt!67822 () Bool)

(assert (=> d!39785 (= res!62859 (not lt!67822))))

(declare-fun lt!67824 () Bool)

(assert (=> d!39785 (= lt!67822 lt!67824)))

(declare-fun lt!67823 () Unit!4042)

(declare-fun e!85073 () Unit!4042)

(assert (=> d!39785 (= lt!67823 e!85073)))

(declare-fun c!24072 () Bool)

(assert (=> d!39785 (= c!24072 lt!67824)))

(assert (=> d!39785 (= lt!67824 (containsKey!173 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39785 (= (contains!873 lt!67403 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67822)))

(declare-fun b!130420 () Bool)

(declare-fun lt!67825 () Unit!4042)

(assert (=> b!130420 (= e!85073 lt!67825)))

(assert (=> b!130420 (= lt!67825 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> b!130420 (isDefined!122 (getValueByKey!170 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130421 () Bool)

(declare-fun Unit!4077 () Unit!4042)

(assert (=> b!130421 (= e!85073 Unit!4077)))

(declare-fun b!130422 () Bool)

(assert (=> b!130422 (= e!85072 (isDefined!122 (getValueByKey!170 (toList!837 lt!67403) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39785 c!24072) b!130420))

(assert (= (and d!39785 (not c!24072)) b!130421))

(assert (= (and d!39785 (not res!62859)) b!130422))

(declare-fun m!153659 () Bool)

(assert (=> d!39785 m!153659))

(declare-fun m!153661 () Bool)

(assert (=> b!130420 m!153661))

(assert (=> b!130420 m!152649))

(assert (=> b!130420 m!152649))

(declare-fun m!153663 () Bool)

(assert (=> b!130420 m!153663))

(assert (=> b!130422 m!152649))

(assert (=> b!130422 m!152649))

(assert (=> b!130422 m!153663))

(assert (=> d!39497 d!39785))

(declare-fun b!130423 () Bool)

(declare-fun e!85074 () Option!176)

(assert (=> b!130423 (= e!85074 (Some!175 (_2!1283 (h!2285 lt!67404))))))

(declare-fun b!130426 () Bool)

(declare-fun e!85075 () Option!176)

(assert (=> b!130426 (= e!85075 None!174)))

(declare-fun b!130425 () Bool)

(assert (=> b!130425 (= e!85075 (getValueByKey!170 (t!6076 lt!67404) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130424 () Bool)

(assert (=> b!130424 (= e!85074 e!85075)))

(declare-fun c!24074 () Bool)

(assert (=> b!130424 (= c!24074 (and ((_ is Cons!1681) lt!67404) (not (= (_1!1283 (h!2285 lt!67404)) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!39787 () Bool)

(declare-fun c!24073 () Bool)

(assert (=> d!39787 (= c!24073 (and ((_ is Cons!1681) lt!67404) (= (_1!1283 (h!2285 lt!67404)) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39787 (= (getValueByKey!170 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85074)))

(assert (= (and d!39787 c!24073) b!130423))

(assert (= (and d!39787 (not c!24073)) b!130424))

(assert (= (and b!130424 c!24074) b!130425))

(assert (= (and b!130424 (not c!24074)) b!130426))

(declare-fun m!153665 () Bool)

(assert (=> b!130425 m!153665))

(assert (=> d!39497 d!39787))

(declare-fun d!39789 () Bool)

(assert (=> d!39789 (= (getValueByKey!170 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67826 () Unit!4042)

(assert (=> d!39789 (= lt!67826 (choose!802 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!85076 () Bool)

(assert (=> d!39789 e!85076))

(declare-fun res!62860 () Bool)

(assert (=> d!39789 (=> (not res!62860) (not e!85076))))

(assert (=> d!39789 (= res!62860 (isStrictlySorted!306 lt!67404))))

(assert (=> d!39789 (= (lemmaContainsTupThenGetReturnValue!85 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67826)))

(declare-fun b!130427 () Bool)

(declare-fun res!62861 () Bool)

(assert (=> b!130427 (=> (not res!62861) (not e!85076))))

(assert (=> b!130427 (= res!62861 (containsKey!173 lt!67404 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130428 () Bool)

(assert (=> b!130428 (= e!85076 (contains!875 lt!67404 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39789 res!62860) b!130427))

(assert (= (and b!130427 res!62861) b!130428))

(assert (=> d!39789 m!152643))

(declare-fun m!153667 () Bool)

(assert (=> d!39789 m!153667))

(declare-fun m!153669 () Bool)

(assert (=> d!39789 m!153669))

(declare-fun m!153671 () Bool)

(assert (=> b!130427 m!153671))

(declare-fun m!153673 () Bool)

(assert (=> b!130428 m!153673))

(assert (=> d!39497 d!39789))

(declare-fun bm!14180 () Bool)

(declare-fun c!24076 () Bool)

(declare-fun e!85077 () List!1685)

(declare-fun call!14183 () List!1685)

(assert (=> bm!14180 (= call!14183 ($colon$colon!90 e!85077 (ite c!24076 (h!2285 (toList!837 lt!67269)) (tuple2!2545 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24078 () Bool)

(assert (=> bm!14180 (= c!24078 c!24076)))

(declare-fun b!130430 () Bool)

(assert (=> b!130430 (= e!85077 (insertStrictlySorted!88 (t!6076 (toList!837 lt!67269)) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130431 () Bool)

(declare-fun res!62863 () Bool)

(declare-fun e!85081 () Bool)

(assert (=> b!130431 (=> (not res!62863) (not e!85081))))

(declare-fun lt!67827 () List!1685)

(assert (=> b!130431 (= res!62863 (containsKey!173 lt!67827 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun c!24077 () Bool)

(declare-fun b!130432 () Bool)

(assert (=> b!130432 (= c!24077 (and ((_ is Cons!1681) (toList!837 lt!67269)) (bvsgt (_1!1283 (h!2285 (toList!837 lt!67269))) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!85079 () List!1685)

(declare-fun e!85078 () List!1685)

(assert (=> b!130432 (= e!85079 e!85078)))

(declare-fun c!24075 () Bool)

(declare-fun b!130429 () Bool)

(assert (=> b!130429 (= e!85077 (ite c!24075 (t!6076 (toList!837 lt!67269)) (ite c!24077 (Cons!1681 (h!2285 (toList!837 lt!67269)) (t!6076 (toList!837 lt!67269))) Nil!1682)))))

(declare-fun d!39791 () Bool)

(assert (=> d!39791 e!85081))

(declare-fun res!62862 () Bool)

(assert (=> d!39791 (=> (not res!62862) (not e!85081))))

(assert (=> d!39791 (= res!62862 (isStrictlySorted!306 lt!67827))))

(declare-fun e!85080 () List!1685)

(assert (=> d!39791 (= lt!67827 e!85080)))

(assert (=> d!39791 (= c!24076 (and ((_ is Cons!1681) (toList!837 lt!67269)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67269))) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39791 (isStrictlySorted!306 (toList!837 lt!67269))))

(assert (=> d!39791 (= (insertStrictlySorted!88 (toList!837 lt!67269) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67827)))

(declare-fun bm!14181 () Bool)

(declare-fun call!14184 () List!1685)

(declare-fun call!14185 () List!1685)

(assert (=> bm!14181 (= call!14184 call!14185)))

(declare-fun bm!14182 () Bool)

(assert (=> bm!14182 (= call!14185 call!14183)))

(declare-fun b!130433 () Bool)

(assert (=> b!130433 (= e!85080 e!85079)))

(assert (=> b!130433 (= c!24075 (and ((_ is Cons!1681) (toList!837 lt!67269)) (= (_1!1283 (h!2285 (toList!837 lt!67269))) (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130434 () Bool)

(assert (=> b!130434 (= e!85081 (contains!875 lt!67827 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130435 () Bool)

(assert (=> b!130435 (= e!85079 call!14185)))

(declare-fun b!130436 () Bool)

(assert (=> b!130436 (= e!85078 call!14184)))

(declare-fun b!130437 () Bool)

(assert (=> b!130437 (= e!85080 call!14183)))

(declare-fun b!130438 () Bool)

(assert (=> b!130438 (= e!85078 call!14184)))

(assert (= (and d!39791 c!24076) b!130437))

(assert (= (and d!39791 (not c!24076)) b!130433))

(assert (= (and b!130433 c!24075) b!130435))

(assert (= (and b!130433 (not c!24075)) b!130432))

(assert (= (and b!130432 c!24077) b!130438))

(assert (= (and b!130432 (not c!24077)) b!130436))

(assert (= (or b!130438 b!130436) bm!14181))

(assert (= (or b!130435 bm!14181) bm!14182))

(assert (= (or b!130437 bm!14182) bm!14180))

(assert (= (and bm!14180 c!24078) b!130430))

(assert (= (and bm!14180 (not c!24078)) b!130429))

(assert (= (and d!39791 res!62862) b!130431))

(assert (= (and b!130431 res!62863) b!130434))

(declare-fun m!153675 () Bool)

(assert (=> bm!14180 m!153675))

(declare-fun m!153677 () Bool)

(assert (=> b!130430 m!153677))

(declare-fun m!153679 () Bool)

(assert (=> b!130431 m!153679))

(declare-fun m!153681 () Bool)

(assert (=> b!130434 m!153681))

(declare-fun m!153683 () Bool)

(assert (=> d!39791 m!153683))

(declare-fun m!153685 () Bool)

(assert (=> d!39791 m!153685))

(assert (=> d!39497 d!39791))

(declare-fun d!39793 () Bool)

(declare-fun e!85082 () Bool)

(assert (=> d!39793 e!85082))

(declare-fun res!62864 () Bool)

(assert (=> d!39793 (=> res!62864 e!85082)))

(declare-fun lt!67828 () Bool)

(assert (=> d!39793 (= res!62864 (not lt!67828))))

(declare-fun lt!67830 () Bool)

(assert (=> d!39793 (= lt!67828 lt!67830)))

(declare-fun lt!67829 () Unit!4042)

(declare-fun e!85083 () Unit!4042)

(assert (=> d!39793 (= lt!67829 e!85083)))

(declare-fun c!24079 () Bool)

(assert (=> d!39793 (= c!24079 lt!67830)))

(assert (=> d!39793 (= lt!67830 (containsKey!173 (toList!837 lt!67356) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39793 (= (contains!873 lt!67356 #b1000000000000000000000000000000000000000000000000000000000000000) lt!67828)))

(declare-fun b!130439 () Bool)

(declare-fun lt!67831 () Unit!4042)

(assert (=> b!130439 (= e!85083 lt!67831)))

(assert (=> b!130439 (= lt!67831 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67356) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130439 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130440 () Bool)

(declare-fun Unit!4078 () Unit!4042)

(assert (=> b!130440 (= e!85083 Unit!4078)))

(declare-fun b!130441 () Bool)

(assert (=> b!130441 (= e!85082 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39793 c!24079) b!130439))

(assert (= (and d!39793 (not c!24079)) b!130440))

(assert (= (and d!39793 (not res!62864)) b!130441))

(declare-fun m!153687 () Bool)

(assert (=> d!39793 m!153687))

(declare-fun m!153689 () Bool)

(assert (=> b!130439 m!153689))

(declare-fun m!153691 () Bool)

(assert (=> b!130439 m!153691))

(assert (=> b!130439 m!153691))

(declare-fun m!153693 () Bool)

(assert (=> b!130439 m!153693))

(assert (=> b!130441 m!153691))

(assert (=> b!130441 m!153691))

(assert (=> b!130441 m!153693))

(assert (=> bm!14098 d!39793))

(declare-fun d!39795 () Bool)

(assert (=> d!39795 (= (apply!113 lt!67293 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67293) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5428 () Bool)

(assert (= bs!5428 d!39795))

(declare-fun m!153695 () Bool)

(assert (=> bs!5428 m!153695))

(assert (=> bs!5428 m!153695))

(declare-fun m!153697 () Bool)

(assert (=> bs!5428 m!153697))

(assert (=> b!129738 d!39795))

(declare-fun d!39797 () Bool)

(declare-fun e!85084 () Bool)

(assert (=> d!39797 e!85084))

(declare-fun res!62866 () Bool)

(assert (=> d!39797 (=> (not res!62866) (not e!85084))))

(declare-fun lt!67833 () ListLongMap!1643)

(assert (=> d!39797 (= res!62866 (contains!873 lt!67833 (_1!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))))))

(declare-fun lt!67834 () List!1685)

(assert (=> d!39797 (= lt!67833 (ListLongMap!1644 lt!67834))))

(declare-fun lt!67835 () Unit!4042)

(declare-fun lt!67832 () Unit!4042)

(assert (=> d!39797 (= lt!67835 lt!67832)))

(assert (=> d!39797 (= (getValueByKey!170 lt!67834 (_1!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))))))

(assert (=> d!39797 (= lt!67832 (lemmaContainsTupThenGetReturnValue!85 lt!67834 (_1!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))))))

(assert (=> d!39797 (= lt!67834 (insertStrictlySorted!88 (toList!837 lt!67309) (_1!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))))))

(assert (=> d!39797 (= (+!166 lt!67309 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) lt!67833)))

(declare-fun b!130442 () Bool)

(declare-fun res!62865 () Bool)

(assert (=> b!130442 (=> (not res!62865) (not e!85084))))

(assert (=> b!130442 (= res!62865 (= (getValueByKey!170 (toList!837 lt!67833) (_1!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))))))))

(declare-fun b!130443 () Bool)

(assert (=> b!130443 (= e!85084 (contains!875 (toList!837 lt!67833) (tuple2!2545 lt!67297 (minValue!2682 newMap!16))))))

(assert (= (and d!39797 res!62866) b!130442))

(assert (= (and b!130442 res!62865) b!130443))

(declare-fun m!153699 () Bool)

(assert (=> d!39797 m!153699))

(declare-fun m!153701 () Bool)

(assert (=> d!39797 m!153701))

(declare-fun m!153703 () Bool)

(assert (=> d!39797 m!153703))

(declare-fun m!153705 () Bool)

(assert (=> d!39797 m!153705))

(declare-fun m!153707 () Bool)

(assert (=> b!130442 m!153707))

(declare-fun m!153709 () Bool)

(assert (=> b!130443 m!153709))

(assert (=> b!129740 d!39797))

(declare-fun b!130444 () Bool)

(declare-fun e!85091 () Bool)

(declare-fun e!85087 () Bool)

(assert (=> b!130444 (= e!85091 e!85087)))

(declare-fun c!24083 () Bool)

(declare-fun e!85086 () Bool)

(assert (=> b!130444 (= c!24083 e!85086)))

(declare-fun res!62870 () Bool)

(assert (=> b!130444 (=> (not res!62870) (not e!85086))))

(assert (=> b!130444 (= res!62870 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130445 () Bool)

(assert (=> b!130445 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> b!130445 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))))))))

(declare-fun lt!67840 () ListLongMap!1643)

(declare-fun e!85090 () Bool)

(assert (=> b!130445 (= e!85090 (= (apply!113 lt!67840 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!130446 () Bool)

(declare-fun e!85088 () Bool)

(assert (=> b!130446 (= e!85088 (= lt!67840 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16))))))

(declare-fun b!130447 () Bool)

(declare-fun lt!67839 () Unit!4042)

(declare-fun lt!67842 () Unit!4042)

(assert (=> b!130447 (= lt!67839 lt!67842)))

(declare-fun lt!67837 () (_ BitVec 64))

(declare-fun lt!67836 () ListLongMap!1643)

(declare-fun lt!67838 () V!3457)

(declare-fun lt!67841 () (_ BitVec 64))

(assert (=> b!130447 (not (contains!873 (+!166 lt!67836 (tuple2!2545 lt!67837 lt!67838)) lt!67841))))

(assert (=> b!130447 (= lt!67842 (addStillNotContains!60 lt!67836 lt!67837 lt!67838 lt!67841))))

(assert (=> b!130447 (= lt!67841 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!130447 (= lt!67838 (get!1469 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!130447 (= lt!67837 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!14186 () ListLongMap!1643)

(assert (=> b!130447 (= lt!67836 call!14186)))

(declare-fun e!85089 () ListLongMap!1643)

(assert (=> b!130447 (= e!85089 (+!166 call!14186 (tuple2!2545 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (get!1469 (select (arr!2235 (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130448 () Bool)

(assert (=> b!130448 (= e!85088 (isEmpty!408 lt!67840))))

(declare-fun d!39799 () Bool)

(assert (=> d!39799 e!85091))

(declare-fun res!62867 () Bool)

(assert (=> d!39799 (=> (not res!62867) (not e!85091))))

(assert (=> d!39799 (= res!62867 (not (contains!873 lt!67840 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!85085 () ListLongMap!1643)

(assert (=> d!39799 (= lt!67840 e!85085)))

(declare-fun c!24082 () Bool)

(assert (=> d!39799 (= c!24082 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39799 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39799 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67840)))

(declare-fun b!130449 () Bool)

(assert (=> b!130449 (= e!85086 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130449 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!130450 () Bool)

(assert (=> b!130450 (= e!85087 e!85090)))

(assert (=> b!130450 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!62868 () Bool)

(assert (=> b!130450 (= res!62868 (contains!873 lt!67840 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130450 (=> (not res!62868) (not e!85090))))

(declare-fun b!130451 () Bool)

(assert (=> b!130451 (= e!85087 e!85088)))

(declare-fun c!24080 () Bool)

(assert (=> b!130451 (= c!24080 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130452 () Bool)

(assert (=> b!130452 (= e!85085 e!85089)))

(declare-fun c!24081 () Bool)

(assert (=> b!130452 (= c!24081 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130453 () Bool)

(assert (=> b!130453 (= e!85085 (ListLongMap!1644 Nil!1682))))

(declare-fun b!130454 () Bool)

(assert (=> b!130454 (= e!85089 call!14186)))

(declare-fun bm!14183 () Bool)

(assert (=> bm!14183 (= call!14186 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (ite (or c!23855 c!23846) (_values!2806 newMap!16) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (index!3222 lt!67192) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16)))))

(declare-fun b!130455 () Bool)

(declare-fun res!62869 () Bool)

(assert (=> b!130455 (=> (not res!62869) (not e!85091))))

(assert (=> b!130455 (= res!62869 (not (contains!873 lt!67840 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39799 c!24082) b!130453))

(assert (= (and d!39799 (not c!24082)) b!130452))

(assert (= (and b!130452 c!24081) b!130447))

(assert (= (and b!130452 (not c!24081)) b!130454))

(assert (= (or b!130447 b!130454) bm!14183))

(assert (= (and d!39799 res!62867) b!130455))

(assert (= (and b!130455 res!62869) b!130444))

(assert (= (and b!130444 res!62870) b!130449))

(assert (= (and b!130444 c!24083) b!130450))

(assert (= (and b!130444 (not c!24083)) b!130451))

(assert (= (and b!130450 res!62868) b!130445))

(assert (= (and b!130451 c!24080) b!130446))

(assert (= (and b!130451 (not c!24080)) b!130448))

(declare-fun b_lambda!5801 () Bool)

(assert (=> (not b_lambda!5801) (not b!130445)))

(assert (=> b!130445 t!6088))

(declare-fun b_and!8077 () Bool)

(assert (= b_and!8073 (and (=> t!6088 result!3917) b_and!8077)))

(assert (=> b!130445 t!6090))

(declare-fun b_and!8079 () Bool)

(assert (= b_and!8075 (and (=> t!6090 result!3919) b_and!8079)))

(declare-fun b_lambda!5803 () Bool)

(assert (=> (not b_lambda!5803) (not b!130447)))

(assert (=> b!130447 t!6088))

(declare-fun b_and!8081 () Bool)

(assert (= b_and!8077 (and (=> t!6088 result!3917) b_and!8081)))

(assert (=> b!130447 t!6090))

(declare-fun b_and!8083 () Bool)

(assert (= b_and!8079 (and (=> t!6090 result!3919) b_and!8083)))

(declare-fun m!153711 () Bool)

(assert (=> b!130448 m!153711))

(declare-fun m!153713 () Bool)

(assert (=> bm!14183 m!153713))

(assert (=> b!130446 m!153713))

(assert (=> b!130450 m!152369))

(assert (=> b!130450 m!152369))

(declare-fun m!153715 () Bool)

(assert (=> b!130450 m!153715))

(assert (=> b!130445 m!152369))

(declare-fun m!153717 () Bool)

(assert (=> b!130445 m!153717))

(assert (=> b!130445 m!152441))

(assert (=> b!130445 m!152439))

(assert (=> b!130445 m!152441))

(assert (=> b!130445 m!152443))

(assert (=> b!130445 m!152369))

(assert (=> b!130445 m!152439))

(declare-fun m!153719 () Bool)

(assert (=> b!130455 m!153719))

(declare-fun m!153721 () Bool)

(assert (=> b!130447 m!153721))

(declare-fun m!153723 () Bool)

(assert (=> b!130447 m!153723))

(assert (=> b!130447 m!153721))

(declare-fun m!153725 () Bool)

(assert (=> b!130447 m!153725))

(assert (=> b!130447 m!152441))

(assert (=> b!130447 m!152439))

(assert (=> b!130447 m!152441))

(assert (=> b!130447 m!152443))

(assert (=> b!130447 m!152369))

(assert (=> b!130447 m!152439))

(declare-fun m!153727 () Bool)

(assert (=> b!130447 m!153727))

(assert (=> b!130452 m!152369))

(assert (=> b!130452 m!152369))

(assert (=> b!130452 m!152403))

(declare-fun m!153729 () Bool)

(assert (=> d!39799 m!153729))

(assert (=> d!39799 m!152389))

(assert (=> b!130449 m!152369))

(assert (=> b!130449 m!152369))

(assert (=> b!130449 m!152403))

(assert (=> b!129740 d!39799))

(declare-fun d!39801 () Bool)

(assert (=> d!39801 (= (apply!113 (+!166 lt!67301 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) lt!67295) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67301 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))) lt!67295)))))

(declare-fun bs!5429 () Bool)

(assert (= bs!5429 d!39801))

(declare-fun m!153731 () Bool)

(assert (=> bs!5429 m!153731))

(assert (=> bs!5429 m!153731))

(declare-fun m!153733 () Bool)

(assert (=> bs!5429 m!153733))

(assert (=> b!129740 d!39801))

(declare-fun d!39803 () Bool)

(assert (=> d!39803 (= (apply!113 lt!67292 lt!67311) (get!1473 (getValueByKey!170 (toList!837 lt!67292) lt!67311)))))

(declare-fun bs!5430 () Bool)

(assert (= bs!5430 d!39803))

(declare-fun m!153735 () Bool)

(assert (=> bs!5430 m!153735))

(assert (=> bs!5430 m!153735))

(declare-fun m!153737 () Bool)

(assert (=> bs!5430 m!153737))

(assert (=> b!129740 d!39803))

(declare-fun d!39805 () Bool)

(declare-fun e!85092 () Bool)

(assert (=> d!39805 e!85092))

(declare-fun res!62872 () Bool)

(assert (=> d!39805 (=> (not res!62872) (not e!85092))))

(declare-fun lt!67844 () ListLongMap!1643)

(assert (=> d!39805 (= res!62872 (contains!873 lt!67844 (_1!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67845 () List!1685)

(assert (=> d!39805 (= lt!67844 (ListLongMap!1644 lt!67845))))

(declare-fun lt!67846 () Unit!4042)

(declare-fun lt!67843 () Unit!4042)

(assert (=> d!39805 (= lt!67846 lt!67843)))

(assert (=> d!39805 (= (getValueByKey!170 lt!67845 (_1!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39805 (= lt!67843 (lemmaContainsTupThenGetReturnValue!85 lt!67845 (_1!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39805 (= lt!67845 (insertStrictlySorted!88 (toList!837 lt!67299) (_1!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39805 (= (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) lt!67844)))

(declare-fun b!130456 () Bool)

(declare-fun res!62871 () Bool)

(assert (=> b!130456 (=> (not res!62871) (not e!85092))))

(assert (=> b!130456 (= res!62871 (= (getValueByKey!170 (toList!837 lt!67844) (_1!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130457 () Bool)

(assert (=> b!130457 (= e!85092 (contains!875 (toList!837 lt!67844) (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39805 res!62872) b!130456))

(assert (= (and b!130456 res!62871) b!130457))

(declare-fun m!153739 () Bool)

(assert (=> d!39805 m!153739))

(declare-fun m!153741 () Bool)

(assert (=> d!39805 m!153741))

(declare-fun m!153743 () Bool)

(assert (=> d!39805 m!153743))

(declare-fun m!153745 () Bool)

(assert (=> d!39805 m!153745))

(declare-fun m!153747 () Bool)

(assert (=> b!130456 m!153747))

(declare-fun m!153749 () Bool)

(assert (=> b!130457 m!153749))

(assert (=> b!129740 d!39805))

(declare-fun d!39807 () Bool)

(assert (=> d!39807 (contains!873 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) lt!67306)))

(declare-fun lt!67847 () Unit!4042)

(assert (=> d!39807 (= lt!67847 (choose!795 lt!67299 lt!67294 (zeroValue!2682 newMap!16) lt!67306))))

(assert (=> d!39807 (contains!873 lt!67299 lt!67306)))

(assert (=> d!39807 (= (addStillContains!89 lt!67299 lt!67294 (zeroValue!2682 newMap!16) lt!67306) lt!67847)))

(declare-fun bs!5431 () Bool)

(assert (= bs!5431 d!39807))

(assert (=> bs!5431 m!152413))

(assert (=> bs!5431 m!152413))

(assert (=> bs!5431 m!152427))

(declare-fun m!153751 () Bool)

(assert (=> bs!5431 m!153751))

(declare-fun m!153753 () Bool)

(assert (=> bs!5431 m!153753))

(assert (=> b!129740 d!39807))

(declare-fun d!39809 () Bool)

(assert (=> d!39809 (= (apply!113 lt!67301 lt!67295) (get!1473 (getValueByKey!170 (toList!837 lt!67301) lt!67295)))))

(declare-fun bs!5432 () Bool)

(assert (= bs!5432 d!39809))

(declare-fun m!153755 () Bool)

(assert (=> bs!5432 m!153755))

(assert (=> bs!5432 m!153755))

(declare-fun m!153757 () Bool)

(assert (=> bs!5432 m!153757))

(assert (=> b!129740 d!39809))

(declare-fun d!39811 () Bool)

(assert (=> d!39811 (= (apply!113 (+!166 lt!67309 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) lt!67304) (apply!113 lt!67309 lt!67304))))

(declare-fun lt!67848 () Unit!4042)

(assert (=> d!39811 (= lt!67848 (choose!794 lt!67309 lt!67297 (minValue!2682 newMap!16) lt!67304))))

(declare-fun e!85093 () Bool)

(assert (=> d!39811 e!85093))

(declare-fun res!62873 () Bool)

(assert (=> d!39811 (=> (not res!62873) (not e!85093))))

(assert (=> d!39811 (= res!62873 (contains!873 lt!67309 lt!67304))))

(assert (=> d!39811 (= (addApplyDifferent!89 lt!67309 lt!67297 (minValue!2682 newMap!16) lt!67304) lt!67848)))

(declare-fun b!130458 () Bool)

(assert (=> b!130458 (= e!85093 (not (= lt!67304 lt!67297)))))

(assert (= (and d!39811 res!62873) b!130458))

(declare-fun m!153759 () Bool)

(assert (=> d!39811 m!153759))

(assert (=> d!39811 m!152415))

(assert (=> d!39811 m!152417))

(assert (=> d!39811 m!152415))

(assert (=> d!39811 m!152405))

(declare-fun m!153761 () Bool)

(assert (=> d!39811 m!153761))

(assert (=> b!129740 d!39811))

(declare-fun d!39813 () Bool)

(declare-fun e!85094 () Bool)

(assert (=> d!39813 e!85094))

(declare-fun res!62875 () Bool)

(assert (=> d!39813 (=> (not res!62875) (not e!85094))))

(declare-fun lt!67850 () ListLongMap!1643)

(assert (=> d!39813 (= res!62875 (contains!873 lt!67850 (_1!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67851 () List!1685)

(assert (=> d!39813 (= lt!67850 (ListLongMap!1644 lt!67851))))

(declare-fun lt!67852 () Unit!4042)

(declare-fun lt!67849 () Unit!4042)

(assert (=> d!39813 (= lt!67852 lt!67849)))

(assert (=> d!39813 (= (getValueByKey!170 lt!67851 (_1!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39813 (= lt!67849 (lemmaContainsTupThenGetReturnValue!85 lt!67851 (_1!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39813 (= lt!67851 (insertStrictlySorted!88 (toList!837 lt!67301) (_1!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39813 (= (+!166 lt!67301 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) lt!67850)))

(declare-fun b!130459 () Bool)

(declare-fun res!62874 () Bool)

(assert (=> b!130459 (=> (not res!62874) (not e!85094))))

(assert (=> b!130459 (= res!62874 (= (getValueByKey!170 (toList!837 lt!67850) (_1!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130460 () Bool)

(assert (=> b!130460 (= e!85094 (contains!875 (toList!837 lt!67850) (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39813 res!62875) b!130459))

(assert (= (and b!130459 res!62874) b!130460))

(declare-fun m!153763 () Bool)

(assert (=> d!39813 m!153763))

(declare-fun m!153765 () Bool)

(assert (=> d!39813 m!153765))

(declare-fun m!153767 () Bool)

(assert (=> d!39813 m!153767))

(declare-fun m!153769 () Bool)

(assert (=> d!39813 m!153769))

(declare-fun m!153771 () Bool)

(assert (=> b!130459 m!153771))

(declare-fun m!153773 () Bool)

(assert (=> b!130460 m!153773))

(assert (=> b!129740 d!39813))

(declare-fun d!39815 () Bool)

(assert (=> d!39815 (= (apply!113 (+!166 lt!67292 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) lt!67311) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67292 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))) lt!67311)))))

(declare-fun bs!5433 () Bool)

(assert (= bs!5433 d!39815))

(declare-fun m!153775 () Bool)

(assert (=> bs!5433 m!153775))

(assert (=> bs!5433 m!153775))

(declare-fun m!153777 () Bool)

(assert (=> bs!5433 m!153777))

(assert (=> b!129740 d!39815))

(declare-fun d!39817 () Bool)

(assert (=> d!39817 (= (apply!113 (+!166 lt!67292 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) lt!67311) (apply!113 lt!67292 lt!67311))))

(declare-fun lt!67853 () Unit!4042)

(assert (=> d!39817 (= lt!67853 (choose!794 lt!67292 lt!67300 (minValue!2682 newMap!16) lt!67311))))

(declare-fun e!85095 () Bool)

(assert (=> d!39817 e!85095))

(declare-fun res!62876 () Bool)

(assert (=> d!39817 (=> (not res!62876) (not e!85095))))

(assert (=> d!39817 (= res!62876 (contains!873 lt!67292 lt!67311))))

(assert (=> d!39817 (= (addApplyDifferent!89 lt!67292 lt!67300 (minValue!2682 newMap!16) lt!67311) lt!67853)))

(declare-fun b!130461 () Bool)

(assert (=> b!130461 (= e!85095 (not (= lt!67311 lt!67300)))))

(assert (= (and d!39817 res!62876) b!130461))

(declare-fun m!153779 () Bool)

(assert (=> d!39817 m!153779))

(assert (=> d!39817 m!152407))

(assert (=> d!39817 m!152409))

(assert (=> d!39817 m!152407))

(assert (=> d!39817 m!152425))

(declare-fun m!153781 () Bool)

(assert (=> d!39817 m!153781))

(assert (=> b!129740 d!39817))

(declare-fun d!39819 () Bool)

(declare-fun e!85096 () Bool)

(assert (=> d!39819 e!85096))

(declare-fun res!62878 () Bool)

(assert (=> d!39819 (=> (not res!62878) (not e!85096))))

(declare-fun lt!67855 () ListLongMap!1643)

(assert (=> d!39819 (= res!62878 (contains!873 lt!67855 (_1!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))))))

(declare-fun lt!67856 () List!1685)

(assert (=> d!39819 (= lt!67855 (ListLongMap!1644 lt!67856))))

(declare-fun lt!67857 () Unit!4042)

(declare-fun lt!67854 () Unit!4042)

(assert (=> d!39819 (= lt!67857 lt!67854)))

(assert (=> d!39819 (= (getValueByKey!170 lt!67856 (_1!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))))))

(assert (=> d!39819 (= lt!67854 (lemmaContainsTupThenGetReturnValue!85 lt!67856 (_1!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))))))

(assert (=> d!39819 (= lt!67856 (insertStrictlySorted!88 (toList!837 lt!67292) (_1!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))))))

(assert (=> d!39819 (= (+!166 lt!67292 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))) lt!67855)))

(declare-fun b!130462 () Bool)

(declare-fun res!62877 () Bool)

(assert (=> b!130462 (=> (not res!62877) (not e!85096))))

(assert (=> b!130462 (= res!62877 (= (getValueByKey!170 (toList!837 lt!67855) (_1!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67300 (minValue!2682 newMap!16))))))))

(declare-fun b!130463 () Bool)

(assert (=> b!130463 (= e!85096 (contains!875 (toList!837 lt!67855) (tuple2!2545 lt!67300 (minValue!2682 newMap!16))))))

(assert (= (and d!39819 res!62878) b!130462))

(assert (= (and b!130462 res!62877) b!130463))

(declare-fun m!153783 () Bool)

(assert (=> d!39819 m!153783))

(declare-fun m!153785 () Bool)

(assert (=> d!39819 m!153785))

(declare-fun m!153787 () Bool)

(assert (=> d!39819 m!153787))

(declare-fun m!153789 () Bool)

(assert (=> d!39819 m!153789))

(declare-fun m!153791 () Bool)

(assert (=> b!130462 m!153791))

(declare-fun m!153793 () Bool)

(assert (=> b!130463 m!153793))

(assert (=> b!129740 d!39819))

(declare-fun d!39821 () Bool)

(assert (=> d!39821 (= (apply!113 (+!166 lt!67309 (tuple2!2545 lt!67297 (minValue!2682 newMap!16))) lt!67304) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67309 (tuple2!2545 lt!67297 (minValue!2682 newMap!16)))) lt!67304)))))

(declare-fun bs!5434 () Bool)

(assert (= bs!5434 d!39821))

(declare-fun m!153795 () Bool)

(assert (=> bs!5434 m!153795))

(assert (=> bs!5434 m!153795))

(declare-fun m!153797 () Bool)

(assert (=> bs!5434 m!153797))

(assert (=> b!129740 d!39821))

(declare-fun d!39823 () Bool)

(assert (=> d!39823 (= (apply!113 (+!166 lt!67301 (tuple2!2545 lt!67310 (zeroValue!2682 newMap!16))) lt!67295) (apply!113 lt!67301 lt!67295))))

(declare-fun lt!67858 () Unit!4042)

(assert (=> d!39823 (= lt!67858 (choose!794 lt!67301 lt!67310 (zeroValue!2682 newMap!16) lt!67295))))

(declare-fun e!85097 () Bool)

(assert (=> d!39823 e!85097))

(declare-fun res!62879 () Bool)

(assert (=> d!39823 (=> (not res!62879) (not e!85097))))

(assert (=> d!39823 (= res!62879 (contains!873 lt!67301 lt!67295))))

(assert (=> d!39823 (= (addApplyDifferent!89 lt!67301 lt!67310 (zeroValue!2682 newMap!16) lt!67295) lt!67858)))

(declare-fun b!130464 () Bool)

(assert (=> b!130464 (= e!85097 (not (= lt!67295 lt!67310)))))

(assert (= (and d!39823 res!62879) b!130464))

(declare-fun m!153799 () Bool)

(assert (=> d!39823 m!153799))

(assert (=> d!39823 m!152419))

(assert (=> d!39823 m!152423))

(assert (=> d!39823 m!152419))

(assert (=> d!39823 m!152431))

(declare-fun m!153801 () Bool)

(assert (=> d!39823 m!153801))

(assert (=> b!129740 d!39823))

(declare-fun d!39825 () Bool)

(declare-fun e!85098 () Bool)

(assert (=> d!39825 e!85098))

(declare-fun res!62880 () Bool)

(assert (=> d!39825 (=> res!62880 e!85098)))

(declare-fun lt!67859 () Bool)

(assert (=> d!39825 (= res!62880 (not lt!67859))))

(declare-fun lt!67861 () Bool)

(assert (=> d!39825 (= lt!67859 lt!67861)))

(declare-fun lt!67860 () Unit!4042)

(declare-fun e!85099 () Unit!4042)

(assert (=> d!39825 (= lt!67860 e!85099)))

(declare-fun c!24084 () Bool)

(assert (=> d!39825 (= c!24084 lt!67861)))

(assert (=> d!39825 (= lt!67861 (containsKey!173 (toList!837 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) lt!67306))))

(assert (=> d!39825 (= (contains!873 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16))) lt!67306) lt!67859)))

(declare-fun b!130465 () Bool)

(declare-fun lt!67862 () Unit!4042)

(assert (=> b!130465 (= e!85099 lt!67862)))

(assert (=> b!130465 (= lt!67862 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) lt!67306))))

(assert (=> b!130465 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) lt!67306))))

(declare-fun b!130466 () Bool)

(declare-fun Unit!4079 () Unit!4042)

(assert (=> b!130466 (= e!85099 Unit!4079)))

(declare-fun b!130467 () Bool)

(assert (=> b!130467 (= e!85098 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67299 (tuple2!2545 lt!67294 (zeroValue!2682 newMap!16)))) lt!67306)))))

(assert (= (and d!39825 c!24084) b!130465))

(assert (= (and d!39825 (not c!24084)) b!130466))

(assert (= (and d!39825 (not res!62880)) b!130467))

(declare-fun m!153803 () Bool)

(assert (=> d!39825 m!153803))

(declare-fun m!153805 () Bool)

(assert (=> b!130465 m!153805))

(declare-fun m!153807 () Bool)

(assert (=> b!130465 m!153807))

(assert (=> b!130465 m!153807))

(declare-fun m!153809 () Bool)

(assert (=> b!130465 m!153809))

(assert (=> b!130467 m!153807))

(assert (=> b!130467 m!153807))

(assert (=> b!130467 m!153809))

(assert (=> b!129740 d!39825))

(declare-fun d!39827 () Bool)

(assert (=> d!39827 (= (apply!113 lt!67309 lt!67304) (get!1473 (getValueByKey!170 (toList!837 lt!67309) lt!67304)))))

(declare-fun bs!5435 () Bool)

(assert (= bs!5435 d!39827))

(declare-fun m!153811 () Bool)

(assert (=> bs!5435 m!153811))

(assert (=> bs!5435 m!153811))

(declare-fun m!153813 () Bool)

(assert (=> bs!5435 m!153813))

(assert (=> b!129740 d!39827))

(declare-fun d!39829 () Bool)

(declare-fun lt!67863 () Bool)

(assert (=> d!39829 (= lt!67863 (select (content!131 (toList!837 lt!67602)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!85101 () Bool)

(assert (=> d!39829 (= lt!67863 e!85101)))

(declare-fun res!62881 () Bool)

(assert (=> d!39829 (=> (not res!62881) (not e!85101))))

(assert (=> d!39829 (= res!62881 ((_ is Cons!1681) (toList!837 lt!67602)))))

(assert (=> d!39829 (= (contains!875 (toList!837 lt!67602) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67863)))

(declare-fun b!130468 () Bool)

(declare-fun e!85100 () Bool)

(assert (=> b!130468 (= e!85101 e!85100)))

(declare-fun res!62882 () Bool)

(assert (=> b!130468 (=> res!62882 e!85100)))

(assert (=> b!130468 (= res!62882 (= (h!2285 (toList!837 lt!67602)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130469 () Bool)

(assert (=> b!130469 (= e!85100 (contains!875 (t!6076 (toList!837 lt!67602)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39829 res!62881) b!130468))

(assert (= (and b!130468 (not res!62882)) b!130469))

(declare-fun m!153815 () Bool)

(assert (=> d!39829 m!153815))

(declare-fun m!153817 () Bool)

(assert (=> d!39829 m!153817))

(declare-fun m!153819 () Bool)

(assert (=> b!130469 m!153819))

(assert (=> b!130072 d!39829))

(declare-fun d!39831 () Bool)

(assert (=> d!39831 (isDefined!122 (getValueByKey!170 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun lt!67864 () Unit!4042)

(assert (=> d!39831 (= lt!67864 (choose!797 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun e!85102 () Bool)

(assert (=> d!39831 e!85102))

(declare-fun res!62883 () Bool)

(assert (=> d!39831 (=> (not res!62883) (not e!85102))))

(assert (=> d!39831 (= res!62883 (isStrictlySorted!306 (toList!837 call!14061)))))

(assert (=> d!39831 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!67864)))

(declare-fun b!130470 () Bool)

(assert (=> b!130470 (= e!85102 (containsKey!173 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39831 res!62883) b!130470))

(assert (=> d!39831 m!152129))

(assert (=> d!39831 m!152937))

(assert (=> d!39831 m!152937))

(assert (=> d!39831 m!152939))

(assert (=> d!39831 m!152129))

(declare-fun m!153821 () Bool)

(assert (=> d!39831 m!153821))

(declare-fun m!153823 () Bool)

(assert (=> d!39831 m!153823))

(assert (=> b!130470 m!152129))

(assert (=> b!130470 m!152933))

(assert (=> b!130068 d!39831))

(assert (=> b!130068 d!39579))

(assert (=> b!130068 d!39581))

(declare-fun d!39833 () Bool)

(declare-fun e!85103 () Bool)

(assert (=> d!39833 e!85103))

(declare-fun res!62885 () Bool)

(assert (=> d!39833 (=> (not res!62885) (not e!85103))))

(declare-fun lt!67866 () ListLongMap!1643)

(assert (=> d!39833 (= res!62885 (contains!873 lt!67866 (_1!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun lt!67867 () List!1685)

(assert (=> d!39833 (= lt!67866 (ListLongMap!1644 lt!67867))))

(declare-fun lt!67868 () Unit!4042)

(declare-fun lt!67865 () Unit!4042)

(assert (=> d!39833 (= lt!67868 lt!67865)))

(assert (=> d!39833 (= (getValueByKey!170 lt!67867 (_1!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39833 (= lt!67865 (lemmaContainsTupThenGetReturnValue!85 lt!67867 (_1!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39833 (= lt!67867 (insertStrictlySorted!88 (toList!837 (ite c!23947 call!14126 (ite c!23946 call!14124 call!14127))) (_1!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39833 (= (+!166 (ite c!23947 call!14126 (ite c!23946 call!14124 call!14127)) (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) lt!67866)))

(declare-fun b!130471 () Bool)

(declare-fun res!62884 () Bool)

(assert (=> b!130471 (=> (not res!62884) (not e!85103))))

(assert (=> b!130471 (= res!62884 (= (getValueByKey!170 (toList!837 lt!67866) (_1!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))))

(declare-fun b!130472 () Bool)

(assert (=> b!130472 (= e!85103 (contains!875 (toList!837 lt!67866) (ite (or c!23947 c!23946) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (= (and d!39833 res!62885) b!130471))

(assert (= (and b!130471 res!62884) b!130472))

(declare-fun m!153825 () Bool)

(assert (=> d!39833 m!153825))

(declare-fun m!153827 () Bool)

(assert (=> d!39833 m!153827))

(declare-fun m!153829 () Bool)

(assert (=> d!39833 m!153829))

(declare-fun m!153831 () Bool)

(assert (=> d!39833 m!153831))

(declare-fun m!153833 () Bool)

(assert (=> b!130471 m!153833))

(declare-fun m!153835 () Bool)

(assert (=> b!130472 m!153835))

(assert (=> bm!14121 d!39833))

(declare-fun d!39835 () Bool)

(declare-fun e!85104 () Bool)

(assert (=> d!39835 e!85104))

(declare-fun res!62886 () Bool)

(assert (=> d!39835 (=> res!62886 e!85104)))

(declare-fun lt!67869 () Bool)

(assert (=> d!39835 (= res!62886 (not lt!67869))))

(declare-fun lt!67871 () Bool)

(assert (=> d!39835 (= lt!67869 lt!67871)))

(declare-fun lt!67870 () Unit!4042)

(declare-fun e!85105 () Unit!4042)

(assert (=> d!39835 (= lt!67870 e!85105)))

(declare-fun c!24085 () Bool)

(assert (=> d!39835 (= c!24085 lt!67871)))

(assert (=> d!39835 (= lt!67871 (containsKey!173 (toList!837 lt!67424) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!39835 (= (contains!873 lt!67424 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) lt!67869)))

(declare-fun b!130473 () Bool)

(declare-fun lt!67872 () Unit!4042)

(assert (=> b!130473 (= e!85105 lt!67872)))

(assert (=> b!130473 (= lt!67872 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67424) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130473 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130474 () Bool)

(declare-fun Unit!4080 () Unit!4042)

(assert (=> b!130474 (= e!85105 Unit!4080)))

(declare-fun b!130475 () Bool)

(assert (=> b!130475 (= e!85104 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!39835 c!24085) b!130473))

(assert (= (and d!39835 (not c!24085)) b!130474))

(assert (= (and d!39835 (not res!62886)) b!130475))

(assert (=> d!39835 m!152369))

(declare-fun m!153837 () Bool)

(assert (=> d!39835 m!153837))

(assert (=> b!130473 m!152369))

(declare-fun m!153839 () Bool)

(assert (=> b!130473 m!153839))

(assert (=> b!130473 m!152369))

(declare-fun m!153841 () Bool)

(assert (=> b!130473 m!153841))

(assert (=> b!130473 m!153841))

(declare-fun m!153843 () Bool)

(assert (=> b!130473 m!153843))

(assert (=> b!130475 m!152369))

(assert (=> b!130475 m!153841))

(assert (=> b!130475 m!153841))

(assert (=> b!130475 m!153843))

(assert (=> b!129927 d!39835))

(assert (=> b!129792 d!39725))

(declare-fun d!39837 () Bool)

(declare-fun res!62887 () Bool)

(declare-fun e!85106 () Bool)

(assert (=> d!39837 (=> res!62887 e!85106)))

(assert (=> d!39837 (= res!62887 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39837 (= (containsKey!173 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000) e!85106)))

(declare-fun b!130476 () Bool)

(declare-fun e!85107 () Bool)

(assert (=> b!130476 (= e!85106 e!85107)))

(declare-fun res!62888 () Bool)

(assert (=> b!130476 (=> (not res!62888) (not e!85107))))

(assert (=> b!130476 (= res!62888 (and (or (not ((_ is Cons!1681) (toList!837 lt!67261))) (bvsle (_1!1283 (h!2285 (toList!837 lt!67261))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1681) (toList!837 lt!67261)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67261))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!130477 () Bool)

(assert (=> b!130477 (= e!85107 (containsKey!173 (t!6076 (toList!837 lt!67261)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!39837 (not res!62887)) b!130476))

(assert (= (and b!130476 res!62888) b!130477))

(declare-fun m!153845 () Bool)

(assert (=> b!130477 m!153845))

(assert (=> d!39517 d!39837))

(assert (=> b!130007 d!39571))

(assert (=> b!130007 d!39573))

(declare-fun d!39839 () Bool)

(declare-fun e!85108 () Bool)

(assert (=> d!39839 e!85108))

(declare-fun res!62889 () Bool)

(assert (=> d!39839 (=> res!62889 e!85108)))

(declare-fun lt!67873 () Bool)

(assert (=> d!39839 (= res!62889 (not lt!67873))))

(declare-fun lt!67875 () Bool)

(assert (=> d!39839 (= lt!67873 lt!67875)))

(declare-fun lt!67874 () Unit!4042)

(declare-fun e!85109 () Unit!4042)

(assert (=> d!39839 (= lt!67874 e!85109)))

(declare-fun c!24086 () Bool)

(assert (=> d!39839 (= c!24086 lt!67875)))

(assert (=> d!39839 (= lt!67875 (containsKey!173 (toList!837 lt!67352) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!39839 (= (contains!873 lt!67352 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!67873)))

(declare-fun b!130478 () Bool)

(declare-fun lt!67876 () Unit!4042)

(assert (=> b!130478 (= e!85109 lt!67876)))

(assert (=> b!130478 (= lt!67876 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67352) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!130478 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!130479 () Bool)

(declare-fun Unit!4081 () Unit!4042)

(assert (=> b!130479 (= e!85109 Unit!4081)))

(declare-fun b!130480 () Bool)

(assert (=> b!130480 (= e!85108 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!39839 c!24086) b!130478))

(assert (= (and d!39839 (not c!24086)) b!130479))

(assert (= (and d!39839 (not res!62889)) b!130480))

(assert (=> d!39839 m!152315))

(declare-fun m!153847 () Bool)

(assert (=> d!39839 m!153847))

(assert (=> b!130478 m!152315))

(declare-fun m!153849 () Bool)

(assert (=> b!130478 m!153849))

(assert (=> b!130478 m!152315))

(declare-fun m!153851 () Bool)

(assert (=> b!130478 m!153851))

(assert (=> b!130478 m!153851))

(declare-fun m!153853 () Bool)

(assert (=> b!130478 m!153853))

(assert (=> b!130480 m!152315))

(assert (=> b!130480 m!153851))

(assert (=> b!130480 m!153851))

(assert (=> b!130480 m!153853))

(assert (=> b!129796 d!39839))

(declare-fun b!130481 () Bool)

(declare-fun e!85116 () Unit!4042)

(declare-fun Unit!4082 () Unit!4042)

(assert (=> b!130481 (= e!85116 Unit!4082)))

(declare-fun b!130482 () Bool)

(declare-fun e!85112 () ListLongMap!1643)

(declare-fun call!14189 () ListLongMap!1643)

(assert (=> b!130482 (= e!85112 (+!166 call!14189 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (_2!1284 lt!67191)))))))

(declare-fun b!130483 () Bool)

(declare-fun e!85122 () Bool)

(declare-fun lt!67878 () ListLongMap!1643)

(assert (=> b!130483 (= e!85122 (= (apply!113 lt!67878 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 (_2!1284 lt!67191))))))

(declare-fun b!130484 () Bool)

(declare-fun e!85119 () ListLongMap!1643)

(declare-fun call!14188 () ListLongMap!1643)

(assert (=> b!130484 (= e!85119 call!14188)))

(declare-fun b!130485 () Bool)

(declare-fun e!85113 () Bool)

(assert (=> b!130485 (= e!85113 e!85122)))

(declare-fun res!62890 () Bool)

(declare-fun call!14191 () Bool)

(assert (=> b!130485 (= res!62890 call!14191)))

(assert (=> b!130485 (=> (not res!62890) (not e!85122))))

(declare-fun b!130486 () Bool)

(declare-fun e!85118 () Bool)

(assert (=> b!130486 (= e!85118 (= (apply!113 lt!67878 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 (_2!1284 lt!67191))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 (_2!1284 lt!67191)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130486 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 (_2!1284 lt!67191)))))))

(assert (=> b!130486 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(declare-fun b!130487 () Bool)

(declare-fun e!85115 () Bool)

(assert (=> b!130487 (= e!85115 e!85113)))

(declare-fun c!24092 () Bool)

(assert (=> b!130487 (= c!24092 (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14184 () Bool)

(declare-fun call!14192 () ListLongMap!1643)

(assert (=> bm!14184 (= call!14192 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun d!39841 () Bool)

(assert (=> d!39841 e!85115))

(declare-fun res!62892 () Bool)

(assert (=> d!39841 (=> (not res!62892) (not e!85115))))

(assert (=> d!39841 (= res!62892 (or (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))))

(declare-fun lt!67898 () ListLongMap!1643)

(assert (=> d!39841 (= lt!67878 lt!67898)))

(declare-fun lt!67890 () Unit!4042)

(assert (=> d!39841 (= lt!67890 e!85116)))

(declare-fun c!24091 () Bool)

(declare-fun e!85120 () Bool)

(assert (=> d!39841 (= c!24091 e!85120)))

(declare-fun res!62894 () Bool)

(assert (=> d!39841 (=> (not res!62894) (not e!85120))))

(assert (=> d!39841 (= res!62894 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (=> d!39841 (= lt!67898 e!85112)))

(declare-fun c!24088 () Bool)

(assert (=> d!39841 (= c!24088 (and (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39841 (validMask!0 (mask!7101 (_2!1284 lt!67191)))))

(assert (=> d!39841 (= (getCurrentListMap!515 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))) lt!67878)))

(declare-fun b!130488 () Bool)

(declare-fun e!85121 () Bool)

(assert (=> b!130488 (= e!85121 (= (apply!113 lt!67878 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 (_2!1284 lt!67191))))))

(declare-fun b!130489 () Bool)

(assert (=> b!130489 (= e!85120 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun bm!14185 () Bool)

(declare-fun call!14193 () ListLongMap!1643)

(declare-fun call!14190 () ListLongMap!1643)

(assert (=> bm!14185 (= call!14193 call!14190)))

(declare-fun b!130490 () Bool)

(declare-fun lt!67883 () Unit!4042)

(assert (=> b!130490 (= e!85116 lt!67883)))

(declare-fun lt!67884 () ListLongMap!1643)

(assert (=> b!130490 (= lt!67884 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun lt!67879 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67879 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67891 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67891 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000))))

(declare-fun lt!67892 () Unit!4042)

(assert (=> b!130490 (= lt!67892 (addStillContains!89 lt!67884 lt!67879 (zeroValue!2682 (_2!1284 lt!67191)) lt!67891))))

(assert (=> b!130490 (contains!873 (+!166 lt!67884 (tuple2!2545 lt!67879 (zeroValue!2682 (_2!1284 lt!67191)))) lt!67891)))

(declare-fun lt!67897 () Unit!4042)

(assert (=> b!130490 (= lt!67897 lt!67892)))

(declare-fun lt!67877 () ListLongMap!1643)

(assert (=> b!130490 (= lt!67877 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun lt!67885 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67885 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67896 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67896 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000))))

(declare-fun lt!67881 () Unit!4042)

(assert (=> b!130490 (= lt!67881 (addApplyDifferent!89 lt!67877 lt!67885 (minValue!2682 (_2!1284 lt!67191)) lt!67896))))

(assert (=> b!130490 (= (apply!113 (+!166 lt!67877 (tuple2!2545 lt!67885 (minValue!2682 (_2!1284 lt!67191)))) lt!67896) (apply!113 lt!67877 lt!67896))))

(declare-fun lt!67893 () Unit!4042)

(assert (=> b!130490 (= lt!67893 lt!67881)))

(declare-fun lt!67886 () ListLongMap!1643)

(assert (=> b!130490 (= lt!67886 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun lt!67895 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67895 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67880 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67880 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000))))

(declare-fun lt!67887 () Unit!4042)

(assert (=> b!130490 (= lt!67887 (addApplyDifferent!89 lt!67886 lt!67895 (zeroValue!2682 (_2!1284 lt!67191)) lt!67880))))

(assert (=> b!130490 (= (apply!113 (+!166 lt!67886 (tuple2!2545 lt!67895 (zeroValue!2682 (_2!1284 lt!67191)))) lt!67880) (apply!113 lt!67886 lt!67880))))

(declare-fun lt!67888 () Unit!4042)

(assert (=> b!130490 (= lt!67888 lt!67887)))

(declare-fun lt!67894 () ListLongMap!1643)

(assert (=> b!130490 (= lt!67894 (getCurrentListMapNoExtraKeys!133 (_keys!4564 (_2!1284 lt!67191)) (_values!2806 (_2!1284 lt!67191)) (mask!7101 (_2!1284 lt!67191)) (extraKeys!2596 (_2!1284 lt!67191)) (zeroValue!2682 (_2!1284 lt!67191)) (minValue!2682 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (defaultEntry!2823 (_2!1284 lt!67191))))))

(declare-fun lt!67882 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67882 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!67889 () (_ BitVec 64))

(assert (=> b!130490 (= lt!67889 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000))))

(assert (=> b!130490 (= lt!67883 (addApplyDifferent!89 lt!67894 lt!67882 (minValue!2682 (_2!1284 lt!67191)) lt!67889))))

(assert (=> b!130490 (= (apply!113 (+!166 lt!67894 (tuple2!2545 lt!67882 (minValue!2682 (_2!1284 lt!67191)))) lt!67889) (apply!113 lt!67894 lt!67889))))

(declare-fun b!130491 () Bool)

(declare-fun res!62898 () Bool)

(assert (=> b!130491 (=> (not res!62898) (not e!85115))))

(declare-fun e!85110 () Bool)

(assert (=> b!130491 (= res!62898 e!85110)))

(declare-fun c!24090 () Bool)

(assert (=> b!130491 (= c!24090 (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130492 () Bool)

(declare-fun res!62895 () Bool)

(assert (=> b!130492 (=> (not res!62895) (not e!85115))))

(declare-fun e!85111 () Bool)

(assert (=> b!130492 (= res!62895 e!85111)))

(declare-fun res!62896 () Bool)

(assert (=> b!130492 (=> res!62896 e!85111)))

(declare-fun e!85114 () Bool)

(assert (=> b!130492 (= res!62896 (not e!85114))))

(declare-fun res!62897 () Bool)

(assert (=> b!130492 (=> (not res!62897) (not e!85114))))

(assert (=> b!130492 (= res!62897 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(declare-fun bm!14186 () Bool)

(declare-fun call!14187 () Bool)

(assert (=> bm!14186 (= call!14187 (contains!873 lt!67878 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14187 () Bool)

(declare-fun c!24087 () Bool)

(assert (=> bm!14187 (= call!14189 (+!166 (ite c!24088 call!14192 (ite c!24087 call!14190 call!14193)) (ite (or c!24088 c!24087) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (_2!1284 lt!67191))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (_2!1284 lt!67191))))))))

(declare-fun bm!14188 () Bool)

(assert (=> bm!14188 (= call!14190 call!14192)))

(declare-fun b!130493 () Bool)

(declare-fun e!85117 () ListLongMap!1643)

(assert (=> b!130493 (= e!85117 call!14188)))

(declare-fun b!130494 () Bool)

(assert (=> b!130494 (= e!85114 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun bm!14189 () Bool)

(assert (=> bm!14189 (= call!14188 call!14189)))

(declare-fun b!130495 () Bool)

(assert (=> b!130495 (= e!85113 (not call!14191))))

(declare-fun b!130496 () Bool)

(declare-fun c!24089 () Bool)

(assert (=> b!130496 (= c!24089 (and (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130496 (= e!85119 e!85117)))

(declare-fun b!130497 () Bool)

(assert (=> b!130497 (= e!85110 (not call!14187))))

(declare-fun b!130498 () Bool)

(assert (=> b!130498 (= e!85110 e!85121)))

(declare-fun res!62893 () Bool)

(assert (=> b!130498 (= res!62893 call!14187)))

(assert (=> b!130498 (=> (not res!62893) (not e!85121))))

(declare-fun b!130499 () Bool)

(assert (=> b!130499 (= e!85112 e!85119)))

(assert (=> b!130499 (= c!24087 (and (not (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14190 () Bool)

(assert (=> bm!14190 (= call!14191 (contains!873 lt!67878 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130500 () Bool)

(assert (=> b!130500 (= e!85117 call!14193)))

(declare-fun b!130501 () Bool)

(assert (=> b!130501 (= e!85111 e!85118)))

(declare-fun res!62891 () Bool)

(assert (=> b!130501 (=> (not res!62891) (not e!85118))))

(assert (=> b!130501 (= res!62891 (contains!873 lt!67878 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(assert (=> b!130501 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (= (and d!39841 c!24088) b!130482))

(assert (= (and d!39841 (not c!24088)) b!130499))

(assert (= (and b!130499 c!24087) b!130484))

(assert (= (and b!130499 (not c!24087)) b!130496))

(assert (= (and b!130496 c!24089) b!130493))

(assert (= (and b!130496 (not c!24089)) b!130500))

(assert (= (or b!130493 b!130500) bm!14185))

(assert (= (or b!130484 bm!14185) bm!14188))

(assert (= (or b!130484 b!130493) bm!14189))

(assert (= (or b!130482 bm!14188) bm!14184))

(assert (= (or b!130482 bm!14189) bm!14187))

(assert (= (and d!39841 res!62894) b!130489))

(assert (= (and d!39841 c!24091) b!130490))

(assert (= (and d!39841 (not c!24091)) b!130481))

(assert (= (and d!39841 res!62892) b!130492))

(assert (= (and b!130492 res!62897) b!130494))

(assert (= (and b!130492 (not res!62896)) b!130501))

(assert (= (and b!130501 res!62891) b!130486))

(assert (= (and b!130492 res!62895) b!130491))

(assert (= (and b!130491 c!24090) b!130498))

(assert (= (and b!130491 (not c!24090)) b!130497))

(assert (= (and b!130498 res!62893) b!130488))

(assert (= (or b!130498 b!130497) bm!14186))

(assert (= (and b!130491 res!62898) b!130487))

(assert (= (and b!130487 c!24092) b!130485))

(assert (= (and b!130487 (not c!24092)) b!130495))

(assert (= (and b!130485 res!62890) b!130483))

(assert (= (or b!130485 b!130495) bm!14190))

(declare-fun b_lambda!5805 () Bool)

(assert (=> (not b_lambda!5805) (not b!130486)))

(declare-fun tb!2369 () Bool)

(declare-fun t!6092 () Bool)

(assert (=> (and b!129373 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 (_2!1284 lt!67191))) t!6092) tb!2369))

(declare-fun result!3921 () Bool)

(assert (=> tb!2369 (= result!3921 tp_is_empty!2857)))

(assert (=> b!130486 t!6092))

(declare-fun b_and!8085 () Bool)

(assert (= b_and!8081 (and (=> t!6092 result!3921) b_and!8085)))

(declare-fun t!6094 () Bool)

(declare-fun tb!2371 () Bool)

(assert (=> (and b!129382 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (_2!1284 lt!67191))) t!6094) tb!2371))

(declare-fun result!3923 () Bool)

(assert (= result!3923 result!3921))

(assert (=> b!130486 t!6094))

(declare-fun b_and!8087 () Bool)

(assert (= b_and!8083 (and (=> t!6094 result!3923) b_and!8087)))

(declare-fun m!153855 () Bool)

(assert (=> b!130483 m!153855))

(declare-fun m!153857 () Bool)

(assert (=> bm!14184 m!153857))

(declare-fun m!153859 () Bool)

(assert (=> b!130482 m!153859))

(declare-fun m!153861 () Bool)

(assert (=> d!39841 m!153861))

(assert (=> b!130501 m!153133))

(assert (=> b!130501 m!153133))

(declare-fun m!153863 () Bool)

(assert (=> b!130501 m!153863))

(assert (=> b!130489 m!153133))

(assert (=> b!130489 m!153133))

(assert (=> b!130489 m!153137))

(declare-fun m!153865 () Bool)

(assert (=> b!130490 m!153865))

(declare-fun m!153867 () Bool)

(assert (=> b!130490 m!153867))

(declare-fun m!153869 () Bool)

(assert (=> b!130490 m!153869))

(assert (=> b!130490 m!153133))

(declare-fun m!153871 () Bool)

(assert (=> b!130490 m!153871))

(declare-fun m!153873 () Bool)

(assert (=> b!130490 m!153873))

(declare-fun m!153875 () Bool)

(assert (=> b!130490 m!153875))

(declare-fun m!153877 () Bool)

(assert (=> b!130490 m!153877))

(assert (=> b!130490 m!153867))

(declare-fun m!153879 () Bool)

(assert (=> b!130490 m!153879))

(declare-fun m!153881 () Bool)

(assert (=> b!130490 m!153881))

(assert (=> b!130490 m!153857))

(assert (=> b!130490 m!153879))

(declare-fun m!153883 () Bool)

(assert (=> b!130490 m!153883))

(declare-fun m!153885 () Bool)

(assert (=> b!130490 m!153885))

(assert (=> b!130490 m!153873))

(declare-fun m!153887 () Bool)

(assert (=> b!130490 m!153887))

(declare-fun m!153889 () Bool)

(assert (=> b!130490 m!153889))

(declare-fun m!153891 () Bool)

(assert (=> b!130490 m!153891))

(declare-fun m!153893 () Bool)

(assert (=> b!130490 m!153893))

(assert (=> b!130490 m!153875))

(declare-fun m!153895 () Bool)

(assert (=> bm!14186 m!153895))

(assert (=> b!130494 m!153133))

(assert (=> b!130494 m!153133))

(assert (=> b!130494 m!153137))

(declare-fun m!153897 () Bool)

(assert (=> b!130488 m!153897))

(assert (=> b!130486 m!153133))

(declare-fun m!153899 () Bool)

(assert (=> b!130486 m!153899))

(declare-fun m!153901 () Bool)

(assert (=> b!130486 m!153901))

(declare-fun m!153903 () Bool)

(assert (=> b!130486 m!153903))

(assert (=> b!130486 m!153133))

(declare-fun m!153905 () Bool)

(assert (=> b!130486 m!153905))

(assert (=> b!130486 m!153901))

(assert (=> b!130486 m!153899))

(declare-fun m!153907 () Bool)

(assert (=> bm!14187 m!153907))

(declare-fun m!153909 () Bool)

(assert (=> bm!14190 m!153909))

(assert (=> d!39461 d!39841))

(declare-fun b!130502 () Bool)

(declare-fun e!85123 () (_ BitVec 32))

(declare-fun call!14194 () (_ BitVec 32))

(assert (=> b!130502 (= e!85123 (bvadd #b00000000000000000000000000000001 call!14194))))

(declare-fun b!130503 () Bool)

(declare-fun e!85124 () (_ BitVec 32))

(assert (=> b!130503 (= e!85124 e!85123)))

(declare-fun c!24093 () Bool)

(assert (=> b!130503 (= c!24093 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!14191 () Bool)

(assert (=> bm!14191 (= call!14194 (arrayCountValidKeys!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130504 () Bool)

(assert (=> b!130504 (= e!85123 call!14194)))

(declare-fun b!130505 () Bool)

(assert (=> b!130505 (= e!85124 #b00000000000000000000000000000000)))

(declare-fun d!39843 () Bool)

(declare-fun lt!67899 () (_ BitVec 32))

(assert (=> d!39843 (and (bvsge lt!67899 #b00000000000000000000000000000000) (bvsle lt!67899 (bvsub (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!39843 (= lt!67899 e!85124)))

(declare-fun c!24094 () Bool)

(assert (=> d!39843 (= c!24094 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39843 (and (bvsle #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))))))

(assert (=> d!39843 (= (arrayCountValidKeys!0 (_keys!4564 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000 (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992))))) lt!67899)))

(assert (= (and d!39843 c!24094) b!130505))

(assert (= (and d!39843 (not c!24094)) b!130503))

(assert (= (and b!130503 c!24093) b!130502))

(assert (= (and b!130503 (not c!24093)) b!130504))

(assert (= (or b!130502 b!130504) bm!14191))

(assert (=> b!130503 m!152987))

(assert (=> b!130503 m!152987))

(assert (=> b!130503 m!152991))

(declare-fun m!153911 () Bool)

(assert (=> bm!14191 m!153911))

(assert (=> b!130065 d!39843))

(declare-fun d!39845 () Bool)

(declare-fun res!62899 () Bool)

(declare-fun e!85125 () Bool)

(assert (=> d!39845 (=> res!62899 e!85125)))

(assert (=> d!39845 (= res!62899 (and ((_ is Cons!1681) (toList!837 lt!67261)) (= (_1!1283 (h!2285 (toList!837 lt!67261))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!39845 (= (containsKey!173 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000) e!85125)))

(declare-fun b!130506 () Bool)

(declare-fun e!85126 () Bool)

(assert (=> b!130506 (= e!85125 e!85126)))

(declare-fun res!62900 () Bool)

(assert (=> b!130506 (=> (not res!62900) (not e!85126))))

(assert (=> b!130506 (= res!62900 (and (or (not ((_ is Cons!1681) (toList!837 lt!67261))) (bvsle (_1!1283 (h!2285 (toList!837 lt!67261))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1681) (toList!837 lt!67261)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67261))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!130507 () Bool)

(assert (=> b!130507 (= e!85126 (containsKey!173 (t!6076 (toList!837 lt!67261)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!39845 (not res!62899)) b!130506))

(assert (= (and b!130506 res!62900) b!130507))

(declare-fun m!153913 () Bool)

(assert (=> b!130507 m!153913))

(assert (=> d!39459 d!39845))

(declare-fun b!130508 () Bool)

(declare-fun e!85133 () Bool)

(declare-fun e!85129 () Bool)

(assert (=> b!130508 (= e!85133 e!85129)))

(declare-fun c!24098 () Bool)

(declare-fun e!85128 () Bool)

(assert (=> b!130508 (= c!24098 e!85128)))

(declare-fun res!62904 () Bool)

(assert (=> b!130508 (=> (not res!62904) (not e!85128))))

(assert (=> b!130508 (= res!62904 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130509 () Bool)

(assert (=> b!130509 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> b!130509 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (_values!2806 newMap!16))))))

(declare-fun e!85132 () Bool)

(declare-fun lt!67904 () ListLongMap!1643)

(assert (=> b!130509 (= e!85132 (= (apply!113 lt!67904 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!85130 () Bool)

(declare-fun b!130510 () Bool)

(assert (=> b!130510 (= e!85130 (= lt!67904 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16))))))

(declare-fun b!130511 () Bool)

(declare-fun lt!67903 () Unit!4042)

(declare-fun lt!67906 () Unit!4042)

(assert (=> b!130511 (= lt!67903 lt!67906)))

(declare-fun lt!67902 () V!3457)

(declare-fun lt!67900 () ListLongMap!1643)

(declare-fun lt!67905 () (_ BitVec 64))

(declare-fun lt!67901 () (_ BitVec 64))

(assert (=> b!130511 (not (contains!873 (+!166 lt!67900 (tuple2!2545 lt!67901 lt!67902)) lt!67905))))

(assert (=> b!130511 (= lt!67906 (addStillNotContains!60 lt!67900 lt!67901 lt!67902 lt!67905))))

(assert (=> b!130511 (= lt!67905 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!130511 (= lt!67902 (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!130511 (= lt!67901 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!14195 () ListLongMap!1643)

(assert (=> b!130511 (= lt!67900 call!14195)))

(declare-fun e!85131 () ListLongMap!1643)

(assert (=> b!130511 (= e!85131 (+!166 call!14195 (tuple2!2545 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (get!1469 (select (arr!2235 (_values!2806 newMap!16)) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130512 () Bool)

(assert (=> b!130512 (= e!85130 (isEmpty!408 lt!67904))))

(declare-fun d!39847 () Bool)

(assert (=> d!39847 e!85133))

(declare-fun res!62901 () Bool)

(assert (=> d!39847 (=> (not res!62901) (not e!85133))))

(assert (=> d!39847 (= res!62901 (not (contains!873 lt!67904 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!85127 () ListLongMap!1643)

(assert (=> d!39847 (= lt!67904 e!85127)))

(declare-fun c!24097 () Bool)

(assert (=> d!39847 (= c!24097 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39847 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39847 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67904)))

(declare-fun b!130513 () Bool)

(assert (=> b!130513 (= e!85128 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130513 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!130514 () Bool)

(assert (=> b!130514 (= e!85129 e!85132)))

(assert (=> b!130514 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!62902 () Bool)

(assert (=> b!130514 (= res!62902 (contains!873 lt!67904 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130514 (=> (not res!62902) (not e!85132))))

(declare-fun b!130515 () Bool)

(assert (=> b!130515 (= e!85129 e!85130)))

(declare-fun c!24095 () Bool)

(assert (=> b!130515 (= c!24095 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130516 () Bool)

(assert (=> b!130516 (= e!85127 e!85131)))

(declare-fun c!24096 () Bool)

(assert (=> b!130516 (= c!24096 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130517 () Bool)

(assert (=> b!130517 (= e!85127 (ListLongMap!1644 Nil!1682))))

(declare-fun b!130518 () Bool)

(assert (=> b!130518 (= e!85131 call!14195)))

(declare-fun bm!14192 () Bool)

(assert (=> bm!14192 (= call!14195 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (ite c!23855 (ite c!23850 lt!67200 lt!67215) (extraKeys!2596 newMap!16)) (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16)))))

(declare-fun b!130519 () Bool)

(declare-fun res!62903 () Bool)

(assert (=> b!130519 (=> (not res!62903) (not e!85133))))

(assert (=> b!130519 (= res!62903 (not (contains!873 lt!67904 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39847 c!24097) b!130517))

(assert (= (and d!39847 (not c!24097)) b!130516))

(assert (= (and b!130516 c!24096) b!130511))

(assert (= (and b!130516 (not c!24096)) b!130518))

(assert (= (or b!130511 b!130518) bm!14192))

(assert (= (and d!39847 res!62901) b!130519))

(assert (= (and b!130519 res!62903) b!130508))

(assert (= (and b!130508 res!62904) b!130513))

(assert (= (and b!130508 c!24098) b!130514))

(assert (= (and b!130508 (not c!24098)) b!130515))

(assert (= (and b!130514 res!62902) b!130509))

(assert (= (and b!130515 c!24095) b!130510))

(assert (= (and b!130515 (not c!24095)) b!130512))

(declare-fun b_lambda!5807 () Bool)

(assert (=> (not b_lambda!5807) (not b!130509)))

(assert (=> b!130509 t!6088))

(declare-fun b_and!8089 () Bool)

(assert (= b_and!8085 (and (=> t!6088 result!3917) b_and!8089)))

(assert (=> b!130509 t!6090))

(declare-fun b_and!8091 () Bool)

(assert (= b_and!8087 (and (=> t!6090 result!3919) b_and!8091)))

(declare-fun b_lambda!5809 () Bool)

(assert (=> (not b_lambda!5809) (not b!130511)))

(assert (=> b!130511 t!6088))

(declare-fun b_and!8093 () Bool)

(assert (= b_and!8089 (and (=> t!6088 result!3917) b_and!8093)))

(assert (=> b!130511 t!6090))

(declare-fun b_and!8095 () Bool)

(assert (= b_and!8091 (and (=> t!6090 result!3919) b_and!8095)))

(declare-fun m!153915 () Bool)

(assert (=> b!130512 m!153915))

(declare-fun m!153917 () Bool)

(assert (=> bm!14192 m!153917))

(assert (=> b!130510 m!153917))

(assert (=> b!130514 m!152369))

(assert (=> b!130514 m!152369))

(declare-fun m!153919 () Bool)

(assert (=> b!130514 m!153919))

(assert (=> b!130509 m!152369))

(declare-fun m!153921 () Bool)

(assert (=> b!130509 m!153921))

(assert (=> b!130509 m!152441))

(assert (=> b!130509 m!152559))

(assert (=> b!130509 m!152441))

(assert (=> b!130509 m!152561))

(assert (=> b!130509 m!152369))

(assert (=> b!130509 m!152559))

(declare-fun m!153923 () Bool)

(assert (=> b!130519 m!153923))

(declare-fun m!153925 () Bool)

(assert (=> b!130511 m!153925))

(declare-fun m!153927 () Bool)

(assert (=> b!130511 m!153927))

(assert (=> b!130511 m!153925))

(declare-fun m!153929 () Bool)

(assert (=> b!130511 m!153929))

(assert (=> b!130511 m!152441))

(assert (=> b!130511 m!152559))

(assert (=> b!130511 m!152441))

(assert (=> b!130511 m!152561))

(assert (=> b!130511 m!152369))

(assert (=> b!130511 m!152559))

(declare-fun m!153931 () Bool)

(assert (=> b!130511 m!153931))

(assert (=> b!130516 m!152369))

(assert (=> b!130516 m!152369))

(assert (=> b!130516 m!152403))

(declare-fun m!153933 () Bool)

(assert (=> d!39847 m!153933))

(assert (=> d!39847 m!152389))

(assert (=> b!130513 m!152369))

(assert (=> b!130513 m!152369))

(assert (=> b!130513 m!152403))

(assert (=> bm!14092 d!39847))

(declare-fun b!130520 () Bool)

(declare-fun e!85135 () Bool)

(declare-fun call!14196 () Bool)

(assert (=> b!130520 (= e!85135 call!14196)))

(declare-fun b!130521 () Bool)

(declare-fun e!85137 () Bool)

(assert (=> b!130521 (= e!85137 (contains!876 (ite c!23938 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) Nil!1684) Nil!1684) (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!39849 () Bool)

(declare-fun res!62907 () Bool)

(declare-fun e!85136 () Bool)

(assert (=> d!39849 (=> res!62907 e!85136)))

(assert (=> d!39849 (= res!62907 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39849 (= (arrayNoDuplicates!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!23938 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) Nil!1684) Nil!1684)) e!85136)))

(declare-fun b!130522 () Bool)

(declare-fun e!85134 () Bool)

(assert (=> b!130522 (= e!85136 e!85134)))

(declare-fun res!62906 () Bool)

(assert (=> b!130522 (=> (not res!62906) (not e!85134))))

(assert (=> b!130522 (= res!62906 (not e!85137))))

(declare-fun res!62905 () Bool)

(assert (=> b!130522 (=> (not res!62905) (not e!85137))))

(assert (=> b!130522 (= res!62905 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun c!24099 () Bool)

(declare-fun bm!14193 () Bool)

(assert (=> bm!14193 (= call!14196 (arrayNoDuplicates!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!24099 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!23938 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) Nil!1684) Nil!1684)) (ite c!23938 (Cons!1683 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) Nil!1684) Nil!1684))))))

(declare-fun b!130523 () Bool)

(assert (=> b!130523 (= e!85134 e!85135)))

(assert (=> b!130523 (= c!24099 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!130524 () Bool)

(assert (=> b!130524 (= e!85135 call!14196)))

(assert (= (and d!39849 (not res!62907)) b!130522))

(assert (= (and b!130522 res!62905) b!130521))

(assert (= (and b!130522 res!62906) b!130523))

(assert (= (and b!130523 c!24099) b!130524))

(assert (= (and b!130523 (not c!24099)) b!130520))

(assert (= (or b!130524 b!130520) bm!14193))

(assert (=> b!130521 m!153287))

(assert (=> b!130521 m!153287))

(declare-fun m!153935 () Bool)

(assert (=> b!130521 m!153935))

(assert (=> b!130522 m!153287))

(assert (=> b!130522 m!153287))

(assert (=> b!130522 m!153289))

(assert (=> bm!14193 m!153287))

(declare-fun m!153937 () Bool)

(assert (=> bm!14193 m!153937))

(assert (=> b!130523 m!153287))

(assert (=> b!130523 m!153287))

(assert (=> b!130523 m!153289))

(assert (=> bm!14117 d!39849))

(declare-fun d!39851 () Bool)

(assert (=> d!39851 (= (apply!113 lt!67372 lt!67367) (get!1473 (getValueByKey!170 (toList!837 lt!67372) lt!67367)))))

(declare-fun bs!5436 () Bool)

(assert (= bs!5436 d!39851))

(declare-fun m!153939 () Bool)

(assert (=> bs!5436 m!153939))

(assert (=> bs!5436 m!153939))

(declare-fun m!153941 () Bool)

(assert (=> bs!5436 m!153941))

(assert (=> b!129811 d!39851))

(declare-fun d!39853 () Bool)

(assert (=> d!39853 (= (apply!113 (+!166 lt!67364 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67358) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67364 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) lt!67358)))))

(declare-fun bs!5437 () Bool)

(assert (= bs!5437 d!39853))

(declare-fun m!153943 () Bool)

(assert (=> bs!5437 m!153943))

(assert (=> bs!5437 m!153943))

(declare-fun m!153945 () Bool)

(assert (=> bs!5437 m!153945))

(assert (=> b!129811 d!39853))

(declare-fun d!39855 () Bool)

(declare-fun e!85138 () Bool)

(assert (=> d!39855 e!85138))

(declare-fun res!62908 () Bool)

(assert (=> d!39855 (=> res!62908 e!85138)))

(declare-fun lt!67907 () Bool)

(assert (=> d!39855 (= res!62908 (not lt!67907))))

(declare-fun lt!67909 () Bool)

(assert (=> d!39855 (= lt!67907 lt!67909)))

(declare-fun lt!67908 () Unit!4042)

(declare-fun e!85139 () Unit!4042)

(assert (=> d!39855 (= lt!67908 e!85139)))

(declare-fun c!24100 () Bool)

(assert (=> d!39855 (= c!24100 lt!67909)))

(assert (=> d!39855 (= lt!67909 (containsKey!173 (toList!837 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) lt!67369))))

(assert (=> d!39855 (= (contains!873 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67369) lt!67907)))

(declare-fun b!130525 () Bool)

(declare-fun lt!67910 () Unit!4042)

(assert (=> b!130525 (= e!85139 lt!67910)))

(assert (=> b!130525 (= lt!67910 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) lt!67369))))

(assert (=> b!130525 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) lt!67369))))

(declare-fun b!130526 () Bool)

(declare-fun Unit!4083 () Unit!4042)

(assert (=> b!130526 (= e!85139 Unit!4083)))

(declare-fun b!130527 () Bool)

(assert (=> b!130527 (= e!85138 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) lt!67369)))))

(assert (= (and d!39855 c!24100) b!130525))

(assert (= (and d!39855 (not c!24100)) b!130526))

(assert (= (and d!39855 (not res!62908)) b!130527))

(declare-fun m!153947 () Bool)

(assert (=> d!39855 m!153947))

(declare-fun m!153949 () Bool)

(assert (=> b!130525 m!153949))

(declare-fun m!153951 () Bool)

(assert (=> b!130525 m!153951))

(assert (=> b!130525 m!153951))

(declare-fun m!153953 () Bool)

(assert (=> b!130525 m!153953))

(assert (=> b!130527 m!153951))

(assert (=> b!130527 m!153951))

(assert (=> b!130527 m!153953))

(assert (=> b!129811 d!39855))

(declare-fun d!39857 () Bool)

(declare-fun e!85140 () Bool)

(assert (=> d!39857 e!85140))

(declare-fun res!62910 () Bool)

(assert (=> d!39857 (=> (not res!62910) (not e!85140))))

(declare-fun lt!67912 () ListLongMap!1643)

(assert (=> d!39857 (= res!62910 (contains!873 lt!67912 (_1!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(declare-fun lt!67913 () List!1685)

(assert (=> d!39857 (= lt!67912 (ListLongMap!1644 lt!67913))))

(declare-fun lt!67914 () Unit!4042)

(declare-fun lt!67911 () Unit!4042)

(assert (=> d!39857 (= lt!67914 lt!67911)))

(assert (=> d!39857 (= (getValueByKey!170 lt!67913 (_1!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39857 (= lt!67911 (lemmaContainsTupThenGetReturnValue!85 lt!67913 (_1!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39857 (= lt!67913 (insertStrictlySorted!88 (toList!837 lt!67364) (_1!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39857 (= (+!166 lt!67364 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67912)))

(declare-fun b!130528 () Bool)

(declare-fun res!62909 () Bool)

(assert (=> b!130528 (=> (not res!62909) (not e!85140))))

(assert (=> b!130528 (= res!62909 (= (getValueByKey!170 (toList!837 lt!67912) (_1!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))))))))

(declare-fun b!130529 () Bool)

(assert (=> b!130529 (= e!85140 (contains!875 (toList!837 lt!67912) (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))))))

(assert (= (and d!39857 res!62910) b!130528))

(assert (= (and b!130528 res!62909) b!130529))

(declare-fun m!153955 () Bool)

(assert (=> d!39857 m!153955))

(declare-fun m!153957 () Bool)

(assert (=> d!39857 m!153957))

(declare-fun m!153959 () Bool)

(assert (=> d!39857 m!153959))

(declare-fun m!153961 () Bool)

(assert (=> d!39857 m!153961))

(declare-fun m!153963 () Bool)

(assert (=> b!130528 m!153963))

(declare-fun m!153965 () Bool)

(assert (=> b!130529 m!153965))

(assert (=> b!129811 d!39857))

(declare-fun d!39859 () Bool)

(assert (=> d!39859 (= (apply!113 (+!166 lt!67372 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67367) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67372 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) lt!67367)))))

(declare-fun bs!5438 () Bool)

(assert (= bs!5438 d!39859))

(declare-fun m!153967 () Bool)

(assert (=> bs!5438 m!153967))

(assert (=> bs!5438 m!153967))

(declare-fun m!153969 () Bool)

(assert (=> bs!5438 m!153969))

(assert (=> b!129811 d!39859))

(declare-fun d!39861 () Bool)

(assert (=> d!39861 (= (apply!113 lt!67364 lt!67358) (get!1473 (getValueByKey!170 (toList!837 lt!67364) lt!67358)))))

(declare-fun bs!5439 () Bool)

(assert (= bs!5439 d!39861))

(declare-fun m!153971 () Bool)

(assert (=> bs!5439 m!153971))

(assert (=> bs!5439 m!153971))

(declare-fun m!153973 () Bool)

(assert (=> bs!5439 m!153973))

(assert (=> b!129811 d!39861))

(declare-fun d!39863 () Bool)

(declare-fun e!85141 () Bool)

(assert (=> d!39863 e!85141))

(declare-fun res!62912 () Bool)

(assert (=> d!39863 (=> (not res!62912) (not e!85141))))

(declare-fun lt!67916 () ListLongMap!1643)

(assert (=> d!39863 (= res!62912 (contains!873 lt!67916 (_1!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(declare-fun lt!67917 () List!1685)

(assert (=> d!39863 (= lt!67916 (ListLongMap!1644 lt!67917))))

(declare-fun lt!67918 () Unit!4042)

(declare-fun lt!67915 () Unit!4042)

(assert (=> d!39863 (= lt!67918 lt!67915)))

(assert (=> d!39863 (= (getValueByKey!170 lt!67917 (_1!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39863 (= lt!67915 (lemmaContainsTupThenGetReturnValue!85 lt!67917 (_1!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39863 (= lt!67917 (insertStrictlySorted!88 (toList!837 lt!67372) (_1!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39863 (= (+!166 lt!67372 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67916)))

(declare-fun b!130530 () Bool)

(declare-fun res!62911 () Bool)

(assert (=> b!130530 (=> (not res!62911) (not e!85141))))

(assert (=> b!130530 (= res!62911 (= (getValueByKey!170 (toList!837 lt!67916) (_1!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(declare-fun b!130531 () Bool)

(assert (=> b!130531 (= e!85141 (contains!875 (toList!837 lt!67916) (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))

(assert (= (and d!39863 res!62912) b!130530))

(assert (= (and b!130530 res!62911) b!130531))

(declare-fun m!153975 () Bool)

(assert (=> d!39863 m!153975))

(declare-fun m!153977 () Bool)

(assert (=> d!39863 m!153977))

(declare-fun m!153979 () Bool)

(assert (=> d!39863 m!153979))

(declare-fun m!153981 () Bool)

(assert (=> d!39863 m!153981))

(declare-fun m!153983 () Bool)

(assert (=> b!130530 m!153983))

(declare-fun m!153985 () Bool)

(assert (=> b!130531 m!153985))

(assert (=> b!129811 d!39863))

(declare-fun d!39865 () Bool)

(declare-fun e!85142 () Bool)

(assert (=> d!39865 e!85142))

(declare-fun res!62914 () Bool)

(assert (=> d!39865 (=> (not res!62914) (not e!85142))))

(declare-fun lt!67920 () ListLongMap!1643)

(assert (=> d!39865 (= res!62914 (contains!873 lt!67920 (_1!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(declare-fun lt!67921 () List!1685)

(assert (=> d!39865 (= lt!67920 (ListLongMap!1644 lt!67921))))

(declare-fun lt!67922 () Unit!4042)

(declare-fun lt!67919 () Unit!4042)

(assert (=> d!39865 (= lt!67922 lt!67919)))

(assert (=> d!39865 (= (getValueByKey!170 lt!67921 (_1!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39865 (= lt!67919 (lemmaContainsTupThenGetReturnValue!85 lt!67921 (_1!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39865 (= lt!67921 (insertStrictlySorted!88 (toList!837 lt!67362) (_1!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))))))

(assert (=> d!39865 (= (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67920)))

(declare-fun b!130532 () Bool)

(declare-fun res!62913 () Bool)

(assert (=> b!130532 (=> (not res!62913) (not e!85142))))

(assert (=> b!130532 (= res!62913 (= (getValueByKey!170 (toList!837 lt!67920) (_1!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))))))))

(declare-fun b!130533 () Bool)

(assert (=> b!130533 (= e!85142 (contains!875 (toList!837 lt!67920) (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))))))

(assert (= (and d!39865 res!62914) b!130532))

(assert (= (and b!130532 res!62913) b!130533))

(declare-fun m!153987 () Bool)

(assert (=> d!39865 m!153987))

(declare-fun m!153989 () Bool)

(assert (=> d!39865 m!153989))

(declare-fun m!153991 () Bool)

(assert (=> d!39865 m!153991))

(declare-fun m!153993 () Bool)

(assert (=> d!39865 m!153993))

(declare-fun m!153995 () Bool)

(assert (=> b!130532 m!153995))

(declare-fun m!153997 () Bool)

(assert (=> b!130533 m!153997))

(assert (=> b!129811 d!39865))

(declare-fun d!39867 () Bool)

(assert (=> d!39867 (= (apply!113 (+!166 lt!67364 (tuple2!2545 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67358) (apply!113 lt!67364 lt!67358))))

(declare-fun lt!67923 () Unit!4042)

(assert (=> d!39867 (= lt!67923 (choose!794 lt!67364 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67358))))

(declare-fun e!85143 () Bool)

(assert (=> d!39867 e!85143))

(declare-fun res!62915 () Bool)

(assert (=> d!39867 (=> (not res!62915) (not e!85143))))

(assert (=> d!39867 (= res!62915 (contains!873 lt!67364 lt!67358))))

(assert (=> d!39867 (= (addApplyDifferent!89 lt!67364 lt!67373 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67358) lt!67923)))

(declare-fun b!130534 () Bool)

(assert (=> b!130534 (= e!85143 (not (= lt!67358 lt!67373)))))

(assert (= (and d!39867 res!62915) b!130534))

(declare-fun m!153999 () Bool)

(assert (=> d!39867 m!153999))

(assert (=> d!39867 m!152539))

(assert (=> d!39867 m!152543))

(assert (=> d!39867 m!152539))

(assert (=> d!39867 m!152551))

(declare-fun m!154001 () Bool)

(assert (=> d!39867 m!154001))

(assert (=> b!129811 d!39867))

(declare-fun d!39869 () Bool)

(assert (=> d!39869 (= (apply!113 (+!166 lt!67355 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67374) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67355 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) lt!67374)))))

(declare-fun bs!5440 () Bool)

(assert (= bs!5440 d!39869))

(declare-fun m!154003 () Bool)

(assert (=> bs!5440 m!154003))

(assert (=> bs!5440 m!154003))

(declare-fun m!154005 () Bool)

(assert (=> bs!5440 m!154005))

(assert (=> b!129811 d!39869))

(assert (=> b!129811 d!39847))

(declare-fun d!39871 () Bool)

(assert (=> d!39871 (= (apply!113 (+!166 lt!67355 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67374) (apply!113 lt!67355 lt!67374))))

(declare-fun lt!67924 () Unit!4042)

(assert (=> d!39871 (= lt!67924 (choose!794 lt!67355 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67374))))

(declare-fun e!85144 () Bool)

(assert (=> d!39871 e!85144))

(declare-fun res!62916 () Bool)

(assert (=> d!39871 (=> (not res!62916) (not e!85144))))

(assert (=> d!39871 (= res!62916 (contains!873 lt!67355 lt!67374))))

(assert (=> d!39871 (= (addApplyDifferent!89 lt!67355 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67374) lt!67924)))

(declare-fun b!130535 () Bool)

(assert (=> b!130535 (= e!85144 (not (= lt!67374 lt!67363)))))

(assert (= (and d!39871 res!62916) b!130535))

(declare-fun m!154007 () Bool)

(assert (=> d!39871 m!154007))

(assert (=> d!39871 m!152527))

(assert (=> d!39871 m!152529))

(assert (=> d!39871 m!152527))

(assert (=> d!39871 m!152545))

(declare-fun m!154009 () Bool)

(assert (=> d!39871 m!154009))

(assert (=> b!129811 d!39871))

(declare-fun d!39873 () Bool)

(assert (=> d!39873 (= (apply!113 lt!67355 lt!67374) (get!1473 (getValueByKey!170 (toList!837 lt!67355) lt!67374)))))

(declare-fun bs!5441 () Bool)

(assert (= bs!5441 d!39873))

(declare-fun m!154011 () Bool)

(assert (=> bs!5441 m!154011))

(assert (=> bs!5441 m!154011))

(declare-fun m!154013 () Bool)

(assert (=> bs!5441 m!154013))

(assert (=> b!129811 d!39873))

(declare-fun d!39875 () Bool)

(assert (=> d!39875 (contains!873 (+!166 lt!67362 (tuple2!2545 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)))) lt!67369)))

(declare-fun lt!67925 () Unit!4042)

(assert (=> d!39875 (= lt!67925 (choose!795 lt!67362 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67369))))

(assert (=> d!39875 (contains!873 lt!67362 lt!67369)))

(assert (=> d!39875 (= (addStillContains!89 lt!67362 lt!67357 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16)) lt!67369) lt!67925)))

(declare-fun bs!5442 () Bool)

(assert (= bs!5442 d!39875))

(assert (=> bs!5442 m!152533))

(assert (=> bs!5442 m!152533))

(assert (=> bs!5442 m!152547))

(declare-fun m!154015 () Bool)

(assert (=> bs!5442 m!154015))

(declare-fun m!154017 () Bool)

(assert (=> bs!5442 m!154017))

(assert (=> b!129811 d!39875))

(declare-fun d!39877 () Bool)

(declare-fun e!85145 () Bool)

(assert (=> d!39877 e!85145))

(declare-fun res!62918 () Bool)

(assert (=> d!39877 (=> (not res!62918) (not e!85145))))

(declare-fun lt!67927 () ListLongMap!1643)

(assert (=> d!39877 (= res!62918 (contains!873 lt!67927 (_1!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(declare-fun lt!67928 () List!1685)

(assert (=> d!39877 (= lt!67927 (ListLongMap!1644 lt!67928))))

(declare-fun lt!67929 () Unit!4042)

(declare-fun lt!67926 () Unit!4042)

(assert (=> d!39877 (= lt!67929 lt!67926)))

(assert (=> d!39877 (= (getValueByKey!170 lt!67928 (_1!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39877 (= lt!67926 (lemmaContainsTupThenGetReturnValue!85 lt!67928 (_1!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39877 (= lt!67928 (insertStrictlySorted!88 (toList!837 lt!67355) (_1!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) (_2!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (=> d!39877 (= (+!166 lt!67355 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67927)))

(declare-fun b!130536 () Bool)

(declare-fun res!62917 () Bool)

(assert (=> b!130536 (=> (not res!62917) (not e!85145))))

(assert (=> b!130536 (= res!62917 (= (getValueByKey!170 (toList!837 lt!67927) (_1!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(declare-fun b!130537 () Bool)

(assert (=> b!130537 (= e!85145 (contains!875 (toList!837 lt!67927) (tuple2!2545 lt!67363 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))

(assert (= (and d!39877 res!62918) b!130536))

(assert (= (and b!130536 res!62917) b!130537))

(declare-fun m!154019 () Bool)

(assert (=> d!39877 m!154019))

(declare-fun m!154021 () Bool)

(assert (=> d!39877 m!154021))

(declare-fun m!154023 () Bool)

(assert (=> d!39877 m!154023))

(declare-fun m!154025 () Bool)

(assert (=> d!39877 m!154025))

(declare-fun m!154027 () Bool)

(assert (=> b!130536 m!154027))

(declare-fun m!154029 () Bool)

(assert (=> b!130537 m!154029))

(assert (=> b!129811 d!39877))

(declare-fun d!39879 () Bool)

(assert (=> d!39879 (= (apply!113 (+!166 lt!67372 (tuple2!2545 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))) lt!67367) (apply!113 lt!67372 lt!67367))))

(declare-fun lt!67930 () Unit!4042)

(assert (=> d!39879 (= lt!67930 (choose!794 lt!67372 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67367))))

(declare-fun e!85146 () Bool)

(assert (=> d!39879 e!85146))

(declare-fun res!62919 () Bool)

(assert (=> d!39879 (=> (not res!62919) (not e!85146))))

(assert (=> d!39879 (= res!62919 (contains!873 lt!67372 lt!67367))))

(assert (=> d!39879 (= (addApplyDifferent!89 lt!67372 lt!67360 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)) lt!67367) lt!67930)))

(declare-fun b!130538 () Bool)

(assert (=> b!130538 (= e!85146 (not (= lt!67367 lt!67360)))))

(assert (= (and d!39879 res!62919) b!130538))

(declare-fun m!154031 () Bool)

(assert (=> d!39879 m!154031))

(assert (=> d!39879 m!152535))

(assert (=> d!39879 m!152537))

(assert (=> d!39879 m!152535))

(assert (=> d!39879 m!152525))

(declare-fun m!154033 () Bool)

(assert (=> d!39879 m!154033))

(assert (=> b!129811 d!39879))

(declare-fun d!39881 () Bool)

(assert (=> d!39881 (= (inRange!0 (index!3222 lt!67291) (mask!7101 newMap!16)) (and (bvsge (index!3222 lt!67291) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67291) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!129729 d!39881))

(declare-fun d!39883 () Bool)

(declare-fun e!85147 () Bool)

(assert (=> d!39883 e!85147))

(declare-fun res!62920 () Bool)

(assert (=> d!39883 (=> res!62920 e!85147)))

(declare-fun lt!67931 () Bool)

(assert (=> d!39883 (= res!62920 (not lt!67931))))

(declare-fun lt!67933 () Bool)

(assert (=> d!39883 (= lt!67931 lt!67933)))

(declare-fun lt!67932 () Unit!4042)

(declare-fun e!85148 () Unit!4042)

(assert (=> d!39883 (= lt!67932 e!85148)))

(declare-fun c!24101 () Bool)

(assert (=> d!39883 (= c!24101 lt!67933)))

(assert (=> d!39883 (= lt!67933 (containsKey!173 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39883 (= (contains!873 lt!67494 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67931)))

(declare-fun b!130539 () Bool)

(declare-fun lt!67934 () Unit!4042)

(assert (=> b!130539 (= e!85148 lt!67934)))

(assert (=> b!130539 (= lt!67934 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> b!130539 (isDefined!122 (getValueByKey!170 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130540 () Bool)

(declare-fun Unit!4084 () Unit!4042)

(assert (=> b!130540 (= e!85148 Unit!4084)))

(declare-fun b!130541 () Bool)

(assert (=> b!130541 (= e!85147 (isDefined!122 (getValueByKey!170 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(assert (= (and d!39883 c!24101) b!130539))

(assert (= (and d!39883 (not c!24101)) b!130540))

(assert (= (and d!39883 (not res!62920)) b!130541))

(declare-fun m!154035 () Bool)

(assert (=> d!39883 m!154035))

(declare-fun m!154037 () Bool)

(assert (=> b!130539 m!154037))

(assert (=> b!130539 m!152841))

(assert (=> b!130539 m!152841))

(declare-fun m!154039 () Bool)

(assert (=> b!130539 m!154039))

(assert (=> b!130541 m!152841))

(assert (=> b!130541 m!152841))

(assert (=> b!130541 m!154039))

(assert (=> d!39539 d!39883))

(declare-fun b!130542 () Bool)

(declare-fun e!85149 () Option!176)

(assert (=> b!130542 (= e!85149 (Some!175 (_2!1283 (h!2285 lt!67495))))))

(declare-fun b!130545 () Bool)

(declare-fun e!85150 () Option!176)

(assert (=> b!130545 (= e!85150 None!174)))

(declare-fun b!130544 () Bool)

(assert (=> b!130544 (= e!85150 (getValueByKey!170 (t!6076 lt!67495) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130543 () Bool)

(assert (=> b!130543 (= e!85149 e!85150)))

(declare-fun c!24103 () Bool)

(assert (=> b!130543 (= c!24103 (and ((_ is Cons!1681) lt!67495) (not (= (_1!1283 (h!2285 lt!67495)) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun d!39885 () Bool)

(declare-fun c!24102 () Bool)

(assert (=> d!39885 (= c!24102 (and ((_ is Cons!1681) lt!67495) (= (_1!1283 (h!2285 lt!67495)) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(assert (=> d!39885 (= (getValueByKey!170 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) e!85149)))

(assert (= (and d!39885 c!24102) b!130542))

(assert (= (and d!39885 (not c!24102)) b!130543))

(assert (= (and b!130543 c!24103) b!130544))

(assert (= (and b!130543 (not c!24103)) b!130545))

(declare-fun m!154041 () Bool)

(assert (=> b!130544 m!154041))

(assert (=> d!39539 d!39885))

(declare-fun d!39887 () Bool)

(assert (=> d!39887 (= (getValueByKey!170 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (Some!175 (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun lt!67935 () Unit!4042)

(assert (=> d!39887 (= lt!67935 (choose!802 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!85151 () Bool)

(assert (=> d!39887 e!85151))

(declare-fun res!62921 () Bool)

(assert (=> d!39887 (=> (not res!62921) (not e!85151))))

(assert (=> d!39887 (= res!62921 (isStrictlySorted!306 lt!67495))))

(assert (=> d!39887 (= (lemmaContainsTupThenGetReturnValue!85 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67935)))

(declare-fun b!130546 () Bool)

(declare-fun res!62922 () Bool)

(assert (=> b!130546 (=> (not res!62922) (not e!85151))))

(assert (=> b!130546 (= res!62922 (containsKey!173 lt!67495 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130547 () Bool)

(assert (=> b!130547 (= e!85151 (contains!875 lt!67495 (tuple2!2545 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(assert (= (and d!39887 res!62921) b!130546))

(assert (= (and b!130546 res!62922) b!130547))

(assert (=> d!39887 m!152835))

(declare-fun m!154043 () Bool)

(assert (=> d!39887 m!154043))

(declare-fun m!154045 () Bool)

(assert (=> d!39887 m!154045))

(declare-fun m!154047 () Bool)

(assert (=> b!130546 m!154047))

(declare-fun m!154049 () Bool)

(assert (=> b!130547 m!154049))

(assert (=> d!39539 d!39887))

(declare-fun c!24105 () Bool)

(declare-fun bm!14194 () Bool)

(declare-fun e!85152 () List!1685)

(declare-fun call!14197 () List!1685)

(assert (=> bm!14194 (= call!14197 ($colon$colon!90 e!85152 (ite c!24105 (h!2285 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (tuple2!2545 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun c!24107 () Bool)

(assert (=> bm!14194 (= c!24107 c!24105)))

(declare-fun b!130549 () Bool)

(assert (=> b!130549 (= e!85152 (insertStrictlySorted!88 (t!6076 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130550 () Bool)

(declare-fun res!62924 () Bool)

(declare-fun e!85156 () Bool)

(assert (=> b!130550 (=> (not res!62924) (not e!85156))))

(declare-fun lt!67936 () List!1685)

(assert (=> b!130550 (= res!62924 (containsKey!173 lt!67936 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130551 () Bool)

(declare-fun c!24106 () Bool)

(assert (=> b!130551 (= c!24106 (and ((_ is Cons!1681) (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (bvsgt (_1!1283 (h!2285 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun e!85154 () List!1685)

(declare-fun e!85153 () List!1685)

(assert (=> b!130551 (= e!85154 e!85153)))

(declare-fun b!130548 () Bool)

(declare-fun c!24104 () Bool)

(assert (=> b!130548 (= e!85152 (ite c!24104 (t!6076 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (ite c!24106 (Cons!1681 (h!2285 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (t!6076 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))))) Nil!1682)))))

(declare-fun d!39889 () Bool)

(assert (=> d!39889 e!85156))

(declare-fun res!62923 () Bool)

(assert (=> d!39889 (=> (not res!62923) (not e!85156))))

(assert (=> d!39889 (= res!62923 (isStrictlySorted!306 lt!67936))))

(declare-fun e!85155 () List!1685)

(assert (=> d!39889 (= lt!67936 e!85155)))

(assert (=> d!39889 (= c!24105 (and ((_ is Cons!1681) (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (bvslt (_1!1283 (h!2285 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(assert (=> d!39889 (isStrictlySorted!306 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))))))

(assert (=> d!39889 (= (insertStrictlySorted!88 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67936)))

(declare-fun bm!14195 () Bool)

(declare-fun call!14198 () List!1685)

(declare-fun call!14199 () List!1685)

(assert (=> bm!14195 (= call!14198 call!14199)))

(declare-fun bm!14196 () Bool)

(assert (=> bm!14196 (= call!14199 call!14197)))

(declare-fun b!130552 () Bool)

(assert (=> b!130552 (= e!85155 e!85154)))

(assert (=> b!130552 (= c!24104 (and ((_ is Cons!1681) (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084)))) (= (_1!1283 (h!2285 (toList!837 (ite c!23875 call!14083 (ite c!23874 call!14081 call!14084))))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun b!130553 () Bool)

(assert (=> b!130553 (= e!85156 (contains!875 lt!67936 (tuple2!2545 (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (_2!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun b!130554 () Bool)

(assert (=> b!130554 (= e!85154 call!14199)))

(declare-fun b!130555 () Bool)

(assert (=> b!130555 (= e!85153 call!14198)))

(declare-fun b!130556 () Bool)

(assert (=> b!130556 (= e!85155 call!14197)))

(declare-fun b!130557 () Bool)

(assert (=> b!130557 (= e!85153 call!14198)))

(assert (= (and d!39889 c!24105) b!130556))

(assert (= (and d!39889 (not c!24105)) b!130552))

(assert (= (and b!130552 c!24104) b!130554))

(assert (= (and b!130552 (not c!24104)) b!130551))

(assert (= (and b!130551 c!24106) b!130557))

(assert (= (and b!130551 (not c!24106)) b!130555))

(assert (= (or b!130557 b!130555) bm!14195))

(assert (= (or b!130554 bm!14195) bm!14196))

(assert (= (or b!130556 bm!14196) bm!14194))

(assert (= (and bm!14194 c!24107) b!130549))

(assert (= (and bm!14194 (not c!24107)) b!130548))

(assert (= (and d!39889 res!62923) b!130550))

(assert (= (and b!130550 res!62924) b!130553))

(declare-fun m!154051 () Bool)

(assert (=> bm!14194 m!154051))

(declare-fun m!154053 () Bool)

(assert (=> b!130549 m!154053))

(declare-fun m!154055 () Bool)

(assert (=> b!130550 m!154055))

(declare-fun m!154057 () Bool)

(assert (=> b!130553 m!154057))

(declare-fun m!154059 () Bool)

(assert (=> d!39889 m!154059))

(declare-fun m!154061 () Bool)

(assert (=> d!39889 m!154061))

(assert (=> d!39539 d!39889))

(declare-fun d!39891 () Bool)

(declare-fun e!85157 () Bool)

(assert (=> d!39891 e!85157))

(declare-fun res!62926 () Bool)

(assert (=> d!39891 (=> (not res!62926) (not e!85157))))

(declare-fun lt!67938 () ListLongMap!1643)

(assert (=> d!39891 (= res!62926 (contains!873 lt!67938 (_1!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun lt!67939 () List!1685)

(assert (=> d!39891 (= lt!67938 (ListLongMap!1644 lt!67939))))

(declare-fun lt!67940 () Unit!4042)

(declare-fun lt!67937 () Unit!4042)

(assert (=> d!39891 (= lt!67940 lt!67937)))

(assert (=> d!39891 (= (getValueByKey!170 lt!67939 (_1!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39891 (= lt!67937 (lemmaContainsTupThenGetReturnValue!85 lt!67939 (_1!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39891 (= lt!67939 (insertStrictlySorted!88 (toList!837 (ite c!23883 call!14090 (ite c!23882 call!14088 call!14091))) (_1!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (_2!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(assert (=> d!39891 (= (+!166 (ite c!23883 call!14090 (ite c!23882 call!14088 call!14091)) (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) lt!67938)))

(declare-fun b!130558 () Bool)

(declare-fun res!62925 () Bool)

(assert (=> b!130558 (=> (not res!62925) (not e!85157))))

(assert (=> b!130558 (= res!62925 (= (getValueByKey!170 (toList!837 lt!67938) (_1!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))) (Some!175 (_2!1283 (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))))

(declare-fun b!130559 () Bool)

(assert (=> b!130559 (= e!85157 (contains!875 (toList!837 lt!67938) (ite (or c!23883 c!23882) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (= (and d!39891 res!62926) b!130558))

(assert (= (and b!130558 res!62925) b!130559))

(declare-fun m!154063 () Bool)

(assert (=> d!39891 m!154063))

(declare-fun m!154065 () Bool)

(assert (=> d!39891 m!154065))

(declare-fun m!154067 () Bool)

(assert (=> d!39891 m!154067))

(declare-fun m!154069 () Bool)

(assert (=> d!39891 m!154069))

(declare-fun m!154071 () Bool)

(assert (=> b!130558 m!154071))

(declare-fun m!154073 () Bool)

(assert (=> b!130559 m!154073))

(assert (=> bm!14085 d!39891))

(declare-fun d!39893 () Bool)

(declare-fun e!85158 () Bool)

(assert (=> d!39893 e!85158))

(declare-fun res!62927 () Bool)

(assert (=> d!39893 (=> res!62927 e!85158)))

(declare-fun lt!67941 () Bool)

(assert (=> d!39893 (= res!62927 (not lt!67941))))

(declare-fun lt!67943 () Bool)

(assert (=> d!39893 (= lt!67941 lt!67943)))

(declare-fun lt!67942 () Unit!4042)

(declare-fun e!85159 () Unit!4042)

(assert (=> d!39893 (= lt!67942 e!85159)))

(declare-fun c!24108 () Bool)

(assert (=> d!39893 (= c!24108 lt!67943)))

(assert (=> d!39893 (= lt!67943 (containsKey!173 (toList!837 lt!67424) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!39893 (= (contains!873 lt!67424 #b0000000000000000000000000000000000000000000000000000000000000000) lt!67941)))

(declare-fun b!130560 () Bool)

(declare-fun lt!67944 () Unit!4042)

(assert (=> b!130560 (= e!85159 lt!67944)))

(assert (=> b!130560 (= lt!67944 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67424) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130560 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130561 () Bool)

(declare-fun Unit!4085 () Unit!4042)

(assert (=> b!130561 (= e!85159 Unit!4085)))

(declare-fun b!130562 () Bool)

(assert (=> b!130562 (= e!85158 (isDefined!122 (getValueByKey!170 (toList!837 lt!67424) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39893 c!24108) b!130560))

(assert (= (and d!39893 (not c!24108)) b!130561))

(assert (= (and d!39893 (not res!62927)) b!130562))

(declare-fun m!154075 () Bool)

(assert (=> d!39893 m!154075))

(declare-fun m!154077 () Bool)

(assert (=> b!130560 m!154077))

(assert (=> b!130560 m!152995))

(assert (=> b!130560 m!152995))

(declare-fun m!154079 () Bool)

(assert (=> b!130560 m!154079))

(assert (=> b!130562 m!152995))

(assert (=> b!130562 m!152995))

(assert (=> b!130562 m!154079))

(assert (=> bm!14110 d!39893))

(declare-fun d!39895 () Bool)

(assert (=> d!39895 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(declare-fun lt!67945 () Unit!4042)

(assert (=> d!39895 (= lt!67945 (choose!797 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(declare-fun e!85160 () Bool)

(assert (=> d!39895 e!85160))

(declare-fun res!62928 () Bool)

(assert (=> d!39895 (=> (not res!62928) (not e!85160))))

(assert (=> d!39895 (= res!62928 (isStrictlySorted!306 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39895 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274) lt!67945)))

(declare-fun b!130563 () Bool)

(assert (=> b!130563 (= e!85160 (containsKey!173 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274))))

(assert (= (and d!39895 res!62928) b!130563))

(assert (=> d!39895 m!152657))

(assert (=> d!39895 m!152657))

(assert (=> d!39895 m!152659))

(declare-fun m!154081 () Bool)

(assert (=> d!39895 m!154081))

(declare-fun m!154083 () Bool)

(assert (=> d!39895 m!154083))

(assert (=> b!130563 m!152653))

(assert (=> b!129865 d!39895))

(assert (=> b!129865 d!39753))

(assert (=> b!129865 d!39755))

(assert (=> b!130001 d!39587))

(declare-fun d!39897 () Bool)

(declare-fun res!62932 () Bool)

(declare-fun e!85161 () Bool)

(assert (=> d!39897 (=> (not res!62932) (not e!85161))))

(assert (=> d!39897 (= res!62932 (validMask!0 (mask!7101 (_2!1284 lt!67191))))))

(assert (=> d!39897 (= (simpleValid!89 (_2!1284 lt!67191)) e!85161)))

(declare-fun b!130567 () Bool)

(assert (=> b!130567 (= e!85161 (and (bvsge (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000000) (bvsle (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000011) (bvsge (_vacant!588 (_2!1284 lt!67191)) #b00000000000000000000000000000000)))))

(declare-fun b!130565 () Bool)

(declare-fun res!62930 () Bool)

(assert (=> b!130565 (=> (not res!62930) (not e!85161))))

(assert (=> b!130565 (= res!62930 (bvsge (size!2506 (_2!1284 lt!67191)) (_size!588 (_2!1284 lt!67191))))))

(declare-fun b!130564 () Bool)

(declare-fun res!62929 () Bool)

(assert (=> b!130564 (=> (not res!62929) (not e!85161))))

(assert (=> b!130564 (= res!62929 (and (= (size!2501 (_values!2806 (_2!1284 lt!67191))) (bvadd (mask!7101 (_2!1284 lt!67191)) #b00000000000000000000000000000001)) (= (size!2500 (_keys!4564 (_2!1284 lt!67191))) (size!2501 (_values!2806 (_2!1284 lt!67191)))) (bvsge (_size!588 (_2!1284 lt!67191)) #b00000000000000000000000000000000) (bvsle (_size!588 (_2!1284 lt!67191)) (bvadd (mask!7101 (_2!1284 lt!67191)) #b00000000000000000000000000000001))))))

(declare-fun b!130566 () Bool)

(declare-fun res!62931 () Bool)

(assert (=> b!130566 (=> (not res!62931) (not e!85161))))

(assert (=> b!130566 (= res!62931 (= (size!2506 (_2!1284 lt!67191)) (bvadd (_size!588 (_2!1284 lt!67191)) (bvsdiv (bvadd (extraKeys!2596 (_2!1284 lt!67191)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!39897 res!62932) b!130564))

(assert (= (and b!130564 res!62929) b!130565))

(assert (= (and b!130565 res!62930) b!130566))

(assert (= (and b!130566 res!62931) b!130567))

(assert (=> d!39897 m!153861))

(declare-fun m!154085 () Bool)

(assert (=> b!130565 m!154085))

(assert (=> b!130566 m!154085))

(assert (=> d!39457 d!39897))

(declare-fun d!39899 () Bool)

(assert (=> d!39899 (= (apply!113 lt!67457 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67457) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5443 () Bool)

(assert (= bs!5443 d!39899))

(assert (=> bs!5443 m!153085))

(assert (=> bs!5443 m!153085))

(declare-fun m!154087 () Bool)

(assert (=> bs!5443 m!154087))

(assert (=> b!129966 d!39899))

(declare-fun d!39901 () Bool)

(assert (=> d!39901 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!67946 () Unit!4042)

(assert (=> d!39901 (= lt!67946 (choose!797 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!85162 () Bool)

(assert (=> d!39901 e!85162))

(declare-fun res!62933 () Bool)

(assert (=> d!39901 (=> (not res!62933) (not e!85162))))

(assert (=> d!39901 (= res!62933 (isStrictlySorted!306 (toList!837 lt!67261)))))

(assert (=> d!39901 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000) lt!67946)))

(declare-fun b!130568 () Bool)

(assert (=> b!130568 (= e!85162 (containsKey!173 (toList!837 lt!67261) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!39901 res!62933) b!130568))

(assert (=> d!39901 m!152463))

(assert (=> d!39901 m!152463))

(assert (=> d!39901 m!152465))

(declare-fun m!154089 () Bool)

(assert (=> d!39901 m!154089))

(assert (=> d!39901 m!153091))

(assert (=> b!130568 m!152459))

(assert (=> b!129755 d!39901))

(assert (=> b!129755 d!39637))

(assert (=> b!129755 d!39639))

(declare-fun b!130569 () Bool)

(declare-fun e!85163 () (_ BitVec 32))

(declare-fun call!14200 () (_ BitVec 32))

(assert (=> b!130569 (= e!85163 (bvadd #b00000000000000000000000000000001 call!14200))))

(declare-fun b!130570 () Bool)

(declare-fun e!85164 () (_ BitVec 32))

(assert (=> b!130570 (= e!85164 e!85163)))

(declare-fun c!24109 () Bool)

(assert (=> b!130570 (= c!24109 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(declare-fun bm!14197 () Bool)

(assert (=> bm!14197 (= call!14200 (arrayCountValidKeys!0 (_keys!4564 (_2!1284 lt!67191)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(declare-fun b!130571 () Bool)

(assert (=> b!130571 (= e!85163 call!14200)))

(declare-fun b!130572 () Bool)

(assert (=> b!130572 (= e!85164 #b00000000000000000000000000000000)))

(declare-fun d!39903 () Bool)

(declare-fun lt!67947 () (_ BitVec 32))

(assert (=> d!39903 (and (bvsge lt!67947 #b00000000000000000000000000000000) (bvsle lt!67947 (bvsub (size!2500 (_keys!4564 (_2!1284 lt!67191))) #b00000000000000000000000000000000)))))

(assert (=> d!39903 (= lt!67947 e!85164)))

(declare-fun c!24110 () Bool)

(assert (=> d!39903 (= c!24110 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (=> d!39903 (and (bvsle #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2500 (_keys!4564 (_2!1284 lt!67191))) (size!2500 (_keys!4564 (_2!1284 lt!67191)))))))

(assert (=> d!39903 (= (arrayCountValidKeys!0 (_keys!4564 (_2!1284 lt!67191)) #b00000000000000000000000000000000 (size!2500 (_keys!4564 (_2!1284 lt!67191)))) lt!67947)))

(assert (= (and d!39903 c!24110) b!130572))

(assert (= (and d!39903 (not c!24110)) b!130570))

(assert (= (and b!130570 c!24109) b!130569))

(assert (= (and b!130570 (not c!24109)) b!130571))

(assert (= (or b!130569 b!130571) bm!14197))

(assert (=> b!130570 m!153133))

(assert (=> b!130570 m!153133))

(assert (=> b!130570 m!153137))

(declare-fun m!154091 () Bool)

(assert (=> bm!14197 m!154091))

(assert (=> b!129752 d!39903))

(declare-fun d!39905 () Bool)

(assert (=> d!39905 (isDefined!122 (getValueByKey!170 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!67948 () Unit!4042)

(assert (=> d!39905 (= lt!67948 (choose!797 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!85165 () Bool)

(assert (=> d!39905 e!85165))

(declare-fun res!62934 () Bool)

(assert (=> d!39905 (=> (not res!62934) (not e!85165))))

(assert (=> d!39905 (= res!62934 (isStrictlySorted!306 (toList!837 lt!67261)))))

(assert (=> d!39905 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000) lt!67948)))

(declare-fun b!130573 () Bool)

(assert (=> b!130573 (= e!85165 (containsKey!173 (toList!837 lt!67261) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!39905 res!62934) b!130573))

(assert (=> d!39905 m!152493))

(assert (=> d!39905 m!152493))

(assert (=> d!39905 m!152743))

(declare-fun m!154093 () Bool)

(assert (=> d!39905 m!154093))

(assert (=> d!39905 m!153091))

(assert (=> b!130573 m!152739))

(assert (=> b!129928 d!39905))

(assert (=> b!129928 d!39633))

(assert (=> b!129928 d!39635))

(declare-fun d!39907 () Bool)

(assert (=> d!39907 (= (get!1471 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3159 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!129723 d!39907))

(declare-fun d!39909 () Bool)

(assert (=> d!39909 (arrayContainsKey!0 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000)))

(declare-fun lt!67951 () Unit!4042)

(declare-fun choose!13 (array!4721 (_ BitVec 64) (_ BitVec 32)) Unit!4042)

(assert (=> d!39909 (= lt!67951 (choose!13 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000))))

(assert (=> d!39909 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!39909 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000) lt!67951)))

(declare-fun bs!5444 () Bool)

(assert (= bs!5444 d!39909))

(assert (=> bs!5444 m!152829))

(declare-fun m!154095 () Bool)

(assert (=> bs!5444 m!154095))

(assert (=> b!130002 d!39909))

(declare-fun d!39911 () Bool)

(declare-fun res!62935 () Bool)

(declare-fun e!85166 () Bool)

(assert (=> d!39911 (=> res!62935 e!85166)))

(assert (=> d!39911 (= res!62935 (= (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) lt!67492))))

(assert (=> d!39911 (= (arrayContainsKey!0 (_keys!4564 newMap!16) lt!67492 #b00000000000000000000000000000000) e!85166)))

(declare-fun b!130574 () Bool)

(declare-fun e!85167 () Bool)

(assert (=> b!130574 (= e!85166 e!85167)))

(declare-fun res!62936 () Bool)

(assert (=> b!130574 (=> (not res!62936) (not e!85167))))

(assert (=> b!130574 (= res!62936 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130575 () Bool)

(assert (=> b!130575 (= e!85167 (arrayContainsKey!0 (_keys!4564 newMap!16) lt!67492 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!39911 (not res!62935)) b!130574))

(assert (= (and b!130574 res!62936) b!130575))

(assert (=> d!39911 m!152369))

(declare-fun m!154097 () Bool)

(assert (=> b!130575 m!154097))

(assert (=> b!130002 d!39911))

(declare-fun d!39913 () Bool)

(declare-fun lt!67954 () SeekEntryResult!266)

(assert (=> d!39913 (and (or ((_ is Undefined!266) lt!67954) (not ((_ is Found!266) lt!67954)) (and (bvsge (index!3222 lt!67954) #b00000000000000000000000000000000) (bvslt (index!3222 lt!67954) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67954) ((_ is Found!266) lt!67954) (not ((_ is MissingZero!266) lt!67954)) (and (bvsge (index!3221 lt!67954) #b00000000000000000000000000000000) (bvslt (index!3221 lt!67954) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67954) ((_ is Found!266) lt!67954) ((_ is MissingZero!266) lt!67954) (not ((_ is MissingVacant!266) lt!67954)) (and (bvsge (index!3224 lt!67954) #b00000000000000000000000000000000) (bvslt (index!3224 lt!67954) (size!2500 (_keys!4564 newMap!16))))) (or ((_ is Undefined!266) lt!67954) (ite ((_ is Found!266) lt!67954) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67954)) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!266) lt!67954) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!67954)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!266) lt!67954) (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!67954)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!85168 () SeekEntryResult!266)

(assert (=> d!39913 (= lt!67954 e!85168)))

(declare-fun c!24113 () Bool)

(declare-fun lt!67952 () SeekEntryResult!266)

(assert (=> d!39913 (= c!24113 (and ((_ is Intermediate!266) lt!67952) (undefined!1078 lt!67952)))))

(assert (=> d!39913 (= lt!67952 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (mask!7101 newMap!16)) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(assert (=> d!39913 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39913 (= (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (_keys!4564 newMap!16) (mask!7101 newMap!16)) lt!67954)))

(declare-fun b!130576 () Bool)

(declare-fun e!85170 () SeekEntryResult!266)

(assert (=> b!130576 (= e!85168 e!85170)))

(declare-fun lt!67953 () (_ BitVec 64))

(assert (=> b!130576 (= lt!67953 (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!67952)))))

(declare-fun c!24112 () Bool)

(assert (=> b!130576 (= c!24112 (= lt!67953 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130577 () Bool)

(assert (=> b!130577 (= e!85168 Undefined!266)))

(declare-fun b!130578 () Bool)

(declare-fun e!85169 () SeekEntryResult!266)

(assert (=> b!130578 (= e!85169 (MissingZero!266 (index!3223 lt!67952)))))

(declare-fun b!130579 () Bool)

(assert (=> b!130579 (= e!85169 (seekKeyOrZeroReturnVacant!0 (x!15261 lt!67952) (index!3223 lt!67952) (index!3223 lt!67952) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!130580 () Bool)

(declare-fun c!24111 () Bool)

(assert (=> b!130580 (= c!24111 (= lt!67953 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130580 (= e!85170 e!85169)))

(declare-fun b!130581 () Bool)

(assert (=> b!130581 (= e!85170 (Found!266 (index!3223 lt!67952)))))

(assert (= (and d!39913 c!24113) b!130577))

(assert (= (and d!39913 (not c!24113)) b!130576))

(assert (= (and b!130576 c!24112) b!130581))

(assert (= (and b!130576 (not c!24112)) b!130580))

(assert (= (and b!130580 c!24111) b!130578))

(assert (= (and b!130580 (not c!24111)) b!130579))

(assert (=> d!39913 m!152369))

(declare-fun m!154099 () Bool)

(assert (=> d!39913 m!154099))

(declare-fun m!154101 () Bool)

(assert (=> d!39913 m!154101))

(assert (=> d!39913 m!152389))

(assert (=> d!39913 m!154099))

(assert (=> d!39913 m!152369))

(declare-fun m!154103 () Bool)

(assert (=> d!39913 m!154103))

(declare-fun m!154105 () Bool)

(assert (=> d!39913 m!154105))

(declare-fun m!154107 () Bool)

(assert (=> d!39913 m!154107))

(declare-fun m!154109 () Bool)

(assert (=> b!130576 m!154109))

(assert (=> b!130579 m!152369))

(declare-fun m!154111 () Bool)

(assert (=> b!130579 m!154111))

(assert (=> b!130002 d!39913))

(declare-fun d!39915 () Bool)

(declare-fun e!85171 () Bool)

(assert (=> d!39915 e!85171))

(declare-fun res!62937 () Bool)

(assert (=> d!39915 (=> res!62937 e!85171)))

(declare-fun lt!67955 () Bool)

(assert (=> d!39915 (= res!62937 (not lt!67955))))

(declare-fun lt!67957 () Bool)

(assert (=> d!39915 (= lt!67955 lt!67957)))

(declare-fun lt!67956 () Unit!4042)

(declare-fun e!85172 () Unit!4042)

(assert (=> d!39915 (= lt!67956 e!85172)))

(declare-fun c!24114 () Bool)

(assert (=> d!39915 (= c!24114 lt!67957)))

(assert (=> d!39915 (= lt!67957 (containsKey!173 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!39915 (= (contains!873 lt!67399 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67955)))

(declare-fun b!130582 () Bool)

(declare-fun lt!67958 () Unit!4042)

(assert (=> b!130582 (= e!85172 lt!67958)))

(assert (=> b!130582 (= lt!67958 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> b!130582 (isDefined!122 (getValueByKey!170 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130583 () Bool)

(declare-fun Unit!4086 () Unit!4042)

(assert (=> b!130583 (= e!85172 Unit!4086)))

(declare-fun b!130584 () Bool)

(assert (=> b!130584 (= e!85171 (isDefined!122 (getValueByKey!170 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39915 c!24114) b!130582))

(assert (= (and d!39915 (not c!24114)) b!130583))

(assert (= (and d!39915 (not res!62937)) b!130584))

(declare-fun m!154113 () Bool)

(assert (=> d!39915 m!154113))

(declare-fun m!154115 () Bool)

(assert (=> b!130582 m!154115))

(assert (=> b!130582 m!152633))

(assert (=> b!130582 m!152633))

(declare-fun m!154117 () Bool)

(assert (=> b!130582 m!154117))

(assert (=> b!130584 m!152633))

(assert (=> b!130584 m!152633))

(assert (=> b!130584 m!154117))

(assert (=> d!39493 d!39915))

(declare-fun b!130585 () Bool)

(declare-fun e!85173 () Option!176)

(assert (=> b!130585 (= e!85173 (Some!175 (_2!1283 (h!2285 lt!67400))))))

(declare-fun b!130588 () Bool)

(declare-fun e!85174 () Option!176)

(assert (=> b!130588 (= e!85174 None!174)))

(declare-fun b!130587 () Bool)

(assert (=> b!130587 (= e!85174 (getValueByKey!170 (t!6076 lt!67400) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130586 () Bool)

(assert (=> b!130586 (= e!85173 e!85174)))

(declare-fun c!24116 () Bool)

(assert (=> b!130586 (= c!24116 (and ((_ is Cons!1681) lt!67400) (not (= (_1!1283 (h!2285 lt!67400)) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24115 () Bool)

(declare-fun d!39917 () Bool)

(assert (=> d!39917 (= c!24115 (and ((_ is Cons!1681) lt!67400) (= (_1!1283 (h!2285 lt!67400)) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39917 (= (getValueByKey!170 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85173)))

(assert (= (and d!39917 c!24115) b!130585))

(assert (= (and d!39917 (not c!24115)) b!130586))

(assert (= (and b!130586 c!24116) b!130587))

(assert (= (and b!130586 (not c!24116)) b!130588))

(declare-fun m!154119 () Bool)

(assert (=> b!130587 m!154119))

(assert (=> d!39493 d!39917))

(declare-fun d!39919 () Bool)

(assert (=> d!39919 (= (getValueByKey!170 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!67959 () Unit!4042)

(assert (=> d!39919 (= lt!67959 (choose!802 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!85175 () Bool)

(assert (=> d!39919 e!85175))

(declare-fun res!62938 () Bool)

(assert (=> d!39919 (=> (not res!62938) (not e!85175))))

(assert (=> d!39919 (= res!62938 (isStrictlySorted!306 lt!67400))))

(assert (=> d!39919 (= (lemmaContainsTupThenGetReturnValue!85 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67959)))

(declare-fun b!130589 () Bool)

(declare-fun res!62939 () Bool)

(assert (=> b!130589 (=> (not res!62939) (not e!85175))))

(assert (=> b!130589 (= res!62939 (containsKey!173 lt!67400 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130590 () Bool)

(assert (=> b!130590 (= e!85175 (contains!875 lt!67400 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!39919 res!62938) b!130589))

(assert (= (and b!130589 res!62939) b!130590))

(assert (=> d!39919 m!152627))

(declare-fun m!154121 () Bool)

(assert (=> d!39919 m!154121))

(declare-fun m!154123 () Bool)

(assert (=> d!39919 m!154123))

(declare-fun m!154125 () Bool)

(assert (=> b!130589 m!154125))

(declare-fun m!154127 () Bool)

(assert (=> b!130590 m!154127))

(assert (=> d!39493 d!39919))

(declare-fun e!85176 () List!1685)

(declare-fun call!14201 () List!1685)

(declare-fun bm!14198 () Bool)

(declare-fun c!24118 () Bool)

(assert (=> bm!14198 (= call!14201 ($colon$colon!90 e!85176 (ite c!24118 (h!2285 (toList!837 lt!67260)) (tuple2!2545 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24120 () Bool)

(assert (=> bm!14198 (= c!24120 c!24118)))

(declare-fun b!130592 () Bool)

(assert (=> b!130592 (= e!85176 (insertStrictlySorted!88 (t!6076 (toList!837 lt!67260)) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130593 () Bool)

(declare-fun res!62941 () Bool)

(declare-fun e!85180 () Bool)

(assert (=> b!130593 (=> (not res!62941) (not e!85180))))

(declare-fun lt!67960 () List!1685)

(assert (=> b!130593 (= res!62941 (containsKey!173 lt!67960 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130594 () Bool)

(declare-fun c!24119 () Bool)

(assert (=> b!130594 (= c!24119 (and ((_ is Cons!1681) (toList!837 lt!67260)) (bvsgt (_1!1283 (h!2285 (toList!837 lt!67260))) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!85178 () List!1685)

(declare-fun e!85177 () List!1685)

(assert (=> b!130594 (= e!85178 e!85177)))

(declare-fun b!130591 () Bool)

(declare-fun c!24117 () Bool)

(assert (=> b!130591 (= e!85176 (ite c!24117 (t!6076 (toList!837 lt!67260)) (ite c!24119 (Cons!1681 (h!2285 (toList!837 lt!67260)) (t!6076 (toList!837 lt!67260))) Nil!1682)))))

(declare-fun d!39921 () Bool)

(assert (=> d!39921 e!85180))

(declare-fun res!62940 () Bool)

(assert (=> d!39921 (=> (not res!62940) (not e!85180))))

(assert (=> d!39921 (= res!62940 (isStrictlySorted!306 lt!67960))))

(declare-fun e!85179 () List!1685)

(assert (=> d!39921 (= lt!67960 e!85179)))

(assert (=> d!39921 (= c!24118 (and ((_ is Cons!1681) (toList!837 lt!67260)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67260))) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!39921 (isStrictlySorted!306 (toList!837 lt!67260))))

(assert (=> d!39921 (= (insertStrictlySorted!88 (toList!837 lt!67260) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67960)))

(declare-fun bm!14199 () Bool)

(declare-fun call!14202 () List!1685)

(declare-fun call!14203 () List!1685)

(assert (=> bm!14199 (= call!14202 call!14203)))

(declare-fun bm!14200 () Bool)

(assert (=> bm!14200 (= call!14203 call!14201)))

(declare-fun b!130595 () Bool)

(assert (=> b!130595 (= e!85179 e!85178)))

(assert (=> b!130595 (= c!24117 (and ((_ is Cons!1681) (toList!837 lt!67260)) (= (_1!1283 (h!2285 (toList!837 lt!67260))) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130596 () Bool)

(assert (=> b!130596 (= e!85180 (contains!875 lt!67960 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130597 () Bool)

(assert (=> b!130597 (= e!85178 call!14203)))

(declare-fun b!130598 () Bool)

(assert (=> b!130598 (= e!85177 call!14202)))

(declare-fun b!130599 () Bool)

(assert (=> b!130599 (= e!85179 call!14201)))

(declare-fun b!130600 () Bool)

(assert (=> b!130600 (= e!85177 call!14202)))

(assert (= (and d!39921 c!24118) b!130599))

(assert (= (and d!39921 (not c!24118)) b!130595))

(assert (= (and b!130595 c!24117) b!130597))

(assert (= (and b!130595 (not c!24117)) b!130594))

(assert (= (and b!130594 c!24119) b!130600))

(assert (= (and b!130594 (not c!24119)) b!130598))

(assert (= (or b!130600 b!130598) bm!14199))

(assert (= (or b!130597 bm!14199) bm!14200))

(assert (= (or b!130599 bm!14200) bm!14198))

(assert (= (and bm!14198 c!24120) b!130592))

(assert (= (and bm!14198 (not c!24120)) b!130591))

(assert (= (and d!39921 res!62940) b!130593))

(assert (= (and b!130593 res!62941) b!130596))

(declare-fun m!154129 () Bool)

(assert (=> bm!14198 m!154129))

(declare-fun m!154131 () Bool)

(assert (=> b!130592 m!154131))

(declare-fun m!154133 () Bool)

(assert (=> b!130593 m!154133))

(declare-fun m!154135 () Bool)

(assert (=> b!130596 m!154135))

(declare-fun m!154137 () Bool)

(assert (=> d!39921 m!154137))

(declare-fun m!154139 () Bool)

(assert (=> d!39921 m!154139))

(assert (=> d!39493 d!39921))

(declare-fun d!39923 () Bool)

(assert (=> d!39923 (= (isEmpty!409 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) (not ((_ is Some!175) (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))))

(assert (=> d!39523 d!39923))

(declare-fun d!39925 () Bool)

(assert (=> d!39925 (= (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67272)) (v!3166 (getValueByKey!170 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67272)))))

(assert (=> d!39489 d!39925))

(declare-fun e!85181 () Option!176)

(declare-fun b!130601 () Bool)

(assert (=> b!130601 (= e!85181 (Some!175 (_2!1283 (h!2285 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun b!130604 () Bool)

(declare-fun e!85182 () Option!176)

(assert (=> b!130604 (= e!85182 None!174)))

(declare-fun b!130603 () Bool)

(assert (=> b!130603 (= e!85182 (getValueByKey!170 (t!6076 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67272))))

(declare-fun b!130602 () Bool)

(assert (=> b!130602 (= e!85181 e!85182)))

(declare-fun c!24122 () Bool)

(assert (=> b!130602 (= c!24122 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (not (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67272))))))

(declare-fun c!24121 () Bool)

(declare-fun d!39927 () Bool)

(assert (=> d!39927 (= c!24121 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67272)))))

(assert (=> d!39927 (= (getValueByKey!170 (toList!837 (+!166 lt!67277 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67272) e!85181)))

(assert (= (and d!39927 c!24121) b!130601))

(assert (= (and d!39927 (not c!24121)) b!130602))

(assert (= (and b!130602 c!24122) b!130603))

(assert (= (and b!130602 (not c!24122)) b!130604))

(declare-fun m!154141 () Bool)

(assert (=> b!130603 m!154141))

(assert (=> d!39489 d!39927))

(declare-fun b!130605 () Bool)

(declare-fun e!85189 () Bool)

(declare-fun e!85185 () Bool)

(assert (=> b!130605 (= e!85189 e!85185)))

(declare-fun c!24126 () Bool)

(declare-fun e!85184 () Bool)

(assert (=> b!130605 (= c!24126 e!85184)))

(declare-fun res!62945 () Bool)

(assert (=> b!130605 (=> (not res!62945) (not e!85184))))

(assert (=> b!130605 (= res!62945 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130606 () Bool)

(assert (=> b!130606 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> b!130606 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 lt!67193)))))

(declare-fun lt!67965 () ListLongMap!1643)

(declare-fun e!85188 () Bool)

(assert (=> b!130606 (= e!85188 (= (apply!113 lt!67965 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!85186 () Bool)

(declare-fun b!130607 () Bool)

(assert (=> b!130607 (= e!85186 (= lt!67965 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16))))))

(declare-fun b!130608 () Bool)

(declare-fun lt!67964 () Unit!4042)

(declare-fun lt!67967 () Unit!4042)

(assert (=> b!130608 (= lt!67964 lt!67967)))

(declare-fun lt!67966 () (_ BitVec 64))

(declare-fun lt!67962 () (_ BitVec 64))

(declare-fun lt!67961 () ListLongMap!1643)

(declare-fun lt!67963 () V!3457)

(assert (=> b!130608 (not (contains!873 (+!166 lt!67961 (tuple2!2545 lt!67962 lt!67963)) lt!67966))))

(assert (=> b!130608 (= lt!67967 (addStillNotContains!60 lt!67961 lt!67962 lt!67963 lt!67966))))

(assert (=> b!130608 (= lt!67966 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!130608 (= lt!67963 (get!1469 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!130608 (= lt!67962 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!14204 () ListLongMap!1643)

(assert (=> b!130608 (= lt!67961 call!14204)))

(declare-fun e!85187 () ListLongMap!1643)

(assert (=> b!130608 (= e!85187 (+!166 call!14204 (tuple2!2545 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000) (get!1469 (select (arr!2235 lt!67193) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!130609 () Bool)

(assert (=> b!130609 (= e!85186 (isEmpty!408 lt!67965))))

(declare-fun d!39929 () Bool)

(assert (=> d!39929 e!85189))

(declare-fun res!62942 () Bool)

(assert (=> d!39929 (=> (not res!62942) (not e!85189))))

(assert (=> d!39929 (= res!62942 (not (contains!873 lt!67965 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!85183 () ListLongMap!1643)

(assert (=> d!39929 (= lt!67965 e!85183)))

(declare-fun c!24125 () Bool)

(assert (=> d!39929 (= c!24125 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39929 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39929 (= (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!67965)))

(declare-fun b!130610 () Bool)

(assert (=> b!130610 (= e!85184 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130610 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!130611 () Bool)

(assert (=> b!130611 (= e!85185 e!85188)))

(assert (=> b!130611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!62943 () Bool)

(assert (=> b!130611 (= res!62943 (contains!873 lt!67965 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130611 (=> (not res!62943) (not e!85188))))

(declare-fun b!130612 () Bool)

(assert (=> b!130612 (= e!85185 e!85186)))

(declare-fun c!24123 () Bool)

(assert (=> b!130612 (= c!24123 (bvslt #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130613 () Bool)

(assert (=> b!130613 (= e!85183 e!85187)))

(declare-fun c!24124 () Bool)

(assert (=> b!130613 (= c!24124 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130614 () Bool)

(assert (=> b!130614 (= e!85183 (ListLongMap!1644 Nil!1682))))

(declare-fun b!130615 () Bool)

(assert (=> b!130615 (= e!85187 call!14204)))

(declare-fun bm!14201 () Bool)

(assert (=> bm!14201 (= call!14204 (getCurrentListMapNoExtraKeys!133 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2823 newMap!16)))))

(declare-fun b!130616 () Bool)

(declare-fun res!62944 () Bool)

(assert (=> b!130616 (=> (not res!62944) (not e!85189))))

(assert (=> b!130616 (= res!62944 (not (contains!873 lt!67965 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!39929 c!24125) b!130614))

(assert (= (and d!39929 (not c!24125)) b!130613))

(assert (= (and b!130613 c!24124) b!130608))

(assert (= (and b!130613 (not c!24124)) b!130615))

(assert (= (or b!130608 b!130615) bm!14201))

(assert (= (and d!39929 res!62942) b!130616))

(assert (= (and b!130616 res!62944) b!130605))

(assert (= (and b!130605 res!62945) b!130610))

(assert (= (and b!130605 c!24126) b!130611))

(assert (= (and b!130605 (not c!24126)) b!130612))

(assert (= (and b!130611 res!62943) b!130606))

(assert (= (and b!130612 c!24123) b!130607))

(assert (= (and b!130612 (not c!24123)) b!130609))

(declare-fun b_lambda!5811 () Bool)

(assert (=> (not b_lambda!5811) (not b!130606)))

(assert (=> b!130606 t!6088))

(declare-fun b_and!8097 () Bool)

(assert (= b_and!8093 (and (=> t!6088 result!3917) b_and!8097)))

(assert (=> b!130606 t!6090))

(declare-fun b_and!8099 () Bool)

(assert (= b_and!8095 (and (=> t!6090 result!3919) b_and!8099)))

(declare-fun b_lambda!5813 () Bool)

(assert (=> (not b_lambda!5813) (not b!130608)))

(assert (=> b!130608 t!6088))

(declare-fun b_and!8101 () Bool)

(assert (= b_and!8097 (and (=> t!6088 result!3917) b_and!8101)))

(assert (=> b!130608 t!6090))

(declare-fun b_and!8103 () Bool)

(assert (= b_and!8099 (and (=> t!6090 result!3919) b_and!8103)))

(declare-fun m!154143 () Bool)

(assert (=> b!130609 m!154143))

(declare-fun m!154145 () Bool)

(assert (=> bm!14201 m!154145))

(assert (=> b!130607 m!154145))

(assert (=> b!130611 m!152369))

(assert (=> b!130611 m!152369))

(declare-fun m!154147 () Bool)

(assert (=> b!130611 m!154147))

(assert (=> b!130606 m!152369))

(declare-fun m!154149 () Bool)

(assert (=> b!130606 m!154149))

(assert (=> b!130606 m!152441))

(assert (=> b!130606 m!152807))

(assert (=> b!130606 m!152441))

(assert (=> b!130606 m!152809))

(assert (=> b!130606 m!152369))

(assert (=> b!130606 m!152807))

(declare-fun m!154151 () Bool)

(assert (=> b!130616 m!154151))

(declare-fun m!154153 () Bool)

(assert (=> b!130608 m!154153))

(declare-fun m!154155 () Bool)

(assert (=> b!130608 m!154155))

(assert (=> b!130608 m!154153))

(declare-fun m!154157 () Bool)

(assert (=> b!130608 m!154157))

(assert (=> b!130608 m!152441))

(assert (=> b!130608 m!152807))

(assert (=> b!130608 m!152441))

(assert (=> b!130608 m!152809))

(assert (=> b!130608 m!152369))

(assert (=> b!130608 m!152807))

(declare-fun m!154159 () Bool)

(assert (=> b!130608 m!154159))

(assert (=> b!130613 m!152369))

(assert (=> b!130613 m!152369))

(assert (=> b!130613 m!152403))

(declare-fun m!154161 () Bool)

(assert (=> d!39929 m!154161))

(assert (=> d!39929 m!152389))

(assert (=> b!130610 m!152369))

(assert (=> b!130610 m!152369))

(assert (=> b!130610 m!152403))

(assert (=> bm!14118 d!39929))

(declare-fun lt!67968 () Bool)

(declare-fun d!39931 () Bool)

(assert (=> d!39931 (= lt!67968 (select (content!131 (toList!837 lt!67494)) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!85191 () Bool)

(assert (=> d!39931 (= lt!67968 e!85191)))

(declare-fun res!62946 () Bool)

(assert (=> d!39931 (=> (not res!62946) (not e!85191))))

(assert (=> d!39931 (= res!62946 ((_ is Cons!1681) (toList!837 lt!67494)))))

(assert (=> d!39931 (= (contains!875 (toList!837 lt!67494) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67968)))

(declare-fun b!130617 () Bool)

(declare-fun e!85190 () Bool)

(assert (=> b!130617 (= e!85191 e!85190)))

(declare-fun res!62947 () Bool)

(assert (=> b!130617 (=> res!62947 e!85190)))

(assert (=> b!130617 (= res!62947 (= (h!2285 (toList!837 lt!67494)) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130618 () Bool)

(assert (=> b!130618 (= e!85190 (contains!875 (t!6076 (toList!837 lt!67494)) (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (= (and d!39931 res!62946) b!130617))

(assert (= (and b!130617 (not res!62947)) b!130618))

(declare-fun m!154163 () Bool)

(assert (=> d!39931 m!154163))

(declare-fun m!154165 () Bool)

(assert (=> d!39931 m!154165))

(declare-fun m!154167 () Bool)

(assert (=> b!130618 m!154167))

(assert (=> b!130004 d!39931))

(assert (=> b!129973 d!39929))

(declare-fun d!39933 () Bool)

(assert (=> d!39933 (contains!873 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) lt!67470)))

(declare-fun lt!67969 () Unit!4042)

(assert (=> d!39933 (= lt!67969 (choose!795 lt!67463 lt!67458 (zeroValue!2682 newMap!16) lt!67470))))

(assert (=> d!39933 (contains!873 lt!67463 lt!67470)))

(assert (=> d!39933 (= (addStillContains!89 lt!67463 lt!67458 (zeroValue!2682 newMap!16) lt!67470) lt!67969)))

(declare-fun bs!5445 () Bool)

(assert (= bs!5445 d!39933))

(assert (=> bs!5445 m!152781))

(assert (=> bs!5445 m!152781))

(assert (=> bs!5445 m!152795))

(declare-fun m!154169 () Bool)

(assert (=> bs!5445 m!154169))

(declare-fun m!154171 () Bool)

(assert (=> bs!5445 m!154171))

(assert (=> b!129973 d!39933))

(declare-fun d!39935 () Bool)

(assert (=> d!39935 (= (apply!113 (+!166 lt!67456 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) lt!67475) (apply!113 lt!67456 lt!67475))))

(declare-fun lt!67970 () Unit!4042)

(assert (=> d!39935 (= lt!67970 (choose!794 lt!67456 lt!67464 (minValue!2682 newMap!16) lt!67475))))

(declare-fun e!85192 () Bool)

(assert (=> d!39935 e!85192))

(declare-fun res!62948 () Bool)

(assert (=> d!39935 (=> (not res!62948) (not e!85192))))

(assert (=> d!39935 (= res!62948 (contains!873 lt!67456 lt!67475))))

(assert (=> d!39935 (= (addApplyDifferent!89 lt!67456 lt!67464 (minValue!2682 newMap!16) lt!67475) lt!67970)))

(declare-fun b!130619 () Bool)

(assert (=> b!130619 (= e!85192 (not (= lt!67475 lt!67464)))))

(assert (= (and d!39935 res!62948) b!130619))

(declare-fun m!154173 () Bool)

(assert (=> d!39935 m!154173))

(assert (=> d!39935 m!152775))

(assert (=> d!39935 m!152777))

(assert (=> d!39935 m!152775))

(assert (=> d!39935 m!152793))

(declare-fun m!154175 () Bool)

(assert (=> d!39935 m!154175))

(assert (=> b!129973 d!39935))

(declare-fun d!39937 () Bool)

(assert (=> d!39937 (= (apply!113 (+!166 lt!67473 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) lt!67468) (apply!113 lt!67473 lt!67468))))

(declare-fun lt!67971 () Unit!4042)

(assert (=> d!39937 (= lt!67971 (choose!794 lt!67473 lt!67461 (minValue!2682 newMap!16) lt!67468))))

(declare-fun e!85193 () Bool)

(assert (=> d!39937 e!85193))

(declare-fun res!62949 () Bool)

(assert (=> d!39937 (=> (not res!62949) (not e!85193))))

(assert (=> d!39937 (= res!62949 (contains!873 lt!67473 lt!67468))))

(assert (=> d!39937 (= (addApplyDifferent!89 lt!67473 lt!67461 (minValue!2682 newMap!16) lt!67468) lt!67971)))

(declare-fun b!130620 () Bool)

(assert (=> b!130620 (= e!85193 (not (= lt!67468 lt!67461)))))

(assert (= (and d!39937 res!62949) b!130620))

(declare-fun m!154177 () Bool)

(assert (=> d!39937 m!154177))

(assert (=> d!39937 m!152783))

(assert (=> d!39937 m!152785))

(assert (=> d!39937 m!152783))

(assert (=> d!39937 m!152773))

(declare-fun m!154179 () Bool)

(assert (=> d!39937 m!154179))

(assert (=> b!129973 d!39937))

(declare-fun d!39939 () Bool)

(declare-fun e!85194 () Bool)

(assert (=> d!39939 e!85194))

(declare-fun res!62951 () Bool)

(assert (=> d!39939 (=> (not res!62951) (not e!85194))))

(declare-fun lt!67973 () ListLongMap!1643)

(assert (=> d!39939 (= res!62951 (contains!873 lt!67973 (_1!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))))))

(declare-fun lt!67974 () List!1685)

(assert (=> d!39939 (= lt!67973 (ListLongMap!1644 lt!67974))))

(declare-fun lt!67975 () Unit!4042)

(declare-fun lt!67972 () Unit!4042)

(assert (=> d!39939 (= lt!67975 lt!67972)))

(assert (=> d!39939 (= (getValueByKey!170 lt!67974 (_1!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))))))

(assert (=> d!39939 (= lt!67972 (lemmaContainsTupThenGetReturnValue!85 lt!67974 (_1!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))))))

(assert (=> d!39939 (= lt!67974 (insertStrictlySorted!88 (toList!837 lt!67456) (_1!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))))))

(assert (=> d!39939 (= (+!166 lt!67456 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) lt!67973)))

(declare-fun b!130621 () Bool)

(declare-fun res!62950 () Bool)

(assert (=> b!130621 (=> (not res!62950) (not e!85194))))

(assert (=> b!130621 (= res!62950 (= (getValueByKey!170 (toList!837 lt!67973) (_1!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))))))))

(declare-fun b!130622 () Bool)

(assert (=> b!130622 (= e!85194 (contains!875 (toList!837 lt!67973) (tuple2!2545 lt!67464 (minValue!2682 newMap!16))))))

(assert (= (and d!39939 res!62951) b!130621))

(assert (= (and b!130621 res!62950) b!130622))

(declare-fun m!154181 () Bool)

(assert (=> d!39939 m!154181))

(declare-fun m!154183 () Bool)

(assert (=> d!39939 m!154183))

(declare-fun m!154185 () Bool)

(assert (=> d!39939 m!154185))

(declare-fun m!154187 () Bool)

(assert (=> d!39939 m!154187))

(declare-fun m!154189 () Bool)

(assert (=> b!130621 m!154189))

(declare-fun m!154191 () Bool)

(assert (=> b!130622 m!154191))

(assert (=> b!129973 d!39939))

(declare-fun d!39941 () Bool)

(assert (=> d!39941 (= (apply!113 (+!166 lt!67465 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) lt!67459) (apply!113 lt!67465 lt!67459))))

(declare-fun lt!67976 () Unit!4042)

(assert (=> d!39941 (= lt!67976 (choose!794 lt!67465 lt!67474 (zeroValue!2682 newMap!16) lt!67459))))

(declare-fun e!85195 () Bool)

(assert (=> d!39941 e!85195))

(declare-fun res!62952 () Bool)

(assert (=> d!39941 (=> (not res!62952) (not e!85195))))

(assert (=> d!39941 (= res!62952 (contains!873 lt!67465 lt!67459))))

(assert (=> d!39941 (= (addApplyDifferent!89 lt!67465 lt!67474 (zeroValue!2682 newMap!16) lt!67459) lt!67976)))

(declare-fun b!130623 () Bool)

(assert (=> b!130623 (= e!85195 (not (= lt!67459 lt!67474)))))

(assert (= (and d!39941 res!62952) b!130623))

(declare-fun m!154193 () Bool)

(assert (=> d!39941 m!154193))

(assert (=> d!39941 m!152787))

(assert (=> d!39941 m!152791))

(assert (=> d!39941 m!152787))

(assert (=> d!39941 m!152799))

(declare-fun m!154195 () Bool)

(assert (=> d!39941 m!154195))

(assert (=> b!129973 d!39941))

(declare-fun d!39943 () Bool)

(assert (=> d!39943 (= (apply!113 (+!166 lt!67465 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) lt!67459) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67465 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))) lt!67459)))))

(declare-fun bs!5446 () Bool)

(assert (= bs!5446 d!39943))

(declare-fun m!154197 () Bool)

(assert (=> bs!5446 m!154197))

(assert (=> bs!5446 m!154197))

(declare-fun m!154199 () Bool)

(assert (=> bs!5446 m!154199))

(assert (=> b!129973 d!39943))

(declare-fun d!39945 () Bool)

(assert (=> d!39945 (= (apply!113 (+!166 lt!67473 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) lt!67468) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67473 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))) lt!67468)))))

(declare-fun bs!5447 () Bool)

(assert (= bs!5447 d!39945))

(declare-fun m!154201 () Bool)

(assert (=> bs!5447 m!154201))

(assert (=> bs!5447 m!154201))

(declare-fun m!154203 () Bool)

(assert (=> bs!5447 m!154203))

(assert (=> b!129973 d!39945))

(declare-fun d!39947 () Bool)

(assert (=> d!39947 (= (apply!113 lt!67456 lt!67475) (get!1473 (getValueByKey!170 (toList!837 lt!67456) lt!67475)))))

(declare-fun bs!5448 () Bool)

(assert (= bs!5448 d!39947))

(declare-fun m!154205 () Bool)

(assert (=> bs!5448 m!154205))

(assert (=> bs!5448 m!154205))

(declare-fun m!154207 () Bool)

(assert (=> bs!5448 m!154207))

(assert (=> b!129973 d!39947))

(declare-fun d!39949 () Bool)

(declare-fun e!85196 () Bool)

(assert (=> d!39949 e!85196))

(declare-fun res!62953 () Bool)

(assert (=> d!39949 (=> res!62953 e!85196)))

(declare-fun lt!67977 () Bool)

(assert (=> d!39949 (= res!62953 (not lt!67977))))

(declare-fun lt!67979 () Bool)

(assert (=> d!39949 (= lt!67977 lt!67979)))

(declare-fun lt!67978 () Unit!4042)

(declare-fun e!85197 () Unit!4042)

(assert (=> d!39949 (= lt!67978 e!85197)))

(declare-fun c!24127 () Bool)

(assert (=> d!39949 (= c!24127 lt!67979)))

(assert (=> d!39949 (= lt!67979 (containsKey!173 (toList!837 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) lt!67470))))

(assert (=> d!39949 (= (contains!873 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) lt!67470) lt!67977)))

(declare-fun b!130624 () Bool)

(declare-fun lt!67980 () Unit!4042)

(assert (=> b!130624 (= e!85197 lt!67980)))

(assert (=> b!130624 (= lt!67980 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) lt!67470))))

(assert (=> b!130624 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) lt!67470))))

(declare-fun b!130625 () Bool)

(declare-fun Unit!4087 () Unit!4042)

(assert (=> b!130625 (= e!85197 Unit!4087)))

(declare-fun b!130626 () Bool)

(assert (=> b!130626 (= e!85196 (isDefined!122 (getValueByKey!170 (toList!837 (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) lt!67470)))))

(assert (= (and d!39949 c!24127) b!130624))

(assert (= (and d!39949 (not c!24127)) b!130625))

(assert (= (and d!39949 (not res!62953)) b!130626))

(declare-fun m!154209 () Bool)

(assert (=> d!39949 m!154209))

(declare-fun m!154211 () Bool)

(assert (=> b!130624 m!154211))

(declare-fun m!154213 () Bool)

(assert (=> b!130624 m!154213))

(assert (=> b!130624 m!154213))

(declare-fun m!154215 () Bool)

(assert (=> b!130624 m!154215))

(assert (=> b!130626 m!154213))

(assert (=> b!130626 m!154213))

(assert (=> b!130626 m!154215))

(assert (=> b!129973 d!39949))

(declare-fun d!39951 () Bool)

(assert (=> d!39951 (= (apply!113 (+!166 lt!67456 (tuple2!2545 lt!67464 (minValue!2682 newMap!16))) lt!67475) (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67456 (tuple2!2545 lt!67464 (minValue!2682 newMap!16)))) lt!67475)))))

(declare-fun bs!5449 () Bool)

(assert (= bs!5449 d!39951))

(declare-fun m!154217 () Bool)

(assert (=> bs!5449 m!154217))

(assert (=> bs!5449 m!154217))

(declare-fun m!154219 () Bool)

(assert (=> bs!5449 m!154219))

(assert (=> b!129973 d!39951))

(declare-fun d!39953 () Bool)

(assert (=> d!39953 (= (apply!113 lt!67473 lt!67468) (get!1473 (getValueByKey!170 (toList!837 lt!67473) lt!67468)))))

(declare-fun bs!5450 () Bool)

(assert (= bs!5450 d!39953))

(declare-fun m!154221 () Bool)

(assert (=> bs!5450 m!154221))

(assert (=> bs!5450 m!154221))

(declare-fun m!154223 () Bool)

(assert (=> bs!5450 m!154223))

(assert (=> b!129973 d!39953))

(declare-fun d!39955 () Bool)

(declare-fun e!85198 () Bool)

(assert (=> d!39955 e!85198))

(declare-fun res!62955 () Bool)

(assert (=> d!39955 (=> (not res!62955) (not e!85198))))

(declare-fun lt!67982 () ListLongMap!1643)

(assert (=> d!39955 (= res!62955 (contains!873 lt!67982 (_1!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67983 () List!1685)

(assert (=> d!39955 (= lt!67982 (ListLongMap!1644 lt!67983))))

(declare-fun lt!67984 () Unit!4042)

(declare-fun lt!67981 () Unit!4042)

(assert (=> d!39955 (= lt!67984 lt!67981)))

(assert (=> d!39955 (= (getValueByKey!170 lt!67983 (_1!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39955 (= lt!67981 (lemmaContainsTupThenGetReturnValue!85 lt!67983 (_1!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39955 (= lt!67983 (insertStrictlySorted!88 (toList!837 lt!67465) (_1!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39955 (= (+!166 lt!67465 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))) lt!67982)))

(declare-fun b!130627 () Bool)

(declare-fun res!62954 () Bool)

(assert (=> b!130627 (=> (not res!62954) (not e!85198))))

(assert (=> b!130627 (= res!62954 (= (getValueByKey!170 (toList!837 lt!67982) (_1!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130628 () Bool)

(assert (=> b!130628 (= e!85198 (contains!875 (toList!837 lt!67982) (tuple2!2545 lt!67474 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39955 res!62955) b!130627))

(assert (= (and b!130627 res!62954) b!130628))

(declare-fun m!154225 () Bool)

(assert (=> d!39955 m!154225))

(declare-fun m!154227 () Bool)

(assert (=> d!39955 m!154227))

(declare-fun m!154229 () Bool)

(assert (=> d!39955 m!154229))

(declare-fun m!154231 () Bool)

(assert (=> d!39955 m!154231))

(declare-fun m!154233 () Bool)

(assert (=> b!130627 m!154233))

(declare-fun m!154235 () Bool)

(assert (=> b!130628 m!154235))

(assert (=> b!129973 d!39955))

(declare-fun d!39957 () Bool)

(assert (=> d!39957 (= (apply!113 lt!67465 lt!67459) (get!1473 (getValueByKey!170 (toList!837 lt!67465) lt!67459)))))

(declare-fun bs!5451 () Bool)

(assert (= bs!5451 d!39957))

(declare-fun m!154237 () Bool)

(assert (=> bs!5451 m!154237))

(assert (=> bs!5451 m!154237))

(declare-fun m!154239 () Bool)

(assert (=> bs!5451 m!154239))

(assert (=> b!129973 d!39957))

(declare-fun d!39959 () Bool)

(declare-fun e!85199 () Bool)

(assert (=> d!39959 e!85199))

(declare-fun res!62957 () Bool)

(assert (=> d!39959 (=> (not res!62957) (not e!85199))))

(declare-fun lt!67986 () ListLongMap!1643)

(assert (=> d!39959 (= res!62957 (contains!873 lt!67986 (_1!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))))))

(declare-fun lt!67987 () List!1685)

(assert (=> d!39959 (= lt!67986 (ListLongMap!1644 lt!67987))))

(declare-fun lt!67988 () Unit!4042)

(declare-fun lt!67985 () Unit!4042)

(assert (=> d!39959 (= lt!67988 lt!67985)))

(assert (=> d!39959 (= (getValueByKey!170 lt!67987 (_1!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39959 (= lt!67985 (lemmaContainsTupThenGetReturnValue!85 lt!67987 (_1!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39959 (= lt!67987 (insertStrictlySorted!88 (toList!837 lt!67463) (_1!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))))))

(assert (=> d!39959 (= (+!166 lt!67463 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))) lt!67986)))

(declare-fun b!130629 () Bool)

(declare-fun res!62956 () Bool)

(assert (=> b!130629 (=> (not res!62956) (not e!85199))))

(assert (=> b!130629 (= res!62956 (= (getValueByKey!170 (toList!837 lt!67986) (_1!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))))))))

(declare-fun b!130630 () Bool)

(assert (=> b!130630 (= e!85199 (contains!875 (toList!837 lt!67986) (tuple2!2545 lt!67458 (zeroValue!2682 newMap!16))))))

(assert (= (and d!39959 res!62957) b!130629))

(assert (= (and b!130629 res!62956) b!130630))

(declare-fun m!154241 () Bool)

(assert (=> d!39959 m!154241))

(declare-fun m!154243 () Bool)

(assert (=> d!39959 m!154243))

(declare-fun m!154245 () Bool)

(assert (=> d!39959 m!154245))

(declare-fun m!154247 () Bool)

(assert (=> d!39959 m!154247))

(declare-fun m!154249 () Bool)

(assert (=> b!130629 m!154249))

(declare-fun m!154251 () Bool)

(assert (=> b!130630 m!154251))

(assert (=> b!129973 d!39959))

(declare-fun d!39961 () Bool)

(declare-fun e!85200 () Bool)

(assert (=> d!39961 e!85200))

(declare-fun res!62959 () Bool)

(assert (=> d!39961 (=> (not res!62959) (not e!85200))))

(declare-fun lt!67990 () ListLongMap!1643)

(assert (=> d!39961 (= res!62959 (contains!873 lt!67990 (_1!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))))))

(declare-fun lt!67991 () List!1685)

(assert (=> d!39961 (= lt!67990 (ListLongMap!1644 lt!67991))))

(declare-fun lt!67992 () Unit!4042)

(declare-fun lt!67989 () Unit!4042)

(assert (=> d!39961 (= lt!67992 lt!67989)))

(assert (=> d!39961 (= (getValueByKey!170 lt!67991 (_1!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))))))

(assert (=> d!39961 (= lt!67989 (lemmaContainsTupThenGetReturnValue!85 lt!67991 (_1!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))))))

(assert (=> d!39961 (= lt!67991 (insertStrictlySorted!88 (toList!837 lt!67473) (_1!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))))))

(assert (=> d!39961 (= (+!166 lt!67473 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))) lt!67990)))

(declare-fun b!130631 () Bool)

(declare-fun res!62958 () Bool)

(assert (=> b!130631 (=> (not res!62958) (not e!85200))))

(assert (=> b!130631 (= res!62958 (= (getValueByKey!170 (toList!837 lt!67990) (_1!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 lt!67461 (minValue!2682 newMap!16))))))))

(declare-fun b!130632 () Bool)

(assert (=> b!130632 (= e!85200 (contains!875 (toList!837 lt!67990) (tuple2!2545 lt!67461 (minValue!2682 newMap!16))))))

(assert (= (and d!39961 res!62959) b!130631))

(assert (= (and b!130631 res!62958) b!130632))

(declare-fun m!154253 () Bool)

(assert (=> d!39961 m!154253))

(declare-fun m!154255 () Bool)

(assert (=> d!39961 m!154255))

(declare-fun m!154257 () Bool)

(assert (=> d!39961 m!154257))

(declare-fun m!154259 () Bool)

(assert (=> d!39961 m!154259))

(declare-fun m!154261 () Bool)

(assert (=> b!130631 m!154261))

(declare-fun m!154263 () Bool)

(assert (=> b!130632 m!154263))

(assert (=> b!129973 d!39961))

(declare-fun b!130633 () Bool)

(declare-fun e!85201 () (_ BitVec 32))

(declare-fun call!14205 () (_ BitVec 32))

(assert (=> b!130633 (= e!85201 (bvadd #b00000000000000000000000000000001 call!14205))))

(declare-fun b!130634 () Bool)

(declare-fun e!85202 () (_ BitVec 32))

(assert (=> b!130634 (= e!85202 e!85201)))

(declare-fun c!24128 () Bool)

(assert (=> b!130634 (= c!24128 (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!14202 () Bool)

(assert (=> bm!14202 (= call!14205 (arrayCountValidKeys!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130635 () Bool)

(assert (=> b!130635 (= e!85201 call!14205)))

(declare-fun b!130636 () Bool)

(assert (=> b!130636 (= e!85202 #b00000000000000000000000000000000)))

(declare-fun d!39963 () Bool)

(declare-fun lt!67993 () (_ BitVec 32))

(assert (=> d!39963 (and (bvsge lt!67993 #b00000000000000000000000000000000) (bvsle lt!67993 (bvsub (size!2500 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!39963 (= lt!67993 e!85202)))

(declare-fun c!24129 () Bool)

(assert (=> d!39963 (= c!24129 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39963 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2500 (_keys!4564 newMap!16)) (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39963 (= (arrayCountValidKeys!0 (_keys!4564 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))) lt!67993)))

(assert (= (and d!39963 c!24129) b!130636))

(assert (= (and d!39963 (not c!24129)) b!130634))

(assert (= (and b!130634 c!24128) b!130633))

(assert (= (and b!130634 (not c!24128)) b!130635))

(assert (= (or b!130633 b!130635) bm!14202))

(assert (=> b!130634 m!153287))

(assert (=> b!130634 m!153287))

(assert (=> b!130634 m!153289))

(declare-fun m!154265 () Bool)

(assert (=> bm!14202 m!154265))

(assert (=> bm!14101 d!39963))

(declare-fun d!39965 () Bool)

(declare-fun res!62960 () Bool)

(declare-fun e!85203 () Bool)

(assert (=> d!39965 (=> res!62960 e!85203)))

(assert (=> d!39965 (= res!62960 (and ((_ is Cons!1681) (t!6076 (toList!837 lt!67103))) (= (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103)))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!39965 (= (containsKey!173 (t!6076 (toList!837 lt!67103)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!85203)))

(declare-fun b!130637 () Bool)

(declare-fun e!85204 () Bool)

(assert (=> b!130637 (= e!85203 e!85204)))

(declare-fun res!62961 () Bool)

(assert (=> b!130637 (=> (not res!62961) (not e!85204))))

(assert (=> b!130637 (= res!62961 (and (or (not ((_ is Cons!1681) (t!6076 (toList!837 lt!67103)))) (bvsle (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103)))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) ((_ is Cons!1681) (t!6076 (toList!837 lt!67103))) (bvslt (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103)))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(declare-fun b!130638 () Bool)

(assert (=> b!130638 (= e!85204 (containsKey!173 (t!6076 (t!6076 (toList!837 lt!67103))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!39965 (not res!62960)) b!130637))

(assert (= (and b!130637 res!62961) b!130638))

(assert (=> b!130638 m!152129))

(declare-fun m!154267 () Bool)

(assert (=> b!130638 m!154267))

(assert (=> b!130013 d!39965))

(declare-fun lt!67994 () Bool)

(declare-fun d!39967 () Bool)

(assert (=> d!39967 (= lt!67994 (select (content!131 (toList!837 lt!67393)) (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun e!85206 () Bool)

(assert (=> d!39967 (= lt!67994 e!85206)))

(declare-fun res!62962 () Bool)

(assert (=> d!39967 (=> (not res!62962) (not e!85206))))

(assert (=> d!39967 (= res!62962 ((_ is Cons!1681) (toList!837 lt!67393)))))

(assert (=> d!39967 (= (contains!875 (toList!837 lt!67393) (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67994)))

(declare-fun b!130639 () Bool)

(declare-fun e!85205 () Bool)

(assert (=> b!130639 (= e!85206 e!85205)))

(declare-fun res!62963 () Bool)

(assert (=> b!130639 (=> res!62963 e!85205)))

(assert (=> b!130639 (= res!62963 (= (h!2285 (toList!837 lt!67393)) (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(declare-fun b!130640 () Bool)

(assert (=> b!130640 (= e!85205 (contains!875 (t!6076 (toList!837 lt!67393)) (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))

(assert (= (and d!39967 res!62962) b!130639))

(assert (= (and b!130639 (not res!62963)) b!130640))

(declare-fun m!154269 () Bool)

(assert (=> d!39967 m!154269))

(declare-fun m!154271 () Bool)

(assert (=> d!39967 m!154271))

(declare-fun m!154273 () Bool)

(assert (=> b!130640 m!154273))

(assert (=> b!129858 d!39967))

(assert (=> d!39551 d!39779))

(declare-fun d!39969 () Bool)

(declare-fun e!85209 () Bool)

(assert (=> d!39969 e!85209))

(declare-fun res!62966 () Bool)

(assert (=> d!39969 (=> (not res!62966) (not e!85209))))

(assert (=> d!39969 (= res!62966 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 (_keys!4564 newMap!16)))))))

(declare-fun lt!67997 () Unit!4042)

(declare-fun choose!41 (array!4721 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1687) Unit!4042)

(assert (=> d!39969 (= lt!67997 (choose!41 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) lt!67582 lt!67581))))

(assert (=> d!39969 (bvslt (size!2500 (_keys!4564 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!39969 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) lt!67582 lt!67581) lt!67997)))

(declare-fun b!130643 () Bool)

(assert (=> b!130643 (= e!85209 (arrayNoDuplicates!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) lt!67582 lt!67581))))

(assert (= (and d!39969 res!62966) b!130643))

(assert (=> d!39969 m!152129))

(declare-fun m!154275 () Bool)

(assert (=> d!39969 m!154275))

(assert (=> b!130643 m!152889))

(assert (=> b!130643 m!152905))

(assert (=> d!39551 d!39969))

(declare-fun d!39971 () Bool)

(declare-fun e!85212 () Bool)

(assert (=> d!39971 e!85212))

(declare-fun res!62969 () Bool)

(assert (=> d!39971 (=> (not res!62969) (not e!85212))))

(assert (=> d!39971 (= res!62969 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 (_keys!4564 newMap!16))) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2501 (_values!2806 newMap!16)))))))

(declare-fun lt!68000 () Unit!4042)

(declare-fun choose!804 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 32) (_ BitVec 64) V!3457 Int) Unit!4042)

(assert (=> d!39971 (= lt!68000 (choose!804 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39971 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39971 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!39 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2823 newMap!16)) lt!68000)))

(declare-fun b!130646 () Bool)

(assert (=> b!130646 (= e!85212 (= (+!166 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!515 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))))))

(assert (= (and d!39971 res!62969) b!130646))

(assert (=> d!39971 m!152129))

(assert (=> d!39971 m!152151))

(declare-fun m!154277 () Bool)

(assert (=> d!39971 m!154277))

(assert (=> d!39971 m!152389))

(assert (=> b!130646 m!152913))

(assert (=> b!130646 m!152307))

(assert (=> b!130646 m!152307))

(assert (=> b!130646 m!152821))

(assert (=> b!130646 m!152889))

(assert (=> b!130646 m!152915))

(assert (=> d!39551 d!39971))

(declare-fun d!39973 () Bool)

(declare-fun e!85213 () Bool)

(assert (=> d!39973 e!85213))

(declare-fun res!62970 () Bool)

(assert (=> d!39973 (=> res!62970 e!85213)))

(declare-fun lt!68001 () Bool)

(assert (=> d!39973 (= res!62970 (not lt!68001))))

(declare-fun lt!68003 () Bool)

(assert (=> d!39973 (= lt!68001 lt!68003)))

(declare-fun lt!68002 () Unit!4042)

(declare-fun e!85214 () Unit!4042)

(assert (=> d!39973 (= lt!68002 e!85214)))

(declare-fun c!24130 () Bool)

(assert (=> d!39973 (= c!24130 lt!68003)))

(assert (=> d!39973 (= lt!68003 (containsKey!173 (toList!837 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(assert (=> d!39973 (= (contains!873 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))) lt!68001)))

(declare-fun b!130647 () Bool)

(declare-fun lt!68004 () Unit!4042)

(assert (=> b!130647 (= e!85214 lt!68004)))

(assert (=> b!130647 (= lt!68004 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(assert (=> b!130647 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(declare-fun b!130648 () Bool)

(declare-fun Unit!4088 () Unit!4042)

(assert (=> b!130648 (= e!85214 Unit!4088)))

(declare-fun b!130649 () Bool)

(assert (=> b!130649 (= e!85213 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))))

(assert (= (and d!39973 c!24130) b!130647))

(assert (= (and d!39973 (not c!24130)) b!130648))

(assert (= (and d!39973 (not res!62970)) b!130649))

(assert (=> d!39973 m!152895))

(declare-fun m!154279 () Bool)

(assert (=> d!39973 m!154279))

(assert (=> b!130647 m!152895))

(declare-fun m!154281 () Bool)

(assert (=> b!130647 m!154281))

(assert (=> b!130647 m!152895))

(declare-fun m!154283 () Bool)

(assert (=> b!130647 m!154283))

(assert (=> b!130647 m!154283))

(declare-fun m!154285 () Bool)

(assert (=> b!130647 m!154285))

(assert (=> b!130649 m!152895))

(assert (=> b!130649 m!154283))

(assert (=> b!130649 m!154283))

(assert (=> b!130649 m!154285))

(assert (=> d!39551 d!39973))

(declare-fun d!39975 () Bool)

(declare-fun e!85215 () Bool)

(assert (=> d!39975 e!85215))

(declare-fun res!62971 () Bool)

(assert (=> d!39975 (=> (not res!62971) (not e!85215))))

(assert (=> d!39975 (= res!62971 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 lt!67573))))))

(declare-fun lt!68005 () Unit!4042)

(assert (=> d!39975 (= lt!68005 (choose!798 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (defaultEntry!2823 newMap!16)))))

(assert (=> d!39975 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39975 (= (lemmaValidKeyInArrayIsInListMap!118 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (defaultEntry!2823 newMap!16)) lt!68005)))

(declare-fun b!130650 () Bool)

(assert (=> b!130650 (= e!85215 (contains!873 (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 lt!67573) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(assert (= (and d!39975 res!62971) b!130650))

(declare-fun m!154287 () Bool)

(assert (=> d!39975 m!154287))

(assert (=> d!39975 m!152389))

(assert (=> b!130650 m!152893))

(declare-fun m!154289 () Bool)

(assert (=> b!130650 m!154289))

(assert (=> b!130650 m!152893))

(assert (=> b!130650 m!154289))

(declare-fun m!154291 () Bool)

(assert (=> b!130650 m!154291))

(assert (=> d!39551 d!39975))

(declare-fun d!39977 () Bool)

(declare-fun e!85216 () Bool)

(assert (=> d!39977 e!85216))

(declare-fun res!62972 () Bool)

(assert (=> d!39977 (=> res!62972 e!85216)))

(declare-fun lt!68006 () Bool)

(assert (=> d!39977 (= res!62972 (not lt!68006))))

(declare-fun lt!68008 () Bool)

(assert (=> d!39977 (= lt!68006 lt!68008)))

(declare-fun lt!68007 () Unit!4042)

(declare-fun e!85217 () Unit!4042)

(assert (=> d!39977 (= lt!68007 e!85217)))

(declare-fun c!24131 () Bool)

(assert (=> d!39977 (= c!24131 lt!68008)))

(assert (=> d!39977 (= lt!68008 (containsKey!173 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39977 (= (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!68006)))

(declare-fun b!130651 () Bool)

(declare-fun lt!68009 () Unit!4042)

(assert (=> b!130651 (= e!85217 lt!68009)))

(assert (=> b!130651 (= lt!68009 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!130651 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun b!130652 () Bool)

(declare-fun Unit!4089 () Unit!4042)

(assert (=> b!130652 (= e!85217 Unit!4089)))

(declare-fun b!130653 () Bool)

(assert (=> b!130653 (= e!85216 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (= (and d!39977 c!24131) b!130651))

(assert (= (and d!39977 (not c!24131)) b!130652))

(assert (= (and d!39977 (not res!62972)) b!130653))

(assert (=> d!39977 m!152129))

(declare-fun m!154293 () Bool)

(assert (=> d!39977 m!154293))

(assert (=> b!130651 m!152129))

(declare-fun m!154295 () Bool)

(assert (=> b!130651 m!154295))

(assert (=> b!130651 m!152129))

(declare-fun m!154297 () Bool)

(assert (=> b!130651 m!154297))

(assert (=> b!130651 m!154297))

(declare-fun m!154299 () Bool)

(assert (=> b!130651 m!154299))

(assert (=> b!130653 m!152129))

(assert (=> b!130653 m!154297))

(assert (=> b!130653 m!154297))

(assert (=> b!130653 m!154299))

(assert (=> d!39551 d!39977))

(assert (=> d!39551 d!39511))

(declare-fun d!39979 () Bool)

(assert (=> d!39979 (= (arrayCountValidKeys!0 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!68012 () Unit!4042)

(declare-fun choose!2 (array!4721 (_ BitVec 32)) Unit!4042)

(assert (=> d!39979 (= lt!68012 (choose!2 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(declare-fun e!85220 () Bool)

(assert (=> d!39979 e!85220))

(declare-fun res!62977 () Bool)

(assert (=> d!39979 (=> (not res!62977) (not e!85220))))

(assert (=> d!39979 (= res!62977 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 lt!67592))))))

(assert (=> d!39979 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))) lt!68012)))

(declare-fun b!130658 () Bool)

(declare-fun res!62978 () Bool)

(assert (=> b!130658 (=> (not res!62978) (not e!85220))))

(assert (=> b!130658 (= res!62978 (validKeyInArray!0 (select (arr!2234 lt!67592) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(declare-fun b!130659 () Bool)

(assert (=> b!130659 (= e!85220 (bvslt (size!2500 lt!67592) #b01111111111111111111111111111111))))

(assert (= (and d!39979 res!62977) b!130658))

(assert (= (and b!130658 res!62978) b!130659))

(assert (=> d!39979 m!152901))

(declare-fun m!154301 () Bool)

(assert (=> d!39979 m!154301))

(declare-fun m!154303 () Bool)

(assert (=> b!130658 m!154303))

(assert (=> b!130658 m!154303))

(declare-fun m!154305 () Bool)

(assert (=> b!130658 m!154305))

(assert (=> d!39551 d!39979))

(declare-fun b!130660 () Bool)

(declare-fun e!85221 () (_ BitVec 32))

(declare-fun call!14206 () (_ BitVec 32))

(assert (=> b!130660 (= e!85221 (bvadd #b00000000000000000000000000000001 call!14206))))

(declare-fun b!130661 () Bool)

(declare-fun e!85222 () (_ BitVec 32))

(assert (=> b!130661 (= e!85222 e!85221)))

(declare-fun c!24132 () Bool)

(assert (=> b!130661 (= c!24132 (validKeyInArray!0 (select (arr!2234 lt!67592) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(declare-fun bm!14203 () Bool)

(assert (=> bm!14203 (= call!14206 (arrayCountValidKeys!0 lt!67592 (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)))))

(declare-fun b!130662 () Bool)

(assert (=> b!130662 (= e!85221 call!14206)))

(declare-fun b!130663 () Bool)

(assert (=> b!130663 (= e!85222 #b00000000000000000000000000000000)))

(declare-fun d!39981 () Bool)

(declare-fun lt!68013 () (_ BitVec 32))

(assert (=> d!39981 (and (bvsge lt!68013 #b00000000000000000000000000000000) (bvsle lt!68013 (bvsub (size!2500 lt!67592) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)))))))

(assert (=> d!39981 (= lt!68013 e!85222)))

(declare-fun c!24133 () Bool)

(assert (=> d!39981 (= c!24133 (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)))))

(assert (=> d!39981 (and (bvsle (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)) (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001) (size!2500 lt!67592)))))

(assert (=> d!39981 (= (arrayCountValidKeys!0 lt!67592 (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (bvadd (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000001)) lt!68013)))

(assert (= (and d!39981 c!24133) b!130663))

(assert (= (and d!39981 (not c!24133)) b!130661))

(assert (= (and b!130661 c!24132) b!130660))

(assert (= (and b!130661 (not c!24132)) b!130662))

(assert (= (or b!130660 b!130662) bm!14203))

(assert (=> b!130661 m!154303))

(assert (=> b!130661 m!154303))

(assert (=> b!130661 m!154305))

(declare-fun m!154307 () Bool)

(assert (=> bm!14203 m!154307))

(assert (=> d!39551 d!39981))

(assert (=> d!39551 d!39445))

(assert (=> d!39551 d!39475))

(declare-fun d!39983 () Bool)

(declare-fun res!62979 () Bool)

(declare-fun e!85223 () Bool)

(assert (=> d!39983 (=> res!62979 e!85223)))

(assert (=> d!39983 (= res!62979 (= (select (arr!2234 lt!67575) #b00000000000000000000000000000000) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39983 (= (arrayContainsKey!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000) e!85223)))

(declare-fun b!130664 () Bool)

(declare-fun e!85224 () Bool)

(assert (=> b!130664 (= e!85223 e!85224)))

(declare-fun res!62980 () Bool)

(assert (=> b!130664 (=> (not res!62980) (not e!85224))))

(assert (=> b!130664 (= res!62980 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 lt!67575)))))

(declare-fun b!130665 () Bool)

(assert (=> b!130665 (= e!85224 (arrayContainsKey!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!39983 (not res!62979)) b!130664))

(assert (= (and b!130664 res!62980) b!130665))

(declare-fun m!154309 () Bool)

(assert (=> d!39983 m!154309))

(assert (=> b!130665 m!152129))

(declare-fun m!154311 () Bool)

(assert (=> b!130665 m!154311))

(assert (=> d!39551 d!39983))

(declare-fun b!130666 () Bool)

(declare-fun e!85231 () Unit!4042)

(declare-fun Unit!4090 () Unit!4042)

(assert (=> b!130666 (= e!85231 Unit!4090)))

(declare-fun b!130667 () Bool)

(declare-fun e!85227 () ListLongMap!1643)

(declare-fun call!14209 () ListLongMap!1643)

(assert (=> b!130667 (= e!85227 (+!166 call!14209 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!130668 () Bool)

(declare-fun e!85237 () Bool)

(declare-fun lt!68015 () ListLongMap!1643)

(assert (=> b!130668 (= e!85237 (= (apply!113 lt!68015 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!130669 () Bool)

(declare-fun e!85234 () ListLongMap!1643)

(declare-fun call!14208 () ListLongMap!1643)

(assert (=> b!130669 (= e!85234 call!14208)))

(declare-fun b!130670 () Bool)

(declare-fun e!85228 () Bool)

(assert (=> b!130670 (= e!85228 e!85237)))

(declare-fun res!62981 () Bool)

(declare-fun call!14211 () Bool)

(assert (=> b!130670 (= res!62981 call!14211)))

(assert (=> b!130670 (=> (not res!62981) (not e!85237))))

(declare-fun b!130671 () Bool)

(declare-fun e!85233 () Bool)

(assert (=> b!130671 (= e!85233 (= (apply!113 lt!68015 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130671 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))))))))

(assert (=> b!130671 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun b!130672 () Bool)

(declare-fun e!85230 () Bool)

(assert (=> b!130672 (= e!85230 e!85228)))

(declare-fun c!24139 () Bool)

(assert (=> b!130672 (= c!24139 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!14212 () ListLongMap!1643)

(declare-fun bm!14204 () Bool)

(assert (=> bm!14204 (= call!14212 (getCurrentListMapNoExtraKeys!133 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39985 () Bool)

(assert (=> d!39985 e!85230))

(declare-fun res!62983 () Bool)

(assert (=> d!39985 (=> (not res!62983) (not e!85230))))

(assert (=> d!39985 (= res!62983 (or (bvsge #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))))

(declare-fun lt!68035 () ListLongMap!1643)

(assert (=> d!39985 (= lt!68015 lt!68035)))

(declare-fun lt!68027 () Unit!4042)

(assert (=> d!39985 (= lt!68027 e!85231)))

(declare-fun c!24138 () Bool)

(declare-fun e!85235 () Bool)

(assert (=> d!39985 (= c!24138 e!85235)))

(declare-fun res!62985 () Bool)

(assert (=> d!39985 (=> (not res!62985) (not e!85235))))

(assert (=> d!39985 (= res!62985 (bvslt #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(assert (=> d!39985 (= lt!68035 e!85227)))

(declare-fun c!24135 () Bool)

(assert (=> d!39985 (= c!24135 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39985 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39985 (= (getCurrentListMap!515 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!68015)))

(declare-fun b!130673 () Bool)

(declare-fun e!85236 () Bool)

(assert (=> b!130673 (= e!85236 (= (apply!113 lt!68015 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!130674 () Bool)

(assert (=> b!130674 (= e!85235 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!14205 () Bool)

(declare-fun call!14213 () ListLongMap!1643)

(declare-fun call!14210 () ListLongMap!1643)

(assert (=> bm!14205 (= call!14213 call!14210)))

(declare-fun b!130675 () Bool)

(declare-fun lt!68020 () Unit!4042)

(assert (=> b!130675 (= e!85231 lt!68020)))

(declare-fun lt!68021 () ListLongMap!1643)

(assert (=> b!130675 (= lt!68021 (getCurrentListMapNoExtraKeys!133 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68016 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68016 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68028 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68028 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!68029 () Unit!4042)

(assert (=> b!130675 (= lt!68029 (addStillContains!89 lt!68021 lt!68016 (zeroValue!2682 newMap!16) lt!68028))))

(assert (=> b!130675 (contains!873 (+!166 lt!68021 (tuple2!2545 lt!68016 (zeroValue!2682 newMap!16))) lt!68028)))

(declare-fun lt!68034 () Unit!4042)

(assert (=> b!130675 (= lt!68034 lt!68029)))

(declare-fun lt!68014 () ListLongMap!1643)

(assert (=> b!130675 (= lt!68014 (getCurrentListMapNoExtraKeys!133 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68022 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68022 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68033 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68033 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!68018 () Unit!4042)

(assert (=> b!130675 (= lt!68018 (addApplyDifferent!89 lt!68014 lt!68022 (minValue!2682 newMap!16) lt!68033))))

(assert (=> b!130675 (= (apply!113 (+!166 lt!68014 (tuple2!2545 lt!68022 (minValue!2682 newMap!16))) lt!68033) (apply!113 lt!68014 lt!68033))))

(declare-fun lt!68030 () Unit!4042)

(assert (=> b!130675 (= lt!68030 lt!68018)))

(declare-fun lt!68023 () ListLongMap!1643)

(assert (=> b!130675 (= lt!68023 (getCurrentListMapNoExtraKeys!133 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68032 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68032 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68017 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68017 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!68024 () Unit!4042)

(assert (=> b!130675 (= lt!68024 (addApplyDifferent!89 lt!68023 lt!68032 (zeroValue!2682 newMap!16) lt!68017))))

(assert (=> b!130675 (= (apply!113 (+!166 lt!68023 (tuple2!2545 lt!68032 (zeroValue!2682 newMap!16))) lt!68017) (apply!113 lt!68023 lt!68017))))

(declare-fun lt!68025 () Unit!4042)

(assert (=> b!130675 (= lt!68025 lt!68024)))

(declare-fun lt!68031 () ListLongMap!1643)

(assert (=> b!130675 (= lt!68031 (getCurrentListMapNoExtraKeys!133 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (array!4724 (store (arr!2235 (_values!2806 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (ValueCellFull!1085 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2501 (_values!2806 newMap!16))) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68019 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68019 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68026 () (_ BitVec 64))

(assert (=> b!130675 (= lt!68026 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!130675 (= lt!68020 (addApplyDifferent!89 lt!68031 lt!68019 (minValue!2682 newMap!16) lt!68026))))

(assert (=> b!130675 (= (apply!113 (+!166 lt!68031 (tuple2!2545 lt!68019 (minValue!2682 newMap!16))) lt!68026) (apply!113 lt!68031 lt!68026))))

(declare-fun b!130676 () Bool)

(declare-fun res!62989 () Bool)

(assert (=> b!130676 (=> (not res!62989) (not e!85230))))

(declare-fun e!85225 () Bool)

(assert (=> b!130676 (= res!62989 e!85225)))

(declare-fun c!24137 () Bool)

(assert (=> b!130676 (= c!24137 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130677 () Bool)

(declare-fun res!62986 () Bool)

(assert (=> b!130677 (=> (not res!62986) (not e!85230))))

(declare-fun e!85226 () Bool)

(assert (=> b!130677 (= res!62986 e!85226)))

(declare-fun res!62987 () Bool)

(assert (=> b!130677 (=> res!62987 e!85226)))

(declare-fun e!85229 () Bool)

(assert (=> b!130677 (= res!62987 (not e!85229))))

(declare-fun res!62988 () Bool)

(assert (=> b!130677 (=> (not res!62988) (not e!85229))))

(assert (=> b!130677 (= res!62988 (bvslt #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(declare-fun bm!14206 () Bool)

(declare-fun call!14207 () Bool)

(assert (=> bm!14206 (= call!14207 (contains!873 lt!68015 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!14207 () Bool)

(declare-fun c!24134 () Bool)

(assert (=> bm!14207 (= call!14209 (+!166 (ite c!24135 call!14212 (ite c!24134 call!14210 call!14213)) (ite (or c!24135 c!24134) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14208 () Bool)

(assert (=> bm!14208 (= call!14210 call!14212)))

(declare-fun b!130678 () Bool)

(declare-fun e!85232 () ListLongMap!1643)

(assert (=> b!130678 (= e!85232 call!14208)))

(declare-fun b!130679 () Bool)

(assert (=> b!130679 (= e!85229 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!14209 () Bool)

(assert (=> bm!14209 (= call!14208 call!14209)))

(declare-fun b!130680 () Bool)

(assert (=> b!130680 (= e!85228 (not call!14211))))

(declare-fun b!130681 () Bool)

(declare-fun c!24136 () Bool)

(assert (=> b!130681 (= c!24136 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130681 (= e!85234 e!85232)))

(declare-fun b!130682 () Bool)

(assert (=> b!130682 (= e!85225 (not call!14207))))

(declare-fun b!130683 () Bool)

(assert (=> b!130683 (= e!85225 e!85236)))

(declare-fun res!62984 () Bool)

(assert (=> b!130683 (= res!62984 call!14207)))

(assert (=> b!130683 (=> (not res!62984) (not e!85236))))

(declare-fun b!130684 () Bool)

(assert (=> b!130684 (= e!85227 e!85234)))

(assert (=> b!130684 (= c!24134 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14210 () Bool)

(assert (=> bm!14210 (= call!14211 (contains!873 lt!68015 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130685 () Bool)

(assert (=> b!130685 (= e!85232 call!14213)))

(declare-fun b!130686 () Bool)

(assert (=> b!130686 (= e!85226 e!85233)))

(declare-fun res!62982 () Bool)

(assert (=> b!130686 (=> (not res!62982) (not e!85233))))

(assert (=> b!130686 (= res!62982 (contains!873 lt!68015 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!130686 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(assert (= (and d!39985 c!24135) b!130667))

(assert (= (and d!39985 (not c!24135)) b!130684))

(assert (= (and b!130684 c!24134) b!130669))

(assert (= (and b!130684 (not c!24134)) b!130681))

(assert (= (and b!130681 c!24136) b!130678))

(assert (= (and b!130681 (not c!24136)) b!130685))

(assert (= (or b!130678 b!130685) bm!14205))

(assert (= (or b!130669 bm!14205) bm!14208))

(assert (= (or b!130669 b!130678) bm!14209))

(assert (= (or b!130667 bm!14208) bm!14204))

(assert (= (or b!130667 bm!14209) bm!14207))

(assert (= (and d!39985 res!62985) b!130674))

(assert (= (and d!39985 c!24138) b!130675))

(assert (= (and d!39985 (not c!24138)) b!130666))

(assert (= (and d!39985 res!62983) b!130677))

(assert (= (and b!130677 res!62988) b!130679))

(assert (= (and b!130677 (not res!62987)) b!130686))

(assert (= (and b!130686 res!62982) b!130671))

(assert (= (and b!130677 res!62986) b!130676))

(assert (= (and b!130676 c!24137) b!130683))

(assert (= (and b!130676 (not c!24137)) b!130682))

(assert (= (and b!130683 res!62984) b!130673))

(assert (= (or b!130683 b!130682) bm!14206))

(assert (= (and b!130676 res!62989) b!130672))

(assert (= (and b!130672 c!24139) b!130670))

(assert (= (and b!130672 (not c!24139)) b!130680))

(assert (= (and b!130670 res!62981) b!130668))

(assert (= (or b!130670 b!130680) bm!14210))

(declare-fun b_lambda!5815 () Bool)

(assert (=> (not b_lambda!5815) (not b!130671)))

(assert (=> b!130671 t!6088))

(declare-fun b_and!8105 () Bool)

(assert (= b_and!8101 (and (=> t!6088 result!3917) b_and!8105)))

(assert (=> b!130671 t!6090))

(declare-fun b_and!8107 () Bool)

(assert (= b_and!8103 (and (=> t!6090 result!3919) b_and!8107)))

(declare-fun m!154313 () Bool)

(assert (=> b!130668 m!154313))

(declare-fun m!154315 () Bool)

(assert (=> bm!14204 m!154315))

(declare-fun m!154317 () Bool)

(assert (=> b!130667 m!154317))

(assert (=> d!39985 m!152389))

(declare-fun m!154319 () Bool)

(assert (=> b!130686 m!154319))

(assert (=> b!130686 m!154319))

(declare-fun m!154321 () Bool)

(assert (=> b!130686 m!154321))

(assert (=> b!130674 m!154319))

(assert (=> b!130674 m!154319))

(declare-fun m!154323 () Bool)

(assert (=> b!130674 m!154323))

(declare-fun m!154325 () Bool)

(assert (=> b!130675 m!154325))

(declare-fun m!154327 () Bool)

(assert (=> b!130675 m!154327))

(declare-fun m!154329 () Bool)

(assert (=> b!130675 m!154329))

(assert (=> b!130675 m!154319))

(declare-fun m!154331 () Bool)

(assert (=> b!130675 m!154331))

(declare-fun m!154333 () Bool)

(assert (=> b!130675 m!154333))

(declare-fun m!154335 () Bool)

(assert (=> b!130675 m!154335))

(declare-fun m!154337 () Bool)

(assert (=> b!130675 m!154337))

(assert (=> b!130675 m!154327))

(declare-fun m!154339 () Bool)

(assert (=> b!130675 m!154339))

(declare-fun m!154341 () Bool)

(assert (=> b!130675 m!154341))

(assert (=> b!130675 m!154315))

(assert (=> b!130675 m!154339))

(declare-fun m!154343 () Bool)

(assert (=> b!130675 m!154343))

(declare-fun m!154345 () Bool)

(assert (=> b!130675 m!154345))

(assert (=> b!130675 m!154333))

(declare-fun m!154347 () Bool)

(assert (=> b!130675 m!154347))

(declare-fun m!154349 () Bool)

(assert (=> b!130675 m!154349))

(declare-fun m!154351 () Bool)

(assert (=> b!130675 m!154351))

(declare-fun m!154353 () Bool)

(assert (=> b!130675 m!154353))

(assert (=> b!130675 m!154335))

(declare-fun m!154355 () Bool)

(assert (=> bm!14206 m!154355))

(assert (=> b!130679 m!154319))

(assert (=> b!130679 m!154319))

(assert (=> b!130679 m!154323))

(declare-fun m!154357 () Bool)

(assert (=> b!130673 m!154357))

(assert (=> b!130671 m!154319))

(declare-fun m!154359 () Bool)

(assert (=> b!130671 m!154359))

(assert (=> b!130671 m!152441))

(declare-fun m!154361 () Bool)

(assert (=> b!130671 m!154361))

(assert (=> b!130671 m!154319))

(declare-fun m!154363 () Bool)

(assert (=> b!130671 m!154363))

(assert (=> b!130671 m!152441))

(assert (=> b!130671 m!154359))

(declare-fun m!154365 () Bool)

(assert (=> bm!14207 m!154365))

(declare-fun m!154367 () Bool)

(assert (=> bm!14210 m!154367))

(assert (=> d!39551 d!39985))

(declare-fun d!39987 () Bool)

(declare-fun e!85240 () Bool)

(assert (=> d!39987 e!85240))

(declare-fun res!62992 () Bool)

(assert (=> d!39987 (=> (not res!62992) (not e!85240))))

(assert (=> d!39987 (= res!62992 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 (_keys!4564 newMap!16)))))))

(declare-fun lt!68038 () Unit!4042)

(declare-fun choose!102 ((_ BitVec 64) array!4721 (_ BitVec 32) (_ BitVec 32)) Unit!4042)

(assert (=> d!39987 (= lt!68038 (choose!102 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (mask!7101 newMap!16)))))

(assert (=> d!39987 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39987 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (mask!7101 newMap!16)) lt!68038)))

(declare-fun b!130689 () Bool)

(assert (=> b!130689 (= e!85240 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (mask!7101 newMap!16)))))

(assert (= (and d!39987 res!62992) b!130689))

(assert (=> d!39987 m!152129))

(declare-fun m!154369 () Bool)

(assert (=> d!39987 m!154369))

(assert (=> d!39987 m!152389))

(assert (=> b!130689 m!152889))

(assert (=> b!130689 m!152887))

(assert (=> d!39551 d!39987))

(declare-fun b!130690 () Bool)

(declare-fun e!85242 () Bool)

(declare-fun call!14214 () Bool)

(assert (=> b!130690 (= e!85242 call!14214)))

(declare-fun e!85244 () Bool)

(declare-fun b!130691 () Bool)

(assert (=> b!130691 (= e!85244 (contains!876 lt!67581 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) lt!67582)))))

(declare-fun d!39989 () Bool)

(declare-fun res!62995 () Bool)

(declare-fun e!85243 () Bool)

(assert (=> d!39989 (=> res!62995 e!85243)))

(assert (=> d!39989 (= res!62995 (bvsge lt!67582 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(assert (=> d!39989 (= (arrayNoDuplicates!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) lt!67582 lt!67581) e!85243)))

(declare-fun b!130692 () Bool)

(declare-fun e!85241 () Bool)

(assert (=> b!130692 (= e!85243 e!85241)))

(declare-fun res!62994 () Bool)

(assert (=> b!130692 (=> (not res!62994) (not e!85241))))

(assert (=> b!130692 (= res!62994 (not e!85244))))

(declare-fun res!62993 () Bool)

(assert (=> b!130692 (=> (not res!62993) (not e!85244))))

(assert (=> b!130692 (= res!62993 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) lt!67582)))))

(declare-fun bm!14211 () Bool)

(declare-fun c!24140 () Bool)

(assert (=> bm!14211 (= call!14214 (arrayNoDuplicates!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (bvadd lt!67582 #b00000000000000000000000000000001) (ite c!24140 (Cons!1683 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) lt!67582) lt!67581) lt!67581)))))

(declare-fun b!130693 () Bool)

(assert (=> b!130693 (= e!85241 e!85242)))

(assert (=> b!130693 (= c!24140 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) lt!67582)))))

(declare-fun b!130694 () Bool)

(assert (=> b!130694 (= e!85242 call!14214)))

(assert (= (and d!39989 (not res!62995)) b!130692))

(assert (= (and b!130692 res!62993) b!130691))

(assert (= (and b!130692 res!62994) b!130693))

(assert (= (and b!130693 c!24140) b!130694))

(assert (= (and b!130693 (not c!24140)) b!130690))

(assert (= (or b!130694 b!130690) bm!14211))

(declare-fun m!154371 () Bool)

(assert (=> b!130691 m!154371))

(assert (=> b!130691 m!154371))

(declare-fun m!154373 () Bool)

(assert (=> b!130691 m!154373))

(assert (=> b!130692 m!154371))

(assert (=> b!130692 m!154371))

(declare-fun m!154375 () Bool)

(assert (=> b!130692 m!154375))

(assert (=> bm!14211 m!154371))

(declare-fun m!154377 () Bool)

(assert (=> bm!14211 m!154377))

(assert (=> b!130693 m!154371))

(assert (=> b!130693 m!154371))

(assert (=> b!130693 m!154375))

(assert (=> d!39551 d!39989))

(declare-fun b!130703 () Bool)

(declare-fun res!63007 () Bool)

(declare-fun e!85249 () Bool)

(assert (=> b!130703 (=> (not res!63007) (not e!85249))))

(assert (=> b!130703 (= res!63007 (not (validKeyInArray!0 (select (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))))

(declare-fun b!130704 () Bool)

(declare-fun res!63005 () Bool)

(assert (=> b!130704 (=> (not res!63005) (not e!85249))))

(assert (=> b!130704 (= res!63005 (validKeyInArray!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(declare-fun d!39991 () Bool)

(declare-fun e!85250 () Bool)

(assert (=> d!39991 e!85250))

(declare-fun res!63006 () Bool)

(assert (=> d!39991 (=> (not res!63006) (not e!85250))))

(assert (=> d!39991 (= res!63006 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 (_keys!4564 newMap!16)))))))

(declare-fun lt!68041 () Unit!4042)

(declare-fun choose!1 (array!4721 (_ BitVec 32) (_ BitVec 64)) Unit!4042)

(assert (=> d!39991 (= lt!68041 (choose!1 (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!39991 e!85249))

(declare-fun res!63004 () Bool)

(assert (=> d!39991 (=> (not res!63004) (not e!85249))))

(assert (=> d!39991 (= res!63004 (and (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000) (bvslt (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (size!2500 (_keys!4564 newMap!16)))))))

(assert (=> d!39991 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4564 newMap!16) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) lt!68041)))

(declare-fun b!130706 () Bool)

(assert (=> b!130706 (= e!85250 (= (arrayCountValidKeys!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4564 newMap!16) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!130705 () Bool)

(assert (=> b!130705 (= e!85249 (bvslt (size!2500 (_keys!4564 newMap!16)) #b01111111111111111111111111111111))))

(assert (= (and d!39991 res!63004) b!130703))

(assert (= (and b!130703 res!63007) b!130704))

(assert (= (and b!130704 res!63005) b!130705))

(assert (= (and d!39991 res!63006) b!130706))

(declare-fun m!154379 () Bool)

(assert (=> b!130703 m!154379))

(assert (=> b!130703 m!154379))

(declare-fun m!154381 () Bool)

(assert (=> b!130703 m!154381))

(assert (=> b!130704 m!152129))

(declare-fun m!154383 () Bool)

(assert (=> b!130704 m!154383))

(assert (=> d!39991 m!152129))

(declare-fun m!154385 () Bool)

(assert (=> d!39991 m!154385))

(assert (=> b!130706 m!152889))

(assert (=> b!130706 m!152917))

(assert (=> b!130706 m!152231))

(assert (=> d!39551 d!39991))

(declare-fun d!39993 () Bool)

(assert (=> d!39993 (arrayContainsKey!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!68042 () Unit!4042)

(assert (=> d!39993 (= lt!68042 (choose!13 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))))))

(assert (=> d!39993 (bvsge (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) #b00000000000000000000000000000000)))

(assert (=> d!39993 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!67575 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192))) lt!68042)))

(declare-fun bs!5452 () Bool)

(assert (= bs!5452 d!39993))

(assert (=> bs!5452 m!152129))

(assert (=> bs!5452 m!152919))

(assert (=> bs!5452 m!152129))

(declare-fun m!154387 () Bool)

(assert (=> bs!5452 m!154387))

(assert (=> d!39551 d!39993))

(declare-fun b!130707 () Bool)

(declare-fun e!85251 () (_ BitVec 32))

(declare-fun call!14215 () (_ BitVec 32))

(assert (=> b!130707 (= e!85251 (bvadd #b00000000000000000000000000000001 call!14215))))

(declare-fun b!130708 () Bool)

(declare-fun e!85252 () (_ BitVec 32))

(assert (=> b!130708 (= e!85252 e!85251)))

(declare-fun c!24141 () Bool)

(assert (=> b!130708 (= c!24141 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!14212 () Bool)

(assert (=> bm!14212 (= call!14215 (arrayCountValidKeys!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130709 () Bool)

(assert (=> b!130709 (= e!85251 call!14215)))

(declare-fun b!130710 () Bool)

(assert (=> b!130710 (= e!85252 #b00000000000000000000000000000000)))

(declare-fun d!39995 () Bool)

(declare-fun lt!68043 () (_ BitVec 32))

(assert (=> d!39995 (and (bvsge lt!68043 #b00000000000000000000000000000000) (bvsle lt!68043 (bvsub (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!39995 (= lt!68043 e!85252)))

(declare-fun c!24142 () Bool)

(assert (=> d!39995 (= c!24142 (bvsge #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))))))

(assert (=> d!39995 (and (bvsle #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2500 (_keys!4564 newMap!16)) (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(assert (=> d!39995 (= (arrayCountValidKeys!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) #b00000000000000000000000000000000 (size!2500 (_keys!4564 newMap!16))) lt!68043)))

(assert (= (and d!39995 c!24142) b!130710))

(assert (= (and d!39995 (not c!24142)) b!130708))

(assert (= (and b!130708 c!24141) b!130707))

(assert (= (and b!130708 (not c!24141)) b!130709))

(assert (= (or b!130707 b!130709) bm!14212))

(assert (=> b!130708 m!154319))

(assert (=> b!130708 m!154319))

(assert (=> b!130708 m!154323))

(declare-fun m!154389 () Bool)

(assert (=> bm!14212 m!154389))

(assert (=> d!39551 d!39995))

(assert (=> d!39551 d!39421))

(declare-fun bm!14213 () Bool)

(declare-fun call!14216 () Bool)

(assert (=> bm!14213 (= call!14216 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (mask!7101 newMap!16)))))

(declare-fun b!130711 () Bool)

(declare-fun e!85255 () Bool)

(assert (=> b!130711 (= e!85255 call!14216)))

(declare-fun b!130712 () Bool)

(declare-fun e!85253 () Bool)

(assert (=> b!130712 (= e!85253 call!14216)))

(declare-fun d!39997 () Bool)

(declare-fun res!63008 () Bool)

(declare-fun e!85254 () Bool)

(assert (=> d!39997 (=> res!63008 e!85254)))

(assert (=> d!39997 (= res!63008 (bvsge #b00000000000000000000000000000000 (size!2500 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))))))))

(assert (=> d!39997 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (mask!7101 newMap!16)) e!85254)))

(declare-fun b!130713 () Bool)

(assert (=> b!130713 (= e!85254 e!85255)))

(declare-fun c!24143 () Bool)

(assert (=> b!130713 (= c!24143 (validKeyInArray!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!130714 () Bool)

(assert (=> b!130714 (= e!85255 e!85253)))

(declare-fun lt!68046 () (_ BitVec 64))

(assert (=> b!130714 (= lt!68046 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!68044 () Unit!4042)

(assert (=> b!130714 (= lt!68044 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) lt!68046 #b00000000000000000000000000000000))))

(assert (=> b!130714 (arrayContainsKey!0 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) lt!68046 #b00000000000000000000000000000000)))

(declare-fun lt!68045 () Unit!4042)

(assert (=> b!130714 (= lt!68045 lt!68044)))

(declare-fun res!63009 () Bool)

(assert (=> b!130714 (= res!63009 (= (seekEntryOrOpen!0 (select (arr!2234 (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16)))) #b00000000000000000000000000000000) (array!4722 (store (arr!2234 (_keys!4564 newMap!16)) (ite c!23853 (index!3224 lt!67192) (index!3221 lt!67192)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (size!2500 (_keys!4564 newMap!16))) (mask!7101 newMap!16)) (Found!266 #b00000000000000000000000000000000)))))

(assert (=> b!130714 (=> (not res!63009) (not e!85253))))

(assert (= (and d!39997 (not res!63008)) b!130713))

(assert (= (and b!130713 c!24143) b!130714))

(assert (= (and b!130713 (not c!24143)) b!130711))

(assert (= (and b!130714 res!63009) b!130712))

(assert (= (or b!130712 b!130711) bm!14213))

(declare-fun m!154391 () Bool)

(assert (=> bm!14213 m!154391))

(assert (=> b!130713 m!154319))

(assert (=> b!130713 m!154319))

(assert (=> b!130713 m!154323))

(assert (=> b!130714 m!154319))

(declare-fun m!154393 () Bool)

(assert (=> b!130714 m!154393))

(declare-fun m!154395 () Bool)

(assert (=> b!130714 m!154395))

(assert (=> b!130714 m!154319))

(declare-fun m!154397 () Bool)

(assert (=> b!130714 m!154397))

(assert (=> d!39551 d!39997))

(declare-fun b!130715 () Bool)

(declare-fun e!85262 () Unit!4042)

(declare-fun Unit!4091 () Unit!4042)

(assert (=> b!130715 (= e!85262 Unit!4091)))

(declare-fun b!130716 () Bool)

(declare-fun e!85258 () ListLongMap!1643)

(declare-fun call!14219 () ListLongMap!1643)

(assert (=> b!130716 (= e!85258 (+!166 call!14219 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(declare-fun b!130717 () Bool)

(declare-fun e!85268 () Bool)

(declare-fun lt!68048 () ListLongMap!1643)

(assert (=> b!130717 (= e!85268 (= (apply!113 lt!68048 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2682 newMap!16)))))

(declare-fun b!130718 () Bool)

(declare-fun e!85265 () ListLongMap!1643)

(declare-fun call!14218 () ListLongMap!1643)

(assert (=> b!130718 (= e!85265 call!14218)))

(declare-fun b!130719 () Bool)

(declare-fun e!85259 () Bool)

(assert (=> b!130719 (= e!85259 e!85268)))

(declare-fun res!63010 () Bool)

(declare-fun call!14221 () Bool)

(assert (=> b!130719 (= res!63010 call!14221)))

(assert (=> b!130719 (=> (not res!63010) (not e!85268))))

(declare-fun b!130720 () Bool)

(declare-fun e!85264 () Bool)

(assert (=> b!130720 (= e!85264 (= (apply!113 lt!68048 (select (arr!2234 lt!67573) #b00000000000000000000000000000000)) (get!1469 (select (arr!2235 lt!67594) #b00000000000000000000000000000000) (dynLambda!421 (defaultEntry!2823 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!130720 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2501 lt!67594)))))

(assert (=> b!130720 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 lt!67573)))))

(declare-fun b!130721 () Bool)

(declare-fun e!85261 () Bool)

(assert (=> b!130721 (= e!85261 e!85259)))

(declare-fun c!24149 () Bool)

(assert (=> b!130721 (= c!24149 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!14222 () ListLongMap!1643)

(declare-fun bm!14214 () Bool)

(assert (=> bm!14214 (= call!14222 (getCurrentListMapNoExtraKeys!133 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun d!39999 () Bool)

(assert (=> d!39999 e!85261))

(declare-fun res!63012 () Bool)

(assert (=> d!39999 (=> (not res!63012) (not e!85261))))

(assert (=> d!39999 (= res!63012 (or (bvsge #b00000000000000000000000000000000 (size!2500 lt!67573)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 lt!67573)))))))

(declare-fun lt!68068 () ListLongMap!1643)

(assert (=> d!39999 (= lt!68048 lt!68068)))

(declare-fun lt!68060 () Unit!4042)

(assert (=> d!39999 (= lt!68060 e!85262)))

(declare-fun c!24148 () Bool)

(declare-fun e!85266 () Bool)

(assert (=> d!39999 (= c!24148 e!85266)))

(declare-fun res!63014 () Bool)

(assert (=> d!39999 (=> (not res!63014) (not e!85266))))

(assert (=> d!39999 (= res!63014 (bvslt #b00000000000000000000000000000000 (size!2500 lt!67573)))))

(assert (=> d!39999 (= lt!68068 e!85258)))

(declare-fun c!24145 () Bool)

(assert (=> d!39999 (= c!24145 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!39999 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!39999 (= (getCurrentListMap!515 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!68048)))

(declare-fun b!130722 () Bool)

(declare-fun e!85267 () Bool)

(assert (=> b!130722 (= e!85267 (= (apply!113 lt!68048 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2682 newMap!16)))))

(declare-fun b!130723 () Bool)

(assert (=> b!130723 (= e!85266 (validKeyInArray!0 (select (arr!2234 lt!67573) #b00000000000000000000000000000000)))))

(declare-fun bm!14215 () Bool)

(declare-fun call!14223 () ListLongMap!1643)

(declare-fun call!14220 () ListLongMap!1643)

(assert (=> bm!14215 (= call!14223 call!14220)))

(declare-fun b!130724 () Bool)

(declare-fun lt!68053 () Unit!4042)

(assert (=> b!130724 (= e!85262 lt!68053)))

(declare-fun lt!68054 () ListLongMap!1643)

(assert (=> b!130724 (= lt!68054 (getCurrentListMapNoExtraKeys!133 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68049 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68049 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68061 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68061 (select (arr!2234 lt!67573) #b00000000000000000000000000000000))))

(declare-fun lt!68062 () Unit!4042)

(assert (=> b!130724 (= lt!68062 (addStillContains!89 lt!68054 lt!68049 (zeroValue!2682 newMap!16) lt!68061))))

(assert (=> b!130724 (contains!873 (+!166 lt!68054 (tuple2!2545 lt!68049 (zeroValue!2682 newMap!16))) lt!68061)))

(declare-fun lt!68067 () Unit!4042)

(assert (=> b!130724 (= lt!68067 lt!68062)))

(declare-fun lt!68047 () ListLongMap!1643)

(assert (=> b!130724 (= lt!68047 (getCurrentListMapNoExtraKeys!133 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68055 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68055 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68066 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68066 (select (arr!2234 lt!67573) #b00000000000000000000000000000000))))

(declare-fun lt!68051 () Unit!4042)

(assert (=> b!130724 (= lt!68051 (addApplyDifferent!89 lt!68047 lt!68055 (minValue!2682 newMap!16) lt!68066))))

(assert (=> b!130724 (= (apply!113 (+!166 lt!68047 (tuple2!2545 lt!68055 (minValue!2682 newMap!16))) lt!68066) (apply!113 lt!68047 lt!68066))))

(declare-fun lt!68063 () Unit!4042)

(assert (=> b!130724 (= lt!68063 lt!68051)))

(declare-fun lt!68056 () ListLongMap!1643)

(assert (=> b!130724 (= lt!68056 (getCurrentListMapNoExtraKeys!133 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68065 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68065 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68050 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68050 (select (arr!2234 lt!67573) #b00000000000000000000000000000000))))

(declare-fun lt!68057 () Unit!4042)

(assert (=> b!130724 (= lt!68057 (addApplyDifferent!89 lt!68056 lt!68065 (zeroValue!2682 newMap!16) lt!68050))))

(assert (=> b!130724 (= (apply!113 (+!166 lt!68056 (tuple2!2545 lt!68065 (zeroValue!2682 newMap!16))) lt!68050) (apply!113 lt!68056 lt!68050))))

(declare-fun lt!68058 () Unit!4042)

(assert (=> b!130724 (= lt!68058 lt!68057)))

(declare-fun lt!68064 () ListLongMap!1643)

(assert (=> b!130724 (= lt!68064 (getCurrentListMapNoExtraKeys!133 lt!67573 lt!67594 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(declare-fun lt!68052 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68052 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!68059 () (_ BitVec 64))

(assert (=> b!130724 (= lt!68059 (select (arr!2234 lt!67573) #b00000000000000000000000000000000))))

(assert (=> b!130724 (= lt!68053 (addApplyDifferent!89 lt!68064 lt!68052 (minValue!2682 newMap!16) lt!68059))))

(assert (=> b!130724 (= (apply!113 (+!166 lt!68064 (tuple2!2545 lt!68052 (minValue!2682 newMap!16))) lt!68059) (apply!113 lt!68064 lt!68059))))

(declare-fun b!130725 () Bool)

(declare-fun res!63018 () Bool)

(assert (=> b!130725 (=> (not res!63018) (not e!85261))))

(declare-fun e!85256 () Bool)

(assert (=> b!130725 (= res!63018 e!85256)))

(declare-fun c!24147 () Bool)

(assert (=> b!130725 (= c!24147 (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!130726 () Bool)

(declare-fun res!63015 () Bool)

(assert (=> b!130726 (=> (not res!63015) (not e!85261))))

(declare-fun e!85257 () Bool)

(assert (=> b!130726 (= res!63015 e!85257)))

(declare-fun res!63016 () Bool)

(assert (=> b!130726 (=> res!63016 e!85257)))

(declare-fun e!85260 () Bool)

(assert (=> b!130726 (= res!63016 (not e!85260))))

(declare-fun res!63017 () Bool)

(assert (=> b!130726 (=> (not res!63017) (not e!85260))))

(assert (=> b!130726 (= res!63017 (bvslt #b00000000000000000000000000000000 (size!2500 lt!67573)))))

(declare-fun bm!14216 () Bool)

(declare-fun call!14217 () Bool)

(assert (=> bm!14216 (= call!14217 (contains!873 lt!68048 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!24144 () Bool)

(declare-fun bm!14217 () Bool)

(assert (=> bm!14217 (= call!14219 (+!166 (ite c!24145 call!14222 (ite c!24144 call!14220 call!14223)) (ite (or c!24145 c!24144) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 newMap!16)) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun bm!14218 () Bool)

(assert (=> bm!14218 (= call!14220 call!14222)))

(declare-fun b!130727 () Bool)

(declare-fun e!85263 () ListLongMap!1643)

(assert (=> b!130727 (= e!85263 call!14218)))

(declare-fun b!130728 () Bool)

(assert (=> b!130728 (= e!85260 (validKeyInArray!0 (select (arr!2234 lt!67573) #b00000000000000000000000000000000)))))

(declare-fun bm!14219 () Bool)

(assert (=> bm!14219 (= call!14218 call!14219)))

(declare-fun b!130729 () Bool)

(assert (=> b!130729 (= e!85259 (not call!14221))))

(declare-fun b!130730 () Bool)

(declare-fun c!24146 () Bool)

(assert (=> b!130730 (= c!24146 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!130730 (= e!85265 e!85263)))

(declare-fun b!130731 () Bool)

(assert (=> b!130731 (= e!85256 (not call!14217))))

(declare-fun b!130732 () Bool)

(assert (=> b!130732 (= e!85256 e!85267)))

(declare-fun res!63013 () Bool)

(assert (=> b!130732 (= res!63013 call!14217)))

(assert (=> b!130732 (=> (not res!63013) (not e!85267))))

(declare-fun b!130733 () Bool)

(assert (=> b!130733 (= e!85258 e!85265)))

(assert (=> b!130733 (= c!24144 (and (not (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2596 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14220 () Bool)

(assert (=> bm!14220 (= call!14221 (contains!873 lt!68048 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130734 () Bool)

(assert (=> b!130734 (= e!85263 call!14223)))

(declare-fun b!130735 () Bool)

(assert (=> b!130735 (= e!85257 e!85264)))

(declare-fun res!63011 () Bool)

(assert (=> b!130735 (=> (not res!63011) (not e!85264))))

(assert (=> b!130735 (= res!63011 (contains!873 lt!68048 (select (arr!2234 lt!67573) #b00000000000000000000000000000000)))))

(assert (=> b!130735 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2500 lt!67573)))))

(assert (= (and d!39999 c!24145) b!130716))

(assert (= (and d!39999 (not c!24145)) b!130733))

(assert (= (and b!130733 c!24144) b!130718))

(assert (= (and b!130733 (not c!24144)) b!130730))

(assert (= (and b!130730 c!24146) b!130727))

(assert (= (and b!130730 (not c!24146)) b!130734))

(assert (= (or b!130727 b!130734) bm!14215))

(assert (= (or b!130718 bm!14215) bm!14218))

(assert (= (or b!130718 b!130727) bm!14219))

(assert (= (or b!130716 bm!14218) bm!14214))

(assert (= (or b!130716 bm!14219) bm!14217))

(assert (= (and d!39999 res!63014) b!130723))

(assert (= (and d!39999 c!24148) b!130724))

(assert (= (and d!39999 (not c!24148)) b!130715))

(assert (= (and d!39999 res!63012) b!130726))

(assert (= (and b!130726 res!63017) b!130728))

(assert (= (and b!130726 (not res!63016)) b!130735))

(assert (= (and b!130735 res!63011) b!130720))

(assert (= (and b!130726 res!63015) b!130725))

(assert (= (and b!130725 c!24147) b!130732))

(assert (= (and b!130725 (not c!24147)) b!130731))

(assert (= (and b!130732 res!63013) b!130722))

(assert (= (or b!130732 b!130731) bm!14216))

(assert (= (and b!130725 res!63018) b!130721))

(assert (= (and b!130721 c!24149) b!130719))

(assert (= (and b!130721 (not c!24149)) b!130729))

(assert (= (and b!130719 res!63010) b!130717))

(assert (= (or b!130719 b!130729) bm!14220))

(declare-fun b_lambda!5817 () Bool)

(assert (=> (not b_lambda!5817) (not b!130720)))

(assert (=> b!130720 t!6088))

(declare-fun b_and!8109 () Bool)

(assert (= b_and!8105 (and (=> t!6088 result!3917) b_and!8109)))

(assert (=> b!130720 t!6090))

(declare-fun b_and!8111 () Bool)

(assert (= b_and!8107 (and (=> t!6090 result!3919) b_and!8111)))

(declare-fun m!154399 () Bool)

(assert (=> b!130717 m!154399))

(declare-fun m!154401 () Bool)

(assert (=> bm!14214 m!154401))

(declare-fun m!154403 () Bool)

(assert (=> b!130716 m!154403))

(assert (=> d!39999 m!152389))

(declare-fun m!154405 () Bool)

(assert (=> b!130735 m!154405))

(assert (=> b!130735 m!154405))

(declare-fun m!154407 () Bool)

(assert (=> b!130735 m!154407))

(assert (=> b!130723 m!154405))

(assert (=> b!130723 m!154405))

(declare-fun m!154409 () Bool)

(assert (=> b!130723 m!154409))

(declare-fun m!154411 () Bool)

(assert (=> b!130724 m!154411))

(declare-fun m!154413 () Bool)

(assert (=> b!130724 m!154413))

(declare-fun m!154415 () Bool)

(assert (=> b!130724 m!154415))

(assert (=> b!130724 m!154405))

(declare-fun m!154417 () Bool)

(assert (=> b!130724 m!154417))

(declare-fun m!154419 () Bool)

(assert (=> b!130724 m!154419))

(declare-fun m!154421 () Bool)

(assert (=> b!130724 m!154421))

(declare-fun m!154423 () Bool)

(assert (=> b!130724 m!154423))

(assert (=> b!130724 m!154413))

(declare-fun m!154425 () Bool)

(assert (=> b!130724 m!154425))

(declare-fun m!154427 () Bool)

(assert (=> b!130724 m!154427))

(assert (=> b!130724 m!154401))

(assert (=> b!130724 m!154425))

(declare-fun m!154429 () Bool)

(assert (=> b!130724 m!154429))

(declare-fun m!154431 () Bool)

(assert (=> b!130724 m!154431))

(assert (=> b!130724 m!154419))

(declare-fun m!154433 () Bool)

(assert (=> b!130724 m!154433))

(declare-fun m!154435 () Bool)

(assert (=> b!130724 m!154435))

(declare-fun m!154437 () Bool)

(assert (=> b!130724 m!154437))

(declare-fun m!154439 () Bool)

(assert (=> b!130724 m!154439))

(assert (=> b!130724 m!154421))

(declare-fun m!154441 () Bool)

(assert (=> bm!14216 m!154441))

(assert (=> b!130728 m!154405))

(assert (=> b!130728 m!154405))

(assert (=> b!130728 m!154409))

(declare-fun m!154443 () Bool)

(assert (=> b!130722 m!154443))

(assert (=> b!130720 m!154405))

(declare-fun m!154445 () Bool)

(assert (=> b!130720 m!154445))

(assert (=> b!130720 m!152441))

(declare-fun m!154447 () Bool)

(assert (=> b!130720 m!154447))

(assert (=> b!130720 m!154405))

(declare-fun m!154449 () Bool)

(assert (=> b!130720 m!154449))

(assert (=> b!130720 m!152441))

(assert (=> b!130720 m!154445))

(declare-fun m!154451 () Bool)

(assert (=> bm!14217 m!154451))

(declare-fun m!154453 () Bool)

(assert (=> bm!14220 m!154453))

(assert (=> d!39551 d!39999))

(declare-fun d!40001 () Bool)

(declare-fun e!85269 () Bool)

(assert (=> d!40001 e!85269))

(declare-fun res!63019 () Bool)

(assert (=> d!40001 (=> res!63019 e!85269)))

(declare-fun lt!68069 () Bool)

(assert (=> d!40001 (= res!63019 (not lt!68069))))

(declare-fun lt!68071 () Bool)

(assert (=> d!40001 (= lt!68069 lt!68071)))

(declare-fun lt!68070 () Unit!4042)

(declare-fun e!85270 () Unit!4042)

(assert (=> d!40001 (= lt!68070 e!85270)))

(declare-fun c!24150 () Bool)

(assert (=> d!40001 (= c!24150 lt!68071)))

(assert (=> d!40001 (= lt!68071 (containsKey!173 (toList!837 lt!67352) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!40001 (= (contains!873 lt!67352 #b0000000000000000000000000000000000000000000000000000000000000000) lt!68069)))

(declare-fun b!130736 () Bool)

(declare-fun lt!68072 () Unit!4042)

(assert (=> b!130736 (= e!85270 lt!68072)))

(assert (=> b!130736 (= lt!68072 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67352) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130736 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130737 () Bool)

(declare-fun Unit!4092 () Unit!4042)

(assert (=> b!130737 (= e!85270 Unit!4092)))

(declare-fun b!130738 () Bool)

(assert (=> b!130738 (= e!85269 (isDefined!122 (getValueByKey!170 (toList!837 lt!67352) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!40001 c!24150) b!130736))

(assert (= (and d!40001 (not c!24150)) b!130737))

(assert (= (and d!40001 (not res!63019)) b!130738))

(declare-fun m!154455 () Bool)

(assert (=> d!40001 m!154455))

(declare-fun m!154457 () Bool)

(assert (=> b!130736 m!154457))

(declare-fun m!154459 () Bool)

(assert (=> b!130736 m!154459))

(assert (=> b!130736 m!154459))

(declare-fun m!154461 () Bool)

(assert (=> b!130736 m!154461))

(assert (=> b!130738 m!154459))

(assert (=> b!130738 m!154459))

(assert (=> b!130738 m!154461))

(assert (=> d!39469 d!40001))

(assert (=> d!39469 d!39423))

(declare-fun lt!68073 () Bool)

(declare-fun d!40003 () Bool)

(assert (=> d!40003 (= lt!68073 (select (content!131 (toList!837 lt!67331)) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!85272 () Bool)

(assert (=> d!40003 (= lt!68073 e!85272)))

(declare-fun res!63020 () Bool)

(assert (=> d!40003 (=> (not res!63020) (not e!85272))))

(assert (=> d!40003 (= res!63020 ((_ is Cons!1681) (toList!837 lt!67331)))))

(assert (=> d!40003 (= (contains!875 (toList!837 lt!67331) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!68073)))

(declare-fun b!130739 () Bool)

(declare-fun e!85271 () Bool)

(assert (=> b!130739 (= e!85272 e!85271)))

(declare-fun res!63021 () Bool)

(assert (=> b!130739 (=> res!63021 e!85271)))

(assert (=> b!130739 (= res!63021 (= (h!2285 (toList!837 lt!67331)) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!130740 () Bool)

(assert (=> b!130740 (= e!85271 (contains!875 (t!6076 (toList!837 lt!67331)) (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!40003 res!63020) b!130739))

(assert (= (and b!130739 (not res!63021)) b!130740))

(declare-fun m!154463 () Bool)

(assert (=> d!40003 m!154463))

(declare-fun m!154465 () Bool)

(assert (=> d!40003 m!154465))

(declare-fun m!154467 () Bool)

(assert (=> b!130740 m!154467))

(assert (=> b!129765 d!40003))

(declare-fun d!40005 () Bool)

(assert (=> d!40005 (= (apply!113 lt!67424 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67424) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5453 () Bool)

(assert (= bs!5453 d!40005))

(assert (=> bs!5453 m!153171))

(assert (=> bs!5453 m!153171))

(declare-fun m!154469 () Bool)

(assert (=> bs!5453 m!154469))

(assert (=> b!129909 d!40005))

(declare-fun b!130759 () Bool)

(declare-fun lt!68078 () SeekEntryResult!266)

(assert (=> b!130759 (and (bvsge (index!3223 lt!68078) #b00000000000000000000000000000000) (bvslt (index!3223 lt!68078) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun e!85285 () Bool)

(assert (=> b!130759 (= e!85285 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!68078)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!40007 () Bool)

(declare-fun e!85284 () Bool)

(assert (=> d!40007 e!85284))

(declare-fun c!24159 () Bool)

(assert (=> d!40007 (= c!24159 (and ((_ is Intermediate!266) lt!68078) (undefined!1078 lt!68078)))))

(declare-fun e!85286 () SeekEntryResult!266)

(assert (=> d!40007 (= lt!68078 e!85286)))

(declare-fun c!24158 () Bool)

(assert (=> d!40007 (= c!24158 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!68079 () (_ BitVec 64))

(assert (=> d!40007 (= lt!68079 (select (arr!2234 (_keys!4564 newMap!16)) (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16))))))

(assert (=> d!40007 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!40007 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)) lt!68078)))

(declare-fun b!130760 () Bool)

(declare-fun e!85283 () SeekEntryResult!266)

(assert (=> b!130760 (= e!85283 (Intermediate!266 false (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!130761 () Bool)

(assert (=> b!130761 (and (bvsge (index!3223 lt!68078) #b00000000000000000000000000000000) (bvslt (index!3223 lt!68078) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!63030 () Bool)

(assert (=> b!130761 (= res!63030 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!68078)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> b!130761 (=> res!63030 e!85285)))

(declare-fun e!85287 () Bool)

(assert (=> b!130761 (= e!85287 e!85285)))

(declare-fun b!130762 () Bool)

(assert (=> b!130762 (= e!85284 e!85287)))

(declare-fun res!63028 () Bool)

(assert (=> b!130762 (= res!63028 (and ((_ is Intermediate!266) lt!68078) (not (undefined!1078 lt!68078)) (bvslt (x!15261 lt!68078) #b01111111111111111111111111111110) (bvsge (x!15261 lt!68078) #b00000000000000000000000000000000) (bvsge (x!15261 lt!68078) #b00000000000000000000000000000000)))))

(assert (=> b!130762 (=> (not res!63028) (not e!85287))))

(declare-fun b!130763 () Bool)

(assert (=> b!130763 (and (bvsge (index!3223 lt!68078) #b00000000000000000000000000000000) (bvslt (index!3223 lt!68078) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun res!63029 () Bool)

(assert (=> b!130763 (= res!63029 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3223 lt!68078)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130763 (=> res!63029 e!85285)))

(declare-fun b!130764 () Bool)

(assert (=> b!130764 (= e!85284 (bvsge (x!15261 lt!68078) #b01111111111111111111111111111110))))

(declare-fun b!130765 () Bool)

(assert (=> b!130765 (= e!85286 (Intermediate!266 true (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!130766 () Bool)

(assert (=> b!130766 (= e!85283 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!7101 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(declare-fun b!130767 () Bool)

(assert (=> b!130767 (= e!85286 e!85283)))

(declare-fun c!24157 () Bool)

(assert (=> b!130767 (= c!24157 (or (= lt!68079 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) (= (bvadd lt!68079 lt!68079) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!40007 c!24158) b!130765))

(assert (= (and d!40007 (not c!24158)) b!130767))

(assert (= (and b!130767 c!24157) b!130760))

(assert (= (and b!130767 (not c!24157)) b!130766))

(assert (= (and d!40007 c!24159) b!130764))

(assert (= (and d!40007 (not c!24159)) b!130762))

(assert (= (and b!130762 res!63028) b!130761))

(assert (= (and b!130761 (not res!63030)) b!130763))

(assert (= (and b!130763 (not res!63029)) b!130759))

(assert (=> b!130766 m!152569))

(declare-fun m!154471 () Bool)

(assert (=> b!130766 m!154471))

(assert (=> b!130766 m!154471))

(assert (=> b!130766 m!152129))

(declare-fun m!154473 () Bool)

(assert (=> b!130766 m!154473))

(declare-fun m!154475 () Bool)

(assert (=> b!130759 m!154475))

(assert (=> d!40007 m!152569))

(declare-fun m!154477 () Bool)

(assert (=> d!40007 m!154477))

(assert (=> d!40007 m!152389))

(assert (=> b!130761 m!154475))

(assert (=> b!130763 m!154475))

(assert (=> d!39473 d!40007))

(declare-fun d!40009 () Bool)

(declare-fun lt!68085 () (_ BitVec 32))

(declare-fun lt!68084 () (_ BitVec 32))

(assert (=> d!40009 (= lt!68085 (bvmul (bvxor lt!68084 (bvlshr lt!68084 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!40009 (= lt!68084 ((_ extract 31 0) (bvand (bvxor (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvlshr (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!40009 (and (bvsge (mask!7101 newMap!16) #b00000000000000000000000000000000) (let ((res!63031 (let ((h!2288 ((_ extract 31 0) (bvand (bvxor (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvlshr (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!15365 (bvmul (bvxor h!2288 (bvlshr h!2288 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!15365 (bvlshr x!15365 #b00000000000000000000000000001101)) (mask!7101 newMap!16)))))) (and (bvslt res!63031 (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001)) (bvsge res!63031 #b00000000000000000000000000000000))))))

(assert (=> d!40009 (= (toIndex!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (mask!7101 newMap!16)) (bvand (bvxor lt!68085 (bvlshr lt!68085 #b00000000000000000000000000001101)) (mask!7101 newMap!16)))))

(assert (=> d!39473 d!40009))

(assert (=> d!39473 d!39565))

(assert (=> bm!14082 d!39799))

(declare-fun b!130768 () Bool)

(declare-fun e!85288 () Option!176)

(assert (=> b!130768 (= e!85288 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67399)))))))

(declare-fun b!130771 () Bool)

(declare-fun e!85289 () Option!176)

(assert (=> b!130771 (= e!85289 None!174)))

(declare-fun b!130770 () Bool)

(assert (=> b!130770 (= e!85289 (getValueByKey!170 (t!6076 (toList!837 lt!67399)) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130769 () Bool)

(assert (=> b!130769 (= e!85288 e!85289)))

(declare-fun c!24161 () Bool)

(assert (=> b!130769 (= c!24161 (and ((_ is Cons!1681) (toList!837 lt!67399)) (not (= (_1!1283 (h!2285 (toList!837 lt!67399))) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24160 () Bool)

(declare-fun d!40011 () Bool)

(assert (=> d!40011 (= c!24160 (and ((_ is Cons!1681) (toList!837 lt!67399)) (= (_1!1283 (h!2285 (toList!837 lt!67399))) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40011 (= (getValueByKey!170 (toList!837 lt!67399) (_1!1283 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85288)))

(assert (= (and d!40011 c!24160) b!130768))

(assert (= (and d!40011 (not c!24160)) b!130769))

(assert (= (and b!130769 c!24161) b!130770))

(assert (= (and b!130769 (not c!24161)) b!130771))

(declare-fun m!154479 () Bool)

(assert (=> b!130770 m!154479))

(assert (=> b!129861 d!40011))

(declare-fun d!40013 () Bool)

(assert (=> d!40013 (= (get!1473 (getValueByKey!170 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67263)) (v!3166 (getValueByKey!170 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67263)))))

(assert (=> d!39485 d!40013))

(declare-fun b!130772 () Bool)

(declare-fun e!85290 () Option!176)

(assert (=> b!130772 (= e!85290 (Some!175 (_2!1283 (h!2285 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun b!130775 () Bool)

(declare-fun e!85291 () Option!176)

(assert (=> b!130775 (= e!85291 None!174)))

(declare-fun b!130774 () Bool)

(assert (=> b!130774 (= e!85291 (getValueByKey!170 (t!6076 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67263))))

(declare-fun b!130773 () Bool)

(assert (=> b!130773 (= e!85290 e!85291)))

(declare-fun c!24163 () Bool)

(assert (=> b!130773 (= c!24163 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (not (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67263))))))

(declare-fun d!40015 () Bool)

(declare-fun c!24162 () Bool)

(assert (=> d!40015 (= c!24162 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67263)))))

(assert (=> d!40015 (= (getValueByKey!170 (toList!837 (+!166 lt!67269 (tuple2!2545 lt!67278 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67263) e!85290)))

(assert (= (and d!40015 c!24162) b!130772))

(assert (= (and d!40015 (not c!24162)) b!130773))

(assert (= (and b!130773 c!24163) b!130774))

(assert (= (and b!130773 (not c!24163)) b!130775))

(declare-fun m!154481 () Bool)

(assert (=> b!130774 m!154481))

(assert (=> d!39485 d!40015))

(assert (=> d!39511 d!39565))

(assert (=> d!39491 d!39477))

(declare-fun d!40017 () Bool)

(declare-fun e!85292 () Bool)

(assert (=> d!40017 e!85292))

(declare-fun res!63032 () Bool)

(assert (=> d!40017 (=> res!63032 e!85292)))

(declare-fun lt!68086 () Bool)

(assert (=> d!40017 (= res!63032 (not lt!68086))))

(declare-fun lt!68088 () Bool)

(assert (=> d!40017 (= lt!68086 lt!68088)))

(declare-fun lt!68087 () Unit!4042)

(declare-fun e!85293 () Unit!4042)

(assert (=> d!40017 (= lt!68087 e!85293)))

(declare-fun c!24164 () Bool)

(assert (=> d!40017 (= c!24164 lt!68088)))

(assert (=> d!40017 (= lt!68088 (containsKey!173 (toList!837 lt!67260) lt!67279))))

(assert (=> d!40017 (= (contains!873 lt!67260 lt!67279) lt!68086)))

(declare-fun b!130776 () Bool)

(declare-fun lt!68089 () Unit!4042)

(assert (=> b!130776 (= e!85293 lt!68089)))

(assert (=> b!130776 (= lt!68089 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67260) lt!67279))))

(assert (=> b!130776 (isDefined!122 (getValueByKey!170 (toList!837 lt!67260) lt!67279))))

(declare-fun b!130777 () Bool)

(declare-fun Unit!4093 () Unit!4042)

(assert (=> b!130777 (= e!85293 Unit!4093)))

(declare-fun b!130778 () Bool)

(assert (=> b!130778 (= e!85292 (isDefined!122 (getValueByKey!170 (toList!837 lt!67260) lt!67279)))))

(assert (= (and d!40017 c!24164) b!130776))

(assert (= (and d!40017 (not c!24164)) b!130777))

(assert (= (and d!40017 (not res!63032)) b!130778))

(declare-fun m!154483 () Bool)

(assert (=> d!40017 m!154483))

(declare-fun m!154485 () Bool)

(assert (=> b!130776 m!154485))

(assert (=> b!130776 m!152585))

(assert (=> b!130776 m!152585))

(declare-fun m!154487 () Bool)

(assert (=> b!130776 m!154487))

(assert (=> b!130778 m!152585))

(assert (=> b!130778 m!152585))

(assert (=> b!130778 m!154487))

(assert (=> d!39491 d!40017))

(assert (=> d!39491 d!39493))

(declare-fun d!40019 () Bool)

(assert (=> d!40019 (= (apply!113 (+!166 lt!67260 (tuple2!2545 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) lt!67279) (apply!113 lt!67260 lt!67279))))

(assert (=> d!40019 true))

(declare-fun _$34!968 () Unit!4042)

(assert (=> d!40019 (= (choose!794 lt!67260 lt!67268 (minValue!2682 (v!3160 (underlying!446 thiss!992))) lt!67279) _$34!968)))

(declare-fun bs!5454 () Bool)

(assert (= bs!5454 d!40019))

(assert (=> bs!5454 m!152323))

(assert (=> bs!5454 m!152323))

(assert (=> bs!5454 m!152325))

(assert (=> bs!5454 m!152341))

(assert (=> d!39491 d!40019))

(assert (=> d!39491 d!39487))

(declare-fun d!40021 () Bool)

(declare-fun e!85294 () Bool)

(assert (=> d!40021 e!85294))

(declare-fun res!63033 () Bool)

(assert (=> d!40021 (=> res!63033 e!85294)))

(declare-fun lt!68090 () Bool)

(assert (=> d!40021 (= res!63033 (not lt!68090))))

(declare-fun lt!68092 () Bool)

(assert (=> d!40021 (= lt!68090 lt!68092)))

(declare-fun lt!68091 () Unit!4042)

(declare-fun e!85295 () Unit!4042)

(assert (=> d!40021 (= lt!68091 e!85295)))

(declare-fun c!24165 () Bool)

(assert (=> d!40021 (= c!24165 lt!68092)))

(assert (=> d!40021 (= lt!68092 (containsKey!173 (toList!837 lt!67356) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!40021 (= (contains!873 lt!67356 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) lt!68090)))

(declare-fun b!130779 () Bool)

(declare-fun lt!68093 () Unit!4042)

(assert (=> b!130779 (= e!85295 lt!68093)))

(assert (=> b!130779 (= lt!68093 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67356) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130779 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130780 () Bool)

(declare-fun Unit!4094 () Unit!4042)

(assert (=> b!130780 (= e!85295 Unit!4094)))

(declare-fun b!130781 () Bool)

(assert (=> b!130781 (= e!85294 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!40021 c!24165) b!130779))

(assert (= (and d!40021 (not c!24165)) b!130780))

(assert (= (and d!40021 (not res!63033)) b!130781))

(assert (=> d!40021 m!152369))

(declare-fun m!154489 () Bool)

(assert (=> d!40021 m!154489))

(assert (=> b!130779 m!152369))

(declare-fun m!154491 () Bool)

(assert (=> b!130779 m!154491))

(assert (=> b!130779 m!152369))

(assert (=> b!130779 m!152969))

(assert (=> b!130779 m!152969))

(declare-fun m!154493 () Bool)

(assert (=> b!130779 m!154493))

(assert (=> b!130781 m!152369))

(assert (=> b!130781 m!152969))

(assert (=> b!130781 m!152969))

(assert (=> b!130781 m!154493))

(assert (=> b!129822 d!40021))

(declare-fun d!40023 () Bool)

(assert (=> d!40023 (= (apply!113 lt!67424 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) (get!1473 (getValueByKey!170 (toList!837 lt!67424) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5455 () Bool)

(assert (= bs!5455 d!40023))

(assert (=> bs!5455 m!152369))

(assert (=> bs!5455 m!153841))

(assert (=> bs!5455 m!153841))

(declare-fun m!154495 () Bool)

(assert (=> bs!5455 m!154495))

(assert (=> b!129912 d!40023))

(assert (=> b!129912 d!39577))

(declare-fun d!40025 () Bool)

(declare-fun res!63034 () Bool)

(declare-fun e!85296 () Bool)

(assert (=> d!40025 (=> res!63034 e!85296)))

(assert (=> d!40025 (= res!63034 (and ((_ is Cons!1681) (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (= (_1!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67274)))))

(assert (=> d!40025 (= (containsKey!173 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!67274) e!85296)))

(declare-fun b!130782 () Bool)

(declare-fun e!85297 () Bool)

(assert (=> b!130782 (= e!85296 e!85297)))

(declare-fun res!63035 () Bool)

(assert (=> b!130782 (=> (not res!63035) (not e!85297))))

(assert (=> b!130782 (= res!63035 (and (or (not ((_ is Cons!1681) (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) (bvsle (_1!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67274)) ((_ is Cons!1681) (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) (bvslt (_1!1283 (h!2285 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))))))) lt!67274)))))

(declare-fun b!130783 () Bool)

(assert (=> b!130783 (= e!85297 (containsKey!173 (t!6076 (toList!837 (+!166 lt!67267 (tuple2!2545 lt!67262 (zeroValue!2682 (v!3160 (underlying!446 thiss!992))))))) lt!67274))))

(assert (= (and d!40025 (not res!63034)) b!130782))

(assert (= (and b!130782 res!63035) b!130783))

(declare-fun m!154497 () Bool)

(assert (=> b!130783 m!154497))

(assert (=> d!39499 d!40025))

(declare-fun d!40027 () Bool)

(assert (=> d!40027 (= (get!1473 (getValueByKey!170 (toList!837 lt!67277) lt!67272)) (v!3166 (getValueByKey!170 (toList!837 lt!67277) lt!67272)))))

(assert (=> d!39501 d!40027))

(declare-fun b!130784 () Bool)

(declare-fun e!85298 () Option!176)

(assert (=> b!130784 (= e!85298 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67277)))))))

(declare-fun b!130787 () Bool)

(declare-fun e!85299 () Option!176)

(assert (=> b!130787 (= e!85299 None!174)))

(declare-fun b!130786 () Bool)

(assert (=> b!130786 (= e!85299 (getValueByKey!170 (t!6076 (toList!837 lt!67277)) lt!67272))))

(declare-fun b!130785 () Bool)

(assert (=> b!130785 (= e!85298 e!85299)))

(declare-fun c!24167 () Bool)

(assert (=> b!130785 (= c!24167 (and ((_ is Cons!1681) (toList!837 lt!67277)) (not (= (_1!1283 (h!2285 (toList!837 lt!67277))) lt!67272))))))

(declare-fun d!40029 () Bool)

(declare-fun c!24166 () Bool)

(assert (=> d!40029 (= c!24166 (and ((_ is Cons!1681) (toList!837 lt!67277)) (= (_1!1283 (h!2285 (toList!837 lt!67277))) lt!67272)))))

(assert (=> d!40029 (= (getValueByKey!170 (toList!837 lt!67277) lt!67272) e!85298)))

(assert (= (and d!40029 c!24166) b!130784))

(assert (= (and d!40029 (not c!24166)) b!130785))

(assert (= (and b!130785 c!24167) b!130786))

(assert (= (and b!130785 (not c!24167)) b!130787))

(declare-fun m!154499 () Bool)

(assert (=> b!130786 m!154499))

(assert (=> d!39501 d!40029))

(declare-fun d!40031 () Bool)

(assert (=> d!40031 (isDefined!122 (getValueByKey!170 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(declare-fun lt!68094 () Unit!4042)

(assert (=> d!40031 (= lt!68094 (choose!797 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(declare-fun e!85300 () Bool)

(assert (=> d!40031 e!85300))

(declare-fun res!63036 () Bool)

(assert (=> d!40031 (=> (not res!63036) (not e!85300))))

(assert (=> d!40031 (= res!63036 (isStrictlySorted!306 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))))

(assert (=> d!40031 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))) lt!68094)))

(declare-fun b!130788 () Bool)

(assert (=> b!130788 (= e!85300 (containsKey!173 (toList!837 (getCurrentListMap!515 (_keys!4564 newMap!16) lt!67193 (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16))) (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!67192))))))

(assert (= (and d!40031 res!63036) b!130788))

(assert (=> d!40031 m!152281))

(assert (=> d!40031 m!152761))

(assert (=> d!40031 m!152761))

(assert (=> d!40031 m!152763))

(assert (=> d!40031 m!152281))

(declare-fun m!154501 () Bool)

(assert (=> d!40031 m!154501))

(declare-fun m!154503 () Bool)

(assert (=> d!40031 m!154503))

(assert (=> b!130788 m!152281))

(assert (=> b!130788 m!152757))

(assert (=> b!129961 d!40031))

(assert (=> b!129961 d!39679))

(assert (=> b!129961 d!39681))

(declare-fun b!130789 () Bool)

(declare-fun e!85301 () Option!176)

(assert (=> b!130789 (= e!85301 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67602)))))))

(declare-fun b!130792 () Bool)

(declare-fun e!85302 () Option!176)

(assert (=> b!130792 (= e!85302 None!174)))

(declare-fun b!130791 () Bool)

(assert (=> b!130791 (= e!85302 (getValueByKey!170 (t!6076 (toList!837 lt!67602)) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130790 () Bool)

(assert (=> b!130790 (= e!85301 e!85302)))

(declare-fun c!24169 () Bool)

(assert (=> b!130790 (= c!24169 (and ((_ is Cons!1681) (toList!837 lt!67602)) (not (= (_1!1283 (h!2285 (toList!837 lt!67602))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!40033 () Bool)

(declare-fun c!24168 () Bool)

(assert (=> d!40033 (= c!24168 (and ((_ is Cons!1681) (toList!837 lt!67602)) (= (_1!1283 (h!2285 (toList!837 lt!67602))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40033 (= (getValueByKey!170 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85301)))

(assert (= (and d!40033 c!24168) b!130789))

(assert (= (and d!40033 (not c!24168)) b!130790))

(assert (= (and b!130790 c!24169) b!130791))

(assert (= (and b!130790 (not c!24169)) b!130792))

(declare-fun m!154505 () Bool)

(assert (=> b!130791 m!154505))

(assert (=> b!130071 d!40033))

(assert (=> b!129915 d!39587))

(declare-fun d!40035 () Bool)

(declare-fun e!85303 () Bool)

(assert (=> d!40035 e!85303))

(declare-fun res!63037 () Bool)

(assert (=> d!40035 (=> res!63037 e!85303)))

(declare-fun lt!68095 () Bool)

(assert (=> d!40035 (= res!63037 (not lt!68095))))

(declare-fun lt!68097 () Bool)

(assert (=> d!40035 (= lt!68095 lt!68097)))

(declare-fun lt!68096 () Unit!4042)

(declare-fun e!85304 () Unit!4042)

(assert (=> d!40035 (= lt!68096 e!85304)))

(declare-fun c!24170 () Bool)

(assert (=> d!40035 (= c!24170 lt!68097)))

(assert (=> d!40035 (= lt!68097 (containsKey!173 (toList!837 lt!67293) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!40035 (= (contains!873 lt!67293 #b0000000000000000000000000000000000000000000000000000000000000000) lt!68095)))

(declare-fun b!130793 () Bool)

(declare-fun lt!68098 () Unit!4042)

(assert (=> b!130793 (= e!85304 lt!68098)))

(assert (=> b!130793 (= lt!68098 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67293) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130793 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130794 () Bool)

(declare-fun Unit!4095 () Unit!4042)

(assert (=> b!130794 (= e!85304 Unit!4095)))

(declare-fun b!130795 () Bool)

(assert (=> b!130795 (= e!85303 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!40035 c!24170) b!130793))

(assert (= (and d!40035 (not c!24170)) b!130794))

(assert (= (and d!40035 (not res!63037)) b!130795))

(declare-fun m!154507 () Bool)

(assert (=> d!40035 m!154507))

(declare-fun m!154509 () Bool)

(assert (=> b!130793 m!154509))

(assert (=> b!130793 m!153695))

(assert (=> b!130793 m!153695))

(declare-fun m!154511 () Bool)

(assert (=> b!130793 m!154511))

(assert (=> b!130795 m!153695))

(assert (=> b!130795 m!153695))

(assert (=> b!130795 m!154511))

(assert (=> bm!14084 d!40035))

(assert (=> b!129795 d!39513))

(assert (=> b!129977 d!39587))

(assert (=> d!39507 d!39565))

(declare-fun d!40037 () Bool)

(assert (=> d!40037 (= (inRange!0 (ite c!23967 (index!3222 lt!67576) (ite c!23964 (index!3221 lt!67580) (index!3224 lt!67580))) (mask!7101 newMap!16)) (and (bvsge (ite c!23967 (index!3222 lt!67576) (ite c!23964 (index!3221 lt!67580) (index!3224 lt!67580))) #b00000000000000000000000000000000) (bvslt (ite c!23967 (index!3222 lt!67576) (ite c!23964 (index!3221 lt!67580) (index!3224 lt!67580))) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!14137 d!40037))

(declare-fun d!40039 () Bool)

(declare-fun e!85305 () Bool)

(assert (=> d!40039 e!85305))

(declare-fun res!63039 () Bool)

(assert (=> d!40039 (=> (not res!63039) (not e!85305))))

(declare-fun lt!68100 () ListLongMap!1643)

(assert (=> d!40039 (= res!63039 (contains!873 lt!68100 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun lt!68101 () List!1685)

(assert (=> d!40039 (= lt!68100 (ListLongMap!1644 lt!68101))))

(declare-fun lt!68102 () Unit!4042)

(declare-fun lt!68099 () Unit!4042)

(assert (=> d!40039 (= lt!68102 lt!68099)))

(assert (=> d!40039 (= (getValueByKey!170 lt!68101 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40039 (= lt!68099 (lemmaContainsTupThenGetReturnValue!85 lt!68101 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40039 (= lt!68101 (insertStrictlySorted!88 (toList!837 call!14123) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40039 (= (+!166 call!14123 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) lt!68100)))

(declare-fun b!130796 () Bool)

(declare-fun res!63038 () Bool)

(assert (=> b!130796 (=> (not res!63038) (not e!85305))))

(assert (=> b!130796 (= res!63038 (= (getValueByKey!170 (toList!837 lt!68100) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun b!130797 () Bool)

(assert (=> b!130797 (= e!85305 (contains!875 (toList!837 lt!68100) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(assert (= (and d!40039 res!63039) b!130796))

(assert (= (and b!130796 res!63038) b!130797))

(declare-fun m!154513 () Bool)

(assert (=> d!40039 m!154513))

(declare-fun m!154515 () Bool)

(assert (=> d!40039 m!154515))

(declare-fun m!154517 () Bool)

(assert (=> d!40039 m!154517))

(declare-fun m!154519 () Bool)

(assert (=> d!40039 m!154519))

(declare-fun m!154521 () Bool)

(assert (=> b!130796 m!154521))

(declare-fun m!154523 () Bool)

(assert (=> b!130797 m!154523))

(assert (=> b!129965 d!40039))

(assert (=> b!129943 d!39587))

(assert (=> b!129948 d!39549))

(declare-fun d!40041 () Bool)

(declare-fun e!85306 () Bool)

(assert (=> d!40041 e!85306))

(declare-fun res!63040 () Bool)

(assert (=> d!40041 (=> res!63040 e!85306)))

(declare-fun lt!68103 () Bool)

(assert (=> d!40041 (= res!63040 (not lt!68103))))

(declare-fun lt!68105 () Bool)

(assert (=> d!40041 (= lt!68103 lt!68105)))

(declare-fun lt!68104 () Unit!4042)

(declare-fun e!85307 () Unit!4042)

(assert (=> d!40041 (= lt!68104 e!85307)))

(declare-fun c!24171 () Bool)

(assert (=> d!40041 (= c!24171 lt!68105)))

(assert (=> d!40041 (= lt!68105 (containsKey!173 (toList!837 lt!67356) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!40041 (= (contains!873 lt!67356 #b0000000000000000000000000000000000000000000000000000000000000000) lt!68103)))

(declare-fun b!130798 () Bool)

(declare-fun lt!68106 () Unit!4042)

(assert (=> b!130798 (= e!85307 lt!68106)))

(assert (=> b!130798 (= lt!68106 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67356) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130798 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130799 () Bool)

(declare-fun Unit!4096 () Unit!4042)

(assert (=> b!130799 (= e!85307 Unit!4096)))

(declare-fun b!130800 () Bool)

(assert (=> b!130800 (= e!85306 (isDefined!122 (getValueByKey!170 (toList!837 lt!67356) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!40041 c!24171) b!130798))

(assert (= (and d!40041 (not c!24171)) b!130799))

(assert (= (and d!40041 (not res!63040)) b!130800))

(declare-fun m!154525 () Bool)

(assert (=> d!40041 m!154525))

(declare-fun m!154527 () Bool)

(assert (=> b!130798 m!154527))

(assert (=> b!130798 m!153273))

(assert (=> b!130798 m!153273))

(declare-fun m!154529 () Bool)

(assert (=> b!130798 m!154529))

(assert (=> b!130800 m!153273))

(assert (=> b!130800 m!153273))

(assert (=> b!130800 m!154529))

(assert (=> bm!14094 d!40041))

(assert (=> b!129744 d!39587))

(declare-fun d!40043 () Bool)

(declare-fun e!85308 () Bool)

(assert (=> d!40043 e!85308))

(declare-fun res!63041 () Bool)

(assert (=> d!40043 (=> res!63041 e!85308)))

(declare-fun lt!68107 () Bool)

(assert (=> d!40043 (= res!63041 (not lt!68107))))

(declare-fun lt!68109 () Bool)

(assert (=> d!40043 (= lt!68107 lt!68109)))

(declare-fun lt!68108 () Unit!4042)

(declare-fun e!85309 () Unit!4042)

(assert (=> d!40043 (= lt!68108 e!85309)))

(declare-fun c!24172 () Bool)

(assert (=> d!40043 (= c!24172 lt!68109)))

(assert (=> d!40043 (= lt!68109 (containsKey!173 (toList!837 lt!67457) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!40043 (= (contains!873 lt!67457 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) lt!68107)))

(declare-fun b!130801 () Bool)

(declare-fun lt!68110 () Unit!4042)

(assert (=> b!130801 (= e!85309 lt!68110)))

(assert (=> b!130801 (= lt!68110 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67457) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130801 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130802 () Bool)

(declare-fun Unit!4097 () Unit!4042)

(assert (=> b!130802 (= e!85309 Unit!4097)))

(declare-fun b!130803 () Bool)

(assert (=> b!130803 (= e!85308 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!40043 c!24172) b!130801))

(assert (= (and d!40043 (not c!24172)) b!130802))

(assert (= (and d!40043 (not res!63041)) b!130803))

(assert (=> d!40043 m!152369))

(declare-fun m!154531 () Bool)

(assert (=> d!40043 m!154531))

(assert (=> b!130801 m!152369))

(declare-fun m!154533 () Bool)

(assert (=> b!130801 m!154533))

(assert (=> b!130801 m!152369))

(assert (=> b!130801 m!153117))

(assert (=> b!130801 m!153117))

(declare-fun m!154535 () Bool)

(assert (=> b!130801 m!154535))

(assert (=> b!130803 m!152369))

(assert (=> b!130803 m!153117))

(assert (=> b!130803 m!153117))

(assert (=> b!130803 m!154535))

(assert (=> b!129984 d!40043))

(assert (=> b!130058 d!39453))

(assert (=> b!129722 d!39609))

(assert (=> b!129722 d!39611))

(declare-fun d!40045 () Bool)

(assert (=> d!40045 (= (inRange!0 (ite c!23928 (index!3221 lt!67422) (index!3224 lt!67422)) (mask!7101 newMap!16)) (and (bvsge (ite c!23928 (index!3221 lt!67422) (index!3224 lt!67422)) #b00000000000000000000000000000000) (bvslt (ite c!23928 (index!3221 lt!67422) (index!3224 lt!67422)) (bvadd (mask!7101 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!14107 d!40045))

(declare-fun d!40047 () Bool)

(declare-fun e!85310 () Bool)

(assert (=> d!40047 e!85310))

(declare-fun res!63043 () Bool)

(assert (=> d!40047 (=> (not res!63043) (not e!85310))))

(declare-fun lt!68112 () ListLongMap!1643)

(assert (=> d!40047 (= res!63043 (contains!873 lt!68112 (_1!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(declare-fun lt!68113 () List!1685)

(assert (=> d!40047 (= lt!68112 (ListLongMap!1644 lt!68113))))

(declare-fun lt!68114 () Unit!4042)

(declare-fun lt!68111 () Unit!4042)

(assert (=> d!40047 (= lt!68114 lt!68111)))

(assert (=> d!40047 (= (getValueByKey!170 lt!68113 (_1!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))) (Some!175 (_2!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(assert (=> d!40047 (= lt!68111 (lemmaContainsTupThenGetReturnValue!85 lt!68113 (_1!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (_2!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(assert (=> d!40047 (= lt!68113 (insertStrictlySorted!88 (toList!837 (ite c!23902 call!14100 (ite c!23901 call!14098 call!14101))) (_1!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) (_2!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))))))

(assert (=> d!40047 (= (+!166 (ite c!23902 call!14100 (ite c!23901 call!14098 call!14101)) (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))) lt!68112)))

(declare-fun b!130804 () Bool)

(declare-fun res!63042 () Bool)

(assert (=> b!130804 (=> (not res!63042) (not e!85310))))

(assert (=> b!130804 (= res!63042 (= (getValueByKey!170 (toList!837 lt!68112) (_1!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16)))))) (Some!175 (_2!1283 (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))))

(declare-fun b!130805 () Bool)

(assert (=> b!130805 (= e!85310 (contains!875 (toList!837 lt!68112) (ite (or c!23902 c!23901) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!23855 c!23850) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2682 newMap!16))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!23855 (ite c!23850 (minValue!2682 newMap!16) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2682 newMap!16))))))))

(assert (= (and d!40047 res!63043) b!130804))

(assert (= (and b!130804 res!63042) b!130805))

(declare-fun m!154537 () Bool)

(assert (=> d!40047 m!154537))

(declare-fun m!154539 () Bool)

(assert (=> d!40047 m!154539))

(declare-fun m!154541 () Bool)

(assert (=> d!40047 m!154541))

(declare-fun m!154543 () Bool)

(assert (=> d!40047 m!154543))

(declare-fun m!154545 () Bool)

(assert (=> b!130804 m!154545))

(declare-fun m!154547 () Bool)

(assert (=> b!130805 m!154547))

(assert (=> bm!14095 d!40047))

(declare-fun d!40049 () Bool)

(declare-fun e!85311 () Bool)

(assert (=> d!40049 e!85311))

(declare-fun res!63044 () Bool)

(assert (=> d!40049 (=> res!63044 e!85311)))

(declare-fun lt!68115 () Bool)

(assert (=> d!40049 (= res!63044 (not lt!68115))))

(declare-fun lt!68117 () Bool)

(assert (=> d!40049 (= lt!68115 lt!68117)))

(declare-fun lt!68116 () Unit!4042)

(declare-fun e!85312 () Unit!4042)

(assert (=> d!40049 (= lt!68116 e!85312)))

(declare-fun c!24173 () Bool)

(assert (=> d!40049 (= c!24173 lt!68117)))

(assert (=> d!40049 (= lt!68117 (containsKey!173 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!40049 (= (contains!873 lt!67331 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!68115)))

(declare-fun b!130806 () Bool)

(declare-fun lt!68118 () Unit!4042)

(assert (=> b!130806 (= e!85312 lt!68118)))

(assert (=> b!130806 (= lt!68118 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!130806 (isDefined!122 (getValueByKey!170 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130807 () Bool)

(declare-fun Unit!4098 () Unit!4042)

(assert (=> b!130807 (= e!85312 Unit!4098)))

(declare-fun b!130808 () Bool)

(assert (=> b!130808 (= e!85311 (isDefined!122 (getValueByKey!170 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!40049 c!24173) b!130806))

(assert (= (and d!40049 (not c!24173)) b!130807))

(assert (= (and d!40049 (not res!63044)) b!130808))

(declare-fun m!154549 () Bool)

(assert (=> d!40049 m!154549))

(declare-fun m!154551 () Bool)

(assert (=> b!130806 m!154551))

(assert (=> b!130806 m!152489))

(assert (=> b!130806 m!152489))

(declare-fun m!154553 () Bool)

(assert (=> b!130806 m!154553))

(assert (=> b!130808 m!152489))

(assert (=> b!130808 m!152489))

(assert (=> b!130808 m!154553))

(assert (=> d!39465 d!40049))

(declare-fun b!130809 () Bool)

(declare-fun e!85313 () Option!176)

(assert (=> b!130809 (= e!85313 (Some!175 (_2!1283 (h!2285 lt!67332))))))

(declare-fun b!130812 () Bool)

(declare-fun e!85314 () Option!176)

(assert (=> b!130812 (= e!85314 None!174)))

(declare-fun b!130811 () Bool)

(assert (=> b!130811 (= e!85314 (getValueByKey!170 (t!6076 lt!67332) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130810 () Bool)

(assert (=> b!130810 (= e!85313 e!85314)))

(declare-fun c!24175 () Bool)

(assert (=> b!130810 (= c!24175 (and ((_ is Cons!1681) lt!67332) (not (= (_1!1283 (h!2285 lt!67332)) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!24174 () Bool)

(declare-fun d!40051 () Bool)

(assert (=> d!40051 (= c!24174 (and ((_ is Cons!1681) lt!67332) (= (_1!1283 (h!2285 lt!67332)) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!40051 (= (getValueByKey!170 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!85313)))

(assert (= (and d!40051 c!24174) b!130809))

(assert (= (and d!40051 (not c!24174)) b!130810))

(assert (= (and b!130810 c!24175) b!130811))

(assert (= (and b!130810 (not c!24175)) b!130812))

(declare-fun m!154555 () Bool)

(assert (=> b!130811 m!154555))

(assert (=> d!39465 d!40051))

(declare-fun d!40053 () Bool)

(assert (=> d!40053 (= (getValueByKey!170 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!175 (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!68119 () Unit!4042)

(assert (=> d!40053 (= lt!68119 (choose!802 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!85315 () Bool)

(assert (=> d!40053 e!85315))

(declare-fun res!63045 () Bool)

(assert (=> d!40053 (=> (not res!63045) (not e!85315))))

(assert (=> d!40053 (= res!63045 (isStrictlySorted!306 lt!67332))))

(assert (=> d!40053 (= (lemmaContainsTupThenGetReturnValue!85 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!68119)))

(declare-fun b!130813 () Bool)

(declare-fun res!63046 () Bool)

(assert (=> b!130813 (=> (not res!63046) (not e!85315))))

(assert (=> b!130813 (= res!63046 (containsKey!173 lt!67332 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130814 () Bool)

(assert (=> b!130814 (= e!85315 (contains!875 lt!67332 (tuple2!2545 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!40053 res!63045) b!130813))

(assert (= (and b!130813 res!63046) b!130814))

(assert (=> d!40053 m!152483))

(declare-fun m!154557 () Bool)

(assert (=> d!40053 m!154557))

(declare-fun m!154559 () Bool)

(assert (=> d!40053 m!154559))

(declare-fun m!154561 () Bool)

(assert (=> b!130813 m!154561))

(declare-fun m!154563 () Bool)

(assert (=> b!130814 m!154563))

(assert (=> d!39465 d!40053))

(declare-fun bm!14221 () Bool)

(declare-fun call!14224 () List!1685)

(declare-fun e!85316 () List!1685)

(declare-fun c!24177 () Bool)

(assert (=> bm!14221 (= call!14224 ($colon$colon!90 e!85316 (ite c!24177 (h!2285 (toList!837 (ite c!23855 call!14040 call!14060))) (tuple2!2545 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!24179 () Bool)

(assert (=> bm!14221 (= c!24179 c!24177)))

(declare-fun b!130816 () Bool)

(assert (=> b!130816 (= e!85316 (insertStrictlySorted!88 (t!6076 (toList!837 (ite c!23855 call!14040 call!14060))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130817 () Bool)

(declare-fun res!63048 () Bool)

(declare-fun e!85320 () Bool)

(assert (=> b!130817 (=> (not res!63048) (not e!85320))))

(declare-fun lt!68120 () List!1685)

(assert (=> b!130817 (= res!63048 (containsKey!173 lt!68120 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130818 () Bool)

(declare-fun c!24178 () Bool)

(assert (=> b!130818 (= c!24178 (and ((_ is Cons!1681) (toList!837 (ite c!23855 call!14040 call!14060))) (bvsgt (_1!1283 (h!2285 (toList!837 (ite c!23855 call!14040 call!14060)))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!85318 () List!1685)

(declare-fun e!85317 () List!1685)

(assert (=> b!130818 (= e!85318 e!85317)))

(declare-fun b!130815 () Bool)

(declare-fun c!24176 () Bool)

(assert (=> b!130815 (= e!85316 (ite c!24176 (t!6076 (toList!837 (ite c!23855 call!14040 call!14060))) (ite c!24178 (Cons!1681 (h!2285 (toList!837 (ite c!23855 call!14040 call!14060))) (t!6076 (toList!837 (ite c!23855 call!14040 call!14060)))) Nil!1682)))))

(declare-fun d!40055 () Bool)

(assert (=> d!40055 e!85320))

(declare-fun res!63047 () Bool)

(assert (=> d!40055 (=> (not res!63047) (not e!85320))))

(assert (=> d!40055 (= res!63047 (isStrictlySorted!306 lt!68120))))

(declare-fun e!85319 () List!1685)

(assert (=> d!40055 (= lt!68120 e!85319)))

(assert (=> d!40055 (= c!24177 (and ((_ is Cons!1681) (toList!837 (ite c!23855 call!14040 call!14060))) (bvslt (_1!1283 (h!2285 (toList!837 (ite c!23855 call!14040 call!14060)))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!40055 (isStrictlySorted!306 (toList!837 (ite c!23855 call!14040 call!14060)))))

(assert (=> d!40055 (= (insertStrictlySorted!88 (toList!837 (ite c!23855 call!14040 call!14060)) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!68120)))

(declare-fun bm!14222 () Bool)

(declare-fun call!14225 () List!1685)

(declare-fun call!14226 () List!1685)

(assert (=> bm!14222 (= call!14225 call!14226)))

(declare-fun bm!14223 () Bool)

(assert (=> bm!14223 (= call!14226 call!14224)))

(declare-fun b!130819 () Bool)

(assert (=> b!130819 (= e!85319 e!85318)))

(assert (=> b!130819 (= c!24176 (and ((_ is Cons!1681) (toList!837 (ite c!23855 call!14040 call!14060))) (= (_1!1283 (h!2285 (toList!837 (ite c!23855 call!14040 call!14060)))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!130820 () Bool)

(assert (=> b!130820 (= e!85320 (contains!875 lt!68120 (tuple2!2545 (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!130821 () Bool)

(assert (=> b!130821 (= e!85318 call!14226)))

(declare-fun b!130822 () Bool)

(assert (=> b!130822 (= e!85317 call!14225)))

(declare-fun b!130823 () Bool)

(assert (=> b!130823 (= e!85319 call!14224)))

(declare-fun b!130824 () Bool)

(assert (=> b!130824 (= e!85317 call!14225)))

(assert (= (and d!40055 c!24177) b!130823))

(assert (= (and d!40055 (not c!24177)) b!130819))

(assert (= (and b!130819 c!24176) b!130821))

(assert (= (and b!130819 (not c!24176)) b!130818))

(assert (= (and b!130818 c!24178) b!130824))

(assert (= (and b!130818 (not c!24178)) b!130822))

(assert (= (or b!130824 b!130822) bm!14222))

(assert (= (or b!130821 bm!14222) bm!14223))

(assert (= (or b!130823 bm!14223) bm!14221))

(assert (= (and bm!14221 c!24179) b!130816))

(assert (= (and bm!14221 (not c!24179)) b!130815))

(assert (= (and d!40055 res!63047) b!130817))

(assert (= (and b!130817 res!63048) b!130820))

(declare-fun m!154565 () Bool)

(assert (=> bm!14221 m!154565))

(declare-fun m!154567 () Bool)

(assert (=> b!130816 m!154567))

(declare-fun m!154569 () Bool)

(assert (=> b!130817 m!154569))

(declare-fun m!154571 () Bool)

(assert (=> b!130820 m!154571))

(declare-fun m!154573 () Bool)

(assert (=> d!40055 m!154573))

(declare-fun m!154575 () Bool)

(assert (=> d!40055 m!154575))

(assert (=> d!39465 d!40055))

(declare-fun d!40057 () Bool)

(declare-fun e!85321 () Bool)

(assert (=> d!40057 e!85321))

(declare-fun res!63049 () Bool)

(assert (=> d!40057 (=> res!63049 e!85321)))

(declare-fun lt!68121 () Bool)

(assert (=> d!40057 (= res!63049 (not lt!68121))))

(declare-fun lt!68123 () Bool)

(assert (=> d!40057 (= lt!68121 lt!68123)))

(declare-fun lt!68122 () Unit!4042)

(declare-fun e!85322 () Unit!4042)

(assert (=> d!40057 (= lt!68122 e!85322)))

(declare-fun c!24180 () Bool)

(assert (=> d!40057 (= c!24180 lt!68123)))

(assert (=> d!40057 (= lt!68123 (containsKey!173 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!40057 (= (contains!873 lt!67393 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68121)))

(declare-fun b!130825 () Bool)

(declare-fun lt!68124 () Unit!4042)

(assert (=> b!130825 (= e!85322 lt!68124)))

(assert (=> b!130825 (= lt!68124 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> b!130825 (isDefined!122 (getValueByKey!170 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130826 () Bool)

(declare-fun Unit!4099 () Unit!4042)

(assert (=> b!130826 (= e!85322 Unit!4099)))

(declare-fun b!130827 () Bool)

(assert (=> b!130827 (= e!85321 (isDefined!122 (getValueByKey!170 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!40057 c!24180) b!130825))

(assert (= (and d!40057 (not c!24180)) b!130826))

(assert (= (and d!40057 (not res!63049)) b!130827))

(declare-fun m!154577 () Bool)

(assert (=> d!40057 m!154577))

(declare-fun m!154579 () Bool)

(assert (=> b!130825 m!154579))

(assert (=> b!130825 m!152601))

(assert (=> b!130825 m!152601))

(declare-fun m!154581 () Bool)

(assert (=> b!130825 m!154581))

(assert (=> b!130827 m!152601))

(assert (=> b!130827 m!152601))

(assert (=> b!130827 m!154581))

(assert (=> d!39481 d!40057))

(declare-fun b!130828 () Bool)

(declare-fun e!85323 () Option!176)

(assert (=> b!130828 (= e!85323 (Some!175 (_2!1283 (h!2285 lt!67394))))))

(declare-fun b!130831 () Bool)

(declare-fun e!85324 () Option!176)

(assert (=> b!130831 (= e!85324 None!174)))

(declare-fun b!130830 () Bool)

(assert (=> b!130830 (= e!85324 (getValueByKey!170 (t!6076 lt!67394) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130829 () Bool)

(assert (=> b!130829 (= e!85323 e!85324)))

(declare-fun c!24182 () Bool)

(assert (=> b!130829 (= c!24182 (and ((_ is Cons!1681) lt!67394) (not (= (_1!1283 (h!2285 lt!67394)) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!40059 () Bool)

(declare-fun c!24181 () Bool)

(assert (=> d!40059 (= c!24181 (and ((_ is Cons!1681) lt!67394) (= (_1!1283 (h!2285 lt!67394)) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40059 (= (getValueByKey!170 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85323)))

(assert (= (and d!40059 c!24181) b!130828))

(assert (= (and d!40059 (not c!24181)) b!130829))

(assert (= (and b!130829 c!24182) b!130830))

(assert (= (and b!130829 (not c!24182)) b!130831))

(declare-fun m!154583 () Bool)

(assert (=> b!130830 m!154583))

(assert (=> d!39481 d!40059))

(declare-fun d!40061 () Bool)

(assert (=> d!40061 (= (getValueByKey!170 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!68125 () Unit!4042)

(assert (=> d!40061 (= lt!68125 (choose!802 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!85325 () Bool)

(assert (=> d!40061 e!85325))

(declare-fun res!63050 () Bool)

(assert (=> d!40061 (=> (not res!63050) (not e!85325))))

(assert (=> d!40061 (= res!63050 (isStrictlySorted!306 lt!67394))))

(assert (=> d!40061 (= (lemmaContainsTupThenGetReturnValue!85 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68125)))

(declare-fun b!130832 () Bool)

(declare-fun res!63051 () Bool)

(assert (=> b!130832 (=> (not res!63051) (not e!85325))))

(assert (=> b!130832 (= res!63051 (containsKey!173 lt!67394 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130833 () Bool)

(assert (=> b!130833 (= e!85325 (contains!875 lt!67394 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!40061 res!63050) b!130832))

(assert (= (and b!130832 res!63051) b!130833))

(assert (=> d!40061 m!152595))

(declare-fun m!154585 () Bool)

(assert (=> d!40061 m!154585))

(declare-fun m!154587 () Bool)

(assert (=> d!40061 m!154587))

(declare-fun m!154589 () Bool)

(assert (=> b!130832 m!154589))

(declare-fun m!154591 () Bool)

(assert (=> b!130833 m!154591))

(assert (=> d!39481 d!40061))

(declare-fun e!85326 () List!1685)

(declare-fun call!14227 () List!1685)

(declare-fun bm!14224 () Bool)

(declare-fun c!24184 () Bool)

(assert (=> bm!14224 (= call!14227 ($colon$colon!90 e!85326 (ite c!24184 (h!2285 (toList!837 lt!67277)) (tuple2!2545 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24186 () Bool)

(assert (=> bm!14224 (= c!24186 c!24184)))

(declare-fun b!130835 () Bool)

(assert (=> b!130835 (= e!85326 (insertStrictlySorted!88 (t!6076 (toList!837 lt!67277)) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130836 () Bool)

(declare-fun res!63053 () Bool)

(declare-fun e!85330 () Bool)

(assert (=> b!130836 (=> (not res!63053) (not e!85330))))

(declare-fun lt!68126 () List!1685)

(assert (=> b!130836 (= res!63053 (containsKey!173 lt!68126 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130837 () Bool)

(declare-fun c!24185 () Bool)

(assert (=> b!130837 (= c!24185 (and ((_ is Cons!1681) (toList!837 lt!67277)) (bvsgt (_1!1283 (h!2285 (toList!837 lt!67277))) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!85328 () List!1685)

(declare-fun e!85327 () List!1685)

(assert (=> b!130837 (= e!85328 e!85327)))

(declare-fun b!130834 () Bool)

(declare-fun c!24183 () Bool)

(assert (=> b!130834 (= e!85326 (ite c!24183 (t!6076 (toList!837 lt!67277)) (ite c!24185 (Cons!1681 (h!2285 (toList!837 lt!67277)) (t!6076 (toList!837 lt!67277))) Nil!1682)))))

(declare-fun d!40063 () Bool)

(assert (=> d!40063 e!85330))

(declare-fun res!63052 () Bool)

(assert (=> d!40063 (=> (not res!63052) (not e!85330))))

(assert (=> d!40063 (= res!63052 (isStrictlySorted!306 lt!68126))))

(declare-fun e!85329 () List!1685)

(assert (=> d!40063 (= lt!68126 e!85329)))

(assert (=> d!40063 (= c!24184 (and ((_ is Cons!1681) (toList!837 lt!67277)) (bvslt (_1!1283 (h!2285 (toList!837 lt!67277))) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40063 (isStrictlySorted!306 (toList!837 lt!67277))))

(assert (=> d!40063 (= (insertStrictlySorted!88 (toList!837 lt!67277) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68126)))

(declare-fun bm!14225 () Bool)

(declare-fun call!14228 () List!1685)

(declare-fun call!14229 () List!1685)

(assert (=> bm!14225 (= call!14228 call!14229)))

(declare-fun bm!14226 () Bool)

(assert (=> bm!14226 (= call!14229 call!14227)))

(declare-fun b!130838 () Bool)

(assert (=> b!130838 (= e!85329 e!85328)))

(assert (=> b!130838 (= c!24183 (and ((_ is Cons!1681) (toList!837 lt!67277)) (= (_1!1283 (h!2285 (toList!837 lt!67277))) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130839 () Bool)

(assert (=> b!130839 (= e!85330 (contains!875 lt!68126 (tuple2!2545 (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130840 () Bool)

(assert (=> b!130840 (= e!85328 call!14229)))

(declare-fun b!130841 () Bool)

(assert (=> b!130841 (= e!85327 call!14228)))

(declare-fun b!130842 () Bool)

(assert (=> b!130842 (= e!85329 call!14227)))

(declare-fun b!130843 () Bool)

(assert (=> b!130843 (= e!85327 call!14228)))

(assert (= (and d!40063 c!24184) b!130842))

(assert (= (and d!40063 (not c!24184)) b!130838))

(assert (= (and b!130838 c!24183) b!130840))

(assert (= (and b!130838 (not c!24183)) b!130837))

(assert (= (and b!130837 c!24185) b!130843))

(assert (= (and b!130837 (not c!24185)) b!130841))

(assert (= (or b!130843 b!130841) bm!14225))

(assert (= (or b!130840 bm!14225) bm!14226))

(assert (= (or b!130842 bm!14226) bm!14224))

(assert (= (and bm!14224 c!24186) b!130835))

(assert (= (and bm!14224 (not c!24186)) b!130834))

(assert (= (and d!40063 res!63052) b!130836))

(assert (= (and b!130836 res!63053) b!130839))

(declare-fun m!154593 () Bool)

(assert (=> bm!14224 m!154593))

(declare-fun m!154595 () Bool)

(assert (=> b!130835 m!154595))

(declare-fun m!154597 () Bool)

(assert (=> b!130836 m!154597))

(declare-fun m!154599 () Bool)

(assert (=> b!130839 m!154599))

(declare-fun m!154601 () Bool)

(assert (=> d!40063 m!154601))

(declare-fun m!154603 () Bool)

(assert (=> d!40063 m!154603))

(assert (=> d!39481 d!40063))

(assert (=> d!39521 d!39523))

(assert (=> d!39521 d!39525))

(declare-fun d!40065 () Bool)

(assert (=> d!40065 (isDefined!122 (getValueByKey!170 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!40065 true))

(declare-fun _$12!396 () Unit!4042)

(assert (=> d!40065 (= (choose!797 (toList!837 lt!67103) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) _$12!396)))

(declare-fun bs!5456 () Bool)

(assert (= bs!5456 d!40065))

(assert (=> bs!5456 m!152129))

(assert (=> bs!5456 m!152241))

(assert (=> bs!5456 m!152241))

(assert (=> bs!5456 m!152243))

(assert (=> d!39521 d!40065))

(declare-fun d!40067 () Bool)

(declare-fun res!63058 () Bool)

(declare-fun e!85335 () Bool)

(assert (=> d!40067 (=> res!63058 e!85335)))

(assert (=> d!40067 (= res!63058 (or ((_ is Nil!1682) (toList!837 lt!67103)) ((_ is Nil!1682) (t!6076 (toList!837 lt!67103)))))))

(assert (=> d!40067 (= (isStrictlySorted!306 (toList!837 lt!67103)) e!85335)))

(declare-fun b!130848 () Bool)

(declare-fun e!85336 () Bool)

(assert (=> b!130848 (= e!85335 e!85336)))

(declare-fun res!63059 () Bool)

(assert (=> b!130848 (=> (not res!63059) (not e!85336))))

(assert (=> b!130848 (= res!63059 (bvslt (_1!1283 (h!2285 (toList!837 lt!67103))) (_1!1283 (h!2285 (t!6076 (toList!837 lt!67103))))))))

(declare-fun b!130849 () Bool)

(assert (=> b!130849 (= e!85336 (isStrictlySorted!306 (t!6076 (toList!837 lt!67103))))))

(assert (= (and d!40067 (not res!63058)) b!130848))

(assert (= (and b!130848 res!63059) b!130849))

(declare-fun m!154605 () Bool)

(assert (=> b!130849 m!154605))

(assert (=> d!39521 d!40067))

(declare-fun d!40069 () Bool)

(declare-fun res!63060 () Bool)

(declare-fun e!85337 () Bool)

(assert (=> d!40069 (=> res!63060 e!85337)))

(assert (=> d!40069 (= res!63060 (and ((_ is Cons!1681) (toList!837 call!14061)) (= (_1!1283 (h!2285 (toList!837 call!14061))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(assert (=> d!40069 (= (containsKey!173 (toList!837 call!14061) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)) e!85337)))

(declare-fun b!130850 () Bool)

(declare-fun e!85338 () Bool)

(assert (=> b!130850 (= e!85337 e!85338)))

(declare-fun res!63061 () Bool)

(assert (=> b!130850 (=> (not res!63061) (not e!85338))))

(assert (=> b!130850 (= res!63061 (and (or (not ((_ is Cons!1681) (toList!837 call!14061))) (bvsle (_1!1283 (h!2285 (toList!837 call!14061))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))) ((_ is Cons!1681) (toList!837 call!14061)) (bvslt (_1!1283 (h!2285 (toList!837 call!14061))) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))))

(declare-fun b!130851 () Bool)

(assert (=> b!130851 (= e!85338 (containsKey!173 (t!6076 (toList!837 call!14061)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!40069 (not res!63060)) b!130850))

(assert (= (and b!130850 res!63061) b!130851))

(assert (=> b!130851 m!152129))

(declare-fun m!154607 () Bool)

(assert (=> b!130851 m!154607))

(assert (=> d!39557 d!40069))

(declare-fun b!130852 () Bool)

(declare-fun e!85339 () Option!176)

(assert (=> b!130852 (= e!85339 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67494)))))))

(declare-fun b!130855 () Bool)

(declare-fun e!85340 () Option!176)

(assert (=> b!130855 (= e!85340 None!174)))

(declare-fun b!130854 () Bool)

(assert (=> b!130854 (= e!85340 (getValueByKey!170 (t!6076 (toList!837 lt!67494)) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130853 () Bool)

(assert (=> b!130853 (= e!85339 e!85340)))

(declare-fun c!24188 () Bool)

(assert (=> b!130853 (= c!24188 (and ((_ is Cons!1681) (toList!837 lt!67494)) (not (= (_1!1283 (h!2285 (toList!837 lt!67494))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))))

(declare-fun c!24187 () Bool)

(declare-fun d!40071 () Bool)

(assert (=> d!40071 (= c!24187 (and ((_ is Cons!1681) (toList!837 lt!67494)) (= (_1!1283 (h!2285 (toList!837 lt!67494))) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(assert (=> d!40071 (= (getValueByKey!170 (toList!837 lt!67494) (_1!1283 (ite (or c!23875 c!23874) (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2682 (v!3160 (underlying!446 thiss!992)))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))) e!85339)))

(assert (= (and d!40071 c!24187) b!130852))

(assert (= (and d!40071 (not c!24187)) b!130853))

(assert (= (and b!130853 c!24188) b!130854))

(assert (= (and b!130853 (not c!24188)) b!130855))

(declare-fun m!154609 () Bool)

(assert (=> b!130854 m!154609))

(assert (=> b!130003 d!40071))

(assert (=> b!129920 d!39587))

(declare-fun d!40073 () Bool)

(assert (=> d!40073 (= (apply!113 lt!67293 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67293) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5457 () Bool)

(assert (= bs!5457 d!40073))

(assert (=> bs!5457 m!153499))

(assert (=> bs!5457 m!153499))

(declare-fun m!154611 () Bool)

(assert (=> bs!5457 m!154611))

(assert (=> b!129733 d!40073))

(declare-fun d!40075 () Bool)

(declare-fun e!85341 () Bool)

(assert (=> d!40075 e!85341))

(declare-fun res!63062 () Bool)

(assert (=> d!40075 (=> res!63062 e!85341)))

(declare-fun lt!68127 () Bool)

(assert (=> d!40075 (= res!63062 (not lt!68127))))

(declare-fun lt!68129 () Bool)

(assert (=> d!40075 (= lt!68127 lt!68129)))

(declare-fun lt!68128 () Unit!4042)

(declare-fun e!85342 () Unit!4042)

(assert (=> d!40075 (= lt!68128 e!85342)))

(declare-fun c!24189 () Bool)

(assert (=> d!40075 (= c!24189 lt!68129)))

(assert (=> d!40075 (= lt!68129 (containsKey!173 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> d!40075 (= (contains!873 lt!67602 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68127)))

(declare-fun b!130856 () Bool)

(declare-fun lt!68130 () Unit!4042)

(assert (=> b!130856 (= e!85342 lt!68130)))

(assert (=> b!130856 (= lt!68130 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(assert (=> b!130856 (isDefined!122 (getValueByKey!170 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130857 () Bool)

(declare-fun Unit!4100 () Unit!4042)

(assert (=> b!130857 (= e!85342 Unit!4100)))

(declare-fun b!130858 () Bool)

(assert (=> b!130858 (= e!85341 (isDefined!122 (getValueByKey!170 (toList!837 lt!67602) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!40075 c!24189) b!130856))

(assert (= (and d!40075 (not c!24189)) b!130857))

(assert (= (and d!40075 (not res!63062)) b!130858))

(declare-fun m!154613 () Bool)

(assert (=> d!40075 m!154613))

(declare-fun m!154615 () Bool)

(assert (=> b!130856 m!154615))

(assert (=> b!130856 m!152949))

(assert (=> b!130856 m!152949))

(declare-fun m!154617 () Bool)

(assert (=> b!130856 m!154617))

(assert (=> b!130858 m!152949))

(assert (=> b!130858 m!152949))

(assert (=> b!130858 m!154617))

(assert (=> d!39559 d!40075))

(declare-fun b!130859 () Bool)

(declare-fun e!85343 () Option!176)

(assert (=> b!130859 (= e!85343 (Some!175 (_2!1283 (h!2285 lt!67603))))))

(declare-fun b!130862 () Bool)

(declare-fun e!85344 () Option!176)

(assert (=> b!130862 (= e!85344 None!174)))

(declare-fun b!130861 () Bool)

(assert (=> b!130861 (= e!85344 (getValueByKey!170 (t!6076 lt!67603) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130860 () Bool)

(assert (=> b!130860 (= e!85343 e!85344)))

(declare-fun c!24191 () Bool)

(assert (=> b!130860 (= c!24191 (and ((_ is Cons!1681) lt!67603) (not (= (_1!1283 (h!2285 lt!67603)) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!40077 () Bool)

(declare-fun c!24190 () Bool)

(assert (=> d!40077 (= c!24190 (and ((_ is Cons!1681) lt!67603) (= (_1!1283 (h!2285 lt!67603)) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40077 (= (getValueByKey!170 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85343)))

(assert (= (and d!40077 c!24190) b!130859))

(assert (= (and d!40077 (not c!24190)) b!130860))

(assert (= (and b!130860 c!24191) b!130861))

(assert (= (and b!130860 (not c!24191)) b!130862))

(declare-fun m!154619 () Bool)

(assert (=> b!130861 m!154619))

(assert (=> d!39559 d!40077))

(declare-fun d!40079 () Bool)

(assert (=> d!40079 (= (getValueByKey!170 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun lt!68131 () Unit!4042)

(assert (=> d!40079 (= lt!68131 (choose!802 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun e!85345 () Bool)

(assert (=> d!40079 e!85345))

(declare-fun res!63063 () Bool)

(assert (=> d!40079 (=> (not res!63063) (not e!85345))))

(assert (=> d!40079 (= res!63063 (isStrictlySorted!306 lt!67603))))

(assert (=> d!40079 (= (lemmaContainsTupThenGetReturnValue!85 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68131)))

(declare-fun b!130863 () Bool)

(declare-fun res!63064 () Bool)

(assert (=> b!130863 (=> (not res!63064) (not e!85345))))

(assert (=> b!130863 (= res!63064 (containsKey!173 lt!67603 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130864 () Bool)

(assert (=> b!130864 (= e!85345 (contains!875 lt!67603 (tuple2!2545 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (= (and d!40079 res!63063) b!130863))

(assert (= (and b!130863 res!63064) b!130864))

(assert (=> d!40079 m!152943))

(declare-fun m!154621 () Bool)

(assert (=> d!40079 m!154621))

(declare-fun m!154623 () Bool)

(assert (=> d!40079 m!154623))

(declare-fun m!154625 () Bool)

(assert (=> b!130863 m!154625))

(declare-fun m!154627 () Bool)

(assert (=> b!130864 m!154627))

(assert (=> d!39559 d!40079))

(declare-fun c!24193 () Bool)

(declare-fun bm!14227 () Bool)

(declare-fun e!85346 () List!1685)

(declare-fun call!14230 () List!1685)

(assert (=> bm!14227 (= call!14230 ($colon$colon!90 e!85346 (ite c!24193 (h!2285 (toList!837 call!14080)) (tuple2!2545 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun c!24195 () Bool)

(assert (=> bm!14227 (= c!24195 c!24193)))

(declare-fun b!130866 () Bool)

(assert (=> b!130866 (= e!85346 (insertStrictlySorted!88 (t!6076 (toList!837 call!14080)) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130867 () Bool)

(declare-fun res!63066 () Bool)

(declare-fun e!85350 () Bool)

(assert (=> b!130867 (=> (not res!63066) (not e!85350))))

(declare-fun lt!68132 () List!1685)

(assert (=> b!130867 (= res!63066 (containsKey!173 lt!68132 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130868 () Bool)

(declare-fun c!24194 () Bool)

(assert (=> b!130868 (= c!24194 (and ((_ is Cons!1681) (toList!837 call!14080)) (bvsgt (_1!1283 (h!2285 (toList!837 call!14080))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun e!85348 () List!1685)

(declare-fun e!85347 () List!1685)

(assert (=> b!130868 (= e!85348 e!85347)))

(declare-fun b!130865 () Bool)

(declare-fun c!24192 () Bool)

(assert (=> b!130865 (= e!85346 (ite c!24192 (t!6076 (toList!837 call!14080)) (ite c!24194 (Cons!1681 (h!2285 (toList!837 call!14080)) (t!6076 (toList!837 call!14080))) Nil!1682)))))

(declare-fun d!40081 () Bool)

(assert (=> d!40081 e!85350))

(declare-fun res!63065 () Bool)

(assert (=> d!40081 (=> (not res!63065) (not e!85350))))

(assert (=> d!40081 (= res!63065 (isStrictlySorted!306 lt!68132))))

(declare-fun e!85349 () List!1685)

(assert (=> d!40081 (= lt!68132 e!85349)))

(assert (=> d!40081 (= c!24193 (and ((_ is Cons!1681) (toList!837 call!14080)) (bvslt (_1!1283 (h!2285 (toList!837 call!14080))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40081 (isStrictlySorted!306 (toList!837 call!14080))))

(assert (=> d!40081 (= (insertStrictlySorted!88 (toList!837 call!14080) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) lt!68132)))

(declare-fun bm!14228 () Bool)

(declare-fun call!14231 () List!1685)

(declare-fun call!14232 () List!1685)

(assert (=> bm!14228 (= call!14231 call!14232)))

(declare-fun bm!14229 () Bool)

(assert (=> bm!14229 (= call!14232 call!14230)))

(declare-fun b!130869 () Bool)

(assert (=> b!130869 (= e!85349 e!85348)))

(assert (=> b!130869 (= c!24192 (and ((_ is Cons!1681) (toList!837 call!14080)) (= (_1!1283 (h!2285 (toList!837 call!14080))) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130870 () Bool)

(assert (=> b!130870 (= e!85350 (contains!875 lt!68132 (tuple2!2545 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(declare-fun b!130871 () Bool)

(assert (=> b!130871 (= e!85348 call!14232)))

(declare-fun b!130872 () Bool)

(assert (=> b!130872 (= e!85347 call!14231)))

(declare-fun b!130873 () Bool)

(assert (=> b!130873 (= e!85349 call!14230)))

(declare-fun b!130874 () Bool)

(assert (=> b!130874 (= e!85347 call!14231)))

(assert (= (and d!40081 c!24193) b!130873))

(assert (= (and d!40081 (not c!24193)) b!130869))

(assert (= (and b!130869 c!24192) b!130871))

(assert (= (and b!130869 (not c!24192)) b!130868))

(assert (= (and b!130868 c!24194) b!130874))

(assert (= (and b!130868 (not c!24194)) b!130872))

(assert (= (or b!130874 b!130872) bm!14228))

(assert (= (or b!130871 bm!14228) bm!14229))

(assert (= (or b!130873 bm!14229) bm!14227))

(assert (= (and bm!14227 c!24195) b!130866))

(assert (= (and bm!14227 (not c!24195)) b!130865))

(assert (= (and d!40081 res!63065) b!130867))

(assert (= (and b!130867 res!63066) b!130870))

(declare-fun m!154629 () Bool)

(assert (=> bm!14227 m!154629))

(declare-fun m!154631 () Bool)

(assert (=> b!130866 m!154631))

(declare-fun m!154633 () Bool)

(assert (=> b!130867 m!154633))

(declare-fun m!154635 () Bool)

(assert (=> b!130870 m!154635))

(declare-fun m!154637 () Bool)

(assert (=> d!40081 m!154637))

(declare-fun m!154639 () Bool)

(assert (=> d!40081 m!154639))

(assert (=> d!39559 d!40081))

(declare-fun d!40083 () Bool)

(declare-fun e!85351 () Bool)

(assert (=> d!40083 e!85351))

(declare-fun res!63068 () Bool)

(assert (=> d!40083 (=> (not res!63068) (not e!85351))))

(declare-fun lt!68134 () ListLongMap!1643)

(assert (=> d!40083 (= res!63068 (contains!873 lt!68134 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(declare-fun lt!68135 () List!1685)

(assert (=> d!40083 (= lt!68134 (ListLongMap!1644 lt!68135))))

(declare-fun lt!68136 () Unit!4042)

(declare-fun lt!68133 () Unit!4042)

(assert (=> d!40083 (= lt!68136 lt!68133)))

(assert (=> d!40083 (= (getValueByKey!170 lt!68135 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40083 (= lt!68133 (lemmaContainsTupThenGetReturnValue!85 lt!68135 (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40083 (= lt!68135 (insertStrictlySorted!88 (toList!837 call!14113) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))))))

(assert (=> d!40083 (= (+!166 call!14113 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))) lt!68134)))

(declare-fun b!130875 () Bool)

(declare-fun res!63067 () Bool)

(assert (=> b!130875 (=> (not res!63067) (not e!85351))))

(assert (=> b!130875 (= res!63067 (= (getValueByKey!170 (toList!837 lt!68134) (_1!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16)))) (Some!175 (_2!1283 (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))))

(declare-fun b!130876 () Bool)

(assert (=> b!130876 (= e!85351 (contains!875 (toList!837 lt!68134) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2682 newMap!16))))))

(assert (= (and d!40083 res!63068) b!130875))

(assert (= (and b!130875 res!63067) b!130876))

(declare-fun m!154641 () Bool)

(assert (=> d!40083 m!154641))

(declare-fun m!154643 () Bool)

(assert (=> d!40083 m!154643))

(declare-fun m!154645 () Bool)

(assert (=> d!40083 m!154645))

(declare-fun m!154647 () Bool)

(assert (=> d!40083 m!154647))

(declare-fun m!154649 () Bool)

(assert (=> b!130875 m!154649))

(declare-fun m!154651 () Bool)

(assert (=> b!130876 m!154651))

(assert (=> b!129908 d!40083))

(declare-fun d!40085 () Bool)

(declare-fun e!85352 () Bool)

(assert (=> d!40085 e!85352))

(declare-fun res!63069 () Bool)

(assert (=> d!40085 (=> res!63069 e!85352)))

(declare-fun lt!68137 () Bool)

(assert (=> d!40085 (= res!63069 (not lt!68137))))

(declare-fun lt!68139 () Bool)

(assert (=> d!40085 (= lt!68137 lt!68139)))

(declare-fun lt!68138 () Unit!4042)

(declare-fun e!85353 () Unit!4042)

(assert (=> d!40085 (= lt!68138 e!85353)))

(declare-fun c!24196 () Bool)

(assert (=> d!40085 (= c!24196 lt!68139)))

(assert (=> d!40085 (= lt!68139 (containsKey!173 (toList!837 lt!67293) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!40085 (= (contains!873 lt!67293 (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)) lt!68137)))

(declare-fun b!130877 () Bool)

(declare-fun lt!68140 () Unit!4042)

(assert (=> b!130877 (= e!85353 lt!68140)))

(assert (=> b!130877 (= lt!68140 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67293) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!130877 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!130878 () Bool)

(declare-fun Unit!4101 () Unit!4042)

(assert (=> b!130878 (= e!85353 Unit!4101)))

(declare-fun b!130879 () Bool)

(assert (=> b!130879 (= e!85352 (isDefined!122 (getValueByKey!170 (toList!837 lt!67293) (select (arr!2234 (_keys!4564 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!40085 c!24196) b!130877))

(assert (= (and d!40085 (not c!24196)) b!130878))

(assert (= (and d!40085 (not res!63069)) b!130879))

(assert (=> d!40085 m!152369))

(declare-fun m!154653 () Bool)

(assert (=> d!40085 m!154653))

(assert (=> b!130877 m!152369))

(declare-fun m!154655 () Bool)

(assert (=> b!130877 m!154655))

(assert (=> b!130877 m!152369))

(assert (=> b!130877 m!153159))

(assert (=> b!130877 m!153159))

(declare-fun m!154657 () Bool)

(assert (=> b!130877 m!154657))

(assert (=> b!130879 m!152369))

(assert (=> b!130879 m!153159))

(assert (=> b!130879 m!153159))

(assert (=> b!130879 m!154657))

(assert (=> b!129751 d!40085))

(declare-fun d!40087 () Bool)

(assert (=> d!40087 (contains!873 (getCurrentListMap!515 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355))))

(declare-fun lt!68143 () Unit!4042)

(declare-fun choose!805 (array!4721 array!4723 (_ BitVec 32) (_ BitVec 32) V!3457 V!3457 (_ BitVec 64) (_ BitVec 32) Int) Unit!4042)

(assert (=> d!40087 (= lt!68143 (choose!805 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)))))

(assert (=> d!40087 (validMask!0 (mask!7101 newMap!16))))

(assert (=> d!40087 (= (lemmaArrayContainsKeyThenInListMap!39 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2823 newMap!16)) lt!68143)))

(declare-fun bs!5458 () Bool)

(assert (= bs!5458 d!40087))

(assert (=> bs!5458 m!152307))

(assert (=> bs!5458 m!152307))

(assert (=> bs!5458 m!152129))

(assert (=> bs!5458 m!152879))

(assert (=> bs!5458 m!152129))

(declare-fun m!154659 () Bool)

(assert (=> bs!5458 m!154659))

(assert (=> bs!5458 m!152389))

(assert (=> b!130060 d!40087))

(assert (=> b!130060 d!39977))

(assert (=> b!130060 d!39511))

(assert (=> d!39509 d!39473))

(declare-fun c!24201 () Bool)

(declare-fun call!14237 () Bool)

(declare-fun lt!68146 () SeekEntryResult!266)

(declare-fun bm!14234 () Bool)

(assert (=> bm!14234 (= call!14237 (inRange!0 (ite c!24201 (index!3221 lt!68146) (index!3224 lt!68146)) (mask!7101 newMap!16)))))

(declare-fun b!130896 () Bool)

(declare-fun e!85362 () Bool)

(declare-fun call!14238 () Bool)

(assert (=> b!130896 (= e!85362 (not call!14238))))

(declare-fun bm!14235 () Bool)

(assert (=> bm!14235 (= call!14238 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!130897 () Bool)

(declare-fun e!85364 () Bool)

(assert (=> b!130897 (= e!85364 ((_ is Undefined!266) lt!68146))))

(declare-fun b!130898 () Bool)

(declare-fun res!63079 () Bool)

(assert (=> b!130898 (=> (not res!63079) (not e!85362))))

(assert (=> b!130898 (= res!63079 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3224 lt!68146)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130899 () Bool)

(declare-fun e!85365 () Bool)

(declare-fun e!85363 () Bool)

(assert (=> b!130899 (= e!85365 e!85363)))

(declare-fun res!63080 () Bool)

(assert (=> b!130899 (= res!63080 call!14237)))

(assert (=> b!130899 (=> (not res!63080) (not e!85363))))

(declare-fun b!130900 () Bool)

(declare-fun res!63078 () Bool)

(assert (=> b!130900 (=> (not res!63078) (not e!85362))))

(assert (=> b!130900 (= res!63078 call!14237)))

(assert (=> b!130900 (= e!85364 e!85362)))

(declare-fun b!130901 () Bool)

(assert (=> b!130901 (= e!85363 (not call!14238))))

(declare-fun b!130902 () Bool)

(assert (=> b!130902 (= e!85365 e!85364)))

(declare-fun c!24202 () Bool)

(assert (=> b!130902 (= c!24202 ((_ is MissingVacant!266) lt!68146))))

(declare-fun d!40089 () Bool)

(assert (=> d!40089 e!85365))

(assert (=> d!40089 (= c!24201 ((_ is MissingZero!266) lt!68146))))

(assert (=> d!40089 (= lt!68146 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(assert (=> d!40089 true))

(declare-fun _$34!971 () Unit!4042)

(assert (=> d!40089 (= (choose!796 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)) _$34!971)))

(declare-fun b!130903 () Bool)

(declare-fun res!63081 () Bool)

(assert (=> b!130903 (= res!63081 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3221 lt!68146)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130903 (=> (not res!63081) (not e!85363))))

(assert (= (and d!40089 c!24201) b!130899))

(assert (= (and d!40089 (not c!24201)) b!130902))

(assert (= (and b!130899 res!63080) b!130903))

(assert (= (and b!130903 res!63081) b!130901))

(assert (= (and b!130902 c!24202) b!130900))

(assert (= (and b!130902 (not c!24202)) b!130897))

(assert (= (and b!130900 res!63078) b!130898))

(assert (= (and b!130898 res!63079) b!130896))

(assert (= (or b!130899 b!130900) bm!14234))

(assert (= (or b!130901 b!130896) bm!14235))

(assert (=> d!40089 m!152129))

(assert (=> d!40089 m!152245))

(assert (=> bm!14235 m!152129))

(assert (=> bm!14235 m!152247))

(declare-fun m!154661 () Bool)

(assert (=> b!130898 m!154661))

(declare-fun m!154663 () Bool)

(assert (=> bm!14234 m!154663))

(declare-fun m!154665 () Bool)

(assert (=> b!130903 m!154665))

(assert (=> d!39509 d!40089))

(assert (=> d!39509 d!39565))

(assert (=> b!129850 d!39587))

(declare-fun d!40091 () Bool)

(declare-fun res!63082 () Bool)

(declare-fun e!85366 () Bool)

(assert (=> d!40091 (=> res!63082 e!85366)))

(assert (=> d!40091 (= res!63082 (= (select (arr!2234 (_keys!4564 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (=> d!40091 (= (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!85366)))

(declare-fun b!130904 () Bool)

(declare-fun e!85367 () Bool)

(assert (=> b!130904 (= e!85366 e!85367)))

(declare-fun res!63083 () Bool)

(assert (=> b!130904 (=> (not res!63083) (not e!85367))))

(assert (=> b!130904 (= res!63083 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2500 (_keys!4564 newMap!16))))))

(declare-fun b!130905 () Bool)

(assert (=> b!130905 (= e!85367 (arrayContainsKey!0 (_keys!4564 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!40091 (not res!63082)) b!130904))

(assert (= (and b!130904 res!63083) b!130905))

(assert (=> d!40091 m!153287))

(assert (=> b!130905 m!152129))

(declare-fun m!154667 () Bool)

(assert (=> b!130905 m!154667))

(assert (=> b!129719 d!40091))

(declare-fun d!40093 () Bool)

(assert (=> d!40093 (= (apply!113 lt!67352 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1473 (getValueByKey!170 (toList!837 lt!67352) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5459 () Bool)

(assert (= bs!5459 d!40093))

(assert (=> bs!5459 m!152315))

(assert (=> bs!5459 m!153851))

(assert (=> bs!5459 m!153851))

(declare-fun m!154669 () Bool)

(assert (=> bs!5459 m!154669))

(assert (=> b!129791 d!40093))

(assert (=> b!129791 d!39451))

(assert (=> b!130064 d!39775))

(declare-fun d!40095 () Bool)

(declare-fun e!85368 () Bool)

(assert (=> d!40095 e!85368))

(declare-fun res!63085 () Bool)

(assert (=> d!40095 (=> (not res!63085) (not e!85368))))

(declare-fun lt!68148 () ListLongMap!1643)

(assert (=> d!40095 (= res!63085 (contains!873 lt!68148 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!68149 () List!1685)

(assert (=> d!40095 (= lt!68148 (ListLongMap!1644 lt!68149))))

(declare-fun lt!68150 () Unit!4042)

(declare-fun lt!68147 () Unit!4042)

(assert (=> d!40095 (= lt!68150 lt!68147)))

(assert (=> d!40095 (= (getValueByKey!170 lt!68149 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!40095 (= lt!68147 (lemmaContainsTupThenGetReturnValue!85 lt!68149 (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!40095 (= lt!68149 (insertStrictlySorted!88 (toList!837 (map!1389 newMap!16)) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!40095 (= (+!166 (map!1389 newMap!16) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!68148)))

(declare-fun b!130906 () Bool)

(declare-fun res!63084 () Bool)

(assert (=> b!130906 (=> (not res!63084) (not e!85368))))

(assert (=> b!130906 (= res!63084 (= (getValueByKey!170 (toList!837 lt!68148) (_1!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!175 (_2!1283 (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130907 () Bool)

(assert (=> b!130907 (= e!85368 (contains!875 (toList!837 lt!68148) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!40095 res!63085) b!130906))

(assert (= (and b!130906 res!63084) b!130907))

(declare-fun m!154671 () Bool)

(assert (=> d!40095 m!154671))

(declare-fun m!154673 () Bool)

(assert (=> d!40095 m!154673))

(declare-fun m!154675 () Bool)

(assert (=> d!40095 m!154675))

(declare-fun m!154677 () Bool)

(assert (=> d!40095 m!154677))

(declare-fun m!154679 () Bool)

(assert (=> b!130906 m!154679))

(declare-fun m!154681 () Bool)

(assert (=> b!130907 m!154681))

(assert (=> b!130064 d!40095))

(assert (=> b!130064 d!39441))

(declare-fun d!40097 () Bool)

(declare-fun e!85369 () Bool)

(assert (=> d!40097 e!85369))

(declare-fun res!63086 () Bool)

(assert (=> d!40097 (=> res!63086 e!85369)))

(declare-fun lt!68151 () Bool)

(assert (=> d!40097 (= res!63086 (not lt!68151))))

(declare-fun lt!68153 () Bool)

(assert (=> d!40097 (= lt!68151 lt!68153)))

(declare-fun lt!68152 () Unit!4042)

(declare-fun e!85370 () Unit!4042)

(assert (=> d!40097 (= lt!68152 e!85370)))

(declare-fun c!24203 () Bool)

(assert (=> d!40097 (= c!24203 lt!68153)))

(assert (=> d!40097 (= lt!68153 (containsKey!173 (toList!837 lt!67457) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!40097 (= (contains!873 lt!67457 #b0000000000000000000000000000000000000000000000000000000000000000) lt!68151)))

(declare-fun b!130908 () Bool)

(declare-fun lt!68154 () Unit!4042)

(assert (=> b!130908 (= e!85370 lt!68154)))

(assert (=> b!130908 (= lt!68154 (lemmaContainsKeyImpliesGetValueByKeyDefined!121 (toList!837 lt!67457) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!130908 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!130909 () Bool)

(declare-fun Unit!4102 () Unit!4042)

(assert (=> b!130909 (= e!85370 Unit!4102)))

(declare-fun b!130910 () Bool)

(assert (=> b!130910 (= e!85369 (isDefined!122 (getValueByKey!170 (toList!837 lt!67457) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!40097 c!24203) b!130908))

(assert (= (and d!40097 (not c!24203)) b!130909))

(assert (= (and d!40097 (not res!63086)) b!130910))

(declare-fun m!154683 () Bool)

(assert (=> d!40097 m!154683))

(declare-fun m!154685 () Bool)

(assert (=> b!130908 m!154685))

(assert (=> b!130908 m!153505))

(assert (=> b!130908 m!153505))

(declare-fun m!154687 () Bool)

(assert (=> b!130908 m!154687))

(assert (=> b!130910 m!153505))

(assert (=> b!130910 m!153505))

(assert (=> b!130910 m!154687))

(assert (=> bm!14120 d!40097))

(assert (=> d!39453 d!39473))

(declare-fun d!40099 () Bool)

(declare-fun e!85373 () Bool)

(assert (=> d!40099 e!85373))

(declare-fun res!63091 () Bool)

(assert (=> d!40099 (=> (not res!63091) (not e!85373))))

(declare-fun lt!68157 () SeekEntryResult!266)

(assert (=> d!40099 (= res!63091 ((_ is Found!266) lt!68157))))

(assert (=> d!40099 (= lt!68157 (seekEntryOrOpen!0 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (_keys!4564 newMap!16) (mask!7101 newMap!16)))))

(assert (=> d!40099 true))

(declare-fun _$33!111 () Unit!4042)

(assert (=> d!40099 (= (choose!793 (_keys!4564 newMap!16) (_values!2806 newMap!16) (mask!7101 newMap!16) (extraKeys!2596 newMap!16) (zeroValue!2682 newMap!16) (minValue!2682 newMap!16) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (defaultEntry!2823 newMap!16)) _$33!111)))

(declare-fun b!130915 () Bool)

(declare-fun res!63092 () Bool)

(assert (=> b!130915 (=> (not res!63092) (not e!85373))))

(assert (=> b!130915 (= res!63092 (inRange!0 (index!3222 lt!68157) (mask!7101 newMap!16)))))

(declare-fun b!130916 () Bool)

(assert (=> b!130916 (= e!85373 (= (select (arr!2234 (_keys!4564 newMap!16)) (index!3222 lt!68157)) (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355)))))

(assert (= (and d!40099 res!63091) b!130915))

(assert (= (and b!130915 res!63092) b!130916))

(assert (=> d!40099 m!152129))

(assert (=> d!40099 m!152245))

(declare-fun m!154689 () Bool)

(assert (=> b!130915 m!154689))

(declare-fun m!154691 () Bool)

(assert (=> b!130916 m!154691))

(assert (=> d!39453 d!40099))

(assert (=> d!39453 d!39565))

(declare-fun d!40101 () Bool)

(assert (=> d!40101 (= (apply!113 lt!67356 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1473 (getValueByKey!170 (toList!837 lt!67356) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5460 () Bool)

(assert (= bs!5460 d!40101))

(assert (=> bs!5460 m!153691))

(assert (=> bs!5460 m!153691))

(declare-fun m!154693 () Bool)

(assert (=> bs!5460 m!154693))

(assert (=> b!129804 d!40101))

(declare-fun d!40103 () Bool)

(declare-fun res!63096 () Bool)

(declare-fun e!85374 () Bool)

(assert (=> d!40103 (=> (not res!63096) (not e!85374))))

(assert (=> d!40103 (= res!63096 (validMask!0 (mask!7101 (v!3160 (underlying!446 thiss!992)))))))

(assert (=> d!40103 (= (simpleValid!89 (v!3160 (underlying!446 thiss!992))) e!85374)))

(declare-fun b!130920 () Bool)

(assert (=> b!130920 (= e!85374 (and (bvsge (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!588 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!130918 () Bool)

(declare-fun res!63094 () Bool)

(assert (=> b!130918 (=> (not res!63094) (not e!85374))))

(assert (=> b!130918 (= res!63094 (bvsge (size!2506 (v!3160 (underlying!446 thiss!992))) (_size!588 (v!3160 (underlying!446 thiss!992)))))))

(declare-fun b!130917 () Bool)

(declare-fun res!63093 () Bool)

(assert (=> b!130917 (=> (not res!63093) (not e!85374))))

(assert (=> b!130917 (= res!63093 (and (= (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992)))) (bvadd (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001)) (= (size!2500 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) (size!2501 (_values!2806 (v!3160 (underlying!446 thiss!992))))) (bvsge (_size!588 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!588 (v!3160 (underlying!446 thiss!992))) (bvadd (mask!7101 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!130919 () Bool)

(declare-fun res!63095 () Bool)

(assert (=> b!130919 (=> (not res!63095) (not e!85374))))

(assert (=> b!130919 (= res!63095 (= (size!2506 (v!3160 (underlying!446 thiss!992))) (bvadd (_size!588 (v!3160 (underlying!446 thiss!992))) (bvsdiv (bvadd (extraKeys!2596 (v!3160 (underlying!446 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!40103 res!63096) b!130917))

(assert (= (and b!130917 res!63093) b!130918))

(assert (= (and b!130918 res!63094) b!130919))

(assert (= (and b!130919 res!63095) b!130920))

(assert (=> d!40103 m!152157))

(declare-fun m!154695 () Bool)

(assert (=> b!130918 m!154695))

(assert (=> b!130919 m!154695))

(assert (=> d!39555 d!40103))

(declare-fun b!130921 () Bool)

(declare-fun e!85375 () Option!176)

(assert (=> b!130921 (= e!85375 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67331)))))))

(declare-fun b!130924 () Bool)

(declare-fun e!85376 () Option!176)

(assert (=> b!130924 (= e!85376 None!174)))

(declare-fun b!130923 () Bool)

(assert (=> b!130923 (= e!85376 (getValueByKey!170 (t!6076 (toList!837 lt!67331)) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!130922 () Bool)

(assert (=> b!130922 (= e!85375 e!85376)))

(declare-fun c!24205 () Bool)

(assert (=> b!130922 (= c!24205 (and ((_ is Cons!1681) (toList!837 lt!67331)) (not (= (_1!1283 (h!2285 (toList!837 lt!67331))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!40105 () Bool)

(declare-fun c!24204 () Bool)

(assert (=> d!40105 (= c!24204 (and ((_ is Cons!1681) (toList!837 lt!67331)) (= (_1!1283 (h!2285 (toList!837 lt!67331))) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!40105 (= (getValueByKey!170 (toList!837 lt!67331) (_1!1283 (ite c!23855 (ite c!23850 (tuple2!2545 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2545 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2545 (select (arr!2234 (_keys!4564 (v!3160 (underlying!446 thiss!992)))) from!355) (get!1469 (select (arr!2235 (_values!2806 (v!3160 (underlying!446 thiss!992)))) from!355) (dynLambda!421 (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!85375)))

(assert (= (and d!40105 c!24204) b!130921))

(assert (= (and d!40105 (not c!24204)) b!130922))

(assert (= (and b!130922 c!24205) b!130923))

(assert (= (and b!130922 (not c!24205)) b!130924))

(declare-fun m!154697 () Bool)

(assert (=> b!130923 m!154697))

(assert (=> b!129764 d!40105))

(declare-fun b!130925 () Bool)

(declare-fun e!85377 () Option!176)

(assert (=> b!130925 (= e!85377 (Some!175 (_2!1283 (h!2285 (toList!837 lt!67393)))))))

(declare-fun b!130928 () Bool)

(declare-fun e!85378 () Option!176)

(assert (=> b!130928 (= e!85378 None!174)))

(declare-fun b!130927 () Bool)

(assert (=> b!130927 (= e!85378 (getValueByKey!170 (t!6076 (toList!837 lt!67393)) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))

(declare-fun b!130926 () Bool)

(assert (=> b!130926 (= e!85377 e!85378)))

(declare-fun c!24207 () Bool)

(assert (=> b!130926 (= c!24207 (and ((_ is Cons!1681) (toList!837 lt!67393)) (not (= (_1!1283 (h!2285 (toList!837 lt!67393))) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))))))))

(declare-fun d!40107 () Bool)

(declare-fun c!24206 () Bool)

(assert (=> d!40107 (= c!24206 (and ((_ is Cons!1681) (toList!837 lt!67393)) (= (_1!1283 (h!2285 (toList!837 lt!67393))) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992))))))))))

(assert (=> d!40107 (= (getValueByKey!170 (toList!837 lt!67393) (_1!1283 (tuple2!2545 lt!67265 (minValue!2682 (v!3160 (underlying!446 thiss!992)))))) e!85377)))

(assert (= (and d!40107 c!24206) b!130925))

(assert (= (and d!40107 (not c!24206)) b!130926))

(assert (= (and b!130926 c!24207) b!130927))

(assert (= (and b!130926 (not c!24207)) b!130928))

(declare-fun m!154699 () Bool)

(assert (=> b!130927 m!154699))

(assert (=> b!129857 d!40107))

(declare-fun b!130930 () Bool)

(declare-fun e!85379 () Bool)

(assert (=> b!130930 (= e!85379 tp_is_empty!2857)))

(declare-fun b!130929 () Bool)

(declare-fun e!85380 () Bool)

(assert (=> b!130929 (= e!85380 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4583 () Bool)

(declare-fun mapRes!4583 () Bool)

(assert (=> mapIsEmpty!4583 mapRes!4583))

(declare-fun mapNonEmpty!4583 () Bool)

(declare-fun tp!11099 () Bool)

(assert (=> mapNonEmpty!4583 (= mapRes!4583 (and tp!11099 e!85380))))

(declare-fun mapKey!4583 () (_ BitVec 32))

(declare-fun mapRest!4583 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapValue!4583 () ValueCell!1085)

(assert (=> mapNonEmpty!4583 (= mapRest!4582 (store mapRest!4583 mapKey!4583 mapValue!4583))))

(declare-fun condMapEmpty!4583 () Bool)

(declare-fun mapDefault!4583 () ValueCell!1085)

(assert (=> mapNonEmpty!4582 (= condMapEmpty!4583 (= mapRest!4582 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4583)))))

(assert (=> mapNonEmpty!4582 (= tp!11098 (and e!85379 mapRes!4583))))

(assert (= (and mapNonEmpty!4582 condMapEmpty!4583) mapIsEmpty!4583))

(assert (= (and mapNonEmpty!4582 (not condMapEmpty!4583)) mapNonEmpty!4583))

(assert (= (and mapNonEmpty!4583 ((_ is ValueCellFull!1085) mapValue!4583)) b!130929))

(assert (= (and mapNonEmpty!4582 ((_ is ValueCellFull!1085) mapDefault!4583)) b!130930))

(declare-fun m!154701 () Bool)

(assert (=> mapNonEmpty!4583 m!154701))

(declare-fun b!130932 () Bool)

(declare-fun e!85381 () Bool)

(assert (=> b!130932 (= e!85381 tp_is_empty!2857)))

(declare-fun b!130931 () Bool)

(declare-fun e!85382 () Bool)

(assert (=> b!130931 (= e!85382 tp_is_empty!2857)))

(declare-fun mapIsEmpty!4584 () Bool)

(declare-fun mapRes!4584 () Bool)

(assert (=> mapIsEmpty!4584 mapRes!4584))

(declare-fun mapNonEmpty!4584 () Bool)

(declare-fun tp!11100 () Bool)

(assert (=> mapNonEmpty!4584 (= mapRes!4584 (and tp!11100 e!85382))))

(declare-fun mapKey!4584 () (_ BitVec 32))

(declare-fun mapRest!4584 () (Array (_ BitVec 32) ValueCell!1085))

(declare-fun mapValue!4584 () ValueCell!1085)

(assert (=> mapNonEmpty!4584 (= mapRest!4581 (store mapRest!4584 mapKey!4584 mapValue!4584))))

(declare-fun condMapEmpty!4584 () Bool)

(declare-fun mapDefault!4584 () ValueCell!1085)

(assert (=> mapNonEmpty!4581 (= condMapEmpty!4584 (= mapRest!4581 ((as const (Array (_ BitVec 32) ValueCell!1085)) mapDefault!4584)))))

(assert (=> mapNonEmpty!4581 (= tp!11097 (and e!85381 mapRes!4584))))

(assert (= (and mapNonEmpty!4581 condMapEmpty!4584) mapIsEmpty!4584))

(assert (= (and mapNonEmpty!4581 (not condMapEmpty!4584)) mapNonEmpty!4584))

(assert (= (and mapNonEmpty!4584 ((_ is ValueCellFull!1085) mapValue!4584)) b!130931))

(assert (= (and mapNonEmpty!4581 ((_ is ValueCellFull!1085) mapDefault!4584)) b!130932))

(declare-fun m!154703 () Bool)

(assert (=> mapNonEmpty!4584 m!154703))

(declare-fun b_lambda!5819 () Bool)

(assert (= b_lambda!5797 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5819)))

(declare-fun b_lambda!5821 () Bool)

(assert (= b_lambda!5817 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5821)))

(declare-fun b_lambda!5823 () Bool)

(assert (= b_lambda!5791 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5823)))

(declare-fun b_lambda!5825 () Bool)

(assert (= b_lambda!5811 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5825)))

(declare-fun b_lambda!5827 () Bool)

(assert (= b_lambda!5793 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5827)))

(declare-fun b_lambda!5829 () Bool)

(assert (= b_lambda!5789 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5829)))

(declare-fun b_lambda!5831 () Bool)

(assert (= b_lambda!5799 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5831)))

(declare-fun b_lambda!5833 () Bool)

(assert (= b_lambda!5813 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5833)))

(declare-fun b_lambda!5835 () Bool)

(assert (= b_lambda!5787 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5835)))

(declare-fun b_lambda!5837 () Bool)

(assert (= b_lambda!5809 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5837)))

(declare-fun b_lambda!5839 () Bool)

(assert (= b_lambda!5795 (or (and b!129373 b_free!2881) (and b!129382 b_free!2883 (= (defaultEntry!2823 newMap!16) (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))))) b_lambda!5839)))

(declare-fun b_lambda!5841 () Bool)

(assert (= b_lambda!5803 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5841)))

(declare-fun b_lambda!5843 () Bool)

(assert (= b_lambda!5801 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5843)))

(declare-fun b_lambda!5845 () Bool)

(assert (= b_lambda!5807 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5845)))

(declare-fun b_lambda!5847 () Bool)

(assert (= b_lambda!5815 (or (and b!129373 b_free!2881 (= (defaultEntry!2823 (v!3160 (underlying!446 thiss!992))) (defaultEntry!2823 newMap!16))) (and b!129382 b_free!2883) b_lambda!5847)))

(check-sat (not b!130459) (not b_lambda!5845) (not b!130343) (not b!130582) (not bm!14175) (not b!130592) (not b!130114) (not b!130460) (not b_lambda!5781) (not b!130164) (not b!130587) (not b!130369) (not b!130915) (not b!130335) (not b!130345) (not d!39871) (not b!130446) (not b!130720) (not b!130250) (not d!39901) (not d!40061) (not b!130249) (not b!130704) (not bm!14173) (not d!39737) (not b!130314) (not b!130638) (not d!39945) (not d!40005) (not b!130766) (not b!130427) (not d!39607) (not b!130566) (not b_next!2883) (not b!130189) (not d!40031) (not b!130590) (not bm!14169) (not b!130224) (not b!130537) (not bm!14168) (not b!130315) b_and!8109 (not d!40039) (not b!130489) (not b!130527) (not d!39841) (not b!130234) (not d!40043) (not b!130406) (not d!40007) (not b!130463) (not d!40079) (not d!39599) (not b!130475) (not b!130736) (not b!130613) (not b!130153) (not b!130390) (not d!39673) (not d!39853) (not b!130653) (not d!39891) (not b!130800) (not b!130292) (not b!130560) (not d!39957) (not d!39941) (not b!130245) (not b!130294) (not d!39829) (not b!130875) (not b!130167) (not b!130905) (not b!130717) (not b!130570) (not b!130549) (not d!39985) (not d!39775) (not d!39771) (not d!39709) (not b!130450) (not b!130906) (not b!130839) (not d!40089) (not d!39731) (not d!39743) (not b!130419) (not d!39817) (not b!130332) (not d!39851) (not b!130918) (not d!39729) (not bm!14217) (not d!39961) (not b!130081) (not b!130420) (not b_lambda!5835) (not b!130634) (not b!130667) (not d!39947) (not b!130311) (not b!130149) (not b!130532) (not b!130740) (not d!39609) (not b!130603) (not d!39887) (not b!130195) (not b!130529) (not d!39795) (not b!130473) (not b!130477) (not b!130428) (not b!130811) (not d!40101) (not b!130354) (not d!40073) (not b!130324) (not d!39975) (not b!130174) (not bm!14203) (not d!39655) (not b!130798) (not b!130331) (not d!39649) (not b!130255) (not b!130163) (not b!130118) (not b!130861) (not b!130129) (not b!130559) (not b!130182) (not bm!14198) (not bm!14197) (not d!39943) (not b!130084) (not b!130186) (not bm!14235) (not b!130519) (not d!40057) (not b!130776) (not b!130510) (not b!130184) (not d!40093) (not d!40055) (not b!130675) (not b_lambda!5823) (not b!130509) (not b!130161) (not b!130703) (not b_lambda!5779) (not b!130398) (not b!130445) (not d!39595) (not b!130301) (not d!39971) (not b_next!2881) (not b!130589) (not d!39781) (not b!130879) (not d!39811) (not d!39951) (not b!130870) (not b!130190) (not b!130530) (not d!39797) (not d!39993) (not d!39667) (not d!40019) (not b!130513) (not b!130136) (not b!130858) (not d!39757) (not b!130596) (not d!39875) (not b!130326) (not b!130141) (not b!130318) (not bm!14176) (not d!39959) (not d!39645) (not d!39915) (not b!130192) (not b!130181) (not b!130469) (not bm!14165) (not b!130179) (not d!39621) (not b!130793) (not d!39767) (not b!130910) (not d!39909) (not b!130478) (not d!39991) (not b!130268) (not b!130528) (not b!130402) (not d!39671) (not d!39935) (not b!130101) (not b!130621) (not d!39855) (not bm!14183) (not b!130097) b_and!8111 (not d!39739) (not b!130086) (not bm!14202) (not b!130584) (not b!130462) (not b!130632) (not b!130225) (not b!130441) (not bm!14160) (not b!130919) (not b!130788) (not d!39721) (not b!130661) (not bm!14187) (not b!130252) (not d!39921) (not d!39859) (not bm!14211) (not mapNonEmpty!4584) (not b!130303) (not bm!14190) (not d!39987) (not b!130863) (not b!130689) (not d!40001) (not b!130308) (not b!130396) (not b!130593) (not bm!14155) (not d!39633) (not b_lambda!5839) (not d!39705) (not d!39803) (not d!39669) (not b!130722) (not b!130375) (not d!39949) (not bm!14224) (not b!130364) (not b!130804) (not bm!14162) (not d!39813) (not d!39591) (not b!130866) (not b!130235) (not d!39865) (not b!130483) (not bm!14184) (not d!39823) (not b!130610) (not b!130525) (not b!130630) (not b!130854) (not b!130708) (not bm!14141) (not b!130801) (not b!130287) (not b!130171) (not b!130813) (not b!130201) (not bm!14234) (not b!130724) (not bm!14221) (not b!130673) (not bm!14220) (not d!39809) (not d!39701) (not b!130523) (not b!130448) (not b!130507) (not b!130786) (not b!130449) (not b!130175) (not b!130374) (not bm!14213) (not b_lambda!5833) (not b!130455) (not d!39939) (not b!130188) (not b!130806) (not b_lambda!5843) (not b!130716) (not b!130297) (not d!39575) (not d!39665) (not b!130713) (not bm!14148) (not d!40095) tp_is_empty!2857 (not b_lambda!5825) (not b!130568) (not b!130430) (not d!40103) (not b!130293) (not b!130490) (not b!130522) (not b_lambda!5827) (not b!130372) (not bm!14192) (not b_lambda!5777) (not b!130791) (not d!40003) (not bm!14207) (not b!130376) (not b!130358) (not d!40053) (not b!130465) (not b_lambda!5805) (not b!130135) (not b!130541) (not d!39883) (not b!130422) (not b!130563) (not bm!14194) (not b!130849) (not b!130539) (not b!130640) (not d!40083) (not b!130338) (not b_lambda!5841) (not d!39929) (not b!130631) (not b!130573) (not b!130643) (not d!39793) (not d!40063) (not d!39835) (not d!40017) (not b!130399) (not d!39831) (not bm!14193) (not d!39933) (not b!130117) (not d!39727) (not b!130927) (not b!130480) (not b!130329) (not b!130547) (not b!130649) (not b!130521) (not d!39825) (not d!40099) (not b!130302) (not b!130238) (not b!130368) (not b!130334) (not d!39603) (not b!130079) (not d!39691) (not d!39873) (not b_lambda!5821) (not b!130156) (not b!130431) (not d!39569) (not b!130158) (not b!130321) (not b!130820) (not d!39653) (not b!130795) (not b!130264) (not d!39679) (not d!39877) (not d!39819) (not b!130646) (not b!130404) (not b!130356) (not bm!14143) (not b!130781) (not b!130456) (not b!130770) (not b!130111) (not b!130366) (not b!130546) (not b!130908) (not b!130650) (not bm!14214) (not b!130658) (not d!40041) (not b!130145) (not d!39913) (not bm!14216) (not b!130579) (not d!39889) (not b!130553) (not b!130714) (not b!130808) (not d!39751) (not b!130425) (not d!39893) (not b!130626) (not b!130779) (not d!40065) (not d!39953) (not b!130090) (not b!130380) (not b!130735) (not b!130856) (not d!39657) (not d!40049) (not b!130609) (not bm!14191) (not b!130864) (not b!130783) (not bm!14159) (not b!130827) (not b!130565) (not d!39977) (not b!130452) (not d!39897) (not b!130674) (not d!39839) (not d!40021) (not b!130100) (not b_lambda!5761) (not d!39601) (not b!130410) (not d!39717) (not b_lambda!5785) (not d!39683) (not d!39605) (not b!130606) (not b!130139) (not d!39905) (not b!130629) (not bm!14147) (not b!130816) (not b!130312) (not b!130110) (not b!130679) (not d!40035) (not b!130387) (not d!39583) (not d!39861) (not b!130176) (not d!39707) (not b!130349) (not b!130835) (not d!39735) (not d!39703) (not b!130138) (not d!39879) (not d!39805) (not b!130624) (not b!130233) (not d!39745) (not b!130299) (not b!130269) (not d!39597) (not b!130686) (not b!130106) (not d!39593) (not b!130671) (not bm!14172) (not d!39783) (not d!39749) (not b!130512) (not b!130501) (not b!130665) (not d!39973) (not d!39791) (not d!39869) (not b!130706) (not b!130363) (not b!130265) (not b_lambda!5847) (not d!39967) (not b!130439) (not b!130246) (not d!40075) (not d!40047) (not bm!14179) (not d!40081) (not b!130516) (not d!40085) (not d!39867) (not b!130607) (not b!130486) (not b!130533) (not b!130825) (not b_lambda!5783) (not b!130494) (not d!39719) (not b!130836) (not b!130738) (not b!130470) (not b!130300) (not d!39579) (not b!130434) (not b!130183) (not b!130691) (not b!130833) (not d!39697) (not d!39955) (not b!130472) (not b!130575) (not b_lambda!5775) (not b!130116) (not d!39863) (not d!39847) (not d!39857) (not b!130923) (not bm!14166) (not d!39663) (not b!130323) (not b!130628) (not d!39773) (not b!130876) (not bm!14204) (not b!130611) (not d!39695) (not d!39969) (not d!39761) (not d!39589) (not b!130388) (not b!130228) (not b!130608) (not b!130405) (not b!130457) (not b!130087) (not d!39789) (not bm!14186) (not b!130443) (not d!39647) (not b!130774) (not d!39713) (not b!130393) (not d!39821) (not bm!14140) (not d!40087) (not b!130202) (not b!130142) (not b!130313) (not d!39571) (not d!39799) (not d!39711) (not b!130867) (not d!39815) (not b!130248) (not d!39661) (not b!130651) (not d!39741) (not b!130814) (not b!130099) (not bm!14212) (not b!130295) (not b_lambda!5829) (not bm!14161) (not d!39753) (not d!39979) (not b!130247) (not b!130668) (not b!130187) (not b!130562) (not b!130107) (not b_lambda!5837) (not b!130239) (not d!39931) (not d!39637) (not b!130122) (not b!130693) (not b!130627) (not d!40097) (not bm!14227) (not d!39699) (not bm!14210) (not b!130482) (not d!39807) (not d!39895) (not b!130558) (not b!130851) (not b!130622) (not d!39715) (not b!130796) (not b!130322) (not b!130471) (not b!130351) (not bm!14144) (not d!39937) (not b!130723) (not b!130832) (not b!130180) (not b!130447) (not b!130907) (not b!130544) (not d!39725) (not b!130272) (not b!130514) (not b_lambda!5831) (not d!39629) (not b!130467) (not b!130877) (not b!130257) (not b!130805) (not b!130647) (not b!130108) (not b!130550) (not d!39827) (not bm!14180) (not b!130395) (not b!130830) (not d!39567) (not bm!14158) (not b!130488) (not b!130347) (not b!130618) (not b!130778) (not b_lambda!5757) (not b_lambda!5819) (not b!130536) (not b!130803) (not b!130260) (not b!130417) (not d!39999) (not b!130155) (not b!130360) (not d!39769) (not b!130442) (not bm!14206) (not d!39899) (not b!130365) (not b!130511) (not b!130503) (not b!130104) (not d!39693) (not b!130728) (not b!130692) (not b!130531) (not d!39833) (not d!39919) (not b!130237) (not bm!14201) (not d!39785) (not b!130316) (not b!130817) (not b!130616) (not b!130797) (not mapNonEmpty!4583) (not d!39779) (not d!39801) (not d!40023))
(check-sat b_and!8109 b_and!8111 (not b_next!2881) (not b_next!2883))
