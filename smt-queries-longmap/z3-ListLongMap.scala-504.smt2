; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11800 () Bool)

(assert start!11800)

(declare-fun b!99092 () Bool)

(declare-fun b_free!2441 () Bool)

(declare-fun b_next!2441 () Bool)

(assert (=> b!99092 (= b_free!2441 (not b_next!2441))))

(declare-fun tp!9615 () Bool)

(declare-fun b_and!6095 () Bool)

(assert (=> b!99092 (= tp!9615 b_and!6095)))

(declare-fun b!99086 () Bool)

(declare-fun b_free!2443 () Bool)

(declare-fun b_next!2443 () Bool)

(assert (=> b!99086 (= b_free!2443 (not b_next!2443))))

(declare-fun tp!9614 () Bool)

(declare-fun b_and!6097 () Bool)

(assert (=> b!99086 (= tp!9614 b_and!6097)))

(declare-fun b!99077 () Bool)

(declare-fun res!49801 () Bool)

(declare-fun e!64580 () Bool)

(assert (=> b!99077 (=> (not res!49801) (not e!64580))))

(declare-datatypes ((V!3163 0))(
  ( (V!3164 (val!1363 Int)) )
))
(declare-datatypes ((array!4255 0))(
  ( (array!4256 (arr!2021 (Array (_ BitVec 32) (_ BitVec 64))) (size!2272 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!975 0))(
  ( (ValueCellFull!975 (v!2815 V!3163)) (EmptyCell!975) )
))
(declare-datatypes ((array!4257 0))(
  ( (array!4258 (arr!2022 (Array (_ BitVec 32) ValueCell!975)) (size!2273 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!858 0))(
  ( (LongMapFixedSize!859 (defaultEntry!2502 Int) (mask!6609 (_ BitVec 32)) (extraKeys!2319 (_ BitVec 32)) (zeroValue!2383 V!3163) (minValue!2383 V!3163) (_size!478 (_ BitVec 32)) (_keys!4196 array!4255) (_values!2485 array!4257) (_vacant!478 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!858)

(declare-datatypes ((Cell!658 0))(
  ( (Cell!659 (v!2816 LongMapFixedSize!858)) )
))
(declare-datatypes ((LongMap!658 0))(
  ( (LongMap!659 (underlying!340 Cell!658)) )
))
(declare-fun thiss!992 () LongMap!658)

(assert (=> b!99077 (= res!49801 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6609 newMap!16)) (_size!478 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99078 () Bool)

(declare-fun e!64571 () Bool)

(assert (=> b!99078 (= e!64571 (and (= (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6609 (v!2816 (underlying!340 thiss!992))))) (= (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992))))) (bvsge (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun b!99079 () Bool)

(declare-fun e!64585 () Bool)

(declare-fun e!64570 () Bool)

(declare-fun mapRes!3771 () Bool)

(assert (=> b!99079 (= e!64585 (and e!64570 mapRes!3771))))

(declare-fun condMapEmpty!3772 () Bool)

(declare-fun mapDefault!3772 () ValueCell!975)

(assert (=> b!99079 (= condMapEmpty!3772 (= (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3772)))))

(declare-fun mapIsEmpty!3771 () Bool)

(declare-fun mapRes!3772 () Bool)

(assert (=> mapIsEmpty!3771 mapRes!3772))

(declare-fun b!99080 () Bool)

(declare-fun e!64574 () Bool)

(assert (=> b!99080 (= e!64580 e!64574)))

(declare-fun res!49806 () Bool)

(assert (=> b!99080 (=> (not res!49806) (not e!64574))))

(declare-datatypes ((tuple2!2346 0))(
  ( (tuple2!2347 (_1!1184 (_ BitVec 64)) (_2!1184 V!3163)) )
))
(declare-datatypes ((List!1583 0))(
  ( (Nil!1580) (Cons!1579 (h!2174 tuple2!2346) (t!5557 List!1583)) )
))
(declare-datatypes ((ListLongMap!1539 0))(
  ( (ListLongMap!1540 (toList!785 List!1583)) )
))
(declare-fun lt!49878 () ListLongMap!1539)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lt!49877 () ListLongMap!1539)

(assert (=> b!99080 (= res!49806 (and (= lt!49877 lt!49878) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1259 (LongMapFixedSize!858) ListLongMap!1539)

(assert (=> b!99080 (= lt!49878 (map!1259 newMap!16))))

(declare-fun getCurrentListMap!476 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) ListLongMap!1539)

(assert (=> b!99080 (= lt!49877 (getCurrentListMap!476 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99081 () Bool)

(declare-fun e!64573 () Bool)

(declare-fun e!64577 () Bool)

(assert (=> b!99081 (= e!64573 e!64577)))

(declare-fun b!99082 () Bool)

(declare-fun tp_is_empty!2637 () Bool)

(assert (=> b!99082 (= e!64570 tp_is_empty!2637)))

(declare-fun res!49803 () Bool)

(assert (=> start!11800 (=> (not res!49803) (not e!64580))))

(declare-fun valid!388 (LongMap!658) Bool)

(assert (=> start!11800 (= res!49803 (valid!388 thiss!992))))

(assert (=> start!11800 e!64580))

(assert (=> start!11800 e!64573))

(assert (=> start!11800 true))

(declare-fun e!64581 () Bool)

(assert (=> start!11800 e!64581))

(declare-fun b!99083 () Bool)

(declare-fun e!64575 () Bool)

(assert (=> b!99083 (= e!64577 e!64575)))

(declare-fun mapIsEmpty!3772 () Bool)

(assert (=> mapIsEmpty!3772 mapRes!3771))

(declare-fun b!99084 () Bool)

(declare-fun res!49805 () Bool)

(assert (=> b!99084 (=> (not res!49805) (not e!64571))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!99084 (= res!49805 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99085 () Bool)

(declare-datatypes ((Unit!2999 0))(
  ( (Unit!3000) )
))
(declare-fun e!64579 () Unit!2999)

(declare-fun Unit!3001 () Unit!2999)

(assert (=> b!99085 (= e!64579 Unit!3001)))

(declare-fun e!64578 () Bool)

(declare-fun array_inv!1259 (array!4255) Bool)

(declare-fun array_inv!1260 (array!4257) Bool)

(assert (=> b!99086 (= e!64581 (and tp!9614 tp_is_empty!2637 (array_inv!1259 (_keys!4196 newMap!16)) (array_inv!1260 (_values!2485 newMap!16)) e!64578))))

(declare-fun b!99087 () Bool)

(assert (=> b!99087 (= e!64574 e!64571)))

(declare-fun res!49804 () Bool)

(assert (=> b!99087 (=> (not res!49804) (not e!64571))))

(declare-datatypes ((tuple2!2348 0))(
  ( (tuple2!2349 (_1!1185 Bool) (_2!1185 LongMapFixedSize!858)) )
))
(declare-fun lt!49873 () tuple2!2348)

(assert (=> b!99087 (= res!49804 (and (_1!1185 lt!49873) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!49874 () Unit!2999)

(assert (=> b!99087 (= lt!49874 e!64579)))

(declare-fun c!16886 () Bool)

(declare-fun contains!804 (ListLongMap!1539 (_ BitVec 64)) Bool)

(assert (=> b!99087 (= c!16886 (contains!804 lt!49878 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun update!142 (LongMapFixedSize!858 (_ BitVec 64) V!3163) tuple2!2348)

(declare-fun get!1287 (ValueCell!975 V!3163) V!3163)

(declare-fun dynLambda!370 (Int (_ BitVec 64)) V!3163)

(assert (=> b!99087 (= lt!49873 (update!142 newMap!16 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99088 () Bool)

(declare-fun e!64576 () Bool)

(assert (=> b!99088 (= e!64576 tp_is_empty!2637)))

(declare-fun b!99089 () Bool)

(declare-fun Unit!3002 () Unit!2999)

(assert (=> b!99089 (= e!64579 Unit!3002)))

(declare-fun lt!49875 () Unit!2999)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!90 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!2999)

(assert (=> b!99089 (= lt!49875 (lemmaListMapContainsThenArrayContainsFrom!90 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4255 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!99089 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!49876 () Unit!2999)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4255 (_ BitVec 32) (_ BitVec 32)) Unit!2999)

(assert (=> b!99089 (= lt!49876 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1584 0))(
  ( (Nil!1581) (Cons!1580 (h!2175 (_ BitVec 64)) (t!5558 List!1584)) )
))
(declare-fun arrayNoDuplicates!0 (array!4255 (_ BitVec 32) List!1584) Bool)

(assert (=> b!99089 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) from!355 Nil!1581)))

(declare-fun lt!49879 () Unit!2999)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4255 (_ BitVec 32) (_ BitVec 64) List!1584) Unit!2999)

(assert (=> b!99089 (= lt!49879 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581)))))

(assert (=> b!99089 false))

(declare-fun b!99090 () Bool)

(declare-fun res!49802 () Bool)

(assert (=> b!99090 (=> (not res!49802) (not e!64580))))

(assert (=> b!99090 (= res!49802 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!99091 () Bool)

(declare-fun e!64572 () Bool)

(assert (=> b!99091 (= e!64578 (and e!64572 mapRes!3772))))

(declare-fun condMapEmpty!3771 () Bool)

(declare-fun mapDefault!3771 () ValueCell!975)

(assert (=> b!99091 (= condMapEmpty!3771 (= (arr!2022 (_values!2485 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3771)))))

(declare-fun mapNonEmpty!3771 () Bool)

(declare-fun tp!9613 () Bool)

(assert (=> mapNonEmpty!3771 (= mapRes!3771 (and tp!9613 e!64576))))

(declare-fun mapKey!3771 () (_ BitVec 32))

(declare-fun mapRest!3772 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapValue!3771 () ValueCell!975)

(assert (=> mapNonEmpty!3771 (= (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (store mapRest!3772 mapKey!3771 mapValue!3771))))

(assert (=> b!99092 (= e!64575 (and tp!9615 tp_is_empty!2637 (array_inv!1259 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (array_inv!1260 (_values!2485 (v!2816 (underlying!340 thiss!992)))) e!64585))))

(declare-fun b!99093 () Bool)

(declare-fun e!64584 () Bool)

(assert (=> b!99093 (= e!64584 tp_is_empty!2637)))

(declare-fun mapNonEmpty!3772 () Bool)

(declare-fun tp!9616 () Bool)

(assert (=> mapNonEmpty!3772 (= mapRes!3772 (and tp!9616 e!64584))))

(declare-fun mapKey!3772 () (_ BitVec 32))

(declare-fun mapValue!3772 () ValueCell!975)

(declare-fun mapRest!3771 () (Array (_ BitVec 32) ValueCell!975))

(assert (=> mapNonEmpty!3772 (= (arr!2022 (_values!2485 newMap!16)) (store mapRest!3771 mapKey!3772 mapValue!3772))))

(declare-fun b!99094 () Bool)

(assert (=> b!99094 (= e!64572 tp_is_empty!2637)))

(declare-fun b!99095 () Bool)

(declare-fun res!49807 () Bool)

(assert (=> b!99095 (=> (not res!49807) (not e!64580))))

(declare-fun valid!389 (LongMapFixedSize!858) Bool)

(assert (=> b!99095 (= res!49807 (valid!389 newMap!16))))

(assert (= (and start!11800 res!49803) b!99090))

(assert (= (and b!99090 res!49802) b!99095))

(assert (= (and b!99095 res!49807) b!99077))

(assert (= (and b!99077 res!49801) b!99080))

(assert (= (and b!99080 res!49806) b!99087))

(assert (= (and b!99087 c!16886) b!99089))

(assert (= (and b!99087 (not c!16886)) b!99085))

(assert (= (and b!99087 res!49804) b!99084))

(assert (= (and b!99084 res!49805) b!99078))

(assert (= (and b!99079 condMapEmpty!3772) mapIsEmpty!3772))

(assert (= (and b!99079 (not condMapEmpty!3772)) mapNonEmpty!3771))

(get-info :version)

(assert (= (and mapNonEmpty!3771 ((_ is ValueCellFull!975) mapValue!3771)) b!99088))

(assert (= (and b!99079 ((_ is ValueCellFull!975) mapDefault!3772)) b!99082))

(assert (= b!99092 b!99079))

(assert (= b!99083 b!99092))

(assert (= b!99081 b!99083))

(assert (= start!11800 b!99081))

(assert (= (and b!99091 condMapEmpty!3771) mapIsEmpty!3771))

(assert (= (and b!99091 (not condMapEmpty!3771)) mapNonEmpty!3772))

(assert (= (and mapNonEmpty!3772 ((_ is ValueCellFull!975) mapValue!3772)) b!99093))

(assert (= (and b!99091 ((_ is ValueCellFull!975) mapDefault!3771)) b!99094))

(assert (= b!99086 b!99091))

(assert (= start!11800 b!99086))

(declare-fun b_lambda!4427 () Bool)

(assert (=> (not b_lambda!4427) (not b!99087)))

(declare-fun t!5554 () Bool)

(declare-fun tb!1941 () Bool)

(assert (=> (and b!99092 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) t!5554) tb!1941))

(declare-fun result!3289 () Bool)

(assert (=> tb!1941 (= result!3289 tp_is_empty!2637)))

(assert (=> b!99087 t!5554))

(declare-fun b_and!6099 () Bool)

(assert (= b_and!6095 (and (=> t!5554 result!3289) b_and!6099)))

(declare-fun t!5556 () Bool)

(declare-fun tb!1943 () Bool)

(assert (=> (and b!99086 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) t!5556) tb!1943))

(declare-fun result!3293 () Bool)

(assert (= result!3293 result!3289))

(assert (=> b!99087 t!5556))

(declare-fun b_and!6101 () Bool)

(assert (= b_and!6097 (and (=> t!5556 result!3293) b_and!6101)))

(declare-fun m!109133 () Bool)

(assert (=> b!99080 m!109133))

(declare-fun m!109135 () Bool)

(assert (=> b!99080 m!109135))

(declare-fun m!109137 () Bool)

(assert (=> b!99080 m!109137))

(declare-fun m!109139 () Bool)

(assert (=> mapNonEmpty!3772 m!109139))

(declare-fun m!109141 () Bool)

(assert (=> b!99092 m!109141))

(declare-fun m!109143 () Bool)

(assert (=> b!99092 m!109143))

(declare-fun m!109145 () Bool)

(assert (=> start!11800 m!109145))

(declare-fun m!109147 () Bool)

(assert (=> b!99086 m!109147))

(declare-fun m!109149 () Bool)

(assert (=> b!99086 m!109149))

(declare-fun m!109151 () Bool)

(assert (=> mapNonEmpty!3771 m!109151))

(declare-fun m!109153 () Bool)

(assert (=> b!99095 m!109153))

(declare-fun m!109155 () Bool)

(assert (=> b!99087 m!109155))

(declare-fun m!109157 () Bool)

(assert (=> b!99087 m!109157))

(declare-fun m!109159 () Bool)

(assert (=> b!99087 m!109159))

(assert (=> b!99087 m!109133))

(assert (=> b!99087 m!109133))

(assert (=> b!99087 m!109159))

(declare-fun m!109161 () Bool)

(assert (=> b!99087 m!109161))

(assert (=> b!99087 m!109155))

(assert (=> b!99087 m!109133))

(declare-fun m!109163 () Bool)

(assert (=> b!99087 m!109163))

(assert (=> b!99087 m!109157))

(declare-fun m!109165 () Bool)

(assert (=> b!99084 m!109165))

(declare-fun m!109167 () Bool)

(assert (=> b!99089 m!109167))

(declare-fun m!109169 () Bool)

(assert (=> b!99089 m!109169))

(assert (=> b!99089 m!109133))

(declare-fun m!109171 () Bool)

(assert (=> b!99089 m!109171))

(assert (=> b!99089 m!109133))

(assert (=> b!99089 m!109133))

(declare-fun m!109173 () Bool)

(assert (=> b!99089 m!109173))

(assert (=> b!99089 m!109133))

(declare-fun m!109175 () Bool)

(assert (=> b!99089 m!109175))

(check-sat (not b!99089) (not b!99095) (not mapNonEmpty!3771) b_and!6099 (not b!99087) (not b_lambda!4427) (not mapNonEmpty!3772) (not b!99080) (not b!99086) (not start!11800) tp_is_empty!2637 (not b!99092) b_and!6101 (not b_next!2441) (not b!99084) (not b_next!2443))
(check-sat b_and!6099 b_and!6101 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun b_lambda!4431 () Bool)

(assert (= b_lambda!4427 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4431)))

(check-sat (not b!99089) (not mapNonEmpty!3771) b_and!6099 (not b!99087) (not mapNonEmpty!3772) (not b!99080) (not b!99086) (not start!11800) tp_is_empty!2637 (not b!99092) b_and!6101 (not b_next!2441) (not b_lambda!4431) (not b!99095) (not b!99084) (not b_next!2443))
(check-sat b_and!6099 b_and!6101 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26675 () Bool)

(assert (=> d!26675 (= (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992)))) (and (or (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000001111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000011111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000001111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000011111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000001111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000011111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000001111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000011111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000001111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000011111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000001111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000011111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000001111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000011111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000001111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000011111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000111111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00001111111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00011111111111111111111111111111) (= (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!99084 d!26675))

(declare-fun d!26677 () Bool)

(assert (=> d!26677 (= (map!1259 newMap!16) (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun bs!4106 () Bool)

(assert (= bs!4106 d!26677))

(declare-fun m!109221 () Bool)

(assert (=> bs!4106 m!109221))

(assert (=> b!99080 d!26677))

(declare-fun b!99199 () Bool)

(declare-fun e!64665 () ListLongMap!1539)

(declare-fun call!10134 () ListLongMap!1539)

(assert (=> b!99199 (= e!64665 call!10134)))

(declare-fun bm!10126 () Bool)

(declare-fun call!10130 () Bool)

(declare-fun lt!49957 () ListLongMap!1539)

(assert (=> bm!10126 (= call!10130 (contains!804 lt!49957 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99200 () Bool)

(declare-fun e!64661 () Bool)

(declare-fun e!64667 () Bool)

(assert (=> b!99200 (= e!64661 e!64667)))

(declare-fun res!49848 () Bool)

(assert (=> b!99200 (= res!49848 call!10130)))

(assert (=> b!99200 (=> (not res!49848) (not e!64667))))

(declare-fun b!99201 () Bool)

(assert (=> b!99201 (= e!64661 (not call!10130))))

(declare-fun b!99203 () Bool)

(declare-fun e!64669 () Unit!2999)

(declare-fun Unit!3003 () Unit!2999)

(assert (=> b!99203 (= e!64669 Unit!3003)))

(declare-fun b!99204 () Bool)

(declare-fun e!64660 () ListLongMap!1539)

(assert (=> b!99204 (= e!64660 call!10134)))

(declare-fun b!99205 () Bool)

(declare-fun lt!49945 () Unit!2999)

(assert (=> b!99205 (= e!64669 lt!49945)))

(declare-fun lt!49965 () ListLongMap!1539)

(declare-fun getCurrentListMapNoExtraKeys!101 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) ListLongMap!1539)

(assert (=> b!99205 (= lt!49965 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun lt!49947 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49947 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49946 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49946 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49951 () Unit!2999)

(declare-fun addStillContains!69 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> b!99205 (= lt!49951 (addStillContains!69 lt!49965 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49946))))

(declare-fun +!136 (ListLongMap!1539 tuple2!2346) ListLongMap!1539)

(assert (=> b!99205 (contains!804 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49946)))

(declare-fun lt!49954 () Unit!2999)

(assert (=> b!99205 (= lt!49954 lt!49951)))

(declare-fun lt!49955 () ListLongMap!1539)

(assert (=> b!99205 (= lt!49955 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun lt!49960 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49960 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49962 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49962 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49956 () Unit!2999)

(declare-fun addApplyDifferent!69 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> b!99205 (= lt!49956 (addApplyDifferent!69 lt!49955 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49962))))

(declare-fun apply!93 (ListLongMap!1539 (_ BitVec 64)) V!3163)

(assert (=> b!99205 (= (apply!93 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49962) (apply!93 lt!49955 lt!49962))))

(declare-fun lt!49950 () Unit!2999)

(assert (=> b!99205 (= lt!49950 lt!49956)))

(declare-fun lt!49952 () ListLongMap!1539)

(assert (=> b!99205 (= lt!49952 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun lt!49963 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49963 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49949 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49949 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49948 () Unit!2999)

(assert (=> b!99205 (= lt!49948 (addApplyDifferent!69 lt!49952 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49949))))

(assert (=> b!99205 (= (apply!93 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49949) (apply!93 lt!49952 lt!49949))))

(declare-fun lt!49964 () Unit!2999)

(assert (=> b!99205 (= lt!49964 lt!49948)))

(declare-fun lt!49953 () ListLongMap!1539)

(assert (=> b!99205 (= lt!49953 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun lt!49961 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49961 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49966 () (_ BitVec 64))

(assert (=> b!99205 (= lt!49966 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99205 (= lt!49945 (addApplyDifferent!69 lt!49953 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49966))))

(assert (=> b!99205 (= (apply!93 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49966) (apply!93 lt!49953 lt!49966))))

(declare-fun b!99206 () Bool)

(declare-fun res!49855 () Bool)

(declare-fun e!64672 () Bool)

(assert (=> b!99206 (=> (not res!49855) (not e!64672))))

(declare-fun e!64668 () Bool)

(assert (=> b!99206 (= res!49855 e!64668)))

(declare-fun res!49852 () Bool)

(assert (=> b!99206 (=> res!49852 e!64668)))

(declare-fun e!64663 () Bool)

(assert (=> b!99206 (= res!49852 (not e!64663))))

(declare-fun res!49847 () Bool)

(assert (=> b!99206 (=> (not res!49847) (not e!64663))))

(assert (=> b!99206 (= res!49847 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99207 () Bool)

(declare-fun e!64671 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!99207 (= e!64671 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99208 () Bool)

(declare-fun e!64662 () Bool)

(declare-fun call!10131 () Bool)

(assert (=> b!99208 (= e!64662 (not call!10131))))

(declare-fun bm!10127 () Bool)

(declare-fun call!10133 () ListLongMap!1539)

(declare-fun call!10132 () ListLongMap!1539)

(assert (=> bm!10127 (= call!10133 call!10132)))

(declare-fun call!10135 () ListLongMap!1539)

(declare-fun bm!10128 () Bool)

(declare-fun c!16903 () Bool)

(declare-fun c!16907 () Bool)

(declare-fun call!10129 () ListLongMap!1539)

(assert (=> bm!10128 (= call!10135 (+!136 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!99209 () Bool)

(declare-fun e!64670 () Bool)

(assert (=> b!99209 (= e!64670 (= (apply!93 lt!49957 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99210 () Bool)

(declare-fun c!16902 () Bool)

(assert (=> b!99210 (= c!16902 (and (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99210 (= e!64660 e!64665)))

(declare-fun b!99211 () Bool)

(declare-fun e!64666 () ListLongMap!1539)

(assert (=> b!99211 (= e!64666 e!64660)))

(assert (=> b!99211 (= c!16907 (and (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10129 () Bool)

(assert (=> bm!10129 (= call!10131 (contains!804 lt!49957 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99212 () Bool)

(assert (=> b!99212 (= e!64672 e!64662)))

(declare-fun c!16906 () Bool)

(assert (=> b!99212 (= c!16906 (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99213 () Bool)

(assert (=> b!99213 (= e!64663 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99214 () Bool)

(declare-fun res!49850 () Bool)

(assert (=> b!99214 (=> (not res!49850) (not e!64672))))

(assert (=> b!99214 (= res!49850 e!64661)))

(declare-fun c!16905 () Bool)

(assert (=> b!99214 (= c!16905 (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10130 () Bool)

(assert (=> bm!10130 (= call!10129 call!10133)))

(declare-fun b!99215 () Bool)

(assert (=> b!99215 (= e!64667 (= (apply!93 lt!49957 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun bm!10131 () Bool)

(assert (=> bm!10131 (= call!10132 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun d!26679 () Bool)

(assert (=> d!26679 e!64672))

(declare-fun res!49853 () Bool)

(assert (=> d!26679 (=> (not res!49853) (not e!64672))))

(assert (=> d!26679 (= res!49853 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun lt!49959 () ListLongMap!1539)

(assert (=> d!26679 (= lt!49957 lt!49959)))

(declare-fun lt!49958 () Unit!2999)

(assert (=> d!26679 (= lt!49958 e!64669)))

(declare-fun c!16904 () Bool)

(assert (=> d!26679 (= c!16904 e!64671)))

(declare-fun res!49849 () Bool)

(assert (=> d!26679 (=> (not res!49849) (not e!64671))))

(assert (=> d!26679 (= res!49849 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26679 (= lt!49959 e!64666)))

(assert (=> d!26679 (= c!16903 (and (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26679 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992))))))

(assert (=> d!26679 (= (getCurrentListMap!476 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) lt!49957)))

(declare-fun b!99202 () Bool)

(declare-fun e!64664 () Bool)

(assert (=> b!99202 (= e!64664 (= (apply!93 lt!49957 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99202 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> b!99202 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99216 () Bool)

(assert (=> b!99216 (= e!64666 (+!136 call!10135 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun bm!10132 () Bool)

(assert (=> bm!10132 (= call!10134 call!10135)))

(declare-fun b!99217 () Bool)

(assert (=> b!99217 (= e!64665 call!10129)))

(declare-fun b!99218 () Bool)

(assert (=> b!99218 (= e!64662 e!64670)))

(declare-fun res!49851 () Bool)

(assert (=> b!99218 (= res!49851 call!10131)))

(assert (=> b!99218 (=> (not res!49851) (not e!64670))))

(declare-fun b!99219 () Bool)

(assert (=> b!99219 (= e!64668 e!64664)))

(declare-fun res!49854 () Bool)

(assert (=> b!99219 (=> (not res!49854) (not e!64664))))

(assert (=> b!99219 (= res!49854 (contains!804 lt!49957 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99219 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26679 c!16903) b!99216))

(assert (= (and d!26679 (not c!16903)) b!99211))

(assert (= (and b!99211 c!16907) b!99204))

(assert (= (and b!99211 (not c!16907)) b!99210))

(assert (= (and b!99210 c!16902) b!99199))

(assert (= (and b!99210 (not c!16902)) b!99217))

(assert (= (or b!99199 b!99217) bm!10130))

(assert (= (or b!99204 bm!10130) bm!10127))

(assert (= (or b!99204 b!99199) bm!10132))

(assert (= (or b!99216 bm!10127) bm!10131))

(assert (= (or b!99216 bm!10132) bm!10128))

(assert (= (and d!26679 res!49849) b!99207))

(assert (= (and d!26679 c!16904) b!99205))

(assert (= (and d!26679 (not c!16904)) b!99203))

(assert (= (and d!26679 res!49853) b!99206))

(assert (= (and b!99206 res!49847) b!99213))

(assert (= (and b!99206 (not res!49852)) b!99219))

(assert (= (and b!99219 res!49854) b!99202))

(assert (= (and b!99206 res!49855) b!99214))

(assert (= (and b!99214 c!16905) b!99200))

(assert (= (and b!99214 (not c!16905)) b!99201))

(assert (= (and b!99200 res!49848) b!99215))

(assert (= (or b!99200 b!99201) bm!10126))

(assert (= (and b!99214 res!49850) b!99212))

(assert (= (and b!99212 c!16906) b!99218))

(assert (= (and b!99212 (not c!16906)) b!99208))

(assert (= (and b!99218 res!49851) b!99209))

(assert (= (or b!99218 b!99208) bm!10129))

(declare-fun b_lambda!4433 () Bool)

(assert (=> (not b_lambda!4433) (not b!99202)))

(assert (=> b!99202 t!5554))

(declare-fun b_and!6111 () Bool)

(assert (= b_and!6099 (and (=> t!5554 result!3289) b_and!6111)))

(assert (=> b!99202 t!5556))

(declare-fun b_and!6113 () Bool)

(assert (= b_and!6101 (and (=> t!5556 result!3293) b_and!6113)))

(declare-fun m!109223 () Bool)

(assert (=> b!99202 m!109223))

(declare-fun m!109225 () Bool)

(assert (=> b!99202 m!109225))

(assert (=> b!99202 m!109157))

(assert (=> b!99202 m!109225))

(assert (=> b!99202 m!109157))

(declare-fun m!109227 () Bool)

(assert (=> b!99202 m!109227))

(assert (=> b!99202 m!109223))

(declare-fun m!109229 () Bool)

(assert (=> b!99202 m!109229))

(declare-fun m!109231 () Bool)

(assert (=> b!99215 m!109231))

(declare-fun m!109233 () Bool)

(assert (=> bm!10131 m!109233))

(assert (=> b!99213 m!109223))

(assert (=> b!99213 m!109223))

(declare-fun m!109235 () Bool)

(assert (=> b!99213 m!109235))

(assert (=> b!99207 m!109223))

(assert (=> b!99207 m!109223))

(assert (=> b!99207 m!109235))

(assert (=> d!26679 m!109165))

(declare-fun m!109237 () Bool)

(assert (=> bm!10128 m!109237))

(declare-fun m!109239 () Bool)

(assert (=> b!99209 m!109239))

(assert (=> b!99219 m!109223))

(assert (=> b!99219 m!109223))

(declare-fun m!109241 () Bool)

(assert (=> b!99219 m!109241))

(declare-fun m!109243 () Bool)

(assert (=> bm!10126 m!109243))

(assert (=> b!99205 m!109223))

(declare-fun m!109245 () Bool)

(assert (=> b!99205 m!109245))

(declare-fun m!109247 () Bool)

(assert (=> b!99205 m!109247))

(declare-fun m!109249 () Bool)

(assert (=> b!99205 m!109249))

(declare-fun m!109251 () Bool)

(assert (=> b!99205 m!109251))

(declare-fun m!109253 () Bool)

(assert (=> b!99205 m!109253))

(declare-fun m!109255 () Bool)

(assert (=> b!99205 m!109255))

(declare-fun m!109257 () Bool)

(assert (=> b!99205 m!109257))

(declare-fun m!109259 () Bool)

(assert (=> b!99205 m!109259))

(declare-fun m!109261 () Bool)

(assert (=> b!99205 m!109261))

(declare-fun m!109263 () Bool)

(assert (=> b!99205 m!109263))

(assert (=> b!99205 m!109261))

(declare-fun m!109265 () Bool)

(assert (=> b!99205 m!109265))

(declare-fun m!109267 () Bool)

(assert (=> b!99205 m!109267))

(assert (=> b!99205 m!109255))

(declare-fun m!109269 () Bool)

(assert (=> b!99205 m!109269))

(declare-fun m!109271 () Bool)

(assert (=> b!99205 m!109271))

(assert (=> b!99205 m!109233))

(assert (=> b!99205 m!109267))

(declare-fun m!109273 () Bool)

(assert (=> b!99205 m!109273))

(assert (=> b!99205 m!109245))

(declare-fun m!109275 () Bool)

(assert (=> b!99216 m!109275))

(declare-fun m!109277 () Bool)

(assert (=> bm!10129 m!109277))

(assert (=> b!99080 d!26679))

(declare-fun d!26681 () Bool)

(assert (=> d!26681 (not (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49969 () Unit!2999)

(declare-fun choose!68 (array!4255 (_ BitVec 32) (_ BitVec 64) List!1584) Unit!2999)

(assert (=> d!26681 (= lt!49969 (choose!68 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581)))))

(assert (=> d!26681 (bvslt (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26681 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581)) lt!49969)))

(declare-fun bs!4107 () Bool)

(assert (= bs!4107 d!26681))

(assert (=> bs!4107 m!109133))

(assert (=> bs!4107 m!109173))

(assert (=> bs!4107 m!109133))

(declare-fun m!109279 () Bool)

(assert (=> bs!4107 m!109279))

(assert (=> b!99089 d!26681))

(declare-fun d!26683 () Bool)

(assert (=> d!26683 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) from!355 Nil!1581)))

(declare-fun lt!49972 () Unit!2999)

(declare-fun choose!39 (array!4255 (_ BitVec 32) (_ BitVec 32)) Unit!2999)

(assert (=> d!26683 (= lt!49972 (choose!39 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!26683 (bvslt (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26683 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 from!355) lt!49972)))

(declare-fun bs!4108 () Bool)

(assert (= bs!4108 d!26683))

(assert (=> bs!4108 m!109169))

(declare-fun m!109281 () Bool)

(assert (=> bs!4108 m!109281))

(assert (=> b!99089 d!26683))

(declare-fun d!26685 () Bool)

(declare-fun res!49860 () Bool)

(declare-fun e!64677 () Bool)

(assert (=> d!26685 (=> res!49860 e!64677)))

(assert (=> d!26685 (= res!49860 (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26685 (= (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!64677)))

(declare-fun b!99224 () Bool)

(declare-fun e!64678 () Bool)

(assert (=> b!99224 (= e!64677 e!64678)))

(declare-fun res!49861 () Bool)

(assert (=> b!99224 (=> (not res!49861) (not e!64678))))

(assert (=> b!99224 (= res!49861 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99225 () Bool)

(assert (=> b!99225 (= e!64678 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26685 (not res!49860)) b!99224))

(assert (= (and b!99224 res!49861) b!99225))

(assert (=> d!26685 m!109223))

(assert (=> b!99225 m!109133))

(declare-fun m!109283 () Bool)

(assert (=> b!99225 m!109283))

(assert (=> b!99089 d!26685))

(declare-fun d!26687 () Bool)

(declare-fun e!64681 () Bool)

(assert (=> d!26687 e!64681))

(declare-fun c!16910 () Bool)

(assert (=> d!26687 (= c!16910 (and (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!49975 () Unit!2999)

(declare-fun choose!601 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!2999)

(assert (=> d!26687 (= lt!49975 (choose!601 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(assert (=> d!26687 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992))))))

(assert (=> d!26687 (= (lemmaListMapContainsThenArrayContainsFrom!90 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) lt!49975)))

(declare-fun b!99230 () Bool)

(assert (=> b!99230 (= e!64681 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99231 () Bool)

(assert (=> b!99231 (= e!64681 (ite (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26687 c!16910) b!99230))

(assert (= (and d!26687 (not c!16910)) b!99231))

(assert (=> d!26687 m!109133))

(declare-fun m!109285 () Bool)

(assert (=> d!26687 m!109285))

(assert (=> d!26687 m!109165))

(assert (=> b!99230 m!109133))

(assert (=> b!99230 m!109173))

(assert (=> b!99089 d!26687))

(declare-fun b!99242 () Bool)

(declare-fun e!64692 () Bool)

(declare-fun contains!805 (List!1584 (_ BitVec 64)) Bool)

(assert (=> b!99242 (= e!64692 (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99244 () Bool)

(declare-fun e!64693 () Bool)

(declare-fun call!10138 () Bool)

(assert (=> b!99244 (= e!64693 call!10138)))

(declare-fun b!99245 () Bool)

(assert (=> b!99245 (= e!64693 call!10138)))

(declare-fun d!26689 () Bool)

(declare-fun res!49868 () Bool)

(declare-fun e!64691 () Bool)

(assert (=> d!26689 (=> res!49868 e!64691)))

(assert (=> d!26689 (= res!49868 (bvsge from!355 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26689 (= (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) from!355 Nil!1581) e!64691)))

(declare-fun b!99243 () Bool)

(declare-fun e!64690 () Bool)

(assert (=> b!99243 (= e!64691 e!64690)))

(declare-fun res!49869 () Bool)

(assert (=> b!99243 (=> (not res!49869) (not e!64690))))

(assert (=> b!99243 (= res!49869 (not e!64692))))

(declare-fun res!49870 () Bool)

(assert (=> b!99243 (=> (not res!49870) (not e!64692))))

(assert (=> b!99243 (= res!49870 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99246 () Bool)

(assert (=> b!99246 (= e!64690 e!64693)))

(declare-fun c!16913 () Bool)

(assert (=> b!99246 (= c!16913 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun bm!10135 () Bool)

(assert (=> bm!10135 (= call!10138 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)))))

(assert (= (and d!26689 (not res!49868)) b!99243))

(assert (= (and b!99243 res!49870) b!99242))

(assert (= (and b!99243 res!49869) b!99246))

(assert (= (and b!99246 c!16913) b!99244))

(assert (= (and b!99246 (not c!16913)) b!99245))

(assert (= (or b!99244 b!99245) bm!10135))

(assert (=> b!99242 m!109133))

(assert (=> b!99242 m!109133))

(declare-fun m!109287 () Bool)

(assert (=> b!99242 m!109287))

(assert (=> b!99243 m!109133))

(assert (=> b!99243 m!109133))

(declare-fun m!109289 () Bool)

(assert (=> b!99243 m!109289))

(assert (=> b!99246 m!109133))

(assert (=> b!99246 m!109133))

(assert (=> b!99246 m!109289))

(assert (=> bm!10135 m!109133))

(declare-fun m!109291 () Bool)

(assert (=> bm!10135 m!109291))

(assert (=> b!99089 d!26689))

(declare-fun d!26691 () Bool)

(assert (=> d!26691 (= (array_inv!1259 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvsge (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!99092 d!26691))

(declare-fun d!26693 () Bool)

(assert (=> d!26693 (= (array_inv!1260 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvsge (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!99092 d!26693))

(declare-fun d!26695 () Bool)

(assert (=> d!26695 (= (valid!388 thiss!992) (valid!389 (v!2816 (underlying!340 thiss!992))))))

(declare-fun bs!4109 () Bool)

(assert (= bs!4109 d!26695))

(declare-fun m!109293 () Bool)

(assert (=> bs!4109 m!109293))

(assert (=> start!11800 d!26695))

(declare-fun d!26697 () Bool)

(declare-fun e!64698 () Bool)

(assert (=> d!26697 e!64698))

(declare-fun res!49873 () Bool)

(assert (=> d!26697 (=> res!49873 e!64698)))

(declare-fun lt!49987 () Bool)

(assert (=> d!26697 (= res!49873 (not lt!49987))))

(declare-fun lt!49985 () Bool)

(assert (=> d!26697 (= lt!49987 lt!49985)))

(declare-fun lt!49984 () Unit!2999)

(declare-fun e!64699 () Unit!2999)

(assert (=> d!26697 (= lt!49984 e!64699)))

(declare-fun c!16916 () Bool)

(assert (=> d!26697 (= c!16916 lt!49985)))

(declare-fun containsKey!155 (List!1583 (_ BitVec 64)) Bool)

(assert (=> d!26697 (= lt!49985 (containsKey!155 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26697 (= (contains!804 lt!49878 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!49987)))

(declare-fun b!99253 () Bool)

(declare-fun lt!49986 () Unit!2999)

(assert (=> b!99253 (= e!64699 lt!49986)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!103 (List!1583 (_ BitVec 64)) Unit!2999)

(assert (=> b!99253 (= lt!49986 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-datatypes ((Option!157 0))(
  ( (Some!156 (v!2820 V!3163)) (None!155) )
))
(declare-fun isDefined!104 (Option!157) Bool)

(declare-fun getValueByKey!151 (List!1583 (_ BitVec 64)) Option!157)

(assert (=> b!99253 (isDefined!104 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99254 () Bool)

(declare-fun Unit!3004 () Unit!2999)

(assert (=> b!99254 (= e!64699 Unit!3004)))

(declare-fun b!99255 () Bool)

(assert (=> b!99255 (= e!64698 (isDefined!104 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (= (and d!26697 c!16916) b!99253))

(assert (= (and d!26697 (not c!16916)) b!99254))

(assert (= (and d!26697 (not res!49873)) b!99255))

(assert (=> d!26697 m!109133))

(declare-fun m!109295 () Bool)

(assert (=> d!26697 m!109295))

(assert (=> b!99253 m!109133))

(declare-fun m!109297 () Bool)

(assert (=> b!99253 m!109297))

(assert (=> b!99253 m!109133))

(declare-fun m!109299 () Bool)

(assert (=> b!99253 m!109299))

(assert (=> b!99253 m!109299))

(declare-fun m!109301 () Bool)

(assert (=> b!99253 m!109301))

(assert (=> b!99255 m!109133))

(assert (=> b!99255 m!109299))

(assert (=> b!99255 m!109299))

(assert (=> b!99255 m!109301))

(assert (=> b!99087 d!26697))

(declare-fun b!99336 () Bool)

(declare-fun res!49904 () Bool)

(declare-fun e!64758 () Bool)

(assert (=> b!99336 (=> (not res!49904) (not e!64758))))

(declare-datatypes ((SeekEntryResult!254 0))(
  ( (MissingZero!254 (index!3160 (_ BitVec 32))) (Found!254 (index!3161 (_ BitVec 32))) (Intermediate!254 (undefined!1066 Bool) (index!3162 (_ BitVec 32)) (x!13104 (_ BitVec 32))) (Undefined!254) (MissingVacant!254 (index!3163 (_ BitVec 32))) )
))
(declare-fun lt!50064 () SeekEntryResult!254)

(assert (=> b!99336 (= res!49904 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50064)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99337 () Bool)

(declare-fun e!64744 () tuple2!2348)

(declare-fun e!64752 () tuple2!2348)

(assert (=> b!99337 (= e!64744 e!64752)))

(declare-fun lt!50049 () SeekEntryResult!254)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4255 (_ BitVec 32)) SeekEntryResult!254)

(assert (=> b!99337 (= lt!50049 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun c!16951 () Bool)

(assert (=> b!99337 (= c!16951 ((_ is Undefined!254) lt!50049))))

(declare-fun b!99338 () Bool)

(declare-fun c!16948 () Bool)

(assert (=> b!99338 (= c!16948 ((_ is MissingVacant!254) lt!50049))))

(declare-fun e!64761 () tuple2!2348)

(assert (=> b!99338 (= e!64752 e!64761)))

(declare-fun lt!50045 () (_ BitVec 32))

(declare-fun c!16947 () Bool)

(declare-fun c!16953 () Bool)

(declare-fun bm!10184 () Bool)

(declare-fun call!10208 () ListLongMap!1539)

(declare-fun lt!50059 () (_ BitVec 32))

(declare-fun lt!50044 () array!4257)

(assert (=> bm!10184 (= call!10208 (getCurrentListMap!476 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99339 () Bool)

(declare-fun lt!50061 () Unit!2999)

(declare-fun lt!50058 () Unit!2999)

(assert (=> b!99339 (= lt!50061 lt!50058)))

(declare-fun call!10191 () Bool)

(assert (=> b!99339 call!10191))

(declare-fun lemmaValidKeyInArrayIsInListMap!103 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) Unit!2999)

(assert (=> b!99339 (= lt!50058 (lemmaValidKeyInArrayIsInListMap!103 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99339 (= lt!50044 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))))

(declare-fun lt!50056 () Unit!2999)

(declare-fun lt!50057 () Unit!2999)

(assert (=> b!99339 (= lt!50056 lt!50057)))

(declare-fun call!10188 () ListLongMap!1539)

(declare-fun call!10202 () ListLongMap!1539)

(assert (=> b!99339 (= call!10188 call!10202)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!2999)

(assert (=> b!99339 (= lt!50057 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50051 () Unit!2999)

(declare-fun e!64762 () Unit!2999)

(assert (=> b!99339 (= lt!50051 e!64762)))

(declare-fun c!16955 () Bool)

(assert (=> b!99339 (= c!16955 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!64753 () tuple2!2348)

(assert (=> b!99339 (= e!64753 (tuple2!2349 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (_size!478 newMap!16) (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (_vacant!478 newMap!16))))))

(declare-fun b!99341 () Bool)

(declare-fun lt!50060 () Unit!2999)

(declare-fun lt!50047 () Unit!2999)

(assert (=> b!99341 (= lt!50060 lt!50047)))

(declare-fun call!10204 () ListLongMap!1539)

(declare-fun call!10196 () ListLongMap!1539)

(assert (=> b!99341 (= call!10204 call!10196)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!2999)

(assert (=> b!99341 (= lt!50047 (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99341 (= lt!50045 (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!64757 () tuple2!2348)

(assert (=> b!99341 (= e!64757 (tuple2!2349 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!478 newMap!16) (_keys!4196 newMap!16) (_values!2485 newMap!16) (_vacant!478 newMap!16))))))

(declare-fun b!99342 () Bool)

(assert (=> b!99342 (= e!64761 e!64753)))

(declare-fun c!16946 () Bool)

(assert (=> b!99342 (= c!16946 ((_ is MissingZero!254) lt!50049))))

(declare-fun b!99343 () Bool)

(declare-fun Unit!3005 () Unit!2999)

(assert (=> b!99343 (= e!64762 Unit!3005)))

(declare-fun lt!50066 () Unit!2999)

(declare-fun call!10190 () Unit!2999)

(assert (=> b!99343 (= lt!50066 call!10190)))

(declare-fun lt!50054 () SeekEntryResult!254)

(declare-fun call!10206 () SeekEntryResult!254)

(assert (=> b!99343 (= lt!50054 call!10206)))

(declare-fun c!16950 () Bool)

(assert (=> b!99343 (= c!16950 ((_ is MissingZero!254) lt!50054))))

(declare-fun e!64745 () Bool)

(assert (=> b!99343 e!64745))

(declare-fun lt!50050 () Unit!2999)

(assert (=> b!99343 (= lt!50050 lt!50066)))

(assert (=> b!99343 false))

(declare-fun b!99344 () Bool)

(declare-fun e!64754 () Unit!2999)

(declare-fun lt!50052 () Unit!2999)

(assert (=> b!99344 (= e!64754 lt!50052)))

(assert (=> b!99344 (= lt!50052 call!10190)))

(declare-fun call!10203 () SeekEntryResult!254)

(assert (=> b!99344 (= lt!50064 call!10203)))

(declare-fun c!16943 () Bool)

(assert (=> b!99344 (= c!16943 ((_ is MissingZero!254) lt!50064))))

(declare-fun e!64750 () Bool)

(assert (=> b!99344 e!64750))

(declare-fun b!99345 () Bool)

(declare-fun lt!50068 () Unit!2999)

(assert (=> b!99345 (= lt!50068 e!64754)))

(declare-fun c!16945 () Bool)

(assert (=> b!99345 (= c!16945 call!10191)))

(assert (=> b!99345 (= e!64752 (tuple2!2349 false newMap!16))))

(declare-fun b!99346 () Bool)

(declare-fun e!64746 () Bool)

(declare-fun call!10205 () Bool)

(assert (=> b!99346 (= e!64746 (not call!10205))))

(declare-fun bm!10185 () Bool)

(declare-fun call!10199 () SeekEntryResult!254)

(assert (=> bm!10185 (= call!10199 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99347 () Bool)

(declare-fun e!64743 () Bool)

(declare-fun e!64749 () Bool)

(assert (=> b!99347 (= e!64743 e!64749)))

(declare-fun res!49908 () Bool)

(declare-fun call!10210 () Bool)

(assert (=> b!99347 (= res!49908 call!10210)))

(assert (=> b!99347 (=> (not res!49908) (not e!64749))))

(declare-fun call!10207 () Bool)

(declare-fun bm!10186 () Bool)

(assert (=> bm!10186 (= call!10207 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99348 () Bool)

(declare-fun e!64756 () Bool)

(assert (=> b!99348 (= e!64756 ((_ is Undefined!254) lt!50064))))

(declare-fun bm!10187 () Bool)

(declare-fun call!10194 () Bool)

(assert (=> bm!10187 (= call!10194 call!10207)))

(declare-fun b!99349 () Bool)

(declare-fun res!49903 () Bool)

(declare-fun call!10201 () Bool)

(assert (=> b!99349 (= res!49903 call!10201)))

(declare-fun e!64742 () Bool)

(assert (=> b!99349 (=> (not res!49903) (not e!64742))))

(declare-fun bm!10188 () Bool)

(assert (=> bm!10188 (= call!10202 (getCurrentListMap!476 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99350 () Bool)

(declare-fun lt!50042 () tuple2!2348)

(declare-fun call!10197 () tuple2!2348)

(assert (=> b!99350 (= lt!50042 call!10197)))

(assert (=> b!99350 (= e!64753 (tuple2!2349 (_1!1185 lt!50042) (_2!1185 lt!50042)))))

(declare-fun b!99351 () Bool)

(declare-fun res!49912 () Bool)

(assert (=> b!99351 (=> (not res!49912) (not e!64746))))

(assert (=> b!99351 (= res!49912 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50054)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99352 () Bool)

(assert (=> b!99352 (= e!64749 (not call!10205))))

(declare-fun bm!10189 () Bool)

(assert (=> bm!10189 (= call!10204 call!10188)))

(declare-fun b!99353 () Bool)

(declare-fun e!64759 () Bool)

(assert (=> b!99353 (= e!64756 e!64759)))

(declare-fun res!49915 () Bool)

(declare-fun call!10209 () Bool)

(assert (=> b!99353 (= res!49915 call!10209)))

(assert (=> b!99353 (=> (not res!49915) (not e!64759))))

(declare-fun b!99354 () Bool)

(declare-fun lt!50048 () Unit!2999)

(declare-fun lt!50055 () Unit!2999)

(assert (=> b!99354 (= lt!50048 lt!50055)))

(assert (=> b!99354 (= call!10204 call!10196)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!42 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!2999)

(assert (=> b!99354 (= lt!50055 (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50059 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99354 (= lt!50059 (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!99354 (= e!64757 (tuple2!2349 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (_size!478 newMap!16) (_keys!4196 newMap!16) (_values!2485 newMap!16) (_vacant!478 newMap!16))))))

(declare-fun b!99355 () Bool)

(declare-fun lt!50067 () tuple2!2348)

(assert (=> b!99355 (= e!64761 (tuple2!2349 (_1!1185 lt!50067) (_2!1185 lt!50067)))))

(assert (=> b!99355 (= lt!50067 call!10197)))

(declare-fun b!99356 () Bool)

(declare-fun c!16952 () Bool)

(assert (=> b!99356 (= c!16952 ((_ is MissingVacant!254) lt!50064))))

(assert (=> b!99356 (= e!64750 e!64756)))

(declare-fun call!10187 () ListLongMap!1539)

(declare-fun bm!10190 () Bool)

(assert (=> bm!10190 (= call!10191 (contains!804 call!10187 (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(declare-fun b!99357 () Bool)

(assert (=> b!99357 (= e!64758 (not call!10194))))

(declare-fun bm!10191 () Bool)

(declare-fun call!10192 () ListLongMap!1539)

(assert (=> bm!10191 (= call!10192 (map!1259 newMap!16))))

(declare-fun bm!10192 () Bool)

(declare-fun call!10198 () ListLongMap!1539)

(assert (=> bm!10192 (= call!10198 call!10202)))

(declare-fun b!99358 () Bool)

(declare-fun lt!50062 () Unit!2999)

(assert (=> b!99358 (= e!64762 lt!50062)))

(declare-fun call!10195 () Unit!2999)

(assert (=> b!99358 (= lt!50062 call!10195)))

(declare-fun lt!50046 () SeekEntryResult!254)

(assert (=> b!99358 (= lt!50046 call!10206)))

(declare-fun res!49902 () Bool)

(assert (=> b!99358 (= res!49902 ((_ is Found!254) lt!50046))))

(assert (=> b!99358 (=> (not res!49902) (not e!64742))))

(assert (=> b!99358 e!64742))

(declare-fun e!64755 () Bool)

(declare-fun b!99359 () Bool)

(declare-fun call!10189 () ListLongMap!1539)

(assert (=> b!99359 (= e!64755 (= call!10189 (+!136 call!10192 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10193 () Bool)

(assert (=> bm!10193 (= call!10196 call!10208)))

(declare-fun b!99360 () Bool)

(declare-fun res!49906 () Bool)

(assert (=> b!99360 (=> (not res!49906) (not e!64758))))

(assert (=> b!99360 (= res!49906 call!10209)))

(assert (=> b!99360 (= e!64750 e!64758)))

(declare-fun b!99361 () Bool)

(declare-fun Unit!3006 () Unit!2999)

(assert (=> b!99361 (= e!64754 Unit!3006)))

(declare-fun lt!50065 () Unit!2999)

(assert (=> b!99361 (= lt!50065 call!10195)))

(declare-fun lt!50063 () SeekEntryResult!254)

(assert (=> b!99361 (= lt!50063 call!10203)))

(declare-fun res!49905 () Bool)

(assert (=> b!99361 (= res!49905 ((_ is Found!254) lt!50063))))

(declare-fun e!64747 () Bool)

(assert (=> b!99361 (=> (not res!49905) (not e!64747))))

(assert (=> b!99361 e!64747))

(declare-fun lt!50043 () Unit!2999)

(assert (=> b!99361 (= lt!50043 lt!50065)))

(assert (=> b!99361 false))

(declare-fun bm!10194 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!2999)

(assert (=> bm!10194 (= call!10190 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(declare-fun bm!10195 () Bool)

(declare-fun call!10193 () Bool)

(declare-fun call!10200 () Bool)

(assert (=> bm!10195 (= call!10193 call!10200)))

(declare-fun b!99362 () Bool)

(declare-fun res!49909 () Bool)

(assert (=> b!99362 (= res!49909 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50054)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99362 (=> (not res!49909) (not e!64749))))

(declare-fun bm!10196 () Bool)

(declare-fun updateHelperNewKey!42 (LongMapFixedSize!858 (_ BitVec 64) V!3163 (_ BitVec 32)) tuple2!2348)

(assert (=> bm!10196 (= call!10197 (updateHelperNewKey!42 newMap!16 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(declare-fun bm!10197 () Bool)

(assert (=> bm!10197 (= call!10205 call!10207)))

(declare-fun b!99363 () Bool)

(declare-fun res!49911 () Bool)

(assert (=> b!99363 (=> (not res!49911) (not e!64746))))

(assert (=> b!99363 (= res!49911 call!10210)))

(assert (=> b!99363 (= e!64745 e!64746)))

(declare-fun b!99340 () Bool)

(declare-fun e!64748 () Bool)

(assert (=> b!99340 (= e!64748 e!64755)))

(declare-fun res!49913 () Bool)

(assert (=> b!99340 (= res!49913 (contains!804 call!10189 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!99340 (=> (not res!49913) (not e!64755))))

(declare-fun d!26699 () Bool)

(declare-fun e!64760 () Bool)

(assert (=> d!26699 e!64760))

(declare-fun res!49914 () Bool)

(assert (=> d!26699 (=> (not res!49914) (not e!64760))))

(declare-fun lt!50053 () tuple2!2348)

(assert (=> d!26699 (= res!49914 (valid!389 (_2!1185 lt!50053)))))

(assert (=> d!26699 (= lt!50053 e!64744)))

(assert (=> d!26699 (= c!16953 (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvneg (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26699 (valid!389 newMap!16)))

(assert (=> d!26699 (= (update!142 newMap!16 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!50053)))

(declare-fun b!99364 () Bool)

(declare-fun e!64751 () ListLongMap!1539)

(assert (=> b!99364 (= e!64751 call!10198)))

(declare-fun b!99365 () Bool)

(assert (=> b!99365 (= e!64748 (= call!10189 call!10192))))

(declare-fun bm!10198 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!10198 (= call!10200 (inRange!0 (ite c!16951 (ite c!16945 (index!3161 lt!50063) (ite c!16943 (index!3160 lt!50064) (index!3163 lt!50064))) (ite c!16955 (index!3161 lt!50046) (ite c!16950 (index!3160 lt!50054) (index!3163 lt!50054)))) (mask!6609 newMap!16)))))

(declare-fun bm!10199 () Bool)

(assert (=> bm!10199 (= call!10209 call!10193)))

(declare-fun bm!10200 () Bool)

(assert (=> bm!10200 (= call!10188 (+!136 e!64751 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16949 () Bool)

(assert (=> bm!10200 (= c!16949 c!16953)))

(declare-fun bm!10201 () Bool)

(assert (=> bm!10201 (= call!10187 call!10208)))

(declare-fun bm!10202 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!2999)

(assert (=> bm!10202 (= call!10195 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(declare-fun b!99366 () Bool)

(assert (=> b!99366 (= e!64743 ((_ is Undefined!254) lt!50054))))

(declare-fun b!99367 () Bool)

(assert (=> b!99367 (= e!64759 (not call!10194))))

(declare-fun b!99368 () Bool)

(assert (=> b!99368 (= e!64744 e!64757)))

(assert (=> b!99368 (= c!16947 (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99369 () Bool)

(assert (=> b!99369 (= e!64751 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun bm!10203 () Bool)

(assert (=> bm!10203 (= call!10203 call!10199)))

(declare-fun b!99370 () Bool)

(declare-fun res!49907 () Bool)

(assert (=> b!99370 (= res!49907 call!10193)))

(assert (=> b!99370 (=> (not res!49907) (not e!64747))))

(declare-fun bm!10204 () Bool)

(assert (=> bm!10204 (= call!10189 (map!1259 (_2!1185 lt!50053)))))

(declare-fun b!99371 () Bool)

(declare-fun res!49910 () Bool)

(assert (=> b!99371 (= res!49910 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50064)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99371 (=> (not res!49910) (not e!64759))))

(declare-fun b!99372 () Bool)

(declare-fun c!16944 () Bool)

(assert (=> b!99372 (= c!16944 ((_ is MissingVacant!254) lt!50054))))

(assert (=> b!99372 (= e!64745 e!64743)))

(declare-fun bm!10205 () Bool)

(assert (=> bm!10205 (= call!10201 call!10200)))

(declare-fun b!99373 () Bool)

(assert (=> b!99373 (= e!64742 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50046)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99374 () Bool)

(assert (=> b!99374 (= e!64747 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50063)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun bm!10206 () Bool)

(assert (=> bm!10206 (= call!10210 call!10201)))

(declare-fun bm!10207 () Bool)

(assert (=> bm!10207 (= call!10206 call!10199)))

(declare-fun b!99375 () Bool)

(assert (=> b!99375 (= e!64760 e!64748)))

(declare-fun c!16954 () Bool)

(assert (=> b!99375 (= c!16954 (_1!1185 lt!50053))))

(assert (= (and d!26699 c!16953) b!99368))

(assert (= (and d!26699 (not c!16953)) b!99337))

(assert (= (and b!99368 c!16947) b!99354))

(assert (= (and b!99368 (not c!16947)) b!99341))

(assert (= (or b!99354 b!99341) bm!10192))

(assert (= (or b!99354 b!99341) bm!10193))

(assert (= (or b!99354 b!99341) bm!10189))

(assert (= (and b!99337 c!16951) b!99345))

(assert (= (and b!99337 (not c!16951)) b!99338))

(assert (= (and b!99345 c!16945) b!99361))

(assert (= (and b!99345 (not c!16945)) b!99344))

(assert (= (and b!99361 res!49905) b!99370))

(assert (= (and b!99370 res!49907) b!99374))

(assert (= (and b!99344 c!16943) b!99360))

(assert (= (and b!99344 (not c!16943)) b!99356))

(assert (= (and b!99360 res!49906) b!99336))

(assert (= (and b!99336 res!49904) b!99357))

(assert (= (and b!99356 c!16952) b!99353))

(assert (= (and b!99356 (not c!16952)) b!99348))

(assert (= (and b!99353 res!49915) b!99371))

(assert (= (and b!99371 res!49910) b!99367))

(assert (= (or b!99360 b!99353) bm!10199))

(assert (= (or b!99357 b!99367) bm!10187))

(assert (= (or b!99370 bm!10199) bm!10195))

(assert (= (or b!99361 b!99344) bm!10203))

(assert (= (and b!99338 c!16948) b!99355))

(assert (= (and b!99338 (not c!16948)) b!99342))

(assert (= (and b!99342 c!16946) b!99350))

(assert (= (and b!99342 (not c!16946)) b!99339))

(assert (= (and b!99339 c!16955) b!99358))

(assert (= (and b!99339 (not c!16955)) b!99343))

(assert (= (and b!99358 res!49902) b!99349))

(assert (= (and b!99349 res!49903) b!99373))

(assert (= (and b!99343 c!16950) b!99363))

(assert (= (and b!99343 (not c!16950)) b!99372))

(assert (= (and b!99363 res!49911) b!99351))

(assert (= (and b!99351 res!49912) b!99346))

(assert (= (and b!99372 c!16944) b!99347))

(assert (= (and b!99372 (not c!16944)) b!99366))

(assert (= (and b!99347 res!49908) b!99362))

(assert (= (and b!99362 res!49909) b!99352))

(assert (= (or b!99363 b!99347) bm!10206))

(assert (= (or b!99346 b!99352) bm!10197))

(assert (= (or b!99349 bm!10206) bm!10205))

(assert (= (or b!99358 b!99343) bm!10207))

(assert (= (or b!99355 b!99350) bm!10196))

(assert (= (or bm!10203 bm!10207) bm!10185))

(assert (= (or b!99345 b!99339) bm!10201))

(assert (= (or b!99344 b!99343) bm!10194))

(assert (= (or bm!10195 bm!10205) bm!10198))

(assert (= (or b!99361 b!99358) bm!10202))

(assert (= (or bm!10187 bm!10197) bm!10186))

(assert (= (or b!99345 b!99339) bm!10190))

(assert (= (or bm!10192 b!99339) bm!10188))

(assert (= (or bm!10193 bm!10201) bm!10184))

(assert (= (or bm!10189 b!99339) bm!10200))

(assert (= (and bm!10200 c!16949) b!99364))

(assert (= (and bm!10200 (not c!16949)) b!99369))

(assert (= (and d!26699 res!49914) b!99375))

(assert (= (and b!99375 c!16954) b!99340))

(assert (= (and b!99375 (not c!16954)) b!99365))

(assert (= (and b!99340 res!49913) b!99359))

(assert (= (or b!99340 b!99359 b!99365) bm!10204))

(assert (= (or b!99359 b!99365) bm!10191))

(declare-fun m!109303 () Bool)

(assert (=> bm!10204 m!109303))

(declare-fun m!109305 () Bool)

(assert (=> b!99336 m!109305))

(assert (=> bm!10196 m!109133))

(assert (=> bm!10196 m!109159))

(declare-fun m!109307 () Bool)

(assert (=> bm!10196 m!109307))

(assert (=> b!99369 m!109221))

(declare-fun m!109309 () Bool)

(assert (=> bm!10184 m!109309))

(assert (=> bm!10186 m!109133))

(declare-fun m!109311 () Bool)

(assert (=> bm!10186 m!109311))

(declare-fun m!109313 () Bool)

(assert (=> b!99362 m!109313))

(assert (=> b!99337 m!109133))

(declare-fun m!109315 () Bool)

(assert (=> b!99337 m!109315))

(declare-fun m!109317 () Bool)

(assert (=> b!99374 m!109317))

(declare-fun m!109319 () Bool)

(assert (=> bm!10188 m!109319))

(declare-fun m!109321 () Bool)

(assert (=> bm!10188 m!109321))

(assert (=> b!99341 m!109159))

(declare-fun m!109323 () Bool)

(assert (=> b!99341 m!109323))

(assert (=> bm!10202 m!109133))

(declare-fun m!109325 () Bool)

(assert (=> bm!10202 m!109325))

(declare-fun m!109327 () Bool)

(assert (=> bm!10200 m!109327))

(assert (=> bm!10191 m!109135))

(declare-fun m!109329 () Bool)

(assert (=> bm!10190 m!109329))

(declare-fun m!109331 () Bool)

(assert (=> bm!10190 m!109331))

(assert (=> b!99340 m!109133))

(declare-fun m!109333 () Bool)

(assert (=> b!99340 m!109333))

(assert (=> b!99339 m!109221))

(assert (=> b!99339 m!109133))

(declare-fun m!109335 () Bool)

(assert (=> b!99339 m!109335))

(assert (=> b!99339 m!109221))

(declare-fun m!109337 () Bool)

(assert (=> b!99339 m!109337))

(assert (=> b!99339 m!109319))

(assert (=> b!99339 m!109133))

(assert (=> b!99339 m!109159))

(declare-fun m!109339 () Bool)

(assert (=> b!99339 m!109339))

(declare-fun m!109341 () Bool)

(assert (=> b!99351 m!109341))

(declare-fun m!109343 () Bool)

(assert (=> bm!10198 m!109343))

(assert (=> b!99354 m!109159))

(declare-fun m!109345 () Bool)

(assert (=> b!99354 m!109345))

(declare-fun m!109347 () Bool)

(assert (=> b!99371 m!109347))

(declare-fun m!109349 () Bool)

(assert (=> b!99359 m!109349))

(declare-fun m!109351 () Bool)

(assert (=> b!99373 m!109351))

(declare-fun m!109353 () Bool)

(assert (=> d!26699 m!109353))

(assert (=> d!26699 m!109153))

(assert (=> bm!10185 m!109133))

(assert (=> bm!10185 m!109315))

(assert (=> bm!10194 m!109133))

(declare-fun m!109355 () Bool)

(assert (=> bm!10194 m!109355))

(assert (=> b!99087 d!26699))

(declare-fun d!26701 () Bool)

(declare-fun c!16958 () Bool)

(assert (=> d!26701 (= c!16958 ((_ is ValueCellFull!975) (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!64765 () V!3163)

(assert (=> d!26701 (= (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64765)))

(declare-fun b!99380 () Bool)

(declare-fun get!1288 (ValueCell!975 V!3163) V!3163)

(assert (=> b!99380 (= e!64765 (get!1288 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99381 () Bool)

(declare-fun get!1289 (ValueCell!975 V!3163) V!3163)

(assert (=> b!99381 (= e!64765 (get!1289 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26701 c!16958) b!99380))

(assert (= (and d!26701 (not c!16958)) b!99381))

(assert (=> b!99380 m!109155))

(assert (=> b!99380 m!109157))

(declare-fun m!109357 () Bool)

(assert (=> b!99380 m!109357))

(assert (=> b!99381 m!109155))

(assert (=> b!99381 m!109157))

(declare-fun m!109359 () Bool)

(assert (=> b!99381 m!109359))

(assert (=> b!99087 d!26701))

(declare-fun d!26703 () Bool)

(assert (=> d!26703 (= (array_inv!1259 (_keys!4196 newMap!16)) (bvsge (size!2272 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99086 d!26703))

(declare-fun d!26705 () Bool)

(assert (=> d!26705 (= (array_inv!1260 (_values!2485 newMap!16)) (bvsge (size!2273 (_values!2485 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99086 d!26705))

(declare-fun d!26707 () Bool)

(declare-fun res!49922 () Bool)

(declare-fun e!64768 () Bool)

(assert (=> d!26707 (=> (not res!49922) (not e!64768))))

(declare-fun simpleValid!69 (LongMapFixedSize!858) Bool)

(assert (=> d!26707 (= res!49922 (simpleValid!69 newMap!16))))

(assert (=> d!26707 (= (valid!389 newMap!16) e!64768)))

(declare-fun b!99388 () Bool)

(declare-fun res!49923 () Bool)

(assert (=> b!99388 (=> (not res!49923) (not e!64768))))

(declare-fun arrayCountValidKeys!0 (array!4255 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99388 (= res!49923 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (_size!478 newMap!16)))))

(declare-fun b!99389 () Bool)

(declare-fun res!49924 () Bool)

(assert (=> b!99389 (=> (not res!49924) (not e!64768))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4255 (_ BitVec 32)) Bool)

(assert (=> b!99389 (= res!49924 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99390 () Bool)

(assert (=> b!99390 (= e!64768 (arrayNoDuplicates!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 Nil!1581))))

(assert (= (and d!26707 res!49922) b!99388))

(assert (= (and b!99388 res!49923) b!99389))

(assert (= (and b!99389 res!49924) b!99390))

(declare-fun m!109361 () Bool)

(assert (=> d!26707 m!109361))

(declare-fun m!109363 () Bool)

(assert (=> b!99388 m!109363))

(declare-fun m!109365 () Bool)

(assert (=> b!99389 m!109365))

(declare-fun m!109367 () Bool)

(assert (=> b!99390 m!109367))

(assert (=> b!99095 d!26707))

(declare-fun condMapEmpty!3781 () Bool)

(declare-fun mapDefault!3781 () ValueCell!975)

(assert (=> mapNonEmpty!3772 (= condMapEmpty!3781 (= mapRest!3771 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3781)))))

(declare-fun e!64773 () Bool)

(declare-fun mapRes!3781 () Bool)

(assert (=> mapNonEmpty!3772 (= tp!9616 (and e!64773 mapRes!3781))))

(declare-fun mapNonEmpty!3781 () Bool)

(declare-fun tp!9631 () Bool)

(declare-fun e!64774 () Bool)

(assert (=> mapNonEmpty!3781 (= mapRes!3781 (and tp!9631 e!64774))))

(declare-fun mapValue!3781 () ValueCell!975)

(declare-fun mapRest!3781 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3781 () (_ BitVec 32))

(assert (=> mapNonEmpty!3781 (= mapRest!3771 (store mapRest!3781 mapKey!3781 mapValue!3781))))

(declare-fun mapIsEmpty!3781 () Bool)

(assert (=> mapIsEmpty!3781 mapRes!3781))

(declare-fun b!99397 () Bool)

(assert (=> b!99397 (= e!64774 tp_is_empty!2637)))

(declare-fun b!99398 () Bool)

(assert (=> b!99398 (= e!64773 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3772 condMapEmpty!3781) mapIsEmpty!3781))

(assert (= (and mapNonEmpty!3772 (not condMapEmpty!3781)) mapNonEmpty!3781))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!975) mapValue!3781)) b!99397))

(assert (= (and mapNonEmpty!3772 ((_ is ValueCellFull!975) mapDefault!3781)) b!99398))

(declare-fun m!109369 () Bool)

(assert (=> mapNonEmpty!3781 m!109369))

(declare-fun condMapEmpty!3782 () Bool)

(declare-fun mapDefault!3782 () ValueCell!975)

(assert (=> mapNonEmpty!3771 (= condMapEmpty!3782 (= mapRest!3772 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3782)))))

(declare-fun e!64775 () Bool)

(declare-fun mapRes!3782 () Bool)

(assert (=> mapNonEmpty!3771 (= tp!9613 (and e!64775 mapRes!3782))))

(declare-fun mapNonEmpty!3782 () Bool)

(declare-fun tp!9632 () Bool)

(declare-fun e!64776 () Bool)

(assert (=> mapNonEmpty!3782 (= mapRes!3782 (and tp!9632 e!64776))))

(declare-fun mapRest!3782 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapValue!3782 () ValueCell!975)

(declare-fun mapKey!3782 () (_ BitVec 32))

(assert (=> mapNonEmpty!3782 (= mapRest!3772 (store mapRest!3782 mapKey!3782 mapValue!3782))))

(declare-fun mapIsEmpty!3782 () Bool)

(assert (=> mapIsEmpty!3782 mapRes!3782))

(declare-fun b!99399 () Bool)

(assert (=> b!99399 (= e!64776 tp_is_empty!2637)))

(declare-fun b!99400 () Bool)

(assert (=> b!99400 (= e!64775 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3771 condMapEmpty!3782) mapIsEmpty!3782))

(assert (= (and mapNonEmpty!3771 (not condMapEmpty!3782)) mapNonEmpty!3782))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!975) mapValue!3782)) b!99399))

(assert (= (and mapNonEmpty!3771 ((_ is ValueCellFull!975) mapDefault!3782)) b!99400))

(declare-fun m!109371 () Bool)

(assert (=> mapNonEmpty!3782 m!109371))

(declare-fun b_lambda!4435 () Bool)

(assert (= b_lambda!4433 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4435)))

(check-sat (not b!99359) (not bm!10185) (not b!99207) (not bm!10128) (not b!99380) (not b!99242) (not bm!10202) (not d!26699) (not b!99230) b_and!6113 (not d!26679) (not bm!10126) (not bm!10131) (not b!99389) (not bm!10204) (not mapNonEmpty!3781) (not d!26707) (not b!99340) tp_is_empty!2637 (not b!99390) (not b_next!2441) (not b_lambda!4431) (not b!99225) (not d!26697) (not bm!10194) (not b!99255) (not d!26677) (not bm!10188) (not b!99337) (not b!99215) (not bm!10198) (not d!26695) (not b!99246) (not b!99202) (not b!99339) (not bm!10129) (not bm!10191) (not b!99209) (not d!26687) (not b!99388) (not b!99216) (not b!99341) (not b_lambda!4435) (not b_next!2443) b_and!6111 (not d!26683) (not b!99354) (not b!99205) (not b!99381) (not bm!10135) (not b!99369) (not bm!10184) (not b!99213) (not b!99219) (not d!26681) (not b!99243) (not bm!10186) (not b!99253) (not mapNonEmpty!3782) (not bm!10200) (not bm!10196) (not bm!10190))
(check-sat b_and!6111 b_and!6113 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26709 () Bool)

(declare-fun e!64779 () Bool)

(assert (=> d!26709 e!64779))

(declare-fun res!49930 () Bool)

(assert (=> d!26709 (=> (not res!49930) (not e!64779))))

(declare-fun lt!50079 () ListLongMap!1539)

(assert (=> d!26709 (= res!49930 (contains!804 lt!50079 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun lt!50080 () List!1583)

(assert (=> d!26709 (= lt!50079 (ListLongMap!1540 lt!50080))))

(declare-fun lt!50077 () Unit!2999)

(declare-fun lt!50078 () Unit!2999)

(assert (=> d!26709 (= lt!50077 lt!50078)))

(assert (=> d!26709 (= (getValueByKey!151 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (Some!156 (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!67 (List!1583 (_ BitVec 64) V!3163) Unit!2999)

(assert (=> d!26709 (= lt!50078 (lemmaContainsTupThenGetReturnValue!67 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun insertStrictlySorted!70 (List!1583 (_ BitVec 64) V!3163) List!1583)

(assert (=> d!26709 (= lt!50080 (insertStrictlySorted!70 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!26709 (= (+!136 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50079)))

(declare-fun b!99405 () Bool)

(declare-fun res!49929 () Bool)

(assert (=> b!99405 (=> (not res!49929) (not e!64779))))

(assert (=> b!99405 (= res!49929 (= (getValueByKey!151 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (Some!156 (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!99406 () Bool)

(declare-fun contains!806 (List!1583 tuple2!2346) Bool)

(assert (=> b!99406 (= e!64779 (contains!806 (toList!785 lt!50079) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!26709 res!49930) b!99405))

(assert (= (and b!99405 res!49929) b!99406))

(declare-fun m!109373 () Bool)

(assert (=> d!26709 m!109373))

(declare-fun m!109375 () Bool)

(assert (=> d!26709 m!109375))

(declare-fun m!109377 () Bool)

(assert (=> d!26709 m!109377))

(declare-fun m!109379 () Bool)

(assert (=> d!26709 m!109379))

(declare-fun m!109381 () Bool)

(assert (=> b!99405 m!109381))

(declare-fun m!109383 () Bool)

(assert (=> b!99406 m!109383))

(assert (=> bm!10128 d!26709))

(declare-fun d!26711 () Bool)

(assert (=> d!26711 (= (get!1289 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99381 d!26711))

(declare-fun d!26713 () Bool)

(assert (=> d!26713 (= (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (and (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99246 d!26713))

(declare-fun d!26715 () Bool)

(declare-fun e!64780 () Bool)

(assert (=> d!26715 e!64780))

(declare-fun res!49932 () Bool)

(assert (=> d!26715 (=> (not res!49932) (not e!64780))))

(declare-fun lt!50083 () ListLongMap!1539)

(assert (=> d!26715 (= res!49932 (contains!804 lt!50083 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50084 () List!1583)

(assert (=> d!26715 (= lt!50083 (ListLongMap!1540 lt!50084))))

(declare-fun lt!50081 () Unit!2999)

(declare-fun lt!50082 () Unit!2999)

(assert (=> d!26715 (= lt!50081 lt!50082)))

(assert (=> d!26715 (= (getValueByKey!151 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26715 (= lt!50082 (lemmaContainsTupThenGetReturnValue!67 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26715 (= lt!50084 (insertStrictlySorted!70 (toList!785 call!10192) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26715 (= (+!136 call!10192 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50083)))

(declare-fun b!99407 () Bool)

(declare-fun res!49931 () Bool)

(assert (=> b!99407 (=> (not res!49931) (not e!64780))))

(assert (=> b!99407 (= res!49931 (= (getValueByKey!151 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99408 () Bool)

(assert (=> b!99408 (= e!64780 (contains!806 (toList!785 lt!50083) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26715 res!49932) b!99407))

(assert (= (and b!99407 res!49931) b!99408))

(declare-fun m!109385 () Bool)

(assert (=> d!26715 m!109385))

(declare-fun m!109387 () Bool)

(assert (=> d!26715 m!109387))

(declare-fun m!109389 () Bool)

(assert (=> d!26715 m!109389))

(declare-fun m!109391 () Bool)

(assert (=> d!26715 m!109391))

(declare-fun m!109393 () Bool)

(assert (=> b!99407 m!109393))

(declare-fun m!109395 () Bool)

(assert (=> b!99408 m!109395))

(assert (=> b!99359 d!26715))

(declare-fun b!99409 () Bool)

(declare-fun e!64786 () ListLongMap!1539)

(declare-fun call!10216 () ListLongMap!1539)

(assert (=> b!99409 (= e!64786 call!10216)))

(declare-fun bm!10208 () Bool)

(declare-fun call!10212 () Bool)

(declare-fun lt!50097 () ListLongMap!1539)

(assert (=> bm!10208 (= call!10212 (contains!804 lt!50097 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99410 () Bool)

(declare-fun e!64782 () Bool)

(declare-fun e!64788 () Bool)

(assert (=> b!99410 (= e!64782 e!64788)))

(declare-fun res!49934 () Bool)

(assert (=> b!99410 (= res!49934 call!10212)))

(assert (=> b!99410 (=> (not res!49934) (not e!64788))))

(declare-fun b!99411 () Bool)

(assert (=> b!99411 (= e!64782 (not call!10212))))

(declare-fun b!99413 () Bool)

(declare-fun e!64790 () Unit!2999)

(declare-fun Unit!3007 () Unit!2999)

(assert (=> b!99413 (= e!64790 Unit!3007)))

(declare-fun b!99414 () Bool)

(declare-fun e!64781 () ListLongMap!1539)

(assert (=> b!99414 (= e!64781 call!10216)))

(declare-fun b!99415 () Bool)

(declare-fun lt!50085 () Unit!2999)

(assert (=> b!99415 (= e!64790 lt!50085)))

(declare-fun lt!50105 () ListLongMap!1539)

(assert (=> b!99415 (= lt!50105 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50087 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50087 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50086 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50086 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50091 () Unit!2999)

(assert (=> b!99415 (= lt!50091 (addStillContains!69 lt!50105 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50086))))

(assert (=> b!99415 (contains!804 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50086)))

(declare-fun lt!50094 () Unit!2999)

(assert (=> b!99415 (= lt!50094 lt!50091)))

(declare-fun lt!50095 () ListLongMap!1539)

(assert (=> b!99415 (= lt!50095 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50100 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50100 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50102 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50102 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50096 () Unit!2999)

(assert (=> b!99415 (= lt!50096 (addApplyDifferent!69 lt!50095 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50102))))

(assert (=> b!99415 (= (apply!93 (+!136 lt!50095 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50102) (apply!93 lt!50095 lt!50102))))

(declare-fun lt!50090 () Unit!2999)

(assert (=> b!99415 (= lt!50090 lt!50096)))

(declare-fun lt!50092 () ListLongMap!1539)

(assert (=> b!99415 (= lt!50092 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50103 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50103 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50089 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50089 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50088 () Unit!2999)

(assert (=> b!99415 (= lt!50088 (addApplyDifferent!69 lt!50092 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50089))))

(assert (=> b!99415 (= (apply!93 (+!136 lt!50092 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50089) (apply!93 lt!50092 lt!50089))))

(declare-fun lt!50104 () Unit!2999)

(assert (=> b!99415 (= lt!50104 lt!50088)))

(declare-fun lt!50093 () ListLongMap!1539)

(assert (=> b!99415 (= lt!50093 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50101 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50101 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50106 () (_ BitVec 64))

(assert (=> b!99415 (= lt!50106 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99415 (= lt!50085 (addApplyDifferent!69 lt!50093 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50106))))

(assert (=> b!99415 (= (apply!93 (+!136 lt!50093 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50106) (apply!93 lt!50093 lt!50106))))

(declare-fun b!99416 () Bool)

(declare-fun res!49941 () Bool)

(declare-fun e!64793 () Bool)

(assert (=> b!99416 (=> (not res!49941) (not e!64793))))

(declare-fun e!64789 () Bool)

(assert (=> b!99416 (= res!49941 e!64789)))

(declare-fun res!49938 () Bool)

(assert (=> b!99416 (=> res!49938 e!64789)))

(declare-fun e!64784 () Bool)

(assert (=> b!99416 (= res!49938 (not e!64784))))

(declare-fun res!49933 () Bool)

(assert (=> b!99416 (=> (not res!49933) (not e!64784))))

(assert (=> b!99416 (= res!49933 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99417 () Bool)

(declare-fun e!64792 () Bool)

(assert (=> b!99417 (= e!64792 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99418 () Bool)

(declare-fun e!64783 () Bool)

(declare-fun call!10213 () Bool)

(assert (=> b!99418 (= e!64783 (not call!10213))))

(declare-fun bm!10209 () Bool)

(declare-fun call!10215 () ListLongMap!1539)

(declare-fun call!10214 () ListLongMap!1539)

(assert (=> bm!10209 (= call!10215 call!10214)))

(declare-fun c!16964 () Bool)

(declare-fun call!10217 () ListLongMap!1539)

(declare-fun call!10211 () ListLongMap!1539)

(declare-fun c!16960 () Bool)

(declare-fun bm!10210 () Bool)

(assert (=> bm!10210 (= call!10217 (+!136 (ite c!16960 call!10214 (ite c!16964 call!10215 call!10211)) (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun e!64791 () Bool)

(declare-fun b!99419 () Bool)

(assert (=> b!99419 (= e!64791 (= (apply!93 lt!50097 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))

(declare-fun c!16959 () Bool)

(declare-fun b!99420 () Bool)

(assert (=> b!99420 (= c!16959 (and (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99420 (= e!64781 e!64786)))

(declare-fun b!99421 () Bool)

(declare-fun e!64787 () ListLongMap!1539)

(assert (=> b!99421 (= e!64787 e!64781)))

(assert (=> b!99421 (= c!16964 (and (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10211 () Bool)

(assert (=> bm!10211 (= call!10213 (contains!804 lt!50097 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99422 () Bool)

(assert (=> b!99422 (= e!64793 e!64783)))

(declare-fun c!16963 () Bool)

(assert (=> b!99422 (= c!16963 (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99423 () Bool)

(assert (=> b!99423 (= e!64784 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99424 () Bool)

(declare-fun res!49936 () Bool)

(assert (=> b!99424 (=> (not res!49936) (not e!64793))))

(assert (=> b!99424 (= res!49936 e!64782)))

(declare-fun c!16962 () Bool)

(assert (=> b!99424 (= c!16962 (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10212 () Bool)

(assert (=> bm!10212 (= call!10211 call!10215)))

(declare-fun b!99425 () Bool)

(assert (=> b!99425 (= e!64788 (= (apply!93 lt!50097 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))

(declare-fun bm!10213 () Bool)

(assert (=> bm!10213 (= call!10214 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!26717 () Bool)

(assert (=> d!26717 e!64793))

(declare-fun res!49939 () Bool)

(assert (=> d!26717 (=> (not res!49939) (not e!64793))))

(assert (=> d!26717 (= res!49939 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50099 () ListLongMap!1539)

(assert (=> d!26717 (= lt!50097 lt!50099)))

(declare-fun lt!50098 () Unit!2999)

(assert (=> d!26717 (= lt!50098 e!64790)))

(declare-fun c!16961 () Bool)

(assert (=> d!26717 (= c!16961 e!64792)))

(declare-fun res!49935 () Bool)

(assert (=> d!26717 (=> (not res!49935) (not e!64792))))

(assert (=> d!26717 (= res!49935 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26717 (= lt!50099 e!64787)))

(assert (=> d!26717 (= c!16960 (and (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26717 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26717 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50097)))

(declare-fun b!99412 () Bool)

(declare-fun e!64785 () Bool)

(assert (=> b!99412 (= e!64785 (= (apply!93 lt!50097 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99412 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044))))))

(assert (=> b!99412 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99426 () Bool)

(assert (=> b!99426 (= e!64787 (+!136 call!10217 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(declare-fun bm!10214 () Bool)

(assert (=> bm!10214 (= call!10216 call!10217)))

(declare-fun b!99427 () Bool)

(assert (=> b!99427 (= e!64786 call!10211)))

(declare-fun b!99428 () Bool)

(assert (=> b!99428 (= e!64783 e!64791)))

(declare-fun res!49937 () Bool)

(assert (=> b!99428 (= res!49937 call!10213)))

(assert (=> b!99428 (=> (not res!49937) (not e!64791))))

(declare-fun b!99429 () Bool)

(assert (=> b!99429 (= e!64789 e!64785)))

(declare-fun res!49940 () Bool)

(assert (=> b!99429 (=> (not res!49940) (not e!64785))))

(assert (=> b!99429 (= res!49940 (contains!804 lt!50097 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99429 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!26717 c!16960) b!99426))

(assert (= (and d!26717 (not c!16960)) b!99421))

(assert (= (and b!99421 c!16964) b!99414))

(assert (= (and b!99421 (not c!16964)) b!99420))

(assert (= (and b!99420 c!16959) b!99409))

(assert (= (and b!99420 (not c!16959)) b!99427))

(assert (= (or b!99409 b!99427) bm!10212))

(assert (= (or b!99414 bm!10212) bm!10209))

(assert (= (or b!99414 b!99409) bm!10214))

(assert (= (or b!99426 bm!10209) bm!10213))

(assert (= (or b!99426 bm!10214) bm!10210))

(assert (= (and d!26717 res!49935) b!99417))

(assert (= (and d!26717 c!16961) b!99415))

(assert (= (and d!26717 (not c!16961)) b!99413))

(assert (= (and d!26717 res!49939) b!99416))

(assert (= (and b!99416 res!49933) b!99423))

(assert (= (and b!99416 (not res!49938)) b!99429))

(assert (= (and b!99429 res!49940) b!99412))

(assert (= (and b!99416 res!49941) b!99424))

(assert (= (and b!99424 c!16962) b!99410))

(assert (= (and b!99424 (not c!16962)) b!99411))

(assert (= (and b!99410 res!49934) b!99425))

(assert (= (or b!99410 b!99411) bm!10208))

(assert (= (and b!99424 res!49936) b!99422))

(assert (= (and b!99422 c!16963) b!99428))

(assert (= (and b!99422 (not c!16963)) b!99418))

(assert (= (and b!99428 res!49937) b!99419))

(assert (= (or b!99428 b!99418) bm!10211))

(declare-fun b_lambda!4437 () Bool)

(assert (=> (not b_lambda!4437) (not b!99412)))

(declare-fun tb!1949 () Bool)

(declare-fun t!5564 () Bool)

(assert (=> (and b!99092 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16)) t!5564) tb!1949))

(declare-fun result!3303 () Bool)

(assert (=> tb!1949 (= result!3303 tp_is_empty!2637)))

(assert (=> b!99412 t!5564))

(declare-fun b_and!6115 () Bool)

(assert (= b_and!6111 (and (=> t!5564 result!3303) b_and!6115)))

(declare-fun t!5566 () Bool)

(declare-fun tb!1951 () Bool)

(assert (=> (and b!99086 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 newMap!16)) t!5566) tb!1951))

(declare-fun result!3305 () Bool)

(assert (= result!3305 result!3303))

(assert (=> b!99412 t!5566))

(declare-fun b_and!6117 () Bool)

(assert (= b_and!6113 (and (=> t!5566 result!3305) b_and!6117)))

(declare-fun m!109397 () Bool)

(assert (=> b!99412 m!109397))

(declare-fun m!109399 () Bool)

(assert (=> b!99412 m!109399))

(declare-fun m!109401 () Bool)

(assert (=> b!99412 m!109401))

(assert (=> b!99412 m!109399))

(assert (=> b!99412 m!109401))

(declare-fun m!109403 () Bool)

(assert (=> b!99412 m!109403))

(assert (=> b!99412 m!109397))

(declare-fun m!109405 () Bool)

(assert (=> b!99412 m!109405))

(declare-fun m!109407 () Bool)

(assert (=> b!99425 m!109407))

(declare-fun m!109409 () Bool)

(assert (=> bm!10213 m!109409))

(assert (=> b!99423 m!109397))

(assert (=> b!99423 m!109397))

(declare-fun m!109411 () Bool)

(assert (=> b!99423 m!109411))

(assert (=> b!99417 m!109397))

(assert (=> b!99417 m!109397))

(assert (=> b!99417 m!109411))

(declare-fun m!109413 () Bool)

(assert (=> d!26717 m!109413))

(declare-fun m!109415 () Bool)

(assert (=> bm!10210 m!109415))

(declare-fun m!109417 () Bool)

(assert (=> b!99419 m!109417))

(assert (=> b!99429 m!109397))

(assert (=> b!99429 m!109397))

(declare-fun m!109419 () Bool)

(assert (=> b!99429 m!109419))

(declare-fun m!109421 () Bool)

(assert (=> bm!10208 m!109421))

(assert (=> b!99415 m!109397))

(declare-fun m!109423 () Bool)

(assert (=> b!99415 m!109423))

(declare-fun m!109425 () Bool)

(assert (=> b!99415 m!109425))

(declare-fun m!109427 () Bool)

(assert (=> b!99415 m!109427))

(declare-fun m!109429 () Bool)

(assert (=> b!99415 m!109429))

(declare-fun m!109431 () Bool)

(assert (=> b!99415 m!109431))

(declare-fun m!109433 () Bool)

(assert (=> b!99415 m!109433))

(declare-fun m!109435 () Bool)

(assert (=> b!99415 m!109435))

(declare-fun m!109437 () Bool)

(assert (=> b!99415 m!109437))

(declare-fun m!109439 () Bool)

(assert (=> b!99415 m!109439))

(declare-fun m!109441 () Bool)

(assert (=> b!99415 m!109441))

(assert (=> b!99415 m!109439))

(declare-fun m!109443 () Bool)

(assert (=> b!99415 m!109443))

(declare-fun m!109445 () Bool)

(assert (=> b!99415 m!109445))

(assert (=> b!99415 m!109433))

(declare-fun m!109447 () Bool)

(assert (=> b!99415 m!109447))

(declare-fun m!109449 () Bool)

(assert (=> b!99415 m!109449))

(assert (=> b!99415 m!109409))

(assert (=> b!99415 m!109445))

(declare-fun m!109451 () Bool)

(assert (=> b!99415 m!109451))

(assert (=> b!99415 m!109423))

(declare-fun m!109453 () Bool)

(assert (=> b!99426 m!109453))

(declare-fun m!109455 () Bool)

(assert (=> bm!10211 m!109455))

(assert (=> bm!10184 d!26717))

(declare-fun d!26719 () Bool)

(declare-fun lt!50109 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!103 (List!1584) (InoxSet (_ BitVec 64)))

(assert (=> d!26719 (= lt!50109 (select (content!103 Nil!1581) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!64799 () Bool)

(assert (=> d!26719 (= lt!50109 e!64799)))

(declare-fun res!49947 () Bool)

(assert (=> d!26719 (=> (not res!49947) (not e!64799))))

(assert (=> d!26719 (= res!49947 ((_ is Cons!1580) Nil!1581))))

(assert (=> d!26719 (= (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50109)))

(declare-fun b!99434 () Bool)

(declare-fun e!64798 () Bool)

(assert (=> b!99434 (= e!64799 e!64798)))

(declare-fun res!49946 () Bool)

(assert (=> b!99434 (=> res!49946 e!64798)))

(assert (=> b!99434 (= res!49946 (= (h!2175 Nil!1581) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99435 () Bool)

(assert (=> b!99435 (= e!64798 (contains!805 (t!5558 Nil!1581) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!26719 res!49947) b!99434))

(assert (= (and b!99434 (not res!49946)) b!99435))

(declare-fun m!109457 () Bool)

(assert (=> d!26719 m!109457))

(assert (=> d!26719 m!109133))

(declare-fun m!109459 () Bool)

(assert (=> d!26719 m!109459))

(assert (=> b!99435 m!109133))

(declare-fun m!109461 () Bool)

(assert (=> b!99435 m!109461))

(assert (=> b!99242 d!26719))

(declare-fun d!26721 () Bool)

(declare-fun e!64800 () Bool)

(assert (=> d!26721 e!64800))

(declare-fun res!49948 () Bool)

(assert (=> d!26721 (=> res!49948 e!64800)))

(declare-fun lt!50113 () Bool)

(assert (=> d!26721 (= res!49948 (not lt!50113))))

(declare-fun lt!50111 () Bool)

(assert (=> d!26721 (= lt!50113 lt!50111)))

(declare-fun lt!50110 () Unit!2999)

(declare-fun e!64801 () Unit!2999)

(assert (=> d!26721 (= lt!50110 e!64801)))

(declare-fun c!16965 () Bool)

(assert (=> d!26721 (= c!16965 lt!50111)))

(assert (=> d!26721 (= lt!50111 (containsKey!155 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26721 (= (contains!804 lt!49957 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50113)))

(declare-fun b!99436 () Bool)

(declare-fun lt!50112 () Unit!2999)

(assert (=> b!99436 (= e!64801 lt!50112)))

(assert (=> b!99436 (= lt!50112 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99436 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99437 () Bool)

(declare-fun Unit!3008 () Unit!2999)

(assert (=> b!99437 (= e!64801 Unit!3008)))

(declare-fun b!99438 () Bool)

(assert (=> b!99438 (= e!64800 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26721 c!16965) b!99436))

(assert (= (and d!26721 (not c!16965)) b!99437))

(assert (= (and d!26721 (not res!49948)) b!99438))

(assert (=> d!26721 m!109223))

(declare-fun m!109463 () Bool)

(assert (=> d!26721 m!109463))

(assert (=> b!99436 m!109223))

(declare-fun m!109465 () Bool)

(assert (=> b!99436 m!109465))

(assert (=> b!99436 m!109223))

(declare-fun m!109467 () Bool)

(assert (=> b!99436 m!109467))

(assert (=> b!99436 m!109467))

(declare-fun m!109469 () Bool)

(assert (=> b!99436 m!109469))

(assert (=> b!99438 m!109223))

(assert (=> b!99438 m!109467))

(assert (=> b!99438 m!109467))

(assert (=> b!99438 m!109469))

(assert (=> b!99219 d!26721))

(declare-fun d!26723 () Bool)

(assert (=> d!26723 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50116 () Unit!2999)

(declare-fun choose!602 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!2999)

(assert (=> d!26723 (= lt!50116 (choose!602 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50059 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26723 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26723 (= (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50059 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)) lt!50116)))

(declare-fun bs!4110 () Bool)

(assert (= bs!4110 d!26723))

(assert (=> bs!4110 m!109159))

(declare-fun m!109471 () Bool)

(assert (=> bs!4110 m!109471))

(assert (=> bs!4110 m!109413))

(assert (=> bs!4110 m!109221))

(declare-fun m!109473 () Bool)

(assert (=> bs!4110 m!109473))

(assert (=> bs!4110 m!109221))

(assert (=> bs!4110 m!109159))

(declare-fun m!109475 () Bool)

(assert (=> bs!4110 m!109475))

(assert (=> b!99354 d!26723))

(declare-fun b!99439 () Bool)

(declare-fun e!64807 () ListLongMap!1539)

(declare-fun call!10223 () ListLongMap!1539)

(assert (=> b!99439 (= e!64807 call!10223)))

(declare-fun bm!10215 () Bool)

(declare-fun call!10219 () Bool)

(declare-fun lt!50129 () ListLongMap!1539)

(assert (=> bm!10215 (= call!10219 (contains!804 lt!50129 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99440 () Bool)

(declare-fun e!64803 () Bool)

(declare-fun e!64809 () Bool)

(assert (=> b!99440 (= e!64803 e!64809)))

(declare-fun res!49950 () Bool)

(assert (=> b!99440 (= res!49950 call!10219)))

(assert (=> b!99440 (=> (not res!49950) (not e!64809))))

(declare-fun b!99441 () Bool)

(assert (=> b!99441 (= e!64803 (not call!10219))))

(declare-fun b!99443 () Bool)

(declare-fun e!64811 () Unit!2999)

(declare-fun Unit!3009 () Unit!2999)

(assert (=> b!99443 (= e!64811 Unit!3009)))

(declare-fun b!99444 () Bool)

(declare-fun e!64802 () ListLongMap!1539)

(assert (=> b!99444 (= e!64802 call!10223)))

(declare-fun b!99445 () Bool)

(declare-fun lt!50117 () Unit!2999)

(assert (=> b!99445 (= e!64811 lt!50117)))

(declare-fun lt!50137 () ListLongMap!1539)

(assert (=> b!99445 (= lt!50137 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50119 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50119 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50118 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50118 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50123 () Unit!2999)

(assert (=> b!99445 (= lt!50123 (addStillContains!69 lt!50137 lt!50119 (zeroValue!2383 newMap!16) lt!50118))))

(assert (=> b!99445 (contains!804 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) lt!50118)))

(declare-fun lt!50126 () Unit!2999)

(assert (=> b!99445 (= lt!50126 lt!50123)))

(declare-fun lt!50127 () ListLongMap!1539)

(assert (=> b!99445 (= lt!50127 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50132 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50132 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50134 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50134 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50128 () Unit!2999)

(assert (=> b!99445 (= lt!50128 (addApplyDifferent!69 lt!50127 lt!50132 (minValue!2383 newMap!16) lt!50134))))

(assert (=> b!99445 (= (apply!93 (+!136 lt!50127 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) lt!50134) (apply!93 lt!50127 lt!50134))))

(declare-fun lt!50122 () Unit!2999)

(assert (=> b!99445 (= lt!50122 lt!50128)))

(declare-fun lt!50124 () ListLongMap!1539)

(assert (=> b!99445 (= lt!50124 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50135 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50135 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50121 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50121 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50120 () Unit!2999)

(assert (=> b!99445 (= lt!50120 (addApplyDifferent!69 lt!50124 lt!50135 (zeroValue!2383 newMap!16) lt!50121))))

(assert (=> b!99445 (= (apply!93 (+!136 lt!50124 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) lt!50121) (apply!93 lt!50124 lt!50121))))

(declare-fun lt!50136 () Unit!2999)

(assert (=> b!99445 (= lt!50136 lt!50120)))

(declare-fun lt!50125 () ListLongMap!1539)

(assert (=> b!99445 (= lt!50125 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50133 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50133 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50138 () (_ BitVec 64))

(assert (=> b!99445 (= lt!50138 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99445 (= lt!50117 (addApplyDifferent!69 lt!50125 lt!50133 (minValue!2383 newMap!16) lt!50138))))

(assert (=> b!99445 (= (apply!93 (+!136 lt!50125 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) lt!50138) (apply!93 lt!50125 lt!50138))))

(declare-fun b!99446 () Bool)

(declare-fun res!49957 () Bool)

(declare-fun e!64814 () Bool)

(assert (=> b!99446 (=> (not res!49957) (not e!64814))))

(declare-fun e!64810 () Bool)

(assert (=> b!99446 (= res!49957 e!64810)))

(declare-fun res!49954 () Bool)

(assert (=> b!99446 (=> res!49954 e!64810)))

(declare-fun e!64805 () Bool)

(assert (=> b!99446 (= res!49954 (not e!64805))))

(declare-fun res!49949 () Bool)

(assert (=> b!99446 (=> (not res!49949) (not e!64805))))

(assert (=> b!99446 (= res!49949 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99447 () Bool)

(declare-fun e!64813 () Bool)

(assert (=> b!99447 (= e!64813 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99448 () Bool)

(declare-fun e!64804 () Bool)

(declare-fun call!10220 () Bool)

(assert (=> b!99448 (= e!64804 (not call!10220))))

(declare-fun bm!10216 () Bool)

(declare-fun call!10222 () ListLongMap!1539)

(declare-fun call!10221 () ListLongMap!1539)

(assert (=> bm!10216 (= call!10222 call!10221)))

(declare-fun c!16971 () Bool)

(declare-fun call!10224 () ListLongMap!1539)

(declare-fun call!10218 () ListLongMap!1539)

(declare-fun bm!10217 () Bool)

(declare-fun c!16967 () Bool)

(assert (=> bm!10217 (= call!10224 (+!136 (ite c!16967 call!10221 (ite c!16971 call!10222 call!10218)) (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99449 () Bool)

(declare-fun e!64812 () Bool)

(assert (=> b!99449 (= e!64812 (= (apply!93 lt!50129 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99450 () Bool)

(declare-fun c!16966 () Bool)

(assert (=> b!99450 (= c!16966 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99450 (= e!64802 e!64807)))

(declare-fun b!99451 () Bool)

(declare-fun e!64808 () ListLongMap!1539)

(assert (=> b!99451 (= e!64808 e!64802)))

(assert (=> b!99451 (= c!16971 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10218 () Bool)

(assert (=> bm!10218 (= call!10220 (contains!804 lt!50129 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99452 () Bool)

(assert (=> b!99452 (= e!64814 e!64804)))

(declare-fun c!16970 () Bool)

(assert (=> b!99452 (= c!16970 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99453 () Bool)

(assert (=> b!99453 (= e!64805 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99454 () Bool)

(declare-fun res!49952 () Bool)

(assert (=> b!99454 (=> (not res!49952) (not e!64814))))

(assert (=> b!99454 (= res!49952 e!64803)))

(declare-fun c!16969 () Bool)

(assert (=> b!99454 (= c!16969 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10219 () Bool)

(assert (=> bm!10219 (= call!10218 call!10222)))

(declare-fun b!99455 () Bool)

(assert (=> b!99455 (= e!64809 (= (apply!93 lt!50129 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10220 () Bool)

(assert (=> bm!10220 (= call!10221 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!26725 () Bool)

(assert (=> d!26725 e!64814))

(declare-fun res!49955 () Bool)

(assert (=> d!26725 (=> (not res!49955) (not e!64814))))

(assert (=> d!26725 (= res!49955 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50131 () ListLongMap!1539)

(assert (=> d!26725 (= lt!50129 lt!50131)))

(declare-fun lt!50130 () Unit!2999)

(assert (=> d!26725 (= lt!50130 e!64811)))

(declare-fun c!16968 () Bool)

(assert (=> d!26725 (= c!16968 e!64813)))

(declare-fun res!49951 () Bool)

(assert (=> d!26725 (=> (not res!49951) (not e!64813))))

(assert (=> d!26725 (= res!49951 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26725 (= lt!50131 e!64808)))

(assert (=> d!26725 (= c!16967 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26725 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26725 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50129)))

(declare-fun b!99442 () Bool)

(declare-fun e!64806 () Bool)

(assert (=> b!99442 (= e!64806 (= (apply!93 lt!50129 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99442 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (_values!2485 newMap!16))))))

(assert (=> b!99442 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99456 () Bool)

(assert (=> b!99456 (= e!64808 (+!136 call!10224 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10221 () Bool)

(assert (=> bm!10221 (= call!10223 call!10224)))

(declare-fun b!99457 () Bool)

(assert (=> b!99457 (= e!64807 call!10218)))

(declare-fun b!99458 () Bool)

(assert (=> b!99458 (= e!64804 e!64812)))

(declare-fun res!49953 () Bool)

(assert (=> b!99458 (= res!49953 call!10220)))

(assert (=> b!99458 (=> (not res!49953) (not e!64812))))

(declare-fun b!99459 () Bool)

(assert (=> b!99459 (= e!64810 e!64806)))

(declare-fun res!49956 () Bool)

(assert (=> b!99459 (=> (not res!49956) (not e!64806))))

(assert (=> b!99459 (= res!49956 (contains!804 lt!50129 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99459 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!26725 c!16967) b!99456))

(assert (= (and d!26725 (not c!16967)) b!99451))

(assert (= (and b!99451 c!16971) b!99444))

(assert (= (and b!99451 (not c!16971)) b!99450))

(assert (= (and b!99450 c!16966) b!99439))

(assert (= (and b!99450 (not c!16966)) b!99457))

(assert (= (or b!99439 b!99457) bm!10219))

(assert (= (or b!99444 bm!10219) bm!10216))

(assert (= (or b!99444 b!99439) bm!10221))

(assert (= (or b!99456 bm!10216) bm!10220))

(assert (= (or b!99456 bm!10221) bm!10217))

(assert (= (and d!26725 res!49951) b!99447))

(assert (= (and d!26725 c!16968) b!99445))

(assert (= (and d!26725 (not c!16968)) b!99443))

(assert (= (and d!26725 res!49955) b!99446))

(assert (= (and b!99446 res!49949) b!99453))

(assert (= (and b!99446 (not res!49954)) b!99459))

(assert (= (and b!99459 res!49956) b!99442))

(assert (= (and b!99446 res!49957) b!99454))

(assert (= (and b!99454 c!16969) b!99440))

(assert (= (and b!99454 (not c!16969)) b!99441))

(assert (= (and b!99440 res!49950) b!99455))

(assert (= (or b!99440 b!99441) bm!10215))

(assert (= (and b!99454 res!49952) b!99452))

(assert (= (and b!99452 c!16970) b!99458))

(assert (= (and b!99452 (not c!16970)) b!99448))

(assert (= (and b!99458 res!49953) b!99449))

(assert (= (or b!99458 b!99448) bm!10218))

(declare-fun b_lambda!4439 () Bool)

(assert (=> (not b_lambda!4439) (not b!99442)))

(assert (=> b!99442 t!5564))

(declare-fun b_and!6119 () Bool)

(assert (= b_and!6115 (and (=> t!5564 result!3303) b_and!6119)))

(assert (=> b!99442 t!5566))

(declare-fun b_and!6121 () Bool)

(assert (= b_and!6117 (and (=> t!5566 result!3305) b_and!6121)))

(assert (=> b!99442 m!109397))

(declare-fun m!109477 () Bool)

(assert (=> b!99442 m!109477))

(assert (=> b!99442 m!109401))

(assert (=> b!99442 m!109477))

(assert (=> b!99442 m!109401))

(declare-fun m!109479 () Bool)

(assert (=> b!99442 m!109479))

(assert (=> b!99442 m!109397))

(declare-fun m!109481 () Bool)

(assert (=> b!99442 m!109481))

(declare-fun m!109483 () Bool)

(assert (=> b!99455 m!109483))

(declare-fun m!109485 () Bool)

(assert (=> bm!10220 m!109485))

(assert (=> b!99453 m!109397))

(assert (=> b!99453 m!109397))

(assert (=> b!99453 m!109411))

(assert (=> b!99447 m!109397))

(assert (=> b!99447 m!109397))

(assert (=> b!99447 m!109411))

(assert (=> d!26725 m!109413))

(declare-fun m!109487 () Bool)

(assert (=> bm!10217 m!109487))

(declare-fun m!109489 () Bool)

(assert (=> b!99449 m!109489))

(assert (=> b!99459 m!109397))

(assert (=> b!99459 m!109397))

(declare-fun m!109491 () Bool)

(assert (=> b!99459 m!109491))

(declare-fun m!109493 () Bool)

(assert (=> bm!10215 m!109493))

(assert (=> b!99445 m!109397))

(declare-fun m!109495 () Bool)

(assert (=> b!99445 m!109495))

(declare-fun m!109497 () Bool)

(assert (=> b!99445 m!109497))

(declare-fun m!109499 () Bool)

(assert (=> b!99445 m!109499))

(declare-fun m!109501 () Bool)

(assert (=> b!99445 m!109501))

(declare-fun m!109503 () Bool)

(assert (=> b!99445 m!109503))

(declare-fun m!109505 () Bool)

(assert (=> b!99445 m!109505))

(declare-fun m!109507 () Bool)

(assert (=> b!99445 m!109507))

(declare-fun m!109509 () Bool)

(assert (=> b!99445 m!109509))

(declare-fun m!109511 () Bool)

(assert (=> b!99445 m!109511))

(declare-fun m!109513 () Bool)

(assert (=> b!99445 m!109513))

(assert (=> b!99445 m!109511))

(declare-fun m!109515 () Bool)

(assert (=> b!99445 m!109515))

(declare-fun m!109517 () Bool)

(assert (=> b!99445 m!109517))

(assert (=> b!99445 m!109505))

(declare-fun m!109519 () Bool)

(assert (=> b!99445 m!109519))

(declare-fun m!109521 () Bool)

(assert (=> b!99445 m!109521))

(assert (=> b!99445 m!109485))

(assert (=> b!99445 m!109517))

(declare-fun m!109523 () Bool)

(assert (=> b!99445 m!109523))

(assert (=> b!99445 m!109495))

(declare-fun m!109525 () Bool)

(assert (=> b!99456 m!109525))

(declare-fun m!109527 () Bool)

(assert (=> bm!10218 m!109527))

(assert (=> d!26677 d!26725))

(declare-fun d!26727 () Bool)

(declare-fun res!49958 () Bool)

(declare-fun e!64815 () Bool)

(assert (=> d!26727 (=> (not res!49958) (not e!64815))))

(assert (=> d!26727 (= res!49958 (simpleValid!69 (v!2816 (underlying!340 thiss!992))))))

(assert (=> d!26727 (= (valid!389 (v!2816 (underlying!340 thiss!992))) e!64815)))

(declare-fun b!99460 () Bool)

(declare-fun res!49959 () Bool)

(assert (=> b!99460 (=> (not res!49959) (not e!64815))))

(assert (=> b!99460 (= res!49959 (= (arrayCountValidKeys!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))) (_size!478 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99461 () Bool)

(declare-fun res!49960 () Bool)

(assert (=> b!99461 (=> (not res!49960) (not e!64815))))

(assert (=> b!99461 (= res!49960 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99462 () Bool)

(assert (=> b!99462 (= e!64815 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 Nil!1581))))

(assert (= (and d!26727 res!49958) b!99460))

(assert (= (and b!99460 res!49959) b!99461))

(assert (= (and b!99461 res!49960) b!99462))

(declare-fun m!109529 () Bool)

(assert (=> d!26727 m!109529))

(declare-fun m!109531 () Bool)

(assert (=> b!99460 m!109531))

(declare-fun m!109533 () Bool)

(assert (=> b!99461 m!109533))

(declare-fun m!109535 () Bool)

(assert (=> b!99462 m!109535))

(assert (=> d!26695 d!26727))

(declare-fun d!26729 () Bool)

(declare-fun e!64816 () Bool)

(assert (=> d!26729 e!64816))

(declare-fun res!49961 () Bool)

(assert (=> d!26729 (=> res!49961 e!64816)))

(declare-fun lt!50142 () Bool)

(assert (=> d!26729 (= res!49961 (not lt!50142))))

(declare-fun lt!50140 () Bool)

(assert (=> d!26729 (= lt!50142 lt!50140)))

(declare-fun lt!50139 () Unit!2999)

(declare-fun e!64817 () Unit!2999)

(assert (=> d!26729 (= lt!50139 e!64817)))

(declare-fun c!16972 () Bool)

(assert (=> d!26729 (= c!16972 lt!50140)))

(assert (=> d!26729 (= lt!50140 (containsKey!155 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26729 (= (contains!804 call!10189 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50142)))

(declare-fun b!99463 () Bool)

(declare-fun lt!50141 () Unit!2999)

(assert (=> b!99463 (= e!64817 lt!50141)))

(assert (=> b!99463 (= lt!50141 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!99463 (isDefined!104 (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99464 () Bool)

(declare-fun Unit!3010 () Unit!2999)

(assert (=> b!99464 (= e!64817 Unit!3010)))

(declare-fun b!99465 () Bool)

(assert (=> b!99465 (= e!64816 (isDefined!104 (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (= (and d!26729 c!16972) b!99463))

(assert (= (and d!26729 (not c!16972)) b!99464))

(assert (= (and d!26729 (not res!49961)) b!99465))

(assert (=> d!26729 m!109133))

(declare-fun m!109537 () Bool)

(assert (=> d!26729 m!109537))

(assert (=> b!99463 m!109133))

(declare-fun m!109539 () Bool)

(assert (=> b!99463 m!109539))

(assert (=> b!99463 m!109133))

(declare-fun m!109541 () Bool)

(assert (=> b!99463 m!109541))

(assert (=> b!99463 m!109541))

(declare-fun m!109543 () Bool)

(assert (=> b!99463 m!109543))

(assert (=> b!99465 m!109133))

(assert (=> b!99465 m!109541))

(assert (=> b!99465 m!109541))

(assert (=> b!99465 m!109543))

(assert (=> b!99340 d!26729))

(declare-fun d!26731 () Bool)

(declare-fun e!64818 () Bool)

(assert (=> d!26731 e!64818))

(declare-fun res!49962 () Bool)

(assert (=> d!26731 (=> res!49962 e!64818)))

(declare-fun lt!50146 () Bool)

(assert (=> d!26731 (= res!49962 (not lt!50146))))

(declare-fun lt!50144 () Bool)

(assert (=> d!26731 (= lt!50146 lt!50144)))

(declare-fun lt!50143 () Unit!2999)

(declare-fun e!64819 () Unit!2999)

(assert (=> d!26731 (= lt!50143 e!64819)))

(declare-fun c!16973 () Bool)

(assert (=> d!26731 (= c!16973 lt!50144)))

(assert (=> d!26731 (= lt!50144 (containsKey!155 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26731 (= (contains!804 lt!49957 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50146)))

(declare-fun b!99466 () Bool)

(declare-fun lt!50145 () Unit!2999)

(assert (=> b!99466 (= e!64819 lt!50145)))

(assert (=> b!99466 (= lt!50145 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99466 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99467 () Bool)

(declare-fun Unit!3011 () Unit!2999)

(assert (=> b!99467 (= e!64819 Unit!3011)))

(declare-fun b!99468 () Bool)

(assert (=> b!99468 (= e!64818 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26731 c!16973) b!99466))

(assert (= (and d!26731 (not c!16973)) b!99467))

(assert (= (and d!26731 (not res!49962)) b!99468))

(declare-fun m!109545 () Bool)

(assert (=> d!26731 m!109545))

(declare-fun m!109547 () Bool)

(assert (=> b!99466 m!109547))

(declare-fun m!109549 () Bool)

(assert (=> b!99466 m!109549))

(assert (=> b!99466 m!109549))

(declare-fun m!109551 () Bool)

(assert (=> b!99466 m!109551))

(assert (=> b!99468 m!109549))

(assert (=> b!99468 m!109549))

(assert (=> b!99468 m!109551))

(assert (=> bm!10126 d!26731))

(declare-fun bm!10224 () Bool)

(declare-fun call!10227 () ListLongMap!1539)

(assert (=> bm!10224 (= call!10227 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99494 () Bool)

(declare-fun e!64837 () ListLongMap!1539)

(declare-fun e!64836 () ListLongMap!1539)

(assert (=> b!99494 (= e!64837 e!64836)))

(declare-fun c!16983 () Bool)

(assert (=> b!99494 (= c!16983 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99495 () Bool)

(declare-fun e!64838 () Bool)

(declare-fun e!64834 () Bool)

(assert (=> b!99495 (= e!64838 e!64834)))

(declare-fun c!16984 () Bool)

(declare-fun e!64839 () Bool)

(assert (=> b!99495 (= c!16984 e!64839)))

(declare-fun res!49973 () Bool)

(assert (=> b!99495 (=> (not res!49973) (not e!64839))))

(assert (=> b!99495 (= res!49973 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99496 () Bool)

(assert (=> b!99496 (= e!64836 call!10227)))

(declare-fun b!99497 () Bool)

(declare-fun lt!50165 () Unit!2999)

(declare-fun lt!50166 () Unit!2999)

(assert (=> b!99497 (= lt!50165 lt!50166)))

(declare-fun lt!50167 () (_ BitVec 64))

(declare-fun lt!50161 () ListLongMap!1539)

(declare-fun lt!50162 () V!3163)

(declare-fun lt!50164 () (_ BitVec 64))

(assert (=> b!99497 (not (contains!804 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162)) lt!50167))))

(declare-fun addStillNotContains!41 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> b!99497 (= lt!50166 (addStillNotContains!41 lt!50161 lt!50164 lt!50162 lt!50167))))

(assert (=> b!99497 (= lt!50167 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99497 (= lt!50162 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99497 (= lt!50164 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99497 (= lt!50161 call!10227)))

(assert (=> b!99497 (= e!64836 (+!136 call!10227 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99498 () Bool)

(assert (=> b!99498 (= e!64837 (ListLongMap!1540 Nil!1580))))

(declare-fun b!99499 () Bool)

(assert (=> b!99499 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> b!99499 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun lt!50163 () ListLongMap!1539)

(declare-fun e!64835 () Bool)

(assert (=> b!99499 (= e!64835 (= (apply!93 lt!50163 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99500 () Bool)

(declare-fun res!49974 () Bool)

(assert (=> b!99500 (=> (not res!49974) (not e!64838))))

(assert (=> b!99500 (= res!49974 (not (contains!804 lt!50163 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!26733 () Bool)

(assert (=> d!26733 e!64838))

(declare-fun res!49972 () Bool)

(assert (=> d!26733 (=> (not res!49972) (not e!64838))))

(assert (=> d!26733 (= res!49972 (not (contains!804 lt!50163 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26733 (= lt!50163 e!64837)))

(declare-fun c!16985 () Bool)

(assert (=> d!26733 (= c!16985 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26733 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992))))))

(assert (=> d!26733 (= (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) lt!50163)))

(declare-fun b!99493 () Bool)

(assert (=> b!99493 (= e!64834 e!64835)))

(assert (=> b!99493 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun res!49971 () Bool)

(assert (=> b!99493 (= res!49971 (contains!804 lt!50163 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99493 (=> (not res!49971) (not e!64835))))

(declare-fun b!99501 () Bool)

(declare-fun e!64840 () Bool)

(assert (=> b!99501 (= e!64834 e!64840)))

(declare-fun c!16982 () Bool)

(assert (=> b!99501 (= c!16982 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99502 () Bool)

(assert (=> b!99502 (= e!64840 (= lt!50163 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99503 () Bool)

(declare-fun isEmpty!359 (ListLongMap!1539) Bool)

(assert (=> b!99503 (= e!64840 (isEmpty!359 lt!50163))))

(declare-fun b!99504 () Bool)

(assert (=> b!99504 (= e!64839 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99504 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(assert (= (and d!26733 c!16985) b!99498))

(assert (= (and d!26733 (not c!16985)) b!99494))

(assert (= (and b!99494 c!16983) b!99497))

(assert (= (and b!99494 (not c!16983)) b!99496))

(assert (= (or b!99497 b!99496) bm!10224))

(assert (= (and d!26733 res!49972) b!99500))

(assert (= (and b!99500 res!49974) b!99495))

(assert (= (and b!99495 res!49973) b!99504))

(assert (= (and b!99495 c!16984) b!99493))

(assert (= (and b!99495 (not c!16984)) b!99501))

(assert (= (and b!99493 res!49971) b!99499))

(assert (= (and b!99501 c!16982) b!99502))

(assert (= (and b!99501 (not c!16982)) b!99503))

(declare-fun b_lambda!4441 () Bool)

(assert (=> (not b_lambda!4441) (not b!99497)))

(assert (=> b!99497 t!5554))

(declare-fun b_and!6123 () Bool)

(assert (= b_and!6119 (and (=> t!5554 result!3289) b_and!6123)))

(assert (=> b!99497 t!5556))

(declare-fun b_and!6125 () Bool)

(assert (= b_and!6121 (and (=> t!5556 result!3293) b_and!6125)))

(declare-fun b_lambda!4443 () Bool)

(assert (=> (not b_lambda!4443) (not b!99499)))

(assert (=> b!99499 t!5554))

(declare-fun b_and!6127 () Bool)

(assert (= b_and!6123 (and (=> t!5554 result!3289) b_and!6127)))

(assert (=> b!99499 t!5556))

(declare-fun b_and!6129 () Bool)

(assert (= b_and!6125 (and (=> t!5556 result!3293) b_and!6129)))

(assert (=> b!99499 m!109223))

(assert (=> b!99499 m!109157))

(assert (=> b!99499 m!109225))

(assert (=> b!99499 m!109223))

(declare-fun m!109553 () Bool)

(assert (=> b!99499 m!109553))

(assert (=> b!99499 m!109225))

(assert (=> b!99499 m!109157))

(assert (=> b!99499 m!109227))

(declare-fun m!109555 () Bool)

(assert (=> b!99502 m!109555))

(assert (=> b!99494 m!109223))

(assert (=> b!99494 m!109223))

(assert (=> b!99494 m!109235))

(declare-fun m!109557 () Bool)

(assert (=> b!99497 m!109557))

(declare-fun m!109559 () Bool)

(assert (=> b!99497 m!109559))

(assert (=> b!99497 m!109157))

(assert (=> b!99497 m!109557))

(assert (=> b!99497 m!109225))

(declare-fun m!109561 () Bool)

(assert (=> b!99497 m!109561))

(assert (=> b!99497 m!109225))

(assert (=> b!99497 m!109157))

(assert (=> b!99497 m!109227))

(assert (=> b!99497 m!109223))

(declare-fun m!109563 () Bool)

(assert (=> b!99497 m!109563))

(declare-fun m!109565 () Bool)

(assert (=> d!26733 m!109565))

(assert (=> d!26733 m!109165))

(assert (=> b!99504 m!109223))

(assert (=> b!99504 m!109223))

(assert (=> b!99504 m!109235))

(assert (=> b!99493 m!109223))

(assert (=> b!99493 m!109223))

(declare-fun m!109567 () Bool)

(assert (=> b!99493 m!109567))

(declare-fun m!109569 () Bool)

(assert (=> b!99500 m!109569))

(declare-fun m!109571 () Bool)

(assert (=> b!99503 m!109571))

(assert (=> bm!10224 m!109555))

(assert (=> bm!10131 d!26733))

(declare-fun b!99513 () Bool)

(declare-fun e!64849 () Bool)

(declare-fun e!64848 () Bool)

(assert (=> b!99513 (= e!64849 e!64848)))

(declare-fun c!16988 () Bool)

(assert (=> b!99513 (= c!16988 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26735 () Bool)

(declare-fun res!49980 () Bool)

(assert (=> d!26735 (=> res!49980 e!64849)))

(assert (=> d!26735 (= res!49980 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26735 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 newMap!16) (mask!6609 newMap!16)) e!64849)))

(declare-fun b!99514 () Bool)

(declare-fun e!64847 () Bool)

(declare-fun call!10230 () Bool)

(assert (=> b!99514 (= e!64847 call!10230)))

(declare-fun b!99515 () Bool)

(assert (=> b!99515 (= e!64848 e!64847)))

(declare-fun lt!50174 () (_ BitVec 64))

(assert (=> b!99515 (= lt!50174 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50176 () Unit!2999)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4255 (_ BitVec 64) (_ BitVec 32)) Unit!2999)

(assert (=> b!99515 (= lt!50176 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000))))

(assert (=> b!99515 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000)))

(declare-fun lt!50175 () Unit!2999)

(assert (=> b!99515 (= lt!50175 lt!50176)))

(declare-fun res!49979 () Bool)

(assert (=> b!99515 (= res!49979 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)) (Found!254 #b00000000000000000000000000000000)))))

(assert (=> b!99515 (=> (not res!49979) (not e!64847))))

(declare-fun bm!10227 () Bool)

(assert (=> bm!10227 (= call!10230 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99516 () Bool)

(assert (=> b!99516 (= e!64848 call!10230)))

(assert (= (and d!26735 (not res!49980)) b!99513))

(assert (= (and b!99513 c!16988) b!99515))

(assert (= (and b!99513 (not c!16988)) b!99516))

(assert (= (and b!99515 res!49979) b!99514))

(assert (= (or b!99514 b!99516) bm!10227))

(assert (=> b!99513 m!109397))

(assert (=> b!99513 m!109397))

(assert (=> b!99513 m!109411))

(assert (=> b!99515 m!109397))

(declare-fun m!109573 () Bool)

(assert (=> b!99515 m!109573))

(declare-fun m!109575 () Bool)

(assert (=> b!99515 m!109575))

(assert (=> b!99515 m!109397))

(declare-fun m!109577 () Bool)

(assert (=> b!99515 m!109577))

(declare-fun m!109579 () Bool)

(assert (=> bm!10227 m!109579))

(assert (=> b!99389 d!26735))

(declare-fun d!26737 () Bool)

(assert (=> d!26737 (= (inRange!0 (ite c!16951 (ite c!16945 (index!3161 lt!50063) (ite c!16943 (index!3160 lt!50064) (index!3163 lt!50064))) (ite c!16955 (index!3161 lt!50046) (ite c!16950 (index!3160 lt!50054) (index!3163 lt!50054)))) (mask!6609 newMap!16)) (and (bvsge (ite c!16951 (ite c!16945 (index!3161 lt!50063) (ite c!16943 (index!3160 lt!50064) (index!3163 lt!50064))) (ite c!16955 (index!3161 lt!50046) (ite c!16950 (index!3160 lt!50054) (index!3163 lt!50054)))) #b00000000000000000000000000000000) (bvslt (ite c!16951 (ite c!16945 (index!3161 lt!50063) (ite c!16943 (index!3160 lt!50064) (index!3163 lt!50064))) (ite c!16955 (index!3161 lt!50046) (ite c!16950 (index!3160 lt!50054) (index!3163 lt!50054)))) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10198 d!26737))

(declare-fun d!26739 () Bool)

(assert (=> d!26739 (= (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99213 d!26739))

(assert (=> d!26679 d!26675))

(declare-fun c!16994 () Bool)

(declare-fun lt!50182 () SeekEntryResult!254)

(declare-fun call!10236 () Bool)

(declare-fun bm!10232 () Bool)

(assert (=> bm!10232 (= call!10236 (inRange!0 (ite c!16994 (index!3160 lt!50182) (index!3163 lt!50182)) (mask!6609 newMap!16)))))

(declare-fun b!99533 () Bool)

(declare-fun e!64859 () Bool)

(declare-fun e!64860 () Bool)

(assert (=> b!99533 (= e!64859 e!64860)))

(declare-fun res!49991 () Bool)

(assert (=> b!99533 (= res!49991 call!10236)))

(assert (=> b!99533 (=> (not res!49991) (not e!64860))))

(declare-fun b!99534 () Bool)

(assert (=> b!99534 (and (bvsge (index!3160 lt!50182) #b00000000000000000000000000000000) (bvslt (index!3160 lt!50182) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!49992 () Bool)

(assert (=> b!99534 (= res!49992 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50182)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99534 (=> (not res!49992) (not e!64860))))

(declare-fun d!26741 () Bool)

(assert (=> d!26741 e!64859))

(assert (=> d!26741 (= c!16994 ((_ is MissingZero!254) lt!50182))))

(assert (=> d!26741 (= lt!50182 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun lt!50181 () Unit!2999)

(declare-fun choose!603 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!2999)

(assert (=> d!26741 (= lt!50181 (choose!603 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26741 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26741 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) lt!50181)))

(declare-fun b!99535 () Bool)

(declare-fun e!64861 () Bool)

(declare-fun call!10235 () Bool)

(assert (=> b!99535 (= e!64861 (not call!10235))))

(declare-fun b!99536 () Bool)

(declare-fun res!49990 () Bool)

(assert (=> b!99536 (=> (not res!49990) (not e!64861))))

(assert (=> b!99536 (= res!49990 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50182)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99536 (and (bvsge (index!3163 lt!50182) #b00000000000000000000000000000000) (bvslt (index!3163 lt!50182) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99537 () Bool)

(declare-fun e!64858 () Bool)

(assert (=> b!99537 (= e!64858 ((_ is Undefined!254) lt!50182))))

(declare-fun b!99538 () Bool)

(declare-fun res!49989 () Bool)

(assert (=> b!99538 (=> (not res!49989) (not e!64861))))

(assert (=> b!99538 (= res!49989 call!10236)))

(assert (=> b!99538 (= e!64858 e!64861)))

(declare-fun b!99539 () Bool)

(assert (=> b!99539 (= e!64859 e!64858)))

(declare-fun c!16993 () Bool)

(assert (=> b!99539 (= c!16993 ((_ is MissingVacant!254) lt!50182))))

(declare-fun bm!10233 () Bool)

(assert (=> bm!10233 (= call!10235 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99540 () Bool)

(assert (=> b!99540 (= e!64860 (not call!10235))))

(assert (= (and d!26741 c!16994) b!99533))

(assert (= (and d!26741 (not c!16994)) b!99539))

(assert (= (and b!99533 res!49991) b!99534))

(assert (= (and b!99534 res!49992) b!99540))

(assert (= (and b!99539 c!16993) b!99538))

(assert (= (and b!99539 (not c!16993)) b!99537))

(assert (= (and b!99538 res!49989) b!99536))

(assert (= (and b!99536 res!49990) b!99535))

(assert (= (or b!99533 b!99538) bm!10232))

(assert (= (or b!99540 b!99535) bm!10233))

(declare-fun m!109581 () Bool)

(assert (=> b!99536 m!109581))

(assert (=> d!26741 m!109133))

(assert (=> d!26741 m!109315))

(assert (=> d!26741 m!109133))

(declare-fun m!109583 () Bool)

(assert (=> d!26741 m!109583))

(assert (=> d!26741 m!109413))

(declare-fun m!109585 () Bool)

(assert (=> b!99534 m!109585))

(assert (=> bm!10233 m!109133))

(assert (=> bm!10233 m!109311))

(declare-fun m!109587 () Bool)

(assert (=> bm!10232 m!109587))

(assert (=> bm!10194 d!26741))

(declare-fun d!26743 () Bool)

(declare-fun res!49997 () Bool)

(declare-fun e!64866 () Bool)

(assert (=> d!26743 (=> res!49997 e!64866)))

(assert (=> d!26743 (= res!49997 (and ((_ is Cons!1579) (toList!785 lt!49878)) (= (_1!1184 (h!2174 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26743 (= (containsKey!155 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!64866)))

(declare-fun b!99545 () Bool)

(declare-fun e!64867 () Bool)

(assert (=> b!99545 (= e!64866 e!64867)))

(declare-fun res!49998 () Bool)

(assert (=> b!99545 (=> (not res!49998) (not e!64867))))

(assert (=> b!99545 (= res!49998 (and (or (not ((_ is Cons!1579) (toList!785 lt!49878))) (bvsle (_1!1184 (h!2174 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) ((_ is Cons!1579) (toList!785 lt!49878)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(declare-fun b!99546 () Bool)

(assert (=> b!99546 (= e!64867 (containsKey!155 (t!5557 (toList!785 lt!49878)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!26743 (not res!49997)) b!99545))

(assert (= (and b!99545 res!49998) b!99546))

(assert (=> b!99546 m!109133))

(declare-fun m!109589 () Bool)

(assert (=> b!99546 m!109589))

(assert (=> d!26697 d!26743))

(declare-fun d!26745 () Bool)

(assert (=> d!26745 (= (map!1259 (_2!1185 lt!50053)) (getCurrentListMap!476 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun bs!4111 () Bool)

(assert (= bs!4111 d!26745))

(declare-fun m!109591 () Bool)

(assert (=> bs!4111 m!109591))

(assert (=> bm!10204 d!26745))

(declare-fun d!26747 () Bool)

(declare-fun e!64868 () Bool)

(assert (=> d!26747 e!64868))

(declare-fun res!49999 () Bool)

(assert (=> d!26747 (=> res!49999 e!64868)))

(declare-fun lt!50186 () Bool)

(assert (=> d!26747 (= res!49999 (not lt!50186))))

(declare-fun lt!50184 () Bool)

(assert (=> d!26747 (= lt!50186 lt!50184)))

(declare-fun lt!50183 () Unit!2999)

(declare-fun e!64869 () Unit!2999)

(assert (=> d!26747 (= lt!50183 e!64869)))

(declare-fun c!16995 () Bool)

(assert (=> d!26747 (= c!16995 lt!50184)))

(assert (=> d!26747 (= lt!50184 (containsKey!155 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26747 (= (contains!804 lt!49957 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50186)))

(declare-fun b!99547 () Bool)

(declare-fun lt!50185 () Unit!2999)

(assert (=> b!99547 (= e!64869 lt!50185)))

(assert (=> b!99547 (= lt!50185 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99547 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99548 () Bool)

(declare-fun Unit!3012 () Unit!2999)

(assert (=> b!99548 (= e!64869 Unit!3012)))

(declare-fun b!99549 () Bool)

(assert (=> b!99549 (= e!64868 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26747 c!16995) b!99547))

(assert (= (and d!26747 (not c!16995)) b!99548))

(assert (= (and d!26747 (not res!49999)) b!99549))

(declare-fun m!109593 () Bool)

(assert (=> d!26747 m!109593))

(declare-fun m!109595 () Bool)

(assert (=> b!99547 m!109595))

(declare-fun m!109597 () Bool)

(assert (=> b!99547 m!109597))

(assert (=> b!99547 m!109597))

(declare-fun m!109599 () Bool)

(assert (=> b!99547 m!109599))

(assert (=> b!99549 m!109597))

(assert (=> b!99549 m!109597))

(assert (=> b!99549 m!109599))

(assert (=> bm!10129 d!26747))

(declare-fun b!99559 () Bool)

(declare-fun res!50009 () Bool)

(declare-fun e!64872 () Bool)

(assert (=> b!99559 (=> (not res!50009) (not e!64872))))

(declare-fun size!2276 (LongMapFixedSize!858) (_ BitVec 32))

(assert (=> b!99559 (= res!50009 (bvsge (size!2276 newMap!16) (_size!478 newMap!16)))))

(declare-fun b!99561 () Bool)

(assert (=> b!99561 (= e!64872 (and (bvsge (extraKeys!2319 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!478 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!26749 () Bool)

(declare-fun res!50011 () Bool)

(assert (=> d!26749 (=> (not res!50011) (not e!64872))))

(assert (=> d!26749 (= res!50011 (validMask!0 (mask!6609 newMap!16)))))

(assert (=> d!26749 (= (simpleValid!69 newMap!16) e!64872)))

(declare-fun b!99558 () Bool)

(declare-fun res!50008 () Bool)

(assert (=> b!99558 (=> (not res!50008) (not e!64872))))

(assert (=> b!99558 (= res!50008 (and (= (size!2273 (_values!2485 newMap!16)) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001)) (= (size!2272 (_keys!4196 newMap!16)) (size!2273 (_values!2485 newMap!16))) (bvsge (_size!478 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!478 newMap!16) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!99560 () Bool)

(declare-fun res!50010 () Bool)

(assert (=> b!99560 (=> (not res!50010) (not e!64872))))

(assert (=> b!99560 (= res!50010 (= (size!2276 newMap!16) (bvadd (_size!478 newMap!16) (bvsdiv (bvadd (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!26749 res!50011) b!99558))

(assert (= (and b!99558 res!50008) b!99559))

(assert (= (and b!99559 res!50009) b!99560))

(assert (= (and b!99560 res!50010) b!99561))

(declare-fun m!109601 () Bool)

(assert (=> b!99559 m!109601))

(assert (=> d!26749 m!109413))

(assert (=> b!99560 m!109601))

(assert (=> d!26707 d!26749))

(declare-fun d!26751 () Bool)

(declare-fun res!50012 () Bool)

(declare-fun e!64873 () Bool)

(assert (=> d!26751 (=> res!50012 e!64873)))

(assert (=> d!26751 (= res!50012 (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26751 (= (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!64873)))

(declare-fun b!99562 () Bool)

(declare-fun e!64874 () Bool)

(assert (=> b!99562 (= e!64873 e!64874)))

(declare-fun res!50013 () Bool)

(assert (=> b!99562 (=> (not res!50013) (not e!64874))))

(assert (=> b!99562 (= res!50013 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99563 () Bool)

(assert (=> b!99563 (= e!64874 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26751 (not res!50012)) b!99562))

(assert (= (and b!99562 res!50013) b!99563))

(declare-fun m!109603 () Bool)

(assert (=> d!26751 m!109603))

(assert (=> b!99563 m!109133))

(declare-fun m!109605 () Bool)

(assert (=> b!99563 m!109605))

(assert (=> b!99225 d!26751))

(declare-fun d!26753 () Bool)

(declare-fun get!1290 (Option!157) V!3163)

(assert (=> d!26753 (= (apply!93 lt!49957 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4112 () Bool)

(assert (= bs!4112 d!26753))

(assert (=> bs!4112 m!109597))

(assert (=> bs!4112 m!109597))

(declare-fun m!109607 () Bool)

(assert (=> bs!4112 m!109607))

(assert (=> b!99209 d!26753))

(assert (=> b!99369 d!26725))

(declare-fun d!26755 () Bool)

(declare-fun isEmpty!360 (Option!157) Bool)

(assert (=> d!26755 (= (isDefined!104 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) (not (isEmpty!360 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun bs!4113 () Bool)

(assert (= bs!4113 d!26755))

(assert (=> bs!4113 m!109299))

(declare-fun m!109609 () Bool)

(assert (=> bs!4113 m!109609))

(assert (=> b!99255 d!26755))

(declare-fun b!99573 () Bool)

(declare-fun e!64879 () Option!157)

(declare-fun e!64880 () Option!157)

(assert (=> b!99573 (= e!64879 e!64880)))

(declare-fun c!17001 () Bool)

(assert (=> b!99573 (= c!17001 (and ((_ is Cons!1579) (toList!785 lt!49878)) (not (= (_1!1184 (h!2174 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun b!99575 () Bool)

(assert (=> b!99575 (= e!64880 None!155)))

(declare-fun b!99574 () Bool)

(assert (=> b!99574 (= e!64880 (getValueByKey!151 (t!5557 (toList!785 lt!49878)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun c!17000 () Bool)

(declare-fun d!26757 () Bool)

(assert (=> d!26757 (= c!17000 (and ((_ is Cons!1579) (toList!785 lt!49878)) (= (_1!1184 (h!2174 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26757 (= (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!64879)))

(declare-fun b!99572 () Bool)

(assert (=> b!99572 (= e!64879 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49878)))))))

(assert (= (and d!26757 c!17000) b!99572))

(assert (= (and d!26757 (not c!17000)) b!99573))

(assert (= (and b!99573 c!17001) b!99574))

(assert (= (and b!99573 (not c!17001)) b!99575))

(assert (=> b!99574 m!109133))

(declare-fun m!109611 () Bool)

(assert (=> b!99574 m!109611))

(assert (=> b!99255 d!26757))

(declare-fun e!64883 () Bool)

(declare-fun b!99576 () Bool)

(assert (=> b!99576 (= e!64883 (contains!805 (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99578 () Bool)

(declare-fun e!64884 () Bool)

(declare-fun call!10237 () Bool)

(assert (=> b!99578 (= e!64884 call!10237)))

(declare-fun b!99579 () Bool)

(assert (=> b!99579 (= e!64884 call!10237)))

(declare-fun d!26759 () Bool)

(declare-fun res!50014 () Bool)

(declare-fun e!64882 () Bool)

(assert (=> d!26759 (=> res!50014 e!64882)))

(assert (=> d!26759 (= res!50014 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26759 (= (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) e!64882)))

(declare-fun b!99577 () Bool)

(declare-fun e!64881 () Bool)

(assert (=> b!99577 (= e!64882 e!64881)))

(declare-fun res!50015 () Bool)

(assert (=> b!99577 (=> (not res!50015) (not e!64881))))

(assert (=> b!99577 (= res!50015 (not e!64883))))

(declare-fun res!50016 () Bool)

(assert (=> b!99577 (=> (not res!50016) (not e!64883))))

(assert (=> b!99577 (= res!50016 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99580 () Bool)

(assert (=> b!99580 (= e!64881 e!64884)))

(declare-fun c!17002 () Bool)

(assert (=> b!99580 (= c!17002 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!10234 () Bool)

(assert (=> bm!10234 (= call!10237 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17002 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581))))))

(assert (= (and d!26759 (not res!50014)) b!99577))

(assert (= (and b!99577 res!50016) b!99576))

(assert (= (and b!99577 res!50015) b!99580))

(assert (= (and b!99580 c!17002) b!99578))

(assert (= (and b!99580 (not c!17002)) b!99579))

(assert (= (or b!99578 b!99579) bm!10234))

(declare-fun m!109613 () Bool)

(assert (=> b!99576 m!109613))

(assert (=> b!99576 m!109613))

(declare-fun m!109615 () Bool)

(assert (=> b!99576 m!109615))

(assert (=> b!99577 m!109613))

(assert (=> b!99577 m!109613))

(declare-fun m!109617 () Bool)

(assert (=> b!99577 m!109617))

(assert (=> b!99580 m!109613))

(assert (=> b!99580 m!109613))

(assert (=> b!99580 m!109617))

(assert (=> bm!10234 m!109613))

(declare-fun m!109619 () Bool)

(assert (=> bm!10234 m!109619))

(assert (=> bm!10135 d!26759))

(assert (=> bm!10191 d!26677))

(declare-fun b!99593 () Bool)

(declare-fun lt!50194 () SeekEntryResult!254)

(declare-fun e!64893 () SeekEntryResult!254)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4255 (_ BitVec 32)) SeekEntryResult!254)

(assert (=> b!99593 (= e!64893 (seekKeyOrZeroReturnVacant!0 (x!13104 lt!50194) (index!3162 lt!50194) (index!3162 lt!50194) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99594 () Bool)

(declare-fun e!64891 () SeekEntryResult!254)

(assert (=> b!99594 (= e!64891 (Found!254 (index!3162 lt!50194)))))

(declare-fun b!99595 () Bool)

(assert (=> b!99595 (= e!64893 (MissingZero!254 (index!3162 lt!50194)))))

(declare-fun b!99596 () Bool)

(declare-fun c!17009 () Bool)

(declare-fun lt!50195 () (_ BitVec 64))

(assert (=> b!99596 (= c!17009 (= lt!50195 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99596 (= e!64891 e!64893)))

(declare-fun b!99597 () Bool)

(declare-fun e!64892 () SeekEntryResult!254)

(assert (=> b!99597 (= e!64892 e!64891)))

(assert (=> b!99597 (= lt!50195 (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50194)))))

(declare-fun c!17010 () Bool)

(assert (=> b!99597 (= c!17010 (= lt!50195 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99598 () Bool)

(assert (=> b!99598 (= e!64892 Undefined!254)))

(declare-fun lt!50193 () SeekEntryResult!254)

(declare-fun d!26761 () Bool)

(assert (=> d!26761 (and (or ((_ is Undefined!254) lt!50193) (not ((_ is Found!254) lt!50193)) (and (bvsge (index!3161 lt!50193) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50193) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50193) ((_ is Found!254) lt!50193) (not ((_ is MissingZero!254) lt!50193)) (and (bvsge (index!3160 lt!50193) #b00000000000000000000000000000000) (bvslt (index!3160 lt!50193) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50193) ((_ is Found!254) lt!50193) ((_ is MissingZero!254) lt!50193) (not ((_ is MissingVacant!254) lt!50193)) (and (bvsge (index!3163 lt!50193) #b00000000000000000000000000000000) (bvslt (index!3163 lt!50193) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50193) (ite ((_ is Found!254) lt!50193) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50193)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite ((_ is MissingZero!254) lt!50193) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50193)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!254) lt!50193) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50193)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26761 (= lt!50193 e!64892)))

(declare-fun c!17011 () Bool)

(assert (=> d!26761 (= c!17011 (and ((_ is Intermediate!254) lt!50194) (undefined!1066 lt!50194)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4255 (_ BitVec 32)) SeekEntryResult!254)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26761 (= lt!50194 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!26761 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26761 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50193)))

(assert (= (and d!26761 c!17011) b!99598))

(assert (= (and d!26761 (not c!17011)) b!99597))

(assert (= (and b!99597 c!17010) b!99594))

(assert (= (and b!99597 (not c!17010)) b!99596))

(assert (= (and b!99596 c!17009) b!99595))

(assert (= (and b!99596 (not c!17009)) b!99593))

(assert (=> b!99593 m!109133))

(declare-fun m!109621 () Bool)

(assert (=> b!99593 m!109621))

(declare-fun m!109623 () Bool)

(assert (=> b!99597 m!109623))

(declare-fun m!109625 () Bool)

(assert (=> d!26761 m!109625))

(assert (=> d!26761 m!109413))

(declare-fun m!109627 () Bool)

(assert (=> d!26761 m!109627))

(declare-fun m!109629 () Bool)

(assert (=> d!26761 m!109629))

(assert (=> d!26761 m!109133))

(declare-fun m!109631 () Bool)

(assert (=> d!26761 m!109631))

(assert (=> d!26761 m!109631))

(assert (=> d!26761 m!109133))

(declare-fun m!109633 () Bool)

(assert (=> d!26761 m!109633))

(assert (=> bm!10185 d!26761))

(declare-fun d!26763 () Bool)

(declare-fun e!64894 () Bool)

(assert (=> d!26763 e!64894))

(declare-fun res!50018 () Bool)

(assert (=> d!26763 (=> (not res!50018) (not e!64894))))

(declare-fun lt!50198 () ListLongMap!1539)

(assert (=> d!26763 (= res!50018 (contains!804 lt!50198 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50199 () List!1583)

(assert (=> d!26763 (= lt!50198 (ListLongMap!1540 lt!50199))))

(declare-fun lt!50196 () Unit!2999)

(declare-fun lt!50197 () Unit!2999)

(assert (=> d!26763 (= lt!50196 lt!50197)))

(assert (=> d!26763 (= (getValueByKey!151 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26763 (= lt!50197 (lemmaContainsTupThenGetReturnValue!67 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26763 (= lt!50199 (insertStrictlySorted!70 (toList!785 lt!49955) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26763 (= (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50198)))

(declare-fun b!99599 () Bool)

(declare-fun res!50017 () Bool)

(assert (=> b!99599 (=> (not res!50017) (not e!64894))))

(assert (=> b!99599 (= res!50017 (= (getValueByKey!151 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99600 () Bool)

(assert (=> b!99600 (= e!64894 (contains!806 (toList!785 lt!50198) (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26763 res!50018) b!99599))

(assert (= (and b!99599 res!50017) b!99600))

(declare-fun m!109635 () Bool)

(assert (=> d!26763 m!109635))

(declare-fun m!109637 () Bool)

(assert (=> d!26763 m!109637))

(declare-fun m!109639 () Bool)

(assert (=> d!26763 m!109639))

(declare-fun m!109641 () Bool)

(assert (=> d!26763 m!109641))

(declare-fun m!109643 () Bool)

(assert (=> b!99599 m!109643))

(declare-fun m!109645 () Bool)

(assert (=> b!99600 m!109645))

(assert (=> b!99205 d!26763))

(declare-fun d!26765 () Bool)

(assert (=> d!26765 (= (apply!93 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49949) (apply!93 lt!49952 lt!49949))))

(declare-fun lt!50202 () Unit!2999)

(declare-fun choose!604 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> d!26765 (= lt!50202 (choose!604 lt!49952 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49949))))

(declare-fun e!64897 () Bool)

(assert (=> d!26765 e!64897))

(declare-fun res!50021 () Bool)

(assert (=> d!26765 (=> (not res!50021) (not e!64897))))

(assert (=> d!26765 (= res!50021 (contains!804 lt!49952 lt!49949))))

(assert (=> d!26765 (= (addApplyDifferent!69 lt!49952 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49949) lt!50202)))

(declare-fun b!99604 () Bool)

(assert (=> b!99604 (= e!64897 (not (= lt!49949 lt!49963)))))

(assert (= (and d!26765 res!50021) b!99604))

(declare-fun m!109647 () Bool)

(assert (=> d!26765 m!109647))

(assert (=> d!26765 m!109269))

(assert (=> d!26765 m!109267))

(assert (=> d!26765 m!109273))

(declare-fun m!109649 () Bool)

(assert (=> d!26765 m!109649))

(assert (=> d!26765 m!109267))

(assert (=> b!99205 d!26765))

(declare-fun d!26767 () Bool)

(assert (=> d!26767 (= (apply!93 lt!49952 lt!49949) (get!1290 (getValueByKey!151 (toList!785 lt!49952) lt!49949)))))

(declare-fun bs!4114 () Bool)

(assert (= bs!4114 d!26767))

(declare-fun m!109651 () Bool)

(assert (=> bs!4114 m!109651))

(assert (=> bs!4114 m!109651))

(declare-fun m!109653 () Bool)

(assert (=> bs!4114 m!109653))

(assert (=> b!99205 d!26767))

(assert (=> b!99205 d!26733))

(declare-fun d!26769 () Bool)

(assert (=> d!26769 (= (apply!93 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49966) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49966)))))

(declare-fun bs!4115 () Bool)

(assert (= bs!4115 d!26769))

(declare-fun m!109655 () Bool)

(assert (=> bs!4115 m!109655))

(assert (=> bs!4115 m!109655))

(declare-fun m!109657 () Bool)

(assert (=> bs!4115 m!109657))

(assert (=> b!99205 d!26769))

(declare-fun d!26771 () Bool)

(declare-fun e!64898 () Bool)

(assert (=> d!26771 e!64898))

(declare-fun res!50022 () Bool)

(assert (=> d!26771 (=> res!50022 e!64898)))

(declare-fun lt!50206 () Bool)

(assert (=> d!26771 (= res!50022 (not lt!50206))))

(declare-fun lt!50204 () Bool)

(assert (=> d!26771 (= lt!50206 lt!50204)))

(declare-fun lt!50203 () Unit!2999)

(declare-fun e!64899 () Unit!2999)

(assert (=> d!26771 (= lt!50203 e!64899)))

(declare-fun c!17012 () Bool)

(assert (=> d!26771 (= c!17012 lt!50204)))

(assert (=> d!26771 (= lt!50204 (containsKey!155 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(assert (=> d!26771 (= (contains!804 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49946) lt!50206)))

(declare-fun b!99605 () Bool)

(declare-fun lt!50205 () Unit!2999)

(assert (=> b!99605 (= e!64899 lt!50205)))

(assert (=> b!99605 (= lt!50205 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(assert (=> b!99605 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(declare-fun b!99606 () Bool)

(declare-fun Unit!3013 () Unit!2999)

(assert (=> b!99606 (= e!64899 Unit!3013)))

(declare-fun b!99607 () Bool)

(assert (=> b!99607 (= e!64898 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946)))))

(assert (= (and d!26771 c!17012) b!99605))

(assert (= (and d!26771 (not c!17012)) b!99606))

(assert (= (and d!26771 (not res!50022)) b!99607))

(declare-fun m!109659 () Bool)

(assert (=> d!26771 m!109659))

(declare-fun m!109661 () Bool)

(assert (=> b!99605 m!109661))

(declare-fun m!109663 () Bool)

(assert (=> b!99605 m!109663))

(assert (=> b!99605 m!109663))

(declare-fun m!109665 () Bool)

(assert (=> b!99605 m!109665))

(assert (=> b!99607 m!109663))

(assert (=> b!99607 m!109663))

(assert (=> b!99607 m!109665))

(assert (=> b!99205 d!26771))

(declare-fun d!26773 () Bool)

(declare-fun e!64900 () Bool)

(assert (=> d!26773 e!64900))

(declare-fun res!50024 () Bool)

(assert (=> d!26773 (=> (not res!50024) (not e!64900))))

(declare-fun lt!50209 () ListLongMap!1539)

(assert (=> d!26773 (= res!50024 (contains!804 lt!50209 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50210 () List!1583)

(assert (=> d!26773 (= lt!50209 (ListLongMap!1540 lt!50210))))

(declare-fun lt!50207 () Unit!2999)

(declare-fun lt!50208 () Unit!2999)

(assert (=> d!26773 (= lt!50207 lt!50208)))

(assert (=> d!26773 (= (getValueByKey!151 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26773 (= lt!50208 (lemmaContainsTupThenGetReturnValue!67 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26773 (= lt!50210 (insertStrictlySorted!70 (toList!785 lt!49952) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26773 (= (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50209)))

(declare-fun b!99608 () Bool)

(declare-fun res!50023 () Bool)

(assert (=> b!99608 (=> (not res!50023) (not e!64900))))

(assert (=> b!99608 (= res!50023 (= (getValueByKey!151 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99609 () Bool)

(assert (=> b!99609 (= e!64900 (contains!806 (toList!785 lt!50209) (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26773 res!50024) b!99608))

(assert (= (and b!99608 res!50023) b!99609))

(declare-fun m!109667 () Bool)

(assert (=> d!26773 m!109667))

(declare-fun m!109669 () Bool)

(assert (=> d!26773 m!109669))

(declare-fun m!109671 () Bool)

(assert (=> d!26773 m!109671))

(declare-fun m!109673 () Bool)

(assert (=> d!26773 m!109673))

(declare-fun m!109675 () Bool)

(assert (=> b!99608 m!109675))

(declare-fun m!109677 () Bool)

(assert (=> b!99609 m!109677))

(assert (=> b!99205 d!26773))

(declare-fun d!26775 () Bool)

(assert (=> d!26775 (= (apply!93 lt!49955 lt!49962) (get!1290 (getValueByKey!151 (toList!785 lt!49955) lt!49962)))))

(declare-fun bs!4116 () Bool)

(assert (= bs!4116 d!26775))

(declare-fun m!109679 () Bool)

(assert (=> bs!4116 m!109679))

(assert (=> bs!4116 m!109679))

(declare-fun m!109681 () Bool)

(assert (=> bs!4116 m!109681))

(assert (=> b!99205 d!26775))

(declare-fun d!26777 () Bool)

(assert (=> d!26777 (= (apply!93 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49949) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49949)))))

(declare-fun bs!4117 () Bool)

(assert (= bs!4117 d!26777))

(declare-fun m!109683 () Bool)

(assert (=> bs!4117 m!109683))

(assert (=> bs!4117 m!109683))

(declare-fun m!109685 () Bool)

(assert (=> bs!4117 m!109685))

(assert (=> b!99205 d!26777))

(declare-fun d!26779 () Bool)

(assert (=> d!26779 (= (apply!93 lt!49953 lt!49966) (get!1290 (getValueByKey!151 (toList!785 lt!49953) lt!49966)))))

(declare-fun bs!4118 () Bool)

(assert (= bs!4118 d!26779))

(declare-fun m!109687 () Bool)

(assert (=> bs!4118 m!109687))

(assert (=> bs!4118 m!109687))

(declare-fun m!109689 () Bool)

(assert (=> bs!4118 m!109689))

(assert (=> b!99205 d!26779))

(declare-fun d!26781 () Bool)

(assert (=> d!26781 (= (apply!93 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49962) (apply!93 lt!49955 lt!49962))))

(declare-fun lt!50211 () Unit!2999)

(assert (=> d!26781 (= lt!50211 (choose!604 lt!49955 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49962))))

(declare-fun e!64901 () Bool)

(assert (=> d!26781 e!64901))

(declare-fun res!50025 () Bool)

(assert (=> d!26781 (=> (not res!50025) (not e!64901))))

(assert (=> d!26781 (= res!50025 (contains!804 lt!49955 lt!49962))))

(assert (=> d!26781 (= (addApplyDifferent!69 lt!49955 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49962) lt!50211)))

(declare-fun b!99610 () Bool)

(assert (=> b!99610 (= e!64901 (not (= lt!49962 lt!49960)))))

(assert (= (and d!26781 res!50025) b!99610))

(declare-fun m!109691 () Bool)

(assert (=> d!26781 m!109691))

(assert (=> d!26781 m!109259))

(assert (=> d!26781 m!109245))

(assert (=> d!26781 m!109247))

(declare-fun m!109693 () Bool)

(assert (=> d!26781 m!109693))

(assert (=> d!26781 m!109245))

(assert (=> b!99205 d!26781))

(declare-fun d!26783 () Bool)

(assert (=> d!26783 (= (apply!93 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49962) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49962)))))

(declare-fun bs!4119 () Bool)

(assert (= bs!4119 d!26783))

(declare-fun m!109695 () Bool)

(assert (=> bs!4119 m!109695))

(assert (=> bs!4119 m!109695))

(declare-fun m!109697 () Bool)

(assert (=> bs!4119 m!109697))

(assert (=> b!99205 d!26783))

(declare-fun d!26785 () Bool)

(declare-fun e!64902 () Bool)

(assert (=> d!26785 e!64902))

(declare-fun res!50027 () Bool)

(assert (=> d!26785 (=> (not res!50027) (not e!64902))))

(declare-fun lt!50214 () ListLongMap!1539)

(assert (=> d!26785 (= res!50027 (contains!804 lt!50214 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50215 () List!1583)

(assert (=> d!26785 (= lt!50214 (ListLongMap!1540 lt!50215))))

(declare-fun lt!50212 () Unit!2999)

(declare-fun lt!50213 () Unit!2999)

(assert (=> d!26785 (= lt!50212 lt!50213)))

(assert (=> d!26785 (= (getValueByKey!151 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26785 (= lt!50213 (lemmaContainsTupThenGetReturnValue!67 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26785 (= lt!50215 (insertStrictlySorted!70 (toList!785 lt!49953) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26785 (= (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50214)))

(declare-fun b!99611 () Bool)

(declare-fun res!50026 () Bool)

(assert (=> b!99611 (=> (not res!50026) (not e!64902))))

(assert (=> b!99611 (= res!50026 (= (getValueByKey!151 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99612 () Bool)

(assert (=> b!99612 (= e!64902 (contains!806 (toList!785 lt!50214) (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26785 res!50027) b!99611))

(assert (= (and b!99611 res!50026) b!99612))

(declare-fun m!109699 () Bool)

(assert (=> d!26785 m!109699))

(declare-fun m!109701 () Bool)

(assert (=> d!26785 m!109701))

(declare-fun m!109703 () Bool)

(assert (=> d!26785 m!109703))

(declare-fun m!109705 () Bool)

(assert (=> d!26785 m!109705))

(declare-fun m!109707 () Bool)

(assert (=> b!99611 m!109707))

(declare-fun m!109709 () Bool)

(assert (=> b!99612 m!109709))

(assert (=> b!99205 d!26785))

(declare-fun d!26787 () Bool)

(assert (=> d!26787 (= (apply!93 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49966) (apply!93 lt!49953 lt!49966))))

(declare-fun lt!50216 () Unit!2999)

(assert (=> d!26787 (= lt!50216 (choose!604 lt!49953 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49966))))

(declare-fun e!64903 () Bool)

(assert (=> d!26787 e!64903))

(declare-fun res!50028 () Bool)

(assert (=> d!26787 (=> (not res!50028) (not e!64903))))

(assert (=> d!26787 (= res!50028 (contains!804 lt!49953 lt!49966))))

(assert (=> d!26787 (= (addApplyDifferent!69 lt!49953 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49966) lt!50216)))

(declare-fun b!99613 () Bool)

(assert (=> b!99613 (= e!64903 (not (= lt!49966 lt!49961)))))

(assert (= (and d!26787 res!50028) b!99613))

(declare-fun m!109711 () Bool)

(assert (=> d!26787 m!109711))

(assert (=> d!26787 m!109263))

(assert (=> d!26787 m!109261))

(assert (=> d!26787 m!109265))

(declare-fun m!109713 () Bool)

(assert (=> d!26787 m!109713))

(assert (=> d!26787 m!109261))

(assert (=> b!99205 d!26787))

(declare-fun d!26789 () Bool)

(assert (=> d!26789 (contains!804 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49946)))

(declare-fun lt!50219 () Unit!2999)

(declare-fun choose!605 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> d!26789 (= lt!50219 (choose!605 lt!49965 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49946))))

(assert (=> d!26789 (contains!804 lt!49965 lt!49946)))

(assert (=> d!26789 (= (addStillContains!69 lt!49965 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49946) lt!50219)))

(declare-fun bs!4120 () Bool)

(assert (= bs!4120 d!26789))

(assert (=> bs!4120 m!109255))

(assert (=> bs!4120 m!109255))

(assert (=> bs!4120 m!109257))

(declare-fun m!109715 () Bool)

(assert (=> bs!4120 m!109715))

(declare-fun m!109717 () Bool)

(assert (=> bs!4120 m!109717))

(assert (=> b!99205 d!26789))

(declare-fun d!26791 () Bool)

(declare-fun e!64904 () Bool)

(assert (=> d!26791 e!64904))

(declare-fun res!50030 () Bool)

(assert (=> d!26791 (=> (not res!50030) (not e!64904))))

(declare-fun lt!50222 () ListLongMap!1539)

(assert (=> d!26791 (= res!50030 (contains!804 lt!50222 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50223 () List!1583)

(assert (=> d!26791 (= lt!50222 (ListLongMap!1540 lt!50223))))

(declare-fun lt!50220 () Unit!2999)

(declare-fun lt!50221 () Unit!2999)

(assert (=> d!26791 (= lt!50220 lt!50221)))

(assert (=> d!26791 (= (getValueByKey!151 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26791 (= lt!50221 (lemmaContainsTupThenGetReturnValue!67 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26791 (= lt!50223 (insertStrictlySorted!70 (toList!785 lt!49965) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26791 (= (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50222)))

(declare-fun b!99615 () Bool)

(declare-fun res!50029 () Bool)

(assert (=> b!99615 (=> (not res!50029) (not e!64904))))

(assert (=> b!99615 (= res!50029 (= (getValueByKey!151 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99616 () Bool)

(assert (=> b!99616 (= e!64904 (contains!806 (toList!785 lt!50222) (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26791 res!50030) b!99615))

(assert (= (and b!99615 res!50029) b!99616))

(declare-fun m!109719 () Bool)

(assert (=> d!26791 m!109719))

(declare-fun m!109721 () Bool)

(assert (=> d!26791 m!109721))

(declare-fun m!109723 () Bool)

(assert (=> d!26791 m!109723))

(declare-fun m!109725 () Bool)

(assert (=> d!26791 m!109725))

(declare-fun m!109727 () Bool)

(assert (=> b!99615 m!109727))

(declare-fun m!109729 () Bool)

(assert (=> b!99616 m!109729))

(assert (=> b!99205 d!26791))

(declare-fun d!26793 () Bool)

(declare-fun e!64905 () Bool)

(assert (=> d!26793 e!64905))

(declare-fun res!50032 () Bool)

(assert (=> d!26793 (=> (not res!50032) (not e!64905))))

(declare-fun lt!50226 () ListLongMap!1539)

(assert (=> d!26793 (= res!50032 (contains!804 lt!50226 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50227 () List!1583)

(assert (=> d!26793 (= lt!50226 (ListLongMap!1540 lt!50227))))

(declare-fun lt!50224 () Unit!2999)

(declare-fun lt!50225 () Unit!2999)

(assert (=> d!26793 (= lt!50224 lt!50225)))

(assert (=> d!26793 (= (getValueByKey!151 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26793 (= lt!50225 (lemmaContainsTupThenGetReturnValue!67 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26793 (= lt!50227 (insertStrictlySorted!70 (toList!785 e!64751) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26793 (= (+!136 e!64751 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50226)))

(declare-fun b!99617 () Bool)

(declare-fun res!50031 () Bool)

(assert (=> b!99617 (=> (not res!50031) (not e!64905))))

(assert (=> b!99617 (= res!50031 (= (getValueByKey!151 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!99618 () Bool)

(assert (=> b!99618 (= e!64905 (contains!806 (toList!785 lt!50226) (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26793 res!50032) b!99617))

(assert (= (and b!99617 res!50031) b!99618))

(declare-fun m!109731 () Bool)

(assert (=> d!26793 m!109731))

(declare-fun m!109733 () Bool)

(assert (=> d!26793 m!109733))

(declare-fun m!109735 () Bool)

(assert (=> d!26793 m!109735))

(declare-fun m!109737 () Bool)

(assert (=> d!26793 m!109737))

(declare-fun m!109739 () Bool)

(assert (=> b!99617 m!109739))

(declare-fun m!109741 () Bool)

(assert (=> b!99618 m!109741))

(assert (=> bm!10200 d!26793))

(assert (=> b!99243 d!26713))

(declare-fun d!26795 () Bool)

(declare-fun e!64908 () Bool)

(assert (=> d!26795 e!64908))

(declare-fun res!50035 () Bool)

(assert (=> d!26795 (=> (not res!50035) (not e!64908))))

(assert (=> d!26795 (= res!50035 (and (bvsge (index!3161 lt!50049) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50049) (size!2272 (_keys!4196 newMap!16)))))))

(declare-fun lt!50230 () Unit!2999)

(declare-fun choose!606 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) Unit!2999)

(assert (=> d!26795 (= lt!50230 (choose!606 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26795 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26795 (= (lemmaValidKeyInArrayIsInListMap!103 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (defaultEntry!2502 newMap!16)) lt!50230)))

(declare-fun b!99621 () Bool)

(assert (=> b!99621 (= e!64908 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))

(assert (= (and d!26795 res!50035) b!99621))

(declare-fun m!109743 () Bool)

(assert (=> d!26795 m!109743))

(assert (=> d!26795 m!109413))

(declare-fun m!109745 () Bool)

(assert (=> b!99621 m!109745))

(assert (=> b!99621 m!109329))

(assert (=> b!99621 m!109745))

(assert (=> b!99621 m!109329))

(declare-fun m!109747 () Bool)

(assert (=> b!99621 m!109747))

(assert (=> b!99339 d!26795))

(declare-fun d!26797 () Bool)

(declare-fun e!64911 () Bool)

(assert (=> d!26797 e!64911))

(declare-fun res!50038 () Bool)

(assert (=> d!26797 (=> (not res!50038) (not e!64911))))

(assert (=> d!26797 (= res!50038 (and (bvsge (index!3161 lt!50049) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50049) (size!2273 (_values!2485 newMap!16)))))))

(declare-fun lt!50233 () Unit!2999)

(declare-fun choose!607 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!2999)

(assert (=> d!26797 (= lt!50233 (choose!607 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26797 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26797 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50233)))

(declare-fun b!99624 () Bool)

(assert (=> b!99624 (= e!64911 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))))

(assert (= (and d!26797 res!50038) b!99624))

(assert (=> d!26797 m!109133))

(assert (=> d!26797 m!109159))

(declare-fun m!109749 () Bool)

(assert (=> d!26797 m!109749))

(assert (=> d!26797 m!109413))

(assert (=> b!99624 m!109221))

(assert (=> b!99624 m!109221))

(declare-fun m!109751 () Bool)

(assert (=> b!99624 m!109751))

(assert (=> b!99624 m!109319))

(declare-fun m!109753 () Bool)

(assert (=> b!99624 m!109753))

(assert (=> b!99339 d!26797))

(declare-fun d!26799 () Bool)

(declare-fun e!64912 () Bool)

(assert (=> d!26799 e!64912))

(declare-fun res!50039 () Bool)

(assert (=> d!26799 (=> res!50039 e!64912)))

(declare-fun lt!50237 () Bool)

(assert (=> d!26799 (= res!50039 (not lt!50237))))

(declare-fun lt!50235 () Bool)

(assert (=> d!26799 (= lt!50237 lt!50235)))

(declare-fun lt!50234 () Unit!2999)

(declare-fun e!64913 () Unit!2999)

(assert (=> d!26799 (= lt!50234 e!64913)))

(declare-fun c!17013 () Bool)

(assert (=> d!26799 (= c!17013 lt!50235)))

(assert (=> d!26799 (= lt!50235 (containsKey!155 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26799 (= (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50237)))

(declare-fun b!99625 () Bool)

(declare-fun lt!50236 () Unit!2999)

(assert (=> b!99625 (= e!64913 lt!50236)))

(assert (=> b!99625 (= lt!50236 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!99625 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99626 () Bool)

(declare-fun Unit!3014 () Unit!2999)

(assert (=> b!99626 (= e!64913 Unit!3014)))

(declare-fun b!99627 () Bool)

(assert (=> b!99627 (= e!64912 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (= (and d!26799 c!17013) b!99625))

(assert (= (and d!26799 (not c!17013)) b!99626))

(assert (= (and d!26799 (not res!50039)) b!99627))

(assert (=> d!26799 m!109133))

(declare-fun m!109755 () Bool)

(assert (=> d!26799 m!109755))

(assert (=> b!99625 m!109133))

(declare-fun m!109757 () Bool)

(assert (=> b!99625 m!109757))

(assert (=> b!99625 m!109133))

(declare-fun m!109759 () Bool)

(assert (=> b!99625 m!109759))

(assert (=> b!99625 m!109759))

(declare-fun m!109761 () Bool)

(assert (=> b!99625 m!109761))

(assert (=> b!99627 m!109133))

(assert (=> b!99627 m!109759))

(assert (=> b!99627 m!109759))

(assert (=> b!99627 m!109761))

(assert (=> b!99339 d!26799))

(assert (=> b!99339 d!26725))

(assert (=> d!26681 d!26685))

(declare-fun d!26801 () Bool)

(assert (=> d!26801 (not (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26801 true))

(declare-fun _$68!94 () Unit!2999)

(assert (=> d!26801 (= (choose!68 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581)) _$68!94)))

(declare-fun bs!4121 () Bool)

(assert (= bs!4121 d!26801))

(assert (=> bs!4121 m!109133))

(assert (=> bs!4121 m!109173))

(assert (=> d!26681 d!26801))

(declare-fun d!26803 () Bool)

(declare-fun e!64914 () Bool)

(assert (=> d!26803 e!64914))

(declare-fun res!50040 () Bool)

(assert (=> d!26803 (=> res!50040 e!64914)))

(declare-fun lt!50241 () Bool)

(assert (=> d!26803 (= res!50040 (not lt!50241))))

(declare-fun lt!50239 () Bool)

(assert (=> d!26803 (= lt!50241 lt!50239)))

(declare-fun lt!50238 () Unit!2999)

(declare-fun e!64915 () Unit!2999)

(assert (=> d!26803 (= lt!50238 e!64915)))

(declare-fun c!17014 () Bool)

(assert (=> d!26803 (= c!17014 lt!50239)))

(assert (=> d!26803 (= lt!50239 (containsKey!155 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(assert (=> d!26803 (= (contains!804 call!10187 (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))) lt!50241)))

(declare-fun b!99628 () Bool)

(declare-fun lt!50240 () Unit!2999)

(assert (=> b!99628 (= e!64915 lt!50240)))

(assert (=> b!99628 (= lt!50240 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(assert (=> b!99628 (isDefined!104 (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(declare-fun b!99629 () Bool)

(declare-fun Unit!3015 () Unit!2999)

(assert (=> b!99629 (= e!64915 Unit!3015)))

(declare-fun b!99630 () Bool)

(assert (=> b!99630 (= e!64914 (isDefined!104 (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))))

(assert (= (and d!26803 c!17014) b!99628))

(assert (= (and d!26803 (not c!17014)) b!99629))

(assert (= (and d!26803 (not res!50040)) b!99630))

(declare-fun m!109763 () Bool)

(assert (=> d!26803 m!109763))

(declare-fun m!109765 () Bool)

(assert (=> b!99628 m!109765))

(declare-fun m!109767 () Bool)

(assert (=> b!99628 m!109767))

(assert (=> b!99628 m!109767))

(declare-fun m!109769 () Bool)

(assert (=> b!99628 m!109769))

(assert (=> b!99630 m!109767))

(assert (=> b!99630 m!109767))

(assert (=> b!99630 m!109769))

(assert (=> bm!10190 d!26803))

(declare-fun d!26805 () Bool)

(assert (=> d!26805 (= (get!1288 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2815 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!99380 d!26805))

(declare-fun d!26807 () Bool)

(assert (=> d!26807 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50244 () Unit!2999)

(declare-fun choose!608 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!2999)

(assert (=> d!26807 (= lt!50244 (choose!608 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26807 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26807 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50244)))

(declare-fun bs!4122 () Bool)

(assert (= bs!4122 d!26807))

(assert (=> bs!4122 m!109221))

(declare-fun m!109771 () Bool)

(assert (=> bs!4122 m!109771))

(assert (=> bs!4122 m!109159))

(declare-fun m!109773 () Bool)

(assert (=> bs!4122 m!109773))

(assert (=> bs!4122 m!109159))

(declare-fun m!109775 () Bool)

(assert (=> bs!4122 m!109775))

(assert (=> bs!4122 m!109413))

(assert (=> bs!4122 m!109221))

(assert (=> b!99341 d!26807))

(assert (=> b!99207 d!26739))

(declare-fun d!26809 () Bool)

(assert (=> d!26809 (isDefined!104 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun lt!50247 () Unit!2999)

(declare-fun choose!609 (List!1583 (_ BitVec 64)) Unit!2999)

(assert (=> d!26809 (= lt!50247 (choose!609 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!64918 () Bool)

(assert (=> d!26809 e!64918))

(declare-fun res!50043 () Bool)

(assert (=> d!26809 (=> (not res!50043) (not e!64918))))

(declare-fun isStrictlySorted!305 (List!1583) Bool)

(assert (=> d!26809 (= res!50043 (isStrictlySorted!305 (toList!785 lt!49878)))))

(assert (=> d!26809 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50247)))

(declare-fun b!99633 () Bool)

(assert (=> b!99633 (= e!64918 (containsKey!155 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!26809 res!50043) b!99633))

(assert (=> d!26809 m!109133))

(assert (=> d!26809 m!109299))

(assert (=> d!26809 m!109299))

(assert (=> d!26809 m!109301))

(assert (=> d!26809 m!109133))

(declare-fun m!109777 () Bool)

(assert (=> d!26809 m!109777))

(declare-fun m!109779 () Bool)

(assert (=> d!26809 m!109779))

(assert (=> b!99633 m!109133))

(assert (=> b!99633 m!109295))

(assert (=> b!99253 d!26809))

(assert (=> b!99253 d!26755))

(assert (=> b!99253 d!26757))

(declare-fun d!26811 () Bool)

(declare-fun e!64921 () Bool)

(assert (=> d!26811 e!64921))

(declare-fun res!50049 () Bool)

(assert (=> d!26811 (=> (not res!50049) (not e!64921))))

(declare-fun lt!50252 () SeekEntryResult!254)

(assert (=> d!26811 (= res!50049 ((_ is Found!254) lt!50252))))

(assert (=> d!26811 (= lt!50252 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun lt!50253 () Unit!2999)

(declare-fun choose!610 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!2999)

(assert (=> d!26811 (= lt!50253 (choose!610 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26811 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26811 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) lt!50253)))

(declare-fun b!99638 () Bool)

(declare-fun res!50048 () Bool)

(assert (=> b!99638 (=> (not res!50048) (not e!64921))))

(assert (=> b!99638 (= res!50048 (inRange!0 (index!3161 lt!50252) (mask!6609 newMap!16)))))

(declare-fun b!99639 () Bool)

(assert (=> b!99639 (= e!64921 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50252)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!99639 (and (bvsge (index!3161 lt!50252) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50252) (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!26811 res!50049) b!99638))

(assert (= (and b!99638 res!50048) b!99639))

(assert (=> d!26811 m!109133))

(assert (=> d!26811 m!109315))

(assert (=> d!26811 m!109133))

(declare-fun m!109781 () Bool)

(assert (=> d!26811 m!109781))

(assert (=> d!26811 m!109413))

(declare-fun m!109783 () Bool)

(assert (=> b!99638 m!109783))

(declare-fun m!109785 () Bool)

(assert (=> b!99639 m!109785))

(assert (=> bm!10202 d!26811))

(declare-fun d!26813 () Bool)

(declare-fun e!64922 () Bool)

(assert (=> d!26813 e!64922))

(declare-fun res!50051 () Bool)

(assert (=> d!26813 (=> (not res!50051) (not e!64922))))

(declare-fun lt!50256 () ListLongMap!1539)

(assert (=> d!26813 (= res!50051 (contains!804 lt!50256 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50257 () List!1583)

(assert (=> d!26813 (= lt!50256 (ListLongMap!1540 lt!50257))))

(declare-fun lt!50254 () Unit!2999)

(declare-fun lt!50255 () Unit!2999)

(assert (=> d!26813 (= lt!50254 lt!50255)))

(assert (=> d!26813 (= (getValueByKey!151 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26813 (= lt!50255 (lemmaContainsTupThenGetReturnValue!67 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26813 (= lt!50257 (insertStrictlySorted!70 (toList!785 call!10135) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26813 (= (+!136 call!10135 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50256)))

(declare-fun b!99640 () Bool)

(declare-fun res!50050 () Bool)

(assert (=> b!99640 (=> (not res!50050) (not e!64922))))

(assert (=> b!99640 (= res!50050 (= (getValueByKey!151 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99641 () Bool)

(assert (=> b!99641 (= e!64922 (contains!806 (toList!785 lt!50256) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!26813 res!50051) b!99640))

(assert (= (and b!99640 res!50050) b!99641))

(declare-fun m!109787 () Bool)

(assert (=> d!26813 m!109787))

(declare-fun m!109789 () Bool)

(assert (=> d!26813 m!109789))

(declare-fun m!109791 () Bool)

(assert (=> d!26813 m!109791))

(declare-fun m!109793 () Bool)

(assert (=> d!26813 m!109793))

(declare-fun m!109795 () Bool)

(assert (=> b!99640 m!109795))

(declare-fun m!109797 () Bool)

(assert (=> b!99641 m!109797))

(assert (=> b!99216 d!26813))

(declare-fun b!99642 () Bool)

(declare-fun e!64925 () Bool)

(assert (=> b!99642 (= e!64925 (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99644 () Bool)

(declare-fun e!64926 () Bool)

(declare-fun call!10238 () Bool)

(assert (=> b!99644 (= e!64926 call!10238)))

(declare-fun b!99645 () Bool)

(assert (=> b!99645 (= e!64926 call!10238)))

(declare-fun d!26815 () Bool)

(declare-fun res!50052 () Bool)

(declare-fun e!64924 () Bool)

(assert (=> d!26815 (=> res!50052 e!64924)))

(assert (=> d!26815 (= res!50052 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26815 (= (arrayNoDuplicates!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 Nil!1581) e!64924)))

(declare-fun b!99643 () Bool)

(declare-fun e!64923 () Bool)

(assert (=> b!99643 (= e!64924 e!64923)))

(declare-fun res!50053 () Bool)

(assert (=> b!99643 (=> (not res!50053) (not e!64923))))

(assert (=> b!99643 (= res!50053 (not e!64925))))

(declare-fun res!50054 () Bool)

(assert (=> b!99643 (=> (not res!50054) (not e!64925))))

(assert (=> b!99643 (= res!50054 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99646 () Bool)

(assert (=> b!99646 (= e!64923 e!64926)))

(declare-fun c!17015 () Bool)

(assert (=> b!99646 (= c!17015 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10235 () Bool)

(assert (=> bm!10235 (= call!10238 (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17015 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1581) Nil!1581)))))

(assert (= (and d!26815 (not res!50052)) b!99643))

(assert (= (and b!99643 res!50054) b!99642))

(assert (= (and b!99643 res!50053) b!99646))

(assert (= (and b!99646 c!17015) b!99644))

(assert (= (and b!99646 (not c!17015)) b!99645))

(assert (= (or b!99644 b!99645) bm!10235))

(assert (=> b!99642 m!109397))

(assert (=> b!99642 m!109397))

(declare-fun m!109799 () Bool)

(assert (=> b!99642 m!109799))

(assert (=> b!99643 m!109397))

(assert (=> b!99643 m!109397))

(assert (=> b!99643 m!109411))

(assert (=> b!99646 m!109397))

(assert (=> b!99646 m!109397))

(assert (=> b!99646 m!109411))

(assert (=> bm!10235 m!109397))

(declare-fun m!109801 () Bool)

(assert (=> bm!10235 m!109801))

(assert (=> b!99390 d!26815))

(declare-fun b!99655 () Bool)

(declare-fun e!64932 () (_ BitVec 32))

(declare-fun e!64931 () (_ BitVec 32))

(assert (=> b!99655 (= e!64932 e!64931)))

(declare-fun c!17020 () Bool)

(assert (=> b!99655 (= c!17020 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99656 () Bool)

(declare-fun call!10241 () (_ BitVec 32))

(assert (=> b!99656 (= e!64931 (bvadd #b00000000000000000000000000000001 call!10241))))

(declare-fun b!99657 () Bool)

(assert (=> b!99657 (= e!64932 #b00000000000000000000000000000000)))

(declare-fun d!26817 () Bool)

(declare-fun lt!50260 () (_ BitVec 32))

(assert (=> d!26817 (and (bvsge lt!50260 #b00000000000000000000000000000000) (bvsle lt!50260 (bvsub (size!2272 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26817 (= lt!50260 e!64932)))

(declare-fun c!17021 () Bool)

(assert (=> d!26817 (= c!17021 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26817 (and (bvsle #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2272 (_keys!4196 newMap!16)) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26817 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) lt!50260)))

(declare-fun bm!10238 () Bool)

(assert (=> bm!10238 (= call!10241 (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99658 () Bool)

(assert (=> b!99658 (= e!64931 call!10241)))

(assert (= (and d!26817 c!17021) b!99657))

(assert (= (and d!26817 (not c!17021)) b!99655))

(assert (= (and b!99655 c!17020) b!99656))

(assert (= (and b!99655 (not c!17020)) b!99658))

(assert (= (or b!99656 b!99658) bm!10238))

(assert (=> b!99655 m!109397))

(assert (=> b!99655 m!109397))

(assert (=> b!99655 m!109411))

(declare-fun m!109803 () Bool)

(assert (=> bm!10238 m!109803))

(assert (=> b!99388 d!26817))

(declare-fun bm!10247 () Bool)

(declare-fun call!10253 () SeekEntryResult!254)

(assert (=> bm!10247 (= call!10253 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun bm!10248 () Bool)

(declare-fun call!10251 () Bool)

(declare-fun call!10252 () Bool)

(assert (=> bm!10248 (= call!10251 call!10252)))

(declare-fun b!99693 () Bool)

(declare-fun res!50076 () Bool)

(declare-fun e!64952 () Bool)

(assert (=> b!99693 (=> (not res!50076) (not e!64952))))

(assert (=> b!99693 (= res!50076 call!10251)))

(declare-fun e!64956 () Bool)

(assert (=> b!99693 (= e!64956 e!64952)))

(declare-fun call!10250 () Bool)

(declare-fun bm!10249 () Bool)

(assert (=> bm!10249 (= call!10250 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99694 () Bool)

(declare-fun e!64955 () Bool)

(declare-fun lt!50328 () SeekEntryResult!254)

(assert (=> b!99694 (= e!64955 ((_ is Undefined!254) lt!50328))))

(declare-fun d!26819 () Bool)

(declare-fun e!64949 () Bool)

(assert (=> d!26819 e!64949))

(declare-fun res!50079 () Bool)

(assert (=> d!26819 (=> (not res!50079) (not e!64949))))

(declare-fun lt!50350 () tuple2!2348)

(assert (=> d!26819 (= res!50079 (_1!1185 lt!50350))))

(assert (=> d!26819 (= lt!50350 (tuple2!2349 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd (_size!478 newMap!16) #b00000000000000000000000000000001) (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (_vacant!478 newMap!16))))))

(declare-fun lt!50349 () Unit!2999)

(declare-fun lt!50323 () Unit!2999)

(assert (=> d!26819 (= lt!50349 lt!50323)))

(declare-fun lt!50326 () array!4255)

(declare-fun lt!50334 () array!4257)

(assert (=> d!26819 (contains!804 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(assert (=> d!26819 (= lt!50323 (lemmaValidKeyInArrayIsInListMap!103 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26819 (= lt!50334 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))))

(assert (=> d!26819 (= lt!50326 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun lt!50322 () Unit!2999)

(declare-fun lt!50337 () Unit!2999)

(assert (=> d!26819 (= lt!50322 lt!50337)))

(declare-fun lt!50333 () array!4255)

(assert (=> d!26819 (= (arrayCountValidKeys!0 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4255 (_ BitVec 32)) Unit!2999)

(assert (=> d!26819 (= lt!50337 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(assert (=> d!26819 (= lt!50333 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun lt!50345 () Unit!2999)

(declare-fun lt!50342 () Unit!2999)

(assert (=> d!26819 (= lt!50345 lt!50342)))

(declare-fun lt!50339 () array!4255)

(assert (=> d!26819 (arrayContainsKey!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26819 (= lt!50342 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(assert (=> d!26819 (= lt!50339 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun lt!50327 () Unit!2999)

(declare-fun lt!50340 () Unit!2999)

(assert (=> d!26819 (= lt!50327 lt!50340)))

(assert (=> d!26819 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!26 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!2999)

(assert (=> d!26819 (= lt!50340 (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50324 () Unit!2999)

(declare-fun lt!50331 () Unit!2999)

(assert (=> d!26819 (= lt!50324 lt!50331)))

(assert (=> d!26819 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (mask!6609 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4255 (_ BitVec 32) (_ BitVec 32)) Unit!2999)

(assert (=> d!26819 (= lt!50331 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (mask!6609 newMap!16)))))

(declare-fun lt!50338 () Unit!2999)

(declare-fun lt!50347 () Unit!2999)

(assert (=> d!26819 (= lt!50338 lt!50347)))

(assert (=> d!26819 (= (arrayCountValidKeys!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4255 (_ BitVec 32) (_ BitVec 64)) Unit!2999)

(assert (=> d!26819 (= lt!50347 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun lt!50325 () Unit!2999)

(declare-fun lt!50330 () Unit!2999)

(assert (=> d!26819 (= lt!50325 lt!50330)))

(declare-fun lt!50341 () List!1584)

(declare-fun lt!50335 () (_ BitVec 32))

(assert (=> d!26819 (arrayNoDuplicates!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) lt!50335 lt!50341)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4255 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1584) Unit!2999)

(assert (=> d!26819 (= lt!50330 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) lt!50335 lt!50341))))

(assert (=> d!26819 (= lt!50341 Nil!1581)))

(assert (=> d!26819 (= lt!50335 #b00000000000000000000000000000000)))

(declare-fun lt!50329 () Unit!2999)

(declare-fun e!64950 () Unit!2999)

(assert (=> d!26819 (= lt!50329 e!64950)))

(declare-fun c!17032 () Bool)

(assert (=> d!26819 (= c!17032 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!50348 () Unit!2999)

(declare-fun e!64951 () Unit!2999)

(assert (=> d!26819 (= lt!50348 e!64951)))

(declare-fun c!17031 () Bool)

(assert (=> d!26819 (= c!17031 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26819 (valid!389 newMap!16)))

(assert (=> d!26819 (= (updateHelperNewKey!42 newMap!16 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))) lt!50350)))

(declare-fun b!99695 () Bool)

(assert (=> b!99695 (= e!64949 (= (map!1259 (_2!1185 lt!50350)) (+!136 (map!1259 newMap!16) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99696 () Bool)

(declare-fun lt!50321 () SeekEntryResult!254)

(declare-fun e!64953 () Bool)

(assert (=> b!99696 (= e!64953 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50321)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99697 () Bool)

(declare-fun e!64954 () Bool)

(assert (=> b!99697 (= e!64954 (not call!10250))))

(declare-fun b!99698 () Bool)

(declare-fun res!50074 () Bool)

(assert (=> b!99698 (=> (not res!50074) (not e!64949))))

(assert (=> b!99698 (= res!50074 (valid!389 (_2!1185 lt!50350)))))

(declare-fun b!99699 () Bool)

(declare-fun res!50075 () Bool)

(assert (=> b!99699 (= res!50075 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50328)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99699 (=> (not res!50075) (not e!64954))))

(declare-fun b!99700 () Bool)

(declare-fun Unit!3016 () Unit!2999)

(assert (=> b!99700 (= e!64951 Unit!3016)))

(declare-fun lt!50346 () Unit!2999)

(assert (=> b!99700 (= lt!50346 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99700 (= lt!50321 call!10253)))

(declare-fun res!50077 () Bool)

(assert (=> b!99700 (= res!50077 ((_ is Found!254) lt!50321))))

(assert (=> b!99700 (=> (not res!50077) (not e!64953))))

(assert (=> b!99700 e!64953))

(declare-fun lt!50344 () Unit!2999)

(assert (=> b!99700 (= lt!50344 lt!50346)))

(assert (=> b!99700 false))

(declare-fun b!99701 () Bool)

(declare-fun Unit!3017 () Unit!2999)

(assert (=> b!99701 (= e!64950 Unit!3017)))

(declare-fun lt!50332 () Unit!2999)

(declare-fun lemmaArrayContainsKeyThenInListMap!26 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!2999)

(assert (=> b!99701 (= lt!50332 (lemmaArrayContainsKeyThenInListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> b!99701 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))

(declare-fun lt!50343 () Unit!2999)

(assert (=> b!99701 (= lt!50343 lt!50332)))

(assert (=> b!99701 false))

(declare-fun b!99702 () Bool)

(assert (=> b!99702 (= e!64955 e!64954)))

(declare-fun res!50080 () Bool)

(assert (=> b!99702 (= res!50080 call!10251)))

(assert (=> b!99702 (=> (not res!50080) (not e!64954))))

(declare-fun c!17033 () Bool)

(declare-fun bm!10250 () Bool)

(assert (=> bm!10250 (= call!10252 (inRange!0 (ite c!17031 (index!3161 lt!50321) (ite c!17033 (index!3160 lt!50328) (index!3163 lt!50328))) (mask!6609 newMap!16)))))

(declare-fun b!99703 () Bool)

(declare-fun res!50081 () Bool)

(assert (=> b!99703 (=> (not res!50081) (not e!64952))))

(assert (=> b!99703 (= res!50081 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50328)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99704 () Bool)

(declare-fun res!50073 () Bool)

(assert (=> b!99704 (=> (not res!50073) (not e!64949))))

(assert (=> b!99704 (= res!50073 (contains!804 (map!1259 (_2!1185 lt!50350)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99705 () Bool)

(declare-fun Unit!3018 () Unit!2999)

(assert (=> b!99705 (= e!64950 Unit!3018)))

(declare-fun b!99706 () Bool)

(declare-fun c!17030 () Bool)

(assert (=> b!99706 (= c!17030 ((_ is MissingVacant!254) lt!50328))))

(assert (=> b!99706 (= e!64956 e!64955)))

(declare-fun b!99707 () Bool)

(assert (=> b!99707 (= e!64952 (not call!10250))))

(declare-fun b!99708 () Bool)

(declare-fun res!50078 () Bool)

(assert (=> b!99708 (= res!50078 call!10252)))

(assert (=> b!99708 (=> (not res!50078) (not e!64953))))

(declare-fun b!99709 () Bool)

(declare-fun lt!50336 () Unit!2999)

(assert (=> b!99709 (= e!64951 lt!50336)))

(assert (=> b!99709 (= lt!50336 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99709 (= lt!50328 call!10253)))

(assert (=> b!99709 (= c!17033 ((_ is MissingZero!254) lt!50328))))

(assert (=> b!99709 e!64956))

(assert (= (and d!26819 c!17031) b!99700))

(assert (= (and d!26819 (not c!17031)) b!99709))

(assert (= (and b!99700 res!50077) b!99708))

(assert (= (and b!99708 res!50078) b!99696))

(assert (= (and b!99709 c!17033) b!99693))

(assert (= (and b!99709 (not c!17033)) b!99706))

(assert (= (and b!99693 res!50076) b!99703))

(assert (= (and b!99703 res!50081) b!99707))

(assert (= (and b!99706 c!17030) b!99702))

(assert (= (and b!99706 (not c!17030)) b!99694))

(assert (= (and b!99702 res!50080) b!99699))

(assert (= (and b!99699 res!50075) b!99697))

(assert (= (or b!99693 b!99702) bm!10248))

(assert (= (or b!99707 b!99697) bm!10249))

(assert (= (or b!99708 bm!10248) bm!10250))

(assert (= (or b!99700 b!99709) bm!10247))

(assert (= (and d!26819 c!17032) b!99701))

(assert (= (and d!26819 (not c!17032)) b!99705))

(assert (= (and d!26819 res!50079) b!99698))

(assert (= (and b!99698 res!50074) b!99704))

(assert (= (and b!99704 res!50073) b!99695))

(declare-fun m!109805 () Bool)

(assert (=> b!99698 m!109805))

(declare-fun m!109807 () Bool)

(assert (=> b!99696 m!109807))

(assert (=> d!26819 m!109133))

(declare-fun m!109809 () Bool)

(assert (=> d!26819 m!109809))

(assert (=> d!26819 m!109153))

(assert (=> d!26819 m!109133))

(declare-fun m!109811 () Bool)

(assert (=> d!26819 m!109811))

(declare-fun m!109813 () Bool)

(assert (=> d!26819 m!109813))

(declare-fun m!109815 () Bool)

(assert (=> d!26819 m!109815))

(assert (=> d!26819 m!109221))

(assert (=> d!26819 m!109221))

(assert (=> d!26819 m!109751))

(declare-fun m!109817 () Bool)

(assert (=> d!26819 m!109817))

(assert (=> d!26819 m!109133))

(declare-fun m!109819 () Bool)

(assert (=> d!26819 m!109819))

(declare-fun m!109821 () Bool)

(assert (=> d!26819 m!109821))

(declare-fun m!109823 () Bool)

(assert (=> d!26819 m!109823))

(assert (=> d!26819 m!109813))

(assert (=> d!26819 m!109817))

(declare-fun m!109825 () Bool)

(assert (=> d!26819 m!109825))

(declare-fun m!109827 () Bool)

(assert (=> d!26819 m!109827))

(assert (=> d!26819 m!109363))

(assert (=> d!26819 m!109133))

(declare-fun m!109829 () Bool)

(assert (=> d!26819 m!109829))

(declare-fun m!109831 () Bool)

(assert (=> d!26819 m!109831))

(declare-fun m!109833 () Bool)

(assert (=> d!26819 m!109833))

(declare-fun m!109835 () Bool)

(assert (=> d!26819 m!109835))

(assert (=> d!26819 m!109221))

(assert (=> d!26819 m!109133))

(assert (=> d!26819 m!109335))

(assert (=> d!26819 m!109133))

(assert (=> d!26819 m!109159))

(declare-fun m!109837 () Bool)

(assert (=> d!26819 m!109837))

(declare-fun m!109839 () Bool)

(assert (=> d!26819 m!109839))

(assert (=> d!26819 m!109133))

(assert (=> d!26819 m!109311))

(declare-fun m!109841 () Bool)

(assert (=> d!26819 m!109841))

(assert (=> d!26819 m!109133))

(declare-fun m!109843 () Bool)

(assert (=> d!26819 m!109843))

(assert (=> bm!10247 m!109133))

(assert (=> bm!10247 m!109315))

(assert (=> b!99700 m!109133))

(assert (=> b!99700 m!109325))

(assert (=> bm!10249 m!109133))

(assert (=> bm!10249 m!109311))

(assert (=> b!99701 m!109133))

(declare-fun m!109845 () Bool)

(assert (=> b!99701 m!109845))

(assert (=> b!99701 m!109221))

(assert (=> b!99701 m!109221))

(assert (=> b!99701 m!109133))

(assert (=> b!99701 m!109335))

(declare-fun m!109847 () Bool)

(assert (=> b!99703 m!109847))

(assert (=> b!99709 m!109133))

(assert (=> b!99709 m!109355))

(declare-fun m!109849 () Bool)

(assert (=> b!99704 m!109849))

(assert (=> b!99704 m!109849))

(assert (=> b!99704 m!109133))

(declare-fun m!109851 () Bool)

(assert (=> b!99704 m!109851))

(declare-fun m!109853 () Bool)

(assert (=> b!99699 m!109853))

(assert (=> b!99695 m!109849))

(assert (=> b!99695 m!109135))

(assert (=> b!99695 m!109135))

(declare-fun m!109855 () Bool)

(assert (=> b!99695 m!109855))

(declare-fun m!109857 () Bool)

(assert (=> bm!10250 m!109857))

(assert (=> bm!10196 d!26819))

(declare-fun b!99710 () Bool)

(declare-fun e!64962 () ListLongMap!1539)

(declare-fun call!10259 () ListLongMap!1539)

(assert (=> b!99710 (= e!64962 call!10259)))

(declare-fun bm!10251 () Bool)

(declare-fun call!10255 () Bool)

(declare-fun lt!50363 () ListLongMap!1539)

(assert (=> bm!10251 (= call!10255 (contains!804 lt!50363 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99711 () Bool)

(declare-fun e!64958 () Bool)

(declare-fun e!64964 () Bool)

(assert (=> b!99711 (= e!64958 e!64964)))

(declare-fun res!50083 () Bool)

(assert (=> b!99711 (= res!50083 call!10255)))

(assert (=> b!99711 (=> (not res!50083) (not e!64964))))

(declare-fun b!99712 () Bool)

(assert (=> b!99712 (= e!64958 (not call!10255))))

(declare-fun b!99714 () Bool)

(declare-fun e!64966 () Unit!2999)

(declare-fun Unit!3019 () Unit!2999)

(assert (=> b!99714 (= e!64966 Unit!3019)))

(declare-fun b!99715 () Bool)

(declare-fun e!64957 () ListLongMap!1539)

(assert (=> b!99715 (= e!64957 call!10259)))

(declare-fun b!99716 () Bool)

(declare-fun lt!50351 () Unit!2999)

(assert (=> b!99716 (= e!64966 lt!50351)))

(declare-fun lt!50371 () ListLongMap!1539)

(assert (=> b!99716 (= lt!50371 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50353 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50353 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50352 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50352 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50357 () Unit!2999)

(assert (=> b!99716 (= lt!50357 (addStillContains!69 lt!50371 lt!50353 (zeroValue!2383 newMap!16) lt!50352))))

(assert (=> b!99716 (contains!804 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) lt!50352)))

(declare-fun lt!50360 () Unit!2999)

(assert (=> b!99716 (= lt!50360 lt!50357)))

(declare-fun lt!50361 () ListLongMap!1539)

(assert (=> b!99716 (= lt!50361 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50366 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50366 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50368 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50368 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50362 () Unit!2999)

(assert (=> b!99716 (= lt!50362 (addApplyDifferent!69 lt!50361 lt!50366 (minValue!2383 newMap!16) lt!50368))))

(assert (=> b!99716 (= (apply!93 (+!136 lt!50361 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) lt!50368) (apply!93 lt!50361 lt!50368))))

(declare-fun lt!50356 () Unit!2999)

(assert (=> b!99716 (= lt!50356 lt!50362)))

(declare-fun lt!50358 () ListLongMap!1539)

(assert (=> b!99716 (= lt!50358 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50369 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50369 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50355 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50355 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50354 () Unit!2999)

(assert (=> b!99716 (= lt!50354 (addApplyDifferent!69 lt!50358 lt!50369 (zeroValue!2383 newMap!16) lt!50355))))

(assert (=> b!99716 (= (apply!93 (+!136 lt!50358 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) lt!50355) (apply!93 lt!50358 lt!50355))))

(declare-fun lt!50370 () Unit!2999)

(assert (=> b!99716 (= lt!50370 lt!50354)))

(declare-fun lt!50359 () ListLongMap!1539)

(assert (=> b!99716 (= lt!50359 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50367 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50367 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50372 () (_ BitVec 64))

(assert (=> b!99716 (= lt!50372 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99716 (= lt!50351 (addApplyDifferent!69 lt!50359 lt!50367 (minValue!2383 newMap!16) lt!50372))))

(assert (=> b!99716 (= (apply!93 (+!136 lt!50359 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) lt!50372) (apply!93 lt!50359 lt!50372))))

(declare-fun b!99717 () Bool)

(declare-fun res!50090 () Bool)

(declare-fun e!64969 () Bool)

(assert (=> b!99717 (=> (not res!50090) (not e!64969))))

(declare-fun e!64965 () Bool)

(assert (=> b!99717 (= res!50090 e!64965)))

(declare-fun res!50087 () Bool)

(assert (=> b!99717 (=> res!50087 e!64965)))

(declare-fun e!64960 () Bool)

(assert (=> b!99717 (= res!50087 (not e!64960))))

(declare-fun res!50082 () Bool)

(assert (=> b!99717 (=> (not res!50082) (not e!64960))))

(assert (=> b!99717 (= res!50082 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99718 () Bool)

(declare-fun e!64968 () Bool)

(assert (=> b!99718 (= e!64968 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99719 () Bool)

(declare-fun e!64959 () Bool)

(declare-fun call!10256 () Bool)

(assert (=> b!99719 (= e!64959 (not call!10256))))

(declare-fun bm!10252 () Bool)

(declare-fun call!10258 () ListLongMap!1539)

(declare-fun call!10257 () ListLongMap!1539)

(assert (=> bm!10252 (= call!10258 call!10257)))

(declare-fun bm!10253 () Bool)

(declare-fun c!17039 () Bool)

(declare-fun c!17035 () Bool)

(declare-fun call!10254 () ListLongMap!1539)

(declare-fun call!10260 () ListLongMap!1539)

(assert (=> bm!10253 (= call!10260 (+!136 (ite c!17035 call!10257 (ite c!17039 call!10258 call!10254)) (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99720 () Bool)

(declare-fun e!64967 () Bool)

(assert (=> b!99720 (= e!64967 (= (apply!93 lt!50363 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99721 () Bool)

(declare-fun c!17034 () Bool)

(assert (=> b!99721 (= c!17034 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99721 (= e!64957 e!64962)))

(declare-fun b!99722 () Bool)

(declare-fun e!64963 () ListLongMap!1539)

(assert (=> b!99722 (= e!64963 e!64957)))

(assert (=> b!99722 (= c!17039 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10254 () Bool)

(assert (=> bm!10254 (= call!10256 (contains!804 lt!50363 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99723 () Bool)

(assert (=> b!99723 (= e!64969 e!64959)))

(declare-fun c!17038 () Bool)

(assert (=> b!99723 (= c!17038 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99724 () Bool)

(assert (=> b!99724 (= e!64960 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99725 () Bool)

(declare-fun res!50085 () Bool)

(assert (=> b!99725 (=> (not res!50085) (not e!64969))))

(assert (=> b!99725 (= res!50085 e!64958)))

(declare-fun c!17037 () Bool)

(assert (=> b!99725 (= c!17037 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10255 () Bool)

(assert (=> bm!10255 (= call!10254 call!10258)))

(declare-fun b!99726 () Bool)

(assert (=> b!99726 (= e!64964 (= (apply!93 lt!50363 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10256 () Bool)

(assert (=> bm!10256 (= call!10257 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!26821 () Bool)

(assert (=> d!26821 e!64969))

(declare-fun res!50088 () Bool)

(assert (=> d!26821 (=> (not res!50088) (not e!64969))))

(assert (=> d!26821 (= res!50088 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50365 () ListLongMap!1539)

(assert (=> d!26821 (= lt!50363 lt!50365)))

(declare-fun lt!50364 () Unit!2999)

(assert (=> d!26821 (= lt!50364 e!64966)))

(declare-fun c!17036 () Bool)

(assert (=> d!26821 (= c!17036 e!64968)))

(declare-fun res!50084 () Bool)

(assert (=> d!26821 (=> (not res!50084) (not e!64968))))

(assert (=> d!26821 (= res!50084 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26821 (= lt!50365 e!64963)))

(assert (=> d!26821 (= c!17035 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26821 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26821 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50363)))

(declare-fun e!64961 () Bool)

(declare-fun b!99713 () Bool)

(assert (=> b!99713 (= e!64961 (= (apply!93 lt!50363 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99713 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))))))))

(assert (=> b!99713 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99727 () Bool)

(assert (=> b!99727 (= e!64963 (+!136 call!10260 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10257 () Bool)

(assert (=> bm!10257 (= call!10259 call!10260)))

(declare-fun b!99728 () Bool)

(assert (=> b!99728 (= e!64962 call!10254)))

(declare-fun b!99729 () Bool)

(assert (=> b!99729 (= e!64959 e!64967)))

(declare-fun res!50086 () Bool)

(assert (=> b!99729 (= res!50086 call!10256)))

(assert (=> b!99729 (=> (not res!50086) (not e!64967))))

(declare-fun b!99730 () Bool)

(assert (=> b!99730 (= e!64965 e!64961)))

(declare-fun res!50089 () Bool)

(assert (=> b!99730 (=> (not res!50089) (not e!64961))))

(assert (=> b!99730 (= res!50089 (contains!804 lt!50363 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99730 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!26821 c!17035) b!99727))

(assert (= (and d!26821 (not c!17035)) b!99722))

(assert (= (and b!99722 c!17039) b!99715))

(assert (= (and b!99722 (not c!17039)) b!99721))

(assert (= (and b!99721 c!17034) b!99710))

(assert (= (and b!99721 (not c!17034)) b!99728))

(assert (= (or b!99710 b!99728) bm!10255))

(assert (= (or b!99715 bm!10255) bm!10252))

(assert (= (or b!99715 b!99710) bm!10257))

(assert (= (or b!99727 bm!10252) bm!10256))

(assert (= (or b!99727 bm!10257) bm!10253))

(assert (= (and d!26821 res!50084) b!99718))

(assert (= (and d!26821 c!17036) b!99716))

(assert (= (and d!26821 (not c!17036)) b!99714))

(assert (= (and d!26821 res!50088) b!99717))

(assert (= (and b!99717 res!50082) b!99724))

(assert (= (and b!99717 (not res!50087)) b!99730))

(assert (= (and b!99730 res!50089) b!99713))

(assert (= (and b!99717 res!50090) b!99725))

(assert (= (and b!99725 c!17037) b!99711))

(assert (= (and b!99725 (not c!17037)) b!99712))

(assert (= (and b!99711 res!50083) b!99726))

(assert (= (or b!99711 b!99712) bm!10251))

(assert (= (and b!99725 res!50085) b!99723))

(assert (= (and b!99723 c!17038) b!99729))

(assert (= (and b!99723 (not c!17038)) b!99719))

(assert (= (and b!99729 res!50086) b!99720))

(assert (= (or b!99729 b!99719) bm!10254))

(declare-fun b_lambda!4445 () Bool)

(assert (=> (not b_lambda!4445) (not b!99713)))

(assert (=> b!99713 t!5564))

(declare-fun b_and!6131 () Bool)

(assert (= b_and!6127 (and (=> t!5564 result!3303) b_and!6131)))

(assert (=> b!99713 t!5566))

(declare-fun b_and!6133 () Bool)

(assert (= b_and!6129 (and (=> t!5566 result!3305) b_and!6133)))

(assert (=> b!99713 m!109397))

(declare-fun m!109859 () Bool)

(assert (=> b!99713 m!109859))

(assert (=> b!99713 m!109401))

(assert (=> b!99713 m!109859))

(assert (=> b!99713 m!109401))

(declare-fun m!109861 () Bool)

(assert (=> b!99713 m!109861))

(assert (=> b!99713 m!109397))

(declare-fun m!109863 () Bool)

(assert (=> b!99713 m!109863))

(declare-fun m!109865 () Bool)

(assert (=> b!99726 m!109865))

(declare-fun m!109867 () Bool)

(assert (=> bm!10256 m!109867))

(assert (=> b!99724 m!109397))

(assert (=> b!99724 m!109397))

(assert (=> b!99724 m!109411))

(assert (=> b!99718 m!109397))

(assert (=> b!99718 m!109397))

(assert (=> b!99718 m!109411))

(assert (=> d!26821 m!109413))

(declare-fun m!109869 () Bool)

(assert (=> bm!10253 m!109869))

(declare-fun m!109871 () Bool)

(assert (=> b!99720 m!109871))

(assert (=> b!99730 m!109397))

(assert (=> b!99730 m!109397))

(declare-fun m!109873 () Bool)

(assert (=> b!99730 m!109873))

(declare-fun m!109875 () Bool)

(assert (=> bm!10251 m!109875))

(assert (=> b!99716 m!109397))

(declare-fun m!109877 () Bool)

(assert (=> b!99716 m!109877))

(declare-fun m!109879 () Bool)

(assert (=> b!99716 m!109879))

(declare-fun m!109881 () Bool)

(assert (=> b!99716 m!109881))

(declare-fun m!109883 () Bool)

(assert (=> b!99716 m!109883))

(declare-fun m!109885 () Bool)

(assert (=> b!99716 m!109885))

(declare-fun m!109887 () Bool)

(assert (=> b!99716 m!109887))

(declare-fun m!109889 () Bool)

(assert (=> b!99716 m!109889))

(declare-fun m!109891 () Bool)

(assert (=> b!99716 m!109891))

(declare-fun m!109893 () Bool)

(assert (=> b!99716 m!109893))

(declare-fun m!109895 () Bool)

(assert (=> b!99716 m!109895))

(assert (=> b!99716 m!109893))

(declare-fun m!109897 () Bool)

(assert (=> b!99716 m!109897))

(declare-fun m!109899 () Bool)

(assert (=> b!99716 m!109899))

(assert (=> b!99716 m!109887))

(declare-fun m!109901 () Bool)

(assert (=> b!99716 m!109901))

(declare-fun m!109903 () Bool)

(assert (=> b!99716 m!109903))

(assert (=> b!99716 m!109867))

(assert (=> b!99716 m!109899))

(declare-fun m!109905 () Bool)

(assert (=> b!99716 m!109905))

(assert (=> b!99716 m!109877))

(declare-fun m!109907 () Bool)

(assert (=> b!99727 m!109907))

(declare-fun m!109909 () Bool)

(assert (=> bm!10254 m!109909))

(assert (=> bm!10188 d!26821))

(declare-fun d!26823 () Bool)

(assert (=> d!26823 (= (apply!93 lt!49957 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1290 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4123 () Bool)

(assert (= bs!4123 d!26823))

(assert (=> bs!4123 m!109223))

(assert (=> bs!4123 m!109467))

(assert (=> bs!4123 m!109467))

(declare-fun m!109911 () Bool)

(assert (=> bs!4123 m!109911))

(assert (=> b!99202 d!26823))

(declare-fun d!26825 () Bool)

(declare-fun c!17040 () Bool)

(assert (=> d!26825 (= c!17040 ((_ is ValueCellFull!975) (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64970 () V!3163)

(assert (=> d!26825 (= (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64970)))

(declare-fun b!99731 () Bool)

(assert (=> b!99731 (= e!64970 (get!1288 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99732 () Bool)

(assert (=> b!99732 (= e!64970 (get!1289 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26825 c!17040) b!99731))

(assert (= (and d!26825 (not c!17040)) b!99732))

(assert (=> b!99731 m!109225))

(assert (=> b!99731 m!109157))

(declare-fun m!109913 () Bool)

(assert (=> b!99731 m!109913))

(assert (=> b!99732 m!109225))

(assert (=> b!99732 m!109157))

(declare-fun m!109915 () Bool)

(assert (=> b!99732 m!109915))

(assert (=> b!99202 d!26825))

(assert (=> b!99337 d!26761))

(declare-fun d!26827 () Bool)

(declare-fun res!50091 () Bool)

(declare-fun e!64971 () Bool)

(assert (=> d!26827 (=> res!50091 e!64971)))

(assert (=> d!26827 (= res!50091 (= (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26827 (= (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64971)))

(declare-fun b!99733 () Bool)

(declare-fun e!64972 () Bool)

(assert (=> b!99733 (= e!64971 e!64972)))

(declare-fun res!50092 () Bool)

(assert (=> b!99733 (=> (not res!50092) (not e!64972))))

(assert (=> b!99733 (= res!50092 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99734 () Bool)

(assert (=> b!99734 (= e!64972 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26827 (not res!50091)) b!99733))

(assert (= (and b!99733 res!50092) b!99734))

(assert (=> d!26827 m!109397))

(assert (=> b!99734 m!109133))

(declare-fun m!109917 () Bool)

(assert (=> b!99734 m!109917))

(assert (=> bm!10186 d!26827))

(declare-fun d!26829 () Bool)

(declare-fun e!64975 () Bool)

(assert (=> d!26829 e!64975))

(declare-fun c!17043 () Bool)

(assert (=> d!26829 (= c!17043 (and (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26829 true))

(declare-fun _$29!129 () Unit!2999)

(assert (=> d!26829 (= (choose!601 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) _$29!129)))

(declare-fun b!99739 () Bool)

(assert (=> b!99739 (= e!64975 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99740 () Bool)

(assert (=> b!99740 (= e!64975 (ite (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26829 c!17043) b!99739))

(assert (= (and d!26829 (not c!17043)) b!99740))

(assert (=> b!99739 m!109133))

(assert (=> b!99739 m!109173))

(assert (=> d!26687 d!26829))

(assert (=> d!26687 d!26675))

(declare-fun d!26831 () Bool)

(assert (=> d!26831 (= (apply!93 lt!49957 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4124 () Bool)

(assert (= bs!4124 d!26831))

(assert (=> bs!4124 m!109549))

(assert (=> bs!4124 m!109549))

(declare-fun m!109919 () Bool)

(assert (=> bs!4124 m!109919))

(assert (=> b!99215 d!26831))

(declare-fun d!26833 () Bool)

(declare-fun res!50093 () Bool)

(declare-fun e!64976 () Bool)

(assert (=> d!26833 (=> (not res!50093) (not e!64976))))

(assert (=> d!26833 (= res!50093 (simpleValid!69 (_2!1185 lt!50053)))))

(assert (=> d!26833 (= (valid!389 (_2!1185 lt!50053)) e!64976)))

(declare-fun b!99741 () Bool)

(declare-fun res!50094 () Bool)

(assert (=> b!99741 (=> (not res!50094) (not e!64976))))

(assert (=> b!99741 (= res!50094 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))) (_size!478 (_2!1185 lt!50053))))))

(declare-fun b!99742 () Bool)

(declare-fun res!50095 () Bool)

(assert (=> b!99742 (=> (not res!50095) (not e!64976))))

(assert (=> b!99742 (= res!50095 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053))))))

(declare-fun b!99743 () Bool)

(assert (=> b!99743 (= e!64976 (arrayNoDuplicates!0 (_keys!4196 (_2!1185 lt!50053)) #b00000000000000000000000000000000 Nil!1581))))

(assert (= (and d!26833 res!50093) b!99741))

(assert (= (and b!99741 res!50094) b!99742))

(assert (= (and b!99742 res!50095) b!99743))

(declare-fun m!109921 () Bool)

(assert (=> d!26833 m!109921))

(declare-fun m!109923 () Bool)

(assert (=> b!99741 m!109923))

(declare-fun m!109925 () Bool)

(assert (=> b!99742 m!109925))

(declare-fun m!109927 () Bool)

(assert (=> b!99743 m!109927))

(assert (=> d!26699 d!26833))

(assert (=> d!26699 d!26707))

(assert (=> b!99230 d!26685))

(assert (=> d!26683 d!26689))

(declare-fun d!26835 () Bool)

(assert (=> d!26835 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) from!355 Nil!1581)))

(assert (=> d!26835 true))

(declare-fun _$71!135 () Unit!2999)

(assert (=> d!26835 (= (choose!39 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!135)))

(declare-fun bs!4125 () Bool)

(assert (= bs!4125 d!26835))

(assert (=> bs!4125 m!109169))

(assert (=> d!26683 d!26835))

(declare-fun condMapEmpty!3783 () Bool)

(declare-fun mapDefault!3783 () ValueCell!975)

(assert (=> mapNonEmpty!3782 (= condMapEmpty!3783 (= mapRest!3782 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3783)))))

(declare-fun e!64977 () Bool)

(declare-fun mapRes!3783 () Bool)

(assert (=> mapNonEmpty!3782 (= tp!9632 (and e!64977 mapRes!3783))))

(declare-fun mapNonEmpty!3783 () Bool)

(declare-fun tp!9633 () Bool)

(declare-fun e!64978 () Bool)

(assert (=> mapNonEmpty!3783 (= mapRes!3783 (and tp!9633 e!64978))))

(declare-fun mapRest!3783 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3783 () (_ BitVec 32))

(declare-fun mapValue!3783 () ValueCell!975)

(assert (=> mapNonEmpty!3783 (= mapRest!3782 (store mapRest!3783 mapKey!3783 mapValue!3783))))

(declare-fun mapIsEmpty!3783 () Bool)

(assert (=> mapIsEmpty!3783 mapRes!3783))

(declare-fun b!99744 () Bool)

(assert (=> b!99744 (= e!64978 tp_is_empty!2637)))

(declare-fun b!99745 () Bool)

(assert (=> b!99745 (= e!64977 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3782 condMapEmpty!3783) mapIsEmpty!3783))

(assert (= (and mapNonEmpty!3782 (not condMapEmpty!3783)) mapNonEmpty!3783))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!975) mapValue!3783)) b!99744))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!975) mapDefault!3783)) b!99745))

(declare-fun m!109929 () Bool)

(assert (=> mapNonEmpty!3783 m!109929))

(declare-fun condMapEmpty!3784 () Bool)

(declare-fun mapDefault!3784 () ValueCell!975)

(assert (=> mapNonEmpty!3781 (= condMapEmpty!3784 (= mapRest!3781 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3784)))))

(declare-fun e!64979 () Bool)

(declare-fun mapRes!3784 () Bool)

(assert (=> mapNonEmpty!3781 (= tp!9631 (and e!64979 mapRes!3784))))

(declare-fun mapNonEmpty!3784 () Bool)

(declare-fun tp!9634 () Bool)

(declare-fun e!64980 () Bool)

(assert (=> mapNonEmpty!3784 (= mapRes!3784 (and tp!9634 e!64980))))

(declare-fun mapValue!3784 () ValueCell!975)

(declare-fun mapRest!3784 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3784 () (_ BitVec 32))

(assert (=> mapNonEmpty!3784 (= mapRest!3781 (store mapRest!3784 mapKey!3784 mapValue!3784))))

(declare-fun mapIsEmpty!3784 () Bool)

(assert (=> mapIsEmpty!3784 mapRes!3784))

(declare-fun b!99746 () Bool)

(assert (=> b!99746 (= e!64980 tp_is_empty!2637)))

(declare-fun b!99747 () Bool)

(assert (=> b!99747 (= e!64979 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3781 condMapEmpty!3784) mapIsEmpty!3784))

(assert (= (and mapNonEmpty!3781 (not condMapEmpty!3784)) mapNonEmpty!3784))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!975) mapValue!3784)) b!99746))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!975) mapDefault!3784)) b!99747))

(declare-fun m!109931 () Bool)

(assert (=> mapNonEmpty!3784 m!109931))

(declare-fun b_lambda!4447 () Bool)

(assert (= b_lambda!4437 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4447)))

(declare-fun b_lambda!4449 () Bool)

(assert (= b_lambda!4445 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4449)))

(declare-fun b_lambda!4451 () Bool)

(assert (= b_lambda!4441 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4451)))

(declare-fun b_lambda!4453 () Bool)

(assert (= b_lambda!4443 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4453)))

(declare-fun b_lambda!4455 () Bool)

(assert (= b_lambda!4439 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4455)))

(check-sat (not bm!10253) (not b!99732) (not b!99429) (not b!99504) (not b!99459) (not d!26719) (not bm!10227) (not b!99734) (not b!99445) (not b_lambda!4455) (not d!26779) (not bm!10211) (not b!99642) (not bm!10251) (not b!99442) (not d!26795) (not b!99730) (not d!26813) (not d!26765) (not b!99460) (not b!99466) (not b!99436) (not d!26797) (not b!99499) (not d!26745) (not d!26773) (not b_lambda!4453) (not d!26741) (not b!99455) (not bm!10234) (not bm!10238) (not b!99412) (not b!99426) (not b!99709) (not b!99743) (not b!99616) b_and!6131 (not d!26729) tp_is_empty!2637 (not b!99612) (not b!99716) (not b!99615) (not d!26727) (not b!99408) (not b!99640) (not b_next!2441) (not d!26771) (not b!99593) (not d!26749) (not b!99700) (not bm!10220) (not b_lambda!4431) (not b!99494) (not b!99497) (not b!99577) (not b!99500) (not bm!10235) (not d!26755) (not b!99695) (not b!99419) (not b!99698) (not b_lambda!4451) (not b!99502) (not bm!10218) (not b!99638) (not d!26781) (not b!99461) (not b!99447) (not d!26763) (not b!99655) (not b!99435) (not d!26717) (not b!99415) (not b!99600) (not d!26753) (not d!26721) (not b!99576) (not b!99468) (not d!26731) (not mapNonEmpty!3783) (not b!99630) (not b!99731) (not b!99425) (not b!99453) (not b!99718) (not b!99625) (not b!99611) (not b!99546) (not mapNonEmpty!3784) (not d!26803) (not b!99423) (not b!99417) (not b!99493) (not d!26811) (not bm!10232) (not d!26709) (not bm!10249) (not b!99560) (not b!99704) (not d!26767) (not d!26733) (not bm!10250) (not b!99406) (not b!99515) (not d!26723) (not b!99741) (not bm!10217) (not b!99713) (not b!99633) (not bm!10215) (not b!99463) (not d!26821) (not d!26715) (not d!26783) (not b!99462) (not bm!10208) (not d!26791) b_and!6133 (not b_lambda!4435) (not b!99608) (not bm!10224) (not b!99628) (not b_next!2443) (not b!99547) (not d!26831) (not b!99449) (not b!99607) (not b!99724) (not b!99641) (not b!99503) (not d!26777) (not bm!10254) (not b!99624) (not d!26787) (not b!99618) (not b!99405) (not b!99549) (not b!99599) (not bm!10213) (not b!99720) (not b!99701) (not d!26809) (not b!99559) (not d!26823) (not b!99438) (not d!26833) (not d!26793) (not b!99574) (not d!26761) (not bm!10233) (not b!99621) (not bm!10210) (not b!99643) (not b!99465) (not b!99609) (not b!99563) (not b!99407) (not d!26835) (not d!26807) (not d!26769) (not b!99726) (not d!26747) (not b!99742) (not d!26789) (not b!99456) (not d!26819) (not d!26725) (not b!99739) (not d!26775) (not d!26801) (not b_lambda!4447) (not b!99605) (not b!99513) (not d!26799) (not bm!10256) (not d!26785) (not b!99727) (not b!99580) (not b!99617) (not b!99646) (not b!99627) (not bm!10247) (not b_lambda!4449))
(check-sat b_and!6131 b_and!6133 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26837 () Bool)

(declare-fun e!64981 () Bool)

(assert (=> d!26837 e!64981))

(declare-fun res!50096 () Bool)

(assert (=> d!26837 (=> res!50096 e!64981)))

(declare-fun lt!50376 () Bool)

(assert (=> d!26837 (= res!50096 (not lt!50376))))

(declare-fun lt!50374 () Bool)

(assert (=> d!26837 (= lt!50376 lt!50374)))

(declare-fun lt!50373 () Unit!2999)

(declare-fun e!64982 () Unit!2999)

(assert (=> d!26837 (= lt!50373 e!64982)))

(declare-fun c!17044 () Bool)

(assert (=> d!26837 (= c!17044 lt!50374)))

(assert (=> d!26837 (= lt!50374 (containsKey!155 (toList!785 lt!50163) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26837 (= (contains!804 lt!50163 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50376)))

(declare-fun b!99748 () Bool)

(declare-fun lt!50375 () Unit!2999)

(assert (=> b!99748 (= e!64982 lt!50375)))

(assert (=> b!99748 (= lt!50375 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50163) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99748 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99749 () Bool)

(declare-fun Unit!3020 () Unit!2999)

(assert (=> b!99749 (= e!64982 Unit!3020)))

(declare-fun b!99750 () Bool)

(assert (=> b!99750 (= e!64981 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26837 c!17044) b!99748))

(assert (= (and d!26837 (not c!17044)) b!99749))

(assert (= (and d!26837 (not res!50096)) b!99750))

(assert (=> d!26837 m!109223))

(declare-fun m!109933 () Bool)

(assert (=> d!26837 m!109933))

(assert (=> b!99748 m!109223))

(declare-fun m!109935 () Bool)

(assert (=> b!99748 m!109935))

(assert (=> b!99748 m!109223))

(declare-fun m!109937 () Bool)

(assert (=> b!99748 m!109937))

(assert (=> b!99748 m!109937))

(declare-fun m!109939 () Bool)

(assert (=> b!99748 m!109939))

(assert (=> b!99750 m!109223))

(assert (=> b!99750 m!109937))

(assert (=> b!99750 m!109937))

(assert (=> b!99750 m!109939))

(assert (=> b!99493 d!26837))

(declare-fun d!26839 () Bool)

(declare-fun res!50097 () Bool)

(declare-fun e!64983 () Bool)

(assert (=> d!26839 (=> res!50097 e!64983)))

(assert (=> d!26839 (= res!50097 (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26839 (= (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!64983)))

(declare-fun b!99751 () Bool)

(declare-fun e!64984 () Bool)

(assert (=> b!99751 (= e!64983 e!64984)))

(declare-fun res!50098 () Bool)

(assert (=> b!99751 (=> (not res!50098) (not e!64984))))

(assert (=> b!99751 (= res!50098 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!99752 () Bool)

(assert (=> b!99752 (= e!64984 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26839 (not res!50097)) b!99751))

(assert (= (and b!99751 res!50098) b!99752))

(declare-fun m!109941 () Bool)

(assert (=> d!26839 m!109941))

(assert (=> b!99752 m!109133))

(declare-fun m!109943 () Bool)

(assert (=> b!99752 m!109943))

(assert (=> b!99563 d!26839))

(declare-fun d!26841 () Bool)

(assert (=> d!26841 (= (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99453 d!26841))

(declare-fun d!26843 () Bool)

(assert (=> d!26843 (= (apply!93 lt!50097 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1290 (getValueByKey!151 (toList!785 lt!50097) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4126 () Bool)

(assert (= bs!4126 d!26843))

(assert (=> bs!4126 m!109397))

(declare-fun m!109945 () Bool)

(assert (=> bs!4126 m!109945))

(assert (=> bs!4126 m!109945))

(declare-fun m!109947 () Bool)

(assert (=> bs!4126 m!109947))

(assert (=> b!99412 d!26843))

(declare-fun d!26845 () Bool)

(declare-fun c!17045 () Bool)

(assert (=> d!26845 (= c!17045 ((_ is ValueCellFull!975) (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000)))))

(declare-fun e!64985 () V!3163)

(assert (=> d!26845 (= (get!1287 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64985)))

(declare-fun b!99753 () Bool)

(assert (=> b!99753 (= e!64985 (get!1288 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99754 () Bool)

(assert (=> b!99754 (= e!64985 (get!1289 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26845 c!17045) b!99753))

(assert (= (and d!26845 (not c!17045)) b!99754))

(assert (=> b!99753 m!109399))

(assert (=> b!99753 m!109401))

(declare-fun m!109949 () Bool)

(assert (=> b!99753 m!109949))

(assert (=> b!99754 m!109399))

(assert (=> b!99754 m!109401))

(declare-fun m!109951 () Bool)

(assert (=> b!99754 m!109951))

(assert (=> b!99412 d!26845))

(assert (=> d!26765 d!26767))

(declare-fun d!26847 () Bool)

(assert (=> d!26847 (= (apply!93 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49949) (apply!93 lt!49952 lt!49949))))

(assert (=> d!26847 true))

(declare-fun _$34!871 () Unit!2999)

(assert (=> d!26847 (= (choose!604 lt!49952 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49949) _$34!871)))

(declare-fun bs!4127 () Bool)

(assert (= bs!4127 d!26847))

(assert (=> bs!4127 m!109267))

(assert (=> bs!4127 m!109267))

(assert (=> bs!4127 m!109273))

(assert (=> bs!4127 m!109269))

(assert (=> d!26765 d!26847))

(assert (=> d!26765 d!26773))

(declare-fun d!26849 () Bool)

(declare-fun e!64986 () Bool)

(assert (=> d!26849 e!64986))

(declare-fun res!50099 () Bool)

(assert (=> d!26849 (=> res!50099 e!64986)))

(declare-fun lt!50380 () Bool)

(assert (=> d!26849 (= res!50099 (not lt!50380))))

(declare-fun lt!50378 () Bool)

(assert (=> d!26849 (= lt!50380 lt!50378)))

(declare-fun lt!50377 () Unit!2999)

(declare-fun e!64987 () Unit!2999)

(assert (=> d!26849 (= lt!50377 e!64987)))

(declare-fun c!17046 () Bool)

(assert (=> d!26849 (= c!17046 lt!50378)))

(assert (=> d!26849 (= lt!50378 (containsKey!155 (toList!785 lt!49952) lt!49949))))

(assert (=> d!26849 (= (contains!804 lt!49952 lt!49949) lt!50380)))

(declare-fun b!99756 () Bool)

(declare-fun lt!50379 () Unit!2999)

(assert (=> b!99756 (= e!64987 lt!50379)))

(assert (=> b!99756 (= lt!50379 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49952) lt!49949))))

(assert (=> b!99756 (isDefined!104 (getValueByKey!151 (toList!785 lt!49952) lt!49949))))

(declare-fun b!99757 () Bool)

(declare-fun Unit!3021 () Unit!2999)

(assert (=> b!99757 (= e!64987 Unit!3021)))

(declare-fun b!99758 () Bool)

(assert (=> b!99758 (= e!64986 (isDefined!104 (getValueByKey!151 (toList!785 lt!49952) lt!49949)))))

(assert (= (and d!26849 c!17046) b!99756))

(assert (= (and d!26849 (not c!17046)) b!99757))

(assert (= (and d!26849 (not res!50099)) b!99758))

(declare-fun m!109953 () Bool)

(assert (=> d!26849 m!109953))

(declare-fun m!109955 () Bool)

(assert (=> b!99756 m!109955))

(assert (=> b!99756 m!109651))

(assert (=> b!99756 m!109651))

(declare-fun m!109957 () Bool)

(assert (=> b!99756 m!109957))

(assert (=> b!99758 m!109651))

(assert (=> b!99758 m!109651))

(assert (=> b!99758 m!109957))

(assert (=> d!26765 d!26849))

(assert (=> d!26765 d!26777))

(declare-fun bm!10258 () Bool)

(declare-fun call!10261 () ListLongMap!1539)

(assert (=> bm!10258 (= call!10261 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!99760 () Bool)

(declare-fun e!64991 () ListLongMap!1539)

(declare-fun e!64990 () ListLongMap!1539)

(assert (=> b!99760 (= e!64991 e!64990)))

(declare-fun c!17048 () Bool)

(assert (=> b!99760 (= c!17048 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99761 () Bool)

(declare-fun e!64992 () Bool)

(declare-fun e!64988 () Bool)

(assert (=> b!99761 (= e!64992 e!64988)))

(declare-fun c!17049 () Bool)

(declare-fun e!64993 () Bool)

(assert (=> b!99761 (= c!17049 e!64993)))

(declare-fun res!50102 () Bool)

(assert (=> b!99761 (=> (not res!50102) (not e!64993))))

(assert (=> b!99761 (= res!50102 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99762 () Bool)

(assert (=> b!99762 (= e!64990 call!10261)))

(declare-fun b!99763 () Bool)

(declare-fun lt!50385 () Unit!2999)

(declare-fun lt!50386 () Unit!2999)

(assert (=> b!99763 (= lt!50385 lt!50386)))

(declare-fun lt!50382 () V!3163)

(declare-fun lt!50387 () (_ BitVec 64))

(declare-fun lt!50384 () (_ BitVec 64))

(declare-fun lt!50381 () ListLongMap!1539)

(assert (=> b!99763 (not (contains!804 (+!136 lt!50381 (tuple2!2347 lt!50384 lt!50382)) lt!50387))))

(assert (=> b!99763 (= lt!50386 (addStillNotContains!41 lt!50381 lt!50384 lt!50382 lt!50387))))

(assert (=> b!99763 (= lt!50387 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99763 (= lt!50382 (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99763 (= lt!50384 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99763 (= lt!50381 call!10261)))

(assert (=> b!99763 (= e!64990 (+!136 call!10261 (tuple2!2347 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99764 () Bool)

(assert (=> b!99764 (= e!64991 (ListLongMap!1540 Nil!1580))))

(declare-fun b!99765 () Bool)

(assert (=> b!99765 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> b!99765 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (_values!2485 newMap!16))))))

(declare-fun e!64989 () Bool)

(declare-fun lt!50383 () ListLongMap!1539)

(assert (=> b!99765 (= e!64989 (= (apply!93 lt!50383 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99766 () Bool)

(declare-fun res!50103 () Bool)

(assert (=> b!99766 (=> (not res!50103) (not e!64992))))

(assert (=> b!99766 (= res!50103 (not (contains!804 lt!50383 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!26851 () Bool)

(assert (=> d!26851 e!64992))

(declare-fun res!50101 () Bool)

(assert (=> d!26851 (=> (not res!50101) (not e!64992))))

(assert (=> d!26851 (= res!50101 (not (contains!804 lt!50383 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26851 (= lt!50383 e!64991)))

(declare-fun c!17050 () Bool)

(assert (=> d!26851 (= c!17050 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26851 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26851 (= (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50383)))

(declare-fun b!99759 () Bool)

(assert (=> b!99759 (= e!64988 e!64989)))

(assert (=> b!99759 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!50100 () Bool)

(assert (=> b!99759 (= res!50100 (contains!804 lt!50383 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99759 (=> (not res!50100) (not e!64989))))

(declare-fun b!99767 () Bool)

(declare-fun e!64994 () Bool)

(assert (=> b!99767 (= e!64988 e!64994)))

(declare-fun c!17047 () Bool)

(assert (=> b!99767 (= c!17047 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99768 () Bool)

(assert (=> b!99768 (= e!64994 (= lt!50383 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!99769 () Bool)

(assert (=> b!99769 (= e!64994 (isEmpty!359 lt!50383))))

(declare-fun b!99770 () Bool)

(assert (=> b!99770 (= e!64993 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99770 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!26851 c!17050) b!99764))

(assert (= (and d!26851 (not c!17050)) b!99760))

(assert (= (and b!99760 c!17048) b!99763))

(assert (= (and b!99760 (not c!17048)) b!99762))

(assert (= (or b!99763 b!99762) bm!10258))

(assert (= (and d!26851 res!50101) b!99766))

(assert (= (and b!99766 res!50103) b!99761))

(assert (= (and b!99761 res!50102) b!99770))

(assert (= (and b!99761 c!17049) b!99759))

(assert (= (and b!99761 (not c!17049)) b!99767))

(assert (= (and b!99759 res!50100) b!99765))

(assert (= (and b!99767 c!17047) b!99768))

(assert (= (and b!99767 (not c!17047)) b!99769))

(declare-fun b_lambda!4457 () Bool)

(assert (=> (not b_lambda!4457) (not b!99763)))

(assert (=> b!99763 t!5564))

(declare-fun b_and!6135 () Bool)

(assert (= b_and!6131 (and (=> t!5564 result!3303) b_and!6135)))

(assert (=> b!99763 t!5566))

(declare-fun b_and!6137 () Bool)

(assert (= b_and!6133 (and (=> t!5566 result!3305) b_and!6137)))

(declare-fun b_lambda!4459 () Bool)

(assert (=> (not b_lambda!4459) (not b!99765)))

(assert (=> b!99765 t!5564))

(declare-fun b_and!6139 () Bool)

(assert (= b_and!6135 (and (=> t!5564 result!3303) b_and!6139)))

(assert (=> b!99765 t!5566))

(declare-fun b_and!6141 () Bool)

(assert (= b_and!6137 (and (=> t!5566 result!3305) b_and!6141)))

(assert (=> b!99765 m!109397))

(assert (=> b!99765 m!109401))

(assert (=> b!99765 m!109477))

(assert (=> b!99765 m!109397))

(declare-fun m!109959 () Bool)

(assert (=> b!99765 m!109959))

(assert (=> b!99765 m!109477))

(assert (=> b!99765 m!109401))

(assert (=> b!99765 m!109479))

(declare-fun m!109961 () Bool)

(assert (=> b!99768 m!109961))

(assert (=> b!99760 m!109397))

(assert (=> b!99760 m!109397))

(assert (=> b!99760 m!109411))

(declare-fun m!109963 () Bool)

(assert (=> b!99763 m!109963))

(declare-fun m!109965 () Bool)

(assert (=> b!99763 m!109965))

(assert (=> b!99763 m!109401))

(assert (=> b!99763 m!109963))

(assert (=> b!99763 m!109477))

(declare-fun m!109967 () Bool)

(assert (=> b!99763 m!109967))

(assert (=> b!99763 m!109477))

(assert (=> b!99763 m!109401))

(assert (=> b!99763 m!109479))

(assert (=> b!99763 m!109397))

(declare-fun m!109969 () Bool)

(assert (=> b!99763 m!109969))

(declare-fun m!109971 () Bool)

(assert (=> d!26851 m!109971))

(assert (=> d!26851 m!109413))

(assert (=> b!99770 m!109397))

(assert (=> b!99770 m!109397))

(assert (=> b!99770 m!109411))

(assert (=> b!99759 m!109397))

(assert (=> b!99759 m!109397))

(declare-fun m!109973 () Bool)

(assert (=> b!99759 m!109973))

(declare-fun m!109975 () Bool)

(assert (=> b!99766 m!109975))

(declare-fun m!109977 () Bool)

(assert (=> b!99769 m!109977))

(assert (=> bm!10258 m!109961))

(assert (=> bm!10220 d!26851))

(declare-fun d!26853 () Bool)

(assert (=> d!26853 (= (apply!93 lt!50363 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50363) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4128 () Bool)

(assert (= bs!4128 d!26853))

(declare-fun m!109979 () Bool)

(assert (=> bs!4128 m!109979))

(assert (=> bs!4128 m!109979))

(declare-fun m!109981 () Bool)

(assert (=> bs!4128 m!109981))

(assert (=> b!99726 d!26853))

(declare-fun d!26855 () Bool)

(declare-fun e!64995 () Bool)

(assert (=> d!26855 e!64995))

(declare-fun res!50104 () Bool)

(assert (=> d!26855 (=> res!50104 e!64995)))

(declare-fun lt!50391 () Bool)

(assert (=> d!26855 (= res!50104 (not lt!50391))))

(declare-fun lt!50389 () Bool)

(assert (=> d!26855 (= lt!50391 lt!50389)))

(declare-fun lt!50388 () Unit!2999)

(declare-fun e!64996 () Unit!2999)

(assert (=> d!26855 (= lt!50388 e!64996)))

(declare-fun c!17051 () Bool)

(assert (=> d!26855 (= c!17051 lt!50389)))

(assert (=> d!26855 (= lt!50389 (containsKey!155 (toList!785 lt!50129) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26855 (= (contains!804 lt!50129 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50391)))

(declare-fun b!99771 () Bool)

(declare-fun lt!50390 () Unit!2999)

(assert (=> b!99771 (= e!64996 lt!50390)))

(assert (=> b!99771 (= lt!50390 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50129) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99771 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99772 () Bool)

(declare-fun Unit!3022 () Unit!2999)

(assert (=> b!99772 (= e!64996 Unit!3022)))

(declare-fun b!99773 () Bool)

(assert (=> b!99773 (= e!64995 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26855 c!17051) b!99771))

(assert (= (and d!26855 (not c!17051)) b!99772))

(assert (= (and d!26855 (not res!50104)) b!99773))

(declare-fun m!109983 () Bool)

(assert (=> d!26855 m!109983))

(declare-fun m!109985 () Bool)

(assert (=> b!99771 m!109985))

(declare-fun m!109987 () Bool)

(assert (=> b!99771 m!109987))

(assert (=> b!99771 m!109987))

(declare-fun m!109989 () Bool)

(assert (=> b!99771 m!109989))

(assert (=> b!99773 m!109987))

(assert (=> b!99773 m!109987))

(assert (=> b!99773 m!109989))

(assert (=> bm!10215 d!26855))

(declare-fun b!99775 () Bool)

(declare-fun e!64997 () Option!157)

(declare-fun e!64998 () Option!157)

(assert (=> b!99775 (= e!64997 e!64998)))

(declare-fun c!17053 () Bool)

(assert (=> b!99775 (= c!17053 (and ((_ is Cons!1579) (toList!785 lt!50209)) (not (= (_1!1184 (h!2174 (toList!785 lt!50209))) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!99777 () Bool)

(assert (=> b!99777 (= e!64998 None!155)))

(declare-fun b!99776 () Bool)

(assert (=> b!99776 (= e!64998 (getValueByKey!151 (t!5557 (toList!785 lt!50209)) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!26857 () Bool)

(declare-fun c!17052 () Bool)

(assert (=> d!26857 (= c!17052 (and ((_ is Cons!1579) (toList!785 lt!50209)) (= (_1!1184 (h!2174 (toList!785 lt!50209))) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!26857 (= (getValueByKey!151 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!64997)))

(declare-fun b!99774 () Bool)

(assert (=> b!99774 (= e!64997 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50209)))))))

(assert (= (and d!26857 c!17052) b!99774))

(assert (= (and d!26857 (not c!17052)) b!99775))

(assert (= (and b!99775 c!17053) b!99776))

(assert (= (and b!99775 (not c!17053)) b!99777))

(declare-fun m!109991 () Bool)

(assert (=> b!99776 m!109991))

(assert (=> b!99608 d!26857))

(declare-fun d!26859 () Bool)

(assert (=> d!26859 (= (apply!93 lt!50097 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50097) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4129 () Bool)

(assert (= bs!4129 d!26859))

(declare-fun m!109993 () Bool)

(assert (=> bs!4129 m!109993))

(assert (=> bs!4129 m!109993))

(declare-fun m!109995 () Bool)

(assert (=> bs!4129 m!109995))

(assert (=> b!99425 d!26859))

(declare-fun d!26861 () Bool)

(assert (=> d!26861 (= (apply!93 lt!50363 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50363) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4130 () Bool)

(assert (= bs!4130 d!26861))

(declare-fun m!109997 () Bool)

(assert (=> bs!4130 m!109997))

(assert (=> bs!4130 m!109997))

(declare-fun m!109999 () Bool)

(assert (=> bs!4130 m!109999))

(assert (=> b!99720 d!26861))

(declare-fun d!26863 () Bool)

(assert (=> d!26863 (= (apply!93 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49966) (apply!93 lt!49953 lt!49966))))

(assert (=> d!26863 true))

(declare-fun _$34!872 () Unit!2999)

(assert (=> d!26863 (= (choose!604 lt!49953 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49966) _$34!872)))

(declare-fun bs!4131 () Bool)

(assert (= bs!4131 d!26863))

(assert (=> bs!4131 m!109261))

(assert (=> bs!4131 m!109261))

(assert (=> bs!4131 m!109265))

(assert (=> bs!4131 m!109263))

(assert (=> d!26787 d!26863))

(assert (=> d!26787 d!26779))

(assert (=> d!26787 d!26769))

(assert (=> d!26787 d!26785))

(declare-fun d!26865 () Bool)

(declare-fun e!64999 () Bool)

(assert (=> d!26865 e!64999))

(declare-fun res!50105 () Bool)

(assert (=> d!26865 (=> res!50105 e!64999)))

(declare-fun lt!50395 () Bool)

(assert (=> d!26865 (= res!50105 (not lt!50395))))

(declare-fun lt!50393 () Bool)

(assert (=> d!26865 (= lt!50395 lt!50393)))

(declare-fun lt!50392 () Unit!2999)

(declare-fun e!65000 () Unit!2999)

(assert (=> d!26865 (= lt!50392 e!65000)))

(declare-fun c!17054 () Bool)

(assert (=> d!26865 (= c!17054 lt!50393)))

(assert (=> d!26865 (= lt!50393 (containsKey!155 (toList!785 lt!49953) lt!49966))))

(assert (=> d!26865 (= (contains!804 lt!49953 lt!49966) lt!50395)))

(declare-fun b!99778 () Bool)

(declare-fun lt!50394 () Unit!2999)

(assert (=> b!99778 (= e!65000 lt!50394)))

(assert (=> b!99778 (= lt!50394 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49953) lt!49966))))

(assert (=> b!99778 (isDefined!104 (getValueByKey!151 (toList!785 lt!49953) lt!49966))))

(declare-fun b!99779 () Bool)

(declare-fun Unit!3023 () Unit!2999)

(assert (=> b!99779 (= e!65000 Unit!3023)))

(declare-fun b!99780 () Bool)

(assert (=> b!99780 (= e!64999 (isDefined!104 (getValueByKey!151 (toList!785 lt!49953) lt!49966)))))

(assert (= (and d!26865 c!17054) b!99778))

(assert (= (and d!26865 (not c!17054)) b!99779))

(assert (= (and d!26865 (not res!50105)) b!99780))

(declare-fun m!110001 () Bool)

(assert (=> d!26865 m!110001))

(declare-fun m!110003 () Bool)

(assert (=> b!99778 m!110003))

(assert (=> b!99778 m!109687))

(assert (=> b!99778 m!109687))

(declare-fun m!110005 () Bool)

(assert (=> b!99778 m!110005))

(assert (=> b!99780 m!109687))

(assert (=> b!99780 m!109687))

(assert (=> b!99780 m!110005))

(assert (=> d!26787 d!26865))

(declare-fun b!99799 () Bool)

(declare-fun lt!50400 () SeekEntryResult!254)

(assert (=> b!99799 (and (bvsge (index!3162 lt!50400) #b00000000000000000000000000000000) (bvslt (index!3162 lt!50400) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!50113 () Bool)

(assert (=> b!99799 (= res!50113 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50400)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!65014 () Bool)

(assert (=> b!99799 (=> res!50113 e!65014)))

(declare-fun e!65013 () Bool)

(assert (=> b!99799 (= e!65013 e!65014)))

(declare-fun b!99800 () Bool)

(declare-fun e!65012 () SeekEntryResult!254)

(declare-fun e!65015 () SeekEntryResult!254)

(assert (=> b!99800 (= e!65012 e!65015)))

(declare-fun lt!50401 () (_ BitVec 64))

(declare-fun c!17063 () Bool)

(assert (=> b!99800 (= c!17063 (or (= lt!50401 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (= (bvadd lt!50401 lt!50401) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99801 () Bool)

(assert (=> b!99801 (and (bvsge (index!3162 lt!50400) #b00000000000000000000000000000000) (bvslt (index!3162 lt!50400) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> b!99801 (= e!65014 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50400)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99802 () Bool)

(declare-fun e!65011 () Bool)

(assert (=> b!99802 (= e!65011 (bvsge (x!13104 lt!50400) #b01111111111111111111111111111110))))

(declare-fun d!26867 () Bool)

(assert (=> d!26867 e!65011))

(declare-fun c!17061 () Bool)

(assert (=> d!26867 (= c!17061 (and ((_ is Intermediate!254) lt!50400) (undefined!1066 lt!50400)))))

(assert (=> d!26867 (= lt!50400 e!65012)))

(declare-fun c!17062 () Bool)

(assert (=> d!26867 (= c!17062 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!26867 (= lt!50401 (select (arr!2021 (_keys!4196 newMap!16)) (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16))))))

(assert (=> d!26867 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26867 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50400)))

(declare-fun b!99803 () Bool)

(assert (=> b!99803 (= e!65012 (Intermediate!254 true (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!99804 () Bool)

(assert (=> b!99804 (= e!65015 (Intermediate!254 false (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!99805 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99805 (= e!65015 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000 (mask!6609 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99806 () Bool)

(assert (=> b!99806 (= e!65011 e!65013)))

(declare-fun res!50112 () Bool)

(assert (=> b!99806 (= res!50112 (and ((_ is Intermediate!254) lt!50400) (not (undefined!1066 lt!50400)) (bvslt (x!13104 lt!50400) #b01111111111111111111111111111110) (bvsge (x!13104 lt!50400) #b00000000000000000000000000000000) (bvsge (x!13104 lt!50400) #b00000000000000000000000000000000)))))

(assert (=> b!99806 (=> (not res!50112) (not e!65013))))

(declare-fun b!99807 () Bool)

(assert (=> b!99807 (and (bvsge (index!3162 lt!50400) #b00000000000000000000000000000000) (bvslt (index!3162 lt!50400) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!50114 () Bool)

(assert (=> b!99807 (= res!50114 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50400)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99807 (=> res!50114 e!65014)))

(assert (= (and d!26867 c!17062) b!99803))

(assert (= (and d!26867 (not c!17062)) b!99800))

(assert (= (and b!99800 c!17063) b!99804))

(assert (= (and b!99800 (not c!17063)) b!99805))

(assert (= (and d!26867 c!17061) b!99802))

(assert (= (and d!26867 (not c!17061)) b!99806))

(assert (= (and b!99806 res!50112) b!99799))

(assert (= (and b!99799 (not res!50113)) b!99807))

(assert (= (and b!99807 (not res!50114)) b!99801))

(declare-fun m!110007 () Bool)

(assert (=> b!99799 m!110007))

(assert (=> d!26867 m!109631))

(declare-fun m!110009 () Bool)

(assert (=> d!26867 m!110009))

(assert (=> d!26867 m!109413))

(assert (=> b!99805 m!109631))

(declare-fun m!110011 () Bool)

(assert (=> b!99805 m!110011))

(assert (=> b!99805 m!110011))

(assert (=> b!99805 m!109133))

(declare-fun m!110013 () Bool)

(assert (=> b!99805 m!110013))

(assert (=> b!99807 m!110007))

(assert (=> b!99801 m!110007))

(assert (=> d!26761 d!26867))

(declare-fun d!26869 () Bool)

(declare-fun lt!50407 () (_ BitVec 32))

(declare-fun lt!50406 () (_ BitVec 32))

(assert (=> d!26869 (= lt!50407 (bvmul (bvxor lt!50406 (bvlshr lt!50406 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26869 (= lt!50406 ((_ extract 31 0) (bvand (bvxor (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvlshr (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26869 (and (bvsge (mask!6609 newMap!16) #b00000000000000000000000000000000) (let ((res!50115 (let ((h!2176 ((_ extract 31 0) (bvand (bvxor (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvlshr (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13207 (bvmul (bvxor h!2176 (bvlshr h!2176 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13207 (bvlshr x!13207 #b00000000000000000000000000001101)) (mask!6609 newMap!16)))))) (and (bvslt res!50115 (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001)) (bvsge res!50115 #b00000000000000000000000000000000))))))

(assert (=> d!26869 (= (toIndex!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (mask!6609 newMap!16)) (bvand (bvxor lt!50407 (bvlshr lt!50407 #b00000000000000000000000000001101)) (mask!6609 newMap!16)))))

(assert (=> d!26761 d!26869))

(declare-fun d!26871 () Bool)

(assert (=> d!26871 (= (validMask!0 (mask!6609 newMap!16)) (and (or (= (mask!6609 newMap!16) #b00000000000000000000000000000111) (= (mask!6609 newMap!16) #b00000000000000000000000000001111) (= (mask!6609 newMap!16) #b00000000000000000000000000011111) (= (mask!6609 newMap!16) #b00000000000000000000000000111111) (= (mask!6609 newMap!16) #b00000000000000000000000001111111) (= (mask!6609 newMap!16) #b00000000000000000000000011111111) (= (mask!6609 newMap!16) #b00000000000000000000000111111111) (= (mask!6609 newMap!16) #b00000000000000000000001111111111) (= (mask!6609 newMap!16) #b00000000000000000000011111111111) (= (mask!6609 newMap!16) #b00000000000000000000111111111111) (= (mask!6609 newMap!16) #b00000000000000000001111111111111) (= (mask!6609 newMap!16) #b00000000000000000011111111111111) (= (mask!6609 newMap!16) #b00000000000000000111111111111111) (= (mask!6609 newMap!16) #b00000000000000001111111111111111) (= (mask!6609 newMap!16) #b00000000000000011111111111111111) (= (mask!6609 newMap!16) #b00000000000000111111111111111111) (= (mask!6609 newMap!16) #b00000000000001111111111111111111) (= (mask!6609 newMap!16) #b00000000000011111111111111111111) (= (mask!6609 newMap!16) #b00000000000111111111111111111111) (= (mask!6609 newMap!16) #b00000000001111111111111111111111) (= (mask!6609 newMap!16) #b00000000011111111111111111111111) (= (mask!6609 newMap!16) #b00000000111111111111111111111111) (= (mask!6609 newMap!16) #b00000001111111111111111111111111) (= (mask!6609 newMap!16) #b00000011111111111111111111111111) (= (mask!6609 newMap!16) #b00000111111111111111111111111111) (= (mask!6609 newMap!16) #b00001111111111111111111111111111) (= (mask!6609 newMap!16) #b00011111111111111111111111111111) (= (mask!6609 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6609 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26761 d!26871))

(declare-fun d!26873 () Bool)

(declare-fun res!50116 () Bool)

(declare-fun e!65016 () Bool)

(assert (=> d!26873 (=> res!50116 e!65016)))

(assert (=> d!26873 (= res!50116 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49946)))))

(assert (=> d!26873 (= (containsKey!155 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946) e!65016)))

(declare-fun b!99808 () Bool)

(declare-fun e!65017 () Bool)

(assert (=> b!99808 (= e!65016 e!65017)))

(declare-fun res!50117 () Bool)

(assert (=> b!99808 (=> (not res!50117) (not e!65017))))

(assert (=> b!99808 (= res!50117 (and (or (not ((_ is Cons!1579) (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) (bvsle (_1!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49946)) ((_ is Cons!1579) (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (bvslt (_1!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49946)))))

(declare-fun b!99809 () Bool)

(assert (=> b!99809 (= e!65017 (containsKey!155 (t!5557 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!49946))))

(assert (= (and d!26873 (not res!50116)) b!99808))

(assert (= (and b!99808 res!50117) b!99809))

(declare-fun m!110015 () Bool)

(assert (=> b!99809 m!110015))

(assert (=> d!26771 d!26873))

(declare-fun d!26875 () Bool)

(declare-fun e!65018 () Bool)

(assert (=> d!26875 e!65018))

(declare-fun res!50118 () Bool)

(assert (=> d!26875 (=> res!50118 e!65018)))

(declare-fun lt!50411 () Bool)

(assert (=> d!26875 (= res!50118 (not lt!50411))))

(declare-fun lt!50409 () Bool)

(assert (=> d!26875 (= lt!50411 lt!50409)))

(declare-fun lt!50408 () Unit!2999)

(declare-fun e!65019 () Unit!2999)

(assert (=> d!26875 (= lt!50408 e!65019)))

(declare-fun c!17064 () Bool)

(assert (=> d!26875 (= c!17064 lt!50409)))

(assert (=> d!26875 (= lt!50409 (containsKey!155 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26875 (= (contains!804 lt!50209 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50411)))

(declare-fun b!99810 () Bool)

(declare-fun lt!50410 () Unit!2999)

(assert (=> b!99810 (= e!65019 lt!50410)))

(assert (=> b!99810 (= lt!50410 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> b!99810 (isDefined!104 (getValueByKey!151 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!99811 () Bool)

(declare-fun Unit!3024 () Unit!2999)

(assert (=> b!99811 (= e!65019 Unit!3024)))

(declare-fun b!99812 () Bool)

(assert (=> b!99812 (= e!65018 (isDefined!104 (getValueByKey!151 (toList!785 lt!50209) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!26875 c!17064) b!99810))

(assert (= (and d!26875 (not c!17064)) b!99811))

(assert (= (and d!26875 (not res!50118)) b!99812))

(declare-fun m!110017 () Bool)

(assert (=> d!26875 m!110017))

(declare-fun m!110019 () Bool)

(assert (=> b!99810 m!110019))

(assert (=> b!99810 m!109675))

(assert (=> b!99810 m!109675))

(declare-fun m!110021 () Bool)

(assert (=> b!99810 m!110021))

(assert (=> b!99812 m!109675))

(assert (=> b!99812 m!109675))

(assert (=> b!99812 m!110021))

(assert (=> d!26773 d!26875))

(declare-fun b!99814 () Bool)

(declare-fun e!65020 () Option!157)

(declare-fun e!65021 () Option!157)

(assert (=> b!99814 (= e!65020 e!65021)))

(declare-fun c!17066 () Bool)

(assert (=> b!99814 (= c!17066 (and ((_ is Cons!1579) lt!50210) (not (= (_1!1184 (h!2174 lt!50210)) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!99816 () Bool)

(assert (=> b!99816 (= e!65021 None!155)))

(declare-fun b!99815 () Bool)

(assert (=> b!99815 (= e!65021 (getValueByKey!151 (t!5557 lt!50210) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!26877 () Bool)

(declare-fun c!17065 () Bool)

(assert (=> d!26877 (= c!17065 (and ((_ is Cons!1579) lt!50210) (= (_1!1184 (h!2174 lt!50210)) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!26877 (= (getValueByKey!151 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65020)))

(declare-fun b!99813 () Bool)

(assert (=> b!99813 (= e!65020 (Some!156 (_2!1184 (h!2174 lt!50210))))))

(assert (= (and d!26877 c!17065) b!99813))

(assert (= (and d!26877 (not c!17065)) b!99814))

(assert (= (and b!99814 c!17066) b!99815))

(assert (= (and b!99814 (not c!17066)) b!99816))

(declare-fun m!110023 () Bool)

(assert (=> b!99815 m!110023))

(assert (=> d!26773 d!26877))

(declare-fun d!26879 () Bool)

(assert (=> d!26879 (= (getValueByKey!151 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50414 () Unit!2999)

(declare-fun choose!611 (List!1583 (_ BitVec 64) V!3163) Unit!2999)

(assert (=> d!26879 (= lt!50414 (choose!611 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65024 () Bool)

(assert (=> d!26879 e!65024))

(declare-fun res!50123 () Bool)

(assert (=> d!26879 (=> (not res!50123) (not e!65024))))

(assert (=> d!26879 (= res!50123 (isStrictlySorted!305 lt!50210))))

(assert (=> d!26879 (= (lemmaContainsTupThenGetReturnValue!67 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50414)))

(declare-fun b!99821 () Bool)

(declare-fun res!50124 () Bool)

(assert (=> b!99821 (=> (not res!50124) (not e!65024))))

(assert (=> b!99821 (= res!50124 (containsKey!155 lt!50210 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!99822 () Bool)

(assert (=> b!99822 (= e!65024 (contains!806 lt!50210 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!26879 res!50123) b!99821))

(assert (= (and b!99821 res!50124) b!99822))

(assert (=> d!26879 m!109669))

(declare-fun m!110025 () Bool)

(assert (=> d!26879 m!110025))

(declare-fun m!110027 () Bool)

(assert (=> d!26879 m!110027))

(declare-fun m!110029 () Bool)

(assert (=> b!99821 m!110029))

(declare-fun m!110031 () Bool)

(assert (=> b!99822 m!110031))

(assert (=> d!26773 d!26879))

(declare-fun c!17078 () Bool)

(declare-fun bm!10265 () Bool)

(declare-fun e!65035 () List!1583)

(declare-fun call!10268 () List!1583)

(declare-fun $colon$colon!79 (List!1583 tuple2!2346) List!1583)

(assert (=> bm!10265 (= call!10268 ($colon$colon!79 e!65035 (ite c!17078 (h!2174 (toList!785 lt!49952)) (tuple2!2347 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun c!17075 () Bool)

(assert (=> bm!10265 (= c!17075 c!17078)))

(declare-fun b!99843 () Bool)

(declare-fun e!65036 () List!1583)

(declare-fun e!65038 () List!1583)

(assert (=> b!99843 (= e!65036 e!65038)))

(declare-fun c!17077 () Bool)

(assert (=> b!99843 (= c!17077 (and ((_ is Cons!1579) (toList!785 lt!49952)) (= (_1!1184 (h!2174 (toList!785 lt!49952))) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!99844 () Bool)

(declare-fun res!50130 () Bool)

(declare-fun e!65039 () Bool)

(assert (=> b!99844 (=> (not res!50130) (not e!65039))))

(declare-fun lt!50417 () List!1583)

(assert (=> b!99844 (= res!50130 (containsKey!155 lt!50417 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!99845 () Bool)

(declare-fun c!17076 () Bool)

(assert (=> b!99845 (= e!65035 (ite c!17077 (t!5557 (toList!785 lt!49952)) (ite c!17076 (Cons!1579 (h!2174 (toList!785 lt!49952)) (t!5557 (toList!785 lt!49952))) Nil!1580)))))

(declare-fun b!99846 () Bool)

(declare-fun e!65037 () List!1583)

(declare-fun call!10269 () List!1583)

(assert (=> b!99846 (= e!65037 call!10269)))

(declare-fun b!99847 () Bool)

(assert (=> b!99847 (= e!65037 call!10269)))

(declare-fun d!26881 () Bool)

(assert (=> d!26881 e!65039))

(declare-fun res!50129 () Bool)

(assert (=> d!26881 (=> (not res!50129) (not e!65039))))

(assert (=> d!26881 (= res!50129 (isStrictlySorted!305 lt!50417))))

(assert (=> d!26881 (= lt!50417 e!65036)))

(assert (=> d!26881 (= c!17078 (and ((_ is Cons!1579) (toList!785 lt!49952)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49952))) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!26881 (isStrictlySorted!305 (toList!785 lt!49952))))

(assert (=> d!26881 (= (insertStrictlySorted!70 (toList!785 lt!49952) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50417)))

(declare-fun b!99848 () Bool)

(assert (=> b!99848 (= c!17076 (and ((_ is Cons!1579) (toList!785 lt!49952)) (bvsgt (_1!1184 (h!2174 (toList!785 lt!49952))) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!99848 (= e!65038 e!65037)))

(declare-fun bm!10266 () Bool)

(declare-fun call!10270 () List!1583)

(assert (=> bm!10266 (= call!10270 call!10268)))

(declare-fun b!99849 () Bool)

(assert (=> b!99849 (= e!65038 call!10270)))

(declare-fun b!99850 () Bool)

(assert (=> b!99850 (= e!65039 (contains!806 lt!50417 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun bm!10267 () Bool)

(assert (=> bm!10267 (= call!10269 call!10270)))

(declare-fun b!99851 () Bool)

(assert (=> b!99851 (= e!65036 call!10268)))

(declare-fun b!99852 () Bool)

(assert (=> b!99852 (= e!65035 (insertStrictlySorted!70 (t!5557 (toList!785 lt!49952)) (_1!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!26881 c!17078) b!99851))

(assert (= (and d!26881 (not c!17078)) b!99843))

(assert (= (and b!99843 c!17077) b!99849))

(assert (= (and b!99843 (not c!17077)) b!99848))

(assert (= (and b!99848 c!17076) b!99846))

(assert (= (and b!99848 (not c!17076)) b!99847))

(assert (= (or b!99846 b!99847) bm!10267))

(assert (= (or b!99849 bm!10267) bm!10266))

(assert (= (or b!99851 bm!10266) bm!10265))

(assert (= (and bm!10265 c!17075) b!99852))

(assert (= (and bm!10265 (not c!17075)) b!99845))

(assert (= (and d!26881 res!50129) b!99844))

(assert (= (and b!99844 res!50130) b!99850))

(declare-fun m!110033 () Bool)

(assert (=> bm!10265 m!110033))

(declare-fun m!110035 () Bool)

(assert (=> b!99844 m!110035))

(declare-fun m!110037 () Bool)

(assert (=> b!99852 m!110037))

(declare-fun m!110039 () Bool)

(assert (=> b!99850 m!110039))

(declare-fun m!110041 () Bool)

(assert (=> d!26881 m!110041))

(declare-fun m!110043 () Bool)

(assert (=> d!26881 m!110043))

(assert (=> d!26773 d!26881))

(assert (=> bm!10247 d!26761))

(declare-fun b!99853 () Bool)

(declare-fun e!65041 () (_ BitVec 32))

(declare-fun e!65040 () (_ BitVec 32))

(assert (=> b!99853 (= e!65041 e!65040)))

(declare-fun c!17079 () Bool)

(assert (=> b!99853 (= c!17079 (validKeyInArray!0 (select (arr!2021 lt!50333) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(declare-fun b!99854 () Bool)

(declare-fun call!10271 () (_ BitVec 32))

(assert (=> b!99854 (= e!65040 (bvadd #b00000000000000000000000000000001 call!10271))))

(declare-fun b!99855 () Bool)

(assert (=> b!99855 (= e!65041 #b00000000000000000000000000000000)))

(declare-fun lt!50418 () (_ BitVec 32))

(declare-fun d!26883 () Bool)

(assert (=> d!26883 (and (bvsge lt!50418 #b00000000000000000000000000000000) (bvsle lt!50418 (bvsub (size!2272 lt!50333) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(assert (=> d!26883 (= lt!50418 e!65041)))

(declare-fun c!17080 () Bool)

(assert (=> d!26883 (= c!17080 (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)))))

(assert (=> d!26883 (and (bvsle (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)) (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001) (size!2272 lt!50333)))))

(assert (=> d!26883 (= (arrayCountValidKeys!0 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)) lt!50418)))

(declare-fun bm!10268 () Bool)

(assert (=> bm!10268 (= call!10271 (arrayCountValidKeys!0 lt!50333 (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)))))

(declare-fun b!99856 () Bool)

(assert (=> b!99856 (= e!65040 call!10271)))

(assert (= (and d!26883 c!17080) b!99855))

(assert (= (and d!26883 (not c!17080)) b!99853))

(assert (= (and b!99853 c!17079) b!99854))

(assert (= (and b!99853 (not c!17079)) b!99856))

(assert (= (or b!99854 b!99856) bm!10268))

(declare-fun m!110045 () Bool)

(assert (=> b!99853 m!110045))

(assert (=> b!99853 m!110045))

(declare-fun m!110047 () Bool)

(assert (=> b!99853 m!110047))

(declare-fun m!110049 () Bool)

(assert (=> bm!10268 m!110049))

(assert (=> d!26819 d!26883))

(declare-fun d!26885 () Bool)

(declare-fun e!65044 () Bool)

(assert (=> d!26885 e!65044))

(declare-fun res!50133 () Bool)

(assert (=> d!26885 (=> (not res!50133) (not e!65044))))

(assert (=> d!26885 (= res!50133 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 (_keys!4196 newMap!16)))))))

(declare-fun lt!50421 () Unit!2999)

(declare-fun choose!102 ((_ BitVec 64) array!4255 (_ BitVec 32) (_ BitVec 32)) Unit!2999)

(assert (=> d!26885 (= lt!50421 (choose!102 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (mask!6609 newMap!16)))))

(assert (=> d!26885 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26885 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (mask!6609 newMap!16)) lt!50421)))

(declare-fun b!99859 () Bool)

(assert (=> b!99859 (= e!65044 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (mask!6609 newMap!16)))))

(assert (= (and d!26885 res!50133) b!99859))

(assert (=> d!26885 m!109133))

(declare-fun m!110051 () Bool)

(assert (=> d!26885 m!110051))

(assert (=> d!26885 m!109413))

(assert (=> b!99859 m!109835))

(assert (=> b!99859 m!109833))

(assert (=> d!26819 d!26885))

(assert (=> d!26819 d!26799))

(assert (=> d!26819 d!26707))

(assert (=> d!26819 d!26827))

(declare-fun b!99860 () Bool)

(declare-fun e!65050 () ListLongMap!1539)

(declare-fun call!10277 () ListLongMap!1539)

(assert (=> b!99860 (= e!65050 call!10277)))

(declare-fun bm!10269 () Bool)

(declare-fun call!10273 () Bool)

(declare-fun lt!50434 () ListLongMap!1539)

(assert (=> bm!10269 (= call!10273 (contains!804 lt!50434 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99861 () Bool)

(declare-fun e!65046 () Bool)

(declare-fun e!65052 () Bool)

(assert (=> b!99861 (= e!65046 e!65052)))

(declare-fun res!50135 () Bool)

(assert (=> b!99861 (= res!50135 call!10273)))

(assert (=> b!99861 (=> (not res!50135) (not e!65052))))

(declare-fun b!99862 () Bool)

(assert (=> b!99862 (= e!65046 (not call!10273))))

(declare-fun b!99864 () Bool)

(declare-fun e!65054 () Unit!2999)

(declare-fun Unit!3025 () Unit!2999)

(assert (=> b!99864 (= e!65054 Unit!3025)))

(declare-fun b!99865 () Bool)

(declare-fun e!65045 () ListLongMap!1539)

(assert (=> b!99865 (= e!65045 call!10277)))

(declare-fun b!99866 () Bool)

(declare-fun lt!50422 () Unit!2999)

(assert (=> b!99866 (= e!65054 lt!50422)))

(declare-fun lt!50442 () ListLongMap!1539)

(assert (=> b!99866 (= lt!50442 (getCurrentListMapNoExtraKeys!101 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50424 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50424 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50423 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50423 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50428 () Unit!2999)

(assert (=> b!99866 (= lt!50428 (addStillContains!69 lt!50442 lt!50424 (zeroValue!2383 newMap!16) lt!50423))))

(assert (=> b!99866 (contains!804 (+!136 lt!50442 (tuple2!2347 lt!50424 (zeroValue!2383 newMap!16))) lt!50423)))

(declare-fun lt!50431 () Unit!2999)

(assert (=> b!99866 (= lt!50431 lt!50428)))

(declare-fun lt!50432 () ListLongMap!1539)

(assert (=> b!99866 (= lt!50432 (getCurrentListMapNoExtraKeys!101 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50437 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50437 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50439 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50439 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50433 () Unit!2999)

(assert (=> b!99866 (= lt!50433 (addApplyDifferent!69 lt!50432 lt!50437 (minValue!2383 newMap!16) lt!50439))))

(assert (=> b!99866 (= (apply!93 (+!136 lt!50432 (tuple2!2347 lt!50437 (minValue!2383 newMap!16))) lt!50439) (apply!93 lt!50432 lt!50439))))

(declare-fun lt!50427 () Unit!2999)

(assert (=> b!99866 (= lt!50427 lt!50433)))

(declare-fun lt!50429 () ListLongMap!1539)

(assert (=> b!99866 (= lt!50429 (getCurrentListMapNoExtraKeys!101 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50440 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50440 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50426 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50426 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50425 () Unit!2999)

(assert (=> b!99866 (= lt!50425 (addApplyDifferent!69 lt!50429 lt!50440 (zeroValue!2383 newMap!16) lt!50426))))

(assert (=> b!99866 (= (apply!93 (+!136 lt!50429 (tuple2!2347 lt!50440 (zeroValue!2383 newMap!16))) lt!50426) (apply!93 lt!50429 lt!50426))))

(declare-fun lt!50441 () Unit!2999)

(assert (=> b!99866 (= lt!50441 lt!50425)))

(declare-fun lt!50430 () ListLongMap!1539)

(assert (=> b!99866 (= lt!50430 (getCurrentListMapNoExtraKeys!101 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50438 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50438 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50443 () (_ BitVec 64))

(assert (=> b!99866 (= lt!50443 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!99866 (= lt!50422 (addApplyDifferent!69 lt!50430 lt!50438 (minValue!2383 newMap!16) lt!50443))))

(assert (=> b!99866 (= (apply!93 (+!136 lt!50430 (tuple2!2347 lt!50438 (minValue!2383 newMap!16))) lt!50443) (apply!93 lt!50430 lt!50443))))

(declare-fun b!99867 () Bool)

(declare-fun res!50142 () Bool)

(declare-fun e!65057 () Bool)

(assert (=> b!99867 (=> (not res!50142) (not e!65057))))

(declare-fun e!65053 () Bool)

(assert (=> b!99867 (= res!50142 e!65053)))

(declare-fun res!50139 () Bool)

(assert (=> b!99867 (=> res!50139 e!65053)))

(declare-fun e!65048 () Bool)

(assert (=> b!99867 (= res!50139 (not e!65048))))

(declare-fun res!50134 () Bool)

(assert (=> b!99867 (=> (not res!50134) (not e!65048))))

(assert (=> b!99867 (= res!50134 (bvslt #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun b!99868 () Bool)

(declare-fun e!65056 () Bool)

(assert (=> b!99868 (= e!65056 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99869 () Bool)

(declare-fun e!65047 () Bool)

(declare-fun call!10274 () Bool)

(assert (=> b!99869 (= e!65047 (not call!10274))))

(declare-fun bm!10270 () Bool)

(declare-fun call!10276 () ListLongMap!1539)

(declare-fun call!10275 () ListLongMap!1539)

(assert (=> bm!10270 (= call!10276 call!10275)))

(declare-fun c!17082 () Bool)

(declare-fun call!10272 () ListLongMap!1539)

(declare-fun bm!10271 () Bool)

(declare-fun call!10278 () ListLongMap!1539)

(declare-fun c!17086 () Bool)

(assert (=> bm!10271 (= call!10278 (+!136 (ite c!17082 call!10275 (ite c!17086 call!10276 call!10272)) (ite (or c!17082 c!17086) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99870 () Bool)

(declare-fun e!65055 () Bool)

(assert (=> b!99870 (= e!65055 (= (apply!93 lt!50434 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99871 () Bool)

(declare-fun c!17081 () Bool)

(assert (=> b!99871 (= c!17081 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99871 (= e!65045 e!65050)))

(declare-fun b!99872 () Bool)

(declare-fun e!65051 () ListLongMap!1539)

(assert (=> b!99872 (= e!65051 e!65045)))

(assert (=> b!99872 (= c!17086 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10272 () Bool)

(assert (=> bm!10272 (= call!10274 (contains!804 lt!50434 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99873 () Bool)

(assert (=> b!99873 (= e!65057 e!65047)))

(declare-fun c!17085 () Bool)

(assert (=> b!99873 (= c!17085 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99874 () Bool)

(assert (=> b!99874 (= e!65048 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99875 () Bool)

(declare-fun res!50137 () Bool)

(assert (=> b!99875 (=> (not res!50137) (not e!65057))))

(assert (=> b!99875 (= res!50137 e!65046)))

(declare-fun c!17084 () Bool)

(assert (=> b!99875 (= c!17084 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10273 () Bool)

(assert (=> bm!10273 (= call!10272 call!10276)))

(declare-fun b!99876 () Bool)

(assert (=> b!99876 (= e!65052 (= (apply!93 lt!50434 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10274 () Bool)

(assert (=> bm!10274 (= call!10275 (getCurrentListMapNoExtraKeys!101 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!26887 () Bool)

(assert (=> d!26887 e!65057))

(declare-fun res!50140 () Bool)

(assert (=> d!26887 (=> (not res!50140) (not e!65057))))

(assert (=> d!26887 (= res!50140 (or (bvsge #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))))

(declare-fun lt!50436 () ListLongMap!1539)

(assert (=> d!26887 (= lt!50434 lt!50436)))

(declare-fun lt!50435 () Unit!2999)

(assert (=> d!26887 (= lt!50435 e!65054)))

(declare-fun c!17083 () Bool)

(assert (=> d!26887 (= c!17083 e!65056)))

(declare-fun res!50136 () Bool)

(assert (=> d!26887 (=> (not res!50136) (not e!65056))))

(assert (=> d!26887 (= res!50136 (bvslt #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(assert (=> d!26887 (= lt!50436 e!65051)))

(assert (=> d!26887 (= c!17082 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26887 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26887 (= (getCurrentListMap!476 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50434)))

(declare-fun b!99863 () Bool)

(declare-fun e!65049 () Bool)

(assert (=> b!99863 (= e!65049 (= (apply!93 lt!50434 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99863 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))))))

(assert (=> b!99863 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun b!99877 () Bool)

(assert (=> b!99877 (= e!65051 (+!136 call!10278 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10275 () Bool)

(assert (=> bm!10275 (= call!10277 call!10278)))

(declare-fun b!99878 () Bool)

(assert (=> b!99878 (= e!65050 call!10272)))

(declare-fun b!99879 () Bool)

(assert (=> b!99879 (= e!65047 e!65055)))

(declare-fun res!50138 () Bool)

(assert (=> b!99879 (= res!50138 call!10274)))

(assert (=> b!99879 (=> (not res!50138) (not e!65055))))

(declare-fun b!99880 () Bool)

(assert (=> b!99880 (= e!65053 e!65049)))

(declare-fun res!50141 () Bool)

(assert (=> b!99880 (=> (not res!50141) (not e!65049))))

(assert (=> b!99880 (= res!50141 (contains!804 lt!50434 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!99880 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(assert (= (and d!26887 c!17082) b!99877))

(assert (= (and d!26887 (not c!17082)) b!99872))

(assert (= (and b!99872 c!17086) b!99865))

(assert (= (and b!99872 (not c!17086)) b!99871))

(assert (= (and b!99871 c!17081) b!99860))

(assert (= (and b!99871 (not c!17081)) b!99878))

(assert (= (or b!99860 b!99878) bm!10273))

(assert (= (or b!99865 bm!10273) bm!10270))

(assert (= (or b!99865 b!99860) bm!10275))

(assert (= (or b!99877 bm!10270) bm!10274))

(assert (= (or b!99877 bm!10275) bm!10271))

(assert (= (and d!26887 res!50136) b!99868))

(assert (= (and d!26887 c!17083) b!99866))

(assert (= (and d!26887 (not c!17083)) b!99864))

(assert (= (and d!26887 res!50140) b!99867))

(assert (= (and b!99867 res!50134) b!99874))

(assert (= (and b!99867 (not res!50139)) b!99880))

(assert (= (and b!99880 res!50141) b!99863))

(assert (= (and b!99867 res!50142) b!99875))

(assert (= (and b!99875 c!17084) b!99861))

(assert (= (and b!99875 (not c!17084)) b!99862))

(assert (= (and b!99861 res!50135) b!99876))

(assert (= (or b!99861 b!99862) bm!10269))

(assert (= (and b!99875 res!50137) b!99873))

(assert (= (and b!99873 c!17085) b!99879))

(assert (= (and b!99873 (not c!17085)) b!99869))

(assert (= (and b!99879 res!50138) b!99870))

(assert (= (or b!99879 b!99869) bm!10272))

(declare-fun b_lambda!4461 () Bool)

(assert (=> (not b_lambda!4461) (not b!99863)))

(assert (=> b!99863 t!5564))

(declare-fun b_and!6143 () Bool)

(assert (= b_and!6139 (and (=> t!5564 result!3303) b_and!6143)))

(assert (=> b!99863 t!5566))

(declare-fun b_and!6145 () Bool)

(assert (= b_and!6141 (and (=> t!5566 result!3305) b_and!6145)))

(declare-fun m!110053 () Bool)

(assert (=> b!99863 m!110053))

(declare-fun m!110055 () Bool)

(assert (=> b!99863 m!110055))

(assert (=> b!99863 m!109401))

(assert (=> b!99863 m!110055))

(assert (=> b!99863 m!109401))

(declare-fun m!110057 () Bool)

(assert (=> b!99863 m!110057))

(assert (=> b!99863 m!110053))

(declare-fun m!110059 () Bool)

(assert (=> b!99863 m!110059))

(declare-fun m!110061 () Bool)

(assert (=> b!99876 m!110061))

(declare-fun m!110063 () Bool)

(assert (=> bm!10274 m!110063))

(assert (=> b!99874 m!110053))

(assert (=> b!99874 m!110053))

(declare-fun m!110065 () Bool)

(assert (=> b!99874 m!110065))

(assert (=> b!99868 m!110053))

(assert (=> b!99868 m!110053))

(assert (=> b!99868 m!110065))

(assert (=> d!26887 m!109413))

(declare-fun m!110067 () Bool)

(assert (=> bm!10271 m!110067))

(declare-fun m!110069 () Bool)

(assert (=> b!99870 m!110069))

(assert (=> b!99880 m!110053))

(assert (=> b!99880 m!110053))

(declare-fun m!110071 () Bool)

(assert (=> b!99880 m!110071))

(declare-fun m!110073 () Bool)

(assert (=> bm!10269 m!110073))

(assert (=> b!99866 m!110053))

(declare-fun m!110075 () Bool)

(assert (=> b!99866 m!110075))

(declare-fun m!110077 () Bool)

(assert (=> b!99866 m!110077))

(declare-fun m!110079 () Bool)

(assert (=> b!99866 m!110079))

(declare-fun m!110081 () Bool)

(assert (=> b!99866 m!110081))

(declare-fun m!110083 () Bool)

(assert (=> b!99866 m!110083))

(declare-fun m!110085 () Bool)

(assert (=> b!99866 m!110085))

(declare-fun m!110087 () Bool)

(assert (=> b!99866 m!110087))

(declare-fun m!110089 () Bool)

(assert (=> b!99866 m!110089))

(declare-fun m!110091 () Bool)

(assert (=> b!99866 m!110091))

(declare-fun m!110093 () Bool)

(assert (=> b!99866 m!110093))

(assert (=> b!99866 m!110091))

(declare-fun m!110095 () Bool)

(assert (=> b!99866 m!110095))

(declare-fun m!110097 () Bool)

(assert (=> b!99866 m!110097))

(assert (=> b!99866 m!110085))

(declare-fun m!110099 () Bool)

(assert (=> b!99866 m!110099))

(declare-fun m!110101 () Bool)

(assert (=> b!99866 m!110101))

(assert (=> b!99866 m!110063))

(assert (=> b!99866 m!110097))

(declare-fun m!110103 () Bool)

(assert (=> b!99866 m!110103))

(assert (=> b!99866 m!110075))

(declare-fun m!110105 () Bool)

(assert (=> b!99877 m!110105))

(declare-fun m!110107 () Bool)

(assert (=> bm!10272 m!110107))

(assert (=> d!26819 d!26887))

(declare-fun b!99881 () Bool)

(declare-fun e!65059 () (_ BitVec 32))

(declare-fun e!65058 () (_ BitVec 32))

(assert (=> b!99881 (= e!65059 e!65058)))

(declare-fun c!17087 () Bool)

(assert (=> b!99881 (= c!17087 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99882 () Bool)

(declare-fun call!10279 () (_ BitVec 32))

(assert (=> b!99882 (= e!65058 (bvadd #b00000000000000000000000000000001 call!10279))))

(declare-fun b!99883 () Bool)

(assert (=> b!99883 (= e!65059 #b00000000000000000000000000000000)))

(declare-fun d!26889 () Bool)

(declare-fun lt!50444 () (_ BitVec 32))

(assert (=> d!26889 (and (bvsge lt!50444 #b00000000000000000000000000000000) (bvsle lt!50444 (bvsub (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!26889 (= lt!50444 e!65059)))

(declare-fun c!17088 () Bool)

(assert (=> d!26889 (= c!17088 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26889 (and (bvsle #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2272 (_keys!4196 newMap!16)) (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(assert (=> d!26889 (= (arrayCountValidKeys!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) lt!50444)))

(declare-fun bm!10276 () Bool)

(assert (=> bm!10276 (= call!10279 (arrayCountValidKeys!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99884 () Bool)

(assert (=> b!99884 (= e!65058 call!10279)))

(assert (= (and d!26889 c!17088) b!99883))

(assert (= (and d!26889 (not c!17088)) b!99881))

(assert (= (and b!99881 c!17087) b!99882))

(assert (= (and b!99881 (not c!17087)) b!99884))

(assert (= (or b!99882 b!99884) bm!10276))

(assert (=> b!99881 m!110053))

(assert (=> b!99881 m!110053))

(assert (=> b!99881 m!110065))

(declare-fun m!110109 () Bool)

(assert (=> bm!10276 m!110109))

(assert (=> d!26819 d!26889))

(declare-fun b!99885 () Bool)

(declare-fun e!65062 () Bool)

(assert (=> b!99885 (= e!65062 (contains!805 lt!50341 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) lt!50335)))))

(declare-fun b!99887 () Bool)

(declare-fun e!65063 () Bool)

(declare-fun call!10280 () Bool)

(assert (=> b!99887 (= e!65063 call!10280)))

(declare-fun b!99888 () Bool)

(assert (=> b!99888 (= e!65063 call!10280)))

(declare-fun d!26891 () Bool)

(declare-fun res!50143 () Bool)

(declare-fun e!65061 () Bool)

(assert (=> d!26891 (=> res!50143 e!65061)))

(assert (=> d!26891 (= res!50143 (bvsge lt!50335 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(assert (=> d!26891 (= (arrayNoDuplicates!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) lt!50335 lt!50341) e!65061)))

(declare-fun b!99886 () Bool)

(declare-fun e!65060 () Bool)

(assert (=> b!99886 (= e!65061 e!65060)))

(declare-fun res!50144 () Bool)

(assert (=> b!99886 (=> (not res!50144) (not e!65060))))

(assert (=> b!99886 (= res!50144 (not e!65062))))

(declare-fun res!50145 () Bool)

(assert (=> b!99886 (=> (not res!50145) (not e!65062))))

(assert (=> b!99886 (= res!50145 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) lt!50335)))))

(declare-fun b!99889 () Bool)

(assert (=> b!99889 (= e!65060 e!65063)))

(declare-fun c!17089 () Bool)

(assert (=> b!99889 (= c!17089 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) lt!50335)))))

(declare-fun bm!10277 () Bool)

(assert (=> bm!10277 (= call!10280 (arrayNoDuplicates!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (bvadd lt!50335 #b00000000000000000000000000000001) (ite c!17089 (Cons!1580 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) lt!50335) lt!50341) lt!50341)))))

(assert (= (and d!26891 (not res!50143)) b!99886))

(assert (= (and b!99886 res!50145) b!99885))

(assert (= (and b!99886 res!50144) b!99889))

(assert (= (and b!99889 c!17089) b!99887))

(assert (= (and b!99889 (not c!17089)) b!99888))

(assert (= (or b!99887 b!99888) bm!10277))

(declare-fun m!110111 () Bool)

(assert (=> b!99885 m!110111))

(assert (=> b!99885 m!110111))

(declare-fun m!110113 () Bool)

(assert (=> b!99885 m!110113))

(assert (=> b!99886 m!110111))

(assert (=> b!99886 m!110111))

(declare-fun m!110115 () Bool)

(assert (=> b!99886 m!110115))

(assert (=> b!99889 m!110111))

(assert (=> b!99889 m!110111))

(assert (=> b!99889 m!110115))

(assert (=> bm!10277 m!110111))

(declare-fun m!110117 () Bool)

(assert (=> bm!10277 m!110117))

(assert (=> d!26819 d!26891))

(declare-fun b!99890 () Bool)

(declare-fun e!65069 () ListLongMap!1539)

(declare-fun call!10286 () ListLongMap!1539)

(assert (=> b!99890 (= e!65069 call!10286)))

(declare-fun bm!10278 () Bool)

(declare-fun call!10282 () Bool)

(declare-fun lt!50457 () ListLongMap!1539)

(assert (=> bm!10278 (= call!10282 (contains!804 lt!50457 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99891 () Bool)

(declare-fun e!65065 () Bool)

(declare-fun e!65071 () Bool)

(assert (=> b!99891 (= e!65065 e!65071)))

(declare-fun res!50147 () Bool)

(assert (=> b!99891 (= res!50147 call!10282)))

(assert (=> b!99891 (=> (not res!50147) (not e!65071))))

(declare-fun b!99892 () Bool)

(assert (=> b!99892 (= e!65065 (not call!10282))))

(declare-fun b!99894 () Bool)

(declare-fun e!65073 () Unit!2999)

(declare-fun Unit!3026 () Unit!2999)

(assert (=> b!99894 (= e!65073 Unit!3026)))

(declare-fun b!99895 () Bool)

(declare-fun e!65064 () ListLongMap!1539)

(assert (=> b!99895 (= e!65064 call!10286)))

(declare-fun b!99896 () Bool)

(declare-fun lt!50445 () Unit!2999)

(assert (=> b!99896 (= e!65073 lt!50445)))

(declare-fun lt!50465 () ListLongMap!1539)

(assert (=> b!99896 (= lt!50465 (getCurrentListMapNoExtraKeys!101 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50447 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50447 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50446 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50446 (select (arr!2021 lt!50326) #b00000000000000000000000000000000))))

(declare-fun lt!50451 () Unit!2999)

(assert (=> b!99896 (= lt!50451 (addStillContains!69 lt!50465 lt!50447 (zeroValue!2383 newMap!16) lt!50446))))

(assert (=> b!99896 (contains!804 (+!136 lt!50465 (tuple2!2347 lt!50447 (zeroValue!2383 newMap!16))) lt!50446)))

(declare-fun lt!50454 () Unit!2999)

(assert (=> b!99896 (= lt!50454 lt!50451)))

(declare-fun lt!50455 () ListLongMap!1539)

(assert (=> b!99896 (= lt!50455 (getCurrentListMapNoExtraKeys!101 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50460 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50460 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50462 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50462 (select (arr!2021 lt!50326) #b00000000000000000000000000000000))))

(declare-fun lt!50456 () Unit!2999)

(assert (=> b!99896 (= lt!50456 (addApplyDifferent!69 lt!50455 lt!50460 (minValue!2383 newMap!16) lt!50462))))

(assert (=> b!99896 (= (apply!93 (+!136 lt!50455 (tuple2!2347 lt!50460 (minValue!2383 newMap!16))) lt!50462) (apply!93 lt!50455 lt!50462))))

(declare-fun lt!50450 () Unit!2999)

(assert (=> b!99896 (= lt!50450 lt!50456)))

(declare-fun lt!50452 () ListLongMap!1539)

(assert (=> b!99896 (= lt!50452 (getCurrentListMapNoExtraKeys!101 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50463 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50463 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50449 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50449 (select (arr!2021 lt!50326) #b00000000000000000000000000000000))))

(declare-fun lt!50448 () Unit!2999)

(assert (=> b!99896 (= lt!50448 (addApplyDifferent!69 lt!50452 lt!50463 (zeroValue!2383 newMap!16) lt!50449))))

(assert (=> b!99896 (= (apply!93 (+!136 lt!50452 (tuple2!2347 lt!50463 (zeroValue!2383 newMap!16))) lt!50449) (apply!93 lt!50452 lt!50449))))

(declare-fun lt!50464 () Unit!2999)

(assert (=> b!99896 (= lt!50464 lt!50448)))

(declare-fun lt!50453 () ListLongMap!1539)

(assert (=> b!99896 (= lt!50453 (getCurrentListMapNoExtraKeys!101 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50461 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50461 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50466 () (_ BitVec 64))

(assert (=> b!99896 (= lt!50466 (select (arr!2021 lt!50326) #b00000000000000000000000000000000))))

(assert (=> b!99896 (= lt!50445 (addApplyDifferent!69 lt!50453 lt!50461 (minValue!2383 newMap!16) lt!50466))))

(assert (=> b!99896 (= (apply!93 (+!136 lt!50453 (tuple2!2347 lt!50461 (minValue!2383 newMap!16))) lt!50466) (apply!93 lt!50453 lt!50466))))

(declare-fun b!99897 () Bool)

(declare-fun res!50154 () Bool)

(declare-fun e!65076 () Bool)

(assert (=> b!99897 (=> (not res!50154) (not e!65076))))

(declare-fun e!65072 () Bool)

(assert (=> b!99897 (= res!50154 e!65072)))

(declare-fun res!50151 () Bool)

(assert (=> b!99897 (=> res!50151 e!65072)))

(declare-fun e!65067 () Bool)

(assert (=> b!99897 (= res!50151 (not e!65067))))

(declare-fun res!50146 () Bool)

(assert (=> b!99897 (=> (not res!50146) (not e!65067))))

(assert (=> b!99897 (= res!50146 (bvslt #b00000000000000000000000000000000 (size!2272 lt!50326)))))

(declare-fun b!99898 () Bool)

(declare-fun e!65075 () Bool)

(assert (=> b!99898 (= e!65075 (validKeyInArray!0 (select (arr!2021 lt!50326) #b00000000000000000000000000000000)))))

(declare-fun b!99899 () Bool)

(declare-fun e!65066 () Bool)

(declare-fun call!10283 () Bool)

(assert (=> b!99899 (= e!65066 (not call!10283))))

(declare-fun bm!10279 () Bool)

(declare-fun call!10285 () ListLongMap!1539)

(declare-fun call!10284 () ListLongMap!1539)

(assert (=> bm!10279 (= call!10285 call!10284)))

(declare-fun bm!10280 () Bool)

(declare-fun call!10287 () ListLongMap!1539)

(declare-fun c!17095 () Bool)

(declare-fun call!10281 () ListLongMap!1539)

(declare-fun c!17091 () Bool)

(assert (=> bm!10280 (= call!10287 (+!136 (ite c!17091 call!10284 (ite c!17095 call!10285 call!10281)) (ite (or c!17091 c!17095) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99900 () Bool)

(declare-fun e!65074 () Bool)

(assert (=> b!99900 (= e!65074 (= (apply!93 lt!50457 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99901 () Bool)

(declare-fun c!17090 () Bool)

(assert (=> b!99901 (= c!17090 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99901 (= e!65064 e!65069)))

(declare-fun b!99902 () Bool)

(declare-fun e!65070 () ListLongMap!1539)

(assert (=> b!99902 (= e!65070 e!65064)))

(assert (=> b!99902 (= c!17095 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10281 () Bool)

(assert (=> bm!10281 (= call!10283 (contains!804 lt!50457 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99903 () Bool)

(assert (=> b!99903 (= e!65076 e!65066)))

(declare-fun c!17094 () Bool)

(assert (=> b!99903 (= c!17094 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99904 () Bool)

(assert (=> b!99904 (= e!65067 (validKeyInArray!0 (select (arr!2021 lt!50326) #b00000000000000000000000000000000)))))

(declare-fun b!99905 () Bool)

(declare-fun res!50149 () Bool)

(assert (=> b!99905 (=> (not res!50149) (not e!65076))))

(assert (=> b!99905 (= res!50149 e!65065)))

(declare-fun c!17093 () Bool)

(assert (=> b!99905 (= c!17093 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10282 () Bool)

(assert (=> bm!10282 (= call!10281 call!10285)))

(declare-fun b!99906 () Bool)

(assert (=> b!99906 (= e!65071 (= (apply!93 lt!50457 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10283 () Bool)

(assert (=> bm!10283 (= call!10284 (getCurrentListMapNoExtraKeys!101 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!26893 () Bool)

(assert (=> d!26893 e!65076))

(declare-fun res!50152 () Bool)

(assert (=> d!26893 (=> (not res!50152) (not e!65076))))

(assert (=> d!26893 (= res!50152 (or (bvsge #b00000000000000000000000000000000 (size!2272 lt!50326)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 lt!50326)))))))

(declare-fun lt!50459 () ListLongMap!1539)

(assert (=> d!26893 (= lt!50457 lt!50459)))

(declare-fun lt!50458 () Unit!2999)

(assert (=> d!26893 (= lt!50458 e!65073)))

(declare-fun c!17092 () Bool)

(assert (=> d!26893 (= c!17092 e!65075)))

(declare-fun res!50148 () Bool)

(assert (=> d!26893 (=> (not res!50148) (not e!65075))))

(assert (=> d!26893 (= res!50148 (bvslt #b00000000000000000000000000000000 (size!2272 lt!50326)))))

(assert (=> d!26893 (= lt!50459 e!65070)))

(assert (=> d!26893 (= c!17091 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26893 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26893 (= (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50457)))

(declare-fun b!99893 () Bool)

(declare-fun e!65068 () Bool)

(assert (=> b!99893 (= e!65068 (= (apply!93 lt!50457 (select (arr!2021 lt!50326) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 lt!50334) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99893 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 lt!50334)))))

(assert (=> b!99893 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 lt!50326)))))

(declare-fun b!99907 () Bool)

(assert (=> b!99907 (= e!65070 (+!136 call!10287 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10284 () Bool)

(assert (=> bm!10284 (= call!10286 call!10287)))

(declare-fun b!99908 () Bool)

(assert (=> b!99908 (= e!65069 call!10281)))

(declare-fun b!99909 () Bool)

(assert (=> b!99909 (= e!65066 e!65074)))

(declare-fun res!50150 () Bool)

(assert (=> b!99909 (= res!50150 call!10283)))

(assert (=> b!99909 (=> (not res!50150) (not e!65074))))

(declare-fun b!99910 () Bool)

(assert (=> b!99910 (= e!65072 e!65068)))

(declare-fun res!50153 () Bool)

(assert (=> b!99910 (=> (not res!50153) (not e!65068))))

(assert (=> b!99910 (= res!50153 (contains!804 lt!50457 (select (arr!2021 lt!50326) #b00000000000000000000000000000000)))))

(assert (=> b!99910 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 lt!50326)))))

(assert (= (and d!26893 c!17091) b!99907))

(assert (= (and d!26893 (not c!17091)) b!99902))

(assert (= (and b!99902 c!17095) b!99895))

(assert (= (and b!99902 (not c!17095)) b!99901))

(assert (= (and b!99901 c!17090) b!99890))

(assert (= (and b!99901 (not c!17090)) b!99908))

(assert (= (or b!99890 b!99908) bm!10282))

(assert (= (or b!99895 bm!10282) bm!10279))

(assert (= (or b!99895 b!99890) bm!10284))

(assert (= (or b!99907 bm!10279) bm!10283))

(assert (= (or b!99907 bm!10284) bm!10280))

(assert (= (and d!26893 res!50148) b!99898))

(assert (= (and d!26893 c!17092) b!99896))

(assert (= (and d!26893 (not c!17092)) b!99894))

(assert (= (and d!26893 res!50152) b!99897))

(assert (= (and b!99897 res!50146) b!99904))

(assert (= (and b!99897 (not res!50151)) b!99910))

(assert (= (and b!99910 res!50153) b!99893))

(assert (= (and b!99897 res!50154) b!99905))

(assert (= (and b!99905 c!17093) b!99891))

(assert (= (and b!99905 (not c!17093)) b!99892))

(assert (= (and b!99891 res!50147) b!99906))

(assert (= (or b!99891 b!99892) bm!10278))

(assert (= (and b!99905 res!50149) b!99903))

(assert (= (and b!99903 c!17094) b!99909))

(assert (= (and b!99903 (not c!17094)) b!99899))

(assert (= (and b!99909 res!50150) b!99900))

(assert (= (or b!99909 b!99899) bm!10281))

(declare-fun b_lambda!4463 () Bool)

(assert (=> (not b_lambda!4463) (not b!99893)))

(assert (=> b!99893 t!5564))

(declare-fun b_and!6147 () Bool)

(assert (= b_and!6143 (and (=> t!5564 result!3303) b_and!6147)))

(assert (=> b!99893 t!5566))

(declare-fun b_and!6149 () Bool)

(assert (= b_and!6145 (and (=> t!5566 result!3305) b_and!6149)))

(declare-fun m!110119 () Bool)

(assert (=> b!99893 m!110119))

(declare-fun m!110121 () Bool)

(assert (=> b!99893 m!110121))

(assert (=> b!99893 m!109401))

(assert (=> b!99893 m!110121))

(assert (=> b!99893 m!109401))

(declare-fun m!110123 () Bool)

(assert (=> b!99893 m!110123))

(assert (=> b!99893 m!110119))

(declare-fun m!110125 () Bool)

(assert (=> b!99893 m!110125))

(declare-fun m!110127 () Bool)

(assert (=> b!99906 m!110127))

(declare-fun m!110129 () Bool)

(assert (=> bm!10283 m!110129))

(assert (=> b!99904 m!110119))

(assert (=> b!99904 m!110119))

(declare-fun m!110131 () Bool)

(assert (=> b!99904 m!110131))

(assert (=> b!99898 m!110119))

(assert (=> b!99898 m!110119))

(assert (=> b!99898 m!110131))

(assert (=> d!26893 m!109413))

(declare-fun m!110133 () Bool)

(assert (=> bm!10280 m!110133))

(declare-fun m!110135 () Bool)

(assert (=> b!99900 m!110135))

(assert (=> b!99910 m!110119))

(assert (=> b!99910 m!110119))

(declare-fun m!110137 () Bool)

(assert (=> b!99910 m!110137))

(declare-fun m!110139 () Bool)

(assert (=> bm!10278 m!110139))

(assert (=> b!99896 m!110119))

(declare-fun m!110141 () Bool)

(assert (=> b!99896 m!110141))

(declare-fun m!110143 () Bool)

(assert (=> b!99896 m!110143))

(declare-fun m!110145 () Bool)

(assert (=> b!99896 m!110145))

(declare-fun m!110147 () Bool)

(assert (=> b!99896 m!110147))

(declare-fun m!110149 () Bool)

(assert (=> b!99896 m!110149))

(declare-fun m!110151 () Bool)

(assert (=> b!99896 m!110151))

(declare-fun m!110153 () Bool)

(assert (=> b!99896 m!110153))

(declare-fun m!110155 () Bool)

(assert (=> b!99896 m!110155))

(declare-fun m!110157 () Bool)

(assert (=> b!99896 m!110157))

(declare-fun m!110159 () Bool)

(assert (=> b!99896 m!110159))

(assert (=> b!99896 m!110157))

(declare-fun m!110161 () Bool)

(assert (=> b!99896 m!110161))

(declare-fun m!110163 () Bool)

(assert (=> b!99896 m!110163))

(assert (=> b!99896 m!110151))

(declare-fun m!110165 () Bool)

(assert (=> b!99896 m!110165))

(declare-fun m!110167 () Bool)

(assert (=> b!99896 m!110167))

(assert (=> b!99896 m!110129))

(assert (=> b!99896 m!110163))

(declare-fun m!110169 () Bool)

(assert (=> b!99896 m!110169))

(assert (=> b!99896 m!110141))

(declare-fun m!110171 () Bool)

(assert (=> b!99907 m!110171))

(declare-fun m!110173 () Bool)

(assert (=> bm!10281 m!110173))

(assert (=> d!26819 d!26893))

(declare-fun d!26895 () Bool)

(declare-fun e!65077 () Bool)

(assert (=> d!26895 e!65077))

(declare-fun res!50156 () Bool)

(assert (=> d!26895 (=> (not res!50156) (not e!65077))))

(declare-fun lt!50469 () ListLongMap!1539)

(assert (=> d!26895 (= res!50156 (contains!804 lt!50469 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50470 () List!1583)

(assert (=> d!26895 (= lt!50469 (ListLongMap!1540 lt!50470))))

(declare-fun lt!50467 () Unit!2999)

(declare-fun lt!50468 () Unit!2999)

(assert (=> d!26895 (= lt!50467 lt!50468)))

(assert (=> d!26895 (= (getValueByKey!151 lt!50470 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26895 (= lt!50468 (lemmaContainsTupThenGetReturnValue!67 lt!50470 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26895 (= lt!50470 (insertStrictlySorted!70 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26895 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50469)))

(declare-fun b!99911 () Bool)

(declare-fun res!50155 () Bool)

(assert (=> b!99911 (=> (not res!50155) (not e!65077))))

(assert (=> b!99911 (= res!50155 (= (getValueByKey!151 (toList!785 lt!50469) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99912 () Bool)

(assert (=> b!99912 (= e!65077 (contains!806 (toList!785 lt!50469) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26895 res!50156) b!99911))

(assert (= (and b!99911 res!50155) b!99912))

(declare-fun m!110175 () Bool)

(assert (=> d!26895 m!110175))

(declare-fun m!110177 () Bool)

(assert (=> d!26895 m!110177))

(declare-fun m!110179 () Bool)

(assert (=> d!26895 m!110179))

(declare-fun m!110181 () Bool)

(assert (=> d!26895 m!110181))

(declare-fun m!110183 () Bool)

(assert (=> b!99911 m!110183))

(declare-fun m!110185 () Bool)

(assert (=> b!99912 m!110185))

(assert (=> d!26819 d!26895))

(declare-fun d!26897 () Bool)

(assert (=> d!26897 (arrayContainsKey!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!50473 () Unit!2999)

(declare-fun choose!13 (array!4255 (_ BitVec 64) (_ BitVec 32)) Unit!2999)

(assert (=> d!26897 (= lt!50473 (choose!13 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(assert (=> d!26897 (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000)))

(assert (=> d!26897 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))) lt!50473)))

(declare-fun bs!4132 () Bool)

(assert (= bs!4132 d!26897))

(assert (=> bs!4132 m!109133))

(assert (=> bs!4132 m!109843))

(assert (=> bs!4132 m!109133))

(declare-fun m!110187 () Bool)

(assert (=> bs!4132 m!110187))

(assert (=> d!26819 d!26897))

(declare-fun d!26899 () Bool)

(declare-fun e!65080 () Bool)

(assert (=> d!26899 e!65080))

(declare-fun res!50159 () Bool)

(assert (=> d!26899 (=> (not res!50159) (not e!65080))))

(assert (=> d!26899 (= res!50159 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 (_keys!4196 newMap!16)))))))

(declare-fun lt!50476 () Unit!2999)

(declare-fun choose!41 (array!4255 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1584) Unit!2999)

(assert (=> d!26899 (= lt!50476 (choose!41 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) lt!50335 lt!50341))))

(assert (=> d!26899 (bvslt (size!2272 (_keys!4196 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26899 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) lt!50335 lt!50341) lt!50476)))

(declare-fun b!99915 () Bool)

(assert (=> b!99915 (= e!65080 (arrayNoDuplicates!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) lt!50335 lt!50341))))

(assert (= (and d!26899 res!50159) b!99915))

(assert (=> d!26899 m!109133))

(declare-fun m!110189 () Bool)

(assert (=> d!26899 m!110189))

(assert (=> b!99915 m!109835))

(assert (=> b!99915 m!109815))

(assert (=> d!26819 d!26899))

(declare-fun d!26901 () Bool)

(declare-fun e!65083 () Bool)

(assert (=> d!26901 e!65083))

(declare-fun res!50162 () Bool)

(assert (=> d!26901 (=> (not res!50162) (not e!65083))))

(assert (=> d!26901 (= res!50162 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 (_keys!4196 newMap!16))) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2273 (_values!2485 newMap!16)))))))

(declare-fun lt!50479 () Unit!2999)

(declare-fun choose!612 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!2999)

(assert (=> d!26901 (= lt!50479 (choose!612 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26901 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26901 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50479)))

(declare-fun b!99918 () Bool)

(assert (=> b!99918 (= e!65083 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))))

(assert (= (and d!26901 res!50162) b!99918))

(assert (=> d!26901 m!109133))

(assert (=> d!26901 m!109159))

(declare-fun m!110191 () Bool)

(assert (=> d!26901 m!110191))

(assert (=> d!26901 m!109413))

(assert (=> b!99918 m!109221))

(assert (=> b!99918 m!109821))

(assert (=> b!99918 m!109221))

(assert (=> b!99918 m!109751))

(assert (=> b!99918 m!109835))

(assert (=> b!99918 m!109827))

(assert (=> d!26819 d!26901))

(declare-fun b!99919 () Bool)

(declare-fun e!65086 () Bool)

(declare-fun e!65085 () Bool)

(assert (=> b!99919 (= e!65086 e!65085)))

(declare-fun c!17096 () Bool)

(assert (=> b!99919 (= c!17096 (validKeyInArray!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!26903 () Bool)

(declare-fun res!50164 () Bool)

(assert (=> d!26903 (=> res!50164 e!65086)))

(assert (=> d!26903 (= res!50164 (bvsge #b00000000000000000000000000000000 (size!2272 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))))))))

(assert (=> d!26903 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (mask!6609 newMap!16)) e!65086)))

(declare-fun b!99920 () Bool)

(declare-fun e!65084 () Bool)

(declare-fun call!10288 () Bool)

(assert (=> b!99920 (= e!65084 call!10288)))

(declare-fun b!99921 () Bool)

(assert (=> b!99921 (= e!65085 e!65084)))

(declare-fun lt!50480 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50480 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50482 () Unit!2999)

(assert (=> b!99921 (= lt!50482 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) lt!50480 #b00000000000000000000000000000000))))

(assert (=> b!99921 (arrayContainsKey!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) lt!50480 #b00000000000000000000000000000000)))

(declare-fun lt!50481 () Unit!2999)

(assert (=> b!99921 (= lt!50481 lt!50482)))

(declare-fun res!50163 () Bool)

(assert (=> b!99921 (= res!50163 (= (seekEntryOrOpen!0 (select (arr!2021 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000) (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (mask!6609 newMap!16)) (Found!254 #b00000000000000000000000000000000)))))

(assert (=> b!99921 (=> (not res!50163) (not e!65084))))

(declare-fun bm!10285 () Bool)

(assert (=> bm!10285 (= call!10288 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) (mask!6609 newMap!16)))))

(declare-fun b!99922 () Bool)

(assert (=> b!99922 (= e!65085 call!10288)))

(assert (= (and d!26903 (not res!50164)) b!99919))

(assert (= (and b!99919 c!17096) b!99921))

(assert (= (and b!99919 (not c!17096)) b!99922))

(assert (= (and b!99921 res!50163) b!99920))

(assert (= (or b!99920 b!99922) bm!10285))

(assert (=> b!99919 m!110053))

(assert (=> b!99919 m!110053))

(assert (=> b!99919 m!110065))

(assert (=> b!99921 m!110053))

(declare-fun m!110193 () Bool)

(assert (=> b!99921 m!110193))

(declare-fun m!110195 () Bool)

(assert (=> b!99921 m!110195))

(assert (=> b!99921 m!110053))

(declare-fun m!110197 () Bool)

(assert (=> b!99921 m!110197))

(declare-fun m!110199 () Bool)

(assert (=> bm!10285 m!110199))

(assert (=> d!26819 d!26903))

(assert (=> d!26819 d!26725))

(declare-fun d!26905 () Bool)

(declare-fun e!65087 () Bool)

(assert (=> d!26905 e!65087))

(declare-fun res!50165 () Bool)

(assert (=> d!26905 (=> (not res!50165) (not e!65087))))

(assert (=> d!26905 (= res!50165 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 lt!50326))))))

(declare-fun lt!50483 () Unit!2999)

(assert (=> d!26905 (= lt!50483 (choose!606 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26905 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26905 (= (lemmaValidKeyInArrayIsInListMap!103 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (defaultEntry!2502 newMap!16)) lt!50483)))

(declare-fun b!99923 () Bool)

(assert (=> b!99923 (= e!65087 (contains!804 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 lt!50326) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(assert (= (and d!26905 res!50165) b!99923))

(declare-fun m!110201 () Bool)

(assert (=> d!26905 m!110201))

(assert (=> d!26905 m!109413))

(assert (=> b!99923 m!109813))

(declare-fun m!110203 () Bool)

(assert (=> b!99923 m!110203))

(assert (=> b!99923 m!109813))

(assert (=> b!99923 m!110203))

(declare-fun m!110205 () Bool)

(assert (=> b!99923 m!110205))

(assert (=> d!26819 d!26905))

(declare-fun b!99935 () Bool)

(declare-fun e!65093 () Bool)

(assert (=> b!99935 (= e!65093 (= (arrayCountValidKeys!0 (array!4256 (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (size!2272 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!99933 () Bool)

(declare-fun res!50174 () Bool)

(declare-fun e!65092 () Bool)

(assert (=> b!99933 (=> (not res!50174) (not e!65092))))

(assert (=> b!99933 (= res!50174 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!99934 () Bool)

(assert (=> b!99934 (= e!65092 (bvslt (size!2272 (_keys!4196 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!99932 () Bool)

(declare-fun res!50176 () Bool)

(assert (=> b!99932 (=> (not res!50176) (not e!65092))))

(assert (=> b!99932 (= res!50176 (not (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))))

(declare-fun d!26907 () Bool)

(assert (=> d!26907 e!65093))

(declare-fun res!50175 () Bool)

(assert (=> d!26907 (=> (not res!50175) (not e!65093))))

(assert (=> d!26907 (= res!50175 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 (_keys!4196 newMap!16)))))))

(declare-fun lt!50486 () Unit!2999)

(declare-fun choose!1 (array!4255 (_ BitVec 32) (_ BitVec 64)) Unit!2999)

(assert (=> d!26907 (= lt!50486 (choose!1 (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26907 e!65092))

(declare-fun res!50177 () Bool)

(assert (=> d!26907 (=> (not res!50177) (not e!65092))))

(assert (=> d!26907 (= res!50177 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 (_keys!4196 newMap!16)))))))

(assert (=> d!26907 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4196 newMap!16) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50486)))

(assert (= (and d!26907 res!50177) b!99932))

(assert (= (and b!99932 res!50176) b!99933))

(assert (= (and b!99933 res!50174) b!99934))

(assert (= (and d!26907 res!50175) b!99935))

(assert (=> b!99935 m!109835))

(assert (=> b!99935 m!109841))

(assert (=> b!99935 m!109363))

(assert (=> b!99933 m!109133))

(assert (=> b!99933 m!109289))

(declare-fun m!110207 () Bool)

(assert (=> b!99932 m!110207))

(assert (=> b!99932 m!110207))

(declare-fun m!110209 () Bool)

(assert (=> b!99932 m!110209))

(assert (=> d!26907 m!109133))

(declare-fun m!110211 () Bool)

(assert (=> d!26907 m!110211))

(assert (=> d!26819 d!26907))

(declare-fun d!26909 () Bool)

(declare-fun e!65094 () Bool)

(assert (=> d!26909 e!65094))

(declare-fun res!50178 () Bool)

(assert (=> d!26909 (=> res!50178 e!65094)))

(declare-fun lt!50490 () Bool)

(assert (=> d!26909 (= res!50178 (not lt!50490))))

(declare-fun lt!50488 () Bool)

(assert (=> d!26909 (= lt!50490 lt!50488)))

(declare-fun lt!50487 () Unit!2999)

(declare-fun e!65095 () Unit!2999)

(assert (=> d!26909 (= lt!50487 e!65095)))

(declare-fun c!17097 () Bool)

(assert (=> d!26909 (= c!17097 lt!50488)))

(assert (=> d!26909 (= lt!50488 (containsKey!155 (toList!785 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(assert (=> d!26909 (= (contains!804 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))) lt!50490)))

(declare-fun b!99936 () Bool)

(declare-fun lt!50489 () Unit!2999)

(assert (=> b!99936 (= e!65095 lt!50489)))

(assert (=> b!99936 (= lt!50489 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(assert (=> b!99936 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(declare-fun b!99937 () Bool)

(declare-fun Unit!3027 () Unit!2999)

(assert (=> b!99937 (= e!65095 Unit!3027)))

(declare-fun b!99938 () Bool)

(assert (=> b!99938 (= e!65094 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 lt!50326 lt!50334 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2021 (_keys!4196 newMap!16)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))))

(assert (= (and d!26909 c!17097) b!99936))

(assert (= (and d!26909 (not c!17097)) b!99937))

(assert (= (and d!26909 (not res!50178)) b!99938))

(assert (=> d!26909 m!109817))

(declare-fun m!110213 () Bool)

(assert (=> d!26909 m!110213))

(assert (=> b!99936 m!109817))

(declare-fun m!110215 () Bool)

(assert (=> b!99936 m!110215))

(assert (=> b!99936 m!109817))

(declare-fun m!110217 () Bool)

(assert (=> b!99936 m!110217))

(assert (=> b!99936 m!110217))

(declare-fun m!110219 () Bool)

(assert (=> b!99936 m!110219))

(assert (=> b!99938 m!109817))

(assert (=> b!99938 m!110217))

(assert (=> b!99938 m!110217))

(assert (=> b!99938 m!110219))

(assert (=> d!26819 d!26909))

(assert (=> d!26819 d!26817))

(declare-fun d!26911 () Bool)

(declare-fun res!50179 () Bool)

(declare-fun e!65096 () Bool)

(assert (=> d!26911 (=> res!50179 e!65096)))

(assert (=> d!26911 (= res!50179 (= (select (arr!2021 lt!50339) #b00000000000000000000000000000000) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26911 (= (arrayContainsKey!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000) e!65096)))

(declare-fun b!99939 () Bool)

(declare-fun e!65097 () Bool)

(assert (=> b!99939 (= e!65096 e!65097)))

(declare-fun res!50180 () Bool)

(assert (=> b!99939 (=> (not res!50180) (not e!65097))))

(assert (=> b!99939 (= res!50180 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 lt!50339)))))

(declare-fun b!99940 () Bool)

(assert (=> b!99940 (= e!65097 (arrayContainsKey!0 lt!50339 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26911 (not res!50179)) b!99939))

(assert (= (and b!99939 res!50180) b!99940))

(declare-fun m!110221 () Bool)

(assert (=> d!26911 m!110221))

(assert (=> b!99940 m!109133))

(declare-fun m!110223 () Bool)

(assert (=> b!99940 m!110223))

(assert (=> d!26819 d!26911))

(declare-fun d!26913 () Bool)

(assert (=> d!26913 (= (arrayCountValidKeys!0 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (bvadd (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!50493 () Unit!2999)

(declare-fun choose!2 (array!4255 (_ BitVec 32)) Unit!2999)

(assert (=> d!26913 (= lt!50493 (choose!2 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))))))

(declare-fun e!65100 () Bool)

(assert (=> d!26913 e!65100))

(declare-fun res!50185 () Bool)

(assert (=> d!26913 (=> (not res!50185) (not e!65100))))

(assert (=> d!26913 (= res!50185 (and (bvsge (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) #b00000000000000000000000000000000) (bvslt (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)) (size!2272 lt!50333))))))

(assert (=> d!26913 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50333 (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049))) lt!50493)))

(declare-fun b!99945 () Bool)

(declare-fun res!50186 () Bool)

(assert (=> b!99945 (=> (not res!50186) (not e!65100))))

(assert (=> b!99945 (= res!50186 (validKeyInArray!0 (select (arr!2021 lt!50333) (ite c!16948 (index!3163 lt!50049) (index!3160 lt!50049)))))))

(declare-fun b!99946 () Bool)

(assert (=> b!99946 (= e!65100 (bvslt (size!2272 lt!50333) #b01111111111111111111111111111111))))

(assert (= (and d!26913 res!50185) b!99945))

(assert (= (and b!99945 res!50186) b!99946))

(assert (=> d!26913 m!109839))

(declare-fun m!110225 () Bool)

(assert (=> d!26913 m!110225))

(assert (=> b!99945 m!110045))

(assert (=> b!99945 m!110045))

(assert (=> b!99945 m!110047))

(assert (=> d!26819 d!26913))

(assert (=> d!26809 d!26755))

(assert (=> d!26809 d!26757))

(declare-fun d!26915 () Bool)

(assert (=> d!26915 (isDefined!104 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!26915 true))

(declare-fun _$12!347 () Unit!2999)

(assert (=> d!26915 (= (choose!609 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) _$12!347)))

(declare-fun bs!4133 () Bool)

(assert (= bs!4133 d!26915))

(assert (=> bs!4133 m!109133))

(assert (=> bs!4133 m!109299))

(assert (=> bs!4133 m!109299))

(assert (=> bs!4133 m!109301))

(assert (=> d!26809 d!26915))

(declare-fun d!26917 () Bool)

(declare-fun res!50191 () Bool)

(declare-fun e!65105 () Bool)

(assert (=> d!26917 (=> res!50191 e!65105)))

(assert (=> d!26917 (= res!50191 (or ((_ is Nil!1580) (toList!785 lt!49878)) ((_ is Nil!1580) (t!5557 (toList!785 lt!49878)))))))

(assert (=> d!26917 (= (isStrictlySorted!305 (toList!785 lt!49878)) e!65105)))

(declare-fun b!99951 () Bool)

(declare-fun e!65106 () Bool)

(assert (=> b!99951 (= e!65105 e!65106)))

(declare-fun res!50192 () Bool)

(assert (=> b!99951 (=> (not res!50192) (not e!65106))))

(assert (=> b!99951 (= res!50192 (bvslt (_1!1184 (h!2174 (toList!785 lt!49878))) (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878))))))))

(declare-fun b!99952 () Bool)

(assert (=> b!99952 (= e!65106 (isStrictlySorted!305 (t!5557 (toList!785 lt!49878))))))

(assert (= (and d!26917 (not res!50191)) b!99951))

(assert (= (and b!99951 res!50192) b!99952))

(declare-fun m!110227 () Bool)

(assert (=> b!99952 m!110227))

(assert (=> d!26809 d!26917))

(declare-fun d!26919 () Bool)

(assert (=> d!26919 (= (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!360 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4134 () Bool)

(assert (= bs!4134 d!26919))

(assert (=> bs!4134 m!109467))

(declare-fun m!110229 () Bool)

(assert (=> bs!4134 m!110229))

(assert (=> b!99438 d!26919))

(declare-fun b!99954 () Bool)

(declare-fun e!65107 () Option!157)

(declare-fun e!65108 () Option!157)

(assert (=> b!99954 (= e!65107 e!65108)))

(declare-fun c!17099 () Bool)

(assert (=> b!99954 (= c!17099 (and ((_ is Cons!1579) (toList!785 lt!49957)) (not (= (_1!1184 (h!2174 (toList!785 lt!49957))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!99956 () Bool)

(assert (=> b!99956 (= e!65108 None!155)))

(declare-fun b!99955 () Bool)

(assert (=> b!99955 (= e!65108 (getValueByKey!151 (t!5557 (toList!785 lt!49957)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun c!17098 () Bool)

(declare-fun d!26921 () Bool)

(assert (=> d!26921 (= c!17098 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26921 (= (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65107)))

(declare-fun b!99953 () Bool)

(assert (=> b!99953 (= e!65107 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49957)))))))

(assert (= (and d!26921 c!17098) b!99953))

(assert (= (and d!26921 (not c!17098)) b!99954))

(assert (= (and b!99954 c!17099) b!99955))

(assert (= (and b!99954 (not c!17099)) b!99956))

(assert (=> b!99955 m!109223))

(declare-fun m!110231 () Bool)

(assert (=> b!99955 m!110231))

(assert (=> b!99438 d!26921))

(declare-fun d!26923 () Bool)

(declare-fun e!65109 () Bool)

(assert (=> d!26923 e!65109))

(declare-fun res!50193 () Bool)

(assert (=> d!26923 (=> res!50193 e!65109)))

(declare-fun lt!50497 () Bool)

(assert (=> d!26923 (= res!50193 (not lt!50497))))

(declare-fun lt!50495 () Bool)

(assert (=> d!26923 (= lt!50497 lt!50495)))

(declare-fun lt!50494 () Unit!2999)

(declare-fun e!65110 () Unit!2999)

(assert (=> d!26923 (= lt!50494 e!65110)))

(declare-fun c!17100 () Bool)

(assert (=> d!26923 (= c!17100 lt!50495)))

(assert (=> d!26923 (= lt!50495 (containsKey!155 (toList!785 lt!50097) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26923 (= (contains!804 lt!50097 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50497)))

(declare-fun b!99957 () Bool)

(declare-fun lt!50496 () Unit!2999)

(assert (=> b!99957 (= e!65110 lt!50496)))

(assert (=> b!99957 (= lt!50496 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50097) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99957 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99958 () Bool)

(declare-fun Unit!3028 () Unit!2999)

(assert (=> b!99958 (= e!65110 Unit!3028)))

(declare-fun b!99959 () Bool)

(assert (=> b!99959 (= e!65109 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26923 c!17100) b!99957))

(assert (= (and d!26923 (not c!17100)) b!99958))

(assert (= (and d!26923 (not res!50193)) b!99959))

(declare-fun m!110233 () Bool)

(assert (=> d!26923 m!110233))

(declare-fun m!110235 () Bool)

(assert (=> b!99957 m!110235))

(declare-fun m!110237 () Bool)

(assert (=> b!99957 m!110237))

(assert (=> b!99957 m!110237))

(declare-fun m!110239 () Bool)

(assert (=> b!99957 m!110239))

(assert (=> b!99959 m!110237))

(assert (=> b!99959 m!110237))

(assert (=> b!99959 m!110239))

(assert (=> bm!10211 d!26923))

(assert (=> b!99447 d!26841))

(declare-fun d!26925 () Bool)

(assert (=> d!26925 (= (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) (not (isEmpty!360 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun bs!4135 () Bool)

(assert (= bs!4135 d!26925))

(assert (=> bs!4135 m!109759))

(declare-fun m!110241 () Bool)

(assert (=> bs!4135 m!110241))

(assert (=> b!99627 d!26925))

(declare-fun b!99961 () Bool)

(declare-fun e!65111 () Option!157)

(declare-fun e!65112 () Option!157)

(assert (=> b!99961 (= e!65111 e!65112)))

(declare-fun c!17102 () Bool)

(assert (=> b!99961 (= c!17102 (and ((_ is Cons!1579) (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (not (= (_1!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun b!99963 () Bool)

(assert (=> b!99963 (= e!65112 None!155)))

(declare-fun b!99962 () Bool)

(assert (=> b!99962 (= e!65112 (getValueByKey!151 (t!5557 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun d!26927 () Bool)

(declare-fun c!17101 () Bool)

(assert (=> d!26927 (= c!17101 (and ((_ is Cons!1579) (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (= (_1!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26927 (= (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65111)))

(declare-fun b!99960 () Bool)

(assert (=> b!99960 (= e!65111 (Some!156 (_2!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))))))

(assert (= (and d!26927 c!17101) b!99960))

(assert (= (and d!26927 (not c!17101)) b!99961))

(assert (= (and b!99961 c!17102) b!99962))

(assert (= (and b!99961 (not c!17102)) b!99963))

(assert (=> b!99962 m!109133))

(declare-fun m!110243 () Bool)

(assert (=> b!99962 m!110243))

(assert (=> b!99627 d!26927))

(assert (=> b!99504 d!26739))

(declare-fun b!99964 () Bool)

(declare-fun e!65115 () Bool)

(declare-fun e!65114 () Bool)

(assert (=> b!99964 (= e!65115 e!65114)))

(declare-fun c!17103 () Bool)

(assert (=> b!99964 (= c!17103 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!26929 () Bool)

(declare-fun res!50195 () Bool)

(assert (=> d!26929 (=> res!50195 e!65115)))

(assert (=> d!26929 (= res!50195 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26929 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992)))) e!65115)))

(declare-fun b!99965 () Bool)

(declare-fun e!65113 () Bool)

(declare-fun call!10289 () Bool)

(assert (=> b!99965 (= e!65113 call!10289)))

(declare-fun b!99966 () Bool)

(assert (=> b!99966 (= e!65114 e!65113)))

(declare-fun lt!50498 () (_ BitVec 64))

(assert (=> b!99966 (= lt!50498 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!50500 () Unit!2999)

(assert (=> b!99966 (= lt!50500 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) lt!50498 #b00000000000000000000000000000000))))

(assert (=> b!99966 (arrayContainsKey!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) lt!50498 #b00000000000000000000000000000000)))

(declare-fun lt!50499 () Unit!2999)

(assert (=> b!99966 (= lt!50499 lt!50500)))

(declare-fun res!50194 () Bool)

(assert (=> b!99966 (= res!50194 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000) (_keys!4196 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992)))) (Found!254 #b00000000000000000000000000000000)))))

(assert (=> b!99966 (=> (not res!50194) (not e!65113))))

(declare-fun bm!10286 () Bool)

(assert (=> bm!10286 (= call!10289 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!99967 () Bool)

(assert (=> b!99967 (= e!65114 call!10289)))

(assert (= (and d!26929 (not res!50195)) b!99964))

(assert (= (and b!99964 c!17103) b!99966))

(assert (= (and b!99964 (not c!17103)) b!99967))

(assert (= (and b!99966 res!50194) b!99965))

(assert (= (or b!99965 b!99967) bm!10286))

(declare-fun m!110245 () Bool)

(assert (=> b!99964 m!110245))

(assert (=> b!99964 m!110245))

(declare-fun m!110247 () Bool)

(assert (=> b!99964 m!110247))

(assert (=> b!99966 m!110245))

(declare-fun m!110249 () Bool)

(assert (=> b!99966 m!110249))

(declare-fun m!110251 () Bool)

(assert (=> b!99966 m!110251))

(assert (=> b!99966 m!110245))

(declare-fun m!110253 () Bool)

(assert (=> b!99966 m!110253))

(declare-fun m!110255 () Bool)

(assert (=> bm!10286 m!110255))

(assert (=> b!99461 d!26929))

(declare-fun d!26931 () Bool)

(assert (=> d!26931 (= (get!1290 (getValueByKey!151 (toList!785 lt!49953) lt!49966)) (v!2820 (getValueByKey!151 (toList!785 lt!49953) lt!49966)))))

(assert (=> d!26779 d!26931))

(declare-fun b!99969 () Bool)

(declare-fun e!65116 () Option!157)

(declare-fun e!65117 () Option!157)

(assert (=> b!99969 (= e!65116 e!65117)))

(declare-fun c!17105 () Bool)

(assert (=> b!99969 (= c!17105 (and ((_ is Cons!1579) (toList!785 lt!49953)) (not (= (_1!1184 (h!2174 (toList!785 lt!49953))) lt!49966))))))

(declare-fun b!99971 () Bool)

(assert (=> b!99971 (= e!65117 None!155)))

(declare-fun b!99970 () Bool)

(assert (=> b!99970 (= e!65117 (getValueByKey!151 (t!5557 (toList!785 lt!49953)) lt!49966))))

(declare-fun d!26933 () Bool)

(declare-fun c!17104 () Bool)

(assert (=> d!26933 (= c!17104 (and ((_ is Cons!1579) (toList!785 lt!49953)) (= (_1!1184 (h!2174 (toList!785 lt!49953))) lt!49966)))))

(assert (=> d!26933 (= (getValueByKey!151 (toList!785 lt!49953) lt!49966) e!65116)))

(declare-fun b!99968 () Bool)

(assert (=> b!99968 (= e!65116 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49953)))))))

(assert (= (and d!26933 c!17104) b!99968))

(assert (= (and d!26933 (not c!17104)) b!99969))

(assert (= (and b!99969 c!17105) b!99970))

(assert (= (and b!99969 (not c!17105)) b!99971))

(declare-fun m!110257 () Bool)

(assert (=> b!99970 m!110257))

(assert (=> d!26779 d!26933))

(declare-fun b!99972 () Bool)

(declare-fun e!65119 () (_ BitVec 32))

(declare-fun e!65118 () (_ BitVec 32))

(assert (=> b!99972 (= e!65119 e!65118)))

(declare-fun c!17106 () Bool)

(assert (=> b!99972 (= c!17106 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!99973 () Bool)

(declare-fun call!10290 () (_ BitVec 32))

(assert (=> b!99973 (= e!65118 (bvadd #b00000000000000000000000000000001 call!10290))))

(declare-fun b!99974 () Bool)

(assert (=> b!99974 (= e!65119 #b00000000000000000000000000000000)))

(declare-fun d!26935 () Bool)

(declare-fun lt!50501 () (_ BitVec 32))

(assert (=> d!26935 (and (bvsge lt!50501 #b00000000000000000000000000000000) (bvsle lt!50501 (bvsub (size!2272 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!26935 (= lt!50501 e!65119)))

(declare-fun c!17107 () Bool)

(assert (=> d!26935 (= c!17107 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26935 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2272 (_keys!4196 newMap!16)) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26935 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))) lt!50501)))

(declare-fun bm!10287 () Bool)

(assert (=> bm!10287 (= call!10290 (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!99975 () Bool)

(assert (=> b!99975 (= e!65118 call!10290)))

(assert (= (and d!26935 c!17107) b!99974))

(assert (= (and d!26935 (not c!17107)) b!99972))

(assert (= (and b!99972 c!17106) b!99973))

(assert (= (and b!99972 (not c!17106)) b!99975))

(assert (= (or b!99973 b!99975) bm!10287))

(declare-fun m!110259 () Bool)

(assert (=> b!99972 m!110259))

(assert (=> b!99972 m!110259))

(declare-fun m!110261 () Bool)

(assert (=> b!99972 m!110261))

(declare-fun m!110263 () Bool)

(assert (=> bm!10287 m!110263))

(assert (=> bm!10238 d!26935))

(assert (=> b!99633 d!26743))

(declare-fun d!26937 () Bool)

(assert (=> d!26937 (= (get!1289 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99732 d!26937))

(declare-fun d!26939 () Bool)

(declare-fun res!50196 () Bool)

(declare-fun e!65120 () Bool)

(assert (=> d!26939 (=> (not res!50196) (not e!65120))))

(assert (=> d!26939 (= res!50196 (simpleValid!69 (_2!1185 lt!50350)))))

(assert (=> d!26939 (= (valid!389 (_2!1185 lt!50350)) e!65120)))

(declare-fun b!99976 () Bool)

(declare-fun res!50197 () Bool)

(assert (=> b!99976 (=> (not res!50197) (not e!65120))))

(assert (=> b!99976 (= res!50197 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1185 lt!50350)) #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50350)))) (_size!478 (_2!1185 lt!50350))))))

(declare-fun b!99977 () Bool)

(declare-fun res!50198 () Bool)

(assert (=> b!99977 (=> (not res!50198) (not e!65120))))

(assert (=> b!99977 (= res!50198 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1185 lt!50350)) (mask!6609 (_2!1185 lt!50350))))))

(declare-fun b!99978 () Bool)

(assert (=> b!99978 (= e!65120 (arrayNoDuplicates!0 (_keys!4196 (_2!1185 lt!50350)) #b00000000000000000000000000000000 Nil!1581))))

(assert (= (and d!26939 res!50196) b!99976))

(assert (= (and b!99976 res!50197) b!99977))

(assert (= (and b!99977 res!50198) b!99978))

(declare-fun m!110265 () Bool)

(assert (=> d!26939 m!110265))

(declare-fun m!110267 () Bool)

(assert (=> b!99976 m!110267))

(declare-fun m!110269 () Bool)

(assert (=> b!99977 m!110269))

(declare-fun m!110271 () Bool)

(assert (=> b!99978 m!110271))

(assert (=> b!99698 d!26939))

(declare-fun b!99979 () Bool)

(declare-fun e!65123 () Bool)

(declare-fun e!65122 () Bool)

(assert (=> b!99979 (= e!65123 e!65122)))

(declare-fun c!17108 () Bool)

(assert (=> b!99979 (= c!17108 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun d!26941 () Bool)

(declare-fun res!50200 () Bool)

(assert (=> d!26941 (=> res!50200 e!65123)))

(assert (=> d!26941 (= res!50200 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (=> d!26941 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053))) e!65123)))

(declare-fun b!99980 () Bool)

(declare-fun e!65121 () Bool)

(declare-fun call!10291 () Bool)

(assert (=> b!99980 (= e!65121 call!10291)))

(declare-fun b!99981 () Bool)

(assert (=> b!99981 (= e!65122 e!65121)))

(declare-fun lt!50502 () (_ BitVec 64))

(assert (=> b!99981 (= lt!50502 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000))))

(declare-fun lt!50504 () Unit!2999)

(assert (=> b!99981 (= lt!50504 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 (_2!1185 lt!50053)) lt!50502 #b00000000000000000000000000000000))))

(assert (=> b!99981 (arrayContainsKey!0 (_keys!4196 (_2!1185 lt!50053)) lt!50502 #b00000000000000000000000000000000)))

(declare-fun lt!50503 () Unit!2999)

(assert (=> b!99981 (= lt!50503 lt!50504)))

(declare-fun res!50199 () Bool)

(assert (=> b!99981 (= res!50199 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000) (_keys!4196 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053))) (Found!254 #b00000000000000000000000000000000)))))

(assert (=> b!99981 (=> (not res!50199) (not e!65121))))

(declare-fun bm!10288 () Bool)

(assert (=> bm!10288 (= call!10291 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053))))))

(declare-fun b!99982 () Bool)

(assert (=> b!99982 (= e!65122 call!10291)))

(assert (= (and d!26941 (not res!50200)) b!99979))

(assert (= (and b!99979 c!17108) b!99981))

(assert (= (and b!99979 (not c!17108)) b!99982))

(assert (= (and b!99981 res!50199) b!99980))

(assert (= (or b!99980 b!99982) bm!10288))

(declare-fun m!110273 () Bool)

(assert (=> b!99979 m!110273))

(assert (=> b!99979 m!110273))

(declare-fun m!110275 () Bool)

(assert (=> b!99979 m!110275))

(assert (=> b!99981 m!110273))

(declare-fun m!110277 () Bool)

(assert (=> b!99981 m!110277))

(declare-fun m!110279 () Bool)

(assert (=> b!99981 m!110279))

(assert (=> b!99981 m!110273))

(declare-fun m!110281 () Bool)

(assert (=> b!99981 m!110281))

(declare-fun m!110283 () Bool)

(assert (=> bm!10288 m!110283))

(assert (=> b!99742 d!26941))

(declare-fun d!26943 () Bool)

(assert (=> d!26943 (= (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49962)) (v!2820 (getValueByKey!151 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49962)))))

(assert (=> d!26783 d!26943))

(declare-fun b!99984 () Bool)

(declare-fun e!65124 () Option!157)

(declare-fun e!65125 () Option!157)

(assert (=> b!99984 (= e!65124 e!65125)))

(declare-fun c!17110 () Bool)

(assert (=> b!99984 (= c!17110 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (not (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49962))))))

(declare-fun b!99986 () Bool)

(assert (=> b!99986 (= e!65125 None!155)))

(declare-fun b!99985 () Bool)

(assert (=> b!99985 (= e!65125 (getValueByKey!151 (t!5557 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!49962))))

(declare-fun d!26945 () Bool)

(declare-fun c!17109 () Bool)

(assert (=> d!26945 (= c!17109 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49962)))))

(assert (=> d!26945 (= (getValueByKey!151 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49962) e!65124)))

(declare-fun b!99983 () Bool)

(assert (=> b!99983 (= e!65124 (Some!156 (_2!1184 (h!2174 (toList!785 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(assert (= (and d!26945 c!17109) b!99983))

(assert (= (and d!26945 (not c!17109)) b!99984))

(assert (= (and b!99984 c!17110) b!99985))

(assert (= (and b!99984 (not c!17110)) b!99986))

(declare-fun m!110285 () Bool)

(assert (=> b!99985 m!110285))

(assert (=> d!26783 d!26945))

(declare-fun b!99988 () Bool)

(declare-fun e!65126 () Option!157)

(declare-fun e!65127 () Option!157)

(assert (=> b!99988 (= e!65126 e!65127)))

(declare-fun c!17112 () Bool)

(assert (=> b!99988 (= c!17112 (and ((_ is Cons!1579) (t!5557 (toList!785 lt!49878))) (not (= (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun b!99990 () Bool)

(assert (=> b!99990 (= e!65127 None!155)))

(declare-fun b!99989 () Bool)

(assert (=> b!99989 (= e!65127 (getValueByKey!151 (t!5557 (t!5557 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun d!26947 () Bool)

(declare-fun c!17111 () Bool)

(assert (=> d!26947 (= c!17111 (and ((_ is Cons!1579) (t!5557 (toList!785 lt!49878))) (= (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26947 (= (getValueByKey!151 (t!5557 (toList!785 lt!49878)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65126)))

(declare-fun b!99987 () Bool)

(assert (=> b!99987 (= e!65126 (Some!156 (_2!1184 (h!2174 (t!5557 (toList!785 lt!49878))))))))

(assert (= (and d!26947 c!17111) b!99987))

(assert (= (and d!26947 (not c!17111)) b!99988))

(assert (= (and b!99988 c!17112) b!99989))

(assert (= (and b!99988 (not c!17112)) b!99990))

(assert (=> b!99989 m!109133))

(declare-fun m!110287 () Bool)

(assert (=> b!99989 m!110287))

(assert (=> b!99574 d!26947))

(assert (=> b!99513 d!26841))

(assert (=> d!26725 d!26871))

(declare-fun lt!50507 () Bool)

(declare-fun d!26949 () Bool)

(declare-fun content!104 (List!1583) (InoxSet tuple2!2346))

(assert (=> d!26949 (= lt!50507 (select (content!104 (toList!785 lt!50083)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!65133 () Bool)

(assert (=> d!26949 (= lt!50507 e!65133)))

(declare-fun res!50205 () Bool)

(assert (=> d!26949 (=> (not res!50205) (not e!65133))))

(assert (=> d!26949 (= res!50205 ((_ is Cons!1579) (toList!785 lt!50083)))))

(assert (=> d!26949 (= (contains!806 (toList!785 lt!50083) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50507)))

(declare-fun b!99995 () Bool)

(declare-fun e!65132 () Bool)

(assert (=> b!99995 (= e!65133 e!65132)))

(declare-fun res!50206 () Bool)

(assert (=> b!99995 (=> res!50206 e!65132)))

(assert (=> b!99995 (= res!50206 (= (h!2174 (toList!785 lt!50083)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99996 () Bool)

(assert (=> b!99996 (= e!65132 (contains!806 (t!5557 (toList!785 lt!50083)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26949 res!50205) b!99995))

(assert (= (and b!99995 (not res!50206)) b!99996))

(declare-fun m!110289 () Bool)

(assert (=> d!26949 m!110289))

(declare-fun m!110291 () Bool)

(assert (=> d!26949 m!110291))

(declare-fun m!110293 () Bool)

(assert (=> b!99996 m!110293))

(assert (=> b!99408 d!26949))

(declare-fun d!26951 () Bool)

(declare-fun e!65134 () Bool)

(assert (=> d!26951 e!65134))

(declare-fun res!50207 () Bool)

(assert (=> d!26951 (=> res!50207 e!65134)))

(declare-fun lt!50511 () Bool)

(assert (=> d!26951 (= res!50207 (not lt!50511))))

(declare-fun lt!50509 () Bool)

(assert (=> d!26951 (= lt!50511 lt!50509)))

(declare-fun lt!50508 () Unit!2999)

(declare-fun e!65135 () Unit!2999)

(assert (=> d!26951 (= lt!50508 e!65135)))

(declare-fun c!17113 () Bool)

(assert (=> d!26951 (= c!17113 lt!50509)))

(assert (=> d!26951 (= lt!50509 (containsKey!155 (toList!785 lt!50163) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26951 (= (contains!804 lt!50163 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50511)))

(declare-fun b!99997 () Bool)

(declare-fun lt!50510 () Unit!2999)

(assert (=> b!99997 (= e!65135 lt!50510)))

(assert (=> b!99997 (= lt!50510 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50163) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99997 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99998 () Bool)

(declare-fun Unit!3029 () Unit!2999)

(assert (=> b!99998 (= e!65135 Unit!3029)))

(declare-fun b!99999 () Bool)

(assert (=> b!99999 (= e!65134 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26951 c!17113) b!99997))

(assert (= (and d!26951 (not c!17113)) b!99998))

(assert (= (and d!26951 (not res!50207)) b!99999))

(declare-fun m!110295 () Bool)

(assert (=> d!26951 m!110295))

(declare-fun m!110297 () Bool)

(assert (=> b!99997 m!110297))

(declare-fun m!110299 () Bool)

(assert (=> b!99997 m!110299))

(assert (=> b!99997 m!110299))

(declare-fun m!110301 () Bool)

(assert (=> b!99997 m!110301))

(assert (=> b!99999 m!110299))

(assert (=> b!99999 m!110299))

(assert (=> b!99999 m!110301))

(assert (=> b!99500 d!26951))

(declare-fun d!26953 () Bool)

(assert (=> d!26953 (= (apply!93 lt!50363 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1290 (getValueByKey!151 (toList!785 lt!50363) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4136 () Bool)

(assert (= bs!4136 d!26953))

(assert (=> bs!4136 m!109397))

(declare-fun m!110303 () Bool)

(assert (=> bs!4136 m!110303))

(assert (=> bs!4136 m!110303))

(declare-fun m!110305 () Bool)

(assert (=> bs!4136 m!110305))

(assert (=> b!99713 d!26953))

(declare-fun c!17114 () Bool)

(declare-fun d!26955 () Bool)

(assert (=> d!26955 (= c!17114 ((_ is ValueCellFull!975) (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!65136 () V!3163)

(assert (=> d!26955 (= (get!1287 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65136)))

(declare-fun b!100000 () Bool)

(assert (=> b!100000 (= e!65136 (get!1288 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100001 () Bool)

(assert (=> b!100001 (= e!65136 (get!1289 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26955 c!17114) b!100000))

(assert (= (and d!26955 (not c!17114)) b!100001))

(assert (=> b!100000 m!109859))

(assert (=> b!100000 m!109401))

(declare-fun m!110307 () Bool)

(assert (=> b!100000 m!110307))

(assert (=> b!100001 m!109859))

(assert (=> b!100001 m!109401))

(declare-fun m!110309 () Bool)

(assert (=> b!100001 m!110309))

(assert (=> b!99713 d!26955))

(declare-fun d!26957 () Bool)

(declare-fun lt!50512 () Bool)

(assert (=> d!26957 (= lt!50512 (select (content!104 (toList!785 lt!50226)) (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65138 () Bool)

(assert (=> d!26957 (= lt!50512 e!65138)))

(declare-fun res!50208 () Bool)

(assert (=> d!26957 (=> (not res!50208) (not e!65138))))

(assert (=> d!26957 (= res!50208 ((_ is Cons!1579) (toList!785 lt!50226)))))

(assert (=> d!26957 (= (contains!806 (toList!785 lt!50226) (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50512)))

(declare-fun b!100002 () Bool)

(declare-fun e!65137 () Bool)

(assert (=> b!100002 (= e!65138 e!65137)))

(declare-fun res!50209 () Bool)

(assert (=> b!100002 (=> res!50209 e!65137)))

(assert (=> b!100002 (= res!50209 (= (h!2174 (toList!785 lt!50226)) (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100003 () Bool)

(assert (=> b!100003 (= e!65137 (contains!806 (t!5557 (toList!785 lt!50226)) (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26957 res!50208) b!100002))

(assert (= (and b!100002 (not res!50209)) b!100003))

(declare-fun m!110311 () Bool)

(assert (=> d!26957 m!110311))

(declare-fun m!110313 () Bool)

(assert (=> d!26957 m!110313))

(declare-fun m!110315 () Bool)

(assert (=> b!100003 m!110315))

(assert (=> b!99618 d!26957))

(declare-fun d!26959 () Bool)

(declare-fun e!65139 () Bool)

(assert (=> d!26959 e!65139))

(declare-fun res!50211 () Bool)

(assert (=> d!26959 (=> (not res!50211) (not e!65139))))

(declare-fun lt!50515 () ListLongMap!1539)

(assert (=> d!26959 (= res!50211 (contains!804 lt!50515 (_1!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun lt!50516 () List!1583)

(assert (=> d!26959 (= lt!50515 (ListLongMap!1540 lt!50516))))

(declare-fun lt!50513 () Unit!2999)

(declare-fun lt!50514 () Unit!2999)

(assert (=> d!26959 (= lt!50513 lt!50514)))

(assert (=> d!26959 (= (getValueByKey!151 lt!50516 (_1!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))) (Some!156 (_2!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!26959 (= lt!50514 (lemmaContainsTupThenGetReturnValue!67 lt!50516 (_1!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (_2!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!26959 (= lt!50516 (insertStrictlySorted!70 (toList!785 (ite c!16960 call!10214 (ite c!16964 call!10215 call!10211))) (_1!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (_2!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!26959 (= (+!136 (ite c!16960 call!10214 (ite c!16964 call!10215 call!10211)) (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50515)))

(declare-fun b!100004 () Bool)

(declare-fun res!50210 () Bool)

(assert (=> b!100004 (=> (not res!50210) (not e!65139))))

(assert (=> b!100004 (= res!50210 (= (getValueByKey!151 (toList!785 lt!50515) (_1!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))) (Some!156 (_2!1184 (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))))

(declare-fun b!100005 () Bool)

(assert (=> b!100005 (= e!65139 (contains!806 (toList!785 lt!50515) (ite (or c!16960 c!16964) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (= (and d!26959 res!50211) b!100004))

(assert (= (and b!100004 res!50210) b!100005))

(declare-fun m!110317 () Bool)

(assert (=> d!26959 m!110317))

(declare-fun m!110319 () Bool)

(assert (=> d!26959 m!110319))

(declare-fun m!110321 () Bool)

(assert (=> d!26959 m!110321))

(declare-fun m!110323 () Bool)

(assert (=> d!26959 m!110323))

(declare-fun m!110325 () Bool)

(assert (=> b!100004 m!110325))

(declare-fun m!110327 () Bool)

(assert (=> b!100005 m!110327))

(assert (=> bm!10210 d!26959))

(assert (=> b!99724 d!26841))

(assert (=> d!26811 d!26761))

(declare-fun d!26961 () Bool)

(declare-fun e!65142 () Bool)

(assert (=> d!26961 e!65142))

(declare-fun res!50217 () Bool)

(assert (=> d!26961 (=> (not res!50217) (not e!65142))))

(declare-fun lt!50519 () SeekEntryResult!254)

(assert (=> d!26961 (= res!50217 ((_ is Found!254) lt!50519))))

(assert (=> d!26961 (= lt!50519 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!26961 true))

(declare-fun _$33!84 () Unit!2999)

(assert (=> d!26961 (= (choose!610 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) _$33!84)))

(declare-fun b!100010 () Bool)

(declare-fun res!50216 () Bool)

(assert (=> b!100010 (=> (not res!50216) (not e!65142))))

(assert (=> b!100010 (= res!50216 (inRange!0 (index!3161 lt!50519) (mask!6609 newMap!16)))))

(declare-fun b!100011 () Bool)

(assert (=> b!100011 (= e!65142 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50519)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!26961 res!50217) b!100010))

(assert (= (and b!100010 res!50216) b!100011))

(assert (=> d!26961 m!109133))

(assert (=> d!26961 m!109315))

(declare-fun m!110329 () Bool)

(assert (=> b!100010 m!110329))

(declare-fun m!110331 () Bool)

(assert (=> b!100011 m!110331))

(assert (=> d!26811 d!26961))

(assert (=> d!26811 d!26871))

(assert (=> d!26717 d!26871))

(declare-fun d!26963 () Bool)

(declare-fun res!50218 () Bool)

(declare-fun e!65143 () Bool)

(assert (=> d!26963 (=> res!50218 e!65143)))

(assert (=> d!26963 (= res!50218 (and ((_ is Cons!1579) (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (= (_1!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!26963 (= (containsKey!155 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65143)))

(declare-fun b!100012 () Bool)

(declare-fun e!65144 () Bool)

(assert (=> b!100012 (= e!65143 e!65144)))

(declare-fun res!50219 () Bool)

(assert (=> b!100012 (=> (not res!50219) (not e!65144))))

(assert (=> b!100012 (= res!50219 (and (or (not ((_ is Cons!1579) (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (bvsle (_1!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) ((_ is Cons!1579) (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (bvslt (_1!1184 (h!2174 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(declare-fun b!100013 () Bool)

(assert (=> b!100013 (= e!65144 (containsKey!155 (t!5557 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!26963 (not res!50218)) b!100012))

(assert (= (and b!100012 res!50219) b!100013))

(assert (=> b!100013 m!109133))

(declare-fun m!110333 () Bool)

(assert (=> b!100013 m!110333))

(assert (=> d!26799 d!26963))

(assert (=> d!26801 d!26685))

(declare-fun bm!10289 () Bool)

(declare-fun call!10292 () ListLongMap!1539)

(assert (=> bm!10289 (= call!10292 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!100015 () Bool)

(declare-fun e!65148 () ListLongMap!1539)

(declare-fun e!65147 () ListLongMap!1539)

(assert (=> b!100015 (= e!65148 e!65147)))

(declare-fun c!17116 () Bool)

(assert (=> b!100015 (= c!17116 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!100016 () Bool)

(declare-fun e!65149 () Bool)

(declare-fun e!65145 () Bool)

(assert (=> b!100016 (= e!65149 e!65145)))

(declare-fun c!17117 () Bool)

(declare-fun e!65150 () Bool)

(assert (=> b!100016 (= c!17117 e!65150)))

(declare-fun res!50222 () Bool)

(assert (=> b!100016 (=> (not res!50222) (not e!65150))))

(assert (=> b!100016 (= res!50222 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100017 () Bool)

(assert (=> b!100017 (= e!65147 call!10292)))

(declare-fun b!100018 () Bool)

(declare-fun lt!50524 () Unit!2999)

(declare-fun lt!50525 () Unit!2999)

(assert (=> b!100018 (= lt!50524 lt!50525)))

(declare-fun lt!50523 () (_ BitVec 64))

(declare-fun lt!50520 () ListLongMap!1539)

(declare-fun lt!50526 () (_ BitVec 64))

(declare-fun lt!50521 () V!3163)

(assert (=> b!100018 (not (contains!804 (+!136 lt!50520 (tuple2!2347 lt!50523 lt!50521)) lt!50526))))

(assert (=> b!100018 (= lt!50525 (addStillNotContains!41 lt!50520 lt!50523 lt!50521 lt!50526))))

(assert (=> b!100018 (= lt!50526 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100018 (= lt!50521 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100018 (= lt!50523 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!100018 (= lt!50520 call!10292)))

(assert (=> b!100018 (= e!65147 (+!136 call!10292 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100019 () Bool)

(assert (=> b!100019 (= e!65148 (ListLongMap!1540 Nil!1580))))

(declare-fun b!100020 () Bool)

(assert (=> b!100020 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> b!100020 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65146 () Bool)

(declare-fun lt!50522 () ListLongMap!1539)

(assert (=> b!100020 (= e!65146 (= (apply!93 lt!50522 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100021 () Bool)

(declare-fun res!50223 () Bool)

(assert (=> b!100021 (=> (not res!50223) (not e!65149))))

(assert (=> b!100021 (= res!50223 (not (contains!804 lt!50522 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!26965 () Bool)

(assert (=> d!26965 e!65149))

(declare-fun res!50221 () Bool)

(assert (=> d!26965 (=> (not res!50221) (not e!65149))))

(assert (=> d!26965 (= res!50221 (not (contains!804 lt!50522 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26965 (= lt!50522 e!65148)))

(declare-fun c!17118 () Bool)

(assert (=> d!26965 (= c!17118 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!26965 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992))))))

(assert (=> d!26965 (= (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992)))) lt!50522)))

(declare-fun b!100014 () Bool)

(assert (=> b!100014 (= e!65145 e!65146)))

(assert (=> b!100014 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun res!50220 () Bool)

(assert (=> b!100014 (= res!50220 (contains!804 lt!50522 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!100014 (=> (not res!50220) (not e!65146))))

(declare-fun b!100022 () Bool)

(declare-fun e!65151 () Bool)

(assert (=> b!100022 (= e!65145 e!65151)))

(declare-fun c!17115 () Bool)

(assert (=> b!100022 (= c!17115 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100023 () Bool)

(assert (=> b!100023 (= e!65151 (= lt!50522 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (_values!2485 (v!2816 (underlying!340 thiss!992))) (mask!6609 (v!2816 (underlying!340 thiss!992))) (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) (minValue!2383 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100024 () Bool)

(assert (=> b!100024 (= e!65151 (isEmpty!359 lt!50522))))

(declare-fun b!100025 () Bool)

(assert (=> b!100025 (= e!65150 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!100025 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(assert (= (and d!26965 c!17118) b!100019))

(assert (= (and d!26965 (not c!17118)) b!100015))

(assert (= (and b!100015 c!17116) b!100018))

(assert (= (and b!100015 (not c!17116)) b!100017))

(assert (= (or b!100018 b!100017) bm!10289))

(assert (= (and d!26965 res!50221) b!100021))

(assert (= (and b!100021 res!50223) b!100016))

(assert (= (and b!100016 res!50222) b!100025))

(assert (= (and b!100016 c!17117) b!100014))

(assert (= (and b!100016 (not c!17117)) b!100022))

(assert (= (and b!100014 res!50220) b!100020))

(assert (= (and b!100022 c!17115) b!100023))

(assert (= (and b!100022 (not c!17115)) b!100024))

(declare-fun b_lambda!4465 () Bool)

(assert (=> (not b_lambda!4465) (not b!100018)))

(assert (=> b!100018 t!5554))

(declare-fun b_and!6151 () Bool)

(assert (= b_and!6147 (and (=> t!5554 result!3289) b_and!6151)))

(assert (=> b!100018 t!5556))

(declare-fun b_and!6153 () Bool)

(assert (= b_and!6149 (and (=> t!5556 result!3293) b_and!6153)))

(declare-fun b_lambda!4467 () Bool)

(assert (=> (not b_lambda!4467) (not b!100020)))

(assert (=> b!100020 t!5554))

(declare-fun b_and!6155 () Bool)

(assert (= b_and!6151 (and (=> t!5554 result!3289) b_and!6155)))

(assert (=> b!100020 t!5556))

(declare-fun b_and!6157 () Bool)

(assert (= b_and!6153 (and (=> t!5556 result!3293) b_and!6157)))

(assert (=> b!100020 m!109603))

(assert (=> b!100020 m!109157))

(declare-fun m!110335 () Bool)

(assert (=> b!100020 m!110335))

(assert (=> b!100020 m!109603))

(declare-fun m!110337 () Bool)

(assert (=> b!100020 m!110337))

(assert (=> b!100020 m!110335))

(assert (=> b!100020 m!109157))

(declare-fun m!110339 () Bool)

(assert (=> b!100020 m!110339))

(declare-fun m!110341 () Bool)

(assert (=> b!100023 m!110341))

(assert (=> b!100015 m!109603))

(assert (=> b!100015 m!109603))

(declare-fun m!110343 () Bool)

(assert (=> b!100015 m!110343))

(declare-fun m!110345 () Bool)

(assert (=> b!100018 m!110345))

(declare-fun m!110347 () Bool)

(assert (=> b!100018 m!110347))

(assert (=> b!100018 m!109157))

(assert (=> b!100018 m!110345))

(assert (=> b!100018 m!110335))

(declare-fun m!110349 () Bool)

(assert (=> b!100018 m!110349))

(assert (=> b!100018 m!110335))

(assert (=> b!100018 m!109157))

(assert (=> b!100018 m!110339))

(assert (=> b!100018 m!109603))

(declare-fun m!110351 () Bool)

(assert (=> b!100018 m!110351))

(declare-fun m!110353 () Bool)

(assert (=> d!26965 m!110353))

(assert (=> d!26965 m!109165))

(assert (=> b!100025 m!109603))

(assert (=> b!100025 m!109603))

(assert (=> b!100025 m!110343))

(assert (=> b!100014 m!109603))

(assert (=> b!100014 m!109603))

(declare-fun m!110355 () Bool)

(assert (=> b!100014 m!110355))

(declare-fun m!110357 () Bool)

(assert (=> b!100021 m!110357))

(declare-fun m!110359 () Bool)

(assert (=> b!100024 m!110359))

(assert (=> bm!10289 m!110341))

(assert (=> bm!10224 d!26965))

(declare-fun d!26967 () Bool)

(assert (=> d!26967 (isDefined!104 (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(declare-fun lt!50527 () Unit!2999)

(assert (=> d!26967 (= lt!50527 (choose!609 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(declare-fun e!65152 () Bool)

(assert (=> d!26967 e!65152))

(declare-fun res!50224 () Bool)

(assert (=> d!26967 (=> (not res!50224) (not e!65152))))

(assert (=> d!26967 (= res!50224 (isStrictlySorted!305 (toList!785 call!10187)))))

(assert (=> d!26967 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))) lt!50527)))

(declare-fun b!100026 () Bool)

(assert (=> b!100026 (= e!65152 (containsKey!155 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(assert (= (and d!26967 res!50224) b!100026))

(assert (=> d!26967 m!109767))

(assert (=> d!26967 m!109767))

(assert (=> d!26967 m!109769))

(declare-fun m!110361 () Bool)

(assert (=> d!26967 m!110361))

(declare-fun m!110363 () Bool)

(assert (=> d!26967 m!110363))

(assert (=> b!100026 m!109763))

(assert (=> b!99628 d!26967))

(declare-fun d!26969 () Bool)

(assert (=> d!26969 (= (isDefined!104 (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))) (not (isEmpty!360 (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))))

(declare-fun bs!4137 () Bool)

(assert (= bs!4137 d!26969))

(assert (=> bs!4137 m!109767))

(declare-fun m!110365 () Bool)

(assert (=> bs!4137 m!110365))

(assert (=> b!99628 d!26969))

(declare-fun b!100028 () Bool)

(declare-fun e!65153 () Option!157)

(declare-fun e!65154 () Option!157)

(assert (=> b!100028 (= e!65153 e!65154)))

(declare-fun c!17120 () Bool)

(assert (=> b!100028 (= c!17120 (and ((_ is Cons!1579) (toList!785 call!10187)) (not (= (_1!1184 (h!2174 (toList!785 call!10187))) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))))

(declare-fun b!100030 () Bool)

(assert (=> b!100030 (= e!65154 None!155)))

(declare-fun b!100029 () Bool)

(assert (=> b!100029 (= e!65154 (getValueByKey!151 (t!5557 (toList!785 call!10187)) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(declare-fun c!17119 () Bool)

(declare-fun d!26971 () Bool)

(assert (=> d!26971 (= c!17119 (and ((_ is Cons!1579) (toList!785 call!10187)) (= (_1!1184 (h!2174 (toList!785 call!10187))) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))))

(assert (=> d!26971 (= (getValueByKey!151 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))) e!65153)))

(declare-fun b!100027 () Bool)

(assert (=> b!100027 (= e!65153 (Some!156 (_2!1184 (h!2174 (toList!785 call!10187)))))))

(assert (= (and d!26971 c!17119) b!100027))

(assert (= (and d!26971 (not c!17119)) b!100028))

(assert (= (and b!100028 c!17120) b!100029))

(assert (= (and b!100028 (not c!17120)) b!100030))

(declare-fun m!110367 () Bool)

(assert (=> b!100029 m!110367))

(assert (=> b!99628 d!26971))

(declare-fun d!26973 () Bool)

(assert (=> d!26973 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))

(assert (=> d!26973 true))

(declare-fun _$16!120 () Unit!2999)

(assert (=> d!26973 (= (choose!606 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (defaultEntry!2502 newMap!16)) _$16!120)))

(declare-fun bs!4138 () Bool)

(assert (= bs!4138 d!26973))

(assert (=> bs!4138 m!109745))

(assert (=> bs!4138 m!109329))

(assert (=> bs!4138 m!109745))

(assert (=> bs!4138 m!109329))

(assert (=> bs!4138 m!109747))

(assert (=> d!26795 d!26973))

(assert (=> d!26795 d!26871))

(declare-fun d!26975 () Bool)

(assert (=> d!26975 (= (map!1259 (_2!1185 lt!50350)) (getCurrentListMap!476 (_keys!4196 (_2!1185 lt!50350)) (_values!2485 (_2!1185 lt!50350)) (mask!6609 (_2!1185 lt!50350)) (extraKeys!2319 (_2!1185 lt!50350)) (zeroValue!2383 (_2!1185 lt!50350)) (minValue!2383 (_2!1185 lt!50350)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50350))))))

(declare-fun bs!4139 () Bool)

(assert (= bs!4139 d!26975))

(declare-fun m!110369 () Bool)

(assert (=> bs!4139 m!110369))

(assert (=> b!99695 d!26975))

(declare-fun d!26977 () Bool)

(declare-fun e!65155 () Bool)

(assert (=> d!26977 e!65155))

(declare-fun res!50226 () Bool)

(assert (=> d!26977 (=> (not res!50226) (not e!65155))))

(declare-fun lt!50530 () ListLongMap!1539)

(assert (=> d!26977 (= res!50226 (contains!804 lt!50530 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50531 () List!1583)

(assert (=> d!26977 (= lt!50530 (ListLongMap!1540 lt!50531))))

(declare-fun lt!50528 () Unit!2999)

(declare-fun lt!50529 () Unit!2999)

(assert (=> d!26977 (= lt!50528 lt!50529)))

(assert (=> d!26977 (= (getValueByKey!151 lt!50531 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26977 (= lt!50529 (lemmaContainsTupThenGetReturnValue!67 lt!50531 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26977 (= lt!50531 (insertStrictlySorted!70 (toList!785 (map!1259 newMap!16)) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26977 (= (+!136 (map!1259 newMap!16) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50530)))

(declare-fun b!100031 () Bool)

(declare-fun res!50225 () Bool)

(assert (=> b!100031 (=> (not res!50225) (not e!65155))))

(assert (=> b!100031 (= res!50225 (= (getValueByKey!151 (toList!785 lt!50530) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100032 () Bool)

(assert (=> b!100032 (= e!65155 (contains!806 (toList!785 lt!50530) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26977 res!50226) b!100031))

(assert (= (and b!100031 res!50225) b!100032))

(declare-fun m!110371 () Bool)

(assert (=> d!26977 m!110371))

(declare-fun m!110373 () Bool)

(assert (=> d!26977 m!110373))

(declare-fun m!110375 () Bool)

(assert (=> d!26977 m!110375))

(declare-fun m!110377 () Bool)

(assert (=> d!26977 m!110377))

(declare-fun m!110379 () Bool)

(assert (=> b!100031 m!110379))

(declare-fun m!110381 () Bool)

(assert (=> b!100032 m!110381))

(assert (=> b!99695 d!26977))

(assert (=> b!99695 d!26677))

(declare-fun d!26979 () Bool)

(assert (=> d!26979 (= (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49949)) (v!2820 (getValueByKey!151 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49949)))))

(assert (=> d!26777 d!26979))

(declare-fun b!100034 () Bool)

(declare-fun e!65156 () Option!157)

(declare-fun e!65157 () Option!157)

(assert (=> b!100034 (= e!65156 e!65157)))

(declare-fun c!17122 () Bool)

(assert (=> b!100034 (= c!17122 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (not (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49949))))))

(declare-fun b!100036 () Bool)

(assert (=> b!100036 (= e!65157 None!155)))

(declare-fun b!100035 () Bool)

(assert (=> b!100035 (= e!65157 (getValueByKey!151 (t!5557 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!49949))))

(declare-fun c!17121 () Bool)

(declare-fun d!26981 () Bool)

(assert (=> d!26981 (= c!17121 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49949)))))

(assert (=> d!26981 (= (getValueByKey!151 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49949) e!65156)))

(declare-fun b!100033 () Bool)

(assert (=> b!100033 (= e!65156 (Some!156 (_2!1184 (h!2174 (toList!785 (+!136 lt!49952 (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(assert (= (and d!26981 c!17121) b!100033))

(assert (= (and d!26981 (not c!17121)) b!100034))

(assert (= (and b!100034 c!17122) b!100035))

(assert (= (and b!100034 (not c!17122)) b!100036))

(declare-fun m!110383 () Bool)

(assert (=> b!100035 m!110383))

(assert (=> d!26777 d!26981))

(declare-fun call!10293 () ListLongMap!1539)

(declare-fun bm!10290 () Bool)

(assert (=> bm!10290 (= call!10293 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!100038 () Bool)

(declare-fun e!65161 () ListLongMap!1539)

(declare-fun e!65160 () ListLongMap!1539)

(assert (=> b!100038 (= e!65161 e!65160)))

(declare-fun c!17124 () Bool)

(assert (=> b!100038 (= c!17124 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100039 () Bool)

(declare-fun e!65162 () Bool)

(declare-fun e!65158 () Bool)

(assert (=> b!100039 (= e!65162 e!65158)))

(declare-fun c!17125 () Bool)

(declare-fun e!65163 () Bool)

(assert (=> b!100039 (= c!17125 e!65163)))

(declare-fun res!50229 () Bool)

(assert (=> b!100039 (=> (not res!50229) (not e!65163))))

(assert (=> b!100039 (= res!50229 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100040 () Bool)

(assert (=> b!100040 (= e!65160 call!10293)))

(declare-fun b!100041 () Bool)

(declare-fun lt!50536 () Unit!2999)

(declare-fun lt!50537 () Unit!2999)

(assert (=> b!100041 (= lt!50536 lt!50537)))

(declare-fun lt!50532 () ListLongMap!1539)

(declare-fun lt!50535 () (_ BitVec 64))

(declare-fun lt!50538 () (_ BitVec 64))

(declare-fun lt!50533 () V!3163)

(assert (=> b!100041 (not (contains!804 (+!136 lt!50532 (tuple2!2347 lt!50535 lt!50533)) lt!50538))))

(assert (=> b!100041 (= lt!50537 (addStillNotContains!41 lt!50532 lt!50535 lt!50533 lt!50538))))

(assert (=> b!100041 (= lt!50538 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100041 (= lt!50533 (get!1287 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100041 (= lt!50535 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100041 (= lt!50532 call!10293)))

(assert (=> b!100041 (= e!65160 (+!136 call!10293 (tuple2!2347 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1287 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100042 () Bool)

(assert (=> b!100042 (= e!65161 (ListLongMap!1540 Nil!1580))))

(declare-fun b!100043 () Bool)

(assert (=> b!100043 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> b!100043 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))))))))

(declare-fun e!65159 () Bool)

(declare-fun lt!50534 () ListLongMap!1539)

(assert (=> b!100043 (= e!65159 (= (apply!93 lt!50534 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100044 () Bool)

(declare-fun res!50230 () Bool)

(assert (=> b!100044 (=> (not res!50230) (not e!65162))))

(assert (=> b!100044 (= res!50230 (not (contains!804 lt!50534 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!26983 () Bool)

(assert (=> d!26983 e!65162))

(declare-fun res!50228 () Bool)

(assert (=> d!26983 (=> (not res!50228) (not e!65162))))

(assert (=> d!26983 (= res!50228 (not (contains!804 lt!50534 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26983 (= lt!50534 e!65161)))

(declare-fun c!17126 () Bool)

(assert (=> d!26983 (= c!17126 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26983 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26983 (= (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50534)))

(declare-fun b!100037 () Bool)

(assert (=> b!100037 (= e!65158 e!65159)))

(assert (=> b!100037 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!50227 () Bool)

(assert (=> b!100037 (= res!50227 (contains!804 lt!50534 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100037 (=> (not res!50227) (not e!65159))))

(declare-fun b!100045 () Bool)

(declare-fun e!65164 () Bool)

(assert (=> b!100045 (= e!65158 e!65164)))

(declare-fun c!17123 () Bool)

(assert (=> b!100045 (= c!17123 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100046 () Bool)

(assert (=> b!100046 (= e!65164 (= lt!50534 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite c!16953 (_values!2485 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!100047 () Bool)

(assert (=> b!100047 (= e!65164 (isEmpty!359 lt!50534))))

(declare-fun b!100048 () Bool)

(assert (=> b!100048 (= e!65163 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100048 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!26983 c!17126) b!100042))

(assert (= (and d!26983 (not c!17126)) b!100038))

(assert (= (and b!100038 c!17124) b!100041))

(assert (= (and b!100038 (not c!17124)) b!100040))

(assert (= (or b!100041 b!100040) bm!10290))

(assert (= (and d!26983 res!50228) b!100044))

(assert (= (and b!100044 res!50230) b!100039))

(assert (= (and b!100039 res!50229) b!100048))

(assert (= (and b!100039 c!17125) b!100037))

(assert (= (and b!100039 (not c!17125)) b!100045))

(assert (= (and b!100037 res!50227) b!100043))

(assert (= (and b!100045 c!17123) b!100046))

(assert (= (and b!100045 (not c!17123)) b!100047))

(declare-fun b_lambda!4469 () Bool)

(assert (=> (not b_lambda!4469) (not b!100041)))

(assert (=> b!100041 t!5564))

(declare-fun b_and!6159 () Bool)

(assert (= b_and!6155 (and (=> t!5564 result!3303) b_and!6159)))

(assert (=> b!100041 t!5566))

(declare-fun b_and!6161 () Bool)

(assert (= b_and!6157 (and (=> t!5566 result!3305) b_and!6161)))

(declare-fun b_lambda!4471 () Bool)

(assert (=> (not b_lambda!4471) (not b!100043)))

(assert (=> b!100043 t!5564))

(declare-fun b_and!6163 () Bool)

(assert (= b_and!6159 (and (=> t!5564 result!3303) b_and!6163)))

(assert (=> b!100043 t!5566))

(declare-fun b_and!6165 () Bool)

(assert (= b_and!6161 (and (=> t!5566 result!3305) b_and!6165)))

(assert (=> b!100043 m!109397))

(assert (=> b!100043 m!109401))

(assert (=> b!100043 m!109859))

(assert (=> b!100043 m!109397))

(declare-fun m!110385 () Bool)

(assert (=> b!100043 m!110385))

(assert (=> b!100043 m!109859))

(assert (=> b!100043 m!109401))

(assert (=> b!100043 m!109861))

(declare-fun m!110387 () Bool)

(assert (=> b!100046 m!110387))

(assert (=> b!100038 m!109397))

(assert (=> b!100038 m!109397))

(assert (=> b!100038 m!109411))

(declare-fun m!110389 () Bool)

(assert (=> b!100041 m!110389))

(declare-fun m!110391 () Bool)

(assert (=> b!100041 m!110391))

(assert (=> b!100041 m!109401))

(assert (=> b!100041 m!110389))

(assert (=> b!100041 m!109859))

(declare-fun m!110393 () Bool)

(assert (=> b!100041 m!110393))

(assert (=> b!100041 m!109859))

(assert (=> b!100041 m!109401))

(assert (=> b!100041 m!109861))

(assert (=> b!100041 m!109397))

(declare-fun m!110395 () Bool)

(assert (=> b!100041 m!110395))

(declare-fun m!110397 () Bool)

(assert (=> d!26983 m!110397))

(assert (=> d!26983 m!109413))

(assert (=> b!100048 m!109397))

(assert (=> b!100048 m!109397))

(assert (=> b!100048 m!109411))

(assert (=> b!100037 m!109397))

(assert (=> b!100037 m!109397))

(declare-fun m!110399 () Bool)

(assert (=> b!100037 m!110399))

(declare-fun m!110401 () Bool)

(assert (=> b!100044 m!110401))

(declare-fun m!110403 () Bool)

(assert (=> b!100047 m!110403))

(assert (=> bm!10290 m!110387))

(assert (=> bm!10256 d!26983))

(declare-fun d!26985 () Bool)

(declare-fun e!65165 () Bool)

(assert (=> d!26985 e!65165))

(declare-fun res!50231 () Bool)

(assert (=> d!26985 (=> res!50231 e!65165)))

(declare-fun lt!50542 () Bool)

(assert (=> d!26985 (= res!50231 (not lt!50542))))

(declare-fun lt!50540 () Bool)

(assert (=> d!26985 (= lt!50542 lt!50540)))

(declare-fun lt!50539 () Unit!2999)

(declare-fun e!65166 () Unit!2999)

(assert (=> d!26985 (= lt!50539 e!65166)))

(declare-fun c!17127 () Bool)

(assert (=> d!26985 (= c!17127 lt!50540)))

(assert (=> d!26985 (= lt!50540 (containsKey!155 (toList!785 lt!50363) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26985 (= (contains!804 lt!50363 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50542)))

(declare-fun b!100049 () Bool)

(declare-fun lt!50541 () Unit!2999)

(assert (=> b!100049 (= e!65166 lt!50541)))

(assert (=> b!100049 (= lt!50541 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50363) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100049 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100050 () Bool)

(declare-fun Unit!3030 () Unit!2999)

(assert (=> b!100050 (= e!65166 Unit!3030)))

(declare-fun b!100051 () Bool)

(assert (=> b!100051 (= e!65165 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26985 c!17127) b!100049))

(assert (= (and d!26985 (not c!17127)) b!100050))

(assert (= (and d!26985 (not res!50231)) b!100051))

(declare-fun m!110405 () Bool)

(assert (=> d!26985 m!110405))

(declare-fun m!110407 () Bool)

(assert (=> b!100049 m!110407))

(assert (=> b!100049 m!109979))

(assert (=> b!100049 m!109979))

(declare-fun m!110409 () Bool)

(assert (=> b!100049 m!110409))

(assert (=> b!100051 m!109979))

(assert (=> b!100051 m!109979))

(assert (=> b!100051 m!110409))

(assert (=> bm!10251 d!26985))

(declare-fun d!26987 () Bool)

(assert (=> d!26987 (= (get!1290 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2820 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26831 d!26987))

(declare-fun b!100053 () Bool)

(declare-fun e!65167 () Option!157)

(declare-fun e!65168 () Option!157)

(assert (=> b!100053 (= e!65167 e!65168)))

(declare-fun c!17129 () Bool)

(assert (=> b!100053 (= c!17129 (and ((_ is Cons!1579) (toList!785 lt!49957)) (not (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100055 () Bool)

(assert (=> b!100055 (= e!65168 None!155)))

(declare-fun b!100054 () Bool)

(assert (=> b!100054 (= e!65168 (getValueByKey!151 (t!5557 (toList!785 lt!49957)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!26989 () Bool)

(declare-fun c!17128 () Bool)

(assert (=> d!26989 (= c!17128 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26989 (= (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000) e!65167)))

(declare-fun b!100052 () Bool)

(assert (=> b!100052 (= e!65167 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49957)))))))

(assert (= (and d!26989 c!17128) b!100052))

(assert (= (and d!26989 (not c!17128)) b!100053))

(assert (= (and b!100053 c!17129) b!100054))

(assert (= (and b!100053 (not c!17129)) b!100055))

(declare-fun m!110411 () Bool)

(assert (=> b!100054 m!110411))

(assert (=> d!26831 d!26989))

(declare-fun bm!10291 () Bool)

(declare-fun call!10294 () ListLongMap!1539)

(assert (=> bm!10291 (= call!10294 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!100057 () Bool)

(declare-fun e!65172 () ListLongMap!1539)

(declare-fun e!65171 () ListLongMap!1539)

(assert (=> b!100057 (= e!65172 e!65171)))

(declare-fun c!17131 () Bool)

(assert (=> b!100057 (= c!17131 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100058 () Bool)

(declare-fun e!65173 () Bool)

(declare-fun e!65169 () Bool)

(assert (=> b!100058 (= e!65173 e!65169)))

(declare-fun c!17132 () Bool)

(declare-fun e!65174 () Bool)

(assert (=> b!100058 (= c!17132 e!65174)))

(declare-fun res!50234 () Bool)

(assert (=> b!100058 (=> (not res!50234) (not e!65174))))

(assert (=> b!100058 (= res!50234 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100059 () Bool)

(assert (=> b!100059 (= e!65171 call!10294)))

(declare-fun b!100060 () Bool)

(declare-fun lt!50547 () Unit!2999)

(declare-fun lt!50548 () Unit!2999)

(assert (=> b!100060 (= lt!50547 lt!50548)))

(declare-fun lt!50546 () (_ BitVec 64))

(declare-fun lt!50544 () V!3163)

(declare-fun lt!50543 () ListLongMap!1539)

(declare-fun lt!50549 () (_ BitVec 64))

(assert (=> b!100060 (not (contains!804 (+!136 lt!50543 (tuple2!2347 lt!50546 lt!50544)) lt!50549))))

(assert (=> b!100060 (= lt!50548 (addStillNotContains!41 lt!50543 lt!50546 lt!50544 lt!50549))))

(assert (=> b!100060 (= lt!50549 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100060 (= lt!50544 (get!1287 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100060 (= lt!50546 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100060 (= lt!50543 call!10294)))

(assert (=> b!100060 (= e!65171 (+!136 call!10294 (tuple2!2347 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1287 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100061 () Bool)

(assert (=> b!100061 (= e!65172 (ListLongMap!1540 Nil!1580))))

(declare-fun b!100062 () Bool)

(assert (=> b!100062 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> b!100062 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044))))))

(declare-fun lt!50545 () ListLongMap!1539)

(declare-fun e!65170 () Bool)

(assert (=> b!100062 (= e!65170 (= (apply!93 lt!50545 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100063 () Bool)

(declare-fun res!50235 () Bool)

(assert (=> b!100063 (=> (not res!50235) (not e!65173))))

(assert (=> b!100063 (= res!50235 (not (contains!804 lt!50545 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!26991 () Bool)

(assert (=> d!26991 e!65173))

(declare-fun res!50233 () Bool)

(assert (=> d!26991 (=> (not res!50233) (not e!65173))))

(assert (=> d!26991 (= res!50233 (not (contains!804 lt!50545 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26991 (= lt!50545 e!65172)))

(declare-fun c!17133 () Bool)

(assert (=> d!26991 (= c!17133 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!26991 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26991 (= (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50545)))

(declare-fun b!100056 () Bool)

(assert (=> b!100056 (= e!65169 e!65170)))

(assert (=> b!100056 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun res!50232 () Bool)

(assert (=> b!100056 (= res!50232 (contains!804 lt!50545 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100056 (=> (not res!50232) (not e!65170))))

(declare-fun b!100064 () Bool)

(declare-fun e!65175 () Bool)

(assert (=> b!100064 (= e!65169 e!65175)))

(declare-fun c!17130 () Bool)

(assert (=> b!100064 (= c!17130 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100065 () Bool)

(assert (=> b!100065 (= e!65175 (= lt!50545 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (ite (or c!16953 c!16951) (_values!2485 newMap!16) lt!50044) (mask!6609 newMap!16) (ite c!16953 (ite c!16947 lt!50059 lt!50045) (extraKeys!2319 newMap!16)) (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!100066 () Bool)

(assert (=> b!100066 (= e!65175 (isEmpty!359 lt!50545))))

(declare-fun b!100067 () Bool)

(assert (=> b!100067 (= e!65174 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100067 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!26991 c!17133) b!100061))

(assert (= (and d!26991 (not c!17133)) b!100057))

(assert (= (and b!100057 c!17131) b!100060))

(assert (= (and b!100057 (not c!17131)) b!100059))

(assert (= (or b!100060 b!100059) bm!10291))

(assert (= (and d!26991 res!50233) b!100063))

(assert (= (and b!100063 res!50235) b!100058))

(assert (= (and b!100058 res!50234) b!100067))

(assert (= (and b!100058 c!17132) b!100056))

(assert (= (and b!100058 (not c!17132)) b!100064))

(assert (= (and b!100056 res!50232) b!100062))

(assert (= (and b!100064 c!17130) b!100065))

(assert (= (and b!100064 (not c!17130)) b!100066))

(declare-fun b_lambda!4473 () Bool)

(assert (=> (not b_lambda!4473) (not b!100060)))

(assert (=> b!100060 t!5564))

(declare-fun b_and!6167 () Bool)

(assert (= b_and!6163 (and (=> t!5564 result!3303) b_and!6167)))

(assert (=> b!100060 t!5566))

(declare-fun b_and!6169 () Bool)

(assert (= b_and!6165 (and (=> t!5566 result!3305) b_and!6169)))

(declare-fun b_lambda!4475 () Bool)

(assert (=> (not b_lambda!4475) (not b!100062)))

(assert (=> b!100062 t!5564))

(declare-fun b_and!6171 () Bool)

(assert (= b_and!6167 (and (=> t!5564 result!3303) b_and!6171)))

(assert (=> b!100062 t!5566))

(declare-fun b_and!6173 () Bool)

(assert (= b_and!6169 (and (=> t!5566 result!3305) b_and!6173)))

(assert (=> b!100062 m!109397))

(assert (=> b!100062 m!109401))

(assert (=> b!100062 m!109399))

(assert (=> b!100062 m!109397))

(declare-fun m!110413 () Bool)

(assert (=> b!100062 m!110413))

(assert (=> b!100062 m!109399))

(assert (=> b!100062 m!109401))

(assert (=> b!100062 m!109403))

(declare-fun m!110415 () Bool)

(assert (=> b!100065 m!110415))

(assert (=> b!100057 m!109397))

(assert (=> b!100057 m!109397))

(assert (=> b!100057 m!109411))

(declare-fun m!110417 () Bool)

(assert (=> b!100060 m!110417))

(declare-fun m!110419 () Bool)

(assert (=> b!100060 m!110419))

(assert (=> b!100060 m!109401))

(assert (=> b!100060 m!110417))

(assert (=> b!100060 m!109399))

(declare-fun m!110421 () Bool)

(assert (=> b!100060 m!110421))

(assert (=> b!100060 m!109399))

(assert (=> b!100060 m!109401))

(assert (=> b!100060 m!109403))

(assert (=> b!100060 m!109397))

(declare-fun m!110423 () Bool)

(assert (=> b!100060 m!110423))

(declare-fun m!110425 () Bool)

(assert (=> d!26991 m!110425))

(assert (=> d!26991 m!109413))

(assert (=> b!100067 m!109397))

(assert (=> b!100067 m!109397))

(assert (=> b!100067 m!109411))

(assert (=> b!100056 m!109397))

(assert (=> b!100056 m!109397))

(declare-fun m!110427 () Bool)

(assert (=> b!100056 m!110427))

(declare-fun m!110429 () Bool)

(assert (=> b!100063 m!110429))

(declare-fun m!110431 () Bool)

(assert (=> b!100066 m!110431))

(assert (=> bm!10291 m!110415))

(assert (=> bm!10213 d!26991))

(declare-fun b!100068 () Bool)

(declare-fun e!65181 () ListLongMap!1539)

(declare-fun call!10300 () ListLongMap!1539)

(assert (=> b!100068 (= e!65181 call!10300)))

(declare-fun bm!10292 () Bool)

(declare-fun call!10296 () Bool)

(declare-fun lt!50562 () ListLongMap!1539)

(assert (=> bm!10292 (= call!10296 (contains!804 lt!50562 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100069 () Bool)

(declare-fun e!65177 () Bool)

(declare-fun e!65183 () Bool)

(assert (=> b!100069 (= e!65177 e!65183)))

(declare-fun res!50237 () Bool)

(assert (=> b!100069 (= res!50237 call!10296)))

(assert (=> b!100069 (=> (not res!50237) (not e!65183))))

(declare-fun b!100070 () Bool)

(assert (=> b!100070 (= e!65177 (not call!10296))))

(declare-fun b!100072 () Bool)

(declare-fun e!65185 () Unit!2999)

(declare-fun Unit!3031 () Unit!2999)

(assert (=> b!100072 (= e!65185 Unit!3031)))

(declare-fun b!100073 () Bool)

(declare-fun e!65176 () ListLongMap!1539)

(assert (=> b!100073 (= e!65176 call!10300)))

(declare-fun b!100074 () Bool)

(declare-fun lt!50550 () Unit!2999)

(assert (=> b!100074 (= e!65185 lt!50550)))

(declare-fun lt!50570 () ListLongMap!1539)

(assert (=> b!100074 (= lt!50570 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun lt!50552 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50552 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50551 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50551 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000))))

(declare-fun lt!50556 () Unit!2999)

(assert (=> b!100074 (= lt!50556 (addStillContains!69 lt!50570 lt!50552 (zeroValue!2383 (_2!1185 lt!50053)) lt!50551))))

(assert (=> b!100074 (contains!804 (+!136 lt!50570 (tuple2!2347 lt!50552 (zeroValue!2383 (_2!1185 lt!50053)))) lt!50551)))

(declare-fun lt!50559 () Unit!2999)

(assert (=> b!100074 (= lt!50559 lt!50556)))

(declare-fun lt!50560 () ListLongMap!1539)

(assert (=> b!100074 (= lt!50560 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun lt!50565 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50565 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50567 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50567 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000))))

(declare-fun lt!50561 () Unit!2999)

(assert (=> b!100074 (= lt!50561 (addApplyDifferent!69 lt!50560 lt!50565 (minValue!2383 (_2!1185 lt!50053)) lt!50567))))

(assert (=> b!100074 (= (apply!93 (+!136 lt!50560 (tuple2!2347 lt!50565 (minValue!2383 (_2!1185 lt!50053)))) lt!50567) (apply!93 lt!50560 lt!50567))))

(declare-fun lt!50555 () Unit!2999)

(assert (=> b!100074 (= lt!50555 lt!50561)))

(declare-fun lt!50557 () ListLongMap!1539)

(assert (=> b!100074 (= lt!50557 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun lt!50568 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50568 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50554 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50554 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000))))

(declare-fun lt!50553 () Unit!2999)

(assert (=> b!100074 (= lt!50553 (addApplyDifferent!69 lt!50557 lt!50568 (zeroValue!2383 (_2!1185 lt!50053)) lt!50554))))

(assert (=> b!100074 (= (apply!93 (+!136 lt!50557 (tuple2!2347 lt!50568 (zeroValue!2383 (_2!1185 lt!50053)))) lt!50554) (apply!93 lt!50557 lt!50554))))

(declare-fun lt!50569 () Unit!2999)

(assert (=> b!100074 (= lt!50569 lt!50553)))

(declare-fun lt!50558 () ListLongMap!1539)

(assert (=> b!100074 (= lt!50558 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun lt!50566 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50566 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50571 () (_ BitVec 64))

(assert (=> b!100074 (= lt!50571 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000))))

(assert (=> b!100074 (= lt!50550 (addApplyDifferent!69 lt!50558 lt!50566 (minValue!2383 (_2!1185 lt!50053)) lt!50571))))

(assert (=> b!100074 (= (apply!93 (+!136 lt!50558 (tuple2!2347 lt!50566 (minValue!2383 (_2!1185 lt!50053)))) lt!50571) (apply!93 lt!50558 lt!50571))))

(declare-fun b!100075 () Bool)

(declare-fun res!50244 () Bool)

(declare-fun e!65188 () Bool)

(assert (=> b!100075 (=> (not res!50244) (not e!65188))))

(declare-fun e!65184 () Bool)

(assert (=> b!100075 (= res!50244 e!65184)))

(declare-fun res!50241 () Bool)

(assert (=> b!100075 (=> res!50241 e!65184)))

(declare-fun e!65179 () Bool)

(assert (=> b!100075 (= res!50241 (not e!65179))))

(declare-fun res!50236 () Bool)

(assert (=> b!100075 (=> (not res!50236) (not e!65179))))

(assert (=> b!100075 (= res!50236 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(declare-fun b!100076 () Bool)

(declare-fun e!65187 () Bool)

(assert (=> b!100076 (= e!65187 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun b!100077 () Bool)

(declare-fun e!65178 () Bool)

(declare-fun call!10297 () Bool)

(assert (=> b!100077 (= e!65178 (not call!10297))))

(declare-fun bm!10293 () Bool)

(declare-fun call!10299 () ListLongMap!1539)

(declare-fun call!10298 () ListLongMap!1539)

(assert (=> bm!10293 (= call!10299 call!10298)))

(declare-fun bm!10294 () Bool)

(declare-fun c!17139 () Bool)

(declare-fun call!10301 () ListLongMap!1539)

(declare-fun c!17135 () Bool)

(declare-fun call!10295 () ListLongMap!1539)

(assert (=> bm!10294 (= call!10301 (+!136 (ite c!17135 call!10298 (ite c!17139 call!10299 call!10295)) (ite (or c!17135 c!17139) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (_2!1185 lt!50053))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (_2!1185 lt!50053))))))))

(declare-fun b!100078 () Bool)

(declare-fun e!65186 () Bool)

(assert (=> b!100078 (= e!65186 (= (apply!93 lt!50562 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 (_2!1185 lt!50053))))))

(declare-fun b!100079 () Bool)

(declare-fun c!17134 () Bool)

(assert (=> b!100079 (= c!17134 (and (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100079 (= e!65176 e!65181)))

(declare-fun b!100080 () Bool)

(declare-fun e!65182 () ListLongMap!1539)

(assert (=> b!100080 (= e!65182 e!65176)))

(assert (=> b!100080 (= c!17139 (and (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10295 () Bool)

(assert (=> bm!10295 (= call!10297 (contains!804 lt!50562 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100081 () Bool)

(assert (=> b!100081 (= e!65188 e!65178)))

(declare-fun c!17138 () Bool)

(assert (=> b!100081 (= c!17138 (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100082 () Bool)

(assert (=> b!100082 (= e!65179 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun b!100083 () Bool)

(declare-fun res!50239 () Bool)

(assert (=> b!100083 (=> (not res!50239) (not e!65188))))

(assert (=> b!100083 (= res!50239 e!65177)))

(declare-fun c!17137 () Bool)

(assert (=> b!100083 (= c!17137 (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10296 () Bool)

(assert (=> bm!10296 (= call!10295 call!10299)))

(declare-fun b!100084 () Bool)

(assert (=> b!100084 (= e!65183 (= (apply!93 lt!50562 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 (_2!1185 lt!50053))))))

(declare-fun bm!10297 () Bool)

(assert (=> bm!10297 (= call!10298 (getCurrentListMapNoExtraKeys!101 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))))))

(declare-fun d!26993 () Bool)

(assert (=> d!26993 e!65188))

(declare-fun res!50242 () Bool)

(assert (=> d!26993 (=> (not res!50242) (not e!65188))))

(assert (=> d!26993 (= res!50242 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))))

(declare-fun lt!50564 () ListLongMap!1539)

(assert (=> d!26993 (= lt!50562 lt!50564)))

(declare-fun lt!50563 () Unit!2999)

(assert (=> d!26993 (= lt!50563 e!65185)))

(declare-fun c!17136 () Bool)

(assert (=> d!26993 (= c!17136 e!65187)))

(declare-fun res!50238 () Bool)

(assert (=> d!26993 (=> (not res!50238) (not e!65187))))

(assert (=> d!26993 (= res!50238 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (=> d!26993 (= lt!50564 e!65182)))

(assert (=> d!26993 (= c!17135 (and (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26993 (validMask!0 (mask!6609 (_2!1185 lt!50053)))))

(assert (=> d!26993 (= (getCurrentListMap!476 (_keys!4196 (_2!1185 lt!50053)) (_values!2485 (_2!1185 lt!50053)) (mask!6609 (_2!1185 lt!50053)) (extraKeys!2319 (_2!1185 lt!50053)) (zeroValue!2383 (_2!1185 lt!50053)) (minValue!2383 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1185 lt!50053))) lt!50562)))

(declare-fun b!100071 () Bool)

(declare-fun e!65180 () Bool)

(assert (=> b!100071 (= e!65180 (= (apply!93 lt!50562 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (_values!2485 (_2!1185 lt!50053))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 (_2!1185 lt!50053)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100071 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (_values!2485 (_2!1185 lt!50053)))))))

(assert (=> b!100071 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(declare-fun b!100085 () Bool)

(assert (=> b!100085 (= e!65182 (+!136 call!10301 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (_2!1185 lt!50053)))))))

(declare-fun bm!10298 () Bool)

(assert (=> bm!10298 (= call!10300 call!10301)))

(declare-fun b!100086 () Bool)

(assert (=> b!100086 (= e!65181 call!10295)))

(declare-fun b!100087 () Bool)

(assert (=> b!100087 (= e!65178 e!65186)))

(declare-fun res!50240 () Bool)

(assert (=> b!100087 (= res!50240 call!10297)))

(assert (=> b!100087 (=> (not res!50240) (not e!65186))))

(declare-fun b!100088 () Bool)

(assert (=> b!100088 (= e!65184 e!65180)))

(declare-fun res!50243 () Bool)

(assert (=> b!100088 (=> (not res!50243) (not e!65180))))

(assert (=> b!100088 (= res!50243 (contains!804 lt!50562 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(assert (=> b!100088 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (= (and d!26993 c!17135) b!100085))

(assert (= (and d!26993 (not c!17135)) b!100080))

(assert (= (and b!100080 c!17139) b!100073))

(assert (= (and b!100080 (not c!17139)) b!100079))

(assert (= (and b!100079 c!17134) b!100068))

(assert (= (and b!100079 (not c!17134)) b!100086))

(assert (= (or b!100068 b!100086) bm!10296))

(assert (= (or b!100073 bm!10296) bm!10293))

(assert (= (or b!100073 b!100068) bm!10298))

(assert (= (or b!100085 bm!10293) bm!10297))

(assert (= (or b!100085 bm!10298) bm!10294))

(assert (= (and d!26993 res!50238) b!100076))

(assert (= (and d!26993 c!17136) b!100074))

(assert (= (and d!26993 (not c!17136)) b!100072))

(assert (= (and d!26993 res!50242) b!100075))

(assert (= (and b!100075 res!50236) b!100082))

(assert (= (and b!100075 (not res!50241)) b!100088))

(assert (= (and b!100088 res!50243) b!100071))

(assert (= (and b!100075 res!50244) b!100083))

(assert (= (and b!100083 c!17137) b!100069))

(assert (= (and b!100083 (not c!17137)) b!100070))

(assert (= (and b!100069 res!50237) b!100084))

(assert (= (or b!100069 b!100070) bm!10292))

(assert (= (and b!100083 res!50239) b!100081))

(assert (= (and b!100081 c!17138) b!100087))

(assert (= (and b!100081 (not c!17138)) b!100077))

(assert (= (and b!100087 res!50240) b!100078))

(assert (= (or b!100087 b!100077) bm!10295))

(declare-fun b_lambda!4477 () Bool)

(assert (=> (not b_lambda!4477) (not b!100071)))

(declare-fun t!5568 () Bool)

(declare-fun tb!1953 () Bool)

(assert (=> (and b!99092 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 (_2!1185 lt!50053))) t!5568) tb!1953))

(declare-fun result!3307 () Bool)

(assert (=> tb!1953 (= result!3307 tp_is_empty!2637)))

(assert (=> b!100071 t!5568))

(declare-fun b_and!6175 () Bool)

(assert (= b_and!6171 (and (=> t!5568 result!3307) b_and!6175)))

(declare-fun t!5570 () Bool)

(declare-fun tb!1955 () Bool)

(assert (=> (and b!99086 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (_2!1185 lt!50053))) t!5570) tb!1955))

(declare-fun result!3309 () Bool)

(assert (= result!3309 result!3307))

(assert (=> b!100071 t!5570))

(declare-fun b_and!6177 () Bool)

(assert (= b_and!6173 (and (=> t!5570 result!3309) b_and!6177)))

(assert (=> b!100071 m!110273))

(declare-fun m!110433 () Bool)

(assert (=> b!100071 m!110433))

(declare-fun m!110435 () Bool)

(assert (=> b!100071 m!110435))

(assert (=> b!100071 m!110433))

(assert (=> b!100071 m!110435))

(declare-fun m!110437 () Bool)

(assert (=> b!100071 m!110437))

(assert (=> b!100071 m!110273))

(declare-fun m!110439 () Bool)

(assert (=> b!100071 m!110439))

(declare-fun m!110441 () Bool)

(assert (=> b!100084 m!110441))

(declare-fun m!110443 () Bool)

(assert (=> bm!10297 m!110443))

(assert (=> b!100082 m!110273))

(assert (=> b!100082 m!110273))

(assert (=> b!100082 m!110275))

(assert (=> b!100076 m!110273))

(assert (=> b!100076 m!110273))

(assert (=> b!100076 m!110275))

(declare-fun m!110445 () Bool)

(assert (=> d!26993 m!110445))

(declare-fun m!110447 () Bool)

(assert (=> bm!10294 m!110447))

(declare-fun m!110449 () Bool)

(assert (=> b!100078 m!110449))

(assert (=> b!100088 m!110273))

(assert (=> b!100088 m!110273))

(declare-fun m!110451 () Bool)

(assert (=> b!100088 m!110451))

(declare-fun m!110453 () Bool)

(assert (=> bm!10292 m!110453))

(assert (=> b!100074 m!110273))

(declare-fun m!110455 () Bool)

(assert (=> b!100074 m!110455))

(declare-fun m!110457 () Bool)

(assert (=> b!100074 m!110457))

(declare-fun m!110459 () Bool)

(assert (=> b!100074 m!110459))

(declare-fun m!110461 () Bool)

(assert (=> b!100074 m!110461))

(declare-fun m!110463 () Bool)

(assert (=> b!100074 m!110463))

(declare-fun m!110465 () Bool)

(assert (=> b!100074 m!110465))

(declare-fun m!110467 () Bool)

(assert (=> b!100074 m!110467))

(declare-fun m!110469 () Bool)

(assert (=> b!100074 m!110469))

(declare-fun m!110471 () Bool)

(assert (=> b!100074 m!110471))

(declare-fun m!110473 () Bool)

(assert (=> b!100074 m!110473))

(assert (=> b!100074 m!110471))

(declare-fun m!110475 () Bool)

(assert (=> b!100074 m!110475))

(declare-fun m!110477 () Bool)

(assert (=> b!100074 m!110477))

(assert (=> b!100074 m!110465))

(declare-fun m!110479 () Bool)

(assert (=> b!100074 m!110479))

(declare-fun m!110481 () Bool)

(assert (=> b!100074 m!110481))

(assert (=> b!100074 m!110443))

(assert (=> b!100074 m!110477))

(declare-fun m!110483 () Bool)

(assert (=> b!100074 m!110483))

(assert (=> b!100074 m!110455))

(declare-fun m!110485 () Bool)

(assert (=> b!100085 m!110485))

(declare-fun m!110487 () Bool)

(assert (=> bm!10295 m!110487))

(assert (=> d!26745 d!26993))

(declare-fun d!26995 () Bool)

(declare-fun e!65189 () Bool)

(assert (=> d!26995 e!65189))

(declare-fun res!50245 () Bool)

(assert (=> d!26995 (=> res!50245 e!65189)))

(declare-fun lt!50575 () Bool)

(assert (=> d!26995 (= res!50245 (not lt!50575))))

(declare-fun lt!50573 () Bool)

(assert (=> d!26995 (= lt!50575 lt!50573)))

(declare-fun lt!50572 () Unit!2999)

(declare-fun e!65190 () Unit!2999)

(assert (=> d!26995 (= lt!50572 e!65190)))

(declare-fun c!17140 () Bool)

(assert (=> d!26995 (= c!17140 lt!50573)))

(assert (=> d!26995 (= lt!50573 (containsKey!155 (toList!785 lt!50097) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26995 (= (contains!804 lt!50097 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50575)))

(declare-fun b!100089 () Bool)

(declare-fun lt!50574 () Unit!2999)

(assert (=> b!100089 (= e!65190 lt!50574)))

(assert (=> b!100089 (= lt!50574 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50097) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100089 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100090 () Bool)

(declare-fun Unit!3032 () Unit!2999)

(assert (=> b!100090 (= e!65190 Unit!3032)))

(declare-fun b!100091 () Bool)

(assert (=> b!100091 (= e!65189 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26995 c!17140) b!100089))

(assert (= (and d!26995 (not c!17140)) b!100090))

(assert (= (and d!26995 (not res!50245)) b!100091))

(declare-fun m!110489 () Bool)

(assert (=> d!26995 m!110489))

(declare-fun m!110491 () Bool)

(assert (=> b!100089 m!110491))

(assert (=> b!100089 m!109993))

(assert (=> b!100089 m!109993))

(declare-fun m!110493 () Bool)

(assert (=> b!100089 m!110493))

(assert (=> b!100091 m!109993))

(assert (=> b!100091 m!109993))

(assert (=> b!100091 m!110493))

(assert (=> bm!10208 d!26995))

(declare-fun d!26997 () Bool)

(declare-fun e!65191 () Bool)

(assert (=> d!26997 e!65191))

(declare-fun res!50246 () Bool)

(assert (=> d!26997 (=> res!50246 e!65191)))

(declare-fun lt!50579 () Bool)

(assert (=> d!26997 (= res!50246 (not lt!50579))))

(declare-fun lt!50577 () Bool)

(assert (=> d!26997 (= lt!50579 lt!50577)))

(declare-fun lt!50576 () Unit!2999)

(declare-fun e!65192 () Unit!2999)

(assert (=> d!26997 (= lt!50576 e!65192)))

(declare-fun c!17141 () Bool)

(assert (=> d!26997 (= c!17141 lt!50577)))

(assert (=> d!26997 (= lt!50577 (containsKey!155 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!26997 (= (contains!804 lt!50222 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50579)))

(declare-fun b!100092 () Bool)

(declare-fun lt!50578 () Unit!2999)

(assert (=> b!100092 (= e!65192 lt!50578)))

(assert (=> b!100092 (= lt!50578 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> b!100092 (isDefined!104 (getValueByKey!151 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100093 () Bool)

(declare-fun Unit!3033 () Unit!2999)

(assert (=> b!100093 (= e!65192 Unit!3033)))

(declare-fun b!100094 () Bool)

(assert (=> b!100094 (= e!65191 (isDefined!104 (getValueByKey!151 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!26997 c!17141) b!100092))

(assert (= (and d!26997 (not c!17141)) b!100093))

(assert (= (and d!26997 (not res!50246)) b!100094))

(declare-fun m!110495 () Bool)

(assert (=> d!26997 m!110495))

(declare-fun m!110497 () Bool)

(assert (=> b!100092 m!110497))

(assert (=> b!100092 m!109727))

(assert (=> b!100092 m!109727))

(declare-fun m!110499 () Bool)

(assert (=> b!100092 m!110499))

(assert (=> b!100094 m!109727))

(assert (=> b!100094 m!109727))

(assert (=> b!100094 m!110499))

(assert (=> d!26791 d!26997))

(declare-fun b!100096 () Bool)

(declare-fun e!65193 () Option!157)

(declare-fun e!65194 () Option!157)

(assert (=> b!100096 (= e!65193 e!65194)))

(declare-fun c!17143 () Bool)

(assert (=> b!100096 (= c!17143 (and ((_ is Cons!1579) lt!50223) (not (= (_1!1184 (h!2174 lt!50223)) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100098 () Bool)

(assert (=> b!100098 (= e!65194 None!155)))

(declare-fun b!100097 () Bool)

(assert (=> b!100097 (= e!65194 (getValueByKey!151 (t!5557 lt!50223) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun c!17142 () Bool)

(declare-fun d!26999 () Bool)

(assert (=> d!26999 (= c!17142 (and ((_ is Cons!1579) lt!50223) (= (_1!1184 (h!2174 lt!50223)) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!26999 (= (getValueByKey!151 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65193)))

(declare-fun b!100095 () Bool)

(assert (=> b!100095 (= e!65193 (Some!156 (_2!1184 (h!2174 lt!50223))))))

(assert (= (and d!26999 c!17142) b!100095))

(assert (= (and d!26999 (not c!17142)) b!100096))

(assert (= (and b!100096 c!17143) b!100097))

(assert (= (and b!100096 (not c!17143)) b!100098))

(declare-fun m!110501 () Bool)

(assert (=> b!100097 m!110501))

(assert (=> d!26791 d!26999))

(declare-fun d!27001 () Bool)

(assert (=> d!27001 (= (getValueByKey!151 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50580 () Unit!2999)

(assert (=> d!27001 (= lt!50580 (choose!611 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65195 () Bool)

(assert (=> d!27001 e!65195))

(declare-fun res!50247 () Bool)

(assert (=> d!27001 (=> (not res!50247) (not e!65195))))

(assert (=> d!27001 (= res!50247 (isStrictlySorted!305 lt!50223))))

(assert (=> d!27001 (= (lemmaContainsTupThenGetReturnValue!67 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50580)))

(declare-fun b!100099 () Bool)

(declare-fun res!50248 () Bool)

(assert (=> b!100099 (=> (not res!50248) (not e!65195))))

(assert (=> b!100099 (= res!50248 (containsKey!155 lt!50223 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100100 () Bool)

(assert (=> b!100100 (= e!65195 (contains!806 lt!50223 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27001 res!50247) b!100099))

(assert (= (and b!100099 res!50248) b!100100))

(assert (=> d!27001 m!109721))

(declare-fun m!110503 () Bool)

(assert (=> d!27001 m!110503))

(declare-fun m!110505 () Bool)

(assert (=> d!27001 m!110505))

(declare-fun m!110507 () Bool)

(assert (=> b!100099 m!110507))

(declare-fun m!110509 () Bool)

(assert (=> b!100100 m!110509))

(assert (=> d!26791 d!27001))

(declare-fun call!10302 () List!1583)

(declare-fun bm!10299 () Bool)

(declare-fun c!17147 () Bool)

(declare-fun e!65196 () List!1583)

(assert (=> bm!10299 (= call!10302 ($colon$colon!79 e!65196 (ite c!17147 (h!2174 (toList!785 lt!49965)) (tuple2!2347 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun c!17144 () Bool)

(assert (=> bm!10299 (= c!17144 c!17147)))

(declare-fun b!100101 () Bool)

(declare-fun e!65197 () List!1583)

(declare-fun e!65199 () List!1583)

(assert (=> b!100101 (= e!65197 e!65199)))

(declare-fun c!17146 () Bool)

(assert (=> b!100101 (= c!17146 (and ((_ is Cons!1579) (toList!785 lt!49965)) (= (_1!1184 (h!2174 (toList!785 lt!49965))) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100102 () Bool)

(declare-fun res!50250 () Bool)

(declare-fun e!65200 () Bool)

(assert (=> b!100102 (=> (not res!50250) (not e!65200))))

(declare-fun lt!50581 () List!1583)

(assert (=> b!100102 (= res!50250 (containsKey!155 lt!50581 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun c!17145 () Bool)

(declare-fun b!100103 () Bool)

(assert (=> b!100103 (= e!65196 (ite c!17146 (t!5557 (toList!785 lt!49965)) (ite c!17145 (Cons!1579 (h!2174 (toList!785 lt!49965)) (t!5557 (toList!785 lt!49965))) Nil!1580)))))

(declare-fun b!100104 () Bool)

(declare-fun e!65198 () List!1583)

(declare-fun call!10303 () List!1583)

(assert (=> b!100104 (= e!65198 call!10303)))

(declare-fun b!100105 () Bool)

(assert (=> b!100105 (= e!65198 call!10303)))

(declare-fun d!27003 () Bool)

(assert (=> d!27003 e!65200))

(declare-fun res!50249 () Bool)

(assert (=> d!27003 (=> (not res!50249) (not e!65200))))

(assert (=> d!27003 (= res!50249 (isStrictlySorted!305 lt!50581))))

(assert (=> d!27003 (= lt!50581 e!65197)))

(assert (=> d!27003 (= c!17147 (and ((_ is Cons!1579) (toList!785 lt!49965)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49965))) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27003 (isStrictlySorted!305 (toList!785 lt!49965))))

(assert (=> d!27003 (= (insertStrictlySorted!70 (toList!785 lt!49965) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50581)))

(declare-fun b!100106 () Bool)

(assert (=> b!100106 (= c!17145 (and ((_ is Cons!1579) (toList!785 lt!49965)) (bvsgt (_1!1184 (h!2174 (toList!785 lt!49965))) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!100106 (= e!65199 e!65198)))

(declare-fun bm!10300 () Bool)

(declare-fun call!10304 () List!1583)

(assert (=> bm!10300 (= call!10304 call!10302)))

(declare-fun b!100107 () Bool)

(assert (=> b!100107 (= e!65199 call!10304)))

(declare-fun b!100108 () Bool)

(assert (=> b!100108 (= e!65200 (contains!806 lt!50581 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun bm!10301 () Bool)

(assert (=> bm!10301 (= call!10303 call!10304)))

(declare-fun b!100109 () Bool)

(assert (=> b!100109 (= e!65197 call!10302)))

(declare-fun b!100110 () Bool)

(assert (=> b!100110 (= e!65196 (insertStrictlySorted!70 (t!5557 (toList!785 lt!49965)) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!27003 c!17147) b!100109))

(assert (= (and d!27003 (not c!17147)) b!100101))

(assert (= (and b!100101 c!17146) b!100107))

(assert (= (and b!100101 (not c!17146)) b!100106))

(assert (= (and b!100106 c!17145) b!100104))

(assert (= (and b!100106 (not c!17145)) b!100105))

(assert (= (or b!100104 b!100105) bm!10301))

(assert (= (or b!100107 bm!10301) bm!10300))

(assert (= (or b!100109 bm!10300) bm!10299))

(assert (= (and bm!10299 c!17144) b!100110))

(assert (= (and bm!10299 (not c!17144)) b!100103))

(assert (= (and d!27003 res!50249) b!100102))

(assert (= (and b!100102 res!50250) b!100108))

(declare-fun m!110511 () Bool)

(assert (=> bm!10299 m!110511))

(declare-fun m!110513 () Bool)

(assert (=> b!100102 m!110513))

(declare-fun m!110515 () Bool)

(assert (=> b!100110 m!110515))

(declare-fun m!110517 () Bool)

(assert (=> b!100108 m!110517))

(declare-fun m!110519 () Bool)

(assert (=> d!27003 m!110519))

(declare-fun m!110521 () Bool)

(assert (=> d!27003 m!110521))

(assert (=> d!26791 d!27003))

(declare-fun d!27005 () Bool)

(assert (=> d!27005 (= (isDefined!104 (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) (not (isEmpty!360 (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun bs!4140 () Bool)

(assert (= bs!4140 d!27005))

(assert (=> bs!4140 m!109541))

(declare-fun m!110523 () Bool)

(assert (=> bs!4140 m!110523))

(assert (=> b!99465 d!27005))

(declare-fun b!100112 () Bool)

(declare-fun e!65201 () Option!157)

(declare-fun e!65202 () Option!157)

(assert (=> b!100112 (= e!65201 e!65202)))

(declare-fun c!17149 () Bool)

(assert (=> b!100112 (= c!17149 (and ((_ is Cons!1579) (toList!785 call!10189)) (not (= (_1!1184 (h!2174 (toList!785 call!10189))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(declare-fun b!100114 () Bool)

(assert (=> b!100114 (= e!65202 None!155)))

(declare-fun b!100113 () Bool)

(assert (=> b!100113 (= e!65202 (getValueByKey!151 (t!5557 (toList!785 call!10189)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun d!27007 () Bool)

(declare-fun c!17148 () Bool)

(assert (=> d!27007 (= c!17148 (and ((_ is Cons!1579) (toList!785 call!10189)) (= (_1!1184 (h!2174 (toList!785 call!10189))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!27007 (= (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65201)))

(declare-fun b!100111 () Bool)

(assert (=> b!100111 (= e!65201 (Some!156 (_2!1184 (h!2174 (toList!785 call!10189)))))))

(assert (= (and d!27007 c!17148) b!100111))

(assert (= (and d!27007 (not c!17148)) b!100112))

(assert (= (and b!100112 c!17149) b!100113))

(assert (= (and b!100112 (not c!17149)) b!100114))

(assert (=> b!100113 m!109133))

(declare-fun m!110525 () Bool)

(assert (=> b!100113 m!110525))

(assert (=> b!99465 d!27007))

(declare-fun b!100115 () Bool)

(declare-fun e!65205 () Bool)

(assert (=> b!100115 (= e!65205 (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100117 () Bool)

(declare-fun e!65206 () Bool)

(declare-fun call!10305 () Bool)

(assert (=> b!100117 (= e!65206 call!10305)))

(declare-fun b!100118 () Bool)

(assert (=> b!100118 (= e!65206 call!10305)))

(declare-fun d!27009 () Bool)

(declare-fun res!50251 () Bool)

(declare-fun e!65204 () Bool)

(assert (=> d!27009 (=> res!50251 e!65204)))

(assert (=> d!27009 (= res!50251 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!27009 (= (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 Nil!1581) e!65204)))

(declare-fun b!100116 () Bool)

(declare-fun e!65203 () Bool)

(assert (=> b!100116 (= e!65204 e!65203)))

(declare-fun res!50252 () Bool)

(assert (=> b!100116 (=> (not res!50252) (not e!65203))))

(assert (=> b!100116 (= res!50252 (not e!65205))))

(declare-fun res!50253 () Bool)

(assert (=> b!100116 (=> (not res!50253) (not e!65205))))

(assert (=> b!100116 (= res!50253 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100119 () Bool)

(assert (=> b!100119 (= e!65203 e!65206)))

(declare-fun c!17150 () Bool)

(assert (=> b!100119 (= c!17150 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10302 () Bool)

(assert (=> bm!10302 (= call!10305 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17150 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000) Nil!1581) Nil!1581)))))

(assert (= (and d!27009 (not res!50251)) b!100116))

(assert (= (and b!100116 res!50253) b!100115))

(assert (= (and b!100116 res!50252) b!100119))

(assert (= (and b!100119 c!17150) b!100117))

(assert (= (and b!100119 (not c!17150)) b!100118))

(assert (= (or b!100117 b!100118) bm!10302))

(assert (=> b!100115 m!110245))

(assert (=> b!100115 m!110245))

(declare-fun m!110527 () Bool)

(assert (=> b!100115 m!110527))

(assert (=> b!100116 m!110245))

(assert (=> b!100116 m!110245))

(assert (=> b!100116 m!110247))

(assert (=> b!100119 m!110245))

(assert (=> b!100119 m!110245))

(assert (=> b!100119 m!110247))

(assert (=> bm!10302 m!110245))

(declare-fun m!110529 () Bool)

(assert (=> bm!10302 m!110529))

(assert (=> b!99462 d!27009))

(assert (=> b!99655 d!26841))

(declare-fun d!27011 () Bool)

(assert (=> d!27011 (= (inRange!0 (ite c!17031 (index!3161 lt!50321) (ite c!17033 (index!3160 lt!50328) (index!3163 lt!50328))) (mask!6609 newMap!16)) (and (bvsge (ite c!17031 (index!3161 lt!50321) (ite c!17033 (index!3160 lt!50328) (index!3163 lt!50328))) #b00000000000000000000000000000000) (bvslt (ite c!17031 (index!3161 lt!50321) (ite c!17033 (index!3160 lt!50328) (index!3163 lt!50328))) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10250 d!27011))

(assert (=> b!99718 d!26841))

(declare-fun d!27013 () Bool)

(assert (=> d!27013 (= (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!360 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4141 () Bool)

(assert (= bs!4141 d!27013))

(assert (=> bs!4141 m!109549))

(declare-fun m!110531 () Bool)

(assert (=> bs!4141 m!110531))

(assert (=> b!99468 d!27013))

(assert (=> b!99468 d!26989))

(declare-fun d!27015 () Bool)

(assert (=> d!27015 (= (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!360 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4142 () Bool)

(assert (= bs!4142 d!27015))

(assert (=> bs!4142 m!109597))

(declare-fun m!110533 () Bool)

(assert (=> bs!4142 m!110533))

(assert (=> b!99549 d!27015))

(declare-fun b!100121 () Bool)

(declare-fun e!65207 () Option!157)

(declare-fun e!65208 () Option!157)

(assert (=> b!100121 (= e!65207 e!65208)))

(declare-fun c!17152 () Bool)

(assert (=> b!100121 (= c!17152 (and ((_ is Cons!1579) (toList!785 lt!49957)) (not (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100123 () Bool)

(assert (=> b!100123 (= e!65208 None!155)))

(declare-fun b!100122 () Bool)

(assert (=> b!100122 (= e!65208 (getValueByKey!151 (t!5557 (toList!785 lt!49957)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!27017 () Bool)

(declare-fun c!17151 () Bool)

(assert (=> d!27017 (= c!17151 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27017 (= (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000) e!65207)))

(declare-fun b!100120 () Bool)

(assert (=> b!100120 (= e!65207 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49957)))))))

(assert (= (and d!27017 c!17151) b!100120))

(assert (= (and d!27017 (not c!17151)) b!100121))

(assert (= (and b!100121 c!17152) b!100122))

(assert (= (and b!100121 (not c!17152)) b!100123))

(declare-fun m!110535 () Bool)

(assert (=> b!100122 m!110535))

(assert (=> b!99549 d!27017))

(declare-fun d!27019 () Bool)

(declare-fun res!50254 () Bool)

(declare-fun e!65209 () Bool)

(assert (=> d!27019 (=> res!50254 e!65209)))

(assert (=> d!27019 (= res!50254 (and ((_ is Cons!1579) (toList!785 call!10187)) (= (_1!1184 (h!2174 (toList!785 call!10187))) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))))

(assert (=> d!27019 (= (containsKey!155 (toList!785 call!10187) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))) e!65209)))

(declare-fun b!100124 () Bool)

(declare-fun e!65210 () Bool)

(assert (=> b!100124 (= e!65209 e!65210)))

(declare-fun res!50255 () Bool)

(assert (=> b!100124 (=> (not res!50255) (not e!65210))))

(assert (=> b!100124 (= res!50255 (and (or (not ((_ is Cons!1579) (toList!785 call!10187))) (bvsle (_1!1184 (h!2174 (toList!785 call!10187))) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))) ((_ is Cons!1579) (toList!785 call!10187)) (bvslt (_1!1184 (h!2174 (toList!785 call!10187))) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))))

(declare-fun b!100125 () Bool)

(assert (=> b!100125 (= e!65210 (containsKey!155 (t!5557 (toList!785 call!10187)) (ite c!16951 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(assert (= (and d!27019 (not res!50254)) b!100124))

(assert (= (and b!100124 res!50255) b!100125))

(declare-fun m!110537 () Bool)

(assert (=> b!100125 m!110537))

(assert (=> d!26803 d!27019))

(declare-fun d!27021 () Bool)

(assert (=> d!27021 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(declare-fun lt!50582 () Unit!2999)

(assert (=> d!27021 (= lt!50582 (choose!609 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(declare-fun e!65211 () Bool)

(assert (=> d!27021 e!65211))

(declare-fun res!50256 () Bool)

(assert (=> d!27021 (=> (not res!50256) (not e!65211))))

(assert (=> d!27021 (= res!50256 (isStrictlySorted!305 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27021 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946) lt!50582)))

(declare-fun b!100126 () Bool)

(assert (=> b!100126 (= e!65211 (containsKey!155 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))

(assert (= (and d!27021 res!50256) b!100126))

(assert (=> d!27021 m!109663))

(assert (=> d!27021 m!109663))

(assert (=> d!27021 m!109665))

(declare-fun m!110539 () Bool)

(assert (=> d!27021 m!110539))

(declare-fun m!110541 () Bool)

(assert (=> d!27021 m!110541))

(assert (=> b!100126 m!109659))

(assert (=> b!99605 d!27021))

(declare-fun d!27023 () Bool)

(assert (=> d!27023 (= (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946)) (not (isEmpty!360 (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946))))))

(declare-fun bs!4143 () Bool)

(assert (= bs!4143 d!27023))

(assert (=> bs!4143 m!109663))

(declare-fun m!110543 () Bool)

(assert (=> bs!4143 m!110543))

(assert (=> b!99605 d!27023))

(declare-fun b!100128 () Bool)

(declare-fun e!65212 () Option!157)

(declare-fun e!65213 () Option!157)

(assert (=> b!100128 (= e!65212 e!65213)))

(declare-fun c!17154 () Bool)

(assert (=> b!100128 (= c!17154 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (not (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49946))))))

(declare-fun b!100130 () Bool)

(assert (=> b!100130 (= e!65213 None!155)))

(declare-fun b!100129 () Bool)

(assert (=> b!100129 (= e!65213 (getValueByKey!151 (t!5557 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!49946))))

(declare-fun d!27025 () Bool)

(declare-fun c!17153 () Bool)

(assert (=> d!27025 (= c!17153 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))) (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49946)))))

(assert (=> d!27025 (= (getValueByKey!151 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49946) e!65212)))

(declare-fun b!100127 () Bool)

(assert (=> b!100127 (= e!65212 (Some!156 (_2!1184 (h!2174 (toList!785 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(assert (= (and d!27025 c!17153) b!100127))

(assert (= (and d!27025 (not c!17153)) b!100128))

(assert (= (and b!100128 c!17154) b!100129))

(assert (= (and b!100128 (not c!17154)) b!100130))

(declare-fun m!110545 () Bool)

(assert (=> b!100129 m!110545))

(assert (=> b!99605 d!27025))

(assert (=> b!99497 d!26825))

(declare-fun d!27027 () Bool)

(declare-fun e!65214 () Bool)

(assert (=> d!27027 e!65214))

(declare-fun res!50257 () Bool)

(assert (=> d!27027 (=> res!50257 e!65214)))

(declare-fun lt!50586 () Bool)

(assert (=> d!27027 (= res!50257 (not lt!50586))))

(declare-fun lt!50584 () Bool)

(assert (=> d!27027 (= lt!50586 lt!50584)))

(declare-fun lt!50583 () Unit!2999)

(declare-fun e!65215 () Unit!2999)

(assert (=> d!27027 (= lt!50583 e!65215)))

(declare-fun c!17155 () Bool)

(assert (=> d!27027 (= c!17155 lt!50584)))

(assert (=> d!27027 (= lt!50584 (containsKey!155 (toList!785 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162))) lt!50167))))

(assert (=> d!27027 (= (contains!804 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162)) lt!50167) lt!50586)))

(declare-fun b!100131 () Bool)

(declare-fun lt!50585 () Unit!2999)

(assert (=> b!100131 (= e!65215 lt!50585)))

(assert (=> b!100131 (= lt!50585 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162))) lt!50167))))

(assert (=> b!100131 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162))) lt!50167))))

(declare-fun b!100132 () Bool)

(declare-fun Unit!3034 () Unit!2999)

(assert (=> b!100132 (= e!65215 Unit!3034)))

(declare-fun b!100133 () Bool)

(assert (=> b!100133 (= e!65214 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162))) lt!50167)))))

(assert (= (and d!27027 c!17155) b!100131))

(assert (= (and d!27027 (not c!17155)) b!100132))

(assert (= (and d!27027 (not res!50257)) b!100133))

(declare-fun m!110547 () Bool)

(assert (=> d!27027 m!110547))

(declare-fun m!110549 () Bool)

(assert (=> b!100131 m!110549))

(declare-fun m!110551 () Bool)

(assert (=> b!100131 m!110551))

(assert (=> b!100131 m!110551))

(declare-fun m!110553 () Bool)

(assert (=> b!100131 m!110553))

(assert (=> b!100133 m!110551))

(assert (=> b!100133 m!110551))

(assert (=> b!100133 m!110553))

(assert (=> b!99497 d!27027))

(declare-fun d!27029 () Bool)

(assert (=> d!27029 (not (contains!804 (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162)) lt!50167))))

(declare-fun lt!50589 () Unit!2999)

(declare-fun choose!613 (ListLongMap!1539 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!2999)

(assert (=> d!27029 (= lt!50589 (choose!613 lt!50161 lt!50164 lt!50162 lt!50167))))

(declare-fun e!65218 () Bool)

(assert (=> d!27029 e!65218))

(declare-fun res!50260 () Bool)

(assert (=> d!27029 (=> (not res!50260) (not e!65218))))

(assert (=> d!27029 (= res!50260 (not (contains!804 lt!50161 lt!50167)))))

(assert (=> d!27029 (= (addStillNotContains!41 lt!50161 lt!50164 lt!50162 lt!50167) lt!50589)))

(declare-fun b!100137 () Bool)

(assert (=> b!100137 (= e!65218 (not (= lt!50164 lt!50167)))))

(assert (= (and d!27029 res!50260) b!100137))

(assert (=> d!27029 m!109557))

(assert (=> d!27029 m!109557))

(assert (=> d!27029 m!109559))

(declare-fun m!110555 () Bool)

(assert (=> d!27029 m!110555))

(declare-fun m!110557 () Bool)

(assert (=> d!27029 m!110557))

(assert (=> b!99497 d!27029))

(declare-fun d!27031 () Bool)

(declare-fun e!65219 () Bool)

(assert (=> d!27031 e!65219))

(declare-fun res!50262 () Bool)

(assert (=> d!27031 (=> (not res!50262) (not e!65219))))

(declare-fun lt!50592 () ListLongMap!1539)

(assert (=> d!27031 (= res!50262 (contains!804 lt!50592 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50593 () List!1583)

(assert (=> d!27031 (= lt!50592 (ListLongMap!1540 lt!50593))))

(declare-fun lt!50590 () Unit!2999)

(declare-fun lt!50591 () Unit!2999)

(assert (=> d!27031 (= lt!50590 lt!50591)))

(assert (=> d!27031 (= (getValueByKey!151 lt!50593 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27031 (= lt!50591 (lemmaContainsTupThenGetReturnValue!67 lt!50593 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27031 (= lt!50593 (insertStrictlySorted!70 (toList!785 call!10227) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27031 (= (+!136 call!10227 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50592)))

(declare-fun b!100138 () Bool)

(declare-fun res!50261 () Bool)

(assert (=> b!100138 (=> (not res!50261) (not e!65219))))

(assert (=> b!100138 (= res!50261 (= (getValueByKey!151 (toList!785 lt!50592) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100139 () Bool)

(assert (=> b!100139 (= e!65219 (contains!806 (toList!785 lt!50592) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27031 res!50262) b!100138))

(assert (= (and b!100138 res!50261) b!100139))

(declare-fun m!110559 () Bool)

(assert (=> d!27031 m!110559))

(declare-fun m!110561 () Bool)

(assert (=> d!27031 m!110561))

(declare-fun m!110563 () Bool)

(assert (=> d!27031 m!110563))

(declare-fun m!110565 () Bool)

(assert (=> d!27031 m!110565))

(declare-fun m!110567 () Bool)

(assert (=> b!100138 m!110567))

(declare-fun m!110569 () Bool)

(assert (=> b!100139 m!110569))

(assert (=> b!99497 d!27031))

(declare-fun d!27033 () Bool)

(declare-fun e!65220 () Bool)

(assert (=> d!27033 e!65220))

(declare-fun res!50264 () Bool)

(assert (=> d!27033 (=> (not res!50264) (not e!65220))))

(declare-fun lt!50596 () ListLongMap!1539)

(assert (=> d!27033 (= res!50264 (contains!804 lt!50596 (_1!1184 (tuple2!2347 lt!50164 lt!50162))))))

(declare-fun lt!50597 () List!1583)

(assert (=> d!27033 (= lt!50596 (ListLongMap!1540 lt!50597))))

(declare-fun lt!50594 () Unit!2999)

(declare-fun lt!50595 () Unit!2999)

(assert (=> d!27033 (= lt!50594 lt!50595)))

(assert (=> d!27033 (= (getValueByKey!151 lt!50597 (_1!1184 (tuple2!2347 lt!50164 lt!50162))) (Some!156 (_2!1184 (tuple2!2347 lt!50164 lt!50162))))))

(assert (=> d!27033 (= lt!50595 (lemmaContainsTupThenGetReturnValue!67 lt!50597 (_1!1184 (tuple2!2347 lt!50164 lt!50162)) (_2!1184 (tuple2!2347 lt!50164 lt!50162))))))

(assert (=> d!27033 (= lt!50597 (insertStrictlySorted!70 (toList!785 lt!50161) (_1!1184 (tuple2!2347 lt!50164 lt!50162)) (_2!1184 (tuple2!2347 lt!50164 lt!50162))))))

(assert (=> d!27033 (= (+!136 lt!50161 (tuple2!2347 lt!50164 lt!50162)) lt!50596)))

(declare-fun b!100140 () Bool)

(declare-fun res!50263 () Bool)

(assert (=> b!100140 (=> (not res!50263) (not e!65220))))

(assert (=> b!100140 (= res!50263 (= (getValueByKey!151 (toList!785 lt!50596) (_1!1184 (tuple2!2347 lt!50164 lt!50162))) (Some!156 (_2!1184 (tuple2!2347 lt!50164 lt!50162)))))))

(declare-fun b!100141 () Bool)

(assert (=> b!100141 (= e!65220 (contains!806 (toList!785 lt!50596) (tuple2!2347 lt!50164 lt!50162)))))

(assert (= (and d!27033 res!50264) b!100140))

(assert (= (and b!100140 res!50263) b!100141))

(declare-fun m!110571 () Bool)

(assert (=> d!27033 m!110571))

(declare-fun m!110573 () Bool)

(assert (=> d!27033 m!110573))

(declare-fun m!110575 () Bool)

(assert (=> d!27033 m!110575))

(declare-fun m!110577 () Bool)

(assert (=> d!27033 m!110577))

(declare-fun m!110579 () Bool)

(assert (=> b!100140 m!110579))

(declare-fun m!110581 () Bool)

(assert (=> b!100141 m!110581))

(assert (=> b!99497 d!27033))

(declare-fun d!27035 () Bool)

(declare-fun lt!50598 () Bool)

(assert (=> d!27035 (= lt!50598 (select (content!104 (toList!785 lt!50209)) (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65222 () Bool)

(assert (=> d!27035 (= lt!50598 e!65222)))

(declare-fun res!50265 () Bool)

(assert (=> d!27035 (=> (not res!50265) (not e!65222))))

(assert (=> d!27035 (= res!50265 ((_ is Cons!1579) (toList!785 lt!50209)))))

(assert (=> d!27035 (= (contains!806 (toList!785 lt!50209) (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50598)))

(declare-fun b!100142 () Bool)

(declare-fun e!65221 () Bool)

(assert (=> b!100142 (= e!65222 e!65221)))

(declare-fun res!50266 () Bool)

(assert (=> b!100142 (=> res!50266 e!65221)))

(assert (=> b!100142 (= res!50266 (= (h!2174 (toList!785 lt!50209)) (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100143 () Bool)

(assert (=> b!100143 (= e!65221 (contains!806 (t!5557 (toList!785 lt!50209)) (tuple2!2347 lt!49963 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!27035 res!50265) b!100142))

(assert (= (and b!100142 (not res!50266)) b!100143))

(declare-fun m!110583 () Bool)

(assert (=> d!27035 m!110583))

(declare-fun m!110585 () Bool)

(assert (=> d!27035 m!110585))

(declare-fun m!110587 () Bool)

(assert (=> b!100143 m!110587))

(assert (=> b!99609 d!27035))

(declare-fun d!27037 () Bool)

(declare-fun e!65223 () Bool)

(assert (=> d!27037 e!65223))

(declare-fun res!50268 () Bool)

(assert (=> d!27037 (=> (not res!50268) (not e!65223))))

(declare-fun lt!50601 () ListLongMap!1539)

(assert (=> d!27037 (= res!50268 (contains!804 lt!50601 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun lt!50602 () List!1583)

(assert (=> d!27037 (= lt!50601 (ListLongMap!1540 lt!50602))))

(declare-fun lt!50599 () Unit!2999)

(declare-fun lt!50600 () Unit!2999)

(assert (=> d!27037 (= lt!50599 lt!50600)))

(assert (=> d!27037 (= (getValueByKey!151 lt!50602 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27037 (= lt!50600 (lemmaContainsTupThenGetReturnValue!67 lt!50602 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27037 (= lt!50602 (insertStrictlySorted!70 (toList!785 call!10224) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27037 (= (+!136 call!10224 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) lt!50601)))

(declare-fun b!100144 () Bool)

(declare-fun res!50267 () Bool)

(assert (=> b!100144 (=> (not res!50267) (not e!65223))))

(assert (=> b!100144 (= res!50267 (= (getValueByKey!151 (toList!785 lt!50601) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun b!100145 () Bool)

(assert (=> b!100145 (= e!65223 (contains!806 (toList!785 lt!50601) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!27037 res!50268) b!100144))

(assert (= (and b!100144 res!50267) b!100145))

(declare-fun m!110589 () Bool)

(assert (=> d!27037 m!110589))

(declare-fun m!110591 () Bool)

(assert (=> d!27037 m!110591))

(declare-fun m!110593 () Bool)

(assert (=> d!27037 m!110593))

(declare-fun m!110595 () Bool)

(assert (=> d!27037 m!110595))

(declare-fun m!110597 () Bool)

(assert (=> b!100144 m!110597))

(declare-fun m!110599 () Bool)

(assert (=> b!100145 m!110599))

(assert (=> b!99456 d!27037))

(assert (=> b!99417 d!26841))

(declare-fun b!100147 () Bool)

(declare-fun e!65224 () Option!157)

(declare-fun e!65225 () Option!157)

(assert (=> b!100147 (= e!65224 e!65225)))

(declare-fun c!17157 () Bool)

(assert (=> b!100147 (= c!17157 (and ((_ is Cons!1579) (toList!785 lt!50222)) (not (= (_1!1184 (h!2174 (toList!785 lt!50222))) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100149 () Bool)

(assert (=> b!100149 (= e!65225 None!155)))

(declare-fun b!100148 () Bool)

(assert (=> b!100148 (= e!65225 (getValueByKey!151 (t!5557 (toList!785 lt!50222)) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun c!17156 () Bool)

(declare-fun d!27039 () Bool)

(assert (=> d!27039 (= c!17156 (and ((_ is Cons!1579) (toList!785 lt!50222)) (= (_1!1184 (h!2174 (toList!785 lt!50222))) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27039 (= (getValueByKey!151 (toList!785 lt!50222) (_1!1184 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65224)))

(declare-fun b!100146 () Bool)

(assert (=> b!100146 (= e!65224 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50222)))))))

(assert (= (and d!27039 c!17156) b!100146))

(assert (= (and d!27039 (not c!17156)) b!100147))

(assert (= (and b!100147 c!17157) b!100148))

(assert (= (and b!100147 (not c!17157)) b!100149))

(declare-fun m!110601 () Bool)

(assert (=> b!100148 m!110601))

(assert (=> b!99615 d!27039))

(declare-fun b!100150 () Bool)

(declare-fun e!65228 () Bool)

(assert (=> b!100150 (= e!65228 (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun b!100152 () Bool)

(declare-fun e!65229 () Bool)

(declare-fun call!10306 () Bool)

(assert (=> b!100152 (= e!65229 call!10306)))

(declare-fun b!100153 () Bool)

(assert (=> b!100153 (= e!65229 call!10306)))

(declare-fun d!27041 () Bool)

(declare-fun res!50269 () Bool)

(declare-fun e!65227 () Bool)

(assert (=> d!27041 (=> res!50269 e!65227)))

(assert (=> d!27041 (= res!50269 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (=> d!27041 (= (arrayNoDuplicates!0 (_keys!4196 (_2!1185 lt!50053)) #b00000000000000000000000000000000 Nil!1581) e!65227)))

(declare-fun b!100151 () Bool)

(declare-fun e!65226 () Bool)

(assert (=> b!100151 (= e!65227 e!65226)))

(declare-fun res!50270 () Bool)

(assert (=> b!100151 (=> (not res!50270) (not e!65226))))

(assert (=> b!100151 (= res!50270 (not e!65228))))

(declare-fun res!50271 () Bool)

(assert (=> b!100151 (=> (not res!50271) (not e!65228))))

(assert (=> b!100151 (= res!50271 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun b!100154 () Bool)

(assert (=> b!100154 (= e!65226 e!65229)))

(declare-fun c!17158 () Bool)

(assert (=> b!100154 (= c!17158 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun bm!10303 () Bool)

(assert (=> bm!10303 (= call!10306 (arrayNoDuplicates!0 (_keys!4196 (_2!1185 lt!50053)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17158 (Cons!1580 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000) Nil!1581) Nil!1581)))))

(assert (= (and d!27041 (not res!50269)) b!100151))

(assert (= (and b!100151 res!50271) b!100150))

(assert (= (and b!100151 res!50270) b!100154))

(assert (= (and b!100154 c!17158) b!100152))

(assert (= (and b!100154 (not c!17158)) b!100153))

(assert (= (or b!100152 b!100153) bm!10303))

(assert (=> b!100150 m!110273))

(assert (=> b!100150 m!110273))

(declare-fun m!110603 () Bool)

(assert (=> b!100150 m!110603))

(assert (=> b!100151 m!110273))

(assert (=> b!100151 m!110273))

(assert (=> b!100151 m!110275))

(assert (=> b!100154 m!110273))

(assert (=> b!100154 m!110273))

(assert (=> b!100154 m!110275))

(assert (=> bm!10303 m!110273))

(declare-fun m!110605 () Bool)

(assert (=> bm!10303 m!110605))

(assert (=> b!99743 d!27041))

(declare-fun d!27043 () Bool)

(declare-fun e!65230 () Bool)

(assert (=> d!27043 e!65230))

(declare-fun res!50272 () Bool)

(assert (=> d!27043 (=> res!50272 e!65230)))

(declare-fun lt!50606 () Bool)

(assert (=> d!27043 (= res!50272 (not lt!50606))))

(declare-fun lt!50604 () Bool)

(assert (=> d!27043 (= lt!50606 lt!50604)))

(declare-fun lt!50603 () Unit!2999)

(declare-fun e!65231 () Unit!2999)

(assert (=> d!27043 (= lt!50603 e!65231)))

(declare-fun c!17159 () Bool)

(assert (=> d!27043 (= c!17159 lt!50604)))

(assert (=> d!27043 (= lt!50604 (containsKey!155 (toList!785 lt!50129) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27043 (= (contains!804 lt!50129 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50606)))

(declare-fun b!100155 () Bool)

(declare-fun lt!50605 () Unit!2999)

(assert (=> b!100155 (= e!65231 lt!50605)))

(assert (=> b!100155 (= lt!50605 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50129) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100155 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100156 () Bool)

(declare-fun Unit!3035 () Unit!2999)

(assert (=> b!100156 (= e!65231 Unit!3035)))

(declare-fun b!100157 () Bool)

(assert (=> b!100157 (= e!65230 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27043 c!17159) b!100155))

(assert (= (and d!27043 (not c!17159)) b!100156))

(assert (= (and d!27043 (not res!50272)) b!100157))

(assert (=> d!27043 m!109397))

(declare-fun m!110607 () Bool)

(assert (=> d!27043 m!110607))

(assert (=> b!100155 m!109397))

(declare-fun m!110609 () Bool)

(assert (=> b!100155 m!110609))

(assert (=> b!100155 m!109397))

(declare-fun m!110611 () Bool)

(assert (=> b!100155 m!110611))

(assert (=> b!100155 m!110611))

(declare-fun m!110613 () Bool)

(assert (=> b!100155 m!110613))

(assert (=> b!100157 m!109397))

(assert (=> b!100157 m!110611))

(assert (=> b!100157 m!110611))

(assert (=> b!100157 m!110613))

(assert (=> b!99459 d!27043))

(declare-fun d!27045 () Bool)

(assert (=> d!27045 (= (apply!93 lt!50097 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50097) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4144 () Bool)

(assert (= bs!4144 d!27045))

(assert (=> bs!4144 m!110237))

(assert (=> bs!4144 m!110237))

(declare-fun m!110615 () Bool)

(assert (=> bs!4144 m!110615))

(assert (=> b!99419 d!27045))

(assert (=> d!26741 d!26761))

(declare-fun c!17164 () Bool)

(declare-fun call!10311 () Bool)

(declare-fun bm!10308 () Bool)

(declare-fun lt!50609 () SeekEntryResult!254)

(assert (=> bm!10308 (= call!10311 (inRange!0 (ite c!17164 (index!3160 lt!50609) (index!3163 lt!50609)) (mask!6609 newMap!16)))))

(declare-fun b!100174 () Bool)

(declare-fun e!65240 () Bool)

(assert (=> b!100174 (= e!65240 ((_ is Undefined!254) lt!50609))))

(declare-fun b!100175 () Bool)

(declare-fun e!65243 () Bool)

(declare-fun call!10312 () Bool)

(assert (=> b!100175 (= e!65243 (not call!10312))))

(declare-fun bm!10309 () Bool)

(assert (=> bm!10309 (= call!10312 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!27047 () Bool)

(declare-fun e!65241 () Bool)

(assert (=> d!27047 e!65241))

(assert (=> d!27047 (= c!17164 ((_ is MissingZero!254) lt!50609))))

(assert (=> d!27047 (= lt!50609 (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!27047 true))

(declare-fun _$34!875 () Unit!2999)

(assert (=> d!27047 (= (choose!603 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) _$34!875)))

(declare-fun b!100176 () Bool)

(declare-fun res!50282 () Bool)

(assert (=> b!100176 (= res!50282 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50609)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100176 (=> (not res!50282) (not e!65243))))

(declare-fun b!100177 () Bool)

(declare-fun res!50283 () Bool)

(declare-fun e!65242 () Bool)

(assert (=> b!100177 (=> (not res!50283) (not e!65242))))

(assert (=> b!100177 (= res!50283 (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50609)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100178 () Bool)

(assert (=> b!100178 (= e!65242 (not call!10312))))

(declare-fun b!100179 () Bool)

(assert (=> b!100179 (= e!65241 e!65240)))

(declare-fun c!17165 () Bool)

(assert (=> b!100179 (= c!17165 ((_ is MissingVacant!254) lt!50609))))

(declare-fun b!100180 () Bool)

(declare-fun res!50284 () Bool)

(assert (=> b!100180 (=> (not res!50284) (not e!65242))))

(assert (=> b!100180 (= res!50284 call!10311)))

(assert (=> b!100180 (= e!65240 e!65242)))

(declare-fun b!100181 () Bool)

(assert (=> b!100181 (= e!65241 e!65243)))

(declare-fun res!50281 () Bool)

(assert (=> b!100181 (= res!50281 call!10311)))

(assert (=> b!100181 (=> (not res!50281) (not e!65243))))

(assert (= (and d!27047 c!17164) b!100181))

(assert (= (and d!27047 (not c!17164)) b!100179))

(assert (= (and b!100181 res!50281) b!100176))

(assert (= (and b!100176 res!50282) b!100175))

(assert (= (and b!100179 c!17165) b!100180))

(assert (= (and b!100179 (not c!17165)) b!100174))

(assert (= (and b!100180 res!50284) b!100177))

(assert (= (and b!100177 res!50283) b!100178))

(assert (= (or b!100181 b!100180) bm!10308))

(assert (= (or b!100175 b!100178) bm!10309))

(assert (=> bm!10309 m!109133))

(assert (=> bm!10309 m!109311))

(declare-fun m!110617 () Bool)

(assert (=> b!100176 m!110617))

(assert (=> d!27047 m!109133))

(assert (=> d!27047 m!109315))

(declare-fun m!110619 () Bool)

(assert (=> bm!10308 m!110619))

(declare-fun m!110621 () Bool)

(assert (=> b!100177 m!110621))

(assert (=> d!26741 d!27047))

(assert (=> d!26741 d!26871))

(assert (=> d!26821 d!26871))

(declare-fun d!27049 () Bool)

(assert (=> d!27049 (= (size!2276 newMap!16) (bvadd (_size!478 newMap!16) (bvsdiv (bvadd (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!99559 d!27049))

(declare-fun d!27051 () Bool)

(declare-fun lt!50610 () Bool)

(assert (=> d!27051 (= lt!50610 (select (content!103 (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!65245 () Bool)

(assert (=> d!27051 (= lt!50610 e!65245)))

(declare-fun res!50286 () Bool)

(assert (=> d!27051 (=> (not res!50286) (not e!65245))))

(assert (=> d!27051 (= res!50286 ((_ is Cons!1580) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)))))

(assert (=> d!27051 (= (contains!805 (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!50610)))

(declare-fun b!100182 () Bool)

(declare-fun e!65244 () Bool)

(assert (=> b!100182 (= e!65245 e!65244)))

(declare-fun res!50285 () Bool)

(assert (=> b!100182 (=> res!50285 e!65244)))

(assert (=> b!100182 (= res!50285 (= (h!2175 (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!100183 () Bool)

(assert (=> b!100183 (= e!65244 (contains!805 (t!5558 (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!27051 res!50286) b!100182))

(assert (= (and b!100182 (not res!50285)) b!100183))

(declare-fun m!110623 () Bool)

(assert (=> d!27051 m!110623))

(assert (=> d!27051 m!109613))

(declare-fun m!110625 () Bool)

(assert (=> d!27051 m!110625))

(assert (=> b!100183 m!109613))

(declare-fun m!110627 () Bool)

(assert (=> b!100183 m!110627))

(assert (=> b!99576 d!27051))

(declare-fun d!27053 () Bool)

(declare-fun e!65246 () Bool)

(assert (=> d!27053 e!65246))

(declare-fun res!50287 () Bool)

(assert (=> d!27053 (=> res!50287 e!65246)))

(declare-fun lt!50614 () Bool)

(assert (=> d!27053 (= res!50287 (not lt!50614))))

(declare-fun lt!50612 () Bool)

(assert (=> d!27053 (= lt!50614 lt!50612)))

(declare-fun lt!50611 () Unit!2999)

(declare-fun e!65247 () Unit!2999)

(assert (=> d!27053 (= lt!50611 e!65247)))

(declare-fun c!17166 () Bool)

(assert (=> d!27053 (= c!17166 lt!50612)))

(assert (=> d!27053 (= lt!50612 (containsKey!155 (toList!785 lt!50097) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27053 (= (contains!804 lt!50097 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50614)))

(declare-fun b!100184 () Bool)

(declare-fun lt!50613 () Unit!2999)

(assert (=> b!100184 (= e!65247 lt!50613)))

(assert (=> b!100184 (= lt!50613 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50097) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100184 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100185 () Bool)

(declare-fun Unit!3036 () Unit!2999)

(assert (=> b!100185 (= e!65247 Unit!3036)))

(declare-fun b!100186 () Bool)

(assert (=> b!100186 (= e!65246 (isDefined!104 (getValueByKey!151 (toList!785 lt!50097) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27053 c!17166) b!100184))

(assert (= (and d!27053 (not c!17166)) b!100185))

(assert (= (and d!27053 (not res!50287)) b!100186))

(assert (=> d!27053 m!109397))

(declare-fun m!110629 () Bool)

(assert (=> d!27053 m!110629))

(assert (=> b!100184 m!109397))

(declare-fun m!110631 () Bool)

(assert (=> b!100184 m!110631))

(assert (=> b!100184 m!109397))

(assert (=> b!100184 m!109945))

(assert (=> b!100184 m!109945))

(declare-fun m!110633 () Bool)

(assert (=> b!100184 m!110633))

(assert (=> b!100186 m!109397))

(assert (=> b!100186 m!109945))

(assert (=> b!100186 m!109945))

(assert (=> b!100186 m!110633))

(assert (=> b!99429 d!27053))

(declare-fun b!100199 () Bool)

(declare-fun e!65256 () SeekEntryResult!254)

(assert (=> b!100199 (= e!65256 Undefined!254)))

(declare-fun b!100200 () Bool)

(declare-fun c!17174 () Bool)

(declare-fun lt!50620 () (_ BitVec 64))

(assert (=> b!100200 (= c!17174 (= lt!50620 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65255 () SeekEntryResult!254)

(declare-fun e!65254 () SeekEntryResult!254)

(assert (=> b!100200 (= e!65255 e!65254)))

(declare-fun b!100201 () Bool)

(assert (=> b!100201 (= e!65255 (Found!254 (index!3162 lt!50194)))))

(declare-fun b!100202 () Bool)

(assert (=> b!100202 (= e!65254 (seekKeyOrZeroReturnVacant!0 (bvadd (x!13104 lt!50194) #b00000000000000000000000000000001) (nextIndex!0 (index!3162 lt!50194) (x!13104 lt!50194) (mask!6609 newMap!16)) (index!3162 lt!50194) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100203 () Bool)

(assert (=> b!100203 (= e!65254 (MissingVacant!254 (index!3162 lt!50194)))))

(declare-fun d!27055 () Bool)

(declare-fun lt!50619 () SeekEntryResult!254)

(assert (=> d!27055 (and (or ((_ is Undefined!254) lt!50619) (not ((_ is Found!254) lt!50619)) (and (bvsge (index!3161 lt!50619) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50619) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50619) ((_ is Found!254) lt!50619) (not ((_ is MissingVacant!254) lt!50619)) (not (= (index!3163 lt!50619) (index!3162 lt!50194))) (and (bvsge (index!3163 lt!50619) #b00000000000000000000000000000000) (bvslt (index!3163 lt!50619) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50619) (ite ((_ is Found!254) lt!50619) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50619)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) (and ((_ is MissingVacant!254) lt!50619) (= (index!3163 lt!50619) (index!3162 lt!50194)) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50619)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!27055 (= lt!50619 e!65256)))

(declare-fun c!17175 () Bool)

(assert (=> d!27055 (= c!17175 (bvsge (x!13104 lt!50194) #b01111111111111111111111111111110))))

(assert (=> d!27055 (= lt!50620 (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50194)))))

(assert (=> d!27055 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27055 (= (seekKeyOrZeroReturnVacant!0 (x!13104 lt!50194) (index!3162 lt!50194) (index!3162 lt!50194) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50619)))

(declare-fun b!100204 () Bool)

(assert (=> b!100204 (= e!65256 e!65255)))

(declare-fun c!17173 () Bool)

(assert (=> b!100204 (= c!17173 (= lt!50620 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!27055 c!17175) b!100199))

(assert (= (and d!27055 (not c!17175)) b!100204))

(assert (= (and b!100204 c!17173) b!100201))

(assert (= (and b!100204 (not c!17173)) b!100200))

(assert (= (and b!100200 c!17174) b!100203))

(assert (= (and b!100200 (not c!17174)) b!100202))

(declare-fun m!110635 () Bool)

(assert (=> b!100202 m!110635))

(assert (=> b!100202 m!110635))

(assert (=> b!100202 m!109133))

(declare-fun m!110637 () Bool)

(assert (=> b!100202 m!110637))

(declare-fun m!110639 () Bool)

(assert (=> d!27055 m!110639))

(declare-fun m!110641 () Bool)

(assert (=> d!27055 m!110641))

(assert (=> d!27055 m!109623))

(assert (=> d!27055 m!109413))

(assert (=> b!99593 d!27055))

(declare-fun d!27057 () Bool)

(declare-fun e!65257 () Bool)

(assert (=> d!27057 e!65257))

(declare-fun res!50288 () Bool)

(assert (=> d!27057 (=> res!50288 e!65257)))

(declare-fun lt!50624 () Bool)

(assert (=> d!27057 (= res!50288 (not lt!50624))))

(declare-fun lt!50622 () Bool)

(assert (=> d!27057 (= lt!50624 lt!50622)))

(declare-fun lt!50621 () Unit!2999)

(declare-fun e!65258 () Unit!2999)

(assert (=> d!27057 (= lt!50621 e!65258)))

(declare-fun c!17176 () Bool)

(assert (=> d!27057 (= c!17176 lt!50622)))

(assert (=> d!27057 (= lt!50622 (containsKey!155 (toList!785 lt!50163) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27057 (= (contains!804 lt!50163 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50624)))

(declare-fun b!100205 () Bool)

(declare-fun lt!50623 () Unit!2999)

(assert (=> b!100205 (= e!65258 lt!50623)))

(assert (=> b!100205 (= lt!50623 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50163) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100205 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100206 () Bool)

(declare-fun Unit!3037 () Unit!2999)

(assert (=> b!100206 (= e!65258 Unit!3037)))

(declare-fun b!100207 () Bool)

(assert (=> b!100207 (= e!65257 (isDefined!104 (getValueByKey!151 (toList!785 lt!50163) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27057 c!17176) b!100205))

(assert (= (and d!27057 (not c!17176)) b!100206))

(assert (= (and d!27057 (not res!50288)) b!100207))

(declare-fun m!110643 () Bool)

(assert (=> d!27057 m!110643))

(declare-fun m!110645 () Bool)

(assert (=> b!100205 m!110645))

(declare-fun m!110647 () Bool)

(assert (=> b!100205 m!110647))

(assert (=> b!100205 m!110647))

(declare-fun m!110649 () Bool)

(assert (=> b!100205 m!110649))

(assert (=> b!100207 m!110647))

(assert (=> b!100207 m!110647))

(assert (=> b!100207 m!110649))

(assert (=> d!26733 d!27057))

(assert (=> d!26733 d!26675))

(declare-fun d!27059 () Bool)

(assert (not d!27059))

(assert (=> b!99435 d!27059))

(declare-fun d!27061 () Bool)

(declare-fun res!50289 () Bool)

(declare-fun e!65259 () Bool)

(assert (=> d!27061 (=> res!50289 e!65259)))

(assert (=> d!27061 (= res!50289 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27061 (= (containsKey!155 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000) e!65259)))

(declare-fun b!100208 () Bool)

(declare-fun e!65260 () Bool)

(assert (=> b!100208 (= e!65259 e!65260)))

(declare-fun res!50290 () Bool)

(assert (=> b!100208 (=> (not res!50290) (not e!65260))))

(assert (=> b!100208 (= res!50290 (and (or (not ((_ is Cons!1579) (toList!785 lt!49957))) (bvsle (_1!1184 (h!2174 (toList!785 lt!49957))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1579) (toList!785 lt!49957)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49957))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100209 () Bool)

(assert (=> b!100209 (= e!65260 (containsKey!155 (t!5557 (toList!785 lt!49957)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27061 (not res!50289)) b!100208))

(assert (= (and b!100208 res!50290) b!100209))

(declare-fun m!110651 () Bool)

(assert (=> b!100209 m!110651))

(assert (=> d!26731 d!27061))

(declare-fun d!27063 () Bool)

(declare-fun res!50291 () Bool)

(declare-fun e!65261 () Bool)

(assert (=> d!27063 (=> res!50291 e!65261)))

(assert (=> d!27063 (= res!50291 (and ((_ is Cons!1579) (toList!785 call!10189)) (= (_1!1184 (h!2174 (toList!785 call!10189))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!27063 (= (containsKey!155 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65261)))

(declare-fun b!100210 () Bool)

(declare-fun e!65262 () Bool)

(assert (=> b!100210 (= e!65261 e!65262)))

(declare-fun res!50292 () Bool)

(assert (=> b!100210 (=> (not res!50292) (not e!65262))))

(assert (=> b!100210 (= res!50292 (and (or (not ((_ is Cons!1579) (toList!785 call!10189))) (bvsle (_1!1184 (h!2174 (toList!785 call!10189))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) ((_ is Cons!1579) (toList!785 call!10189)) (bvslt (_1!1184 (h!2174 (toList!785 call!10189))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(declare-fun b!100211 () Bool)

(assert (=> b!100211 (= e!65262 (containsKey!155 (t!5557 (toList!785 call!10189)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!27063 (not res!50291)) b!100210))

(assert (= (and b!100210 res!50292) b!100211))

(assert (=> b!100211 m!109133))

(declare-fun m!110653 () Bool)

(assert (=> b!100211 m!110653))

(assert (=> d!26729 d!27063))

(declare-fun b!100213 () Bool)

(declare-fun e!65263 () Option!157)

(declare-fun e!65264 () Option!157)

(assert (=> b!100213 (= e!65263 e!65264)))

(declare-fun c!17178 () Bool)

(assert (=> b!100213 (= c!17178 (and ((_ is Cons!1579) (toList!785 lt!50214)) (not (= (_1!1184 (h!2174 (toList!785 lt!50214))) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100215 () Bool)

(assert (=> b!100215 (= e!65264 None!155)))

(declare-fun b!100214 () Bool)

(assert (=> b!100214 (= e!65264 (getValueByKey!151 (t!5557 (toList!785 lt!50214)) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!27065 () Bool)

(declare-fun c!17177 () Bool)

(assert (=> d!27065 (= c!17177 (and ((_ is Cons!1579) (toList!785 lt!50214)) (= (_1!1184 (h!2174 (toList!785 lt!50214))) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27065 (= (getValueByKey!151 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65263)))

(declare-fun b!100212 () Bool)

(assert (=> b!100212 (= e!65263 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50214)))))))

(assert (= (and d!27065 c!17177) b!100212))

(assert (= (and d!27065 (not c!17177)) b!100213))

(assert (= (and b!100213 c!17178) b!100214))

(assert (= (and b!100213 (not c!17178)) b!100215))

(declare-fun m!110655 () Bool)

(assert (=> b!100214 m!110655))

(assert (=> b!99611 d!27065))

(declare-fun d!27067 () Bool)

(declare-fun e!65265 () Bool)

(assert (=> d!27067 e!65265))

(declare-fun res!50293 () Bool)

(assert (=> d!27067 (=> res!50293 e!65265)))

(declare-fun lt!50628 () Bool)

(assert (=> d!27067 (= res!50293 (not lt!50628))))

(declare-fun lt!50626 () Bool)

(assert (=> d!27067 (= lt!50628 lt!50626)))

(declare-fun lt!50625 () Unit!2999)

(declare-fun e!65266 () Unit!2999)

(assert (=> d!27067 (= lt!50625 e!65266)))

(declare-fun c!17179 () Bool)

(assert (=> d!27067 (= c!17179 lt!50626)))

(assert (=> d!27067 (= lt!50626 (containsKey!155 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))

(assert (=> d!27067 (= (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))) lt!50628)))

(declare-fun b!100216 () Bool)

(declare-fun lt!50627 () Unit!2999)

(assert (=> b!100216 (= e!65266 lt!50627)))

(assert (=> b!100216 (= lt!50627 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))

(assert (=> b!100216 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049))))))

(declare-fun b!100217 () Bool)

(declare-fun Unit!3038 () Unit!2999)

(assert (=> b!100217 (= e!65266 Unit!3038)))

(declare-fun b!100218 () Bool)

(assert (=> b!100218 (= e!65265 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50049)))))))

(assert (= (and d!27067 c!17179) b!100216))

(assert (= (and d!27067 (not c!17179)) b!100217))

(assert (= (and d!27067 (not res!50293)) b!100218))

(assert (=> d!27067 m!109329))

(declare-fun m!110657 () Bool)

(assert (=> d!27067 m!110657))

(assert (=> b!100216 m!109329))

(declare-fun m!110659 () Bool)

(assert (=> b!100216 m!110659))

(assert (=> b!100216 m!109329))

(declare-fun m!110661 () Bool)

(assert (=> b!100216 m!110661))

(assert (=> b!100216 m!110661))

(declare-fun m!110663 () Bool)

(assert (=> b!100216 m!110663))

(assert (=> b!100218 m!109329))

(assert (=> b!100218 m!110661))

(assert (=> b!100218 m!110661))

(assert (=> b!100218 m!110663))

(assert (=> b!99621 d!27067))

(declare-fun b!100219 () Bool)

(declare-fun e!65272 () ListLongMap!1539)

(declare-fun call!10318 () ListLongMap!1539)

(assert (=> b!100219 (= e!65272 call!10318)))

(declare-fun bm!10310 () Bool)

(declare-fun call!10314 () Bool)

(declare-fun lt!50641 () ListLongMap!1539)

(assert (=> bm!10310 (= call!10314 (contains!804 lt!50641 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100220 () Bool)

(declare-fun e!65268 () Bool)

(declare-fun e!65274 () Bool)

(assert (=> b!100220 (= e!65268 e!65274)))

(declare-fun res!50295 () Bool)

(assert (=> b!100220 (= res!50295 call!10314)))

(assert (=> b!100220 (=> (not res!50295) (not e!65274))))

(declare-fun b!100221 () Bool)

(assert (=> b!100221 (= e!65268 (not call!10314))))

(declare-fun b!100223 () Bool)

(declare-fun e!65276 () Unit!2999)

(declare-fun Unit!3039 () Unit!2999)

(assert (=> b!100223 (= e!65276 Unit!3039)))

(declare-fun b!100224 () Bool)

(declare-fun e!65267 () ListLongMap!1539)

(assert (=> b!100224 (= e!65267 call!10318)))

(declare-fun b!100225 () Bool)

(declare-fun lt!50629 () Unit!2999)

(assert (=> b!100225 (= e!65276 lt!50629)))

(declare-fun lt!50649 () ListLongMap!1539)

(assert (=> b!100225 (= lt!50649 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50631 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50631 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50630 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50630 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50635 () Unit!2999)

(assert (=> b!100225 (= lt!50635 (addStillContains!69 lt!50649 lt!50631 (zeroValue!2383 newMap!16) lt!50630))))

(assert (=> b!100225 (contains!804 (+!136 lt!50649 (tuple2!2347 lt!50631 (zeroValue!2383 newMap!16))) lt!50630)))

(declare-fun lt!50638 () Unit!2999)

(assert (=> b!100225 (= lt!50638 lt!50635)))

(declare-fun lt!50639 () ListLongMap!1539)

(assert (=> b!100225 (= lt!50639 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50644 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50644 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50646 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50646 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50640 () Unit!2999)

(assert (=> b!100225 (= lt!50640 (addApplyDifferent!69 lt!50639 lt!50644 (minValue!2383 newMap!16) lt!50646))))

(assert (=> b!100225 (= (apply!93 (+!136 lt!50639 (tuple2!2347 lt!50644 (minValue!2383 newMap!16))) lt!50646) (apply!93 lt!50639 lt!50646))))

(declare-fun lt!50634 () Unit!2999)

(assert (=> b!100225 (= lt!50634 lt!50640)))

(declare-fun lt!50636 () ListLongMap!1539)

(assert (=> b!100225 (= lt!50636 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50647 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50647 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50633 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50633 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50632 () Unit!2999)

(assert (=> b!100225 (= lt!50632 (addApplyDifferent!69 lt!50636 lt!50647 (zeroValue!2383 newMap!16) lt!50633))))

(assert (=> b!100225 (= (apply!93 (+!136 lt!50636 (tuple2!2347 lt!50647 (zeroValue!2383 newMap!16))) lt!50633) (apply!93 lt!50636 lt!50633))))

(declare-fun lt!50648 () Unit!2999)

(assert (=> b!100225 (= lt!50648 lt!50632)))

(declare-fun lt!50637 () ListLongMap!1539)

(assert (=> b!100225 (= lt!50637 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50645 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50645 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50650 () (_ BitVec 64))

(assert (=> b!100225 (= lt!50650 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100225 (= lt!50629 (addApplyDifferent!69 lt!50637 lt!50645 (minValue!2383 newMap!16) lt!50650))))

(assert (=> b!100225 (= (apply!93 (+!136 lt!50637 (tuple2!2347 lt!50645 (minValue!2383 newMap!16))) lt!50650) (apply!93 lt!50637 lt!50650))))

(declare-fun b!100226 () Bool)

(declare-fun res!50302 () Bool)

(declare-fun e!65279 () Bool)

(assert (=> b!100226 (=> (not res!50302) (not e!65279))))

(declare-fun e!65275 () Bool)

(assert (=> b!100226 (= res!50302 e!65275)))

(declare-fun res!50299 () Bool)

(assert (=> b!100226 (=> res!50299 e!65275)))

(declare-fun e!65270 () Bool)

(assert (=> b!100226 (= res!50299 (not e!65270))))

(declare-fun res!50294 () Bool)

(assert (=> b!100226 (=> (not res!50294) (not e!65270))))

(assert (=> b!100226 (= res!50294 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100227 () Bool)

(declare-fun e!65278 () Bool)

(assert (=> b!100227 (= e!65278 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100228 () Bool)

(declare-fun e!65269 () Bool)

(declare-fun call!10315 () Bool)

(assert (=> b!100228 (= e!65269 (not call!10315))))

(declare-fun bm!10311 () Bool)

(declare-fun call!10317 () ListLongMap!1539)

(declare-fun call!10316 () ListLongMap!1539)

(assert (=> bm!10311 (= call!10317 call!10316)))

(declare-fun c!17181 () Bool)

(declare-fun call!10313 () ListLongMap!1539)

(declare-fun c!17185 () Bool)

(declare-fun call!10319 () ListLongMap!1539)

(declare-fun bm!10312 () Bool)

(assert (=> bm!10312 (= call!10319 (+!136 (ite c!17181 call!10316 (ite c!17185 call!10317 call!10313)) (ite (or c!17181 c!17185) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100229 () Bool)

(declare-fun e!65277 () Bool)

(assert (=> b!100229 (= e!65277 (= (apply!93 lt!50641 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100230 () Bool)

(declare-fun c!17180 () Bool)

(assert (=> b!100230 (= c!17180 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100230 (= e!65267 e!65272)))

(declare-fun b!100231 () Bool)

(declare-fun e!65273 () ListLongMap!1539)

(assert (=> b!100231 (= e!65273 e!65267)))

(assert (=> b!100231 (= c!17185 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10313 () Bool)

(assert (=> bm!10313 (= call!10315 (contains!804 lt!50641 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100232 () Bool)

(assert (=> b!100232 (= e!65279 e!65269)))

(declare-fun c!17184 () Bool)

(assert (=> b!100232 (= c!17184 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100233 () Bool)

(assert (=> b!100233 (= e!65270 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100234 () Bool)

(declare-fun res!50297 () Bool)

(assert (=> b!100234 (=> (not res!50297) (not e!65279))))

(assert (=> b!100234 (= res!50297 e!65268)))

(declare-fun c!17183 () Bool)

(assert (=> b!100234 (= c!17183 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10314 () Bool)

(assert (=> bm!10314 (= call!10313 call!10317)))

(declare-fun b!100235 () Bool)

(assert (=> b!100235 (= e!65274 (= (apply!93 lt!50641 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10315 () Bool)

(assert (=> bm!10315 (= call!10316 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!27069 () Bool)

(assert (=> d!27069 e!65279))

(declare-fun res!50300 () Bool)

(assert (=> d!27069 (=> (not res!50300) (not e!65279))))

(assert (=> d!27069 (= res!50300 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50643 () ListLongMap!1539)

(assert (=> d!27069 (= lt!50641 lt!50643)))

(declare-fun lt!50642 () Unit!2999)

(assert (=> d!27069 (= lt!50642 e!65276)))

(declare-fun c!17182 () Bool)

(assert (=> d!27069 (= c!17182 e!65278)))

(declare-fun res!50296 () Bool)

(assert (=> d!27069 (=> (not res!50296) (not e!65278))))

(assert (=> d!27069 (= res!50296 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27069 (= lt!50643 e!65273)))

(assert (=> d!27069 (= c!17181 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27069 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27069 (= (getCurrentListMap!476 (_keys!4196 newMap!16) lt!50044 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50641)))

(declare-fun e!65271 () Bool)

(declare-fun b!100222 () Bool)

(assert (=> b!100222 (= e!65271 (= (apply!93 lt!50641 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 lt!50044) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 lt!50044)))))

(assert (=> b!100222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100236 () Bool)

(assert (=> b!100236 (= e!65273 (+!136 call!10319 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10316 () Bool)

(assert (=> bm!10316 (= call!10318 call!10319)))

(declare-fun b!100237 () Bool)

(assert (=> b!100237 (= e!65272 call!10313)))

(declare-fun b!100238 () Bool)

(assert (=> b!100238 (= e!65269 e!65277)))

(declare-fun res!50298 () Bool)

(assert (=> b!100238 (= res!50298 call!10315)))

(assert (=> b!100238 (=> (not res!50298) (not e!65277))))

(declare-fun b!100239 () Bool)

(assert (=> b!100239 (= e!65275 e!65271)))

(declare-fun res!50301 () Bool)

(assert (=> b!100239 (=> (not res!50301) (not e!65271))))

(assert (=> b!100239 (= res!50301 (contains!804 lt!50641 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100239 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!27069 c!17181) b!100236))

(assert (= (and d!27069 (not c!17181)) b!100231))

(assert (= (and b!100231 c!17185) b!100224))

(assert (= (and b!100231 (not c!17185)) b!100230))

(assert (= (and b!100230 c!17180) b!100219))

(assert (= (and b!100230 (not c!17180)) b!100237))

(assert (= (or b!100219 b!100237) bm!10314))

(assert (= (or b!100224 bm!10314) bm!10311))

(assert (= (or b!100224 b!100219) bm!10316))

(assert (= (or b!100236 bm!10311) bm!10315))

(assert (= (or b!100236 bm!10316) bm!10312))

(assert (= (and d!27069 res!50296) b!100227))

(assert (= (and d!27069 c!17182) b!100225))

(assert (= (and d!27069 (not c!17182)) b!100223))

(assert (= (and d!27069 res!50300) b!100226))

(assert (= (and b!100226 res!50294) b!100233))

(assert (= (and b!100226 (not res!50299)) b!100239))

(assert (= (and b!100239 res!50301) b!100222))

(assert (= (and b!100226 res!50302) b!100234))

(assert (= (and b!100234 c!17183) b!100220))

(assert (= (and b!100234 (not c!17183)) b!100221))

(assert (= (and b!100220 res!50295) b!100235))

(assert (= (or b!100220 b!100221) bm!10310))

(assert (= (and b!100234 res!50297) b!100232))

(assert (= (and b!100232 c!17184) b!100238))

(assert (= (and b!100232 (not c!17184)) b!100228))

(assert (= (and b!100238 res!50298) b!100229))

(assert (= (or b!100238 b!100228) bm!10313))

(declare-fun b_lambda!4479 () Bool)

(assert (=> (not b_lambda!4479) (not b!100222)))

(assert (=> b!100222 t!5564))

(declare-fun b_and!6179 () Bool)

(assert (= b_and!6175 (and (=> t!5564 result!3303) b_and!6179)))

(assert (=> b!100222 t!5566))

(declare-fun b_and!6181 () Bool)

(assert (= b_and!6177 (and (=> t!5566 result!3305) b_and!6181)))

(assert (=> b!100222 m!109397))

(declare-fun m!110665 () Bool)

(assert (=> b!100222 m!110665))

(assert (=> b!100222 m!109401))

(assert (=> b!100222 m!110665))

(assert (=> b!100222 m!109401))

(declare-fun m!110667 () Bool)

(assert (=> b!100222 m!110667))

(assert (=> b!100222 m!109397))

(declare-fun m!110669 () Bool)

(assert (=> b!100222 m!110669))

(declare-fun m!110671 () Bool)

(assert (=> b!100235 m!110671))

(declare-fun m!110673 () Bool)

(assert (=> bm!10315 m!110673))

(assert (=> b!100233 m!109397))

(assert (=> b!100233 m!109397))

(assert (=> b!100233 m!109411))

(assert (=> b!100227 m!109397))

(assert (=> b!100227 m!109397))

(assert (=> b!100227 m!109411))

(assert (=> d!27069 m!109413))

(declare-fun m!110675 () Bool)

(assert (=> bm!10312 m!110675))

(declare-fun m!110677 () Bool)

(assert (=> b!100229 m!110677))

(assert (=> b!100239 m!109397))

(assert (=> b!100239 m!109397))

(declare-fun m!110679 () Bool)

(assert (=> b!100239 m!110679))

(declare-fun m!110681 () Bool)

(assert (=> bm!10310 m!110681))

(assert (=> b!100225 m!109397))

(declare-fun m!110683 () Bool)

(assert (=> b!100225 m!110683))

(declare-fun m!110685 () Bool)

(assert (=> b!100225 m!110685))

(declare-fun m!110687 () Bool)

(assert (=> b!100225 m!110687))

(declare-fun m!110689 () Bool)

(assert (=> b!100225 m!110689))

(declare-fun m!110691 () Bool)

(assert (=> b!100225 m!110691))

(declare-fun m!110693 () Bool)

(assert (=> b!100225 m!110693))

(declare-fun m!110695 () Bool)

(assert (=> b!100225 m!110695))

(declare-fun m!110697 () Bool)

(assert (=> b!100225 m!110697))

(declare-fun m!110699 () Bool)

(assert (=> b!100225 m!110699))

(declare-fun m!110701 () Bool)

(assert (=> b!100225 m!110701))

(assert (=> b!100225 m!110699))

(declare-fun m!110703 () Bool)

(assert (=> b!100225 m!110703))

(declare-fun m!110705 () Bool)

(assert (=> b!100225 m!110705))

(assert (=> b!100225 m!110693))

(declare-fun m!110707 () Bool)

(assert (=> b!100225 m!110707))

(declare-fun m!110709 () Bool)

(assert (=> b!100225 m!110709))

(assert (=> b!100225 m!110673))

(assert (=> b!100225 m!110705))

(declare-fun m!110711 () Bool)

(assert (=> b!100225 m!110711))

(assert (=> b!100225 m!110683))

(declare-fun m!110713 () Bool)

(assert (=> b!100236 m!110713))

(declare-fun m!110715 () Bool)

(assert (=> bm!10313 m!110715))

(assert (=> b!99621 d!27069))

(assert (=> bm!10233 d!26827))

(declare-fun d!27071 () Bool)

(declare-fun res!50303 () Bool)

(declare-fun e!65280 () Bool)

(assert (=> d!27071 (=> res!50303 e!65280)))

(assert (=> d!27071 (= res!50303 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27071 (= (containsKey!155 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000) e!65280)))

(declare-fun b!100240 () Bool)

(declare-fun e!65281 () Bool)

(assert (=> b!100240 (= e!65280 e!65281)))

(declare-fun res!50304 () Bool)

(assert (=> b!100240 (=> (not res!50304) (not e!65281))))

(assert (=> b!100240 (= res!50304 (and (or (not ((_ is Cons!1579) (toList!785 lt!49957))) (bvsle (_1!1184 (h!2174 (toList!785 lt!49957))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1579) (toList!785 lt!49957)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49957))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100241 () Bool)

(assert (=> b!100241 (= e!65281 (containsKey!155 (t!5557 (toList!785 lt!49957)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27071 (not res!50303)) b!100240))

(assert (= (and b!100240 res!50304) b!100241))

(declare-fun m!110717 () Bool)

(assert (=> b!100241 m!110717))

(assert (=> d!26747 d!27071))

(assert (=> d!26749 d!26871))

(assert (=> b!99494 d!26739))

(assert (=> d!26789 d!26771))

(assert (=> d!26789 d!26791))

(declare-fun d!27073 () Bool)

(assert (=> d!27073 (contains!804 (+!136 lt!49965 (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49946)))

(assert (=> d!27073 true))

(declare-fun _$35!342 () Unit!2999)

(assert (=> d!27073 (= (choose!605 lt!49965 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49946) _$35!342)))

(declare-fun bs!4145 () Bool)

(assert (= bs!4145 d!27073))

(assert (=> bs!4145 m!109255))

(assert (=> bs!4145 m!109255))

(assert (=> bs!4145 m!109257))

(assert (=> d!26789 d!27073))

(declare-fun d!27075 () Bool)

(declare-fun e!65282 () Bool)

(assert (=> d!27075 e!65282))

(declare-fun res!50305 () Bool)

(assert (=> d!27075 (=> res!50305 e!65282)))

(declare-fun lt!50654 () Bool)

(assert (=> d!27075 (= res!50305 (not lt!50654))))

(declare-fun lt!50652 () Bool)

(assert (=> d!27075 (= lt!50654 lt!50652)))

(declare-fun lt!50651 () Unit!2999)

(declare-fun e!65283 () Unit!2999)

(assert (=> d!27075 (= lt!50651 e!65283)))

(declare-fun c!17186 () Bool)

(assert (=> d!27075 (= c!17186 lt!50652)))

(assert (=> d!27075 (= lt!50652 (containsKey!155 (toList!785 lt!49965) lt!49946))))

(assert (=> d!27075 (= (contains!804 lt!49965 lt!49946) lt!50654)))

(declare-fun b!100243 () Bool)

(declare-fun lt!50653 () Unit!2999)

(assert (=> b!100243 (= e!65283 lt!50653)))

(assert (=> b!100243 (= lt!50653 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49965) lt!49946))))

(assert (=> b!100243 (isDefined!104 (getValueByKey!151 (toList!785 lt!49965) lt!49946))))

(declare-fun b!100244 () Bool)

(declare-fun Unit!3040 () Unit!2999)

(assert (=> b!100244 (= e!65283 Unit!3040)))

(declare-fun b!100245 () Bool)

(assert (=> b!100245 (= e!65282 (isDefined!104 (getValueByKey!151 (toList!785 lt!49965) lt!49946)))))

(assert (= (and d!27075 c!17186) b!100243))

(assert (= (and d!27075 (not c!17186)) b!100244))

(assert (= (and d!27075 (not res!50305)) b!100245))

(declare-fun m!110719 () Bool)

(assert (=> d!27075 m!110719))

(declare-fun m!110721 () Bool)

(assert (=> b!100243 m!110721))

(declare-fun m!110723 () Bool)

(assert (=> b!100243 m!110723))

(assert (=> b!100243 m!110723))

(declare-fun m!110725 () Bool)

(assert (=> b!100243 m!110725))

(assert (=> b!100245 m!110723))

(assert (=> b!100245 m!110723))

(assert (=> b!100245 m!110725))

(assert (=> d!26789 d!27075))

(declare-fun d!27077 () Bool)

(assert (=> d!27077 (= (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99580 d!27077))

(declare-fun b!100247 () Bool)

(declare-fun e!65284 () Option!157)

(declare-fun e!65285 () Option!157)

(assert (=> b!100247 (= e!65284 e!65285)))

(declare-fun c!17188 () Bool)

(assert (=> b!100247 (= c!17188 (and ((_ is Cons!1579) (toList!785 lt!50256)) (not (= (_1!1184 (h!2174 (toList!785 lt!50256))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100249 () Bool)

(assert (=> b!100249 (= e!65285 None!155)))

(declare-fun b!100248 () Bool)

(assert (=> b!100248 (= e!65285 (getValueByKey!151 (t!5557 (toList!785 lt!50256)) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!27079 () Bool)

(declare-fun c!17187 () Bool)

(assert (=> d!27079 (= c!17187 (and ((_ is Cons!1579) (toList!785 lt!50256)) (= (_1!1184 (h!2174 (toList!785 lt!50256))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27079 (= (getValueByKey!151 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65284)))

(declare-fun b!100246 () Bool)

(assert (=> b!100246 (= e!65284 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50256)))))))

(assert (= (and d!27079 c!17187) b!100246))

(assert (= (and d!27079 (not c!17187)) b!100247))

(assert (= (and b!100247 c!17188) b!100248))

(assert (= (and b!100247 (not c!17188)) b!100249))

(declare-fun m!110727 () Bool)

(assert (=> b!100248 m!110727))

(assert (=> b!99640 d!27079))

(declare-fun d!27081 () Bool)

(assert (=> d!27081 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!50655 () Unit!2999)

(assert (=> d!27081 (= lt!50655 (choose!609 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!65286 () Bool)

(assert (=> d!27081 e!65286))

(declare-fun res!50306 () Bool)

(assert (=> d!27081 (=> (not res!50306) (not e!65286))))

(assert (=> d!27081 (= res!50306 (isStrictlySorted!305 (toList!785 lt!49957)))))

(assert (=> d!27081 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50655)))

(declare-fun b!100250 () Bool)

(assert (=> b!100250 (= e!65286 (containsKey!155 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!27081 res!50306) b!100250))

(assert (=> d!27081 m!109223))

(assert (=> d!27081 m!109467))

(assert (=> d!27081 m!109467))

(assert (=> d!27081 m!109469))

(assert (=> d!27081 m!109223))

(declare-fun m!110729 () Bool)

(assert (=> d!27081 m!110729))

(declare-fun m!110731 () Bool)

(assert (=> d!27081 m!110731))

(assert (=> b!100250 m!109223))

(assert (=> b!100250 m!109463))

(assert (=> b!99436 d!27081))

(assert (=> b!99436 d!26919))

(assert (=> b!99436 d!26921))

(declare-fun b!100252 () Bool)

(declare-fun e!65287 () Option!157)

(declare-fun e!65288 () Option!157)

(assert (=> b!100252 (= e!65287 e!65288)))

(declare-fun c!17190 () Bool)

(assert (=> b!100252 (= c!17190 (and ((_ is Cons!1579) (toList!785 lt!50079)) (not (= (_1!1184 (h!2174 (toList!785 lt!50079))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(declare-fun b!100254 () Bool)

(assert (=> b!100254 (= e!65288 None!155)))

(declare-fun b!100253 () Bool)

(assert (=> b!100253 (= e!65288 (getValueByKey!151 (t!5557 (toList!785 lt!50079)) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun d!27083 () Bool)

(declare-fun c!17189 () Bool)

(assert (=> d!27083 (= c!17189 (and ((_ is Cons!1579) (toList!785 lt!50079)) (= (_1!1184 (h!2174 (toList!785 lt!50079))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (=> d!27083 (= (getValueByKey!151 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) e!65287)))

(declare-fun b!100251 () Bool)

(assert (=> b!100251 (= e!65287 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50079)))))))

(assert (= (and d!27083 c!17189) b!100251))

(assert (= (and d!27083 (not c!17189)) b!100252))

(assert (= (and b!100252 c!17190) b!100253))

(assert (= (and b!100252 (not c!17190)) b!100254))

(declare-fun m!110733 () Bool)

(assert (=> b!100253 m!110733))

(assert (=> b!99405 d!27083))

(declare-fun d!27085 () Bool)

(assert (=> d!27085 (= (inRange!0 (ite c!16994 (index!3160 lt!50182) (index!3163 lt!50182)) (mask!6609 newMap!16)) (and (bvsge (ite c!16994 (index!3160 lt!50182) (index!3163 lt!50182)) #b00000000000000000000000000000000) (bvslt (ite c!16994 (index!3160 lt!50182) (index!3163 lt!50182)) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10232 d!27085))

(assert (=> d!26835 d!26689))

(declare-fun d!27087 () Bool)

(assert (=> d!27087 (= (content!103 Nil!1581) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26719 d!27087))

(declare-fun d!27089 () Bool)

(declare-fun e!65289 () Bool)

(assert (=> d!27089 e!65289))

(declare-fun res!50307 () Bool)

(assert (=> d!27089 (=> res!50307 e!65289)))

(declare-fun lt!50659 () Bool)

(assert (=> d!27089 (= res!50307 (not lt!50659))))

(declare-fun lt!50657 () Bool)

(assert (=> d!27089 (= lt!50659 lt!50657)))

(declare-fun lt!50656 () Unit!2999)

(declare-fun e!65290 () Unit!2999)

(assert (=> d!27089 (= lt!50656 e!65290)))

(declare-fun c!17191 () Bool)

(assert (=> d!27089 (= c!17191 lt!50657)))

(assert (=> d!27089 (= lt!50657 (containsKey!155 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!27089 (= (contains!804 lt!50256 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50659)))

(declare-fun b!100255 () Bool)

(declare-fun lt!50658 () Unit!2999)

(assert (=> b!100255 (= e!65290 lt!50658)))

(assert (=> b!100255 (= lt!50658 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> b!100255 (isDefined!104 (getValueByKey!151 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100256 () Bool)

(declare-fun Unit!3041 () Unit!2999)

(assert (=> b!100256 (= e!65290 Unit!3041)))

(declare-fun b!100257 () Bool)

(assert (=> b!100257 (= e!65289 (isDefined!104 (getValueByKey!151 (toList!785 lt!50256) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27089 c!17191) b!100255))

(assert (= (and d!27089 (not c!17191)) b!100256))

(assert (= (and d!27089 (not res!50307)) b!100257))

(declare-fun m!110735 () Bool)

(assert (=> d!27089 m!110735))

(declare-fun m!110737 () Bool)

(assert (=> b!100255 m!110737))

(assert (=> b!100255 m!109795))

(assert (=> b!100255 m!109795))

(declare-fun m!110739 () Bool)

(assert (=> b!100255 m!110739))

(assert (=> b!100257 m!109795))

(assert (=> b!100257 m!109795))

(assert (=> b!100257 m!110739))

(assert (=> d!26813 d!27089))

(declare-fun b!100259 () Bool)

(declare-fun e!65291 () Option!157)

(declare-fun e!65292 () Option!157)

(assert (=> b!100259 (= e!65291 e!65292)))

(declare-fun c!17193 () Bool)

(assert (=> b!100259 (= c!17193 (and ((_ is Cons!1579) lt!50257) (not (= (_1!1184 (h!2174 lt!50257)) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100261 () Bool)

(assert (=> b!100261 (= e!65292 None!155)))

(declare-fun b!100260 () Bool)

(assert (=> b!100260 (= e!65292 (getValueByKey!151 (t!5557 lt!50257) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!27091 () Bool)

(declare-fun c!17192 () Bool)

(assert (=> d!27091 (= c!17192 (and ((_ is Cons!1579) lt!50257) (= (_1!1184 (h!2174 lt!50257)) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27091 (= (getValueByKey!151 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65291)))

(declare-fun b!100258 () Bool)

(assert (=> b!100258 (= e!65291 (Some!156 (_2!1184 (h!2174 lt!50257))))))

(assert (= (and d!27091 c!17192) b!100258))

(assert (= (and d!27091 (not c!17192)) b!100259))

(assert (= (and b!100259 c!17193) b!100260))

(assert (= (and b!100259 (not c!17193)) b!100261))

(declare-fun m!110741 () Bool)

(assert (=> b!100260 m!110741))

(assert (=> d!26813 d!27091))

(declare-fun d!27093 () Bool)

(assert (=> d!27093 (= (getValueByKey!151 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50660 () Unit!2999)

(assert (=> d!27093 (= lt!50660 (choose!611 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65293 () Bool)

(assert (=> d!27093 e!65293))

(declare-fun res!50308 () Bool)

(assert (=> d!27093 (=> (not res!50308) (not e!65293))))

(assert (=> d!27093 (= res!50308 (isStrictlySorted!305 lt!50257))))

(assert (=> d!27093 (= (lemmaContainsTupThenGetReturnValue!67 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50660)))

(declare-fun b!100262 () Bool)

(declare-fun res!50309 () Bool)

(assert (=> b!100262 (=> (not res!50309) (not e!65293))))

(assert (=> b!100262 (= res!50309 (containsKey!155 lt!50257 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100263 () Bool)

(assert (=> b!100263 (= e!65293 (contains!806 lt!50257 (tuple2!2347 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27093 res!50308) b!100262))

(assert (= (and b!100262 res!50309) b!100263))

(assert (=> d!27093 m!109789))

(declare-fun m!110743 () Bool)

(assert (=> d!27093 m!110743))

(declare-fun m!110745 () Bool)

(assert (=> d!27093 m!110745))

(declare-fun m!110747 () Bool)

(assert (=> b!100262 m!110747))

(declare-fun m!110749 () Bool)

(assert (=> b!100263 m!110749))

(assert (=> d!26813 d!27093))

(declare-fun call!10320 () List!1583)

(declare-fun bm!10317 () Bool)

(declare-fun e!65294 () List!1583)

(declare-fun c!17197 () Bool)

(assert (=> bm!10317 (= call!10320 ($colon$colon!79 e!65294 (ite c!17197 (h!2174 (toList!785 call!10135)) (tuple2!2347 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun c!17194 () Bool)

(assert (=> bm!10317 (= c!17194 c!17197)))

(declare-fun b!100264 () Bool)

(declare-fun e!65295 () List!1583)

(declare-fun e!65297 () List!1583)

(assert (=> b!100264 (= e!65295 e!65297)))

(declare-fun c!17196 () Bool)

(assert (=> b!100264 (= c!17196 (and ((_ is Cons!1579) (toList!785 call!10135)) (= (_1!1184 (h!2174 (toList!785 call!10135))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100265 () Bool)

(declare-fun res!50311 () Bool)

(declare-fun e!65298 () Bool)

(assert (=> b!100265 (=> (not res!50311) (not e!65298))))

(declare-fun lt!50661 () List!1583)

(assert (=> b!100265 (= res!50311 (containsKey!155 lt!50661 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100266 () Bool)

(declare-fun c!17195 () Bool)

(assert (=> b!100266 (= e!65294 (ite c!17196 (t!5557 (toList!785 call!10135)) (ite c!17195 (Cons!1579 (h!2174 (toList!785 call!10135)) (t!5557 (toList!785 call!10135))) Nil!1580)))))

(declare-fun b!100267 () Bool)

(declare-fun e!65296 () List!1583)

(declare-fun call!10321 () List!1583)

(assert (=> b!100267 (= e!65296 call!10321)))

(declare-fun b!100268 () Bool)

(assert (=> b!100268 (= e!65296 call!10321)))

(declare-fun d!27095 () Bool)

(assert (=> d!27095 e!65298))

(declare-fun res!50310 () Bool)

(assert (=> d!27095 (=> (not res!50310) (not e!65298))))

(assert (=> d!27095 (= res!50310 (isStrictlySorted!305 lt!50661))))

(assert (=> d!27095 (= lt!50661 e!65295)))

(assert (=> d!27095 (= c!17197 (and ((_ is Cons!1579) (toList!785 call!10135)) (bvslt (_1!1184 (h!2174 (toList!785 call!10135))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27095 (isStrictlySorted!305 (toList!785 call!10135))))

(assert (=> d!27095 (= (insertStrictlySorted!70 (toList!785 call!10135) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50661)))

(declare-fun b!100269 () Bool)

(assert (=> b!100269 (= c!17195 (and ((_ is Cons!1579) (toList!785 call!10135)) (bvsgt (_1!1184 (h!2174 (toList!785 call!10135))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!100269 (= e!65297 e!65296)))

(declare-fun bm!10318 () Bool)

(declare-fun call!10322 () List!1583)

(assert (=> bm!10318 (= call!10322 call!10320)))

(declare-fun b!100270 () Bool)

(assert (=> b!100270 (= e!65297 call!10322)))

(declare-fun b!100271 () Bool)

(assert (=> b!100271 (= e!65298 (contains!806 lt!50661 (tuple2!2347 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun bm!10319 () Bool)

(assert (=> bm!10319 (= call!10321 call!10322)))

(declare-fun b!100272 () Bool)

(assert (=> b!100272 (= e!65295 call!10320)))

(declare-fun b!100273 () Bool)

(assert (=> b!100273 (= e!65294 (insertStrictlySorted!70 (t!5557 (toList!785 call!10135)) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!27095 c!17197) b!100272))

(assert (= (and d!27095 (not c!17197)) b!100264))

(assert (= (and b!100264 c!17196) b!100270))

(assert (= (and b!100264 (not c!17196)) b!100269))

(assert (= (and b!100269 c!17195) b!100267))

(assert (= (and b!100269 (not c!17195)) b!100268))

(assert (= (or b!100267 b!100268) bm!10319))

(assert (= (or b!100270 bm!10319) bm!10318))

(assert (= (or b!100272 bm!10318) bm!10317))

(assert (= (and bm!10317 c!17194) b!100273))

(assert (= (and bm!10317 (not c!17194)) b!100266))

(assert (= (and d!27095 res!50310) b!100265))

(assert (= (and b!100265 res!50311) b!100271))

(declare-fun m!110751 () Bool)

(assert (=> bm!10317 m!110751))

(declare-fun m!110753 () Bool)

(assert (=> b!100265 m!110753))

(declare-fun m!110755 () Bool)

(assert (=> b!100273 m!110755))

(declare-fun m!110757 () Bool)

(assert (=> b!100271 m!110757))

(declare-fun m!110759 () Bool)

(assert (=> d!27095 m!110759))

(declare-fun m!110761 () Bool)

(assert (=> d!27095 m!110761))

(assert (=> d!26813 d!27095))

(declare-fun d!27097 () Bool)

(declare-fun e!65299 () Bool)

(assert (=> d!27097 e!65299))

(declare-fun res!50313 () Bool)

(assert (=> d!27097 (=> (not res!50313) (not e!65299))))

(declare-fun lt!50664 () ListLongMap!1539)

(assert (=> d!27097 (= res!50313 (contains!804 lt!50664 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50665 () List!1583)

(assert (=> d!27097 (= lt!50664 (ListLongMap!1540 lt!50665))))

(declare-fun lt!50662 () Unit!2999)

(declare-fun lt!50663 () Unit!2999)

(assert (=> d!27097 (= lt!50662 lt!50663)))

(assert (=> d!27097 (= (getValueByKey!151 lt!50665 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27097 (= lt!50663 (lemmaContainsTupThenGetReturnValue!67 lt!50665 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27097 (= lt!50665 (insertStrictlySorted!70 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27097 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50664)))

(declare-fun b!100274 () Bool)

(declare-fun res!50312 () Bool)

(assert (=> b!100274 (=> (not res!50312) (not e!65299))))

(assert (=> b!100274 (= res!50312 (= (getValueByKey!151 (toList!785 lt!50664) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100275 () Bool)

(assert (=> b!100275 (= e!65299 (contains!806 (toList!785 lt!50664) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27097 res!50313) b!100274))

(assert (= (and b!100274 res!50312) b!100275))

(declare-fun m!110763 () Bool)

(assert (=> d!27097 m!110763))

(declare-fun m!110765 () Bool)

(assert (=> d!27097 m!110765))

(declare-fun m!110767 () Bool)

(assert (=> d!27097 m!110767))

(declare-fun m!110769 () Bool)

(assert (=> d!27097 m!110769))

(declare-fun m!110771 () Bool)

(assert (=> b!100274 m!110771))

(declare-fun m!110773 () Bool)

(assert (=> b!100275 m!110773))

(assert (=> d!26807 d!27097))

(declare-fun d!27099 () Bool)

(assert (=> d!27099 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27099 true))

(declare-fun _$8!88 () Unit!2999)

(assert (=> d!27099 (= (choose!608 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) _$8!88)))

(declare-fun bs!4146 () Bool)

(assert (= bs!4146 d!27099))

(assert (=> bs!4146 m!109221))

(assert (=> bs!4146 m!109221))

(assert (=> bs!4146 m!109771))

(assert (=> bs!4146 m!109159))

(assert (=> bs!4146 m!109775))

(assert (=> d!26807 d!27099))

(assert (=> d!26807 d!26725))

(assert (=> d!26807 d!26871))

(declare-fun b!100276 () Bool)

(declare-fun e!65305 () ListLongMap!1539)

(declare-fun call!10328 () ListLongMap!1539)

(assert (=> b!100276 (= e!65305 call!10328)))

(declare-fun bm!10320 () Bool)

(declare-fun call!10324 () Bool)

(declare-fun lt!50678 () ListLongMap!1539)

(assert (=> bm!10320 (= call!10324 (contains!804 lt!50678 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100277 () Bool)

(declare-fun e!65301 () Bool)

(declare-fun e!65307 () Bool)

(assert (=> b!100277 (= e!65301 e!65307)))

(declare-fun res!50315 () Bool)

(assert (=> b!100277 (= res!50315 call!10324)))

(assert (=> b!100277 (=> (not res!50315) (not e!65307))))

(declare-fun b!100278 () Bool)

(assert (=> b!100278 (= e!65301 (not call!10324))))

(declare-fun b!100280 () Bool)

(declare-fun e!65309 () Unit!2999)

(declare-fun Unit!3042 () Unit!2999)

(assert (=> b!100280 (= e!65309 Unit!3042)))

(declare-fun b!100281 () Bool)

(declare-fun e!65300 () ListLongMap!1539)

(assert (=> b!100281 (= e!65300 call!10328)))

(declare-fun b!100282 () Bool)

(declare-fun lt!50666 () Unit!2999)

(assert (=> b!100282 (= e!65309 lt!50666)))

(declare-fun lt!50686 () ListLongMap!1539)

(assert (=> b!100282 (= lt!50686 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50668 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50668 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50667 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50667 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50672 () Unit!2999)

(assert (=> b!100282 (= lt!50672 (addStillContains!69 lt!50686 lt!50668 (zeroValue!2383 newMap!16) lt!50667))))

(assert (=> b!100282 (contains!804 (+!136 lt!50686 (tuple2!2347 lt!50668 (zeroValue!2383 newMap!16))) lt!50667)))

(declare-fun lt!50675 () Unit!2999)

(assert (=> b!100282 (= lt!50675 lt!50672)))

(declare-fun lt!50676 () ListLongMap!1539)

(assert (=> b!100282 (= lt!50676 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50681 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50681 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50683 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50683 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50677 () Unit!2999)

(assert (=> b!100282 (= lt!50677 (addApplyDifferent!69 lt!50676 lt!50681 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50683))))

(assert (=> b!100282 (= (apply!93 (+!136 lt!50676 (tuple2!2347 lt!50681 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50683) (apply!93 lt!50676 lt!50683))))

(declare-fun lt!50671 () Unit!2999)

(assert (=> b!100282 (= lt!50671 lt!50677)))

(declare-fun lt!50673 () ListLongMap!1539)

(assert (=> b!100282 (= lt!50673 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50684 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50684 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50670 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50670 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50669 () Unit!2999)

(assert (=> b!100282 (= lt!50669 (addApplyDifferent!69 lt!50673 lt!50684 (zeroValue!2383 newMap!16) lt!50670))))

(assert (=> b!100282 (= (apply!93 (+!136 lt!50673 (tuple2!2347 lt!50684 (zeroValue!2383 newMap!16))) lt!50670) (apply!93 lt!50673 lt!50670))))

(declare-fun lt!50685 () Unit!2999)

(assert (=> b!100282 (= lt!50685 lt!50669)))

(declare-fun lt!50674 () ListLongMap!1539)

(assert (=> b!100282 (= lt!50674 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50682 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50682 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50687 () (_ BitVec 64))

(assert (=> b!100282 (= lt!50687 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100282 (= lt!50666 (addApplyDifferent!69 lt!50674 lt!50682 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50687))))

(assert (=> b!100282 (= (apply!93 (+!136 lt!50674 (tuple2!2347 lt!50682 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50687) (apply!93 lt!50674 lt!50687))))

(declare-fun b!100283 () Bool)

(declare-fun res!50322 () Bool)

(declare-fun e!65312 () Bool)

(assert (=> b!100283 (=> (not res!50322) (not e!65312))))

(declare-fun e!65308 () Bool)

(assert (=> b!100283 (= res!50322 e!65308)))

(declare-fun res!50319 () Bool)

(assert (=> b!100283 (=> res!50319 e!65308)))

(declare-fun e!65303 () Bool)

(assert (=> b!100283 (= res!50319 (not e!65303))))

(declare-fun res!50314 () Bool)

(assert (=> b!100283 (=> (not res!50314) (not e!65303))))

(assert (=> b!100283 (= res!50314 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100284 () Bool)

(declare-fun e!65311 () Bool)

(assert (=> b!100284 (= e!65311 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100285 () Bool)

(declare-fun e!65302 () Bool)

(declare-fun call!10325 () Bool)

(assert (=> b!100285 (= e!65302 (not call!10325))))

(declare-fun bm!10321 () Bool)

(declare-fun call!10327 () ListLongMap!1539)

(declare-fun call!10326 () ListLongMap!1539)

(assert (=> bm!10321 (= call!10327 call!10326)))

(declare-fun c!17199 () Bool)

(declare-fun call!10323 () ListLongMap!1539)

(declare-fun call!10329 () ListLongMap!1539)

(declare-fun c!17203 () Bool)

(declare-fun bm!10322 () Bool)

(assert (=> bm!10322 (= call!10329 (+!136 (ite c!17199 call!10326 (ite c!17203 call!10327 call!10323)) (ite (or c!17199 c!17203) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100286 () Bool)

(declare-fun e!65310 () Bool)

(assert (=> b!100286 (= e!65310 (= (apply!93 lt!50678 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100287 () Bool)

(declare-fun c!17198 () Bool)

(assert (=> b!100287 (= c!17198 (and (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100287 (= e!65300 e!65305)))

(declare-fun b!100288 () Bool)

(declare-fun e!65306 () ListLongMap!1539)

(assert (=> b!100288 (= e!65306 e!65300)))

(assert (=> b!100288 (= c!17203 (and (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10323 () Bool)

(assert (=> bm!10323 (= call!10325 (contains!804 lt!50678 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100289 () Bool)

(assert (=> b!100289 (= e!65312 e!65302)))

(declare-fun c!17202 () Bool)

(assert (=> b!100289 (= c!17202 (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100290 () Bool)

(assert (=> b!100290 (= e!65303 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100291 () Bool)

(declare-fun res!50317 () Bool)

(assert (=> b!100291 (=> (not res!50317) (not e!65312))))

(assert (=> b!100291 (= res!50317 e!65301)))

(declare-fun c!17201 () Bool)

(assert (=> b!100291 (= c!17201 (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10324 () Bool)

(assert (=> bm!10324 (= call!10323 call!10327)))

(declare-fun b!100292 () Bool)

(assert (=> b!100292 (= e!65307 (= (apply!93 lt!50678 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10325 () Bool)

(assert (=> bm!10325 (= call!10326 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!27101 () Bool)

(assert (=> d!27101 e!65312))

(declare-fun res!50320 () Bool)

(assert (=> d!27101 (=> (not res!50320) (not e!65312))))

(assert (=> d!27101 (= res!50320 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50680 () ListLongMap!1539)

(assert (=> d!27101 (= lt!50678 lt!50680)))

(declare-fun lt!50679 () Unit!2999)

(assert (=> d!27101 (= lt!50679 e!65309)))

(declare-fun c!17200 () Bool)

(assert (=> d!27101 (= c!17200 e!65311)))

(declare-fun res!50316 () Bool)

(assert (=> d!27101 (=> (not res!50316) (not e!65311))))

(assert (=> d!27101 (= res!50316 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27101 (= lt!50680 e!65306)))

(assert (=> d!27101 (= c!17199 (and (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27101 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27101 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50678)))

(declare-fun b!100279 () Bool)

(declare-fun e!65304 () Bool)

(assert (=> b!100279 (= e!65304 (= (apply!93 lt!50678 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100279 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (_values!2485 newMap!16))))))

(assert (=> b!100279 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100293 () Bool)

(assert (=> b!100293 (= e!65306 (+!136 call!10329 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!10326 () Bool)

(assert (=> bm!10326 (= call!10328 call!10329)))

(declare-fun b!100294 () Bool)

(assert (=> b!100294 (= e!65305 call!10323)))

(declare-fun b!100295 () Bool)

(assert (=> b!100295 (= e!65302 e!65310)))

(declare-fun res!50318 () Bool)

(assert (=> b!100295 (= res!50318 call!10325)))

(assert (=> b!100295 (=> (not res!50318) (not e!65310))))

(declare-fun b!100296 () Bool)

(assert (=> b!100296 (= e!65308 e!65304)))

(declare-fun res!50321 () Bool)

(assert (=> b!100296 (=> (not res!50321) (not e!65304))))

(assert (=> b!100296 (= res!50321 (contains!804 lt!50678 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100296 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!27101 c!17199) b!100293))

(assert (= (and d!27101 (not c!17199)) b!100288))

(assert (= (and b!100288 c!17203) b!100281))

(assert (= (and b!100288 (not c!17203)) b!100287))

(assert (= (and b!100287 c!17198) b!100276))

(assert (= (and b!100287 (not c!17198)) b!100294))

(assert (= (or b!100276 b!100294) bm!10324))

(assert (= (or b!100281 bm!10324) bm!10321))

(assert (= (or b!100281 b!100276) bm!10326))

(assert (= (or b!100293 bm!10321) bm!10325))

(assert (= (or b!100293 bm!10326) bm!10322))

(assert (= (and d!27101 res!50316) b!100284))

(assert (= (and d!27101 c!17200) b!100282))

(assert (= (and d!27101 (not c!17200)) b!100280))

(assert (= (and d!27101 res!50320) b!100283))

(assert (= (and b!100283 res!50314) b!100290))

(assert (= (and b!100283 (not res!50319)) b!100296))

(assert (= (and b!100296 res!50321) b!100279))

(assert (= (and b!100283 res!50322) b!100291))

(assert (= (and b!100291 c!17201) b!100277))

(assert (= (and b!100291 (not c!17201)) b!100278))

(assert (= (and b!100277 res!50315) b!100292))

(assert (= (or b!100277 b!100278) bm!10320))

(assert (= (and b!100291 res!50317) b!100289))

(assert (= (and b!100289 c!17202) b!100295))

(assert (= (and b!100289 (not c!17202)) b!100285))

(assert (= (and b!100295 res!50318) b!100286))

(assert (= (or b!100295 b!100285) bm!10323))

(declare-fun b_lambda!4481 () Bool)

(assert (=> (not b_lambda!4481) (not b!100279)))

(assert (=> b!100279 t!5564))

(declare-fun b_and!6183 () Bool)

(assert (= b_and!6179 (and (=> t!5564 result!3303) b_and!6183)))

(assert (=> b!100279 t!5566))

(declare-fun b_and!6185 () Bool)

(assert (= b_and!6181 (and (=> t!5566 result!3305) b_and!6185)))

(assert (=> b!100279 m!109397))

(assert (=> b!100279 m!109477))

(assert (=> b!100279 m!109401))

(assert (=> b!100279 m!109477))

(assert (=> b!100279 m!109401))

(assert (=> b!100279 m!109479))

(assert (=> b!100279 m!109397))

(declare-fun m!110775 () Bool)

(assert (=> b!100279 m!110775))

(declare-fun m!110777 () Bool)

(assert (=> b!100292 m!110777))

(assert (=> bm!10325 m!109159))

(declare-fun m!110779 () Bool)

(assert (=> bm!10325 m!110779))

(assert (=> b!100290 m!109397))

(assert (=> b!100290 m!109397))

(assert (=> b!100290 m!109411))

(assert (=> b!100284 m!109397))

(assert (=> b!100284 m!109397))

(assert (=> b!100284 m!109411))

(assert (=> d!27101 m!109413))

(declare-fun m!110781 () Bool)

(assert (=> bm!10322 m!110781))

(declare-fun m!110783 () Bool)

(assert (=> b!100286 m!110783))

(assert (=> b!100296 m!109397))

(assert (=> b!100296 m!109397))

(declare-fun m!110785 () Bool)

(assert (=> b!100296 m!110785))

(declare-fun m!110787 () Bool)

(assert (=> bm!10320 m!110787))

(assert (=> b!100282 m!109397))

(declare-fun m!110789 () Bool)

(assert (=> b!100282 m!110789))

(declare-fun m!110791 () Bool)

(assert (=> b!100282 m!110791))

(assert (=> b!100282 m!109159))

(declare-fun m!110793 () Bool)

(assert (=> b!100282 m!110793))

(declare-fun m!110795 () Bool)

(assert (=> b!100282 m!110795))

(assert (=> b!100282 m!109159))

(declare-fun m!110797 () Bool)

(assert (=> b!100282 m!110797))

(declare-fun m!110799 () Bool)

(assert (=> b!100282 m!110799))

(declare-fun m!110801 () Bool)

(assert (=> b!100282 m!110801))

(declare-fun m!110803 () Bool)

(assert (=> b!100282 m!110803))

(declare-fun m!110805 () Bool)

(assert (=> b!100282 m!110805))

(declare-fun m!110807 () Bool)

(assert (=> b!100282 m!110807))

(assert (=> b!100282 m!110805))

(declare-fun m!110809 () Bool)

(assert (=> b!100282 m!110809))

(declare-fun m!110811 () Bool)

(assert (=> b!100282 m!110811))

(assert (=> b!100282 m!110799))

(declare-fun m!110813 () Bool)

(assert (=> b!100282 m!110813))

(declare-fun m!110815 () Bool)

(assert (=> b!100282 m!110815))

(assert (=> b!100282 m!109159))

(assert (=> b!100282 m!110779))

(assert (=> b!100282 m!110811))

(declare-fun m!110817 () Bool)

(assert (=> b!100282 m!110817))

(assert (=> b!100282 m!110789))

(declare-fun m!110819 () Bool)

(assert (=> b!100293 m!110819))

(declare-fun m!110821 () Bool)

(assert (=> bm!10323 m!110821))

(assert (=> d!26807 d!27101))

(declare-fun d!27103 () Bool)

(assert (=> d!27103 (= (get!1290 (getValueByKey!151 (toList!785 lt!49955) lt!49962)) (v!2820 (getValueByKey!151 (toList!785 lt!49955) lt!49962)))))

(assert (=> d!26775 d!27103))

(declare-fun b!100298 () Bool)

(declare-fun e!65313 () Option!157)

(declare-fun e!65314 () Option!157)

(assert (=> b!100298 (= e!65313 e!65314)))

(declare-fun c!17205 () Bool)

(assert (=> b!100298 (= c!17205 (and ((_ is Cons!1579) (toList!785 lt!49955)) (not (= (_1!1184 (h!2174 (toList!785 lt!49955))) lt!49962))))))

(declare-fun b!100300 () Bool)

(assert (=> b!100300 (= e!65314 None!155)))

(declare-fun b!100299 () Bool)

(assert (=> b!100299 (= e!65314 (getValueByKey!151 (t!5557 (toList!785 lt!49955)) lt!49962))))

(declare-fun d!27105 () Bool)

(declare-fun c!17204 () Bool)

(assert (=> d!27105 (= c!17204 (and ((_ is Cons!1579) (toList!785 lt!49955)) (= (_1!1184 (h!2174 (toList!785 lt!49955))) lt!49962)))))

(assert (=> d!27105 (= (getValueByKey!151 (toList!785 lt!49955) lt!49962) e!65313)))

(declare-fun b!100297 () Bool)

(assert (=> b!100297 (= e!65313 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49955)))))))

(assert (= (and d!27105 c!17204) b!100297))

(assert (= (and d!27105 (not c!17204)) b!100298))

(assert (= (and b!100298 c!17205) b!100299))

(assert (= (and b!100298 (not c!17205)) b!100300))

(declare-fun m!110823 () Bool)

(assert (=> b!100299 m!110823))

(assert (=> d!26775 d!27105))

(assert (=> d!26781 d!26763))

(assert (=> d!26781 d!26783))

(declare-fun d!27107 () Bool)

(declare-fun e!65315 () Bool)

(assert (=> d!27107 e!65315))

(declare-fun res!50323 () Bool)

(assert (=> d!27107 (=> res!50323 e!65315)))

(declare-fun lt!50691 () Bool)

(assert (=> d!27107 (= res!50323 (not lt!50691))))

(declare-fun lt!50689 () Bool)

(assert (=> d!27107 (= lt!50691 lt!50689)))

(declare-fun lt!50688 () Unit!2999)

(declare-fun e!65316 () Unit!2999)

(assert (=> d!27107 (= lt!50688 e!65316)))

(declare-fun c!17206 () Bool)

(assert (=> d!27107 (= c!17206 lt!50689)))

(assert (=> d!27107 (= lt!50689 (containsKey!155 (toList!785 lt!49955) lt!49962))))

(assert (=> d!27107 (= (contains!804 lt!49955 lt!49962) lt!50691)))

(declare-fun b!100301 () Bool)

(declare-fun lt!50690 () Unit!2999)

(assert (=> b!100301 (= e!65316 lt!50690)))

(assert (=> b!100301 (= lt!50690 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49955) lt!49962))))

(assert (=> b!100301 (isDefined!104 (getValueByKey!151 (toList!785 lt!49955) lt!49962))))

(declare-fun b!100302 () Bool)

(declare-fun Unit!3043 () Unit!2999)

(assert (=> b!100302 (= e!65316 Unit!3043)))

(declare-fun b!100303 () Bool)

(assert (=> b!100303 (= e!65315 (isDefined!104 (getValueByKey!151 (toList!785 lt!49955) lt!49962)))))

(assert (= (and d!27107 c!17206) b!100301))

(assert (= (and d!27107 (not c!17206)) b!100302))

(assert (= (and d!27107 (not res!50323)) b!100303))

(declare-fun m!110825 () Bool)

(assert (=> d!27107 m!110825))

(declare-fun m!110827 () Bool)

(assert (=> b!100301 m!110827))

(assert (=> b!100301 m!109679))

(assert (=> b!100301 m!109679))

(declare-fun m!110829 () Bool)

(assert (=> b!100301 m!110829))

(assert (=> b!100303 m!109679))

(assert (=> b!100303 m!109679))

(assert (=> b!100303 m!110829))

(assert (=> d!26781 d!27107))

(assert (=> d!26781 d!26775))

(declare-fun d!27109 () Bool)

(assert (=> d!27109 (= (apply!93 (+!136 lt!49955 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!49962) (apply!93 lt!49955 lt!49962))))

(assert (=> d!27109 true))

(declare-fun _$34!876 () Unit!2999)

(assert (=> d!27109 (= (choose!604 lt!49955 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))) lt!49962) _$34!876)))

(declare-fun bs!4147 () Bool)

(assert (= bs!4147 d!27109))

(assert (=> bs!4147 m!109245))

(assert (=> bs!4147 m!109245))

(assert (=> bs!4147 m!109247))

(assert (=> bs!4147 m!109259))

(assert (=> d!26781 d!27109))

(declare-fun d!27111 () Bool)

(declare-fun e!65317 () Bool)

(assert (=> d!27111 e!65317))

(declare-fun res!50324 () Bool)

(assert (=> d!27111 (=> res!50324 e!65317)))

(declare-fun lt!50695 () Bool)

(assert (=> d!27111 (= res!50324 (not lt!50695))))

(declare-fun lt!50693 () Bool)

(assert (=> d!27111 (= lt!50695 lt!50693)))

(declare-fun lt!50692 () Unit!2999)

(declare-fun e!65318 () Unit!2999)

(assert (=> d!27111 (= lt!50692 e!65318)))

(declare-fun c!17207 () Bool)

(assert (=> d!27111 (= c!17207 lt!50693)))

(assert (=> d!27111 (= lt!50693 (containsKey!155 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!27111 (= (contains!804 lt!50198 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50695)))

(declare-fun b!100304 () Bool)

(declare-fun lt!50694 () Unit!2999)

(assert (=> b!100304 (= e!65318 lt!50694)))

(assert (=> b!100304 (= lt!50694 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> b!100304 (isDefined!104 (getValueByKey!151 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100305 () Bool)

(declare-fun Unit!3044 () Unit!2999)

(assert (=> b!100305 (= e!65318 Unit!3044)))

(declare-fun b!100306 () Bool)

(assert (=> b!100306 (= e!65317 (isDefined!104 (getValueByKey!151 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27111 c!17207) b!100304))

(assert (= (and d!27111 (not c!17207)) b!100305))

(assert (= (and d!27111 (not res!50324)) b!100306))

(declare-fun m!110831 () Bool)

(assert (=> d!27111 m!110831))

(declare-fun m!110833 () Bool)

(assert (=> b!100304 m!110833))

(assert (=> b!100304 m!109643))

(assert (=> b!100304 m!109643))

(declare-fun m!110835 () Bool)

(assert (=> b!100304 m!110835))

(assert (=> b!100306 m!109643))

(assert (=> b!100306 m!109643))

(assert (=> b!100306 m!110835))

(assert (=> d!26763 d!27111))

(declare-fun b!100308 () Bool)

(declare-fun e!65319 () Option!157)

(declare-fun e!65320 () Option!157)

(assert (=> b!100308 (= e!65319 e!65320)))

(declare-fun c!17209 () Bool)

(assert (=> b!100308 (= c!17209 (and ((_ is Cons!1579) lt!50199) (not (= (_1!1184 (h!2174 lt!50199)) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100310 () Bool)

(assert (=> b!100310 (= e!65320 None!155)))

(declare-fun b!100309 () Bool)

(assert (=> b!100309 (= e!65320 (getValueByKey!151 (t!5557 lt!50199) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun c!17208 () Bool)

(declare-fun d!27113 () Bool)

(assert (=> d!27113 (= c!17208 (and ((_ is Cons!1579) lt!50199) (= (_1!1184 (h!2174 lt!50199)) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27113 (= (getValueByKey!151 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65319)))

(declare-fun b!100307 () Bool)

(assert (=> b!100307 (= e!65319 (Some!156 (_2!1184 (h!2174 lt!50199))))))

(assert (= (and d!27113 c!17208) b!100307))

(assert (= (and d!27113 (not c!17208)) b!100308))

(assert (= (and b!100308 c!17209) b!100309))

(assert (= (and b!100308 (not c!17209)) b!100310))

(declare-fun m!110837 () Bool)

(assert (=> b!100309 m!110837))

(assert (=> d!26763 d!27113))

(declare-fun d!27115 () Bool)

(assert (=> d!27115 (= (getValueByKey!151 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50696 () Unit!2999)

(assert (=> d!27115 (= lt!50696 (choose!611 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65321 () Bool)

(assert (=> d!27115 e!65321))

(declare-fun res!50325 () Bool)

(assert (=> d!27115 (=> (not res!50325) (not e!65321))))

(assert (=> d!27115 (= res!50325 (isStrictlySorted!305 lt!50199))))

(assert (=> d!27115 (= (lemmaContainsTupThenGetReturnValue!67 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50696)))

(declare-fun b!100311 () Bool)

(declare-fun res!50326 () Bool)

(assert (=> b!100311 (=> (not res!50326) (not e!65321))))

(assert (=> b!100311 (= res!50326 (containsKey!155 lt!50199 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100312 () Bool)

(assert (=> b!100312 (= e!65321 (contains!806 lt!50199 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27115 res!50325) b!100311))

(assert (= (and b!100311 res!50326) b!100312))

(assert (=> d!27115 m!109637))

(declare-fun m!110839 () Bool)

(assert (=> d!27115 m!110839))

(declare-fun m!110841 () Bool)

(assert (=> d!27115 m!110841))

(declare-fun m!110843 () Bool)

(assert (=> b!100311 m!110843))

(declare-fun m!110845 () Bool)

(assert (=> b!100312 m!110845))

(assert (=> d!26763 d!27115))

(declare-fun call!10330 () List!1583)

(declare-fun c!17213 () Bool)

(declare-fun e!65322 () List!1583)

(declare-fun bm!10327 () Bool)

(assert (=> bm!10327 (= call!10330 ($colon$colon!79 e!65322 (ite c!17213 (h!2174 (toList!785 lt!49955)) (tuple2!2347 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun c!17210 () Bool)

(assert (=> bm!10327 (= c!17210 c!17213)))

(declare-fun b!100313 () Bool)

(declare-fun e!65323 () List!1583)

(declare-fun e!65325 () List!1583)

(assert (=> b!100313 (= e!65323 e!65325)))

(declare-fun c!17212 () Bool)

(assert (=> b!100313 (= c!17212 (and ((_ is Cons!1579) (toList!785 lt!49955)) (= (_1!1184 (h!2174 (toList!785 lt!49955))) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100314 () Bool)

(declare-fun res!50328 () Bool)

(declare-fun e!65326 () Bool)

(assert (=> b!100314 (=> (not res!50328) (not e!65326))))

(declare-fun lt!50697 () List!1583)

(assert (=> b!100314 (= res!50328 (containsKey!155 lt!50697 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun c!17211 () Bool)

(declare-fun b!100315 () Bool)

(assert (=> b!100315 (= e!65322 (ite c!17212 (t!5557 (toList!785 lt!49955)) (ite c!17211 (Cons!1579 (h!2174 (toList!785 lt!49955)) (t!5557 (toList!785 lt!49955))) Nil!1580)))))

(declare-fun b!100316 () Bool)

(declare-fun e!65324 () List!1583)

(declare-fun call!10331 () List!1583)

(assert (=> b!100316 (= e!65324 call!10331)))

(declare-fun b!100317 () Bool)

(assert (=> b!100317 (= e!65324 call!10331)))

(declare-fun d!27117 () Bool)

(assert (=> d!27117 e!65326))

(declare-fun res!50327 () Bool)

(assert (=> d!27117 (=> (not res!50327) (not e!65326))))

(assert (=> d!27117 (= res!50327 (isStrictlySorted!305 lt!50697))))

(assert (=> d!27117 (= lt!50697 e!65323)))

(assert (=> d!27117 (= c!17213 (and ((_ is Cons!1579) (toList!785 lt!49955)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49955))) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27117 (isStrictlySorted!305 (toList!785 lt!49955))))

(assert (=> d!27117 (= (insertStrictlySorted!70 (toList!785 lt!49955) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50697)))

(declare-fun b!100318 () Bool)

(assert (=> b!100318 (= c!17211 (and ((_ is Cons!1579) (toList!785 lt!49955)) (bvsgt (_1!1184 (h!2174 (toList!785 lt!49955))) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!100318 (= e!65325 e!65324)))

(declare-fun bm!10328 () Bool)

(declare-fun call!10332 () List!1583)

(assert (=> bm!10328 (= call!10332 call!10330)))

(declare-fun b!100319 () Bool)

(assert (=> b!100319 (= e!65325 call!10332)))

(declare-fun b!100320 () Bool)

(assert (=> b!100320 (= e!65326 (contains!806 lt!50697 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun bm!10329 () Bool)

(assert (=> bm!10329 (= call!10331 call!10332)))

(declare-fun b!100321 () Bool)

(assert (=> b!100321 (= e!65323 call!10330)))

(declare-fun b!100322 () Bool)

(assert (=> b!100322 (= e!65322 (insertStrictlySorted!70 (t!5557 (toList!785 lt!49955)) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!27117 c!17213) b!100321))

(assert (= (and d!27117 (not c!17213)) b!100313))

(assert (= (and b!100313 c!17212) b!100319))

(assert (= (and b!100313 (not c!17212)) b!100318))

(assert (= (and b!100318 c!17211) b!100316))

(assert (= (and b!100318 (not c!17211)) b!100317))

(assert (= (or b!100316 b!100317) bm!10329))

(assert (= (or b!100319 bm!10329) bm!10328))

(assert (= (or b!100321 bm!10328) bm!10327))

(assert (= (and bm!10327 c!17210) b!100322))

(assert (= (and bm!10327 (not c!17210)) b!100315))

(assert (= (and d!27117 res!50327) b!100314))

(assert (= (and b!100314 res!50328) b!100320))

(declare-fun m!110847 () Bool)

(assert (=> bm!10327 m!110847))

(declare-fun m!110849 () Bool)

(assert (=> b!100314 m!110849))

(declare-fun m!110851 () Bool)

(assert (=> b!100322 m!110851))

(declare-fun m!110853 () Bool)

(assert (=> b!100320 m!110853))

(declare-fun m!110855 () Bool)

(assert (=> d!27117 m!110855))

(declare-fun m!110857 () Bool)

(assert (=> d!27117 m!110857))

(assert (=> d!26763 d!27117))

(declare-fun b!100324 () Bool)

(declare-fun res!50330 () Bool)

(declare-fun e!65327 () Bool)

(assert (=> b!100324 (=> (not res!50330) (not e!65327))))

(assert (=> b!100324 (= res!50330 (bvsge (size!2276 (_2!1185 lt!50053)) (_size!478 (_2!1185 lt!50053))))))

(declare-fun b!100326 () Bool)

(assert (=> b!100326 (= e!65327 (and (bvsge (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000011) (bvsge (_vacant!478 (_2!1185 lt!50053)) #b00000000000000000000000000000000)))))

(declare-fun d!27119 () Bool)

(declare-fun res!50332 () Bool)

(assert (=> d!27119 (=> (not res!50332) (not e!65327))))

(assert (=> d!27119 (= res!50332 (validMask!0 (mask!6609 (_2!1185 lt!50053))))))

(assert (=> d!27119 (= (simpleValid!69 (_2!1185 lt!50053)) e!65327)))

(declare-fun b!100323 () Bool)

(declare-fun res!50329 () Bool)

(assert (=> b!100323 (=> (not res!50329) (not e!65327))))

(assert (=> b!100323 (= res!50329 (and (= (size!2273 (_values!2485 (_2!1185 lt!50053))) (bvadd (mask!6609 (_2!1185 lt!50053)) #b00000000000000000000000000000001)) (= (size!2272 (_keys!4196 (_2!1185 lt!50053))) (size!2273 (_values!2485 (_2!1185 lt!50053)))) (bvsge (_size!478 (_2!1185 lt!50053)) #b00000000000000000000000000000000) (bvsle (_size!478 (_2!1185 lt!50053)) (bvadd (mask!6609 (_2!1185 lt!50053)) #b00000000000000000000000000000001))))))

(declare-fun b!100325 () Bool)

(declare-fun res!50331 () Bool)

(assert (=> b!100325 (=> (not res!50331) (not e!65327))))

(assert (=> b!100325 (= res!50331 (= (size!2276 (_2!1185 lt!50053)) (bvadd (_size!478 (_2!1185 lt!50053)) (bvsdiv (bvadd (extraKeys!2319 (_2!1185 lt!50053)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!27119 res!50332) b!100323))

(assert (= (and b!100323 res!50329) b!100324))

(assert (= (and b!100324 res!50330) b!100325))

(assert (= (and b!100325 res!50331) b!100326))

(declare-fun m!110859 () Bool)

(assert (=> b!100324 m!110859))

(assert (=> d!27119 m!110445))

(assert (=> b!100325 m!110859))

(assert (=> d!26833 d!27119))

(declare-fun d!27121 () Bool)

(declare-fun e!65328 () Bool)

(assert (=> d!27121 e!65328))

(declare-fun res!50334 () Bool)

(assert (=> d!27121 (=> (not res!50334) (not e!65328))))

(declare-fun lt!50700 () ListLongMap!1539)

(assert (=> d!27121 (= res!50334 (contains!804 lt!50700 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50701 () List!1583)

(assert (=> d!27121 (= lt!50700 (ListLongMap!1540 lt!50701))))

(declare-fun lt!50698 () Unit!2999)

(declare-fun lt!50699 () Unit!2999)

(assert (=> d!27121 (= lt!50698 lt!50699)))

(assert (=> d!27121 (= (getValueByKey!151 lt!50701 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27121 (= lt!50699 (lemmaContainsTupThenGetReturnValue!67 lt!50701 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27121 (= lt!50701 (insertStrictlySorted!70 (toList!785 call!10217) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27121 (= (+!136 call!10217 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50700)))

(declare-fun b!100327 () Bool)

(declare-fun res!50333 () Bool)

(assert (=> b!100327 (=> (not res!50333) (not e!65328))))

(assert (=> b!100327 (= res!50333 (= (getValueByKey!151 (toList!785 lt!50700) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100328 () Bool)

(assert (=> b!100328 (= e!65328 (contains!806 (toList!785 lt!50700) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!27121 res!50334) b!100327))

(assert (= (and b!100327 res!50333) b!100328))

(declare-fun m!110861 () Bool)

(assert (=> d!27121 m!110861))

(declare-fun m!110863 () Bool)

(assert (=> d!27121 m!110863))

(declare-fun m!110865 () Bool)

(assert (=> d!27121 m!110865))

(declare-fun m!110867 () Bool)

(assert (=> d!27121 m!110867))

(declare-fun m!110869 () Bool)

(assert (=> b!100327 m!110869))

(declare-fun m!110871 () Bool)

(assert (=> b!100328 m!110871))

(assert (=> b!99426 d!27121))

(declare-fun d!27123 () Bool)

(declare-fun e!65329 () Bool)

(assert (=> d!27123 e!65329))

(declare-fun res!50335 () Bool)

(assert (=> d!27123 (=> res!50335 e!65329)))

(declare-fun lt!50705 () Bool)

(assert (=> d!27123 (= res!50335 (not lt!50705))))

(declare-fun lt!50703 () Bool)

(assert (=> d!27123 (= lt!50705 lt!50703)))

(declare-fun lt!50702 () Unit!2999)

(declare-fun e!65330 () Unit!2999)

(assert (=> d!27123 (= lt!50702 e!65330)))

(declare-fun c!17214 () Bool)

(assert (=> d!27123 (= c!17214 lt!50703)))

(assert (=> d!27123 (= lt!50703 (containsKey!155 (toList!785 lt!50129) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27123 (= (contains!804 lt!50129 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50705)))

(declare-fun b!100329 () Bool)

(declare-fun lt!50704 () Unit!2999)

(assert (=> b!100329 (= e!65330 lt!50704)))

(assert (=> b!100329 (= lt!50704 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50129) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100329 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100330 () Bool)

(declare-fun Unit!3045 () Unit!2999)

(assert (=> b!100330 (= e!65330 Unit!3045)))

(declare-fun b!100331 () Bool)

(assert (=> b!100331 (= e!65329 (isDefined!104 (getValueByKey!151 (toList!785 lt!50129) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27123 c!17214) b!100329))

(assert (= (and d!27123 (not c!17214)) b!100330))

(assert (= (and d!27123 (not res!50335)) b!100331))

(declare-fun m!110873 () Bool)

(assert (=> d!27123 m!110873))

(declare-fun m!110875 () Bool)

(assert (=> b!100329 m!110875))

(declare-fun m!110877 () Bool)

(assert (=> b!100329 m!110877))

(assert (=> b!100329 m!110877))

(declare-fun m!110879 () Bool)

(assert (=> b!100329 m!110879))

(assert (=> b!100331 m!110877))

(assert (=> b!100331 m!110877))

(assert (=> b!100331 m!110879))

(assert (=> bm!10218 d!27123))

(declare-fun d!27125 () Bool)

(assert (=> d!27125 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27125 true))

(declare-fun _$5!104 () Unit!2999)

(assert (=> d!27125 (= (choose!607 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3161 lt!50049) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) _$5!104)))

(declare-fun bs!4148 () Bool)

(assert (= bs!4148 d!27125))

(assert (=> bs!4148 m!109221))

(assert (=> bs!4148 m!109221))

(assert (=> bs!4148 m!109751))

(assert (=> bs!4148 m!109319))

(assert (=> bs!4148 m!109753))

(assert (=> d!26797 d!27125))

(assert (=> d!26797 d!26871))

(declare-fun d!27127 () Bool)

(assert (=> d!27127 (isDefined!104 (getValueByKey!151 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun lt!50706 () Unit!2999)

(assert (=> d!27127 (= lt!50706 (choose!609 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!65331 () Bool)

(assert (=> d!27127 e!65331))

(declare-fun res!50336 () Bool)

(assert (=> d!27127 (=> (not res!50336) (not e!65331))))

(assert (=> d!27127 (= res!50336 (isStrictlySorted!305 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))))

(assert (=> d!27127 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50706)))

(declare-fun b!100332 () Bool)

(assert (=> b!100332 (= e!65331 (containsKey!155 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!27127 res!50336) b!100332))

(assert (=> d!27127 m!109133))

(assert (=> d!27127 m!109759))

(assert (=> d!27127 m!109759))

(assert (=> d!27127 m!109761))

(assert (=> d!27127 m!109133))

(declare-fun m!110881 () Bool)

(assert (=> d!27127 m!110881))

(declare-fun m!110883 () Bool)

(assert (=> d!27127 m!110883))

(assert (=> b!100332 m!109133))

(assert (=> b!100332 m!109755))

(assert (=> b!99625 d!27127))

(assert (=> b!99625 d!26925))

(assert (=> b!99625 d!26927))

(declare-fun d!27129 () Bool)

(assert (=> d!27129 (= (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49966)) (v!2820 (getValueByKey!151 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49966)))))

(assert (=> d!26769 d!27129))

(declare-fun b!100334 () Bool)

(declare-fun e!65332 () Option!157)

(declare-fun e!65333 () Option!157)

(assert (=> b!100334 (= e!65332 e!65333)))

(declare-fun c!17216 () Bool)

(assert (=> b!100334 (= c!17216 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (not (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49966))))))

(declare-fun b!100336 () Bool)

(assert (=> b!100336 (= e!65333 None!155)))

(declare-fun b!100335 () Bool)

(assert (=> b!100335 (= e!65333 (getValueByKey!151 (t!5557 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!49966))))

(declare-fun d!27131 () Bool)

(declare-fun c!17215 () Bool)

(assert (=> d!27131 (= c!17215 (and ((_ is Cons!1579) (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (= (_1!1184 (h!2174 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))) lt!49966)))))

(assert (=> d!27131 (= (getValueByKey!151 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!49966) e!65332)))

(declare-fun b!100333 () Bool)

(assert (=> b!100333 (= e!65332 (Some!156 (_2!1184 (h!2174 (toList!785 (+!136 lt!49953 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(assert (= (and d!27131 c!17215) b!100333))

(assert (= (and d!27131 (not c!17215)) b!100334))

(assert (= (and b!100334 c!17216) b!100335))

(assert (= (and b!100334 (not c!17216)) b!100336))

(declare-fun m!110885 () Bool)

(assert (=> b!100335 m!110885))

(assert (=> d!26769 d!27131))

(assert (=> b!99502 d!26965))

(declare-fun d!27133 () Bool)

(assert (=> d!27133 (= (apply!93 lt!50125 lt!50138) (get!1290 (getValueByKey!151 (toList!785 lt!50125) lt!50138)))))

(declare-fun bs!4149 () Bool)

(assert (= bs!4149 d!27133))

(declare-fun m!110887 () Bool)

(assert (=> bs!4149 m!110887))

(assert (=> bs!4149 m!110887))

(declare-fun m!110889 () Bool)

(assert (=> bs!4149 m!110889))

(assert (=> b!99445 d!27133))

(declare-fun d!27135 () Bool)

(declare-fun e!65334 () Bool)

(assert (=> d!27135 e!65334))

(declare-fun res!50337 () Bool)

(assert (=> d!27135 (=> res!50337 e!65334)))

(declare-fun lt!50710 () Bool)

(assert (=> d!27135 (= res!50337 (not lt!50710))))

(declare-fun lt!50708 () Bool)

(assert (=> d!27135 (= lt!50710 lt!50708)))

(declare-fun lt!50707 () Unit!2999)

(declare-fun e!65335 () Unit!2999)

(assert (=> d!27135 (= lt!50707 e!65335)))

(declare-fun c!17217 () Bool)

(assert (=> d!27135 (= c!17217 lt!50708)))

(assert (=> d!27135 (= lt!50708 (containsKey!155 (toList!785 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) lt!50118))))

(assert (=> d!27135 (= (contains!804 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) lt!50118) lt!50710)))

(declare-fun b!100337 () Bool)

(declare-fun lt!50709 () Unit!2999)

(assert (=> b!100337 (= e!65335 lt!50709)))

(assert (=> b!100337 (= lt!50709 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) lt!50118))))

(assert (=> b!100337 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) lt!50118))))

(declare-fun b!100338 () Bool)

(declare-fun Unit!3046 () Unit!2999)

(assert (=> b!100338 (= e!65335 Unit!3046)))

(declare-fun b!100339 () Bool)

(assert (=> b!100339 (= e!65334 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) lt!50118)))))

(assert (= (and d!27135 c!17217) b!100337))

(assert (= (and d!27135 (not c!17217)) b!100338))

(assert (= (and d!27135 (not res!50337)) b!100339))

(declare-fun m!110891 () Bool)

(assert (=> d!27135 m!110891))

(declare-fun m!110893 () Bool)

(assert (=> b!100337 m!110893))

(declare-fun m!110895 () Bool)

(assert (=> b!100337 m!110895))

(assert (=> b!100337 m!110895))

(declare-fun m!110897 () Bool)

(assert (=> b!100337 m!110897))

(assert (=> b!100339 m!110895))

(assert (=> b!100339 m!110895))

(assert (=> b!100339 m!110897))

(assert (=> b!99445 d!27135))

(declare-fun d!27137 () Bool)

(assert (=> d!27137 (= (apply!93 (+!136 lt!50124 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) lt!50121) (apply!93 lt!50124 lt!50121))))

(declare-fun lt!50711 () Unit!2999)

(assert (=> d!27137 (= lt!50711 (choose!604 lt!50124 lt!50135 (zeroValue!2383 newMap!16) lt!50121))))

(declare-fun e!65336 () Bool)

(assert (=> d!27137 e!65336))

(declare-fun res!50338 () Bool)

(assert (=> d!27137 (=> (not res!50338) (not e!65336))))

(assert (=> d!27137 (= res!50338 (contains!804 lt!50124 lt!50121))))

(assert (=> d!27137 (= (addApplyDifferent!69 lt!50124 lt!50135 (zeroValue!2383 newMap!16) lt!50121) lt!50711)))

(declare-fun b!100340 () Bool)

(assert (=> b!100340 (= e!65336 (not (= lt!50121 lt!50135)))))

(assert (= (and d!27137 res!50338) b!100340))

(declare-fun m!110899 () Bool)

(assert (=> d!27137 m!110899))

(assert (=> d!27137 m!109519))

(assert (=> d!27137 m!109517))

(assert (=> d!27137 m!109523))

(declare-fun m!110901 () Bool)

(assert (=> d!27137 m!110901))

(assert (=> d!27137 m!109517))

(assert (=> b!99445 d!27137))

(declare-fun d!27139 () Bool)

(assert (=> d!27139 (= (apply!93 lt!50124 lt!50121) (get!1290 (getValueByKey!151 (toList!785 lt!50124) lt!50121)))))

(declare-fun bs!4150 () Bool)

(assert (= bs!4150 d!27139))

(declare-fun m!110903 () Bool)

(assert (=> bs!4150 m!110903))

(assert (=> bs!4150 m!110903))

(declare-fun m!110905 () Bool)

(assert (=> bs!4150 m!110905))

(assert (=> b!99445 d!27139))

(declare-fun d!27141 () Bool)

(assert (=> d!27141 (= (apply!93 (+!136 lt!50127 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) lt!50134) (apply!93 lt!50127 lt!50134))))

(declare-fun lt!50712 () Unit!2999)

(assert (=> d!27141 (= lt!50712 (choose!604 lt!50127 lt!50132 (minValue!2383 newMap!16) lt!50134))))

(declare-fun e!65337 () Bool)

(assert (=> d!27141 e!65337))

(declare-fun res!50339 () Bool)

(assert (=> d!27141 (=> (not res!50339) (not e!65337))))

(assert (=> d!27141 (= res!50339 (contains!804 lt!50127 lt!50134))))

(assert (=> d!27141 (= (addApplyDifferent!69 lt!50127 lt!50132 (minValue!2383 newMap!16) lt!50134) lt!50712)))

(declare-fun b!100341 () Bool)

(assert (=> b!100341 (= e!65337 (not (= lt!50134 lt!50132)))))

(assert (= (and d!27141 res!50339) b!100341))

(declare-fun m!110907 () Bool)

(assert (=> d!27141 m!110907))

(assert (=> d!27141 m!109509))

(assert (=> d!27141 m!109495))

(assert (=> d!27141 m!109497))

(declare-fun m!110909 () Bool)

(assert (=> d!27141 m!110909))

(assert (=> d!27141 m!109495))

(assert (=> b!99445 d!27141))

(declare-fun d!27143 () Bool)

(declare-fun e!65338 () Bool)

(assert (=> d!27143 e!65338))

(declare-fun res!50341 () Bool)

(assert (=> d!27143 (=> (not res!50341) (not e!65338))))

(declare-fun lt!50715 () ListLongMap!1539)

(assert (=> d!27143 (= res!50341 (contains!804 lt!50715 (_1!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))))))

(declare-fun lt!50716 () List!1583)

(assert (=> d!27143 (= lt!50715 (ListLongMap!1540 lt!50716))))

(declare-fun lt!50713 () Unit!2999)

(declare-fun lt!50714 () Unit!2999)

(assert (=> d!27143 (= lt!50713 lt!50714)))

(assert (=> d!27143 (= (getValueByKey!151 lt!50716 (_1!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))))))

(assert (=> d!27143 (= lt!50714 (lemmaContainsTupThenGetReturnValue!67 lt!50716 (_1!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))))))

(assert (=> d!27143 (= lt!50716 (insertStrictlySorted!70 (toList!785 lt!50125) (_1!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))))))

(assert (=> d!27143 (= (+!136 lt!50125 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) lt!50715)))

(declare-fun b!100342 () Bool)

(declare-fun res!50340 () Bool)

(assert (=> b!100342 (=> (not res!50340) (not e!65338))))

(assert (=> b!100342 (= res!50340 (= (getValueByKey!151 (toList!785 lt!50715) (_1!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))))))))

(declare-fun b!100343 () Bool)

(assert (=> b!100343 (= e!65338 (contains!806 (toList!785 lt!50715) (tuple2!2347 lt!50133 (minValue!2383 newMap!16))))))

(assert (= (and d!27143 res!50341) b!100342))

(assert (= (and b!100342 res!50340) b!100343))

(declare-fun m!110911 () Bool)

(assert (=> d!27143 m!110911))

(declare-fun m!110913 () Bool)

(assert (=> d!27143 m!110913))

(declare-fun m!110915 () Bool)

(assert (=> d!27143 m!110915))

(declare-fun m!110917 () Bool)

(assert (=> d!27143 m!110917))

(declare-fun m!110919 () Bool)

(assert (=> b!100342 m!110919))

(declare-fun m!110921 () Bool)

(assert (=> b!100343 m!110921))

(assert (=> b!99445 d!27143))

(declare-fun d!27145 () Bool)

(assert (=> d!27145 (contains!804 (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) lt!50118)))

(declare-fun lt!50717 () Unit!2999)

(assert (=> d!27145 (= lt!50717 (choose!605 lt!50137 lt!50119 (zeroValue!2383 newMap!16) lt!50118))))

(assert (=> d!27145 (contains!804 lt!50137 lt!50118)))

(assert (=> d!27145 (= (addStillContains!69 lt!50137 lt!50119 (zeroValue!2383 newMap!16) lt!50118) lt!50717)))

(declare-fun bs!4151 () Bool)

(assert (= bs!4151 d!27145))

(assert (=> bs!4151 m!109505))

(assert (=> bs!4151 m!109505))

(assert (=> bs!4151 m!109507))

(declare-fun m!110923 () Bool)

(assert (=> bs!4151 m!110923))

(declare-fun m!110925 () Bool)

(assert (=> bs!4151 m!110925))

(assert (=> b!99445 d!27145))

(declare-fun d!27147 () Bool)

(assert (=> d!27147 (= (apply!93 lt!50127 lt!50134) (get!1290 (getValueByKey!151 (toList!785 lt!50127) lt!50134)))))

(declare-fun bs!4152 () Bool)

(assert (= bs!4152 d!27147))

(declare-fun m!110927 () Bool)

(assert (=> bs!4152 m!110927))

(assert (=> bs!4152 m!110927))

(declare-fun m!110929 () Bool)

(assert (=> bs!4152 m!110929))

(assert (=> b!99445 d!27147))

(declare-fun d!27149 () Bool)

(declare-fun e!65339 () Bool)

(assert (=> d!27149 e!65339))

(declare-fun res!50343 () Bool)

(assert (=> d!27149 (=> (not res!50343) (not e!65339))))

(declare-fun lt!50720 () ListLongMap!1539)

(assert (=> d!27149 (= res!50343 (contains!804 lt!50720 (_1!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50721 () List!1583)

(assert (=> d!27149 (= lt!50720 (ListLongMap!1540 lt!50721))))

(declare-fun lt!50718 () Unit!2999)

(declare-fun lt!50719 () Unit!2999)

(assert (=> d!27149 (= lt!50718 lt!50719)))

(assert (=> d!27149 (= (getValueByKey!151 lt!50721 (_1!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27149 (= lt!50719 (lemmaContainsTupThenGetReturnValue!67 lt!50721 (_1!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27149 (= lt!50721 (insertStrictlySorted!70 (toList!785 lt!50124) (_1!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27149 (= (+!136 lt!50124 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) lt!50720)))

(declare-fun b!100344 () Bool)

(declare-fun res!50342 () Bool)

(assert (=> b!100344 (=> (not res!50342) (not e!65339))))

(assert (=> b!100344 (= res!50342 (= (getValueByKey!151 (toList!785 lt!50720) (_1!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100345 () Bool)

(assert (=> b!100345 (= e!65339 (contains!806 (toList!785 lt!50720) (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27149 res!50343) b!100344))

(assert (= (and b!100344 res!50342) b!100345))

(declare-fun m!110931 () Bool)

(assert (=> d!27149 m!110931))

(declare-fun m!110933 () Bool)

(assert (=> d!27149 m!110933))

(declare-fun m!110935 () Bool)

(assert (=> d!27149 m!110935))

(declare-fun m!110937 () Bool)

(assert (=> d!27149 m!110937))

(declare-fun m!110939 () Bool)

(assert (=> b!100344 m!110939))

(declare-fun m!110941 () Bool)

(assert (=> b!100345 m!110941))

(assert (=> b!99445 d!27149))

(declare-fun d!27151 () Bool)

(assert (=> d!27151 (= (apply!93 (+!136 lt!50125 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) lt!50138) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50125 (tuple2!2347 lt!50133 (minValue!2383 newMap!16)))) lt!50138)))))

(declare-fun bs!4153 () Bool)

(assert (= bs!4153 d!27151))

(declare-fun m!110943 () Bool)

(assert (=> bs!4153 m!110943))

(assert (=> bs!4153 m!110943))

(declare-fun m!110945 () Bool)

(assert (=> bs!4153 m!110945))

(assert (=> b!99445 d!27151))

(declare-fun d!27153 () Bool)

(declare-fun e!65340 () Bool)

(assert (=> d!27153 e!65340))

(declare-fun res!50345 () Bool)

(assert (=> d!27153 (=> (not res!50345) (not e!65340))))

(declare-fun lt!50724 () ListLongMap!1539)

(assert (=> d!27153 (= res!50345 (contains!804 lt!50724 (_1!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50725 () List!1583)

(assert (=> d!27153 (= lt!50724 (ListLongMap!1540 lt!50725))))

(declare-fun lt!50722 () Unit!2999)

(declare-fun lt!50723 () Unit!2999)

(assert (=> d!27153 (= lt!50722 lt!50723)))

(assert (=> d!27153 (= (getValueByKey!151 lt!50725 (_1!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27153 (= lt!50723 (lemmaContainsTupThenGetReturnValue!67 lt!50725 (_1!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27153 (= lt!50725 (insertStrictlySorted!70 (toList!785 lt!50137) (_1!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27153 (= (+!136 lt!50137 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))) lt!50724)))

(declare-fun b!100346 () Bool)

(declare-fun res!50344 () Bool)

(assert (=> b!100346 (=> (not res!50344) (not e!65340))))

(assert (=> b!100346 (= res!50344 (= (getValueByKey!151 (toList!785 lt!50724) (_1!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100347 () Bool)

(assert (=> b!100347 (= e!65340 (contains!806 (toList!785 lt!50724) (tuple2!2347 lt!50119 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27153 res!50345) b!100346))

(assert (= (and b!100346 res!50344) b!100347))

(declare-fun m!110947 () Bool)

(assert (=> d!27153 m!110947))

(declare-fun m!110949 () Bool)

(assert (=> d!27153 m!110949))

(declare-fun m!110951 () Bool)

(assert (=> d!27153 m!110951))

(declare-fun m!110953 () Bool)

(assert (=> d!27153 m!110953))

(declare-fun m!110955 () Bool)

(assert (=> b!100346 m!110955))

(declare-fun m!110957 () Bool)

(assert (=> b!100347 m!110957))

(assert (=> b!99445 d!27153))

(declare-fun d!27155 () Bool)

(declare-fun e!65341 () Bool)

(assert (=> d!27155 e!65341))

(declare-fun res!50347 () Bool)

(assert (=> d!27155 (=> (not res!50347) (not e!65341))))

(declare-fun lt!50728 () ListLongMap!1539)

(assert (=> d!27155 (= res!50347 (contains!804 lt!50728 (_1!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))))))

(declare-fun lt!50729 () List!1583)

(assert (=> d!27155 (= lt!50728 (ListLongMap!1540 lt!50729))))

(declare-fun lt!50726 () Unit!2999)

(declare-fun lt!50727 () Unit!2999)

(assert (=> d!27155 (= lt!50726 lt!50727)))

(assert (=> d!27155 (= (getValueByKey!151 lt!50729 (_1!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))))))

(assert (=> d!27155 (= lt!50727 (lemmaContainsTupThenGetReturnValue!67 lt!50729 (_1!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))))))

(assert (=> d!27155 (= lt!50729 (insertStrictlySorted!70 (toList!785 lt!50127) (_1!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))))))

(assert (=> d!27155 (= (+!136 lt!50127 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) lt!50728)))

(declare-fun b!100348 () Bool)

(declare-fun res!50346 () Bool)

(assert (=> b!100348 (=> (not res!50346) (not e!65341))))

(assert (=> b!100348 (= res!50346 (= (getValueByKey!151 (toList!785 lt!50728) (_1!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))))))))

(declare-fun b!100349 () Bool)

(assert (=> b!100349 (= e!65341 (contains!806 (toList!785 lt!50728) (tuple2!2347 lt!50132 (minValue!2383 newMap!16))))))

(assert (= (and d!27155 res!50347) b!100348))

(assert (= (and b!100348 res!50346) b!100349))

(declare-fun m!110959 () Bool)

(assert (=> d!27155 m!110959))

(declare-fun m!110961 () Bool)

(assert (=> d!27155 m!110961))

(declare-fun m!110963 () Bool)

(assert (=> d!27155 m!110963))

(declare-fun m!110965 () Bool)

(assert (=> d!27155 m!110965))

(declare-fun m!110967 () Bool)

(assert (=> b!100348 m!110967))

(declare-fun m!110969 () Bool)

(assert (=> b!100349 m!110969))

(assert (=> b!99445 d!27155))

(declare-fun d!27157 () Bool)

(assert (=> d!27157 (= (apply!93 (+!136 lt!50125 (tuple2!2347 lt!50133 (minValue!2383 newMap!16))) lt!50138) (apply!93 lt!50125 lt!50138))))

(declare-fun lt!50730 () Unit!2999)

(assert (=> d!27157 (= lt!50730 (choose!604 lt!50125 lt!50133 (minValue!2383 newMap!16) lt!50138))))

(declare-fun e!65342 () Bool)

(assert (=> d!27157 e!65342))

(declare-fun res!50348 () Bool)

(assert (=> d!27157 (=> (not res!50348) (not e!65342))))

(assert (=> d!27157 (= res!50348 (contains!804 lt!50125 lt!50138))))

(assert (=> d!27157 (= (addApplyDifferent!69 lt!50125 lt!50133 (minValue!2383 newMap!16) lt!50138) lt!50730)))

(declare-fun b!100350 () Bool)

(assert (=> b!100350 (= e!65342 (not (= lt!50138 lt!50133)))))

(assert (= (and d!27157 res!50348) b!100350))

(declare-fun m!110971 () Bool)

(assert (=> d!27157 m!110971))

(assert (=> d!27157 m!109513))

(assert (=> d!27157 m!109511))

(assert (=> d!27157 m!109515))

(declare-fun m!110973 () Bool)

(assert (=> d!27157 m!110973))

(assert (=> d!27157 m!109511))

(assert (=> b!99445 d!27157))

(declare-fun d!27159 () Bool)

(assert (=> d!27159 (= (apply!93 (+!136 lt!50124 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16))) lt!50121) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50124 (tuple2!2347 lt!50135 (zeroValue!2383 newMap!16)))) lt!50121)))))

(declare-fun bs!4154 () Bool)

(assert (= bs!4154 d!27159))

(declare-fun m!110975 () Bool)

(assert (=> bs!4154 m!110975))

(assert (=> bs!4154 m!110975))

(declare-fun m!110977 () Bool)

(assert (=> bs!4154 m!110977))

(assert (=> b!99445 d!27159))

(assert (=> b!99445 d!26851))

(declare-fun d!27161 () Bool)

(assert (=> d!27161 (= (apply!93 (+!136 lt!50127 (tuple2!2347 lt!50132 (minValue!2383 newMap!16))) lt!50134) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50127 (tuple2!2347 lt!50132 (minValue!2383 newMap!16)))) lt!50134)))))

(declare-fun bs!4155 () Bool)

(assert (= bs!4155 d!27161))

(declare-fun m!110979 () Bool)

(assert (=> bs!4155 m!110979))

(assert (=> bs!4155 m!110979))

(declare-fun m!110981 () Bool)

(assert (=> bs!4155 m!110981))

(assert (=> b!99445 d!27161))

(assert (=> b!99646 d!26841))

(assert (=> b!99624 d!26895))

(assert (=> b!99624 d!26725))

(declare-fun b!100351 () Bool)

(declare-fun e!65348 () ListLongMap!1539)

(declare-fun call!10338 () ListLongMap!1539)

(assert (=> b!100351 (= e!65348 call!10338)))

(declare-fun bm!10330 () Bool)

(declare-fun call!10334 () Bool)

(declare-fun lt!50743 () ListLongMap!1539)

(assert (=> bm!10330 (= call!10334 (contains!804 lt!50743 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100352 () Bool)

(declare-fun e!65344 () Bool)

(declare-fun e!65350 () Bool)

(assert (=> b!100352 (= e!65344 e!65350)))

(declare-fun res!50350 () Bool)

(assert (=> b!100352 (= res!50350 call!10334)))

(assert (=> b!100352 (=> (not res!50350) (not e!65350))))

(declare-fun b!100353 () Bool)

(assert (=> b!100353 (= e!65344 (not call!10334))))

(declare-fun b!100355 () Bool)

(declare-fun e!65352 () Unit!2999)

(declare-fun Unit!3047 () Unit!2999)

(assert (=> b!100355 (= e!65352 Unit!3047)))

(declare-fun b!100356 () Bool)

(declare-fun e!65343 () ListLongMap!1539)

(assert (=> b!100356 (= e!65343 call!10338)))

(declare-fun b!100357 () Bool)

(declare-fun lt!50731 () Unit!2999)

(assert (=> b!100357 (= e!65352 lt!50731)))

(declare-fun lt!50751 () ListLongMap!1539)

(assert (=> b!100357 (= lt!50751 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50733 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50733 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50732 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50732 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50737 () Unit!2999)

(assert (=> b!100357 (= lt!50737 (addStillContains!69 lt!50751 lt!50733 (zeroValue!2383 newMap!16) lt!50732))))

(assert (=> b!100357 (contains!804 (+!136 lt!50751 (tuple2!2347 lt!50733 (zeroValue!2383 newMap!16))) lt!50732)))

(declare-fun lt!50740 () Unit!2999)

(assert (=> b!100357 (= lt!50740 lt!50737)))

(declare-fun lt!50741 () ListLongMap!1539)

(assert (=> b!100357 (= lt!50741 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50746 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50746 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50748 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50748 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50742 () Unit!2999)

(assert (=> b!100357 (= lt!50742 (addApplyDifferent!69 lt!50741 lt!50746 (minValue!2383 newMap!16) lt!50748))))

(assert (=> b!100357 (= (apply!93 (+!136 lt!50741 (tuple2!2347 lt!50746 (minValue!2383 newMap!16))) lt!50748) (apply!93 lt!50741 lt!50748))))

(declare-fun lt!50736 () Unit!2999)

(assert (=> b!100357 (= lt!50736 lt!50742)))

(declare-fun lt!50738 () ListLongMap!1539)

(assert (=> b!100357 (= lt!50738 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50749 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50749 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50735 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50735 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50734 () Unit!2999)

(assert (=> b!100357 (= lt!50734 (addApplyDifferent!69 lt!50738 lt!50749 (zeroValue!2383 newMap!16) lt!50735))))

(assert (=> b!100357 (= (apply!93 (+!136 lt!50738 (tuple2!2347 lt!50749 (zeroValue!2383 newMap!16))) lt!50735) (apply!93 lt!50738 lt!50735))))

(declare-fun lt!50750 () Unit!2999)

(assert (=> b!100357 (= lt!50750 lt!50734)))

(declare-fun lt!50739 () ListLongMap!1539)

(assert (=> b!100357 (= lt!50739 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50747 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50747 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50752 () (_ BitVec 64))

(assert (=> b!100357 (= lt!50752 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100357 (= lt!50731 (addApplyDifferent!69 lt!50739 lt!50747 (minValue!2383 newMap!16) lt!50752))))

(assert (=> b!100357 (= (apply!93 (+!136 lt!50739 (tuple2!2347 lt!50747 (minValue!2383 newMap!16))) lt!50752) (apply!93 lt!50739 lt!50752))))

(declare-fun b!100358 () Bool)

(declare-fun res!50357 () Bool)

(declare-fun e!65355 () Bool)

(assert (=> b!100358 (=> (not res!50357) (not e!65355))))

(declare-fun e!65351 () Bool)

(assert (=> b!100358 (= res!50357 e!65351)))

(declare-fun res!50354 () Bool)

(assert (=> b!100358 (=> res!50354 e!65351)))

(declare-fun e!65346 () Bool)

(assert (=> b!100358 (= res!50354 (not e!65346))))

(declare-fun res!50349 () Bool)

(assert (=> b!100358 (=> (not res!50349) (not e!65346))))

(assert (=> b!100358 (= res!50349 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100359 () Bool)

(declare-fun e!65354 () Bool)

(assert (=> b!100359 (= e!65354 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100360 () Bool)

(declare-fun e!65345 () Bool)

(declare-fun call!10335 () Bool)

(assert (=> b!100360 (= e!65345 (not call!10335))))

(declare-fun bm!10331 () Bool)

(declare-fun call!10337 () ListLongMap!1539)

(declare-fun call!10336 () ListLongMap!1539)

(assert (=> bm!10331 (= call!10337 call!10336)))

(declare-fun call!10339 () ListLongMap!1539)

(declare-fun bm!10332 () Bool)

(declare-fun c!17223 () Bool)

(declare-fun call!10333 () ListLongMap!1539)

(declare-fun c!17219 () Bool)

(assert (=> bm!10332 (= call!10339 (+!136 (ite c!17219 call!10336 (ite c!17223 call!10337 call!10333)) (ite (or c!17219 c!17223) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100361 () Bool)

(declare-fun e!65353 () Bool)

(assert (=> b!100361 (= e!65353 (= (apply!93 lt!50743 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100362 () Bool)

(declare-fun c!17218 () Bool)

(assert (=> b!100362 (= c!17218 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100362 (= e!65343 e!65348)))

(declare-fun b!100363 () Bool)

(declare-fun e!65349 () ListLongMap!1539)

(assert (=> b!100363 (= e!65349 e!65343)))

(assert (=> b!100363 (= c!17223 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10333 () Bool)

(assert (=> bm!10333 (= call!10335 (contains!804 lt!50743 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100364 () Bool)

(assert (=> b!100364 (= e!65355 e!65345)))

(declare-fun c!17222 () Bool)

(assert (=> b!100364 (= c!17222 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100365 () Bool)

(assert (=> b!100365 (= e!65346 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100366 () Bool)

(declare-fun res!50352 () Bool)

(assert (=> b!100366 (=> (not res!50352) (not e!65355))))

(assert (=> b!100366 (= res!50352 e!65344)))

(declare-fun c!17221 () Bool)

(assert (=> b!100366 (= c!17221 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10334 () Bool)

(assert (=> bm!10334 (= call!10333 call!10337)))

(declare-fun b!100367 () Bool)

(assert (=> b!100367 (= e!65350 (= (apply!93 lt!50743 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun bm!10335 () Bool)

(assert (=> bm!10335 (= call!10336 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!27163 () Bool)

(assert (=> d!27163 e!65355))

(declare-fun res!50355 () Bool)

(assert (=> d!27163 (=> (not res!50355) (not e!65355))))

(assert (=> d!27163 (= res!50355 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50745 () ListLongMap!1539)

(assert (=> d!27163 (= lt!50743 lt!50745)))

(declare-fun lt!50744 () Unit!2999)

(assert (=> d!27163 (= lt!50744 e!65352)))

(declare-fun c!17220 () Bool)

(assert (=> d!27163 (= c!17220 e!65354)))

(declare-fun res!50351 () Bool)

(assert (=> d!27163 (=> (not res!50351) (not e!65354))))

(assert (=> d!27163 (= res!50351 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27163 (= lt!50745 e!65349)))

(assert (=> d!27163 (= c!17219 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27163 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27163 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50743)))

(declare-fun e!65347 () Bool)

(declare-fun b!100354 () Bool)

(assert (=> b!100354 (= e!65347 (= (apply!93 lt!50743 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100354 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (array!4258 (store (arr!2022 (_values!2485 newMap!16)) (index!3161 lt!50049) (ValueCellFull!975 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2273 (_values!2485 newMap!16))))))))

(assert (=> b!100354 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100368 () Bool)

(assert (=> b!100368 (= e!65349 (+!136 call!10339 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10336 () Bool)

(assert (=> bm!10336 (= call!10338 call!10339)))

(declare-fun b!100369 () Bool)

(assert (=> b!100369 (= e!65348 call!10333)))

(declare-fun b!100370 () Bool)

(assert (=> b!100370 (= e!65345 e!65353)))

(declare-fun res!50353 () Bool)

(assert (=> b!100370 (= res!50353 call!10335)))

(assert (=> b!100370 (=> (not res!50353) (not e!65353))))

(declare-fun b!100371 () Bool)

(assert (=> b!100371 (= e!65351 e!65347)))

(declare-fun res!50356 () Bool)

(assert (=> b!100371 (=> (not res!50356) (not e!65347))))

(assert (=> b!100371 (= res!50356 (contains!804 lt!50743 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100371 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!27163 c!17219) b!100368))

(assert (= (and d!27163 (not c!17219)) b!100363))

(assert (= (and b!100363 c!17223) b!100356))

(assert (= (and b!100363 (not c!17223)) b!100362))

(assert (= (and b!100362 c!17218) b!100351))

(assert (= (and b!100362 (not c!17218)) b!100369))

(assert (= (or b!100351 b!100369) bm!10334))

(assert (= (or b!100356 bm!10334) bm!10331))

(assert (= (or b!100356 b!100351) bm!10336))

(assert (= (or b!100368 bm!10331) bm!10335))

(assert (= (or b!100368 bm!10336) bm!10332))

(assert (= (and d!27163 res!50351) b!100359))

(assert (= (and d!27163 c!17220) b!100357))

(assert (= (and d!27163 (not c!17220)) b!100355))

(assert (= (and d!27163 res!50355) b!100358))

(assert (= (and b!100358 res!50349) b!100365))

(assert (= (and b!100358 (not res!50354)) b!100371))

(assert (= (and b!100371 res!50356) b!100354))

(assert (= (and b!100358 res!50357) b!100366))

(assert (= (and b!100366 c!17221) b!100352))

(assert (= (and b!100366 (not c!17221)) b!100353))

(assert (= (and b!100352 res!50350) b!100367))

(assert (= (or b!100352 b!100353) bm!10330))

(assert (= (and b!100366 res!50352) b!100364))

(assert (= (and b!100364 c!17222) b!100370))

(assert (= (and b!100364 (not c!17222)) b!100360))

(assert (= (and b!100370 res!50353) b!100361))

(assert (= (or b!100370 b!100360) bm!10333))

(declare-fun b_lambda!4483 () Bool)

(assert (=> (not b_lambda!4483) (not b!100354)))

(assert (=> b!100354 t!5564))

(declare-fun b_and!6187 () Bool)

(assert (= b_and!6183 (and (=> t!5564 result!3303) b_and!6187)))

(assert (=> b!100354 t!5566))

(declare-fun b_and!6189 () Bool)

(assert (= b_and!6185 (and (=> t!5566 result!3305) b_and!6189)))

(assert (=> b!100354 m!109397))

(declare-fun m!110983 () Bool)

(assert (=> b!100354 m!110983))

(assert (=> b!100354 m!109401))

(assert (=> b!100354 m!110983))

(assert (=> b!100354 m!109401))

(declare-fun m!110985 () Bool)

(assert (=> b!100354 m!110985))

(assert (=> b!100354 m!109397))

(declare-fun m!110987 () Bool)

(assert (=> b!100354 m!110987))

(declare-fun m!110989 () Bool)

(assert (=> b!100367 m!110989))

(declare-fun m!110991 () Bool)

(assert (=> bm!10335 m!110991))

(assert (=> b!100365 m!109397))

(assert (=> b!100365 m!109397))

(assert (=> b!100365 m!109411))

(assert (=> b!100359 m!109397))

(assert (=> b!100359 m!109397))

(assert (=> b!100359 m!109411))

(assert (=> d!27163 m!109413))

(declare-fun m!110993 () Bool)

(assert (=> bm!10332 m!110993))

(declare-fun m!110995 () Bool)

(assert (=> b!100361 m!110995))

(assert (=> b!100371 m!109397))

(assert (=> b!100371 m!109397))

(declare-fun m!110997 () Bool)

(assert (=> b!100371 m!110997))

(declare-fun m!110999 () Bool)

(assert (=> bm!10330 m!110999))

(assert (=> b!100357 m!109397))

(declare-fun m!111001 () Bool)

(assert (=> b!100357 m!111001))

(declare-fun m!111003 () Bool)

(assert (=> b!100357 m!111003))

(declare-fun m!111005 () Bool)

(assert (=> b!100357 m!111005))

(declare-fun m!111007 () Bool)

(assert (=> b!100357 m!111007))

(declare-fun m!111009 () Bool)

(assert (=> b!100357 m!111009))

(declare-fun m!111011 () Bool)

(assert (=> b!100357 m!111011))

(declare-fun m!111013 () Bool)

(assert (=> b!100357 m!111013))

(declare-fun m!111015 () Bool)

(assert (=> b!100357 m!111015))

(declare-fun m!111017 () Bool)

(assert (=> b!100357 m!111017))

(declare-fun m!111019 () Bool)

(assert (=> b!100357 m!111019))

(assert (=> b!100357 m!111017))

(declare-fun m!111021 () Bool)

(assert (=> b!100357 m!111021))

(declare-fun m!111023 () Bool)

(assert (=> b!100357 m!111023))

(assert (=> b!100357 m!111011))

(declare-fun m!111025 () Bool)

(assert (=> b!100357 m!111025))

(declare-fun m!111027 () Bool)

(assert (=> b!100357 m!111027))

(assert (=> b!100357 m!110991))

(assert (=> b!100357 m!111023))

(declare-fun m!111029 () Bool)

(assert (=> b!100357 m!111029))

(assert (=> b!100357 m!111001))

(declare-fun m!111031 () Bool)

(assert (=> b!100368 m!111031))

(declare-fun m!111033 () Bool)

(assert (=> bm!10333 m!111033))

(assert (=> b!99624 d!27163))

(declare-fun d!27165 () Bool)

(declare-fun res!50358 () Bool)

(declare-fun e!65356 () Bool)

(assert (=> d!27165 (=> res!50358 e!65356)))

(assert (=> d!27165 (= res!50358 (and ((_ is Cons!1579) (t!5557 (toList!785 lt!49878))) (= (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (=> d!27165 (= (containsKey!155 (t!5557 (toList!785 lt!49878)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) e!65356)))

(declare-fun b!100372 () Bool)

(declare-fun e!65357 () Bool)

(assert (=> b!100372 (= e!65356 e!65357)))

(declare-fun res!50359 () Bool)

(assert (=> b!100372 (=> (not res!50359) (not e!65357))))

(assert (=> b!100372 (= res!50359 (and (or (not ((_ is Cons!1579) (t!5557 (toList!785 lt!49878)))) (bvsle (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) ((_ is Cons!1579) (t!5557 (toList!785 lt!49878))) (bvslt (_1!1184 (h!2174 (t!5557 (toList!785 lt!49878)))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(declare-fun b!100373 () Bool)

(assert (=> b!100373 (= e!65357 (containsKey!155 (t!5557 (t!5557 (toList!785 lt!49878))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!27165 (not res!50358)) b!100372))

(assert (= (and b!100372 res!50359) b!100373))

(assert (=> b!100373 m!109133))

(declare-fun m!111035 () Bool)

(assert (=> b!100373 m!111035))

(assert (=> b!99546 d!27165))

(assert (=> b!99423 d!26841))

(declare-fun d!27167 () Bool)

(assert (=> d!27167 (= (get!1290 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2820 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26753 d!27167))

(assert (=> d!26753 d!27017))

(declare-fun d!27169 () Bool)

(declare-fun e!65358 () Bool)

(assert (=> d!27169 e!65358))

(declare-fun res!50361 () Bool)

(assert (=> d!27169 (=> (not res!50361) (not e!65358))))

(declare-fun lt!50755 () ListLongMap!1539)

(assert (=> d!27169 (= res!50361 (contains!804 lt!50755 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun lt!50756 () List!1583)

(assert (=> d!27169 (= lt!50755 (ListLongMap!1540 lt!50756))))

(declare-fun lt!50753 () Unit!2999)

(declare-fun lt!50754 () Unit!2999)

(assert (=> d!27169 (= lt!50753 lt!50754)))

(assert (=> d!27169 (= (getValueByKey!151 lt!50756 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27169 (= lt!50754 (lemmaContainsTupThenGetReturnValue!67 lt!50756 (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27169 (= lt!50756 (insertStrictlySorted!70 (toList!785 call!10260) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27169 (= (+!136 call!10260 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) lt!50755)))

(declare-fun b!100374 () Bool)

(declare-fun res!50360 () Bool)

(assert (=> b!100374 (=> (not res!50360) (not e!65358))))

(assert (=> b!100374 (= res!50360 (= (getValueByKey!151 (toList!785 lt!50755) (_1!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun b!100375 () Bool)

(assert (=> b!100375 (= e!65358 (contains!806 (toList!785 lt!50755) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!27169 res!50361) b!100374))

(assert (= (and b!100374 res!50360) b!100375))

(declare-fun m!111037 () Bool)

(assert (=> d!27169 m!111037))

(declare-fun m!111039 () Bool)

(assert (=> d!27169 m!111039))

(declare-fun m!111041 () Bool)

(assert (=> d!27169 m!111041))

(declare-fun m!111043 () Bool)

(assert (=> d!27169 m!111043))

(declare-fun m!111045 () Bool)

(assert (=> b!100374 m!111045))

(declare-fun m!111047 () Bool)

(assert (=> b!100375 m!111047))

(assert (=> b!99727 d!27169))

(declare-fun b!100377 () Bool)

(declare-fun res!50363 () Bool)

(declare-fun e!65359 () Bool)

(assert (=> b!100377 (=> (not res!50363) (not e!65359))))

(assert (=> b!100377 (= res!50363 (bvsge (size!2276 (v!2816 (underlying!340 thiss!992))) (_size!478 (v!2816 (underlying!340 thiss!992)))))))

(declare-fun b!100379 () Bool)

(assert (=> b!100379 (= e!65359 (and (bvsge (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!478 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!27171 () Bool)

(declare-fun res!50365 () Bool)

(assert (=> d!27171 (=> (not res!50365) (not e!65359))))

(assert (=> d!27171 (= res!50365 (validMask!0 (mask!6609 (v!2816 (underlying!340 thiss!992)))))))

(assert (=> d!27171 (= (simpleValid!69 (v!2816 (underlying!340 thiss!992))) e!65359)))

(declare-fun b!100376 () Bool)

(declare-fun res!50362 () Bool)

(assert (=> b!100376 (=> (not res!50362) (not e!65359))))

(assert (=> b!100376 (= res!50362 (and (= (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001)) (= (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (size!2273 (_values!2485 (v!2816 (underlying!340 thiss!992))))) (bvsge (_size!478 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!478 (v!2816 (underlying!340 thiss!992))) (bvadd (mask!6609 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!100378 () Bool)

(declare-fun res!50364 () Bool)

(assert (=> b!100378 (=> (not res!50364) (not e!65359))))

(assert (=> b!100378 (= res!50364 (= (size!2276 (v!2816 (underlying!340 thiss!992))) (bvadd (_size!478 (v!2816 (underlying!340 thiss!992))) (bvsdiv (bvadd (extraKeys!2319 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!27171 res!50365) b!100376))

(assert (= (and b!100376 res!50362) b!100377))

(assert (= (and b!100377 res!50363) b!100378))

(assert (= (and b!100378 res!50364) b!100379))

(declare-fun m!111049 () Bool)

(assert (=> b!100377 m!111049))

(assert (=> d!27171 m!109165))

(assert (=> b!100378 m!111049))

(assert (=> d!26727 d!27171))

(declare-fun b!100381 () Bool)

(declare-fun e!65360 () Option!157)

(declare-fun e!65361 () Option!157)

(assert (=> b!100381 (= e!65360 e!65361)))

(declare-fun c!17225 () Bool)

(assert (=> b!100381 (= c!17225 (and ((_ is Cons!1579) (toList!785 lt!50198)) (not (= (_1!1184 (h!2174 (toList!785 lt!50198))) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100383 () Bool)

(assert (=> b!100383 (= e!65361 None!155)))

(declare-fun b!100382 () Bool)

(assert (=> b!100382 (= e!65361 (getValueByKey!151 (t!5557 (toList!785 lt!50198)) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!27173 () Bool)

(declare-fun c!17224 () Bool)

(assert (=> d!27173 (= c!17224 (and ((_ is Cons!1579) (toList!785 lt!50198)) (= (_1!1184 (h!2174 (toList!785 lt!50198))) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27173 (= (getValueByKey!151 (toList!785 lt!50198) (_1!1184 (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65360)))

(declare-fun b!100380 () Bool)

(assert (=> b!100380 (= e!65360 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50198)))))))

(assert (= (and d!27173 c!17224) b!100380))

(assert (= (and d!27173 (not c!17224)) b!100381))

(assert (= (and b!100381 c!17225) b!100382))

(assert (= (and b!100381 (not c!17225)) b!100383))

(declare-fun m!111051 () Bool)

(assert (=> b!100382 m!111051))

(assert (=> b!99599 d!27173))

(declare-fun d!27175 () Bool)

(assert (=> d!27175 (= (inRange!0 (index!3161 lt!50252) (mask!6609 newMap!16)) (and (bvsge (index!3161 lt!50252) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50252) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!99638 d!27175))

(declare-fun lt!50757 () Bool)

(declare-fun d!27177 () Bool)

(assert (=> d!27177 (= lt!50757 (select (content!104 (toList!785 lt!50222)) (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65363 () Bool)

(assert (=> d!27177 (= lt!50757 e!65363)))

(declare-fun res!50366 () Bool)

(assert (=> d!27177 (=> (not res!50366) (not e!65363))))

(assert (=> d!27177 (= res!50366 ((_ is Cons!1579) (toList!785 lt!50222)))))

(assert (=> d!27177 (= (contains!806 (toList!785 lt!50222) (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50757)))

(declare-fun b!100384 () Bool)

(declare-fun e!65362 () Bool)

(assert (=> b!100384 (= e!65363 e!65362)))

(declare-fun res!50367 () Bool)

(assert (=> b!100384 (=> res!50367 e!65362)))

(assert (=> b!100384 (= res!50367 (= (h!2174 (toList!785 lt!50222)) (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100385 () Bool)

(assert (=> b!100385 (= e!65362 (contains!806 (t!5557 (toList!785 lt!50222)) (tuple2!2347 lt!49947 (zeroValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!27177 res!50366) b!100384))

(assert (= (and b!100384 (not res!50367)) b!100385))

(declare-fun m!111053 () Bool)

(assert (=> d!27177 m!111053))

(declare-fun m!111055 () Bool)

(assert (=> d!27177 m!111055))

(declare-fun m!111057 () Bool)

(assert (=> b!100385 m!111057))

(assert (=> b!99616 d!27177))

(declare-fun d!27179 () Bool)

(declare-fun lt!50758 () Bool)

(assert (=> d!27179 (= lt!50758 (select (content!103 Nil!1581) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65365 () Bool)

(assert (=> d!27179 (= lt!50758 e!65365)))

(declare-fun res!50369 () Bool)

(assert (=> d!27179 (=> (not res!50369) (not e!65365))))

(assert (=> d!27179 (= res!50369 ((_ is Cons!1580) Nil!1581))))

(assert (=> d!27179 (= (contains!805 Nil!1581 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50758)))

(declare-fun b!100386 () Bool)

(declare-fun e!65364 () Bool)

(assert (=> b!100386 (= e!65365 e!65364)))

(declare-fun res!50368 () Bool)

(assert (=> b!100386 (=> res!50368 e!65364)))

(assert (=> b!100386 (= res!50368 (= (h!2175 Nil!1581) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100387 () Bool)

(assert (=> b!100387 (= e!65364 (contains!805 (t!5558 Nil!1581) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!27179 res!50369) b!100386))

(assert (= (and b!100386 (not res!50368)) b!100387))

(assert (=> d!27179 m!109457))

(assert (=> d!27179 m!109397))

(declare-fun m!111059 () Bool)

(assert (=> d!27179 m!111059))

(assert (=> b!100387 m!109397))

(declare-fun m!111061 () Bool)

(assert (=> b!100387 m!111061))

(assert (=> b!99642 d!27179))

(assert (=> b!99700 d!26811))

(declare-fun d!27181 () Bool)

(declare-fun e!65366 () Bool)

(assert (=> d!27181 e!65366))

(declare-fun res!50371 () Bool)

(assert (=> d!27181 (=> (not res!50371) (not e!65366))))

(declare-fun lt!50761 () ListLongMap!1539)

(assert (=> d!27181 (= res!50371 (contains!804 lt!50761 (_1!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50762 () List!1583)

(assert (=> d!27181 (= lt!50761 (ListLongMap!1540 lt!50762))))

(declare-fun lt!50759 () Unit!2999)

(declare-fun lt!50760 () Unit!2999)

(assert (=> d!27181 (= lt!50759 lt!50760)))

(assert (=> d!27181 (= (getValueByKey!151 lt!50762 (_1!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27181 (= lt!50760 (lemmaContainsTupThenGetReturnValue!67 lt!50762 (_1!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27181 (= lt!50762 (insertStrictlySorted!70 (toList!785 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27181 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50761)))

(declare-fun b!100388 () Bool)

(declare-fun res!50370 () Bool)

(assert (=> b!100388 (=> (not res!50370) (not e!65366))))

(assert (=> b!100388 (= res!50370 (= (getValueByKey!151 (toList!785 lt!50761) (_1!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100389 () Bool)

(assert (=> b!100389 (= e!65366 (contains!806 (toList!785 lt!50761) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27181 res!50371) b!100388))

(assert (= (and b!100388 res!50370) b!100389))

(declare-fun m!111063 () Bool)

(assert (=> d!27181 m!111063))

(declare-fun m!111065 () Bool)

(assert (=> d!27181 m!111065))

(declare-fun m!111067 () Bool)

(assert (=> d!27181 m!111067))

(declare-fun m!111069 () Bool)

(assert (=> d!27181 m!111069))

(declare-fun m!111071 () Bool)

(assert (=> b!100388 m!111071))

(declare-fun m!111073 () Bool)

(assert (=> b!100389 m!111073))

(assert (=> d!26723 d!27181))

(declare-fun b!100390 () Bool)

(declare-fun e!65372 () ListLongMap!1539)

(declare-fun call!10345 () ListLongMap!1539)

(assert (=> b!100390 (= e!65372 call!10345)))

(declare-fun bm!10337 () Bool)

(declare-fun call!10341 () Bool)

(declare-fun lt!50775 () ListLongMap!1539)

(assert (=> bm!10337 (= call!10341 (contains!804 lt!50775 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100391 () Bool)

(declare-fun e!65368 () Bool)

(declare-fun e!65374 () Bool)

(assert (=> b!100391 (= e!65368 e!65374)))

(declare-fun res!50373 () Bool)

(assert (=> b!100391 (= res!50373 call!10341)))

(assert (=> b!100391 (=> (not res!50373) (not e!65374))))

(declare-fun b!100392 () Bool)

(assert (=> b!100392 (= e!65368 (not call!10341))))

(declare-fun b!100394 () Bool)

(declare-fun e!65376 () Unit!2999)

(declare-fun Unit!3048 () Unit!2999)

(assert (=> b!100394 (= e!65376 Unit!3048)))

(declare-fun b!100395 () Bool)

(declare-fun e!65367 () ListLongMap!1539)

(assert (=> b!100395 (= e!65367 call!10345)))

(declare-fun b!100396 () Bool)

(declare-fun lt!50763 () Unit!2999)

(assert (=> b!100396 (= e!65376 lt!50763)))

(declare-fun lt!50783 () ListLongMap!1539)

(assert (=> b!100396 (= lt!50783 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50765 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50765 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50764 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50764 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50769 () Unit!2999)

(assert (=> b!100396 (= lt!50769 (addStillContains!69 lt!50783 lt!50765 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50764))))

(assert (=> b!100396 (contains!804 (+!136 lt!50783 (tuple2!2347 lt!50765 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50764)))

(declare-fun lt!50772 () Unit!2999)

(assert (=> b!100396 (= lt!50772 lt!50769)))

(declare-fun lt!50773 () ListLongMap!1539)

(assert (=> b!100396 (= lt!50773 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50778 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50778 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50780 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50780 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50774 () Unit!2999)

(assert (=> b!100396 (= lt!50774 (addApplyDifferent!69 lt!50773 lt!50778 (minValue!2383 newMap!16) lt!50780))))

(assert (=> b!100396 (= (apply!93 (+!136 lt!50773 (tuple2!2347 lt!50778 (minValue!2383 newMap!16))) lt!50780) (apply!93 lt!50773 lt!50780))))

(declare-fun lt!50768 () Unit!2999)

(assert (=> b!100396 (= lt!50768 lt!50774)))

(declare-fun lt!50770 () ListLongMap!1539)

(assert (=> b!100396 (= lt!50770 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50781 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50781 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50767 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50767 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50766 () Unit!2999)

(assert (=> b!100396 (= lt!50766 (addApplyDifferent!69 lt!50770 lt!50781 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50767))))

(assert (=> b!100396 (= (apply!93 (+!136 lt!50770 (tuple2!2347 lt!50781 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50767) (apply!93 lt!50770 lt!50767))))

(declare-fun lt!50782 () Unit!2999)

(assert (=> b!100396 (= lt!50782 lt!50766)))

(declare-fun lt!50771 () ListLongMap!1539)

(assert (=> b!100396 (= lt!50771 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50779 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50779 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50784 () (_ BitVec 64))

(assert (=> b!100396 (= lt!50784 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100396 (= lt!50763 (addApplyDifferent!69 lt!50771 lt!50779 (minValue!2383 newMap!16) lt!50784))))

(assert (=> b!100396 (= (apply!93 (+!136 lt!50771 (tuple2!2347 lt!50779 (minValue!2383 newMap!16))) lt!50784) (apply!93 lt!50771 lt!50784))))

(declare-fun b!100397 () Bool)

(declare-fun res!50380 () Bool)

(declare-fun e!65379 () Bool)

(assert (=> b!100397 (=> (not res!50380) (not e!65379))))

(declare-fun e!65375 () Bool)

(assert (=> b!100397 (= res!50380 e!65375)))

(declare-fun res!50377 () Bool)

(assert (=> b!100397 (=> res!50377 e!65375)))

(declare-fun e!65370 () Bool)

(assert (=> b!100397 (= res!50377 (not e!65370))))

(declare-fun res!50372 () Bool)

(assert (=> b!100397 (=> (not res!50372) (not e!65370))))

(assert (=> b!100397 (= res!50372 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100398 () Bool)

(declare-fun e!65378 () Bool)

(assert (=> b!100398 (= e!65378 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100399 () Bool)

(declare-fun e!65369 () Bool)

(declare-fun call!10342 () Bool)

(assert (=> b!100399 (= e!65369 (not call!10342))))

(declare-fun bm!10338 () Bool)

(declare-fun call!10344 () ListLongMap!1539)

(declare-fun call!10343 () ListLongMap!1539)

(assert (=> bm!10338 (= call!10344 call!10343)))

(declare-fun c!17227 () Bool)

(declare-fun bm!10339 () Bool)

(declare-fun call!10340 () ListLongMap!1539)

(declare-fun c!17231 () Bool)

(declare-fun call!10346 () ListLongMap!1539)

(assert (=> bm!10339 (= call!10346 (+!136 (ite c!17227 call!10343 (ite c!17231 call!10344 call!10340)) (ite (or c!17227 c!17231) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100400 () Bool)

(declare-fun e!65377 () Bool)

(assert (=> b!100400 (= e!65377 (= (apply!93 lt!50775 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100401 () Bool)

(declare-fun c!17226 () Bool)

(assert (=> b!100401 (= c!17226 (and (not (= (bvand lt!50059 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!50059 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100401 (= e!65367 e!65372)))

(declare-fun b!100402 () Bool)

(declare-fun e!65373 () ListLongMap!1539)

(assert (=> b!100402 (= e!65373 e!65367)))

(assert (=> b!100402 (= c!17231 (and (not (= (bvand lt!50059 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!50059 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10340 () Bool)

(assert (=> bm!10340 (= call!10342 (contains!804 lt!50775 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100403 () Bool)

(assert (=> b!100403 (= e!65379 e!65369)))

(declare-fun c!17230 () Bool)

(assert (=> b!100403 (= c!17230 (not (= (bvand lt!50059 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100404 () Bool)

(assert (=> b!100404 (= e!65370 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100405 () Bool)

(declare-fun res!50375 () Bool)

(assert (=> b!100405 (=> (not res!50375) (not e!65379))))

(assert (=> b!100405 (= res!50375 e!65368)))

(declare-fun c!17229 () Bool)

(assert (=> b!100405 (= c!17229 (not (= (bvand lt!50059 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!10341 () Bool)

(assert (=> bm!10341 (= call!10340 call!10344)))

(declare-fun b!100406 () Bool)

(assert (=> b!100406 (= e!65374 (= (apply!93 lt!50775 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10342 () Bool)

(assert (=> bm!10342 (= call!10343 (getCurrentListMapNoExtraKeys!101 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun d!27183 () Bool)

(assert (=> d!27183 e!65379))

(declare-fun res!50378 () Bool)

(assert (=> d!27183 (=> (not res!50378) (not e!65379))))

(assert (=> d!27183 (= res!50378 (or (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))))

(declare-fun lt!50777 () ListLongMap!1539)

(assert (=> d!27183 (= lt!50775 lt!50777)))

(declare-fun lt!50776 () Unit!2999)

(assert (=> d!27183 (= lt!50776 e!65376)))

(declare-fun c!17228 () Bool)

(assert (=> d!27183 (= c!17228 e!65378)))

(declare-fun res!50374 () Bool)

(assert (=> d!27183 (=> (not res!50374) (not e!65378))))

(assert (=> d!27183 (= res!50374 (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27183 (= lt!50777 e!65373)))

(assert (=> d!27183 (= c!17227 (and (not (= (bvand lt!50059 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!50059 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27183 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27183 (= (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50775)))

(declare-fun b!100393 () Bool)

(declare-fun e!65371 () Bool)

(assert (=> b!100393 (= e!65371 (= (apply!93 lt!50775 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100393 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2273 (_values!2485 newMap!16))))))

(assert (=> b!100393 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100407 () Bool)

(assert (=> b!100407 (= e!65373 (+!136 call!10346 (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(declare-fun bm!10343 () Bool)

(assert (=> bm!10343 (= call!10345 call!10346)))

(declare-fun b!100408 () Bool)

(assert (=> b!100408 (= e!65372 call!10340)))

(declare-fun b!100409 () Bool)

(assert (=> b!100409 (= e!65369 e!65377)))

(declare-fun res!50376 () Bool)

(assert (=> b!100409 (= res!50376 call!10342)))

(assert (=> b!100409 (=> (not res!50376) (not e!65377))))

(declare-fun b!100410 () Bool)

(assert (=> b!100410 (= e!65375 e!65371)))

(declare-fun res!50379 () Bool)

(assert (=> b!100410 (=> (not res!50379) (not e!65371))))

(assert (=> b!100410 (= res!50379 (contains!804 lt!50775 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100410 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_keys!4196 newMap!16))))))

(assert (= (and d!27183 c!17227) b!100407))

(assert (= (and d!27183 (not c!17227)) b!100402))

(assert (= (and b!100402 c!17231) b!100395))

(assert (= (and b!100402 (not c!17231)) b!100401))

(assert (= (and b!100401 c!17226) b!100390))

(assert (= (and b!100401 (not c!17226)) b!100408))

(assert (= (or b!100390 b!100408) bm!10341))

(assert (= (or b!100395 bm!10341) bm!10338))

(assert (= (or b!100395 b!100390) bm!10343))

(assert (= (or b!100407 bm!10338) bm!10342))

(assert (= (or b!100407 bm!10343) bm!10339))

(assert (= (and d!27183 res!50374) b!100398))

(assert (= (and d!27183 c!17228) b!100396))

(assert (= (and d!27183 (not c!17228)) b!100394))

(assert (= (and d!27183 res!50378) b!100397))

(assert (= (and b!100397 res!50372) b!100404))

(assert (= (and b!100397 (not res!50377)) b!100410))

(assert (= (and b!100410 res!50379) b!100393))

(assert (= (and b!100397 res!50380) b!100405))

(assert (= (and b!100405 c!17229) b!100391))

(assert (= (and b!100405 (not c!17229)) b!100392))

(assert (= (and b!100391 res!50373) b!100406))

(assert (= (or b!100391 b!100392) bm!10337))

(assert (= (and b!100405 res!50375) b!100403))

(assert (= (and b!100403 c!17230) b!100409))

(assert (= (and b!100403 (not c!17230)) b!100399))

(assert (= (and b!100409 res!50376) b!100400))

(assert (= (or b!100409 b!100399) bm!10340))

(declare-fun b_lambda!4485 () Bool)

(assert (=> (not b_lambda!4485) (not b!100393)))

(assert (=> b!100393 t!5564))

(declare-fun b_and!6191 () Bool)

(assert (= b_and!6187 (and (=> t!5564 result!3303) b_and!6191)))

(assert (=> b!100393 t!5566))

(declare-fun b_and!6193 () Bool)

(assert (= b_and!6189 (and (=> t!5566 result!3305) b_and!6193)))

(assert (=> b!100393 m!109397))

(assert (=> b!100393 m!109477))

(assert (=> b!100393 m!109401))

(assert (=> b!100393 m!109477))

(assert (=> b!100393 m!109401))

(assert (=> b!100393 m!109479))

(assert (=> b!100393 m!109397))

(declare-fun m!111075 () Bool)

(assert (=> b!100393 m!111075))

(declare-fun m!111077 () Bool)

(assert (=> b!100406 m!111077))

(assert (=> bm!10342 m!109159))

(declare-fun m!111079 () Bool)

(assert (=> bm!10342 m!111079))

(assert (=> b!100404 m!109397))

(assert (=> b!100404 m!109397))

(assert (=> b!100404 m!109411))

(assert (=> b!100398 m!109397))

(assert (=> b!100398 m!109397))

(assert (=> b!100398 m!109411))

(assert (=> d!27183 m!109413))

(declare-fun m!111081 () Bool)

(assert (=> bm!10339 m!111081))

(declare-fun m!111083 () Bool)

(assert (=> b!100400 m!111083))

(assert (=> b!100410 m!109397))

(assert (=> b!100410 m!109397))

(declare-fun m!111085 () Bool)

(assert (=> b!100410 m!111085))

(declare-fun m!111087 () Bool)

(assert (=> bm!10337 m!111087))

(assert (=> b!100396 m!109397))

(declare-fun m!111089 () Bool)

(assert (=> b!100396 m!111089))

(declare-fun m!111091 () Bool)

(assert (=> b!100396 m!111091))

(declare-fun m!111093 () Bool)

(assert (=> b!100396 m!111093))

(assert (=> b!100396 m!109159))

(declare-fun m!111095 () Bool)

(assert (=> b!100396 m!111095))

(declare-fun m!111097 () Bool)

(assert (=> b!100396 m!111097))

(declare-fun m!111099 () Bool)

(assert (=> b!100396 m!111099))

(declare-fun m!111101 () Bool)

(assert (=> b!100396 m!111101))

(declare-fun m!111103 () Bool)

(assert (=> b!100396 m!111103))

(declare-fun m!111105 () Bool)

(assert (=> b!100396 m!111105))

(declare-fun m!111107 () Bool)

(assert (=> b!100396 m!111107))

(assert (=> b!100396 m!111105))

(declare-fun m!111109 () Bool)

(assert (=> b!100396 m!111109))

(declare-fun m!111111 () Bool)

(assert (=> b!100396 m!111111))

(assert (=> b!100396 m!111099))

(declare-fun m!111113 () Bool)

(assert (=> b!100396 m!111113))

(assert (=> b!100396 m!109159))

(declare-fun m!111115 () Bool)

(assert (=> b!100396 m!111115))

(assert (=> b!100396 m!109159))

(assert (=> b!100396 m!111079))

(assert (=> b!100396 m!111111))

(declare-fun m!111117 () Bool)

(assert (=> b!100396 m!111117))

(assert (=> b!100396 m!111089))

(declare-fun m!111119 () Bool)

(assert (=> b!100407 m!111119))

(declare-fun m!111121 () Bool)

(assert (=> bm!10340 m!111121))

(assert (=> d!26723 d!27183))

(assert (=> d!26723 d!26871))

(declare-fun d!27185 () Bool)

(assert (=> d!27185 (= (+!136 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50059 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27185 true))

(declare-fun _$7!86 () Unit!2999)

(assert (=> d!27185 (= (choose!602 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50059 (zeroValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)) _$7!86)))

(declare-fun bs!4156 () Bool)

(assert (= bs!4156 d!27185))

(assert (=> bs!4156 m!109221))

(assert (=> bs!4156 m!109221))

(assert (=> bs!4156 m!109473))

(assert (=> bs!4156 m!109159))

(assert (=> bs!4156 m!109475))

(assert (=> d!26723 d!27185))

(assert (=> d!26723 d!26725))

(assert (=> b!99560 d!27049))

(declare-fun d!27187 () Bool)

(declare-fun res!50381 () Bool)

(declare-fun e!65380 () Bool)

(assert (=> d!27187 (=> res!50381 e!65380)))

(assert (=> d!27187 (= res!50381 (and ((_ is Cons!1579) (toList!785 lt!49957)) (= (_1!1184 (h!2174 (toList!785 lt!49957))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!27187 (= (containsKey!155 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65380)))

(declare-fun b!100411 () Bool)

(declare-fun e!65381 () Bool)

(assert (=> b!100411 (= e!65380 e!65381)))

(declare-fun res!50382 () Bool)

(assert (=> b!100411 (=> (not res!50382) (not e!65381))))

(assert (=> b!100411 (= res!50382 (and (or (not ((_ is Cons!1579) (toList!785 lt!49957))) (bvsle (_1!1184 (h!2174 (toList!785 lt!49957))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1579) (toList!785 lt!49957)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49957))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!100412 () Bool)

(assert (=> b!100412 (= e!65381 (containsKey!155 (t!5557 (toList!785 lt!49957)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!27187 (not res!50381)) b!100411))

(assert (= (and b!100411 res!50382) b!100412))

(assert (=> b!100412 m!109223))

(declare-fun m!111123 () Bool)

(assert (=> b!100412 m!111123))

(assert (=> d!26721 d!27187))

(declare-fun d!27189 () Bool)

(declare-fun e!65382 () Bool)

(assert (=> d!27189 e!65382))

(declare-fun res!50383 () Bool)

(assert (=> d!27189 (=> res!50383 e!65382)))

(declare-fun lt!50788 () Bool)

(assert (=> d!27189 (= res!50383 (not lt!50788))))

(declare-fun lt!50786 () Bool)

(assert (=> d!27189 (= lt!50788 lt!50786)))

(declare-fun lt!50785 () Unit!2999)

(declare-fun e!65383 () Unit!2999)

(assert (=> d!27189 (= lt!50785 e!65383)))

(declare-fun c!17232 () Bool)

(assert (=> d!27189 (= c!17232 lt!50786)))

(assert (=> d!27189 (= lt!50786 (containsKey!155 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27189 (= (contains!804 lt!50079 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!50788)))

(declare-fun b!100413 () Bool)

(declare-fun lt!50787 () Unit!2999)

(assert (=> b!100413 (= e!65383 lt!50787)))

(assert (=> b!100413 (= lt!50787 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!100413 (isDefined!104 (getValueByKey!151 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100414 () Bool)

(declare-fun Unit!3049 () Unit!2999)

(assert (=> b!100414 (= e!65383 Unit!3049)))

(declare-fun b!100415 () Bool)

(assert (=> b!100415 (= e!65382 (isDefined!104 (getValueByKey!151 (toList!785 lt!50079) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (= (and d!27189 c!17232) b!100413))

(assert (= (and d!27189 (not c!17232)) b!100414))

(assert (= (and d!27189 (not res!50383)) b!100415))

(declare-fun m!111125 () Bool)

(assert (=> d!27189 m!111125))

(declare-fun m!111127 () Bool)

(assert (=> b!100413 m!111127))

(assert (=> b!100413 m!109381))

(assert (=> b!100413 m!109381))

(declare-fun m!111129 () Bool)

(assert (=> b!100413 m!111129))

(assert (=> b!100415 m!109381))

(assert (=> b!100415 m!109381))

(assert (=> b!100415 m!111129))

(assert (=> d!26709 d!27189))

(declare-fun b!100417 () Bool)

(declare-fun e!65384 () Option!157)

(declare-fun e!65385 () Option!157)

(assert (=> b!100417 (= e!65384 e!65385)))

(declare-fun c!17234 () Bool)

(assert (=> b!100417 (= c!17234 (and ((_ is Cons!1579) lt!50080) (not (= (_1!1184 (h!2174 lt!50080)) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(declare-fun b!100419 () Bool)

(assert (=> b!100419 (= e!65385 None!155)))

(declare-fun b!100418 () Bool)

(assert (=> b!100418 (= e!65385 (getValueByKey!151 (t!5557 lt!50080) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun d!27191 () Bool)

(declare-fun c!17233 () Bool)

(assert (=> d!27191 (= c!17233 (and ((_ is Cons!1579) lt!50080) (= (_1!1184 (h!2174 lt!50080)) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (=> d!27191 (= (getValueByKey!151 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) e!65384)))

(declare-fun b!100416 () Bool)

(assert (=> b!100416 (= e!65384 (Some!156 (_2!1184 (h!2174 lt!50080))))))

(assert (= (and d!27191 c!17233) b!100416))

(assert (= (and d!27191 (not c!17233)) b!100417))

(assert (= (and b!100417 c!17234) b!100418))

(assert (= (and b!100417 (not c!17234)) b!100419))

(declare-fun m!111131 () Bool)

(assert (=> b!100418 m!111131))

(assert (=> d!26709 d!27191))

(declare-fun d!27193 () Bool)

(assert (=> d!27193 (= (getValueByKey!151 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) (Some!156 (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun lt!50789 () Unit!2999)

(assert (=> d!27193 (= lt!50789 (choose!611 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun e!65386 () Bool)

(assert (=> d!27193 e!65386))

(declare-fun res!50384 () Bool)

(assert (=> d!27193 (=> (not res!50384) (not e!65386))))

(assert (=> d!27193 (= res!50384 (isStrictlySorted!305 lt!50080))))

(assert (=> d!27193 (= (lemmaContainsTupThenGetReturnValue!67 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!50789)))

(declare-fun b!100420 () Bool)

(declare-fun res!50385 () Bool)

(assert (=> b!100420 (=> (not res!50385) (not e!65386))))

(assert (=> b!100420 (= res!50385 (containsKey!155 lt!50080 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100421 () Bool)

(assert (=> b!100421 (= e!65386 (contains!806 lt!50080 (tuple2!2347 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (= (and d!27193 res!50384) b!100420))

(assert (= (and b!100420 res!50385) b!100421))

(assert (=> d!27193 m!109375))

(declare-fun m!111133 () Bool)

(assert (=> d!27193 m!111133))

(declare-fun m!111135 () Bool)

(assert (=> d!27193 m!111135))

(declare-fun m!111137 () Bool)

(assert (=> b!100420 m!111137))

(declare-fun m!111139 () Bool)

(assert (=> b!100421 m!111139))

(assert (=> d!26709 d!27193))

(declare-fun call!10347 () List!1583)

(declare-fun c!17238 () Bool)

(declare-fun e!65387 () List!1583)

(declare-fun bm!10344 () Bool)

(assert (=> bm!10344 (= call!10347 ($colon$colon!79 e!65387 (ite c!17238 (h!2174 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (tuple2!2347 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))))

(declare-fun c!17235 () Bool)

(assert (=> bm!10344 (= c!17235 c!17238)))

(declare-fun b!100422 () Bool)

(declare-fun e!65388 () List!1583)

(declare-fun e!65390 () List!1583)

(assert (=> b!100422 (= e!65388 e!65390)))

(declare-fun c!17237 () Bool)

(assert (=> b!100422 (= c!17237 (and ((_ is Cons!1579) (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (= (_1!1184 (h!2174 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100423 () Bool)

(declare-fun res!50387 () Bool)

(declare-fun e!65391 () Bool)

(assert (=> b!100423 (=> (not res!50387) (not e!65391))))

(declare-fun lt!50790 () List!1583)

(assert (=> b!100423 (= res!50387 (containsKey!155 lt!50790 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun c!17236 () Bool)

(declare-fun b!100424 () Bool)

(assert (=> b!100424 (= e!65387 (ite c!17237 (t!5557 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (ite c!17236 (Cons!1579 (h!2174 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (t!5557 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))))) Nil!1580)))))

(declare-fun b!100425 () Bool)

(declare-fun e!65389 () List!1583)

(declare-fun call!10348 () List!1583)

(assert (=> b!100425 (= e!65389 call!10348)))

(declare-fun b!100426 () Bool)

(assert (=> b!100426 (= e!65389 call!10348)))

(declare-fun d!27195 () Bool)

(assert (=> d!27195 e!65391))

(declare-fun res!50386 () Bool)

(assert (=> d!27195 (=> (not res!50386) (not e!65391))))

(assert (=> d!27195 (= res!50386 (isStrictlySorted!305 lt!50790))))

(assert (=> d!27195 (= lt!50790 e!65388)))

(assert (=> d!27195 (= c!17238 (and ((_ is Cons!1579) (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (bvslt (_1!1184 (h!2174 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (=> d!27195 (isStrictlySorted!305 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))))))

(assert (=> d!27195 (= (insertStrictlySorted!70 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))) lt!50790)))

(declare-fun b!100427 () Bool)

(assert (=> b!100427 (= c!17236 (and ((_ is Cons!1579) (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (bvsgt (_1!1184 (h!2174 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129))))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(assert (=> b!100427 (= e!65390 e!65389)))

(declare-fun bm!10345 () Bool)

(declare-fun call!10349 () List!1583)

(assert (=> bm!10345 (= call!10349 call!10347)))

(declare-fun b!100428 () Bool)

(assert (=> b!100428 (= e!65390 call!10349)))

(declare-fun b!100429 () Bool)

(assert (=> b!100429 (= e!65391 (contains!806 lt!50790 (tuple2!2347 (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun bm!10346 () Bool)

(assert (=> bm!10346 (= call!10348 call!10349)))

(declare-fun b!100430 () Bool)

(assert (=> b!100430 (= e!65388 call!10347)))

(declare-fun b!100431 () Bool)

(assert (=> b!100431 (= e!65387 (insertStrictlySorted!70 (t!5557 (toList!785 (ite c!16903 call!10132 (ite c!16907 call!10133 call!10129)))) (_1!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (_2!1184 (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27195 c!17238) b!100430))

(assert (= (and d!27195 (not c!17238)) b!100422))

(assert (= (and b!100422 c!17237) b!100428))

(assert (= (and b!100422 (not c!17237)) b!100427))

(assert (= (and b!100427 c!17236) b!100425))

(assert (= (and b!100427 (not c!17236)) b!100426))

(assert (= (or b!100425 b!100426) bm!10346))

(assert (= (or b!100428 bm!10346) bm!10345))

(assert (= (or b!100430 bm!10345) bm!10344))

(assert (= (and bm!10344 c!17235) b!100431))

(assert (= (and bm!10344 (not c!17235)) b!100424))

(assert (= (and d!27195 res!50386) b!100423))

(assert (= (and b!100423 res!50387) b!100429))

(declare-fun m!111141 () Bool)

(assert (=> bm!10344 m!111141))

(declare-fun m!111143 () Bool)

(assert (=> b!100423 m!111143))

(declare-fun m!111145 () Bool)

(assert (=> b!100431 m!111145))

(declare-fun m!111147 () Bool)

(assert (=> b!100429 m!111147))

(declare-fun m!111149 () Bool)

(assert (=> d!27195 m!111149))

(declare-fun m!111151 () Bool)

(assert (=> d!27195 m!111151))

(assert (=> d!26709 d!27195))

(declare-fun d!27197 () Bool)

(assert (=> d!27197 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000)))

(declare-fun lt!50791 () Unit!2999)

(assert (=> d!27197 (= lt!50791 (choose!13 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000))))

(assert (=> d!27197 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!27197 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000) lt!50791)))

(declare-fun bs!4157 () Bool)

(assert (= bs!4157 d!27197))

(assert (=> bs!4157 m!109575))

(declare-fun m!111153 () Bool)

(assert (=> bs!4157 m!111153))

(assert (=> b!99515 d!27197))

(declare-fun d!27199 () Bool)

(declare-fun res!50388 () Bool)

(declare-fun e!65392 () Bool)

(assert (=> d!27199 (=> res!50388 e!65392)))

(assert (=> d!27199 (= res!50388 (= (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) lt!50174))))

(assert (=> d!27199 (= (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50174 #b00000000000000000000000000000000) e!65392)))

(declare-fun b!100432 () Bool)

(declare-fun e!65393 () Bool)

(assert (=> b!100432 (= e!65392 e!65393)))

(declare-fun res!50389 () Bool)

(assert (=> b!100432 (=> (not res!50389) (not e!65393))))

(assert (=> b!100432 (= res!50389 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100433 () Bool)

(assert (=> b!100433 (= e!65393 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50174 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!27199 (not res!50388)) b!100432))

(assert (= (and b!100432 res!50389) b!100433))

(assert (=> d!27199 m!109397))

(declare-fun m!111155 () Bool)

(assert (=> b!100433 m!111155))

(assert (=> b!99515 d!27199))

(declare-fun b!100434 () Bool)

(declare-fun e!65396 () SeekEntryResult!254)

(declare-fun lt!50793 () SeekEntryResult!254)

(assert (=> b!100434 (= e!65396 (seekKeyOrZeroReturnVacant!0 (x!13104 lt!50793) (index!3162 lt!50793) (index!3162 lt!50793) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100435 () Bool)

(declare-fun e!65394 () SeekEntryResult!254)

(assert (=> b!100435 (= e!65394 (Found!254 (index!3162 lt!50793)))))

(declare-fun b!100436 () Bool)

(assert (=> b!100436 (= e!65396 (MissingZero!254 (index!3162 lt!50793)))))

(declare-fun b!100437 () Bool)

(declare-fun c!17239 () Bool)

(declare-fun lt!50794 () (_ BitVec 64))

(assert (=> b!100437 (= c!17239 (= lt!50794 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100437 (= e!65394 e!65396)))

(declare-fun b!100438 () Bool)

(declare-fun e!65395 () SeekEntryResult!254)

(assert (=> b!100438 (= e!65395 e!65394)))

(assert (=> b!100438 (= lt!50794 (select (arr!2021 (_keys!4196 newMap!16)) (index!3162 lt!50793)))))

(declare-fun c!17240 () Bool)

(assert (=> b!100438 (= c!17240 (= lt!50794 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100439 () Bool)

(assert (=> b!100439 (= e!65395 Undefined!254)))

(declare-fun d!27201 () Bool)

(declare-fun lt!50792 () SeekEntryResult!254)

(assert (=> d!27201 (and (or ((_ is Undefined!254) lt!50792) (not ((_ is Found!254) lt!50792)) (and (bvsge (index!3161 lt!50792) #b00000000000000000000000000000000) (bvslt (index!3161 lt!50792) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50792) ((_ is Found!254) lt!50792) (not ((_ is MissingZero!254) lt!50792)) (and (bvsge (index!3160 lt!50792) #b00000000000000000000000000000000) (bvslt (index!3160 lt!50792) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50792) ((_ is Found!254) lt!50792) ((_ is MissingZero!254) lt!50792) (not ((_ is MissingVacant!254) lt!50792)) (and (bvsge (index!3163 lt!50792) #b00000000000000000000000000000000) (bvslt (index!3163 lt!50792) (size!2272 (_keys!4196 newMap!16))))) (or ((_ is Undefined!254) lt!50792) (ite ((_ is Found!254) lt!50792) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3161 lt!50792)) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!254) lt!50792) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3160 lt!50792)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!254) lt!50792) (= (select (arr!2021 (_keys!4196 newMap!16)) (index!3163 lt!50792)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27201 (= lt!50792 e!65395)))

(declare-fun c!17241 () Bool)

(assert (=> d!27201 (= c!17241 (and ((_ is Intermediate!254) lt!50793) (undefined!1066 lt!50793)))))

(assert (=> d!27201 (= lt!50793 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (mask!6609 newMap!16)) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!27201 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27201 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50792)))

(assert (= (and d!27201 c!17241) b!100439))

(assert (= (and d!27201 (not c!17241)) b!100438))

(assert (= (and b!100438 c!17240) b!100435))

(assert (= (and b!100438 (not c!17240)) b!100437))

(assert (= (and b!100437 c!17239) b!100436))

(assert (= (and b!100437 (not c!17239)) b!100434))

(assert (=> b!100434 m!109397))

(declare-fun m!111157 () Bool)

(assert (=> b!100434 m!111157))

(declare-fun m!111159 () Bool)

(assert (=> b!100438 m!111159))

(declare-fun m!111161 () Bool)

(assert (=> d!27201 m!111161))

(assert (=> d!27201 m!109413))

(declare-fun m!111163 () Bool)

(assert (=> d!27201 m!111163))

(declare-fun m!111165 () Bool)

(assert (=> d!27201 m!111165))

(assert (=> d!27201 m!109397))

(declare-fun m!111167 () Bool)

(assert (=> d!27201 m!111167))

(assert (=> d!27201 m!111167))

(assert (=> d!27201 m!109397))

(declare-fun m!111169 () Bool)

(assert (=> d!27201 m!111169))

(assert (=> b!99515 d!27201))

(declare-fun d!27203 () Bool)

(declare-fun e!65397 () Bool)

(assert (=> d!27203 e!65397))

(declare-fun res!50390 () Bool)

(assert (=> d!27203 (=> res!50390 e!65397)))

(declare-fun lt!50798 () Bool)

(assert (=> d!27203 (= res!50390 (not lt!50798))))

(declare-fun lt!50796 () Bool)

(assert (=> d!27203 (= lt!50798 lt!50796)))

(declare-fun lt!50795 () Unit!2999)

(declare-fun e!65398 () Unit!2999)

(assert (=> d!27203 (= lt!50795 e!65398)))

(declare-fun c!17242 () Bool)

(assert (=> d!27203 (= c!17242 lt!50796)))

(assert (=> d!27203 (= lt!50796 (containsKey!155 (toList!785 lt!50363) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27203 (= (contains!804 lt!50363 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50798)))

(declare-fun b!100440 () Bool)

(declare-fun lt!50797 () Unit!2999)

(assert (=> b!100440 (= e!65398 lt!50797)))

(assert (=> b!100440 (= lt!50797 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50363) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100440 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100441 () Bool)

(declare-fun Unit!3050 () Unit!2999)

(assert (=> b!100441 (= e!65398 Unit!3050)))

(declare-fun b!100442 () Bool)

(assert (=> b!100442 (= e!65397 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27203 c!17242) b!100440))

(assert (= (and d!27203 (not c!17242)) b!100441))

(assert (= (and d!27203 (not res!50390)) b!100442))

(assert (=> d!27203 m!109397))

(declare-fun m!111171 () Bool)

(assert (=> d!27203 m!111171))

(assert (=> b!100440 m!109397))

(declare-fun m!111173 () Bool)

(assert (=> b!100440 m!111173))

(assert (=> b!100440 m!109397))

(assert (=> b!100440 m!110303))

(assert (=> b!100440 m!110303))

(declare-fun m!111175 () Bool)

(assert (=> b!100440 m!111175))

(assert (=> b!100442 m!109397))

(assert (=> b!100442 m!110303))

(assert (=> b!100442 m!110303))

(assert (=> b!100442 m!111175))

(assert (=> b!99730 d!27203))

(assert (=> bm!10249 d!26827))

(declare-fun lt!50799 () Bool)

(declare-fun d!27205 () Bool)

(assert (=> d!27205 (= lt!50799 (select (content!104 (toList!785 lt!50214)) (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65400 () Bool)

(assert (=> d!27205 (= lt!50799 e!65400)))

(declare-fun res!50391 () Bool)

(assert (=> d!27205 (=> (not res!50391) (not e!65400))))

(assert (=> d!27205 (= res!50391 ((_ is Cons!1579) (toList!785 lt!50214)))))

(assert (=> d!27205 (= (contains!806 (toList!785 lt!50214) (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50799)))

(declare-fun b!100443 () Bool)

(declare-fun e!65399 () Bool)

(assert (=> b!100443 (= e!65400 e!65399)))

(declare-fun res!50392 () Bool)

(assert (=> b!100443 (=> res!50392 e!65399)))

(assert (=> b!100443 (= res!50392 (= (h!2174 (toList!785 lt!50214)) (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100444 () Bool)

(assert (=> b!100444 (= e!65399 (contains!806 (t!5557 (toList!785 lt!50214)) (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!27205 res!50391) b!100443))

(assert (= (and b!100443 (not res!50392)) b!100444))

(declare-fun m!111177 () Bool)

(assert (=> d!27205 m!111177))

(declare-fun m!111179 () Bool)

(assert (=> d!27205 m!111179))

(declare-fun m!111181 () Bool)

(assert (=> b!100444 m!111181))

(assert (=> b!99612 d!27205))

(assert (=> b!99577 d!27077))

(declare-fun d!27207 () Bool)

(declare-fun e!65401 () Bool)

(assert (=> d!27207 e!65401))

(declare-fun res!50393 () Bool)

(assert (=> d!27207 (=> res!50393 e!65401)))

(declare-fun lt!50803 () Bool)

(assert (=> d!27207 (= res!50393 (not lt!50803))))

(declare-fun lt!50801 () Bool)

(assert (=> d!27207 (= lt!50803 lt!50801)))

(declare-fun lt!50800 () Unit!2999)

(declare-fun e!65402 () Unit!2999)

(assert (=> d!27207 (= lt!50800 e!65402)))

(declare-fun c!17243 () Bool)

(assert (=> d!27207 (= c!17243 lt!50801)))

(assert (=> d!27207 (= lt!50801 (containsKey!155 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27207 (= (contains!804 lt!50083 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50803)))

(declare-fun b!100445 () Bool)

(declare-fun lt!50802 () Unit!2999)

(assert (=> b!100445 (= e!65402 lt!50802)))

(assert (=> b!100445 (= lt!50802 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!100445 (isDefined!104 (getValueByKey!151 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100446 () Bool)

(declare-fun Unit!3051 () Unit!2999)

(assert (=> b!100446 (= e!65402 Unit!3051)))

(declare-fun b!100447 () Bool)

(assert (=> b!100447 (= e!65401 (isDefined!104 (getValueByKey!151 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27207 c!17243) b!100445))

(assert (= (and d!27207 (not c!17243)) b!100446))

(assert (= (and d!27207 (not res!50393)) b!100447))

(declare-fun m!111183 () Bool)

(assert (=> d!27207 m!111183))

(declare-fun m!111185 () Bool)

(assert (=> b!100445 m!111185))

(assert (=> b!100445 m!109393))

(assert (=> b!100445 m!109393))

(declare-fun m!111187 () Bool)

(assert (=> b!100445 m!111187))

(assert (=> b!100447 m!109393))

(assert (=> b!100447 m!109393))

(assert (=> b!100447 m!111187))

(assert (=> d!26715 d!27207))

(declare-fun b!100449 () Bool)

(declare-fun e!65403 () Option!157)

(declare-fun e!65404 () Option!157)

(assert (=> b!100449 (= e!65403 e!65404)))

(declare-fun c!17245 () Bool)

(assert (=> b!100449 (= c!17245 (and ((_ is Cons!1579) lt!50084) (not (= (_1!1184 (h!2174 lt!50084)) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100451 () Bool)

(assert (=> b!100451 (= e!65404 None!155)))

(declare-fun b!100450 () Bool)

(assert (=> b!100450 (= e!65404 (getValueByKey!151 (t!5557 lt!50084) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!27209 () Bool)

(declare-fun c!17244 () Bool)

(assert (=> d!27209 (= c!17244 (and ((_ is Cons!1579) lt!50084) (= (_1!1184 (h!2174 lt!50084)) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27209 (= (getValueByKey!151 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65403)))

(declare-fun b!100448 () Bool)

(assert (=> b!100448 (= e!65403 (Some!156 (_2!1184 (h!2174 lt!50084))))))

(assert (= (and d!27209 c!17244) b!100448))

(assert (= (and d!27209 (not c!17244)) b!100449))

(assert (= (and b!100449 c!17245) b!100450))

(assert (= (and b!100449 (not c!17245)) b!100451))

(declare-fun m!111189 () Bool)

(assert (=> b!100450 m!111189))

(assert (=> d!26715 d!27209))

(declare-fun d!27211 () Bool)

(assert (=> d!27211 (= (getValueByKey!151 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!156 (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50804 () Unit!2999)

(assert (=> d!27211 (= lt!50804 (choose!611 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65405 () Bool)

(assert (=> d!27211 e!65405))

(declare-fun res!50394 () Bool)

(assert (=> d!27211 (=> (not res!50394) (not e!65405))))

(assert (=> d!27211 (= res!50394 (isStrictlySorted!305 lt!50084))))

(assert (=> d!27211 (= (lemmaContainsTupThenGetReturnValue!67 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50804)))

(declare-fun b!100452 () Bool)

(declare-fun res!50395 () Bool)

(assert (=> b!100452 (=> (not res!50395) (not e!65405))))

(assert (=> b!100452 (= res!50395 (containsKey!155 lt!50084 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100453 () Bool)

(assert (=> b!100453 (= e!65405 (contains!806 lt!50084 (tuple2!2347 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27211 res!50394) b!100452))

(assert (= (and b!100452 res!50395) b!100453))

(assert (=> d!27211 m!109387))

(declare-fun m!111191 () Bool)

(assert (=> d!27211 m!111191))

(declare-fun m!111193 () Bool)

(assert (=> d!27211 m!111193))

(declare-fun m!111195 () Bool)

(assert (=> b!100452 m!111195))

(declare-fun m!111197 () Bool)

(assert (=> b!100453 m!111197))

(assert (=> d!26715 d!27211))

(declare-fun call!10350 () List!1583)

(declare-fun bm!10347 () Bool)

(declare-fun c!17249 () Bool)

(declare-fun e!65406 () List!1583)

(assert (=> bm!10347 (= call!10350 ($colon$colon!79 e!65406 (ite c!17249 (h!2174 (toList!785 call!10192)) (tuple2!2347 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17246 () Bool)

(assert (=> bm!10347 (= c!17246 c!17249)))

(declare-fun b!100454 () Bool)

(declare-fun e!65407 () List!1583)

(declare-fun e!65409 () List!1583)

(assert (=> b!100454 (= e!65407 e!65409)))

(declare-fun c!17248 () Bool)

(assert (=> b!100454 (= c!17248 (and ((_ is Cons!1579) (toList!785 call!10192)) (= (_1!1184 (h!2174 (toList!785 call!10192))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100455 () Bool)

(declare-fun res!50397 () Bool)

(declare-fun e!65410 () Bool)

(assert (=> b!100455 (=> (not res!50397) (not e!65410))))

(declare-fun lt!50805 () List!1583)

(assert (=> b!100455 (= res!50397 (containsKey!155 lt!50805 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100456 () Bool)

(declare-fun c!17247 () Bool)

(assert (=> b!100456 (= e!65406 (ite c!17248 (t!5557 (toList!785 call!10192)) (ite c!17247 (Cons!1579 (h!2174 (toList!785 call!10192)) (t!5557 (toList!785 call!10192))) Nil!1580)))))

(declare-fun b!100457 () Bool)

(declare-fun e!65408 () List!1583)

(declare-fun call!10351 () List!1583)

(assert (=> b!100457 (= e!65408 call!10351)))

(declare-fun b!100458 () Bool)

(assert (=> b!100458 (= e!65408 call!10351)))

(declare-fun d!27213 () Bool)

(assert (=> d!27213 e!65410))

(declare-fun res!50396 () Bool)

(assert (=> d!27213 (=> (not res!50396) (not e!65410))))

(assert (=> d!27213 (= res!50396 (isStrictlySorted!305 lt!50805))))

(assert (=> d!27213 (= lt!50805 e!65407)))

(assert (=> d!27213 (= c!17249 (and ((_ is Cons!1579) (toList!785 call!10192)) (bvslt (_1!1184 (h!2174 (toList!785 call!10192))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27213 (isStrictlySorted!305 (toList!785 call!10192))))

(assert (=> d!27213 (= (insertStrictlySorted!70 (toList!785 call!10192) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50805)))

(declare-fun b!100459 () Bool)

(assert (=> b!100459 (= c!17247 (and ((_ is Cons!1579) (toList!785 call!10192)) (bvsgt (_1!1184 (h!2174 (toList!785 call!10192))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100459 (= e!65409 e!65408)))

(declare-fun bm!10348 () Bool)

(declare-fun call!10352 () List!1583)

(assert (=> bm!10348 (= call!10352 call!10350)))

(declare-fun b!100460 () Bool)

(assert (=> b!100460 (= e!65409 call!10352)))

(declare-fun b!100461 () Bool)

(assert (=> b!100461 (= e!65410 (contains!806 lt!50805 (tuple2!2347 (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10349 () Bool)

(assert (=> bm!10349 (= call!10351 call!10352)))

(declare-fun b!100462 () Bool)

(assert (=> b!100462 (= e!65407 call!10350)))

(declare-fun b!100463 () Bool)

(assert (=> b!100463 (= e!65406 (insertStrictlySorted!70 (t!5557 (toList!785 call!10192)) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!27213 c!17249) b!100462))

(assert (= (and d!27213 (not c!17249)) b!100454))

(assert (= (and b!100454 c!17248) b!100460))

(assert (= (and b!100454 (not c!17248)) b!100459))

(assert (= (and b!100459 c!17247) b!100457))

(assert (= (and b!100459 (not c!17247)) b!100458))

(assert (= (or b!100457 b!100458) bm!10349))

(assert (= (or b!100460 bm!10349) bm!10348))

(assert (= (or b!100462 bm!10348) bm!10347))

(assert (= (and bm!10347 c!17246) b!100463))

(assert (= (and bm!10347 (not c!17246)) b!100456))

(assert (= (and d!27213 res!50396) b!100455))

(assert (= (and b!100455 res!50397) b!100461))

(declare-fun m!111199 () Bool)

(assert (=> bm!10347 m!111199))

(declare-fun m!111201 () Bool)

(assert (=> b!100455 m!111201))

(declare-fun m!111203 () Bool)

(assert (=> b!100463 m!111203))

(declare-fun m!111205 () Bool)

(assert (=> b!100461 m!111205))

(declare-fun m!111207 () Bool)

(assert (=> d!27213 m!111207))

(declare-fun m!111209 () Bool)

(assert (=> d!27213 m!111209))

(assert (=> d!26715 d!27213))

(declare-fun d!27215 () Bool)

(declare-fun e!65411 () Bool)

(assert (=> d!27215 e!65411))

(declare-fun res!50398 () Bool)

(assert (=> d!27215 (=> res!50398 e!65411)))

(declare-fun lt!50809 () Bool)

(assert (=> d!27215 (= res!50398 (not lt!50809))))

(declare-fun lt!50807 () Bool)

(assert (=> d!27215 (= lt!50809 lt!50807)))

(declare-fun lt!50806 () Unit!2999)

(declare-fun e!65412 () Unit!2999)

(assert (=> d!27215 (= lt!50806 e!65412)))

(declare-fun c!17250 () Bool)

(assert (=> d!27215 (= c!17250 lt!50807)))

(assert (=> d!27215 (= lt!50807 (containsKey!155 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27215 (= (contains!804 lt!50226 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50809)))

(declare-fun b!100464 () Bool)

(declare-fun lt!50808 () Unit!2999)

(assert (=> b!100464 (= e!65412 lt!50808)))

(assert (=> b!100464 (= lt!50808 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100464 (isDefined!104 (getValueByKey!151 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100465 () Bool)

(declare-fun Unit!3052 () Unit!2999)

(assert (=> b!100465 (= e!65412 Unit!3052)))

(declare-fun b!100466 () Bool)

(assert (=> b!100466 (= e!65411 (isDefined!104 (getValueByKey!151 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27215 c!17250) b!100464))

(assert (= (and d!27215 (not c!17250)) b!100465))

(assert (= (and d!27215 (not res!50398)) b!100466))

(declare-fun m!111211 () Bool)

(assert (=> d!27215 m!111211))

(declare-fun m!111213 () Bool)

(assert (=> b!100464 m!111213))

(assert (=> b!100464 m!109739))

(assert (=> b!100464 m!109739))

(declare-fun m!111215 () Bool)

(assert (=> b!100464 m!111215))

(assert (=> b!100466 m!109739))

(assert (=> b!100466 m!109739))

(assert (=> b!100466 m!111215))

(assert (=> d!26793 d!27215))

(declare-fun b!100468 () Bool)

(declare-fun e!65413 () Option!157)

(declare-fun e!65414 () Option!157)

(assert (=> b!100468 (= e!65413 e!65414)))

(declare-fun c!17252 () Bool)

(assert (=> b!100468 (= c!17252 (and ((_ is Cons!1579) lt!50227) (not (= (_1!1184 (h!2174 lt!50227)) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!100470 () Bool)

(assert (=> b!100470 (= e!65414 None!155)))

(declare-fun b!100469 () Bool)

(assert (=> b!100469 (= e!65414 (getValueByKey!151 (t!5557 lt!50227) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!17251 () Bool)

(declare-fun d!27217 () Bool)

(assert (=> d!27217 (= c!17251 (and ((_ is Cons!1579) lt!50227) (= (_1!1184 (h!2174 lt!50227)) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27217 (= (getValueByKey!151 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65413)))

(declare-fun b!100467 () Bool)

(assert (=> b!100467 (= e!65413 (Some!156 (_2!1184 (h!2174 lt!50227))))))

(assert (= (and d!27217 c!17251) b!100467))

(assert (= (and d!27217 (not c!17251)) b!100468))

(assert (= (and b!100468 c!17252) b!100469))

(assert (= (and b!100468 (not c!17252)) b!100470))

(declare-fun m!111217 () Bool)

(assert (=> b!100469 m!111217))

(assert (=> d!26793 d!27217))

(declare-fun d!27219 () Bool)

(assert (=> d!27219 (= (getValueByKey!151 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!156 (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50810 () Unit!2999)

(assert (=> d!27219 (= lt!50810 (choose!611 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65415 () Bool)

(assert (=> d!27219 e!65415))

(declare-fun res!50399 () Bool)

(assert (=> d!27219 (=> (not res!50399) (not e!65415))))

(assert (=> d!27219 (= res!50399 (isStrictlySorted!305 lt!50227))))

(assert (=> d!27219 (= (lemmaContainsTupThenGetReturnValue!67 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50810)))

(declare-fun b!100471 () Bool)

(declare-fun res!50400 () Bool)

(assert (=> b!100471 (=> (not res!50400) (not e!65415))))

(assert (=> b!100471 (= res!50400 (containsKey!155 lt!50227 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100472 () Bool)

(assert (=> b!100472 (= e!65415 (contains!806 lt!50227 (tuple2!2347 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27219 res!50399) b!100471))

(assert (= (and b!100471 res!50400) b!100472))

(assert (=> d!27219 m!109733))

(declare-fun m!111219 () Bool)

(assert (=> d!27219 m!111219))

(declare-fun m!111221 () Bool)

(assert (=> d!27219 m!111221))

(declare-fun m!111223 () Bool)

(assert (=> b!100471 m!111223))

(declare-fun m!111225 () Bool)

(assert (=> b!100472 m!111225))

(assert (=> d!26793 d!27219))

(declare-fun c!17256 () Bool)

(declare-fun bm!10350 () Bool)

(declare-fun call!10353 () List!1583)

(declare-fun e!65416 () List!1583)

(assert (=> bm!10350 (= call!10353 ($colon$colon!79 e!65416 (ite c!17256 (h!2174 (toList!785 e!64751)) (tuple2!2347 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!17253 () Bool)

(assert (=> bm!10350 (= c!17253 c!17256)))

(declare-fun b!100473 () Bool)

(declare-fun e!65417 () List!1583)

(declare-fun e!65419 () List!1583)

(assert (=> b!100473 (= e!65417 e!65419)))

(declare-fun c!17255 () Bool)

(assert (=> b!100473 (= c!17255 (and ((_ is Cons!1579) (toList!785 e!64751)) (= (_1!1184 (h!2174 (toList!785 e!64751))) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100474 () Bool)

(declare-fun res!50402 () Bool)

(declare-fun e!65420 () Bool)

(assert (=> b!100474 (=> (not res!50402) (not e!65420))))

(declare-fun lt!50811 () List!1583)

(assert (=> b!100474 (= res!50402 (containsKey!155 lt!50811 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100475 () Bool)

(declare-fun c!17254 () Bool)

(assert (=> b!100475 (= e!65416 (ite c!17255 (t!5557 (toList!785 e!64751)) (ite c!17254 (Cons!1579 (h!2174 (toList!785 e!64751)) (t!5557 (toList!785 e!64751))) Nil!1580)))))

(declare-fun b!100476 () Bool)

(declare-fun e!65418 () List!1583)

(declare-fun call!10354 () List!1583)

(assert (=> b!100476 (= e!65418 call!10354)))

(declare-fun b!100477 () Bool)

(assert (=> b!100477 (= e!65418 call!10354)))

(declare-fun d!27221 () Bool)

(assert (=> d!27221 e!65420))

(declare-fun res!50401 () Bool)

(assert (=> d!27221 (=> (not res!50401) (not e!65420))))

(assert (=> d!27221 (= res!50401 (isStrictlySorted!305 lt!50811))))

(assert (=> d!27221 (= lt!50811 e!65417)))

(assert (=> d!27221 (= c!17256 (and ((_ is Cons!1579) (toList!785 e!64751)) (bvslt (_1!1184 (h!2174 (toList!785 e!64751))) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27221 (isStrictlySorted!305 (toList!785 e!64751))))

(assert (=> d!27221 (= (insertStrictlySorted!70 (toList!785 e!64751) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50811)))

(declare-fun b!100478 () Bool)

(assert (=> b!100478 (= c!17254 (and ((_ is Cons!1579) (toList!785 e!64751)) (bvsgt (_1!1184 (h!2174 (toList!785 e!64751))) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!100478 (= e!65419 e!65418)))

(declare-fun bm!10351 () Bool)

(declare-fun call!10355 () List!1583)

(assert (=> bm!10351 (= call!10355 call!10353)))

(declare-fun b!100479 () Bool)

(assert (=> b!100479 (= e!65419 call!10355)))

(declare-fun b!100480 () Bool)

(assert (=> b!100480 (= e!65420 (contains!806 lt!50811 (tuple2!2347 (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!10352 () Bool)

(assert (=> bm!10352 (= call!10354 call!10355)))

(declare-fun b!100481 () Bool)

(assert (=> b!100481 (= e!65417 call!10353)))

(declare-fun b!100482 () Bool)

(assert (=> b!100482 (= e!65416 (insertStrictlySorted!70 (t!5557 (toList!785 e!64751)) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27221 c!17256) b!100481))

(assert (= (and d!27221 (not c!17256)) b!100473))

(assert (= (and b!100473 c!17255) b!100479))

(assert (= (and b!100473 (not c!17255)) b!100478))

(assert (= (and b!100478 c!17254) b!100476))

(assert (= (and b!100478 (not c!17254)) b!100477))

(assert (= (or b!100476 b!100477) bm!10352))

(assert (= (or b!100479 bm!10352) bm!10351))

(assert (= (or b!100481 bm!10351) bm!10350))

(assert (= (and bm!10350 c!17253) b!100482))

(assert (= (and bm!10350 (not c!17253)) b!100475))

(assert (= (and d!27221 res!50401) b!100474))

(assert (= (and b!100474 res!50402) b!100480))

(declare-fun m!111227 () Bool)

(assert (=> bm!10350 m!111227))

(declare-fun m!111229 () Bool)

(assert (=> b!100474 m!111229))

(declare-fun m!111231 () Bool)

(assert (=> b!100482 m!111231))

(declare-fun m!111233 () Bool)

(assert (=> b!100480 m!111233))

(declare-fun m!111235 () Bool)

(assert (=> d!27221 m!111235))

(declare-fun m!111237 () Bool)

(assert (=> d!27221 m!111237))

(assert (=> d!26793 d!27221))

(assert (=> b!99630 d!26969))

(assert (=> b!99630 d!26971))

(declare-fun b!100483 () Bool)

(declare-fun e!65422 () (_ BitVec 32))

(declare-fun e!65421 () (_ BitVec 32))

(assert (=> b!100483 (= e!65422 e!65421)))

(declare-fun c!17257 () Bool)

(assert (=> b!100483 (= c!17257 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(declare-fun b!100484 () Bool)

(declare-fun call!10356 () (_ BitVec 32))

(assert (=> b!100484 (= e!65421 (bvadd #b00000000000000000000000000000001 call!10356))))

(declare-fun b!100485 () Bool)

(assert (=> b!100485 (= e!65422 #b00000000000000000000000000000000)))

(declare-fun d!27223 () Bool)

(declare-fun lt!50812 () (_ BitVec 32))

(assert (=> d!27223 (and (bvsge lt!50812 #b00000000000000000000000000000000) (bvsle lt!50812 (bvsub (size!2272 (_keys!4196 (_2!1185 lt!50053))) #b00000000000000000000000000000000)))))

(assert (=> d!27223 (= lt!50812 e!65422)))

(declare-fun c!17258 () Bool)

(assert (=> d!27223 (= c!17258 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (=> d!27223 (and (bvsle #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2272 (_keys!4196 (_2!1185 lt!50053))) (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(assert (=> d!27223 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1185 lt!50053)) #b00000000000000000000000000000000 (size!2272 (_keys!4196 (_2!1185 lt!50053)))) lt!50812)))

(declare-fun bm!10353 () Bool)

(assert (=> bm!10353 (= call!10356 (arrayCountValidKeys!0 (_keys!4196 (_2!1185 lt!50053)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (_2!1185 lt!50053)))))))

(declare-fun b!100486 () Bool)

(assert (=> b!100486 (= e!65421 call!10356)))

(assert (= (and d!27223 c!17258) b!100485))

(assert (= (and d!27223 (not c!17258)) b!100483))

(assert (= (and b!100483 c!17257) b!100484))

(assert (= (and b!100483 (not c!17257)) b!100486))

(assert (= (or b!100484 b!100486) bm!10353))

(assert (=> b!100483 m!110273))

(assert (=> b!100483 m!110273))

(assert (=> b!100483 m!110275))

(declare-fun m!111239 () Bool)

(assert (=> bm!10353 m!111239))

(assert (=> b!99741 d!27223))

(declare-fun d!27225 () Bool)

(assert (=> d!27225 (= (apply!93 lt!50129 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50129) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4158 () Bool)

(assert (= bs!4158 d!27225))

(assert (=> bs!4158 m!109987))

(assert (=> bs!4158 m!109987))

(declare-fun m!111241 () Bool)

(assert (=> bs!4158 m!111241))

(assert (=> b!99455 d!27225))

(declare-fun d!27227 () Bool)

(assert (=> d!27227 (= (apply!93 lt!50095 lt!50102) (get!1290 (getValueByKey!151 (toList!785 lt!50095) lt!50102)))))

(declare-fun bs!4159 () Bool)

(assert (= bs!4159 d!27227))

(declare-fun m!111243 () Bool)

(assert (=> bs!4159 m!111243))

(assert (=> bs!4159 m!111243))

(declare-fun m!111245 () Bool)

(assert (=> bs!4159 m!111245))

(assert (=> b!99415 d!27227))

(declare-fun d!27229 () Bool)

(declare-fun e!65423 () Bool)

(assert (=> d!27229 e!65423))

(declare-fun res!50403 () Bool)

(assert (=> d!27229 (=> res!50403 e!65423)))

(declare-fun lt!50816 () Bool)

(assert (=> d!27229 (= res!50403 (not lt!50816))))

(declare-fun lt!50814 () Bool)

(assert (=> d!27229 (= lt!50816 lt!50814)))

(declare-fun lt!50813 () Unit!2999)

(declare-fun e!65424 () Unit!2999)

(assert (=> d!27229 (= lt!50813 e!65424)))

(declare-fun c!17259 () Bool)

(assert (=> d!27229 (= c!17259 lt!50814)))

(assert (=> d!27229 (= lt!50814 (containsKey!155 (toList!785 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50086))))

(assert (=> d!27229 (= (contains!804 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50086) lt!50816)))

(declare-fun b!100487 () Bool)

(declare-fun lt!50815 () Unit!2999)

(assert (=> b!100487 (= e!65424 lt!50815)))

(assert (=> b!100487 (= lt!50815 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50086))))

(assert (=> b!100487 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50086))))

(declare-fun b!100488 () Bool)

(declare-fun Unit!3053 () Unit!2999)

(assert (=> b!100488 (= e!65424 Unit!3053)))

(declare-fun b!100489 () Bool)

(assert (=> b!100489 (= e!65423 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50086)))))

(assert (= (and d!27229 c!17259) b!100487))

(assert (= (and d!27229 (not c!17259)) b!100488))

(assert (= (and d!27229 (not res!50403)) b!100489))

(declare-fun m!111247 () Bool)

(assert (=> d!27229 m!111247))

(declare-fun m!111249 () Bool)

(assert (=> b!100487 m!111249))

(declare-fun m!111251 () Bool)

(assert (=> b!100487 m!111251))

(assert (=> b!100487 m!111251))

(declare-fun m!111253 () Bool)

(assert (=> b!100487 m!111253))

(assert (=> b!100489 m!111251))

(assert (=> b!100489 m!111251))

(assert (=> b!100489 m!111253))

(assert (=> b!99415 d!27229))

(declare-fun d!27231 () Bool)

(declare-fun e!65425 () Bool)

(assert (=> d!27231 e!65425))

(declare-fun res!50405 () Bool)

(assert (=> d!27231 (=> (not res!50405) (not e!65425))))

(declare-fun lt!50819 () ListLongMap!1539)

(assert (=> d!27231 (= res!50405 (contains!804 lt!50819 (_1!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(declare-fun lt!50820 () List!1583)

(assert (=> d!27231 (= lt!50819 (ListLongMap!1540 lt!50820))))

(declare-fun lt!50817 () Unit!2999)

(declare-fun lt!50818 () Unit!2999)

(assert (=> d!27231 (= lt!50817 lt!50818)))

(assert (=> d!27231 (= (getValueByKey!151 lt!50820 (_1!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27231 (= lt!50818 (lemmaContainsTupThenGetReturnValue!67 lt!50820 (_1!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27231 (= lt!50820 (insertStrictlySorted!70 (toList!785 lt!50092) (_1!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27231 (= (+!136 lt!50092 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50819)))

(declare-fun b!100490 () Bool)

(declare-fun res!50404 () Bool)

(assert (=> b!100490 (=> (not res!50404) (not e!65425))))

(assert (=> b!100490 (= res!50404 (= (getValueByKey!151 (toList!785 lt!50819) (_1!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))))

(declare-fun b!100491 () Bool)

(assert (=> b!100491 (= e!65425 (contains!806 (toList!785 lt!50819) (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))

(assert (= (and d!27231 res!50405) b!100490))

(assert (= (and b!100490 res!50404) b!100491))

(declare-fun m!111255 () Bool)

(assert (=> d!27231 m!111255))

(declare-fun m!111257 () Bool)

(assert (=> d!27231 m!111257))

(declare-fun m!111259 () Bool)

(assert (=> d!27231 m!111259))

(declare-fun m!111261 () Bool)

(assert (=> d!27231 m!111261))

(declare-fun m!111263 () Bool)

(assert (=> b!100490 m!111263))

(declare-fun m!111265 () Bool)

(assert (=> b!100491 m!111265))

(assert (=> b!99415 d!27231))

(declare-fun d!27233 () Bool)

(assert (=> d!27233 (= (apply!93 (+!136 lt!50093 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50106) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50093 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50106)))))

(declare-fun bs!4160 () Bool)

(assert (= bs!4160 d!27233))

(declare-fun m!111267 () Bool)

(assert (=> bs!4160 m!111267))

(assert (=> bs!4160 m!111267))

(declare-fun m!111269 () Bool)

(assert (=> bs!4160 m!111269))

(assert (=> b!99415 d!27233))

(declare-fun d!27235 () Bool)

(assert (=> d!27235 (= (apply!93 lt!50093 lt!50106) (get!1290 (getValueByKey!151 (toList!785 lt!50093) lt!50106)))))

(declare-fun bs!4161 () Bool)

(assert (= bs!4161 d!27235))

(declare-fun m!111271 () Bool)

(assert (=> bs!4161 m!111271))

(assert (=> bs!4161 m!111271))

(declare-fun m!111273 () Bool)

(assert (=> bs!4161 m!111273))

(assert (=> b!99415 d!27235))

(declare-fun d!27237 () Bool)

(assert (=> d!27237 (= (apply!93 (+!136 lt!50095 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50102) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50095 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50102)))))

(declare-fun bs!4162 () Bool)

(assert (= bs!4162 d!27237))

(declare-fun m!111275 () Bool)

(assert (=> bs!4162 m!111275))

(assert (=> bs!4162 m!111275))

(declare-fun m!111277 () Bool)

(assert (=> bs!4162 m!111277))

(assert (=> b!99415 d!27237))

(assert (=> b!99415 d!26991))

(declare-fun d!27239 () Bool)

(assert (=> d!27239 (= (apply!93 (+!136 lt!50092 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50089) (apply!93 lt!50092 lt!50089))))

(declare-fun lt!50821 () Unit!2999)

(assert (=> d!27239 (= lt!50821 (choose!604 lt!50092 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50089))))

(declare-fun e!65426 () Bool)

(assert (=> d!27239 e!65426))

(declare-fun res!50406 () Bool)

(assert (=> d!27239 (=> (not res!50406) (not e!65426))))

(assert (=> d!27239 (= res!50406 (contains!804 lt!50092 lt!50089))))

(assert (=> d!27239 (= (addApplyDifferent!69 lt!50092 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50089) lt!50821)))

(declare-fun b!100492 () Bool)

(assert (=> b!100492 (= e!65426 (not (= lt!50089 lt!50103)))))

(assert (= (and d!27239 res!50406) b!100492))

(declare-fun m!111279 () Bool)

(assert (=> d!27239 m!111279))

(assert (=> d!27239 m!109447))

(assert (=> d!27239 m!109445))

(assert (=> d!27239 m!109451))

(declare-fun m!111281 () Bool)

(assert (=> d!27239 m!111281))

(assert (=> d!27239 m!109445))

(assert (=> b!99415 d!27239))

(declare-fun d!27241 () Bool)

(assert (=> d!27241 (= (apply!93 (+!136 lt!50092 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50089) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50092 (tuple2!2347 lt!50103 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50089)))))

(declare-fun bs!4163 () Bool)

(assert (= bs!4163 d!27241))

(declare-fun m!111283 () Bool)

(assert (=> bs!4163 m!111283))

(assert (=> bs!4163 m!111283))

(declare-fun m!111285 () Bool)

(assert (=> bs!4163 m!111285))

(assert (=> b!99415 d!27241))

(declare-fun d!27243 () Bool)

(assert (=> d!27243 (= (apply!93 (+!136 lt!50095 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50102) (apply!93 lt!50095 lt!50102))))

(declare-fun lt!50822 () Unit!2999)

(assert (=> d!27243 (= lt!50822 (choose!604 lt!50095 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50102))))

(declare-fun e!65427 () Bool)

(assert (=> d!27243 e!65427))

(declare-fun res!50407 () Bool)

(assert (=> d!27243 (=> (not res!50407) (not e!65427))))

(assert (=> d!27243 (= res!50407 (contains!804 lt!50095 lt!50102))))

(assert (=> d!27243 (= (addApplyDifferent!69 lt!50095 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50102) lt!50822)))

(declare-fun b!100493 () Bool)

(assert (=> b!100493 (= e!65427 (not (= lt!50102 lt!50100)))))

(assert (= (and d!27243 res!50407) b!100493))

(declare-fun m!111287 () Bool)

(assert (=> d!27243 m!111287))

(assert (=> d!27243 m!109437))

(assert (=> d!27243 m!109423))

(assert (=> d!27243 m!109425))

(declare-fun m!111289 () Bool)

(assert (=> d!27243 m!111289))

(assert (=> d!27243 m!109423))

(assert (=> b!99415 d!27243))

(declare-fun d!27245 () Bool)

(declare-fun e!65428 () Bool)

(assert (=> d!27245 e!65428))

(declare-fun res!50409 () Bool)

(assert (=> d!27245 (=> (not res!50409) (not e!65428))))

(declare-fun lt!50825 () ListLongMap!1539)

(assert (=> d!27245 (= res!50409 (contains!804 lt!50825 (_1!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(declare-fun lt!50826 () List!1583)

(assert (=> d!27245 (= lt!50825 (ListLongMap!1540 lt!50826))))

(declare-fun lt!50823 () Unit!2999)

(declare-fun lt!50824 () Unit!2999)

(assert (=> d!27245 (= lt!50823 lt!50824)))

(assert (=> d!27245 (= (getValueByKey!151 lt!50826 (_1!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27245 (= lt!50824 (lemmaContainsTupThenGetReturnValue!67 lt!50826 (_1!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27245 (= lt!50826 (insertStrictlySorted!70 (toList!785 lt!50105) (_1!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27245 (= (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50825)))

(declare-fun b!100494 () Bool)

(declare-fun res!50408 () Bool)

(assert (=> b!100494 (=> (not res!50408) (not e!65428))))

(assert (=> b!100494 (= res!50408 (= (getValueByKey!151 (toList!785 lt!50825) (_1!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))))

(declare-fun b!100495 () Bool)

(assert (=> b!100495 (= e!65428 (contains!806 (toList!785 lt!50825) (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))

(assert (= (and d!27245 res!50409) b!100494))

(assert (= (and b!100494 res!50408) b!100495))

(declare-fun m!111291 () Bool)

(assert (=> d!27245 m!111291))

(declare-fun m!111293 () Bool)

(assert (=> d!27245 m!111293))

(declare-fun m!111295 () Bool)

(assert (=> d!27245 m!111295))

(declare-fun m!111297 () Bool)

(assert (=> d!27245 m!111297))

(declare-fun m!111299 () Bool)

(assert (=> b!100494 m!111299))

(declare-fun m!111301 () Bool)

(assert (=> b!100495 m!111301))

(assert (=> b!99415 d!27245))

(declare-fun d!27247 () Bool)

(assert (=> d!27247 (= (apply!93 (+!136 lt!50093 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50106) (apply!93 lt!50093 lt!50106))))

(declare-fun lt!50827 () Unit!2999)

(assert (=> d!27247 (= lt!50827 (choose!604 lt!50093 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50106))))

(declare-fun e!65429 () Bool)

(assert (=> d!27247 e!65429))

(declare-fun res!50410 () Bool)

(assert (=> d!27247 (=> (not res!50410) (not e!65429))))

(assert (=> d!27247 (= res!50410 (contains!804 lt!50093 lt!50106))))

(assert (=> d!27247 (= (addApplyDifferent!69 lt!50093 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50106) lt!50827)))

(declare-fun b!100496 () Bool)

(assert (=> b!100496 (= e!65429 (not (= lt!50106 lt!50101)))))

(assert (= (and d!27247 res!50410) b!100496))

(declare-fun m!111303 () Bool)

(assert (=> d!27247 m!111303))

(assert (=> d!27247 m!109441))

(assert (=> d!27247 m!109439))

(assert (=> d!27247 m!109443))

(declare-fun m!111305 () Bool)

(assert (=> d!27247 m!111305))

(assert (=> d!27247 m!109439))

(assert (=> b!99415 d!27247))

(declare-fun d!27249 () Bool)

(declare-fun e!65430 () Bool)

(assert (=> d!27249 e!65430))

(declare-fun res!50412 () Bool)

(assert (=> d!27249 (=> (not res!50412) (not e!65430))))

(declare-fun lt!50830 () ListLongMap!1539)

(assert (=> d!27249 (= res!50412 (contains!804 lt!50830 (_1!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50831 () List!1583)

(assert (=> d!27249 (= lt!50830 (ListLongMap!1540 lt!50831))))

(declare-fun lt!50828 () Unit!2999)

(declare-fun lt!50829 () Unit!2999)

(assert (=> d!27249 (= lt!50828 lt!50829)))

(assert (=> d!27249 (= (getValueByKey!151 lt!50831 (_1!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27249 (= lt!50829 (lemmaContainsTupThenGetReturnValue!67 lt!50831 (_1!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27249 (= lt!50831 (insertStrictlySorted!70 (toList!785 lt!50093) (_1!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27249 (= (+!136 lt!50093 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50830)))

(declare-fun b!100497 () Bool)

(declare-fun res!50411 () Bool)

(assert (=> b!100497 (=> (not res!50411) (not e!65430))))

(assert (=> b!100497 (= res!50411 (= (getValueByKey!151 (toList!785 lt!50830) (_1!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100498 () Bool)

(assert (=> b!100498 (= e!65430 (contains!806 (toList!785 lt!50830) (tuple2!2347 lt!50101 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!27249 res!50412) b!100497))

(assert (= (and b!100497 res!50411) b!100498))

(declare-fun m!111307 () Bool)

(assert (=> d!27249 m!111307))

(declare-fun m!111309 () Bool)

(assert (=> d!27249 m!111309))

(declare-fun m!111311 () Bool)

(assert (=> d!27249 m!111311))

(declare-fun m!111313 () Bool)

(assert (=> d!27249 m!111313))

(declare-fun m!111315 () Bool)

(assert (=> b!100497 m!111315))

(declare-fun m!111317 () Bool)

(assert (=> b!100498 m!111317))

(assert (=> b!99415 d!27249))

(declare-fun d!27251 () Bool)

(declare-fun e!65431 () Bool)

(assert (=> d!27251 e!65431))

(declare-fun res!50414 () Bool)

(assert (=> d!27251 (=> (not res!50414) (not e!65431))))

(declare-fun lt!50834 () ListLongMap!1539)

(assert (=> d!27251 (= res!50414 (contains!804 lt!50834 (_1!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50835 () List!1583)

(assert (=> d!27251 (= lt!50834 (ListLongMap!1540 lt!50835))))

(declare-fun lt!50832 () Unit!2999)

(declare-fun lt!50833 () Unit!2999)

(assert (=> d!27251 (= lt!50832 lt!50833)))

(assert (=> d!27251 (= (getValueByKey!151 lt!50835 (_1!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27251 (= lt!50833 (lemmaContainsTupThenGetReturnValue!67 lt!50835 (_1!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27251 (= lt!50835 (insertStrictlySorted!70 (toList!785 lt!50095) (_1!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27251 (= (+!136 lt!50095 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50834)))

(declare-fun b!100499 () Bool)

(declare-fun res!50413 () Bool)

(assert (=> b!100499 (=> (not res!50413) (not e!65431))))

(assert (=> b!100499 (= res!50413 (= (getValueByKey!151 (toList!785 lt!50834) (_1!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100500 () Bool)

(assert (=> b!100500 (= e!65431 (contains!806 (toList!785 lt!50834) (tuple2!2347 lt!50100 (ite c!16953 (ite c!16947 (minValue!2383 newMap!16) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!27251 res!50414) b!100499))

(assert (= (and b!100499 res!50413) b!100500))

(declare-fun m!111319 () Bool)

(assert (=> d!27251 m!111319))

(declare-fun m!111321 () Bool)

(assert (=> d!27251 m!111321))

(declare-fun m!111323 () Bool)

(assert (=> d!27251 m!111323))

(declare-fun m!111325 () Bool)

(assert (=> d!27251 m!111325))

(declare-fun m!111327 () Bool)

(assert (=> b!100499 m!111327))

(declare-fun m!111329 () Bool)

(assert (=> b!100500 m!111329))

(assert (=> b!99415 d!27251))

(declare-fun d!27253 () Bool)

(assert (=> d!27253 (= (apply!93 lt!50092 lt!50089) (get!1290 (getValueByKey!151 (toList!785 lt!50092) lt!50089)))))

(declare-fun bs!4164 () Bool)

(assert (= bs!4164 d!27253))

(declare-fun m!111331 () Bool)

(assert (=> bs!4164 m!111331))

(assert (=> bs!4164 m!111331))

(declare-fun m!111333 () Bool)

(assert (=> bs!4164 m!111333))

(assert (=> b!99415 d!27253))

(declare-fun d!27255 () Bool)

(assert (=> d!27255 (contains!804 (+!136 lt!50105 (tuple2!2347 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50086)))

(declare-fun lt!50836 () Unit!2999)

(assert (=> d!27255 (= lt!50836 (choose!605 lt!50105 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50086))))

(assert (=> d!27255 (contains!804 lt!50105 lt!50086)))

(assert (=> d!27255 (= (addStillContains!69 lt!50105 lt!50087 (ite (and c!16953 c!16947) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50086) lt!50836)))

(declare-fun bs!4165 () Bool)

(assert (= bs!4165 d!27255))

(assert (=> bs!4165 m!109433))

(assert (=> bs!4165 m!109433))

(assert (=> bs!4165 m!109435))

(declare-fun m!111335 () Bool)

(assert (=> bs!4165 m!111335))

(declare-fun m!111337 () Bool)

(assert (=> bs!4165 m!111337))

(assert (=> b!99415 d!27255))

(declare-fun d!27257 () Bool)

(assert (=> d!27257 (= (get!1290 (getValueByKey!151 (toList!785 lt!49952) lt!49949)) (v!2820 (getValueByKey!151 (toList!785 lt!49952) lt!49949)))))

(assert (=> d!26767 d!27257))

(declare-fun b!100502 () Bool)

(declare-fun e!65432 () Option!157)

(declare-fun e!65433 () Option!157)

(assert (=> b!100502 (= e!65432 e!65433)))

(declare-fun c!17261 () Bool)

(assert (=> b!100502 (= c!17261 (and ((_ is Cons!1579) (toList!785 lt!49952)) (not (= (_1!1184 (h!2174 (toList!785 lt!49952))) lt!49949))))))

(declare-fun b!100504 () Bool)

(assert (=> b!100504 (= e!65433 None!155)))

(declare-fun b!100503 () Bool)

(assert (=> b!100503 (= e!65433 (getValueByKey!151 (t!5557 (toList!785 lt!49952)) lt!49949))))

(declare-fun d!27259 () Bool)

(declare-fun c!17260 () Bool)

(assert (=> d!27259 (= c!17260 (and ((_ is Cons!1579) (toList!785 lt!49952)) (= (_1!1184 (h!2174 (toList!785 lt!49952))) lt!49949)))))

(assert (=> d!27259 (= (getValueByKey!151 (toList!785 lt!49952) lt!49949) e!65432)))

(declare-fun b!100501 () Bool)

(assert (=> b!100501 (= e!65432 (Some!156 (_2!1184 (h!2174 (toList!785 lt!49952)))))))

(assert (= (and d!27259 c!17260) b!100501))

(assert (= (and d!27259 (not c!17260)) b!100502))

(assert (= (and b!100502 c!17261) b!100503))

(assert (= (and b!100502 (not c!17261)) b!100504))

(declare-fun m!111339 () Bool)

(assert (=> b!100503 m!111339))

(assert (=> d!26767 d!27259))

(declare-fun d!27261 () Bool)

(declare-fun e!65434 () Bool)

(assert (=> d!27261 e!65434))

(declare-fun res!50416 () Bool)

(assert (=> d!27261 (=> (not res!50416) (not e!65434))))

(declare-fun lt!50839 () ListLongMap!1539)

(assert (=> d!27261 (= res!50416 (contains!804 lt!50839 (_1!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun lt!50840 () List!1583)

(assert (=> d!27261 (= lt!50839 (ListLongMap!1540 lt!50840))))

(declare-fun lt!50837 () Unit!2999)

(declare-fun lt!50838 () Unit!2999)

(assert (=> d!27261 (= lt!50837 lt!50838)))

(assert (=> d!27261 (= (getValueByKey!151 lt!50840 (_1!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27261 (= lt!50838 (lemmaContainsTupThenGetReturnValue!67 lt!50840 (_1!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27261 (= lt!50840 (insertStrictlySorted!70 (toList!785 (ite c!17035 call!10257 (ite c!17039 call!10258 call!10254))) (_1!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27261 (= (+!136 (ite c!17035 call!10257 (ite c!17039 call!10258 call!10254)) (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) lt!50839)))

(declare-fun b!100505 () Bool)

(declare-fun res!50415 () Bool)

(assert (=> b!100505 (=> (not res!50415) (not e!65434))))

(assert (=> b!100505 (= res!50415 (= (getValueByKey!151 (toList!785 lt!50839) (_1!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))))

(declare-fun b!100506 () Bool)

(assert (=> b!100506 (= e!65434 (contains!806 (toList!785 lt!50839) (ite (or c!17035 c!17039) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (= (and d!27261 res!50416) b!100505))

(assert (= (and b!100505 res!50415) b!100506))

(declare-fun m!111341 () Bool)

(assert (=> d!27261 m!111341))

(declare-fun m!111343 () Bool)

(assert (=> d!27261 m!111343))

(declare-fun m!111345 () Bool)

(assert (=> d!27261 m!111345))

(declare-fun m!111347 () Bool)

(assert (=> d!27261 m!111347))

(declare-fun m!111349 () Bool)

(assert (=> b!100505 m!111349))

(declare-fun m!111351 () Bool)

(assert (=> b!100506 m!111351))

(assert (=> bm!10253 d!27261))

(declare-fun lt!50841 () Bool)

(declare-fun d!27263 () Bool)

(assert (=> d!27263 (= lt!50841 (select (content!104 (toList!785 lt!50079)) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65436 () Bool)

(assert (=> d!27263 (= lt!50841 e!65436)))

(declare-fun res!50417 () Bool)

(assert (=> d!27263 (=> (not res!50417) (not e!65436))))

(assert (=> d!27263 (= res!50417 ((_ is Cons!1579) (toList!785 lt!50079)))))

(assert (=> d!27263 (= (contains!806 (toList!785 lt!50079) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50841)))

(declare-fun b!100507 () Bool)

(declare-fun e!65435 () Bool)

(assert (=> b!100507 (= e!65436 e!65435)))

(declare-fun res!50418 () Bool)

(assert (=> b!100507 (=> res!50418 e!65435)))

(assert (=> b!100507 (= res!50418 (= (h!2174 (toList!785 lt!50079)) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100508 () Bool)

(assert (=> b!100508 (= e!65435 (contains!806 (t!5557 (toList!785 lt!50079)) (ite (or c!16903 c!16907) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2816 (underlying!340 thiss!992)))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!27263 res!50417) b!100507))

(assert (= (and b!100507 (not res!50418)) b!100508))

(declare-fun m!111353 () Bool)

(assert (=> d!27263 m!111353))

(declare-fun m!111355 () Bool)

(assert (=> d!27263 m!111355))

(declare-fun m!111357 () Bool)

(assert (=> b!100508 m!111357))

(assert (=> b!99406 d!27263))

(assert (=> b!99709 d!26741))

(declare-fun d!27265 () Bool)

(assert (=> d!27265 (= (apply!93 lt!50129 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1290 (getValueByKey!151 (toList!785 lt!50129) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4166 () Bool)

(assert (= bs!4166 d!27265))

(assert (=> bs!4166 m!110877))

(assert (=> bs!4166 m!110877))

(declare-fun m!111359 () Bool)

(assert (=> bs!4166 m!111359))

(assert (=> b!99449 d!27265))

(declare-fun d!27267 () Bool)

(declare-fun e!65437 () Bool)

(assert (=> d!27267 e!65437))

(declare-fun res!50419 () Bool)

(assert (=> d!27267 (=> res!50419 e!65437)))

(declare-fun lt!50845 () Bool)

(assert (=> d!27267 (= res!50419 (not lt!50845))))

(declare-fun lt!50843 () Bool)

(assert (=> d!27267 (= lt!50845 lt!50843)))

(declare-fun lt!50842 () Unit!2999)

(declare-fun e!65438 () Unit!2999)

(assert (=> d!27267 (= lt!50842 e!65438)))

(declare-fun c!17262 () Bool)

(assert (=> d!27267 (= c!17262 lt!50843)))

(assert (=> d!27267 (= lt!50843 (containsKey!155 (toList!785 lt!50363) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27267 (= (contains!804 lt!50363 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50845)))

(declare-fun b!100509 () Bool)

(declare-fun lt!50844 () Unit!2999)

(assert (=> b!100509 (= e!65438 lt!50844)))

(assert (=> b!100509 (= lt!50844 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50363) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100509 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100510 () Bool)

(declare-fun Unit!3054 () Unit!2999)

(assert (=> b!100510 (= e!65438 Unit!3054)))

(declare-fun b!100511 () Bool)

(assert (=> b!100511 (= e!65437 (isDefined!104 (getValueByKey!151 (toList!785 lt!50363) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27267 c!17262) b!100509))

(assert (= (and d!27267 (not c!17262)) b!100510))

(assert (= (and d!27267 (not res!50419)) b!100511))

(declare-fun m!111361 () Bool)

(assert (=> d!27267 m!111361))

(declare-fun m!111363 () Bool)

(assert (=> b!100509 m!111363))

(assert (=> b!100509 m!109997))

(assert (=> b!100509 m!109997))

(declare-fun m!111365 () Bool)

(assert (=> b!100509 m!111365))

(assert (=> b!100511 m!109997))

(assert (=> b!100511 m!109997))

(assert (=> b!100511 m!111365))

(assert (=> bm!10254 d!27267))

(declare-fun d!27269 () Bool)

(declare-fun isEmpty!361 (List!1583) Bool)

(assert (=> d!27269 (= (isEmpty!359 lt!50163) (isEmpty!361 (toList!785 lt!50163)))))

(declare-fun bs!4167 () Bool)

(assert (= bs!4167 d!27269))

(declare-fun m!111367 () Bool)

(assert (=> bs!4167 m!111367))

(assert (=> b!99503 d!27269))

(declare-fun d!27271 () Bool)

(assert (=> d!27271 (= (apply!93 (+!136 lt!50358 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) lt!50355) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50358 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))) lt!50355)))))

(declare-fun bs!4168 () Bool)

(assert (= bs!4168 d!27271))

(declare-fun m!111369 () Bool)

(assert (=> bs!4168 m!111369))

(assert (=> bs!4168 m!111369))

(declare-fun m!111371 () Bool)

(assert (=> bs!4168 m!111371))

(assert (=> b!99716 d!27271))

(declare-fun d!27273 () Bool)

(declare-fun e!65439 () Bool)

(assert (=> d!27273 e!65439))

(declare-fun res!50421 () Bool)

(assert (=> d!27273 (=> (not res!50421) (not e!65439))))

(declare-fun lt!50848 () ListLongMap!1539)

(assert (=> d!27273 (= res!50421 (contains!804 lt!50848 (_1!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50849 () List!1583)

(assert (=> d!27273 (= lt!50848 (ListLongMap!1540 lt!50849))))

(declare-fun lt!50846 () Unit!2999)

(declare-fun lt!50847 () Unit!2999)

(assert (=> d!27273 (= lt!50846 lt!50847)))

(assert (=> d!27273 (= (getValueByKey!151 lt!50849 (_1!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27273 (= lt!50847 (lemmaContainsTupThenGetReturnValue!67 lt!50849 (_1!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27273 (= lt!50849 (insertStrictlySorted!70 (toList!785 lt!50358) (_1!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27273 (= (+!136 lt!50358 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) lt!50848)))

(declare-fun b!100512 () Bool)

(declare-fun res!50420 () Bool)

(assert (=> b!100512 (=> (not res!50420) (not e!65439))))

(assert (=> b!100512 (= res!50420 (= (getValueByKey!151 (toList!785 lt!50848) (_1!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100513 () Bool)

(assert (=> b!100513 (= e!65439 (contains!806 (toList!785 lt!50848) (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27273 res!50421) b!100512))

(assert (= (and b!100512 res!50420) b!100513))

(declare-fun m!111373 () Bool)

(assert (=> d!27273 m!111373))

(declare-fun m!111375 () Bool)

(assert (=> d!27273 m!111375))

(declare-fun m!111377 () Bool)

(assert (=> d!27273 m!111377))

(declare-fun m!111379 () Bool)

(assert (=> d!27273 m!111379))

(declare-fun m!111381 () Bool)

(assert (=> b!100512 m!111381))

(declare-fun m!111383 () Bool)

(assert (=> b!100513 m!111383))

(assert (=> b!99716 d!27273))

(declare-fun d!27275 () Bool)

(assert (=> d!27275 (= (apply!93 (+!136 lt!50358 (tuple2!2347 lt!50369 (zeroValue!2383 newMap!16))) lt!50355) (apply!93 lt!50358 lt!50355))))

(declare-fun lt!50850 () Unit!2999)

(assert (=> d!27275 (= lt!50850 (choose!604 lt!50358 lt!50369 (zeroValue!2383 newMap!16) lt!50355))))

(declare-fun e!65440 () Bool)

(assert (=> d!27275 e!65440))

(declare-fun res!50422 () Bool)

(assert (=> d!27275 (=> (not res!50422) (not e!65440))))

(assert (=> d!27275 (= res!50422 (contains!804 lt!50358 lt!50355))))

(assert (=> d!27275 (= (addApplyDifferent!69 lt!50358 lt!50369 (zeroValue!2383 newMap!16) lt!50355) lt!50850)))

(declare-fun b!100514 () Bool)

(assert (=> b!100514 (= e!65440 (not (= lt!50355 lt!50369)))))

(assert (= (and d!27275 res!50422) b!100514))

(declare-fun m!111385 () Bool)

(assert (=> d!27275 m!111385))

(assert (=> d!27275 m!109901))

(assert (=> d!27275 m!109899))

(assert (=> d!27275 m!109905))

(declare-fun m!111387 () Bool)

(assert (=> d!27275 m!111387))

(assert (=> d!27275 m!109899))

(assert (=> b!99716 d!27275))

(declare-fun d!27277 () Bool)

(assert (=> d!27277 (= (apply!93 (+!136 lt!50359 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) lt!50372) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50359 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))) lt!50372)))))

(declare-fun bs!4169 () Bool)

(assert (= bs!4169 d!27277))

(declare-fun m!111389 () Bool)

(assert (=> bs!4169 m!111389))

(assert (=> bs!4169 m!111389))

(declare-fun m!111391 () Bool)

(assert (=> bs!4169 m!111391))

(assert (=> b!99716 d!27277))

(declare-fun d!27279 () Bool)

(declare-fun e!65441 () Bool)

(assert (=> d!27279 e!65441))

(declare-fun res!50424 () Bool)

(assert (=> d!27279 (=> (not res!50424) (not e!65441))))

(declare-fun lt!50853 () ListLongMap!1539)

(assert (=> d!27279 (= res!50424 (contains!804 lt!50853 (_1!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))))))

(declare-fun lt!50854 () List!1583)

(assert (=> d!27279 (= lt!50853 (ListLongMap!1540 lt!50854))))

(declare-fun lt!50851 () Unit!2999)

(declare-fun lt!50852 () Unit!2999)

(assert (=> d!27279 (= lt!50851 lt!50852)))

(assert (=> d!27279 (= (getValueByKey!151 lt!50854 (_1!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))))))

(assert (=> d!27279 (= lt!50852 (lemmaContainsTupThenGetReturnValue!67 lt!50854 (_1!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))))))

(assert (=> d!27279 (= lt!50854 (insertStrictlySorted!70 (toList!785 lt!50361) (_1!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))))))

(assert (=> d!27279 (= (+!136 lt!50361 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) lt!50853)))

(declare-fun b!100515 () Bool)

(declare-fun res!50423 () Bool)

(assert (=> b!100515 (=> (not res!50423) (not e!65441))))

(assert (=> b!100515 (= res!50423 (= (getValueByKey!151 (toList!785 lt!50853) (_1!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))))))))

(declare-fun b!100516 () Bool)

(assert (=> b!100516 (= e!65441 (contains!806 (toList!785 lt!50853) (tuple2!2347 lt!50366 (minValue!2383 newMap!16))))))

(assert (= (and d!27279 res!50424) b!100515))

(assert (= (and b!100515 res!50423) b!100516))

(declare-fun m!111393 () Bool)

(assert (=> d!27279 m!111393))

(declare-fun m!111395 () Bool)

(assert (=> d!27279 m!111395))

(declare-fun m!111397 () Bool)

(assert (=> d!27279 m!111397))

(declare-fun m!111399 () Bool)

(assert (=> d!27279 m!111399))

(declare-fun m!111401 () Bool)

(assert (=> b!100515 m!111401))

(declare-fun m!111403 () Bool)

(assert (=> b!100516 m!111403))

(assert (=> b!99716 d!27279))

(declare-fun d!27281 () Bool)

(declare-fun e!65442 () Bool)

(assert (=> d!27281 e!65442))

(declare-fun res!50426 () Bool)

(assert (=> d!27281 (=> (not res!50426) (not e!65442))))

(declare-fun lt!50857 () ListLongMap!1539)

(assert (=> d!27281 (= res!50426 (contains!804 lt!50857 (_1!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50858 () List!1583)

(assert (=> d!27281 (= lt!50857 (ListLongMap!1540 lt!50858))))

(declare-fun lt!50855 () Unit!2999)

(declare-fun lt!50856 () Unit!2999)

(assert (=> d!27281 (= lt!50855 lt!50856)))

(assert (=> d!27281 (= (getValueByKey!151 lt!50858 (_1!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27281 (= lt!50856 (lemmaContainsTupThenGetReturnValue!67 lt!50858 (_1!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27281 (= lt!50858 (insertStrictlySorted!70 (toList!785 lt!50371) (_1!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27281 (= (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) lt!50857)))

(declare-fun b!100517 () Bool)

(declare-fun res!50425 () Bool)

(assert (=> b!100517 (=> (not res!50425) (not e!65442))))

(assert (=> b!100517 (= res!50425 (= (getValueByKey!151 (toList!785 lt!50857) (_1!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100518 () Bool)

(assert (=> b!100518 (= e!65442 (contains!806 (toList!785 lt!50857) (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27281 res!50426) b!100517))

(assert (= (and b!100517 res!50425) b!100518))

(declare-fun m!111405 () Bool)

(assert (=> d!27281 m!111405))

(declare-fun m!111407 () Bool)

(assert (=> d!27281 m!111407))

(declare-fun m!111409 () Bool)

(assert (=> d!27281 m!111409))

(declare-fun m!111411 () Bool)

(assert (=> d!27281 m!111411))

(declare-fun m!111413 () Bool)

(assert (=> b!100517 m!111413))

(declare-fun m!111415 () Bool)

(assert (=> b!100518 m!111415))

(assert (=> b!99716 d!27281))

(declare-fun d!27283 () Bool)

(assert (=> d!27283 (= (apply!93 (+!136 lt!50361 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) lt!50368) (apply!93 lt!50361 lt!50368))))

(declare-fun lt!50859 () Unit!2999)

(assert (=> d!27283 (= lt!50859 (choose!604 lt!50361 lt!50366 (minValue!2383 newMap!16) lt!50368))))

(declare-fun e!65443 () Bool)

(assert (=> d!27283 e!65443))

(declare-fun res!50427 () Bool)

(assert (=> d!27283 (=> (not res!50427) (not e!65443))))

(assert (=> d!27283 (= res!50427 (contains!804 lt!50361 lt!50368))))

(assert (=> d!27283 (= (addApplyDifferent!69 lt!50361 lt!50366 (minValue!2383 newMap!16) lt!50368) lt!50859)))

(declare-fun b!100519 () Bool)

(assert (=> b!100519 (= e!65443 (not (= lt!50368 lt!50366)))))

(assert (= (and d!27283 res!50427) b!100519))

(declare-fun m!111417 () Bool)

(assert (=> d!27283 m!111417))

(assert (=> d!27283 m!109891))

(assert (=> d!27283 m!109877))

(assert (=> d!27283 m!109879))

(declare-fun m!111419 () Bool)

(assert (=> d!27283 m!111419))

(assert (=> d!27283 m!109877))

(assert (=> b!99716 d!27283))

(declare-fun d!27285 () Bool)

(assert (=> d!27285 (= (apply!93 (+!136 lt!50361 (tuple2!2347 lt!50366 (minValue!2383 newMap!16))) lt!50368) (get!1290 (getValueByKey!151 (toList!785 (+!136 lt!50361 (tuple2!2347 lt!50366 (minValue!2383 newMap!16)))) lt!50368)))))

(declare-fun bs!4170 () Bool)

(assert (= bs!4170 d!27285))

(declare-fun m!111421 () Bool)

(assert (=> bs!4170 m!111421))

(assert (=> bs!4170 m!111421))

(declare-fun m!111423 () Bool)

(assert (=> bs!4170 m!111423))

(assert (=> b!99716 d!27285))

(declare-fun d!27287 () Bool)

(declare-fun e!65444 () Bool)

(assert (=> d!27287 e!65444))

(declare-fun res!50428 () Bool)

(assert (=> d!27287 (=> res!50428 e!65444)))

(declare-fun lt!50863 () Bool)

(assert (=> d!27287 (= res!50428 (not lt!50863))))

(declare-fun lt!50861 () Bool)

(assert (=> d!27287 (= lt!50863 lt!50861)))

(declare-fun lt!50860 () Unit!2999)

(declare-fun e!65445 () Unit!2999)

(assert (=> d!27287 (= lt!50860 e!65445)))

(declare-fun c!17263 () Bool)

(assert (=> d!27287 (= c!17263 lt!50861)))

(assert (=> d!27287 (= lt!50861 (containsKey!155 (toList!785 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) lt!50352))))

(assert (=> d!27287 (= (contains!804 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) lt!50352) lt!50863)))

(declare-fun b!100520 () Bool)

(declare-fun lt!50862 () Unit!2999)

(assert (=> b!100520 (= e!65445 lt!50862)))

(assert (=> b!100520 (= lt!50862 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) lt!50352))))

(assert (=> b!100520 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) lt!50352))))

(declare-fun b!100521 () Bool)

(declare-fun Unit!3055 () Unit!2999)

(assert (=> b!100521 (= e!65445 Unit!3055)))

(declare-fun b!100522 () Bool)

(assert (=> b!100522 (= e!65444 (isDefined!104 (getValueByKey!151 (toList!785 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16)))) lt!50352)))))

(assert (= (and d!27287 c!17263) b!100520))

(assert (= (and d!27287 (not c!17263)) b!100521))

(assert (= (and d!27287 (not res!50428)) b!100522))

(declare-fun m!111425 () Bool)

(assert (=> d!27287 m!111425))

(declare-fun m!111427 () Bool)

(assert (=> b!100520 m!111427))

(declare-fun m!111429 () Bool)

(assert (=> b!100520 m!111429))

(assert (=> b!100520 m!111429))

(declare-fun m!111431 () Bool)

(assert (=> b!100520 m!111431))

(assert (=> b!100522 m!111429))

(assert (=> b!100522 m!111429))

(assert (=> b!100522 m!111431))

(assert (=> b!99716 d!27287))

(declare-fun d!27289 () Bool)

(assert (=> d!27289 (= (apply!93 (+!136 lt!50359 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) lt!50372) (apply!93 lt!50359 lt!50372))))

(declare-fun lt!50864 () Unit!2999)

(assert (=> d!27289 (= lt!50864 (choose!604 lt!50359 lt!50367 (minValue!2383 newMap!16) lt!50372))))

(declare-fun e!65446 () Bool)

(assert (=> d!27289 e!65446))

(declare-fun res!50429 () Bool)

(assert (=> d!27289 (=> (not res!50429) (not e!65446))))

(assert (=> d!27289 (= res!50429 (contains!804 lt!50359 lt!50372))))

(assert (=> d!27289 (= (addApplyDifferent!69 lt!50359 lt!50367 (minValue!2383 newMap!16) lt!50372) lt!50864)))

(declare-fun b!100523 () Bool)

(assert (=> b!100523 (= e!65446 (not (= lt!50372 lt!50367)))))

(assert (= (and d!27289 res!50429) b!100523))

(declare-fun m!111433 () Bool)

(assert (=> d!27289 m!111433))

(assert (=> d!27289 m!109895))

(assert (=> d!27289 m!109893))

(assert (=> d!27289 m!109897))

(declare-fun m!111435 () Bool)

(assert (=> d!27289 m!111435))

(assert (=> d!27289 m!109893))

(assert (=> b!99716 d!27289))

(assert (=> b!99716 d!26983))

(declare-fun d!27291 () Bool)

(assert (=> d!27291 (= (apply!93 lt!50359 lt!50372) (get!1290 (getValueByKey!151 (toList!785 lt!50359) lt!50372)))))

(declare-fun bs!4171 () Bool)

(assert (= bs!4171 d!27291))

(declare-fun m!111437 () Bool)

(assert (=> bs!4171 m!111437))

(assert (=> bs!4171 m!111437))

(declare-fun m!111439 () Bool)

(assert (=> bs!4171 m!111439))

(assert (=> b!99716 d!27291))

(declare-fun d!27293 () Bool)

(declare-fun e!65447 () Bool)

(assert (=> d!27293 e!65447))

(declare-fun res!50431 () Bool)

(assert (=> d!27293 (=> (not res!50431) (not e!65447))))

(declare-fun lt!50867 () ListLongMap!1539)

(assert (=> d!27293 (= res!50431 (contains!804 lt!50867 (_1!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))))))

(declare-fun lt!50868 () List!1583)

(assert (=> d!27293 (= lt!50867 (ListLongMap!1540 lt!50868))))

(declare-fun lt!50865 () Unit!2999)

(declare-fun lt!50866 () Unit!2999)

(assert (=> d!27293 (= lt!50865 lt!50866)))

(assert (=> d!27293 (= (getValueByKey!151 lt!50868 (_1!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))))))

(assert (=> d!27293 (= lt!50866 (lemmaContainsTupThenGetReturnValue!67 lt!50868 (_1!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))))))

(assert (=> d!27293 (= lt!50868 (insertStrictlySorted!70 (toList!785 lt!50359) (_1!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) (_2!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))))))

(assert (=> d!27293 (= (+!136 lt!50359 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))) lt!50867)))

(declare-fun b!100524 () Bool)

(declare-fun res!50430 () Bool)

(assert (=> b!100524 (=> (not res!50430) (not e!65447))))

(assert (=> b!100524 (= res!50430 (= (getValueByKey!151 (toList!785 lt!50867) (_1!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16)))) (Some!156 (_2!1184 (tuple2!2347 lt!50367 (minValue!2383 newMap!16))))))))

(declare-fun b!100525 () Bool)

(assert (=> b!100525 (= e!65447 (contains!806 (toList!785 lt!50867) (tuple2!2347 lt!50367 (minValue!2383 newMap!16))))))

(assert (= (and d!27293 res!50431) b!100524))

(assert (= (and b!100524 res!50430) b!100525))

(declare-fun m!111441 () Bool)

(assert (=> d!27293 m!111441))

(declare-fun m!111443 () Bool)

(assert (=> d!27293 m!111443))

(declare-fun m!111445 () Bool)

(assert (=> d!27293 m!111445))

(declare-fun m!111447 () Bool)

(assert (=> d!27293 m!111447))

(declare-fun m!111449 () Bool)

(assert (=> b!100524 m!111449))

(declare-fun m!111451 () Bool)

(assert (=> b!100525 m!111451))

(assert (=> b!99716 d!27293))

(declare-fun d!27295 () Bool)

(assert (=> d!27295 (= (apply!93 lt!50361 lt!50368) (get!1290 (getValueByKey!151 (toList!785 lt!50361) lt!50368)))))

(declare-fun bs!4172 () Bool)

(assert (= bs!4172 d!27295))

(declare-fun m!111453 () Bool)

(assert (=> bs!4172 m!111453))

(assert (=> bs!4172 m!111453))

(declare-fun m!111455 () Bool)

(assert (=> bs!4172 m!111455))

(assert (=> b!99716 d!27295))

(declare-fun d!27297 () Bool)

(assert (=> d!27297 (= (apply!93 lt!50358 lt!50355) (get!1290 (getValueByKey!151 (toList!785 lt!50358) lt!50355)))))

(declare-fun bs!4173 () Bool)

(assert (= bs!4173 d!27297))

(declare-fun m!111457 () Bool)

(assert (=> bs!4173 m!111457))

(assert (=> bs!4173 m!111457))

(declare-fun m!111459 () Bool)

(assert (=> bs!4173 m!111459))

(assert (=> b!99716 d!27297))

(declare-fun d!27299 () Bool)

(assert (=> d!27299 (contains!804 (+!136 lt!50371 (tuple2!2347 lt!50353 (zeroValue!2383 newMap!16))) lt!50352)))

(declare-fun lt!50869 () Unit!2999)

(assert (=> d!27299 (= lt!50869 (choose!605 lt!50371 lt!50353 (zeroValue!2383 newMap!16) lt!50352))))

(assert (=> d!27299 (contains!804 lt!50371 lt!50352)))

(assert (=> d!27299 (= (addStillContains!69 lt!50371 lt!50353 (zeroValue!2383 newMap!16) lt!50352) lt!50869)))

(declare-fun bs!4174 () Bool)

(assert (= bs!4174 d!27299))

(assert (=> bs!4174 m!109887))

(assert (=> bs!4174 m!109887))

(assert (=> bs!4174 m!109889))

(declare-fun m!111461 () Bool)

(assert (=> bs!4174 m!111461))

(declare-fun m!111463 () Bool)

(assert (=> bs!4174 m!111463))

(assert (=> b!99716 d!27299))

(assert (=> b!99739 d!26685))

(declare-fun d!27301 () Bool)

(declare-fun e!65448 () Bool)

(assert (=> d!27301 e!65448))

(declare-fun res!50432 () Bool)

(assert (=> d!27301 (=> res!50432 e!65448)))

(declare-fun lt!50873 () Bool)

(assert (=> d!27301 (= res!50432 (not lt!50873))))

(declare-fun lt!50871 () Bool)

(assert (=> d!27301 (= lt!50873 lt!50871)))

(declare-fun lt!50870 () Unit!2999)

(declare-fun e!65449 () Unit!2999)

(assert (=> d!27301 (= lt!50870 e!65449)))

(declare-fun c!17264 () Bool)

(assert (=> d!27301 (= c!17264 lt!50871)))

(assert (=> d!27301 (= lt!50871 (containsKey!155 (toList!785 (map!1259 (_2!1185 lt!50350))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!27301 (= (contains!804 (map!1259 (_2!1185 lt!50350)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50873)))

(declare-fun b!100526 () Bool)

(declare-fun lt!50872 () Unit!2999)

(assert (=> b!100526 (= e!65449 lt!50872)))

(assert (=> b!100526 (= lt!50872 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 (map!1259 (_2!1185 lt!50350))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> b!100526 (isDefined!104 (getValueByKey!151 (toList!785 (map!1259 (_2!1185 lt!50350))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun b!100527 () Bool)

(declare-fun Unit!3056 () Unit!2999)

(assert (=> b!100527 (= e!65449 Unit!3056)))

(declare-fun b!100528 () Bool)

(assert (=> b!100528 (= e!65448 (isDefined!104 (getValueByKey!151 (toList!785 (map!1259 (_2!1185 lt!50350))) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))))

(assert (= (and d!27301 c!17264) b!100526))

(assert (= (and d!27301 (not c!17264)) b!100527))

(assert (= (and d!27301 (not res!50432)) b!100528))

(assert (=> d!27301 m!109133))

(declare-fun m!111465 () Bool)

(assert (=> d!27301 m!111465))

(assert (=> b!100526 m!109133))

(declare-fun m!111467 () Bool)

(assert (=> b!100526 m!111467))

(assert (=> b!100526 m!109133))

(declare-fun m!111469 () Bool)

(assert (=> b!100526 m!111469))

(assert (=> b!100526 m!111469))

(declare-fun m!111471 () Bool)

(assert (=> b!100526 m!111471))

(assert (=> b!100528 m!109133))

(assert (=> b!100528 m!111469))

(assert (=> b!100528 m!111469))

(assert (=> b!100528 m!111471))

(assert (=> b!99704 d!27301))

(assert (=> b!99704 d!26975))

(declare-fun d!27303 () Bool)

(assert (=> d!27303 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50874 () Unit!2999)

(assert (=> d!27303 (= lt!50874 (choose!609 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65450 () Bool)

(assert (=> d!27303 e!65450))

(declare-fun res!50433 () Bool)

(assert (=> d!27303 (=> (not res!50433) (not e!65450))))

(assert (=> d!27303 (= res!50433 (isStrictlySorted!305 (toList!785 lt!49957)))))

(assert (=> d!27303 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000) lt!50874)))

(declare-fun b!100529 () Bool)

(assert (=> b!100529 (= e!65450 (containsKey!155 (toList!785 lt!49957) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27303 res!50433) b!100529))

(assert (=> d!27303 m!109597))

(assert (=> d!27303 m!109597))

(assert (=> d!27303 m!109599))

(declare-fun m!111473 () Bool)

(assert (=> d!27303 m!111473))

(assert (=> d!27303 m!110731))

(assert (=> b!100529 m!109593))

(assert (=> b!99547 d!27303))

(assert (=> b!99547 d!27015))

(assert (=> b!99547 d!27017))

(declare-fun d!27305 () Bool)

(declare-fun e!65451 () Bool)

(assert (=> d!27305 e!65451))

(declare-fun res!50435 () Bool)

(assert (=> d!27305 (=> (not res!50435) (not e!65451))))

(declare-fun lt!50877 () ListLongMap!1539)

(assert (=> d!27305 (= res!50435 (contains!804 lt!50877 (_1!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun lt!50878 () List!1583)

(assert (=> d!27305 (= lt!50877 (ListLongMap!1540 lt!50878))))

(declare-fun lt!50875 () Unit!2999)

(declare-fun lt!50876 () Unit!2999)

(assert (=> d!27305 (= lt!50875 lt!50876)))

(assert (=> d!27305 (= (getValueByKey!151 lt!50878 (_1!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27305 (= lt!50876 (lemmaContainsTupThenGetReturnValue!67 lt!50878 (_1!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27305 (= lt!50878 (insertStrictlySorted!70 (toList!785 (ite c!16967 call!10221 (ite c!16971 call!10222 call!10218))) (_1!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27305 (= (+!136 (ite c!16967 call!10221 (ite c!16971 call!10222 call!10218)) (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) lt!50877)))

(declare-fun b!100530 () Bool)

(declare-fun res!50434 () Bool)

(assert (=> b!100530 (=> (not res!50434) (not e!65451))))

(assert (=> b!100530 (= res!50434 (= (getValueByKey!151 (toList!785 lt!50877) (_1!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!156 (_2!1184 (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))))

(declare-fun b!100531 () Bool)

(assert (=> b!100531 (= e!65451 (contains!806 (toList!785 lt!50877) (ite (or c!16967 c!16971) (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (= (and d!27305 res!50435) b!100530))

(assert (= (and b!100530 res!50434) b!100531))

(declare-fun m!111475 () Bool)

(assert (=> d!27305 m!111475))

(declare-fun m!111477 () Bool)

(assert (=> d!27305 m!111477))

(declare-fun m!111479 () Bool)

(assert (=> d!27305 m!111479))

(declare-fun m!111481 () Bool)

(assert (=> d!27305 m!111481))

(declare-fun m!111483 () Bool)

(assert (=> b!100530 m!111483))

(declare-fun m!111485 () Bool)

(assert (=> b!100531 m!111485))

(assert (=> bm!10217 d!27305))

(declare-fun b!100532 () Bool)

(declare-fun e!65454 () Bool)

(assert (=> b!100532 (= e!65454 (contains!805 (ite c!17015 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1581) Nil!1581) (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100534 () Bool)

(declare-fun e!65455 () Bool)

(declare-fun call!10357 () Bool)

(assert (=> b!100534 (= e!65455 call!10357)))

(declare-fun b!100535 () Bool)

(assert (=> b!100535 (= e!65455 call!10357)))

(declare-fun d!27307 () Bool)

(declare-fun res!50436 () Bool)

(declare-fun e!65453 () Bool)

(assert (=> d!27307 (=> res!50436 e!65453)))

(assert (=> d!27307 (= res!50436 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27307 (= (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17015 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1581) Nil!1581)) e!65453)))

(declare-fun b!100533 () Bool)

(declare-fun e!65452 () Bool)

(assert (=> b!100533 (= e!65453 e!65452)))

(declare-fun res!50437 () Bool)

(assert (=> b!100533 (=> (not res!50437) (not e!65452))))

(assert (=> b!100533 (= res!50437 (not e!65454))))

(declare-fun res!50438 () Bool)

(assert (=> b!100533 (=> (not res!50438) (not e!65454))))

(assert (=> b!100533 (= res!50438 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100536 () Bool)

(assert (=> b!100536 (= e!65452 e!65455)))

(declare-fun c!17265 () Bool)

(assert (=> b!100536 (= c!17265 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10354 () Bool)

(assert (=> bm!10354 (= call!10357 (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17265 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!17015 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1581) Nil!1581)) (ite c!17015 (Cons!1580 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1581) Nil!1581))))))

(assert (= (and d!27307 (not res!50436)) b!100533))

(assert (= (and b!100533 res!50438) b!100532))

(assert (= (and b!100533 res!50437) b!100536))

(assert (= (and b!100536 c!17265) b!100534))

(assert (= (and b!100536 (not c!17265)) b!100535))

(assert (= (or b!100534 b!100535) bm!10354))

(assert (=> b!100532 m!110259))

(assert (=> b!100532 m!110259))

(declare-fun m!111487 () Bool)

(assert (=> b!100532 m!111487))

(assert (=> b!100533 m!110259))

(assert (=> b!100533 m!110259))

(assert (=> b!100533 m!110261))

(assert (=> b!100536 m!110259))

(assert (=> b!100536 m!110259))

(assert (=> b!100536 m!110261))

(assert (=> bm!10354 m!110259))

(declare-fun m!111489 () Bool)

(assert (=> bm!10354 m!111489))

(assert (=> bm!10235 d!27307))

(declare-fun d!27309 () Bool)

(assert (=> d!27309 (= (get!1288 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2815 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99731 d!27309))

(declare-fun d!27311 () Bool)

(assert (=> d!27311 (= (isEmpty!360 (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))) (not ((_ is Some!156) (getValueByKey!151 (toList!785 lt!49878) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))))

(assert (=> d!26755 d!27311))

(declare-fun d!27313 () Bool)

(declare-fun e!65456 () Bool)

(assert (=> d!27313 e!65456))

(declare-fun res!50439 () Bool)

(assert (=> d!27313 (=> res!50439 e!65456)))

(declare-fun lt!50882 () Bool)

(assert (=> d!27313 (= res!50439 (not lt!50882))))

(declare-fun lt!50880 () Bool)

(assert (=> d!27313 (= lt!50882 lt!50880)))

(declare-fun lt!50879 () Unit!2999)

(declare-fun e!65457 () Unit!2999)

(assert (=> d!27313 (= lt!50879 e!65457)))

(declare-fun c!17266 () Bool)

(assert (=> d!27313 (= c!17266 lt!50880)))

(assert (=> d!27313 (= lt!50880 (containsKey!155 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> d!27313 (= (contains!804 lt!50214 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50882)))

(declare-fun b!100537 () Bool)

(declare-fun lt!50881 () Unit!2999)

(assert (=> b!100537 (= e!65457 lt!50881)))

(assert (=> b!100537 (= lt!50881 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (=> b!100537 (isDefined!104 (getValueByKey!151 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100538 () Bool)

(declare-fun Unit!3057 () Unit!2999)

(assert (=> b!100538 (= e!65457 Unit!3057)))

(declare-fun b!100539 () Bool)

(assert (=> b!100539 (= e!65456 (isDefined!104 (getValueByKey!151 (toList!785 lt!50214) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27313 c!17266) b!100537))

(assert (= (and d!27313 (not c!17266)) b!100538))

(assert (= (and d!27313 (not res!50439)) b!100539))

(declare-fun m!111491 () Bool)

(assert (=> d!27313 m!111491))

(declare-fun m!111493 () Bool)

(assert (=> b!100537 m!111493))

(assert (=> b!100537 m!109707))

(assert (=> b!100537 m!109707))

(declare-fun m!111495 () Bool)

(assert (=> b!100537 m!111495))

(assert (=> b!100539 m!109707))

(assert (=> b!100539 m!109707))

(assert (=> b!100539 m!111495))

(assert (=> d!26785 d!27313))

(declare-fun b!100541 () Bool)

(declare-fun e!65458 () Option!157)

(declare-fun e!65459 () Option!157)

(assert (=> b!100541 (= e!65458 e!65459)))

(declare-fun c!17268 () Bool)

(assert (=> b!100541 (= c!17268 (and ((_ is Cons!1579) lt!50215) (not (= (_1!1184 (h!2174 lt!50215)) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun b!100543 () Bool)

(assert (=> b!100543 (= e!65459 None!155)))

(declare-fun b!100542 () Bool)

(assert (=> b!100542 (= e!65459 (getValueByKey!151 (t!5557 lt!50215) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun d!27315 () Bool)

(declare-fun c!17267 () Bool)

(assert (=> d!27315 (= c!17267 (and ((_ is Cons!1579) lt!50215) (= (_1!1184 (h!2174 lt!50215)) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27315 (= (getValueByKey!151 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) e!65458)))

(declare-fun b!100540 () Bool)

(assert (=> b!100540 (= e!65458 (Some!156 (_2!1184 (h!2174 lt!50215))))))

(assert (= (and d!27315 c!17267) b!100540))

(assert (= (and d!27315 (not c!17267)) b!100541))

(assert (= (and b!100541 c!17268) b!100542))

(assert (= (and b!100541 (not c!17268)) b!100543))

(declare-fun m!111497 () Bool)

(assert (=> b!100542 m!111497))

(assert (=> d!26785 d!27315))

(declare-fun d!27317 () Bool)

(assert (=> d!27317 (= (getValueByKey!151 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) (Some!156 (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun lt!50883 () Unit!2999)

(assert (=> d!27317 (= lt!50883 (choose!611 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun e!65460 () Bool)

(assert (=> d!27317 e!65460))

(declare-fun res!50440 () Bool)

(assert (=> d!27317 (=> (not res!50440) (not e!65460))))

(assert (=> d!27317 (= res!50440 (isStrictlySorted!305 lt!50215))))

(assert (=> d!27317 (= (lemmaContainsTupThenGetReturnValue!67 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50883)))

(declare-fun b!100544 () Bool)

(declare-fun res!50441 () Bool)

(assert (=> b!100544 (=> (not res!50441) (not e!65460))))

(assert (=> b!100544 (= res!50441 (containsKey!155 lt!50215 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100545 () Bool)

(assert (=> b!100545 (= e!65460 (contains!806 lt!50215 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (= (and d!27317 res!50440) b!100544))

(assert (= (and b!100544 res!50441) b!100545))

(assert (=> d!27317 m!109701))

(declare-fun m!111499 () Bool)

(assert (=> d!27317 m!111499))

(declare-fun m!111501 () Bool)

(assert (=> d!27317 m!111501))

(declare-fun m!111503 () Bool)

(assert (=> b!100544 m!111503))

(declare-fun m!111505 () Bool)

(assert (=> b!100545 m!111505))

(assert (=> d!26785 d!27317))

(declare-fun e!65461 () List!1583)

(declare-fun call!10358 () List!1583)

(declare-fun c!17272 () Bool)

(declare-fun bm!10355 () Bool)

(assert (=> bm!10355 (= call!10358 ($colon$colon!79 e!65461 (ite c!17272 (h!2174 (toList!785 lt!49953)) (tuple2!2347 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))))

(declare-fun c!17269 () Bool)

(assert (=> bm!10355 (= c!17269 c!17272)))

(declare-fun b!100546 () Bool)

(declare-fun e!65462 () List!1583)

(declare-fun e!65464 () List!1583)

(assert (=> b!100546 (= e!65462 e!65464)))

(declare-fun c!17271 () Bool)

(assert (=> b!100546 (= c!17271 (and ((_ is Cons!1579) (toList!785 lt!49953)) (= (_1!1184 (h!2174 (toList!785 lt!49953))) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun b!100547 () Bool)

(declare-fun res!50443 () Bool)

(declare-fun e!65465 () Bool)

(assert (=> b!100547 (=> (not res!50443) (not e!65465))))

(declare-fun lt!50884 () List!1583)

(assert (=> b!100547 (= res!50443 (containsKey!155 lt!50884 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(declare-fun b!100548 () Bool)

(declare-fun c!17270 () Bool)

(assert (=> b!100548 (= e!65461 (ite c!17271 (t!5557 (toList!785 lt!49953)) (ite c!17270 (Cons!1579 (h!2174 (toList!785 lt!49953)) (t!5557 (toList!785 lt!49953))) Nil!1580)))))

(declare-fun b!100549 () Bool)

(declare-fun e!65463 () List!1583)

(declare-fun call!10359 () List!1583)

(assert (=> b!100549 (= e!65463 call!10359)))

(declare-fun b!100550 () Bool)

(assert (=> b!100550 (= e!65463 call!10359)))

(declare-fun d!27319 () Bool)

(assert (=> d!27319 e!65465))

(declare-fun res!50442 () Bool)

(assert (=> d!27319 (=> (not res!50442) (not e!65465))))

(assert (=> d!27319 (= res!50442 (isStrictlySorted!305 lt!50884))))

(assert (=> d!27319 (= lt!50884 e!65462)))

(assert (=> d!27319 (= c!17272 (and ((_ is Cons!1579) (toList!785 lt!49953)) (bvslt (_1!1184 (h!2174 (toList!785 lt!49953))) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> d!27319 (isStrictlySorted!305 (toList!785 lt!49953))))

(assert (=> d!27319 (= (insertStrictlySorted!70 (toList!785 lt!49953) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))) lt!50884)))

(declare-fun b!100551 () Bool)

(assert (=> b!100551 (= c!17270 (and ((_ is Cons!1579) (toList!785 lt!49953)) (bvsgt (_1!1184 (h!2174 (toList!785 lt!49953))) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(assert (=> b!100551 (= e!65464 e!65463)))

(declare-fun bm!10356 () Bool)

(declare-fun call!10360 () List!1583)

(assert (=> bm!10356 (= call!10360 call!10358)))

(declare-fun b!100552 () Bool)

(assert (=> b!100552 (= e!65464 call!10360)))

(declare-fun b!100553 () Bool)

(assert (=> b!100553 (= e!65465 (contains!806 lt!50884 (tuple2!2347 (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))))

(declare-fun bm!10357 () Bool)

(assert (=> bm!10357 (= call!10359 call!10360)))

(declare-fun b!100554 () Bool)

(assert (=> b!100554 (= e!65462 call!10358)))

(declare-fun b!100555 () Bool)

(assert (=> b!100555 (= e!65461 (insertStrictlySorted!70 (t!5557 (toList!785 lt!49953)) (_1!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) (_2!1184 (tuple2!2347 lt!49961 (minValue!2383 (v!2816 (underlying!340 thiss!992)))))))))

(assert (= (and d!27319 c!17272) b!100554))

(assert (= (and d!27319 (not c!17272)) b!100546))

(assert (= (and b!100546 c!17271) b!100552))

(assert (= (and b!100546 (not c!17271)) b!100551))

(assert (= (and b!100551 c!17270) b!100549))

(assert (= (and b!100551 (not c!17270)) b!100550))

(assert (= (or b!100549 b!100550) bm!10357))

(assert (= (or b!100552 bm!10357) bm!10356))

(assert (= (or b!100554 bm!10356) bm!10355))

(assert (= (and bm!10355 c!17269) b!100555))

(assert (= (and bm!10355 (not c!17269)) b!100548))

(assert (= (and d!27319 res!50442) b!100547))

(assert (= (and b!100547 res!50443) b!100553))

(declare-fun m!111507 () Bool)

(assert (=> bm!10355 m!111507))

(declare-fun m!111509 () Bool)

(assert (=> b!100547 m!111509))

(declare-fun m!111511 () Bool)

(assert (=> b!100555 m!111511))

(declare-fun m!111513 () Bool)

(assert (=> b!100553 m!111513))

(declare-fun m!111515 () Bool)

(assert (=> d!27319 m!111515))

(declare-fun m!111517 () Bool)

(assert (=> d!27319 m!111517))

(assert (=> d!26785 d!27319))

(declare-fun e!65468 () Bool)

(declare-fun b!100556 () Bool)

(assert (=> b!100556 (= e!65468 (contains!805 (ite c!17002 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!100558 () Bool)

(declare-fun e!65469 () Bool)

(declare-fun call!10361 () Bool)

(assert (=> b!100558 (= e!65469 call!10361)))

(declare-fun b!100559 () Bool)

(assert (=> b!100559 (= e!65469 call!10361)))

(declare-fun d!27321 () Bool)

(declare-fun res!50444 () Bool)

(declare-fun e!65467 () Bool)

(assert (=> d!27321 (=> res!50444 e!65467)))

(assert (=> d!27321 (= res!50444 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!27321 (= (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17002 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581))) e!65467)))

(declare-fun b!100557 () Bool)

(declare-fun e!65466 () Bool)

(assert (=> b!100557 (= e!65467 e!65466)))

(declare-fun res!50445 () Bool)

(assert (=> b!100557 (=> (not res!50445) (not e!65466))))

(assert (=> b!100557 (= res!50445 (not e!65468))))

(declare-fun res!50446 () Bool)

(assert (=> b!100557 (=> (not res!50446) (not e!65468))))

(assert (=> b!100557 (= res!50446 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!100560 () Bool)

(assert (=> b!100560 (= e!65466 e!65469)))

(declare-fun c!17273 () Bool)

(assert (=> b!100560 (= c!17273 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!10358 () Bool)

(assert (=> bm!10358 (= call!10361 (arrayNoDuplicates!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17273 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!17002 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581))) (ite c!17002 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)) (ite c!16913 (Cons!1580 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) Nil!1581) Nil!1581)))))))

(assert (= (and d!27321 (not res!50444)) b!100557))

(assert (= (and b!100557 res!50446) b!100556))

(assert (= (and b!100557 res!50445) b!100560))

(assert (= (and b!100560 c!17273) b!100558))

(assert (= (and b!100560 (not c!17273)) b!100559))

(assert (= (or b!100558 b!100559) bm!10358))

(declare-fun m!111519 () Bool)

(assert (=> b!100556 m!111519))

(assert (=> b!100556 m!111519))

(declare-fun m!111521 () Bool)

(assert (=> b!100556 m!111521))

(assert (=> b!100557 m!111519))

(assert (=> b!100557 m!111519))

(declare-fun m!111523 () Bool)

(assert (=> b!100557 m!111523))

(assert (=> b!100560 m!111519))

(assert (=> b!100560 m!111519))

(assert (=> b!100560 m!111523))

(assert (=> bm!10358 m!111519))

(declare-fun m!111525 () Bool)

(assert (=> bm!10358 m!111525))

(assert (=> bm!10234 d!27321))

(declare-fun d!27323 () Bool)

(declare-fun lt!50885 () Bool)

(assert (=> d!27323 (= lt!50885 (select (content!104 (toList!785 lt!50256)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65471 () Bool)

(assert (=> d!27323 (= lt!50885 e!65471)))

(declare-fun res!50447 () Bool)

(assert (=> d!27323 (=> (not res!50447) (not e!65471))))

(assert (=> d!27323 (= res!50447 ((_ is Cons!1579) (toList!785 lt!50256)))))

(assert (=> d!27323 (= (contains!806 (toList!785 lt!50256) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50885)))

(declare-fun b!100561 () Bool)

(declare-fun e!65470 () Bool)

(assert (=> b!100561 (= e!65471 e!65470)))

(declare-fun res!50448 () Bool)

(assert (=> b!100561 (=> res!50448 e!65470)))

(assert (=> b!100561 (= res!50448 (= (h!2174 (toList!785 lt!50256)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100562 () Bool)

(assert (=> b!100562 (= e!65470 (contains!806 (t!5557 (toList!785 lt!50256)) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!27323 res!50447) b!100561))

(assert (= (and b!100561 (not res!50448)) b!100562))

(declare-fun m!111527 () Bool)

(assert (=> d!27323 m!111527))

(declare-fun m!111529 () Bool)

(assert (=> d!27323 m!111529))

(declare-fun m!111531 () Bool)

(assert (=> b!100562 m!111531))

(assert (=> b!99641 d!27323))

(declare-fun d!27325 () Bool)

(declare-fun res!50449 () Bool)

(declare-fun e!65472 () Bool)

(assert (=> d!27325 (=> res!50449 e!65472)))

(assert (=> d!27325 (= res!50449 (= (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (=> d!27325 (= (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!65472)))

(declare-fun b!100563 () Bool)

(declare-fun e!65473 () Bool)

(assert (=> b!100563 (= e!65472 e!65473)))

(declare-fun res!50450 () Bool)

(assert (=> b!100563 (=> (not res!50450) (not e!65473))))

(assert (=> b!100563 (= res!50450 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(declare-fun b!100564 () Bool)

(assert (=> b!100564 (= e!65473 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27325 (not res!50449)) b!100563))

(assert (= (and b!100563 res!50450) b!100564))

(assert (=> d!27325 m!110259))

(assert (=> b!100564 m!109133))

(declare-fun m!111533 () Bool)

(assert (=> b!100564 m!111533))

(assert (=> b!99734 d!27325))

(declare-fun d!27327 () Bool)

(assert (=> d!27327 (= (apply!93 lt!50129 (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1290 (getValueByKey!151 (toList!785 lt!50129) (select (arr!2021 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4175 () Bool)

(assert (= bs!4175 d!27327))

(assert (=> bs!4175 m!109397))

(assert (=> bs!4175 m!110611))

(assert (=> bs!4175 m!110611))

(declare-fun m!111535 () Bool)

(assert (=> bs!4175 m!111535))

(assert (=> b!99442 d!27327))

(declare-fun d!27329 () Bool)

(declare-fun c!17274 () Bool)

(assert (=> d!27329 (= c!17274 ((_ is ValueCellFull!975) (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65474 () V!3163)

(assert (=> d!27329 (= (get!1287 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65474)))

(declare-fun b!100565 () Bool)

(assert (=> b!100565 (= e!65474 (get!1288 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100566 () Bool)

(assert (=> b!100566 (= e!65474 (get!1289 (select (arr!2022 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!370 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27329 c!17274) b!100565))

(assert (= (and d!27329 (not c!17274)) b!100566))

(assert (=> b!100565 m!109477))

(assert (=> b!100565 m!109401))

(declare-fun m!111537 () Bool)

(assert (=> b!100565 m!111537))

(assert (=> b!100566 m!109477))

(assert (=> b!100566 m!109401))

(declare-fun m!111539 () Bool)

(assert (=> b!100566 m!111539))

(assert (=> b!99442 d!27329))

(declare-fun d!27331 () Bool)

(assert (=> d!27331 (= (get!1290 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2820 (getValueByKey!151 (toList!785 lt!49957) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26823 d!27331))

(assert (=> d!26823 d!26921))

(assert (=> b!99607 d!27023))

(assert (=> b!99607 d!27025))

(declare-fun d!27333 () Bool)

(assert (=> d!27333 (= (apply!93 lt!50163 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1290 (getValueByKey!151 (toList!785 lt!50163) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4176 () Bool)

(assert (= bs!4176 d!27333))

(assert (=> bs!4176 m!109223))

(assert (=> bs!4176 m!109937))

(assert (=> bs!4176 m!109937))

(declare-fun m!111541 () Bool)

(assert (=> bs!4176 m!111541))

(assert (=> b!99499 d!27333))

(assert (=> b!99499 d!26825))

(declare-fun d!27335 () Bool)

(assert (=> d!27335 (isDefined!104 (getValueByKey!151 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50886 () Unit!2999)

(assert (=> d!27335 (= lt!50886 (choose!609 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65475 () Bool)

(assert (=> d!27335 e!65475))

(declare-fun res!50451 () Bool)

(assert (=> d!27335 (=> (not res!50451) (not e!65475))))

(assert (=> d!27335 (= res!50451 (isStrictlySorted!305 (toList!785 lt!49957)))))

(assert (=> d!27335 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000) lt!50886)))

(declare-fun b!100567 () Bool)

(assert (=> b!100567 (= e!65475 (containsKey!155 (toList!785 lt!49957) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27335 res!50451) b!100567))

(assert (=> d!27335 m!109549))

(assert (=> d!27335 m!109549))

(assert (=> d!27335 m!109551))

(declare-fun m!111543 () Bool)

(assert (=> d!27335 m!111543))

(assert (=> d!27335 m!110731))

(assert (=> b!100567 m!109545))

(assert (=> b!99466 d!27335))

(assert (=> b!99466 d!27013))

(assert (=> b!99466 d!26989))

(declare-fun d!27337 () Bool)

(declare-fun lt!50887 () Bool)

(assert (=> d!27337 (= lt!50887 (select (content!104 (toList!785 lt!50198)) (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun e!65477 () Bool)

(assert (=> d!27337 (= lt!50887 e!65477)))

(declare-fun res!50452 () Bool)

(assert (=> d!27337 (=> (not res!50452) (not e!65477))))

(assert (=> d!27337 (= res!50452 ((_ is Cons!1579) (toList!785 lt!50198)))))

(assert (=> d!27337 (= (contains!806 (toList!785 lt!50198) (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))) lt!50887)))

(declare-fun b!100568 () Bool)

(declare-fun e!65476 () Bool)

(assert (=> b!100568 (= e!65477 e!65476)))

(declare-fun res!50453 () Bool)

(assert (=> b!100568 (=> res!50453 e!65476)))

(assert (=> b!100568 (= res!50453 (= (h!2174 (toList!785 lt!50198)) (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100569 () Bool)

(assert (=> b!100569 (= e!65476 (contains!806 (t!5557 (toList!785 lt!50198)) (tuple2!2347 lt!49960 (minValue!2383 (v!2816 (underlying!340 thiss!992))))))))

(assert (= (and d!27337 res!50452) b!100568))

(assert (= (and b!100568 (not res!50453)) b!100569))

(declare-fun m!111545 () Bool)

(assert (=> d!27337 m!111545))

(declare-fun m!111547 () Bool)

(assert (=> d!27337 m!111547))

(declare-fun m!111549 () Bool)

(assert (=> b!100569 m!111549))

(assert (=> b!99600 d!27337))

(declare-fun d!27339 () Bool)

(assert (=> d!27339 (contains!804 (getCurrentListMap!476 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355))))

(declare-fun lt!50890 () Unit!2999)

(declare-fun choose!614 (array!4255 array!4257 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!2999)

(assert (=> d!27339 (= lt!50890 (choose!614 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27339 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27339 (= (lemmaArrayContainsKeyThenInListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50890)))

(declare-fun bs!4177 () Bool)

(assert (= bs!4177 d!27339))

(assert (=> bs!4177 m!109221))

(assert (=> bs!4177 m!109221))

(assert (=> bs!4177 m!109133))

(assert (=> bs!4177 m!109335))

(assert (=> bs!4177 m!109133))

(declare-fun m!111551 () Bool)

(assert (=> bs!4177 m!111551))

(assert (=> bs!4177 m!109413))

(assert (=> b!99701 d!27339))

(assert (=> b!99701 d!26799))

(assert (=> b!99701 d!26725))

(declare-fun d!27341 () Bool)

(assert (=> d!27341 (isDefined!104 (getValueByKey!151 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun lt!50891 () Unit!2999)

(assert (=> d!27341 (= lt!50891 (choose!609 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(declare-fun e!65478 () Bool)

(assert (=> d!27341 e!65478))

(declare-fun res!50454 () Bool)

(assert (=> d!27341 (=> (not res!50454) (not e!65478))))

(assert (=> d!27341 (= res!50454 (isStrictlySorted!305 (toList!785 call!10189)))))

(assert (=> d!27341 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)) lt!50891)))

(declare-fun b!100570 () Bool)

(assert (=> b!100570 (= e!65478 (containsKey!155 (toList!785 call!10189) (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355)))))

(assert (= (and d!27341 res!50454) b!100570))

(assert (=> d!27341 m!109133))

(assert (=> d!27341 m!109541))

(assert (=> d!27341 m!109541))

(assert (=> d!27341 m!109543))

(assert (=> d!27341 m!109133))

(declare-fun m!111553 () Bool)

(assert (=> d!27341 m!111553))

(declare-fun m!111555 () Bool)

(assert (=> d!27341 m!111555))

(assert (=> b!100570 m!109133))

(assert (=> b!100570 m!109537))

(assert (=> b!99463 d!27341))

(assert (=> b!99463 d!27005))

(assert (=> b!99463 d!27007))

(declare-fun b!100571 () Bool)

(declare-fun e!65480 () (_ BitVec 32))

(declare-fun e!65479 () (_ BitVec 32))

(assert (=> b!100571 (= e!65480 e!65479)))

(declare-fun c!17275 () Bool)

(assert (=> b!100571 (= c!17275 (validKeyInArray!0 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100572 () Bool)

(declare-fun call!10362 () (_ BitVec 32))

(assert (=> b!100572 (= e!65479 (bvadd #b00000000000000000000000000000001 call!10362))))

(declare-fun b!100573 () Bool)

(assert (=> b!100573 (= e!65480 #b00000000000000000000000000000000)))

(declare-fun d!27343 () Bool)

(declare-fun lt!50892 () (_ BitVec 32))

(assert (=> d!27343 (and (bvsge lt!50892 #b00000000000000000000000000000000) (bvsle lt!50892 (bvsub (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!27343 (= lt!50892 e!65480)))

(declare-fun c!17276 () Bool)

(assert (=> d!27343 (= c!17276 (bvsge #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!27343 (and (bvsle #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(assert (=> d!27343 (= (arrayCountValidKeys!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) #b00000000000000000000000000000000 (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))) lt!50892)))

(declare-fun bm!10359 () Bool)

(assert (=> bm!10359 (= call!10362 (arrayCountValidKeys!0 (_keys!4196 (v!2816 (underlying!340 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 (v!2816 (underlying!340 thiss!992))))))))

(declare-fun b!100574 () Bool)

(assert (=> b!100574 (= e!65479 call!10362)))

(assert (= (and d!27343 c!17276) b!100573))

(assert (= (and d!27343 (not c!17276)) b!100571))

(assert (= (and b!100571 c!17275) b!100572))

(assert (= (and b!100571 (not c!17275)) b!100574))

(assert (= (or b!100572 b!100574) bm!10359))

(assert (=> b!100571 m!110245))

(assert (=> b!100571 m!110245))

(assert (=> b!100571 m!110247))

(declare-fun m!111557 () Bool)

(assert (=> bm!10359 m!111557))

(assert (=> b!99460 d!27343))

(declare-fun b!100575 () Bool)

(declare-fun e!65483 () Bool)

(declare-fun e!65482 () Bool)

(assert (=> b!100575 (= e!65483 e!65482)))

(declare-fun c!17277 () Bool)

(assert (=> b!100575 (= c!17277 (validKeyInArray!0 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!27345 () Bool)

(declare-fun res!50456 () Bool)

(assert (=> d!27345 (=> res!50456 e!65483)))

(assert (=> d!27345 (= res!50456 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2272 (_keys!4196 newMap!16))))))

(assert (=> d!27345 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)) e!65483)))

(declare-fun b!100576 () Bool)

(declare-fun e!65481 () Bool)

(declare-fun call!10363 () Bool)

(assert (=> b!100576 (= e!65481 call!10363)))

(declare-fun b!100577 () Bool)

(assert (=> b!100577 (= e!65482 e!65481)))

(declare-fun lt!50893 () (_ BitVec 64))

(assert (=> b!100577 (= lt!50893 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!50895 () Unit!2999)

(assert (=> b!100577 (= lt!50895 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50893 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!100577 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50893 #b00000000000000000000000000000000)))

(declare-fun lt!50894 () Unit!2999)

(assert (=> b!100577 (= lt!50894 lt!50895)))

(declare-fun res!50455 () Bool)

(assert (=> b!100577 (= res!50455 (= (seekEntryOrOpen!0 (select (arr!2021 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4196 newMap!16) (mask!6609 newMap!16)) (Found!254 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!100577 (=> (not res!50455) (not e!65481))))

(declare-fun bm!10360 () Bool)

(assert (=> bm!10360 (= call!10363 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100578 () Bool)

(assert (=> b!100578 (= e!65482 call!10363)))

(assert (= (and d!27345 (not res!50456)) b!100575))

(assert (= (and b!100575 c!17277) b!100577))

(assert (= (and b!100575 (not c!17277)) b!100578))

(assert (= (and b!100577 res!50455) b!100576))

(assert (= (or b!100576 b!100578) bm!10360))

(assert (=> b!100575 m!110259))

(assert (=> b!100575 m!110259))

(assert (=> b!100575 m!110261))

(assert (=> b!100577 m!110259))

(declare-fun m!111559 () Bool)

(assert (=> b!100577 m!111559))

(declare-fun m!111561 () Bool)

(assert (=> b!100577 m!111561))

(assert (=> b!100577 m!110259))

(declare-fun m!111563 () Bool)

(assert (=> b!100577 m!111563))

(declare-fun m!111565 () Bool)

(assert (=> bm!10360 m!111565))

(assert (=> bm!10227 d!27345))

(declare-fun b!100580 () Bool)

(declare-fun e!65484 () Option!157)

(declare-fun e!65485 () Option!157)

(assert (=> b!100580 (= e!65484 e!65485)))

(declare-fun c!17279 () Bool)

(assert (=> b!100580 (= c!17279 (and ((_ is Cons!1579) (toList!785 lt!50083)) (not (= (_1!1184 (h!2174 (toList!785 lt!50083))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100582 () Bool)

(assert (=> b!100582 (= e!65485 None!155)))

(declare-fun b!100581 () Bool)

(assert (=> b!100581 (= e!65485 (getValueByKey!151 (t!5557 (toList!785 lt!50083)) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!27347 () Bool)

(declare-fun c!17278 () Bool)

(assert (=> d!27347 (= c!17278 (and ((_ is Cons!1579) (toList!785 lt!50083)) (= (_1!1184 (h!2174 (toList!785 lt!50083))) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27347 (= (getValueByKey!151 (toList!785 lt!50083) (_1!1184 (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65484)))

(declare-fun b!100579 () Bool)

(assert (=> b!100579 (= e!65484 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50083)))))))

(assert (= (and d!27347 c!17278) b!100579))

(assert (= (and d!27347 (not c!17278)) b!100580))

(assert (= (and b!100580 c!17279) b!100581))

(assert (= (and b!100580 (not c!17279)) b!100582))

(declare-fun m!111567 () Bool)

(assert (=> b!100581 m!111567))

(assert (=> b!99407 d!27347))

(assert (=> b!99643 d!26841))

(declare-fun b!100584 () Bool)

(declare-fun e!65486 () Option!157)

(declare-fun e!65487 () Option!157)

(assert (=> b!100584 (= e!65486 e!65487)))

(declare-fun c!17281 () Bool)

(assert (=> b!100584 (= c!17281 (and ((_ is Cons!1579) (toList!785 lt!50226)) (not (= (_1!1184 (h!2174 (toList!785 lt!50226))) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!100586 () Bool)

(assert (=> b!100586 (= e!65487 None!155)))

(declare-fun b!100585 () Bool)

(assert (=> b!100585 (= e!65487 (getValueByKey!151 (t!5557 (toList!785 lt!50226)) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!27349 () Bool)

(declare-fun c!17280 () Bool)

(assert (=> d!27349 (= c!17280 (and ((_ is Cons!1579) (toList!785 lt!50226)) (= (_1!1184 (h!2174 (toList!785 lt!50226))) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27349 (= (getValueByKey!151 (toList!785 lt!50226) (_1!1184 (ite c!16953 (ite c!16947 (tuple2!2347 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2347 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2347 (select (arr!2021 (_keys!4196 (v!2816 (underlying!340 thiss!992)))) from!355) (get!1287 (select (arr!2022 (_values!2485 (v!2816 (underlying!340 thiss!992)))) from!355) (dynLambda!370 (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65486)))

(declare-fun b!100583 () Bool)

(assert (=> b!100583 (= e!65486 (Some!156 (_2!1184 (h!2174 (toList!785 lt!50226)))))))

(assert (= (and d!27349 c!17280) b!100583))

(assert (= (and d!27349 (not c!17280)) b!100584))

(assert (= (and b!100584 c!17281) b!100585))

(assert (= (and b!100584 (not c!17281)) b!100586))

(declare-fun m!111569 () Bool)

(assert (=> b!100585 m!111569))

(assert (=> b!99617 d!27349))

(declare-fun condMapEmpty!3785 () Bool)

(declare-fun mapDefault!3785 () ValueCell!975)

(assert (=> mapNonEmpty!3784 (= condMapEmpty!3785 (= mapRest!3784 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3785)))))

(declare-fun e!65488 () Bool)

(declare-fun mapRes!3785 () Bool)

(assert (=> mapNonEmpty!3784 (= tp!9634 (and e!65488 mapRes!3785))))

(declare-fun mapNonEmpty!3785 () Bool)

(declare-fun tp!9635 () Bool)

(declare-fun e!65489 () Bool)

(assert (=> mapNonEmpty!3785 (= mapRes!3785 (and tp!9635 e!65489))))

(declare-fun mapKey!3785 () (_ BitVec 32))

(declare-fun mapValue!3785 () ValueCell!975)

(declare-fun mapRest!3785 () (Array (_ BitVec 32) ValueCell!975))

(assert (=> mapNonEmpty!3785 (= mapRest!3784 (store mapRest!3785 mapKey!3785 mapValue!3785))))

(declare-fun mapIsEmpty!3785 () Bool)

(assert (=> mapIsEmpty!3785 mapRes!3785))

(declare-fun b!100587 () Bool)

(assert (=> b!100587 (= e!65489 tp_is_empty!2637)))

(declare-fun b!100588 () Bool)

(assert (=> b!100588 (= e!65488 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3784 condMapEmpty!3785) mapIsEmpty!3785))

(assert (= (and mapNonEmpty!3784 (not condMapEmpty!3785)) mapNonEmpty!3785))

(assert (= (and mapNonEmpty!3785 ((_ is ValueCellFull!975) mapValue!3785)) b!100587))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!975) mapDefault!3785)) b!100588))

(declare-fun m!111571 () Bool)

(assert (=> mapNonEmpty!3785 m!111571))

(declare-fun condMapEmpty!3786 () Bool)

(declare-fun mapDefault!3786 () ValueCell!975)

(assert (=> mapNonEmpty!3783 (= condMapEmpty!3786 (= mapRest!3783 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3786)))))

(declare-fun e!65490 () Bool)

(declare-fun mapRes!3786 () Bool)

(assert (=> mapNonEmpty!3783 (= tp!9633 (and e!65490 mapRes!3786))))

(declare-fun mapNonEmpty!3786 () Bool)

(declare-fun tp!9636 () Bool)

(declare-fun e!65491 () Bool)

(assert (=> mapNonEmpty!3786 (= mapRes!3786 (and tp!9636 e!65491))))

(declare-fun mapRest!3786 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3786 () (_ BitVec 32))

(declare-fun mapValue!3786 () ValueCell!975)

(assert (=> mapNonEmpty!3786 (= mapRest!3783 (store mapRest!3786 mapKey!3786 mapValue!3786))))

(declare-fun mapIsEmpty!3786 () Bool)

(assert (=> mapIsEmpty!3786 mapRes!3786))

(declare-fun b!100589 () Bool)

(assert (=> b!100589 (= e!65491 tp_is_empty!2637)))

(declare-fun b!100590 () Bool)

(assert (=> b!100590 (= e!65490 tp_is_empty!2637)))

(assert (= (and mapNonEmpty!3783 condMapEmpty!3786) mapIsEmpty!3786))

(assert (= (and mapNonEmpty!3783 (not condMapEmpty!3786)) mapNonEmpty!3786))

(assert (= (and mapNonEmpty!3786 ((_ is ValueCellFull!975) mapValue!3786)) b!100589))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!975) mapDefault!3786)) b!100590))

(declare-fun m!111573 () Bool)

(assert (=> mapNonEmpty!3786 m!111573))

(declare-fun b_lambda!4487 () Bool)

(assert (= b_lambda!4461 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4487)))

(declare-fun b_lambda!4489 () Bool)

(assert (= b_lambda!4465 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4489)))

(declare-fun b_lambda!4491 () Bool)

(assert (= b_lambda!4483 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4491)))

(declare-fun b_lambda!4493 () Bool)

(assert (= b_lambda!4485 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4493)))

(declare-fun b_lambda!4495 () Bool)

(assert (= b_lambda!4459 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4495)))

(declare-fun b_lambda!4497 () Bool)

(assert (= b_lambda!4479 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4497)))

(declare-fun b_lambda!4499 () Bool)

(assert (= b_lambda!4475 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4499)))

(declare-fun b_lambda!4501 () Bool)

(assert (= b_lambda!4469 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4501)))

(declare-fun b_lambda!4503 () Bool)

(assert (= b_lambda!4457 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4503)))

(declare-fun b_lambda!4505 () Bool)

(assert (= b_lambda!4467 (or (and b!99092 b_free!2441) (and b!99086 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))))) b_lambda!4505)))

(declare-fun b_lambda!4507 () Bool)

(assert (= b_lambda!4463 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4507)))

(declare-fun b_lambda!4509 () Bool)

(assert (= b_lambda!4481 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4509)))

(declare-fun b_lambda!4511 () Bool)

(assert (= b_lambda!4473 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4511)))

(declare-fun b_lambda!4513 () Bool)

(assert (= b_lambda!4471 (or (and b!99092 b_free!2441 (= (defaultEntry!2502 (v!2816 (underlying!340 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99086 b_free!2443) b_lambda!4513)))

(check-sat (not d!27073) (not b!100229) (not b!100216) (not b!100526) (not b!100057) (not d!27067) (not b!100047) (not bm!10330) (not b!100528) (not bm!10278) (not b!100115) (not bm!10288) (not b!99900) (not bm!10335) (not b!99853) (not d!27163) (not d!27273) (not b!99822) (not b!100150) (not b!100122) (not b!100054) (not b!100320) (not b!99945) (not d!27047) (not b!99989) (not d!27249) (not b!100129) (not b!99763) (not b!100431) (not b!100325) (not d!27001) (not b!99760) (not d!26855) (not b!99876) (not d!26887) (not b_lambda!4455) (not b!100250) (not b!99997) (not b!100529) (not b_lambda!4507) (not b!100157) (not b!99923) (not b!99979) (not b!100442) (not bm!10358) (not b!100434) (not b_lambda!4491) (not b!100312) (not b!100078) (not b!99821) (not b!99935) (not b!99752) (not d!27251) (not b!100343) (not d!26977) (not b!100544) (not bm!10354) (not bm!10297) (not bm!10289) (not d!27043) (not b!99972) (not b!100575) (not b!100255) (not b!100048) (not b!100506) (not d!26837) (not mapNonEmpty!3786) (not b!100290) (not b!100044) (not b!99766) (not b!100082) (not b!100539) (not b!100067) (not b!100404) (not bm!10313) (not b!100382) (not b!100505) (not b!99815) (not b!100421) (not d!27201) (not b_lambda!4511) (not d!26983) (not b!100469) (not b!100089) (not bm!10344) (not d!26953) (not b!100482) (not d!27305) (not b!100091) (not b!100293) (not b!99852) (not b!100032) (not b!100339) (not d!27263) (not b!100585) (not bm!10272) (not bm!10265) (not d!27237) (not b!99910) (not b_lambda!4453) (not d!27317) (not d!27031) (not d!27127) (not b!100509) (not bm!10299) (not b!100499) (not d!27111) (not b!99907) (not b!100037) (not b!100241) (not d!26969) (not b!100564) (not d!27197) (not b!100211) (not d!26881) (not bm!10342) (not b!100260) (not b!100407) (not b!99778) (not b!100235) (not d!27143) (not d!26961) (not b!100329) (not mapNonEmpty!3785) (not b!100236) (not b!100433) (not d!27253) (not bm!10285) (not d!26867) (not b!100113) (not b!100088) (not b!100335) (not bm!10271) (not d!26859) (not bm!10292) (not d!26895) (not b!100398) (not b!100565) (not b!100005) (not d!27221) (not b!100322) (not b!100537) (not d!27219) (not d!26879) (not d!27205) (not b!99866) (not b!100049) (not b!100447) (not b!99753) (not b!100337) (not d!27235) (not b!100545) (not b!100222) (not bm!10291) (not bm!10325) (not d!27117) tp_is_empty!2637 (not d!27051) (not b!100354) (not b!100271) (not b!99750) (not d!27023) (not b!99748) (not b!99959) (not d!27179) (not b!99874) (not d!27069) (not d!27281) (not d!27241) (not b!99932) (not b!100046) (not d!27055) (not d!27275) (not b!99978) (not b_next!2441) (not b!99859) (not d!27295) (not b!100245) (not d!27323) (not b!100440) (not d!26991) (not bm!10276) (not b!100066) (not b!100025) (not b_lambda!4503) (not d!27207) (not b!100518) (not d!27271) (not b!100393) (not b!100520) (not d!27265) (not b!100513) (not d!27267) (not b!100331) (not b!99885) (not b!100257) (not b_lambda!4431) (not b!99754) (not b!100071) (not d!26843) (not b!100155) (not bm!10283) (not b!99921) (not b!100299) (not bm!10268) (not b!99844) (not d!26913) (not b!99771) (not d!26959) (not b!100018) (not b!100154) (not b!100015) (not b!100346) (not b!100020) (not b!100144) (not b!100031) (not bm!10320) (not b!100145) (not d!27005) (not b!100110) (not b!99999) (not b_lambda!4451) (not b!100051) (not d!27157) (not b!100483) (not b!100094) (not d!27287) (not d!27045) (not b!100139) (not b!100202) (not b!100387) (not b!100396) (not b_lambda!4509) (not b!100400) (not bm!10327) (not d!27115) (not d!26993) (not d!27327) (not b!99773) (not b!100248) (not b!100141) (not d!27337) (not b!100463) (not d!26901) (not d!27225) (not b!100342) (not d!26923) (not bm!10295) (not b_lambda!4497) (not b!99770) (not d!27285) (not bm!10312) (not b!100274) (not b!100084) (not d!27033) (not b!100410) (not bm!10308) (not b!99769) (not d!26905) (not b!100497) (not d!27123) (not b!99758) (not d!27149) (not d!27109) b_and!6193 (not b!100119) (not d!27137) (not bm!10359) (not b!99881) (not bm!10339) (not b!100275) (not b!99870) (not bm!10302) (not b!100108) (not b!100511) (not d!26975) (not d!27245) (not b!99898) (not bm!10350) (not b!100556) (not b!100420) (not bm!10269) (not b!100100) (not d!27125) (not d!26985) (not b!100225) (not b!99893) (not d!26919) (not b!100151) (not b!100359) (not d!27229) (not b!100218) (not d!27015) (not b!99904) (not b!100515) (not b!100418) (not d!26973) (not b!99877) (not b!100345) (not d!26995) (not b!99966) (not d!27227) (not bm!10333) (not b!100413) (not b!99868) (not d!26847) (not b!100035) (not b!100004) (not b!99938) (not b!99940) (not b!100508) (not d!27003) (not d!27121) (not b!100309) (not b!100571) (not b!100026) (not b!100279) (not b!100553) (not b!100099) (not b!100043) (not b!100209) (not bm!10317) (not bm!10277) (not b!99759) (not b!100487) (not b!99809) (not d!27147) (not d!27119) (not b!100314) (not b!100301) (not b!100324) (not d!27081) (not b!99955) (not d!27291) (not b!99962) (not d!27239) (not d!27135) (not b!100183) (not b!100010) (not d!27293) (not d!27181) (not bm!10322) (not d!27153) (not b!100385) (not b!100303) (not b!99933) (not d!27097) (not d!27093) (not b!100471) (not b!100388) (not d!26957) (not b!100186) (not b!99756) (not d!27341) (not d!26853) (not bm!10274) (not b!100389) (not b_lambda!4489) (not b!100205) (not b!100464) (not d!26851) (not d!27233) (not b!99850) (not d!27057) (not b!99886) (not b!100348) (not b!100357) (not b!100567) (not b!100530) (not b!100415) (not b!99970) (not d!27133) (not b!100296) (not b!100074) (not b!100569) (not d!27215) (not d!26907) (not d!27255) (not d!26849) (not b!100148) (not b!100536) (not b_lambda!4501) (not b!100429) (not b!100332) (not b!100143) (not b!100516) (not b!99906) (not d!27183) (not b!100092) (not b!100056) (not b!100532) (not d!26965) (not d!27029) (not b!100378) (not b!100500) (not d!26885) (not bm!10281) (not d!27195) (not d!26939) (not b!100374) (not d!27303) (not b!100013) (not d!27211) (not b_lambda!4435) (not d!26861) (not b!100525) (not b!100349) (not b!100306) (not b!100227) (not d!27161) (not d!27021) (not b!100065) (not b_lambda!4499) (not b!100524) (not b!100373) (not d!27145) (not b!100522) (not d!27107) (not b!100562) (not b!99964) (not b!99911) (not b!100455) (not d!26925) (not b_lambda!4493) (not b!100466) (not bm!10287) (not bm!10347) (not b_lambda!4487) (not d!27089) (not bm!10294) (not d!26909) (not b!100286) (not b_next!2443) (not b!100214) (not b!99918) (not bm!10323) (not d!27155) (not d!27099) (not d!26951) (not b!99863) (not b!100577) (not bm!10280) (not b!100327) (not b!99957) (not b!99952) (not b!99996) (not b!100063) (not d!27013) (not b!100344) (not b!100076) (not b_lambda!4477) (not b!100126) (not b!100377) (not d!27297) (not b!100542) (not b!100474) (not b!100262) (not b!100125) (not b!99780) (not b!100445) (not b!100284) (not d!27213) (not d!27277) (not d!26997) (not b!100304) (not b!100133) (not b!100239) (not b!100503) (not d!26863) (not b!100038) (not d!27313) (not b!99981) (not b!99919) (not b!100265) (not b!99768) (not d!27151) (not d!27185) (not d!26915) (not d!27037) (not b!99812) (not d!27299) (not b!100243) (not bm!10310) (not b!100581) (not b!100024) (not d!27333) (not b!100041) (not b!100062) (not b!100138) (not b!100023) (not b!99880) b_and!6191 (not b!100461) (not b!99976) (not b!100375) (not b!99776) (not b!100453) (not d!27035) (not b!100292) (not bm!10315) (not d!27339) (not b!100412) (not bm!10353) (not b!100555) (not d!27189) (not b_lambda!4495) (not b!100494) (not d!27319) (not d!27141) (not d!27177) (not b!100085) (not b!100003) (not b!100512) (not d!26875) (not b!100000) (not b!100472) (not b!100566) (not b!100184) (not b!100253) (not bm!10303) (not b!100131) (not b!100560) (not b_lambda!4505) (not b!100311) (not b!100490) (not b!100140) (not b!100495) (not d!27171) (not b!100263) (not b!99936) (not bm!10360) (not b!100097) (not d!27193) (not b_lambda!4513) (not d!26967) (not b!99896) (not b!100116) (not d!27269) (not b!100533) (not b!100517) (not b!100347) (not b!99912) (not b!100531) (not b!100001) (not b!99810) (not b!100368) (not b!100452) (not d!27101) (not b!100480) (not b!100361) (not b!100282) (not bm!10340) (not b!99889) (not b!100365) (not b!100328) (not bm!10337) (not d!27159) (not d!27261) (not d!27289) (not b!100491) (not b!100498) (not b!100371) (not b!99805) (not bm!10332) (not b!100547) (not b!99765) (not d!27203) (not d!27053) (not d!26897) (not b!100557) (not d!27247) (not d!26949) (not b!100423) (not b!100444) (not d!26865) (not b!100029) (not d!27231) (not d!27095) (not b!100207) (not b!100367) (not d!27075) (not d!27335) (not b!100450) (not b!100021) (not b_lambda!4447) (not b!100233) (not bm!10355) (not d!27139) (not d!27243) (not b!100570) (not d!26893) (not b!100060) (not d!26899) (not bm!10290) (not b!100102) (not b!100014) (not bm!10286) (not b!100273) (not bm!10309) (not d!27301) (not b_lambda!4449) (not bm!10258) (not b!99915) (not b!100406) (not b!100489) (not d!27027) (not b!99977) (not d!27279) (not d!27283) (not d!27169) (not b!99985))
(check-sat b_and!6191 b_and!6193 (not b_next!2441) (not b_next!2443))
