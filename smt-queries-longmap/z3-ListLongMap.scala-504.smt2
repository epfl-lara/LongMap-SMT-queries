; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11802 () Bool)

(assert start!11802)

(declare-fun b!98866 () Bool)

(declare-fun b_free!2437 () Bool)

(declare-fun b_next!2437 () Bool)

(assert (=> b!98866 (= b_free!2437 (not b_next!2437))))

(declare-fun tp!9602 () Bool)

(declare-fun b_and!6065 () Bool)

(assert (=> b!98866 (= tp!9602 b_and!6065)))

(declare-fun b!98863 () Bool)

(declare-fun b_free!2439 () Bool)

(declare-fun b_next!2439 () Bool)

(assert (=> b!98863 (= b_free!2439 (not b_next!2439))))

(declare-fun tp!9603 () Bool)

(declare-fun b_and!6067 () Bool)

(assert (=> b!98863 (= tp!9603 b_and!6067)))

(declare-fun b!98859 () Bool)

(declare-fun e!64433 () Bool)

(declare-fun tp_is_empty!2635 () Bool)

(assert (=> b!98859 (= e!64433 tp_is_empty!2635)))

(declare-fun b!98860 () Bool)

(declare-fun e!64435 () Bool)

(declare-fun e!64432 () Bool)

(declare-fun mapRes!3766 () Bool)

(assert (=> b!98860 (= e!64435 (and e!64432 mapRes!3766))))

(declare-fun condMapEmpty!3766 () Bool)

(declare-datatypes ((V!3161 0))(
  ( (V!3162 (val!1362 Int)) )
))
(declare-datatypes ((array!4231 0))(
  ( (array!4232 (arr!2008 (Array (_ BitVec 32) (_ BitVec 64))) (size!2260 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!974 0))(
  ( (ValueCellFull!974 (v!2806 V!3161)) (EmptyCell!974) )
))
(declare-datatypes ((array!4233 0))(
  ( (array!4234 (arr!2009 (Array (_ BitVec 32) ValueCell!974)) (size!2261 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!856 0))(
  ( (LongMapFixedSize!857 (defaultEntry!2501 Int) (mask!6607 (_ BitVec 32)) (extraKeys!2318 (_ BitVec 32)) (zeroValue!2382 V!3161) (minValue!2382 V!3161) (_size!477 (_ BitVec 32)) (_keys!4194 array!4231) (_values!2484 array!4233) (_vacant!477 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!856)

(declare-fun mapDefault!3766 () ValueCell!974)

(assert (=> b!98860 (= condMapEmpty!3766 (= (arr!2009 (_values!2484 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3766)))))

(declare-fun mapNonEmpty!3765 () Bool)

(declare-fun mapRes!3765 () Bool)

(declare-fun tp!9601 () Bool)

(assert (=> mapNonEmpty!3765 (= mapRes!3765 (and tp!9601 e!64433))))

(declare-datatypes ((Cell!646 0))(
  ( (Cell!647 (v!2807 LongMapFixedSize!856)) )
))
(declare-datatypes ((LongMap!646 0))(
  ( (LongMap!647 (underlying!334 Cell!646)) )
))
(declare-fun thiss!992 () LongMap!646)

(declare-fun mapRest!3765 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapValue!3766 () ValueCell!974)

(declare-fun mapKey!3765 () (_ BitVec 32))

(assert (=> mapNonEmpty!3765 (= (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (store mapRest!3765 mapKey!3765 mapValue!3766))))

(declare-fun b!98861 () Bool)

(declare-fun e!64427 () Bool)

(assert (=> b!98861 (= e!64427 (and (= (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6607 (v!2807 (underlying!334 thiss!992))))) (= (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992))))) (bvsge (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun b!98862 () Bool)

(declare-fun e!64424 () Bool)

(assert (=> b!98862 (= e!64424 tp_is_empty!2635)))

(declare-fun e!64431 () Bool)

(declare-fun array_inv!1257 (array!4231) Bool)

(declare-fun array_inv!1258 (array!4233) Bool)

(assert (=> b!98863 (= e!64431 (and tp!9603 tp_is_empty!2635 (array_inv!1257 (_keys!4194 newMap!16)) (array_inv!1258 (_values!2484 newMap!16)) e!64435))))

(declare-fun b!98864 () Bool)

(declare-datatypes ((Unit!2998 0))(
  ( (Unit!2999) )
))
(declare-fun e!64428 () Unit!2998)

(declare-fun Unit!3000 () Unit!2998)

(assert (=> b!98864 (= e!64428 Unit!3000)))

(declare-fun mapIsEmpty!3766 () Bool)

(assert (=> mapIsEmpty!3766 mapRes!3766))

(declare-fun b!98865 () Bool)

(declare-fun Unit!3001 () Unit!2998)

(assert (=> b!98865 (= e!64428 Unit!3001)))

(declare-fun lt!49705 () Unit!2998)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lemmaListMapContainsThenArrayContainsFrom!97 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2998)

(assert (=> b!98865 (= lt!49705 (lemmaListMapContainsThenArrayContainsFrom!97 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4231 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!98865 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!49708 () Unit!2998)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4231 (_ BitVec 32) (_ BitVec 32)) Unit!2998)

(assert (=> b!98865 (= lt!49708 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1590 0))(
  ( (Nil!1587) (Cons!1586 (h!2181 (_ BitVec 64)) (t!5555 List!1590)) )
))
(declare-fun arrayNoDuplicates!0 (array!4231 (_ BitVec 32) List!1590) Bool)

(assert (=> b!98865 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) from!355 Nil!1587)))

(declare-fun lt!49707 () Unit!2998)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4231 (_ BitVec 32) (_ BitVec 64) List!1590) Unit!2998)

(assert (=> b!98865 (= lt!49707 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587)))))

(assert (=> b!98865 false))

(declare-fun e!64434 () Bool)

(declare-fun e!64420 () Bool)

(assert (=> b!98866 (= e!64434 (and tp!9602 tp_is_empty!2635 (array_inv!1257 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (array_inv!1258 (_values!2484 (v!2807 (underlying!334 thiss!992)))) e!64420))))

(declare-fun b!98867 () Bool)

(declare-fun res!49703 () Bool)

(declare-fun e!64423 () Bool)

(assert (=> b!98867 (=> (not res!49703) (not e!64423))))

(assert (=> b!98867 (= res!49703 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6607 newMap!16)) (_size!477 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!98868 () Bool)

(declare-fun res!49699 () Bool)

(assert (=> b!98868 (=> (not res!49699) (not e!64427))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!98868 (= res!49699 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!98869 () Bool)

(declare-fun e!64421 () Bool)

(declare-fun e!64422 () Bool)

(assert (=> b!98869 (= e!64421 e!64422)))

(declare-fun b!98870 () Bool)

(declare-fun res!49701 () Bool)

(assert (=> b!98870 (=> (not res!49701) (not e!64423))))

(assert (=> b!98870 (= res!49701 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!98871 () Bool)

(declare-fun res!49702 () Bool)

(assert (=> b!98871 (=> (not res!49702) (not e!64423))))

(declare-fun valid!392 (LongMapFixedSize!856) Bool)

(assert (=> b!98871 (= res!49702 (valid!392 newMap!16))))

(declare-fun b!98872 () Bool)

(declare-fun e!64430 () Bool)

(assert (=> b!98872 (= e!64430 tp_is_empty!2635)))

(declare-fun res!49700 () Bool)

(assert (=> start!11802 (=> (not res!49700) (not e!64423))))

(declare-fun valid!393 (LongMap!646) Bool)

(assert (=> start!11802 (= res!49700 (valid!393 thiss!992))))

(assert (=> start!11802 e!64423))

(assert (=> start!11802 e!64421))

(assert (=> start!11802 true))

(assert (=> start!11802 e!64431))

(declare-fun mapIsEmpty!3765 () Bool)

(assert (=> mapIsEmpty!3765 mapRes!3765))

(declare-fun b!98873 () Bool)

(declare-fun e!64426 () Bool)

(assert (=> b!98873 (= e!64423 e!64426)))

(declare-fun res!49705 () Bool)

(assert (=> b!98873 (=> (not res!49705) (not e!64426))))

(declare-datatypes ((tuple2!2332 0))(
  ( (tuple2!2333 (_1!1177 (_ BitVec 64)) (_2!1177 V!3161)) )
))
(declare-datatypes ((List!1591 0))(
  ( (Nil!1588) (Cons!1587 (h!2182 tuple2!2332) (t!5556 List!1591)) )
))
(declare-datatypes ((ListLongMap!1517 0))(
  ( (ListLongMap!1518 (toList!774 List!1591)) )
))
(declare-fun lt!49702 () ListLongMap!1517)

(declare-fun lt!49704 () ListLongMap!1517)

(assert (=> b!98873 (= res!49705 (and (= lt!49702 lt!49704) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1247 (LongMapFixedSize!856) ListLongMap!1517)

(assert (=> b!98873 (= lt!49704 (map!1247 newMap!16))))

(declare-fun getCurrentListMap!455 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) ListLongMap!1517)

(assert (=> b!98873 (= lt!49702 (getCurrentListMap!455 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!98874 () Bool)

(assert (=> b!98874 (= e!64432 tp_is_empty!2635)))

(declare-fun b!98875 () Bool)

(assert (=> b!98875 (= e!64426 e!64427)))

(declare-fun res!49704 () Bool)

(assert (=> b!98875 (=> (not res!49704) (not e!64427))))

(declare-datatypes ((tuple2!2334 0))(
  ( (tuple2!2335 (_1!1178 Bool) (_2!1178 LongMapFixedSize!856)) )
))
(declare-fun lt!49706 () tuple2!2334)

(assert (=> b!98875 (= res!49704 (and (_1!1178 lt!49706) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!49703 () Unit!2998)

(assert (=> b!98875 (= lt!49703 e!64428)))

(declare-fun c!16844 () Bool)

(declare-fun contains!799 (ListLongMap!1517 (_ BitVec 64)) Bool)

(assert (=> b!98875 (= c!16844 (contains!799 lt!49704 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun update!148 (LongMapFixedSize!856 (_ BitVec 64) V!3161) tuple2!2334)

(declare-fun get!1291 (ValueCell!974 V!3161) V!3161)

(declare-fun dynLambda!371 (Int (_ BitVec 64)) V!3161)

(assert (=> b!98875 (= lt!49706 (update!148 newMap!16 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun mapNonEmpty!3766 () Bool)

(declare-fun tp!9604 () Bool)

(assert (=> mapNonEmpty!3766 (= mapRes!3766 (and tp!9604 e!64424))))

(declare-fun mapValue!3765 () ValueCell!974)

(declare-fun mapRest!3766 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapKey!3766 () (_ BitVec 32))

(assert (=> mapNonEmpty!3766 (= (arr!2009 (_values!2484 newMap!16)) (store mapRest!3766 mapKey!3766 mapValue!3765))))

(declare-fun b!98876 () Bool)

(assert (=> b!98876 (= e!64420 (and e!64430 mapRes!3765))))

(declare-fun condMapEmpty!3765 () Bool)

(declare-fun mapDefault!3765 () ValueCell!974)

(assert (=> b!98876 (= condMapEmpty!3765 (= (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3765)))))

(declare-fun b!98877 () Bool)

(assert (=> b!98877 (= e!64422 e!64434)))

(assert (= (and start!11802 res!49700) b!98870))

(assert (= (and b!98870 res!49701) b!98871))

(assert (= (and b!98871 res!49702) b!98867))

(assert (= (and b!98867 res!49703) b!98873))

(assert (= (and b!98873 res!49705) b!98875))

(assert (= (and b!98875 c!16844) b!98865))

(assert (= (and b!98875 (not c!16844)) b!98864))

(assert (= (and b!98875 res!49704) b!98868))

(assert (= (and b!98868 res!49699) b!98861))

(assert (= (and b!98876 condMapEmpty!3765) mapIsEmpty!3765))

(assert (= (and b!98876 (not condMapEmpty!3765)) mapNonEmpty!3765))

(get-info :version)

(assert (= (and mapNonEmpty!3765 ((_ is ValueCellFull!974) mapValue!3766)) b!98859))

(assert (= (and b!98876 ((_ is ValueCellFull!974) mapDefault!3765)) b!98872))

(assert (= b!98866 b!98876))

(assert (= b!98877 b!98866))

(assert (= b!98869 b!98877))

(assert (= start!11802 b!98869))

(assert (= (and b!98860 condMapEmpty!3766) mapIsEmpty!3766))

(assert (= (and b!98860 (not condMapEmpty!3766)) mapNonEmpty!3766))

(assert (= (and mapNonEmpty!3766 ((_ is ValueCellFull!974) mapValue!3765)) b!98862))

(assert (= (and b!98860 ((_ is ValueCellFull!974) mapDefault!3766)) b!98874))

(assert (= b!98863 b!98860))

(assert (= start!11802 b!98863))

(declare-fun b_lambda!4407 () Bool)

(assert (=> (not b_lambda!4407) (not b!98875)))

(declare-fun t!5552 () Bool)

(declare-fun tb!1933 () Bool)

(assert (=> (and b!98866 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) t!5552) tb!1933))

(declare-fun result!3279 () Bool)

(assert (=> tb!1933 (= result!3279 tp_is_empty!2635)))

(assert (=> b!98875 t!5552))

(declare-fun b_and!6069 () Bool)

(assert (= b_and!6065 (and (=> t!5552 result!3279) b_and!6069)))

(declare-fun t!5554 () Bool)

(declare-fun tb!1935 () Bool)

(assert (=> (and b!98863 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) t!5554) tb!1935))

(declare-fun result!3283 () Bool)

(assert (= result!3283 result!3279))

(assert (=> b!98875 t!5554))

(declare-fun b_and!6071 () Bool)

(assert (= b_and!6067 (and (=> t!5554 result!3283) b_and!6071)))

(declare-fun m!108579 () Bool)

(assert (=> b!98868 m!108579))

(declare-fun m!108581 () Bool)

(assert (=> start!11802 m!108581))

(declare-fun m!108583 () Bool)

(assert (=> b!98871 m!108583))

(declare-fun m!108585 () Bool)

(assert (=> b!98875 m!108585))

(declare-fun m!108587 () Bool)

(assert (=> b!98875 m!108587))

(declare-fun m!108589 () Bool)

(assert (=> b!98875 m!108589))

(declare-fun m!108591 () Bool)

(assert (=> b!98875 m!108591))

(assert (=> b!98875 m!108591))

(declare-fun m!108593 () Bool)

(assert (=> b!98875 m!108593))

(assert (=> b!98875 m!108587))

(assert (=> b!98875 m!108591))

(assert (=> b!98875 m!108589))

(declare-fun m!108595 () Bool)

(assert (=> b!98875 m!108595))

(assert (=> b!98875 m!108585))

(assert (=> b!98873 m!108591))

(declare-fun m!108597 () Bool)

(assert (=> b!98873 m!108597))

(declare-fun m!108599 () Bool)

(assert (=> b!98873 m!108599))

(declare-fun m!108601 () Bool)

(assert (=> b!98865 m!108601))

(declare-fun m!108603 () Bool)

(assert (=> b!98865 m!108603))

(assert (=> b!98865 m!108591))

(declare-fun m!108605 () Bool)

(assert (=> b!98865 m!108605))

(assert (=> b!98865 m!108591))

(assert (=> b!98865 m!108591))

(declare-fun m!108607 () Bool)

(assert (=> b!98865 m!108607))

(assert (=> b!98865 m!108591))

(declare-fun m!108609 () Bool)

(assert (=> b!98865 m!108609))

(declare-fun m!108611 () Bool)

(assert (=> mapNonEmpty!3765 m!108611))

(declare-fun m!108613 () Bool)

(assert (=> b!98866 m!108613))

(declare-fun m!108615 () Bool)

(assert (=> b!98866 m!108615))

(declare-fun m!108617 () Bool)

(assert (=> mapNonEmpty!3766 m!108617))

(declare-fun m!108619 () Bool)

(assert (=> b!98863 m!108619))

(declare-fun m!108621 () Bool)

(assert (=> b!98863 m!108621))

(check-sat (not b_next!2437) (not b!98866) (not b!98875) (not mapNonEmpty!3765) b_and!6071 (not b!98863) (not b!98865) (not mapNonEmpty!3766) tp_is_empty!2635 (not b_lambda!4407) (not b_next!2439) b_and!6069 (not b!98868) (not b!98871) (not b!98873) (not start!11802))
(check-sat b_and!6069 b_and!6071 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun b_lambda!4413 () Bool)

(assert (= b_lambda!4407 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4413)))

(check-sat (not b_next!2437) (not b!98866) (not b!98875) (not b_next!2439) (not mapNonEmpty!3765) b_and!6071 (not b!98863) (not b!98865) (not mapNonEmpty!3766) (not b_lambda!4413) tp_is_empty!2635 b_and!6069 (not b!98868) (not b!98871) (not b!98873) (not start!11802))
(check-sat b_and!6069 b_and!6071 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun d!26555 () Bool)

(assert (=> d!26555 (= (array_inv!1257 (_keys!4194 newMap!16)) (bvsge (size!2260 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98863 d!26555))

(declare-fun d!26557 () Bool)

(assert (=> d!26557 (= (array_inv!1258 (_values!2484 newMap!16)) (bvsge (size!2261 (_values!2484 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98863 d!26557))

(declare-fun d!26559 () Bool)

(assert (=> d!26559 (= (array_inv!1257 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvsge (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!98866 d!26559))

(declare-fun d!26561 () Bool)

(assert (=> d!26561 (= (array_inv!1258 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvsge (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!98866 d!26561))

(declare-fun d!26563 () Bool)

(declare-fun res!49754 () Bool)

(declare-fun e!64534 () Bool)

(assert (=> d!26563 (=> (not res!49754) (not e!64534))))

(declare-fun simpleValid!69 (LongMapFixedSize!856) Bool)

(assert (=> d!26563 (= res!49754 (simpleValid!69 newMap!16))))

(assert (=> d!26563 (= (valid!392 newMap!16) e!64534)))

(declare-fun b!99004 () Bool)

(declare-fun res!49755 () Bool)

(assert (=> b!99004 (=> (not res!49755) (not e!64534))))

(declare-fun arrayCountValidKeys!0 (array!4231 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99004 (= res!49755 (= (arrayCountValidKeys!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (_size!477 newMap!16)))))

(declare-fun b!99005 () Bool)

(declare-fun res!49756 () Bool)

(assert (=> b!99005 (=> (not res!49756) (not e!64534))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4231 (_ BitVec 32)) Bool)

(assert (=> b!99005 (= res!49756 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99006 () Bool)

(assert (=> b!99006 (= e!64534 (arrayNoDuplicates!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 Nil!1587))))

(assert (= (and d!26563 res!49754) b!99004))

(assert (= (and b!99004 res!49755) b!99005))

(assert (= (and b!99005 res!49756) b!99006))

(declare-fun m!108711 () Bool)

(assert (=> d!26563 m!108711))

(declare-fun m!108713 () Bool)

(assert (=> b!99004 m!108713))

(declare-fun m!108715 () Bool)

(assert (=> b!99005 m!108715))

(declare-fun m!108717 () Bool)

(assert (=> b!99006 m!108717))

(assert (=> b!98871 d!26563))

(declare-fun d!26565 () Bool)

(assert (=> d!26565 (= (valid!393 thiss!992) (valid!392 (v!2807 (underlying!334 thiss!992))))))

(declare-fun bs!4084 () Bool)

(assert (= bs!4084 d!26565))

(declare-fun m!108719 () Bool)

(assert (=> bs!4084 m!108719))

(assert (=> start!11802 d!26565))

(declare-fun d!26567 () Bool)

(assert (=> d!26567 (not (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49753 () Unit!2998)

(declare-fun choose!68 (array!4231 (_ BitVec 32) (_ BitVec 64) List!1590) Unit!2998)

(assert (=> d!26567 (= lt!49753 (choose!68 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587)))))

(assert (=> d!26567 (bvslt (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26567 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587)) lt!49753)))

(declare-fun bs!4085 () Bool)

(assert (= bs!4085 d!26567))

(assert (=> bs!4085 m!108591))

(assert (=> bs!4085 m!108607))

(assert (=> bs!4085 m!108591))

(declare-fun m!108721 () Bool)

(assert (=> bs!4085 m!108721))

(assert (=> b!98865 d!26567))

(declare-fun d!26569 () Bool)

(assert (=> d!26569 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) from!355 Nil!1587)))

(declare-fun lt!49756 () Unit!2998)

(declare-fun choose!39 (array!4231 (_ BitVec 32) (_ BitVec 32)) Unit!2998)

(assert (=> d!26569 (= lt!49756 (choose!39 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!26569 (bvslt (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26569 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 from!355) lt!49756)))

(declare-fun bs!4086 () Bool)

(assert (= bs!4086 d!26569))

(assert (=> bs!4086 m!108603))

(declare-fun m!108723 () Bool)

(assert (=> bs!4086 m!108723))

(assert (=> b!98865 d!26569))

(declare-fun d!26571 () Bool)

(declare-fun res!49761 () Bool)

(declare-fun e!64539 () Bool)

(assert (=> d!26571 (=> res!49761 e!64539)))

(assert (=> d!26571 (= res!49761 (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26571 (= (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!64539)))

(declare-fun b!99011 () Bool)

(declare-fun e!64540 () Bool)

(assert (=> b!99011 (= e!64539 e!64540)))

(declare-fun res!49762 () Bool)

(assert (=> b!99011 (=> (not res!49762) (not e!64540))))

(assert (=> b!99011 (= res!49762 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99012 () Bool)

(assert (=> b!99012 (= e!64540 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26571 (not res!49761)) b!99011))

(assert (= (and b!99011 res!49762) b!99012))

(declare-fun m!108725 () Bool)

(assert (=> d!26571 m!108725))

(assert (=> b!99012 m!108591))

(declare-fun m!108727 () Bool)

(assert (=> b!99012 m!108727))

(assert (=> b!98865 d!26571))

(declare-fun d!26573 () Bool)

(declare-fun e!64543 () Bool)

(assert (=> d!26573 e!64543))

(declare-fun c!16853 () Bool)

(assert (=> d!26573 (= c!16853 (and (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!49759 () Unit!2998)

(declare-fun choose!608 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2998)

(assert (=> d!26573 (= lt!49759 (choose!608 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(assert (=> d!26573 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992))))))

(assert (=> d!26573 (= (lemmaListMapContainsThenArrayContainsFrom!97 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) lt!49759)))

(declare-fun b!99017 () Bool)

(assert (=> b!99017 (= e!64543 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99018 () Bool)

(assert (=> b!99018 (= e!64543 (ite (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26573 c!16853) b!99017))

(assert (= (and d!26573 (not c!16853)) b!99018))

(assert (=> d!26573 m!108591))

(declare-fun m!108729 () Bool)

(assert (=> d!26573 m!108729))

(assert (=> d!26573 m!108579))

(assert (=> b!99017 m!108591))

(assert (=> b!99017 m!108607))

(assert (=> b!98865 d!26573))

(declare-fun d!26575 () Bool)

(declare-fun res!49770 () Bool)

(declare-fun e!64553 () Bool)

(assert (=> d!26575 (=> res!49770 e!64553)))

(assert (=> d!26575 (= res!49770 (bvsge from!355 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26575 (= (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) from!355 Nil!1587) e!64553)))

(declare-fun c!16856 () Bool)

(declare-fun bm!10097 () Bool)

(declare-fun call!10100 () Bool)

(assert (=> bm!10097 (= call!10100 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)))))

(declare-fun b!99029 () Bool)

(declare-fun e!64554 () Bool)

(assert (=> b!99029 (= e!64554 call!10100)))

(declare-fun b!99030 () Bool)

(declare-fun e!64555 () Bool)

(declare-fun contains!800 (List!1590 (_ BitVec 64)) Bool)

(assert (=> b!99030 (= e!64555 (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99031 () Bool)

(declare-fun e!64552 () Bool)

(assert (=> b!99031 (= e!64553 e!64552)))

(declare-fun res!49771 () Bool)

(assert (=> b!99031 (=> (not res!49771) (not e!64552))))

(assert (=> b!99031 (= res!49771 (not e!64555))))

(declare-fun res!49769 () Bool)

(assert (=> b!99031 (=> (not res!49769) (not e!64555))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!99031 (= res!49769 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99032 () Bool)

(assert (=> b!99032 (= e!64554 call!10100)))

(declare-fun b!99033 () Bool)

(assert (=> b!99033 (= e!64552 e!64554)))

(assert (=> b!99033 (= c!16856 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26575 (not res!49770)) b!99031))

(assert (= (and b!99031 res!49769) b!99030))

(assert (= (and b!99031 res!49771) b!99033))

(assert (= (and b!99033 c!16856) b!99032))

(assert (= (and b!99033 (not c!16856)) b!99029))

(assert (= (or b!99032 b!99029) bm!10097))

(assert (=> bm!10097 m!108591))

(declare-fun m!108731 () Bool)

(assert (=> bm!10097 m!108731))

(assert (=> b!99030 m!108591))

(assert (=> b!99030 m!108591))

(declare-fun m!108733 () Bool)

(assert (=> b!99030 m!108733))

(assert (=> b!99031 m!108591))

(assert (=> b!99031 m!108591))

(declare-fun m!108735 () Bool)

(assert (=> b!99031 m!108735))

(assert (=> b!99033 m!108591))

(assert (=> b!99033 m!108591))

(assert (=> b!99033 m!108735))

(assert (=> b!98865 d!26575))

(declare-fun d!26577 () Bool)

(declare-fun e!64560 () Bool)

(assert (=> d!26577 e!64560))

(declare-fun res!49774 () Bool)

(assert (=> d!26577 (=> res!49774 e!64560)))

(declare-fun lt!49769 () Bool)

(assert (=> d!26577 (= res!49774 (not lt!49769))))

(declare-fun lt!49768 () Bool)

(assert (=> d!26577 (= lt!49769 lt!49768)))

(declare-fun lt!49771 () Unit!2998)

(declare-fun e!64561 () Unit!2998)

(assert (=> d!26577 (= lt!49771 e!64561)))

(declare-fun c!16859 () Bool)

(assert (=> d!26577 (= c!16859 lt!49768)))

(declare-fun containsKey!153 (List!1591 (_ BitVec 64)) Bool)

(assert (=> d!26577 (= lt!49768 (containsKey!153 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26577 (= (contains!799 lt!49704 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!49769)))

(declare-fun b!99040 () Bool)

(declare-fun lt!49770 () Unit!2998)

(assert (=> b!99040 (= e!64561 lt!49770)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!102 (List!1591 (_ BitVec 64)) Unit!2998)

(assert (=> b!99040 (= lt!49770 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-datatypes ((Option!155 0))(
  ( (Some!154 (v!2813 V!3161)) (None!153) )
))
(declare-fun isDefined!103 (Option!155) Bool)

(declare-fun getValueByKey!149 (List!1591 (_ BitVec 64)) Option!155)

(assert (=> b!99040 (isDefined!103 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99041 () Bool)

(declare-fun Unit!3006 () Unit!2998)

(assert (=> b!99041 (= e!64561 Unit!3006)))

(declare-fun b!99042 () Bool)

(assert (=> b!99042 (= e!64560 (isDefined!103 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (= (and d!26577 c!16859) b!99040))

(assert (= (and d!26577 (not c!16859)) b!99041))

(assert (= (and d!26577 (not res!49774)) b!99042))

(assert (=> d!26577 m!108591))

(declare-fun m!108737 () Bool)

(assert (=> d!26577 m!108737))

(assert (=> b!99040 m!108591))

(declare-fun m!108739 () Bool)

(assert (=> b!99040 m!108739))

(assert (=> b!99040 m!108591))

(declare-fun m!108741 () Bool)

(assert (=> b!99040 m!108741))

(assert (=> b!99040 m!108741))

(declare-fun m!108743 () Bool)

(assert (=> b!99040 m!108743))

(assert (=> b!99042 m!108591))

(assert (=> b!99042 m!108741))

(assert (=> b!99042 m!108741))

(assert (=> b!99042 m!108743))

(assert (=> b!98875 d!26577))

(declare-fun b!99123 () Bool)

(declare-fun lt!49827 () Unit!2998)

(declare-fun lt!49829 () Unit!2998)

(assert (=> b!99123 (= lt!49827 lt!49829)))

(declare-fun call!10163 () ListLongMap!1517)

(declare-fun call!10167 () ListLongMap!1517)

(assert (=> b!99123 (= call!10163 call!10167)))

(declare-fun lt!49845 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2998)

(assert (=> b!99123 (= lt!49829 (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99123 (= lt!49845 (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!64607 () tuple2!2334)

(assert (=> b!99123 (= e!64607 (tuple2!2335 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6607 newMap!16) (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!477 newMap!16) (_keys!4194 newMap!16) (_values!2484 newMap!16) (_vacant!477 newMap!16))))))

(declare-fun b!99124 () Bool)

(declare-fun lt!49847 () Unit!2998)

(declare-fun lt!49851 () Unit!2998)

(assert (=> b!99124 (= lt!49847 lt!49851)))

(declare-fun call!10153 () ListLongMap!1517)

(assert (=> b!99124 (= call!10163 call!10153)))

(declare-fun lt!49841 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!42 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2998)

(assert (=> b!99124 (= lt!49851 (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49841 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99124 (= lt!49841 (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!99124 (= e!64607 (tuple2!2335 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6607 newMap!16) (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (_size!477 newMap!16) (_keys!4194 newMap!16) (_values!2484 newMap!16) (_vacant!477 newMap!16))))))

(declare-fun bm!10146 () Bool)

(declare-fun call!10154 () ListLongMap!1517)

(assert (=> bm!10146 (= call!10153 call!10154)))

(declare-fun b!99125 () Bool)

(declare-fun res!49805 () Bool)

(declare-fun call!10172 () Bool)

(assert (=> b!99125 (= res!49805 call!10172)))

(declare-fun e!64617 () Bool)

(assert (=> b!99125 (=> (not res!49805) (not e!64617))))

(declare-fun b!99126 () Bool)

(declare-fun e!64609 () tuple2!2334)

(declare-fun e!64615 () tuple2!2334)

(assert (=> b!99126 (= e!64609 e!64615)))

(declare-fun c!16898 () Bool)

(declare-datatypes ((SeekEntryResult!257 0))(
  ( (MissingZero!257 (index!3172 (_ BitVec 32))) (Found!257 (index!3173 (_ BitVec 32))) (Intermediate!257 (undefined!1069 Bool) (index!3174 (_ BitVec 32)) (x!13106 (_ BitVec 32))) (Undefined!257) (MissingVacant!257 (index!3175 (_ BitVec 32))) )
))
(declare-fun lt!49837 () SeekEntryResult!257)

(assert (=> b!99126 (= c!16898 ((_ is MissingZero!257) lt!49837))))

(declare-fun bm!10147 () Bool)

(declare-fun call!10160 () Bool)

(declare-fun call!10166 () Bool)

(assert (=> bm!10147 (= call!10160 call!10166)))

(declare-fun bm!10148 () Bool)

(declare-fun call!10161 () ListLongMap!1517)

(assert (=> bm!10148 (= call!10167 call!10161)))

(declare-fun b!99127 () Bool)

(declare-fun e!64604 () Bool)

(declare-fun call!10149 () Bool)

(assert (=> b!99127 (= e!64604 (not call!10149))))

(declare-fun b!99128 () Bool)

(declare-fun e!64624 () tuple2!2334)

(assert (=> b!99128 (= e!64624 e!64607)))

(declare-fun c!16895 () Bool)

(assert (=> b!99128 (= c!16895 (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64614 () ListLongMap!1517)

(declare-fun b!99129 () Bool)

(assert (=> b!99129 (= e!64614 (ite c!16895 call!10167 call!10153))))

(declare-fun b!99130 () Bool)

(declare-fun e!64608 () Bool)

(declare-fun call!10169 () Bool)

(assert (=> b!99130 (= e!64608 (not call!10169))))

(declare-fun b!99131 () Bool)

(declare-fun res!49816 () Bool)

(assert (=> b!99131 (=> (not res!49816) (not e!64608))))

(declare-fun call!10152 () Bool)

(assert (=> b!99131 (= res!49816 call!10152)))

(declare-fun e!64618 () Bool)

(assert (=> b!99131 (= e!64618 e!64608)))

(declare-fun b!99132 () Bool)

(declare-fun res!49808 () Bool)

(assert (=> b!99132 (=> (not res!49808) (not e!64608))))

(declare-fun lt!49830 () SeekEntryResult!257)

(assert (=> b!99132 (= res!49808 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!49830)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10149 () Bool)

(declare-fun call!10162 () ListLongMap!1517)

(assert (=> bm!10149 (= call!10163 call!10162)))

(declare-fun bm!10150 () Bool)

(declare-fun call!10170 () Unit!2998)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2998)

(assert (=> bm!10150 (= call!10170 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun b!99133 () Bool)

(assert (=> b!99133 (= e!64614 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99134 () Bool)

(declare-fun c!16893 () Bool)

(assert (=> b!99134 (= c!16893 ((_ is MissingVacant!257) lt!49830))))

(declare-fun e!64611 () Bool)

(assert (=> b!99134 (= e!64618 e!64611)))

(declare-fun d!26579 () Bool)

(declare-fun e!64606 () Bool)

(assert (=> d!26579 e!64606))

(declare-fun res!49815 () Bool)

(assert (=> d!26579 (=> (not res!49815) (not e!64606))))

(declare-fun lt!49828 () tuple2!2334)

(assert (=> d!26579 (= res!49815 (valid!392 (_2!1178 lt!49828)))))

(assert (=> d!26579 (= lt!49828 e!64624)))

(declare-fun c!16890 () Bool)

(assert (=> d!26579 (= c!16890 (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvneg (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (=> d!26579 (valid!392 newMap!16)))

(assert (=> d!26579 (= (update!148 newMap!16 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!49828)))

(declare-fun bm!10151 () Bool)

(declare-fun call!10156 () Bool)

(assert (=> bm!10151 (= call!10156 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99135 () Bool)

(declare-fun e!64616 () Bool)

(assert (=> b!99135 (= e!64611 e!64616)))

(declare-fun res!49810 () Bool)

(assert (=> b!99135 (= res!49810 call!10152)))

(assert (=> b!99135 (=> (not res!49810) (not e!64616))))

(declare-fun c!16896 () Bool)

(declare-fun lt!49831 () array!4233)

(declare-fun bm!10152 () Bool)

(assert (=> bm!10152 (= call!10161 (getCurrentListMap!455 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!49838 () SeekEntryResult!257)

(declare-fun b!99136 () Bool)

(assert (=> b!99136 (= e!64617 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49838)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99137 () Bool)

(declare-fun res!49814 () Bool)

(declare-fun e!64623 () Bool)

(assert (=> b!99137 (=> (not res!49814) (not e!64623))))

(declare-fun lt!49832 () SeekEntryResult!257)

(assert (=> b!99137 (= res!49814 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!49832)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99138 () Bool)

(declare-fun lt!49842 () Unit!2998)

(declare-fun lt!49848 () Unit!2998)

(assert (=> b!99138 (= lt!49842 lt!49848)))

(declare-fun call!10165 () Bool)

(assert (=> b!99138 call!10165))

(declare-fun lemmaValidKeyInArrayIsInListMap!101 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) Unit!2998)

(assert (=> b!99138 (= lt!49848 (lemmaValidKeyInArrayIsInListMap!101 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99138 (= lt!49831 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))))

(declare-fun lt!49839 () Unit!2998)

(declare-fun lt!49850 () Unit!2998)

(assert (=> b!99138 (= lt!49839 lt!49850)))

(assert (=> b!99138 (= call!10162 call!10154)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2998)

(assert (=> b!99138 (= lt!49850 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!49826 () Unit!2998)

(declare-fun e!64622 () Unit!2998)

(assert (=> b!99138 (= lt!49826 e!64622)))

(declare-fun c!16889 () Bool)

(assert (=> b!99138 (= c!16889 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99138 (= e!64615 (tuple2!2335 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (_size!477 newMap!16) (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (_vacant!477 newMap!16))))))

(declare-fun b!99139 () Bool)

(declare-fun Unit!3007 () Unit!2998)

(assert (=> b!99139 (= e!64622 Unit!3007)))

(declare-fun lt!49852 () Unit!2998)

(assert (=> b!99139 (= lt!49852 call!10170)))

(declare-fun call!10151 () SeekEntryResult!257)

(assert (=> b!99139 (= lt!49830 call!10151)))

(declare-fun c!16897 () Bool)

(assert (=> b!99139 (= c!16897 ((_ is MissingZero!257) lt!49830))))

(assert (=> b!99139 e!64618))

(declare-fun lt!49849 () Unit!2998)

(assert (=> b!99139 (= lt!49849 lt!49852)))

(assert (=> b!99139 false))

(declare-fun bm!10153 () Bool)

(declare-fun call!10159 () SeekEntryResult!257)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4231 (_ BitVec 32)) SeekEntryResult!257)

(assert (=> bm!10153 (= call!10159 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99140 () Bool)

(declare-fun res!49811 () Bool)

(assert (=> b!99140 (=> (not res!49811) (not e!64623))))

(assert (=> b!99140 (= res!49811 call!10160)))

(declare-fun e!64621 () Bool)

(assert (=> b!99140 (= e!64621 e!64623)))

(declare-fun bm!10154 () Bool)

(declare-fun +!129 (ListLongMap!1517 tuple2!2332) ListLongMap!1517)

(assert (=> bm!10154 (= call!10162 (+!129 e!64614 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16887 () Bool)

(assert (=> bm!10154 (= c!16887 c!16890)))

(declare-fun b!99141 () Bool)

(declare-fun e!64610 () Bool)

(assert (=> b!99141 (= e!64610 e!64604)))

(declare-fun res!49804 () Bool)

(assert (=> b!99141 (= res!49804 call!10160)))

(assert (=> b!99141 (=> (not res!49804) (not e!64604))))

(declare-fun b!99142 () Bool)

(declare-fun lt!49843 () tuple2!2334)

(declare-fun call!10168 () tuple2!2334)

(assert (=> b!99142 (= lt!49843 call!10168)))

(assert (=> b!99142 (= e!64615 (tuple2!2335 (_1!1178 lt!49843) (_2!1178 lt!49843)))))

(declare-fun bm!10155 () Bool)

(assert (=> bm!10155 (= call!10151 call!10159)))

(declare-fun bm!10156 () Bool)

(declare-fun call!10171 () SeekEntryResult!257)

(assert (=> bm!10156 (= call!10171 call!10159)))

(declare-fun c!16894 () Bool)

(declare-fun lt!49834 () SeekEntryResult!257)

(declare-fun call!10150 () Bool)

(declare-fun c!16888 () Bool)

(declare-fun bm!10157 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!10157 (= call!10150 (inRange!0 (ite c!16896 (ite c!16888 (index!3173 lt!49834) (ite c!16894 (index!3172 lt!49832) (index!3175 lt!49832))) (ite c!16889 (index!3173 lt!49838) (ite c!16897 (index!3172 lt!49830) (index!3175 lt!49830)))) (mask!6607 newMap!16)))))

(declare-fun b!99143 () Bool)

(declare-fun res!49809 () Bool)

(assert (=> b!99143 (= res!49809 call!10166)))

(declare-fun e!64620 () Bool)

(assert (=> b!99143 (=> (not res!49809) (not e!64620))))

(declare-fun b!99144 () Bool)

(declare-fun e!64605 () Unit!2998)

(declare-fun lt!49833 () Unit!2998)

(assert (=> b!99144 (= e!64605 lt!49833)))

(assert (=> b!99144 (= lt!49833 call!10170)))

(assert (=> b!99144 (= lt!49832 call!10171)))

(assert (=> b!99144 (= c!16894 ((_ is MissingZero!257) lt!49832))))

(assert (=> b!99144 e!64621))

(declare-fun bm!10158 () Bool)

(assert (=> bm!10158 (= call!10152 call!10172)))

(declare-fun bm!10159 () Bool)

(declare-fun c!16886 () Bool)

(declare-fun updateHelperNewKey!42 (LongMapFixedSize!856 (_ BitVec 64) V!3161 (_ BitVec 32)) tuple2!2334)

(assert (=> bm!10159 (= call!10168 (updateHelperNewKey!42 newMap!16 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(declare-fun b!99145 () Bool)

(declare-fun e!64612 () Bool)

(declare-fun call!10164 () ListLongMap!1517)

(declare-fun call!10158 () ListLongMap!1517)

(assert (=> b!99145 (= e!64612 (= call!10164 call!10158))))

(declare-fun bm!10160 () Bool)

(declare-fun call!10157 () Unit!2998)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2998)

(assert (=> bm!10160 (= call!10157 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun b!99146 () Bool)

(declare-fun e!64613 () Bool)

(assert (=> b!99146 (= e!64613 (= call!10164 (+!129 call!10158 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10161 () Bool)

(assert (=> bm!10161 (= call!10164 (map!1247 (_2!1178 lt!49828)))))

(declare-fun b!99147 () Bool)

(assert (=> b!99147 (= e!64606 e!64612)))

(declare-fun c!16891 () Bool)

(assert (=> b!99147 (= c!16891 (_1!1178 lt!49828))))

(declare-fun b!99148 () Bool)

(declare-fun res!49803 () Bool)

(assert (=> b!99148 (= res!49803 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!49832)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99148 (=> (not res!49803) (not e!64604))))

(declare-fun b!99149 () Bool)

(declare-fun lt!49846 () tuple2!2334)

(assert (=> b!99149 (= e!64609 (tuple2!2335 (_1!1178 lt!49846) (_2!1178 lt!49846)))))

(assert (=> b!99149 (= lt!49846 call!10168)))

(declare-fun bm!10162 () Bool)

(assert (=> bm!10162 (= call!10158 (map!1247 newMap!16))))

(declare-fun b!99150 () Bool)

(declare-fun res!49806 () Bool)

(assert (=> b!99150 (= res!49806 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!49830)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99150 (=> (not res!49806) (not e!64616))))

(declare-fun b!99151 () Bool)

(assert (=> b!99151 (= e!64611 ((_ is Undefined!257) lt!49830))))

(declare-fun b!99152 () Bool)

(assert (=> b!99152 (= e!64616 (not call!10169))))

(declare-fun b!99153 () Bool)

(declare-fun c!16892 () Bool)

(assert (=> b!99153 (= c!16892 ((_ is MissingVacant!257) lt!49832))))

(assert (=> b!99153 (= e!64621 e!64610)))

(declare-fun call!10155 () ListLongMap!1517)

(declare-fun bm!10163 () Bool)

(assert (=> bm!10163 (= call!10165 (contains!799 call!10155 (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(declare-fun b!99154 () Bool)

(declare-fun Unit!3008 () Unit!2998)

(assert (=> b!99154 (= e!64605 Unit!3008)))

(declare-fun lt!49835 () Unit!2998)

(assert (=> b!99154 (= lt!49835 call!10157)))

(assert (=> b!99154 (= lt!49834 call!10171)))

(declare-fun res!49807 () Bool)

(assert (=> b!99154 (= res!49807 ((_ is Found!257) lt!49834))))

(assert (=> b!99154 (=> (not res!49807) (not e!64620))))

(assert (=> b!99154 e!64620))

(declare-fun lt!49836 () Unit!2998)

(assert (=> b!99154 (= lt!49836 lt!49835)))

(assert (=> b!99154 false))

(declare-fun bm!10164 () Bool)

(assert (=> bm!10164 (= call!10172 call!10150)))

(declare-fun bm!10165 () Bool)

(assert (=> bm!10165 (= call!10149 call!10156)))

(declare-fun b!99155 () Bool)

(assert (=> b!99155 (= c!16886 ((_ is MissingVacant!257) lt!49837))))

(declare-fun e!64619 () tuple2!2334)

(assert (=> b!99155 (= e!64619 e!64609)))

(declare-fun bm!10166 () Bool)

(assert (=> bm!10166 (= call!10155 call!10161)))

(declare-fun bm!10167 () Bool)

(assert (=> bm!10167 (= call!10169 call!10156)))

(declare-fun bm!10168 () Bool)

(assert (=> bm!10168 (= call!10154 (getCurrentListMap!455 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun bm!10169 () Bool)

(assert (=> bm!10169 (= call!10166 call!10150)))

(declare-fun b!99156 () Bool)

(assert (=> b!99156 (= e!64623 (not call!10149))))

(declare-fun b!99157 () Bool)

(declare-fun lt!49840 () Unit!2998)

(assert (=> b!99157 (= e!64622 lt!49840)))

(assert (=> b!99157 (= lt!49840 call!10157)))

(assert (=> b!99157 (= lt!49838 call!10151)))

(declare-fun res!49812 () Bool)

(assert (=> b!99157 (= res!49812 ((_ is Found!257) lt!49838))))

(assert (=> b!99157 (=> (not res!49812) (not e!64617))))

(assert (=> b!99157 e!64617))

(declare-fun b!99158 () Bool)

(assert (=> b!99158 (= e!64620 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49834)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99159 () Bool)

(assert (=> b!99159 (= e!64610 ((_ is Undefined!257) lt!49832))))

(declare-fun b!99160 () Bool)

(assert (=> b!99160 (= e!64612 e!64613)))

(declare-fun res!49813 () Bool)

(assert (=> b!99160 (= res!49813 (contains!799 call!10164 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99160 (=> (not res!49813) (not e!64613))))

(declare-fun b!99161 () Bool)

(assert (=> b!99161 (= e!64624 e!64619)))

(assert (=> b!99161 (= lt!49837 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (=> b!99161 (= c!16896 ((_ is Undefined!257) lt!49837))))

(declare-fun b!99162 () Bool)

(declare-fun lt!49844 () Unit!2998)

(assert (=> b!99162 (= lt!49844 e!64605)))

(assert (=> b!99162 (= c!16888 call!10165)))

(assert (=> b!99162 (= e!64619 (tuple2!2335 false newMap!16))))

(assert (= (and d!26579 c!16890) b!99128))

(assert (= (and d!26579 (not c!16890)) b!99161))

(assert (= (and b!99128 c!16895) b!99124))

(assert (= (and b!99128 (not c!16895)) b!99123))

(assert (= (or b!99124 b!99123) bm!10148))

(assert (= (or b!99124 b!99123) bm!10146))

(assert (= (or b!99124 b!99123) bm!10149))

(assert (= (and b!99161 c!16896) b!99162))

(assert (= (and b!99161 (not c!16896)) b!99155))

(assert (= (and b!99162 c!16888) b!99154))

(assert (= (and b!99162 (not c!16888)) b!99144))

(assert (= (and b!99154 res!49807) b!99143))

(assert (= (and b!99143 res!49809) b!99158))

(assert (= (and b!99144 c!16894) b!99140))

(assert (= (and b!99144 (not c!16894)) b!99153))

(assert (= (and b!99140 res!49811) b!99137))

(assert (= (and b!99137 res!49814) b!99156))

(assert (= (and b!99153 c!16892) b!99141))

(assert (= (and b!99153 (not c!16892)) b!99159))

(assert (= (and b!99141 res!49804) b!99148))

(assert (= (and b!99148 res!49803) b!99127))

(assert (= (or b!99140 b!99141) bm!10147))

(assert (= (or b!99156 b!99127) bm!10165))

(assert (= (or b!99143 bm!10147) bm!10169))

(assert (= (or b!99154 b!99144) bm!10156))

(assert (= (and b!99155 c!16886) b!99149))

(assert (= (and b!99155 (not c!16886)) b!99126))

(assert (= (and b!99126 c!16898) b!99142))

(assert (= (and b!99126 (not c!16898)) b!99138))

(assert (= (and b!99138 c!16889) b!99157))

(assert (= (and b!99138 (not c!16889)) b!99139))

(assert (= (and b!99157 res!49812) b!99125))

(assert (= (and b!99125 res!49805) b!99136))

(assert (= (and b!99139 c!16897) b!99131))

(assert (= (and b!99139 (not c!16897)) b!99134))

(assert (= (and b!99131 res!49816) b!99132))

(assert (= (and b!99132 res!49808) b!99130))

(assert (= (and b!99134 c!16893) b!99135))

(assert (= (and b!99134 (not c!16893)) b!99151))

(assert (= (and b!99135 res!49810) b!99150))

(assert (= (and b!99150 res!49806) b!99152))

(assert (= (or b!99131 b!99135) bm!10158))

(assert (= (or b!99130 b!99152) bm!10167))

(assert (= (or b!99125 bm!10158) bm!10164))

(assert (= (or b!99157 b!99139) bm!10155))

(assert (= (or b!99149 b!99142) bm!10159))

(assert (= (or b!99144 b!99139) bm!10150))

(assert (= (or bm!10156 bm!10155) bm!10153))

(assert (= (or b!99162 b!99138) bm!10166))

(assert (= (or bm!10165 bm!10167) bm!10151))

(assert (= (or b!99154 b!99157) bm!10160))

(assert (= (or bm!10169 bm!10164) bm!10157))

(assert (= (or b!99162 b!99138) bm!10163))

(assert (= (or bm!10148 bm!10166) bm!10152))

(assert (= (or bm!10146 b!99138) bm!10168))

(assert (= (or bm!10149 b!99138) bm!10154))

(assert (= (and bm!10154 c!16887) b!99129))

(assert (= (and bm!10154 (not c!16887)) b!99133))

(assert (= (and d!26579 res!49815) b!99147))

(assert (= (and b!99147 c!16891) b!99160))

(assert (= (and b!99147 (not c!16891)) b!99145))

(assert (= (and b!99160 res!49813) b!99146))

(assert (= (or b!99146 b!99145) bm!10162))

(assert (= (or b!99160 b!99146 b!99145) bm!10161))

(declare-fun m!108745 () Bool)

(assert (=> b!99146 m!108745))

(assert (=> b!99161 m!108591))

(declare-fun m!108747 () Bool)

(assert (=> b!99161 m!108747))

(assert (=> bm!10153 m!108591))

(assert (=> bm!10153 m!108747))

(assert (=> bm!10159 m!108591))

(assert (=> bm!10159 m!108589))

(declare-fun m!108749 () Bool)

(assert (=> bm!10159 m!108749))

(declare-fun m!108751 () Bool)

(assert (=> b!99148 m!108751))

(assert (=> b!99123 m!108589))

(declare-fun m!108753 () Bool)

(assert (=> b!99123 m!108753))

(declare-fun m!108755 () Bool)

(assert (=> bm!10157 m!108755))

(declare-fun m!108757 () Bool)

(assert (=> b!99150 m!108757))

(assert (=> b!99124 m!108589))

(declare-fun m!108759 () Bool)

(assert (=> b!99124 m!108759))

(declare-fun m!108761 () Bool)

(assert (=> b!99133 m!108761))

(assert (=> bm!10160 m!108591))

(declare-fun m!108763 () Bool)

(assert (=> bm!10160 m!108763))

(declare-fun m!108765 () Bool)

(assert (=> b!99158 m!108765))

(declare-fun m!108767 () Bool)

(assert (=> b!99137 m!108767))

(assert (=> bm!10151 m!108591))

(declare-fun m!108769 () Bool)

(assert (=> bm!10151 m!108769))

(declare-fun m!108771 () Bool)

(assert (=> bm!10163 m!108771))

(declare-fun m!108773 () Bool)

(assert (=> bm!10163 m!108773))

(declare-fun m!108775 () Bool)

(assert (=> d!26579 m!108775))

(assert (=> d!26579 m!108583))

(declare-fun m!108777 () Bool)

(assert (=> bm!10152 m!108777))

(assert (=> bm!10150 m!108591))

(declare-fun m!108779 () Bool)

(assert (=> bm!10150 m!108779))

(declare-fun m!108781 () Bool)

(assert (=> bm!10154 m!108781))

(assert (=> b!99138 m!108761))

(declare-fun m!108783 () Bool)

(assert (=> b!99138 m!108783))

(assert (=> b!99138 m!108591))

(assert (=> b!99138 m!108589))

(declare-fun m!108785 () Bool)

(assert (=> b!99138 m!108785))

(assert (=> b!99138 m!108761))

(assert (=> b!99138 m!108591))

(declare-fun m!108787 () Bool)

(assert (=> b!99138 m!108787))

(declare-fun m!108789 () Bool)

(assert (=> b!99138 m!108789))

(assert (=> bm!10162 m!108597))

(assert (=> b!99160 m!108591))

(declare-fun m!108791 () Bool)

(assert (=> b!99160 m!108791))

(declare-fun m!108793 () Bool)

(assert (=> b!99132 m!108793))

(assert (=> bm!10168 m!108783))

(declare-fun m!108795 () Bool)

(assert (=> bm!10168 m!108795))

(declare-fun m!108797 () Bool)

(assert (=> b!99136 m!108797))

(declare-fun m!108799 () Bool)

(assert (=> bm!10161 m!108799))

(assert (=> b!98875 d!26579))

(declare-fun d!26581 () Bool)

(declare-fun c!16901 () Bool)

(assert (=> d!26581 (= c!16901 ((_ is ValueCellFull!974) (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!64627 () V!3161)

(assert (=> d!26581 (= (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64627)))

(declare-fun b!99167 () Bool)

(declare-fun get!1292 (ValueCell!974 V!3161) V!3161)

(assert (=> b!99167 (= e!64627 (get!1292 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99168 () Bool)

(declare-fun get!1293 (ValueCell!974 V!3161) V!3161)

(assert (=> b!99168 (= e!64627 (get!1293 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26581 c!16901) b!99167))

(assert (= (and d!26581 (not c!16901)) b!99168))

(assert (=> b!99167 m!108585))

(assert (=> b!99167 m!108587))

(declare-fun m!108801 () Bool)

(assert (=> b!99167 m!108801))

(assert (=> b!99168 m!108585))

(assert (=> b!99168 m!108587))

(declare-fun m!108803 () Bool)

(assert (=> b!99168 m!108803))

(assert (=> b!98875 d!26581))

(declare-fun d!26583 () Bool)

(assert (=> d!26583 (= (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992)))) (and (or (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000001111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000011111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000001111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000011111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000001111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000011111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000001111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000011111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000001111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000011111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000001111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000011111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000001111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000011111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000001111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000011111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000111111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00001111111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00011111111111111111111111111111) (= (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!98868 d!26583))

(declare-fun d!26585 () Bool)

(assert (=> d!26585 (= (map!1247 newMap!16) (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun bs!4087 () Bool)

(assert (= bs!4087 d!26585))

(assert (=> bs!4087 m!108761))

(assert (=> b!98873 d!26585))

(declare-fun b!99211 () Bool)

(declare-fun e!64656 () Bool)

(declare-fun lt!49898 () ListLongMap!1517)

(declare-fun apply!93 (ListLongMap!1517 (_ BitVec 64)) V!3161)

(assert (=> b!99211 (= e!64656 (= (apply!93 lt!49898 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun bm!10184 () Bool)

(declare-fun call!10193 () Bool)

(assert (=> bm!10184 (= call!10193 (contains!799 lt!49898 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99212 () Bool)

(declare-fun res!49843 () Bool)

(declare-fun e!64662 () Bool)

(assert (=> b!99212 (=> (not res!49843) (not e!64662))))

(declare-fun e!64655 () Bool)

(assert (=> b!99212 (= res!49843 e!64655)))

(declare-fun c!16914 () Bool)

(assert (=> b!99212 (= c!16914 (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99213 () Bool)

(declare-fun e!64660 () Bool)

(assert (=> b!99213 (= e!64660 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99214 () Bool)

(declare-fun e!64661 () Bool)

(declare-fun e!64666 () Bool)

(assert (=> b!99214 (= e!64661 e!64666)))

(declare-fun res!49841 () Bool)

(assert (=> b!99214 (=> (not res!49841) (not e!64666))))

(assert (=> b!99214 (= res!49841 (contains!799 lt!49898 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99214 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99215 () Bool)

(declare-fun e!64658 () ListLongMap!1517)

(declare-fun call!10187 () ListLongMap!1517)

(assert (=> b!99215 (= e!64658 call!10187)))

(declare-fun b!99216 () Bool)

(declare-fun e!64664 () Bool)

(assert (=> b!99216 (= e!64664 (not call!10193))))

(declare-fun b!99217 () Bool)

(declare-fun e!64659 () ListLongMap!1517)

(assert (=> b!99217 (= e!64659 e!64658)))

(declare-fun c!16916 () Bool)

(assert (=> b!99217 (= c!16916 (and (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99218 () Bool)

(declare-fun c!16915 () Bool)

(assert (=> b!99218 (= c!16915 (and (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64663 () ListLongMap!1517)

(assert (=> b!99218 (= e!64658 e!64663)))

(declare-fun b!99219 () Bool)

(assert (=> b!99219 (= e!64663 call!10187)))

(declare-fun d!26587 () Bool)

(assert (=> d!26587 e!64662))

(declare-fun res!49842 () Bool)

(assert (=> d!26587 (=> (not res!49842) (not e!64662))))

(assert (=> d!26587 (= res!49842 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun lt!49900 () ListLongMap!1517)

(assert (=> d!26587 (= lt!49898 lt!49900)))

(declare-fun lt!49911 () Unit!2998)

(declare-fun e!64654 () Unit!2998)

(assert (=> d!26587 (= lt!49911 e!64654)))

(declare-fun c!16918 () Bool)

(declare-fun e!64657 () Bool)

(assert (=> d!26587 (= c!16918 e!64657)))

(declare-fun res!49835 () Bool)

(assert (=> d!26587 (=> (not res!49835) (not e!64657))))

(assert (=> d!26587 (= res!49835 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26587 (= lt!49900 e!64659)))

(declare-fun c!16917 () Bool)

(assert (=> d!26587 (= c!16917 (and (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26587 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992))))))

(assert (=> d!26587 (= (getCurrentListMap!455 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) lt!49898)))

(declare-fun b!99220 () Bool)

(declare-fun lt!49901 () Unit!2998)

(assert (=> b!99220 (= e!64654 lt!49901)))

(declare-fun lt!49908 () ListLongMap!1517)

(declare-fun getCurrentListMapNoExtraKeys!93 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) ListLongMap!1517)

(assert (=> b!99220 (= lt!49908 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun lt!49917 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49917 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49915 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49915 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49906 () Unit!2998)

(declare-fun addStillContains!69 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> b!99220 (= lt!49906 (addStillContains!69 lt!49908 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49915))))

(assert (=> b!99220 (contains!799 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49915)))

(declare-fun lt!49910 () Unit!2998)

(assert (=> b!99220 (= lt!49910 lt!49906)))

(declare-fun lt!49903 () ListLongMap!1517)

(assert (=> b!99220 (= lt!49903 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun lt!49916 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49916 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49912 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49912 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49902 () Unit!2998)

(declare-fun addApplyDifferent!69 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> b!99220 (= lt!49902 (addApplyDifferent!69 lt!49903 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49912))))

(assert (=> b!99220 (= (apply!93 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49912) (apply!93 lt!49903 lt!49912))))

(declare-fun lt!49918 () Unit!2998)

(assert (=> b!99220 (= lt!49918 lt!49902)))

(declare-fun lt!49904 () ListLongMap!1517)

(assert (=> b!99220 (= lt!49904 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun lt!49914 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49914 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49907 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49907 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49909 () Unit!2998)

(assert (=> b!99220 (= lt!49909 (addApplyDifferent!69 lt!49904 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49907))))

(assert (=> b!99220 (= (apply!93 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49907) (apply!93 lt!49904 lt!49907))))

(declare-fun lt!49897 () Unit!2998)

(assert (=> b!99220 (= lt!49897 lt!49909)))

(declare-fun lt!49913 () ListLongMap!1517)

(assert (=> b!99220 (= lt!49913 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun lt!49899 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49899 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49905 () (_ BitVec 64))

(assert (=> b!99220 (= lt!49905 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99220 (= lt!49901 (addApplyDifferent!69 lt!49913 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49905))))

(assert (=> b!99220 (= (apply!93 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49905) (apply!93 lt!49913 lt!49905))))

(declare-fun b!99221 () Bool)

(declare-fun call!10190 () Bool)

(assert (=> b!99221 (= e!64655 (not call!10190))))

(declare-fun b!99222 () Bool)

(declare-fun e!64665 () Bool)

(assert (=> b!99222 (= e!64655 e!64665)))

(declare-fun res!49837 () Bool)

(assert (=> b!99222 (= res!49837 call!10190)))

(assert (=> b!99222 (=> (not res!49837) (not e!64665))))

(declare-fun b!99223 () Bool)

(assert (=> b!99223 (= e!64666 (= (apply!93 lt!49898 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99223 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> b!99223 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun call!10191 () ListLongMap!1517)

(declare-fun call!10188 () ListLongMap!1517)

(declare-fun call!10192 () ListLongMap!1517)

(declare-fun bm!10185 () Bool)

(declare-fun call!10189 () ListLongMap!1517)

(assert (=> bm!10185 (= call!10189 (+!129 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99224 () Bool)

(assert (=> b!99224 (= e!64664 e!64656)))

(declare-fun res!49839 () Bool)

(assert (=> b!99224 (= res!49839 call!10193)))

(assert (=> b!99224 (=> (not res!49839) (not e!64656))))

(declare-fun bm!10186 () Bool)

(assert (=> bm!10186 (= call!10190 (contains!799 lt!49898 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10187 () Bool)

(assert (=> bm!10187 (= call!10187 call!10189)))

(declare-fun bm!10188 () Bool)

(assert (=> bm!10188 (= call!10191 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!99225 () Bool)

(declare-fun Unit!3009 () Unit!2998)

(assert (=> b!99225 (= e!64654 Unit!3009)))

(declare-fun b!99226 () Bool)

(assert (=> b!99226 (= e!64665 (= (apply!93 lt!49898 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun bm!10189 () Bool)

(assert (=> bm!10189 (= call!10188 call!10192)))

(declare-fun b!99227 () Bool)

(assert (=> b!99227 (= e!64659 (+!129 call!10189 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99228 () Bool)

(assert (=> b!99228 (= e!64657 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99229 () Bool)

(declare-fun res!49840 () Bool)

(assert (=> b!99229 (=> (not res!49840) (not e!64662))))

(assert (=> b!99229 (= res!49840 e!64661)))

(declare-fun res!49836 () Bool)

(assert (=> b!99229 (=> res!49836 e!64661)))

(assert (=> b!99229 (= res!49836 (not e!64660))))

(declare-fun res!49838 () Bool)

(assert (=> b!99229 (=> (not res!49838) (not e!64660))))

(assert (=> b!99229 (= res!49838 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun bm!10190 () Bool)

(assert (=> bm!10190 (= call!10192 call!10191)))

(declare-fun b!99230 () Bool)

(assert (=> b!99230 (= e!64663 call!10188)))

(declare-fun b!99231 () Bool)

(assert (=> b!99231 (= e!64662 e!64664)))

(declare-fun c!16919 () Bool)

(assert (=> b!99231 (= c!16919 (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26587 c!16917) b!99227))

(assert (= (and d!26587 (not c!16917)) b!99217))

(assert (= (and b!99217 c!16916) b!99215))

(assert (= (and b!99217 (not c!16916)) b!99218))

(assert (= (and b!99218 c!16915) b!99219))

(assert (= (and b!99218 (not c!16915)) b!99230))

(assert (= (or b!99219 b!99230) bm!10189))

(assert (= (or b!99215 bm!10189) bm!10190))

(assert (= (or b!99215 b!99219) bm!10187))

(assert (= (or b!99227 bm!10190) bm!10188))

(assert (= (or b!99227 bm!10187) bm!10185))

(assert (= (and d!26587 res!49835) b!99228))

(assert (= (and d!26587 c!16918) b!99220))

(assert (= (and d!26587 (not c!16918)) b!99225))

(assert (= (and d!26587 res!49842) b!99229))

(assert (= (and b!99229 res!49838) b!99213))

(assert (= (and b!99229 (not res!49836)) b!99214))

(assert (= (and b!99214 res!49841) b!99223))

(assert (= (and b!99229 res!49840) b!99212))

(assert (= (and b!99212 c!16914) b!99222))

(assert (= (and b!99212 (not c!16914)) b!99221))

(assert (= (and b!99222 res!49837) b!99226))

(assert (= (or b!99222 b!99221) bm!10186))

(assert (= (and b!99212 res!49843) b!99231))

(assert (= (and b!99231 c!16919) b!99224))

(assert (= (and b!99231 (not c!16919)) b!99216))

(assert (= (and b!99224 res!49839) b!99211))

(assert (= (or b!99224 b!99216) bm!10184))

(declare-fun b_lambda!4415 () Bool)

(assert (=> (not b_lambda!4415) (not b!99223)))

(assert (=> b!99223 t!5552))

(declare-fun b_and!6089 () Bool)

(assert (= b_and!6069 (and (=> t!5552 result!3279) b_and!6089)))

(assert (=> b!99223 t!5554))

(declare-fun b_and!6091 () Bool)

(assert (= b_and!6071 (and (=> t!5554 result!3283) b_and!6091)))

(assert (=> b!99223 m!108725))

(declare-fun m!108805 () Bool)

(assert (=> b!99223 m!108805))

(assert (=> b!99223 m!108587))

(assert (=> b!99223 m!108725))

(declare-fun m!108807 () Bool)

(assert (=> b!99223 m!108807))

(assert (=> b!99223 m!108805))

(assert (=> b!99223 m!108587))

(declare-fun m!108809 () Bool)

(assert (=> b!99223 m!108809))

(assert (=> b!99213 m!108725))

(assert (=> b!99213 m!108725))

(declare-fun m!108811 () Bool)

(assert (=> b!99213 m!108811))

(declare-fun m!108813 () Bool)

(assert (=> bm!10184 m!108813))

(assert (=> b!99214 m!108725))

(assert (=> b!99214 m!108725))

(declare-fun m!108815 () Bool)

(assert (=> b!99214 m!108815))

(declare-fun m!108817 () Bool)

(assert (=> b!99227 m!108817))

(declare-fun m!108819 () Bool)

(assert (=> bm!10186 m!108819))

(declare-fun m!108821 () Bool)

(assert (=> bm!10188 m!108821))

(assert (=> d!26587 m!108579))

(declare-fun m!108823 () Bool)

(assert (=> bm!10185 m!108823))

(assert (=> b!99228 m!108725))

(assert (=> b!99228 m!108725))

(assert (=> b!99228 m!108811))

(declare-fun m!108825 () Bool)

(assert (=> b!99226 m!108825))

(declare-fun m!108827 () Bool)

(assert (=> b!99220 m!108827))

(declare-fun m!108829 () Bool)

(assert (=> b!99220 m!108829))

(assert (=> b!99220 m!108725))

(declare-fun m!108831 () Bool)

(assert (=> b!99220 m!108831))

(declare-fun m!108833 () Bool)

(assert (=> b!99220 m!108833))

(declare-fun m!108835 () Bool)

(assert (=> b!99220 m!108835))

(declare-fun m!108837 () Bool)

(assert (=> b!99220 m!108837))

(declare-fun m!108839 () Bool)

(assert (=> b!99220 m!108839))

(declare-fun m!108841 () Bool)

(assert (=> b!99220 m!108841))

(declare-fun m!108843 () Bool)

(assert (=> b!99220 m!108843))

(assert (=> b!99220 m!108831))

(declare-fun m!108845 () Bool)

(assert (=> b!99220 m!108845))

(declare-fun m!108847 () Bool)

(assert (=> b!99220 m!108847))

(declare-fun m!108849 () Bool)

(assert (=> b!99220 m!108849))

(assert (=> b!99220 m!108837))

(assert (=> b!99220 m!108843))

(declare-fun m!108851 () Bool)

(assert (=> b!99220 m!108851))

(assert (=> b!99220 m!108821))

(declare-fun m!108853 () Bool)

(assert (=> b!99220 m!108853))

(assert (=> b!99220 m!108841))

(declare-fun m!108855 () Bool)

(assert (=> b!99220 m!108855))

(declare-fun m!108857 () Bool)

(assert (=> b!99211 m!108857))

(assert (=> b!98873 d!26587))

(declare-fun condMapEmpty!3781 () Bool)

(declare-fun mapDefault!3781 () ValueCell!974)

(assert (=> mapNonEmpty!3766 (= condMapEmpty!3781 (= mapRest!3766 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3781)))))

(declare-fun e!64672 () Bool)

(declare-fun mapRes!3781 () Bool)

(assert (=> mapNonEmpty!3766 (= tp!9604 (and e!64672 mapRes!3781))))

(declare-fun b!99238 () Bool)

(declare-fun e!64671 () Bool)

(assert (=> b!99238 (= e!64671 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3781 () Bool)

(declare-fun tp!9631 () Bool)

(assert (=> mapNonEmpty!3781 (= mapRes!3781 (and tp!9631 e!64671))))

(declare-fun mapKey!3781 () (_ BitVec 32))

(declare-fun mapValue!3781 () ValueCell!974)

(declare-fun mapRest!3781 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3781 (= mapRest!3766 (store mapRest!3781 mapKey!3781 mapValue!3781))))

(declare-fun b!99239 () Bool)

(assert (=> b!99239 (= e!64672 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3781 () Bool)

(assert (=> mapIsEmpty!3781 mapRes!3781))

(assert (= (and mapNonEmpty!3766 condMapEmpty!3781) mapIsEmpty!3781))

(assert (= (and mapNonEmpty!3766 (not condMapEmpty!3781)) mapNonEmpty!3781))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!974) mapValue!3781)) b!99238))

(assert (= (and mapNonEmpty!3766 ((_ is ValueCellFull!974) mapDefault!3781)) b!99239))

(declare-fun m!108859 () Bool)

(assert (=> mapNonEmpty!3781 m!108859))

(declare-fun condMapEmpty!3782 () Bool)

(declare-fun mapDefault!3782 () ValueCell!974)

(assert (=> mapNonEmpty!3765 (= condMapEmpty!3782 (= mapRest!3765 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3782)))))

(declare-fun e!64674 () Bool)

(declare-fun mapRes!3782 () Bool)

(assert (=> mapNonEmpty!3765 (= tp!9601 (and e!64674 mapRes!3782))))

(declare-fun b!99240 () Bool)

(declare-fun e!64673 () Bool)

(assert (=> b!99240 (= e!64673 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3782 () Bool)

(declare-fun tp!9632 () Bool)

(assert (=> mapNonEmpty!3782 (= mapRes!3782 (and tp!9632 e!64673))))

(declare-fun mapKey!3782 () (_ BitVec 32))

(declare-fun mapValue!3782 () ValueCell!974)

(declare-fun mapRest!3782 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3782 (= mapRest!3765 (store mapRest!3782 mapKey!3782 mapValue!3782))))

(declare-fun b!99241 () Bool)

(assert (=> b!99241 (= e!64674 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3782 () Bool)

(assert (=> mapIsEmpty!3782 mapRes!3782))

(assert (= (and mapNonEmpty!3765 condMapEmpty!3782) mapIsEmpty!3782))

(assert (= (and mapNonEmpty!3765 (not condMapEmpty!3782)) mapNonEmpty!3782))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!974) mapValue!3782)) b!99240))

(assert (= (and mapNonEmpty!3765 ((_ is ValueCellFull!974) mapDefault!3782)) b!99241))

(declare-fun m!108861 () Bool)

(assert (=> mapNonEmpty!3782 m!108861))

(declare-fun b_lambda!4417 () Bool)

(assert (= b_lambda!4415 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4417)))

(check-sat (not bm!10157) (not d!26579) (not bm!10185) (not b!99017) b_and!6091 (not bm!10168) (not b!99124) (not mapNonEmpty!3781) (not bm!10151) (not b!99138) (not bm!10161) (not b_next!2437) (not b!99042) (not b!99214) (not b!99133) (not b!99228) (not b!99004) (not b!99005) (not b_lambda!4417) (not b!99033) (not b!99123) (not b!99161) (not bm!10163) (not bm!10153) (not b!99220) (not bm!10186) (not b!99012) (not bm!10162) (not bm!10159) (not b!99146) (not b!99031) (not bm!10152) (not d!26563) (not b!99226) (not b!99040) (not d!26573) (not b_next!2439) (not mapNonEmpty!3782) (not bm!10160) (not bm!10097) (not b!99168) (not d!26585) (not d!26567) (not d!26577) (not b!99030) b_and!6089 (not bm!10154) (not bm!10150) (not bm!10188) (not b!99167) (not b!99223) (not b!99211) (not d!26565) (not d!26587) (not b!99006) (not b!99227) (not b!99160) (not b_lambda!4413) (not d!26569) tp_is_empty!2635 (not bm!10184) (not b!99213))
(check-sat b_and!6089 b_and!6091 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun b!99253 () Bool)

(declare-fun e!64677 () Bool)

(assert (=> b!99253 (= e!64677 (and (bvsge (extraKeys!2318 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!477 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!99250 () Bool)

(declare-fun res!49855 () Bool)

(assert (=> b!99250 (=> (not res!49855) (not e!64677))))

(assert (=> b!99250 (= res!49855 (and (= (size!2261 (_values!2484 newMap!16)) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001)) (= (size!2260 (_keys!4194 newMap!16)) (size!2261 (_values!2484 newMap!16))) (bvsge (_size!477 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!477 newMap!16) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!99252 () Bool)

(declare-fun res!49854 () Bool)

(assert (=> b!99252 (=> (not res!49854) (not e!64677))))

(declare-fun size!2266 (LongMapFixedSize!856) (_ BitVec 32))

(assert (=> b!99252 (= res!49854 (= (size!2266 newMap!16) (bvadd (_size!477 newMap!16) (bvsdiv (bvadd (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!99251 () Bool)

(declare-fun res!49852 () Bool)

(assert (=> b!99251 (=> (not res!49852) (not e!64677))))

(assert (=> b!99251 (= res!49852 (bvsge (size!2266 newMap!16) (_size!477 newMap!16)))))

(declare-fun d!26589 () Bool)

(declare-fun res!49853 () Bool)

(assert (=> d!26589 (=> (not res!49853) (not e!64677))))

(assert (=> d!26589 (= res!49853 (validMask!0 (mask!6607 newMap!16)))))

(assert (=> d!26589 (= (simpleValid!69 newMap!16) e!64677)))

(assert (= (and d!26589 res!49853) b!99250))

(assert (= (and b!99250 res!49855) b!99251))

(assert (= (and b!99251 res!49852) b!99252))

(assert (= (and b!99252 res!49854) b!99253))

(declare-fun m!108863 () Bool)

(assert (=> b!99252 m!108863))

(assert (=> b!99251 m!108863))

(declare-fun m!108865 () Bool)

(assert (=> d!26589 m!108865))

(assert (=> d!26563 d!26589))

(assert (=> d!26567 d!26571))

(declare-fun d!26591 () Bool)

(assert (=> d!26591 (not (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26591 true))

(declare-fun _$68!94 () Unit!2998)

(assert (=> d!26591 (= (choose!68 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587)) _$68!94)))

(declare-fun bs!4088 () Bool)

(assert (= bs!4088 d!26591))

(assert (=> bs!4088 m!108591))

(assert (=> bs!4088 m!108607))

(assert (=> d!26567 d!26591))

(declare-fun d!26593 () Bool)

(assert (=> d!26593 (= (map!1247 (_2!1178 lt!49828)) (getCurrentListMap!455 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun bs!4089 () Bool)

(assert (= bs!4089 d!26593))

(declare-fun m!108867 () Bool)

(assert (=> bs!4089 m!108867))

(assert (=> bm!10161 d!26593))

(declare-fun d!26595 () Bool)

(declare-fun e!64680 () Bool)

(assert (=> d!26595 e!64680))

(declare-fun res!49861 () Bool)

(assert (=> d!26595 (=> (not res!49861) (not e!64680))))

(declare-fun lt!49927 () ListLongMap!1517)

(assert (=> d!26595 (= res!49861 (contains!799 lt!49927 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!49928 () List!1591)

(assert (=> d!26595 (= lt!49927 (ListLongMap!1518 lt!49928))))

(declare-fun lt!49929 () Unit!2998)

(declare-fun lt!49930 () Unit!2998)

(assert (=> d!26595 (= lt!49929 lt!49930)))

(assert (=> d!26595 (= (getValueByKey!149 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!68 (List!1591 (_ BitVec 64) V!3161) Unit!2998)

(assert (=> d!26595 (= lt!49930 (lemmaContainsTupThenGetReturnValue!68 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun insertStrictlySorted!71 (List!1591 (_ BitVec 64) V!3161) List!1591)

(assert (=> d!26595 (= lt!49928 (insertStrictlySorted!71 (toList!774 lt!49904) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26595 (= (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49927)))

(declare-fun b!99258 () Bool)

(declare-fun res!49860 () Bool)

(assert (=> b!99258 (=> (not res!49860) (not e!64680))))

(assert (=> b!99258 (= res!49860 (= (getValueByKey!149 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99259 () Bool)

(declare-fun contains!801 (List!1591 tuple2!2332) Bool)

(assert (=> b!99259 (= e!64680 (contains!801 (toList!774 lt!49927) (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26595 res!49861) b!99258))

(assert (= (and b!99258 res!49860) b!99259))

(declare-fun m!108869 () Bool)

(assert (=> d!26595 m!108869))

(declare-fun m!108871 () Bool)

(assert (=> d!26595 m!108871))

(declare-fun m!108873 () Bool)

(assert (=> d!26595 m!108873))

(declare-fun m!108875 () Bool)

(assert (=> d!26595 m!108875))

(declare-fun m!108877 () Bool)

(assert (=> b!99258 m!108877))

(declare-fun m!108879 () Bool)

(assert (=> b!99259 m!108879))

(assert (=> b!99220 d!26595))

(declare-fun d!26597 () Bool)

(declare-fun get!1294 (Option!155) V!3161)

(assert (=> d!26597 (= (apply!93 lt!49904 lt!49907) (get!1294 (getValueByKey!149 (toList!774 lt!49904) lt!49907)))))

(declare-fun bs!4090 () Bool)

(assert (= bs!4090 d!26597))

(declare-fun m!108881 () Bool)

(assert (=> bs!4090 m!108881))

(assert (=> bs!4090 m!108881))

(declare-fun m!108883 () Bool)

(assert (=> bs!4090 m!108883))

(assert (=> b!99220 d!26597))

(declare-fun b!99284 () Bool)

(declare-fun lt!49945 () ListLongMap!1517)

(declare-fun e!64697 () Bool)

(assert (=> b!99284 (= e!64697 (= lt!49945 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99286 () Bool)

(declare-fun e!64696 () Bool)

(assert (=> b!99286 (= e!64696 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99286 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!99287 () Bool)

(declare-fun e!64699 () ListLongMap!1517)

(declare-fun call!10196 () ListLongMap!1517)

(assert (=> b!99287 (= e!64699 call!10196)))

(declare-fun b!99288 () Bool)

(declare-fun isEmpty!363 (ListLongMap!1517) Bool)

(assert (=> b!99288 (= e!64697 (isEmpty!363 lt!49945))))

(declare-fun b!99289 () Bool)

(declare-fun e!64695 () Bool)

(declare-fun e!64701 () Bool)

(assert (=> b!99289 (= e!64695 e!64701)))

(assert (=> b!99289 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun res!49872 () Bool)

(assert (=> b!99289 (= res!49872 (contains!799 lt!49945 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99289 (=> (not res!49872) (not e!64701))))

(declare-fun b!99290 () Bool)

(declare-fun e!64698 () Bool)

(assert (=> b!99290 (= e!64698 e!64695)))

(declare-fun c!16928 () Bool)

(assert (=> b!99290 (= c!16928 e!64696)))

(declare-fun res!49870 () Bool)

(assert (=> b!99290 (=> (not res!49870) (not e!64696))))

(assert (=> b!99290 (= res!49870 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99291 () Bool)

(assert (=> b!99291 (= e!64695 e!64697)))

(declare-fun c!16930 () Bool)

(assert (=> b!99291 (= c!16930 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun bm!10193 () Bool)

(assert (=> bm!10193 (= call!10196 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!99292 () Bool)

(declare-fun res!49871 () Bool)

(assert (=> b!99292 (=> (not res!49871) (not e!64698))))

(assert (=> b!99292 (= res!49871 (not (contains!799 lt!49945 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99293 () Bool)

(declare-fun lt!49949 () Unit!2998)

(declare-fun lt!49948 () Unit!2998)

(assert (=> b!99293 (= lt!49949 lt!49948)))

(declare-fun lt!49947 () V!3161)

(declare-fun lt!49950 () (_ BitVec 64))

(declare-fun lt!49946 () (_ BitVec 64))

(declare-fun lt!49951 () ListLongMap!1517)

(assert (=> b!99293 (not (contains!799 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947)) lt!49946))))

(declare-fun addStillNotContains!42 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> b!99293 (= lt!49948 (addStillNotContains!42 lt!49951 lt!49950 lt!49947 lt!49946))))

(assert (=> b!99293 (= lt!49946 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99293 (= lt!49947 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99293 (= lt!49950 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99293 (= lt!49951 call!10196)))

(assert (=> b!99293 (= e!64699 (+!129 call!10196 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99285 () Bool)

(declare-fun e!64700 () ListLongMap!1517)

(assert (=> b!99285 (= e!64700 e!64699)))

(declare-fun c!16931 () Bool)

(assert (=> b!99285 (= c!16931 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun d!26599 () Bool)

(assert (=> d!26599 e!64698))

(declare-fun res!49873 () Bool)

(assert (=> d!26599 (=> (not res!49873) (not e!64698))))

(assert (=> d!26599 (= res!49873 (not (contains!799 lt!49945 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26599 (= lt!49945 e!64700)))

(declare-fun c!16929 () Bool)

(assert (=> d!26599 (= c!16929 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26599 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992))))))

(assert (=> d!26599 (= (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) lt!49945)))

(declare-fun b!99294 () Bool)

(assert (=> b!99294 (= e!64700 (ListLongMap!1518 Nil!1588))))

(declare-fun b!99295 () Bool)

(assert (=> b!99295 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> b!99295 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> b!99295 (= e!64701 (= (apply!93 lt!49945 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!26599 c!16929) b!99294))

(assert (= (and d!26599 (not c!16929)) b!99285))

(assert (= (and b!99285 c!16931) b!99293))

(assert (= (and b!99285 (not c!16931)) b!99287))

(assert (= (or b!99293 b!99287) bm!10193))

(assert (= (and d!26599 res!49873) b!99292))

(assert (= (and b!99292 res!49871) b!99290))

(assert (= (and b!99290 res!49870) b!99286))

(assert (= (and b!99290 c!16928) b!99289))

(assert (= (and b!99290 (not c!16928)) b!99291))

(assert (= (and b!99289 res!49872) b!99295))

(assert (= (and b!99291 c!16930) b!99284))

(assert (= (and b!99291 (not c!16930)) b!99288))

(declare-fun b_lambda!4419 () Bool)

(assert (=> (not b_lambda!4419) (not b!99293)))

(assert (=> b!99293 t!5552))

(declare-fun b_and!6093 () Bool)

(assert (= b_and!6089 (and (=> t!5552 result!3279) b_and!6093)))

(assert (=> b!99293 t!5554))

(declare-fun b_and!6095 () Bool)

(assert (= b_and!6091 (and (=> t!5554 result!3283) b_and!6095)))

(declare-fun b_lambda!4421 () Bool)

(assert (=> (not b_lambda!4421) (not b!99295)))

(assert (=> b!99295 t!5552))

(declare-fun b_and!6097 () Bool)

(assert (= b_and!6093 (and (=> t!5552 result!3279) b_and!6097)))

(assert (=> b!99295 t!5554))

(declare-fun b_and!6099 () Bool)

(assert (= b_and!6095 (and (=> t!5554 result!3283) b_and!6099)))

(assert (=> b!99295 m!108805))

(assert (=> b!99295 m!108805))

(assert (=> b!99295 m!108587))

(assert (=> b!99295 m!108809))

(assert (=> b!99295 m!108587))

(assert (=> b!99295 m!108725))

(assert (=> b!99295 m!108725))

(declare-fun m!108885 () Bool)

(assert (=> b!99295 m!108885))

(assert (=> b!99285 m!108725))

(assert (=> b!99285 m!108725))

(assert (=> b!99285 m!108811))

(assert (=> b!99289 m!108725))

(assert (=> b!99289 m!108725))

(declare-fun m!108887 () Bool)

(assert (=> b!99289 m!108887))

(declare-fun m!108889 () Bool)

(assert (=> b!99284 m!108889))

(assert (=> bm!10193 m!108889))

(declare-fun m!108891 () Bool)

(assert (=> b!99292 m!108891))

(assert (=> b!99286 m!108725))

(assert (=> b!99286 m!108725))

(assert (=> b!99286 m!108811))

(assert (=> b!99293 m!108805))

(declare-fun m!108893 () Bool)

(assert (=> b!99293 m!108893))

(assert (=> b!99293 m!108805))

(assert (=> b!99293 m!108587))

(assert (=> b!99293 m!108809))

(declare-fun m!108895 () Bool)

(assert (=> b!99293 m!108895))

(assert (=> b!99293 m!108587))

(assert (=> b!99293 m!108893))

(declare-fun m!108897 () Bool)

(assert (=> b!99293 m!108897))

(declare-fun m!108899 () Bool)

(assert (=> b!99293 m!108899))

(assert (=> b!99293 m!108725))

(declare-fun m!108901 () Bool)

(assert (=> b!99288 m!108901))

(declare-fun m!108903 () Bool)

(assert (=> d!26599 m!108903))

(assert (=> d!26599 m!108579))

(assert (=> b!99220 d!26599))

(declare-fun d!26601 () Bool)

(assert (=> d!26601 (= (apply!93 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49912) (apply!93 lt!49903 lt!49912))))

(declare-fun lt!49954 () Unit!2998)

(declare-fun choose!609 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> d!26601 (= lt!49954 (choose!609 lt!49903 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49912))))

(declare-fun e!64704 () Bool)

(assert (=> d!26601 e!64704))

(declare-fun res!49876 () Bool)

(assert (=> d!26601 (=> (not res!49876) (not e!64704))))

(assert (=> d!26601 (= res!49876 (contains!799 lt!49903 lt!49912))))

(assert (=> d!26601 (= (addApplyDifferent!69 lt!49903 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49912) lt!49954)))

(declare-fun b!99299 () Bool)

(assert (=> b!99299 (= e!64704 (not (= lt!49912 lt!49916)))))

(assert (= (and d!26601 res!49876) b!99299))

(declare-fun m!108905 () Bool)

(assert (=> d!26601 m!108905))

(declare-fun m!108907 () Bool)

(assert (=> d!26601 m!108907))

(assert (=> d!26601 m!108849))

(assert (=> d!26601 m!108843))

(assert (=> d!26601 m!108851))

(assert (=> d!26601 m!108843))

(assert (=> b!99220 d!26601))

(declare-fun d!26603 () Bool)

(assert (=> d!26603 (= (apply!93 lt!49903 lt!49912) (get!1294 (getValueByKey!149 (toList!774 lt!49903) lt!49912)))))

(declare-fun bs!4091 () Bool)

(assert (= bs!4091 d!26603))

(declare-fun m!108909 () Bool)

(assert (=> bs!4091 m!108909))

(assert (=> bs!4091 m!108909))

(declare-fun m!108911 () Bool)

(assert (=> bs!4091 m!108911))

(assert (=> b!99220 d!26603))

(declare-fun d!26605 () Bool)

(assert (=> d!26605 (contains!799 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49915)))

(declare-fun lt!49957 () Unit!2998)

(declare-fun choose!610 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> d!26605 (= lt!49957 (choose!610 lt!49908 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49915))))

(assert (=> d!26605 (contains!799 lt!49908 lt!49915)))

(assert (=> d!26605 (= (addStillContains!69 lt!49908 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49915) lt!49957)))

(declare-fun bs!4092 () Bool)

(assert (= bs!4092 d!26605))

(assert (=> bs!4092 m!108831))

(assert (=> bs!4092 m!108831))

(assert (=> bs!4092 m!108833))

(declare-fun m!108913 () Bool)

(assert (=> bs!4092 m!108913))

(declare-fun m!108915 () Bool)

(assert (=> bs!4092 m!108915))

(assert (=> b!99220 d!26605))

(declare-fun d!26607 () Bool)

(assert (=> d!26607 (= (apply!93 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49905) (apply!93 lt!49913 lt!49905))))

(declare-fun lt!49958 () Unit!2998)

(assert (=> d!26607 (= lt!49958 (choose!609 lt!49913 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49905))))

(declare-fun e!64705 () Bool)

(assert (=> d!26607 e!64705))

(declare-fun res!49877 () Bool)

(assert (=> d!26607 (=> (not res!49877) (not e!64705))))

(assert (=> d!26607 (= res!49877 (contains!799 lt!49913 lt!49905))))

(assert (=> d!26607 (= (addApplyDifferent!69 lt!49913 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49905) lt!49958)))

(declare-fun b!99301 () Bool)

(assert (=> b!99301 (= e!64705 (not (= lt!49905 lt!49899)))))

(assert (= (and d!26607 res!49877) b!99301))

(declare-fun m!108917 () Bool)

(assert (=> d!26607 m!108917))

(declare-fun m!108919 () Bool)

(assert (=> d!26607 m!108919))

(assert (=> d!26607 m!108827))

(assert (=> d!26607 m!108837))

(assert (=> d!26607 m!108839))

(assert (=> d!26607 m!108837))

(assert (=> b!99220 d!26607))

(declare-fun d!26609 () Bool)

(assert (=> d!26609 (= (apply!93 lt!49913 lt!49905) (get!1294 (getValueByKey!149 (toList!774 lt!49913) lt!49905)))))

(declare-fun bs!4093 () Bool)

(assert (= bs!4093 d!26609))

(declare-fun m!108921 () Bool)

(assert (=> bs!4093 m!108921))

(assert (=> bs!4093 m!108921))

(declare-fun m!108923 () Bool)

(assert (=> bs!4093 m!108923))

(assert (=> b!99220 d!26609))

(declare-fun d!26611 () Bool)

(declare-fun e!64706 () Bool)

(assert (=> d!26611 e!64706))

(declare-fun res!49879 () Bool)

(assert (=> d!26611 (=> (not res!49879) (not e!64706))))

(declare-fun lt!49959 () ListLongMap!1517)

(assert (=> d!26611 (= res!49879 (contains!799 lt!49959 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!49960 () List!1591)

(assert (=> d!26611 (= lt!49959 (ListLongMap!1518 lt!49960))))

(declare-fun lt!49961 () Unit!2998)

(declare-fun lt!49962 () Unit!2998)

(assert (=> d!26611 (= lt!49961 lt!49962)))

(assert (=> d!26611 (= (getValueByKey!149 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26611 (= lt!49962 (lemmaContainsTupThenGetReturnValue!68 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26611 (= lt!49960 (insertStrictlySorted!71 (toList!774 lt!49908) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26611 (= (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49959)))

(declare-fun b!99302 () Bool)

(declare-fun res!49878 () Bool)

(assert (=> b!99302 (=> (not res!49878) (not e!64706))))

(assert (=> b!99302 (= res!49878 (= (getValueByKey!149 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99303 () Bool)

(assert (=> b!99303 (= e!64706 (contains!801 (toList!774 lt!49959) (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26611 res!49879) b!99302))

(assert (= (and b!99302 res!49878) b!99303))

(declare-fun m!108925 () Bool)

(assert (=> d!26611 m!108925))

(declare-fun m!108927 () Bool)

(assert (=> d!26611 m!108927))

(declare-fun m!108929 () Bool)

(assert (=> d!26611 m!108929))

(declare-fun m!108931 () Bool)

(assert (=> d!26611 m!108931))

(declare-fun m!108933 () Bool)

(assert (=> b!99302 m!108933))

(declare-fun m!108935 () Bool)

(assert (=> b!99303 m!108935))

(assert (=> b!99220 d!26611))

(declare-fun d!26613 () Bool)

(declare-fun e!64707 () Bool)

(assert (=> d!26613 e!64707))

(declare-fun res!49881 () Bool)

(assert (=> d!26613 (=> (not res!49881) (not e!64707))))

(declare-fun lt!49963 () ListLongMap!1517)

(assert (=> d!26613 (= res!49881 (contains!799 lt!49963 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!49964 () List!1591)

(assert (=> d!26613 (= lt!49963 (ListLongMap!1518 lt!49964))))

(declare-fun lt!49965 () Unit!2998)

(declare-fun lt!49966 () Unit!2998)

(assert (=> d!26613 (= lt!49965 lt!49966)))

(assert (=> d!26613 (= (getValueByKey!149 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26613 (= lt!49966 (lemmaContainsTupThenGetReturnValue!68 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26613 (= lt!49964 (insertStrictlySorted!71 (toList!774 lt!49903) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26613 (= (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49963)))

(declare-fun b!99304 () Bool)

(declare-fun res!49880 () Bool)

(assert (=> b!99304 (=> (not res!49880) (not e!64707))))

(assert (=> b!99304 (= res!49880 (= (getValueByKey!149 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99305 () Bool)

(assert (=> b!99305 (= e!64707 (contains!801 (toList!774 lt!49963) (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26613 res!49881) b!99304))

(assert (= (and b!99304 res!49880) b!99305))

(declare-fun m!108937 () Bool)

(assert (=> d!26613 m!108937))

(declare-fun m!108939 () Bool)

(assert (=> d!26613 m!108939))

(declare-fun m!108941 () Bool)

(assert (=> d!26613 m!108941))

(declare-fun m!108943 () Bool)

(assert (=> d!26613 m!108943))

(declare-fun m!108945 () Bool)

(assert (=> b!99304 m!108945))

(declare-fun m!108947 () Bool)

(assert (=> b!99305 m!108947))

(assert (=> b!99220 d!26613))

(declare-fun d!26615 () Bool)

(assert (=> d!26615 (= (apply!93 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49907) (apply!93 lt!49904 lt!49907))))

(declare-fun lt!49967 () Unit!2998)

(assert (=> d!26615 (= lt!49967 (choose!609 lt!49904 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49907))))

(declare-fun e!64708 () Bool)

(assert (=> d!26615 e!64708))

(declare-fun res!49882 () Bool)

(assert (=> d!26615 (=> (not res!49882) (not e!64708))))

(assert (=> d!26615 (= res!49882 (contains!799 lt!49904 lt!49907))))

(assert (=> d!26615 (= (addApplyDifferent!69 lt!49904 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49907) lt!49967)))

(declare-fun b!99306 () Bool)

(assert (=> b!99306 (= e!64708 (not (= lt!49907 lt!49914)))))

(assert (= (and d!26615 res!49882) b!99306))

(declare-fun m!108949 () Bool)

(assert (=> d!26615 m!108949))

(declare-fun m!108951 () Bool)

(assert (=> d!26615 m!108951))

(assert (=> d!26615 m!108853))

(assert (=> d!26615 m!108841))

(assert (=> d!26615 m!108855))

(assert (=> d!26615 m!108841))

(assert (=> b!99220 d!26615))

(declare-fun d!26617 () Bool)

(declare-fun e!64709 () Bool)

(assert (=> d!26617 e!64709))

(declare-fun res!49884 () Bool)

(assert (=> d!26617 (=> (not res!49884) (not e!64709))))

(declare-fun lt!49968 () ListLongMap!1517)

(assert (=> d!26617 (= res!49884 (contains!799 lt!49968 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!49969 () List!1591)

(assert (=> d!26617 (= lt!49968 (ListLongMap!1518 lt!49969))))

(declare-fun lt!49970 () Unit!2998)

(declare-fun lt!49971 () Unit!2998)

(assert (=> d!26617 (= lt!49970 lt!49971)))

(assert (=> d!26617 (= (getValueByKey!149 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26617 (= lt!49971 (lemmaContainsTupThenGetReturnValue!68 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26617 (= lt!49969 (insertStrictlySorted!71 (toList!774 lt!49913) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26617 (= (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49968)))

(declare-fun b!99307 () Bool)

(declare-fun res!49883 () Bool)

(assert (=> b!99307 (=> (not res!49883) (not e!64709))))

(assert (=> b!99307 (= res!49883 (= (getValueByKey!149 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99308 () Bool)

(assert (=> b!99308 (= e!64709 (contains!801 (toList!774 lt!49968) (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26617 res!49884) b!99307))

(assert (= (and b!99307 res!49883) b!99308))

(declare-fun m!108953 () Bool)

(assert (=> d!26617 m!108953))

(declare-fun m!108955 () Bool)

(assert (=> d!26617 m!108955))

(declare-fun m!108957 () Bool)

(assert (=> d!26617 m!108957))

(declare-fun m!108959 () Bool)

(assert (=> d!26617 m!108959))

(declare-fun m!108961 () Bool)

(assert (=> b!99307 m!108961))

(declare-fun m!108963 () Bool)

(assert (=> b!99308 m!108963))

(assert (=> b!99220 d!26617))

(declare-fun d!26619 () Bool)

(declare-fun e!64710 () Bool)

(assert (=> d!26619 e!64710))

(declare-fun res!49885 () Bool)

(assert (=> d!26619 (=> res!49885 e!64710)))

(declare-fun lt!49973 () Bool)

(assert (=> d!26619 (= res!49885 (not lt!49973))))

(declare-fun lt!49972 () Bool)

(assert (=> d!26619 (= lt!49973 lt!49972)))

(declare-fun lt!49975 () Unit!2998)

(declare-fun e!64711 () Unit!2998)

(assert (=> d!26619 (= lt!49975 e!64711)))

(declare-fun c!16932 () Bool)

(assert (=> d!26619 (= c!16932 lt!49972)))

(assert (=> d!26619 (= lt!49972 (containsKey!153 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(assert (=> d!26619 (= (contains!799 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49915) lt!49973)))

(declare-fun b!99309 () Bool)

(declare-fun lt!49974 () Unit!2998)

(assert (=> b!99309 (= e!64711 lt!49974)))

(assert (=> b!99309 (= lt!49974 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(assert (=> b!99309 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(declare-fun b!99310 () Bool)

(declare-fun Unit!3010 () Unit!2998)

(assert (=> b!99310 (= e!64711 Unit!3010)))

(declare-fun b!99311 () Bool)

(assert (=> b!99311 (= e!64710 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915)))))

(assert (= (and d!26619 c!16932) b!99309))

(assert (= (and d!26619 (not c!16932)) b!99310))

(assert (= (and d!26619 (not res!49885)) b!99311))

(declare-fun m!108965 () Bool)

(assert (=> d!26619 m!108965))

(declare-fun m!108967 () Bool)

(assert (=> b!99309 m!108967))

(declare-fun m!108969 () Bool)

(assert (=> b!99309 m!108969))

(assert (=> b!99309 m!108969))

(declare-fun m!108971 () Bool)

(assert (=> b!99309 m!108971))

(assert (=> b!99311 m!108969))

(assert (=> b!99311 m!108969))

(assert (=> b!99311 m!108971))

(assert (=> b!99220 d!26619))

(declare-fun d!26621 () Bool)

(assert (=> d!26621 (= (apply!93 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49912) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49912)))))

(declare-fun bs!4094 () Bool)

(assert (= bs!4094 d!26621))

(declare-fun m!108973 () Bool)

(assert (=> bs!4094 m!108973))

(assert (=> bs!4094 m!108973))

(declare-fun m!108975 () Bool)

(assert (=> bs!4094 m!108975))

(assert (=> b!99220 d!26621))

(declare-fun d!26623 () Bool)

(assert (=> d!26623 (= (apply!93 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49907) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49907)))))

(declare-fun bs!4095 () Bool)

(assert (= bs!4095 d!26623))

(declare-fun m!108977 () Bool)

(assert (=> bs!4095 m!108977))

(assert (=> bs!4095 m!108977))

(declare-fun m!108979 () Bool)

(assert (=> bs!4095 m!108979))

(assert (=> b!99220 d!26623))

(declare-fun d!26625 () Bool)

(assert (=> d!26625 (= (apply!93 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49905) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49905)))))

(declare-fun bs!4096 () Bool)

(assert (= bs!4096 d!26625))

(declare-fun m!108981 () Bool)

(assert (=> bs!4096 m!108981))

(assert (=> bs!4096 m!108981))

(declare-fun m!108983 () Bool)

(assert (=> bs!4096 m!108983))

(assert (=> b!99220 d!26625))

(declare-fun d!26627 () Bool)

(declare-fun res!49886 () Bool)

(declare-fun e!64712 () Bool)

(assert (=> d!26627 (=> (not res!49886) (not e!64712))))

(assert (=> d!26627 (= res!49886 (simpleValid!69 (_2!1178 lt!49828)))))

(assert (=> d!26627 (= (valid!392 (_2!1178 lt!49828)) e!64712)))

(declare-fun b!99312 () Bool)

(declare-fun res!49887 () Bool)

(assert (=> b!99312 (=> (not res!49887) (not e!64712))))

(assert (=> b!99312 (= res!49887 (= (arrayCountValidKeys!0 (_keys!4194 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))) (_size!477 (_2!1178 lt!49828))))))

(declare-fun b!99313 () Bool)

(declare-fun res!49888 () Bool)

(assert (=> b!99313 (=> (not res!49888) (not e!64712))))

(assert (=> b!99313 (= res!49888 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828))))))

(declare-fun b!99314 () Bool)

(assert (=> b!99314 (= e!64712 (arrayNoDuplicates!0 (_keys!4194 (_2!1178 lt!49828)) #b00000000000000000000000000000000 Nil!1587))))

(assert (= (and d!26627 res!49886) b!99312))

(assert (= (and b!99312 res!49887) b!99313))

(assert (= (and b!99313 res!49888) b!99314))

(declare-fun m!108985 () Bool)

(assert (=> d!26627 m!108985))

(declare-fun m!108987 () Bool)

(assert (=> b!99312 m!108987))

(declare-fun m!108989 () Bool)

(assert (=> b!99313 m!108989))

(declare-fun m!108991 () Bool)

(assert (=> b!99314 m!108991))

(assert (=> d!26579 d!26627))

(assert (=> d!26579 d!26563))

(declare-fun b!99323 () Bool)

(declare-fun e!64721 () Bool)

(declare-fun call!10199 () Bool)

(assert (=> b!99323 (= e!64721 call!10199)))

(declare-fun b!99324 () Bool)

(declare-fun e!64719 () Bool)

(assert (=> b!99324 (= e!64719 e!64721)))

(declare-fun lt!49984 () (_ BitVec 64))

(assert (=> b!99324 (= lt!49984 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49983 () Unit!2998)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4231 (_ BitVec 64) (_ BitVec 32)) Unit!2998)

(assert (=> b!99324 (= lt!49983 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000))))

(assert (=> b!99324 (arrayContainsKey!0 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000)))

(declare-fun lt!49982 () Unit!2998)

(assert (=> b!99324 (= lt!49982 lt!49983)))

(declare-fun res!49894 () Bool)

(assert (=> b!99324 (= res!49894 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (_keys!4194 newMap!16) (mask!6607 newMap!16)) (Found!257 #b00000000000000000000000000000000)))))

(assert (=> b!99324 (=> (not res!49894) (not e!64721))))

(declare-fun b!99325 () Bool)

(declare-fun e!64720 () Bool)

(assert (=> b!99325 (= e!64720 e!64719)))

(declare-fun c!16935 () Bool)

(assert (=> b!99325 (= c!16935 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10196 () Bool)

(assert (=> bm!10196 (= call!10199 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99326 () Bool)

(assert (=> b!99326 (= e!64719 call!10199)))

(declare-fun d!26629 () Bool)

(declare-fun res!49893 () Bool)

(assert (=> d!26629 (=> res!49893 e!64720)))

(assert (=> d!26629 (= res!49893 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26629 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 newMap!16) (mask!6607 newMap!16)) e!64720)))

(assert (= (and d!26629 (not res!49893)) b!99325))

(assert (= (and b!99325 c!16935) b!99324))

(assert (= (and b!99325 (not c!16935)) b!99326))

(assert (= (and b!99324 res!49894) b!99323))

(assert (= (or b!99323 b!99326) bm!10196))

(declare-fun m!108993 () Bool)

(assert (=> b!99324 m!108993))

(declare-fun m!108995 () Bool)

(assert (=> b!99324 m!108995))

(declare-fun m!108997 () Bool)

(assert (=> b!99324 m!108997))

(assert (=> b!99324 m!108993))

(declare-fun m!108999 () Bool)

(assert (=> b!99324 m!108999))

(assert (=> b!99325 m!108993))

(assert (=> b!99325 m!108993))

(declare-fun m!109001 () Bool)

(assert (=> b!99325 m!109001))

(declare-fun m!109003 () Bool)

(assert (=> bm!10196 m!109003))

(assert (=> b!99005 d!26629))

(declare-fun b!99327 () Bool)

(declare-fun e!64724 () Bool)

(declare-fun lt!49986 () ListLongMap!1517)

(assert (=> b!99327 (= e!64724 (= (apply!93 lt!49986 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10197 () Bool)

(declare-fun call!10206 () Bool)

(assert (=> bm!10197 (= call!10206 (contains!799 lt!49986 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99328 () Bool)

(declare-fun res!49903 () Bool)

(declare-fun e!64730 () Bool)

(assert (=> b!99328 (=> (not res!49903) (not e!64730))))

(declare-fun e!64723 () Bool)

(assert (=> b!99328 (= res!49903 e!64723)))

(declare-fun c!16936 () Bool)

(assert (=> b!99328 (= c!16936 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99329 () Bool)

(declare-fun e!64728 () Bool)

(assert (=> b!99329 (= e!64728 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99330 () Bool)

(declare-fun e!64729 () Bool)

(declare-fun e!64734 () Bool)

(assert (=> b!99330 (= e!64729 e!64734)))

(declare-fun res!49901 () Bool)

(assert (=> b!99330 (=> (not res!49901) (not e!64734))))

(assert (=> b!99330 (= res!49901 (contains!799 lt!49986 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99330 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99331 () Bool)

(declare-fun e!64726 () ListLongMap!1517)

(declare-fun call!10200 () ListLongMap!1517)

(assert (=> b!99331 (= e!64726 call!10200)))

(declare-fun b!99332 () Bool)

(declare-fun e!64732 () Bool)

(assert (=> b!99332 (= e!64732 (not call!10206))))

(declare-fun b!99333 () Bool)

(declare-fun e!64727 () ListLongMap!1517)

(assert (=> b!99333 (= e!64727 e!64726)))

(declare-fun c!16938 () Bool)

(assert (=> b!99333 (= c!16938 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99334 () Bool)

(declare-fun c!16937 () Bool)

(assert (=> b!99334 (= c!16937 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64731 () ListLongMap!1517)

(assert (=> b!99334 (= e!64726 e!64731)))

(declare-fun b!99335 () Bool)

(assert (=> b!99335 (= e!64731 call!10200)))

(declare-fun d!26631 () Bool)

(assert (=> d!26631 e!64730))

(declare-fun res!49902 () Bool)

(assert (=> d!26631 (=> (not res!49902) (not e!64730))))

(assert (=> d!26631 (= res!49902 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!49988 () ListLongMap!1517)

(assert (=> d!26631 (= lt!49986 lt!49988)))

(declare-fun lt!49999 () Unit!2998)

(declare-fun e!64722 () Unit!2998)

(assert (=> d!26631 (= lt!49999 e!64722)))

(declare-fun c!16940 () Bool)

(declare-fun e!64725 () Bool)

(assert (=> d!26631 (= c!16940 e!64725)))

(declare-fun res!49895 () Bool)

(assert (=> d!26631 (=> (not res!49895) (not e!64725))))

(assert (=> d!26631 (= res!49895 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26631 (= lt!49988 e!64727)))

(declare-fun c!16939 () Bool)

(assert (=> d!26631 (= c!16939 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26631 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26631 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!49986)))

(declare-fun b!99336 () Bool)

(declare-fun lt!49989 () Unit!2998)

(assert (=> b!99336 (= e!64722 lt!49989)))

(declare-fun lt!49996 () ListLongMap!1517)

(assert (=> b!99336 (= lt!49996 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50005 () (_ BitVec 64))

(assert (=> b!99336 (= lt!50005 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50003 () (_ BitVec 64))

(assert (=> b!99336 (= lt!50003 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49994 () Unit!2998)

(assert (=> b!99336 (= lt!49994 (addStillContains!69 lt!49996 lt!50005 (zeroValue!2382 newMap!16) lt!50003))))

(assert (=> b!99336 (contains!799 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) lt!50003)))

(declare-fun lt!49998 () Unit!2998)

(assert (=> b!99336 (= lt!49998 lt!49994)))

(declare-fun lt!49991 () ListLongMap!1517)

(assert (=> b!99336 (= lt!49991 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50004 () (_ BitVec 64))

(assert (=> b!99336 (= lt!50004 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50000 () (_ BitVec 64))

(assert (=> b!99336 (= lt!50000 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49990 () Unit!2998)

(assert (=> b!99336 (= lt!49990 (addApplyDifferent!69 lt!49991 lt!50004 (minValue!2382 newMap!16) lt!50000))))

(assert (=> b!99336 (= (apply!93 (+!129 lt!49991 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) lt!50000) (apply!93 lt!49991 lt!50000))))

(declare-fun lt!50006 () Unit!2998)

(assert (=> b!99336 (= lt!50006 lt!49990)))

(declare-fun lt!49992 () ListLongMap!1517)

(assert (=> b!99336 (= lt!49992 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50002 () (_ BitVec 64))

(assert (=> b!99336 (= lt!50002 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49995 () (_ BitVec 64))

(assert (=> b!99336 (= lt!49995 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49997 () Unit!2998)

(assert (=> b!99336 (= lt!49997 (addApplyDifferent!69 lt!49992 lt!50002 (zeroValue!2382 newMap!16) lt!49995))))

(assert (=> b!99336 (= (apply!93 (+!129 lt!49992 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) lt!49995) (apply!93 lt!49992 lt!49995))))

(declare-fun lt!49985 () Unit!2998)

(assert (=> b!99336 (= lt!49985 lt!49997)))

(declare-fun lt!50001 () ListLongMap!1517)

(assert (=> b!99336 (= lt!50001 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!49987 () (_ BitVec 64))

(assert (=> b!99336 (= lt!49987 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49993 () (_ BitVec 64))

(assert (=> b!99336 (= lt!49993 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99336 (= lt!49989 (addApplyDifferent!69 lt!50001 lt!49987 (minValue!2382 newMap!16) lt!49993))))

(assert (=> b!99336 (= (apply!93 (+!129 lt!50001 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) lt!49993) (apply!93 lt!50001 lt!49993))))

(declare-fun b!99337 () Bool)

(declare-fun call!10203 () Bool)

(assert (=> b!99337 (= e!64723 (not call!10203))))

(declare-fun b!99338 () Bool)

(declare-fun e!64733 () Bool)

(assert (=> b!99338 (= e!64723 e!64733)))

(declare-fun res!49897 () Bool)

(assert (=> b!99338 (= res!49897 call!10203)))

(assert (=> b!99338 (=> (not res!49897) (not e!64733))))

(declare-fun b!99339 () Bool)

(assert (=> b!99339 (= e!64734 (= (apply!93 lt!49986 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99339 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (_values!2484 newMap!16))))))

(assert (=> b!99339 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10201 () ListLongMap!1517)

(declare-fun bm!10198 () Bool)

(declare-fun call!10205 () ListLongMap!1517)

(declare-fun call!10202 () ListLongMap!1517)

(declare-fun call!10204 () ListLongMap!1517)

(assert (=> bm!10198 (= call!10202 (+!129 (ite c!16939 call!10204 (ite c!16938 call!10205 call!10201)) (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!99340 () Bool)

(assert (=> b!99340 (= e!64732 e!64724)))

(declare-fun res!49899 () Bool)

(assert (=> b!99340 (= res!49899 call!10206)))

(assert (=> b!99340 (=> (not res!49899) (not e!64724))))

(declare-fun bm!10199 () Bool)

(assert (=> bm!10199 (= call!10203 (contains!799 lt!49986 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10200 () Bool)

(assert (=> bm!10200 (= call!10200 call!10202)))

(declare-fun bm!10201 () Bool)

(assert (=> bm!10201 (= call!10204 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99341 () Bool)

(declare-fun Unit!3011 () Unit!2998)

(assert (=> b!99341 (= e!64722 Unit!3011)))

(declare-fun b!99342 () Bool)

(assert (=> b!99342 (= e!64733 (= (apply!93 lt!49986 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10202 () Bool)

(assert (=> bm!10202 (= call!10201 call!10205)))

(declare-fun b!99343 () Bool)

(assert (=> b!99343 (= e!64727 (+!129 call!10202 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99344 () Bool)

(assert (=> b!99344 (= e!64725 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99345 () Bool)

(declare-fun res!49900 () Bool)

(assert (=> b!99345 (=> (not res!49900) (not e!64730))))

(assert (=> b!99345 (= res!49900 e!64729)))

(declare-fun res!49896 () Bool)

(assert (=> b!99345 (=> res!49896 e!64729)))

(assert (=> b!99345 (= res!49896 (not e!64728))))

(declare-fun res!49898 () Bool)

(assert (=> b!99345 (=> (not res!49898) (not e!64728))))

(assert (=> b!99345 (= res!49898 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10203 () Bool)

(assert (=> bm!10203 (= call!10205 call!10204)))

(declare-fun b!99346 () Bool)

(assert (=> b!99346 (= e!64731 call!10201)))

(declare-fun b!99347 () Bool)

(assert (=> b!99347 (= e!64730 e!64732)))

(declare-fun c!16941 () Bool)

(assert (=> b!99347 (= c!16941 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26631 c!16939) b!99343))

(assert (= (and d!26631 (not c!16939)) b!99333))

(assert (= (and b!99333 c!16938) b!99331))

(assert (= (and b!99333 (not c!16938)) b!99334))

(assert (= (and b!99334 c!16937) b!99335))

(assert (= (and b!99334 (not c!16937)) b!99346))

(assert (= (or b!99335 b!99346) bm!10202))

(assert (= (or b!99331 bm!10202) bm!10203))

(assert (= (or b!99331 b!99335) bm!10200))

(assert (= (or b!99343 bm!10203) bm!10201))

(assert (= (or b!99343 bm!10200) bm!10198))

(assert (= (and d!26631 res!49895) b!99344))

(assert (= (and d!26631 c!16940) b!99336))

(assert (= (and d!26631 (not c!16940)) b!99341))

(assert (= (and d!26631 res!49902) b!99345))

(assert (= (and b!99345 res!49898) b!99329))

(assert (= (and b!99345 (not res!49896)) b!99330))

(assert (= (and b!99330 res!49901) b!99339))

(assert (= (and b!99345 res!49900) b!99328))

(assert (= (and b!99328 c!16936) b!99338))

(assert (= (and b!99328 (not c!16936)) b!99337))

(assert (= (and b!99338 res!49897) b!99342))

(assert (= (or b!99338 b!99337) bm!10199))

(assert (= (and b!99328 res!49903) b!99347))

(assert (= (and b!99347 c!16941) b!99340))

(assert (= (and b!99347 (not c!16941)) b!99332))

(assert (= (and b!99340 res!49899) b!99327))

(assert (= (or b!99340 b!99332) bm!10197))

(declare-fun b_lambda!4423 () Bool)

(assert (=> (not b_lambda!4423) (not b!99339)))

(declare-fun tb!1945 () Bool)

(declare-fun t!5567 () Bool)

(assert (=> (and b!98866 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16)) t!5567) tb!1945))

(declare-fun result!3299 () Bool)

(assert (=> tb!1945 (= result!3299 tp_is_empty!2635)))

(assert (=> b!99339 t!5567))

(declare-fun b_and!6101 () Bool)

(assert (= b_and!6097 (and (=> t!5567 result!3299) b_and!6101)))

(declare-fun t!5569 () Bool)

(declare-fun tb!1947 () Bool)

(assert (=> (and b!98863 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 newMap!16)) t!5569) tb!1947))

(declare-fun result!3301 () Bool)

(assert (= result!3301 result!3299))

(assert (=> b!99339 t!5569))

(declare-fun b_and!6103 () Bool)

(assert (= b_and!6099 (and (=> t!5569 result!3301) b_and!6103)))

(assert (=> b!99339 m!108993))

(declare-fun m!109005 () Bool)

(assert (=> b!99339 m!109005))

(declare-fun m!109007 () Bool)

(assert (=> b!99339 m!109007))

(assert (=> b!99339 m!108993))

(declare-fun m!109009 () Bool)

(assert (=> b!99339 m!109009))

(assert (=> b!99339 m!109005))

(assert (=> b!99339 m!109007))

(declare-fun m!109011 () Bool)

(assert (=> b!99339 m!109011))

(assert (=> b!99329 m!108993))

(assert (=> b!99329 m!108993))

(assert (=> b!99329 m!109001))

(declare-fun m!109013 () Bool)

(assert (=> bm!10197 m!109013))

(assert (=> b!99330 m!108993))

(assert (=> b!99330 m!108993))

(declare-fun m!109015 () Bool)

(assert (=> b!99330 m!109015))

(declare-fun m!109017 () Bool)

(assert (=> b!99343 m!109017))

(declare-fun m!109019 () Bool)

(assert (=> bm!10199 m!109019))

(declare-fun m!109021 () Bool)

(assert (=> bm!10201 m!109021))

(assert (=> d!26631 m!108865))

(declare-fun m!109023 () Bool)

(assert (=> bm!10198 m!109023))

(assert (=> b!99344 m!108993))

(assert (=> b!99344 m!108993))

(assert (=> b!99344 m!109001))

(declare-fun m!109025 () Bool)

(assert (=> b!99342 m!109025))

(declare-fun m!109027 () Bool)

(assert (=> b!99336 m!109027))

(declare-fun m!109029 () Bool)

(assert (=> b!99336 m!109029))

(assert (=> b!99336 m!108993))

(declare-fun m!109031 () Bool)

(assert (=> b!99336 m!109031))

(declare-fun m!109033 () Bool)

(assert (=> b!99336 m!109033))

(declare-fun m!109035 () Bool)

(assert (=> b!99336 m!109035))

(declare-fun m!109037 () Bool)

(assert (=> b!99336 m!109037))

(declare-fun m!109039 () Bool)

(assert (=> b!99336 m!109039))

(declare-fun m!109041 () Bool)

(assert (=> b!99336 m!109041))

(declare-fun m!109043 () Bool)

(assert (=> b!99336 m!109043))

(assert (=> b!99336 m!109031))

(declare-fun m!109045 () Bool)

(assert (=> b!99336 m!109045))

(declare-fun m!109047 () Bool)

(assert (=> b!99336 m!109047))

(declare-fun m!109049 () Bool)

(assert (=> b!99336 m!109049))

(assert (=> b!99336 m!109037))

(assert (=> b!99336 m!109043))

(declare-fun m!109051 () Bool)

(assert (=> b!99336 m!109051))

(assert (=> b!99336 m!109021))

(declare-fun m!109053 () Bool)

(assert (=> b!99336 m!109053))

(assert (=> b!99336 m!109041))

(declare-fun m!109055 () Bool)

(assert (=> b!99336 m!109055))

(declare-fun m!109057 () Bool)

(assert (=> b!99327 m!109057))

(assert (=> d!26585 d!26631))

(declare-fun b!99360 () Bool)

(declare-fun e!64741 () SeekEntryResult!257)

(declare-fun lt!50015 () SeekEntryResult!257)

(assert (=> b!99360 (= e!64741 (MissingZero!257 (index!3174 lt!50015)))))

(declare-fun d!26633 () Bool)

(declare-fun lt!50013 () SeekEntryResult!257)

(assert (=> d!26633 (and (or ((_ is Undefined!257) lt!50013) (not ((_ is Found!257) lt!50013)) (and (bvsge (index!3173 lt!50013) #b00000000000000000000000000000000) (bvslt (index!3173 lt!50013) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50013) ((_ is Found!257) lt!50013) (not ((_ is MissingZero!257) lt!50013)) (and (bvsge (index!3172 lt!50013) #b00000000000000000000000000000000) (bvslt (index!3172 lt!50013) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50013) ((_ is Found!257) lt!50013) ((_ is MissingZero!257) lt!50013) (not ((_ is MissingVacant!257) lt!50013)) (and (bvsge (index!3175 lt!50013) #b00000000000000000000000000000000) (bvslt (index!3175 lt!50013) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50013) (ite ((_ is Found!257) lt!50013) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50013)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite ((_ is MissingZero!257) lt!50013) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!50013)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!257) lt!50013) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50013)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64742 () SeekEntryResult!257)

(assert (=> d!26633 (= lt!50013 e!64742)))

(declare-fun c!16949 () Bool)

(assert (=> d!26633 (= c!16949 (and ((_ is Intermediate!257) lt!50015) (undefined!1069 lt!50015)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4231 (_ BitVec 32)) SeekEntryResult!257)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26633 (= lt!50015 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (=> d!26633 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26633 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)) lt!50013)))

(declare-fun b!99361 () Bool)

(declare-fun e!64743 () SeekEntryResult!257)

(assert (=> b!99361 (= e!64742 e!64743)))

(declare-fun lt!50014 () (_ BitVec 64))

(assert (=> b!99361 (= lt!50014 (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50015)))))

(declare-fun c!16948 () Bool)

(assert (=> b!99361 (= c!16948 (= lt!50014 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99362 () Bool)

(declare-fun c!16950 () Bool)

(assert (=> b!99362 (= c!16950 (= lt!50014 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99362 (= e!64743 e!64741)))

(declare-fun b!99363 () Bool)

(assert (=> b!99363 (= e!64742 Undefined!257)))

(declare-fun b!99364 () Bool)

(assert (=> b!99364 (= e!64743 (Found!257 (index!3174 lt!50015)))))

(declare-fun b!99365 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4231 (_ BitVec 32)) SeekEntryResult!257)

(assert (=> b!99365 (= e!64741 (seekKeyOrZeroReturnVacant!0 (x!13106 lt!50015) (index!3174 lt!50015) (index!3174 lt!50015) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (= (and d!26633 c!16949) b!99363))

(assert (= (and d!26633 (not c!16949)) b!99361))

(assert (= (and b!99361 c!16948) b!99364))

(assert (= (and b!99361 (not c!16948)) b!99362))

(assert (= (and b!99362 c!16950) b!99360))

(assert (= (and b!99362 (not c!16950)) b!99365))

(declare-fun m!109059 () Bool)

(assert (=> d!26633 m!109059))

(assert (=> d!26633 m!108591))

(declare-fun m!109061 () Bool)

(assert (=> d!26633 m!109061))

(declare-fun m!109063 () Bool)

(assert (=> d!26633 m!109063))

(assert (=> d!26633 m!108865))

(declare-fun m!109065 () Bool)

(assert (=> d!26633 m!109065))

(assert (=> d!26633 m!109061))

(assert (=> d!26633 m!108591))

(declare-fun m!109067 () Bool)

(assert (=> d!26633 m!109067))

(declare-fun m!109069 () Bool)

(assert (=> b!99361 m!109069))

(assert (=> b!99365 m!108591))

(declare-fun m!109071 () Bool)

(assert (=> b!99365 m!109071))

(assert (=> b!99161 d!26633))

(declare-fun d!26635 () Bool)

(declare-fun e!64744 () Bool)

(assert (=> d!26635 e!64744))

(declare-fun res!49904 () Bool)

(assert (=> d!26635 (=> res!49904 e!64744)))

(declare-fun lt!50017 () Bool)

(assert (=> d!26635 (= res!49904 (not lt!50017))))

(declare-fun lt!50016 () Bool)

(assert (=> d!26635 (= lt!50017 lt!50016)))

(declare-fun lt!50019 () Unit!2998)

(declare-fun e!64745 () Unit!2998)

(assert (=> d!26635 (= lt!50019 e!64745)))

(declare-fun c!16951 () Bool)

(assert (=> d!26635 (= c!16951 lt!50016)))

(assert (=> d!26635 (= lt!50016 (containsKey!153 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26635 (= (contains!799 lt!49898 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50017)))

(declare-fun b!99366 () Bool)

(declare-fun lt!50018 () Unit!2998)

(assert (=> b!99366 (= e!64745 lt!50018)))

(assert (=> b!99366 (= lt!50018 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99366 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99367 () Bool)

(declare-fun Unit!3012 () Unit!2998)

(assert (=> b!99367 (= e!64745 Unit!3012)))

(declare-fun b!99368 () Bool)

(assert (=> b!99368 (= e!64744 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26635 c!16951) b!99366))

(assert (= (and d!26635 (not c!16951)) b!99367))

(assert (= (and d!26635 (not res!49904)) b!99368))

(assert (=> d!26635 m!108725))

(declare-fun m!109073 () Bool)

(assert (=> d!26635 m!109073))

(assert (=> b!99366 m!108725))

(declare-fun m!109075 () Bool)

(assert (=> b!99366 m!109075))

(assert (=> b!99366 m!108725))

(declare-fun m!109077 () Bool)

(assert (=> b!99366 m!109077))

(assert (=> b!99366 m!109077))

(declare-fun m!109079 () Bool)

(assert (=> b!99366 m!109079))

(assert (=> b!99368 m!108725))

(assert (=> b!99368 m!109077))

(assert (=> b!99368 m!109077))

(assert (=> b!99368 m!109079))

(assert (=> b!99214 d!26635))

(declare-fun d!26637 () Bool)

(declare-fun e!64748 () Bool)

(assert (=> d!26637 e!64748))

(declare-fun res!49909 () Bool)

(assert (=> d!26637 (=> (not res!49909) (not e!64748))))

(declare-fun lt!50025 () SeekEntryResult!257)

(assert (=> d!26637 (= res!49909 ((_ is Found!257) lt!50025))))

(assert (=> d!26637 (= lt!50025 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun lt!50024 () Unit!2998)

(declare-fun choose!611 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2998)

(assert (=> d!26637 (= lt!50024 (choose!611 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26637 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26637 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) lt!50024)))

(declare-fun b!99373 () Bool)

(declare-fun res!49910 () Bool)

(assert (=> b!99373 (=> (not res!49910) (not e!64748))))

(assert (=> b!99373 (= res!49910 (inRange!0 (index!3173 lt!50025) (mask!6607 newMap!16)))))

(declare-fun b!99374 () Bool)

(assert (=> b!99374 (= e!64748 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50025)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99374 (and (bvsge (index!3173 lt!50025) #b00000000000000000000000000000000) (bvslt (index!3173 lt!50025) (size!2260 (_keys!4194 newMap!16))))))

(assert (= (and d!26637 res!49909) b!99373))

(assert (= (and b!99373 res!49910) b!99374))

(assert (=> d!26637 m!108591))

(assert (=> d!26637 m!108747))

(assert (=> d!26637 m!108591))

(declare-fun m!109081 () Bool)

(assert (=> d!26637 m!109081))

(assert (=> d!26637 m!108865))

(declare-fun m!109083 () Bool)

(assert (=> b!99373 m!109083))

(declare-fun m!109085 () Bool)

(assert (=> b!99374 m!109085))

(assert (=> bm!10160 d!26637))

(declare-fun b!99409 () Bool)

(declare-fun res!49937 () Bool)

(declare-fun e!64769 () Bool)

(assert (=> b!99409 (=> (not res!49937) (not e!64769))))

(declare-fun lt!50096 () tuple2!2334)

(assert (=> b!99409 (= res!49937 (contains!799 (map!1247 (_2!1178 lt!50096)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99410 () Bool)

(assert (=> b!99410 (= e!64769 (= (map!1247 (_2!1178 lt!50096)) (+!129 (map!1247 newMap!16) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99411 () Bool)

(declare-fun res!49929 () Bool)

(declare-fun e!64768 () Bool)

(assert (=> b!99411 (=> (not res!49929) (not e!64768))))

(declare-fun call!10217 () Bool)

(assert (=> b!99411 (= res!49929 call!10217)))

(declare-fun e!64765 () Bool)

(assert (=> b!99411 (= e!64765 e!64768)))

(declare-fun b!99412 () Bool)

(declare-fun res!49935 () Bool)

(declare-fun call!10218 () Bool)

(assert (=> b!99412 (= res!49935 call!10218)))

(declare-fun e!64766 () Bool)

(assert (=> b!99412 (=> (not res!49935) (not e!64766))))

(declare-fun bm!10212 () Bool)

(declare-fun call!10215 () Bool)

(assert (=> bm!10212 (= call!10215 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!10213 () Bool)

(declare-fun call!10216 () SeekEntryResult!257)

(assert (=> bm!10213 (= call!10216 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99413 () Bool)

(declare-fun res!49931 () Bool)

(assert (=> b!99413 (=> (not res!49931) (not e!64769))))

(assert (=> b!99413 (= res!49931 (valid!392 (_2!1178 lt!50096)))))

(declare-fun b!99414 () Bool)

(declare-fun e!64770 () Unit!2998)

(declare-fun Unit!3013 () Unit!2998)

(assert (=> b!99414 (= e!64770 Unit!3013)))

(declare-fun b!99415 () Bool)

(assert (=> b!99415 (= e!64768 (not call!10215))))

(declare-fun b!99416 () Bool)

(declare-fun res!49936 () Bool)

(declare-fun lt!50108 () SeekEntryResult!257)

(assert (=> b!99416 (= res!49936 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50108)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64772 () Bool)

(assert (=> b!99416 (=> (not res!49936) (not e!64772))))

(declare-fun d!26639 () Bool)

(assert (=> d!26639 e!64769))

(declare-fun res!49930 () Bool)

(assert (=> d!26639 (=> (not res!49930) (not e!64769))))

(assert (=> d!26639 (= res!49930 (_1!1178 lt!50096))))

(assert (=> d!26639 (= lt!50096 (tuple2!2335 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd (_size!477 newMap!16) #b00000000000000000000000000000001) (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (_vacant!477 newMap!16))))))

(declare-fun lt!50104 () Unit!2998)

(declare-fun lt!50106 () Unit!2998)

(assert (=> d!26639 (= lt!50104 lt!50106)))

(declare-fun lt!50093 () array!4231)

(declare-fun lt!50113 () array!4233)

(assert (=> d!26639 (contains!799 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(assert (=> d!26639 (= lt!50106 (lemmaValidKeyInArrayIsInListMap!101 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26639 (= lt!50113 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))))

(assert (=> d!26639 (= lt!50093 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun lt!50088 () Unit!2998)

(declare-fun lt!50100 () Unit!2998)

(assert (=> d!26639 (= lt!50088 lt!50100)))

(declare-fun lt!50090 () array!4231)

(assert (=> d!26639 (= (arrayCountValidKeys!0 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4231 (_ BitVec 32)) Unit!2998)

(assert (=> d!26639 (= lt!50100 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(assert (=> d!26639 (= lt!50090 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun lt!50102 () Unit!2998)

(declare-fun lt!50111 () Unit!2998)

(assert (=> d!26639 (= lt!50102 lt!50111)))

(declare-fun lt!50092 () array!4231)

(assert (=> d!26639 (arrayContainsKey!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26639 (= lt!50111 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(assert (=> d!26639 (= lt!50092 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun lt!50099 () Unit!2998)

(declare-fun lt!50101 () Unit!2998)

(assert (=> d!26639 (= lt!50099 lt!50101)))

(assert (=> d!26639 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!26 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2998)

(assert (=> d!26639 (= lt!50101 (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50098 () Unit!2998)

(declare-fun lt!50109 () Unit!2998)

(assert (=> d!26639 (= lt!50098 lt!50109)))

(assert (=> d!26639 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (mask!6607 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4231 (_ BitVec 32) (_ BitVec 32)) Unit!2998)

(assert (=> d!26639 (= lt!50109 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (mask!6607 newMap!16)))))

(declare-fun lt!50094 () Unit!2998)

(declare-fun lt!50105 () Unit!2998)

(assert (=> d!26639 (= lt!50094 lt!50105)))

(assert (=> d!26639 (= (arrayCountValidKeys!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4231 (_ BitVec 32) (_ BitVec 64)) Unit!2998)

(assert (=> d!26639 (= lt!50105 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun lt!50114 () Unit!2998)

(declare-fun lt!50107 () Unit!2998)

(assert (=> d!26639 (= lt!50114 lt!50107)))

(declare-fun lt!50089 () (_ BitVec 32))

(declare-fun lt!50110 () List!1590)

(assert (=> d!26639 (arrayNoDuplicates!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) lt!50089 lt!50110)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4231 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1590) Unit!2998)

(assert (=> d!26639 (= lt!50107 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) lt!50089 lt!50110))))

(assert (=> d!26639 (= lt!50110 Nil!1587)))

(assert (=> d!26639 (= lt!50089 #b00000000000000000000000000000000)))

(declare-fun lt!50097 () Unit!2998)

(assert (=> d!26639 (= lt!50097 e!64770)))

(declare-fun c!16963 () Bool)

(assert (=> d!26639 (= c!16963 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!50112 () Unit!2998)

(declare-fun e!64771 () Unit!2998)

(assert (=> d!26639 (= lt!50112 e!64771)))

(declare-fun c!16961 () Bool)

(assert (=> d!26639 (= c!16961 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26639 (valid!392 newMap!16)))

(assert (=> d!26639 (= (updateHelperNewKey!42 newMap!16 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))) lt!50096)))

(declare-fun b!99417 () Bool)

(declare-fun e!64767 () Bool)

(assert (=> b!99417 (= e!64767 ((_ is Undefined!257) lt!50108))))

(declare-fun b!99418 () Bool)

(assert (=> b!99418 (= e!64772 (not call!10215))))

(declare-fun bm!10214 () Bool)

(assert (=> bm!10214 (= call!10217 call!10218)))

(declare-fun b!99419 () Bool)

(declare-fun lt!50087 () Unit!2998)

(assert (=> b!99419 (= e!64771 lt!50087)))

(assert (=> b!99419 (= lt!50087 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99419 (= lt!50108 call!10216)))

(declare-fun c!16962 () Bool)

(assert (=> b!99419 (= c!16962 ((_ is MissingZero!257) lt!50108))))

(assert (=> b!99419 e!64765))

(declare-fun b!99420 () Bool)

(declare-fun c!16960 () Bool)

(assert (=> b!99420 (= c!16960 ((_ is MissingVacant!257) lt!50108))))

(assert (=> b!99420 (= e!64765 e!64767)))

(declare-fun b!99421 () Bool)

(declare-fun Unit!3014 () Unit!2998)

(assert (=> b!99421 (= e!64771 Unit!3014)))

(declare-fun lt!50086 () Unit!2998)

(assert (=> b!99421 (= lt!50086 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50091 () SeekEntryResult!257)

(assert (=> b!99421 (= lt!50091 call!10216)))

(declare-fun res!49932 () Bool)

(assert (=> b!99421 (= res!49932 ((_ is Found!257) lt!50091))))

(assert (=> b!99421 (=> (not res!49932) (not e!64766))))

(assert (=> b!99421 e!64766))

(declare-fun lt!50095 () Unit!2998)

(assert (=> b!99421 (= lt!50095 lt!50086)))

(assert (=> b!99421 false))

(declare-fun b!99422 () Bool)

(assert (=> b!99422 (= e!64767 e!64772)))

(declare-fun res!49933 () Bool)

(assert (=> b!99422 (= res!49933 call!10217)))

(assert (=> b!99422 (=> (not res!49933) (not e!64772))))

(declare-fun bm!10215 () Bool)

(assert (=> bm!10215 (= call!10218 (inRange!0 (ite c!16961 (index!3173 lt!50091) (ite c!16962 (index!3172 lt!50108) (index!3175 lt!50108))) (mask!6607 newMap!16)))))

(declare-fun b!99423 () Bool)

(declare-fun res!49934 () Bool)

(assert (=> b!99423 (=> (not res!49934) (not e!64768))))

(assert (=> b!99423 (= res!49934 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!50108)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99424 () Bool)

(declare-fun Unit!3015 () Unit!2998)

(assert (=> b!99424 (= e!64770 Unit!3015)))

(declare-fun lt!50115 () Unit!2998)

(declare-fun lemmaArrayContainsKeyThenInListMap!26 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2998)

(assert (=> b!99424 (= lt!50115 (lemmaArrayContainsKeyThenInListMap!26 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> b!99424 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))

(declare-fun lt!50103 () Unit!2998)

(assert (=> b!99424 (= lt!50103 lt!50115)))

(assert (=> b!99424 false))

(declare-fun b!99425 () Bool)

(assert (=> b!99425 (= e!64766 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50091)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26639 c!16961) b!99421))

(assert (= (and d!26639 (not c!16961)) b!99419))

(assert (= (and b!99421 res!49932) b!99412))

(assert (= (and b!99412 res!49935) b!99425))

(assert (= (and b!99419 c!16962) b!99411))

(assert (= (and b!99419 (not c!16962)) b!99420))

(assert (= (and b!99411 res!49929) b!99423))

(assert (= (and b!99423 res!49934) b!99415))

(assert (= (and b!99420 c!16960) b!99422))

(assert (= (and b!99420 (not c!16960)) b!99417))

(assert (= (and b!99422 res!49933) b!99416))

(assert (= (and b!99416 res!49936) b!99418))

(assert (= (or b!99411 b!99422) bm!10214))

(assert (= (or b!99415 b!99418) bm!10212))

(assert (= (or b!99412 bm!10214) bm!10215))

(assert (= (or b!99421 b!99419) bm!10213))

(assert (= (and d!26639 c!16963) b!99424))

(assert (= (and d!26639 (not c!16963)) b!99414))

(assert (= (and d!26639 res!49930) b!99413))

(assert (= (and b!99413 res!49931) b!99409))

(assert (= (and b!99409 res!49937) b!99410))

(declare-fun m!109087 () Bool)

(assert (=> b!99425 m!109087))

(declare-fun m!109089 () Bool)

(assert (=> d!26639 m!109089))

(declare-fun m!109091 () Bool)

(assert (=> d!26639 m!109091))

(declare-fun m!109093 () Bool)

(assert (=> d!26639 m!109093))

(assert (=> d!26639 m!108591))

(declare-fun m!109095 () Bool)

(assert (=> d!26639 m!109095))

(assert (=> d!26639 m!108761))

(declare-fun m!109097 () Bool)

(assert (=> d!26639 m!109097))

(assert (=> d!26639 m!108761))

(assert (=> d!26639 m!108591))

(assert (=> d!26639 m!108787))

(assert (=> d!26639 m!108591))

(assert (=> d!26639 m!108769))

(assert (=> d!26639 m!108583))

(assert (=> d!26639 m!108591))

(assert (=> d!26639 m!108589))

(declare-fun m!109099 () Bool)

(assert (=> d!26639 m!109099))

(declare-fun m!109101 () Bool)

(assert (=> d!26639 m!109101))

(assert (=> d!26639 m!108591))

(declare-fun m!109103 () Bool)

(assert (=> d!26639 m!109103))

(assert (=> d!26639 m!108591))

(declare-fun m!109105 () Bool)

(assert (=> d!26639 m!109105))

(declare-fun m!109107 () Bool)

(assert (=> d!26639 m!109107))

(declare-fun m!109109 () Bool)

(assert (=> d!26639 m!109109))

(declare-fun m!109111 () Bool)

(assert (=> d!26639 m!109111))

(declare-fun m!109113 () Bool)

(assert (=> d!26639 m!109113))

(assert (=> d!26639 m!108591))

(declare-fun m!109115 () Bool)

(assert (=> d!26639 m!109115))

(declare-fun m!109117 () Bool)

(assert (=> d!26639 m!109117))

(assert (=> d!26639 m!108713))

(declare-fun m!109119 () Bool)

(assert (=> d!26639 m!109119))

(assert (=> d!26639 m!108591))

(declare-fun m!109121 () Bool)

(assert (=> d!26639 m!109121))

(declare-fun m!109123 () Bool)

(assert (=> d!26639 m!109123))

(assert (=> d!26639 m!108761))

(assert (=> d!26639 m!109119))

(assert (=> d!26639 m!109111))

(declare-fun m!109125 () Bool)

(assert (=> d!26639 m!109125))

(declare-fun m!109127 () Bool)

(assert (=> b!99410 m!109127))

(assert (=> b!99410 m!108597))

(assert (=> b!99410 m!108597))

(declare-fun m!109129 () Bool)

(assert (=> b!99410 m!109129))

(assert (=> bm!10212 m!108591))

(assert (=> bm!10212 m!108769))

(assert (=> bm!10213 m!108591))

(assert (=> bm!10213 m!108747))

(declare-fun m!109131 () Bool)

(assert (=> b!99413 m!109131))

(assert (=> b!99421 m!108591))

(assert (=> b!99421 m!108763))

(declare-fun m!109133 () Bool)

(assert (=> b!99416 m!109133))

(assert (=> b!99424 m!108591))

(declare-fun m!109135 () Bool)

(assert (=> b!99424 m!109135))

(assert (=> b!99424 m!108761))

(assert (=> b!99424 m!108761))

(assert (=> b!99424 m!108591))

(assert (=> b!99424 m!108787))

(declare-fun m!109137 () Bool)

(assert (=> bm!10215 m!109137))

(declare-fun m!109139 () Bool)

(assert (=> b!99423 m!109139))

(assert (=> b!99409 m!109127))

(assert (=> b!99409 m!109127))

(assert (=> b!99409 m!108591))

(declare-fun m!109141 () Bool)

(assert (=> b!99409 m!109141))

(assert (=> b!99419 m!108591))

(assert (=> b!99419 m!108779))

(assert (=> bm!10159 d!26639))

(declare-fun bm!10220 () Bool)

(declare-fun call!10223 () Bool)

(assert (=> bm!10220 (= call!10223 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun c!16969 () Bool)

(declare-fun call!10224 () Bool)

(declare-fun bm!10221 () Bool)

(declare-fun lt!50121 () SeekEntryResult!257)

(assert (=> bm!10221 (= call!10224 (inRange!0 (ite c!16969 (index!3172 lt!50121) (index!3175 lt!50121)) (mask!6607 newMap!16)))))

(declare-fun b!99442 () Bool)

(declare-fun e!64784 () Bool)

(declare-fun e!64781 () Bool)

(assert (=> b!99442 (= e!64784 e!64781)))

(declare-fun c!16968 () Bool)

(assert (=> b!99442 (= c!16968 ((_ is MissingVacant!257) lt!50121))))

(declare-fun b!99443 () Bool)

(declare-fun res!49947 () Bool)

(declare-fun e!64783 () Bool)

(assert (=> b!99443 (=> (not res!49947) (not e!64783))))

(assert (=> b!99443 (= res!49947 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50121)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99443 (and (bvsge (index!3175 lt!50121) #b00000000000000000000000000000000) (bvslt (index!3175 lt!50121) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99444 () Bool)

(assert (=> b!99444 (= e!64781 ((_ is Undefined!257) lt!50121))))

(declare-fun b!99446 () Bool)

(assert (=> b!99446 (and (bvsge (index!3172 lt!50121) #b00000000000000000000000000000000) (bvslt (index!3172 lt!50121) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!49946 () Bool)

(assert (=> b!99446 (= res!49946 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!50121)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64782 () Bool)

(assert (=> b!99446 (=> (not res!49946) (not e!64782))))

(declare-fun b!99447 () Bool)

(assert (=> b!99447 (= e!64784 e!64782)))

(declare-fun res!49948 () Bool)

(assert (=> b!99447 (= res!49948 call!10224)))

(assert (=> b!99447 (=> (not res!49948) (not e!64782))))

(declare-fun b!99448 () Bool)

(assert (=> b!99448 (= e!64783 (not call!10223))))

(declare-fun b!99449 () Bool)

(assert (=> b!99449 (= e!64782 (not call!10223))))

(declare-fun d!26641 () Bool)

(assert (=> d!26641 e!64784))

(assert (=> d!26641 (= c!16969 ((_ is MissingZero!257) lt!50121))))

(assert (=> d!26641 (= lt!50121 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun lt!50120 () Unit!2998)

(declare-fun choose!612 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2998)

(assert (=> d!26641 (= lt!50120 (choose!612 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26641 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26641 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) lt!50120)))

(declare-fun b!99445 () Bool)

(declare-fun res!49949 () Bool)

(assert (=> b!99445 (=> (not res!49949) (not e!64783))))

(assert (=> b!99445 (= res!49949 call!10224)))

(assert (=> b!99445 (= e!64781 e!64783)))

(assert (= (and d!26641 c!16969) b!99447))

(assert (= (and d!26641 (not c!16969)) b!99442))

(assert (= (and b!99447 res!49948) b!99446))

(assert (= (and b!99446 res!49946) b!99449))

(assert (= (and b!99442 c!16968) b!99445))

(assert (= (and b!99442 (not c!16968)) b!99444))

(assert (= (and b!99445 res!49949) b!99443))

(assert (= (and b!99443 res!49947) b!99448))

(assert (= (or b!99447 b!99445) bm!10221))

(assert (= (or b!99449 b!99448) bm!10220))

(declare-fun m!109143 () Bool)

(assert (=> bm!10221 m!109143))

(assert (=> bm!10220 m!108591))

(assert (=> bm!10220 m!108769))

(declare-fun m!109145 () Bool)

(assert (=> b!99446 m!109145))

(declare-fun m!109147 () Bool)

(assert (=> b!99443 m!109147))

(assert (=> d!26641 m!108591))

(assert (=> d!26641 m!108747))

(assert (=> d!26641 m!108591))

(declare-fun m!109149 () Bool)

(assert (=> d!26641 m!109149))

(assert (=> d!26641 m!108865))

(assert (=> bm!10150 d!26641))

(declare-fun d!26643 () Bool)

(assert (=> d!26643 (= (apply!93 lt!49898 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4097 () Bool)

(assert (= bs!4097 d!26643))

(declare-fun m!109151 () Bool)

(assert (=> bs!4097 m!109151))

(assert (=> bs!4097 m!109151))

(declare-fun m!109153 () Bool)

(assert (=> bs!4097 m!109153))

(assert (=> b!99226 d!26643))

(assert (=> d!26569 d!26575))

(declare-fun d!26645 () Bool)

(assert (=> d!26645 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) from!355 Nil!1587)))

(assert (=> d!26645 true))

(declare-fun _$71!135 () Unit!2998)

(assert (=> d!26645 (= (choose!39 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!135)))

(declare-fun bs!4098 () Bool)

(assert (= bs!4098 d!26645))

(assert (=> bs!4098 m!108603))

(assert (=> d!26569 d!26645))

(declare-fun d!26647 () Bool)

(declare-fun e!64787 () Bool)

(assert (=> d!26647 e!64787))

(declare-fun c!16972 () Bool)

(assert (=> d!26647 (= c!16972 (and (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26647 true))

(declare-fun _$29!129 () Unit!2998)

(assert (=> d!26647 (= (choose!608 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) _$29!129)))

(declare-fun b!99454 () Bool)

(assert (=> b!99454 (= e!64787 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99455 () Bool)

(assert (=> b!99455 (= e!64787 (ite (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26647 c!16972) b!99454))

(assert (= (and d!26647 (not c!16972)) b!99455))

(assert (=> b!99454 m!108591))

(assert (=> b!99454 m!108607))

(assert (=> d!26573 d!26647))

(assert (=> d!26573 d!26583))

(declare-fun d!26649 () Bool)

(declare-fun e!64788 () Bool)

(assert (=> d!26649 e!64788))

(declare-fun res!49950 () Bool)

(assert (=> d!26649 (=> res!49950 e!64788)))

(declare-fun lt!50123 () Bool)

(assert (=> d!26649 (= res!49950 (not lt!50123))))

(declare-fun lt!50122 () Bool)

(assert (=> d!26649 (= lt!50123 lt!50122)))

(declare-fun lt!50125 () Unit!2998)

(declare-fun e!64789 () Unit!2998)

(assert (=> d!26649 (= lt!50125 e!64789)))

(declare-fun c!16973 () Bool)

(assert (=> d!26649 (= c!16973 lt!50122)))

(assert (=> d!26649 (= lt!50122 (containsKey!153 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26649 (= (contains!799 lt!49898 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50123)))

(declare-fun b!99456 () Bool)

(declare-fun lt!50124 () Unit!2998)

(assert (=> b!99456 (= e!64789 lt!50124)))

(assert (=> b!99456 (= lt!50124 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99456 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99457 () Bool)

(declare-fun Unit!3016 () Unit!2998)

(assert (=> b!99457 (= e!64789 Unit!3016)))

(declare-fun b!99458 () Bool)

(assert (=> b!99458 (= e!64788 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26649 c!16973) b!99456))

(assert (= (and d!26649 (not c!16973)) b!99457))

(assert (= (and d!26649 (not res!49950)) b!99458))

(declare-fun m!109155 () Bool)

(assert (=> d!26649 m!109155))

(declare-fun m!109157 () Bool)

(assert (=> b!99456 m!109157))

(declare-fun m!109159 () Bool)

(assert (=> b!99456 m!109159))

(assert (=> b!99456 m!109159))

(declare-fun m!109161 () Bool)

(assert (=> b!99456 m!109161))

(assert (=> b!99458 m!109159))

(assert (=> b!99458 m!109159))

(assert (=> b!99458 m!109161))

(assert (=> bm!10184 d!26649))

(declare-fun d!26651 () Bool)

(assert (=> d!26651 (= (get!1293 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99168 d!26651))

(declare-fun d!26653 () Bool)

(declare-fun e!64790 () Bool)

(assert (=> d!26653 e!64790))

(declare-fun res!49952 () Bool)

(assert (=> d!26653 (=> (not res!49952) (not e!64790))))

(declare-fun lt!50126 () ListLongMap!1517)

(assert (=> d!26653 (= res!49952 (contains!799 lt!50126 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50127 () List!1591)

(assert (=> d!26653 (= lt!50126 (ListLongMap!1518 lt!50127))))

(declare-fun lt!50128 () Unit!2998)

(declare-fun lt!50129 () Unit!2998)

(assert (=> d!26653 (= lt!50128 lt!50129)))

(assert (=> d!26653 (= (getValueByKey!149 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26653 (= lt!50129 (lemmaContainsTupThenGetReturnValue!68 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26653 (= lt!50127 (insertStrictlySorted!71 (toList!774 call!10189) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26653 (= (+!129 call!10189 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50126)))

(declare-fun b!99459 () Bool)

(declare-fun res!49951 () Bool)

(assert (=> b!99459 (=> (not res!49951) (not e!64790))))

(assert (=> b!99459 (= res!49951 (= (getValueByKey!149 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99460 () Bool)

(assert (=> b!99460 (= e!64790 (contains!801 (toList!774 lt!50126) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26653 res!49952) b!99459))

(assert (= (and b!99459 res!49951) b!99460))

(declare-fun m!109163 () Bool)

(assert (=> d!26653 m!109163))

(declare-fun m!109165 () Bool)

(assert (=> d!26653 m!109165))

(declare-fun m!109167 () Bool)

(assert (=> d!26653 m!109167))

(declare-fun m!109169 () Bool)

(assert (=> d!26653 m!109169))

(declare-fun m!109171 () Bool)

(assert (=> b!99459 m!109171))

(declare-fun m!109173 () Bool)

(assert (=> b!99460 m!109173))

(assert (=> b!99227 d!26653))

(declare-fun d!26655 () Bool)

(declare-fun e!64791 () Bool)

(assert (=> d!26655 e!64791))

(declare-fun res!49953 () Bool)

(assert (=> d!26655 (=> res!49953 e!64791)))

(declare-fun lt!50131 () Bool)

(assert (=> d!26655 (= res!49953 (not lt!50131))))

(declare-fun lt!50130 () Bool)

(assert (=> d!26655 (= lt!50131 lt!50130)))

(declare-fun lt!50133 () Unit!2998)

(declare-fun e!64792 () Unit!2998)

(assert (=> d!26655 (= lt!50133 e!64792)))

(declare-fun c!16974 () Bool)

(assert (=> d!26655 (= c!16974 lt!50130)))

(assert (=> d!26655 (= lt!50130 (containsKey!153 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26655 (= (contains!799 lt!49898 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50131)))

(declare-fun b!99461 () Bool)

(declare-fun lt!50132 () Unit!2998)

(assert (=> b!99461 (= e!64792 lt!50132)))

(assert (=> b!99461 (= lt!50132 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99461 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99462 () Bool)

(declare-fun Unit!3017 () Unit!2998)

(assert (=> b!99462 (= e!64792 Unit!3017)))

(declare-fun b!99463 () Bool)

(assert (=> b!99463 (= e!64791 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26655 c!16974) b!99461))

(assert (= (and d!26655 (not c!16974)) b!99462))

(assert (= (and d!26655 (not res!49953)) b!99463))

(declare-fun m!109175 () Bool)

(assert (=> d!26655 m!109175))

(declare-fun m!109177 () Bool)

(assert (=> b!99461 m!109177))

(assert (=> b!99461 m!109151))

(assert (=> b!99461 m!109151))

(declare-fun m!109179 () Bool)

(assert (=> b!99461 m!109179))

(assert (=> b!99463 m!109151))

(assert (=> b!99463 m!109151))

(assert (=> b!99463 m!109179))

(assert (=> bm!10186 d!26655))

(assert (=> bm!10153 d!26633))

(declare-fun d!26657 () Bool)

(assert (=> d!26657 (= (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (and (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99031 d!26657))

(declare-fun d!26659 () Bool)

(assert (=> d!26659 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50136 () Unit!2998)

(declare-fun choose!613 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2998)

(assert (=> d!26659 (= lt!50136 (choose!613 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49841 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26659 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26659 (= (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49841 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)) lt!50136)))

(declare-fun bs!4099 () Bool)

(assert (= bs!4099 d!26659))

(assert (=> bs!4099 m!108865))

(assert (=> bs!4099 m!108589))

(declare-fun m!109181 () Bool)

(assert (=> bs!4099 m!109181))

(assert (=> bs!4099 m!108589))

(declare-fun m!109183 () Bool)

(assert (=> bs!4099 m!109183))

(assert (=> bs!4099 m!108761))

(assert (=> bs!4099 m!108761))

(declare-fun m!109185 () Bool)

(assert (=> bs!4099 m!109185))

(assert (=> b!99124 d!26659))

(assert (=> bm!10162 d!26585))

(declare-fun d!26661 () Bool)

(declare-fun e!64793 () Bool)

(assert (=> d!26661 e!64793))

(declare-fun res!49955 () Bool)

(assert (=> d!26661 (=> (not res!49955) (not e!64793))))

(declare-fun lt!50137 () ListLongMap!1517)

(assert (=> d!26661 (= res!49955 (contains!799 lt!50137 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun lt!50138 () List!1591)

(assert (=> d!26661 (= lt!50137 (ListLongMap!1518 lt!50138))))

(declare-fun lt!50139 () Unit!2998)

(declare-fun lt!50140 () Unit!2998)

(assert (=> d!26661 (= lt!50139 lt!50140)))

(assert (=> d!26661 (= (getValueByKey!149 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (Some!154 (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!26661 (= lt!50140 (lemmaContainsTupThenGetReturnValue!68 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!26661 (= lt!50138 (insertStrictlySorted!71 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!26661 (= (+!129 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50137)))

(declare-fun b!99464 () Bool)

(declare-fun res!49954 () Bool)

(assert (=> b!99464 (=> (not res!49954) (not e!64793))))

(assert (=> b!99464 (= res!49954 (= (getValueByKey!149 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (Some!154 (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun b!99465 () Bool)

(assert (=> b!99465 (= e!64793 (contains!801 (toList!774 lt!50137) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (= (and d!26661 res!49955) b!99464))

(assert (= (and b!99464 res!49954) b!99465))

(declare-fun m!109187 () Bool)

(assert (=> d!26661 m!109187))

(declare-fun m!109189 () Bool)

(assert (=> d!26661 m!109189))

(declare-fun m!109191 () Bool)

(assert (=> d!26661 m!109191))

(declare-fun m!109193 () Bool)

(assert (=> d!26661 m!109193))

(declare-fun m!109195 () Bool)

(assert (=> b!99464 m!109195))

(declare-fun m!109197 () Bool)

(assert (=> b!99465 m!109197))

(assert (=> bm!10185 d!26661))

(declare-fun d!26663 () Bool)

(declare-fun e!64796 () Bool)

(assert (=> d!26663 e!64796))

(declare-fun res!49958 () Bool)

(assert (=> d!26663 (=> (not res!49958) (not e!64796))))

(assert (=> d!26663 (= res!49958 (and (bvsge (index!3173 lt!49837) #b00000000000000000000000000000000) (bvslt (index!3173 lt!49837) (size!2260 (_keys!4194 newMap!16)))))))

(declare-fun lt!50143 () Unit!2998)

(declare-fun choose!614 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) Unit!2998)

(assert (=> d!26663 (= lt!50143 (choose!614 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26663 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26663 (= (lemmaValidKeyInArrayIsInListMap!101 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (defaultEntry!2501 newMap!16)) lt!50143)))

(declare-fun b!99468 () Bool)

(assert (=> b!99468 (= e!64796 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))

(assert (= (and d!26663 res!49958) b!99468))

(declare-fun m!109199 () Bool)

(assert (=> d!26663 m!109199))

(assert (=> d!26663 m!108865))

(declare-fun m!109201 () Bool)

(assert (=> b!99468 m!109201))

(assert (=> b!99468 m!108771))

(assert (=> b!99468 m!109201))

(assert (=> b!99468 m!108771))

(declare-fun m!109203 () Bool)

(assert (=> b!99468 m!109203))

(assert (=> b!99138 d!26663))

(declare-fun d!26665 () Bool)

(declare-fun e!64799 () Bool)

(assert (=> d!26665 e!64799))

(declare-fun res!49961 () Bool)

(assert (=> d!26665 (=> (not res!49961) (not e!64799))))

(assert (=> d!26665 (= res!49961 (and (bvsge (index!3173 lt!49837) #b00000000000000000000000000000000) (bvslt (index!3173 lt!49837) (size!2261 (_values!2484 newMap!16)))))))

(declare-fun lt!50146 () Unit!2998)

(declare-fun choose!615 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2998)

(assert (=> d!26665 (= lt!50146 (choose!615 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26665 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26665 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50146)))

(declare-fun b!99471 () Bool)

(assert (=> b!99471 (= e!64799 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))))

(assert (= (and d!26665 res!49961) b!99471))

(assert (=> d!26665 m!108591))

(assert (=> d!26665 m!108589))

(declare-fun m!109205 () Bool)

(assert (=> d!26665 m!109205))

(assert (=> d!26665 m!108865))

(assert (=> b!99471 m!108761))

(assert (=> b!99471 m!108761))

(assert (=> b!99471 m!109097))

(assert (=> b!99471 m!108783))

(declare-fun m!109207 () Bool)

(assert (=> b!99471 m!109207))

(assert (=> b!99138 d!26665))

(declare-fun d!26667 () Bool)

(declare-fun e!64800 () Bool)

(assert (=> d!26667 e!64800))

(declare-fun res!49962 () Bool)

(assert (=> d!26667 (=> res!49962 e!64800)))

(declare-fun lt!50148 () Bool)

(assert (=> d!26667 (= res!49962 (not lt!50148))))

(declare-fun lt!50147 () Bool)

(assert (=> d!26667 (= lt!50148 lt!50147)))

(declare-fun lt!50150 () Unit!2998)

(declare-fun e!64801 () Unit!2998)

(assert (=> d!26667 (= lt!50150 e!64801)))

(declare-fun c!16975 () Bool)

(assert (=> d!26667 (= c!16975 lt!50147)))

(assert (=> d!26667 (= lt!50147 (containsKey!153 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26667 (= (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50148)))

(declare-fun b!99472 () Bool)

(declare-fun lt!50149 () Unit!2998)

(assert (=> b!99472 (= e!64801 lt!50149)))

(assert (=> b!99472 (= lt!50149 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99472 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99473 () Bool)

(declare-fun Unit!3018 () Unit!2998)

(assert (=> b!99473 (= e!64801 Unit!3018)))

(declare-fun b!99474 () Bool)

(assert (=> b!99474 (= e!64800 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (= (and d!26667 c!16975) b!99472))

(assert (= (and d!26667 (not c!16975)) b!99473))

(assert (= (and d!26667 (not res!49962)) b!99474))

(assert (=> d!26667 m!108591))

(declare-fun m!109209 () Bool)

(assert (=> d!26667 m!109209))

(assert (=> b!99472 m!108591))

(declare-fun m!109211 () Bool)

(assert (=> b!99472 m!109211))

(assert (=> b!99472 m!108591))

(declare-fun m!109213 () Bool)

(assert (=> b!99472 m!109213))

(assert (=> b!99472 m!109213))

(declare-fun m!109215 () Bool)

(assert (=> b!99472 m!109215))

(assert (=> b!99474 m!108591))

(assert (=> b!99474 m!109213))

(assert (=> b!99474 m!109213))

(assert (=> b!99474 m!109215))

(assert (=> b!99138 d!26667))

(assert (=> b!99138 d!26631))

(assert (=> bm!10188 d!26599))

(assert (=> d!26587 d!26583))

(declare-fun d!26669 () Bool)

(declare-fun e!64802 () Bool)

(assert (=> d!26669 e!64802))

(declare-fun res!49964 () Bool)

(assert (=> d!26669 (=> (not res!49964) (not e!64802))))

(declare-fun lt!50151 () ListLongMap!1517)

(assert (=> d!26669 (= res!49964 (contains!799 lt!50151 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50152 () List!1591)

(assert (=> d!26669 (= lt!50151 (ListLongMap!1518 lt!50152))))

(declare-fun lt!50153 () Unit!2998)

(declare-fun lt!50154 () Unit!2998)

(assert (=> d!26669 (= lt!50153 lt!50154)))

(assert (=> d!26669 (= (getValueByKey!149 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= lt!50154 (lemmaContainsTupThenGetReturnValue!68 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= lt!50152 (insertStrictlySorted!71 (toList!774 e!64614) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= (+!129 e!64614 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50151)))

(declare-fun b!99475 () Bool)

(declare-fun res!49963 () Bool)

(assert (=> b!99475 (=> (not res!49963) (not e!64802))))

(assert (=> b!99475 (= res!49963 (= (getValueByKey!149 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!99476 () Bool)

(assert (=> b!99476 (= e!64802 (contains!801 (toList!774 lt!50151) (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26669 res!49964) b!99475))

(assert (= (and b!99475 res!49963) b!99476))

(declare-fun m!109217 () Bool)

(assert (=> d!26669 m!109217))

(declare-fun m!109219 () Bool)

(assert (=> d!26669 m!109219))

(declare-fun m!109221 () Bool)

(assert (=> d!26669 m!109221))

(declare-fun m!109223 () Bool)

(assert (=> d!26669 m!109223))

(declare-fun m!109225 () Bool)

(assert (=> b!99475 m!109225))

(declare-fun m!109227 () Bool)

(assert (=> b!99476 m!109227))

(assert (=> bm!10154 d!26669))

(assert (=> b!99033 d!26657))

(declare-fun d!26671 () Bool)

(declare-fun res!49965 () Bool)

(declare-fun e!64803 () Bool)

(assert (=> d!26671 (=> res!49965 e!64803)))

(assert (=> d!26671 (= res!49965 (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26671 (= (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!64803)))

(declare-fun b!99477 () Bool)

(declare-fun e!64804 () Bool)

(assert (=> b!99477 (= e!64803 e!64804)))

(declare-fun res!49966 () Bool)

(assert (=> b!99477 (=> (not res!49966) (not e!64804))))

(assert (=> b!99477 (= res!49966 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99478 () Bool)

(assert (=> b!99478 (= e!64804 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26671 (not res!49965)) b!99477))

(assert (= (and b!99477 res!49966) b!99478))

(declare-fun m!109229 () Bool)

(assert (=> d!26671 m!109229))

(assert (=> b!99478 m!108591))

(declare-fun m!109231 () Bool)

(assert (=> b!99478 m!109231))

(assert (=> b!99012 d!26671))

(declare-fun d!26673 () Bool)

(declare-fun e!64805 () Bool)

(assert (=> d!26673 e!64805))

(declare-fun res!49967 () Bool)

(assert (=> d!26673 (=> res!49967 e!64805)))

(declare-fun lt!50156 () Bool)

(assert (=> d!26673 (= res!49967 (not lt!50156))))

(declare-fun lt!50155 () Bool)

(assert (=> d!26673 (= lt!50156 lt!50155)))

(declare-fun lt!50158 () Unit!2998)

(declare-fun e!64806 () Unit!2998)

(assert (=> d!26673 (= lt!50158 e!64806)))

(declare-fun c!16976 () Bool)

(assert (=> d!26673 (= c!16976 lt!50155)))

(assert (=> d!26673 (= lt!50155 (containsKey!153 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26673 (= (contains!799 call!10164 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50156)))

(declare-fun b!99479 () Bool)

(declare-fun lt!50157 () Unit!2998)

(assert (=> b!99479 (= e!64806 lt!50157)))

(assert (=> b!99479 (= lt!50157 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99479 (isDefined!103 (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99480 () Bool)

(declare-fun Unit!3019 () Unit!2998)

(assert (=> b!99480 (= e!64806 Unit!3019)))

(declare-fun b!99481 () Bool)

(assert (=> b!99481 (= e!64805 (isDefined!103 (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (= (and d!26673 c!16976) b!99479))

(assert (= (and d!26673 (not c!16976)) b!99480))

(assert (= (and d!26673 (not res!49967)) b!99481))

(assert (=> d!26673 m!108591))

(declare-fun m!109233 () Bool)

(assert (=> d!26673 m!109233))

(assert (=> b!99479 m!108591))

(declare-fun m!109235 () Bool)

(assert (=> b!99479 m!109235))

(assert (=> b!99479 m!108591))

(declare-fun m!109237 () Bool)

(assert (=> b!99479 m!109237))

(assert (=> b!99479 m!109237))

(declare-fun m!109239 () Bool)

(assert (=> b!99479 m!109239))

(assert (=> b!99481 m!108591))

(assert (=> b!99481 m!109237))

(assert (=> b!99481 m!109237))

(assert (=> b!99481 m!109239))

(assert (=> b!99160 d!26673))

(declare-fun d!26675 () Bool)

(declare-fun res!49968 () Bool)

(declare-fun e!64807 () Bool)

(assert (=> d!26675 (=> res!49968 e!64807)))

(assert (=> d!26675 (= res!49968 (= (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26675 (= (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64807)))

(declare-fun b!99482 () Bool)

(declare-fun e!64808 () Bool)

(assert (=> b!99482 (= e!64807 e!64808)))

(declare-fun res!49969 () Bool)

(assert (=> b!99482 (=> (not res!49969) (not e!64808))))

(assert (=> b!99482 (= res!49969 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99483 () Bool)

(assert (=> b!99483 (= e!64808 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26675 (not res!49968)) b!99482))

(assert (= (and b!99482 res!49969) b!99483))

(assert (=> d!26675 m!108993))

(assert (=> b!99483 m!108591))

(declare-fun m!109241 () Bool)

(assert (=> b!99483 m!109241))

(assert (=> bm!10151 d!26675))

(declare-fun d!26677 () Bool)

(declare-fun e!64809 () Bool)

(assert (=> d!26677 e!64809))

(declare-fun res!49971 () Bool)

(assert (=> d!26677 (=> (not res!49971) (not e!64809))))

(declare-fun lt!50159 () ListLongMap!1517)

(assert (=> d!26677 (= res!49971 (contains!799 lt!50159 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50160 () List!1591)

(assert (=> d!26677 (= lt!50159 (ListLongMap!1518 lt!50160))))

(declare-fun lt!50161 () Unit!2998)

(declare-fun lt!50162 () Unit!2998)

(assert (=> d!26677 (= lt!50161 lt!50162)))

(assert (=> d!26677 (= (getValueByKey!149 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26677 (= lt!50162 (lemmaContainsTupThenGetReturnValue!68 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26677 (= lt!50160 (insertStrictlySorted!71 (toList!774 call!10158) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26677 (= (+!129 call!10158 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50159)))

(declare-fun b!99484 () Bool)

(declare-fun res!49970 () Bool)

(assert (=> b!99484 (=> (not res!49970) (not e!64809))))

(assert (=> b!99484 (= res!49970 (= (getValueByKey!149 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99485 () Bool)

(assert (=> b!99485 (= e!64809 (contains!801 (toList!774 lt!50159) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26677 res!49971) b!99484))

(assert (= (and b!99484 res!49970) b!99485))

(declare-fun m!109243 () Bool)

(assert (=> d!26677 m!109243))

(declare-fun m!109245 () Bool)

(assert (=> d!26677 m!109245))

(declare-fun m!109247 () Bool)

(assert (=> d!26677 m!109247))

(declare-fun m!109249 () Bool)

(assert (=> d!26677 m!109249))

(declare-fun m!109251 () Bool)

(assert (=> b!99484 m!109251))

(declare-fun m!109253 () Bool)

(assert (=> b!99485 m!109253))

(assert (=> b!99146 d!26677))

(declare-fun d!26679 () Bool)

(declare-fun res!49973 () Bool)

(declare-fun e!64811 () Bool)

(assert (=> d!26679 (=> res!49973 e!64811)))

(assert (=> d!26679 (= res!49973 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26679 (= (arrayNoDuplicates!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 Nil!1587) e!64811)))

(declare-fun bm!10222 () Bool)

(declare-fun call!10225 () Bool)

(declare-fun c!16977 () Bool)

(assert (=> bm!10222 (= call!10225 (arrayNoDuplicates!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16977 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) Nil!1587) Nil!1587)))))

(declare-fun b!99486 () Bool)

(declare-fun e!64812 () Bool)

(assert (=> b!99486 (= e!64812 call!10225)))

(declare-fun b!99487 () Bool)

(declare-fun e!64813 () Bool)

(assert (=> b!99487 (= e!64813 (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99488 () Bool)

(declare-fun e!64810 () Bool)

(assert (=> b!99488 (= e!64811 e!64810)))

(declare-fun res!49974 () Bool)

(assert (=> b!99488 (=> (not res!49974) (not e!64810))))

(assert (=> b!99488 (= res!49974 (not e!64813))))

(declare-fun res!49972 () Bool)

(assert (=> b!99488 (=> (not res!49972) (not e!64813))))

(assert (=> b!99488 (= res!49972 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99489 () Bool)

(assert (=> b!99489 (= e!64812 call!10225)))

(declare-fun b!99490 () Bool)

(assert (=> b!99490 (= e!64810 e!64812)))

(assert (=> b!99490 (= c!16977 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26679 (not res!49973)) b!99488))

(assert (= (and b!99488 res!49972) b!99487))

(assert (= (and b!99488 res!49974) b!99490))

(assert (= (and b!99490 c!16977) b!99489))

(assert (= (and b!99490 (not c!16977)) b!99486))

(assert (= (or b!99489 b!99486) bm!10222))

(assert (=> bm!10222 m!108993))

(declare-fun m!109255 () Bool)

(assert (=> bm!10222 m!109255))

(assert (=> b!99487 m!108993))

(assert (=> b!99487 m!108993))

(declare-fun m!109257 () Bool)

(assert (=> b!99487 m!109257))

(assert (=> b!99488 m!108993))

(assert (=> b!99488 m!108993))

(assert (=> b!99488 m!109001))

(assert (=> b!99490 m!108993))

(assert (=> b!99490 m!108993))

(assert (=> b!99490 m!109001))

(assert (=> b!99006 d!26679))

(declare-fun d!26681 () Bool)

(assert (=> d!26681 (= (apply!93 lt!49898 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1294 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4100 () Bool)

(assert (= bs!4100 d!26681))

(assert (=> bs!4100 m!108725))

(assert (=> bs!4100 m!109077))

(assert (=> bs!4100 m!109077))

(declare-fun m!109259 () Bool)

(assert (=> bs!4100 m!109259))

(assert (=> b!99223 d!26681))

(declare-fun d!26683 () Bool)

(declare-fun c!16978 () Bool)

(assert (=> d!26683 (= c!16978 ((_ is ValueCellFull!974) (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64814 () V!3161)

(assert (=> d!26683 (= (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64814)))

(declare-fun b!99491 () Bool)

(assert (=> b!99491 (= e!64814 (get!1292 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99492 () Bool)

(assert (=> b!99492 (= e!64814 (get!1293 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26683 c!16978) b!99491))

(assert (= (and d!26683 (not c!16978)) b!99492))

(assert (=> b!99491 m!108805))

(assert (=> b!99491 m!108587))

(declare-fun m!109261 () Bool)

(assert (=> b!99491 m!109261))

(assert (=> b!99492 m!108805))

(assert (=> b!99492 m!108587))

(declare-fun m!109263 () Bool)

(assert (=> b!99492 m!109263))

(assert (=> b!99223 d!26683))

(declare-fun d!26685 () Bool)

(declare-fun res!49976 () Bool)

(declare-fun e!64816 () Bool)

(assert (=> d!26685 (=> res!49976 e!64816)))

(assert (=> d!26685 (= res!49976 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26685 (= (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) e!64816)))

(declare-fun bm!10223 () Bool)

(declare-fun call!10226 () Bool)

(declare-fun c!16979 () Bool)

(assert (=> bm!10223 (= call!10226 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16979 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587))))))

(declare-fun b!99493 () Bool)

(declare-fun e!64817 () Bool)

(assert (=> b!99493 (= e!64817 call!10226)))

(declare-fun b!99494 () Bool)

(declare-fun e!64818 () Bool)

(assert (=> b!99494 (= e!64818 (contains!800 (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99495 () Bool)

(declare-fun e!64815 () Bool)

(assert (=> b!99495 (= e!64816 e!64815)))

(declare-fun res!49977 () Bool)

(assert (=> b!99495 (=> (not res!49977) (not e!64815))))

(assert (=> b!99495 (= res!49977 (not e!64818))))

(declare-fun res!49975 () Bool)

(assert (=> b!99495 (=> (not res!49975) (not e!64818))))

(assert (=> b!99495 (= res!49975 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99496 () Bool)

(assert (=> b!99496 (= e!64817 call!10226)))

(declare-fun b!99497 () Bool)

(assert (=> b!99497 (= e!64815 e!64817)))

(assert (=> b!99497 (= c!16979 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26685 (not res!49976)) b!99495))

(assert (= (and b!99495 res!49975) b!99494))

(assert (= (and b!99495 res!49977) b!99497))

(assert (= (and b!99497 c!16979) b!99496))

(assert (= (and b!99497 (not c!16979)) b!99493))

(assert (= (or b!99496 b!99493) bm!10223))

(declare-fun m!109265 () Bool)

(assert (=> bm!10223 m!109265))

(declare-fun m!109267 () Bool)

(assert (=> bm!10223 m!109267))

(assert (=> b!99494 m!109265))

(assert (=> b!99494 m!109265))

(declare-fun m!109269 () Bool)

(assert (=> b!99494 m!109269))

(assert (=> b!99495 m!109265))

(assert (=> b!99495 m!109265))

(declare-fun m!109271 () Bool)

(assert (=> b!99495 m!109271))

(assert (=> b!99497 m!109265))

(assert (=> b!99497 m!109265))

(assert (=> b!99497 m!109271))

(assert (=> bm!10097 d!26685))

(declare-fun d!26687 () Bool)

(assert (=> d!26687 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50165 () Unit!2998)

(declare-fun choose!616 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2998)

(assert (=> d!26687 (= lt!50165 (choose!616 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26687 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26687 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50165)))

(declare-fun bs!4101 () Bool)

(assert (= bs!4101 d!26687))

(assert (=> bs!4101 m!108761))

(declare-fun m!109273 () Bool)

(assert (=> bs!4101 m!109273))

(assert (=> bs!4101 m!108589))

(declare-fun m!109275 () Bool)

(assert (=> bs!4101 m!109275))

(assert (=> bs!4101 m!108589))

(declare-fun m!109277 () Bool)

(assert (=> bs!4101 m!109277))

(assert (=> bs!4101 m!108761))

(assert (=> bs!4101 m!108865))

(assert (=> b!99123 d!26687))

(declare-fun d!26689 () Bool)

(declare-fun lt!50168 () (_ BitVec 32))

(assert (=> d!26689 (and (bvsge lt!50168 #b00000000000000000000000000000000) (bvsle lt!50168 (bvsub (size!2260 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64823 () (_ BitVec 32))

(assert (=> d!26689 (= lt!50168 e!64823)))

(declare-fun c!16984 () Bool)

(assert (=> d!26689 (= c!16984 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26689 (and (bvsle #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2260 (_keys!4194 newMap!16)) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26689 (= (arrayCountValidKeys!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) lt!50168)))

(declare-fun b!99506 () Bool)

(declare-fun e!64824 () (_ BitVec 32))

(declare-fun call!10229 () (_ BitVec 32))

(assert (=> b!99506 (= e!64824 call!10229)))

(declare-fun b!99507 () Bool)

(assert (=> b!99507 (= e!64823 #b00000000000000000000000000000000)))

(declare-fun b!99508 () Bool)

(assert (=> b!99508 (= e!64824 (bvadd #b00000000000000000000000000000001 call!10229))))

(declare-fun b!99509 () Bool)

(assert (=> b!99509 (= e!64823 e!64824)))

(declare-fun c!16985 () Bool)

(assert (=> b!99509 (= c!16985 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10226 () Bool)

(assert (=> bm!10226 (= call!10229 (arrayCountValidKeys!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (= (and d!26689 c!16984) b!99507))

(assert (= (and d!26689 (not c!16984)) b!99509))

(assert (= (and b!99509 c!16985) b!99508))

(assert (= (and b!99509 (not c!16985)) b!99506))

(assert (= (or b!99508 b!99506) bm!10226))

(assert (=> b!99509 m!108993))

(assert (=> b!99509 m!108993))

(assert (=> b!99509 m!109001))

(declare-fun m!109279 () Bool)

(assert (=> bm!10226 m!109279))

(assert (=> b!99004 d!26689))

(declare-fun lt!50170 () ListLongMap!1517)

(declare-fun e!64827 () Bool)

(declare-fun b!99510 () Bool)

(assert (=> b!99510 (= e!64827 (= (apply!93 lt!50170 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))

(declare-fun bm!10227 () Bool)

(declare-fun call!10236 () Bool)

(assert (=> bm!10227 (= call!10236 (contains!799 lt!50170 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99511 () Bool)

(declare-fun res!49986 () Bool)

(declare-fun e!64833 () Bool)

(assert (=> b!99511 (=> (not res!49986) (not e!64833))))

(declare-fun e!64826 () Bool)

(assert (=> b!99511 (= res!49986 e!64826)))

(declare-fun c!16986 () Bool)

(assert (=> b!99511 (= c!16986 (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99512 () Bool)

(declare-fun e!64831 () Bool)

(assert (=> b!99512 (= e!64831 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99513 () Bool)

(declare-fun e!64832 () Bool)

(declare-fun e!64837 () Bool)

(assert (=> b!99513 (= e!64832 e!64837)))

(declare-fun res!49984 () Bool)

(assert (=> b!99513 (=> (not res!49984) (not e!64837))))

(assert (=> b!99513 (= res!49984 (contains!799 lt!50170 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99513 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99514 () Bool)

(declare-fun e!64829 () ListLongMap!1517)

(declare-fun call!10230 () ListLongMap!1517)

(assert (=> b!99514 (= e!64829 call!10230)))

(declare-fun b!99515 () Bool)

(declare-fun e!64835 () Bool)

(assert (=> b!99515 (= e!64835 (not call!10236))))

(declare-fun b!99516 () Bool)

(declare-fun e!64830 () ListLongMap!1517)

(assert (=> b!99516 (= e!64830 e!64829)))

(declare-fun c!16988 () Bool)

(assert (=> b!99516 (= c!16988 (and (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99517 () Bool)

(declare-fun c!16987 () Bool)

(assert (=> b!99517 (= c!16987 (and (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64834 () ListLongMap!1517)

(assert (=> b!99517 (= e!64829 e!64834)))

(declare-fun b!99518 () Bool)

(assert (=> b!99518 (= e!64834 call!10230)))

(declare-fun d!26691 () Bool)

(assert (=> d!26691 e!64833))

(declare-fun res!49985 () Bool)

(assert (=> d!26691 (=> (not res!49985) (not e!64833))))

(assert (=> d!26691 (= res!49985 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50172 () ListLongMap!1517)

(assert (=> d!26691 (= lt!50170 lt!50172)))

(declare-fun lt!50183 () Unit!2998)

(declare-fun e!64825 () Unit!2998)

(assert (=> d!26691 (= lt!50183 e!64825)))

(declare-fun c!16990 () Bool)

(declare-fun e!64828 () Bool)

(assert (=> d!26691 (= c!16990 e!64828)))

(declare-fun res!49978 () Bool)

(assert (=> d!26691 (=> (not res!49978) (not e!64828))))

(assert (=> d!26691 (= res!49978 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26691 (= lt!50172 e!64830)))

(declare-fun c!16989 () Bool)

(assert (=> d!26691 (= c!16989 (and (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26691 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26691 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50170)))

(declare-fun b!99519 () Bool)

(declare-fun lt!50173 () Unit!2998)

(assert (=> b!99519 (= e!64825 lt!50173)))

(declare-fun lt!50180 () ListLongMap!1517)

(assert (=> b!99519 (= lt!50180 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50189 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50189 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50187 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50187 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50178 () Unit!2998)

(assert (=> b!99519 (= lt!50178 (addStillContains!69 lt!50180 lt!50189 (zeroValue!2382 newMap!16) lt!50187))))

(assert (=> b!99519 (contains!799 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) lt!50187)))

(declare-fun lt!50182 () Unit!2998)

(assert (=> b!99519 (= lt!50182 lt!50178)))

(declare-fun lt!50175 () ListLongMap!1517)

(assert (=> b!99519 (= lt!50175 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50188 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50188 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50184 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50184 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50174 () Unit!2998)

(assert (=> b!99519 (= lt!50174 (addApplyDifferent!69 lt!50175 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50184))))

(assert (=> b!99519 (= (apply!93 (+!129 lt!50175 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50184) (apply!93 lt!50175 lt!50184))))

(declare-fun lt!50190 () Unit!2998)

(assert (=> b!99519 (= lt!50190 lt!50174)))

(declare-fun lt!50176 () ListLongMap!1517)

(assert (=> b!99519 (= lt!50176 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50186 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50186 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50179 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50179 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50181 () Unit!2998)

(assert (=> b!99519 (= lt!50181 (addApplyDifferent!69 lt!50176 lt!50186 (zeroValue!2382 newMap!16) lt!50179))))

(assert (=> b!99519 (= (apply!93 (+!129 lt!50176 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) lt!50179) (apply!93 lt!50176 lt!50179))))

(declare-fun lt!50169 () Unit!2998)

(assert (=> b!99519 (= lt!50169 lt!50181)))

(declare-fun lt!50185 () ListLongMap!1517)

(assert (=> b!99519 (= lt!50185 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50171 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50171 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50177 () (_ BitVec 64))

(assert (=> b!99519 (= lt!50177 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99519 (= lt!50173 (addApplyDifferent!69 lt!50185 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50177))))

(assert (=> b!99519 (= (apply!93 (+!129 lt!50185 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50177) (apply!93 lt!50185 lt!50177))))

(declare-fun b!99520 () Bool)

(declare-fun call!10233 () Bool)

(assert (=> b!99520 (= e!64826 (not call!10233))))

(declare-fun b!99521 () Bool)

(declare-fun e!64836 () Bool)

(assert (=> b!99521 (= e!64826 e!64836)))

(declare-fun res!49980 () Bool)

(assert (=> b!99521 (= res!49980 call!10233)))

(assert (=> b!99521 (=> (not res!49980) (not e!64836))))

(declare-fun b!99522 () Bool)

(assert (=> b!99522 (= e!64837 (= (apply!93 lt!50170 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99522 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831))))))

(assert (=> b!99522 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10232 () ListLongMap!1517)

(declare-fun call!10234 () ListLongMap!1517)

(declare-fun call!10231 () ListLongMap!1517)

(declare-fun call!10235 () ListLongMap!1517)

(declare-fun bm!10228 () Bool)

(assert (=> bm!10228 (= call!10232 (+!129 (ite c!16989 call!10234 (ite c!16988 call!10235 call!10231)) (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun b!99523 () Bool)

(assert (=> b!99523 (= e!64835 e!64827)))

(declare-fun res!49982 () Bool)

(assert (=> b!99523 (= res!49982 call!10236)))

(assert (=> b!99523 (=> (not res!49982) (not e!64827))))

(declare-fun bm!10229 () Bool)

(assert (=> bm!10229 (= call!10233 (contains!799 lt!50170 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10230 () Bool)

(assert (=> bm!10230 (= call!10230 call!10232)))

(declare-fun bm!10231 () Bool)

(assert (=> bm!10231 (= call!10234 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99524 () Bool)

(declare-fun Unit!3020 () Unit!2998)

(assert (=> b!99524 (= e!64825 Unit!3020)))

(declare-fun b!99525 () Bool)

(assert (=> b!99525 (= e!64836 (= (apply!93 lt!50170 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10232 () Bool)

(assert (=> bm!10232 (= call!10231 call!10235)))

(declare-fun b!99526 () Bool)

(assert (=> b!99526 (= e!64830 (+!129 call!10232 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(declare-fun b!99527 () Bool)

(assert (=> b!99527 (= e!64828 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99528 () Bool)

(declare-fun res!49983 () Bool)

(assert (=> b!99528 (=> (not res!49983) (not e!64833))))

(assert (=> b!99528 (= res!49983 e!64832)))

(declare-fun res!49979 () Bool)

(assert (=> b!99528 (=> res!49979 e!64832)))

(assert (=> b!99528 (= res!49979 (not e!64831))))

(declare-fun res!49981 () Bool)

(assert (=> b!99528 (=> (not res!49981) (not e!64831))))

(assert (=> b!99528 (= res!49981 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10233 () Bool)

(assert (=> bm!10233 (= call!10235 call!10234)))

(declare-fun b!99529 () Bool)

(assert (=> b!99529 (= e!64834 call!10231)))

(declare-fun b!99530 () Bool)

(assert (=> b!99530 (= e!64833 e!64835)))

(declare-fun c!16991 () Bool)

(assert (=> b!99530 (= c!16991 (not (= (bvand (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26691 c!16989) b!99526))

(assert (= (and d!26691 (not c!16989)) b!99516))

(assert (= (and b!99516 c!16988) b!99514))

(assert (= (and b!99516 (not c!16988)) b!99517))

(assert (= (and b!99517 c!16987) b!99518))

(assert (= (and b!99517 (not c!16987)) b!99529))

(assert (= (or b!99518 b!99529) bm!10232))

(assert (= (or b!99514 bm!10232) bm!10233))

(assert (= (or b!99514 b!99518) bm!10230))

(assert (= (or b!99526 bm!10233) bm!10231))

(assert (= (or b!99526 bm!10230) bm!10228))

(assert (= (and d!26691 res!49978) b!99527))

(assert (= (and d!26691 c!16990) b!99519))

(assert (= (and d!26691 (not c!16990)) b!99524))

(assert (= (and d!26691 res!49985) b!99528))

(assert (= (and b!99528 res!49981) b!99512))

(assert (= (and b!99528 (not res!49979)) b!99513))

(assert (= (and b!99513 res!49984) b!99522))

(assert (= (and b!99528 res!49983) b!99511))

(assert (= (and b!99511 c!16986) b!99521))

(assert (= (and b!99511 (not c!16986)) b!99520))

(assert (= (and b!99521 res!49980) b!99525))

(assert (= (or b!99521 b!99520) bm!10229))

(assert (= (and b!99511 res!49986) b!99530))

(assert (= (and b!99530 c!16991) b!99523))

(assert (= (and b!99530 (not c!16991)) b!99515))

(assert (= (and b!99523 res!49982) b!99510))

(assert (= (or b!99523 b!99515) bm!10227))

(declare-fun b_lambda!4425 () Bool)

(assert (=> (not b_lambda!4425) (not b!99522)))

(assert (=> b!99522 t!5567))

(declare-fun b_and!6105 () Bool)

(assert (= b_and!6101 (and (=> t!5567 result!3299) b_and!6105)))

(assert (=> b!99522 t!5569))

(declare-fun b_and!6107 () Bool)

(assert (= b_and!6103 (and (=> t!5569 result!3301) b_and!6107)))

(assert (=> b!99522 m!108993))

(declare-fun m!109281 () Bool)

(assert (=> b!99522 m!109281))

(assert (=> b!99522 m!109007))

(assert (=> b!99522 m!108993))

(declare-fun m!109283 () Bool)

(assert (=> b!99522 m!109283))

(assert (=> b!99522 m!109281))

(assert (=> b!99522 m!109007))

(declare-fun m!109285 () Bool)

(assert (=> b!99522 m!109285))

(assert (=> b!99512 m!108993))

(assert (=> b!99512 m!108993))

(assert (=> b!99512 m!109001))

(declare-fun m!109287 () Bool)

(assert (=> bm!10227 m!109287))

(assert (=> b!99513 m!108993))

(assert (=> b!99513 m!108993))

(declare-fun m!109289 () Bool)

(assert (=> b!99513 m!109289))

(declare-fun m!109291 () Bool)

(assert (=> b!99526 m!109291))

(declare-fun m!109293 () Bool)

(assert (=> bm!10229 m!109293))

(declare-fun m!109295 () Bool)

(assert (=> bm!10231 m!109295))

(assert (=> d!26691 m!108865))

(declare-fun m!109297 () Bool)

(assert (=> bm!10228 m!109297))

(assert (=> b!99527 m!108993))

(assert (=> b!99527 m!108993))

(assert (=> b!99527 m!109001))

(declare-fun m!109299 () Bool)

(assert (=> b!99525 m!109299))

(declare-fun m!109301 () Bool)

(assert (=> b!99519 m!109301))

(declare-fun m!109303 () Bool)

(assert (=> b!99519 m!109303))

(assert (=> b!99519 m!108993))

(declare-fun m!109305 () Bool)

(assert (=> b!99519 m!109305))

(declare-fun m!109307 () Bool)

(assert (=> b!99519 m!109307))

(declare-fun m!109309 () Bool)

(assert (=> b!99519 m!109309))

(declare-fun m!109311 () Bool)

(assert (=> b!99519 m!109311))

(declare-fun m!109313 () Bool)

(assert (=> b!99519 m!109313))

(declare-fun m!109315 () Bool)

(assert (=> b!99519 m!109315))

(declare-fun m!109317 () Bool)

(assert (=> b!99519 m!109317))

(assert (=> b!99519 m!109305))

(declare-fun m!109319 () Bool)

(assert (=> b!99519 m!109319))

(declare-fun m!109321 () Bool)

(assert (=> b!99519 m!109321))

(declare-fun m!109323 () Bool)

(assert (=> b!99519 m!109323))

(assert (=> b!99519 m!109311))

(assert (=> b!99519 m!109317))

(declare-fun m!109325 () Bool)

(assert (=> b!99519 m!109325))

(assert (=> b!99519 m!109295))

(declare-fun m!109327 () Bool)

(assert (=> b!99519 m!109327))

(assert (=> b!99519 m!109315))

(declare-fun m!109329 () Bool)

(assert (=> b!99519 m!109329))

(declare-fun m!109331 () Bool)

(assert (=> b!99510 m!109331))

(assert (=> bm!10152 d!26691))

(declare-fun b!99531 () Bool)

(declare-fun e!64840 () Bool)

(declare-fun lt!50192 () ListLongMap!1517)

(assert (=> b!99531 (= e!64840 (= (apply!93 lt!50192 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10234 () Bool)

(declare-fun call!10243 () Bool)

(assert (=> bm!10234 (= call!10243 (contains!799 lt!50192 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99532 () Bool)

(declare-fun res!49995 () Bool)

(declare-fun e!64846 () Bool)

(assert (=> b!99532 (=> (not res!49995) (not e!64846))))

(declare-fun e!64839 () Bool)

(assert (=> b!99532 (= res!49995 e!64839)))

(declare-fun c!16992 () Bool)

(assert (=> b!99532 (= c!16992 (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99533 () Bool)

(declare-fun e!64844 () Bool)

(assert (=> b!99533 (= e!64844 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99534 () Bool)

(declare-fun e!64845 () Bool)

(declare-fun e!64850 () Bool)

(assert (=> b!99534 (= e!64845 e!64850)))

(declare-fun res!49993 () Bool)

(assert (=> b!99534 (=> (not res!49993) (not e!64850))))

(assert (=> b!99534 (= res!49993 (contains!799 lt!50192 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99534 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99535 () Bool)

(declare-fun e!64842 () ListLongMap!1517)

(declare-fun call!10237 () ListLongMap!1517)

(assert (=> b!99535 (= e!64842 call!10237)))

(declare-fun b!99536 () Bool)

(declare-fun e!64848 () Bool)

(assert (=> b!99536 (= e!64848 (not call!10243))))

(declare-fun b!99537 () Bool)

(declare-fun e!64843 () ListLongMap!1517)

(assert (=> b!99537 (= e!64843 e!64842)))

(declare-fun c!16994 () Bool)

(assert (=> b!99537 (= c!16994 (and (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99538 () Bool)

(declare-fun c!16993 () Bool)

(assert (=> b!99538 (= c!16993 (and (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64847 () ListLongMap!1517)

(assert (=> b!99538 (= e!64842 e!64847)))

(declare-fun b!99539 () Bool)

(assert (=> b!99539 (= e!64847 call!10237)))

(declare-fun d!26693 () Bool)

(assert (=> d!26693 e!64846))

(declare-fun res!49994 () Bool)

(assert (=> d!26693 (=> (not res!49994) (not e!64846))))

(assert (=> d!26693 (= res!49994 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50194 () ListLongMap!1517)

(assert (=> d!26693 (= lt!50192 lt!50194)))

(declare-fun lt!50205 () Unit!2998)

(declare-fun e!64838 () Unit!2998)

(assert (=> d!26693 (= lt!50205 e!64838)))

(declare-fun c!16996 () Bool)

(declare-fun e!64841 () Bool)

(assert (=> d!26693 (= c!16996 e!64841)))

(declare-fun res!49987 () Bool)

(assert (=> d!26693 (=> (not res!49987) (not e!64841))))

(assert (=> d!26693 (= res!49987 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26693 (= lt!50194 e!64843)))

(declare-fun c!16995 () Bool)

(assert (=> d!26693 (= c!16995 (and (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26693 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26693 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50192)))

(declare-fun b!99540 () Bool)

(declare-fun lt!50195 () Unit!2998)

(assert (=> b!99540 (= e!64838 lt!50195)))

(declare-fun lt!50202 () ListLongMap!1517)

(assert (=> b!99540 (= lt!50202 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50211 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50211 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50209 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50209 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50200 () Unit!2998)

(assert (=> b!99540 (= lt!50200 (addStillContains!69 lt!50202 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50209))))

(assert (=> b!99540 (contains!799 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50209)))

(declare-fun lt!50204 () Unit!2998)

(assert (=> b!99540 (= lt!50204 lt!50200)))

(declare-fun lt!50197 () ListLongMap!1517)

(assert (=> b!99540 (= lt!50197 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50210 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50210 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50206 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50206 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50196 () Unit!2998)

(assert (=> b!99540 (= lt!50196 (addApplyDifferent!69 lt!50197 lt!50210 (minValue!2382 newMap!16) lt!50206))))

(assert (=> b!99540 (= (apply!93 (+!129 lt!50197 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) lt!50206) (apply!93 lt!50197 lt!50206))))

(declare-fun lt!50212 () Unit!2998)

(assert (=> b!99540 (= lt!50212 lt!50196)))

(declare-fun lt!50198 () ListLongMap!1517)

(assert (=> b!99540 (= lt!50198 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50208 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50208 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50201 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50201 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50203 () Unit!2998)

(assert (=> b!99540 (= lt!50203 (addApplyDifferent!69 lt!50198 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50201))))

(assert (=> b!99540 (= (apply!93 (+!129 lt!50198 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50201) (apply!93 lt!50198 lt!50201))))

(declare-fun lt!50191 () Unit!2998)

(assert (=> b!99540 (= lt!50191 lt!50203)))

(declare-fun lt!50207 () ListLongMap!1517)

(assert (=> b!99540 (= lt!50207 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50193 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50193 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50199 () (_ BitVec 64))

(assert (=> b!99540 (= lt!50199 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99540 (= lt!50195 (addApplyDifferent!69 lt!50207 lt!50193 (minValue!2382 newMap!16) lt!50199))))

(assert (=> b!99540 (= (apply!93 (+!129 lt!50207 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) lt!50199) (apply!93 lt!50207 lt!50199))))

(declare-fun b!99541 () Bool)

(declare-fun call!10240 () Bool)

(assert (=> b!99541 (= e!64839 (not call!10240))))

(declare-fun b!99542 () Bool)

(declare-fun e!64849 () Bool)

(assert (=> b!99542 (= e!64839 e!64849)))

(declare-fun res!49989 () Bool)

(assert (=> b!99542 (= res!49989 call!10240)))

(assert (=> b!99542 (=> (not res!49989) (not e!64849))))

(declare-fun b!99543 () Bool)

(assert (=> b!99543 (= e!64850 (= (apply!93 lt!50192 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99543 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))))))))

(assert (=> b!99543 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10241 () ListLongMap!1517)

(declare-fun call!10239 () ListLongMap!1517)

(declare-fun call!10238 () ListLongMap!1517)

(declare-fun bm!10235 () Bool)

(declare-fun call!10242 () ListLongMap!1517)

(assert (=> bm!10235 (= call!10239 (+!129 (ite c!16995 call!10241 (ite c!16994 call!10242 call!10238)) (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!99544 () Bool)

(assert (=> b!99544 (= e!64848 e!64840)))

(declare-fun res!49991 () Bool)

(assert (=> b!99544 (= res!49991 call!10243)))

(assert (=> b!99544 (=> (not res!49991) (not e!64840))))

(declare-fun bm!10236 () Bool)

(assert (=> bm!10236 (= call!10240 (contains!799 lt!50192 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10237 () Bool)

(assert (=> bm!10237 (= call!10237 call!10239)))

(declare-fun bm!10238 () Bool)

(assert (=> bm!10238 (= call!10241 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99545 () Bool)

(declare-fun Unit!3021 () Unit!2998)

(assert (=> b!99545 (= e!64838 Unit!3021)))

(declare-fun b!99546 () Bool)

(assert (=> b!99546 (= e!64849 (= (apply!93 lt!50192 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))

(declare-fun bm!10239 () Bool)

(assert (=> bm!10239 (= call!10238 call!10242)))

(declare-fun b!99547 () Bool)

(assert (=> b!99547 (= e!64843 (+!129 call!10239 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99548 () Bool)

(assert (=> b!99548 (= e!64841 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99549 () Bool)

(declare-fun res!49992 () Bool)

(assert (=> b!99549 (=> (not res!49992) (not e!64846))))

(assert (=> b!99549 (= res!49992 e!64845)))

(declare-fun res!49988 () Bool)

(assert (=> b!99549 (=> res!49988 e!64845)))

(assert (=> b!99549 (= res!49988 (not e!64844))))

(declare-fun res!49990 () Bool)

(assert (=> b!99549 (=> (not res!49990) (not e!64844))))

(assert (=> b!99549 (= res!49990 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10240 () Bool)

(assert (=> bm!10240 (= call!10242 call!10241)))

(declare-fun b!99550 () Bool)

(assert (=> b!99550 (= e!64847 call!10238)))

(declare-fun b!99551 () Bool)

(assert (=> b!99551 (= e!64846 e!64848)))

(declare-fun c!16997 () Bool)

(assert (=> b!99551 (= c!16997 (not (= (bvand (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26693 c!16995) b!99547))

(assert (= (and d!26693 (not c!16995)) b!99537))

(assert (= (and b!99537 c!16994) b!99535))

(assert (= (and b!99537 (not c!16994)) b!99538))

(assert (= (and b!99538 c!16993) b!99539))

(assert (= (and b!99538 (not c!16993)) b!99550))

(assert (= (or b!99539 b!99550) bm!10239))

(assert (= (or b!99535 bm!10239) bm!10240))

(assert (= (or b!99535 b!99539) bm!10237))

(assert (= (or b!99547 bm!10240) bm!10238))

(assert (= (or b!99547 bm!10237) bm!10235))

(assert (= (and d!26693 res!49987) b!99548))

(assert (= (and d!26693 c!16996) b!99540))

(assert (= (and d!26693 (not c!16996)) b!99545))

(assert (= (and d!26693 res!49994) b!99549))

(assert (= (and b!99549 res!49990) b!99533))

(assert (= (and b!99549 (not res!49988)) b!99534))

(assert (= (and b!99534 res!49993) b!99543))

(assert (= (and b!99549 res!49992) b!99532))

(assert (= (and b!99532 c!16992) b!99542))

(assert (= (and b!99532 (not c!16992)) b!99541))

(assert (= (and b!99542 res!49989) b!99546))

(assert (= (or b!99542 b!99541) bm!10236))

(assert (= (and b!99532 res!49995) b!99551))

(assert (= (and b!99551 c!16997) b!99544))

(assert (= (and b!99551 (not c!16997)) b!99536))

(assert (= (and b!99544 res!49991) b!99531))

(assert (= (or b!99544 b!99536) bm!10234))

(declare-fun b_lambda!4427 () Bool)

(assert (=> (not b_lambda!4427) (not b!99543)))

(assert (=> b!99543 t!5567))

(declare-fun b_and!6109 () Bool)

(assert (= b_and!6105 (and (=> t!5567 result!3299) b_and!6109)))

(assert (=> b!99543 t!5569))

(declare-fun b_and!6111 () Bool)

(assert (= b_and!6107 (and (=> t!5569 result!3301) b_and!6111)))

(assert (=> b!99543 m!108993))

(declare-fun m!109333 () Bool)

(assert (=> b!99543 m!109333))

(assert (=> b!99543 m!109007))

(assert (=> b!99543 m!108993))

(declare-fun m!109335 () Bool)

(assert (=> b!99543 m!109335))

(assert (=> b!99543 m!109333))

(assert (=> b!99543 m!109007))

(declare-fun m!109337 () Bool)

(assert (=> b!99543 m!109337))

(assert (=> b!99533 m!108993))

(assert (=> b!99533 m!108993))

(assert (=> b!99533 m!109001))

(declare-fun m!109339 () Bool)

(assert (=> bm!10234 m!109339))

(assert (=> b!99534 m!108993))

(assert (=> b!99534 m!108993))

(declare-fun m!109341 () Bool)

(assert (=> b!99534 m!109341))

(declare-fun m!109343 () Bool)

(assert (=> b!99547 m!109343))

(declare-fun m!109345 () Bool)

(assert (=> bm!10236 m!109345))

(declare-fun m!109347 () Bool)

(assert (=> bm!10238 m!109347))

(assert (=> d!26693 m!108865))

(declare-fun m!109349 () Bool)

(assert (=> bm!10235 m!109349))

(assert (=> b!99548 m!108993))

(assert (=> b!99548 m!108993))

(assert (=> b!99548 m!109001))

(declare-fun m!109351 () Bool)

(assert (=> b!99546 m!109351))

(declare-fun m!109353 () Bool)

(assert (=> b!99540 m!109353))

(declare-fun m!109355 () Bool)

(assert (=> b!99540 m!109355))

(assert (=> b!99540 m!108993))

(declare-fun m!109357 () Bool)

(assert (=> b!99540 m!109357))

(declare-fun m!109359 () Bool)

(assert (=> b!99540 m!109359))

(declare-fun m!109361 () Bool)

(assert (=> b!99540 m!109361))

(declare-fun m!109363 () Bool)

(assert (=> b!99540 m!109363))

(declare-fun m!109365 () Bool)

(assert (=> b!99540 m!109365))

(declare-fun m!109367 () Bool)

(assert (=> b!99540 m!109367))

(declare-fun m!109369 () Bool)

(assert (=> b!99540 m!109369))

(assert (=> b!99540 m!109357))

(declare-fun m!109371 () Bool)

(assert (=> b!99540 m!109371))

(declare-fun m!109373 () Bool)

(assert (=> b!99540 m!109373))

(declare-fun m!109375 () Bool)

(assert (=> b!99540 m!109375))

(assert (=> b!99540 m!109363))

(assert (=> b!99540 m!109369))

(declare-fun m!109377 () Bool)

(assert (=> b!99540 m!109377))

(assert (=> b!99540 m!109347))

(declare-fun m!109379 () Bool)

(assert (=> b!99540 m!109379))

(assert (=> b!99540 m!109367))

(declare-fun m!109381 () Bool)

(assert (=> b!99540 m!109381))

(declare-fun m!109383 () Bool)

(assert (=> b!99531 m!109383))

(assert (=> bm!10168 d!26693))

(declare-fun d!26695 () Bool)

(declare-fun res!50000 () Bool)

(declare-fun e!64855 () Bool)

(assert (=> d!26695 (=> res!50000 e!64855)))

(assert (=> d!26695 (= res!50000 (and ((_ is Cons!1587) (toList!774 lt!49704)) (= (_1!1177 (h!2182 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (=> d!26695 (= (containsKey!153 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!64855)))

(declare-fun b!99556 () Bool)

(declare-fun e!64856 () Bool)

(assert (=> b!99556 (= e!64855 e!64856)))

(declare-fun res!50001 () Bool)

(assert (=> b!99556 (=> (not res!50001) (not e!64856))))

(assert (=> b!99556 (= res!50001 (and (or (not ((_ is Cons!1587) (toList!774 lt!49704))) (bvsle (_1!1177 (h!2182 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) ((_ is Cons!1587) (toList!774 lt!49704)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun b!99557 () Bool)

(assert (=> b!99557 (= e!64856 (containsKey!153 (t!5556 (toList!774 lt!49704)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26695 (not res!50000)) b!99556))

(assert (= (and b!99556 res!50001) b!99557))

(assert (=> b!99557 m!108591))

(declare-fun m!109385 () Bool)

(assert (=> b!99557 m!109385))

(assert (=> d!26577 d!26695))

(declare-fun d!26697 () Bool)

(assert (=> d!26697 (= (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99213 d!26697))

(assert (=> b!99133 d!26631))

(assert (=> b!99017 d!26571))

(declare-fun d!26699 () Bool)

(assert (=> d!26699 (= (apply!93 lt!49898 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4102 () Bool)

(assert (= bs!4102 d!26699))

(assert (=> bs!4102 m!109159))

(assert (=> bs!4102 m!109159))

(declare-fun m!109387 () Bool)

(assert (=> bs!4102 m!109387))

(assert (=> b!99211 d!26699))

(declare-fun d!26701 () Bool)

(assert (=> d!26701 (= (get!1292 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2806 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99167 d!26701))

(declare-fun d!26703 () Bool)

(declare-fun isEmpty!364 (Option!155) Bool)

(assert (=> d!26703 (= (isDefined!103 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) (not (isEmpty!364 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(declare-fun bs!4103 () Bool)

(assert (= bs!4103 d!26703))

(assert (=> bs!4103 m!108741))

(declare-fun m!109389 () Bool)

(assert (=> bs!4103 m!109389))

(assert (=> b!99042 d!26703))

(declare-fun b!99569 () Bool)

(declare-fun e!64862 () Option!155)

(assert (=> b!99569 (= e!64862 None!153)))

(declare-fun b!99568 () Bool)

(assert (=> b!99568 (= e!64862 (getValueByKey!149 (t!5556 (toList!774 lt!49704)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun c!17002 () Bool)

(declare-fun d!26705 () Bool)

(assert (=> d!26705 (= c!17002 (and ((_ is Cons!1587) (toList!774 lt!49704)) (= (_1!1177 (h!2182 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun e!64861 () Option!155)

(assert (=> d!26705 (= (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!64861)))

(declare-fun b!99566 () Bool)

(assert (=> b!99566 (= e!64861 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49704)))))))

(declare-fun b!99567 () Bool)

(assert (=> b!99567 (= e!64861 e!64862)))

(declare-fun c!17003 () Bool)

(assert (=> b!99567 (= c!17003 (and ((_ is Cons!1587) (toList!774 lt!49704)) (not (= (_1!1177 (h!2182 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(assert (= (and d!26705 c!17002) b!99566))

(assert (= (and d!26705 (not c!17002)) b!99567))

(assert (= (and b!99567 c!17003) b!99568))

(assert (= (and b!99567 (not c!17003)) b!99569))

(assert (=> b!99568 m!108591))

(declare-fun m!109391 () Bool)

(assert (=> b!99568 m!109391))

(assert (=> b!99042 d!26705))

(declare-fun d!26707 () Bool)

(declare-fun res!50002 () Bool)

(declare-fun e!64863 () Bool)

(assert (=> d!26707 (=> (not res!50002) (not e!64863))))

(assert (=> d!26707 (= res!50002 (simpleValid!69 (v!2807 (underlying!334 thiss!992))))))

(assert (=> d!26707 (= (valid!392 (v!2807 (underlying!334 thiss!992))) e!64863)))

(declare-fun b!99570 () Bool)

(declare-fun res!50003 () Bool)

(assert (=> b!99570 (=> (not res!50003) (not e!64863))))

(assert (=> b!99570 (= res!50003 (= (arrayCountValidKeys!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))) (_size!477 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!99571 () Bool)

(declare-fun res!50004 () Bool)

(assert (=> b!99571 (=> (not res!50004) (not e!64863))))

(assert (=> b!99571 (= res!50004 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!99572 () Bool)

(assert (=> b!99572 (= e!64863 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 Nil!1587))))

(assert (= (and d!26707 res!50002) b!99570))

(assert (= (and b!99570 res!50003) b!99571))

(assert (= (and b!99571 res!50004) b!99572))

(declare-fun m!109393 () Bool)

(assert (=> d!26707 m!109393))

(declare-fun m!109395 () Bool)

(assert (=> b!99570 m!109395))

(declare-fun m!109397 () Bool)

(assert (=> b!99571 m!109397))

(declare-fun m!109399 () Bool)

(assert (=> b!99572 m!109399))

(assert (=> d!26565 d!26707))

(assert (=> b!99228 d!26697))

(declare-fun d!26709 () Bool)

(assert (=> d!26709 (= (inRange!0 (ite c!16896 (ite c!16888 (index!3173 lt!49834) (ite c!16894 (index!3172 lt!49832) (index!3175 lt!49832))) (ite c!16889 (index!3173 lt!49838) (ite c!16897 (index!3172 lt!49830) (index!3175 lt!49830)))) (mask!6607 newMap!16)) (and (bvsge (ite c!16896 (ite c!16888 (index!3173 lt!49834) (ite c!16894 (index!3172 lt!49832) (index!3175 lt!49832))) (ite c!16889 (index!3173 lt!49838) (ite c!16897 (index!3172 lt!49830) (index!3175 lt!49830)))) #b00000000000000000000000000000000) (bvslt (ite c!16896 (ite c!16888 (index!3173 lt!49834) (ite c!16894 (index!3172 lt!49832) (index!3175 lt!49832))) (ite c!16889 (index!3173 lt!49838) (ite c!16897 (index!3172 lt!49830) (index!3175 lt!49830)))) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10157 d!26709))

(declare-fun d!26711 () Bool)

(declare-fun lt!50215 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!103 (List!1590) (InoxSet (_ BitVec 64)))

(assert (=> d!26711 (= lt!50215 (select (content!103 Nil!1587) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!64868 () Bool)

(assert (=> d!26711 (= lt!50215 e!64868)))

(declare-fun res!50010 () Bool)

(assert (=> d!26711 (=> (not res!50010) (not e!64868))))

(assert (=> d!26711 (= res!50010 ((_ is Cons!1586) Nil!1587))))

(assert (=> d!26711 (= (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50215)))

(declare-fun b!99577 () Bool)

(declare-fun e!64869 () Bool)

(assert (=> b!99577 (= e!64868 e!64869)))

(declare-fun res!50009 () Bool)

(assert (=> b!99577 (=> res!50009 e!64869)))

(assert (=> b!99577 (= res!50009 (= (h!2181 Nil!1587) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99578 () Bool)

(assert (=> b!99578 (= e!64869 (contains!800 (t!5555 Nil!1587) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26711 res!50010) b!99577))

(assert (= (and b!99577 (not res!50009)) b!99578))

(declare-fun m!109401 () Bool)

(assert (=> d!26711 m!109401))

(assert (=> d!26711 m!108591))

(declare-fun m!109403 () Bool)

(assert (=> d!26711 m!109403))

(assert (=> b!99578 m!108591))

(declare-fun m!109405 () Bool)

(assert (=> b!99578 m!109405))

(assert (=> b!99030 d!26711))

(declare-fun d!26713 () Bool)

(assert (=> d!26713 (isDefined!103 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun lt!50218 () Unit!2998)

(declare-fun choose!617 (List!1591 (_ BitVec 64)) Unit!2998)

(assert (=> d!26713 (= lt!50218 (choose!617 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!64872 () Bool)

(assert (=> d!26713 e!64872))

(declare-fun res!50013 () Bool)

(assert (=> d!26713 (=> (not res!50013) (not e!64872))))

(declare-fun isStrictlySorted!300 (List!1591) Bool)

(assert (=> d!26713 (= res!50013 (isStrictlySorted!300 (toList!774 lt!49704)))))

(assert (=> d!26713 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50218)))

(declare-fun b!99581 () Bool)

(assert (=> b!99581 (= e!64872 (containsKey!153 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26713 res!50013) b!99581))

(assert (=> d!26713 m!108591))

(assert (=> d!26713 m!108741))

(assert (=> d!26713 m!108741))

(assert (=> d!26713 m!108743))

(assert (=> d!26713 m!108591))

(declare-fun m!109407 () Bool)

(assert (=> d!26713 m!109407))

(declare-fun m!109409 () Bool)

(assert (=> d!26713 m!109409))

(assert (=> b!99581 m!108591))

(assert (=> b!99581 m!108737))

(assert (=> b!99040 d!26713))

(assert (=> b!99040 d!26703))

(assert (=> b!99040 d!26705))

(declare-fun d!26715 () Bool)

(declare-fun e!64873 () Bool)

(assert (=> d!26715 e!64873))

(declare-fun res!50014 () Bool)

(assert (=> d!26715 (=> res!50014 e!64873)))

(declare-fun lt!50220 () Bool)

(assert (=> d!26715 (= res!50014 (not lt!50220))))

(declare-fun lt!50219 () Bool)

(assert (=> d!26715 (= lt!50220 lt!50219)))

(declare-fun lt!50222 () Unit!2998)

(declare-fun e!64874 () Unit!2998)

(assert (=> d!26715 (= lt!50222 e!64874)))

(declare-fun c!17004 () Bool)

(assert (=> d!26715 (= c!17004 lt!50219)))

(assert (=> d!26715 (= lt!50219 (containsKey!153 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(assert (=> d!26715 (= (contains!799 call!10155 (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))) lt!50220)))

(declare-fun b!99582 () Bool)

(declare-fun lt!50221 () Unit!2998)

(assert (=> b!99582 (= e!64874 lt!50221)))

(assert (=> b!99582 (= lt!50221 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(assert (=> b!99582 (isDefined!103 (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(declare-fun b!99583 () Bool)

(declare-fun Unit!3022 () Unit!2998)

(assert (=> b!99583 (= e!64874 Unit!3022)))

(declare-fun b!99584 () Bool)

(assert (=> b!99584 (= e!64873 (isDefined!103 (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))))

(assert (= (and d!26715 c!17004) b!99582))

(assert (= (and d!26715 (not c!17004)) b!99583))

(assert (= (and d!26715 (not res!50014)) b!99584))

(declare-fun m!109411 () Bool)

(assert (=> d!26715 m!109411))

(declare-fun m!109413 () Bool)

(assert (=> b!99582 m!109413))

(declare-fun m!109415 () Bool)

(assert (=> b!99582 m!109415))

(assert (=> b!99582 m!109415))

(declare-fun m!109417 () Bool)

(assert (=> b!99582 m!109417))

(assert (=> b!99584 m!109415))

(assert (=> b!99584 m!109415))

(assert (=> b!99584 m!109417))

(assert (=> bm!10163 d!26715))

(declare-fun condMapEmpty!3783 () Bool)

(declare-fun mapDefault!3783 () ValueCell!974)

(assert (=> mapNonEmpty!3781 (= condMapEmpty!3783 (= mapRest!3781 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3783)))))

(declare-fun e!64876 () Bool)

(declare-fun mapRes!3783 () Bool)

(assert (=> mapNonEmpty!3781 (= tp!9631 (and e!64876 mapRes!3783))))

(declare-fun b!99585 () Bool)

(declare-fun e!64875 () Bool)

(assert (=> b!99585 (= e!64875 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3783 () Bool)

(declare-fun tp!9633 () Bool)

(assert (=> mapNonEmpty!3783 (= mapRes!3783 (and tp!9633 e!64875))))

(declare-fun mapRest!3783 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapValue!3783 () ValueCell!974)

(declare-fun mapKey!3783 () (_ BitVec 32))

(assert (=> mapNonEmpty!3783 (= mapRest!3781 (store mapRest!3783 mapKey!3783 mapValue!3783))))

(declare-fun b!99586 () Bool)

(assert (=> b!99586 (= e!64876 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3783 () Bool)

(assert (=> mapIsEmpty!3783 mapRes!3783))

(assert (= (and mapNonEmpty!3781 condMapEmpty!3783) mapIsEmpty!3783))

(assert (= (and mapNonEmpty!3781 (not condMapEmpty!3783)) mapNonEmpty!3783))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!974) mapValue!3783)) b!99585))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!974) mapDefault!3783)) b!99586))

(declare-fun m!109419 () Bool)

(assert (=> mapNonEmpty!3783 m!109419))

(declare-fun condMapEmpty!3784 () Bool)

(declare-fun mapDefault!3784 () ValueCell!974)

(assert (=> mapNonEmpty!3782 (= condMapEmpty!3784 (= mapRest!3782 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3784)))))

(declare-fun e!64878 () Bool)

(declare-fun mapRes!3784 () Bool)

(assert (=> mapNonEmpty!3782 (= tp!9632 (and e!64878 mapRes!3784))))

(declare-fun b!99587 () Bool)

(declare-fun e!64877 () Bool)

(assert (=> b!99587 (= e!64877 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3784 () Bool)

(declare-fun tp!9634 () Bool)

(assert (=> mapNonEmpty!3784 (= mapRes!3784 (and tp!9634 e!64877))))

(declare-fun mapValue!3784 () ValueCell!974)

(declare-fun mapKey!3784 () (_ BitVec 32))

(declare-fun mapRest!3784 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3784 (= mapRest!3782 (store mapRest!3784 mapKey!3784 mapValue!3784))))

(declare-fun b!99588 () Bool)

(assert (=> b!99588 (= e!64878 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3784 () Bool)

(assert (=> mapIsEmpty!3784 mapRes!3784))

(assert (= (and mapNonEmpty!3782 condMapEmpty!3784) mapIsEmpty!3784))

(assert (= (and mapNonEmpty!3782 (not condMapEmpty!3784)) mapNonEmpty!3784))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!974) mapValue!3784)) b!99587))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!974) mapDefault!3784)) b!99588))

(declare-fun m!109421 () Bool)

(assert (=> mapNonEmpty!3784 m!109421))

(declare-fun b_lambda!4429 () Bool)

(assert (= b_lambda!4421 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4429)))

(declare-fun b_lambda!4431 () Bool)

(assert (= b_lambda!4419 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4431)))

(declare-fun b_lambda!4433 () Bool)

(assert (= b_lambda!4425 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4433)))

(declare-fun b_lambda!4435 () Bool)

(assert (= b_lambda!4427 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4435)))

(declare-fun b_lambda!4437 () Bool)

(assert (= b_lambda!4423 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4437)))

(check-sat (not b!99251) (not b!99547) (not d!26667) (not bm!10193) (not bm!10198) (not d!26677) (not b!99476) (not d!26673) (not b!99410) (not b!99509) (not b!99487) (not d!26645) (not b!99311) (not d!26603) (not bm!10227) (not b!99465) (not d!26707) (not b_next!2437) (not bm!10199) (not bm!10196) (not d!26715) (not d!26591) (not b!99307) (not b!99531) (not d!26691) (not b!99459) (not b!99572) (not d!26681) (not b!99342) (not d!26627) (not b!99510) (not b!99472) (not mapNonEmpty!3783) (not b!99284) (not d!26595) (not d!26623) (not b!99475) (not d!26649) (not b!99309) (not b!99548) (not b!99483) (not b!99419) (not b!99484) (not b!99366) (not bm!10201) (not b!99285) (not b!99454) (not b!99288) (not b_lambda!4417) (not b!99497) (not d!26693) (not d!26699) (not b!99578) (not b!99557) (not bm!10213) (not b!99534) (not d!26643) (not b!99494) (not b!99582) (not b!99570) (not b!99458) (not d!26641) (not d!26619) (not b!99304) (not b!99314) (not b!99471) (not d!26589) (not d!26703) (not b!99543) (not b!99485) (not b!99252) (not bm!10215) (not bm!10221) (not d!26599) (not d!26593) (not b!99259) (not b!99571) (not b!99519) (not bm!10235) (not b!99343) (not d!26597) (not b!99365) (not d!26605) (not b!99481) (not b!99312) (not b!99292) (not b!99303) (not b!99468) (not bm!10228) (not bm!10231) (not d!26711) (not b!99373) (not b!99302) (not d!26613) (not b!99295) (not b!99527) (not d!26665) (not b!99474) (not b!99305) (not b!99568) (not bm!10229) (not bm!10234) (not b_next!2439) (not b!99546) (not b_lambda!4437) (not b!99313) (not d!26631) (not d!26635) (not d!26663) (not b!99324) (not b!99525) (not b!99488) (not d!26639) (not b!99293) (not b!99540) (not b!99581) (not bm!10223) (not b!99490) (not b!99495) (not b!99308) (not d!26621) (not b!99344) (not d!26637) (not b!99286) (not b!99424) (not b!99463) (not d!26653) (not b!99492) (not d!26687) (not b!99513) (not b!99512) (not d!26633) (not b!99479) (not b!99456) (not b!99526) (not b!99325) (not d!26659) (not b!99491) (not bm!10226) (not b!99478) (not d!26611) (not bm!10212) (not b_lambda!4429) (not b!99533) (not d!26609) (not b!99584) (not bm!10236) (not b!99421) (not d!26617) (not b!99327) (not bm!10222) (not d!26713) (not b!99522) (not b!99409) (not b_lambda!4433) (not d!26607) (not d!26655) (not b!99289) (not bm!10197) (not d!26625) (not b!99461) (not b!99368) (not d!26669) (not b_lambda!4431) (not bm!10220) (not b_lambda!4435) (not bm!10238) (not b!99329) (not b!99460) (not b!99339) (not d!26615) (not d!26601) (not b!99413) (not mapNonEmpty!3784) (not b!99464) (not d!26661) b_and!6109 (not b!99258) (not b_lambda!4413) b_and!6111 tp_is_empty!2635 (not b!99336) (not b!99330))
(check-sat b_and!6109 b_and!6111 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun d!26717 () Bool)

(assert (=> d!26717 (= (validMask!0 (mask!6607 newMap!16)) (and (or (= (mask!6607 newMap!16) #b00000000000000000000000000000111) (= (mask!6607 newMap!16) #b00000000000000000000000000001111) (= (mask!6607 newMap!16) #b00000000000000000000000000011111) (= (mask!6607 newMap!16) #b00000000000000000000000000111111) (= (mask!6607 newMap!16) #b00000000000000000000000001111111) (= (mask!6607 newMap!16) #b00000000000000000000000011111111) (= (mask!6607 newMap!16) #b00000000000000000000000111111111) (= (mask!6607 newMap!16) #b00000000000000000000001111111111) (= (mask!6607 newMap!16) #b00000000000000000000011111111111) (= (mask!6607 newMap!16) #b00000000000000000000111111111111) (= (mask!6607 newMap!16) #b00000000000000000001111111111111) (= (mask!6607 newMap!16) #b00000000000000000011111111111111) (= (mask!6607 newMap!16) #b00000000000000000111111111111111) (= (mask!6607 newMap!16) #b00000000000000001111111111111111) (= (mask!6607 newMap!16) #b00000000000000011111111111111111) (= (mask!6607 newMap!16) #b00000000000000111111111111111111) (= (mask!6607 newMap!16) #b00000000000001111111111111111111) (= (mask!6607 newMap!16) #b00000000000011111111111111111111) (= (mask!6607 newMap!16) #b00000000000111111111111111111111) (= (mask!6607 newMap!16) #b00000000001111111111111111111111) (= (mask!6607 newMap!16) #b00000000011111111111111111111111) (= (mask!6607 newMap!16) #b00000000111111111111111111111111) (= (mask!6607 newMap!16) #b00000001111111111111111111111111) (= (mask!6607 newMap!16) #b00000011111111111111111111111111) (= (mask!6607 newMap!16) #b00000111111111111111111111111111) (= (mask!6607 newMap!16) #b00001111111111111111111111111111) (= (mask!6607 newMap!16) #b00011111111111111111111111111111) (= (mask!6607 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6607 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26691 d!26717))

(declare-fun b!99589 () Bool)

(declare-fun e!64881 () Bool)

(declare-fun call!10244 () Bool)

(assert (=> b!99589 (= e!64881 call!10244)))

(declare-fun b!99590 () Bool)

(declare-fun e!64879 () Bool)

(assert (=> b!99590 (= e!64879 e!64881)))

(declare-fun lt!50225 () (_ BitVec 64))

(assert (=> b!99590 (= lt!50225 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!50224 () Unit!2998)

(assert (=> b!99590 (= lt!50224 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4194 newMap!16) lt!50225 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!99590 (arrayContainsKey!0 (_keys!4194 newMap!16) lt!50225 #b00000000000000000000000000000000)))

(declare-fun lt!50223 () Unit!2998)

(assert (=> b!99590 (= lt!50223 lt!50224)))

(declare-fun res!50016 () Bool)

(assert (=> b!99590 (= res!50016 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4194 newMap!16) (mask!6607 newMap!16)) (Found!257 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!99590 (=> (not res!50016) (not e!64881))))

(declare-fun b!99591 () Bool)

(declare-fun e!64880 () Bool)

(assert (=> b!99591 (= e!64880 e!64879)))

(declare-fun c!17005 () Bool)

(assert (=> b!99591 (= c!17005 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10241 () Bool)

(assert (=> bm!10241 (= call!10244 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99592 () Bool)

(assert (=> b!99592 (= e!64879 call!10244)))

(declare-fun d!26719 () Bool)

(declare-fun res!50015 () Bool)

(assert (=> d!26719 (=> res!50015 e!64880)))

(assert (=> d!26719 (= res!50015 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26719 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4194 newMap!16) (mask!6607 newMap!16)) e!64880)))

(assert (= (and d!26719 (not res!50015)) b!99591))

(assert (= (and b!99591 c!17005) b!99590))

(assert (= (and b!99591 (not c!17005)) b!99592))

(assert (= (and b!99590 res!50016) b!99589))

(assert (= (or b!99589 b!99592) bm!10241))

(declare-fun m!109423 () Bool)

(assert (=> b!99590 m!109423))

(declare-fun m!109425 () Bool)

(assert (=> b!99590 m!109425))

(declare-fun m!109427 () Bool)

(assert (=> b!99590 m!109427))

(assert (=> b!99590 m!109423))

(declare-fun m!109429 () Bool)

(assert (=> b!99590 m!109429))

(assert (=> b!99591 m!109423))

(assert (=> b!99591 m!109423))

(declare-fun m!109431 () Bool)

(assert (=> b!99591 m!109431))

(declare-fun m!109433 () Bool)

(assert (=> bm!10241 m!109433))

(assert (=> bm!10196 d!26719))

(declare-fun d!26721 () Bool)

(assert (=> d!26721 (= (get!1294 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2813 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26681 d!26721))

(declare-fun b!99596 () Bool)

(declare-fun e!64883 () Option!155)

(assert (=> b!99596 (= e!64883 None!153)))

(declare-fun b!99595 () Bool)

(assert (=> b!99595 (= e!64883 (getValueByKey!149 (t!5556 (toList!774 lt!49898)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun d!26723 () Bool)

(declare-fun c!17006 () Bool)

(assert (=> d!26723 (= c!17006 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun e!64882 () Option!155)

(assert (=> d!26723 (= (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64882)))

(declare-fun b!99593 () Bool)

(assert (=> b!99593 (= e!64882 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49898)))))))

(declare-fun b!99594 () Bool)

(assert (=> b!99594 (= e!64882 e!64883)))

(declare-fun c!17007 () Bool)

(assert (=> b!99594 (= c!17007 (and ((_ is Cons!1587) (toList!774 lt!49898)) (not (= (_1!1177 (h!2182 (toList!774 lt!49898))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(assert (= (and d!26723 c!17006) b!99593))

(assert (= (and d!26723 (not c!17006)) b!99594))

(assert (= (and b!99594 c!17007) b!99595))

(assert (= (and b!99594 (not c!17007)) b!99596))

(assert (=> b!99595 m!108725))

(declare-fun m!109435 () Bool)

(assert (=> b!99595 m!109435))

(assert (=> d!26681 d!26723))

(declare-fun b!99600 () Bool)

(declare-fun e!64885 () Option!155)

(assert (=> b!99600 (= e!64885 None!153)))

(declare-fun b!99599 () Bool)

(assert (=> b!99599 (= e!64885 (getValueByKey!149 (t!5556 (toList!774 lt!50126)) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!26725 () Bool)

(declare-fun c!17008 () Bool)

(assert (=> d!26725 (= c!17008 (and ((_ is Cons!1587) (toList!774 lt!50126)) (= (_1!1177 (h!2182 (toList!774 lt!50126))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!64884 () Option!155)

(assert (=> d!26725 (= (getValueByKey!149 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!64884)))

(declare-fun b!99597 () Bool)

(assert (=> b!99597 (= e!64884 (Some!154 (_2!1177 (h!2182 (toList!774 lt!50126)))))))

(declare-fun b!99598 () Bool)

(assert (=> b!99598 (= e!64884 e!64885)))

(declare-fun c!17009 () Bool)

(assert (=> b!99598 (= c!17009 (and ((_ is Cons!1587) (toList!774 lt!50126)) (not (= (_1!1177 (h!2182 (toList!774 lt!50126))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!26725 c!17008) b!99597))

(assert (= (and d!26725 (not c!17008)) b!99598))

(assert (= (and b!99598 c!17009) b!99599))

(assert (= (and b!99598 (not c!17009)) b!99600))

(declare-fun m!109437 () Bool)

(assert (=> b!99599 m!109437))

(assert (=> b!99459 d!26725))

(declare-fun e!64892 () SeekEntryResult!257)

(declare-fun b!99613 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99613 (= e!64892 (seekKeyOrZeroReturnVacant!0 (bvadd (x!13106 lt!50015) #b00000000000000000000000000000001) (nextIndex!0 (index!3174 lt!50015) (x!13106 lt!50015) (mask!6607 newMap!16)) (index!3174 lt!50015) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!99614 () Bool)

(declare-fun e!64893 () SeekEntryResult!257)

(declare-fun e!64894 () SeekEntryResult!257)

(assert (=> b!99614 (= e!64893 e!64894)))

(declare-fun c!17017 () Bool)

(declare-fun lt!50230 () (_ BitVec 64))

(assert (=> b!99614 (= c!17017 (= lt!50230 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun d!26727 () Bool)

(declare-fun lt!50231 () SeekEntryResult!257)

(assert (=> d!26727 (and (or ((_ is Undefined!257) lt!50231) (not ((_ is Found!257) lt!50231)) (and (bvsge (index!3173 lt!50231) #b00000000000000000000000000000000) (bvslt (index!3173 lt!50231) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50231) ((_ is Found!257) lt!50231) (not ((_ is MissingVacant!257) lt!50231)) (not (= (index!3175 lt!50231) (index!3174 lt!50015))) (and (bvsge (index!3175 lt!50231) #b00000000000000000000000000000000) (bvslt (index!3175 lt!50231) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50231) (ite ((_ is Found!257) lt!50231) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50231)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (and ((_ is MissingVacant!257) lt!50231) (= (index!3175 lt!50231) (index!3174 lt!50015)) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50231)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26727 (= lt!50231 e!64893)))

(declare-fun c!17018 () Bool)

(assert (=> d!26727 (= c!17018 (bvsge (x!13106 lt!50015) #b01111111111111111111111111111110))))

(assert (=> d!26727 (= lt!50230 (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50015)))))

(assert (=> d!26727 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26727 (= (seekKeyOrZeroReturnVacant!0 (x!13106 lt!50015) (index!3174 lt!50015) (index!3174 lt!50015) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)) lt!50231)))

(declare-fun b!99615 () Bool)

(assert (=> b!99615 (= e!64893 Undefined!257)))

(declare-fun b!99616 () Bool)

(assert (=> b!99616 (= e!64894 (Found!257 (index!3174 lt!50015)))))

(declare-fun b!99617 () Bool)

(assert (=> b!99617 (= e!64892 (MissingVacant!257 (index!3174 lt!50015)))))

(declare-fun b!99618 () Bool)

(declare-fun c!17016 () Bool)

(assert (=> b!99618 (= c!17016 (= lt!50230 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99618 (= e!64894 e!64892)))

(assert (= (and d!26727 c!17018) b!99615))

(assert (= (and d!26727 (not c!17018)) b!99614))

(assert (= (and b!99614 c!17017) b!99616))

(assert (= (and b!99614 (not c!17017)) b!99618))

(assert (= (and b!99618 c!17016) b!99617))

(assert (= (and b!99618 (not c!17016)) b!99613))

(declare-fun m!109439 () Bool)

(assert (=> b!99613 m!109439))

(assert (=> b!99613 m!109439))

(assert (=> b!99613 m!108591))

(declare-fun m!109441 () Bool)

(assert (=> b!99613 m!109441))

(declare-fun m!109443 () Bool)

(assert (=> d!26727 m!109443))

(declare-fun m!109445 () Bool)

(assert (=> d!26727 m!109445))

(assert (=> d!26727 m!109069))

(assert (=> d!26727 m!108865))

(assert (=> b!99365 d!26727))

(declare-fun d!26729 () Bool)

(assert (=> d!26729 (= (apply!93 lt!49945 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1294 (getValueByKey!149 (toList!774 lt!49945) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4104 () Bool)

(assert (= bs!4104 d!26729))

(assert (=> bs!4104 m!108725))

(declare-fun m!109447 () Bool)

(assert (=> bs!4104 m!109447))

(assert (=> bs!4104 m!109447))

(declare-fun m!109449 () Bool)

(assert (=> bs!4104 m!109449))

(assert (=> b!99295 d!26729))

(assert (=> b!99295 d!26683))

(declare-fun d!26731 () Bool)

(declare-fun e!64895 () Bool)

(assert (=> d!26731 e!64895))

(declare-fun res!50018 () Bool)

(assert (=> d!26731 (=> (not res!50018) (not e!64895))))

(declare-fun lt!50232 () ListLongMap!1517)

(assert (=> d!26731 (= res!50018 (contains!799 lt!50232 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50233 () List!1591)

(assert (=> d!26731 (= lt!50232 (ListLongMap!1518 lt!50233))))

(declare-fun lt!50234 () Unit!2998)

(declare-fun lt!50235 () Unit!2998)

(assert (=> d!26731 (= lt!50234 lt!50235)))

(assert (=> d!26731 (= (getValueByKey!149 lt!50233 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26731 (= lt!50235 (lemmaContainsTupThenGetReturnValue!68 lt!50233 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26731 (= lt!50233 (insertStrictlySorted!71 (toList!774 call!10232) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26731 (= (+!129 call!10232 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50232)))

(declare-fun b!99619 () Bool)

(declare-fun res!50017 () Bool)

(assert (=> b!99619 (=> (not res!50017) (not e!64895))))

(assert (=> b!99619 (= res!50017 (= (getValueByKey!149 (toList!774 lt!50232) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!99620 () Bool)

(assert (=> b!99620 (= e!64895 (contains!801 (toList!774 lt!50232) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!26731 res!50018) b!99619))

(assert (= (and b!99619 res!50017) b!99620))

(declare-fun m!109451 () Bool)

(assert (=> d!26731 m!109451))

(declare-fun m!109453 () Bool)

(assert (=> d!26731 m!109453))

(declare-fun m!109455 () Bool)

(assert (=> d!26731 m!109455))

(declare-fun m!109457 () Bool)

(assert (=> d!26731 m!109457))

(declare-fun m!109459 () Bool)

(assert (=> b!99619 m!109459))

(declare-fun m!109461 () Bool)

(assert (=> b!99620 m!109461))

(assert (=> b!99526 d!26731))

(declare-fun d!26733 () Bool)

(declare-fun e!64896 () Bool)

(assert (=> d!26733 e!64896))

(declare-fun res!50019 () Bool)

(assert (=> d!26733 (=> res!50019 e!64896)))

(declare-fun lt!50237 () Bool)

(assert (=> d!26733 (= res!50019 (not lt!50237))))

(declare-fun lt!50236 () Bool)

(assert (=> d!26733 (= lt!50237 lt!50236)))

(declare-fun lt!50239 () Unit!2998)

(declare-fun e!64897 () Unit!2998)

(assert (=> d!26733 (= lt!50239 e!64897)))

(declare-fun c!17019 () Bool)

(assert (=> d!26733 (= c!17019 lt!50236)))

(assert (=> d!26733 (= lt!50236 (containsKey!153 (toList!774 lt!50170) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26733 (= (contains!799 lt!50170 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50237)))

(declare-fun b!99621 () Bool)

(declare-fun lt!50238 () Unit!2998)

(assert (=> b!99621 (= e!64897 lt!50238)))

(assert (=> b!99621 (= lt!50238 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50170) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99621 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99622 () Bool)

(declare-fun Unit!3023 () Unit!2998)

(assert (=> b!99622 (= e!64897 Unit!3023)))

(declare-fun b!99623 () Bool)

(assert (=> b!99623 (= e!64896 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26733 c!17019) b!99621))

(assert (= (and d!26733 (not c!17019)) b!99622))

(assert (= (and d!26733 (not res!50019)) b!99623))

(declare-fun m!109463 () Bool)

(assert (=> d!26733 m!109463))

(declare-fun m!109465 () Bool)

(assert (=> b!99621 m!109465))

(declare-fun m!109467 () Bool)

(assert (=> b!99621 m!109467))

(assert (=> b!99621 m!109467))

(declare-fun m!109469 () Bool)

(assert (=> b!99621 m!109469))

(assert (=> b!99623 m!109467))

(assert (=> b!99623 m!109467))

(assert (=> b!99623 m!109469))

(assert (=> bm!10227 d!26733))

(assert (=> b!99581 d!26695))

(declare-fun d!26735 () Bool)

(assert (=> d!26735 (= (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99488 d!26735))

(declare-fun d!26737 () Bool)

(declare-fun e!64898 () Bool)

(assert (=> d!26737 e!64898))

(declare-fun res!50020 () Bool)

(assert (=> d!26737 (=> res!50020 e!64898)))

(declare-fun lt!50241 () Bool)

(assert (=> d!26737 (= res!50020 (not lt!50241))))

(declare-fun lt!50240 () Bool)

(assert (=> d!26737 (= lt!50241 lt!50240)))

(declare-fun lt!50243 () Unit!2998)

(declare-fun e!64899 () Unit!2998)

(assert (=> d!26737 (= lt!50243 e!64899)))

(declare-fun c!17020 () Bool)

(assert (=> d!26737 (= c!17020 lt!50240)))

(assert (=> d!26737 (= lt!50240 (containsKey!153 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26737 (= (contains!799 lt!50126 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50241)))

(declare-fun b!99624 () Bool)

(declare-fun lt!50242 () Unit!2998)

(assert (=> b!99624 (= e!64899 lt!50242)))

(assert (=> b!99624 (= lt!50242 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> b!99624 (isDefined!103 (getValueByKey!149 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99625 () Bool)

(declare-fun Unit!3024 () Unit!2998)

(assert (=> b!99625 (= e!64899 Unit!3024)))

(declare-fun b!99626 () Bool)

(assert (=> b!99626 (= e!64898 (isDefined!103 (getValueByKey!149 (toList!774 lt!50126) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!26737 c!17020) b!99624))

(assert (= (and d!26737 (not c!17020)) b!99625))

(assert (= (and d!26737 (not res!50020)) b!99626))

(declare-fun m!109471 () Bool)

(assert (=> d!26737 m!109471))

(declare-fun m!109473 () Bool)

(assert (=> b!99624 m!109473))

(assert (=> b!99624 m!109171))

(assert (=> b!99624 m!109171))

(declare-fun m!109475 () Bool)

(assert (=> b!99624 m!109475))

(assert (=> b!99626 m!109171))

(assert (=> b!99626 m!109171))

(assert (=> b!99626 m!109475))

(assert (=> d!26653 d!26737))

(declare-fun b!99630 () Bool)

(declare-fun e!64901 () Option!155)

(assert (=> b!99630 (= e!64901 None!153)))

(declare-fun b!99629 () Bool)

(assert (=> b!99629 (= e!64901 (getValueByKey!149 (t!5556 lt!50127) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!26739 () Bool)

(declare-fun c!17021 () Bool)

(assert (=> d!26739 (= c!17021 (and ((_ is Cons!1587) lt!50127) (= (_1!1177 (h!2182 lt!50127)) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!64900 () Option!155)

(assert (=> d!26739 (= (getValueByKey!149 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!64900)))

(declare-fun b!99627 () Bool)

(assert (=> b!99627 (= e!64900 (Some!154 (_2!1177 (h!2182 lt!50127))))))

(declare-fun b!99628 () Bool)

(assert (=> b!99628 (= e!64900 e!64901)))

(declare-fun c!17022 () Bool)

(assert (=> b!99628 (= c!17022 (and ((_ is Cons!1587) lt!50127) (not (= (_1!1177 (h!2182 lt!50127)) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!26739 c!17021) b!99627))

(assert (= (and d!26739 (not c!17021)) b!99628))

(assert (= (and b!99628 c!17022) b!99629))

(assert (= (and b!99628 (not c!17022)) b!99630))

(declare-fun m!109477 () Bool)

(assert (=> b!99629 m!109477))

(assert (=> d!26653 d!26739))

(declare-fun d!26741 () Bool)

(assert (=> d!26741 (= (getValueByKey!149 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50246 () Unit!2998)

(declare-fun choose!618 (List!1591 (_ BitVec 64) V!3161) Unit!2998)

(assert (=> d!26741 (= lt!50246 (choose!618 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!64904 () Bool)

(assert (=> d!26741 e!64904))

(declare-fun res!50025 () Bool)

(assert (=> d!26741 (=> (not res!50025) (not e!64904))))

(assert (=> d!26741 (= res!50025 (isStrictlySorted!300 lt!50127))))

(assert (=> d!26741 (= (lemmaContainsTupThenGetReturnValue!68 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50246)))

(declare-fun b!99635 () Bool)

(declare-fun res!50026 () Bool)

(assert (=> b!99635 (=> (not res!50026) (not e!64904))))

(assert (=> b!99635 (= res!50026 (containsKey!153 lt!50127 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99636 () Bool)

(assert (=> b!99636 (= e!64904 (contains!801 lt!50127 (tuple2!2333 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!26741 res!50025) b!99635))

(assert (= (and b!99635 res!50026) b!99636))

(assert (=> d!26741 m!109165))

(declare-fun m!109479 () Bool)

(assert (=> d!26741 m!109479))

(declare-fun m!109481 () Bool)

(assert (=> d!26741 m!109481))

(declare-fun m!109483 () Bool)

(assert (=> b!99635 m!109483))

(declare-fun m!109485 () Bool)

(assert (=> b!99636 m!109485))

(assert (=> d!26653 d!26741))

(declare-fun bm!10248 () Bool)

(declare-fun call!10252 () List!1591)

(declare-fun call!10251 () List!1591)

(assert (=> bm!10248 (= call!10252 call!10251)))

(declare-fun d!26743 () Bool)

(declare-fun e!64916 () Bool)

(assert (=> d!26743 e!64916))

(declare-fun res!50032 () Bool)

(assert (=> d!26743 (=> (not res!50032) (not e!64916))))

(declare-fun lt!50249 () List!1591)

(assert (=> d!26743 (= res!50032 (isStrictlySorted!300 lt!50249))))

(declare-fun e!64918 () List!1591)

(assert (=> d!26743 (= lt!50249 e!64918)))

(declare-fun c!17034 () Bool)

(assert (=> d!26743 (= c!17034 (and ((_ is Cons!1587) (toList!774 call!10189)) (bvslt (_1!1177 (h!2182 (toList!774 call!10189))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!26743 (isStrictlySorted!300 (toList!774 call!10189))))

(assert (=> d!26743 (= (insertStrictlySorted!71 (toList!774 call!10189) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50249)))

(declare-fun b!99657 () Bool)

(declare-fun e!64915 () List!1591)

(assert (=> b!99657 (= e!64915 (insertStrictlySorted!71 (t!5556 (toList!774 call!10189)) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99658 () Bool)

(declare-fun e!64917 () List!1591)

(declare-fun call!10253 () List!1591)

(assert (=> b!99658 (= e!64917 call!10253)))

(declare-fun b!99659 () Bool)

(assert (=> b!99659 (= e!64917 call!10253)))

(declare-fun b!99660 () Bool)

(assert (=> b!99660 (= e!64918 call!10251)))

(declare-fun b!99661 () Bool)

(declare-fun res!50031 () Bool)

(assert (=> b!99661 (=> (not res!50031) (not e!64916))))

(assert (=> b!99661 (= res!50031 (containsKey!153 lt!50249 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99662 () Bool)

(declare-fun e!64919 () List!1591)

(assert (=> b!99662 (= e!64918 e!64919)))

(declare-fun c!17032 () Bool)

(assert (=> b!99662 (= c!17032 (and ((_ is Cons!1587) (toList!774 call!10189)) (= (_1!1177 (h!2182 (toList!774 call!10189))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99663 () Bool)

(assert (=> b!99663 (= e!64916 (contains!801 lt!50249 (tuple2!2333 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun bm!10249 () Bool)

(assert (=> bm!10249 (= call!10253 call!10252)))

(declare-fun bm!10250 () Bool)

(declare-fun $colon$colon!78 (List!1591 tuple2!2332) List!1591)

(assert (=> bm!10250 (= call!10251 ($colon$colon!78 e!64915 (ite c!17034 (h!2182 (toList!774 call!10189)) (tuple2!2333 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun c!17031 () Bool)

(assert (=> bm!10250 (= c!17031 c!17034)))

(declare-fun b!99664 () Bool)

(assert (=> b!99664 (= e!64919 call!10252)))

(declare-fun c!17033 () Bool)

(declare-fun b!99665 () Bool)

(assert (=> b!99665 (= e!64915 (ite c!17032 (t!5556 (toList!774 call!10189)) (ite c!17033 (Cons!1587 (h!2182 (toList!774 call!10189)) (t!5556 (toList!774 call!10189))) Nil!1588)))))

(declare-fun b!99666 () Bool)

(assert (=> b!99666 (= c!17033 (and ((_ is Cons!1587) (toList!774 call!10189)) (bvsgt (_1!1177 (h!2182 (toList!774 call!10189))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!99666 (= e!64919 e!64917)))

(assert (= (and d!26743 c!17034) b!99660))

(assert (= (and d!26743 (not c!17034)) b!99662))

(assert (= (and b!99662 c!17032) b!99664))

(assert (= (and b!99662 (not c!17032)) b!99666))

(assert (= (and b!99666 c!17033) b!99659))

(assert (= (and b!99666 (not c!17033)) b!99658))

(assert (= (or b!99659 b!99658) bm!10249))

(assert (= (or b!99664 bm!10249) bm!10248))

(assert (= (or b!99660 bm!10248) bm!10250))

(assert (= (and bm!10250 c!17031) b!99657))

(assert (= (and bm!10250 (not c!17031)) b!99665))

(assert (= (and d!26743 res!50032) b!99661))

(assert (= (and b!99661 res!50031) b!99663))

(declare-fun m!109487 () Bool)

(assert (=> d!26743 m!109487))

(declare-fun m!109489 () Bool)

(assert (=> d!26743 m!109489))

(declare-fun m!109491 () Bool)

(assert (=> b!99661 m!109491))

(declare-fun m!109493 () Bool)

(assert (=> b!99663 m!109493))

(declare-fun m!109495 () Bool)

(assert (=> bm!10250 m!109495))

(declare-fun m!109497 () Bool)

(assert (=> b!99657 m!109497))

(assert (=> d!26653 d!26743))

(declare-fun d!26745 () Bool)

(assert (=> d!26745 (= (inRange!0 (index!3173 lt!50025) (mask!6607 newMap!16)) (and (bvsge (index!3173 lt!50025) #b00000000000000000000000000000000) (bvslt (index!3173 lt!50025) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!99373 d!26745))

(declare-fun d!26747 () Bool)

(assert (=> d!26747 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!50250 () Unit!2998)

(assert (=> d!26747 (= lt!50250 (choose!617 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64920 () Bool)

(assert (=> d!26747 e!64920))

(declare-fun res!50033 () Bool)

(assert (=> d!26747 (=> (not res!50033) (not e!64920))))

(assert (=> d!26747 (= res!50033 (isStrictlySorted!300 (toList!774 lt!49898)))))

(assert (=> d!26747 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50250)))

(declare-fun b!99667 () Bool)

(assert (=> b!99667 (= e!64920 (containsKey!153 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26747 res!50033) b!99667))

(assert (=> d!26747 m!108725))

(assert (=> d!26747 m!109077))

(assert (=> d!26747 m!109077))

(assert (=> d!26747 m!109079))

(assert (=> d!26747 m!108725))

(declare-fun m!109499 () Bool)

(assert (=> d!26747 m!109499))

(declare-fun m!109501 () Bool)

(assert (=> d!26747 m!109501))

(assert (=> b!99667 m!108725))

(assert (=> b!99667 m!109073))

(assert (=> b!99366 d!26747))

(declare-fun d!26749 () Bool)

(assert (=> d!26749 (= (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!364 (getValueByKey!149 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4105 () Bool)

(assert (= bs!4105 d!26749))

(assert (=> bs!4105 m!109077))

(declare-fun m!109503 () Bool)

(assert (=> bs!4105 m!109503))

(assert (=> b!99366 d!26749))

(assert (=> b!99366 d!26723))

(declare-fun d!26751 () Bool)

(declare-fun lt!50251 () (_ BitVec 32))

(assert (=> d!26751 (and (bvsge lt!50251 #b00000000000000000000000000000000) (bvsle lt!50251 (bvsub (size!2260 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!64921 () (_ BitVec 32))

(assert (=> d!26751 (= lt!50251 e!64921)))

(declare-fun c!17035 () Bool)

(assert (=> d!26751 (= c!17035 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26751 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2260 (_keys!4194 newMap!16)) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26751 (= (arrayCountValidKeys!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))) lt!50251)))

(declare-fun b!99668 () Bool)

(declare-fun e!64922 () (_ BitVec 32))

(declare-fun call!10254 () (_ BitVec 32))

(assert (=> b!99668 (= e!64922 call!10254)))

(declare-fun b!99669 () Bool)

(assert (=> b!99669 (= e!64921 #b00000000000000000000000000000000)))

(declare-fun b!99670 () Bool)

(assert (=> b!99670 (= e!64922 (bvadd #b00000000000000000000000000000001 call!10254))))

(declare-fun b!99671 () Bool)

(assert (=> b!99671 (= e!64921 e!64922)))

(declare-fun c!17036 () Bool)

(assert (=> b!99671 (= c!17036 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10251 () Bool)

(assert (=> bm!10251 (= call!10254 (arrayCountValidKeys!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (= (and d!26751 c!17035) b!99669))

(assert (= (and d!26751 (not c!17035)) b!99671))

(assert (= (and b!99671 c!17036) b!99670))

(assert (= (and b!99671 (not c!17036)) b!99668))

(assert (= (or b!99670 b!99668) bm!10251))

(assert (=> b!99671 m!109423))

(assert (=> b!99671 m!109423))

(assert (=> b!99671 m!109431))

(declare-fun m!109505 () Bool)

(assert (=> bm!10251 m!109505))

(assert (=> bm!10226 d!26751))

(declare-fun lt!50254 () Bool)

(declare-fun d!26753 () Bool)

(declare-fun content!104 (List!1591) (InoxSet tuple2!2332))

(assert (=> d!26753 (= lt!50254 (select (content!104 (toList!774 lt!49963)) (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun e!64928 () Bool)

(assert (=> d!26753 (= lt!50254 e!64928)))

(declare-fun res!50038 () Bool)

(assert (=> d!26753 (=> (not res!50038) (not e!64928))))

(assert (=> d!26753 (= res!50038 ((_ is Cons!1587) (toList!774 lt!49963)))))

(assert (=> d!26753 (= (contains!801 (toList!774 lt!49963) (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50254)))

(declare-fun b!99676 () Bool)

(declare-fun e!64927 () Bool)

(assert (=> b!99676 (= e!64928 e!64927)))

(declare-fun res!50039 () Bool)

(assert (=> b!99676 (=> res!50039 e!64927)))

(assert (=> b!99676 (= res!50039 (= (h!2182 (toList!774 lt!49963)) (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99677 () Bool)

(assert (=> b!99677 (= e!64927 (contains!801 (t!5556 (toList!774 lt!49963)) (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26753 res!50038) b!99676))

(assert (= (and b!99676 (not res!50039)) b!99677))

(declare-fun m!109507 () Bool)

(assert (=> d!26753 m!109507))

(declare-fun m!109509 () Bool)

(assert (=> d!26753 m!109509))

(declare-fun m!109511 () Bool)

(assert (=> b!99677 m!109511))

(assert (=> b!99305 d!26753))

(declare-fun d!26755 () Bool)

(declare-fun res!50040 () Bool)

(declare-fun e!64929 () Bool)

(assert (=> d!26755 (=> res!50040 e!64929)))

(assert (=> d!26755 (= res!50040 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26755 (= (containsKey!153 (toList!774 lt!49898) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64929)))

(declare-fun b!99678 () Bool)

(declare-fun e!64930 () Bool)

(assert (=> b!99678 (= e!64929 e!64930)))

(declare-fun res!50041 () Bool)

(assert (=> b!99678 (=> (not res!50041) (not e!64930))))

(assert (=> b!99678 (= res!50041 (and (or (not ((_ is Cons!1587) (toList!774 lt!49898))) (bvsle (_1!1177 (h!2182 (toList!774 lt!49898))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1587) (toList!774 lt!49898)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49898))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!99679 () Bool)

(assert (=> b!99679 (= e!64930 (containsKey!153 (t!5556 (toList!774 lt!49898)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26755 (not res!50040)) b!99678))

(assert (= (and b!99678 res!50041) b!99679))

(assert (=> b!99679 m!108725))

(declare-fun m!109513 () Bool)

(assert (=> b!99679 m!109513))

(assert (=> d!26635 d!26755))

(declare-fun lt!50255 () Bool)

(declare-fun d!26757 () Bool)

(assert (=> d!26757 (= lt!50255 (select (content!104 (toList!774 lt!50137)) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!64932 () Bool)

(assert (=> d!26757 (= lt!50255 e!64932)))

(declare-fun res!50042 () Bool)

(assert (=> d!26757 (=> (not res!50042) (not e!64932))))

(assert (=> d!26757 (= res!50042 ((_ is Cons!1587) (toList!774 lt!50137)))))

(assert (=> d!26757 (= (contains!801 (toList!774 lt!50137) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50255)))

(declare-fun b!99680 () Bool)

(declare-fun e!64931 () Bool)

(assert (=> b!99680 (= e!64932 e!64931)))

(declare-fun res!50043 () Bool)

(assert (=> b!99680 (=> res!50043 e!64931)))

(assert (=> b!99680 (= res!50043 (= (h!2182 (toList!774 lt!50137)) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99681 () Bool)

(assert (=> b!99681 (= e!64931 (contains!801 (t!5556 (toList!774 lt!50137)) (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (= (and d!26757 res!50042) b!99680))

(assert (= (and b!99680 (not res!50043)) b!99681))

(declare-fun m!109515 () Bool)

(assert (=> d!26757 m!109515))

(declare-fun m!109517 () Bool)

(assert (=> d!26757 m!109517))

(declare-fun m!109519 () Bool)

(assert (=> b!99681 m!109519))

(assert (=> b!99465 d!26757))

(assert (=> d!26637 d!26633))

(declare-fun d!26759 () Bool)

(declare-fun e!64935 () Bool)

(assert (=> d!26759 e!64935))

(declare-fun res!50049 () Bool)

(assert (=> d!26759 (=> (not res!50049) (not e!64935))))

(declare-fun lt!50258 () SeekEntryResult!257)

(assert (=> d!26759 (= res!50049 ((_ is Found!257) lt!50258))))

(assert (=> d!26759 (= lt!50258 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (=> d!26759 true))

(declare-fun _$33!84 () Unit!2998)

(assert (=> d!26759 (= (choose!611 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) _$33!84)))

(declare-fun b!99686 () Bool)

(declare-fun res!50048 () Bool)

(assert (=> b!99686 (=> (not res!50048) (not e!64935))))

(assert (=> b!99686 (= res!50048 (inRange!0 (index!3173 lt!50258) (mask!6607 newMap!16)))))

(declare-fun b!99687 () Bool)

(assert (=> b!99687 (= e!64935 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50258)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26759 res!50049) b!99686))

(assert (= (and b!99686 res!50048) b!99687))

(assert (=> d!26759 m!108591))

(assert (=> d!26759 m!108747))

(declare-fun m!109521 () Bool)

(assert (=> b!99686 m!109521))

(declare-fun m!109523 () Bool)

(assert (=> b!99687 m!109523))

(assert (=> d!26637 d!26759))

(assert (=> d!26637 d!26717))

(declare-fun d!26761 () Bool)

(assert (=> d!26761 (= (get!1292 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2806 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99491 d!26761))

(declare-fun d!26763 () Bool)

(assert (=> d!26763 (= (get!1294 (getValueByKey!149 (toList!774 lt!49903) lt!49912)) (v!2813 (getValueByKey!149 (toList!774 lt!49903) lt!49912)))))

(assert (=> d!26603 d!26763))

(declare-fun b!99691 () Bool)

(declare-fun e!64937 () Option!155)

(assert (=> b!99691 (= e!64937 None!153)))

(declare-fun b!99690 () Bool)

(assert (=> b!99690 (= e!64937 (getValueByKey!149 (t!5556 (toList!774 lt!49903)) lt!49912))))

(declare-fun d!26765 () Bool)

(declare-fun c!17037 () Bool)

(assert (=> d!26765 (= c!17037 (and ((_ is Cons!1587) (toList!774 lt!49903)) (= (_1!1177 (h!2182 (toList!774 lt!49903))) lt!49912)))))

(declare-fun e!64936 () Option!155)

(assert (=> d!26765 (= (getValueByKey!149 (toList!774 lt!49903) lt!49912) e!64936)))

(declare-fun b!99688 () Bool)

(assert (=> b!99688 (= e!64936 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49903)))))))

(declare-fun b!99689 () Bool)

(assert (=> b!99689 (= e!64936 e!64937)))

(declare-fun c!17038 () Bool)

(assert (=> b!99689 (= c!17038 (and ((_ is Cons!1587) (toList!774 lt!49903)) (not (= (_1!1177 (h!2182 (toList!774 lt!49903))) lt!49912))))))

(assert (= (and d!26765 c!17037) b!99688))

(assert (= (and d!26765 (not c!17037)) b!99689))

(assert (= (and b!99689 c!17038) b!99690))

(assert (= (and b!99689 (not c!17038)) b!99691))

(declare-fun m!109525 () Bool)

(assert (=> b!99690 m!109525))

(assert (=> d!26603 d!26765))

(declare-fun d!26767 () Bool)

(declare-fun lt!50259 () Bool)

(assert (=> d!26767 (= lt!50259 (select (content!103 Nil!1587) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64938 () Bool)

(assert (=> d!26767 (= lt!50259 e!64938)))

(declare-fun res!50051 () Bool)

(assert (=> d!26767 (=> (not res!50051) (not e!64938))))

(assert (=> d!26767 (= res!50051 ((_ is Cons!1586) Nil!1587))))

(assert (=> d!26767 (= (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) lt!50259)))

(declare-fun b!99692 () Bool)

(declare-fun e!64939 () Bool)

(assert (=> b!99692 (= e!64938 e!64939)))

(declare-fun res!50050 () Bool)

(assert (=> b!99692 (=> res!50050 e!64939)))

(assert (=> b!99692 (= res!50050 (= (h!2181 Nil!1587) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99693 () Bool)

(assert (=> b!99693 (= e!64939 (contains!800 (t!5555 Nil!1587) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26767 res!50051) b!99692))

(assert (= (and b!99692 (not res!50050)) b!99693))

(assert (=> d!26767 m!109401))

(assert (=> d!26767 m!108993))

(declare-fun m!109527 () Bool)

(assert (=> d!26767 m!109527))

(assert (=> b!99693 m!108993))

(declare-fun m!109529 () Bool)

(assert (=> b!99693 m!109529))

(assert (=> b!99487 d!26767))

(declare-fun d!26769 () Bool)

(assert (=> d!26769 (= (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915)) (not (isEmpty!364 (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))))

(declare-fun bs!4106 () Bool)

(assert (= bs!4106 d!26769))

(assert (=> bs!4106 m!108969))

(declare-fun m!109531 () Bool)

(assert (=> bs!4106 m!109531))

(assert (=> b!99311 d!26769))

(declare-fun b!99697 () Bool)

(declare-fun e!64941 () Option!155)

(assert (=> b!99697 (= e!64941 None!153)))

(declare-fun b!99696 () Bool)

(assert (=> b!99696 (= e!64941 (getValueByKey!149 (t!5556 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!49915))))

(declare-fun d!26771 () Bool)

(declare-fun c!17039 () Bool)

(assert (=> d!26771 (= c!17039 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49915)))))

(declare-fun e!64940 () Option!155)

(assert (=> d!26771 (= (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915) e!64940)))

(declare-fun b!99694 () Bool)

(assert (=> b!99694 (= e!64940 (Some!154 (_2!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(declare-fun b!99695 () Bool)

(assert (=> b!99695 (= e!64940 e!64941)))

(declare-fun c!17040 () Bool)

(assert (=> b!99695 (= c!17040 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (not (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49915))))))

(assert (= (and d!26771 c!17039) b!99694))

(assert (= (and d!26771 (not c!17039)) b!99695))

(assert (= (and b!99695 c!17040) b!99696))

(assert (= (and b!99695 (not c!17040)) b!99697))

(declare-fun m!109533 () Bool)

(assert (=> b!99696 m!109533))

(assert (=> b!99311 d!26771))

(assert (=> b!99344 d!26735))

(assert (=> b!99548 d!26735))

(declare-fun d!26773 () Bool)

(declare-fun res!50053 () Bool)

(declare-fun e!64943 () Bool)

(assert (=> d!26773 (=> res!50053 e!64943)))

(assert (=> d!26773 (= res!50053 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26773 (= (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16979 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587))) e!64943)))

(declare-fun call!10255 () Bool)

(declare-fun c!17041 () Bool)

(declare-fun bm!10252 () Bool)

(assert (=> bm!10252 (= call!10255 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17041 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16979 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587))) (ite c!16979 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)))))))

(declare-fun b!99698 () Bool)

(declare-fun e!64944 () Bool)

(assert (=> b!99698 (= e!64944 call!10255)))

(declare-fun b!99699 () Bool)

(declare-fun e!64945 () Bool)

(assert (=> b!99699 (= e!64945 (contains!800 (ite c!16979 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!99700 () Bool)

(declare-fun e!64942 () Bool)

(assert (=> b!99700 (= e!64943 e!64942)))

(declare-fun res!50054 () Bool)

(assert (=> b!99700 (=> (not res!50054) (not e!64942))))

(assert (=> b!99700 (= res!50054 (not e!64945))))

(declare-fun res!50052 () Bool)

(assert (=> b!99700 (=> (not res!50052) (not e!64945))))

(assert (=> b!99700 (= res!50052 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!99701 () Bool)

(assert (=> b!99701 (= e!64944 call!10255)))

(declare-fun b!99702 () Bool)

(assert (=> b!99702 (= e!64942 e!64944)))

(assert (=> b!99702 (= c!17041 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!26773 (not res!50053)) b!99700))

(assert (= (and b!99700 res!50052) b!99699))

(assert (= (and b!99700 res!50054) b!99702))

(assert (= (and b!99702 c!17041) b!99701))

(assert (= (and b!99702 (not c!17041)) b!99698))

(assert (= (or b!99701 b!99698) bm!10252))

(declare-fun m!109535 () Bool)

(assert (=> bm!10252 m!109535))

(declare-fun m!109537 () Bool)

(assert (=> bm!10252 m!109537))

(assert (=> b!99699 m!109535))

(assert (=> b!99699 m!109535))

(declare-fun m!109539 () Bool)

(assert (=> b!99699 m!109539))

(assert (=> b!99700 m!109535))

(assert (=> b!99700 m!109535))

(declare-fun m!109541 () Bool)

(assert (=> b!99700 m!109541))

(assert (=> b!99702 m!109535))

(assert (=> b!99702 m!109535))

(assert (=> b!99702 m!109541))

(assert (=> bm!10223 d!26773))

(declare-fun d!26775 () Bool)

(declare-fun lt!50260 () Bool)

(assert (=> d!26775 (= lt!50260 (select (content!104 (toList!774 lt!49968)) (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun e!64947 () Bool)

(assert (=> d!26775 (= lt!50260 e!64947)))

(declare-fun res!50055 () Bool)

(assert (=> d!26775 (=> (not res!50055) (not e!64947))))

(assert (=> d!26775 (= res!50055 ((_ is Cons!1587) (toList!774 lt!49968)))))

(assert (=> d!26775 (= (contains!801 (toList!774 lt!49968) (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50260)))

(declare-fun b!99703 () Bool)

(declare-fun e!64946 () Bool)

(assert (=> b!99703 (= e!64947 e!64946)))

(declare-fun res!50056 () Bool)

(assert (=> b!99703 (=> res!50056 e!64946)))

(assert (=> b!99703 (= res!50056 (= (h!2182 (toList!774 lt!49968)) (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99704 () Bool)

(assert (=> b!99704 (= e!64946 (contains!801 (t!5556 (toList!774 lt!49968)) (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26775 res!50055) b!99703))

(assert (= (and b!99703 (not res!50056)) b!99704))

(declare-fun m!109543 () Bool)

(assert (=> d!26775 m!109543))

(declare-fun m!109545 () Bool)

(assert (=> d!26775 m!109545))

(declare-fun m!109547 () Bool)

(assert (=> b!99704 m!109547))

(assert (=> b!99308 d!26775))

(declare-fun d!26777 () Bool)

(assert (=> d!26777 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun lt!50261 () Unit!2998)

(assert (=> d!26777 (= lt!50261 (choose!617 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!64948 () Bool)

(assert (=> d!26777 e!64948))

(declare-fun res!50057 () Bool)

(assert (=> d!26777 (=> (not res!50057) (not e!64948))))

(assert (=> d!26777 (= res!50057 (isStrictlySorted!300 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))))

(assert (=> d!26777 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50261)))

(declare-fun b!99705 () Bool)

(assert (=> b!99705 (= e!64948 (containsKey!153 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26777 res!50057) b!99705))

(assert (=> d!26777 m!108591))

(assert (=> d!26777 m!109213))

(assert (=> d!26777 m!109213))

(assert (=> d!26777 m!109215))

(assert (=> d!26777 m!108591))

(declare-fun m!109549 () Bool)

(assert (=> d!26777 m!109549))

(declare-fun m!109551 () Bool)

(assert (=> d!26777 m!109551))

(assert (=> b!99705 m!108591))

(assert (=> b!99705 m!109209))

(assert (=> b!99472 d!26777))

(declare-fun d!26779 () Bool)

(assert (=> d!26779 (= (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) (not (isEmpty!364 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(declare-fun bs!4107 () Bool)

(assert (= bs!4107 d!26779))

(assert (=> bs!4107 m!109213))

(declare-fun m!109553 () Bool)

(assert (=> bs!4107 m!109553))

(assert (=> b!99472 d!26779))

(declare-fun b!99709 () Bool)

(declare-fun e!64950 () Option!155)

(assert (=> b!99709 (= e!64950 None!153)))

(declare-fun b!99708 () Bool)

(assert (=> b!99708 (= e!64950 (getValueByKey!149 (t!5556 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun c!17042 () Bool)

(declare-fun d!26781 () Bool)

(assert (=> d!26781 (= c!17042 (and ((_ is Cons!1587) (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (= (_1!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun e!64949 () Option!155)

(assert (=> d!26781 (= (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!64949)))

(declare-fun b!99706 () Bool)

(assert (=> b!99706 (= e!64949 (Some!154 (_2!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))))))

(declare-fun b!99707 () Bool)

(assert (=> b!99707 (= e!64949 e!64950)))

(declare-fun c!17043 () Bool)

(assert (=> b!99707 (= c!17043 (and ((_ is Cons!1587) (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (not (= (_1!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(assert (= (and d!26781 c!17042) b!99706))

(assert (= (and d!26781 (not c!17042)) b!99707))

(assert (= (and b!99707 c!17043) b!99708))

(assert (= (and b!99707 (not c!17043)) b!99709))

(assert (=> b!99708 m!108591))

(declare-fun m!109555 () Bool)

(assert (=> b!99708 m!109555))

(assert (=> b!99472 d!26781))

(declare-fun d!26783 () Bool)

(declare-fun e!64951 () Bool)

(assert (=> d!26783 e!64951))

(declare-fun res!50058 () Bool)

(assert (=> d!26783 (=> res!50058 e!64951)))

(declare-fun lt!50263 () Bool)

(assert (=> d!26783 (= res!50058 (not lt!50263))))

(declare-fun lt!50262 () Bool)

(assert (=> d!26783 (= lt!50263 lt!50262)))

(declare-fun lt!50265 () Unit!2998)

(declare-fun e!64952 () Unit!2998)

(assert (=> d!26783 (= lt!50265 e!64952)))

(declare-fun c!17044 () Bool)

(assert (=> d!26783 (= c!17044 lt!50262)))

(assert (=> d!26783 (= lt!50262 (containsKey!153 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!26783 (= (contains!799 lt!49963 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50263)))

(declare-fun b!99710 () Bool)

(declare-fun lt!50264 () Unit!2998)

(assert (=> b!99710 (= e!64952 lt!50264)))

(assert (=> b!99710 (= lt!50264 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> b!99710 (isDefined!103 (getValueByKey!149 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99711 () Bool)

(declare-fun Unit!3025 () Unit!2998)

(assert (=> b!99711 (= e!64952 Unit!3025)))

(declare-fun b!99712 () Bool)

(assert (=> b!99712 (= e!64951 (isDefined!103 (getValueByKey!149 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!26783 c!17044) b!99710))

(assert (= (and d!26783 (not c!17044)) b!99711))

(assert (= (and d!26783 (not res!50058)) b!99712))

(declare-fun m!109557 () Bool)

(assert (=> d!26783 m!109557))

(declare-fun m!109559 () Bool)

(assert (=> b!99710 m!109559))

(assert (=> b!99710 m!108945))

(assert (=> b!99710 m!108945))

(declare-fun m!109561 () Bool)

(assert (=> b!99710 m!109561))

(assert (=> b!99712 m!108945))

(assert (=> b!99712 m!108945))

(assert (=> b!99712 m!109561))

(assert (=> d!26613 d!26783))

(declare-fun b!99716 () Bool)

(declare-fun e!64954 () Option!155)

(assert (=> b!99716 (= e!64954 None!153)))

(declare-fun b!99715 () Bool)

(assert (=> b!99715 (= e!64954 (getValueByKey!149 (t!5556 lt!49964) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun c!17045 () Bool)

(declare-fun d!26785 () Bool)

(assert (=> d!26785 (= c!17045 (and ((_ is Cons!1587) lt!49964) (= (_1!1177 (h!2182 lt!49964)) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!64953 () Option!155)

(assert (=> d!26785 (= (getValueByKey!149 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!64953)))

(declare-fun b!99713 () Bool)

(assert (=> b!99713 (= e!64953 (Some!154 (_2!1177 (h!2182 lt!49964))))))

(declare-fun b!99714 () Bool)

(assert (=> b!99714 (= e!64953 e!64954)))

(declare-fun c!17046 () Bool)

(assert (=> b!99714 (= c!17046 (and ((_ is Cons!1587) lt!49964) (not (= (_1!1177 (h!2182 lt!49964)) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!26785 c!17045) b!99713))

(assert (= (and d!26785 (not c!17045)) b!99714))

(assert (= (and b!99714 c!17046) b!99715))

(assert (= (and b!99714 (not c!17046)) b!99716))

(declare-fun m!109563 () Bool)

(assert (=> b!99715 m!109563))

(assert (=> d!26613 d!26785))

(declare-fun d!26787 () Bool)

(assert (=> d!26787 (= (getValueByKey!149 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50266 () Unit!2998)

(assert (=> d!26787 (= lt!50266 (choose!618 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!64955 () Bool)

(assert (=> d!26787 e!64955))

(declare-fun res!50059 () Bool)

(assert (=> d!26787 (=> (not res!50059) (not e!64955))))

(assert (=> d!26787 (= res!50059 (isStrictlySorted!300 lt!49964))))

(assert (=> d!26787 (= (lemmaContainsTupThenGetReturnValue!68 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50266)))

(declare-fun b!99717 () Bool)

(declare-fun res!50060 () Bool)

(assert (=> b!99717 (=> (not res!50060) (not e!64955))))

(assert (=> b!99717 (= res!50060 (containsKey!153 lt!49964 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99718 () Bool)

(assert (=> b!99718 (= e!64955 (contains!801 lt!49964 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!26787 res!50059) b!99717))

(assert (= (and b!99717 res!50060) b!99718))

(assert (=> d!26787 m!108939))

(declare-fun m!109565 () Bool)

(assert (=> d!26787 m!109565))

(declare-fun m!109567 () Bool)

(assert (=> d!26787 m!109567))

(declare-fun m!109569 () Bool)

(assert (=> b!99717 m!109569))

(declare-fun m!109571 () Bool)

(assert (=> b!99718 m!109571))

(assert (=> d!26613 d!26787))

(declare-fun bm!10253 () Bool)

(declare-fun call!10257 () List!1591)

(declare-fun call!10256 () List!1591)

(assert (=> bm!10253 (= call!10257 call!10256)))

(declare-fun d!26789 () Bool)

(declare-fun e!64957 () Bool)

(assert (=> d!26789 e!64957))

(declare-fun res!50062 () Bool)

(assert (=> d!26789 (=> (not res!50062) (not e!64957))))

(declare-fun lt!50267 () List!1591)

(assert (=> d!26789 (= res!50062 (isStrictlySorted!300 lt!50267))))

(declare-fun e!64959 () List!1591)

(assert (=> d!26789 (= lt!50267 e!64959)))

(declare-fun c!17050 () Bool)

(assert (=> d!26789 (= c!17050 (and ((_ is Cons!1587) (toList!774 lt!49903)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49903))) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!26789 (isStrictlySorted!300 (toList!774 lt!49903))))

(assert (=> d!26789 (= (insertStrictlySorted!71 (toList!774 lt!49903) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50267)))

(declare-fun e!64956 () List!1591)

(declare-fun b!99719 () Bool)

(assert (=> b!99719 (= e!64956 (insertStrictlySorted!71 (t!5556 (toList!774 lt!49903)) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99720 () Bool)

(declare-fun e!64958 () List!1591)

(declare-fun call!10258 () List!1591)

(assert (=> b!99720 (= e!64958 call!10258)))

(declare-fun b!99721 () Bool)

(assert (=> b!99721 (= e!64958 call!10258)))

(declare-fun b!99722 () Bool)

(assert (=> b!99722 (= e!64959 call!10256)))

(declare-fun b!99723 () Bool)

(declare-fun res!50061 () Bool)

(assert (=> b!99723 (=> (not res!50061) (not e!64957))))

(assert (=> b!99723 (= res!50061 (containsKey!153 lt!50267 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!99724 () Bool)

(declare-fun e!64960 () List!1591)

(assert (=> b!99724 (= e!64959 e!64960)))

(declare-fun c!17048 () Bool)

(assert (=> b!99724 (= c!17048 (and ((_ is Cons!1587) (toList!774 lt!49903)) (= (_1!1177 (h!2182 (toList!774 lt!49903))) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!99725 () Bool)

(assert (=> b!99725 (= e!64957 (contains!801 lt!50267 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun bm!10254 () Bool)

(assert (=> bm!10254 (= call!10258 call!10257)))

(declare-fun bm!10255 () Bool)

(assert (=> bm!10255 (= call!10256 ($colon$colon!78 e!64956 (ite c!17050 (h!2182 (toList!774 lt!49903)) (tuple2!2333 (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun c!17047 () Bool)

(assert (=> bm!10255 (= c!17047 c!17050)))

(declare-fun b!99726 () Bool)

(assert (=> b!99726 (= e!64960 call!10257)))

(declare-fun b!99727 () Bool)

(declare-fun c!17049 () Bool)

(assert (=> b!99727 (= e!64956 (ite c!17048 (t!5556 (toList!774 lt!49903)) (ite c!17049 (Cons!1587 (h!2182 (toList!774 lt!49903)) (t!5556 (toList!774 lt!49903))) Nil!1588)))))

(declare-fun b!99728 () Bool)

(assert (=> b!99728 (= c!17049 (and ((_ is Cons!1587) (toList!774 lt!49903)) (bvsgt (_1!1177 (h!2182 (toList!774 lt!49903))) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!99728 (= e!64960 e!64958)))

(assert (= (and d!26789 c!17050) b!99722))

(assert (= (and d!26789 (not c!17050)) b!99724))

(assert (= (and b!99724 c!17048) b!99726))

(assert (= (and b!99724 (not c!17048)) b!99728))

(assert (= (and b!99728 c!17049) b!99721))

(assert (= (and b!99728 (not c!17049)) b!99720))

(assert (= (or b!99721 b!99720) bm!10254))

(assert (= (or b!99726 bm!10254) bm!10253))

(assert (= (or b!99722 bm!10253) bm!10255))

(assert (= (and bm!10255 c!17047) b!99719))

(assert (= (and bm!10255 (not c!17047)) b!99727))

(assert (= (and d!26789 res!50062) b!99723))

(assert (= (and b!99723 res!50061) b!99725))

(declare-fun m!109573 () Bool)

(assert (=> d!26789 m!109573))

(declare-fun m!109575 () Bool)

(assert (=> d!26789 m!109575))

(declare-fun m!109577 () Bool)

(assert (=> b!99723 m!109577))

(declare-fun m!109579 () Bool)

(assert (=> b!99725 m!109579))

(declare-fun m!109581 () Bool)

(assert (=> bm!10255 m!109581))

(declare-fun m!109583 () Bool)

(assert (=> b!99719 m!109583))

(assert (=> d!26613 d!26789))

(declare-fun b!99732 () Bool)

(declare-fun e!64961 () Bool)

(assert (=> b!99732 (= e!64961 (and (bvsge (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!477 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!99729 () Bool)

(declare-fun res!50066 () Bool)

(assert (=> b!99729 (=> (not res!50066) (not e!64961))))

(assert (=> b!99729 (= res!50066 (and (= (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001)) (= (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992))))) (bvsge (_size!477 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!477 (v!2807 (underlying!334 thiss!992))) (bvadd (mask!6607 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!99731 () Bool)

(declare-fun res!50065 () Bool)

(assert (=> b!99731 (=> (not res!50065) (not e!64961))))

(assert (=> b!99731 (= res!50065 (= (size!2266 (v!2807 (underlying!334 thiss!992))) (bvadd (_size!477 (v!2807 (underlying!334 thiss!992))) (bvsdiv (bvadd (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!99730 () Bool)

(declare-fun res!50063 () Bool)

(assert (=> b!99730 (=> (not res!50063) (not e!64961))))

(assert (=> b!99730 (= res!50063 (bvsge (size!2266 (v!2807 (underlying!334 thiss!992))) (_size!477 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun d!26791 () Bool)

(declare-fun res!50064 () Bool)

(assert (=> d!26791 (=> (not res!50064) (not e!64961))))

(assert (=> d!26791 (= res!50064 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992)))))))

(assert (=> d!26791 (= (simpleValid!69 (v!2807 (underlying!334 thiss!992))) e!64961)))

(assert (= (and d!26791 res!50064) b!99729))

(assert (= (and b!99729 res!50066) b!99730))

(assert (= (and b!99730 res!50063) b!99731))

(assert (= (and b!99731 res!50065) b!99732))

(declare-fun m!109585 () Bool)

(assert (=> b!99731 m!109585))

(assert (=> b!99730 m!109585))

(assert (=> d!26791 m!108579))

(assert (=> d!26707 d!26791))

(assert (=> b!99454 d!26571))

(declare-fun d!26793 () Bool)

(assert (=> d!26793 (= (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49907)) (v!2813 (getValueByKey!149 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49907)))))

(assert (=> d!26623 d!26793))

(declare-fun b!99736 () Bool)

(declare-fun e!64963 () Option!155)

(assert (=> b!99736 (= e!64963 None!153)))

(declare-fun b!99735 () Bool)

(assert (=> b!99735 (= e!64963 (getValueByKey!149 (t!5556 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!49907))))

(declare-fun c!17051 () Bool)

(declare-fun d!26795 () Bool)

(assert (=> d!26795 (= c!17051 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49907)))))

(declare-fun e!64962 () Option!155)

(assert (=> d!26795 (= (getValueByKey!149 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49907) e!64962)))

(declare-fun b!99733 () Bool)

(assert (=> b!99733 (= e!64962 (Some!154 (_2!1177 (h!2182 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(declare-fun b!99734 () Bool)

(assert (=> b!99734 (= e!64962 e!64963)))

(declare-fun c!17052 () Bool)

(assert (=> b!99734 (= c!17052 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (not (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49907))))))

(assert (= (and d!26795 c!17051) b!99733))

(assert (= (and d!26795 (not c!17051)) b!99734))

(assert (= (and b!99734 c!17052) b!99735))

(assert (= (and b!99734 (not c!17052)) b!99736))

(declare-fun m!109587 () Bool)

(assert (=> b!99735 m!109587))

(assert (=> d!26623 d!26795))

(declare-fun d!26797 () Bool)

(assert (=> d!26797 (= (apply!93 lt!50170 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1294 (getValueByKey!149 (toList!774 lt!50170) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4108 () Bool)

(assert (= bs!4108 d!26797))

(assert (=> bs!4108 m!108993))

(declare-fun m!109589 () Bool)

(assert (=> bs!4108 m!109589))

(assert (=> bs!4108 m!109589))

(declare-fun m!109591 () Bool)

(assert (=> bs!4108 m!109591))

(assert (=> b!99522 d!26797))

(declare-fun c!17053 () Bool)

(declare-fun d!26799 () Bool)

(assert (=> d!26799 (= c!17053 ((_ is ValueCellFull!974) (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000)))))

(declare-fun e!64964 () V!3161)

(assert (=> d!26799 (= (get!1291 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64964)))

(declare-fun b!99737 () Bool)

(assert (=> b!99737 (= e!64964 (get!1292 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99738 () Bool)

(assert (=> b!99738 (= e!64964 (get!1293 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26799 c!17053) b!99737))

(assert (= (and d!26799 (not c!17053)) b!99738))

(assert (=> b!99737 m!109281))

(assert (=> b!99737 m!109007))

(declare-fun m!109593 () Bool)

(assert (=> b!99737 m!109593))

(assert (=> b!99738 m!109281))

(assert (=> b!99738 m!109007))

(declare-fun m!109595 () Bool)

(assert (=> b!99738 m!109595))

(assert (=> b!99522 d!26799))

(declare-fun d!26801 () Bool)

(declare-fun res!50068 () Bool)

(declare-fun e!64966 () Bool)

(assert (=> d!26801 (=> res!50068 e!64966)))

(assert (=> d!26801 (= res!50068 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (=> d!26801 (= (arrayNoDuplicates!0 (_keys!4194 (_2!1178 lt!49828)) #b00000000000000000000000000000000 Nil!1587) e!64966)))

(declare-fun bm!10256 () Bool)

(declare-fun call!10259 () Bool)

(declare-fun c!17054 () Bool)

(assert (=> bm!10256 (= call!10259 (arrayNoDuplicates!0 (_keys!4194 (_2!1178 lt!49828)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17054 (Cons!1586 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000) Nil!1587) Nil!1587)))))

(declare-fun b!99739 () Bool)

(declare-fun e!64967 () Bool)

(assert (=> b!99739 (= e!64967 call!10259)))

(declare-fun b!99740 () Bool)

(declare-fun e!64968 () Bool)

(assert (=> b!99740 (= e!64968 (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun b!99741 () Bool)

(declare-fun e!64965 () Bool)

(assert (=> b!99741 (= e!64966 e!64965)))

(declare-fun res!50069 () Bool)

(assert (=> b!99741 (=> (not res!50069) (not e!64965))))

(assert (=> b!99741 (= res!50069 (not e!64968))))

(declare-fun res!50067 () Bool)

(assert (=> b!99741 (=> (not res!50067) (not e!64968))))

(assert (=> b!99741 (= res!50067 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun b!99742 () Bool)

(assert (=> b!99742 (= e!64967 call!10259)))

(declare-fun b!99743 () Bool)

(assert (=> b!99743 (= e!64965 e!64967)))

(assert (=> b!99743 (= c!17054 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(assert (= (and d!26801 (not res!50068)) b!99741))

(assert (= (and b!99741 res!50067) b!99740))

(assert (= (and b!99741 res!50069) b!99743))

(assert (= (and b!99743 c!17054) b!99742))

(assert (= (and b!99743 (not c!17054)) b!99739))

(assert (= (or b!99742 b!99739) bm!10256))

(declare-fun m!109597 () Bool)

(assert (=> bm!10256 m!109597))

(declare-fun m!109599 () Bool)

(assert (=> bm!10256 m!109599))

(assert (=> b!99740 m!109597))

(assert (=> b!99740 m!109597))

(declare-fun m!109601 () Bool)

(assert (=> b!99740 m!109601))

(assert (=> b!99741 m!109597))

(assert (=> b!99741 m!109597))

(declare-fun m!109603 () Bool)

(assert (=> b!99741 m!109603))

(assert (=> b!99743 m!109597))

(assert (=> b!99743 m!109597))

(assert (=> b!99743 m!109603))

(assert (=> b!99314 d!26801))

(declare-fun d!26803 () Bool)

(declare-fun lt!50268 () Bool)

(assert (=> d!26803 (= lt!50268 (select (content!104 (toList!774 lt!50151)) (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64970 () Bool)

(assert (=> d!26803 (= lt!50268 e!64970)))

(declare-fun res!50070 () Bool)

(assert (=> d!26803 (=> (not res!50070) (not e!64970))))

(assert (=> d!26803 (= res!50070 ((_ is Cons!1587) (toList!774 lt!50151)))))

(assert (=> d!26803 (= (contains!801 (toList!774 lt!50151) (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50268)))

(declare-fun b!99744 () Bool)

(declare-fun e!64969 () Bool)

(assert (=> b!99744 (= e!64970 e!64969)))

(declare-fun res!50071 () Bool)

(assert (=> b!99744 (=> res!50071 e!64969)))

(assert (=> b!99744 (= res!50071 (= (h!2182 (toList!774 lt!50151)) (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99745 () Bool)

(assert (=> b!99745 (= e!64969 (contains!801 (t!5556 (toList!774 lt!50151)) (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26803 res!50070) b!99744))

(assert (= (and b!99744 (not res!50071)) b!99745))

(declare-fun m!109605 () Bool)

(assert (=> d!26803 m!109605))

(declare-fun m!109607 () Bool)

(assert (=> d!26803 m!109607))

(declare-fun m!109609 () Bool)

(assert (=> b!99745 m!109609))

(assert (=> b!99476 d!26803))

(declare-fun b!99749 () Bool)

(declare-fun e!64971 () Bool)

(assert (=> b!99749 (= e!64971 (and (bvsge (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000011) (bvsge (_vacant!477 (_2!1178 lt!49828)) #b00000000000000000000000000000000)))))

(declare-fun b!99746 () Bool)

(declare-fun res!50075 () Bool)

(assert (=> b!99746 (=> (not res!50075) (not e!64971))))

(assert (=> b!99746 (= res!50075 (and (= (size!2261 (_values!2484 (_2!1178 lt!49828))) (bvadd (mask!6607 (_2!1178 lt!49828)) #b00000000000000000000000000000001)) (= (size!2260 (_keys!4194 (_2!1178 lt!49828))) (size!2261 (_values!2484 (_2!1178 lt!49828)))) (bvsge (_size!477 (_2!1178 lt!49828)) #b00000000000000000000000000000000) (bvsle (_size!477 (_2!1178 lt!49828)) (bvadd (mask!6607 (_2!1178 lt!49828)) #b00000000000000000000000000000001))))))

(declare-fun b!99748 () Bool)

(declare-fun res!50074 () Bool)

(assert (=> b!99748 (=> (not res!50074) (not e!64971))))

(assert (=> b!99748 (= res!50074 (= (size!2266 (_2!1178 lt!49828)) (bvadd (_size!477 (_2!1178 lt!49828)) (bvsdiv (bvadd (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!99747 () Bool)

(declare-fun res!50072 () Bool)

(assert (=> b!99747 (=> (not res!50072) (not e!64971))))

(assert (=> b!99747 (= res!50072 (bvsge (size!2266 (_2!1178 lt!49828)) (_size!477 (_2!1178 lt!49828))))))

(declare-fun d!26805 () Bool)

(declare-fun res!50073 () Bool)

(assert (=> d!26805 (=> (not res!50073) (not e!64971))))

(assert (=> d!26805 (= res!50073 (validMask!0 (mask!6607 (_2!1178 lt!49828))))))

(assert (=> d!26805 (= (simpleValid!69 (_2!1178 lt!49828)) e!64971)))

(assert (= (and d!26805 res!50073) b!99746))

(assert (= (and b!99746 res!50075) b!99747))

(assert (= (and b!99747 res!50072) b!99748))

(assert (= (and b!99748 res!50074) b!99749))

(declare-fun m!109611 () Bool)

(assert (=> b!99748 m!109611))

(assert (=> b!99747 m!109611))

(declare-fun m!109613 () Bool)

(assert (=> d!26805 m!109613))

(assert (=> d!26627 d!26805))

(declare-fun d!26807 () Bool)

(assert (=> d!26807 (isDefined!103 (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun lt!50269 () Unit!2998)

(assert (=> d!26807 (= lt!50269 (choose!617 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!64972 () Bool)

(assert (=> d!26807 e!64972))

(declare-fun res!50076 () Bool)

(assert (=> d!26807 (=> (not res!50076) (not e!64972))))

(assert (=> d!26807 (= res!50076 (isStrictlySorted!300 (toList!774 call!10164)))))

(assert (=> d!26807 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50269)))

(declare-fun b!99750 () Bool)

(assert (=> b!99750 (= e!64972 (containsKey!153 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26807 res!50076) b!99750))

(assert (=> d!26807 m!108591))

(assert (=> d!26807 m!109237))

(assert (=> d!26807 m!109237))

(assert (=> d!26807 m!109239))

(assert (=> d!26807 m!108591))

(declare-fun m!109615 () Bool)

(assert (=> d!26807 m!109615))

(declare-fun m!109617 () Bool)

(assert (=> d!26807 m!109617))

(assert (=> b!99750 m!108591))

(assert (=> b!99750 m!109233))

(assert (=> b!99479 d!26807))

(declare-fun d!26809 () Bool)

(assert (=> d!26809 (= (isDefined!103 (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) (not (isEmpty!364 (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(declare-fun bs!4109 () Bool)

(assert (= bs!4109 d!26809))

(assert (=> bs!4109 m!109237))

(declare-fun m!109619 () Bool)

(assert (=> bs!4109 m!109619))

(assert (=> b!99479 d!26809))

(declare-fun b!99754 () Bool)

(declare-fun e!64974 () Option!155)

(assert (=> b!99754 (= e!64974 None!153)))

(declare-fun b!99753 () Bool)

(assert (=> b!99753 (= e!64974 (getValueByKey!149 (t!5556 (toList!774 call!10164)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun d!26811 () Bool)

(declare-fun c!17055 () Bool)

(assert (=> d!26811 (= c!17055 (and ((_ is Cons!1587) (toList!774 call!10164)) (= (_1!1177 (h!2182 (toList!774 call!10164))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun e!64973 () Option!155)

(assert (=> d!26811 (= (getValueByKey!149 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!64973)))

(declare-fun b!99751 () Bool)

(assert (=> b!99751 (= e!64973 (Some!154 (_2!1177 (h!2182 (toList!774 call!10164)))))))

(declare-fun b!99752 () Bool)

(assert (=> b!99752 (= e!64973 e!64974)))

(declare-fun c!17056 () Bool)

(assert (=> b!99752 (= c!17056 (and ((_ is Cons!1587) (toList!774 call!10164)) (not (= (_1!1177 (h!2182 (toList!774 call!10164))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(assert (= (and d!26811 c!17055) b!99751))

(assert (= (and d!26811 (not c!17055)) b!99752))

(assert (= (and b!99752 c!17056) b!99753))

(assert (= (and b!99752 (not c!17056)) b!99754))

(assert (=> b!99753 m!108591))

(declare-fun m!109621 () Bool)

(assert (=> b!99753 m!109621))

(assert (=> b!99479 d!26811))

(declare-fun d!26813 () Bool)

(declare-fun res!50077 () Bool)

(declare-fun e!64975 () Bool)

(assert (=> d!26813 (=> res!50077 e!64975)))

(assert (=> d!26813 (= res!50077 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49915)))))

(assert (=> d!26813 (= (containsKey!153 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915) e!64975)))

(declare-fun b!99755 () Bool)

(declare-fun e!64976 () Bool)

(assert (=> b!99755 (= e!64975 e!64976)))

(declare-fun res!50078 () Bool)

(assert (=> b!99755 (=> (not res!50078) (not e!64976))))

(assert (=> b!99755 (= res!50078 (and (or (not ((_ is Cons!1587) (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) (bvsle (_1!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49915)) ((_ is Cons!1587) (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) (bvslt (_1!1177 (h!2182 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49915)))))

(declare-fun b!99756 () Bool)

(assert (=> b!99756 (= e!64976 (containsKey!153 (t!5556 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!49915))))

(assert (= (and d!26813 (not res!50077)) b!99755))

(assert (= (and b!99755 res!50078) b!99756))

(declare-fun m!109623 () Bool)

(assert (=> b!99756 m!109623))

(assert (=> d!26619 d!26813))

(declare-fun d!26815 () Bool)

(assert (=> d!26815 (= (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49912)) (v!2813 (getValueByKey!149 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49912)))))

(assert (=> d!26621 d!26815))

(declare-fun b!99760 () Bool)

(declare-fun e!64978 () Option!155)

(assert (=> b!99760 (= e!64978 None!153)))

(declare-fun b!99759 () Bool)

(assert (=> b!99759 (= e!64978 (getValueByKey!149 (t!5556 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!49912))))

(declare-fun d!26817 () Bool)

(declare-fun c!17057 () Bool)

(assert (=> d!26817 (= c!17057 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49912)))))

(declare-fun e!64977 () Option!155)

(assert (=> d!26817 (= (getValueByKey!149 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49912) e!64977)))

(declare-fun b!99757 () Bool)

(assert (=> b!99757 (= e!64977 (Some!154 (_2!1177 (h!2182 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(declare-fun b!99758 () Bool)

(assert (=> b!99758 (= e!64977 e!64978)))

(declare-fun c!17058 () Bool)

(assert (=> b!99758 (= c!17058 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (not (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49912))))))

(assert (= (and d!26817 c!17057) b!99757))

(assert (= (and d!26817 (not c!17057)) b!99758))

(assert (= (and b!99758 c!17058) b!99759))

(assert (= (and b!99758 (not c!17058)) b!99760))

(declare-fun m!109625 () Bool)

(assert (=> b!99759 m!109625))

(assert (=> d!26621 d!26817))

(assert (=> d!26713 d!26703))

(assert (=> d!26713 d!26705))

(declare-fun d!26819 () Bool)

(assert (=> d!26819 (isDefined!103 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26819 true))

(declare-fun _$12!347 () Unit!2998)

(assert (=> d!26819 (= (choose!617 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) _$12!347)))

(declare-fun bs!4110 () Bool)

(assert (= bs!4110 d!26819))

(assert (=> bs!4110 m!108591))

(assert (=> bs!4110 m!108741))

(assert (=> bs!4110 m!108741))

(assert (=> bs!4110 m!108743))

(assert (=> d!26713 d!26819))

(declare-fun d!26821 () Bool)

(declare-fun res!50083 () Bool)

(declare-fun e!64983 () Bool)

(assert (=> d!26821 (=> res!50083 e!64983)))

(assert (=> d!26821 (= res!50083 (or ((_ is Nil!1588) (toList!774 lt!49704)) ((_ is Nil!1588) (t!5556 (toList!774 lt!49704)))))))

(assert (=> d!26821 (= (isStrictlySorted!300 (toList!774 lt!49704)) e!64983)))

(declare-fun b!99765 () Bool)

(declare-fun e!64984 () Bool)

(assert (=> b!99765 (= e!64983 e!64984)))

(declare-fun res!50084 () Bool)

(assert (=> b!99765 (=> (not res!50084) (not e!64984))))

(assert (=> b!99765 (= res!50084 (bvslt (_1!1177 (h!2182 (toList!774 lt!49704))) (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704))))))))

(declare-fun b!99766 () Bool)

(assert (=> b!99766 (= e!64984 (isStrictlySorted!300 (t!5556 (toList!774 lt!49704))))))

(assert (= (and d!26821 (not res!50083)) b!99765))

(assert (= (and b!99765 res!50084) b!99766))

(declare-fun m!109627 () Bool)

(assert (=> b!99766 m!109627))

(assert (=> d!26713 d!26821))

(declare-fun d!26823 () Bool)

(declare-fun e!64985 () Bool)

(assert (=> d!26823 e!64985))

(declare-fun res!50086 () Bool)

(assert (=> d!26823 (=> (not res!50086) (not e!64985))))

(declare-fun lt!50270 () ListLongMap!1517)

(assert (=> d!26823 (= res!50086 (contains!799 lt!50270 (_1!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50271 () List!1591)

(assert (=> d!26823 (= lt!50270 (ListLongMap!1518 lt!50271))))

(declare-fun lt!50272 () Unit!2998)

(declare-fun lt!50273 () Unit!2998)

(assert (=> d!26823 (= lt!50272 lt!50273)))

(assert (=> d!26823 (= (getValueByKey!149 lt!50271 (_1!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26823 (= lt!50273 (lemmaContainsTupThenGetReturnValue!68 lt!50271 (_1!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26823 (= lt!50271 (insertStrictlySorted!71 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26823 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50270)))

(declare-fun b!99767 () Bool)

(declare-fun res!50085 () Bool)

(assert (=> b!99767 (=> (not res!50085) (not e!64985))))

(assert (=> b!99767 (= res!50085 (= (getValueByKey!149 (toList!774 lt!50270) (_1!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99768 () Bool)

(assert (=> b!99768 (= e!64985 (contains!801 (toList!774 lt!50270) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26823 res!50086) b!99767))

(assert (= (and b!99767 res!50085) b!99768))

(declare-fun m!109629 () Bool)

(assert (=> d!26823 m!109629))

(declare-fun m!109631 () Bool)

(assert (=> d!26823 m!109631))

(declare-fun m!109633 () Bool)

(assert (=> d!26823 m!109633))

(declare-fun m!109635 () Bool)

(assert (=> d!26823 m!109635))

(declare-fun m!109637 () Bool)

(assert (=> b!99767 m!109637))

(declare-fun m!109639 () Bool)

(assert (=> b!99768 m!109639))

(assert (=> d!26659 d!26823))

(declare-fun d!26825 () Bool)

(assert (=> d!26825 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!26825 true))

(declare-fun _$7!86 () Unit!2998)

(assert (=> d!26825 (= (choose!613 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49841 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)) _$7!86)))

(declare-fun bs!4111 () Bool)

(assert (= bs!4111 d!26825))

(assert (=> bs!4111 m!108761))

(assert (=> bs!4111 m!108761))

(assert (=> bs!4111 m!109185))

(assert (=> bs!4111 m!108589))

(assert (=> bs!4111 m!109183))

(assert (=> d!26659 d!26825))

(assert (=> d!26659 d!26631))

(assert (=> d!26659 d!26717))

(declare-fun b!99769 () Bool)

(declare-fun e!64988 () Bool)

(declare-fun lt!50275 () ListLongMap!1517)

(assert (=> b!99769 (= e!64988 (= (apply!93 lt!50275 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10257 () Bool)

(declare-fun call!10266 () Bool)

(assert (=> bm!10257 (= call!10266 (contains!799 lt!50275 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99770 () Bool)

(declare-fun res!50095 () Bool)

(declare-fun e!64994 () Bool)

(assert (=> b!99770 (=> (not res!50095) (not e!64994))))

(declare-fun e!64987 () Bool)

(assert (=> b!99770 (= res!50095 e!64987)))

(declare-fun c!17059 () Bool)

(assert (=> b!99770 (= c!17059 (not (= (bvand lt!49841 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99771 () Bool)

(declare-fun e!64992 () Bool)

(assert (=> b!99771 (= e!64992 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99772 () Bool)

(declare-fun e!64993 () Bool)

(declare-fun e!64998 () Bool)

(assert (=> b!99772 (= e!64993 e!64998)))

(declare-fun res!50093 () Bool)

(assert (=> b!99772 (=> (not res!50093) (not e!64998))))

(assert (=> b!99772 (= res!50093 (contains!799 lt!50275 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99772 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99773 () Bool)

(declare-fun e!64990 () ListLongMap!1517)

(declare-fun call!10260 () ListLongMap!1517)

(assert (=> b!99773 (= e!64990 call!10260)))

(declare-fun b!99774 () Bool)

(declare-fun e!64996 () Bool)

(assert (=> b!99774 (= e!64996 (not call!10266))))

(declare-fun b!99775 () Bool)

(declare-fun e!64991 () ListLongMap!1517)

(assert (=> b!99775 (= e!64991 e!64990)))

(declare-fun c!17061 () Bool)

(assert (=> b!99775 (= c!17061 (and (not (= (bvand lt!49841 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!49841 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99776 () Bool)

(declare-fun c!17060 () Bool)

(assert (=> b!99776 (= c!17060 (and (not (= (bvand lt!49841 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!49841 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64995 () ListLongMap!1517)

(assert (=> b!99776 (= e!64990 e!64995)))

(declare-fun b!99777 () Bool)

(assert (=> b!99777 (= e!64995 call!10260)))

(declare-fun d!26827 () Bool)

(assert (=> d!26827 e!64994))

(declare-fun res!50094 () Bool)

(assert (=> d!26827 (=> (not res!50094) (not e!64994))))

(assert (=> d!26827 (= res!50094 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50277 () ListLongMap!1517)

(assert (=> d!26827 (= lt!50275 lt!50277)))

(declare-fun lt!50288 () Unit!2998)

(declare-fun e!64986 () Unit!2998)

(assert (=> d!26827 (= lt!50288 e!64986)))

(declare-fun c!17063 () Bool)

(declare-fun e!64989 () Bool)

(assert (=> d!26827 (= c!17063 e!64989)))

(declare-fun res!50087 () Bool)

(assert (=> d!26827 (=> (not res!50087) (not e!64989))))

(assert (=> d!26827 (= res!50087 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26827 (= lt!50277 e!64991)))

(declare-fun c!17062 () Bool)

(assert (=> d!26827 (= c!17062 (and (not (= (bvand lt!49841 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!49841 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26827 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26827 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50275)))

(declare-fun b!99778 () Bool)

(declare-fun lt!50278 () Unit!2998)

(assert (=> b!99778 (= e!64986 lt!50278)))

(declare-fun lt!50285 () ListLongMap!1517)

(assert (=> b!99778 (= lt!50285 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50294 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50294 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50292 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50292 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50283 () Unit!2998)

(assert (=> b!99778 (= lt!50283 (addStillContains!69 lt!50285 lt!50294 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50292))))

(assert (=> b!99778 (contains!799 (+!129 lt!50285 (tuple2!2333 lt!50294 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50292)))

(declare-fun lt!50287 () Unit!2998)

(assert (=> b!99778 (= lt!50287 lt!50283)))

(declare-fun lt!50280 () ListLongMap!1517)

(assert (=> b!99778 (= lt!50280 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50293 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50293 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50289 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50289 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50279 () Unit!2998)

(assert (=> b!99778 (= lt!50279 (addApplyDifferent!69 lt!50280 lt!50293 (minValue!2382 newMap!16) lt!50289))))

(assert (=> b!99778 (= (apply!93 (+!129 lt!50280 (tuple2!2333 lt!50293 (minValue!2382 newMap!16))) lt!50289) (apply!93 lt!50280 lt!50289))))

(declare-fun lt!50295 () Unit!2998)

(assert (=> b!99778 (= lt!50295 lt!50279)))

(declare-fun lt!50281 () ListLongMap!1517)

(assert (=> b!99778 (= lt!50281 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50291 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50291 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50284 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50284 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50286 () Unit!2998)

(assert (=> b!99778 (= lt!50286 (addApplyDifferent!69 lt!50281 lt!50291 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50284))))

(assert (=> b!99778 (= (apply!93 (+!129 lt!50281 (tuple2!2333 lt!50291 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50284) (apply!93 lt!50281 lt!50284))))

(declare-fun lt!50274 () Unit!2998)

(assert (=> b!99778 (= lt!50274 lt!50286)))

(declare-fun lt!50290 () ListLongMap!1517)

(assert (=> b!99778 (= lt!50290 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50276 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50276 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50282 () (_ BitVec 64))

(assert (=> b!99778 (= lt!50282 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99778 (= lt!50278 (addApplyDifferent!69 lt!50290 lt!50276 (minValue!2382 newMap!16) lt!50282))))

(assert (=> b!99778 (= (apply!93 (+!129 lt!50290 (tuple2!2333 lt!50276 (minValue!2382 newMap!16))) lt!50282) (apply!93 lt!50290 lt!50282))))

(declare-fun b!99779 () Bool)

(declare-fun call!10263 () Bool)

(assert (=> b!99779 (= e!64987 (not call!10263))))

(declare-fun b!99780 () Bool)

(declare-fun e!64997 () Bool)

(assert (=> b!99780 (= e!64987 e!64997)))

(declare-fun res!50089 () Bool)

(assert (=> b!99780 (= res!50089 call!10263)))

(assert (=> b!99780 (=> (not res!50089) (not e!64997))))

(declare-fun b!99781 () Bool)

(assert (=> b!99781 (= e!64998 (= (apply!93 lt!50275 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99781 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (_values!2484 newMap!16))))))

(assert (=> b!99781 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10264 () ListLongMap!1517)

(declare-fun call!10262 () ListLongMap!1517)

(declare-fun call!10265 () ListLongMap!1517)

(declare-fun bm!10258 () Bool)

(declare-fun call!10261 () ListLongMap!1517)

(assert (=> bm!10258 (= call!10262 (+!129 (ite c!17062 call!10264 (ite c!17061 call!10265 call!10261)) (ite (or c!17062 c!17061) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!99782 () Bool)

(assert (=> b!99782 (= e!64996 e!64988)))

(declare-fun res!50091 () Bool)

(assert (=> b!99782 (= res!50091 call!10266)))

(assert (=> b!99782 (=> (not res!50091) (not e!64988))))

(declare-fun bm!10259 () Bool)

(assert (=> bm!10259 (= call!10263 (contains!799 lt!50275 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10260 () Bool)

(assert (=> bm!10260 (= call!10260 call!10262)))

(declare-fun bm!10261 () Bool)

(assert (=> bm!10261 (= call!10264 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49841 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99783 () Bool)

(declare-fun Unit!3026 () Unit!2998)

(assert (=> b!99783 (= e!64986 Unit!3026)))

(declare-fun b!99784 () Bool)

(assert (=> b!99784 (= e!64997 (= (apply!93 lt!50275 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10262 () Bool)

(assert (=> bm!10262 (= call!10261 call!10265)))

(declare-fun b!99785 () Bool)

(assert (=> b!99785 (= e!64991 (+!129 call!10262 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99786 () Bool)

(assert (=> b!99786 (= e!64989 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99787 () Bool)

(declare-fun res!50092 () Bool)

(assert (=> b!99787 (=> (not res!50092) (not e!64994))))

(assert (=> b!99787 (= res!50092 e!64993)))

(declare-fun res!50088 () Bool)

(assert (=> b!99787 (=> res!50088 e!64993)))

(assert (=> b!99787 (= res!50088 (not e!64992))))

(declare-fun res!50090 () Bool)

(assert (=> b!99787 (=> (not res!50090) (not e!64992))))

(assert (=> b!99787 (= res!50090 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10263 () Bool)

(assert (=> bm!10263 (= call!10265 call!10264)))

(declare-fun b!99788 () Bool)

(assert (=> b!99788 (= e!64995 call!10261)))

(declare-fun b!99789 () Bool)

(assert (=> b!99789 (= e!64994 e!64996)))

(declare-fun c!17064 () Bool)

(assert (=> b!99789 (= c!17064 (not (= (bvand lt!49841 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26827 c!17062) b!99785))

(assert (= (and d!26827 (not c!17062)) b!99775))

(assert (= (and b!99775 c!17061) b!99773))

(assert (= (and b!99775 (not c!17061)) b!99776))

(assert (= (and b!99776 c!17060) b!99777))

(assert (= (and b!99776 (not c!17060)) b!99788))

(assert (= (or b!99777 b!99788) bm!10262))

(assert (= (or b!99773 bm!10262) bm!10263))

(assert (= (or b!99773 b!99777) bm!10260))

(assert (= (or b!99785 bm!10263) bm!10261))

(assert (= (or b!99785 bm!10260) bm!10258))

(assert (= (and d!26827 res!50087) b!99786))

(assert (= (and d!26827 c!17063) b!99778))

(assert (= (and d!26827 (not c!17063)) b!99783))

(assert (= (and d!26827 res!50094) b!99787))

(assert (= (and b!99787 res!50090) b!99771))

(assert (= (and b!99787 (not res!50088)) b!99772))

(assert (= (and b!99772 res!50093) b!99781))

(assert (= (and b!99787 res!50092) b!99770))

(assert (= (and b!99770 c!17059) b!99780))

(assert (= (and b!99770 (not c!17059)) b!99779))

(assert (= (and b!99780 res!50089) b!99784))

(assert (= (or b!99780 b!99779) bm!10259))

(assert (= (and b!99770 res!50095) b!99789))

(assert (= (and b!99789 c!17064) b!99782))

(assert (= (and b!99789 (not c!17064)) b!99774))

(assert (= (and b!99782 res!50091) b!99769))

(assert (= (or b!99782 b!99774) bm!10257))

(declare-fun b_lambda!4439 () Bool)

(assert (=> (not b_lambda!4439) (not b!99781)))

(assert (=> b!99781 t!5567))

(declare-fun b_and!6113 () Bool)

(assert (= b_and!6109 (and (=> t!5567 result!3299) b_and!6113)))

(assert (=> b!99781 t!5569))

(declare-fun b_and!6115 () Bool)

(assert (= b_and!6111 (and (=> t!5569 result!3301) b_and!6115)))

(assert (=> b!99781 m!108993))

(assert (=> b!99781 m!109005))

(assert (=> b!99781 m!109007))

(assert (=> b!99781 m!108993))

(declare-fun m!109641 () Bool)

(assert (=> b!99781 m!109641))

(assert (=> b!99781 m!109005))

(assert (=> b!99781 m!109007))

(assert (=> b!99781 m!109011))

(assert (=> b!99771 m!108993))

(assert (=> b!99771 m!108993))

(assert (=> b!99771 m!109001))

(declare-fun m!109643 () Bool)

(assert (=> bm!10257 m!109643))

(assert (=> b!99772 m!108993))

(assert (=> b!99772 m!108993))

(declare-fun m!109645 () Bool)

(assert (=> b!99772 m!109645))

(declare-fun m!109647 () Bool)

(assert (=> b!99785 m!109647))

(declare-fun m!109649 () Bool)

(assert (=> bm!10259 m!109649))

(assert (=> bm!10261 m!108589))

(declare-fun m!109651 () Bool)

(assert (=> bm!10261 m!109651))

(assert (=> d!26827 m!108865))

(declare-fun m!109653 () Bool)

(assert (=> bm!10258 m!109653))

(assert (=> b!99786 m!108993))

(assert (=> b!99786 m!108993))

(assert (=> b!99786 m!109001))

(declare-fun m!109655 () Bool)

(assert (=> b!99784 m!109655))

(declare-fun m!109657 () Bool)

(assert (=> b!99778 m!109657))

(assert (=> b!99778 m!108589))

(declare-fun m!109659 () Bool)

(assert (=> b!99778 m!109659))

(assert (=> b!99778 m!108993))

(declare-fun m!109661 () Bool)

(assert (=> b!99778 m!109661))

(declare-fun m!109663 () Bool)

(assert (=> b!99778 m!109663))

(declare-fun m!109665 () Bool)

(assert (=> b!99778 m!109665))

(declare-fun m!109667 () Bool)

(assert (=> b!99778 m!109667))

(declare-fun m!109669 () Bool)

(assert (=> b!99778 m!109669))

(declare-fun m!109671 () Bool)

(assert (=> b!99778 m!109671))

(declare-fun m!109673 () Bool)

(assert (=> b!99778 m!109673))

(assert (=> b!99778 m!109661))

(assert (=> b!99778 m!108589))

(declare-fun m!109675 () Bool)

(assert (=> b!99778 m!109675))

(declare-fun m!109677 () Bool)

(assert (=> b!99778 m!109677))

(declare-fun m!109679 () Bool)

(assert (=> b!99778 m!109679))

(assert (=> b!99778 m!109667))

(assert (=> b!99778 m!109673))

(declare-fun m!109681 () Bool)

(assert (=> b!99778 m!109681))

(assert (=> b!99778 m!108589))

(assert (=> b!99778 m!109651))

(declare-fun m!109683 () Bool)

(assert (=> b!99778 m!109683))

(assert (=> b!99778 m!109671))

(declare-fun m!109685 () Bool)

(assert (=> b!99778 m!109685))

(declare-fun m!109687 () Bool)

(assert (=> b!99769 m!109687))

(assert (=> d!26659 d!26827))

(assert (=> b!99419 d!26641))

(declare-fun d!26829 () Bool)

(assert (=> d!26829 (= (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!364 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4112 () Bool)

(assert (= bs!4112 d!26829))

(assert (=> bs!4112 m!109159))

(declare-fun m!109689 () Bool)

(assert (=> bs!4112 m!109689))

(assert (=> b!99458 d!26829))

(declare-fun b!99793 () Bool)

(declare-fun e!65000 () Option!155)

(assert (=> b!99793 (= e!65000 None!153)))

(declare-fun b!99792 () Bool)

(assert (=> b!99792 (= e!65000 (getValueByKey!149 (t!5556 (toList!774 lt!49898)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!26831 () Bool)

(declare-fun c!17065 () Bool)

(assert (=> d!26831 (= c!17065 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!64999 () Option!155)

(assert (=> d!26831 (= (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000) e!64999)))

(declare-fun b!99790 () Bool)

(assert (=> b!99790 (= e!64999 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49898)))))))

(declare-fun b!99791 () Bool)

(assert (=> b!99791 (= e!64999 e!65000)))

(declare-fun c!17066 () Bool)

(assert (=> b!99791 (= c!17066 (and ((_ is Cons!1587) (toList!774 lt!49898)) (not (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!26831 c!17065) b!99790))

(assert (= (and d!26831 (not c!17065)) b!99791))

(assert (= (and b!99791 c!17066) b!99792))

(assert (= (and b!99791 (not c!17066)) b!99793))

(declare-fun m!109691 () Bool)

(assert (=> b!99792 m!109691))

(assert (=> b!99458 d!26831))

(declare-fun d!26833 () Bool)

(assert (=> d!26833 (= (inRange!0 (ite c!16961 (index!3173 lt!50091) (ite c!16962 (index!3172 lt!50108) (index!3175 lt!50108))) (mask!6607 newMap!16)) (and (bvsge (ite c!16961 (index!3173 lt!50091) (ite c!16962 (index!3172 lt!50108) (index!3175 lt!50108))) #b00000000000000000000000000000000) (bvslt (ite c!16961 (index!3173 lt!50091) (ite c!16962 (index!3172 lt!50108) (index!3175 lt!50108))) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10215 d!26833))

(declare-fun d!26835 () Bool)

(declare-fun lt!50296 () Bool)

(assert (=> d!26835 (= lt!50296 (select (content!104 (toList!774 lt!50126)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun e!65002 () Bool)

(assert (=> d!26835 (= lt!50296 e!65002)))

(declare-fun res!50096 () Bool)

(assert (=> d!26835 (=> (not res!50096) (not e!65002))))

(assert (=> d!26835 (= res!50096 ((_ is Cons!1587) (toList!774 lt!50126)))))

(assert (=> d!26835 (= (contains!801 (toList!774 lt!50126) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50296)))

(declare-fun b!99794 () Bool)

(declare-fun e!65001 () Bool)

(assert (=> b!99794 (= e!65002 e!65001)))

(declare-fun res!50097 () Bool)

(assert (=> b!99794 (=> res!50097 e!65001)))

(assert (=> b!99794 (= res!50097 (= (h!2182 (toList!774 lt!50126)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99795 () Bool)

(assert (=> b!99795 (= e!65001 (contains!801 (t!5556 (toList!774 lt!50126)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26835 res!50096) b!99794))

(assert (= (and b!99794 (not res!50097)) b!99795))

(declare-fun m!109693 () Bool)

(assert (=> d!26835 m!109693))

(declare-fun m!109695 () Bool)

(assert (=> d!26835 m!109695))

(declare-fun m!109697 () Bool)

(assert (=> b!99795 m!109697))

(assert (=> b!99460 d!26835))

(declare-fun d!26837 () Bool)

(assert (=> d!26837 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))

(assert (=> d!26837 true))

(declare-fun _$16!120 () Unit!2998)

(assert (=> d!26837 (= (choose!614 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (defaultEntry!2501 newMap!16)) _$16!120)))

(declare-fun bs!4113 () Bool)

(assert (= bs!4113 d!26837))

(assert (=> bs!4113 m!109201))

(assert (=> bs!4113 m!108771))

(assert (=> bs!4113 m!109201))

(assert (=> bs!4113 m!108771))

(assert (=> bs!4113 m!109203))

(assert (=> d!26663 d!26837))

(assert (=> d!26663 d!26717))

(assert (=> d!26591 d!26571))

(declare-fun d!26839 () Bool)

(declare-fun e!65003 () Bool)

(assert (=> d!26839 e!65003))

(declare-fun res!50098 () Bool)

(assert (=> d!26839 (=> res!50098 e!65003)))

(declare-fun lt!50298 () Bool)

(assert (=> d!26839 (= res!50098 (not lt!50298))))

(declare-fun lt!50297 () Bool)

(assert (=> d!26839 (= lt!50298 lt!50297)))

(declare-fun lt!50300 () Unit!2998)

(declare-fun e!65004 () Unit!2998)

(assert (=> d!26839 (= lt!50300 e!65004)))

(declare-fun c!17067 () Bool)

(assert (=> d!26839 (= c!17067 lt!50297)))

(assert (=> d!26839 (= lt!50297 (containsKey!153 (toList!774 lt!50192) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26839 (= (contains!799 lt!50192 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) lt!50298)))

(declare-fun b!99796 () Bool)

(declare-fun lt!50299 () Unit!2998)

(assert (=> b!99796 (= e!65004 lt!50299)))

(assert (=> b!99796 (= lt!50299 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50192) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99796 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99797 () Bool)

(declare-fun Unit!3027 () Unit!2998)

(assert (=> b!99797 (= e!65004 Unit!3027)))

(declare-fun b!99798 () Bool)

(assert (=> b!99798 (= e!65003 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26839 c!17067) b!99796))

(assert (= (and d!26839 (not c!17067)) b!99797))

(assert (= (and d!26839 (not res!50098)) b!99798))

(assert (=> d!26839 m!108993))

(declare-fun m!109699 () Bool)

(assert (=> d!26839 m!109699))

(assert (=> b!99796 m!108993))

(declare-fun m!109701 () Bool)

(assert (=> b!99796 m!109701))

(assert (=> b!99796 m!108993))

(declare-fun m!109703 () Bool)

(assert (=> b!99796 m!109703))

(assert (=> b!99796 m!109703))

(declare-fun m!109705 () Bool)

(assert (=> b!99796 m!109705))

(assert (=> b!99798 m!108993))

(assert (=> b!99798 m!109703))

(assert (=> b!99798 m!109703))

(assert (=> b!99798 m!109705))

(assert (=> b!99534 d!26839))

(declare-fun d!26841 () Bool)

(declare-fun e!65005 () Bool)

(assert (=> d!26841 e!65005))

(declare-fun res!50099 () Bool)

(assert (=> d!26841 (=> res!50099 e!65005)))

(declare-fun lt!50302 () Bool)

(assert (=> d!26841 (= res!50099 (not lt!50302))))

(declare-fun lt!50301 () Bool)

(assert (=> d!26841 (= lt!50302 lt!50301)))

(declare-fun lt!50304 () Unit!2998)

(declare-fun e!65006 () Unit!2998)

(assert (=> d!26841 (= lt!50304 e!65006)))

(declare-fun c!17068 () Bool)

(assert (=> d!26841 (= c!17068 lt!50301)))

(assert (=> d!26841 (= lt!50301 (containsKey!153 (toList!774 lt!49986) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26841 (= (contains!799 lt!49986 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) lt!50302)))

(declare-fun b!99799 () Bool)

(declare-fun lt!50303 () Unit!2998)

(assert (=> b!99799 (= e!65006 lt!50303)))

(assert (=> b!99799 (= lt!50303 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49986) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99799 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99800 () Bool)

(declare-fun Unit!3028 () Unit!2998)

(assert (=> b!99800 (= e!65006 Unit!3028)))

(declare-fun b!99801 () Bool)

(assert (=> b!99801 (= e!65005 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26841 c!17068) b!99799))

(assert (= (and d!26841 (not c!17068)) b!99800))

(assert (= (and d!26841 (not res!50099)) b!99801))

(assert (=> d!26841 m!108993))

(declare-fun m!109707 () Bool)

(assert (=> d!26841 m!109707))

(assert (=> b!99799 m!108993))

(declare-fun m!109709 () Bool)

(assert (=> b!99799 m!109709))

(assert (=> b!99799 m!108993))

(declare-fun m!109711 () Bool)

(assert (=> b!99799 m!109711))

(assert (=> b!99799 m!109711))

(declare-fun m!109713 () Bool)

(assert (=> b!99799 m!109713))

(assert (=> b!99801 m!108993))

(assert (=> b!99801 m!109711))

(assert (=> b!99801 m!109711))

(assert (=> b!99801 m!109713))

(assert (=> b!99330 d!26841))

(declare-fun b!99805 () Bool)

(declare-fun e!65008 () Option!155)

(assert (=> b!99805 (= e!65008 None!153)))

(declare-fun b!99804 () Bool)

(assert (=> b!99804 (= e!65008 (getValueByKey!149 (t!5556 (toList!774 lt!49959)) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!26843 () Bool)

(declare-fun c!17069 () Bool)

(assert (=> d!26843 (= c!17069 (and ((_ is Cons!1587) (toList!774 lt!49959)) (= (_1!1177 (h!2182 (toList!774 lt!49959))) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65007 () Option!155)

(assert (=> d!26843 (= (getValueByKey!149 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65007)))

(declare-fun b!99802 () Bool)

(assert (=> b!99802 (= e!65007 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49959)))))))

(declare-fun b!99803 () Bool)

(assert (=> b!99803 (= e!65007 e!65008)))

(declare-fun c!17070 () Bool)

(assert (=> b!99803 (= c!17070 (and ((_ is Cons!1587) (toList!774 lt!49959)) (not (= (_1!1177 (h!2182 (toList!774 lt!49959))) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!26843 c!17069) b!99802))

(assert (= (and d!26843 (not c!17069)) b!99803))

(assert (= (and b!99803 c!17070) b!99804))

(assert (= (and b!99803 (not c!17070)) b!99805))

(declare-fun m!109715 () Bool)

(assert (=> b!99804 m!109715))

(assert (=> b!99302 d!26843))

(assert (=> b!99527 d!26735))

(declare-fun d!26845 () Bool)

(assert (=> d!26845 (= (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99497 d!26845))

(declare-fun d!26847 () Bool)

(assert (=> d!26847 (= (isDefined!103 (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))) (not (isEmpty!364 (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))))

(declare-fun bs!4114 () Bool)

(assert (= bs!4114 d!26847))

(assert (=> bs!4114 m!109415))

(declare-fun m!109717 () Bool)

(assert (=> bs!4114 m!109717))

(assert (=> b!99584 d!26847))

(declare-fun b!99809 () Bool)

(declare-fun e!65010 () Option!155)

(assert (=> b!99809 (= e!65010 None!153)))

(declare-fun b!99808 () Bool)

(assert (=> b!99808 (= e!65010 (getValueByKey!149 (t!5556 (toList!774 call!10155)) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(declare-fun c!17071 () Bool)

(declare-fun d!26849 () Bool)

(assert (=> d!26849 (= c!17071 (and ((_ is Cons!1587) (toList!774 call!10155)) (= (_1!1177 (h!2182 (toList!774 call!10155))) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))))

(declare-fun e!65009 () Option!155)

(assert (=> d!26849 (= (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))) e!65009)))

(declare-fun b!99806 () Bool)

(assert (=> b!99806 (= e!65009 (Some!154 (_2!1177 (h!2182 (toList!774 call!10155)))))))

(declare-fun b!99807 () Bool)

(assert (=> b!99807 (= e!65009 e!65010)))

(declare-fun c!17072 () Bool)

(assert (=> b!99807 (= c!17072 (and ((_ is Cons!1587) (toList!774 call!10155)) (not (= (_1!1177 (h!2182 (toList!774 call!10155))) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))))

(assert (= (and d!26849 c!17071) b!99806))

(assert (= (and d!26849 (not c!17071)) b!99807))

(assert (= (and b!99807 c!17072) b!99808))

(assert (= (and b!99807 (not c!17072)) b!99809))

(declare-fun m!109719 () Bool)

(assert (=> b!99808 m!109719))

(assert (=> b!99584 d!26849))

(declare-fun d!26851 () Bool)

(assert (=> d!26851 (= (get!1293 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99492 d!26851))

(assert (=> bm!10212 d!26675))

(declare-fun d!26853 () Bool)

(declare-fun lt!50305 () (_ BitVec 32))

(assert (=> d!26853 (and (bvsge lt!50305 #b00000000000000000000000000000000) (bvsle lt!50305 (bvsub (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!65011 () (_ BitVec 32))

(assert (=> d!26853 (= lt!50305 e!65011)))

(declare-fun c!17073 () Bool)

(assert (=> d!26853 (= c!17073 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26853 (and (bvsle #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26853 (= (arrayCountValidKeys!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))) lt!50305)))

(declare-fun b!99810 () Bool)

(declare-fun e!65012 () (_ BitVec 32))

(declare-fun call!10267 () (_ BitVec 32))

(assert (=> b!99810 (= e!65012 call!10267)))

(declare-fun b!99811 () Bool)

(assert (=> b!99811 (= e!65011 #b00000000000000000000000000000000)))

(declare-fun b!99812 () Bool)

(assert (=> b!99812 (= e!65012 (bvadd #b00000000000000000000000000000001 call!10267))))

(declare-fun b!99813 () Bool)

(assert (=> b!99813 (= e!65011 e!65012)))

(declare-fun c!17074 () Bool)

(assert (=> b!99813 (= c!17074 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10264 () Bool)

(assert (=> bm!10264 (= call!10267 (arrayCountValidKeys!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26853 c!17073) b!99811))

(assert (= (and d!26853 (not c!17073)) b!99813))

(assert (= (and b!99813 c!17074) b!99812))

(assert (= (and b!99813 (not c!17074)) b!99810))

(assert (= (or b!99812 b!99810) bm!10264))

(declare-fun m!109721 () Bool)

(assert (=> b!99813 m!109721))

(assert (=> b!99813 m!109721))

(declare-fun m!109723 () Bool)

(assert (=> b!99813 m!109723))

(declare-fun m!109725 () Bool)

(assert (=> bm!10264 m!109725))

(assert (=> b!99570 d!26853))

(declare-fun d!26855 () Bool)

(assert (=> d!26855 (= (apply!93 lt!50192 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!50192) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4115 () Bool)

(assert (= bs!4115 d!26855))

(declare-fun m!109727 () Bool)

(assert (=> bs!4115 m!109727))

(assert (=> bs!4115 m!109727))

(declare-fun m!109729 () Bool)

(assert (=> bs!4115 m!109729))

(assert (=> b!99546 d!26855))

(declare-fun d!26857 () Bool)

(assert (=> d!26857 (= (apply!93 lt!49986 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!49986) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4116 () Bool)

(assert (= bs!4116 d!26857))

(declare-fun m!109731 () Bool)

(assert (=> bs!4116 m!109731))

(assert (=> bs!4116 m!109731))

(declare-fun m!109733 () Bool)

(assert (=> bs!4116 m!109733))

(assert (=> b!99342 d!26857))

(assert (=> b!99329 d!26735))

(declare-fun d!26859 () Bool)

(assert (=> d!26859 (= (get!1294 (getValueByKey!149 (toList!774 lt!49904) lt!49907)) (v!2813 (getValueByKey!149 (toList!774 lt!49904) lt!49907)))))

(assert (=> d!26597 d!26859))

(declare-fun b!99817 () Bool)

(declare-fun e!65014 () Option!155)

(assert (=> b!99817 (= e!65014 None!153)))

(declare-fun b!99816 () Bool)

(assert (=> b!99816 (= e!65014 (getValueByKey!149 (t!5556 (toList!774 lt!49904)) lt!49907))))

(declare-fun d!26861 () Bool)

(declare-fun c!17075 () Bool)

(assert (=> d!26861 (= c!17075 (and ((_ is Cons!1587) (toList!774 lt!49904)) (= (_1!1177 (h!2182 (toList!774 lt!49904))) lt!49907)))))

(declare-fun e!65013 () Option!155)

(assert (=> d!26861 (= (getValueByKey!149 (toList!774 lt!49904) lt!49907) e!65013)))

(declare-fun b!99814 () Bool)

(assert (=> b!99814 (= e!65013 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49904)))))))

(declare-fun b!99815 () Bool)

(assert (=> b!99815 (= e!65013 e!65014)))

(declare-fun c!17076 () Bool)

(assert (=> b!99815 (= c!17076 (and ((_ is Cons!1587) (toList!774 lt!49904)) (not (= (_1!1177 (h!2182 (toList!774 lt!49904))) lt!49907))))))

(assert (= (and d!26861 c!17075) b!99814))

(assert (= (and d!26861 (not c!17075)) b!99815))

(assert (= (and b!99815 c!17076) b!99816))

(assert (= (and b!99815 (not c!17076)) b!99817))

(declare-fun m!109735 () Bool)

(assert (=> b!99816 m!109735))

(assert (=> d!26597 d!26861))

(assert (=> b!99533 d!26735))

(declare-fun e!65017 () Bool)

(declare-fun lt!50306 () ListLongMap!1517)

(declare-fun b!99818 () Bool)

(assert (=> b!99818 (= e!65017 (= lt!50306 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99820 () Bool)

(declare-fun e!65016 () Bool)

(assert (=> b!99820 (= e!65016 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!99820 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!99821 () Bool)

(declare-fun e!65019 () ListLongMap!1517)

(declare-fun call!10268 () ListLongMap!1517)

(assert (=> b!99821 (= e!65019 call!10268)))

(declare-fun b!99822 () Bool)

(assert (=> b!99822 (= e!65017 (isEmpty!363 lt!50306))))

(declare-fun b!99823 () Bool)

(declare-fun e!65015 () Bool)

(declare-fun e!65021 () Bool)

(assert (=> b!99823 (= e!65015 e!65021)))

(assert (=> b!99823 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun res!50102 () Bool)

(assert (=> b!99823 (= res!50102 (contains!799 lt!50306 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!99823 (=> (not res!50102) (not e!65021))))

(declare-fun b!99824 () Bool)

(declare-fun e!65018 () Bool)

(assert (=> b!99824 (= e!65018 e!65015)))

(declare-fun c!17077 () Bool)

(assert (=> b!99824 (= c!17077 e!65016)))

(declare-fun res!50100 () Bool)

(assert (=> b!99824 (=> (not res!50100) (not e!65016))))

(assert (=> b!99824 (= res!50100 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!99825 () Bool)

(assert (=> b!99825 (= e!65015 e!65017)))

(declare-fun c!17079 () Bool)

(assert (=> b!99825 (= c!17079 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun bm!10265 () Bool)

(assert (=> bm!10265 (= call!10268 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!99826 () Bool)

(declare-fun res!50101 () Bool)

(assert (=> b!99826 (=> (not res!50101) (not e!65018))))

(assert (=> b!99826 (= res!50101 (not (contains!799 lt!50306 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99827 () Bool)

(declare-fun lt!50310 () Unit!2998)

(declare-fun lt!50309 () Unit!2998)

(assert (=> b!99827 (= lt!50310 lt!50309)))

(declare-fun lt!50312 () ListLongMap!1517)

(declare-fun lt!50307 () (_ BitVec 64))

(declare-fun lt!50311 () (_ BitVec 64))

(declare-fun lt!50308 () V!3161)

(assert (=> b!99827 (not (contains!799 (+!129 lt!50312 (tuple2!2333 lt!50311 lt!50308)) lt!50307))))

(assert (=> b!99827 (= lt!50309 (addStillNotContains!42 lt!50312 lt!50311 lt!50308 lt!50307))))

(assert (=> b!99827 (= lt!50307 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99827 (= lt!50308 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99827 (= lt!50311 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!99827 (= lt!50312 call!10268)))

(assert (=> b!99827 (= e!65019 (+!129 call!10268 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99819 () Bool)

(declare-fun e!65020 () ListLongMap!1517)

(assert (=> b!99819 (= e!65020 e!65019)))

(declare-fun c!17080 () Bool)

(assert (=> b!99819 (= c!17080 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun d!26863 () Bool)

(assert (=> d!26863 e!65018))

(declare-fun res!50103 () Bool)

(assert (=> d!26863 (=> (not res!50103) (not e!65018))))

(assert (=> d!26863 (= res!50103 (not (contains!799 lt!50306 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26863 (= lt!50306 e!65020)))

(declare-fun c!17078 () Bool)

(assert (=> d!26863 (= c!17078 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!26863 (validMask!0 (mask!6607 (v!2807 (underlying!334 thiss!992))))))

(assert (=> d!26863 (= (getCurrentListMapNoExtraKeys!93 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (_values!2484 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992))) (extraKeys!2318 (v!2807 (underlying!334 thiss!992))) (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) (minValue!2382 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992)))) lt!50306)))

(declare-fun b!99828 () Bool)

(assert (=> b!99828 (= e!65020 (ListLongMap!1518 Nil!1588))))

(declare-fun b!99829 () Bool)

(assert (=> b!99829 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> b!99829 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2261 (_values!2484 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> b!99829 (= e!65021 (= (apply!93 lt!50306 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!26863 c!17078) b!99828))

(assert (= (and d!26863 (not c!17078)) b!99819))

(assert (= (and b!99819 c!17080) b!99827))

(assert (= (and b!99819 (not c!17080)) b!99821))

(assert (= (or b!99827 b!99821) bm!10265))

(assert (= (and d!26863 res!50103) b!99826))

(assert (= (and b!99826 res!50101) b!99824))

(assert (= (and b!99824 res!50100) b!99820))

(assert (= (and b!99824 c!17077) b!99823))

(assert (= (and b!99824 (not c!17077)) b!99825))

(assert (= (and b!99823 res!50102) b!99829))

(assert (= (and b!99825 c!17079) b!99818))

(assert (= (and b!99825 (not c!17079)) b!99822))

(declare-fun b_lambda!4441 () Bool)

(assert (=> (not b_lambda!4441) (not b!99827)))

(assert (=> b!99827 t!5552))

(declare-fun b_and!6117 () Bool)

(assert (= b_and!6113 (and (=> t!5552 result!3279) b_and!6117)))

(assert (=> b!99827 t!5554))

(declare-fun b_and!6119 () Bool)

(assert (= b_and!6115 (and (=> t!5554 result!3283) b_and!6119)))

(declare-fun b_lambda!4443 () Bool)

(assert (=> (not b_lambda!4443) (not b!99829)))

(assert (=> b!99829 t!5552))

(declare-fun b_and!6121 () Bool)

(assert (= b_and!6117 (and (=> t!5552 result!3279) b_and!6121)))

(assert (=> b!99829 t!5554))

(declare-fun b_and!6123 () Bool)

(assert (= b_and!6119 (and (=> t!5554 result!3283) b_and!6123)))

(declare-fun m!109737 () Bool)

(assert (=> b!99829 m!109737))

(assert (=> b!99829 m!109737))

(assert (=> b!99829 m!108587))

(declare-fun m!109739 () Bool)

(assert (=> b!99829 m!109739))

(assert (=> b!99829 m!108587))

(assert (=> b!99829 m!109229))

(assert (=> b!99829 m!109229))

(declare-fun m!109741 () Bool)

(assert (=> b!99829 m!109741))

(assert (=> b!99819 m!109229))

(assert (=> b!99819 m!109229))

(declare-fun m!109743 () Bool)

(assert (=> b!99819 m!109743))

(assert (=> b!99823 m!109229))

(assert (=> b!99823 m!109229))

(declare-fun m!109745 () Bool)

(assert (=> b!99823 m!109745))

(declare-fun m!109747 () Bool)

(assert (=> b!99818 m!109747))

(assert (=> bm!10265 m!109747))

(declare-fun m!109749 () Bool)

(assert (=> b!99826 m!109749))

(assert (=> b!99820 m!109229))

(assert (=> b!99820 m!109229))

(assert (=> b!99820 m!109743))

(assert (=> b!99827 m!109737))

(declare-fun m!109751 () Bool)

(assert (=> b!99827 m!109751))

(assert (=> b!99827 m!109737))

(assert (=> b!99827 m!108587))

(assert (=> b!99827 m!109739))

(declare-fun m!109753 () Bool)

(assert (=> b!99827 m!109753))

(assert (=> b!99827 m!108587))

(assert (=> b!99827 m!109751))

(declare-fun m!109755 () Bool)

(assert (=> b!99827 m!109755))

(declare-fun m!109757 () Bool)

(assert (=> b!99827 m!109757))

(assert (=> b!99827 m!109229))

(declare-fun m!109759 () Bool)

(assert (=> b!99822 m!109759))

(declare-fun m!109761 () Bool)

(assert (=> d!26863 m!109761))

(assert (=> d!26863 m!108579))

(assert (=> bm!10193 d!26863))

(declare-fun b!99830 () Bool)

(declare-fun e!65024 () Bool)

(declare-fun lt!50313 () ListLongMap!1517)

(assert (=> b!99830 (= e!65024 (= lt!50313 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!99832 () Bool)

(declare-fun e!65023 () Bool)

(assert (=> b!99832 (= e!65023 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99832 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!99833 () Bool)

(declare-fun e!65026 () ListLongMap!1517)

(declare-fun call!10269 () ListLongMap!1517)

(assert (=> b!99833 (= e!65026 call!10269)))

(declare-fun b!99834 () Bool)

(assert (=> b!99834 (= e!65024 (isEmpty!363 lt!50313))))

(declare-fun b!99835 () Bool)

(declare-fun e!65022 () Bool)

(declare-fun e!65028 () Bool)

(assert (=> b!99835 (= e!65022 e!65028)))

(assert (=> b!99835 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!50106 () Bool)

(assert (=> b!99835 (= res!50106 (contains!799 lt!50313 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99835 (=> (not res!50106) (not e!65028))))

(declare-fun b!99836 () Bool)

(declare-fun e!65025 () Bool)

(assert (=> b!99836 (= e!65025 e!65022)))

(declare-fun c!17081 () Bool)

(assert (=> b!99836 (= c!17081 e!65023)))

(declare-fun res!50104 () Bool)

(assert (=> b!99836 (=> (not res!50104) (not e!65023))))

(assert (=> b!99836 (= res!50104 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99837 () Bool)

(assert (=> b!99837 (= e!65022 e!65024)))

(declare-fun c!17083 () Bool)

(assert (=> b!99837 (= c!17083 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10266 () Bool)

(assert (=> bm!10266 (= call!10269 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun b!99838 () Bool)

(declare-fun res!50105 () Bool)

(assert (=> b!99838 (=> (not res!50105) (not e!65025))))

(assert (=> b!99838 (= res!50105 (not (contains!799 lt!50313 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99839 () Bool)

(declare-fun lt!50317 () Unit!2998)

(declare-fun lt!50316 () Unit!2998)

(assert (=> b!99839 (= lt!50317 lt!50316)))

(declare-fun lt!50318 () (_ BitVec 64))

(declare-fun lt!50315 () V!3161)

(declare-fun lt!50319 () ListLongMap!1517)

(declare-fun lt!50314 () (_ BitVec 64))

(assert (=> b!99839 (not (contains!799 (+!129 lt!50319 (tuple2!2333 lt!50318 lt!50315)) lt!50314))))

(assert (=> b!99839 (= lt!50316 (addStillNotContains!42 lt!50319 lt!50318 lt!50315 lt!50314))))

(assert (=> b!99839 (= lt!50314 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99839 (= lt!50315 (get!1291 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99839 (= lt!50318 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99839 (= lt!50319 call!10269)))

(assert (=> b!99839 (= e!65026 (+!129 call!10269 (tuple2!2333 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (get!1291 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99831 () Bool)

(declare-fun e!65027 () ListLongMap!1517)

(assert (=> b!99831 (= e!65027 e!65026)))

(declare-fun c!17084 () Bool)

(assert (=> b!99831 (= c!17084 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26865 () Bool)

(assert (=> d!26865 e!65025))

(declare-fun res!50107 () Bool)

(assert (=> d!26865 (=> (not res!50107) (not e!65025))))

(assert (=> d!26865 (= res!50107 (not (contains!799 lt!50313 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26865 (= lt!50313 e!65027)))

(declare-fun c!17082 () Bool)

(assert (=> d!26865 (= c!17082 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26865 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26865 (= (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831) (mask!6607 newMap!16) (ite c!16890 (ite c!16895 (extraKeys!2318 newMap!16) lt!49845) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50313)))

(declare-fun b!99840 () Bool)

(assert (=> b!99840 (= e!65027 (ListLongMap!1518 Nil!1588))))

(declare-fun b!99841 () Bool)

(assert (=> b!99841 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> b!99841 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831))))))

(assert (=> b!99841 (= e!65028 (= (apply!93 lt!50313 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (ite (or c!16890 c!16896) (_values!2484 newMap!16) lt!49831)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!26865 c!17082) b!99840))

(assert (= (and d!26865 (not c!17082)) b!99831))

(assert (= (and b!99831 c!17084) b!99839))

(assert (= (and b!99831 (not c!17084)) b!99833))

(assert (= (or b!99839 b!99833) bm!10266))

(assert (= (and d!26865 res!50107) b!99838))

(assert (= (and b!99838 res!50105) b!99836))

(assert (= (and b!99836 res!50104) b!99832))

(assert (= (and b!99836 c!17081) b!99835))

(assert (= (and b!99836 (not c!17081)) b!99837))

(assert (= (and b!99835 res!50106) b!99841))

(assert (= (and b!99837 c!17083) b!99830))

(assert (= (and b!99837 (not c!17083)) b!99834))

(declare-fun b_lambda!4445 () Bool)

(assert (=> (not b_lambda!4445) (not b!99839)))

(assert (=> b!99839 t!5567))

(declare-fun b_and!6125 () Bool)

(assert (= b_and!6121 (and (=> t!5567 result!3299) b_and!6125)))

(assert (=> b!99839 t!5569))

(declare-fun b_and!6127 () Bool)

(assert (= b_and!6123 (and (=> t!5569 result!3301) b_and!6127)))

(declare-fun b_lambda!4447 () Bool)

(assert (=> (not b_lambda!4447) (not b!99841)))

(assert (=> b!99841 t!5567))

(declare-fun b_and!6129 () Bool)

(assert (= b_and!6125 (and (=> t!5567 result!3299) b_and!6129)))

(assert (=> b!99841 t!5569))

(declare-fun b_and!6131 () Bool)

(assert (= b_and!6127 (and (=> t!5569 result!3301) b_and!6131)))

(assert (=> b!99841 m!109281))

(assert (=> b!99841 m!109281))

(assert (=> b!99841 m!109007))

(assert (=> b!99841 m!109285))

(assert (=> b!99841 m!109007))

(assert (=> b!99841 m!108993))

(assert (=> b!99841 m!108993))

(declare-fun m!109763 () Bool)

(assert (=> b!99841 m!109763))

(assert (=> b!99831 m!108993))

(assert (=> b!99831 m!108993))

(assert (=> b!99831 m!109001))

(assert (=> b!99835 m!108993))

(assert (=> b!99835 m!108993))

(declare-fun m!109765 () Bool)

(assert (=> b!99835 m!109765))

(declare-fun m!109767 () Bool)

(assert (=> b!99830 m!109767))

(assert (=> bm!10266 m!109767))

(declare-fun m!109769 () Bool)

(assert (=> b!99838 m!109769))

(assert (=> b!99832 m!108993))

(assert (=> b!99832 m!108993))

(assert (=> b!99832 m!109001))

(assert (=> b!99839 m!109281))

(declare-fun m!109771 () Bool)

(assert (=> b!99839 m!109771))

(assert (=> b!99839 m!109281))

(assert (=> b!99839 m!109007))

(assert (=> b!99839 m!109285))

(declare-fun m!109773 () Bool)

(assert (=> b!99839 m!109773))

(assert (=> b!99839 m!109007))

(assert (=> b!99839 m!109771))

(declare-fun m!109775 () Bool)

(assert (=> b!99839 m!109775))

(declare-fun m!109777 () Bool)

(assert (=> b!99839 m!109777))

(assert (=> b!99839 m!108993))

(declare-fun m!109779 () Bool)

(assert (=> b!99834 m!109779))

(declare-fun m!109781 () Bool)

(assert (=> d!26865 m!109781))

(assert (=> d!26865 m!108865))

(assert (=> bm!10231 d!26865))

(declare-fun d!26867 () Bool)

(declare-fun res!50108 () Bool)

(declare-fun e!65029 () Bool)

(assert (=> d!26867 (=> res!50108 e!65029)))

(assert (=> d!26867 (= res!50108 (and ((_ is Cons!1587) (toList!774 call!10164)) (= (_1!1177 (h!2182 (toList!774 call!10164))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (=> d!26867 (= (containsKey!153 (toList!774 call!10164) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!65029)))

(declare-fun b!99842 () Bool)

(declare-fun e!65030 () Bool)

(assert (=> b!99842 (= e!65029 e!65030)))

(declare-fun res!50109 () Bool)

(assert (=> b!99842 (=> (not res!50109) (not e!65030))))

(assert (=> b!99842 (= res!50109 (and (or (not ((_ is Cons!1587) (toList!774 call!10164))) (bvsle (_1!1177 (h!2182 (toList!774 call!10164))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) ((_ is Cons!1587) (toList!774 call!10164)) (bvslt (_1!1177 (h!2182 (toList!774 call!10164))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun b!99843 () Bool)

(assert (=> b!99843 (= e!65030 (containsKey!153 (t!5556 (toList!774 call!10164)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!26867 (not res!50108)) b!99842))

(assert (= (and b!99842 res!50109) b!99843))

(assert (=> b!99843 m!108591))

(declare-fun m!109783 () Bool)

(assert (=> b!99843 m!109783))

(assert (=> d!26673 d!26867))

(declare-fun d!26869 () Bool)

(declare-fun e!65031 () Bool)

(assert (=> d!26869 e!65031))

(declare-fun res!50110 () Bool)

(assert (=> d!26869 (=> res!50110 e!65031)))

(declare-fun lt!50321 () Bool)

(assert (=> d!26869 (= res!50110 (not lt!50321))))

(declare-fun lt!50320 () Bool)

(assert (=> d!26869 (= lt!50321 lt!50320)))

(declare-fun lt!50323 () Unit!2998)

(declare-fun e!65032 () Unit!2998)

(assert (=> d!26869 (= lt!50323 e!65032)))

(declare-fun c!17085 () Bool)

(assert (=> d!26869 (= c!17085 lt!50320)))

(assert (=> d!26869 (= lt!50320 (containsKey!153 (toList!774 lt!50192) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26869 (= (contains!799 lt!50192 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50321)))

(declare-fun b!99844 () Bool)

(declare-fun lt!50322 () Unit!2998)

(assert (=> b!99844 (= e!65032 lt!50322)))

(assert (=> b!99844 (= lt!50322 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50192) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99844 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99845 () Bool)

(declare-fun Unit!3029 () Unit!2998)

(assert (=> b!99845 (= e!65032 Unit!3029)))

(declare-fun b!99846 () Bool)

(assert (=> b!99846 (= e!65031 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26869 c!17085) b!99844))

(assert (= (and d!26869 (not c!17085)) b!99845))

(assert (= (and d!26869 (not res!50110)) b!99846))

(declare-fun m!109785 () Bool)

(assert (=> d!26869 m!109785))

(declare-fun m!109787 () Bool)

(assert (=> b!99844 m!109787))

(assert (=> b!99844 m!109727))

(assert (=> b!99844 m!109727))

(declare-fun m!109789 () Bool)

(assert (=> b!99844 m!109789))

(assert (=> b!99846 m!109727))

(assert (=> b!99846 m!109727))

(assert (=> b!99846 m!109789))

(assert (=> bm!10236 d!26869))

(declare-fun d!26871 () Bool)

(declare-fun e!65033 () Bool)

(assert (=> d!26871 e!65033))

(declare-fun res!50111 () Bool)

(assert (=> d!26871 (=> res!50111 e!65033)))

(declare-fun lt!50325 () Bool)

(assert (=> d!26871 (= res!50111 (not lt!50325))))

(declare-fun lt!50324 () Bool)

(assert (=> d!26871 (= lt!50325 lt!50324)))

(declare-fun lt!50327 () Unit!2998)

(declare-fun e!65034 () Unit!2998)

(assert (=> d!26871 (= lt!50327 e!65034)))

(declare-fun c!17086 () Bool)

(assert (=> d!26871 (= c!17086 lt!50324)))

(assert (=> d!26871 (= lt!50324 (containsKey!153 (toList!774 lt!49986) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26871 (= (contains!799 lt!49986 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50325)))

(declare-fun b!99847 () Bool)

(declare-fun lt!50326 () Unit!2998)

(assert (=> b!99847 (= e!65034 lt!50326)))

(assert (=> b!99847 (= lt!50326 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49986) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99847 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99848 () Bool)

(declare-fun Unit!3030 () Unit!2998)

(assert (=> b!99848 (= e!65034 Unit!3030)))

(declare-fun b!99849 () Bool)

(assert (=> b!99849 (= e!65033 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26871 c!17086) b!99847))

(assert (= (and d!26871 (not c!17086)) b!99848))

(assert (= (and d!26871 (not res!50111)) b!99849))

(declare-fun m!109791 () Bool)

(assert (=> d!26871 m!109791))

(declare-fun m!109793 () Bool)

(assert (=> b!99847 m!109793))

(assert (=> b!99847 m!109731))

(assert (=> b!99847 m!109731))

(declare-fun m!109795 () Bool)

(assert (=> b!99847 m!109795))

(assert (=> b!99849 m!109731))

(assert (=> b!99849 m!109731))

(assert (=> b!99849 m!109795))

(assert (=> bm!10199 d!26871))

(assert (=> b!99284 d!26863))

(declare-fun d!26873 () Bool)

(assert (=> d!26873 (= (apply!93 lt!50185 lt!50177) (get!1294 (getValueByKey!149 (toList!774 lt!50185) lt!50177)))))

(declare-fun bs!4117 () Bool)

(assert (= bs!4117 d!26873))

(declare-fun m!109797 () Bool)

(assert (=> bs!4117 m!109797))

(assert (=> bs!4117 m!109797))

(declare-fun m!109799 () Bool)

(assert (=> bs!4117 m!109799))

(assert (=> b!99519 d!26873))

(declare-fun d!26875 () Bool)

(declare-fun e!65035 () Bool)

(assert (=> d!26875 e!65035))

(declare-fun res!50113 () Bool)

(assert (=> d!26875 (=> (not res!50113) (not e!65035))))

(declare-fun lt!50328 () ListLongMap!1517)

(assert (=> d!26875 (= res!50113 (contains!799 lt!50328 (_1!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50329 () List!1591)

(assert (=> d!26875 (= lt!50328 (ListLongMap!1518 lt!50329))))

(declare-fun lt!50330 () Unit!2998)

(declare-fun lt!50331 () Unit!2998)

(assert (=> d!26875 (= lt!50330 lt!50331)))

(assert (=> d!26875 (= (getValueByKey!149 lt!50329 (_1!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26875 (= lt!50331 (lemmaContainsTupThenGetReturnValue!68 lt!50329 (_1!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26875 (= lt!50329 (insertStrictlySorted!71 (toList!774 lt!50180) (_1!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26875 (= (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) lt!50328)))

(declare-fun b!99850 () Bool)

(declare-fun res!50112 () Bool)

(assert (=> b!99850 (=> (not res!50112) (not e!65035))))

(assert (=> b!99850 (= res!50112 (= (getValueByKey!149 (toList!774 lt!50328) (_1!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))))))))

(declare-fun b!99851 () Bool)

(assert (=> b!99851 (= e!65035 (contains!801 (toList!774 lt!50328) (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))))))

(assert (= (and d!26875 res!50113) b!99850))

(assert (= (and b!99850 res!50112) b!99851))

(declare-fun m!109801 () Bool)

(assert (=> d!26875 m!109801))

(declare-fun m!109803 () Bool)

(assert (=> d!26875 m!109803))

(declare-fun m!109805 () Bool)

(assert (=> d!26875 m!109805))

(declare-fun m!109807 () Bool)

(assert (=> d!26875 m!109807))

(declare-fun m!109809 () Bool)

(assert (=> b!99850 m!109809))

(declare-fun m!109811 () Bool)

(assert (=> b!99851 m!109811))

(assert (=> b!99519 d!26875))

(declare-fun d!26877 () Bool)

(declare-fun e!65036 () Bool)

(assert (=> d!26877 e!65036))

(declare-fun res!50115 () Bool)

(assert (=> d!26877 (=> (not res!50115) (not e!65036))))

(declare-fun lt!50332 () ListLongMap!1517)

(assert (=> d!26877 (= res!50115 (contains!799 lt!50332 (_1!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50333 () List!1591)

(assert (=> d!26877 (= lt!50332 (ListLongMap!1518 lt!50333))))

(declare-fun lt!50334 () Unit!2998)

(declare-fun lt!50335 () Unit!2998)

(assert (=> d!26877 (= lt!50334 lt!50335)))

(assert (=> d!26877 (= (getValueByKey!149 lt!50333 (_1!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26877 (= lt!50335 (lemmaContainsTupThenGetReturnValue!68 lt!50333 (_1!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26877 (= lt!50333 (insertStrictlySorted!71 (toList!774 lt!50176) (_1!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26877 (= (+!129 lt!50176 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) lt!50332)))

(declare-fun b!99852 () Bool)

(declare-fun res!50114 () Bool)

(assert (=> b!99852 (=> (not res!50114) (not e!65036))))

(assert (=> b!99852 (= res!50114 (= (getValueByKey!149 (toList!774 lt!50332) (_1!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))))))))

(declare-fun b!99853 () Bool)

(assert (=> b!99853 (= e!65036 (contains!801 (toList!774 lt!50332) (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))))))

(assert (= (and d!26877 res!50115) b!99852))

(assert (= (and b!99852 res!50114) b!99853))

(declare-fun m!109813 () Bool)

(assert (=> d!26877 m!109813))

(declare-fun m!109815 () Bool)

(assert (=> d!26877 m!109815))

(declare-fun m!109817 () Bool)

(assert (=> d!26877 m!109817))

(declare-fun m!109819 () Bool)

(assert (=> d!26877 m!109819))

(declare-fun m!109821 () Bool)

(assert (=> b!99852 m!109821))

(declare-fun m!109823 () Bool)

(assert (=> b!99853 m!109823))

(assert (=> b!99519 d!26877))

(declare-fun d!26879 () Bool)

(declare-fun e!65037 () Bool)

(assert (=> d!26879 e!65037))

(declare-fun res!50117 () Bool)

(assert (=> d!26879 (=> (not res!50117) (not e!65037))))

(declare-fun lt!50336 () ListLongMap!1517)

(assert (=> d!26879 (= res!50117 (contains!799 lt!50336 (_1!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50337 () List!1591)

(assert (=> d!26879 (= lt!50336 (ListLongMap!1518 lt!50337))))

(declare-fun lt!50338 () Unit!2998)

(declare-fun lt!50339 () Unit!2998)

(assert (=> d!26879 (= lt!50338 lt!50339)))

(assert (=> d!26879 (= (getValueByKey!149 lt!50337 (_1!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26879 (= lt!50339 (lemmaContainsTupThenGetReturnValue!68 lt!50337 (_1!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26879 (= lt!50337 (insertStrictlySorted!71 (toList!774 lt!50175) (_1!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26879 (= (+!129 lt!50175 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50336)))

(declare-fun b!99854 () Bool)

(declare-fun res!50116 () Bool)

(assert (=> b!99854 (=> (not res!50116) (not e!65037))))

(assert (=> b!99854 (= res!50116 (= (getValueByKey!149 (toList!774 lt!50336) (_1!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!99855 () Bool)

(assert (=> b!99855 (= e!65037 (contains!801 (toList!774 lt!50336) (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!26879 res!50117) b!99854))

(assert (= (and b!99854 res!50116) b!99855))

(declare-fun m!109825 () Bool)

(assert (=> d!26879 m!109825))

(declare-fun m!109827 () Bool)

(assert (=> d!26879 m!109827))

(declare-fun m!109829 () Bool)

(assert (=> d!26879 m!109829))

(declare-fun m!109831 () Bool)

(assert (=> d!26879 m!109831))

(declare-fun m!109833 () Bool)

(assert (=> b!99854 m!109833))

(declare-fun m!109835 () Bool)

(assert (=> b!99855 m!109835))

(assert (=> b!99519 d!26879))

(declare-fun d!26881 () Bool)

(declare-fun e!65038 () Bool)

(assert (=> d!26881 e!65038))

(declare-fun res!50118 () Bool)

(assert (=> d!26881 (=> res!50118 e!65038)))

(declare-fun lt!50341 () Bool)

(assert (=> d!26881 (= res!50118 (not lt!50341))))

(declare-fun lt!50340 () Bool)

(assert (=> d!26881 (= lt!50341 lt!50340)))

(declare-fun lt!50343 () Unit!2998)

(declare-fun e!65039 () Unit!2998)

(assert (=> d!26881 (= lt!50343 e!65039)))

(declare-fun c!17087 () Bool)

(assert (=> d!26881 (= c!17087 lt!50340)))

(assert (=> d!26881 (= lt!50340 (containsKey!153 (toList!774 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) lt!50187))))

(assert (=> d!26881 (= (contains!799 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) lt!50187) lt!50341)))

(declare-fun b!99856 () Bool)

(declare-fun lt!50342 () Unit!2998)

(assert (=> b!99856 (= e!65039 lt!50342)))

(assert (=> b!99856 (= lt!50342 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) lt!50187))))

(assert (=> b!99856 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) lt!50187))))

(declare-fun b!99857 () Bool)

(declare-fun Unit!3031 () Unit!2998)

(assert (=> b!99857 (= e!65039 Unit!3031)))

(declare-fun b!99858 () Bool)

(assert (=> b!99858 (= e!65038 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16)))) lt!50187)))))

(assert (= (and d!26881 c!17087) b!99856))

(assert (= (and d!26881 (not c!17087)) b!99857))

(assert (= (and d!26881 (not res!50118)) b!99858))

(declare-fun m!109837 () Bool)

(assert (=> d!26881 m!109837))

(declare-fun m!109839 () Bool)

(assert (=> b!99856 m!109839))

(declare-fun m!109841 () Bool)

(assert (=> b!99856 m!109841))

(assert (=> b!99856 m!109841))

(declare-fun m!109843 () Bool)

(assert (=> b!99856 m!109843))

(assert (=> b!99858 m!109841))

(assert (=> b!99858 m!109841))

(assert (=> b!99858 m!109843))

(assert (=> b!99519 d!26881))

(declare-fun d!26883 () Bool)

(assert (=> d!26883 (= (apply!93 (+!129 lt!50175 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50184) (apply!93 lt!50175 lt!50184))))

(declare-fun lt!50344 () Unit!2998)

(assert (=> d!26883 (= lt!50344 (choose!609 lt!50175 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50184))))

(declare-fun e!65040 () Bool)

(assert (=> d!26883 e!65040))

(declare-fun res!50119 () Bool)

(assert (=> d!26883 (=> (not res!50119) (not e!65040))))

(assert (=> d!26883 (= res!50119 (contains!799 lt!50175 lt!50184))))

(assert (=> d!26883 (= (addApplyDifferent!69 lt!50175 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50184) lt!50344)))

(declare-fun b!99859 () Bool)

(assert (=> b!99859 (= e!65040 (not (= lt!50184 lt!50188)))))

(assert (= (and d!26883 res!50119) b!99859))

(declare-fun m!109845 () Bool)

(assert (=> d!26883 m!109845))

(declare-fun m!109847 () Bool)

(assert (=> d!26883 m!109847))

(assert (=> d!26883 m!109323))

(assert (=> d!26883 m!109317))

(assert (=> d!26883 m!109325))

(assert (=> d!26883 m!109317))

(assert (=> b!99519 d!26883))

(declare-fun d!26885 () Bool)

(assert (=> d!26885 (= (apply!93 lt!50175 lt!50184) (get!1294 (getValueByKey!149 (toList!774 lt!50175) lt!50184)))))

(declare-fun bs!4118 () Bool)

(assert (= bs!4118 d!26885))

(declare-fun m!109849 () Bool)

(assert (=> bs!4118 m!109849))

(assert (=> bs!4118 m!109849))

(declare-fun m!109851 () Bool)

(assert (=> bs!4118 m!109851))

(assert (=> b!99519 d!26885))

(declare-fun d!26887 () Bool)

(assert (=> d!26887 (= (apply!93 (+!129 lt!50185 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50177) (apply!93 lt!50185 lt!50177))))

(declare-fun lt!50345 () Unit!2998)

(assert (=> d!26887 (= lt!50345 (choose!609 lt!50185 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50177))))

(declare-fun e!65041 () Bool)

(assert (=> d!26887 e!65041))

(declare-fun res!50120 () Bool)

(assert (=> d!26887 (=> (not res!50120) (not e!65041))))

(assert (=> d!26887 (= res!50120 (contains!799 lt!50185 lt!50177))))

(assert (=> d!26887 (= (addApplyDifferent!69 lt!50185 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50177) lt!50345)))

(declare-fun b!99860 () Bool)

(assert (=> b!99860 (= e!65041 (not (= lt!50177 lt!50171)))))

(assert (= (and d!26887 res!50120) b!99860))

(declare-fun m!109853 () Bool)

(assert (=> d!26887 m!109853))

(declare-fun m!109855 () Bool)

(assert (=> d!26887 m!109855))

(assert (=> d!26887 m!109301))

(assert (=> d!26887 m!109311))

(assert (=> d!26887 m!109313))

(assert (=> d!26887 m!109311))

(assert (=> b!99519 d!26887))

(declare-fun d!26889 () Bool)

(assert (=> d!26889 (contains!799 (+!129 lt!50180 (tuple2!2333 lt!50189 (zeroValue!2382 newMap!16))) lt!50187)))

(declare-fun lt!50346 () Unit!2998)

(assert (=> d!26889 (= lt!50346 (choose!610 lt!50180 lt!50189 (zeroValue!2382 newMap!16) lt!50187))))

(assert (=> d!26889 (contains!799 lt!50180 lt!50187)))

(assert (=> d!26889 (= (addStillContains!69 lt!50180 lt!50189 (zeroValue!2382 newMap!16) lt!50187) lt!50346)))

(declare-fun bs!4119 () Bool)

(assert (= bs!4119 d!26889))

(assert (=> bs!4119 m!109305))

(assert (=> bs!4119 m!109305))

(assert (=> bs!4119 m!109307))

(declare-fun m!109857 () Bool)

(assert (=> bs!4119 m!109857))

(declare-fun m!109859 () Bool)

(assert (=> bs!4119 m!109859))

(assert (=> b!99519 d!26889))

(assert (=> b!99519 d!26865))

(declare-fun d!26891 () Bool)

(assert (=> d!26891 (= (apply!93 lt!50176 lt!50179) (get!1294 (getValueByKey!149 (toList!774 lt!50176) lt!50179)))))

(declare-fun bs!4120 () Bool)

(assert (= bs!4120 d!26891))

(declare-fun m!109861 () Bool)

(assert (=> bs!4120 m!109861))

(assert (=> bs!4120 m!109861))

(declare-fun m!109863 () Bool)

(assert (=> bs!4120 m!109863))

(assert (=> b!99519 d!26891))

(declare-fun d!26893 () Bool)

(assert (=> d!26893 (= (apply!93 (+!129 lt!50185 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50177) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50185 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50177)))))

(declare-fun bs!4121 () Bool)

(assert (= bs!4121 d!26893))

(declare-fun m!109865 () Bool)

(assert (=> bs!4121 m!109865))

(assert (=> bs!4121 m!109865))

(declare-fun m!109867 () Bool)

(assert (=> bs!4121 m!109867))

(assert (=> b!99519 d!26893))

(declare-fun d!26895 () Bool)

(assert (=> d!26895 (= (apply!93 (+!129 lt!50175 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50184) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50175 (tuple2!2333 lt!50188 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50184)))))

(declare-fun bs!4122 () Bool)

(assert (= bs!4122 d!26895))

(declare-fun m!109869 () Bool)

(assert (=> bs!4122 m!109869))

(assert (=> bs!4122 m!109869))

(declare-fun m!109871 () Bool)

(assert (=> bs!4122 m!109871))

(assert (=> b!99519 d!26895))

(declare-fun d!26897 () Bool)

(declare-fun e!65042 () Bool)

(assert (=> d!26897 e!65042))

(declare-fun res!50122 () Bool)

(assert (=> d!26897 (=> (not res!50122) (not e!65042))))

(declare-fun lt!50347 () ListLongMap!1517)

(assert (=> d!26897 (= res!50122 (contains!799 lt!50347 (_1!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50348 () List!1591)

(assert (=> d!26897 (= lt!50347 (ListLongMap!1518 lt!50348))))

(declare-fun lt!50349 () Unit!2998)

(declare-fun lt!50350 () Unit!2998)

(assert (=> d!26897 (= lt!50349 lt!50350)))

(assert (=> d!26897 (= (getValueByKey!149 lt!50348 (_1!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26897 (= lt!50350 (lemmaContainsTupThenGetReturnValue!68 lt!50348 (_1!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26897 (= lt!50348 (insertStrictlySorted!71 (toList!774 lt!50185) (_1!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26897 (= (+!129 lt!50185 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50347)))

(declare-fun b!99861 () Bool)

(declare-fun res!50121 () Bool)

(assert (=> b!99861 (=> (not res!50121) (not e!65042))))

(assert (=> b!99861 (= res!50121 (= (getValueByKey!149 (toList!774 lt!50347) (_1!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!99862 () Bool)

(assert (=> b!99862 (= e!65042 (contains!801 (toList!774 lt!50347) (tuple2!2333 lt!50171 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!26897 res!50122) b!99861))

(assert (= (and b!99861 res!50121) b!99862))

(declare-fun m!109873 () Bool)

(assert (=> d!26897 m!109873))

(declare-fun m!109875 () Bool)

(assert (=> d!26897 m!109875))

(declare-fun m!109877 () Bool)

(assert (=> d!26897 m!109877))

(declare-fun m!109879 () Bool)

(assert (=> d!26897 m!109879))

(declare-fun m!109881 () Bool)

(assert (=> b!99861 m!109881))

(declare-fun m!109883 () Bool)

(assert (=> b!99862 m!109883))

(assert (=> b!99519 d!26897))

(declare-fun d!26899 () Bool)

(assert (=> d!26899 (= (apply!93 (+!129 lt!50176 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) lt!50179) (apply!93 lt!50176 lt!50179))))

(declare-fun lt!50351 () Unit!2998)

(assert (=> d!26899 (= lt!50351 (choose!609 lt!50176 lt!50186 (zeroValue!2382 newMap!16) lt!50179))))

(declare-fun e!65043 () Bool)

(assert (=> d!26899 e!65043))

(declare-fun res!50123 () Bool)

(assert (=> d!26899 (=> (not res!50123) (not e!65043))))

(assert (=> d!26899 (= res!50123 (contains!799 lt!50176 lt!50179))))

(assert (=> d!26899 (= (addApplyDifferent!69 lt!50176 lt!50186 (zeroValue!2382 newMap!16) lt!50179) lt!50351)))

(declare-fun b!99863 () Bool)

(assert (=> b!99863 (= e!65043 (not (= lt!50179 lt!50186)))))

(assert (= (and d!26899 res!50123) b!99863))

(declare-fun m!109885 () Bool)

(assert (=> d!26899 m!109885))

(declare-fun m!109887 () Bool)

(assert (=> d!26899 m!109887))

(assert (=> d!26899 m!109327))

(assert (=> d!26899 m!109315))

(assert (=> d!26899 m!109329))

(assert (=> d!26899 m!109315))

(assert (=> b!99519 d!26899))

(declare-fun d!26901 () Bool)

(assert (=> d!26901 (= (apply!93 (+!129 lt!50176 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16))) lt!50179) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50176 (tuple2!2333 lt!50186 (zeroValue!2382 newMap!16)))) lt!50179)))))

(declare-fun bs!4123 () Bool)

(assert (= bs!4123 d!26901))

(declare-fun m!109889 () Bool)

(assert (=> bs!4123 m!109889))

(assert (=> bs!4123 m!109889))

(declare-fun m!109891 () Bool)

(assert (=> bs!4123 m!109891))

(assert (=> b!99519 d!26901))

(declare-fun d!26903 () Bool)

(declare-fun isEmpty!365 (List!1591) Bool)

(assert (=> d!26903 (= (isEmpty!363 lt!49945) (isEmpty!365 (toList!774 lt!49945)))))

(declare-fun bs!4124 () Bool)

(assert (= bs!4124 d!26903))

(declare-fun m!109893 () Bool)

(assert (=> bs!4124 m!109893))

(assert (=> b!99288 d!26903))

(declare-fun d!26905 () Bool)

(declare-fun e!65044 () Bool)

(assert (=> d!26905 e!65044))

(declare-fun res!50125 () Bool)

(assert (=> d!26905 (=> (not res!50125) (not e!65044))))

(declare-fun lt!50352 () ListLongMap!1517)

(assert (=> d!26905 (= res!50125 (contains!799 lt!50352 (_1!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun lt!50353 () List!1591)

(assert (=> d!26905 (= lt!50352 (ListLongMap!1518 lt!50353))))

(declare-fun lt!50354 () Unit!2998)

(declare-fun lt!50355 () Unit!2998)

(assert (=> d!26905 (= lt!50354 lt!50355)))

(assert (=> d!26905 (= (getValueByKey!149 lt!50353 (_1!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))) (Some!154 (_2!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!26905 (= lt!50355 (lemmaContainsTupThenGetReturnValue!68 lt!50353 (_1!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (_2!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!26905 (= lt!50353 (insertStrictlySorted!71 (toList!774 (ite c!16989 call!10234 (ite c!16988 call!10235 call!10231))) (_1!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (_2!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!26905 (= (+!129 (ite c!16989 call!10234 (ite c!16988 call!10235 call!10231)) (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50352)))

(declare-fun b!99864 () Bool)

(declare-fun res!50124 () Bool)

(assert (=> b!99864 (=> (not res!50124) (not e!65044))))

(assert (=> b!99864 (= res!50124 (= (getValueByKey!149 (toList!774 lt!50352) (_1!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))) (Some!154 (_2!1177 (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))))

(declare-fun b!99865 () Bool)

(assert (=> b!99865 (= e!65044 (contains!801 (toList!774 lt!50352) (ite (or c!16989 c!16988) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16890 (ite c!16895 (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (= (and d!26905 res!50125) b!99864))

(assert (= (and b!99864 res!50124) b!99865))

(declare-fun m!109895 () Bool)

(assert (=> d!26905 m!109895))

(declare-fun m!109897 () Bool)

(assert (=> d!26905 m!109897))

(declare-fun m!109899 () Bool)

(assert (=> d!26905 m!109899))

(declare-fun m!109901 () Bool)

(assert (=> d!26905 m!109901))

(declare-fun m!109903 () Bool)

(assert (=> b!99864 m!109903))

(declare-fun m!109905 () Bool)

(assert (=> b!99865 m!109905))

(assert (=> bm!10228 d!26905))

(assert (=> bm!10220 d!26675))

(declare-fun lt!50356 () (_ BitVec 32))

(declare-fun d!26907 () Bool)

(assert (=> d!26907 (and (bvsge lt!50356 #b00000000000000000000000000000000) (bvsle lt!50356 (bvsub (size!2260 lt!50090) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(declare-fun e!65045 () (_ BitVec 32))

(assert (=> d!26907 (= lt!50356 e!65045)))

(declare-fun c!17088 () Bool)

(assert (=> d!26907 (= c!17088 (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)))))

(assert (=> d!26907 (and (bvsle (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)) (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001) (size!2260 lt!50090)))))

(assert (=> d!26907 (= (arrayCountValidKeys!0 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)) lt!50356)))

(declare-fun b!99866 () Bool)

(declare-fun e!65046 () (_ BitVec 32))

(declare-fun call!10270 () (_ BitVec 32))

(assert (=> b!99866 (= e!65046 call!10270)))

(declare-fun b!99867 () Bool)

(assert (=> b!99867 (= e!65045 #b00000000000000000000000000000000)))

(declare-fun b!99868 () Bool)

(assert (=> b!99868 (= e!65046 (bvadd #b00000000000000000000000000000001 call!10270))))

(declare-fun b!99869 () Bool)

(assert (=> b!99869 (= e!65045 e!65046)))

(declare-fun c!17089 () Bool)

(assert (=> b!99869 (= c!17089 (validKeyInArray!0 (select (arr!2008 lt!50090) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(declare-fun bm!10267 () Bool)

(assert (=> bm!10267 (= call!10270 (arrayCountValidKeys!0 lt!50090 (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)))))

(assert (= (and d!26907 c!17088) b!99867))

(assert (= (and d!26907 (not c!17088)) b!99869))

(assert (= (and b!99869 c!17089) b!99868))

(assert (= (and b!99869 (not c!17089)) b!99866))

(assert (= (or b!99868 b!99866) bm!10267))

(declare-fun m!109907 () Bool)

(assert (=> b!99869 m!109907))

(assert (=> b!99869 m!109907))

(declare-fun m!109909 () Bool)

(assert (=> b!99869 m!109909))

(declare-fun m!109911 () Bool)

(assert (=> bm!10267 m!109911))

(assert (=> d!26639 d!26907))

(declare-fun b!99870 () Bool)

(declare-fun e!65049 () Bool)

(declare-fun call!10271 () Bool)

(assert (=> b!99870 (= e!65049 call!10271)))

(declare-fun b!99871 () Bool)

(declare-fun e!65047 () Bool)

(assert (=> b!99871 (= e!65047 e!65049)))

(declare-fun lt!50359 () (_ BitVec 64))

(assert (=> b!99871 (= lt!50359 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50358 () Unit!2998)

(assert (=> b!99871 (= lt!50358 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) lt!50359 #b00000000000000000000000000000000))))

(assert (=> b!99871 (arrayContainsKey!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) lt!50359 #b00000000000000000000000000000000)))

(declare-fun lt!50357 () Unit!2998)

(assert (=> b!99871 (= lt!50357 lt!50358)))

(declare-fun res!50127 () Bool)

(assert (=> b!99871 (= res!50127 (= (seekEntryOrOpen!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000) (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (mask!6607 newMap!16)) (Found!257 #b00000000000000000000000000000000)))))

(assert (=> b!99871 (=> (not res!50127) (not e!65049))))

(declare-fun b!99872 () Bool)

(declare-fun e!65048 () Bool)

(assert (=> b!99872 (= e!65048 e!65047)))

(declare-fun c!17090 () Bool)

(assert (=> b!99872 (= c!17090 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10268 () Bool)

(assert (=> bm!10268 (= call!10271 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (mask!6607 newMap!16)))))

(declare-fun b!99873 () Bool)

(assert (=> b!99873 (= e!65047 call!10271)))

(declare-fun d!26909 () Bool)

(declare-fun res!50126 () Bool)

(assert (=> d!26909 (=> res!50126 e!65048)))

(assert (=> d!26909 (= res!50126 (bvsge #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(assert (=> d!26909 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (mask!6607 newMap!16)) e!65048)))

(assert (= (and d!26909 (not res!50126)) b!99872))

(assert (= (and b!99872 c!17090) b!99871))

(assert (= (and b!99872 (not c!17090)) b!99873))

(assert (= (and b!99871 res!50127) b!99870))

(assert (= (or b!99870 b!99873) bm!10268))

(declare-fun m!109913 () Bool)

(assert (=> b!99871 m!109913))

(declare-fun m!109915 () Bool)

(assert (=> b!99871 m!109915))

(declare-fun m!109917 () Bool)

(assert (=> b!99871 m!109917))

(assert (=> b!99871 m!109913))

(declare-fun m!109919 () Bool)

(assert (=> b!99871 m!109919))

(assert (=> b!99872 m!109913))

(assert (=> b!99872 m!109913))

(declare-fun m!109921 () Bool)

(assert (=> b!99872 m!109921))

(declare-fun m!109923 () Bool)

(assert (=> bm!10268 m!109923))

(assert (=> d!26639 d!26909))

(assert (=> d!26639 d!26667))

(assert (=> d!26639 d!26631))

(assert (=> d!26639 d!26563))

(declare-fun d!26911 () Bool)

(assert (=> d!26911 (= (arrayCountValidKeys!0 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (bvadd (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!50362 () Unit!2998)

(declare-fun choose!2 (array!4231 (_ BitVec 32)) Unit!2998)

(assert (=> d!26911 (= lt!50362 (choose!2 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(declare-fun e!65052 () Bool)

(assert (=> d!26911 e!65052))

(declare-fun res!50132 () Bool)

(assert (=> d!26911 (=> (not res!50132) (not e!65052))))

(assert (=> d!26911 (= res!50132 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 lt!50090))))))

(assert (=> d!26911 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50090 (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))) lt!50362)))

(declare-fun b!99878 () Bool)

(declare-fun res!50133 () Bool)

(assert (=> b!99878 (=> (not res!50133) (not e!65052))))

(assert (=> b!99878 (= res!50133 (validKeyInArray!0 (select (arr!2008 lt!50090) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(declare-fun b!99879 () Bool)

(assert (=> b!99879 (= e!65052 (bvslt (size!2260 lt!50090) #b01111111111111111111111111111111))))

(assert (= (and d!26911 res!50132) b!99878))

(assert (= (and b!99878 res!50133) b!99879))

(assert (=> d!26911 m!109089))

(declare-fun m!109925 () Bool)

(assert (=> d!26911 m!109925))

(assert (=> b!99878 m!109907))

(assert (=> b!99878 m!109907))

(assert (=> b!99878 m!109909))

(assert (=> d!26639 d!26911))

(assert (=> d!26639 d!26675))

(declare-fun d!26913 () Bool)

(declare-fun res!50135 () Bool)

(declare-fun e!65054 () Bool)

(assert (=> d!26913 (=> res!50135 e!65054)))

(assert (=> d!26913 (= res!50135 (bvsge lt!50089 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(assert (=> d!26913 (= (arrayNoDuplicates!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) lt!50089 lt!50110) e!65054)))

(declare-fun call!10272 () Bool)

(declare-fun c!17091 () Bool)

(declare-fun bm!10269 () Bool)

(assert (=> bm!10269 (= call!10272 (arrayNoDuplicates!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (bvadd lt!50089 #b00000000000000000000000000000001) (ite c!17091 (Cons!1586 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) lt!50089) lt!50110) lt!50110)))))

(declare-fun b!99880 () Bool)

(declare-fun e!65055 () Bool)

(assert (=> b!99880 (= e!65055 call!10272)))

(declare-fun b!99881 () Bool)

(declare-fun e!65056 () Bool)

(assert (=> b!99881 (= e!65056 (contains!800 lt!50110 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) lt!50089)))))

(declare-fun b!99882 () Bool)

(declare-fun e!65053 () Bool)

(assert (=> b!99882 (= e!65054 e!65053)))

(declare-fun res!50136 () Bool)

(assert (=> b!99882 (=> (not res!50136) (not e!65053))))

(assert (=> b!99882 (= res!50136 (not e!65056))))

(declare-fun res!50134 () Bool)

(assert (=> b!99882 (=> (not res!50134) (not e!65056))))

(assert (=> b!99882 (= res!50134 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) lt!50089)))))

(declare-fun b!99883 () Bool)

(assert (=> b!99883 (= e!65055 call!10272)))

(declare-fun b!99884 () Bool)

(assert (=> b!99884 (= e!65053 e!65055)))

(assert (=> b!99884 (= c!17091 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) lt!50089)))))

(assert (= (and d!26913 (not res!50135)) b!99882))

(assert (= (and b!99882 res!50134) b!99881))

(assert (= (and b!99882 res!50136) b!99884))

(assert (= (and b!99884 c!17091) b!99883))

(assert (= (and b!99884 (not c!17091)) b!99880))

(assert (= (or b!99883 b!99880) bm!10269))

(declare-fun m!109927 () Bool)

(assert (=> bm!10269 m!109927))

(declare-fun m!109929 () Bool)

(assert (=> bm!10269 m!109929))

(assert (=> b!99881 m!109927))

(assert (=> b!99881 m!109927))

(declare-fun m!109931 () Bool)

(assert (=> b!99881 m!109931))

(assert (=> b!99882 m!109927))

(assert (=> b!99882 m!109927))

(declare-fun m!109933 () Bool)

(assert (=> b!99882 m!109933))

(assert (=> b!99884 m!109927))

(assert (=> b!99884 m!109927))

(assert (=> b!99884 m!109933))

(assert (=> d!26639 d!26913))

(declare-fun d!26915 () Bool)

(assert (=> d!26915 (arrayContainsKey!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!50365 () Unit!2998)

(declare-fun choose!13 (array!4231 (_ BitVec 64) (_ BitVec 32)) Unit!2998)

(assert (=> d!26915 (= lt!50365 (choose!13 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))

(assert (=> d!26915 (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000)))

(assert (=> d!26915 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))) lt!50365)))

(declare-fun bs!4125 () Bool)

(assert (= bs!4125 d!26915))

(assert (=> bs!4125 m!108591))

(assert (=> bs!4125 m!109121))

(assert (=> bs!4125 m!108591))

(declare-fun m!109935 () Bool)

(assert (=> bs!4125 m!109935))

(assert (=> d!26639 d!26915))

(declare-fun d!26917 () Bool)

(declare-fun e!65057 () Bool)

(assert (=> d!26917 e!65057))

(declare-fun res!50137 () Bool)

(assert (=> d!26917 (=> (not res!50137) (not e!65057))))

(assert (=> d!26917 (= res!50137 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 lt!50093))))))

(declare-fun lt!50366 () Unit!2998)

(assert (=> d!26917 (= lt!50366 (choose!614 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26917 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26917 (= (lemmaValidKeyInArrayIsInListMap!101 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (defaultEntry!2501 newMap!16)) lt!50366)))

(declare-fun b!99885 () Bool)

(assert (=> b!99885 (= e!65057 (contains!799 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 lt!50093) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(assert (= (and d!26917 res!50137) b!99885))

(declare-fun m!109937 () Bool)

(assert (=> d!26917 m!109937))

(assert (=> d!26917 m!108865))

(assert (=> b!99885 m!109119))

(declare-fun m!109939 () Bool)

(assert (=> b!99885 m!109939))

(assert (=> b!99885 m!109119))

(assert (=> b!99885 m!109939))

(declare-fun m!109941 () Bool)

(assert (=> b!99885 m!109941))

(assert (=> d!26639 d!26917))

(declare-fun d!26919 () Bool)

(declare-fun res!50138 () Bool)

(declare-fun e!65058 () Bool)

(assert (=> d!26919 (=> res!50138 e!65058)))

(assert (=> d!26919 (= res!50138 (= (select (arr!2008 lt!50092) #b00000000000000000000000000000000) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26919 (= (arrayContainsKey!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000) e!65058)))

(declare-fun b!99886 () Bool)

(declare-fun e!65059 () Bool)

(assert (=> b!99886 (= e!65058 e!65059)))

(declare-fun res!50139 () Bool)

(assert (=> b!99886 (=> (not res!50139) (not e!65059))))

(assert (=> b!99886 (= res!50139 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 lt!50092)))))

(declare-fun b!99887 () Bool)

(assert (=> b!99887 (= e!65059 (arrayContainsKey!0 lt!50092 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26919 (not res!50138)) b!99886))

(assert (= (and b!99886 res!50139) b!99887))

(declare-fun m!109943 () Bool)

(assert (=> d!26919 m!109943))

(assert (=> b!99887 m!108591))

(declare-fun m!109945 () Bool)

(assert (=> b!99887 m!109945))

(assert (=> d!26639 d!26919))

(declare-fun d!26921 () Bool)

(declare-fun e!65062 () Bool)

(assert (=> d!26921 e!65062))

(declare-fun res!50142 () Bool)

(assert (=> d!26921 (=> (not res!50142) (not e!65062))))

(assert (=> d!26921 (= res!50142 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 (_keys!4194 newMap!16)))))))

(declare-fun lt!50369 () Unit!2998)

(declare-fun choose!102 ((_ BitVec 64) array!4231 (_ BitVec 32) (_ BitVec 32)) Unit!2998)

(assert (=> d!26921 (= lt!50369 (choose!102 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (mask!6607 newMap!16)))))

(assert (=> d!26921 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26921 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (mask!6607 newMap!16)) lt!50369)))

(declare-fun b!99890 () Bool)

(assert (=> b!99890 (= e!65062 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (mask!6607 newMap!16)))))

(assert (= (and d!26921 res!50142) b!99890))

(assert (=> d!26921 m!108591))

(declare-fun m!109947 () Bool)

(assert (=> d!26921 m!109947))

(assert (=> d!26921 m!108865))

(assert (=> b!99890 m!109101))

(assert (=> b!99890 m!109093))

(assert (=> d!26639 d!26921))

(declare-fun b!99900 () Bool)

(declare-fun res!50151 () Bool)

(declare-fun e!65068 () Bool)

(assert (=> b!99900 (=> (not res!50151) (not e!65068))))

(assert (=> b!99900 (= res!50151 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99901 () Bool)

(assert (=> b!99901 (= e!65068 (bvslt (size!2260 (_keys!4194 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!99899 () Bool)

(declare-fun res!50154 () Bool)

(assert (=> b!99899 (=> (not res!50154) (not e!65068))))

(assert (=> b!99899 (= res!50154 (not (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))))

(declare-fun d!26923 () Bool)

(declare-fun e!65067 () Bool)

(assert (=> d!26923 e!65067))

(declare-fun res!50153 () Bool)

(assert (=> d!26923 (=> (not res!50153) (not e!65067))))

(assert (=> d!26923 (= res!50153 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 (_keys!4194 newMap!16)))))))

(declare-fun lt!50372 () Unit!2998)

(declare-fun choose!1 (array!4231 (_ BitVec 32) (_ BitVec 64)) Unit!2998)

(assert (=> d!26923 (= lt!50372 (choose!1 (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26923 e!65068))

(declare-fun res!50152 () Bool)

(assert (=> d!26923 (=> (not res!50152) (not e!65068))))

(assert (=> d!26923 (= res!50152 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 (_keys!4194 newMap!16)))))))

(assert (=> d!26923 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4194 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50372)))

(declare-fun b!99902 () Bool)

(assert (=> b!99902 (= e!65067 (= (arrayCountValidKeys!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4194 newMap!16) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!26923 res!50152) b!99899))

(assert (= (and b!99899 res!50154) b!99900))

(assert (= (and b!99900 res!50151) b!99901))

(assert (= (and d!26923 res!50153) b!99902))

(assert (=> b!99900 m!108591))

(assert (=> b!99900 m!108735))

(declare-fun m!109949 () Bool)

(assert (=> b!99899 m!109949))

(assert (=> b!99899 m!109949))

(declare-fun m!109951 () Bool)

(assert (=> b!99899 m!109951))

(assert (=> d!26923 m!108591))

(declare-fun m!109953 () Bool)

(assert (=> d!26923 m!109953))

(assert (=> b!99902 m!109101))

(assert (=> b!99902 m!109091))

(assert (=> b!99902 m!108713))

(assert (=> d!26639 d!26923))

(declare-fun d!26925 () Bool)

(declare-fun e!65069 () Bool)

(assert (=> d!26925 e!65069))

(declare-fun res!50156 () Bool)

(assert (=> d!26925 (=> (not res!50156) (not e!65069))))

(declare-fun lt!50373 () ListLongMap!1517)

(assert (=> d!26925 (= res!50156 (contains!799 lt!50373 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50374 () List!1591)

(assert (=> d!26925 (= lt!50373 (ListLongMap!1518 lt!50374))))

(declare-fun lt!50375 () Unit!2998)

(declare-fun lt!50376 () Unit!2998)

(assert (=> d!26925 (= lt!50375 lt!50376)))

(assert (=> d!26925 (= (getValueByKey!149 lt!50374 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= lt!50376 (lemmaContainsTupThenGetReturnValue!68 lt!50374 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= lt!50374 (insertStrictlySorted!71 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50373)))

(declare-fun b!99903 () Bool)

(declare-fun res!50155 () Bool)

(assert (=> b!99903 (=> (not res!50155) (not e!65069))))

(assert (=> b!99903 (= res!50155 (= (getValueByKey!149 (toList!774 lt!50373) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99904 () Bool)

(assert (=> b!99904 (= e!65069 (contains!801 (toList!774 lt!50373) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26925 res!50156) b!99903))

(assert (= (and b!99903 res!50155) b!99904))

(declare-fun m!109955 () Bool)

(assert (=> d!26925 m!109955))

(declare-fun m!109957 () Bool)

(assert (=> d!26925 m!109957))

(declare-fun m!109959 () Bool)

(assert (=> d!26925 m!109959))

(declare-fun m!109961 () Bool)

(assert (=> d!26925 m!109961))

(declare-fun m!109963 () Bool)

(assert (=> b!99903 m!109963))

(declare-fun m!109965 () Bool)

(assert (=> b!99904 m!109965))

(assert (=> d!26639 d!26925))

(declare-fun d!26927 () Bool)

(declare-fun e!65072 () Bool)

(assert (=> d!26927 e!65072))

(declare-fun res!50159 () Bool)

(assert (=> d!26927 (=> (not res!50159) (not e!65072))))

(assert (=> d!26927 (= res!50159 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 (_keys!4194 newMap!16)))))))

(declare-fun lt!50379 () Unit!2998)

(declare-fun choose!41 (array!4231 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1590) Unit!2998)

(assert (=> d!26927 (= lt!50379 (choose!41 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) lt!50089 lt!50110))))

(assert (=> d!26927 (bvslt (size!2260 (_keys!4194 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26927 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) lt!50089 lt!50110) lt!50379)))

(declare-fun b!99907 () Bool)

(assert (=> b!99907 (= e!65072 (arrayNoDuplicates!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) lt!50089 lt!50110))))

(assert (= (and d!26927 res!50159) b!99907))

(assert (=> d!26927 m!108591))

(declare-fun m!109967 () Bool)

(assert (=> d!26927 m!109967))

(assert (=> b!99907 m!109101))

(assert (=> b!99907 m!109109))

(assert (=> d!26639 d!26927))

(declare-fun d!26929 () Bool)

(declare-fun lt!50380 () (_ BitVec 32))

(assert (=> d!26929 (and (bvsge lt!50380 #b00000000000000000000000000000000) (bvsle lt!50380 (bvsub (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!65073 () (_ BitVec 32))

(assert (=> d!26929 (= lt!50380 e!65073)))

(declare-fun c!17092 () Bool)

(assert (=> d!26929 (= c!17092 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26929 (and (bvsle #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2260 (_keys!4194 newMap!16)) (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(assert (=> d!26929 (= (arrayCountValidKeys!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) lt!50380)))

(declare-fun b!99908 () Bool)

(declare-fun e!65074 () (_ BitVec 32))

(declare-fun call!10273 () (_ BitVec 32))

(assert (=> b!99908 (= e!65074 call!10273)))

(declare-fun b!99909 () Bool)

(assert (=> b!99909 (= e!65073 #b00000000000000000000000000000000)))

(declare-fun b!99910 () Bool)

(assert (=> b!99910 (= e!65074 (bvadd #b00000000000000000000000000000001 call!10273))))

(declare-fun b!99911 () Bool)

(assert (=> b!99911 (= e!65073 e!65074)))

(declare-fun c!17093 () Bool)

(assert (=> b!99911 (= c!17093 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10270 () Bool)

(assert (=> bm!10270 (= call!10273 (arrayCountValidKeys!0 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (= (and d!26929 c!17092) b!99909))

(assert (= (and d!26929 (not c!17092)) b!99911))

(assert (= (and b!99911 c!17093) b!99910))

(assert (= (and b!99911 (not c!17093)) b!99908))

(assert (= (or b!99910 b!99908) bm!10270))

(assert (=> b!99911 m!109913))

(assert (=> b!99911 m!109913))

(assert (=> b!99911 m!109921))

(declare-fun m!109969 () Bool)

(assert (=> bm!10270 m!109969))

(assert (=> d!26639 d!26929))

(declare-fun b!99912 () Bool)

(declare-fun e!65077 () Bool)

(declare-fun lt!50382 () ListLongMap!1517)

(assert (=> b!99912 (= e!65077 (= (apply!93 lt!50382 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10271 () Bool)

(declare-fun call!10280 () Bool)

(assert (=> bm!10271 (= call!10280 (contains!799 lt!50382 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99913 () Bool)

(declare-fun res!50168 () Bool)

(declare-fun e!65083 () Bool)

(assert (=> b!99913 (=> (not res!50168) (not e!65083))))

(declare-fun e!65076 () Bool)

(assert (=> b!99913 (= res!50168 e!65076)))

(declare-fun c!17094 () Bool)

(assert (=> b!99913 (= c!17094 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99914 () Bool)

(declare-fun e!65081 () Bool)

(assert (=> b!99914 (= e!65081 (validKeyInArray!0 (select (arr!2008 lt!50093) #b00000000000000000000000000000000)))))

(declare-fun b!99915 () Bool)

(declare-fun e!65082 () Bool)

(declare-fun e!65087 () Bool)

(assert (=> b!99915 (= e!65082 e!65087)))

(declare-fun res!50166 () Bool)

(assert (=> b!99915 (=> (not res!50166) (not e!65087))))

(assert (=> b!99915 (= res!50166 (contains!799 lt!50382 (select (arr!2008 lt!50093) #b00000000000000000000000000000000)))))

(assert (=> b!99915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 lt!50093)))))

(declare-fun b!99916 () Bool)

(declare-fun e!65079 () ListLongMap!1517)

(declare-fun call!10274 () ListLongMap!1517)

(assert (=> b!99916 (= e!65079 call!10274)))

(declare-fun b!99917 () Bool)

(declare-fun e!65085 () Bool)

(assert (=> b!99917 (= e!65085 (not call!10280))))

(declare-fun b!99918 () Bool)

(declare-fun e!65080 () ListLongMap!1517)

(assert (=> b!99918 (= e!65080 e!65079)))

(declare-fun c!17096 () Bool)

(assert (=> b!99918 (= c!17096 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99919 () Bool)

(declare-fun c!17095 () Bool)

(assert (=> b!99919 (= c!17095 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65084 () ListLongMap!1517)

(assert (=> b!99919 (= e!65079 e!65084)))

(declare-fun b!99920 () Bool)

(assert (=> b!99920 (= e!65084 call!10274)))

(declare-fun d!26931 () Bool)

(assert (=> d!26931 e!65083))

(declare-fun res!50167 () Bool)

(assert (=> d!26931 (=> (not res!50167) (not e!65083))))

(assert (=> d!26931 (= res!50167 (or (bvsge #b00000000000000000000000000000000 (size!2260 lt!50093)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 lt!50093)))))))

(declare-fun lt!50384 () ListLongMap!1517)

(assert (=> d!26931 (= lt!50382 lt!50384)))

(declare-fun lt!50395 () Unit!2998)

(declare-fun e!65075 () Unit!2998)

(assert (=> d!26931 (= lt!50395 e!65075)))

(declare-fun c!17098 () Bool)

(declare-fun e!65078 () Bool)

(assert (=> d!26931 (= c!17098 e!65078)))

(declare-fun res!50160 () Bool)

(assert (=> d!26931 (=> (not res!50160) (not e!65078))))

(assert (=> d!26931 (= res!50160 (bvslt #b00000000000000000000000000000000 (size!2260 lt!50093)))))

(assert (=> d!26931 (= lt!50384 e!65080)))

(declare-fun c!17097 () Bool)

(assert (=> d!26931 (= c!17097 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26931 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26931 (= (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50382)))

(declare-fun b!99921 () Bool)

(declare-fun lt!50385 () Unit!2998)

(assert (=> b!99921 (= e!65075 lt!50385)))

(declare-fun lt!50392 () ListLongMap!1517)

(assert (=> b!99921 (= lt!50392 (getCurrentListMapNoExtraKeys!93 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50401 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50401 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50399 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50399 (select (arr!2008 lt!50093) #b00000000000000000000000000000000))))

(declare-fun lt!50390 () Unit!2998)

(assert (=> b!99921 (= lt!50390 (addStillContains!69 lt!50392 lt!50401 (zeroValue!2382 newMap!16) lt!50399))))

(assert (=> b!99921 (contains!799 (+!129 lt!50392 (tuple2!2333 lt!50401 (zeroValue!2382 newMap!16))) lt!50399)))

(declare-fun lt!50394 () Unit!2998)

(assert (=> b!99921 (= lt!50394 lt!50390)))

(declare-fun lt!50387 () ListLongMap!1517)

(assert (=> b!99921 (= lt!50387 (getCurrentListMapNoExtraKeys!93 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50400 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50400 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50396 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50396 (select (arr!2008 lt!50093) #b00000000000000000000000000000000))))

(declare-fun lt!50386 () Unit!2998)

(assert (=> b!99921 (= lt!50386 (addApplyDifferent!69 lt!50387 lt!50400 (minValue!2382 newMap!16) lt!50396))))

(assert (=> b!99921 (= (apply!93 (+!129 lt!50387 (tuple2!2333 lt!50400 (minValue!2382 newMap!16))) lt!50396) (apply!93 lt!50387 lt!50396))))

(declare-fun lt!50402 () Unit!2998)

(assert (=> b!99921 (= lt!50402 lt!50386)))

(declare-fun lt!50388 () ListLongMap!1517)

(assert (=> b!99921 (= lt!50388 (getCurrentListMapNoExtraKeys!93 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50398 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50398 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50391 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50391 (select (arr!2008 lt!50093) #b00000000000000000000000000000000))))

(declare-fun lt!50393 () Unit!2998)

(assert (=> b!99921 (= lt!50393 (addApplyDifferent!69 lt!50388 lt!50398 (zeroValue!2382 newMap!16) lt!50391))))

(assert (=> b!99921 (= (apply!93 (+!129 lt!50388 (tuple2!2333 lt!50398 (zeroValue!2382 newMap!16))) lt!50391) (apply!93 lt!50388 lt!50391))))

(declare-fun lt!50381 () Unit!2998)

(assert (=> b!99921 (= lt!50381 lt!50393)))

(declare-fun lt!50397 () ListLongMap!1517)

(assert (=> b!99921 (= lt!50397 (getCurrentListMapNoExtraKeys!93 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50383 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50383 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50389 () (_ BitVec 64))

(assert (=> b!99921 (= lt!50389 (select (arr!2008 lt!50093) #b00000000000000000000000000000000))))

(assert (=> b!99921 (= lt!50385 (addApplyDifferent!69 lt!50397 lt!50383 (minValue!2382 newMap!16) lt!50389))))

(assert (=> b!99921 (= (apply!93 (+!129 lt!50397 (tuple2!2333 lt!50383 (minValue!2382 newMap!16))) lt!50389) (apply!93 lt!50397 lt!50389))))

(declare-fun b!99922 () Bool)

(declare-fun call!10277 () Bool)

(assert (=> b!99922 (= e!65076 (not call!10277))))

(declare-fun b!99923 () Bool)

(declare-fun e!65086 () Bool)

(assert (=> b!99923 (= e!65076 e!65086)))

(declare-fun res!50162 () Bool)

(assert (=> b!99923 (= res!50162 call!10277)))

(assert (=> b!99923 (=> (not res!50162) (not e!65086))))

(declare-fun b!99924 () Bool)

(assert (=> b!99924 (= e!65087 (= (apply!93 lt!50382 (select (arr!2008 lt!50093) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 lt!50113) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99924 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 lt!50113)))))

(assert (=> b!99924 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 lt!50093)))))

(declare-fun call!10279 () ListLongMap!1517)

(declare-fun call!10278 () ListLongMap!1517)

(declare-fun call!10275 () ListLongMap!1517)

(declare-fun bm!10272 () Bool)

(declare-fun call!10276 () ListLongMap!1517)

(assert (=> bm!10272 (= call!10276 (+!129 (ite c!17097 call!10278 (ite c!17096 call!10279 call!10275)) (ite (or c!17097 c!17096) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!99925 () Bool)

(assert (=> b!99925 (= e!65085 e!65077)))

(declare-fun res!50164 () Bool)

(assert (=> b!99925 (= res!50164 call!10280)))

(assert (=> b!99925 (=> (not res!50164) (not e!65077))))

(declare-fun bm!10273 () Bool)

(assert (=> bm!10273 (= call!10277 (contains!799 lt!50382 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10274 () Bool)

(assert (=> bm!10274 (= call!10274 call!10276)))

(declare-fun bm!10275 () Bool)

(assert (=> bm!10275 (= call!10278 (getCurrentListMapNoExtraKeys!93 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99926 () Bool)

(declare-fun Unit!3032 () Unit!2998)

(assert (=> b!99926 (= e!65075 Unit!3032)))

(declare-fun b!99927 () Bool)

(assert (=> b!99927 (= e!65086 (= (apply!93 lt!50382 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10276 () Bool)

(assert (=> bm!10276 (= call!10275 call!10279)))

(declare-fun b!99928 () Bool)

(assert (=> b!99928 (= e!65080 (+!129 call!10276 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99929 () Bool)

(assert (=> b!99929 (= e!65078 (validKeyInArray!0 (select (arr!2008 lt!50093) #b00000000000000000000000000000000)))))

(declare-fun b!99930 () Bool)

(declare-fun res!50165 () Bool)

(assert (=> b!99930 (=> (not res!50165) (not e!65083))))

(assert (=> b!99930 (= res!50165 e!65082)))

(declare-fun res!50161 () Bool)

(assert (=> b!99930 (=> res!50161 e!65082)))

(assert (=> b!99930 (= res!50161 (not e!65081))))

(declare-fun res!50163 () Bool)

(assert (=> b!99930 (=> (not res!50163) (not e!65081))))

(assert (=> b!99930 (= res!50163 (bvslt #b00000000000000000000000000000000 (size!2260 lt!50093)))))

(declare-fun bm!10277 () Bool)

(assert (=> bm!10277 (= call!10279 call!10278)))

(declare-fun b!99931 () Bool)

(assert (=> b!99931 (= e!65084 call!10275)))

(declare-fun b!99932 () Bool)

(assert (=> b!99932 (= e!65083 e!65085)))

(declare-fun c!17099 () Bool)

(assert (=> b!99932 (= c!17099 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26931 c!17097) b!99928))

(assert (= (and d!26931 (not c!17097)) b!99918))

(assert (= (and b!99918 c!17096) b!99916))

(assert (= (and b!99918 (not c!17096)) b!99919))

(assert (= (and b!99919 c!17095) b!99920))

(assert (= (and b!99919 (not c!17095)) b!99931))

(assert (= (or b!99920 b!99931) bm!10276))

(assert (= (or b!99916 bm!10276) bm!10277))

(assert (= (or b!99916 b!99920) bm!10274))

(assert (= (or b!99928 bm!10277) bm!10275))

(assert (= (or b!99928 bm!10274) bm!10272))

(assert (= (and d!26931 res!50160) b!99929))

(assert (= (and d!26931 c!17098) b!99921))

(assert (= (and d!26931 (not c!17098)) b!99926))

(assert (= (and d!26931 res!50167) b!99930))

(assert (= (and b!99930 res!50163) b!99914))

(assert (= (and b!99930 (not res!50161)) b!99915))

(assert (= (and b!99915 res!50166) b!99924))

(assert (= (and b!99930 res!50165) b!99913))

(assert (= (and b!99913 c!17094) b!99923))

(assert (= (and b!99913 (not c!17094)) b!99922))

(assert (= (and b!99923 res!50162) b!99927))

(assert (= (or b!99923 b!99922) bm!10273))

(assert (= (and b!99913 res!50168) b!99932))

(assert (= (and b!99932 c!17099) b!99925))

(assert (= (and b!99932 (not c!17099)) b!99917))

(assert (= (and b!99925 res!50164) b!99912))

(assert (= (or b!99925 b!99917) bm!10271))

(declare-fun b_lambda!4449 () Bool)

(assert (=> (not b_lambda!4449) (not b!99924)))

(assert (=> b!99924 t!5567))

(declare-fun b_and!6133 () Bool)

(assert (= b_and!6129 (and (=> t!5567 result!3299) b_and!6133)))

(assert (=> b!99924 t!5569))

(declare-fun b_and!6135 () Bool)

(assert (= b_and!6131 (and (=> t!5569 result!3301) b_and!6135)))

(declare-fun m!109971 () Bool)

(assert (=> b!99924 m!109971))

(declare-fun m!109973 () Bool)

(assert (=> b!99924 m!109973))

(assert (=> b!99924 m!109007))

(assert (=> b!99924 m!109971))

(declare-fun m!109975 () Bool)

(assert (=> b!99924 m!109975))

(assert (=> b!99924 m!109973))

(assert (=> b!99924 m!109007))

(declare-fun m!109977 () Bool)

(assert (=> b!99924 m!109977))

(assert (=> b!99914 m!109971))

(assert (=> b!99914 m!109971))

(declare-fun m!109979 () Bool)

(assert (=> b!99914 m!109979))

(declare-fun m!109981 () Bool)

(assert (=> bm!10271 m!109981))

(assert (=> b!99915 m!109971))

(assert (=> b!99915 m!109971))

(declare-fun m!109983 () Bool)

(assert (=> b!99915 m!109983))

(declare-fun m!109985 () Bool)

(assert (=> b!99928 m!109985))

(declare-fun m!109987 () Bool)

(assert (=> bm!10273 m!109987))

(declare-fun m!109989 () Bool)

(assert (=> bm!10275 m!109989))

(assert (=> d!26931 m!108865))

(declare-fun m!109991 () Bool)

(assert (=> bm!10272 m!109991))

(assert (=> b!99929 m!109971))

(assert (=> b!99929 m!109971))

(assert (=> b!99929 m!109979))

(declare-fun m!109993 () Bool)

(assert (=> b!99927 m!109993))

(declare-fun m!109995 () Bool)

(assert (=> b!99921 m!109995))

(declare-fun m!109997 () Bool)

(assert (=> b!99921 m!109997))

(assert (=> b!99921 m!109971))

(declare-fun m!109999 () Bool)

(assert (=> b!99921 m!109999))

(declare-fun m!110001 () Bool)

(assert (=> b!99921 m!110001))

(declare-fun m!110003 () Bool)

(assert (=> b!99921 m!110003))

(declare-fun m!110005 () Bool)

(assert (=> b!99921 m!110005))

(declare-fun m!110007 () Bool)

(assert (=> b!99921 m!110007))

(declare-fun m!110009 () Bool)

(assert (=> b!99921 m!110009))

(declare-fun m!110011 () Bool)

(assert (=> b!99921 m!110011))

(assert (=> b!99921 m!109999))

(declare-fun m!110013 () Bool)

(assert (=> b!99921 m!110013))

(declare-fun m!110015 () Bool)

(assert (=> b!99921 m!110015))

(declare-fun m!110017 () Bool)

(assert (=> b!99921 m!110017))

(assert (=> b!99921 m!110005))

(assert (=> b!99921 m!110011))

(declare-fun m!110019 () Bool)

(assert (=> b!99921 m!110019))

(assert (=> b!99921 m!109989))

(declare-fun m!110021 () Bool)

(assert (=> b!99921 m!110021))

(assert (=> b!99921 m!110009))

(declare-fun m!110023 () Bool)

(assert (=> b!99921 m!110023))

(declare-fun m!110025 () Bool)

(assert (=> b!99912 m!110025))

(assert (=> d!26639 d!26931))

(declare-fun b!99933 () Bool)

(declare-fun e!65090 () Bool)

(declare-fun lt!50404 () ListLongMap!1517)

(assert (=> b!99933 (= e!65090 (= (apply!93 lt!50404 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10278 () Bool)

(declare-fun call!10287 () Bool)

(assert (=> bm!10278 (= call!10287 (contains!799 lt!50404 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99934 () Bool)

(declare-fun res!50177 () Bool)

(declare-fun e!65096 () Bool)

(assert (=> b!99934 (=> (not res!50177) (not e!65096))))

(declare-fun e!65089 () Bool)

(assert (=> b!99934 (= res!50177 e!65089)))

(declare-fun c!17100 () Bool)

(assert (=> b!99934 (= c!17100 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99935 () Bool)

(declare-fun e!65094 () Bool)

(assert (=> b!99935 (= e!65094 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99936 () Bool)

(declare-fun e!65095 () Bool)

(declare-fun e!65100 () Bool)

(assert (=> b!99936 (= e!65095 e!65100)))

(declare-fun res!50175 () Bool)

(assert (=> b!99936 (=> (not res!50175) (not e!65100))))

(assert (=> b!99936 (= res!50175 (contains!799 lt!50404 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!99936 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun b!99937 () Bool)

(declare-fun e!65092 () ListLongMap!1517)

(declare-fun call!10281 () ListLongMap!1517)

(assert (=> b!99937 (= e!65092 call!10281)))

(declare-fun b!99938 () Bool)

(declare-fun e!65098 () Bool)

(assert (=> b!99938 (= e!65098 (not call!10287))))

(declare-fun b!99939 () Bool)

(declare-fun e!65093 () ListLongMap!1517)

(assert (=> b!99939 (= e!65093 e!65092)))

(declare-fun c!17102 () Bool)

(assert (=> b!99939 (= c!17102 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99940 () Bool)

(declare-fun c!17101 () Bool)

(assert (=> b!99940 (= c!17101 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65097 () ListLongMap!1517)

(assert (=> b!99940 (= e!65092 e!65097)))

(declare-fun b!99941 () Bool)

(assert (=> b!99941 (= e!65097 call!10281)))

(declare-fun d!26933 () Bool)

(assert (=> d!26933 e!65096))

(declare-fun res!50176 () Bool)

(assert (=> d!26933 (=> (not res!50176) (not e!65096))))

(assert (=> d!26933 (= res!50176 (or (bvsge #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))))

(declare-fun lt!50406 () ListLongMap!1517)

(assert (=> d!26933 (= lt!50404 lt!50406)))

(declare-fun lt!50417 () Unit!2998)

(declare-fun e!65088 () Unit!2998)

(assert (=> d!26933 (= lt!50417 e!65088)))

(declare-fun c!17104 () Bool)

(declare-fun e!65091 () Bool)

(assert (=> d!26933 (= c!17104 e!65091)))

(declare-fun res!50169 () Bool)

(assert (=> d!26933 (=> (not res!50169) (not e!65091))))

(assert (=> d!26933 (= res!50169 (bvslt #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(assert (=> d!26933 (= lt!50406 e!65093)))

(declare-fun c!17103 () Bool)

(assert (=> d!26933 (= c!17103 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26933 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26933 (= (getCurrentListMap!455 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50404)))

(declare-fun b!99942 () Bool)

(declare-fun lt!50407 () Unit!2998)

(assert (=> b!99942 (= e!65088 lt!50407)))

(declare-fun lt!50414 () ListLongMap!1517)

(assert (=> b!99942 (= lt!50414 (getCurrentListMapNoExtraKeys!93 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50423 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50423 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50421 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50421 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50412 () Unit!2998)

(assert (=> b!99942 (= lt!50412 (addStillContains!69 lt!50414 lt!50423 (zeroValue!2382 newMap!16) lt!50421))))

(assert (=> b!99942 (contains!799 (+!129 lt!50414 (tuple2!2333 lt!50423 (zeroValue!2382 newMap!16))) lt!50421)))

(declare-fun lt!50416 () Unit!2998)

(assert (=> b!99942 (= lt!50416 lt!50412)))

(declare-fun lt!50409 () ListLongMap!1517)

(assert (=> b!99942 (= lt!50409 (getCurrentListMapNoExtraKeys!93 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50422 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50422 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50418 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50418 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50408 () Unit!2998)

(assert (=> b!99942 (= lt!50408 (addApplyDifferent!69 lt!50409 lt!50422 (minValue!2382 newMap!16) lt!50418))))

(assert (=> b!99942 (= (apply!93 (+!129 lt!50409 (tuple2!2333 lt!50422 (minValue!2382 newMap!16))) lt!50418) (apply!93 lt!50409 lt!50418))))

(declare-fun lt!50424 () Unit!2998)

(assert (=> b!99942 (= lt!50424 lt!50408)))

(declare-fun lt!50410 () ListLongMap!1517)

(assert (=> b!99942 (= lt!50410 (getCurrentListMapNoExtraKeys!93 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50420 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50420 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50413 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50413 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50415 () Unit!2998)

(assert (=> b!99942 (= lt!50415 (addApplyDifferent!69 lt!50410 lt!50420 (zeroValue!2382 newMap!16) lt!50413))))

(assert (=> b!99942 (= (apply!93 (+!129 lt!50410 (tuple2!2333 lt!50420 (zeroValue!2382 newMap!16))) lt!50413) (apply!93 lt!50410 lt!50413))))

(declare-fun lt!50403 () Unit!2998)

(assert (=> b!99942 (= lt!50403 lt!50415)))

(declare-fun lt!50419 () ListLongMap!1517)

(assert (=> b!99942 (= lt!50419 (getCurrentListMapNoExtraKeys!93 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50405 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50405 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50411 () (_ BitVec 64))

(assert (=> b!99942 (= lt!50411 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!99942 (= lt!50407 (addApplyDifferent!69 lt!50419 lt!50405 (minValue!2382 newMap!16) lt!50411))))

(assert (=> b!99942 (= (apply!93 (+!129 lt!50419 (tuple2!2333 lt!50405 (minValue!2382 newMap!16))) lt!50411) (apply!93 lt!50419 lt!50411))))

(declare-fun b!99943 () Bool)

(declare-fun call!10284 () Bool)

(assert (=> b!99943 (= e!65089 (not call!10284))))

(declare-fun b!99944 () Bool)

(declare-fun e!65099 () Bool)

(assert (=> b!99944 (= e!65089 e!65099)))

(declare-fun res!50171 () Bool)

(assert (=> b!99944 (= res!50171 call!10284)))

(assert (=> b!99944 (=> (not res!50171) (not e!65099))))

(declare-fun b!99945 () Bool)

(assert (=> b!99945 (= e!65100 (= (apply!93 lt!50404 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99945 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))))))

(assert (=> b!99945 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun call!10282 () ListLongMap!1517)

(declare-fun bm!10279 () Bool)

(declare-fun call!10283 () ListLongMap!1517)

(declare-fun call!10286 () ListLongMap!1517)

(declare-fun call!10285 () ListLongMap!1517)

(assert (=> bm!10279 (= call!10283 (+!129 (ite c!17103 call!10285 (ite c!17102 call!10286 call!10282)) (ite (or c!17103 c!17102) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!99946 () Bool)

(assert (=> b!99946 (= e!65098 e!65090)))

(declare-fun res!50173 () Bool)

(assert (=> b!99946 (= res!50173 call!10287)))

(assert (=> b!99946 (=> (not res!50173) (not e!65090))))

(declare-fun bm!10280 () Bool)

(assert (=> bm!10280 (= call!10284 (contains!799 lt!50404 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10281 () Bool)

(assert (=> bm!10281 (= call!10281 call!10283)))

(declare-fun bm!10282 () Bool)

(assert (=> bm!10282 (= call!10285 (getCurrentListMapNoExtraKeys!93 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99947 () Bool)

(declare-fun Unit!3033 () Unit!2998)

(assert (=> b!99947 (= e!65088 Unit!3033)))

(declare-fun b!99948 () Bool)

(assert (=> b!99948 (= e!65099 (= (apply!93 lt!50404 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10283 () Bool)

(assert (=> bm!10283 (= call!10282 call!10286)))

(declare-fun b!99949 () Bool)

(assert (=> b!99949 (= e!65093 (+!129 call!10283 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99950 () Bool)

(assert (=> b!99950 (= e!65091 (validKeyInArray!0 (select (arr!2008 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99951 () Bool)

(declare-fun res!50174 () Bool)

(assert (=> b!99951 (=> (not res!50174) (not e!65096))))

(assert (=> b!99951 (= res!50174 e!65095)))

(declare-fun res!50170 () Bool)

(assert (=> b!99951 (=> res!50170 e!65095)))

(assert (=> b!99951 (= res!50170 (not e!65094))))

(declare-fun res!50172 () Bool)

(assert (=> b!99951 (=> (not res!50172) (not e!65094))))

(assert (=> b!99951 (= res!50172 (bvslt #b00000000000000000000000000000000 (size!2260 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun bm!10284 () Bool)

(assert (=> bm!10284 (= call!10286 call!10285)))

(declare-fun b!99952 () Bool)

(assert (=> b!99952 (= e!65097 call!10282)))

(declare-fun b!99953 () Bool)

(assert (=> b!99953 (= e!65096 e!65098)))

(declare-fun c!17105 () Bool)

(assert (=> b!99953 (= c!17105 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26933 c!17103) b!99949))

(assert (= (and d!26933 (not c!17103)) b!99939))

(assert (= (and b!99939 c!17102) b!99937))

(assert (= (and b!99939 (not c!17102)) b!99940))

(assert (= (and b!99940 c!17101) b!99941))

(assert (= (and b!99940 (not c!17101)) b!99952))

(assert (= (or b!99941 b!99952) bm!10283))

(assert (= (or b!99937 bm!10283) bm!10284))

(assert (= (or b!99937 b!99941) bm!10281))

(assert (= (or b!99949 bm!10284) bm!10282))

(assert (= (or b!99949 bm!10281) bm!10279))

(assert (= (and d!26933 res!50169) b!99950))

(assert (= (and d!26933 c!17104) b!99942))

(assert (= (and d!26933 (not c!17104)) b!99947))

(assert (= (and d!26933 res!50176) b!99951))

(assert (= (and b!99951 res!50172) b!99935))

(assert (= (and b!99951 (not res!50170)) b!99936))

(assert (= (and b!99936 res!50175) b!99945))

(assert (= (and b!99951 res!50174) b!99934))

(assert (= (and b!99934 c!17100) b!99944))

(assert (= (and b!99934 (not c!17100)) b!99943))

(assert (= (and b!99944 res!50171) b!99948))

(assert (= (or b!99944 b!99943) bm!10280))

(assert (= (and b!99934 res!50177) b!99953))

(assert (= (and b!99953 c!17105) b!99946))

(assert (= (and b!99953 (not c!17105)) b!99938))

(assert (= (and b!99946 res!50173) b!99933))

(assert (= (or b!99946 b!99938) bm!10278))

(declare-fun b_lambda!4451 () Bool)

(assert (=> (not b_lambda!4451) (not b!99945)))

(assert (=> b!99945 t!5567))

(declare-fun b_and!6137 () Bool)

(assert (= b_and!6133 (and (=> t!5567 result!3299) b_and!6137)))

(assert (=> b!99945 t!5569))

(declare-fun b_and!6139 () Bool)

(assert (= b_and!6135 (and (=> t!5569 result!3301) b_and!6139)))

(assert (=> b!99945 m!109913))

(declare-fun m!110027 () Bool)

(assert (=> b!99945 m!110027))

(assert (=> b!99945 m!109007))

(assert (=> b!99945 m!109913))

(declare-fun m!110029 () Bool)

(assert (=> b!99945 m!110029))

(assert (=> b!99945 m!110027))

(assert (=> b!99945 m!109007))

(declare-fun m!110031 () Bool)

(assert (=> b!99945 m!110031))

(assert (=> b!99935 m!109913))

(assert (=> b!99935 m!109913))

(assert (=> b!99935 m!109921))

(declare-fun m!110033 () Bool)

(assert (=> bm!10278 m!110033))

(assert (=> b!99936 m!109913))

(assert (=> b!99936 m!109913))

(declare-fun m!110035 () Bool)

(assert (=> b!99936 m!110035))

(declare-fun m!110037 () Bool)

(assert (=> b!99949 m!110037))

(declare-fun m!110039 () Bool)

(assert (=> bm!10280 m!110039))

(declare-fun m!110041 () Bool)

(assert (=> bm!10282 m!110041))

(assert (=> d!26933 m!108865))

(declare-fun m!110043 () Bool)

(assert (=> bm!10279 m!110043))

(assert (=> b!99950 m!109913))

(assert (=> b!99950 m!109913))

(assert (=> b!99950 m!109921))

(declare-fun m!110045 () Bool)

(assert (=> b!99948 m!110045))

(declare-fun m!110047 () Bool)

(assert (=> b!99942 m!110047))

(declare-fun m!110049 () Bool)

(assert (=> b!99942 m!110049))

(assert (=> b!99942 m!109913))

(declare-fun m!110051 () Bool)

(assert (=> b!99942 m!110051))

(declare-fun m!110053 () Bool)

(assert (=> b!99942 m!110053))

(declare-fun m!110055 () Bool)

(assert (=> b!99942 m!110055))

(declare-fun m!110057 () Bool)

(assert (=> b!99942 m!110057))

(declare-fun m!110059 () Bool)

(assert (=> b!99942 m!110059))

(declare-fun m!110061 () Bool)

(assert (=> b!99942 m!110061))

(declare-fun m!110063 () Bool)

(assert (=> b!99942 m!110063))

(assert (=> b!99942 m!110051))

(declare-fun m!110065 () Bool)

(assert (=> b!99942 m!110065))

(declare-fun m!110067 () Bool)

(assert (=> b!99942 m!110067))

(declare-fun m!110069 () Bool)

(assert (=> b!99942 m!110069))

(assert (=> b!99942 m!110057))

(assert (=> b!99942 m!110063))

(declare-fun m!110071 () Bool)

(assert (=> b!99942 m!110071))

(assert (=> b!99942 m!110041))

(declare-fun m!110073 () Bool)

(assert (=> b!99942 m!110073))

(assert (=> b!99942 m!110061))

(declare-fun m!110075 () Bool)

(assert (=> b!99942 m!110075))

(declare-fun m!110077 () Bool)

(assert (=> b!99933 m!110077))

(assert (=> d!26639 d!26933))

(assert (=> d!26639 d!26689))

(declare-fun d!26935 () Bool)

(declare-fun e!65103 () Bool)

(assert (=> d!26935 e!65103))

(declare-fun res!50180 () Bool)

(assert (=> d!26935 (=> (not res!50180) (not e!65103))))

(assert (=> d!26935 (= res!50180 (and (bvsge (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) #b00000000000000000000000000000000) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2260 (_keys!4194 newMap!16))) (bvslt (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (size!2261 (_values!2484 newMap!16)))))))

(declare-fun lt!50427 () Unit!2998)

(declare-fun choose!619 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2998)

(assert (=> d!26935 (= lt!50427 (choose!619 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26935 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26935 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50427)))

(declare-fun b!99956 () Bool)

(assert (=> b!99956 (= e!65103 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (array!4232 (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (size!2260 (_keys!4194 newMap!16))) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))))

(assert (= (and d!26935 res!50180) b!99956))

(assert (=> d!26935 m!108591))

(assert (=> d!26935 m!108589))

(declare-fun m!110079 () Bool)

(assert (=> d!26935 m!110079))

(assert (=> d!26935 m!108865))

(assert (=> b!99956 m!109107))

(assert (=> b!99956 m!109101))

(assert (=> b!99956 m!108761))

(assert (=> b!99956 m!109117))

(assert (=> b!99956 m!108761))

(assert (=> b!99956 m!109097))

(assert (=> d!26639 d!26935))

(declare-fun d!26937 () Bool)

(declare-fun e!65104 () Bool)

(assert (=> d!26937 e!65104))

(declare-fun res!50181 () Bool)

(assert (=> d!26937 (=> res!50181 e!65104)))

(declare-fun lt!50429 () Bool)

(assert (=> d!26937 (= res!50181 (not lt!50429))))

(declare-fun lt!50428 () Bool)

(assert (=> d!26937 (= lt!50429 lt!50428)))

(declare-fun lt!50431 () Unit!2998)

(declare-fun e!65105 () Unit!2998)

(assert (=> d!26937 (= lt!50431 e!65105)))

(declare-fun c!17106 () Bool)

(assert (=> d!26937 (= c!17106 lt!50428)))

(assert (=> d!26937 (= lt!50428 (containsKey!153 (toList!774 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(assert (=> d!26937 (= (contains!799 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))) lt!50429)))

(declare-fun b!99957 () Bool)

(declare-fun lt!50430 () Unit!2998)

(assert (=> b!99957 (= e!65105 lt!50430)))

(assert (=> b!99957 (= lt!50430 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(assert (=> b!99957 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)))))))

(declare-fun b!99958 () Bool)

(declare-fun Unit!3034 () Unit!2998)

(assert (=> b!99958 (= e!65105 Unit!3034)))

(declare-fun b!99959 () Bool)

(assert (=> b!99959 (= e!65104 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 lt!50093 lt!50113 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2008 (_keys!4194 newMap!16)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (ite c!16886 (index!3175 lt!49837) (index!3172 lt!49837))))))))

(assert (= (and d!26937 c!17106) b!99957))

(assert (= (and d!26937 (not c!17106)) b!99958))

(assert (= (and d!26937 (not res!50181)) b!99959))

(assert (=> d!26937 m!109111))

(declare-fun m!110081 () Bool)

(assert (=> d!26937 m!110081))

(assert (=> b!99957 m!109111))

(declare-fun m!110083 () Bool)

(assert (=> b!99957 m!110083))

(assert (=> b!99957 m!109111))

(declare-fun m!110085 () Bool)

(assert (=> b!99957 m!110085))

(assert (=> b!99957 m!110085))

(declare-fun m!110087 () Bool)

(assert (=> b!99957 m!110087))

(assert (=> b!99959 m!109111))

(assert (=> b!99959 m!110085))

(assert (=> b!99959 m!110085))

(assert (=> b!99959 m!110087))

(assert (=> d!26639 d!26937))

(declare-fun b!99960 () Bool)

(declare-fun e!65108 () Bool)

(declare-fun lt!50433 () ListLongMap!1517)

(assert (=> b!99960 (= e!65108 (= (apply!93 lt!50433 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 (_2!1178 lt!49828))))))

(declare-fun bm!10285 () Bool)

(declare-fun call!10294 () Bool)

(assert (=> bm!10285 (= call!10294 (contains!799 lt!50433 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99961 () Bool)

(declare-fun res!50190 () Bool)

(declare-fun e!65114 () Bool)

(assert (=> b!99961 (=> (not res!50190) (not e!65114))))

(declare-fun e!65107 () Bool)

(assert (=> b!99961 (= res!50190 e!65107)))

(declare-fun c!17107 () Bool)

(assert (=> b!99961 (= c!17107 (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99962 () Bool)

(declare-fun e!65112 () Bool)

(assert (=> b!99962 (= e!65112 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun b!99963 () Bool)

(declare-fun e!65113 () Bool)

(declare-fun e!65118 () Bool)

(assert (=> b!99963 (= e!65113 e!65118)))

(declare-fun res!50188 () Bool)

(assert (=> b!99963 (=> (not res!50188) (not e!65118))))

(assert (=> b!99963 (= res!50188 (contains!799 lt!50433 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(assert (=> b!99963 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(declare-fun b!99964 () Bool)

(declare-fun e!65110 () ListLongMap!1517)

(declare-fun call!10288 () ListLongMap!1517)

(assert (=> b!99964 (= e!65110 call!10288)))

(declare-fun b!99965 () Bool)

(declare-fun e!65116 () Bool)

(assert (=> b!99965 (= e!65116 (not call!10294))))

(declare-fun b!99966 () Bool)

(declare-fun e!65111 () ListLongMap!1517)

(assert (=> b!99966 (= e!65111 e!65110)))

(declare-fun c!17109 () Bool)

(assert (=> b!99966 (= c!17109 (and (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99967 () Bool)

(declare-fun c!17108 () Bool)

(assert (=> b!99967 (= c!17108 (and (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65115 () ListLongMap!1517)

(assert (=> b!99967 (= e!65110 e!65115)))

(declare-fun b!99968 () Bool)

(assert (=> b!99968 (= e!65115 call!10288)))

(declare-fun d!26939 () Bool)

(assert (=> d!26939 e!65114))

(declare-fun res!50189 () Bool)

(assert (=> d!26939 (=> (not res!50189) (not e!65114))))

(assert (=> d!26939 (= res!50189 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))))

(declare-fun lt!50435 () ListLongMap!1517)

(assert (=> d!26939 (= lt!50433 lt!50435)))

(declare-fun lt!50446 () Unit!2998)

(declare-fun e!65106 () Unit!2998)

(assert (=> d!26939 (= lt!50446 e!65106)))

(declare-fun c!17111 () Bool)

(declare-fun e!65109 () Bool)

(assert (=> d!26939 (= c!17111 e!65109)))

(declare-fun res!50182 () Bool)

(assert (=> d!26939 (=> (not res!50182) (not e!65109))))

(assert (=> d!26939 (= res!50182 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (=> d!26939 (= lt!50435 e!65111)))

(declare-fun c!17110 () Bool)

(assert (=> d!26939 (= c!17110 (and (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26939 (validMask!0 (mask!6607 (_2!1178 lt!49828)))))

(assert (=> d!26939 (= (getCurrentListMap!455 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))) lt!50433)))

(declare-fun b!99969 () Bool)

(declare-fun lt!50436 () Unit!2998)

(assert (=> b!99969 (= e!65106 lt!50436)))

(declare-fun lt!50443 () ListLongMap!1517)

(assert (=> b!99969 (= lt!50443 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun lt!50452 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50452 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50450 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50450 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000))))

(declare-fun lt!50441 () Unit!2998)

(assert (=> b!99969 (= lt!50441 (addStillContains!69 lt!50443 lt!50452 (zeroValue!2382 (_2!1178 lt!49828)) lt!50450))))

(assert (=> b!99969 (contains!799 (+!129 lt!50443 (tuple2!2333 lt!50452 (zeroValue!2382 (_2!1178 lt!49828)))) lt!50450)))

(declare-fun lt!50445 () Unit!2998)

(assert (=> b!99969 (= lt!50445 lt!50441)))

(declare-fun lt!50438 () ListLongMap!1517)

(assert (=> b!99969 (= lt!50438 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun lt!50451 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50451 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50447 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50447 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000))))

(declare-fun lt!50437 () Unit!2998)

(assert (=> b!99969 (= lt!50437 (addApplyDifferent!69 lt!50438 lt!50451 (minValue!2382 (_2!1178 lt!49828)) lt!50447))))

(assert (=> b!99969 (= (apply!93 (+!129 lt!50438 (tuple2!2333 lt!50451 (minValue!2382 (_2!1178 lt!49828)))) lt!50447) (apply!93 lt!50438 lt!50447))))

(declare-fun lt!50453 () Unit!2998)

(assert (=> b!99969 (= lt!50453 lt!50437)))

(declare-fun lt!50439 () ListLongMap!1517)

(assert (=> b!99969 (= lt!50439 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun lt!50449 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50449 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50442 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50442 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000))))

(declare-fun lt!50444 () Unit!2998)

(assert (=> b!99969 (= lt!50444 (addApplyDifferent!69 lt!50439 lt!50449 (zeroValue!2382 (_2!1178 lt!49828)) lt!50442))))

(assert (=> b!99969 (= (apply!93 (+!129 lt!50439 (tuple2!2333 lt!50449 (zeroValue!2382 (_2!1178 lt!49828)))) lt!50442) (apply!93 lt!50439 lt!50442))))

(declare-fun lt!50432 () Unit!2998)

(assert (=> b!99969 (= lt!50432 lt!50444)))

(declare-fun lt!50448 () ListLongMap!1517)

(assert (=> b!99969 (= lt!50448 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun lt!50434 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50434 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50440 () (_ BitVec 64))

(assert (=> b!99969 (= lt!50440 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000))))

(assert (=> b!99969 (= lt!50436 (addApplyDifferent!69 lt!50448 lt!50434 (minValue!2382 (_2!1178 lt!49828)) lt!50440))))

(assert (=> b!99969 (= (apply!93 (+!129 lt!50448 (tuple2!2333 lt!50434 (minValue!2382 (_2!1178 lt!49828)))) lt!50440) (apply!93 lt!50448 lt!50440))))

(declare-fun b!99970 () Bool)

(declare-fun call!10291 () Bool)

(assert (=> b!99970 (= e!65107 (not call!10291))))

(declare-fun b!99971 () Bool)

(declare-fun e!65117 () Bool)

(assert (=> b!99971 (= e!65107 e!65117)))

(declare-fun res!50184 () Bool)

(assert (=> b!99971 (= res!50184 call!10291)))

(assert (=> b!99971 (=> (not res!50184) (not e!65117))))

(declare-fun b!99972 () Bool)

(assert (=> b!99972 (= e!65118 (= (apply!93 lt!50433 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (_values!2484 (_2!1178 lt!49828))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 (_2!1178 lt!49828)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (_values!2484 (_2!1178 lt!49828)))))))

(assert (=> b!99972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(declare-fun call!10293 () ListLongMap!1517)

(declare-fun call!10290 () ListLongMap!1517)

(declare-fun call!10292 () ListLongMap!1517)

(declare-fun bm!10286 () Bool)

(declare-fun call!10289 () ListLongMap!1517)

(assert (=> bm!10286 (= call!10290 (+!129 (ite c!17110 call!10292 (ite c!17109 call!10293 call!10289)) (ite (or c!17110 c!17109) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (_2!1178 lt!49828))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (_2!1178 lt!49828))))))))

(declare-fun b!99973 () Bool)

(assert (=> b!99973 (= e!65116 e!65108)))

(declare-fun res!50186 () Bool)

(assert (=> b!99973 (= res!50186 call!10294)))

(assert (=> b!99973 (=> (not res!50186) (not e!65108))))

(declare-fun bm!10287 () Bool)

(assert (=> bm!10287 (= call!10291 (contains!799 lt!50433 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10288 () Bool)

(assert (=> bm!10288 (= call!10288 call!10290)))

(declare-fun bm!10289 () Bool)

(assert (=> bm!10289 (= call!10292 (getCurrentListMapNoExtraKeys!93 (_keys!4194 (_2!1178 lt!49828)) (_values!2484 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828)) (extraKeys!2318 (_2!1178 lt!49828)) (zeroValue!2382 (_2!1178 lt!49828)) (minValue!2382 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!49828))))))

(declare-fun b!99974 () Bool)

(declare-fun Unit!3035 () Unit!2998)

(assert (=> b!99974 (= e!65106 Unit!3035)))

(declare-fun b!99975 () Bool)

(assert (=> b!99975 (= e!65117 (= (apply!93 lt!50433 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 (_2!1178 lt!49828))))))

(declare-fun bm!10290 () Bool)

(assert (=> bm!10290 (= call!10289 call!10293)))

(declare-fun b!99976 () Bool)

(assert (=> b!99976 (= e!65111 (+!129 call!10290 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (_2!1178 lt!49828)))))))

(declare-fun b!99977 () Bool)

(assert (=> b!99977 (= e!65109 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun b!99978 () Bool)

(declare-fun res!50187 () Bool)

(assert (=> b!99978 (=> (not res!50187) (not e!65114))))

(assert (=> b!99978 (= res!50187 e!65113)))

(declare-fun res!50183 () Bool)

(assert (=> b!99978 (=> res!50183 e!65113)))

(assert (=> b!99978 (= res!50183 (not e!65112))))

(declare-fun res!50185 () Bool)

(assert (=> b!99978 (=> (not res!50185) (not e!65112))))

(assert (=> b!99978 (= res!50185 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(declare-fun bm!10291 () Bool)

(assert (=> bm!10291 (= call!10293 call!10292)))

(declare-fun b!99979 () Bool)

(assert (=> b!99979 (= e!65115 call!10289)))

(declare-fun b!99980 () Bool)

(assert (=> b!99980 (= e!65114 e!65116)))

(declare-fun c!17112 () Bool)

(assert (=> b!99980 (= c!17112 (not (= (bvand (extraKeys!2318 (_2!1178 lt!49828)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26939 c!17110) b!99976))

(assert (= (and d!26939 (not c!17110)) b!99966))

(assert (= (and b!99966 c!17109) b!99964))

(assert (= (and b!99966 (not c!17109)) b!99967))

(assert (= (and b!99967 c!17108) b!99968))

(assert (= (and b!99967 (not c!17108)) b!99979))

(assert (= (or b!99968 b!99979) bm!10290))

(assert (= (or b!99964 bm!10290) bm!10291))

(assert (= (or b!99964 b!99968) bm!10288))

(assert (= (or b!99976 bm!10291) bm!10289))

(assert (= (or b!99976 bm!10288) bm!10286))

(assert (= (and d!26939 res!50182) b!99977))

(assert (= (and d!26939 c!17111) b!99969))

(assert (= (and d!26939 (not c!17111)) b!99974))

(assert (= (and d!26939 res!50189) b!99978))

(assert (= (and b!99978 res!50185) b!99962))

(assert (= (and b!99978 (not res!50183)) b!99963))

(assert (= (and b!99963 res!50188) b!99972))

(assert (= (and b!99978 res!50187) b!99961))

(assert (= (and b!99961 c!17107) b!99971))

(assert (= (and b!99961 (not c!17107)) b!99970))

(assert (= (and b!99971 res!50184) b!99975))

(assert (= (or b!99971 b!99970) bm!10287))

(assert (= (and b!99961 res!50190) b!99980))

(assert (= (and b!99980 c!17112) b!99973))

(assert (= (and b!99980 (not c!17112)) b!99965))

(assert (= (and b!99973 res!50186) b!99960))

(assert (= (or b!99973 b!99965) bm!10285))

(declare-fun b_lambda!4453 () Bool)

(assert (=> (not b_lambda!4453) (not b!99972)))

(declare-fun t!5571 () Bool)

(declare-fun tb!1949 () Bool)

(assert (=> (and b!98866 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 (_2!1178 lt!49828))) t!5571) tb!1949))

(declare-fun result!3303 () Bool)

(assert (=> tb!1949 (= result!3303 tp_is_empty!2635)))

(assert (=> b!99972 t!5571))

(declare-fun b_and!6141 () Bool)

(assert (= b_and!6137 (and (=> t!5571 result!3303) b_and!6141)))

(declare-fun tb!1951 () Bool)

(declare-fun t!5573 () Bool)

(assert (=> (and b!98863 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (_2!1178 lt!49828))) t!5573) tb!1951))

(declare-fun result!3305 () Bool)

(assert (= result!3305 result!3303))

(assert (=> b!99972 t!5573))

(declare-fun b_and!6143 () Bool)

(assert (= b_and!6139 (and (=> t!5573 result!3305) b_and!6143)))

(assert (=> b!99972 m!109597))

(declare-fun m!110089 () Bool)

(assert (=> b!99972 m!110089))

(declare-fun m!110091 () Bool)

(assert (=> b!99972 m!110091))

(assert (=> b!99972 m!109597))

(declare-fun m!110093 () Bool)

(assert (=> b!99972 m!110093))

(assert (=> b!99972 m!110089))

(assert (=> b!99972 m!110091))

(declare-fun m!110095 () Bool)

(assert (=> b!99972 m!110095))

(assert (=> b!99962 m!109597))

(assert (=> b!99962 m!109597))

(assert (=> b!99962 m!109603))

(declare-fun m!110097 () Bool)

(assert (=> bm!10285 m!110097))

(assert (=> b!99963 m!109597))

(assert (=> b!99963 m!109597))

(declare-fun m!110099 () Bool)

(assert (=> b!99963 m!110099))

(declare-fun m!110101 () Bool)

(assert (=> b!99976 m!110101))

(declare-fun m!110103 () Bool)

(assert (=> bm!10287 m!110103))

(declare-fun m!110105 () Bool)

(assert (=> bm!10289 m!110105))

(assert (=> d!26939 m!109613))

(declare-fun m!110107 () Bool)

(assert (=> bm!10286 m!110107))

(assert (=> b!99977 m!109597))

(assert (=> b!99977 m!109597))

(assert (=> b!99977 m!109603))

(declare-fun m!110109 () Bool)

(assert (=> b!99975 m!110109))

(declare-fun m!110111 () Bool)

(assert (=> b!99969 m!110111))

(declare-fun m!110113 () Bool)

(assert (=> b!99969 m!110113))

(assert (=> b!99969 m!109597))

(declare-fun m!110115 () Bool)

(assert (=> b!99969 m!110115))

(declare-fun m!110117 () Bool)

(assert (=> b!99969 m!110117))

(declare-fun m!110119 () Bool)

(assert (=> b!99969 m!110119))

(declare-fun m!110121 () Bool)

(assert (=> b!99969 m!110121))

(declare-fun m!110123 () Bool)

(assert (=> b!99969 m!110123))

(declare-fun m!110125 () Bool)

(assert (=> b!99969 m!110125))

(declare-fun m!110127 () Bool)

(assert (=> b!99969 m!110127))

(assert (=> b!99969 m!110115))

(declare-fun m!110129 () Bool)

(assert (=> b!99969 m!110129))

(declare-fun m!110131 () Bool)

(assert (=> b!99969 m!110131))

(declare-fun m!110133 () Bool)

(assert (=> b!99969 m!110133))

(assert (=> b!99969 m!110121))

(assert (=> b!99969 m!110127))

(declare-fun m!110135 () Bool)

(assert (=> b!99969 m!110135))

(assert (=> b!99969 m!110105))

(declare-fun m!110137 () Bool)

(assert (=> b!99969 m!110137))

(assert (=> b!99969 m!110125))

(declare-fun m!110139 () Bool)

(assert (=> b!99969 m!110139))

(declare-fun m!110141 () Bool)

(assert (=> b!99960 m!110141))

(assert (=> d!26593 d!26939))

(declare-fun d!26941 () Bool)

(assert (=> d!26941 (= (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!364 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4126 () Bool)

(assert (= bs!4126 d!26941))

(assert (=> bs!4126 m!109151))

(declare-fun m!110143 () Bool)

(assert (=> bs!4126 m!110143))

(assert (=> b!99463 d!26941))

(declare-fun b!99984 () Bool)

(declare-fun e!65120 () Option!155)

(assert (=> b!99984 (= e!65120 None!153)))

(declare-fun b!99983 () Bool)

(assert (=> b!99983 (= e!65120 (getValueByKey!149 (t!5556 (toList!774 lt!49898)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!26943 () Bool)

(declare-fun c!17113 () Bool)

(assert (=> d!26943 (= c!17113 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!65119 () Option!155)

(assert (=> d!26943 (= (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000) e!65119)))

(declare-fun b!99981 () Bool)

(assert (=> b!99981 (= e!65119 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49898)))))))

(declare-fun b!99982 () Bool)

(assert (=> b!99982 (= e!65119 e!65120)))

(declare-fun c!17114 () Bool)

(assert (=> b!99982 (= c!17114 (and ((_ is Cons!1587) (toList!774 lt!49898)) (not (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!26943 c!17113) b!99981))

(assert (= (and d!26943 (not c!17113)) b!99982))

(assert (= (and b!99982 c!17114) b!99983))

(assert (= (and b!99982 (not c!17114)) b!99984))

(declare-fun m!110145 () Bool)

(assert (=> b!99983 m!110145))

(assert (=> b!99463 d!26943))

(declare-fun d!26945 () Bool)

(declare-fun e!65121 () Bool)

(assert (=> d!26945 e!65121))

(declare-fun res!50191 () Bool)

(assert (=> d!26945 (=> res!50191 e!65121)))

(declare-fun lt!50455 () Bool)

(assert (=> d!26945 (= res!50191 (not lt!50455))))

(declare-fun lt!50454 () Bool)

(assert (=> d!26945 (= lt!50455 lt!50454)))

(declare-fun lt!50457 () Unit!2998)

(declare-fun e!65122 () Unit!2998)

(assert (=> d!26945 (= lt!50457 e!65122)))

(declare-fun c!17115 () Bool)

(assert (=> d!26945 (= c!17115 lt!50454)))

(assert (=> d!26945 (= lt!50454 (containsKey!153 (toList!774 (map!1247 (_2!1178 lt!50096))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!26945 (= (contains!799 (map!1247 (_2!1178 lt!50096)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) lt!50455)))

(declare-fun b!99985 () Bool)

(declare-fun lt!50456 () Unit!2998)

(assert (=> b!99985 (= e!65122 lt!50456)))

(assert (=> b!99985 (= lt!50456 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (map!1247 (_2!1178 lt!50096))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> b!99985 (isDefined!103 (getValueByKey!149 (toList!774 (map!1247 (_2!1178 lt!50096))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun b!99986 () Bool)

(declare-fun Unit!3036 () Unit!2998)

(assert (=> b!99986 (= e!65122 Unit!3036)))

(declare-fun b!99987 () Bool)

(assert (=> b!99987 (= e!65121 (isDefined!103 (getValueByKey!149 (toList!774 (map!1247 (_2!1178 lt!50096))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (= (and d!26945 c!17115) b!99985))

(assert (= (and d!26945 (not c!17115)) b!99986))

(assert (= (and d!26945 (not res!50191)) b!99987))

(assert (=> d!26945 m!108591))

(declare-fun m!110147 () Bool)

(assert (=> d!26945 m!110147))

(assert (=> b!99985 m!108591))

(declare-fun m!110149 () Bool)

(assert (=> b!99985 m!110149))

(assert (=> b!99985 m!108591))

(declare-fun m!110151 () Bool)

(assert (=> b!99985 m!110151))

(assert (=> b!99985 m!110151))

(declare-fun m!110153 () Bool)

(assert (=> b!99985 m!110153))

(assert (=> b!99987 m!108591))

(assert (=> b!99987 m!110151))

(assert (=> b!99987 m!110151))

(assert (=> b!99987 m!110153))

(assert (=> b!99409 d!26945))

(declare-fun d!26947 () Bool)

(assert (=> d!26947 (= (map!1247 (_2!1178 lt!50096)) (getCurrentListMap!455 (_keys!4194 (_2!1178 lt!50096)) (_values!2484 (_2!1178 lt!50096)) (mask!6607 (_2!1178 lt!50096)) (extraKeys!2318 (_2!1178 lt!50096)) (zeroValue!2382 (_2!1178 lt!50096)) (minValue!2382 (_2!1178 lt!50096)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1178 lt!50096))))))

(declare-fun bs!4127 () Bool)

(assert (= bs!4127 d!26947))

(declare-fun m!110155 () Bool)

(assert (=> bs!4127 m!110155))

(assert (=> b!99409 d!26947))

(declare-fun d!26949 () Bool)

(declare-fun e!65123 () Bool)

(assert (=> d!26949 e!65123))

(declare-fun res!50192 () Bool)

(assert (=> d!26949 (=> res!50192 e!65123)))

(declare-fun lt!50459 () Bool)

(assert (=> d!26949 (= res!50192 (not lt!50459))))

(declare-fun lt!50458 () Bool)

(assert (=> d!26949 (= lt!50459 lt!50458)))

(declare-fun lt!50461 () Unit!2998)

(declare-fun e!65124 () Unit!2998)

(assert (=> d!26949 (= lt!50461 e!65124)))

(declare-fun c!17116 () Bool)

(assert (=> d!26949 (= c!17116 lt!50458)))

(assert (=> d!26949 (= lt!50458 (containsKey!153 (toList!774 lt!49903) lt!49912))))

(assert (=> d!26949 (= (contains!799 lt!49903 lt!49912) lt!50459)))

(declare-fun b!99988 () Bool)

(declare-fun lt!50460 () Unit!2998)

(assert (=> b!99988 (= e!65124 lt!50460)))

(assert (=> b!99988 (= lt!50460 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49903) lt!49912))))

(assert (=> b!99988 (isDefined!103 (getValueByKey!149 (toList!774 lt!49903) lt!49912))))

(declare-fun b!99989 () Bool)

(declare-fun Unit!3037 () Unit!2998)

(assert (=> b!99989 (= e!65124 Unit!3037)))

(declare-fun b!99990 () Bool)

(assert (=> b!99990 (= e!65123 (isDefined!103 (getValueByKey!149 (toList!774 lt!49903) lt!49912)))))

(assert (= (and d!26949 c!17116) b!99988))

(assert (= (and d!26949 (not c!17116)) b!99989))

(assert (= (and d!26949 (not res!50192)) b!99990))

(declare-fun m!110157 () Bool)

(assert (=> d!26949 m!110157))

(declare-fun m!110159 () Bool)

(assert (=> b!99988 m!110159))

(assert (=> b!99988 m!108909))

(assert (=> b!99988 m!108909))

(declare-fun m!110161 () Bool)

(assert (=> b!99988 m!110161))

(assert (=> b!99990 m!108909))

(assert (=> b!99990 m!108909))

(assert (=> b!99990 m!110161))

(assert (=> d!26601 d!26949))

(assert (=> d!26601 d!26603))

(assert (=> d!26601 d!26621))

(declare-fun d!26951 () Bool)

(assert (=> d!26951 (= (apply!93 (+!129 lt!49903 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49912) (apply!93 lt!49903 lt!49912))))

(assert (=> d!26951 true))

(declare-fun _$34!871 () Unit!2998)

(assert (=> d!26951 (= (choose!609 lt!49903 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49912) _$34!871)))

(declare-fun bs!4128 () Bool)

(assert (= bs!4128 d!26951))

(assert (=> bs!4128 m!108843))

(assert (=> bs!4128 m!108843))

(assert (=> bs!4128 m!108851))

(assert (=> bs!4128 m!108849))

(assert (=> d!26601 d!26951))

(assert (=> d!26601 d!26613))

(assert (=> b!99368 d!26749))

(assert (=> b!99368 d!26723))

(declare-fun d!26953 () Bool)

(assert (=> d!26953 (arrayContainsKey!0 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000)))

(declare-fun lt!50462 () Unit!2998)

(assert (=> d!26953 (= lt!50462 (choose!13 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000))))

(assert (=> d!26953 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26953 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000) lt!50462)))

(declare-fun bs!4129 () Bool)

(assert (= bs!4129 d!26953))

(assert (=> bs!4129 m!108997))

(declare-fun m!110163 () Bool)

(assert (=> bs!4129 m!110163))

(assert (=> b!99324 d!26953))

(declare-fun d!26955 () Bool)

(declare-fun res!50193 () Bool)

(declare-fun e!65125 () Bool)

(assert (=> d!26955 (=> res!50193 e!65125)))

(assert (=> d!26955 (= res!50193 (= (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) lt!49984))))

(assert (=> d!26955 (= (arrayContainsKey!0 (_keys!4194 newMap!16) lt!49984 #b00000000000000000000000000000000) e!65125)))

(declare-fun b!99992 () Bool)

(declare-fun e!65126 () Bool)

(assert (=> b!99992 (= e!65125 e!65126)))

(declare-fun res!50194 () Bool)

(assert (=> b!99992 (=> (not res!50194) (not e!65126))))

(assert (=> b!99992 (= res!50194 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!99993 () Bool)

(assert (=> b!99993 (= e!65126 (arrayContainsKey!0 (_keys!4194 newMap!16) lt!49984 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26955 (not res!50193)) b!99992))

(assert (= (and b!99992 res!50194) b!99993))

(assert (=> d!26955 m!108993))

(declare-fun m!110165 () Bool)

(assert (=> b!99993 m!110165))

(assert (=> b!99324 d!26955))

(declare-fun b!99994 () Bool)

(declare-fun e!65127 () SeekEntryResult!257)

(declare-fun lt!50465 () SeekEntryResult!257)

(assert (=> b!99994 (= e!65127 (MissingZero!257 (index!3174 lt!50465)))))

(declare-fun d!26957 () Bool)

(declare-fun lt!50463 () SeekEntryResult!257)

(assert (=> d!26957 (and (or ((_ is Undefined!257) lt!50463) (not ((_ is Found!257) lt!50463)) (and (bvsge (index!3173 lt!50463) #b00000000000000000000000000000000) (bvslt (index!3173 lt!50463) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50463) ((_ is Found!257) lt!50463) (not ((_ is MissingZero!257) lt!50463)) (and (bvsge (index!3172 lt!50463) #b00000000000000000000000000000000) (bvslt (index!3172 lt!50463) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50463) ((_ is Found!257) lt!50463) ((_ is MissingZero!257) lt!50463) (not ((_ is MissingVacant!257) lt!50463)) (and (bvsge (index!3175 lt!50463) #b00000000000000000000000000000000) (bvslt (index!3175 lt!50463) (size!2260 (_keys!4194 newMap!16))))) (or ((_ is Undefined!257) lt!50463) (ite ((_ is Found!257) lt!50463) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!50463)) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!257) lt!50463) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!50463)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!257) lt!50463) (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50463)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65128 () SeekEntryResult!257)

(assert (=> d!26957 (= lt!50463 e!65128)))

(declare-fun c!17118 () Bool)

(assert (=> d!26957 (= c!17118 (and ((_ is Intermediate!257) lt!50465) (undefined!1069 lt!50465)))))

(assert (=> d!26957 (= lt!50465 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (mask!6607 newMap!16)) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (=> d!26957 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26957 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (_keys!4194 newMap!16) (mask!6607 newMap!16)) lt!50463)))

(declare-fun b!99995 () Bool)

(declare-fun e!65129 () SeekEntryResult!257)

(assert (=> b!99995 (= e!65128 e!65129)))

(declare-fun lt!50464 () (_ BitVec 64))

(assert (=> b!99995 (= lt!50464 (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50465)))))

(declare-fun c!17117 () Bool)

(assert (=> b!99995 (= c!17117 (= lt!50464 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99996 () Bool)

(declare-fun c!17119 () Bool)

(assert (=> b!99996 (= c!17119 (= lt!50464 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99996 (= e!65129 e!65127)))

(declare-fun b!99997 () Bool)

(assert (=> b!99997 (= e!65128 Undefined!257)))

(declare-fun b!99998 () Bool)

(assert (=> b!99998 (= e!65129 (Found!257 (index!3174 lt!50465)))))

(declare-fun b!99999 () Bool)

(assert (=> b!99999 (= e!65127 (seekKeyOrZeroReturnVacant!0 (x!13106 lt!50465) (index!3174 lt!50465) (index!3174 lt!50465) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (= (and d!26957 c!17118) b!99997))

(assert (= (and d!26957 (not c!17118)) b!99995))

(assert (= (and b!99995 c!17117) b!99998))

(assert (= (and b!99995 (not c!17117)) b!99996))

(assert (= (and b!99996 c!17119) b!99994))

(assert (= (and b!99996 (not c!17119)) b!99999))

(declare-fun m!110167 () Bool)

(assert (=> d!26957 m!110167))

(assert (=> d!26957 m!108993))

(declare-fun m!110169 () Bool)

(assert (=> d!26957 m!110169))

(declare-fun m!110171 () Bool)

(assert (=> d!26957 m!110171))

(assert (=> d!26957 m!108865))

(declare-fun m!110173 () Bool)

(assert (=> d!26957 m!110173))

(assert (=> d!26957 m!110169))

(assert (=> d!26957 m!108993))

(declare-fun m!110175 () Bool)

(assert (=> d!26957 m!110175))

(declare-fun m!110177 () Bool)

(assert (=> b!99995 m!110177))

(assert (=> b!99999 m!108993))

(declare-fun m!110179 () Bool)

(assert (=> b!99999 m!110179))

(assert (=> b!99324 d!26957))

(declare-fun d!26959 () Bool)

(declare-fun res!50195 () Bool)

(declare-fun e!65130 () Bool)

(assert (=> d!26959 (=> res!50195 e!65130)))

(assert (=> d!26959 (= res!50195 (and ((_ is Cons!1587) (toList!774 call!10155)) (= (_1!1177 (h!2182 (toList!774 call!10155))) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))))

(assert (=> d!26959 (= (containsKey!153 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))) e!65130)))

(declare-fun b!100000 () Bool)

(declare-fun e!65131 () Bool)

(assert (=> b!100000 (= e!65130 e!65131)))

(declare-fun res!50196 () Bool)

(assert (=> b!100000 (=> (not res!50196) (not e!65131))))

(assert (=> b!100000 (= res!50196 (and (or (not ((_ is Cons!1587) (toList!774 call!10155))) (bvsle (_1!1177 (h!2182 (toList!774 call!10155))) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))) ((_ is Cons!1587) (toList!774 call!10155)) (bvslt (_1!1177 (h!2182 (toList!774 call!10155))) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))))

(declare-fun b!100001 () Bool)

(assert (=> b!100001 (= e!65131 (containsKey!153 (t!5556 (toList!774 call!10155)) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(assert (= (and d!26959 (not res!50195)) b!100000))

(assert (= (and b!100000 res!50196) b!100001))

(declare-fun m!110181 () Bool)

(assert (=> b!100001 m!110181))

(assert (=> d!26715 d!26959))

(declare-fun d!26961 () Bool)

(declare-fun e!65132 () Bool)

(assert (=> d!26961 e!65132))

(declare-fun res!50197 () Bool)

(assert (=> d!26961 (=> res!50197 e!65132)))

(declare-fun lt!50467 () Bool)

(assert (=> d!26961 (= res!50197 (not lt!50467))))

(declare-fun lt!50466 () Bool)

(assert (=> d!26961 (= lt!50467 lt!50466)))

(declare-fun lt!50469 () Unit!2998)

(declare-fun e!65133 () Unit!2998)

(assert (=> d!26961 (= lt!50469 e!65133)))

(declare-fun c!17120 () Bool)

(assert (=> d!26961 (= c!17120 lt!50466)))

(assert (=> d!26961 (= lt!50466 (containsKey!153 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26961 (= (contains!799 lt!50159 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50467)))

(declare-fun b!100002 () Bool)

(declare-fun lt!50468 () Unit!2998)

(assert (=> b!100002 (= e!65133 lt!50468)))

(assert (=> b!100002 (= lt!50468 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!100002 (isDefined!103 (getValueByKey!149 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100003 () Bool)

(declare-fun Unit!3038 () Unit!2998)

(assert (=> b!100003 (= e!65133 Unit!3038)))

(declare-fun b!100004 () Bool)

(assert (=> b!100004 (= e!65132 (isDefined!103 (getValueByKey!149 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26961 c!17120) b!100002))

(assert (= (and d!26961 (not c!17120)) b!100003))

(assert (= (and d!26961 (not res!50197)) b!100004))

(declare-fun m!110183 () Bool)

(assert (=> d!26961 m!110183))

(declare-fun m!110185 () Bool)

(assert (=> b!100002 m!110185))

(assert (=> b!100002 m!109251))

(assert (=> b!100002 m!109251))

(declare-fun m!110187 () Bool)

(assert (=> b!100002 m!110187))

(assert (=> b!100004 m!109251))

(assert (=> b!100004 m!109251))

(assert (=> b!100004 m!110187))

(assert (=> d!26677 d!26961))

(declare-fun b!100008 () Bool)

(declare-fun e!65135 () Option!155)

(assert (=> b!100008 (= e!65135 None!153)))

(declare-fun b!100007 () Bool)

(assert (=> b!100007 (= e!65135 (getValueByKey!149 (t!5556 lt!50160) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!17121 () Bool)

(declare-fun d!26963 () Bool)

(assert (=> d!26963 (= c!17121 (and ((_ is Cons!1587) lt!50160) (= (_1!1177 (h!2182 lt!50160)) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65134 () Option!155)

(assert (=> d!26963 (= (getValueByKey!149 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65134)))

(declare-fun b!100005 () Bool)

(assert (=> b!100005 (= e!65134 (Some!154 (_2!1177 (h!2182 lt!50160))))))

(declare-fun b!100006 () Bool)

(assert (=> b!100006 (= e!65134 e!65135)))

(declare-fun c!17122 () Bool)

(assert (=> b!100006 (= c!17122 (and ((_ is Cons!1587) lt!50160) (not (= (_1!1177 (h!2182 lt!50160)) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26963 c!17121) b!100005))

(assert (= (and d!26963 (not c!17121)) b!100006))

(assert (= (and b!100006 c!17122) b!100007))

(assert (= (and b!100006 (not c!17122)) b!100008))

(declare-fun m!110189 () Bool)

(assert (=> b!100007 m!110189))

(assert (=> d!26677 d!26963))

(declare-fun d!26965 () Bool)

(assert (=> d!26965 (= (getValueByKey!149 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50470 () Unit!2998)

(assert (=> d!26965 (= lt!50470 (choose!618 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65136 () Bool)

(assert (=> d!26965 e!65136))

(declare-fun res!50198 () Bool)

(assert (=> d!26965 (=> (not res!50198) (not e!65136))))

(assert (=> d!26965 (= res!50198 (isStrictlySorted!300 lt!50160))))

(assert (=> d!26965 (= (lemmaContainsTupThenGetReturnValue!68 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50470)))

(declare-fun b!100009 () Bool)

(declare-fun res!50199 () Bool)

(assert (=> b!100009 (=> (not res!50199) (not e!65136))))

(assert (=> b!100009 (= res!50199 (containsKey!153 lt!50160 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100010 () Bool)

(assert (=> b!100010 (= e!65136 (contains!801 lt!50160 (tuple2!2333 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26965 res!50198) b!100009))

(assert (= (and b!100009 res!50199) b!100010))

(assert (=> d!26965 m!109245))

(declare-fun m!110191 () Bool)

(assert (=> d!26965 m!110191))

(declare-fun m!110193 () Bool)

(assert (=> d!26965 m!110193))

(declare-fun m!110195 () Bool)

(assert (=> b!100009 m!110195))

(declare-fun m!110197 () Bool)

(assert (=> b!100010 m!110197))

(assert (=> d!26677 d!26965))

(declare-fun bm!10292 () Bool)

(declare-fun call!10296 () List!1591)

(declare-fun call!10295 () List!1591)

(assert (=> bm!10292 (= call!10296 call!10295)))

(declare-fun d!26967 () Bool)

(declare-fun e!65138 () Bool)

(assert (=> d!26967 e!65138))

(declare-fun res!50201 () Bool)

(assert (=> d!26967 (=> (not res!50201) (not e!65138))))

(declare-fun lt!50471 () List!1591)

(assert (=> d!26967 (= res!50201 (isStrictlySorted!300 lt!50471))))

(declare-fun e!65140 () List!1591)

(assert (=> d!26967 (= lt!50471 e!65140)))

(declare-fun c!17126 () Bool)

(assert (=> d!26967 (= c!17126 (and ((_ is Cons!1587) (toList!774 call!10158)) (bvslt (_1!1177 (h!2182 (toList!774 call!10158))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26967 (isStrictlySorted!300 (toList!774 call!10158))))

(assert (=> d!26967 (= (insertStrictlySorted!71 (toList!774 call!10158) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50471)))

(declare-fun e!65137 () List!1591)

(declare-fun b!100011 () Bool)

(assert (=> b!100011 (= e!65137 (insertStrictlySorted!71 (t!5556 (toList!774 call!10158)) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100012 () Bool)

(declare-fun e!65139 () List!1591)

(declare-fun call!10297 () List!1591)

(assert (=> b!100012 (= e!65139 call!10297)))

(declare-fun b!100013 () Bool)

(assert (=> b!100013 (= e!65139 call!10297)))

(declare-fun b!100014 () Bool)

(assert (=> b!100014 (= e!65140 call!10295)))

(declare-fun b!100015 () Bool)

(declare-fun res!50200 () Bool)

(assert (=> b!100015 (=> (not res!50200) (not e!65138))))

(assert (=> b!100015 (= res!50200 (containsKey!153 lt!50471 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100016 () Bool)

(declare-fun e!65141 () List!1591)

(assert (=> b!100016 (= e!65140 e!65141)))

(declare-fun c!17124 () Bool)

(assert (=> b!100016 (= c!17124 (and ((_ is Cons!1587) (toList!774 call!10158)) (= (_1!1177 (h!2182 (toList!774 call!10158))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100017 () Bool)

(assert (=> b!100017 (= e!65138 (contains!801 lt!50471 (tuple2!2333 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10293 () Bool)

(assert (=> bm!10293 (= call!10297 call!10296)))

(declare-fun bm!10294 () Bool)

(assert (=> bm!10294 (= call!10295 ($colon$colon!78 e!65137 (ite c!17126 (h!2182 (toList!774 call!10158)) (tuple2!2333 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17123 () Bool)

(assert (=> bm!10294 (= c!17123 c!17126)))

(declare-fun b!100018 () Bool)

(assert (=> b!100018 (= e!65141 call!10296)))

(declare-fun b!100019 () Bool)

(declare-fun c!17125 () Bool)

(assert (=> b!100019 (= e!65137 (ite c!17124 (t!5556 (toList!774 call!10158)) (ite c!17125 (Cons!1587 (h!2182 (toList!774 call!10158)) (t!5556 (toList!774 call!10158))) Nil!1588)))))

(declare-fun b!100020 () Bool)

(assert (=> b!100020 (= c!17125 (and ((_ is Cons!1587) (toList!774 call!10158)) (bvsgt (_1!1177 (h!2182 (toList!774 call!10158))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100020 (= e!65141 e!65139)))

(assert (= (and d!26967 c!17126) b!100014))

(assert (= (and d!26967 (not c!17126)) b!100016))

(assert (= (and b!100016 c!17124) b!100018))

(assert (= (and b!100016 (not c!17124)) b!100020))

(assert (= (and b!100020 c!17125) b!100013))

(assert (= (and b!100020 (not c!17125)) b!100012))

(assert (= (or b!100013 b!100012) bm!10293))

(assert (= (or b!100018 bm!10293) bm!10292))

(assert (= (or b!100014 bm!10292) bm!10294))

(assert (= (and bm!10294 c!17123) b!100011))

(assert (= (and bm!10294 (not c!17123)) b!100019))

(assert (= (and d!26967 res!50201) b!100015))

(assert (= (and b!100015 res!50200) b!100017))

(declare-fun m!110199 () Bool)

(assert (=> d!26967 m!110199))

(declare-fun m!110201 () Bool)

(assert (=> d!26967 m!110201))

(declare-fun m!110203 () Bool)

(assert (=> b!100015 m!110203))

(declare-fun m!110205 () Bool)

(assert (=> b!100017 m!110205))

(declare-fun m!110207 () Bool)

(assert (=> bm!10294 m!110207))

(declare-fun m!110209 () Bool)

(assert (=> b!100011 m!110209))

(assert (=> d!26677 d!26967))

(declare-fun b!100024 () Bool)

(declare-fun e!65143 () Option!155)

(assert (=> b!100024 (= e!65143 None!153)))

(declare-fun b!100023 () Bool)

(assert (=> b!100023 (= e!65143 (getValueByKey!149 (t!5556 (toList!774 lt!49927)) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!26969 () Bool)

(declare-fun c!17127 () Bool)

(assert (=> d!26969 (= c!17127 (and ((_ is Cons!1587) (toList!774 lt!49927)) (= (_1!1177 (h!2182 (toList!774 lt!49927))) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65142 () Option!155)

(assert (=> d!26969 (= (getValueByKey!149 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65142)))

(declare-fun b!100021 () Bool)

(assert (=> b!100021 (= e!65142 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49927)))))))

(declare-fun b!100022 () Bool)

(assert (=> b!100022 (= e!65142 e!65143)))

(declare-fun c!17128 () Bool)

(assert (=> b!100022 (= c!17128 (and ((_ is Cons!1587) (toList!774 lt!49927)) (not (= (_1!1177 (h!2182 (toList!774 lt!49927))) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!26969 c!17127) b!100021))

(assert (= (and d!26969 (not c!17127)) b!100022))

(assert (= (and b!100022 c!17128) b!100023))

(assert (= (and b!100022 (not c!17128)) b!100024))

(declare-fun m!110211 () Bool)

(assert (=> b!100023 m!110211))

(assert (=> b!99258 d!26969))

(declare-fun d!26971 () Bool)

(declare-fun e!65144 () Bool)

(assert (=> d!26971 e!65144))

(declare-fun res!50203 () Bool)

(assert (=> d!26971 (=> (not res!50203) (not e!65144))))

(declare-fun lt!50472 () ListLongMap!1517)

(assert (=> d!26971 (= res!50203 (contains!799 lt!50472 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50473 () List!1591)

(assert (=> d!26971 (= lt!50472 (ListLongMap!1518 lt!50473))))

(declare-fun lt!50474 () Unit!2998)

(declare-fun lt!50475 () Unit!2998)

(assert (=> d!26971 (= lt!50474 lt!50475)))

(assert (=> d!26971 (= (getValueByKey!149 lt!50473 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26971 (= lt!50475 (lemmaContainsTupThenGetReturnValue!68 lt!50473 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26971 (= lt!50473 (insertStrictlySorted!71 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26971 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50472)))

(declare-fun b!100025 () Bool)

(declare-fun res!50202 () Bool)

(assert (=> b!100025 (=> (not res!50202) (not e!65144))))

(assert (=> b!100025 (= res!50202 (= (getValueByKey!149 (toList!774 lt!50472) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100026 () Bool)

(assert (=> b!100026 (= e!65144 (contains!801 (toList!774 lt!50472) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26971 res!50203) b!100025))

(assert (= (and b!100025 res!50202) b!100026))

(declare-fun m!110213 () Bool)

(assert (=> d!26971 m!110213))

(declare-fun m!110215 () Bool)

(assert (=> d!26971 m!110215))

(declare-fun m!110217 () Bool)

(assert (=> d!26971 m!110217))

(declare-fun m!110219 () Bool)

(assert (=> d!26971 m!110219))

(declare-fun m!110221 () Bool)

(assert (=> b!100025 m!110221))

(declare-fun m!110223 () Bool)

(assert (=> b!100026 m!110223))

(assert (=> d!26687 d!26971))

(assert (=> d!26687 d!26631))

(declare-fun d!26973 () Bool)

(assert (=> d!26973 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!26973 true))

(declare-fun _$8!88 () Unit!2998)

(assert (=> d!26973 (= (choose!616 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) _$8!88)))

(declare-fun bs!4130 () Bool)

(assert (= bs!4130 d!26973))

(assert (=> bs!4130 m!108761))

(assert (=> bs!4130 m!108761))

(assert (=> bs!4130 m!109273))

(assert (=> bs!4130 m!108589))

(assert (=> bs!4130 m!109277))

(assert (=> d!26687 d!26973))

(declare-fun e!65147 () Bool)

(declare-fun b!100027 () Bool)

(declare-fun lt!50477 () ListLongMap!1517)

(assert (=> b!100027 (= e!65147 (= (apply!93 lt!50477 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10295 () Bool)

(declare-fun call!10304 () Bool)

(assert (=> bm!10295 (= call!10304 (contains!799 lt!50477 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100028 () Bool)

(declare-fun res!50212 () Bool)

(declare-fun e!65153 () Bool)

(assert (=> b!100028 (=> (not res!50212) (not e!65153))))

(declare-fun e!65146 () Bool)

(assert (=> b!100028 (= res!50212 e!65146)))

(declare-fun c!17129 () Bool)

(assert (=> b!100028 (= c!17129 (not (= (bvand lt!49845 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100029 () Bool)

(declare-fun e!65151 () Bool)

(assert (=> b!100029 (= e!65151 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100030 () Bool)

(declare-fun e!65152 () Bool)

(declare-fun e!65157 () Bool)

(assert (=> b!100030 (= e!65152 e!65157)))

(declare-fun res!50210 () Bool)

(assert (=> b!100030 (=> (not res!50210) (not e!65157))))

(assert (=> b!100030 (= res!50210 (contains!799 lt!50477 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100030 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100031 () Bool)

(declare-fun e!65149 () ListLongMap!1517)

(declare-fun call!10298 () ListLongMap!1517)

(assert (=> b!100031 (= e!65149 call!10298)))

(declare-fun b!100032 () Bool)

(declare-fun e!65155 () Bool)

(assert (=> b!100032 (= e!65155 (not call!10304))))

(declare-fun b!100033 () Bool)

(declare-fun e!65150 () ListLongMap!1517)

(assert (=> b!100033 (= e!65150 e!65149)))

(declare-fun c!17131 () Bool)

(assert (=> b!100033 (= c!17131 (and (not (= (bvand lt!49845 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!49845 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100034 () Bool)

(declare-fun c!17130 () Bool)

(assert (=> b!100034 (= c!17130 (and (not (= (bvand lt!49845 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!49845 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65154 () ListLongMap!1517)

(assert (=> b!100034 (= e!65149 e!65154)))

(declare-fun b!100035 () Bool)

(assert (=> b!100035 (= e!65154 call!10298)))

(declare-fun d!26975 () Bool)

(assert (=> d!26975 e!65153))

(declare-fun res!50211 () Bool)

(assert (=> d!26975 (=> (not res!50211) (not e!65153))))

(assert (=> d!26975 (= res!50211 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50479 () ListLongMap!1517)

(assert (=> d!26975 (= lt!50477 lt!50479)))

(declare-fun lt!50490 () Unit!2998)

(declare-fun e!65145 () Unit!2998)

(assert (=> d!26975 (= lt!50490 e!65145)))

(declare-fun c!17133 () Bool)

(declare-fun e!65148 () Bool)

(assert (=> d!26975 (= c!17133 e!65148)))

(declare-fun res!50204 () Bool)

(assert (=> d!26975 (=> (not res!50204) (not e!65148))))

(assert (=> d!26975 (= res!50204 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26975 (= lt!50479 e!65150)))

(declare-fun c!17132 () Bool)

(assert (=> d!26975 (= c!17132 (and (not (= (bvand lt!49845 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!49845 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26975 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26975 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50477)))

(declare-fun b!100036 () Bool)

(declare-fun lt!50480 () Unit!2998)

(assert (=> b!100036 (= e!65145 lt!50480)))

(declare-fun lt!50487 () ListLongMap!1517)

(assert (=> b!100036 (= lt!50487 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50496 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50496 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50494 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50494 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50485 () Unit!2998)

(assert (=> b!100036 (= lt!50485 (addStillContains!69 lt!50487 lt!50496 (zeroValue!2382 newMap!16) lt!50494))))

(assert (=> b!100036 (contains!799 (+!129 lt!50487 (tuple2!2333 lt!50496 (zeroValue!2382 newMap!16))) lt!50494)))

(declare-fun lt!50489 () Unit!2998)

(assert (=> b!100036 (= lt!50489 lt!50485)))

(declare-fun lt!50482 () ListLongMap!1517)

(assert (=> b!100036 (= lt!50482 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50495 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50495 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50491 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50491 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50481 () Unit!2998)

(assert (=> b!100036 (= lt!50481 (addApplyDifferent!69 lt!50482 lt!50495 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50491))))

(assert (=> b!100036 (= (apply!93 (+!129 lt!50482 (tuple2!2333 lt!50495 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50491) (apply!93 lt!50482 lt!50491))))

(declare-fun lt!50497 () Unit!2998)

(assert (=> b!100036 (= lt!50497 lt!50481)))

(declare-fun lt!50483 () ListLongMap!1517)

(assert (=> b!100036 (= lt!50483 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50493 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50493 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50486 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50486 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50488 () Unit!2998)

(assert (=> b!100036 (= lt!50488 (addApplyDifferent!69 lt!50483 lt!50493 (zeroValue!2382 newMap!16) lt!50486))))

(assert (=> b!100036 (= (apply!93 (+!129 lt!50483 (tuple2!2333 lt!50493 (zeroValue!2382 newMap!16))) lt!50486) (apply!93 lt!50483 lt!50486))))

(declare-fun lt!50476 () Unit!2998)

(assert (=> b!100036 (= lt!50476 lt!50488)))

(declare-fun lt!50492 () ListLongMap!1517)

(assert (=> b!100036 (= lt!50492 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50478 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50478 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50484 () (_ BitVec 64))

(assert (=> b!100036 (= lt!50484 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100036 (= lt!50480 (addApplyDifferent!69 lt!50492 lt!50478 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50484))))

(assert (=> b!100036 (= (apply!93 (+!129 lt!50492 (tuple2!2333 lt!50478 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50484) (apply!93 lt!50492 lt!50484))))

(declare-fun b!100037 () Bool)

(declare-fun call!10301 () Bool)

(assert (=> b!100037 (= e!65146 (not call!10301))))

(declare-fun b!100038 () Bool)

(declare-fun e!65156 () Bool)

(assert (=> b!100038 (= e!65146 e!65156)))

(declare-fun res!50206 () Bool)

(assert (=> b!100038 (= res!50206 call!10301)))

(assert (=> b!100038 (=> (not res!50206) (not e!65156))))

(declare-fun b!100039 () Bool)

(assert (=> b!100039 (= e!65157 (= (apply!93 lt!50477 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100039 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (_values!2484 newMap!16))))))

(assert (=> b!100039 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10302 () ListLongMap!1517)

(declare-fun call!10299 () ListLongMap!1517)

(declare-fun call!10303 () ListLongMap!1517)

(declare-fun bm!10296 () Bool)

(declare-fun call!10300 () ListLongMap!1517)

(assert (=> bm!10296 (= call!10300 (+!129 (ite c!17132 call!10302 (ite c!17131 call!10303 call!10299)) (ite (or c!17132 c!17131) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100040 () Bool)

(assert (=> b!100040 (= e!65155 e!65147)))

(declare-fun res!50208 () Bool)

(assert (=> b!100040 (= res!50208 call!10304)))

(assert (=> b!100040 (=> (not res!50208) (not e!65147))))

(declare-fun bm!10297 () Bool)

(assert (=> bm!10297 (= call!10301 (contains!799 lt!50477 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10298 () Bool)

(assert (=> bm!10298 (= call!10298 call!10300)))

(declare-fun bm!10299 () Bool)

(assert (=> bm!10299 (= call!10302 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) lt!49845 (zeroValue!2382 newMap!16) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!100041 () Bool)

(declare-fun Unit!3039 () Unit!2998)

(assert (=> b!100041 (= e!65145 Unit!3039)))

(declare-fun b!100042 () Bool)

(assert (=> b!100042 (= e!65156 (= (apply!93 lt!50477 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10300 () Bool)

(assert (=> bm!10300 (= call!10299 call!10303)))

(declare-fun b!100043 () Bool)

(assert (=> b!100043 (= e!65150 (+!129 call!10300 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100044 () Bool)

(assert (=> b!100044 (= e!65148 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100045 () Bool)

(declare-fun res!50209 () Bool)

(assert (=> b!100045 (=> (not res!50209) (not e!65153))))

(assert (=> b!100045 (= res!50209 e!65152)))

(declare-fun res!50205 () Bool)

(assert (=> b!100045 (=> res!50205 e!65152)))

(assert (=> b!100045 (= res!50205 (not e!65151))))

(declare-fun res!50207 () Bool)

(assert (=> b!100045 (=> (not res!50207) (not e!65151))))

(assert (=> b!100045 (= res!50207 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10301 () Bool)

(assert (=> bm!10301 (= call!10303 call!10302)))

(declare-fun b!100046 () Bool)

(assert (=> b!100046 (= e!65154 call!10299)))

(declare-fun b!100047 () Bool)

(assert (=> b!100047 (= e!65153 e!65155)))

(declare-fun c!17134 () Bool)

(assert (=> b!100047 (= c!17134 (not (= (bvand lt!49845 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26975 c!17132) b!100043))

(assert (= (and d!26975 (not c!17132)) b!100033))

(assert (= (and b!100033 c!17131) b!100031))

(assert (= (and b!100033 (not c!17131)) b!100034))

(assert (= (and b!100034 c!17130) b!100035))

(assert (= (and b!100034 (not c!17130)) b!100046))

(assert (= (or b!100035 b!100046) bm!10300))

(assert (= (or b!100031 bm!10300) bm!10301))

(assert (= (or b!100031 b!100035) bm!10298))

(assert (= (or b!100043 bm!10301) bm!10299))

(assert (= (or b!100043 bm!10298) bm!10296))

(assert (= (and d!26975 res!50204) b!100044))

(assert (= (and d!26975 c!17133) b!100036))

(assert (= (and d!26975 (not c!17133)) b!100041))

(assert (= (and d!26975 res!50211) b!100045))

(assert (= (and b!100045 res!50207) b!100029))

(assert (= (and b!100045 (not res!50205)) b!100030))

(assert (= (and b!100030 res!50210) b!100039))

(assert (= (and b!100045 res!50209) b!100028))

(assert (= (and b!100028 c!17129) b!100038))

(assert (= (and b!100028 (not c!17129)) b!100037))

(assert (= (and b!100038 res!50206) b!100042))

(assert (= (or b!100038 b!100037) bm!10297))

(assert (= (and b!100028 res!50212) b!100047))

(assert (= (and b!100047 c!17134) b!100040))

(assert (= (and b!100047 (not c!17134)) b!100032))

(assert (= (and b!100040 res!50208) b!100027))

(assert (= (or b!100040 b!100032) bm!10295))

(declare-fun b_lambda!4455 () Bool)

(assert (=> (not b_lambda!4455) (not b!100039)))

(assert (=> b!100039 t!5567))

(declare-fun b_and!6145 () Bool)

(assert (= b_and!6141 (and (=> t!5567 result!3299) b_and!6145)))

(assert (=> b!100039 t!5569))

(declare-fun b_and!6147 () Bool)

(assert (= b_and!6143 (and (=> t!5569 result!3301) b_and!6147)))

(assert (=> b!100039 m!108993))

(assert (=> b!100039 m!109005))

(assert (=> b!100039 m!109007))

(assert (=> b!100039 m!108993))

(declare-fun m!110225 () Bool)

(assert (=> b!100039 m!110225))

(assert (=> b!100039 m!109005))

(assert (=> b!100039 m!109007))

(assert (=> b!100039 m!109011))

(assert (=> b!100029 m!108993))

(assert (=> b!100029 m!108993))

(assert (=> b!100029 m!109001))

(declare-fun m!110227 () Bool)

(assert (=> bm!10295 m!110227))

(assert (=> b!100030 m!108993))

(assert (=> b!100030 m!108993))

(declare-fun m!110229 () Bool)

(assert (=> b!100030 m!110229))

(declare-fun m!110231 () Bool)

(assert (=> b!100043 m!110231))

(declare-fun m!110233 () Bool)

(assert (=> bm!10297 m!110233))

(assert (=> bm!10299 m!108589))

(declare-fun m!110235 () Bool)

(assert (=> bm!10299 m!110235))

(assert (=> d!26975 m!108865))

(declare-fun m!110237 () Bool)

(assert (=> bm!10296 m!110237))

(assert (=> b!100044 m!108993))

(assert (=> b!100044 m!108993))

(assert (=> b!100044 m!109001))

(declare-fun m!110239 () Bool)

(assert (=> b!100042 m!110239))

(declare-fun m!110241 () Bool)

(assert (=> b!100036 m!110241))

(declare-fun m!110243 () Bool)

(assert (=> b!100036 m!110243))

(assert (=> b!100036 m!108993))

(declare-fun m!110245 () Bool)

(assert (=> b!100036 m!110245))

(declare-fun m!110247 () Bool)

(assert (=> b!100036 m!110247))

(assert (=> b!100036 m!108589))

(declare-fun m!110249 () Bool)

(assert (=> b!100036 m!110249))

(declare-fun m!110251 () Bool)

(assert (=> b!100036 m!110251))

(declare-fun m!110253 () Bool)

(assert (=> b!100036 m!110253))

(declare-fun m!110255 () Bool)

(assert (=> b!100036 m!110255))

(declare-fun m!110257 () Bool)

(assert (=> b!100036 m!110257))

(assert (=> b!100036 m!110245))

(declare-fun m!110259 () Bool)

(assert (=> b!100036 m!110259))

(assert (=> b!100036 m!108589))

(declare-fun m!110261 () Bool)

(assert (=> b!100036 m!110261))

(declare-fun m!110263 () Bool)

(assert (=> b!100036 m!110263))

(assert (=> b!100036 m!110251))

(assert (=> b!100036 m!110257))

(declare-fun m!110265 () Bool)

(assert (=> b!100036 m!110265))

(assert (=> b!100036 m!108589))

(assert (=> b!100036 m!110235))

(declare-fun m!110267 () Bool)

(assert (=> b!100036 m!110267))

(assert (=> b!100036 m!110255))

(declare-fun m!110269 () Bool)

(assert (=> b!100036 m!110269))

(declare-fun m!110271 () Bool)

(assert (=> b!100027 m!110271))

(assert (=> d!26687 d!26975))

(assert (=> d!26687 d!26717))

(declare-fun d!26977 () Bool)

(assert (=> d!26977 (= (apply!93 lt!49986 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1294 (getValueByKey!149 (toList!774 lt!49986) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4131 () Bool)

(assert (= bs!4131 d!26977))

(assert (=> bs!4131 m!108993))

(assert (=> bs!4131 m!109711))

(assert (=> bs!4131 m!109711))

(declare-fun m!110273 () Bool)

(assert (=> bs!4131 m!110273))

(assert (=> b!99339 d!26977))

(declare-fun d!26979 () Bool)

(declare-fun c!17135 () Bool)

(assert (=> d!26979 (= c!17135 ((_ is ValueCellFull!974) (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65158 () V!3161)

(assert (=> d!26979 (= (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65158)))

(declare-fun b!100048 () Bool)

(assert (=> b!100048 (= e!65158 (get!1292 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100049 () Bool)

(assert (=> b!100049 (= e!65158 (get!1293 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26979 c!17135) b!100048))

(assert (= (and d!26979 (not c!17135)) b!100049))

(assert (=> b!100048 m!109005))

(assert (=> b!100048 m!109007))

(declare-fun m!110275 () Bool)

(assert (=> b!100048 m!110275))

(assert (=> b!100049 m!109005))

(assert (=> b!100049 m!109007))

(declare-fun m!110277 () Bool)

(assert (=> b!100049 m!110277))

(assert (=> b!99339 d!26979))

(declare-fun d!26981 () Bool)

(declare-fun e!65159 () Bool)

(assert (=> d!26981 e!65159))

(declare-fun res!50213 () Bool)

(assert (=> d!26981 (=> res!50213 e!65159)))

(declare-fun lt!50499 () Bool)

(assert (=> d!26981 (= res!50213 (not lt!50499))))

(declare-fun lt!50498 () Bool)

(assert (=> d!26981 (= lt!50499 lt!50498)))

(declare-fun lt!50501 () Unit!2998)

(declare-fun e!65160 () Unit!2998)

(assert (=> d!26981 (= lt!50501 e!65160)))

(declare-fun c!17136 () Bool)

(assert (=> d!26981 (= c!17136 lt!50498)))

(assert (=> d!26981 (= lt!50498 (containsKey!153 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))

(assert (=> d!26981 (= (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))) lt!50499)))

(declare-fun b!100050 () Bool)

(declare-fun lt!50500 () Unit!2998)

(assert (=> b!100050 (= e!65160 lt!50500)))

(assert (=> b!100050 (= lt!50500 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))

(assert (=> b!100050 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837))))))

(declare-fun b!100051 () Bool)

(declare-fun Unit!3040 () Unit!2998)

(assert (=> b!100051 (= e!65160 Unit!3040)))

(declare-fun b!100052 () Bool)

(assert (=> b!100052 (= e!65159 (isDefined!103 (getValueByKey!149 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(assert (= (and d!26981 c!17136) b!100050))

(assert (= (and d!26981 (not c!17136)) b!100051))

(assert (= (and d!26981 (not res!50213)) b!100052))

(assert (=> d!26981 m!108771))

(declare-fun m!110279 () Bool)

(assert (=> d!26981 m!110279))

(assert (=> b!100050 m!108771))

(declare-fun m!110281 () Bool)

(assert (=> b!100050 m!110281))

(assert (=> b!100050 m!108771))

(declare-fun m!110283 () Bool)

(assert (=> b!100050 m!110283))

(assert (=> b!100050 m!110283))

(declare-fun m!110285 () Bool)

(assert (=> b!100050 m!110285))

(assert (=> b!100052 m!108771))

(assert (=> b!100052 m!110283))

(assert (=> b!100052 m!110283))

(assert (=> b!100052 m!110285))

(assert (=> b!99468 d!26981))

(declare-fun b!100053 () Bool)

(declare-fun e!65163 () Bool)

(declare-fun lt!50503 () ListLongMap!1517)

(assert (=> b!100053 (= e!65163 (= (apply!93 lt!50503 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10302 () Bool)

(declare-fun call!10311 () Bool)

(assert (=> bm!10302 (= call!10311 (contains!799 lt!50503 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100054 () Bool)

(declare-fun res!50222 () Bool)

(declare-fun e!65169 () Bool)

(assert (=> b!100054 (=> (not res!50222) (not e!65169))))

(declare-fun e!65162 () Bool)

(assert (=> b!100054 (= res!50222 e!65162)))

(declare-fun c!17137 () Bool)

(assert (=> b!100054 (= c!17137 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100055 () Bool)

(declare-fun e!65167 () Bool)

(assert (=> b!100055 (= e!65167 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100056 () Bool)

(declare-fun e!65168 () Bool)

(declare-fun e!65173 () Bool)

(assert (=> b!100056 (= e!65168 e!65173)))

(declare-fun res!50220 () Bool)

(assert (=> b!100056 (=> (not res!50220) (not e!65173))))

(assert (=> b!100056 (= res!50220 (contains!799 lt!50503 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100056 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100057 () Bool)

(declare-fun e!65165 () ListLongMap!1517)

(declare-fun call!10305 () ListLongMap!1517)

(assert (=> b!100057 (= e!65165 call!10305)))

(declare-fun b!100058 () Bool)

(declare-fun e!65171 () Bool)

(assert (=> b!100058 (= e!65171 (not call!10311))))

(declare-fun b!100059 () Bool)

(declare-fun e!65166 () ListLongMap!1517)

(assert (=> b!100059 (= e!65166 e!65165)))

(declare-fun c!17139 () Bool)

(assert (=> b!100059 (= c!17139 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100060 () Bool)

(declare-fun c!17138 () Bool)

(assert (=> b!100060 (= c!17138 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65170 () ListLongMap!1517)

(assert (=> b!100060 (= e!65165 e!65170)))

(declare-fun b!100061 () Bool)

(assert (=> b!100061 (= e!65170 call!10305)))

(declare-fun d!26983 () Bool)

(assert (=> d!26983 e!65169))

(declare-fun res!50221 () Bool)

(assert (=> d!26983 (=> (not res!50221) (not e!65169))))

(assert (=> d!26983 (= res!50221 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50505 () ListLongMap!1517)

(assert (=> d!26983 (= lt!50503 lt!50505)))

(declare-fun lt!50516 () Unit!2998)

(declare-fun e!65161 () Unit!2998)

(assert (=> d!26983 (= lt!50516 e!65161)))

(declare-fun c!17141 () Bool)

(declare-fun e!65164 () Bool)

(assert (=> d!26983 (= c!17141 e!65164)))

(declare-fun res!50214 () Bool)

(assert (=> d!26983 (=> (not res!50214) (not e!65164))))

(assert (=> d!26983 (= res!50214 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!26983 (= lt!50505 e!65166)))

(declare-fun c!17140 () Bool)

(assert (=> d!26983 (= c!17140 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26983 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!26983 (= (getCurrentListMap!455 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50503)))

(declare-fun b!100062 () Bool)

(declare-fun lt!50506 () Unit!2998)

(assert (=> b!100062 (= e!65161 lt!50506)))

(declare-fun lt!50513 () ListLongMap!1517)

(assert (=> b!100062 (= lt!50513 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50522 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50522 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50520 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50520 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50511 () Unit!2998)

(assert (=> b!100062 (= lt!50511 (addStillContains!69 lt!50513 lt!50522 (zeroValue!2382 newMap!16) lt!50520))))

(assert (=> b!100062 (contains!799 (+!129 lt!50513 (tuple2!2333 lt!50522 (zeroValue!2382 newMap!16))) lt!50520)))

(declare-fun lt!50515 () Unit!2998)

(assert (=> b!100062 (= lt!50515 lt!50511)))

(declare-fun lt!50508 () ListLongMap!1517)

(assert (=> b!100062 (= lt!50508 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50521 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50521 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50517 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50517 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50507 () Unit!2998)

(assert (=> b!100062 (= lt!50507 (addApplyDifferent!69 lt!50508 lt!50521 (minValue!2382 newMap!16) lt!50517))))

(assert (=> b!100062 (= (apply!93 (+!129 lt!50508 (tuple2!2333 lt!50521 (minValue!2382 newMap!16))) lt!50517) (apply!93 lt!50508 lt!50517))))

(declare-fun lt!50523 () Unit!2998)

(assert (=> b!100062 (= lt!50523 lt!50507)))

(declare-fun lt!50509 () ListLongMap!1517)

(assert (=> b!100062 (= lt!50509 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50519 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50519 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50512 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50512 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50514 () Unit!2998)

(assert (=> b!100062 (= lt!50514 (addApplyDifferent!69 lt!50509 lt!50519 (zeroValue!2382 newMap!16) lt!50512))))

(assert (=> b!100062 (= (apply!93 (+!129 lt!50509 (tuple2!2333 lt!50519 (zeroValue!2382 newMap!16))) lt!50512) (apply!93 lt!50509 lt!50512))))

(declare-fun lt!50502 () Unit!2998)

(assert (=> b!100062 (= lt!50502 lt!50514)))

(declare-fun lt!50518 () ListLongMap!1517)

(assert (=> b!100062 (= lt!50518 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50504 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50504 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50510 () (_ BitVec 64))

(assert (=> b!100062 (= lt!50510 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100062 (= lt!50506 (addApplyDifferent!69 lt!50518 lt!50504 (minValue!2382 newMap!16) lt!50510))))

(assert (=> b!100062 (= (apply!93 (+!129 lt!50518 (tuple2!2333 lt!50504 (minValue!2382 newMap!16))) lt!50510) (apply!93 lt!50518 lt!50510))))

(declare-fun b!100063 () Bool)

(declare-fun call!10308 () Bool)

(assert (=> b!100063 (= e!65162 (not call!10308))))

(declare-fun b!100064 () Bool)

(declare-fun e!65172 () Bool)

(assert (=> b!100064 (= e!65162 e!65172)))

(declare-fun res!50216 () Bool)

(assert (=> b!100064 (= res!50216 call!10308)))

(assert (=> b!100064 (=> (not res!50216) (not e!65172))))

(declare-fun b!100065 () Bool)

(assert (=> b!100065 (= e!65173 (= (apply!93 lt!50503 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 lt!49831) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 lt!49831)))))

(assert (=> b!100065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10307 () ListLongMap!1517)

(declare-fun bm!10303 () Bool)

(declare-fun call!10306 () ListLongMap!1517)

(declare-fun call!10310 () ListLongMap!1517)

(declare-fun call!10309 () ListLongMap!1517)

(assert (=> bm!10303 (= call!10307 (+!129 (ite c!17140 call!10309 (ite c!17139 call!10310 call!10306)) (ite (or c!17140 c!17139) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!100066 () Bool)

(assert (=> b!100066 (= e!65171 e!65163)))

(declare-fun res!50218 () Bool)

(assert (=> b!100066 (= res!50218 call!10311)))

(assert (=> b!100066 (=> (not res!50218) (not e!65163))))

(declare-fun bm!10304 () Bool)

(assert (=> bm!10304 (= call!10308 (contains!799 lt!50503 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10305 () Bool)

(assert (=> bm!10305 (= call!10305 call!10307)))

(declare-fun bm!10306 () Bool)

(assert (=> bm!10306 (= call!10309 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) lt!49831 (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!100067 () Bool)

(declare-fun Unit!3041 () Unit!2998)

(assert (=> b!100067 (= e!65161 Unit!3041)))

(declare-fun b!100068 () Bool)

(assert (=> b!100068 (= e!65172 (= (apply!93 lt!50503 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10307 () Bool)

(assert (=> bm!10307 (= call!10306 call!10310)))

(declare-fun b!100069 () Bool)

(assert (=> b!100069 (= e!65166 (+!129 call!10307 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!100070 () Bool)

(assert (=> b!100070 (= e!65164 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100071 () Bool)

(declare-fun res!50219 () Bool)

(assert (=> b!100071 (=> (not res!50219) (not e!65169))))

(assert (=> b!100071 (= res!50219 e!65168)))

(declare-fun res!50215 () Bool)

(assert (=> b!100071 (=> res!50215 e!65168)))

(assert (=> b!100071 (= res!50215 (not e!65167))))

(declare-fun res!50217 () Bool)

(assert (=> b!100071 (=> (not res!50217) (not e!65167))))

(assert (=> b!100071 (= res!50217 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10308 () Bool)

(assert (=> bm!10308 (= call!10310 call!10309)))

(declare-fun b!100072 () Bool)

(assert (=> b!100072 (= e!65170 call!10306)))

(declare-fun b!100073 () Bool)

(assert (=> b!100073 (= e!65169 e!65171)))

(declare-fun c!17142 () Bool)

(assert (=> b!100073 (= c!17142 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26983 c!17140) b!100069))

(assert (= (and d!26983 (not c!17140)) b!100059))

(assert (= (and b!100059 c!17139) b!100057))

(assert (= (and b!100059 (not c!17139)) b!100060))

(assert (= (and b!100060 c!17138) b!100061))

(assert (= (and b!100060 (not c!17138)) b!100072))

(assert (= (or b!100061 b!100072) bm!10307))

(assert (= (or b!100057 bm!10307) bm!10308))

(assert (= (or b!100057 b!100061) bm!10305))

(assert (= (or b!100069 bm!10308) bm!10306))

(assert (= (or b!100069 bm!10305) bm!10303))

(assert (= (and d!26983 res!50214) b!100070))

(assert (= (and d!26983 c!17141) b!100062))

(assert (= (and d!26983 (not c!17141)) b!100067))

(assert (= (and d!26983 res!50221) b!100071))

(assert (= (and b!100071 res!50217) b!100055))

(assert (= (and b!100071 (not res!50215)) b!100056))

(assert (= (and b!100056 res!50220) b!100065))

(assert (= (and b!100071 res!50219) b!100054))

(assert (= (and b!100054 c!17137) b!100064))

(assert (= (and b!100054 (not c!17137)) b!100063))

(assert (= (and b!100064 res!50216) b!100068))

(assert (= (or b!100064 b!100063) bm!10304))

(assert (= (and b!100054 res!50222) b!100073))

(assert (= (and b!100073 c!17142) b!100066))

(assert (= (and b!100073 (not c!17142)) b!100058))

(assert (= (and b!100066 res!50218) b!100053))

(assert (= (or b!100066 b!100058) bm!10302))

(declare-fun b_lambda!4457 () Bool)

(assert (=> (not b_lambda!4457) (not b!100065)))

(assert (=> b!100065 t!5567))

(declare-fun b_and!6149 () Bool)

(assert (= b_and!6145 (and (=> t!5567 result!3299) b_and!6149)))

(assert (=> b!100065 t!5569))

(declare-fun b_and!6151 () Bool)

(assert (= b_and!6147 (and (=> t!5569 result!3301) b_and!6151)))

(assert (=> b!100065 m!108993))

(declare-fun m!110287 () Bool)

(assert (=> b!100065 m!110287))

(assert (=> b!100065 m!109007))

(assert (=> b!100065 m!108993))

(declare-fun m!110289 () Bool)

(assert (=> b!100065 m!110289))

(assert (=> b!100065 m!110287))

(assert (=> b!100065 m!109007))

(declare-fun m!110291 () Bool)

(assert (=> b!100065 m!110291))

(assert (=> b!100055 m!108993))

(assert (=> b!100055 m!108993))

(assert (=> b!100055 m!109001))

(declare-fun m!110293 () Bool)

(assert (=> bm!10302 m!110293))

(assert (=> b!100056 m!108993))

(assert (=> b!100056 m!108993))

(declare-fun m!110295 () Bool)

(assert (=> b!100056 m!110295))

(declare-fun m!110297 () Bool)

(assert (=> b!100069 m!110297))

(declare-fun m!110299 () Bool)

(assert (=> bm!10304 m!110299))

(declare-fun m!110301 () Bool)

(assert (=> bm!10306 m!110301))

(assert (=> d!26983 m!108865))

(declare-fun m!110303 () Bool)

(assert (=> bm!10303 m!110303))

(assert (=> b!100070 m!108993))

(assert (=> b!100070 m!108993))

(assert (=> b!100070 m!109001))

(declare-fun m!110305 () Bool)

(assert (=> b!100068 m!110305))

(declare-fun m!110307 () Bool)

(assert (=> b!100062 m!110307))

(declare-fun m!110309 () Bool)

(assert (=> b!100062 m!110309))

(assert (=> b!100062 m!108993))

(declare-fun m!110311 () Bool)

(assert (=> b!100062 m!110311))

(declare-fun m!110313 () Bool)

(assert (=> b!100062 m!110313))

(declare-fun m!110315 () Bool)

(assert (=> b!100062 m!110315))

(declare-fun m!110317 () Bool)

(assert (=> b!100062 m!110317))

(declare-fun m!110319 () Bool)

(assert (=> b!100062 m!110319))

(declare-fun m!110321 () Bool)

(assert (=> b!100062 m!110321))

(declare-fun m!110323 () Bool)

(assert (=> b!100062 m!110323))

(assert (=> b!100062 m!110311))

(declare-fun m!110325 () Bool)

(assert (=> b!100062 m!110325))

(declare-fun m!110327 () Bool)

(assert (=> b!100062 m!110327))

(declare-fun m!110329 () Bool)

(assert (=> b!100062 m!110329))

(assert (=> b!100062 m!110317))

(assert (=> b!100062 m!110323))

(declare-fun m!110331 () Bool)

(assert (=> b!100062 m!110331))

(assert (=> b!100062 m!110301))

(declare-fun m!110333 () Bool)

(assert (=> b!100062 m!110333))

(assert (=> b!100062 m!110321))

(declare-fun m!110335 () Bool)

(assert (=> b!100062 m!110335))

(declare-fun m!110337 () Bool)

(assert (=> b!100053 m!110337))

(assert (=> b!99468 d!26983))

(declare-fun d!26985 () Bool)

(assert (=> d!26985 (= (apply!93 lt!50192 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1294 (getValueByKey!149 (toList!774 lt!50192) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4132 () Bool)

(assert (= bs!4132 d!26985))

(assert (=> bs!4132 m!108993))

(assert (=> bs!4132 m!109703))

(assert (=> bs!4132 m!109703))

(declare-fun m!110339 () Bool)

(assert (=> bs!4132 m!110339))

(assert (=> b!99543 d!26985))

(declare-fun c!17143 () Bool)

(declare-fun d!26987 () Bool)

(assert (=> d!26987 (= c!17143 ((_ is ValueCellFull!974) (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!65174 () V!3161)

(assert (=> d!26987 (= (get!1291 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65174)))

(declare-fun b!100074 () Bool)

(assert (=> b!100074 (= e!65174 (get!1292 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100075 () Bool)

(assert (=> b!100075 (= e!65174 (get!1293 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26987 c!17143) b!100074))

(assert (= (and d!26987 (not c!17143)) b!100075))

(assert (=> b!100074 m!109333))

(assert (=> b!100074 m!109007))

(declare-fun m!110341 () Bool)

(assert (=> b!100074 m!110341))

(assert (=> b!100075 m!109333))

(assert (=> b!100075 m!109007))

(declare-fun m!110343 () Bool)

(assert (=> b!100075 m!110343))

(assert (=> b!99543 d!26987))

(declare-fun lt!50524 () Bool)

(declare-fun d!26989 () Bool)

(assert (=> d!26989 (= lt!50524 (select (content!104 (toList!774 lt!49959)) (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun e!65176 () Bool)

(assert (=> d!26989 (= lt!50524 e!65176)))

(declare-fun res!50223 () Bool)

(assert (=> d!26989 (=> (not res!50223) (not e!65176))))

(assert (=> d!26989 (= res!50223 ((_ is Cons!1587) (toList!774 lt!49959)))))

(assert (=> d!26989 (= (contains!801 (toList!774 lt!49959) (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50524)))

(declare-fun b!100076 () Bool)

(declare-fun e!65175 () Bool)

(assert (=> b!100076 (= e!65176 e!65175)))

(declare-fun res!50224 () Bool)

(assert (=> b!100076 (=> res!50224 e!65175)))

(assert (=> b!100076 (= res!50224 (= (h!2182 (toList!774 lt!49959)) (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!100077 () Bool)

(assert (=> b!100077 (= e!65175 (contains!801 (t!5556 (toList!774 lt!49959)) (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!26989 res!50223) b!100076))

(assert (= (and b!100076 (not res!50224)) b!100077))

(declare-fun m!110345 () Bool)

(assert (=> d!26989 m!110345))

(declare-fun m!110347 () Bool)

(assert (=> d!26989 m!110347))

(declare-fun m!110349 () Bool)

(assert (=> b!100077 m!110349))

(assert (=> b!99303 d!26989))

(assert (=> d!26605 d!26619))

(assert (=> d!26605 d!26611))

(declare-fun d!26991 () Bool)

(assert (=> d!26991 (contains!799 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49915)))

(assert (=> d!26991 true))

(declare-fun _$35!342 () Unit!2998)

(assert (=> d!26991 (= (choose!610 lt!49908 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49915) _$35!342)))

(declare-fun bs!4133 () Bool)

(assert (= bs!4133 d!26991))

(assert (=> bs!4133 m!108831))

(assert (=> bs!4133 m!108831))

(assert (=> bs!4133 m!108833))

(assert (=> d!26605 d!26991))

(declare-fun d!26993 () Bool)

(declare-fun e!65177 () Bool)

(assert (=> d!26993 e!65177))

(declare-fun res!50225 () Bool)

(assert (=> d!26993 (=> res!50225 e!65177)))

(declare-fun lt!50526 () Bool)

(assert (=> d!26993 (= res!50225 (not lt!50526))))

(declare-fun lt!50525 () Bool)

(assert (=> d!26993 (= lt!50526 lt!50525)))

(declare-fun lt!50528 () Unit!2998)

(declare-fun e!65178 () Unit!2998)

(assert (=> d!26993 (= lt!50528 e!65178)))

(declare-fun c!17144 () Bool)

(assert (=> d!26993 (= c!17144 lt!50525)))

(assert (=> d!26993 (= lt!50525 (containsKey!153 (toList!774 lt!49908) lt!49915))))

(assert (=> d!26993 (= (contains!799 lt!49908 lt!49915) lt!50526)))

(declare-fun b!100079 () Bool)

(declare-fun lt!50527 () Unit!2998)

(assert (=> b!100079 (= e!65178 lt!50527)))

(assert (=> b!100079 (= lt!50527 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49908) lt!49915))))

(assert (=> b!100079 (isDefined!103 (getValueByKey!149 (toList!774 lt!49908) lt!49915))))

(declare-fun b!100080 () Bool)

(declare-fun Unit!3042 () Unit!2998)

(assert (=> b!100080 (= e!65178 Unit!3042)))

(declare-fun b!100081 () Bool)

(assert (=> b!100081 (= e!65177 (isDefined!103 (getValueByKey!149 (toList!774 lt!49908) lt!49915)))))

(assert (= (and d!26993 c!17144) b!100079))

(assert (= (and d!26993 (not c!17144)) b!100080))

(assert (= (and d!26993 (not res!50225)) b!100081))

(declare-fun m!110351 () Bool)

(assert (=> d!26993 m!110351))

(declare-fun m!110353 () Bool)

(assert (=> b!100079 m!110353))

(declare-fun m!110355 () Bool)

(assert (=> b!100079 m!110355))

(assert (=> b!100079 m!110355))

(declare-fun m!110357 () Bool)

(assert (=> b!100079 m!110357))

(assert (=> b!100081 m!110355))

(assert (=> b!100081 m!110355))

(assert (=> b!100081 m!110357))

(assert (=> d!26605 d!26993))

(declare-fun d!26995 () Bool)

(assert (=> d!26995 (= (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49905)) (v!2813 (getValueByKey!149 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49905)))))

(assert (=> d!26625 d!26995))

(declare-fun b!100085 () Bool)

(declare-fun e!65180 () Option!155)

(assert (=> b!100085 (= e!65180 None!153)))

(declare-fun b!100084 () Bool)

(assert (=> b!100084 (= e!65180 (getValueByKey!149 (t!5556 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!49905))))

(declare-fun d!26997 () Bool)

(declare-fun c!17145 () Bool)

(assert (=> d!26997 (= c!17145 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49905)))))

(declare-fun e!65179 () Option!155)

(assert (=> d!26997 (= (getValueByKey!149 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49905) e!65179)))

(declare-fun b!100082 () Bool)

(assert (=> b!100082 (= e!65179 (Some!154 (_2!1177 (h!2182 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(declare-fun b!100083 () Bool)

(assert (=> b!100083 (= e!65179 e!65180)))

(declare-fun c!17146 () Bool)

(assert (=> b!100083 (= c!17146 (and ((_ is Cons!1587) (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (not (= (_1!1177 (h!2182 (toList!774 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))) lt!49905))))))

(assert (= (and d!26997 c!17145) b!100082))

(assert (= (and d!26997 (not c!17145)) b!100083))

(assert (= (and b!100083 c!17146) b!100084))

(assert (= (and b!100083 (not c!17146)) b!100085))

(declare-fun m!110359 () Bool)

(assert (=> b!100084 m!110359))

(assert (=> d!26625 d!26997))

(assert (=> b!99512 d!26735))

(assert (=> d!26693 d!26717))

(assert (=> b!99490 d!26735))

(declare-fun d!26999 () Bool)

(declare-fun res!50226 () Bool)

(declare-fun e!65181 () Bool)

(assert (=> d!26999 (=> res!50226 e!65181)))

(assert (=> d!26999 (= res!50226 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26999 (= (containsKey!153 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000) e!65181)))

(declare-fun b!100086 () Bool)

(declare-fun e!65182 () Bool)

(assert (=> b!100086 (= e!65181 e!65182)))

(declare-fun res!50227 () Bool)

(assert (=> b!100086 (=> (not res!50227) (not e!65182))))

(assert (=> b!100086 (= res!50227 (and (or (not ((_ is Cons!1587) (toList!774 lt!49898))) (bvsle (_1!1177 (h!2182 (toList!774 lt!49898))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1587) (toList!774 lt!49898)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49898))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100087 () Bool)

(assert (=> b!100087 (= e!65182 (containsKey!153 (t!5556 (toList!774 lt!49898)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26999 (not res!50226)) b!100086))

(assert (= (and b!100086 res!50227) b!100087))

(declare-fun m!110361 () Bool)

(assert (=> b!100087 m!110361))

(assert (=> d!26655 d!26999))

(assert (=> d!26631 d!26717))

(declare-fun d!27001 () Bool)

(declare-fun res!50228 () Bool)

(declare-fun e!65183 () Bool)

(assert (=> d!27001 (=> res!50228 e!65183)))

(assert (=> d!27001 (= res!50228 (= (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!27001 (= (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!65183)))

(declare-fun b!100088 () Bool)

(declare-fun e!65184 () Bool)

(assert (=> b!100088 (= e!65183 e!65184)))

(declare-fun res!50229 () Bool)

(assert (=> b!100088 (=> (not res!50229) (not e!65184))))

(assert (=> b!100088 (= res!50229 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100089 () Bool)

(assert (=> b!100089 (= e!65184 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27001 (not res!50228)) b!100088))

(assert (= (and b!100088 res!50229) b!100089))

(assert (=> d!27001 m!109423))

(assert (=> b!100089 m!108591))

(declare-fun m!110363 () Bool)

(assert (=> b!100089 m!110363))

(assert (=> b!99483 d!27001))

(declare-fun d!27003 () Bool)

(assert (=> d!27003 (= (+!129 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!455 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!27003 true))

(declare-fun _$5!104 () Unit!2998)

(assert (=> d!27003 (= (choose!615 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3173 lt!49837) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) _$5!104)))

(declare-fun bs!4134 () Bool)

(assert (= bs!4134 d!27003))

(assert (=> bs!4134 m!108761))

(assert (=> bs!4134 m!108761))

(assert (=> bs!4134 m!109097))

(assert (=> bs!4134 m!108783))

(assert (=> bs!4134 m!109207))

(assert (=> d!26665 d!27003))

(assert (=> d!26665 d!26717))

(assert (=> d!26615 d!26595))

(assert (=> d!26615 d!26597))

(declare-fun d!27005 () Bool)

(assert (=> d!27005 (= (apply!93 (+!129 lt!49904 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49907) (apply!93 lt!49904 lt!49907))))

(assert (=> d!27005 true))

(declare-fun _$34!872 () Unit!2998)

(assert (=> d!27005 (= (choose!609 lt!49904 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49907) _$34!872)))

(declare-fun bs!4135 () Bool)

(assert (= bs!4135 d!27005))

(assert (=> bs!4135 m!108841))

(assert (=> bs!4135 m!108841))

(assert (=> bs!4135 m!108855))

(assert (=> bs!4135 m!108853))

(assert (=> d!26615 d!27005))

(declare-fun d!27007 () Bool)

(declare-fun e!65185 () Bool)

(assert (=> d!27007 e!65185))

(declare-fun res!50230 () Bool)

(assert (=> d!27007 (=> res!50230 e!65185)))

(declare-fun lt!50530 () Bool)

(assert (=> d!27007 (= res!50230 (not lt!50530))))

(declare-fun lt!50529 () Bool)

(assert (=> d!27007 (= lt!50530 lt!50529)))

(declare-fun lt!50532 () Unit!2998)

(declare-fun e!65186 () Unit!2998)

(assert (=> d!27007 (= lt!50532 e!65186)))

(declare-fun c!17147 () Bool)

(assert (=> d!27007 (= c!17147 lt!50529)))

(assert (=> d!27007 (= lt!50529 (containsKey!153 (toList!774 lt!49904) lt!49907))))

(assert (=> d!27007 (= (contains!799 lt!49904 lt!49907) lt!50530)))

(declare-fun b!100090 () Bool)

(declare-fun lt!50531 () Unit!2998)

(assert (=> b!100090 (= e!65186 lt!50531)))

(assert (=> b!100090 (= lt!50531 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49904) lt!49907))))

(assert (=> b!100090 (isDefined!103 (getValueByKey!149 (toList!774 lt!49904) lt!49907))))

(declare-fun b!100091 () Bool)

(declare-fun Unit!3043 () Unit!2998)

(assert (=> b!100091 (= e!65186 Unit!3043)))

(declare-fun b!100092 () Bool)

(assert (=> b!100092 (= e!65185 (isDefined!103 (getValueByKey!149 (toList!774 lt!49904) lt!49907)))))

(assert (= (and d!27007 c!17147) b!100090))

(assert (= (and d!27007 (not c!17147)) b!100091))

(assert (= (and d!27007 (not res!50230)) b!100092))

(declare-fun m!110365 () Bool)

(assert (=> d!27007 m!110365))

(declare-fun m!110367 () Bool)

(assert (=> b!100090 m!110367))

(assert (=> b!100090 m!108881))

(assert (=> b!100090 m!108881))

(declare-fun m!110369 () Bool)

(assert (=> b!100090 m!110369))

(assert (=> b!100092 m!108881))

(assert (=> b!100092 m!108881))

(assert (=> b!100092 m!110369))

(assert (=> d!26615 d!27007))

(assert (=> d!26615 d!26623))

(assert (=> d!26607 d!26617))

(declare-fun d!27009 () Bool)

(assert (=> d!27009 (= (apply!93 (+!129 lt!49913 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!49905) (apply!93 lt!49913 lt!49905))))

(assert (=> d!27009 true))

(declare-fun _$34!873 () Unit!2998)

(assert (=> d!27009 (= (choose!609 lt!49913 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))) lt!49905) _$34!873)))

(declare-fun bs!4136 () Bool)

(assert (= bs!4136 d!27009))

(assert (=> bs!4136 m!108837))

(assert (=> bs!4136 m!108837))

(assert (=> bs!4136 m!108839))

(assert (=> bs!4136 m!108827))

(assert (=> d!26607 d!27009))

(assert (=> d!26607 d!26609))

(assert (=> d!26607 d!26625))

(declare-fun d!27011 () Bool)

(declare-fun e!65187 () Bool)

(assert (=> d!27011 e!65187))

(declare-fun res!50231 () Bool)

(assert (=> d!27011 (=> res!50231 e!65187)))

(declare-fun lt!50534 () Bool)

(assert (=> d!27011 (= res!50231 (not lt!50534))))

(declare-fun lt!50533 () Bool)

(assert (=> d!27011 (= lt!50534 lt!50533)))

(declare-fun lt!50536 () Unit!2998)

(declare-fun e!65188 () Unit!2998)

(assert (=> d!27011 (= lt!50536 e!65188)))

(declare-fun c!17148 () Bool)

(assert (=> d!27011 (= c!17148 lt!50533)))

(assert (=> d!27011 (= lt!50533 (containsKey!153 (toList!774 lt!49913) lt!49905))))

(assert (=> d!27011 (= (contains!799 lt!49913 lt!49905) lt!50534)))

(declare-fun b!100093 () Bool)

(declare-fun lt!50535 () Unit!2998)

(assert (=> b!100093 (= e!65188 lt!50535)))

(assert (=> b!100093 (= lt!50535 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49913) lt!49905))))

(assert (=> b!100093 (isDefined!103 (getValueByKey!149 (toList!774 lt!49913) lt!49905))))

(declare-fun b!100094 () Bool)

(declare-fun Unit!3044 () Unit!2998)

(assert (=> b!100094 (= e!65188 Unit!3044)))

(declare-fun b!100095 () Bool)

(assert (=> b!100095 (= e!65187 (isDefined!103 (getValueByKey!149 (toList!774 lt!49913) lt!49905)))))

(assert (= (and d!27011 c!17148) b!100093))

(assert (= (and d!27011 (not c!17148)) b!100094))

(assert (= (and d!27011 (not res!50231)) b!100095))

(declare-fun m!110371 () Bool)

(assert (=> d!27011 m!110371))

(declare-fun m!110373 () Bool)

(assert (=> b!100093 m!110373))

(assert (=> b!100093 m!108921))

(assert (=> b!100093 m!108921))

(declare-fun m!110375 () Bool)

(assert (=> b!100093 m!110375))

(assert (=> b!100095 m!108921))

(assert (=> b!100095 m!108921))

(assert (=> b!100095 m!110375))

(assert (=> d!26607 d!27011))

(declare-fun d!27013 () Bool)

(declare-fun e!65189 () Bool)

(assert (=> d!27013 e!65189))

(declare-fun res!50232 () Bool)

(assert (=> d!27013 (=> res!50232 e!65189)))

(declare-fun lt!50538 () Bool)

(assert (=> d!27013 (= res!50232 (not lt!50538))))

(declare-fun lt!50537 () Bool)

(assert (=> d!27013 (= lt!50538 lt!50537)))

(declare-fun lt!50540 () Unit!2998)

(declare-fun e!65190 () Unit!2998)

(assert (=> d!27013 (= lt!50540 e!65190)))

(declare-fun c!17149 () Bool)

(assert (=> d!27013 (= c!17149 lt!50537)))

(assert (=> d!27013 (= lt!50537 (containsKey!153 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!27013 (= (contains!799 lt!49927 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50538)))

(declare-fun b!100096 () Bool)

(declare-fun lt!50539 () Unit!2998)

(assert (=> b!100096 (= e!65190 lt!50539)))

(assert (=> b!100096 (= lt!50539 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> b!100096 (isDefined!103 (getValueByKey!149 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100097 () Bool)

(declare-fun Unit!3045 () Unit!2998)

(assert (=> b!100097 (= e!65190 Unit!3045)))

(declare-fun b!100098 () Bool)

(assert (=> b!100098 (= e!65189 (isDefined!103 (getValueByKey!149 (toList!774 lt!49927) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27013 c!17149) b!100096))

(assert (= (and d!27013 (not c!17149)) b!100097))

(assert (= (and d!27013 (not res!50232)) b!100098))

(declare-fun m!110377 () Bool)

(assert (=> d!27013 m!110377))

(declare-fun m!110379 () Bool)

(assert (=> b!100096 m!110379))

(assert (=> b!100096 m!108877))

(assert (=> b!100096 m!108877))

(declare-fun m!110381 () Bool)

(assert (=> b!100096 m!110381))

(assert (=> b!100098 m!108877))

(assert (=> b!100098 m!108877))

(assert (=> b!100098 m!110381))

(assert (=> d!26595 d!27013))

(declare-fun b!100102 () Bool)

(declare-fun e!65192 () Option!155)

(assert (=> b!100102 (= e!65192 None!153)))

(declare-fun b!100101 () Bool)

(assert (=> b!100101 (= e!65192 (getValueByKey!149 (t!5556 lt!49928) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!27015 () Bool)

(declare-fun c!17150 () Bool)

(assert (=> d!27015 (= c!17150 (and ((_ is Cons!1587) lt!49928) (= (_1!1177 (h!2182 lt!49928)) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65191 () Option!155)

(assert (=> d!27015 (= (getValueByKey!149 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65191)))

(declare-fun b!100099 () Bool)

(assert (=> b!100099 (= e!65191 (Some!154 (_2!1177 (h!2182 lt!49928))))))

(declare-fun b!100100 () Bool)

(assert (=> b!100100 (= e!65191 e!65192)))

(declare-fun c!17151 () Bool)

(assert (=> b!100100 (= c!17151 (and ((_ is Cons!1587) lt!49928) (not (= (_1!1177 (h!2182 lt!49928)) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27015 c!17150) b!100099))

(assert (= (and d!27015 (not c!17150)) b!100100))

(assert (= (and b!100100 c!17151) b!100101))

(assert (= (and b!100100 (not c!17151)) b!100102))

(declare-fun m!110383 () Bool)

(assert (=> b!100101 m!110383))

(assert (=> d!26595 d!27015))

(declare-fun d!27017 () Bool)

(assert (=> d!27017 (= (getValueByKey!149 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50541 () Unit!2998)

(assert (=> d!27017 (= lt!50541 (choose!618 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!65193 () Bool)

(assert (=> d!27017 e!65193))

(declare-fun res!50233 () Bool)

(assert (=> d!27017 (=> (not res!50233) (not e!65193))))

(assert (=> d!27017 (= res!50233 (isStrictlySorted!300 lt!49928))))

(assert (=> d!27017 (= (lemmaContainsTupThenGetReturnValue!68 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50541)))

(declare-fun b!100103 () Bool)

(declare-fun res!50234 () Bool)

(assert (=> b!100103 (=> (not res!50234) (not e!65193))))

(assert (=> b!100103 (= res!50234 (containsKey!153 lt!49928 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100104 () Bool)

(assert (=> b!100104 (= e!65193 (contains!801 lt!49928 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27017 res!50233) b!100103))

(assert (= (and b!100103 res!50234) b!100104))

(assert (=> d!27017 m!108871))

(declare-fun m!110385 () Bool)

(assert (=> d!27017 m!110385))

(declare-fun m!110387 () Bool)

(assert (=> d!27017 m!110387))

(declare-fun m!110389 () Bool)

(assert (=> b!100103 m!110389))

(declare-fun m!110391 () Bool)

(assert (=> b!100104 m!110391))

(assert (=> d!26595 d!27017))

(declare-fun bm!10309 () Bool)

(declare-fun call!10313 () List!1591)

(declare-fun call!10312 () List!1591)

(assert (=> bm!10309 (= call!10313 call!10312)))

(declare-fun d!27019 () Bool)

(declare-fun e!65195 () Bool)

(assert (=> d!27019 e!65195))

(declare-fun res!50236 () Bool)

(assert (=> d!27019 (=> (not res!50236) (not e!65195))))

(declare-fun lt!50542 () List!1591)

(assert (=> d!27019 (= res!50236 (isStrictlySorted!300 lt!50542))))

(declare-fun e!65197 () List!1591)

(assert (=> d!27019 (= lt!50542 e!65197)))

(declare-fun c!17155 () Bool)

(assert (=> d!27019 (= c!17155 (and ((_ is Cons!1587) (toList!774 lt!49904)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49904))) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!27019 (isStrictlySorted!300 (toList!774 lt!49904))))

(assert (=> d!27019 (= (insertStrictlySorted!71 (toList!774 lt!49904) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50542)))

(declare-fun b!100105 () Bool)

(declare-fun e!65194 () List!1591)

(assert (=> b!100105 (= e!65194 (insertStrictlySorted!71 (t!5556 (toList!774 lt!49904)) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100106 () Bool)

(declare-fun e!65196 () List!1591)

(declare-fun call!10314 () List!1591)

(assert (=> b!100106 (= e!65196 call!10314)))

(declare-fun b!100107 () Bool)

(assert (=> b!100107 (= e!65196 call!10314)))

(declare-fun b!100108 () Bool)

(assert (=> b!100108 (= e!65197 call!10312)))

(declare-fun b!100109 () Bool)

(declare-fun res!50235 () Bool)

(assert (=> b!100109 (=> (not res!50235) (not e!65195))))

(assert (=> b!100109 (= res!50235 (containsKey!153 lt!50542 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100110 () Bool)

(declare-fun e!65198 () List!1591)

(assert (=> b!100110 (= e!65197 e!65198)))

(declare-fun c!17153 () Bool)

(assert (=> b!100110 (= c!17153 (and ((_ is Cons!1587) (toList!774 lt!49904)) (= (_1!1177 (h!2182 (toList!774 lt!49904))) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100111 () Bool)

(assert (=> b!100111 (= e!65195 (contains!801 lt!50542 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun bm!10310 () Bool)

(assert (=> bm!10310 (= call!10314 call!10313)))

(declare-fun bm!10311 () Bool)

(assert (=> bm!10311 (= call!10312 ($colon$colon!78 e!65194 (ite c!17155 (h!2182 (toList!774 lt!49904)) (tuple2!2333 (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun c!17152 () Bool)

(assert (=> bm!10311 (= c!17152 c!17155)))

(declare-fun b!100112 () Bool)

(assert (=> b!100112 (= e!65198 call!10313)))

(declare-fun c!17154 () Bool)

(declare-fun b!100113 () Bool)

(assert (=> b!100113 (= e!65194 (ite c!17153 (t!5556 (toList!774 lt!49904)) (ite c!17154 (Cons!1587 (h!2182 (toList!774 lt!49904)) (t!5556 (toList!774 lt!49904))) Nil!1588)))))

(declare-fun b!100114 () Bool)

(assert (=> b!100114 (= c!17154 (and ((_ is Cons!1587) (toList!774 lt!49904)) (bvsgt (_1!1177 (h!2182 (toList!774 lt!49904))) (_1!1177 (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!100114 (= e!65198 e!65196)))

(assert (= (and d!27019 c!17155) b!100108))

(assert (= (and d!27019 (not c!17155)) b!100110))

(assert (= (and b!100110 c!17153) b!100112))

(assert (= (and b!100110 (not c!17153)) b!100114))

(assert (= (and b!100114 c!17154) b!100107))

(assert (= (and b!100114 (not c!17154)) b!100106))

(assert (= (or b!100107 b!100106) bm!10310))

(assert (= (or b!100112 bm!10310) bm!10309))

(assert (= (or b!100108 bm!10309) bm!10311))

(assert (= (and bm!10311 c!17152) b!100105))

(assert (= (and bm!10311 (not c!17152)) b!100113))

(assert (= (and d!27019 res!50236) b!100109))

(assert (= (and b!100109 res!50235) b!100111))

(declare-fun m!110393 () Bool)

(assert (=> d!27019 m!110393))

(declare-fun m!110395 () Bool)

(assert (=> d!27019 m!110395))

(declare-fun m!110397 () Bool)

(assert (=> b!100109 m!110397))

(declare-fun m!110399 () Bool)

(assert (=> b!100111 m!110399))

(declare-fun m!110401 () Bool)

(assert (=> bm!10311 m!110401))

(declare-fun m!110403 () Bool)

(assert (=> b!100105 m!110403))

(assert (=> d!26595 d!27019))

(declare-fun d!27021 () Bool)

(assert (=> d!27021 (= (apply!93 lt!50192 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!50192) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4137 () Bool)

(assert (= bs!4137 d!27021))

(declare-fun m!110405 () Bool)

(assert (=> bs!4137 m!110405))

(assert (=> bs!4137 m!110405))

(declare-fun m!110407 () Bool)

(assert (=> bs!4137 m!110407))

(assert (=> b!99531 d!27021))

(declare-fun d!27023 () Bool)

(assert (=> d!27023 (= (apply!93 lt!49986 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!49986) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4138 () Bool)

(assert (= bs!4138 d!27023))

(declare-fun m!110409 () Bool)

(assert (=> bs!4138 m!110409))

(assert (=> bs!4138 m!110409))

(declare-fun m!110411 () Bool)

(assert (=> bs!4138 m!110411))

(assert (=> b!99327 d!27023))

(declare-fun d!27025 () Bool)

(assert (=> d!27025 (= (isEmpty!364 (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) (not ((_ is Some!154) (getValueByKey!149 (toList!774 lt!49704) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(assert (=> d!26703 d!27025))

(assert (=> b!99474 d!26779))

(assert (=> b!99474 d!26781))

(declare-fun d!27027 () Bool)

(assert (=> d!27027 (= (inRange!0 (ite c!16969 (index!3172 lt!50121) (index!3175 lt!50121)) (mask!6607 newMap!16)) (and (bvsge (ite c!16969 (index!3172 lt!50121) (index!3175 lt!50121)) #b00000000000000000000000000000000) (bvslt (ite c!16969 (index!3172 lt!50121) (index!3175 lt!50121)) (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10221 d!27027))

(declare-fun d!27029 () Bool)

(assert (=> d!27029 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(declare-fun lt!50543 () Unit!2998)

(assert (=> d!27029 (= lt!50543 (choose!617 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(declare-fun e!65199 () Bool)

(assert (=> d!27029 e!65199))

(declare-fun res!50237 () Bool)

(assert (=> d!27029 (=> (not res!50237) (not e!65199))))

(assert (=> d!27029 (= res!50237 (isStrictlySorted!300 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!27029 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915) lt!50543)))

(declare-fun b!100115 () Bool)

(assert (=> b!100115 (= e!65199 (containsKey!153 (toList!774 (+!129 lt!49908 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!49915))))

(assert (= (and d!27029 res!50237) b!100115))

(assert (=> d!27029 m!108969))

(assert (=> d!27029 m!108969))

(assert (=> d!27029 m!108971))

(declare-fun m!110413 () Bool)

(assert (=> d!27029 m!110413))

(declare-fun m!110415 () Bool)

(assert (=> d!27029 m!110415))

(assert (=> b!100115 m!108965))

(assert (=> b!99309 d!27029))

(assert (=> b!99309 d!26769))

(assert (=> b!99309 d!26771))

(assert (=> d!26645 d!26575))

(declare-fun b!100116 () Bool)

(declare-fun e!65202 () Bool)

(declare-fun call!10315 () Bool)

(assert (=> b!100116 (= e!65202 call!10315)))

(declare-fun b!100117 () Bool)

(declare-fun e!65200 () Bool)

(assert (=> b!100117 (= e!65200 e!65202)))

(declare-fun lt!50546 () (_ BitVec 64))

(assert (=> b!100117 (= lt!50546 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!50545 () Unit!2998)

(assert (=> b!100117 (= lt!50545 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) lt!50546 #b00000000000000000000000000000000))))

(assert (=> b!100117 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) lt!50546 #b00000000000000000000000000000000)))

(declare-fun lt!50544 () Unit!2998)

(assert (=> b!100117 (= lt!50544 lt!50545)))

(declare-fun res!50239 () Bool)

(assert (=> b!100117 (= res!50239 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000) (_keys!4194 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992)))) (Found!257 #b00000000000000000000000000000000)))))

(assert (=> b!100117 (=> (not res!50239) (not e!65202))))

(declare-fun b!100118 () Bool)

(declare-fun e!65201 () Bool)

(assert (=> b!100118 (= e!65201 e!65200)))

(declare-fun c!17156 () Bool)

(assert (=> b!100118 (= c!17156 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10312 () Bool)

(assert (=> bm!10312 (= call!10315 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4194 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992)))))))

(declare-fun b!100119 () Bool)

(assert (=> b!100119 (= e!65200 call!10315)))

(declare-fun d!27031 () Bool)

(declare-fun res!50238 () Bool)

(assert (=> d!27031 (=> res!50238 e!65201)))

(assert (=> d!27031 (= res!50238 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!27031 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (mask!6607 (v!2807 (underlying!334 thiss!992)))) e!65201)))

(assert (= (and d!27031 (not res!50238)) b!100118))

(assert (= (and b!100118 c!17156) b!100117))

(assert (= (and b!100118 (not c!17156)) b!100119))

(assert (= (and b!100117 res!50239) b!100116))

(assert (= (or b!100116 b!100119) bm!10312))

(assert (=> b!100117 m!109721))

(declare-fun m!110417 () Bool)

(assert (=> b!100117 m!110417))

(declare-fun m!110419 () Bool)

(assert (=> b!100117 m!110419))

(assert (=> b!100117 m!109721))

(declare-fun m!110421 () Bool)

(assert (=> b!100117 m!110421))

(assert (=> b!100118 m!109721))

(assert (=> b!100118 m!109721))

(assert (=> b!100118 m!109723))

(declare-fun m!110423 () Bool)

(assert (=> bm!10312 m!110423))

(assert (=> b!99571 d!27031))

(assert (=> b!99471 d!26925))

(assert (=> b!99471 d!26631))

(declare-fun b!100120 () Bool)

(declare-fun e!65205 () Bool)

(declare-fun lt!50548 () ListLongMap!1517)

(assert (=> b!100120 (= e!65205 (= (apply!93 lt!50548 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun bm!10313 () Bool)

(declare-fun call!10322 () Bool)

(assert (=> bm!10313 (= call!10322 (contains!799 lt!50548 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100121 () Bool)

(declare-fun res!50248 () Bool)

(declare-fun e!65211 () Bool)

(assert (=> b!100121 (=> (not res!50248) (not e!65211))))

(declare-fun e!65204 () Bool)

(assert (=> b!100121 (= res!50248 e!65204)))

(declare-fun c!17157 () Bool)

(assert (=> b!100121 (= c!17157 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100122 () Bool)

(declare-fun e!65209 () Bool)

(assert (=> b!100122 (= e!65209 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100123 () Bool)

(declare-fun e!65210 () Bool)

(declare-fun e!65215 () Bool)

(assert (=> b!100123 (= e!65210 e!65215)))

(declare-fun res!50246 () Bool)

(assert (=> b!100123 (=> (not res!50246) (not e!65215))))

(assert (=> b!100123 (= res!50246 (contains!799 lt!50548 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100123 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100124 () Bool)

(declare-fun e!65207 () ListLongMap!1517)

(declare-fun call!10316 () ListLongMap!1517)

(assert (=> b!100124 (= e!65207 call!10316)))

(declare-fun b!100125 () Bool)

(declare-fun e!65213 () Bool)

(assert (=> b!100125 (= e!65213 (not call!10322))))

(declare-fun b!100126 () Bool)

(declare-fun e!65208 () ListLongMap!1517)

(assert (=> b!100126 (= e!65208 e!65207)))

(declare-fun c!17159 () Bool)

(assert (=> b!100126 (= c!17159 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100127 () Bool)

(declare-fun c!17158 () Bool)

(assert (=> b!100127 (= c!17158 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65212 () ListLongMap!1517)

(assert (=> b!100127 (= e!65207 e!65212)))

(declare-fun b!100128 () Bool)

(assert (=> b!100128 (= e!65212 call!10316)))

(declare-fun d!27033 () Bool)

(assert (=> d!27033 e!65211))

(declare-fun res!50247 () Bool)

(assert (=> d!27033 (=> (not res!50247) (not e!65211))))

(assert (=> d!27033 (= res!50247 (or (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))))

(declare-fun lt!50550 () ListLongMap!1517)

(assert (=> d!27033 (= lt!50548 lt!50550)))

(declare-fun lt!50561 () Unit!2998)

(declare-fun e!65203 () Unit!2998)

(assert (=> d!27033 (= lt!50561 e!65203)))

(declare-fun c!17161 () Bool)

(declare-fun e!65206 () Bool)

(assert (=> d!27033 (= c!17161 e!65206)))

(declare-fun res!50240 () Bool)

(assert (=> d!27033 (=> (not res!50240) (not e!65206))))

(assert (=> d!27033 (= res!50240 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!27033 (= lt!50550 e!65208)))

(declare-fun c!17160 () Bool)

(assert (=> d!27033 (= c!17160 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27033 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!27033 (= (getCurrentListMap!455 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50548)))

(declare-fun b!100129 () Bool)

(declare-fun lt!50551 () Unit!2998)

(assert (=> b!100129 (= e!65203 lt!50551)))

(declare-fun lt!50558 () ListLongMap!1517)

(assert (=> b!100129 (= lt!50558 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50567 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50567 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50565 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50565 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50556 () Unit!2998)

(assert (=> b!100129 (= lt!50556 (addStillContains!69 lt!50558 lt!50567 (zeroValue!2382 newMap!16) lt!50565))))

(assert (=> b!100129 (contains!799 (+!129 lt!50558 (tuple2!2333 lt!50567 (zeroValue!2382 newMap!16))) lt!50565)))

(declare-fun lt!50560 () Unit!2998)

(assert (=> b!100129 (= lt!50560 lt!50556)))

(declare-fun lt!50553 () ListLongMap!1517)

(assert (=> b!100129 (= lt!50553 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50566 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50566 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50562 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50562 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50552 () Unit!2998)

(assert (=> b!100129 (= lt!50552 (addApplyDifferent!69 lt!50553 lt!50566 (minValue!2382 newMap!16) lt!50562))))

(assert (=> b!100129 (= (apply!93 (+!129 lt!50553 (tuple2!2333 lt!50566 (minValue!2382 newMap!16))) lt!50562) (apply!93 lt!50553 lt!50562))))

(declare-fun lt!50568 () Unit!2998)

(assert (=> b!100129 (= lt!50568 lt!50552)))

(declare-fun lt!50554 () ListLongMap!1517)

(assert (=> b!100129 (= lt!50554 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50564 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50564 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50557 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50557 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50559 () Unit!2998)

(assert (=> b!100129 (= lt!50559 (addApplyDifferent!69 lt!50554 lt!50564 (zeroValue!2382 newMap!16) lt!50557))))

(assert (=> b!100129 (= (apply!93 (+!129 lt!50554 (tuple2!2333 lt!50564 (zeroValue!2382 newMap!16))) lt!50557) (apply!93 lt!50554 lt!50557))))

(declare-fun lt!50547 () Unit!2998)

(assert (=> b!100129 (= lt!50547 lt!50559)))

(declare-fun lt!50563 () ListLongMap!1517)

(assert (=> b!100129 (= lt!50563 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50549 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50549 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50555 () (_ BitVec 64))

(assert (=> b!100129 (= lt!50555 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100129 (= lt!50551 (addApplyDifferent!69 lt!50563 lt!50549 (minValue!2382 newMap!16) lt!50555))))

(assert (=> b!100129 (= (apply!93 (+!129 lt!50563 (tuple2!2333 lt!50549 (minValue!2382 newMap!16))) lt!50555) (apply!93 lt!50563 lt!50555))))

(declare-fun b!100130 () Bool)

(declare-fun call!10319 () Bool)

(assert (=> b!100130 (= e!65204 (not call!10319))))

(declare-fun b!100131 () Bool)

(declare-fun e!65214 () Bool)

(assert (=> b!100131 (= e!65204 e!65214)))

(declare-fun res!50242 () Bool)

(assert (=> b!100131 (= res!50242 call!10319)))

(assert (=> b!100131 (=> (not res!50242) (not e!65214))))

(declare-fun b!100132 () Bool)

(assert (=> b!100132 (= e!65215 (= (apply!93 lt!50548 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100132 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))))))

(assert (=> b!100132 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun call!10318 () ListLongMap!1517)

(declare-fun call!10320 () ListLongMap!1517)

(declare-fun call!10321 () ListLongMap!1517)

(declare-fun call!10317 () ListLongMap!1517)

(declare-fun bm!10314 () Bool)

(assert (=> bm!10314 (= call!10318 (+!129 (ite c!17160 call!10320 (ite c!17159 call!10321 call!10317)) (ite (or c!17160 c!17159) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun b!100133 () Bool)

(assert (=> b!100133 (= e!65213 e!65205)))

(declare-fun res!50244 () Bool)

(assert (=> b!100133 (= res!50244 call!10322)))

(assert (=> b!100133 (=> (not res!50244) (not e!65205))))

(declare-fun bm!10315 () Bool)

(assert (=> bm!10315 (= call!10319 (contains!799 lt!50548 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10316 () Bool)

(assert (=> bm!10316 (= call!10316 call!10318)))

(declare-fun bm!10317 () Bool)

(assert (=> bm!10317 (= call!10320 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!100134 () Bool)

(declare-fun Unit!3046 () Unit!2998)

(assert (=> b!100134 (= e!65203 Unit!3046)))

(declare-fun b!100135 () Bool)

(assert (=> b!100135 (= e!65214 (= (apply!93 lt!50548 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun bm!10318 () Bool)

(assert (=> bm!10318 (= call!10317 call!10321)))

(declare-fun b!100136 () Bool)

(assert (=> b!100136 (= e!65208 (+!129 call!10318 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!100137 () Bool)

(assert (=> b!100137 (= e!65206 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100138 () Bool)

(declare-fun res!50245 () Bool)

(assert (=> b!100138 (=> (not res!50245) (not e!65211))))

(assert (=> b!100138 (= res!50245 e!65210)))

(declare-fun res!50241 () Bool)

(assert (=> b!100138 (=> res!50241 e!65210)))

(assert (=> b!100138 (= res!50241 (not e!65209))))

(declare-fun res!50243 () Bool)

(assert (=> b!100138 (=> (not res!50243) (not e!65209))))

(assert (=> b!100138 (= res!50243 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10319 () Bool)

(assert (=> bm!10319 (= call!10321 call!10320)))

(declare-fun b!100139 () Bool)

(assert (=> b!100139 (= e!65212 call!10317)))

(declare-fun b!100140 () Bool)

(assert (=> b!100140 (= e!65211 e!65213)))

(declare-fun c!17162 () Bool)

(assert (=> b!100140 (= c!17162 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!27033 c!17160) b!100136))

(assert (= (and d!27033 (not c!17160)) b!100126))

(assert (= (and b!100126 c!17159) b!100124))

(assert (= (and b!100126 (not c!17159)) b!100127))

(assert (= (and b!100127 c!17158) b!100128))

(assert (= (and b!100127 (not c!17158)) b!100139))

(assert (= (or b!100128 b!100139) bm!10318))

(assert (= (or b!100124 bm!10318) bm!10319))

(assert (= (or b!100124 b!100128) bm!10316))

(assert (= (or b!100136 bm!10319) bm!10317))

(assert (= (or b!100136 bm!10316) bm!10314))

(assert (= (and d!27033 res!50240) b!100137))

(assert (= (and d!27033 c!17161) b!100129))

(assert (= (and d!27033 (not c!17161)) b!100134))

(assert (= (and d!27033 res!50247) b!100138))

(assert (= (and b!100138 res!50243) b!100122))

(assert (= (and b!100138 (not res!50241)) b!100123))

(assert (= (and b!100123 res!50246) b!100132))

(assert (= (and b!100138 res!50245) b!100121))

(assert (= (and b!100121 c!17157) b!100131))

(assert (= (and b!100121 (not c!17157)) b!100130))

(assert (= (and b!100131 res!50242) b!100135))

(assert (= (or b!100131 b!100130) bm!10315))

(assert (= (and b!100121 res!50248) b!100140))

(assert (= (and b!100140 c!17162) b!100133))

(assert (= (and b!100140 (not c!17162)) b!100125))

(assert (= (and b!100133 res!50244) b!100120))

(assert (= (or b!100133 b!100125) bm!10313))

(declare-fun b_lambda!4459 () Bool)

(assert (=> (not b_lambda!4459) (not b!100132)))

(assert (=> b!100132 t!5567))

(declare-fun b_and!6153 () Bool)

(assert (= b_and!6149 (and (=> t!5567 result!3299) b_and!6153)))

(assert (=> b!100132 t!5569))

(declare-fun b_and!6155 () Bool)

(assert (= b_and!6151 (and (=> t!5569 result!3301) b_and!6155)))

(assert (=> b!100132 m!108993))

(declare-fun m!110425 () Bool)

(assert (=> b!100132 m!110425))

(assert (=> b!100132 m!109007))

(assert (=> b!100132 m!108993))

(declare-fun m!110427 () Bool)

(assert (=> b!100132 m!110427))

(assert (=> b!100132 m!110425))

(assert (=> b!100132 m!109007))

(declare-fun m!110429 () Bool)

(assert (=> b!100132 m!110429))

(assert (=> b!100122 m!108993))

(assert (=> b!100122 m!108993))

(assert (=> b!100122 m!109001))

(declare-fun m!110431 () Bool)

(assert (=> bm!10313 m!110431))

(assert (=> b!100123 m!108993))

(assert (=> b!100123 m!108993))

(declare-fun m!110433 () Bool)

(assert (=> b!100123 m!110433))

(declare-fun m!110435 () Bool)

(assert (=> b!100136 m!110435))

(declare-fun m!110437 () Bool)

(assert (=> bm!10315 m!110437))

(declare-fun m!110439 () Bool)

(assert (=> bm!10317 m!110439))

(assert (=> d!27033 m!108865))

(declare-fun m!110441 () Bool)

(assert (=> bm!10314 m!110441))

(assert (=> b!100137 m!108993))

(assert (=> b!100137 m!108993))

(assert (=> b!100137 m!109001))

(declare-fun m!110443 () Bool)

(assert (=> b!100135 m!110443))

(declare-fun m!110445 () Bool)

(assert (=> b!100129 m!110445))

(declare-fun m!110447 () Bool)

(assert (=> b!100129 m!110447))

(assert (=> b!100129 m!108993))

(declare-fun m!110449 () Bool)

(assert (=> b!100129 m!110449))

(declare-fun m!110451 () Bool)

(assert (=> b!100129 m!110451))

(declare-fun m!110453 () Bool)

(assert (=> b!100129 m!110453))

(declare-fun m!110455 () Bool)

(assert (=> b!100129 m!110455))

(declare-fun m!110457 () Bool)

(assert (=> b!100129 m!110457))

(declare-fun m!110459 () Bool)

(assert (=> b!100129 m!110459))

(declare-fun m!110461 () Bool)

(assert (=> b!100129 m!110461))

(assert (=> b!100129 m!110449))

(declare-fun m!110463 () Bool)

(assert (=> b!100129 m!110463))

(declare-fun m!110465 () Bool)

(assert (=> b!100129 m!110465))

(declare-fun m!110467 () Bool)

(assert (=> b!100129 m!110467))

(assert (=> b!100129 m!110455))

(assert (=> b!100129 m!110461))

(declare-fun m!110469 () Bool)

(assert (=> b!100129 m!110469))

(assert (=> b!100129 m!110439))

(declare-fun m!110471 () Bool)

(assert (=> b!100129 m!110471))

(assert (=> b!100129 m!110459))

(declare-fun m!110473 () Bool)

(assert (=> b!100129 m!110473))

(declare-fun m!110475 () Bool)

(assert (=> b!100120 m!110475))

(assert (=> b!99471 d!27033))

(declare-fun d!27035 () Bool)

(assert (not d!27035))

(assert (=> b!99578 d!27035))

(declare-fun d!27037 () Bool)

(declare-fun res!50250 () Bool)

(declare-fun e!65217 () Bool)

(assert (=> d!27037 (=> res!50250 e!65217)))

(assert (=> d!27037 (= res!50250 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!27037 (= (arrayNoDuplicates!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16977 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) Nil!1587) Nil!1587)) e!65217)))

(declare-fun call!10323 () Bool)

(declare-fun bm!10320 () Bool)

(declare-fun c!17163 () Bool)

(assert (=> bm!10320 (= call!10323 (arrayNoDuplicates!0 (_keys!4194 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17163 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16977 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) Nil!1587) Nil!1587)) (ite c!16977 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) Nil!1587) Nil!1587))))))

(declare-fun b!100141 () Bool)

(declare-fun e!65218 () Bool)

(assert (=> b!100141 (= e!65218 call!10323)))

(declare-fun b!100142 () Bool)

(declare-fun e!65219 () Bool)

(assert (=> b!100142 (= e!65219 (contains!800 (ite c!16977 (Cons!1586 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) Nil!1587) Nil!1587) (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100143 () Bool)

(declare-fun e!65216 () Bool)

(assert (=> b!100143 (= e!65217 e!65216)))

(declare-fun res!50251 () Bool)

(assert (=> b!100143 (=> (not res!50251) (not e!65216))))

(assert (=> b!100143 (= res!50251 (not e!65219))))

(declare-fun res!50249 () Bool)

(assert (=> b!100143 (=> (not res!50249) (not e!65219))))

(assert (=> b!100143 (= res!50249 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100144 () Bool)

(assert (=> b!100144 (= e!65218 call!10323)))

(declare-fun b!100145 () Bool)

(assert (=> b!100145 (= e!65216 e!65218)))

(assert (=> b!100145 (= c!17163 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!27037 (not res!50250)) b!100143))

(assert (= (and b!100143 res!50249) b!100142))

(assert (= (and b!100143 res!50251) b!100145))

(assert (= (and b!100145 c!17163) b!100144))

(assert (= (and b!100145 (not c!17163)) b!100141))

(assert (= (or b!100144 b!100141) bm!10320))

(assert (=> bm!10320 m!109423))

(declare-fun m!110477 () Bool)

(assert (=> bm!10320 m!110477))

(assert (=> b!100142 m!109423))

(assert (=> b!100142 m!109423))

(declare-fun m!110479 () Bool)

(assert (=> b!100142 m!110479))

(assert (=> b!100143 m!109423))

(assert (=> b!100143 m!109423))

(assert (=> b!100143 m!109431))

(assert (=> b!100145 m!109423))

(assert (=> b!100145 m!109423))

(assert (=> b!100145 m!109431))

(assert (=> bm!10222 d!27037))

(assert (=> bm!10213 d!26633))

(declare-fun d!27039 () Bool)

(declare-fun e!65220 () Bool)

(assert (=> d!27039 e!65220))

(declare-fun res!50252 () Bool)

(assert (=> d!27039 (=> res!50252 e!65220)))

(declare-fun lt!50570 () Bool)

(assert (=> d!27039 (= res!50252 (not lt!50570))))

(declare-fun lt!50569 () Bool)

(assert (=> d!27039 (= lt!50570 lt!50569)))

(declare-fun lt!50572 () Unit!2998)

(declare-fun e!65221 () Unit!2998)

(assert (=> d!27039 (= lt!50572 e!65221)))

(declare-fun c!17164 () Bool)

(assert (=> d!27039 (= c!17164 lt!50569)))

(assert (=> d!27039 (= lt!50569 (containsKey!153 (toList!774 lt!49945) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27039 (= (contains!799 lt!49945 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50570)))

(declare-fun b!100146 () Bool)

(declare-fun lt!50571 () Unit!2998)

(assert (=> b!100146 (= e!65221 lt!50571)))

(assert (=> b!100146 (= lt!50571 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49945) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100146 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100147 () Bool)

(declare-fun Unit!3047 () Unit!2998)

(assert (=> b!100147 (= e!65221 Unit!3047)))

(declare-fun b!100148 () Bool)

(assert (=> b!100148 (= e!65220 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27039 c!17164) b!100146))

(assert (= (and d!27039 (not c!17164)) b!100147))

(assert (= (and d!27039 (not res!50252)) b!100148))

(declare-fun m!110481 () Bool)

(assert (=> d!27039 m!110481))

(declare-fun m!110483 () Bool)

(assert (=> b!100146 m!110483))

(declare-fun m!110485 () Bool)

(assert (=> b!100146 m!110485))

(assert (=> b!100146 m!110485))

(declare-fun m!110487 () Bool)

(assert (=> b!100146 m!110487))

(assert (=> b!100148 m!110485))

(assert (=> b!100148 m!110485))

(assert (=> b!100148 m!110487))

(assert (=> b!99292 d!27039))

(declare-fun d!27041 () Bool)

(declare-fun res!50253 () Bool)

(declare-fun e!65222 () Bool)

(assert (=> d!27041 (=> res!50253 e!65222)))

(assert (=> d!27041 (= res!50253 (and ((_ is Cons!1587) (t!5556 (toList!774 lt!49704))) (= (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (=> d!27041 (= (containsKey!153 (t!5556 (toList!774 lt!49704)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!65222)))

(declare-fun b!100149 () Bool)

(declare-fun e!65223 () Bool)

(assert (=> b!100149 (= e!65222 e!65223)))

(declare-fun res!50254 () Bool)

(assert (=> b!100149 (=> (not res!50254) (not e!65223))))

(assert (=> b!100149 (= res!50254 (and (or (not ((_ is Cons!1587) (t!5556 (toList!774 lt!49704)))) (bvsle (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) ((_ is Cons!1587) (t!5556 (toList!774 lt!49704))) (bvslt (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun b!100150 () Bool)

(assert (=> b!100150 (= e!65223 (containsKey!153 (t!5556 (t!5556 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!27041 (not res!50253)) b!100149))

(assert (= (and b!100149 res!50254) b!100150))

(assert (=> b!100150 m!108591))

(declare-fun m!110489 () Bool)

(assert (=> b!100150 m!110489))

(assert (=> b!99557 d!27041))

(declare-fun b!100169 () Bool)

(declare-fun lt!50578 () SeekEntryResult!257)

(assert (=> b!100169 (and (bvsge (index!3174 lt!50578) #b00000000000000000000000000000000) (bvslt (index!3174 lt!50578) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!50262 () Bool)

(assert (=> b!100169 (= res!50262 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50578)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun e!65234 () Bool)

(assert (=> b!100169 (=> res!50262 e!65234)))

(declare-fun e!65238 () Bool)

(assert (=> b!100169 (= e!65238 e!65234)))

(declare-fun d!27043 () Bool)

(declare-fun e!65235 () Bool)

(assert (=> d!27043 e!65235))

(declare-fun c!17172 () Bool)

(assert (=> d!27043 (= c!17172 (and ((_ is Intermediate!257) lt!50578) (undefined!1069 lt!50578)))))

(declare-fun e!65237 () SeekEntryResult!257)

(assert (=> d!27043 (= lt!50578 e!65237)))

(declare-fun c!17173 () Bool)

(assert (=> d!27043 (= c!17173 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!50577 () (_ BitVec 64))

(assert (=> d!27043 (= lt!50577 (select (arr!2008 (_keys!4194 newMap!16)) (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16))))))

(assert (=> d!27043 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!27043 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)) lt!50578)))

(declare-fun b!100170 () Bool)

(declare-fun e!65236 () SeekEntryResult!257)

(assert (=> b!100170 (= e!65237 e!65236)))

(declare-fun c!17171 () Bool)

(assert (=> b!100170 (= c!17171 (or (= lt!50577 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) (= (bvadd lt!50577 lt!50577) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100171 () Bool)

(assert (=> b!100171 (and (bvsge (index!3174 lt!50578) #b00000000000000000000000000000000) (bvslt (index!3174 lt!50578) (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!50263 () Bool)

(assert (=> b!100171 (= res!50263 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50578)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100171 (=> res!50263 e!65234)))

(declare-fun b!100172 () Bool)

(assert (=> b!100172 (= e!65235 e!65238)))

(declare-fun res!50261 () Bool)

(assert (=> b!100172 (= res!50261 (and ((_ is Intermediate!257) lt!50578) (not (undefined!1069 lt!50578)) (bvslt (x!13106 lt!50578) #b01111111111111111111111111111110) (bvsge (x!13106 lt!50578) #b00000000000000000000000000000000) (bvsge (x!13106 lt!50578) #b00000000000000000000000000000000)))))

(assert (=> b!100172 (=> (not res!50261) (not e!65238))))

(declare-fun b!100173 () Bool)

(assert (=> b!100173 (= e!65236 (Intermediate!257 false (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!100174 () Bool)

(assert (=> b!100174 (= e!65236 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) #b00000000000000000000000000000000 (mask!6607 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(declare-fun b!100175 () Bool)

(assert (=> b!100175 (and (bvsge (index!3174 lt!50578) #b00000000000000000000000000000000) (bvslt (index!3174 lt!50578) (size!2260 (_keys!4194 newMap!16))))))

(assert (=> b!100175 (= e!65234 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3174 lt!50578)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100176 () Bool)

(assert (=> b!100176 (= e!65237 (Intermediate!257 true (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!100177 () Bool)

(assert (=> b!100177 (= e!65235 (bvsge (x!13106 lt!50578) #b01111111111111111111111111111110))))

(assert (= (and d!27043 c!17173) b!100176))

(assert (= (and d!27043 (not c!17173)) b!100170))

(assert (= (and b!100170 c!17171) b!100173))

(assert (= (and b!100170 (not c!17171)) b!100174))

(assert (= (and d!27043 c!17172) b!100177))

(assert (= (and d!27043 (not c!17172)) b!100172))

(assert (= (and b!100172 res!50261) b!100169))

(assert (= (and b!100169 (not res!50262)) b!100171))

(assert (= (and b!100171 (not res!50263)) b!100175))

(declare-fun m!110491 () Bool)

(assert (=> b!100169 m!110491))

(assert (=> b!100171 m!110491))

(assert (=> b!100174 m!109061))

(declare-fun m!110493 () Bool)

(assert (=> b!100174 m!110493))

(assert (=> b!100174 m!110493))

(assert (=> b!100174 m!108591))

(declare-fun m!110495 () Bool)

(assert (=> b!100174 m!110495))

(assert (=> d!27043 m!109061))

(declare-fun m!110497 () Bool)

(assert (=> d!27043 m!110497))

(assert (=> d!27043 m!108865))

(assert (=> b!100175 m!110491))

(assert (=> d!26633 d!27043))

(declare-fun d!27045 () Bool)

(declare-fun lt!50584 () (_ BitVec 32))

(declare-fun lt!50583 () (_ BitVec 32))

(assert (=> d!27045 (= lt!50584 (bvmul (bvxor lt!50583 (bvlshr lt!50583 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!27045 (= lt!50583 ((_ extract 31 0) (bvand (bvxor (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvlshr (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!27045 (and (bvsge (mask!6607 newMap!16) #b00000000000000000000000000000000) (let ((res!50264 (let ((h!2184 ((_ extract 31 0) (bvand (bvxor (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvlshr (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13210 (bvmul (bvxor h!2184 (bvlshr h!2184 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13210 (bvlshr x!13210 #b00000000000000000000000000001101)) (mask!6607 newMap!16)))))) (and (bvslt res!50264 (bvadd (mask!6607 newMap!16) #b00000000000000000000000000000001)) (bvsge res!50264 #b00000000000000000000000000000000))))))

(assert (=> d!27045 (= (toIndex!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (mask!6607 newMap!16)) (bvand (bvxor lt!50584 (bvlshr lt!50584 #b00000000000000000000000000001101)) (mask!6607 newMap!16)))))

(assert (=> d!26633 d!27045))

(assert (=> d!26633 d!26717))

(declare-fun d!27047 () Bool)

(declare-fun lt!50585 () (_ BitVec 32))

(assert (=> d!27047 (and (bvsge lt!50585 #b00000000000000000000000000000000) (bvsle lt!50585 (bvsub (size!2260 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun e!65239 () (_ BitVec 32))

(assert (=> d!27047 (= lt!50585 e!65239)))

(declare-fun c!17174 () Bool)

(assert (=> d!27047 (= c!17174 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (=> d!27047 (and (bvsle #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2260 (_keys!4194 (_2!1178 lt!49828))) (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (=> d!27047 (= (arrayCountValidKeys!0 (_keys!4194 (_2!1178 lt!49828)) #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))) lt!50585)))

(declare-fun b!100178 () Bool)

(declare-fun e!65240 () (_ BitVec 32))

(declare-fun call!10324 () (_ BitVec 32))

(assert (=> b!100178 (= e!65240 call!10324)))

(declare-fun b!100179 () Bool)

(assert (=> b!100179 (= e!65239 #b00000000000000000000000000000000)))

(declare-fun b!100180 () Bool)

(assert (=> b!100180 (= e!65240 (bvadd #b00000000000000000000000000000001 call!10324))))

(declare-fun b!100181 () Bool)

(assert (=> b!100181 (= e!65239 e!65240)))

(declare-fun c!17175 () Bool)

(assert (=> b!100181 (= c!17175 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun bm!10321 () Bool)

(assert (=> bm!10321 (= call!10324 (arrayCountValidKeys!0 (_keys!4194 (_2!1178 lt!49828)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (= (and d!27047 c!17174) b!100179))

(assert (= (and d!27047 (not c!17174)) b!100181))

(assert (= (and b!100181 c!17175) b!100180))

(assert (= (and b!100181 (not c!17175)) b!100178))

(assert (= (or b!100180 b!100178) bm!10321))

(assert (=> b!100181 m!109597))

(assert (=> b!100181 m!109597))

(assert (=> b!100181 m!109603))

(declare-fun m!110499 () Bool)

(assert (=> bm!10321 m!110499))

(assert (=> b!99312 d!27047))

(assert (=> b!99285 d!26697))

(declare-fun d!27049 () Bool)

(assert (=> d!27049 (= (size!2266 newMap!16) (bvadd (_size!477 newMap!16) (bvsdiv (bvadd (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!99251 d!27049))

(assert (=> b!99410 d!26947))

(declare-fun d!27051 () Bool)

(declare-fun e!65241 () Bool)

(assert (=> d!27051 e!65241))

(declare-fun res!50266 () Bool)

(assert (=> d!27051 (=> (not res!50266) (not e!65241))))

(declare-fun lt!50586 () ListLongMap!1517)

(assert (=> d!27051 (= res!50266 (contains!799 lt!50586 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50587 () List!1591)

(assert (=> d!27051 (= lt!50586 (ListLongMap!1518 lt!50587))))

(declare-fun lt!50588 () Unit!2998)

(declare-fun lt!50589 () Unit!2998)

(assert (=> d!27051 (= lt!50588 lt!50589)))

(assert (=> d!27051 (= (getValueByKey!149 lt!50587 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27051 (= lt!50589 (lemmaContainsTupThenGetReturnValue!68 lt!50587 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27051 (= lt!50587 (insertStrictlySorted!71 (toList!774 (map!1247 newMap!16)) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27051 (= (+!129 (map!1247 newMap!16) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50586)))

(declare-fun b!100182 () Bool)

(declare-fun res!50265 () Bool)

(assert (=> b!100182 (=> (not res!50265) (not e!65241))))

(assert (=> b!100182 (= res!50265 (= (getValueByKey!149 (toList!774 lt!50586) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100183 () Bool)

(assert (=> b!100183 (= e!65241 (contains!801 (toList!774 lt!50586) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27051 res!50266) b!100182))

(assert (= (and b!100182 res!50265) b!100183))

(declare-fun m!110501 () Bool)

(assert (=> d!27051 m!110501))

(declare-fun m!110503 () Bool)

(assert (=> d!27051 m!110503))

(declare-fun m!110505 () Bool)

(assert (=> d!27051 m!110505))

(declare-fun m!110507 () Bool)

(assert (=> d!27051 m!110507))

(declare-fun m!110509 () Bool)

(assert (=> b!100182 m!110509))

(declare-fun m!110511 () Bool)

(assert (=> b!100183 m!110511))

(assert (=> b!99410 d!27051))

(assert (=> b!99410 d!26585))

(declare-fun d!27053 () Bool)

(declare-fun e!65242 () Bool)

(assert (=> d!27053 e!65242))

(declare-fun res!50267 () Bool)

(assert (=> d!27053 (=> res!50267 e!65242)))

(declare-fun lt!50591 () Bool)

(assert (=> d!27053 (= res!50267 (not lt!50591))))

(declare-fun lt!50590 () Bool)

(assert (=> d!27053 (= lt!50591 lt!50590)))

(declare-fun lt!50593 () Unit!2998)

(declare-fun e!65243 () Unit!2998)

(assert (=> d!27053 (= lt!50593 e!65243)))

(declare-fun c!17176 () Bool)

(assert (=> d!27053 (= c!17176 lt!50590)))

(assert (=> d!27053 (= lt!50590 (containsKey!153 (toList!774 lt!49945) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!27053 (= (contains!799 lt!49945 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50591)))

(declare-fun b!100184 () Bool)

(declare-fun lt!50592 () Unit!2998)

(assert (=> b!100184 (= e!65243 lt!50592)))

(assert (=> b!100184 (= lt!50592 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49945) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!100184 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!100185 () Bool)

(declare-fun Unit!3048 () Unit!2998)

(assert (=> b!100185 (= e!65243 Unit!3048)))

(declare-fun b!100186 () Bool)

(assert (=> b!100186 (= e!65242 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!27053 c!17176) b!100184))

(assert (= (and d!27053 (not c!17176)) b!100185))

(assert (= (and d!27053 (not res!50267)) b!100186))

(assert (=> d!27053 m!108725))

(declare-fun m!110513 () Bool)

(assert (=> d!27053 m!110513))

(assert (=> b!100184 m!108725))

(declare-fun m!110515 () Bool)

(assert (=> b!100184 m!110515))

(assert (=> b!100184 m!108725))

(assert (=> b!100184 m!109447))

(assert (=> b!100184 m!109447))

(declare-fun m!110517 () Bool)

(assert (=> b!100184 m!110517))

(assert (=> b!100186 m!108725))

(assert (=> b!100186 m!109447))

(assert (=> b!100186 m!109447))

(assert (=> b!100186 m!110517))

(assert (=> b!99289 d!27053))

(declare-fun b!100190 () Bool)

(declare-fun e!65245 () Option!155)

(assert (=> b!100190 (= e!65245 None!153)))

(declare-fun b!100189 () Bool)

(assert (=> b!100189 (= e!65245 (getValueByKey!149 (t!5556 (toList!774 lt!50159)) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!27055 () Bool)

(declare-fun c!17177 () Bool)

(assert (=> d!27055 (= c!17177 (and ((_ is Cons!1587) (toList!774 lt!50159)) (= (_1!1177 (h!2182 (toList!774 lt!50159))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65244 () Option!155)

(assert (=> d!27055 (= (getValueByKey!149 (toList!774 lt!50159) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65244)))

(declare-fun b!100187 () Bool)

(assert (=> b!100187 (= e!65244 (Some!154 (_2!1177 (h!2182 (toList!774 lt!50159)))))))

(declare-fun b!100188 () Bool)

(assert (=> b!100188 (= e!65244 e!65245)))

(declare-fun c!17178 () Bool)

(assert (=> b!100188 (= c!17178 (and ((_ is Cons!1587) (toList!774 lt!50159)) (not (= (_1!1177 (h!2182 (toList!774 lt!50159))) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27055 c!17177) b!100187))

(assert (= (and d!27055 (not c!17177)) b!100188))

(assert (= (and b!100188 c!17178) b!100189))

(assert (= (and b!100188 (not c!17178)) b!100190))

(declare-fun m!110519 () Bool)

(assert (=> b!100189 m!110519))

(assert (=> b!99484 d!27055))

(declare-fun d!27057 () Bool)

(assert (=> d!27057 (= (content!103 Nil!1587) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26711 d!27057))

(declare-fun d!27059 () Bool)

(declare-fun e!65246 () Bool)

(assert (=> d!27059 e!65246))

(declare-fun res!50268 () Bool)

(assert (=> d!27059 (=> res!50268 e!65246)))

(declare-fun lt!50595 () Bool)

(assert (=> d!27059 (= res!50268 (not lt!50595))))

(declare-fun lt!50594 () Bool)

(assert (=> d!27059 (= lt!50595 lt!50594)))

(declare-fun lt!50597 () Unit!2998)

(declare-fun e!65247 () Unit!2998)

(assert (=> d!27059 (= lt!50597 e!65247)))

(declare-fun c!17179 () Bool)

(assert (=> d!27059 (= c!17179 lt!50594)))

(assert (=> d!27059 (= lt!50594 (containsKey!153 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!27059 (= (contains!799 lt!49959 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50595)))

(declare-fun b!100191 () Bool)

(declare-fun lt!50596 () Unit!2998)

(assert (=> b!100191 (= e!65247 lt!50596)))

(assert (=> b!100191 (= lt!50596 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> b!100191 (isDefined!103 (getValueByKey!149 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100192 () Bool)

(declare-fun Unit!3049 () Unit!2998)

(assert (=> b!100192 (= e!65247 Unit!3049)))

(declare-fun b!100193 () Bool)

(assert (=> b!100193 (= e!65246 (isDefined!103 (getValueByKey!149 (toList!774 lt!49959) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27059 c!17179) b!100191))

(assert (= (and d!27059 (not c!17179)) b!100192))

(assert (= (and d!27059 (not res!50268)) b!100193))

(declare-fun m!110521 () Bool)

(assert (=> d!27059 m!110521))

(declare-fun m!110523 () Bool)

(assert (=> b!100191 m!110523))

(assert (=> b!100191 m!108933))

(assert (=> b!100191 m!108933))

(declare-fun m!110525 () Bool)

(assert (=> b!100191 m!110525))

(assert (=> b!100193 m!108933))

(assert (=> b!100193 m!108933))

(assert (=> b!100193 m!110525))

(assert (=> d!26611 d!27059))

(declare-fun b!100197 () Bool)

(declare-fun e!65249 () Option!155)

(assert (=> b!100197 (= e!65249 None!153)))

(declare-fun b!100196 () Bool)

(assert (=> b!100196 (= e!65249 (getValueByKey!149 (t!5556 lt!49960) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun c!17180 () Bool)

(declare-fun d!27061 () Bool)

(assert (=> d!27061 (= c!17180 (and ((_ is Cons!1587) lt!49960) (= (_1!1177 (h!2182 lt!49960)) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65248 () Option!155)

(assert (=> d!27061 (= (getValueByKey!149 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65248)))

(declare-fun b!100194 () Bool)

(assert (=> b!100194 (= e!65248 (Some!154 (_2!1177 (h!2182 lt!49960))))))

(declare-fun b!100195 () Bool)

(assert (=> b!100195 (= e!65248 e!65249)))

(declare-fun c!17181 () Bool)

(assert (=> b!100195 (= c!17181 (and ((_ is Cons!1587) lt!49960) (not (= (_1!1177 (h!2182 lt!49960)) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27061 c!17180) b!100194))

(assert (= (and d!27061 (not c!17180)) b!100195))

(assert (= (and b!100195 c!17181) b!100196))

(assert (= (and b!100195 (not c!17181)) b!100197))

(declare-fun m!110527 () Bool)

(assert (=> b!100196 m!110527))

(assert (=> d!26611 d!27061))

(declare-fun d!27063 () Bool)

(assert (=> d!27063 (= (getValueByKey!149 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50598 () Unit!2998)

(assert (=> d!27063 (= lt!50598 (choose!618 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!65250 () Bool)

(assert (=> d!27063 e!65250))

(declare-fun res!50269 () Bool)

(assert (=> d!27063 (=> (not res!50269) (not e!65250))))

(assert (=> d!27063 (= res!50269 (isStrictlySorted!300 lt!49960))))

(assert (=> d!27063 (= (lemmaContainsTupThenGetReturnValue!68 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50598)))

(declare-fun b!100198 () Bool)

(declare-fun res!50270 () Bool)

(assert (=> b!100198 (=> (not res!50270) (not e!65250))))

(assert (=> b!100198 (= res!50270 (containsKey!153 lt!49960 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100199 () Bool)

(assert (=> b!100199 (= e!65250 (contains!801 lt!49960 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27063 res!50269) b!100198))

(assert (= (and b!100198 res!50270) b!100199))

(assert (=> d!27063 m!108927))

(declare-fun m!110529 () Bool)

(assert (=> d!27063 m!110529))

(declare-fun m!110531 () Bool)

(assert (=> d!27063 m!110531))

(declare-fun m!110533 () Bool)

(assert (=> b!100198 m!110533))

(declare-fun m!110535 () Bool)

(assert (=> b!100199 m!110535))

(assert (=> d!26611 d!27063))

(declare-fun bm!10322 () Bool)

(declare-fun call!10326 () List!1591)

(declare-fun call!10325 () List!1591)

(assert (=> bm!10322 (= call!10326 call!10325)))

(declare-fun d!27065 () Bool)

(declare-fun e!65252 () Bool)

(assert (=> d!27065 e!65252))

(declare-fun res!50272 () Bool)

(assert (=> d!27065 (=> (not res!50272) (not e!65252))))

(declare-fun lt!50599 () List!1591)

(assert (=> d!27065 (= res!50272 (isStrictlySorted!300 lt!50599))))

(declare-fun e!65254 () List!1591)

(assert (=> d!27065 (= lt!50599 e!65254)))

(declare-fun c!17185 () Bool)

(assert (=> d!27065 (= c!17185 (and ((_ is Cons!1587) (toList!774 lt!49908)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49908))) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!27065 (isStrictlySorted!300 (toList!774 lt!49908))))

(assert (=> d!27065 (= (insertStrictlySorted!71 (toList!774 lt!49908) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50599)))

(declare-fun b!100200 () Bool)

(declare-fun e!65251 () List!1591)

(assert (=> b!100200 (= e!65251 (insertStrictlySorted!71 (t!5556 (toList!774 lt!49908)) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100201 () Bool)

(declare-fun e!65253 () List!1591)

(declare-fun call!10327 () List!1591)

(assert (=> b!100201 (= e!65253 call!10327)))

(declare-fun b!100202 () Bool)

(assert (=> b!100202 (= e!65253 call!10327)))

(declare-fun b!100203 () Bool)

(assert (=> b!100203 (= e!65254 call!10325)))

(declare-fun b!100204 () Bool)

(declare-fun res!50271 () Bool)

(assert (=> b!100204 (=> (not res!50271) (not e!65252))))

(assert (=> b!100204 (= res!50271 (containsKey!153 lt!50599 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100205 () Bool)

(declare-fun e!65255 () List!1591)

(assert (=> b!100205 (= e!65254 e!65255)))

(declare-fun c!17183 () Bool)

(assert (=> b!100205 (= c!17183 (and ((_ is Cons!1587) (toList!774 lt!49908)) (= (_1!1177 (h!2182 (toList!774 lt!49908))) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100206 () Bool)

(assert (=> b!100206 (= e!65252 (contains!801 lt!50599 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun bm!10323 () Bool)

(assert (=> bm!10323 (= call!10327 call!10326)))

(declare-fun bm!10324 () Bool)

(assert (=> bm!10324 (= call!10325 ($colon$colon!78 e!65251 (ite c!17185 (h!2182 (toList!774 lt!49908)) (tuple2!2333 (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun c!17182 () Bool)

(assert (=> bm!10324 (= c!17182 c!17185)))

(declare-fun b!100207 () Bool)

(assert (=> b!100207 (= e!65255 call!10326)))

(declare-fun c!17184 () Bool)

(declare-fun b!100208 () Bool)

(assert (=> b!100208 (= e!65251 (ite c!17183 (t!5556 (toList!774 lt!49908)) (ite c!17184 (Cons!1587 (h!2182 (toList!774 lt!49908)) (t!5556 (toList!774 lt!49908))) Nil!1588)))))

(declare-fun b!100209 () Bool)

(assert (=> b!100209 (= c!17184 (and ((_ is Cons!1587) (toList!774 lt!49908)) (bvsgt (_1!1177 (h!2182 (toList!774 lt!49908))) (_1!1177 (tuple2!2333 lt!49917 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!100209 (= e!65255 e!65253)))

(assert (= (and d!27065 c!17185) b!100203))

(assert (= (and d!27065 (not c!17185)) b!100205))

(assert (= (and b!100205 c!17183) b!100207))

(assert (= (and b!100205 (not c!17183)) b!100209))

(assert (= (and b!100209 c!17184) b!100202))

(assert (= (and b!100209 (not c!17184)) b!100201))

(assert (= (or b!100202 b!100201) bm!10323))

(assert (= (or b!100207 bm!10323) bm!10322))

(assert (= (or b!100203 bm!10322) bm!10324))

(assert (= (and bm!10324 c!17182) b!100200))

(assert (= (and bm!10324 (not c!17182)) b!100208))

(assert (= (and d!27065 res!50272) b!100204))

(assert (= (and b!100204 res!50271) b!100206))

(declare-fun m!110537 () Bool)

(assert (=> d!27065 m!110537))

(declare-fun m!110539 () Bool)

(assert (=> d!27065 m!110539))

(declare-fun m!110541 () Bool)

(assert (=> b!100204 m!110541))

(declare-fun m!110543 () Bool)

(assert (=> b!100206 m!110543))

(declare-fun m!110545 () Bool)

(assert (=> bm!10324 m!110545))

(declare-fun m!110547 () Bool)

(assert (=> b!100200 m!110547))

(assert (=> d!26611 d!27065))

(declare-fun lt!50600 () Bool)

(declare-fun d!27067 () Bool)

(assert (=> d!27067 (= lt!50600 (select (content!103 (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!65256 () Bool)

(assert (=> d!27067 (= lt!50600 e!65256)))

(declare-fun res!50274 () Bool)

(assert (=> d!27067 (=> (not res!50274) (not e!65256))))

(assert (=> d!27067 (= res!50274 ((_ is Cons!1586) (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)))))

(assert (=> d!27067 (= (contains!800 (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!50600)))

(declare-fun b!100210 () Bool)

(declare-fun e!65257 () Bool)

(assert (=> b!100210 (= e!65256 e!65257)))

(declare-fun res!50273 () Bool)

(assert (=> b!100210 (=> res!50273 e!65257)))

(assert (=> b!100210 (= res!50273 (= (h!2181 (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!100211 () Bool)

(assert (=> b!100211 (= e!65257 (contains!800 (t!5555 (ite c!16856 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) Nil!1587) Nil!1587)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!27067 res!50274) b!100210))

(assert (= (and b!100210 (not res!50273)) b!100211))

(declare-fun m!110549 () Bool)

(assert (=> d!27067 m!110549))

(assert (=> d!27067 m!109265))

(declare-fun m!110551 () Bool)

(assert (=> d!27067 m!110551))

(assert (=> b!100211 m!109265))

(declare-fun m!110553 () Bool)

(assert (=> b!100211 m!110553))

(assert (=> b!99494 d!27067))

(declare-fun d!27069 () Bool)

(assert (=> d!27069 (= (get!1294 (getValueByKey!149 (toList!774 lt!49913) lt!49905)) (v!2813 (getValueByKey!149 (toList!774 lt!49913) lt!49905)))))

(assert (=> d!26609 d!27069))

(declare-fun b!100215 () Bool)

(declare-fun e!65259 () Option!155)

(assert (=> b!100215 (= e!65259 None!153)))

(declare-fun b!100214 () Bool)

(assert (=> b!100214 (= e!65259 (getValueByKey!149 (t!5556 (toList!774 lt!49913)) lt!49905))))

(declare-fun d!27071 () Bool)

(declare-fun c!17186 () Bool)

(assert (=> d!27071 (= c!17186 (and ((_ is Cons!1587) (toList!774 lt!49913)) (= (_1!1177 (h!2182 (toList!774 lt!49913))) lt!49905)))))

(declare-fun e!65258 () Option!155)

(assert (=> d!27071 (= (getValueByKey!149 (toList!774 lt!49913) lt!49905) e!65258)))

(declare-fun b!100212 () Bool)

(assert (=> b!100212 (= e!65258 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49913)))))))

(declare-fun b!100213 () Bool)

(assert (=> b!100213 (= e!65258 e!65259)))

(declare-fun c!17187 () Bool)

(assert (=> b!100213 (= c!17187 (and ((_ is Cons!1587) (toList!774 lt!49913)) (not (= (_1!1177 (h!2182 (toList!774 lt!49913))) lt!49905))))))

(assert (= (and d!27071 c!17186) b!100212))

(assert (= (and d!27071 (not c!17186)) b!100213))

(assert (= (and b!100213 c!17187) b!100214))

(assert (= (and b!100213 (not c!17187)) b!100215))

(declare-fun m!110555 () Bool)

(assert (=> b!100214 m!110555))

(assert (=> d!26609 d!27071))

(declare-fun d!27073 () Bool)

(assert (=> d!27073 (= (apply!93 lt!50198 lt!50201) (get!1294 (getValueByKey!149 (toList!774 lt!50198) lt!50201)))))

(declare-fun bs!4139 () Bool)

(assert (= bs!4139 d!27073))

(declare-fun m!110557 () Bool)

(assert (=> bs!4139 m!110557))

(assert (=> bs!4139 m!110557))

(declare-fun m!110559 () Bool)

(assert (=> bs!4139 m!110559))

(assert (=> b!99540 d!27073))

(declare-fun d!27075 () Bool)

(assert (=> d!27075 (= (apply!93 lt!50197 lt!50206) (get!1294 (getValueByKey!149 (toList!774 lt!50197) lt!50206)))))

(declare-fun bs!4140 () Bool)

(assert (= bs!4140 d!27075))

(declare-fun m!110561 () Bool)

(assert (=> bs!4140 m!110561))

(assert (=> bs!4140 m!110561))

(declare-fun m!110563 () Bool)

(assert (=> bs!4140 m!110563))

(assert (=> b!99540 d!27075))

(declare-fun d!27077 () Bool)

(declare-fun e!65260 () Bool)

(assert (=> d!27077 e!65260))

(declare-fun res!50275 () Bool)

(assert (=> d!27077 (=> res!50275 e!65260)))

(declare-fun lt!50602 () Bool)

(assert (=> d!27077 (= res!50275 (not lt!50602))))

(declare-fun lt!50601 () Bool)

(assert (=> d!27077 (= lt!50602 lt!50601)))

(declare-fun lt!50604 () Unit!2998)

(declare-fun e!65261 () Unit!2998)

(assert (=> d!27077 (= lt!50604 e!65261)))

(declare-fun c!17188 () Bool)

(assert (=> d!27077 (= c!17188 lt!50601)))

(assert (=> d!27077 (= lt!50601 (containsKey!153 (toList!774 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50209))))

(assert (=> d!27077 (= (contains!799 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50209) lt!50602)))

(declare-fun b!100216 () Bool)

(declare-fun lt!50603 () Unit!2998)

(assert (=> b!100216 (= e!65261 lt!50603)))

(assert (=> b!100216 (= lt!50603 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50209))))

(assert (=> b!100216 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50209))))

(declare-fun b!100217 () Bool)

(declare-fun Unit!3050 () Unit!2998)

(assert (=> b!100217 (= e!65261 Unit!3050)))

(declare-fun b!100218 () Bool)

(assert (=> b!100218 (= e!65260 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50209)))))

(assert (= (and d!27077 c!17188) b!100216))

(assert (= (and d!27077 (not c!17188)) b!100217))

(assert (= (and d!27077 (not res!50275)) b!100218))

(declare-fun m!110565 () Bool)

(assert (=> d!27077 m!110565))

(declare-fun m!110567 () Bool)

(assert (=> b!100216 m!110567))

(declare-fun m!110569 () Bool)

(assert (=> b!100216 m!110569))

(assert (=> b!100216 m!110569))

(declare-fun m!110571 () Bool)

(assert (=> b!100216 m!110571))

(assert (=> b!100218 m!110569))

(assert (=> b!100218 m!110569))

(assert (=> b!100218 m!110571))

(assert (=> b!99540 d!27077))

(declare-fun d!27079 () Bool)

(assert (=> d!27079 (= (apply!93 (+!129 lt!50198 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50201) (apply!93 lt!50198 lt!50201))))

(declare-fun lt!50605 () Unit!2998)

(assert (=> d!27079 (= lt!50605 (choose!609 lt!50198 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50201))))

(declare-fun e!65262 () Bool)

(assert (=> d!27079 e!65262))

(declare-fun res!50276 () Bool)

(assert (=> d!27079 (=> (not res!50276) (not e!65262))))

(assert (=> d!27079 (= res!50276 (contains!799 lt!50198 lt!50201))))

(assert (=> d!27079 (= (addApplyDifferent!69 lt!50198 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50201) lt!50605)))

(declare-fun b!100219 () Bool)

(assert (=> b!100219 (= e!65262 (not (= lt!50201 lt!50208)))))

(assert (= (and d!27079 res!50276) b!100219))

(declare-fun m!110573 () Bool)

(assert (=> d!27079 m!110573))

(declare-fun m!110575 () Bool)

(assert (=> d!27079 m!110575))

(assert (=> d!27079 m!109379))

(assert (=> d!27079 m!109367))

(assert (=> d!27079 m!109381))

(assert (=> d!27079 m!109367))

(assert (=> b!99540 d!27079))

(declare-fun e!65265 () Bool)

(declare-fun b!100220 () Bool)

(declare-fun lt!50606 () ListLongMap!1517)

(assert (=> b!100220 (= e!65265 (= lt!50606 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!100222 () Bool)

(declare-fun e!65264 () Bool)

(assert (=> b!100222 (= e!65264 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100222 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!100223 () Bool)

(declare-fun e!65267 () ListLongMap!1517)

(declare-fun call!10328 () ListLongMap!1517)

(assert (=> b!100223 (= e!65267 call!10328)))

(declare-fun b!100224 () Bool)

(assert (=> b!100224 (= e!65265 (isEmpty!363 lt!50606))))

(declare-fun b!100225 () Bool)

(declare-fun e!65263 () Bool)

(declare-fun e!65269 () Bool)

(assert (=> b!100225 (= e!65263 e!65269)))

(assert (=> b!100225 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!50279 () Bool)

(assert (=> b!100225 (= res!50279 (contains!799 lt!50606 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100225 (=> (not res!50279) (not e!65269))))

(declare-fun b!100226 () Bool)

(declare-fun e!65266 () Bool)

(assert (=> b!100226 (= e!65266 e!65263)))

(declare-fun c!17189 () Bool)

(assert (=> b!100226 (= c!17189 e!65264)))

(declare-fun res!50277 () Bool)

(assert (=> b!100226 (=> (not res!50277) (not e!65264))))

(assert (=> b!100226 (= res!50277 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100227 () Bool)

(assert (=> b!100227 (= e!65263 e!65265)))

(declare-fun c!17191 () Bool)

(assert (=> b!100227 (= c!17191 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10325 () Bool)

(assert (=> bm!10325 (= call!10328 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun b!100228 () Bool)

(declare-fun res!50278 () Bool)

(assert (=> b!100228 (=> (not res!50278) (not e!65266))))

(assert (=> b!100228 (= res!50278 (not (contains!799 lt!50606 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100229 () Bool)

(declare-fun lt!50610 () Unit!2998)

(declare-fun lt!50609 () Unit!2998)

(assert (=> b!100229 (= lt!50610 lt!50609)))

(declare-fun lt!50608 () V!3161)

(declare-fun lt!50612 () ListLongMap!1517)

(declare-fun lt!50611 () (_ BitVec 64))

(declare-fun lt!50607 () (_ BitVec 64))

(assert (=> b!100229 (not (contains!799 (+!129 lt!50612 (tuple2!2333 lt!50611 lt!50608)) lt!50607))))

(assert (=> b!100229 (= lt!50609 (addStillNotContains!42 lt!50612 lt!50611 lt!50608 lt!50607))))

(assert (=> b!100229 (= lt!50607 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100229 (= lt!50608 (get!1291 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100229 (= lt!50611 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100229 (= lt!50612 call!10328)))

(assert (=> b!100229 (= e!65267 (+!129 call!10328 (tuple2!2333 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (get!1291 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100221 () Bool)

(declare-fun e!65268 () ListLongMap!1517)

(assert (=> b!100221 (= e!65268 e!65267)))

(declare-fun c!17192 () Bool)

(assert (=> b!100221 (= c!17192 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!27081 () Bool)

(assert (=> d!27081 e!65266))

(declare-fun res!50280 () Bool)

(assert (=> d!27081 (=> (not res!50280) (not e!65266))))

(assert (=> d!27081 (= res!50280 (not (contains!799 lt!50606 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27081 (= lt!50606 e!65268)))

(declare-fun c!17190 () Bool)

(assert (=> d!27081 (= c!17190 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!27081 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!27081 (= (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))) (mask!6607 newMap!16) (ite (and c!16890 c!16895) lt!49841 (extraKeys!2318 newMap!16)) (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50606)))

(declare-fun b!100230 () Bool)

(assert (=> b!100230 (= e!65268 (ListLongMap!1518 Nil!1588))))

(declare-fun b!100231 () Bool)

(assert (=> b!100231 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> b!100231 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16)))))))))

(assert (=> b!100231 (= e!65269 (= (apply!93 lt!50606 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (ite c!16890 (_values!2484 newMap!16) (array!4234 (store (arr!2009 (_values!2484 newMap!16)) (index!3173 lt!49837) (ValueCellFull!974 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2261 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!27081 c!17190) b!100230))

(assert (= (and d!27081 (not c!17190)) b!100221))

(assert (= (and b!100221 c!17192) b!100229))

(assert (= (and b!100221 (not c!17192)) b!100223))

(assert (= (or b!100229 b!100223) bm!10325))

(assert (= (and d!27081 res!50280) b!100228))

(assert (= (and b!100228 res!50278) b!100226))

(assert (= (and b!100226 res!50277) b!100222))

(assert (= (and b!100226 c!17189) b!100225))

(assert (= (and b!100226 (not c!17189)) b!100227))

(assert (= (and b!100225 res!50279) b!100231))

(assert (= (and b!100227 c!17191) b!100220))

(assert (= (and b!100227 (not c!17191)) b!100224))

(declare-fun b_lambda!4461 () Bool)

(assert (=> (not b_lambda!4461) (not b!100229)))

(assert (=> b!100229 t!5567))

(declare-fun b_and!6157 () Bool)

(assert (= b_and!6153 (and (=> t!5567 result!3299) b_and!6157)))

(assert (=> b!100229 t!5569))

(declare-fun b_and!6159 () Bool)

(assert (= b_and!6155 (and (=> t!5569 result!3301) b_and!6159)))

(declare-fun b_lambda!4463 () Bool)

(assert (=> (not b_lambda!4463) (not b!100231)))

(assert (=> b!100231 t!5567))

(declare-fun b_and!6161 () Bool)

(assert (= b_and!6157 (and (=> t!5567 result!3299) b_and!6161)))

(assert (=> b!100231 t!5569))

(declare-fun b_and!6163 () Bool)

(assert (= b_and!6159 (and (=> t!5569 result!3301) b_and!6163)))

(assert (=> b!100231 m!109333))

(assert (=> b!100231 m!109333))

(assert (=> b!100231 m!109007))

(assert (=> b!100231 m!109337))

(assert (=> b!100231 m!109007))

(assert (=> b!100231 m!108993))

(assert (=> b!100231 m!108993))

(declare-fun m!110577 () Bool)

(assert (=> b!100231 m!110577))

(assert (=> b!100221 m!108993))

(assert (=> b!100221 m!108993))

(assert (=> b!100221 m!109001))

(assert (=> b!100225 m!108993))

(assert (=> b!100225 m!108993))

(declare-fun m!110579 () Bool)

(assert (=> b!100225 m!110579))

(declare-fun m!110581 () Bool)

(assert (=> b!100220 m!110581))

(assert (=> bm!10325 m!110581))

(declare-fun m!110583 () Bool)

(assert (=> b!100228 m!110583))

(assert (=> b!100222 m!108993))

(assert (=> b!100222 m!108993))

(assert (=> b!100222 m!109001))

(assert (=> b!100229 m!109333))

(declare-fun m!110585 () Bool)

(assert (=> b!100229 m!110585))

(assert (=> b!100229 m!109333))

(assert (=> b!100229 m!109007))

(assert (=> b!100229 m!109337))

(declare-fun m!110587 () Bool)

(assert (=> b!100229 m!110587))

(assert (=> b!100229 m!109007))

(assert (=> b!100229 m!110585))

(declare-fun m!110589 () Bool)

(assert (=> b!100229 m!110589))

(declare-fun m!110591 () Bool)

(assert (=> b!100229 m!110591))

(assert (=> b!100229 m!108993))

(declare-fun m!110593 () Bool)

(assert (=> b!100224 m!110593))

(declare-fun m!110595 () Bool)

(assert (=> d!27081 m!110595))

(assert (=> d!27081 m!108865))

(assert (=> b!99540 d!27081))

(declare-fun d!27083 () Bool)

(assert (=> d!27083 (= (apply!93 (+!129 lt!50207 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) lt!50199) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50207 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))) lt!50199)))))

(declare-fun bs!4141 () Bool)

(assert (= bs!4141 d!27083))

(declare-fun m!110597 () Bool)

(assert (=> bs!4141 m!110597))

(assert (=> bs!4141 m!110597))

(declare-fun m!110599 () Bool)

(assert (=> bs!4141 m!110599))

(assert (=> b!99540 d!27083))

(declare-fun d!27085 () Bool)

(declare-fun e!65270 () Bool)

(assert (=> d!27085 e!65270))

(declare-fun res!50282 () Bool)

(assert (=> d!27085 (=> (not res!50282) (not e!65270))))

(declare-fun lt!50613 () ListLongMap!1517)

(assert (=> d!27085 (= res!50282 (contains!799 lt!50613 (_1!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(declare-fun lt!50614 () List!1591)

(assert (=> d!27085 (= lt!50613 (ListLongMap!1518 lt!50614))))

(declare-fun lt!50615 () Unit!2998)

(declare-fun lt!50616 () Unit!2998)

(assert (=> d!27085 (= lt!50615 lt!50616)))

(assert (=> d!27085 (= (getValueByKey!149 lt!50614 (_1!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27085 (= lt!50616 (lemmaContainsTupThenGetReturnValue!68 lt!50614 (_1!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27085 (= lt!50614 (insertStrictlySorted!71 (toList!774 lt!50202) (_1!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27085 (= (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50613)))

(declare-fun b!100232 () Bool)

(declare-fun res!50281 () Bool)

(assert (=> b!100232 (=> (not res!50281) (not e!65270))))

(assert (=> b!100232 (= res!50281 (= (getValueByKey!149 (toList!774 lt!50613) (_1!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))))

(declare-fun b!100233 () Bool)

(assert (=> b!100233 (= e!65270 (contains!801 (toList!774 lt!50613) (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))

(assert (= (and d!27085 res!50282) b!100232))

(assert (= (and b!100232 res!50281) b!100233))

(declare-fun m!110601 () Bool)

(assert (=> d!27085 m!110601))

(declare-fun m!110603 () Bool)

(assert (=> d!27085 m!110603))

(declare-fun m!110605 () Bool)

(assert (=> d!27085 m!110605))

(declare-fun m!110607 () Bool)

(assert (=> d!27085 m!110607))

(declare-fun m!110609 () Bool)

(assert (=> b!100232 m!110609))

(declare-fun m!110611 () Bool)

(assert (=> b!100233 m!110611))

(assert (=> b!99540 d!27085))

(declare-fun d!27087 () Bool)

(declare-fun e!65271 () Bool)

(assert (=> d!27087 e!65271))

(declare-fun res!50284 () Bool)

(assert (=> d!27087 (=> (not res!50284) (not e!65271))))

(declare-fun lt!50617 () ListLongMap!1517)

(assert (=> d!27087 (= res!50284 (contains!799 lt!50617 (_1!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))))))

(declare-fun lt!50618 () List!1591)

(assert (=> d!27087 (= lt!50617 (ListLongMap!1518 lt!50618))))

(declare-fun lt!50619 () Unit!2998)

(declare-fun lt!50620 () Unit!2998)

(assert (=> d!27087 (= lt!50619 lt!50620)))

(assert (=> d!27087 (= (getValueByKey!149 lt!50618 (_1!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))))))

(assert (=> d!27087 (= lt!50620 (lemmaContainsTupThenGetReturnValue!68 lt!50618 (_1!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))))))

(assert (=> d!27087 (= lt!50618 (insertStrictlySorted!71 (toList!774 lt!50197) (_1!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))))))

(assert (=> d!27087 (= (+!129 lt!50197 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) lt!50617)))

(declare-fun b!100234 () Bool)

(declare-fun res!50283 () Bool)

(assert (=> b!100234 (=> (not res!50283) (not e!65271))))

(assert (=> b!100234 (= res!50283 (= (getValueByKey!149 (toList!774 lt!50617) (_1!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))))))))

(declare-fun b!100235 () Bool)

(assert (=> b!100235 (= e!65271 (contains!801 (toList!774 lt!50617) (tuple2!2333 lt!50210 (minValue!2382 newMap!16))))))

(assert (= (and d!27087 res!50284) b!100234))

(assert (= (and b!100234 res!50283) b!100235))

(declare-fun m!110613 () Bool)

(assert (=> d!27087 m!110613))

(declare-fun m!110615 () Bool)

(assert (=> d!27087 m!110615))

(declare-fun m!110617 () Bool)

(assert (=> d!27087 m!110617))

(declare-fun m!110619 () Bool)

(assert (=> d!27087 m!110619))

(declare-fun m!110621 () Bool)

(assert (=> b!100234 m!110621))

(declare-fun m!110623 () Bool)

(assert (=> b!100235 m!110623))

(assert (=> b!99540 d!27087))

(declare-fun d!27089 () Bool)

(assert (=> d!27089 (= (apply!93 (+!129 lt!50197 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) lt!50206) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50197 (tuple2!2333 lt!50210 (minValue!2382 newMap!16)))) lt!50206)))))

(declare-fun bs!4142 () Bool)

(assert (= bs!4142 d!27089))

(declare-fun m!110625 () Bool)

(assert (=> bs!4142 m!110625))

(assert (=> bs!4142 m!110625))

(declare-fun m!110627 () Bool)

(assert (=> bs!4142 m!110627))

(assert (=> b!99540 d!27089))

(declare-fun d!27091 () Bool)

(assert (=> d!27091 (= (apply!93 lt!50207 lt!50199) (get!1294 (getValueByKey!149 (toList!774 lt!50207) lt!50199)))))

(declare-fun bs!4143 () Bool)

(assert (= bs!4143 d!27091))

(declare-fun m!110629 () Bool)

(assert (=> bs!4143 m!110629))

(assert (=> bs!4143 m!110629))

(declare-fun m!110631 () Bool)

(assert (=> bs!4143 m!110631))

(assert (=> b!99540 d!27091))

(declare-fun d!27093 () Bool)

(assert (=> d!27093 (= (apply!93 (+!129 lt!50197 (tuple2!2333 lt!50210 (minValue!2382 newMap!16))) lt!50206) (apply!93 lt!50197 lt!50206))))

(declare-fun lt!50621 () Unit!2998)

(assert (=> d!27093 (= lt!50621 (choose!609 lt!50197 lt!50210 (minValue!2382 newMap!16) lt!50206))))

(declare-fun e!65272 () Bool)

(assert (=> d!27093 e!65272))

(declare-fun res!50285 () Bool)

(assert (=> d!27093 (=> (not res!50285) (not e!65272))))

(assert (=> d!27093 (= res!50285 (contains!799 lt!50197 lt!50206))))

(assert (=> d!27093 (= (addApplyDifferent!69 lt!50197 lt!50210 (minValue!2382 newMap!16) lt!50206) lt!50621)))

(declare-fun b!100236 () Bool)

(assert (=> b!100236 (= e!65272 (not (= lt!50206 lt!50210)))))

(assert (= (and d!27093 res!50285) b!100236))

(declare-fun m!110633 () Bool)

(assert (=> d!27093 m!110633))

(declare-fun m!110635 () Bool)

(assert (=> d!27093 m!110635))

(assert (=> d!27093 m!109375))

(assert (=> d!27093 m!109369))

(assert (=> d!27093 m!109377))

(assert (=> d!27093 m!109369))

(assert (=> b!99540 d!27093))

(declare-fun d!27095 () Bool)

(declare-fun e!65273 () Bool)

(assert (=> d!27095 e!65273))

(declare-fun res!50287 () Bool)

(assert (=> d!27095 (=> (not res!50287) (not e!65273))))

(declare-fun lt!50622 () ListLongMap!1517)

(assert (=> d!27095 (= res!50287 (contains!799 lt!50622 (_1!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))))))

(declare-fun lt!50623 () List!1591)

(assert (=> d!27095 (= lt!50622 (ListLongMap!1518 lt!50623))))

(declare-fun lt!50624 () Unit!2998)

(declare-fun lt!50625 () Unit!2998)

(assert (=> d!27095 (= lt!50624 lt!50625)))

(assert (=> d!27095 (= (getValueByKey!149 lt!50623 (_1!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))))))

(assert (=> d!27095 (= lt!50625 (lemmaContainsTupThenGetReturnValue!68 lt!50623 (_1!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))))))

(assert (=> d!27095 (= lt!50623 (insertStrictlySorted!71 (toList!774 lt!50207) (_1!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))))))

(assert (=> d!27095 (= (+!129 lt!50207 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) lt!50622)))

(declare-fun b!100237 () Bool)

(declare-fun res!50286 () Bool)

(assert (=> b!100237 (=> (not res!50286) (not e!65273))))

(assert (=> b!100237 (= res!50286 (= (getValueByKey!149 (toList!774 lt!50622) (_1!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))))))))

(declare-fun b!100238 () Bool)

(assert (=> b!100238 (= e!65273 (contains!801 (toList!774 lt!50622) (tuple2!2333 lt!50193 (minValue!2382 newMap!16))))))

(assert (= (and d!27095 res!50287) b!100237))

(assert (= (and b!100237 res!50286) b!100238))

(declare-fun m!110637 () Bool)

(assert (=> d!27095 m!110637))

(declare-fun m!110639 () Bool)

(assert (=> d!27095 m!110639))

(declare-fun m!110641 () Bool)

(assert (=> d!27095 m!110641))

(declare-fun m!110643 () Bool)

(assert (=> d!27095 m!110643))

(declare-fun m!110645 () Bool)

(assert (=> b!100237 m!110645))

(declare-fun m!110647 () Bool)

(assert (=> b!100238 m!110647))

(assert (=> b!99540 d!27095))

(declare-fun d!27097 () Bool)

(assert (=> d!27097 (contains!799 (+!129 lt!50202 (tuple2!2333 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50209)))

(declare-fun lt!50626 () Unit!2998)

(assert (=> d!27097 (= lt!50626 (choose!610 lt!50202 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50209))))

(assert (=> d!27097 (contains!799 lt!50202 lt!50209)))

(assert (=> d!27097 (= (addStillContains!69 lt!50202 lt!50211 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50209) lt!50626)))

(declare-fun bs!4144 () Bool)

(assert (= bs!4144 d!27097))

(assert (=> bs!4144 m!109357))

(assert (=> bs!4144 m!109357))

(assert (=> bs!4144 m!109359))

(declare-fun m!110649 () Bool)

(assert (=> bs!4144 m!110649))

(declare-fun m!110651 () Bool)

(assert (=> bs!4144 m!110651))

(assert (=> b!99540 d!27097))

(declare-fun d!27099 () Bool)

(assert (=> d!27099 (= (apply!93 (+!129 lt!50207 (tuple2!2333 lt!50193 (minValue!2382 newMap!16))) lt!50199) (apply!93 lt!50207 lt!50199))))

(declare-fun lt!50627 () Unit!2998)

(assert (=> d!27099 (= lt!50627 (choose!609 lt!50207 lt!50193 (minValue!2382 newMap!16) lt!50199))))

(declare-fun e!65274 () Bool)

(assert (=> d!27099 e!65274))

(declare-fun res!50288 () Bool)

(assert (=> d!27099 (=> (not res!50288) (not e!65274))))

(assert (=> d!27099 (= res!50288 (contains!799 lt!50207 lt!50199))))

(assert (=> d!27099 (= (addApplyDifferent!69 lt!50207 lt!50193 (minValue!2382 newMap!16) lt!50199) lt!50627)))

(declare-fun b!100239 () Bool)

(assert (=> b!100239 (= e!65274 (not (= lt!50199 lt!50193)))))

(assert (= (and d!27099 res!50288) b!100239))

(declare-fun m!110653 () Bool)

(assert (=> d!27099 m!110653))

(declare-fun m!110655 () Bool)

(assert (=> d!27099 m!110655))

(assert (=> d!27099 m!109353))

(assert (=> d!27099 m!109363))

(assert (=> d!27099 m!109365))

(assert (=> d!27099 m!109363))

(assert (=> b!99540 d!27099))

(declare-fun d!27101 () Bool)

(assert (=> d!27101 (= (apply!93 (+!129 lt!50198 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50201) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50198 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50201)))))

(declare-fun bs!4145 () Bool)

(assert (= bs!4145 d!27101))

(declare-fun m!110657 () Bool)

(assert (=> bs!4145 m!110657))

(assert (=> bs!4145 m!110657))

(declare-fun m!110659 () Bool)

(assert (=> bs!4145 m!110659))

(assert (=> b!99540 d!27101))

(declare-fun d!27103 () Bool)

(declare-fun e!65275 () Bool)

(assert (=> d!27103 e!65275))

(declare-fun res!50290 () Bool)

(assert (=> d!27103 (=> (not res!50290) (not e!65275))))

(declare-fun lt!50628 () ListLongMap!1517)

(assert (=> d!27103 (= res!50290 (contains!799 lt!50628 (_1!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(declare-fun lt!50629 () List!1591)

(assert (=> d!27103 (= lt!50628 (ListLongMap!1518 lt!50629))))

(declare-fun lt!50630 () Unit!2998)

(declare-fun lt!50631 () Unit!2998)

(assert (=> d!27103 (= lt!50630 lt!50631)))

(assert (=> d!27103 (= (getValueByKey!149 lt!50629 (_1!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27103 (= lt!50631 (lemmaContainsTupThenGetReturnValue!68 lt!50629 (_1!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27103 (= lt!50629 (insertStrictlySorted!71 (toList!774 lt!50198) (_1!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27103 (= (+!129 lt!50198 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50628)))

(declare-fun b!100240 () Bool)

(declare-fun res!50289 () Bool)

(assert (=> b!100240 (=> (not res!50289) (not e!65275))))

(assert (=> b!100240 (= res!50289 (= (getValueByKey!149 (toList!774 lt!50628) (_1!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!154 (_2!1177 (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))))

(declare-fun b!100241 () Bool)

(assert (=> b!100241 (= e!65275 (contains!801 (toList!774 lt!50628) (tuple2!2333 lt!50208 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))

(assert (= (and d!27103 res!50290) b!100240))

(assert (= (and b!100240 res!50289) b!100241))

(declare-fun m!110661 () Bool)

(assert (=> d!27103 m!110661))

(declare-fun m!110663 () Bool)

(assert (=> d!27103 m!110663))

(declare-fun m!110665 () Bool)

(assert (=> d!27103 m!110665))

(declare-fun m!110667 () Bool)

(assert (=> d!27103 m!110667))

(declare-fun m!110669 () Bool)

(assert (=> b!100240 m!110669))

(declare-fun m!110671 () Bool)

(assert (=> b!100241 m!110671))

(assert (=> b!99540 d!27103))

(assert (=> d!26641 d!26633))

(declare-fun b!100258 () Bool)

(declare-fun e!65286 () Bool)

(declare-fun call!10334 () Bool)

(assert (=> b!100258 (= e!65286 (not call!10334))))

(declare-fun b!100259 () Bool)

(declare-fun e!65287 () Bool)

(declare-fun e!65284 () Bool)

(assert (=> b!100259 (= e!65287 e!65284)))

(declare-fun c!17198 () Bool)

(declare-fun lt!50634 () SeekEntryResult!257)

(assert (=> b!100259 (= c!17198 ((_ is MissingVacant!257) lt!50634))))

(declare-fun b!100260 () Bool)

(declare-fun res!50299 () Bool)

(assert (=> b!100260 (= res!50299 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3172 lt!50634)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65285 () Bool)

(assert (=> b!100260 (=> (not res!50299) (not e!65285))))

(declare-fun b!100261 () Bool)

(assert (=> b!100261 (= e!65284 ((_ is Undefined!257) lt!50634))))

(declare-fun d!27105 () Bool)

(assert (=> d!27105 e!65287))

(declare-fun c!17197 () Bool)

(assert (=> d!27105 (= c!17197 ((_ is MissingZero!257) lt!50634))))

(assert (=> d!27105 (= lt!50634 (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (_keys!4194 newMap!16) (mask!6607 newMap!16)))))

(assert (=> d!27105 true))

(declare-fun _$34!876 () Unit!2998)

(assert (=> d!27105 (= (choose!612 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) _$34!876)))

(declare-fun bm!10330 () Bool)

(declare-fun call!10333 () Bool)

(assert (=> bm!10330 (= call!10333 (inRange!0 (ite c!17197 (index!3172 lt!50634) (index!3175 lt!50634)) (mask!6607 newMap!16)))))

(declare-fun b!100262 () Bool)

(declare-fun res!50300 () Bool)

(assert (=> b!100262 (=> (not res!50300) (not e!65286))))

(assert (=> b!100262 (= res!50300 call!10333)))

(assert (=> b!100262 (= e!65284 e!65286)))

(declare-fun b!100263 () Bool)

(assert (=> b!100263 (= e!65287 e!65285)))

(declare-fun res!50301 () Bool)

(assert (=> b!100263 (= res!50301 call!10333)))

(assert (=> b!100263 (=> (not res!50301) (not e!65285))))

(declare-fun b!100264 () Bool)

(declare-fun res!50302 () Bool)

(assert (=> b!100264 (=> (not res!50302) (not e!65286))))

(assert (=> b!100264 (= res!50302 (= (select (arr!2008 (_keys!4194 newMap!16)) (index!3175 lt!50634)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10331 () Bool)

(assert (=> bm!10331 (= call!10334 (arrayContainsKey!0 (_keys!4194 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!100265 () Bool)

(assert (=> b!100265 (= e!65285 (not call!10334))))

(assert (= (and d!27105 c!17197) b!100263))

(assert (= (and d!27105 (not c!17197)) b!100259))

(assert (= (and b!100263 res!50301) b!100260))

(assert (= (and b!100260 res!50299) b!100265))

(assert (= (and b!100259 c!17198) b!100262))

(assert (= (and b!100259 (not c!17198)) b!100261))

(assert (= (and b!100262 res!50300) b!100264))

(assert (= (and b!100264 res!50302) b!100258))

(assert (= (or b!100263 b!100262) bm!10330))

(assert (= (or b!100265 b!100258) bm!10331))

(declare-fun m!110673 () Bool)

(assert (=> b!100264 m!110673))

(assert (=> d!27105 m!108591))

(assert (=> d!27105 m!108747))

(declare-fun m!110675 () Bool)

(assert (=> b!100260 m!110675))

(declare-fun m!110677 () Bool)

(assert (=> bm!10330 m!110677))

(assert (=> bm!10331 m!108591))

(assert (=> bm!10331 m!108769))

(assert (=> d!26641 d!27105))

(assert (=> d!26641 d!26717))

(declare-fun d!27107 () Bool)

(declare-fun e!65288 () Bool)

(assert (=> d!27107 e!65288))

(declare-fun res!50304 () Bool)

(assert (=> d!27107 (=> (not res!50304) (not e!65288))))

(declare-fun lt!50635 () ListLongMap!1517)

(assert (=> d!27107 (= res!50304 (contains!799 lt!50635 (_1!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))))))

(declare-fun lt!50636 () List!1591)

(assert (=> d!27107 (= lt!50635 (ListLongMap!1518 lt!50636))))

(declare-fun lt!50637 () Unit!2998)

(declare-fun lt!50638 () Unit!2998)

(assert (=> d!27107 (= lt!50637 lt!50638)))

(assert (=> d!27107 (= (getValueByKey!149 lt!50636 (_1!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))))))

(assert (=> d!27107 (= lt!50638 (lemmaContainsTupThenGetReturnValue!68 lt!50636 (_1!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))))))

(assert (=> d!27107 (= lt!50636 (insertStrictlySorted!71 (toList!774 lt!49991) (_1!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))))))

(assert (=> d!27107 (= (+!129 lt!49991 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) lt!50635)))

(declare-fun b!100266 () Bool)

(declare-fun res!50303 () Bool)

(assert (=> b!100266 (=> (not res!50303) (not e!65288))))

(assert (=> b!100266 (= res!50303 (= (getValueByKey!149 (toList!774 lt!50635) (_1!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))))))))

(declare-fun b!100267 () Bool)

(assert (=> b!100267 (= e!65288 (contains!801 (toList!774 lt!50635) (tuple2!2333 lt!50004 (minValue!2382 newMap!16))))))

(assert (= (and d!27107 res!50304) b!100266))

(assert (= (and b!100266 res!50303) b!100267))

(declare-fun m!110679 () Bool)

(assert (=> d!27107 m!110679))

(declare-fun m!110681 () Bool)

(assert (=> d!27107 m!110681))

(declare-fun m!110683 () Bool)

(assert (=> d!27107 m!110683))

(declare-fun m!110685 () Bool)

(assert (=> d!27107 m!110685))

(declare-fun m!110687 () Bool)

(assert (=> b!100266 m!110687))

(declare-fun m!110689 () Bool)

(assert (=> b!100267 m!110689))

(assert (=> b!99336 d!27107))

(declare-fun d!27109 () Bool)

(assert (=> d!27109 (= (apply!93 (+!129 lt!50001 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) lt!49993) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!50001 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))) lt!49993)))))

(declare-fun bs!4146 () Bool)

(assert (= bs!4146 d!27109))

(declare-fun m!110691 () Bool)

(assert (=> bs!4146 m!110691))

(assert (=> bs!4146 m!110691))

(declare-fun m!110693 () Bool)

(assert (=> bs!4146 m!110693))

(assert (=> b!99336 d!27109))

(declare-fun d!27111 () Bool)

(assert (=> d!27111 (= (apply!93 lt!50001 lt!49993) (get!1294 (getValueByKey!149 (toList!774 lt!50001) lt!49993)))))

(declare-fun bs!4147 () Bool)

(assert (= bs!4147 d!27111))

(declare-fun m!110695 () Bool)

(assert (=> bs!4147 m!110695))

(assert (=> bs!4147 m!110695))

(declare-fun m!110697 () Bool)

(assert (=> bs!4147 m!110697))

(assert (=> b!99336 d!27111))

(declare-fun d!27113 () Bool)

(declare-fun e!65289 () Bool)

(assert (=> d!27113 e!65289))

(declare-fun res!50306 () Bool)

(assert (=> d!27113 (=> (not res!50306) (not e!65289))))

(declare-fun lt!50639 () ListLongMap!1517)

(assert (=> d!27113 (= res!50306 (contains!799 lt!50639 (_1!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50640 () List!1591)

(assert (=> d!27113 (= lt!50639 (ListLongMap!1518 lt!50640))))

(declare-fun lt!50641 () Unit!2998)

(declare-fun lt!50642 () Unit!2998)

(assert (=> d!27113 (= lt!50641 lt!50642)))

(assert (=> d!27113 (= (getValueByKey!149 lt!50640 (_1!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= lt!50642 (lemmaContainsTupThenGetReturnValue!68 lt!50640 (_1!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= lt!50640 (insertStrictlySorted!71 (toList!774 lt!49992) (_1!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= (+!129 lt!49992 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) lt!50639)))

(declare-fun b!100268 () Bool)

(declare-fun res!50305 () Bool)

(assert (=> b!100268 (=> (not res!50305) (not e!65289))))

(assert (=> b!100268 (= res!50305 (= (getValueByKey!149 (toList!774 lt!50639) (_1!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100269 () Bool)

(assert (=> b!100269 (= e!65289 (contains!801 (toList!774 lt!50639) (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27113 res!50306) b!100268))

(assert (= (and b!100268 res!50305) b!100269))

(declare-fun m!110699 () Bool)

(assert (=> d!27113 m!110699))

(declare-fun m!110701 () Bool)

(assert (=> d!27113 m!110701))

(declare-fun m!110703 () Bool)

(assert (=> d!27113 m!110703))

(declare-fun m!110705 () Bool)

(assert (=> d!27113 m!110705))

(declare-fun m!110707 () Bool)

(assert (=> b!100268 m!110707))

(declare-fun m!110709 () Bool)

(assert (=> b!100269 m!110709))

(assert (=> b!99336 d!27113))

(declare-fun d!27115 () Bool)

(declare-fun e!65290 () Bool)

(assert (=> d!27115 e!65290))

(declare-fun res!50308 () Bool)

(assert (=> d!27115 (=> (not res!50308) (not e!65290))))

(declare-fun lt!50643 () ListLongMap!1517)

(assert (=> d!27115 (= res!50308 (contains!799 lt!50643 (_1!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50644 () List!1591)

(assert (=> d!27115 (= lt!50643 (ListLongMap!1518 lt!50644))))

(declare-fun lt!50645 () Unit!2998)

(declare-fun lt!50646 () Unit!2998)

(assert (=> d!27115 (= lt!50645 lt!50646)))

(assert (=> d!27115 (= (getValueByKey!149 lt!50644 (_1!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27115 (= lt!50646 (lemmaContainsTupThenGetReturnValue!68 lt!50644 (_1!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27115 (= lt!50644 (insertStrictlySorted!71 (toList!774 lt!49996) (_1!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27115 (= (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) lt!50643)))

(declare-fun b!100270 () Bool)

(declare-fun res!50307 () Bool)

(assert (=> b!100270 (=> (not res!50307) (not e!65290))))

(assert (=> b!100270 (= res!50307 (= (getValueByKey!149 (toList!774 lt!50643) (_1!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100271 () Bool)

(assert (=> b!100271 (= e!65290 (contains!801 (toList!774 lt!50643) (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27115 res!50308) b!100270))

(assert (= (and b!100270 res!50307) b!100271))

(declare-fun m!110711 () Bool)

(assert (=> d!27115 m!110711))

(declare-fun m!110713 () Bool)

(assert (=> d!27115 m!110713))

(declare-fun m!110715 () Bool)

(assert (=> d!27115 m!110715))

(declare-fun m!110717 () Bool)

(assert (=> d!27115 m!110717))

(declare-fun m!110719 () Bool)

(assert (=> b!100270 m!110719))

(declare-fun m!110721 () Bool)

(assert (=> b!100271 m!110721))

(assert (=> b!99336 d!27115))

(declare-fun d!27117 () Bool)

(assert (=> d!27117 (= (apply!93 lt!49992 lt!49995) (get!1294 (getValueByKey!149 (toList!774 lt!49992) lt!49995)))))

(declare-fun bs!4148 () Bool)

(assert (= bs!4148 d!27117))

(declare-fun m!110723 () Bool)

(assert (=> bs!4148 m!110723))

(assert (=> bs!4148 m!110723))

(declare-fun m!110725 () Bool)

(assert (=> bs!4148 m!110725))

(assert (=> b!99336 d!27117))

(declare-fun d!27119 () Bool)

(declare-fun e!65291 () Bool)

(assert (=> d!27119 e!65291))

(declare-fun res!50310 () Bool)

(assert (=> d!27119 (=> (not res!50310) (not e!65291))))

(declare-fun lt!50647 () ListLongMap!1517)

(assert (=> d!27119 (= res!50310 (contains!799 lt!50647 (_1!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))))))

(declare-fun lt!50648 () List!1591)

(assert (=> d!27119 (= lt!50647 (ListLongMap!1518 lt!50648))))

(declare-fun lt!50649 () Unit!2998)

(declare-fun lt!50650 () Unit!2998)

(assert (=> d!27119 (= lt!50649 lt!50650)))

(assert (=> d!27119 (= (getValueByKey!149 lt!50648 (_1!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))))))

(assert (=> d!27119 (= lt!50650 (lemmaContainsTupThenGetReturnValue!68 lt!50648 (_1!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))))))

(assert (=> d!27119 (= lt!50648 (insertStrictlySorted!71 (toList!774 lt!50001) (_1!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))))))

(assert (=> d!27119 (= (+!129 lt!50001 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) lt!50647)))

(declare-fun b!100272 () Bool)

(declare-fun res!50309 () Bool)

(assert (=> b!100272 (=> (not res!50309) (not e!65291))))

(assert (=> b!100272 (= res!50309 (= (getValueByKey!149 (toList!774 lt!50647) (_1!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))))))))

(declare-fun b!100273 () Bool)

(assert (=> b!100273 (= e!65291 (contains!801 (toList!774 lt!50647) (tuple2!2333 lt!49987 (minValue!2382 newMap!16))))))

(assert (= (and d!27119 res!50310) b!100272))

(assert (= (and b!100272 res!50309) b!100273))

(declare-fun m!110727 () Bool)

(assert (=> d!27119 m!110727))

(declare-fun m!110729 () Bool)

(assert (=> d!27119 m!110729))

(declare-fun m!110731 () Bool)

(assert (=> d!27119 m!110731))

(declare-fun m!110733 () Bool)

(assert (=> d!27119 m!110733))

(declare-fun m!110735 () Bool)

(assert (=> b!100272 m!110735))

(declare-fun m!110737 () Bool)

(assert (=> b!100273 m!110737))

(assert (=> b!99336 d!27119))

(declare-fun b!100274 () Bool)

(declare-fun e!65294 () Bool)

(declare-fun lt!50651 () ListLongMap!1517)

(assert (=> b!100274 (= e!65294 (= lt!50651 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!100276 () Bool)

(declare-fun e!65293 () Bool)

(assert (=> b!100276 (= e!65293 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100276 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!100277 () Bool)

(declare-fun e!65296 () ListLongMap!1517)

(declare-fun call!10335 () ListLongMap!1517)

(assert (=> b!100277 (= e!65296 call!10335)))

(declare-fun b!100278 () Bool)

(assert (=> b!100278 (= e!65294 (isEmpty!363 lt!50651))))

(declare-fun b!100279 () Bool)

(declare-fun e!65292 () Bool)

(declare-fun e!65298 () Bool)

(assert (=> b!100279 (= e!65292 e!65298)))

(assert (=> b!100279 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun res!50313 () Bool)

(assert (=> b!100279 (= res!50313 (contains!799 lt!50651 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100279 (=> (not res!50313) (not e!65298))))

(declare-fun b!100280 () Bool)

(declare-fun e!65295 () Bool)

(assert (=> b!100280 (= e!65295 e!65292)))

(declare-fun c!17199 () Bool)

(assert (=> b!100280 (= c!17199 e!65293)))

(declare-fun res!50311 () Bool)

(assert (=> b!100280 (=> (not res!50311) (not e!65293))))

(assert (=> b!100280 (= res!50311 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun b!100281 () Bool)

(assert (=> b!100281 (= e!65292 e!65294)))

(declare-fun c!17201 () Bool)

(assert (=> b!100281 (= c!17201 (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(declare-fun bm!10332 () Bool)

(assert (=> bm!10332 (= call!10335 (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun b!100282 () Bool)

(declare-fun res!50312 () Bool)

(assert (=> b!100282 (=> (not res!50312) (not e!65295))))

(assert (=> b!100282 (= res!50312 (not (contains!799 lt!50651 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100283 () Bool)

(declare-fun lt!50655 () Unit!2998)

(declare-fun lt!50654 () Unit!2998)

(assert (=> b!100283 (= lt!50655 lt!50654)))

(declare-fun lt!50656 () (_ BitVec 64))

(declare-fun lt!50653 () V!3161)

(declare-fun lt!50657 () ListLongMap!1517)

(declare-fun lt!50652 () (_ BitVec 64))

(assert (=> b!100283 (not (contains!799 (+!129 lt!50657 (tuple2!2333 lt!50656 lt!50653)) lt!50652))))

(assert (=> b!100283 (= lt!50654 (addStillNotContains!42 lt!50657 lt!50656 lt!50653 lt!50652))))

(assert (=> b!100283 (= lt!50652 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100283 (= lt!50653 (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100283 (= lt!50656 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100283 (= lt!50657 call!10335)))

(assert (=> b!100283 (= e!65296 (+!129 call!10335 (tuple2!2333 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000) (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100275 () Bool)

(declare-fun e!65297 () ListLongMap!1517)

(assert (=> b!100275 (= e!65297 e!65296)))

(declare-fun c!17202 () Bool)

(assert (=> b!100275 (= c!17202 (validKeyInArray!0 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!27121 () Bool)

(assert (=> d!27121 e!65295))

(declare-fun res!50314 () Bool)

(assert (=> d!27121 (=> (not res!50314) (not e!65295))))

(assert (=> d!27121 (= res!50314 (not (contains!799 lt!50651 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27121 (= lt!50651 e!65297)))

(declare-fun c!17200 () Bool)

(assert (=> d!27121 (= c!17200 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> d!27121 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!27121 (= (getCurrentListMapNoExtraKeys!93 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50651)))

(declare-fun b!100284 () Bool)

(assert (=> b!100284 (= e!65297 (ListLongMap!1518 Nil!1588))))

(declare-fun b!100285 () Bool)

(assert (=> b!100285 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2260 (_keys!4194 newMap!16))))))

(assert (=> b!100285 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2261 (_values!2484 newMap!16))))))

(assert (=> b!100285 (= e!65298 (= (apply!93 lt!50651 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) (get!1291 (select (arr!2009 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!371 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!27121 c!17200) b!100284))

(assert (= (and d!27121 (not c!17200)) b!100275))

(assert (= (and b!100275 c!17202) b!100283))

(assert (= (and b!100275 (not c!17202)) b!100277))

(assert (= (or b!100283 b!100277) bm!10332))

(assert (= (and d!27121 res!50314) b!100282))

(assert (= (and b!100282 res!50312) b!100280))

(assert (= (and b!100280 res!50311) b!100276))

(assert (= (and b!100280 c!17199) b!100279))

(assert (= (and b!100280 (not c!17199)) b!100281))

(assert (= (and b!100279 res!50313) b!100285))

(assert (= (and b!100281 c!17201) b!100274))

(assert (= (and b!100281 (not c!17201)) b!100278))

(declare-fun b_lambda!4465 () Bool)

(assert (=> (not b_lambda!4465) (not b!100283)))

(assert (=> b!100283 t!5567))

(declare-fun b_and!6165 () Bool)

(assert (= b_and!6161 (and (=> t!5567 result!3299) b_and!6165)))

(assert (=> b!100283 t!5569))

(declare-fun b_and!6167 () Bool)

(assert (= b_and!6163 (and (=> t!5569 result!3301) b_and!6167)))

(declare-fun b_lambda!4467 () Bool)

(assert (=> (not b_lambda!4467) (not b!100285)))

(assert (=> b!100285 t!5567))

(declare-fun b_and!6169 () Bool)

(assert (= b_and!6165 (and (=> t!5567 result!3299) b_and!6169)))

(assert (=> b!100285 t!5569))

(declare-fun b_and!6171 () Bool)

(assert (= b_and!6167 (and (=> t!5569 result!3301) b_and!6171)))

(assert (=> b!100285 m!109005))

(assert (=> b!100285 m!109005))

(assert (=> b!100285 m!109007))

(assert (=> b!100285 m!109011))

(assert (=> b!100285 m!109007))

(assert (=> b!100285 m!108993))

(assert (=> b!100285 m!108993))

(declare-fun m!110739 () Bool)

(assert (=> b!100285 m!110739))

(assert (=> b!100275 m!108993))

(assert (=> b!100275 m!108993))

(assert (=> b!100275 m!109001))

(assert (=> b!100279 m!108993))

(assert (=> b!100279 m!108993))

(declare-fun m!110741 () Bool)

(assert (=> b!100279 m!110741))

(declare-fun m!110743 () Bool)

(assert (=> b!100274 m!110743))

(assert (=> bm!10332 m!110743))

(declare-fun m!110745 () Bool)

(assert (=> b!100282 m!110745))

(assert (=> b!100276 m!108993))

(assert (=> b!100276 m!108993))

(assert (=> b!100276 m!109001))

(assert (=> b!100283 m!109005))

(declare-fun m!110747 () Bool)

(assert (=> b!100283 m!110747))

(assert (=> b!100283 m!109005))

(assert (=> b!100283 m!109007))

(assert (=> b!100283 m!109011))

(declare-fun m!110749 () Bool)

(assert (=> b!100283 m!110749))

(assert (=> b!100283 m!109007))

(assert (=> b!100283 m!110747))

(declare-fun m!110751 () Bool)

(assert (=> b!100283 m!110751))

(declare-fun m!110753 () Bool)

(assert (=> b!100283 m!110753))

(assert (=> b!100283 m!108993))

(declare-fun m!110755 () Bool)

(assert (=> b!100278 m!110755))

(declare-fun m!110757 () Bool)

(assert (=> d!27121 m!110757))

(assert (=> d!27121 m!108865))

(assert (=> b!99336 d!27121))

(declare-fun d!27123 () Bool)

(declare-fun e!65299 () Bool)

(assert (=> d!27123 e!65299))

(declare-fun res!50315 () Bool)

(assert (=> d!27123 (=> res!50315 e!65299)))

(declare-fun lt!50659 () Bool)

(assert (=> d!27123 (= res!50315 (not lt!50659))))

(declare-fun lt!50658 () Bool)

(assert (=> d!27123 (= lt!50659 lt!50658)))

(declare-fun lt!50661 () Unit!2998)

(declare-fun e!65300 () Unit!2998)

(assert (=> d!27123 (= lt!50661 e!65300)))

(declare-fun c!17203 () Bool)

(assert (=> d!27123 (= c!17203 lt!50658)))

(assert (=> d!27123 (= lt!50658 (containsKey!153 (toList!774 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) lt!50003))))

(assert (=> d!27123 (= (contains!799 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) lt!50003) lt!50659)))

(declare-fun b!100286 () Bool)

(declare-fun lt!50660 () Unit!2998)

(assert (=> b!100286 (= e!65300 lt!50660)))

(assert (=> b!100286 (= lt!50660 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) lt!50003))))

(assert (=> b!100286 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) lt!50003))))

(declare-fun b!100287 () Bool)

(declare-fun Unit!3051 () Unit!2998)

(assert (=> b!100287 (= e!65300 Unit!3051)))

(declare-fun b!100288 () Bool)

(assert (=> b!100288 (= e!65299 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16)))) lt!50003)))))

(assert (= (and d!27123 c!17203) b!100286))

(assert (= (and d!27123 (not c!17203)) b!100287))

(assert (= (and d!27123 (not res!50315)) b!100288))

(declare-fun m!110759 () Bool)

(assert (=> d!27123 m!110759))

(declare-fun m!110761 () Bool)

(assert (=> b!100286 m!110761))

(declare-fun m!110763 () Bool)

(assert (=> b!100286 m!110763))

(assert (=> b!100286 m!110763))

(declare-fun m!110765 () Bool)

(assert (=> b!100286 m!110765))

(assert (=> b!100288 m!110763))

(assert (=> b!100288 m!110763))

(assert (=> b!100288 m!110765))

(assert (=> b!99336 d!27123))

(declare-fun d!27125 () Bool)

(assert (=> d!27125 (= (apply!93 (+!129 lt!49992 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) lt!49995) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49992 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16)))) lt!49995)))))

(declare-fun bs!4149 () Bool)

(assert (= bs!4149 d!27125))

(declare-fun m!110767 () Bool)

(assert (=> bs!4149 m!110767))

(assert (=> bs!4149 m!110767))

(declare-fun m!110769 () Bool)

(assert (=> bs!4149 m!110769))

(assert (=> b!99336 d!27125))

(declare-fun d!27127 () Bool)

(assert (=> d!27127 (contains!799 (+!129 lt!49996 (tuple2!2333 lt!50005 (zeroValue!2382 newMap!16))) lt!50003)))

(declare-fun lt!50662 () Unit!2998)

(assert (=> d!27127 (= lt!50662 (choose!610 lt!49996 lt!50005 (zeroValue!2382 newMap!16) lt!50003))))

(assert (=> d!27127 (contains!799 lt!49996 lt!50003)))

(assert (=> d!27127 (= (addStillContains!69 lt!49996 lt!50005 (zeroValue!2382 newMap!16) lt!50003) lt!50662)))

(declare-fun bs!4150 () Bool)

(assert (= bs!4150 d!27127))

(assert (=> bs!4150 m!109031))

(assert (=> bs!4150 m!109031))

(assert (=> bs!4150 m!109033))

(declare-fun m!110771 () Bool)

(assert (=> bs!4150 m!110771))

(declare-fun m!110773 () Bool)

(assert (=> bs!4150 m!110773))

(assert (=> b!99336 d!27127))

(declare-fun d!27129 () Bool)

(assert (=> d!27129 (= (apply!93 (+!129 lt!49991 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) lt!50000) (apply!93 lt!49991 lt!50000))))

(declare-fun lt!50663 () Unit!2998)

(assert (=> d!27129 (= lt!50663 (choose!609 lt!49991 lt!50004 (minValue!2382 newMap!16) lt!50000))))

(declare-fun e!65301 () Bool)

(assert (=> d!27129 e!65301))

(declare-fun res!50316 () Bool)

(assert (=> d!27129 (=> (not res!50316) (not e!65301))))

(assert (=> d!27129 (= res!50316 (contains!799 lt!49991 lt!50000))))

(assert (=> d!27129 (= (addApplyDifferent!69 lt!49991 lt!50004 (minValue!2382 newMap!16) lt!50000) lt!50663)))

(declare-fun b!100289 () Bool)

(assert (=> b!100289 (= e!65301 (not (= lt!50000 lt!50004)))))

(assert (= (and d!27129 res!50316) b!100289))

(declare-fun m!110775 () Bool)

(assert (=> d!27129 m!110775))

(declare-fun m!110777 () Bool)

(assert (=> d!27129 m!110777))

(assert (=> d!27129 m!109049))

(assert (=> d!27129 m!109043))

(assert (=> d!27129 m!109051))

(assert (=> d!27129 m!109043))

(assert (=> b!99336 d!27129))

(declare-fun d!27131 () Bool)

(assert (=> d!27131 (= (apply!93 (+!129 lt!49991 (tuple2!2333 lt!50004 (minValue!2382 newMap!16))) lt!50000) (get!1294 (getValueByKey!149 (toList!774 (+!129 lt!49991 (tuple2!2333 lt!50004 (minValue!2382 newMap!16)))) lt!50000)))))

(declare-fun bs!4151 () Bool)

(assert (= bs!4151 d!27131))

(declare-fun m!110779 () Bool)

(assert (=> bs!4151 m!110779))

(assert (=> bs!4151 m!110779))

(declare-fun m!110781 () Bool)

(assert (=> bs!4151 m!110781))

(assert (=> b!99336 d!27131))

(declare-fun d!27133 () Bool)

(assert (=> d!27133 (= (apply!93 lt!49991 lt!50000) (get!1294 (getValueByKey!149 (toList!774 lt!49991) lt!50000)))))

(declare-fun bs!4152 () Bool)

(assert (= bs!4152 d!27133))

(declare-fun m!110783 () Bool)

(assert (=> bs!4152 m!110783))

(assert (=> bs!4152 m!110783))

(declare-fun m!110785 () Bool)

(assert (=> bs!4152 m!110785))

(assert (=> b!99336 d!27133))

(declare-fun d!27135 () Bool)

(assert (=> d!27135 (= (apply!93 (+!129 lt!49992 (tuple2!2333 lt!50002 (zeroValue!2382 newMap!16))) lt!49995) (apply!93 lt!49992 lt!49995))))

(declare-fun lt!50664 () Unit!2998)

(assert (=> d!27135 (= lt!50664 (choose!609 lt!49992 lt!50002 (zeroValue!2382 newMap!16) lt!49995))))

(declare-fun e!65302 () Bool)

(assert (=> d!27135 e!65302))

(declare-fun res!50317 () Bool)

(assert (=> d!27135 (=> (not res!50317) (not e!65302))))

(assert (=> d!27135 (= res!50317 (contains!799 lt!49992 lt!49995))))

(assert (=> d!27135 (= (addApplyDifferent!69 lt!49992 lt!50002 (zeroValue!2382 newMap!16) lt!49995) lt!50664)))

(declare-fun b!100290 () Bool)

(assert (=> b!100290 (= e!65302 (not (= lt!49995 lt!50002)))))

(assert (= (and d!27135 res!50317) b!100290))

(declare-fun m!110787 () Bool)

(assert (=> d!27135 m!110787))

(declare-fun m!110789 () Bool)

(assert (=> d!27135 m!110789))

(assert (=> d!27135 m!109053))

(assert (=> d!27135 m!109041))

(assert (=> d!27135 m!109055))

(assert (=> d!27135 m!109041))

(assert (=> b!99336 d!27135))

(declare-fun d!27137 () Bool)

(assert (=> d!27137 (= (apply!93 (+!129 lt!50001 (tuple2!2333 lt!49987 (minValue!2382 newMap!16))) lt!49993) (apply!93 lt!50001 lt!49993))))

(declare-fun lt!50665 () Unit!2998)

(assert (=> d!27137 (= lt!50665 (choose!609 lt!50001 lt!49987 (minValue!2382 newMap!16) lt!49993))))

(declare-fun e!65303 () Bool)

(assert (=> d!27137 e!65303))

(declare-fun res!50318 () Bool)

(assert (=> d!27137 (=> (not res!50318) (not e!65303))))

(assert (=> d!27137 (= res!50318 (contains!799 lt!50001 lt!49993))))

(assert (=> d!27137 (= (addApplyDifferent!69 lt!50001 lt!49987 (minValue!2382 newMap!16) lt!49993) lt!50665)))

(declare-fun b!100291 () Bool)

(assert (=> b!100291 (= e!65303 (not (= lt!49993 lt!49987)))))

(assert (= (and d!27137 res!50318) b!100291))

(declare-fun m!110791 () Bool)

(assert (=> d!27137 m!110791))

(declare-fun m!110793 () Bool)

(assert (=> d!27137 m!110793))

(assert (=> d!27137 m!109027))

(assert (=> d!27137 m!109037))

(assert (=> d!27137 m!109039))

(assert (=> d!27137 m!109037))

(assert (=> b!99336 d!27137))

(declare-fun d!27139 () Bool)

(declare-fun lt!50666 () Bool)

(assert (=> d!27139 (= lt!50666 (select (content!104 (toList!774 lt!49927)) (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun e!65305 () Bool)

(assert (=> d!27139 (= lt!50666 e!65305)))

(declare-fun res!50319 () Bool)

(assert (=> d!27139 (=> (not res!50319) (not e!65305))))

(assert (=> d!27139 (= res!50319 ((_ is Cons!1587) (toList!774 lt!49927)))))

(assert (=> d!27139 (= (contains!801 (toList!774 lt!49927) (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))) lt!50666)))

(declare-fun b!100292 () Bool)

(declare-fun e!65304 () Bool)

(assert (=> b!100292 (= e!65305 e!65304)))

(declare-fun res!50320 () Bool)

(assert (=> b!100292 (=> res!50320 e!65304)))

(assert (=> b!100292 (= res!50320 (= (h!2182 (toList!774 lt!49927)) (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!100293 () Bool)

(assert (=> b!100293 (= e!65304 (contains!801 (t!5556 (toList!774 lt!49927)) (tuple2!2333 lt!49914 (zeroValue!2382 (v!2807 (underlying!334 thiss!992))))))))

(assert (= (and d!27139 res!50319) b!100292))

(assert (= (and b!100292 (not res!50320)) b!100293))

(declare-fun m!110795 () Bool)

(assert (=> d!27139 m!110795))

(declare-fun m!110797 () Bool)

(assert (=> d!27139 m!110797))

(declare-fun m!110799 () Bool)

(assert (=> b!100293 m!110799))

(assert (=> b!99259 d!27139))

(declare-fun d!27141 () Bool)

(declare-fun e!65306 () Bool)

(assert (=> d!27141 e!65306))

(declare-fun res!50321 () Bool)

(assert (=> d!27141 (=> res!50321 e!65306)))

(declare-fun lt!50668 () Bool)

(assert (=> d!27141 (= res!50321 (not lt!50668))))

(declare-fun lt!50667 () Bool)

(assert (=> d!27141 (= lt!50668 lt!50667)))

(declare-fun lt!50670 () Unit!2998)

(declare-fun e!65307 () Unit!2998)

(assert (=> d!27141 (= lt!50670 e!65307)))

(declare-fun c!17204 () Bool)

(assert (=> d!27141 (= c!17204 lt!50667)))

(assert (=> d!27141 (= lt!50667 (containsKey!153 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!27141 (= (contains!799 lt!50137 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!50668)))

(declare-fun b!100294 () Bool)

(declare-fun lt!50669 () Unit!2998)

(assert (=> b!100294 (= e!65307 lt!50669)))

(assert (=> b!100294 (= lt!50669 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!100294 (isDefined!103 (getValueByKey!149 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100295 () Bool)

(declare-fun Unit!3052 () Unit!2998)

(assert (=> b!100295 (= e!65307 Unit!3052)))

(declare-fun b!100296 () Bool)

(assert (=> b!100296 (= e!65306 (isDefined!103 (getValueByKey!149 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27141 c!17204) b!100294))

(assert (= (and d!27141 (not c!17204)) b!100295))

(assert (= (and d!27141 (not res!50321)) b!100296))

(declare-fun m!110801 () Bool)

(assert (=> d!27141 m!110801))

(declare-fun m!110803 () Bool)

(assert (=> b!100294 m!110803))

(assert (=> b!100294 m!109195))

(assert (=> b!100294 m!109195))

(declare-fun m!110805 () Bool)

(assert (=> b!100294 m!110805))

(assert (=> b!100296 m!109195))

(assert (=> b!100296 m!109195))

(assert (=> b!100296 m!110805))

(assert (=> d!26661 d!27141))

(declare-fun b!100300 () Bool)

(declare-fun e!65309 () Option!155)

(assert (=> b!100300 (= e!65309 None!153)))

(declare-fun b!100299 () Bool)

(assert (=> b!100299 (= e!65309 (getValueByKey!149 (t!5556 lt!50138) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun d!27143 () Bool)

(declare-fun c!17205 () Bool)

(assert (=> d!27143 (= c!17205 (and ((_ is Cons!1587) lt!50138) (= (_1!1177 (h!2182 lt!50138)) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun e!65308 () Option!155)

(assert (=> d!27143 (= (getValueByKey!149 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) e!65308)))

(declare-fun b!100297 () Bool)

(assert (=> b!100297 (= e!65308 (Some!154 (_2!1177 (h!2182 lt!50138))))))

(declare-fun b!100298 () Bool)

(assert (=> b!100298 (= e!65308 e!65309)))

(declare-fun c!17206 () Bool)

(assert (=> b!100298 (= c!17206 (and ((_ is Cons!1587) lt!50138) (not (= (_1!1177 (h!2182 lt!50138)) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(assert (= (and d!27143 c!17205) b!100297))

(assert (= (and d!27143 (not c!17205)) b!100298))

(assert (= (and b!100298 c!17206) b!100299))

(assert (= (and b!100298 (not c!17206)) b!100300))

(declare-fun m!110807 () Bool)

(assert (=> b!100299 m!110807))

(assert (=> d!26661 d!27143))

(declare-fun d!27145 () Bool)

(assert (=> d!27145 (= (getValueByKey!149 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) (Some!154 (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun lt!50671 () Unit!2998)

(assert (=> d!27145 (= lt!50671 (choose!618 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65310 () Bool)

(assert (=> d!27145 e!65310))

(declare-fun res!50322 () Bool)

(assert (=> d!27145 (=> (not res!50322) (not e!65310))))

(assert (=> d!27145 (= res!50322 (isStrictlySorted!300 lt!50138))))

(assert (=> d!27145 (= (lemmaContainsTupThenGetReturnValue!68 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!50671)))

(declare-fun b!100301 () Bool)

(declare-fun res!50323 () Bool)

(assert (=> b!100301 (=> (not res!50323) (not e!65310))))

(assert (=> b!100301 (= res!50323 (containsKey!153 lt!50138 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100302 () Bool)

(assert (=> b!100302 (= e!65310 (contains!801 lt!50138 (tuple2!2333 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27145 res!50322) b!100301))

(assert (= (and b!100301 res!50323) b!100302))

(assert (=> d!27145 m!109189))

(declare-fun m!110809 () Bool)

(assert (=> d!27145 m!110809))

(declare-fun m!110811 () Bool)

(assert (=> d!27145 m!110811))

(declare-fun m!110813 () Bool)

(assert (=> b!100301 m!110813))

(declare-fun m!110815 () Bool)

(assert (=> b!100302 m!110815))

(assert (=> d!26661 d!27145))

(declare-fun bm!10333 () Bool)

(declare-fun call!10337 () List!1591)

(declare-fun call!10336 () List!1591)

(assert (=> bm!10333 (= call!10337 call!10336)))

(declare-fun d!27147 () Bool)

(declare-fun e!65312 () Bool)

(assert (=> d!27147 e!65312))

(declare-fun res!50325 () Bool)

(assert (=> d!27147 (=> (not res!50325) (not e!65312))))

(declare-fun lt!50672 () List!1591)

(assert (=> d!27147 (= res!50325 (isStrictlySorted!300 lt!50672))))

(declare-fun e!65314 () List!1591)

(assert (=> d!27147 (= lt!50672 e!65314)))

(declare-fun c!17210 () Bool)

(assert (=> d!27147 (= c!17210 (and ((_ is Cons!1587) (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (bvslt (_1!1177 (h!2182 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (=> d!27147 (isStrictlySorted!300 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))))))

(assert (=> d!27147 (= (insertStrictlySorted!71 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) lt!50672)))

(declare-fun b!100303 () Bool)

(declare-fun e!65311 () List!1591)

(assert (=> b!100303 (= e!65311 (insertStrictlySorted!71 (t!5556 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100304 () Bool)

(declare-fun e!65313 () List!1591)

(declare-fun call!10338 () List!1591)

(assert (=> b!100304 (= e!65313 call!10338)))

(declare-fun b!100305 () Bool)

(assert (=> b!100305 (= e!65313 call!10338)))

(declare-fun b!100306 () Bool)

(assert (=> b!100306 (= e!65314 call!10336)))

(declare-fun b!100307 () Bool)

(declare-fun res!50324 () Bool)

(assert (=> b!100307 (=> (not res!50324) (not e!65312))))

(assert (=> b!100307 (= res!50324 (containsKey!153 lt!50672 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100308 () Bool)

(declare-fun e!65315 () List!1591)

(assert (=> b!100308 (= e!65314 e!65315)))

(declare-fun c!17208 () Bool)

(assert (=> b!100308 (= c!17208 (and ((_ is Cons!1587) (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (= (_1!1177 (h!2182 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun b!100309 () Bool)

(assert (=> b!100309 (= e!65312 (contains!801 lt!50672 (tuple2!2333 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun bm!10334 () Bool)

(assert (=> bm!10334 (= call!10338 call!10337)))

(declare-fun bm!10335 () Bool)

(assert (=> bm!10335 (= call!10336 ($colon$colon!78 e!65311 (ite c!17210 (h!2182 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (tuple2!2333 (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (_2!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(declare-fun c!17207 () Bool)

(assert (=> bm!10335 (= c!17207 c!17210)))

(declare-fun b!100310 () Bool)

(assert (=> b!100310 (= e!65315 call!10337)))

(declare-fun b!100311 () Bool)

(declare-fun c!17209 () Bool)

(assert (=> b!100311 (= e!65311 (ite c!17208 (t!5556 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (ite c!17209 (Cons!1587 (h!2182 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (t!5556 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))))) Nil!1588)))))

(declare-fun b!100312 () Bool)

(assert (=> b!100312 (= c!17209 (and ((_ is Cons!1587) (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188)))) (bvsgt (_1!1177 (h!2182 (toList!774 (ite c!16917 call!10191 (ite c!16916 call!10192 call!10188))))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (=> b!100312 (= e!65315 e!65313)))

(assert (= (and d!27147 c!17210) b!100306))

(assert (= (and d!27147 (not c!17210)) b!100308))

(assert (= (and b!100308 c!17208) b!100310))

(assert (= (and b!100308 (not c!17208)) b!100312))

(assert (= (and b!100312 c!17209) b!100305))

(assert (= (and b!100312 (not c!17209)) b!100304))

(assert (= (or b!100305 b!100304) bm!10334))

(assert (= (or b!100310 bm!10334) bm!10333))

(assert (= (or b!100306 bm!10333) bm!10335))

(assert (= (and bm!10335 c!17207) b!100303))

(assert (= (and bm!10335 (not c!17207)) b!100311))

(assert (= (and d!27147 res!50325) b!100307))

(assert (= (and b!100307 res!50324) b!100309))

(declare-fun m!110817 () Bool)

(assert (=> d!27147 m!110817))

(declare-fun m!110819 () Bool)

(assert (=> d!27147 m!110819))

(declare-fun m!110821 () Bool)

(assert (=> b!100307 m!110821))

(declare-fun m!110823 () Bool)

(assert (=> b!100309 m!110823))

(declare-fun m!110825 () Bool)

(assert (=> bm!10335 m!110825))

(declare-fun m!110827 () Bool)

(assert (=> b!100303 m!110827))

(assert (=> d!26661 d!27147))

(assert (=> b!99421 d!26637))

(declare-fun d!27149 () Bool)

(declare-fun e!65316 () Bool)

(assert (=> d!27149 e!65316))

(declare-fun res!50326 () Bool)

(assert (=> d!27149 (=> res!50326 e!65316)))

(declare-fun lt!50674 () Bool)

(assert (=> d!27149 (= res!50326 (not lt!50674))))

(declare-fun lt!50673 () Bool)

(assert (=> d!27149 (= lt!50674 lt!50673)))

(declare-fun lt!50676 () Unit!2998)

(declare-fun e!65317 () Unit!2998)

(assert (=> d!27149 (= lt!50676 e!65317)))

(declare-fun c!17211 () Bool)

(assert (=> d!27149 (= c!17211 lt!50673)))

(assert (=> d!27149 (= lt!50673 (containsKey!153 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27149 (= (contains!799 lt!50151 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50674)))

(declare-fun b!100313 () Bool)

(declare-fun lt!50675 () Unit!2998)

(assert (=> b!100313 (= e!65317 lt!50675)))

(assert (=> b!100313 (= lt!50675 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100313 (isDefined!103 (getValueByKey!149 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100314 () Bool)

(declare-fun Unit!3053 () Unit!2998)

(assert (=> b!100314 (= e!65317 Unit!3053)))

(declare-fun b!100315 () Bool)

(assert (=> b!100315 (= e!65316 (isDefined!103 (getValueByKey!149 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27149 c!17211) b!100313))

(assert (= (and d!27149 (not c!17211)) b!100314))

(assert (= (and d!27149 (not res!50326)) b!100315))

(declare-fun m!110829 () Bool)

(assert (=> d!27149 m!110829))

(declare-fun m!110831 () Bool)

(assert (=> b!100313 m!110831))

(assert (=> b!100313 m!109225))

(assert (=> b!100313 m!109225))

(declare-fun m!110833 () Bool)

(assert (=> b!100313 m!110833))

(assert (=> b!100315 m!109225))

(assert (=> b!100315 m!109225))

(assert (=> b!100315 m!110833))

(assert (=> d!26669 d!27149))

(declare-fun b!100319 () Bool)

(declare-fun e!65319 () Option!155)

(assert (=> b!100319 (= e!65319 None!153)))

(declare-fun b!100318 () Bool)

(assert (=> b!100318 (= e!65319 (getValueByKey!149 (t!5556 lt!50152) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!17212 () Bool)

(declare-fun d!27151 () Bool)

(assert (=> d!27151 (= c!17212 (and ((_ is Cons!1587) lt!50152) (= (_1!1177 (h!2182 lt!50152)) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!65318 () Option!155)

(assert (=> d!27151 (= (getValueByKey!149 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65318)))

(declare-fun b!100316 () Bool)

(assert (=> b!100316 (= e!65318 (Some!154 (_2!1177 (h!2182 lt!50152))))))

(declare-fun b!100317 () Bool)

(assert (=> b!100317 (= e!65318 e!65319)))

(declare-fun c!17213 () Bool)

(assert (=> b!100317 (= c!17213 (and ((_ is Cons!1587) lt!50152) (not (= (_1!1177 (h!2182 lt!50152)) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!27151 c!17212) b!100316))

(assert (= (and d!27151 (not c!17212)) b!100317))

(assert (= (and b!100317 c!17213) b!100318))

(assert (= (and b!100317 (not c!17213)) b!100319))

(declare-fun m!110835 () Bool)

(assert (=> b!100318 m!110835))

(assert (=> d!26669 d!27151))

(declare-fun d!27153 () Bool)

(assert (=> d!27153 (= (getValueByKey!149 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50677 () Unit!2998)

(assert (=> d!27153 (= lt!50677 (choose!618 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65320 () Bool)

(assert (=> d!27153 e!65320))

(declare-fun res!50327 () Bool)

(assert (=> d!27153 (=> (not res!50327) (not e!65320))))

(assert (=> d!27153 (= res!50327 (isStrictlySorted!300 lt!50152))))

(assert (=> d!27153 (= (lemmaContainsTupThenGetReturnValue!68 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50677)))

(declare-fun b!100320 () Bool)

(declare-fun res!50328 () Bool)

(assert (=> b!100320 (=> (not res!50328) (not e!65320))))

(assert (=> b!100320 (= res!50328 (containsKey!153 lt!50152 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100321 () Bool)

(assert (=> b!100321 (= e!65320 (contains!801 lt!50152 (tuple2!2333 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27153 res!50327) b!100320))

(assert (= (and b!100320 res!50328) b!100321))

(assert (=> d!27153 m!109219))

(declare-fun m!110837 () Bool)

(assert (=> d!27153 m!110837))

(declare-fun m!110839 () Bool)

(assert (=> d!27153 m!110839))

(declare-fun m!110841 () Bool)

(assert (=> b!100320 m!110841))

(declare-fun m!110843 () Bool)

(assert (=> b!100321 m!110843))

(assert (=> d!26669 d!27153))

(declare-fun bm!10336 () Bool)

(declare-fun call!10340 () List!1591)

(declare-fun call!10339 () List!1591)

(assert (=> bm!10336 (= call!10340 call!10339)))

(declare-fun d!27155 () Bool)

(declare-fun e!65322 () Bool)

(assert (=> d!27155 e!65322))

(declare-fun res!50330 () Bool)

(assert (=> d!27155 (=> (not res!50330) (not e!65322))))

(declare-fun lt!50678 () List!1591)

(assert (=> d!27155 (= res!50330 (isStrictlySorted!300 lt!50678))))

(declare-fun e!65324 () List!1591)

(assert (=> d!27155 (= lt!50678 e!65324)))

(declare-fun c!17217 () Bool)

(assert (=> d!27155 (= c!17217 (and ((_ is Cons!1587) (toList!774 e!64614)) (bvslt (_1!1177 (h!2182 (toList!774 e!64614))) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27155 (isStrictlySorted!300 (toList!774 e!64614))))

(assert (=> d!27155 (= (insertStrictlySorted!71 (toList!774 e!64614) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50678)))

(declare-fun e!65321 () List!1591)

(declare-fun b!100322 () Bool)

(assert (=> b!100322 (= e!65321 (insertStrictlySorted!71 (t!5556 (toList!774 e!64614)) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100323 () Bool)

(declare-fun e!65323 () List!1591)

(declare-fun call!10341 () List!1591)

(assert (=> b!100323 (= e!65323 call!10341)))

(declare-fun b!100324 () Bool)

(assert (=> b!100324 (= e!65323 call!10341)))

(declare-fun b!100325 () Bool)

(assert (=> b!100325 (= e!65324 call!10339)))

(declare-fun b!100326 () Bool)

(declare-fun res!50329 () Bool)

(assert (=> b!100326 (=> (not res!50329) (not e!65322))))

(assert (=> b!100326 (= res!50329 (containsKey!153 lt!50678 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100327 () Bool)

(declare-fun e!65325 () List!1591)

(assert (=> b!100327 (= e!65324 e!65325)))

(declare-fun c!17215 () Bool)

(assert (=> b!100327 (= c!17215 (and ((_ is Cons!1587) (toList!774 e!64614)) (= (_1!1177 (h!2182 (toList!774 e!64614))) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100328 () Bool)

(assert (=> b!100328 (= e!65322 (contains!801 lt!50678 (tuple2!2333 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!10337 () Bool)

(assert (=> bm!10337 (= call!10341 call!10340)))

(declare-fun bm!10338 () Bool)

(assert (=> bm!10338 (= call!10339 ($colon$colon!78 e!65321 (ite c!17217 (h!2182 (toList!774 e!64614)) (tuple2!2333 (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!17214 () Bool)

(assert (=> bm!10338 (= c!17214 c!17217)))

(declare-fun b!100329 () Bool)

(assert (=> b!100329 (= e!65325 call!10340)))

(declare-fun c!17216 () Bool)

(declare-fun b!100330 () Bool)

(assert (=> b!100330 (= e!65321 (ite c!17215 (t!5556 (toList!774 e!64614)) (ite c!17216 (Cons!1587 (h!2182 (toList!774 e!64614)) (t!5556 (toList!774 e!64614))) Nil!1588)))))

(declare-fun b!100331 () Bool)

(assert (=> b!100331 (= c!17216 (and ((_ is Cons!1587) (toList!774 e!64614)) (bvsgt (_1!1177 (h!2182 (toList!774 e!64614))) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!100331 (= e!65325 e!65323)))

(assert (= (and d!27155 c!17217) b!100325))

(assert (= (and d!27155 (not c!17217)) b!100327))

(assert (= (and b!100327 c!17215) b!100329))

(assert (= (and b!100327 (not c!17215)) b!100331))

(assert (= (and b!100331 c!17216) b!100324))

(assert (= (and b!100331 (not c!17216)) b!100323))

(assert (= (or b!100324 b!100323) bm!10337))

(assert (= (or b!100329 bm!10337) bm!10336))

(assert (= (or b!100325 bm!10336) bm!10338))

(assert (= (and bm!10338 c!17214) b!100322))

(assert (= (and bm!10338 (not c!17214)) b!100330))

(assert (= (and d!27155 res!50330) b!100326))

(assert (= (and b!100326 res!50329) b!100328))

(declare-fun m!110845 () Bool)

(assert (=> d!27155 m!110845))

(declare-fun m!110847 () Bool)

(assert (=> d!27155 m!110847))

(declare-fun m!110849 () Bool)

(assert (=> b!100326 m!110849))

(declare-fun m!110851 () Bool)

(assert (=> b!100328 m!110851))

(declare-fun m!110853 () Bool)

(assert (=> bm!10338 m!110853))

(declare-fun m!110855 () Bool)

(assert (=> b!100322 m!110855))

(assert (=> d!26669 d!27155))

(declare-fun d!27157 () Bool)

(declare-fun res!50331 () Bool)

(declare-fun e!65326 () Bool)

(assert (=> d!27157 (=> res!50331 e!65326)))

(assert (=> d!27157 (= res!50331 (and ((_ is Cons!1587) (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (= (_1!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(assert (=> d!27157 (= (containsKey!153 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!65326)))

(declare-fun b!100332 () Bool)

(declare-fun e!65327 () Bool)

(assert (=> b!100332 (= e!65326 e!65327)))

(declare-fun res!50332 () Bool)

(assert (=> b!100332 (=> (not res!50332) (not e!65327))))

(assert (=> b!100332 (= res!50332 (and (or (not ((_ is Cons!1587) (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (bvsle (_1!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))) ((_ is Cons!1587) (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (bvslt (_1!1177 (h!2182 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun b!100333 () Bool)

(assert (=> b!100333 (= e!65327 (containsKey!153 (t!5556 (toList!774 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (= (and d!27157 (not res!50331)) b!100332))

(assert (= (and b!100332 res!50332) b!100333))

(assert (=> b!100333 m!108591))

(declare-fun m!110857 () Bool)

(assert (=> b!100333 m!110857))

(assert (=> d!26667 d!27157))

(declare-fun d!27159 () Bool)

(declare-fun e!65328 () Bool)

(assert (=> d!27159 e!65328))

(declare-fun res!50333 () Bool)

(assert (=> d!27159 (=> res!50333 e!65328)))

(declare-fun lt!50680 () Bool)

(assert (=> d!27159 (= res!50333 (not lt!50680))))

(declare-fun lt!50679 () Bool)

(assert (=> d!27159 (= lt!50680 lt!50679)))

(declare-fun lt!50682 () Unit!2998)

(declare-fun e!65329 () Unit!2998)

(assert (=> d!27159 (= lt!50682 e!65329)))

(declare-fun c!17218 () Bool)

(assert (=> d!27159 (= c!17218 lt!50679)))

(assert (=> d!27159 (= lt!50679 (containsKey!153 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> d!27159 (= (contains!799 lt!49968 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50680)))

(declare-fun b!100334 () Bool)

(declare-fun lt!50681 () Unit!2998)

(assert (=> b!100334 (= e!65329 lt!50681)))

(assert (=> b!100334 (= lt!50681 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(assert (=> b!100334 (isDefined!103 (getValueByKey!149 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100335 () Bool)

(declare-fun Unit!3054 () Unit!2998)

(assert (=> b!100335 (= e!65329 Unit!3054)))

(declare-fun b!100336 () Bool)

(assert (=> b!100336 (= e!65328 (isDefined!103 (getValueByKey!149 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27159 c!17218) b!100334))

(assert (= (and d!27159 (not c!17218)) b!100335))

(assert (= (and d!27159 (not res!50333)) b!100336))

(declare-fun m!110859 () Bool)

(assert (=> d!27159 m!110859))

(declare-fun m!110861 () Bool)

(assert (=> b!100334 m!110861))

(assert (=> b!100334 m!108961))

(assert (=> b!100334 m!108961))

(declare-fun m!110863 () Bool)

(assert (=> b!100334 m!110863))

(assert (=> b!100336 m!108961))

(assert (=> b!100336 m!108961))

(assert (=> b!100336 m!110863))

(assert (=> d!26617 d!27159))

(declare-fun b!100340 () Bool)

(declare-fun e!65331 () Option!155)

(assert (=> b!100340 (= e!65331 None!153)))

(declare-fun b!100339 () Bool)

(assert (=> b!100339 (= e!65331 (getValueByKey!149 (t!5556 lt!49969) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun c!17219 () Bool)

(declare-fun d!27161 () Bool)

(assert (=> d!27161 (= c!17219 (and ((_ is Cons!1587) lt!49969) (= (_1!1177 (h!2182 lt!49969)) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65330 () Option!155)

(assert (=> d!27161 (= (getValueByKey!149 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65330)))

(declare-fun b!100337 () Bool)

(assert (=> b!100337 (= e!65330 (Some!154 (_2!1177 (h!2182 lt!49969))))))

(declare-fun b!100338 () Bool)

(assert (=> b!100338 (= e!65330 e!65331)))

(declare-fun c!17220 () Bool)

(assert (=> b!100338 (= c!17220 (and ((_ is Cons!1587) lt!49969) (not (= (_1!1177 (h!2182 lt!49969)) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27161 c!17219) b!100337))

(assert (= (and d!27161 (not c!17219)) b!100338))

(assert (= (and b!100338 c!17220) b!100339))

(assert (= (and b!100338 (not c!17220)) b!100340))

(declare-fun m!110865 () Bool)

(assert (=> b!100339 m!110865))

(assert (=> d!26617 d!27161))

(declare-fun d!27163 () Bool)

(assert (=> d!27163 (= (getValueByKey!149 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) (Some!154 (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun lt!50683 () Unit!2998)

(assert (=> d!27163 (= lt!50683 (choose!618 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun e!65332 () Bool)

(assert (=> d!27163 e!65332))

(declare-fun res!50334 () Bool)

(assert (=> d!27163 (=> (not res!50334) (not e!65332))))

(assert (=> d!27163 (= res!50334 (isStrictlySorted!300 lt!49969))))

(assert (=> d!27163 (= (lemmaContainsTupThenGetReturnValue!68 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50683)))

(declare-fun b!100341 () Bool)

(declare-fun res!50335 () Bool)

(assert (=> b!100341 (=> (not res!50335) (not e!65332))))

(assert (=> b!100341 (= res!50335 (containsKey!153 lt!49969 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100342 () Bool)

(assert (=> b!100342 (= e!65332 (contains!801 lt!49969 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (= (and d!27163 res!50334) b!100341))

(assert (= (and b!100341 res!50335) b!100342))

(assert (=> d!27163 m!108955))

(declare-fun m!110867 () Bool)

(assert (=> d!27163 m!110867))

(declare-fun m!110869 () Bool)

(assert (=> d!27163 m!110869))

(declare-fun m!110871 () Bool)

(assert (=> b!100341 m!110871))

(declare-fun m!110873 () Bool)

(assert (=> b!100342 m!110873))

(assert (=> d!26617 d!27163))

(declare-fun bm!10339 () Bool)

(declare-fun call!10343 () List!1591)

(declare-fun call!10342 () List!1591)

(assert (=> bm!10339 (= call!10343 call!10342)))

(declare-fun d!27165 () Bool)

(declare-fun e!65334 () Bool)

(assert (=> d!27165 e!65334))

(declare-fun res!50337 () Bool)

(assert (=> d!27165 (=> (not res!50337) (not e!65334))))

(declare-fun lt!50684 () List!1591)

(assert (=> d!27165 (= res!50337 (isStrictlySorted!300 lt!50684))))

(declare-fun e!65336 () List!1591)

(assert (=> d!27165 (= lt!50684 e!65336)))

(declare-fun c!17224 () Bool)

(assert (=> d!27165 (= c!17224 (and ((_ is Cons!1587) (toList!774 lt!49913)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49913))) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> d!27165 (isStrictlySorted!300 (toList!774 lt!49913))))

(assert (=> d!27165 (= (insertStrictlySorted!71 (toList!774 lt!49913) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) lt!50684)))

(declare-fun e!65333 () List!1591)

(declare-fun b!100343 () Bool)

(assert (=> b!100343 (= e!65333 (insertStrictlySorted!71 (t!5556 (toList!774 lt!49913)) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100344 () Bool)

(declare-fun e!65335 () List!1591)

(declare-fun call!10344 () List!1591)

(assert (=> b!100344 (= e!65335 call!10344)))

(declare-fun b!100345 () Bool)

(assert (=> b!100345 (= e!65335 call!10344)))

(declare-fun b!100346 () Bool)

(assert (=> b!100346 (= e!65336 call!10342)))

(declare-fun b!100347 () Bool)

(declare-fun res!50336 () Bool)

(assert (=> b!100347 (=> (not res!50336) (not e!65334))))

(assert (=> b!100347 (= res!50336 (containsKey!153 lt!50684 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun b!100348 () Bool)

(declare-fun e!65337 () List!1591)

(assert (=> b!100348 (= e!65336 e!65337)))

(declare-fun c!17222 () Bool)

(assert (=> b!100348 (= c!17222 (and ((_ is Cons!1587) (toList!774 lt!49913)) (= (_1!1177 (h!2182 (toList!774 lt!49913))) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun b!100349 () Bool)

(assert (=> b!100349 (= e!65334 (contains!801 lt!50684 (tuple2!2333 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun bm!10340 () Bool)

(assert (=> bm!10340 (= call!10344 call!10343)))

(declare-fun bm!10341 () Bool)

(assert (=> bm!10341 (= call!10342 ($colon$colon!78 e!65333 (ite c!17224 (h!2182 (toList!774 lt!49913)) (tuple2!2333 (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))) (_2!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun c!17221 () Bool)

(assert (=> bm!10341 (= c!17221 c!17224)))

(declare-fun b!100350 () Bool)

(assert (=> b!100350 (= e!65337 call!10343)))

(declare-fun c!17223 () Bool)

(declare-fun b!100351 () Bool)

(assert (=> b!100351 (= e!65333 (ite c!17222 (t!5556 (toList!774 lt!49913)) (ite c!17223 (Cons!1587 (h!2182 (toList!774 lt!49913)) (t!5556 (toList!774 lt!49913))) Nil!1588)))))

(declare-fun b!100352 () Bool)

(assert (=> b!100352 (= c!17223 (and ((_ is Cons!1587) (toList!774 lt!49913)) (bvsgt (_1!1177 (h!2182 (toList!774 lt!49913))) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(assert (=> b!100352 (= e!65337 e!65335)))

(assert (= (and d!27165 c!17224) b!100346))

(assert (= (and d!27165 (not c!17224)) b!100348))

(assert (= (and b!100348 c!17222) b!100350))

(assert (= (and b!100348 (not c!17222)) b!100352))

(assert (= (and b!100352 c!17223) b!100345))

(assert (= (and b!100352 (not c!17223)) b!100344))

(assert (= (or b!100345 b!100344) bm!10340))

(assert (= (or b!100350 bm!10340) bm!10339))

(assert (= (or b!100346 bm!10339) bm!10341))

(assert (= (and bm!10341 c!17221) b!100343))

(assert (= (and bm!10341 (not c!17221)) b!100351))

(assert (= (and d!27165 res!50337) b!100347))

(assert (= (and b!100347 res!50336) b!100349))

(declare-fun m!110875 () Bool)

(assert (=> d!27165 m!110875))

(declare-fun m!110877 () Bool)

(assert (=> d!27165 m!110877))

(declare-fun m!110879 () Bool)

(assert (=> b!100347 m!110879))

(declare-fun m!110881 () Bool)

(assert (=> b!100349 m!110881))

(declare-fun m!110883 () Bool)

(assert (=> bm!10341 m!110883))

(declare-fun m!110885 () Bool)

(assert (=> b!100343 m!110885))

(assert (=> d!26617 d!27165))

(declare-fun d!27167 () Bool)

(declare-fun e!65338 () Bool)

(assert (=> d!27167 e!65338))

(declare-fun res!50338 () Bool)

(assert (=> d!27167 (=> res!50338 e!65338)))

(declare-fun lt!50686 () Bool)

(assert (=> d!27167 (= res!50338 (not lt!50686))))

(declare-fun lt!50685 () Bool)

(assert (=> d!27167 (= lt!50686 lt!50685)))

(declare-fun lt!50688 () Unit!2998)

(declare-fun e!65339 () Unit!2998)

(assert (=> d!27167 (= lt!50688 e!65339)))

(declare-fun c!17225 () Bool)

(assert (=> d!27167 (= c!17225 lt!50685)))

(assert (=> d!27167 (= lt!50685 (containsKey!153 (toList!774 lt!49945) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27167 (= (contains!799 lt!49945 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50686)))

(declare-fun b!100353 () Bool)

(declare-fun lt!50687 () Unit!2998)

(assert (=> b!100353 (= e!65339 lt!50687)))

(assert (=> b!100353 (= lt!50687 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49945) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100353 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100354 () Bool)

(declare-fun Unit!3055 () Unit!2998)

(assert (=> b!100354 (= e!65339 Unit!3055)))

(declare-fun b!100355 () Bool)

(assert (=> b!100355 (= e!65338 (isDefined!103 (getValueByKey!149 (toList!774 lt!49945) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27167 c!17225) b!100353))

(assert (= (and d!27167 (not c!17225)) b!100354))

(assert (= (and d!27167 (not res!50338)) b!100355))

(declare-fun m!110887 () Bool)

(assert (=> d!27167 m!110887))

(declare-fun m!110889 () Bool)

(assert (=> b!100353 m!110889))

(declare-fun m!110891 () Bool)

(assert (=> b!100353 m!110891))

(assert (=> b!100353 m!110891))

(declare-fun m!110893 () Bool)

(assert (=> b!100353 m!110893))

(assert (=> b!100355 m!110891))

(assert (=> b!100355 m!110891))

(assert (=> b!100355 m!110893))

(assert (=> d!26599 d!27167))

(assert (=> d!26599 d!26583))

(declare-fun b!100359 () Bool)

(declare-fun e!65341 () Option!155)

(assert (=> b!100359 (= e!65341 None!153)))

(declare-fun b!100358 () Bool)

(assert (=> b!100358 (= e!65341 (getValueByKey!149 (t!5556 (t!5556 (toList!774 lt!49704))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(declare-fun c!17226 () Bool)

(declare-fun d!27169 () Bool)

(assert (=> d!27169 (= c!17226 (and ((_ is Cons!1587) (t!5556 (toList!774 lt!49704))) (= (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))))

(declare-fun e!65340 () Option!155)

(assert (=> d!27169 (= (getValueByKey!149 (t!5556 (toList!774 lt!49704)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)) e!65340)))

(declare-fun b!100356 () Bool)

(assert (=> b!100356 (= e!65340 (Some!154 (_2!1177 (h!2182 (t!5556 (toList!774 lt!49704))))))))

(declare-fun b!100357 () Bool)

(assert (=> b!100357 (= e!65340 e!65341)))

(declare-fun c!17227 () Bool)

(assert (=> b!100357 (= c!17227 (and ((_ is Cons!1587) (t!5556 (toList!774 lt!49704))) (not (= (_1!1177 (h!2182 (t!5556 (toList!774 lt!49704)))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))))

(assert (= (and d!27169 c!17226) b!100356))

(assert (= (and d!27169 (not c!17226)) b!100357))

(assert (= (and b!100357 c!17227) b!100358))

(assert (= (and b!100357 (not c!17227)) b!100359))

(assert (=> b!100358 m!108591))

(declare-fun m!110895 () Bool)

(assert (=> b!100358 m!110895))

(assert (=> b!99568 d!27169))

(assert (=> b!99325 d!26735))

(assert (=> d!26589 d!26717))

(assert (=> b!99481 d!26809))

(assert (=> b!99481 d!26811))

(declare-fun b!100363 () Bool)

(declare-fun e!65343 () Option!155)

(assert (=> b!100363 (= e!65343 None!153)))

(declare-fun b!100362 () Bool)

(assert (=> b!100362 (= e!65343 (getValueByKey!149 (t!5556 (toList!774 lt!49963)) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun c!17228 () Bool)

(declare-fun d!27171 () Bool)

(assert (=> d!27171 (= c!17228 (and ((_ is Cons!1587) (toList!774 lt!49963)) (= (_1!1177 (h!2182 (toList!774 lt!49963))) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65342 () Option!155)

(assert (=> d!27171 (= (getValueByKey!149 (toList!774 lt!49963) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65342)))

(declare-fun b!100360 () Bool)

(assert (=> b!100360 (= e!65342 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49963)))))))

(declare-fun b!100361 () Bool)

(assert (=> b!100361 (= e!65342 e!65343)))

(declare-fun c!17229 () Bool)

(assert (=> b!100361 (= c!17229 (and ((_ is Cons!1587) (toList!774 lt!49963)) (not (= (_1!1177 (h!2182 (toList!774 lt!49963))) (_1!1177 (tuple2!2333 lt!49916 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27171 c!17228) b!100360))

(assert (= (and d!27171 (not c!17228)) b!100361))

(assert (= (and b!100361 c!17229) b!100362))

(assert (= (and b!100361 (not c!17229)) b!100363))

(declare-fun m!110897 () Bool)

(assert (=> b!100362 m!110897))

(assert (=> b!99304 d!27171))

(assert (=> b!99509 d!26735))

(declare-fun d!27173 () Bool)

(assert (=> d!27173 (= (apply!93 lt!50170 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!50170) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4153 () Bool)

(assert (= bs!4153 d!27173))

(assert (=> bs!4153 m!109467))

(assert (=> bs!4153 m!109467))

(declare-fun m!110899 () Bool)

(assert (=> bs!4153 m!110899))

(assert (=> b!99510 d!27173))

(declare-fun d!27175 () Bool)

(assert (=> d!27175 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50689 () Unit!2998)

(assert (=> d!27175 (= lt!50689 (choose!617 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65344 () Bool)

(assert (=> d!27175 e!65344))

(declare-fun res!50339 () Bool)

(assert (=> d!27175 (=> (not res!50339) (not e!65344))))

(assert (=> d!27175 (= res!50339 (isStrictlySorted!300 (toList!774 lt!49898)))))

(assert (=> d!27175 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000) lt!50689)))

(declare-fun b!100364 () Bool)

(assert (=> b!100364 (= e!65344 (containsKey!153 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27175 res!50339) b!100364))

(assert (=> d!27175 m!109159))

(assert (=> d!27175 m!109159))

(assert (=> d!27175 m!109161))

(declare-fun m!110901 () Bool)

(assert (=> d!27175 m!110901))

(assert (=> d!27175 m!109501))

(assert (=> b!100364 m!109155))

(assert (=> b!99456 d!27175))

(assert (=> b!99456 d!26829))

(assert (=> b!99456 d!26831))

(declare-fun d!27177 () Bool)

(declare-fun e!65345 () Bool)

(assert (=> d!27177 e!65345))

(declare-fun res!50340 () Bool)

(assert (=> d!27177 (=> res!50340 e!65345)))

(declare-fun lt!50691 () Bool)

(assert (=> d!27177 (= res!50340 (not lt!50691))))

(declare-fun lt!50690 () Bool)

(assert (=> d!27177 (= lt!50691 lt!50690)))

(declare-fun lt!50693 () Unit!2998)

(declare-fun e!65346 () Unit!2998)

(assert (=> d!27177 (= lt!50693 e!65346)))

(declare-fun c!17230 () Bool)

(assert (=> d!27177 (= c!17230 lt!50690)))

(assert (=> d!27177 (= lt!50690 (containsKey!153 (toList!774 lt!50170) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27177 (= (contains!799 lt!50170 (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)) lt!50691)))

(declare-fun b!100365 () Bool)

(declare-fun lt!50692 () Unit!2998)

(assert (=> b!100365 (= e!65346 lt!50692)))

(assert (=> b!100365 (= lt!50692 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50170) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100365 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100366 () Bool)

(declare-fun Unit!3056 () Unit!2998)

(assert (=> b!100366 (= e!65346 Unit!3056)))

(declare-fun b!100367 () Bool)

(assert (=> b!100367 (= e!65345 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) (select (arr!2008 (_keys!4194 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27177 c!17230) b!100365))

(assert (= (and d!27177 (not c!17230)) b!100366))

(assert (= (and d!27177 (not res!50340)) b!100367))

(assert (=> d!27177 m!108993))

(declare-fun m!110903 () Bool)

(assert (=> d!27177 m!110903))

(assert (=> b!100365 m!108993))

(declare-fun m!110905 () Bool)

(assert (=> b!100365 m!110905))

(assert (=> b!100365 m!108993))

(assert (=> b!100365 m!109589))

(assert (=> b!100365 m!109589))

(declare-fun m!110907 () Bool)

(assert (=> b!100365 m!110907))

(assert (=> b!100367 m!108993))

(assert (=> b!100367 m!109589))

(assert (=> b!100367 m!109589))

(assert (=> b!100367 m!110907))

(assert (=> b!99513 d!27177))

(declare-fun d!27179 () Bool)

(assert (=> d!27179 (= (get!1294 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2813 (getValueByKey!149 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26699 d!27179))

(assert (=> d!26699 d!26831))

(declare-fun d!27181 () Bool)

(declare-fun lt!50694 () Bool)

(assert (=> d!27181 (= lt!50694 (select (content!104 (toList!774 lt!50159)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!65348 () Bool)

(assert (=> d!27181 (= lt!50694 e!65348)))

(declare-fun res!50341 () Bool)

(assert (=> d!27181 (=> (not res!50341) (not e!65348))))

(assert (=> d!27181 (= res!50341 ((_ is Cons!1587) (toList!774 lt!50159)))))

(assert (=> d!27181 (= (contains!801 (toList!774 lt!50159) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50694)))

(declare-fun b!100368 () Bool)

(declare-fun e!65347 () Bool)

(assert (=> b!100368 (= e!65348 e!65347)))

(declare-fun res!50342 () Bool)

(assert (=> b!100368 (=> res!50342 e!65347)))

(assert (=> b!100368 (= res!50342 (= (h!2182 (toList!774 lt!50159)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100369 () Bool)

(assert (=> b!100369 (= e!65347 (contains!801 (t!5556 (toList!774 lt!50159)) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27181 res!50341) b!100368))

(assert (= (and b!100368 (not res!50342)) b!100369))

(declare-fun m!110909 () Bool)

(assert (=> d!27181 m!110909))

(declare-fun m!110911 () Bool)

(assert (=> d!27181 m!110911))

(declare-fun m!110913 () Bool)

(assert (=> b!100369 m!110913))

(assert (=> b!99485 d!27181))

(declare-fun d!27183 () Bool)

(declare-fun res!50343 () Bool)

(declare-fun e!65349 () Bool)

(assert (=> d!27183 (=> res!50343 e!65349)))

(assert (=> d!27183 (= res!50343 (and ((_ is Cons!1587) (toList!774 lt!49898)) (= (_1!1177 (h!2182 (toList!774 lt!49898))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27183 (= (containsKey!153 (toList!774 lt!49898) #b1000000000000000000000000000000000000000000000000000000000000000) e!65349)))

(declare-fun b!100370 () Bool)

(declare-fun e!65350 () Bool)

(assert (=> b!100370 (= e!65349 e!65350)))

(declare-fun res!50344 () Bool)

(assert (=> b!100370 (=> (not res!50344) (not e!65350))))

(assert (=> b!100370 (= res!50344 (and (or (not ((_ is Cons!1587) (toList!774 lt!49898))) (bvsle (_1!1177 (h!2182 (toList!774 lt!49898))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1587) (toList!774 lt!49898)) (bvslt (_1!1177 (h!2182 (toList!774 lt!49898))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100371 () Bool)

(assert (=> b!100371 (= e!65350 (containsKey!153 (t!5556 (toList!774 lt!49898)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27183 (not res!50343)) b!100370))

(assert (= (and b!100370 res!50344) b!100371))

(declare-fun m!110915 () Bool)

(assert (=> b!100371 m!110915))

(assert (=> d!26649 d!27183))

(declare-fun d!27185 () Bool)

(declare-fun e!65351 () Bool)

(assert (=> d!27185 e!65351))

(declare-fun res!50345 () Bool)

(assert (=> d!27185 (=> res!50345 e!65351)))

(declare-fun lt!50696 () Bool)

(assert (=> d!27185 (= res!50345 (not lt!50696))))

(declare-fun lt!50695 () Bool)

(assert (=> d!27185 (= lt!50696 lt!50695)))

(declare-fun lt!50698 () Unit!2998)

(declare-fun e!65352 () Unit!2998)

(assert (=> d!27185 (= lt!50698 e!65352)))

(declare-fun c!17231 () Bool)

(assert (=> d!27185 (= c!17231 lt!50695)))

(assert (=> d!27185 (= lt!50695 (containsKey!153 (toList!774 lt!50170) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27185 (= (contains!799 lt!50170 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50696)))

(declare-fun b!100372 () Bool)

(declare-fun lt!50697 () Unit!2998)

(assert (=> b!100372 (= e!65352 lt!50697)))

(assert (=> b!100372 (= lt!50697 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50170) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100372 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100373 () Bool)

(declare-fun Unit!3057 () Unit!2998)

(assert (=> b!100373 (= e!65352 Unit!3057)))

(declare-fun b!100374 () Bool)

(assert (=> b!100374 (= e!65351 (isDefined!103 (getValueByKey!149 (toList!774 lt!50170) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27185 c!17231) b!100372))

(assert (= (and d!27185 (not c!17231)) b!100373))

(assert (= (and d!27185 (not res!50345)) b!100374))

(declare-fun m!110917 () Bool)

(assert (=> d!27185 m!110917))

(declare-fun m!110919 () Bool)

(assert (=> b!100372 m!110919))

(declare-fun m!110921 () Bool)

(assert (=> b!100372 m!110921))

(assert (=> b!100372 m!110921))

(declare-fun m!110923 () Bool)

(assert (=> b!100372 m!110923))

(assert (=> b!100374 m!110921))

(assert (=> b!100374 m!110921))

(assert (=> b!100374 m!110923))

(assert (=> bm!10229 d!27185))

(declare-fun d!27187 () Bool)

(declare-fun res!50346 () Bool)

(declare-fun e!65353 () Bool)

(assert (=> d!27187 (=> (not res!50346) (not e!65353))))

(assert (=> d!27187 (= res!50346 (simpleValid!69 (_2!1178 lt!50096)))))

(assert (=> d!27187 (= (valid!392 (_2!1178 lt!50096)) e!65353)))

(declare-fun b!100375 () Bool)

(declare-fun res!50347 () Bool)

(assert (=> b!100375 (=> (not res!50347) (not e!65353))))

(assert (=> b!100375 (= res!50347 (= (arrayCountValidKeys!0 (_keys!4194 (_2!1178 lt!50096)) #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!50096)))) (_size!477 (_2!1178 lt!50096))))))

(declare-fun b!100376 () Bool)

(declare-fun res!50348 () Bool)

(assert (=> b!100376 (=> (not res!50348) (not e!65353))))

(assert (=> b!100376 (= res!50348 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 (_2!1178 lt!50096)) (mask!6607 (_2!1178 lt!50096))))))

(declare-fun b!100377 () Bool)

(assert (=> b!100377 (= e!65353 (arrayNoDuplicates!0 (_keys!4194 (_2!1178 lt!50096)) #b00000000000000000000000000000000 Nil!1587))))

(assert (= (and d!27187 res!50346) b!100375))

(assert (= (and b!100375 res!50347) b!100376))

(assert (= (and b!100376 res!50348) b!100377))

(declare-fun m!110925 () Bool)

(assert (=> d!27187 m!110925))

(declare-fun m!110927 () Bool)

(assert (=> b!100375 m!110927))

(declare-fun m!110929 () Bool)

(assert (=> b!100376 m!110929))

(declare-fun m!110931 () Bool)

(assert (=> b!100377 m!110931))

(assert (=> b!99413 d!27187))

(assert (=> b!99293 d!26683))

(declare-fun d!27189 () Bool)

(declare-fun e!65354 () Bool)

(assert (=> d!27189 e!65354))

(declare-fun res!50350 () Bool)

(assert (=> d!27189 (=> (not res!50350) (not e!65354))))

(declare-fun lt!50699 () ListLongMap!1517)

(assert (=> d!27189 (= res!50350 (contains!799 lt!50699 (_1!1177 (tuple2!2333 lt!49950 lt!49947))))))

(declare-fun lt!50700 () List!1591)

(assert (=> d!27189 (= lt!50699 (ListLongMap!1518 lt!50700))))

(declare-fun lt!50701 () Unit!2998)

(declare-fun lt!50702 () Unit!2998)

(assert (=> d!27189 (= lt!50701 lt!50702)))

(assert (=> d!27189 (= (getValueByKey!149 lt!50700 (_1!1177 (tuple2!2333 lt!49950 lt!49947))) (Some!154 (_2!1177 (tuple2!2333 lt!49950 lt!49947))))))

(assert (=> d!27189 (= lt!50702 (lemmaContainsTupThenGetReturnValue!68 lt!50700 (_1!1177 (tuple2!2333 lt!49950 lt!49947)) (_2!1177 (tuple2!2333 lt!49950 lt!49947))))))

(assert (=> d!27189 (= lt!50700 (insertStrictlySorted!71 (toList!774 lt!49951) (_1!1177 (tuple2!2333 lt!49950 lt!49947)) (_2!1177 (tuple2!2333 lt!49950 lt!49947))))))

(assert (=> d!27189 (= (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947)) lt!50699)))

(declare-fun b!100378 () Bool)

(declare-fun res!50349 () Bool)

(assert (=> b!100378 (=> (not res!50349) (not e!65354))))

(assert (=> b!100378 (= res!50349 (= (getValueByKey!149 (toList!774 lt!50699) (_1!1177 (tuple2!2333 lt!49950 lt!49947))) (Some!154 (_2!1177 (tuple2!2333 lt!49950 lt!49947)))))))

(declare-fun b!100379 () Bool)

(assert (=> b!100379 (= e!65354 (contains!801 (toList!774 lt!50699) (tuple2!2333 lt!49950 lt!49947)))))

(assert (= (and d!27189 res!50350) b!100378))

(assert (= (and b!100378 res!50349) b!100379))

(declare-fun m!110933 () Bool)

(assert (=> d!27189 m!110933))

(declare-fun m!110935 () Bool)

(assert (=> d!27189 m!110935))

(declare-fun m!110937 () Bool)

(assert (=> d!27189 m!110937))

(declare-fun m!110939 () Bool)

(assert (=> d!27189 m!110939))

(declare-fun m!110941 () Bool)

(assert (=> b!100378 m!110941))

(declare-fun m!110943 () Bool)

(assert (=> b!100379 m!110943))

(assert (=> b!99293 d!27189))

(declare-fun d!27191 () Bool)

(assert (=> d!27191 (not (contains!799 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947)) lt!49946))))

(declare-fun lt!50705 () Unit!2998)

(declare-fun choose!620 (ListLongMap!1517 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2998)

(assert (=> d!27191 (= lt!50705 (choose!620 lt!49951 lt!49950 lt!49947 lt!49946))))

(declare-fun e!65357 () Bool)

(assert (=> d!27191 e!65357))

(declare-fun res!50353 () Bool)

(assert (=> d!27191 (=> (not res!50353) (not e!65357))))

(assert (=> d!27191 (= res!50353 (not (contains!799 lt!49951 lt!49946)))))

(assert (=> d!27191 (= (addStillNotContains!42 lt!49951 lt!49950 lt!49947 lt!49946) lt!50705)))

(declare-fun b!100383 () Bool)

(assert (=> b!100383 (= e!65357 (not (= lt!49950 lt!49946)))))

(assert (= (and d!27191 res!50353) b!100383))

(assert (=> d!27191 m!108893))

(assert (=> d!27191 m!108893))

(assert (=> d!27191 m!108897))

(declare-fun m!110945 () Bool)

(assert (=> d!27191 m!110945))

(declare-fun m!110947 () Bool)

(assert (=> d!27191 m!110947))

(assert (=> b!99293 d!27191))

(declare-fun d!27193 () Bool)

(declare-fun e!65358 () Bool)

(assert (=> d!27193 e!65358))

(declare-fun res!50355 () Bool)

(assert (=> d!27193 (=> (not res!50355) (not e!65358))))

(declare-fun lt!50706 () ListLongMap!1517)

(assert (=> d!27193 (= res!50355 (contains!799 lt!50706 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50707 () List!1591)

(assert (=> d!27193 (= lt!50706 (ListLongMap!1518 lt!50707))))

(declare-fun lt!50708 () Unit!2998)

(declare-fun lt!50709 () Unit!2998)

(assert (=> d!27193 (= lt!50708 lt!50709)))

(assert (=> d!27193 (= (getValueByKey!149 lt!50707 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27193 (= lt!50709 (lemmaContainsTupThenGetReturnValue!68 lt!50707 (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27193 (= lt!50707 (insertStrictlySorted!71 (toList!774 call!10196) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27193 (= (+!129 call!10196 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50706)))

(declare-fun b!100384 () Bool)

(declare-fun res!50354 () Bool)

(assert (=> b!100384 (=> (not res!50354) (not e!65358))))

(assert (=> b!100384 (= res!50354 (= (getValueByKey!149 (toList!774 lt!50706) (_1!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1177 (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100385 () Bool)

(assert (=> b!100385 (= e!65358 (contains!801 (toList!774 lt!50706) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27193 res!50355) b!100384))

(assert (= (and b!100384 res!50354) b!100385))

(declare-fun m!110949 () Bool)

(assert (=> d!27193 m!110949))

(declare-fun m!110951 () Bool)

(assert (=> d!27193 m!110951))

(declare-fun m!110953 () Bool)

(assert (=> d!27193 m!110953))

(declare-fun m!110955 () Bool)

(assert (=> d!27193 m!110955))

(declare-fun m!110957 () Bool)

(assert (=> b!100384 m!110957))

(declare-fun m!110959 () Bool)

(assert (=> b!100385 m!110959))

(assert (=> b!99293 d!27193))

(declare-fun d!27195 () Bool)

(declare-fun e!65359 () Bool)

(assert (=> d!27195 e!65359))

(declare-fun res!50356 () Bool)

(assert (=> d!27195 (=> res!50356 e!65359)))

(declare-fun lt!50711 () Bool)

(assert (=> d!27195 (= res!50356 (not lt!50711))))

(declare-fun lt!50710 () Bool)

(assert (=> d!27195 (= lt!50711 lt!50710)))

(declare-fun lt!50713 () Unit!2998)

(declare-fun e!65360 () Unit!2998)

(assert (=> d!27195 (= lt!50713 e!65360)))

(declare-fun c!17232 () Bool)

(assert (=> d!27195 (= c!17232 lt!50710)))

(assert (=> d!27195 (= lt!50710 (containsKey!153 (toList!774 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947))) lt!49946))))

(assert (=> d!27195 (= (contains!799 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947)) lt!49946) lt!50711)))

(declare-fun b!100386 () Bool)

(declare-fun lt!50712 () Unit!2998)

(assert (=> b!100386 (= e!65360 lt!50712)))

(assert (=> b!100386 (= lt!50712 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947))) lt!49946))))

(assert (=> b!100386 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947))) lt!49946))))

(declare-fun b!100387 () Bool)

(declare-fun Unit!3058 () Unit!2998)

(assert (=> b!100387 (= e!65360 Unit!3058)))

(declare-fun b!100388 () Bool)

(assert (=> b!100388 (= e!65359 (isDefined!103 (getValueByKey!149 (toList!774 (+!129 lt!49951 (tuple2!2333 lt!49950 lt!49947))) lt!49946)))))

(assert (= (and d!27195 c!17232) b!100386))

(assert (= (and d!27195 (not c!17232)) b!100387))

(assert (= (and d!27195 (not res!50356)) b!100388))

(declare-fun m!110961 () Bool)

(assert (=> d!27195 m!110961))

(declare-fun m!110963 () Bool)

(assert (=> b!100386 m!110963))

(declare-fun m!110965 () Bool)

(assert (=> b!100386 m!110965))

(assert (=> b!100386 m!110965))

(declare-fun m!110967 () Bool)

(assert (=> b!100386 m!110967))

(assert (=> b!100388 m!110965))

(assert (=> b!100388 m!110965))

(assert (=> b!100388 m!110967))

(assert (=> b!99293 d!27195))

(declare-fun d!27197 () Bool)

(assert (=> d!27197 (= (apply!93 lt!50170 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1294 (getValueByKey!149 (toList!774 lt!50170) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4154 () Bool)

(assert (= bs!4154 d!27197))

(assert (=> bs!4154 m!110921))

(assert (=> bs!4154 m!110921))

(declare-fun m!110969 () Bool)

(assert (=> bs!4154 m!110969))

(assert (=> b!99525 d!27197))

(declare-fun d!27199 () Bool)

(declare-fun e!65361 () Bool)

(assert (=> d!27199 e!65361))

(declare-fun res!50357 () Bool)

(assert (=> d!27199 (=> res!50357 e!65361)))

(declare-fun lt!50715 () Bool)

(assert (=> d!27199 (= res!50357 (not lt!50715))))

(declare-fun lt!50714 () Bool)

(assert (=> d!27199 (= lt!50715 lt!50714)))

(declare-fun lt!50717 () Unit!2998)

(declare-fun e!65362 () Unit!2998)

(assert (=> d!27199 (= lt!50717 e!65362)))

(declare-fun c!17233 () Bool)

(assert (=> d!27199 (= c!17233 lt!50714)))

(assert (=> d!27199 (= lt!50714 (containsKey!153 (toList!774 lt!49986) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27199 (= (contains!799 lt!49986 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50715)))

(declare-fun b!100389 () Bool)

(declare-fun lt!50716 () Unit!2998)

(assert (=> b!100389 (= e!65362 lt!50716)))

(assert (=> b!100389 (= lt!50716 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49986) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100389 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100390 () Bool)

(declare-fun Unit!3059 () Unit!2998)

(assert (=> b!100390 (= e!65362 Unit!3059)))

(declare-fun b!100391 () Bool)

(assert (=> b!100391 (= e!65361 (isDefined!103 (getValueByKey!149 (toList!774 lt!49986) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27199 c!17233) b!100389))

(assert (= (and d!27199 (not c!17233)) b!100390))

(assert (= (and d!27199 (not res!50357)) b!100391))

(declare-fun m!110971 () Bool)

(assert (=> d!27199 m!110971))

(declare-fun m!110973 () Bool)

(assert (=> b!100389 m!110973))

(assert (=> b!100389 m!110409))

(assert (=> b!100389 m!110409))

(declare-fun m!110975 () Bool)

(assert (=> b!100389 m!110975))

(assert (=> b!100391 m!110409))

(assert (=> b!100391 m!110409))

(assert (=> b!100391 m!110975))

(assert (=> bm!10197 d!27199))

(declare-fun d!27201 () Bool)

(declare-fun e!65363 () Bool)

(assert (=> d!27201 e!65363))

(declare-fun res!50359 () Bool)

(assert (=> d!27201 (=> (not res!50359) (not e!65363))))

(declare-fun lt!50718 () ListLongMap!1517)

(assert (=> d!27201 (= res!50359 (contains!799 lt!50718 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun lt!50719 () List!1591)

(assert (=> d!27201 (= lt!50718 (ListLongMap!1518 lt!50719))))

(declare-fun lt!50720 () Unit!2998)

(declare-fun lt!50721 () Unit!2998)

(assert (=> d!27201 (= lt!50720 lt!50721)))

(assert (=> d!27201 (= (getValueByKey!149 lt!50719 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27201 (= lt!50721 (lemmaContainsTupThenGetReturnValue!68 lt!50719 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27201 (= lt!50719 (insertStrictlySorted!71 (toList!774 call!10239) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27201 (= (+!129 call!10239 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) lt!50718)))

(declare-fun b!100392 () Bool)

(declare-fun res!50358 () Bool)

(assert (=> b!100392 (=> (not res!50358) (not e!65363))))

(assert (=> b!100392 (= res!50358 (= (getValueByKey!149 (toList!774 lt!50718) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun b!100393 () Bool)

(assert (=> b!100393 (= e!65363 (contains!801 (toList!774 lt!50718) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(assert (= (and d!27201 res!50359) b!100392))

(assert (= (and b!100392 res!50358) b!100393))

(declare-fun m!110977 () Bool)

(assert (=> d!27201 m!110977))

(declare-fun m!110979 () Bool)

(assert (=> d!27201 m!110979))

(declare-fun m!110981 () Bool)

(assert (=> d!27201 m!110981))

(declare-fun m!110983 () Bool)

(assert (=> d!27201 m!110983))

(declare-fun m!110985 () Bool)

(assert (=> b!100392 m!110985))

(declare-fun m!110987 () Bool)

(assert (=> b!100393 m!110987))

(assert (=> b!99547 d!27201))

(declare-fun d!27203 () Bool)

(declare-fun e!65364 () Bool)

(assert (=> d!27203 e!65364))

(declare-fun res!50361 () Bool)

(assert (=> d!27203 (=> (not res!50361) (not e!65364))))

(declare-fun lt!50722 () ListLongMap!1517)

(assert (=> d!27203 (= res!50361 (contains!799 lt!50722 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun lt!50723 () List!1591)

(assert (=> d!27203 (= lt!50722 (ListLongMap!1518 lt!50723))))

(declare-fun lt!50724 () Unit!2998)

(declare-fun lt!50725 () Unit!2998)

(assert (=> d!27203 (= lt!50724 lt!50725)))

(assert (=> d!27203 (= (getValueByKey!149 lt!50723 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27203 (= lt!50725 (lemmaContainsTupThenGetReturnValue!68 lt!50723 (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27203 (= lt!50723 (insertStrictlySorted!71 (toList!774 call!10202) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27203 (= (+!129 call!10202 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) lt!50722)))

(declare-fun b!100394 () Bool)

(declare-fun res!50360 () Bool)

(assert (=> b!100394 (=> (not res!50360) (not e!65364))))

(assert (=> b!100394 (= res!50360 (= (getValueByKey!149 (toList!774 lt!50722) (_1!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!154 (_2!1177 (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun b!100395 () Bool)

(assert (=> b!100395 (= e!65364 (contains!801 (toList!774 lt!50722) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(assert (= (and d!27203 res!50361) b!100394))

(assert (= (and b!100394 res!50360) b!100395))

(declare-fun m!110989 () Bool)

(assert (=> d!27203 m!110989))

(declare-fun m!110991 () Bool)

(assert (=> d!27203 m!110991))

(declare-fun m!110993 () Bool)

(assert (=> d!27203 m!110993))

(declare-fun m!110995 () Bool)

(assert (=> d!27203 m!110995))

(declare-fun m!110997 () Bool)

(assert (=> b!100394 m!110997))

(declare-fun m!110999 () Bool)

(assert (=> b!100395 m!110999))

(assert (=> b!99343 d!27203))

(declare-fun d!27205 () Bool)

(declare-fun e!65365 () Bool)

(assert (=> d!27205 e!65365))

(declare-fun res!50362 () Bool)

(assert (=> d!27205 (=> res!50362 e!65365)))

(declare-fun lt!50727 () Bool)

(assert (=> d!27205 (= res!50362 (not lt!50727))))

(declare-fun lt!50726 () Bool)

(assert (=> d!27205 (= lt!50727 lt!50726)))

(declare-fun lt!50729 () Unit!2998)

(declare-fun e!65366 () Unit!2998)

(assert (=> d!27205 (= lt!50729 e!65366)))

(declare-fun c!17234 () Bool)

(assert (=> d!27205 (= c!17234 lt!50726)))

(assert (=> d!27205 (= lt!50726 (containsKey!153 (toList!774 lt!50192) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27205 (= (contains!799 lt!50192 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50727)))

(declare-fun b!100396 () Bool)

(declare-fun lt!50728 () Unit!2998)

(assert (=> b!100396 (= e!65366 lt!50728)))

(assert (=> b!100396 (= lt!50728 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!50192) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100396 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100397 () Bool)

(declare-fun Unit!3060 () Unit!2998)

(assert (=> b!100397 (= e!65366 Unit!3060)))

(declare-fun b!100398 () Bool)

(assert (=> b!100398 (= e!65365 (isDefined!103 (getValueByKey!149 (toList!774 lt!50192) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27205 c!17234) b!100396))

(assert (= (and d!27205 (not c!17234)) b!100397))

(assert (= (and d!27205 (not res!50362)) b!100398))

(declare-fun m!111001 () Bool)

(assert (=> d!27205 m!111001))

(declare-fun m!111003 () Bool)

(assert (=> b!100396 m!111003))

(assert (=> b!100396 m!110405))

(assert (=> b!100396 m!110405))

(declare-fun m!111005 () Bool)

(assert (=> b!100396 m!111005))

(assert (=> b!100398 m!110405))

(assert (=> b!100398 m!110405))

(assert (=> b!100398 m!111005))

(assert (=> bm!10234 d!27205))

(declare-fun d!27207 () Bool)

(declare-fun res!50364 () Bool)

(declare-fun e!65368 () Bool)

(assert (=> d!27207 (=> res!50364 e!65368)))

(assert (=> d!27207 (= res!50364 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(assert (=> d!27207 (= (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) #b00000000000000000000000000000000 Nil!1587) e!65368)))

(declare-fun bm!10342 () Bool)

(declare-fun call!10345 () Bool)

(declare-fun c!17235 () Bool)

(assert (=> bm!10342 (= call!10345 (arrayNoDuplicates!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17235 (Cons!1586 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000) Nil!1587) Nil!1587)))))

(declare-fun b!100399 () Bool)

(declare-fun e!65369 () Bool)

(assert (=> b!100399 (= e!65369 call!10345)))

(declare-fun b!100400 () Bool)

(declare-fun e!65370 () Bool)

(assert (=> b!100400 (= e!65370 (contains!800 Nil!1587 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100401 () Bool)

(declare-fun e!65367 () Bool)

(assert (=> b!100401 (= e!65368 e!65367)))

(declare-fun res!50365 () Bool)

(assert (=> b!100401 (=> (not res!50365) (not e!65367))))

(assert (=> b!100401 (= res!50365 (not e!65370))))

(declare-fun res!50363 () Bool)

(assert (=> b!100401 (=> (not res!50363) (not e!65370))))

(assert (=> b!100401 (= res!50363 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100402 () Bool)

(assert (=> b!100402 (= e!65369 call!10345)))

(declare-fun b!100403 () Bool)

(assert (=> b!100403 (= e!65367 e!65369)))

(assert (=> b!100403 (= c!17235 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!27207 (not res!50364)) b!100401))

(assert (= (and b!100401 res!50363) b!100400))

(assert (= (and b!100401 res!50365) b!100403))

(assert (= (and b!100403 c!17235) b!100402))

(assert (= (and b!100403 (not c!17235)) b!100399))

(assert (= (or b!100402 b!100399) bm!10342))

(assert (=> bm!10342 m!109721))

(declare-fun m!111007 () Bool)

(assert (=> bm!10342 m!111007))

(assert (=> b!100400 m!109721))

(assert (=> b!100400 m!109721))

(declare-fun m!111009 () Bool)

(assert (=> b!100400 m!111009))

(assert (=> b!100401 m!109721))

(assert (=> b!100401 m!109721))

(assert (=> b!100401 m!109723))

(assert (=> b!100403 m!109721))

(assert (=> b!100403 m!109721))

(assert (=> b!100403 m!109723))

(assert (=> b!99572 d!27207))

(declare-fun b!100404 () Bool)

(declare-fun e!65373 () Bool)

(declare-fun call!10346 () Bool)

(assert (=> b!100404 (= e!65373 call!10346)))

(declare-fun b!100405 () Bool)

(declare-fun e!65371 () Bool)

(assert (=> b!100405 (= e!65371 e!65373)))

(declare-fun lt!50732 () (_ BitVec 64))

(assert (=> b!100405 (= lt!50732 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000))))

(declare-fun lt!50731 () Unit!2998)

(assert (=> b!100405 (= lt!50731 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4194 (_2!1178 lt!49828)) lt!50732 #b00000000000000000000000000000000))))

(assert (=> b!100405 (arrayContainsKey!0 (_keys!4194 (_2!1178 lt!49828)) lt!50732 #b00000000000000000000000000000000)))

(declare-fun lt!50730 () Unit!2998)

(assert (=> b!100405 (= lt!50730 lt!50731)))

(declare-fun res!50367 () Bool)

(assert (=> b!100405 (= res!50367 (= (seekEntryOrOpen!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000) (_keys!4194 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828))) (Found!257 #b00000000000000000000000000000000)))))

(assert (=> b!100405 (=> (not res!50367) (not e!65373))))

(declare-fun b!100406 () Bool)

(declare-fun e!65372 () Bool)

(assert (=> b!100406 (= e!65372 e!65371)))

(declare-fun c!17236 () Bool)

(assert (=> b!100406 (= c!17236 (validKeyInArray!0 (select (arr!2008 (_keys!4194 (_2!1178 lt!49828))) #b00000000000000000000000000000000)))))

(declare-fun bm!10343 () Bool)

(assert (=> bm!10343 (= call!10346 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4194 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828))))))

(declare-fun b!100407 () Bool)

(assert (=> b!100407 (= e!65371 call!10346)))

(declare-fun d!27209 () Bool)

(declare-fun res!50366 () Bool)

(assert (=> d!27209 (=> res!50366 e!65372)))

(assert (=> d!27209 (= res!50366 (bvsge #b00000000000000000000000000000000 (size!2260 (_keys!4194 (_2!1178 lt!49828)))))))

(assert (=> d!27209 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4194 (_2!1178 lt!49828)) (mask!6607 (_2!1178 lt!49828))) e!65372)))

(assert (= (and d!27209 (not res!50366)) b!100406))

(assert (= (and b!100406 c!17236) b!100405))

(assert (= (and b!100406 (not c!17236)) b!100407))

(assert (= (and b!100405 res!50367) b!100404))

(assert (= (or b!100404 b!100407) bm!10343))

(assert (=> b!100405 m!109597))

(declare-fun m!111011 () Bool)

(assert (=> b!100405 m!111011))

(declare-fun m!111013 () Bool)

(assert (=> b!100405 m!111013))

(assert (=> b!100405 m!109597))

(declare-fun m!111015 () Bool)

(assert (=> b!100405 m!111015))

(assert (=> b!100406 m!109597))

(assert (=> b!100406 m!109597))

(assert (=> b!100406 m!109603))

(declare-fun m!111017 () Bool)

(assert (=> bm!10343 m!111017))

(assert (=> b!99313 d!27209))

(assert (=> b!99286 d!26697))

(declare-fun d!27211 () Bool)

(declare-fun res!50368 () Bool)

(declare-fun e!65374 () Bool)

(assert (=> d!27211 (=> res!50368 e!65374)))

(assert (=> d!27211 (= res!50368 (= (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355)))))

(assert (=> d!27211 (= (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!65374)))

(declare-fun b!100408 () Bool)

(declare-fun e!65375 () Bool)

(assert (=> b!100408 (= e!65374 e!65375)))

(declare-fun res!50369 () Bool)

(assert (=> b!100408 (=> (not res!50369) (not e!65375))))

(assert (=> b!100408 (= res!50369 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2260 (_keys!4194 (v!2807 (underlying!334 thiss!992))))))))

(declare-fun b!100409 () Bool)

(assert (=> b!100409 (= e!65375 (arrayContainsKey!0 (_keys!4194 (v!2807 (underlying!334 thiss!992))) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27211 (not res!50368)) b!100408))

(assert (= (and b!100408 res!50369) b!100409))

(declare-fun m!111019 () Bool)

(assert (=> d!27211 m!111019))

(assert (=> b!100409 m!108591))

(declare-fun m!111021 () Bool)

(assert (=> b!100409 m!111021))

(assert (=> b!99478 d!27211))

(declare-fun d!27213 () Bool)

(declare-fun e!65376 () Bool)

(assert (=> d!27213 e!65376))

(declare-fun res!50371 () Bool)

(assert (=> d!27213 (=> (not res!50371) (not e!65376))))

(declare-fun lt!50733 () ListLongMap!1517)

(assert (=> d!27213 (= res!50371 (contains!799 lt!50733 (_1!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun lt!50734 () List!1591)

(assert (=> d!27213 (= lt!50733 (ListLongMap!1518 lt!50734))))

(declare-fun lt!50735 () Unit!2998)

(declare-fun lt!50736 () Unit!2998)

(assert (=> d!27213 (= lt!50735 lt!50736)))

(assert (=> d!27213 (= (getValueByKey!149 lt!50734 (_1!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27213 (= lt!50736 (lemmaContainsTupThenGetReturnValue!68 lt!50734 (_1!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27213 (= lt!50734 (insertStrictlySorted!71 (toList!774 (ite c!16995 call!10241 (ite c!16994 call!10242 call!10238))) (_1!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27213 (= (+!129 (ite c!16995 call!10241 (ite c!16994 call!10242 call!10238)) (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) lt!50733)))

(declare-fun b!100410 () Bool)

(declare-fun res!50370 () Bool)

(assert (=> b!100410 (=> (not res!50370) (not e!65376))))

(assert (=> b!100410 (= res!50370 (= (getValueByKey!149 (toList!774 lt!50733) (_1!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))))

(declare-fun b!100411 () Bool)

(assert (=> b!100411 (= e!65376 (contains!801 (toList!774 lt!50733) (ite (or c!16995 c!16994) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16890 c!16895) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (= (and d!27213 res!50371) b!100410))

(assert (= (and b!100410 res!50370) b!100411))

(declare-fun m!111023 () Bool)

(assert (=> d!27213 m!111023))

(declare-fun m!111025 () Bool)

(assert (=> d!27213 m!111025))

(declare-fun m!111027 () Bool)

(assert (=> d!27213 m!111027))

(declare-fun m!111029 () Bool)

(assert (=> d!27213 m!111029))

(declare-fun m!111031 () Bool)

(assert (=> b!100410 m!111031))

(declare-fun m!111033 () Bool)

(assert (=> b!100411 m!111033))

(assert (=> bm!10235 d!27213))

(declare-fun d!27215 () Bool)

(declare-fun e!65377 () Bool)

(assert (=> d!27215 e!65377))

(declare-fun res!50373 () Bool)

(assert (=> d!27215 (=> (not res!50373) (not e!65377))))

(declare-fun lt!50737 () ListLongMap!1517)

(assert (=> d!27215 (= res!50373 (contains!799 lt!50737 (_1!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun lt!50738 () List!1591)

(assert (=> d!27215 (= lt!50737 (ListLongMap!1518 lt!50738))))

(declare-fun lt!50739 () Unit!2998)

(declare-fun lt!50740 () Unit!2998)

(assert (=> d!27215 (= lt!50739 lt!50740)))

(assert (=> d!27215 (= (getValueByKey!149 lt!50738 (_1!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27215 (= lt!50740 (lemmaContainsTupThenGetReturnValue!68 lt!50738 (_1!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27215 (= lt!50738 (insertStrictlySorted!71 (toList!774 (ite c!16939 call!10204 (ite c!16938 call!10205 call!10201))) (_1!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27215 (= (+!129 (ite c!16939 call!10204 (ite c!16938 call!10205 call!10201)) (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) lt!50737)))

(declare-fun b!100412 () Bool)

(declare-fun res!50372 () Bool)

(assert (=> b!100412 (=> (not res!50372) (not e!65377))))

(assert (=> b!100412 (= res!50372 (= (getValueByKey!149 (toList!774 lt!50737) (_1!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!154 (_2!1177 (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))))

(declare-fun b!100413 () Bool)

(assert (=> b!100413 (= e!65377 (contains!801 (toList!774 lt!50737) (ite (or c!16939 c!16938) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (= (and d!27215 res!50373) b!100412))

(assert (= (and b!100412 res!50372) b!100413))

(declare-fun m!111035 () Bool)

(assert (=> d!27215 m!111035))

(declare-fun m!111037 () Bool)

(assert (=> d!27215 m!111037))

(declare-fun m!111039 () Bool)

(assert (=> d!27215 m!111039))

(declare-fun m!111041 () Bool)

(assert (=> d!27215 m!111041))

(declare-fun m!111043 () Bool)

(assert (=> b!100412 m!111043))

(declare-fun m!111045 () Bool)

(assert (=> b!100413 m!111045))

(assert (=> bm!10198 d!27215))

(declare-fun d!27217 () Bool)

(assert (=> d!27217 (isDefined!103 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50741 () Unit!2998)

(assert (=> d!27217 (= lt!50741 (choose!617 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65378 () Bool)

(assert (=> d!27217 e!65378))

(declare-fun res!50374 () Bool)

(assert (=> d!27217 (=> (not res!50374) (not e!65378))))

(assert (=> d!27217 (= res!50374 (isStrictlySorted!300 (toList!774 lt!49898)))))

(assert (=> d!27217 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000) lt!50741)))

(declare-fun b!100414 () Bool)

(assert (=> b!100414 (= e!65378 (containsKey!153 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27217 res!50374) b!100414))

(assert (=> d!27217 m!109151))

(assert (=> d!27217 m!109151))

(assert (=> d!27217 m!109179))

(declare-fun m!111047 () Bool)

(assert (=> d!27217 m!111047))

(assert (=> d!27217 m!109501))

(assert (=> b!100414 m!109175))

(assert (=> b!99461 d!27217))

(assert (=> b!99461 d!26941))

(assert (=> b!99461 d!26943))

(declare-fun d!27219 () Bool)

(assert (=> d!27219 (contains!799 (getCurrentListMap!455 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355))))

(declare-fun lt!50744 () Unit!2998)

(declare-fun choose!621 (array!4231 array!4233 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2998)

(assert (=> d!27219 (= lt!50744 (choose!621 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!27219 (validMask!0 (mask!6607 newMap!16))))

(assert (=> d!27219 (= (lemmaArrayContainsKeyThenInListMap!26 (_keys!4194 newMap!16) (_values!2484 newMap!16) (mask!6607 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50744)))

(declare-fun bs!4155 () Bool)

(assert (= bs!4155 d!27219))

(assert (=> bs!4155 m!108761))

(assert (=> bs!4155 m!108761))

(assert (=> bs!4155 m!108591))

(assert (=> bs!4155 m!108787))

(assert (=> bs!4155 m!108591))

(declare-fun m!111049 () Bool)

(assert (=> bs!4155 m!111049))

(assert (=> bs!4155 m!108865))

(assert (=> b!99424 d!27219))

(assert (=> b!99424 d!26667))

(assert (=> b!99424 d!26631))

(assert (=> bm!10238 d!27081))

(assert (=> bm!10201 d!27121))

(declare-fun b!100418 () Bool)

(declare-fun e!65380 () Option!155)

(assert (=> b!100418 (= e!65380 None!153)))

(declare-fun b!100417 () Bool)

(assert (=> b!100417 (= e!65380 (getValueByKey!149 (t!5556 (toList!774 lt!50137)) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun c!17237 () Bool)

(declare-fun d!27221 () Bool)

(assert (=> d!27221 (= c!17237 (and ((_ is Cons!1587) (toList!774 lt!50137)) (= (_1!1177 (h!2182 (toList!774 lt!50137))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(declare-fun e!65379 () Option!155)

(assert (=> d!27221 (= (getValueByKey!149 (toList!774 lt!50137) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))) e!65379)))

(declare-fun b!100415 () Bool)

(assert (=> b!100415 (= e!65379 (Some!154 (_2!1177 (h!2182 (toList!774 lt!50137)))))))

(declare-fun b!100416 () Bool)

(assert (=> b!100416 (= e!65379 e!65380)))

(declare-fun c!17238 () Bool)

(assert (=> b!100416 (= c!17238 (and ((_ is Cons!1587) (toList!774 lt!50137)) (not (= (_1!1177 (h!2182 (toList!774 lt!50137))) (_1!1177 (ite (or c!16917 c!16916) (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2807 (underlying!334 thiss!992)))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))))

(assert (= (and d!27221 c!17237) b!100415))

(assert (= (and d!27221 (not c!17237)) b!100416))

(assert (= (and b!100416 c!17238) b!100417))

(assert (= (and b!100416 (not c!17238)) b!100418))

(declare-fun m!111051 () Bool)

(assert (=> b!100417 m!111051))

(assert (=> b!99464 d!27221))

(assert (=> b!99252 d!27049))

(assert (=> b!99495 d!26845))

(declare-fun b!100422 () Bool)

(declare-fun e!65382 () Option!155)

(assert (=> b!100422 (= e!65382 None!153)))

(declare-fun b!100421 () Bool)

(assert (=> b!100421 (= e!65382 (getValueByKey!149 (t!5556 (toList!774 lt!50151)) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!27223 () Bool)

(declare-fun c!17239 () Bool)

(assert (=> d!27223 (= c!17239 (and ((_ is Cons!1587) (toList!774 lt!50151)) (= (_1!1177 (h!2182 (toList!774 lt!50151))) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!65381 () Option!155)

(assert (=> d!27223 (= (getValueByKey!149 (toList!774 lt!50151) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65381)))

(declare-fun b!100419 () Bool)

(assert (=> b!100419 (= e!65381 (Some!154 (_2!1177 (h!2182 (toList!774 lt!50151)))))))

(declare-fun b!100420 () Bool)

(assert (=> b!100420 (= e!65381 e!65382)))

(declare-fun c!17240 () Bool)

(assert (=> b!100420 (= c!17240 (and ((_ is Cons!1587) (toList!774 lt!50151)) (not (= (_1!1177 (h!2182 (toList!774 lt!50151))) (_1!1177 (ite c!16890 (ite c!16895 (tuple2!2333 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2333 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2333 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (get!1291 (select (arr!2009 (_values!2484 (v!2807 (underlying!334 thiss!992)))) from!355) (dynLambda!371 (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!27223 c!17239) b!100419))

(assert (= (and d!27223 (not c!17239)) b!100420))

(assert (= (and b!100420 c!17240) b!100421))

(assert (= (and b!100420 (not c!17240)) b!100422))

(declare-fun m!111053 () Bool)

(assert (=> b!100421 m!111053))

(assert (=> b!99475 d!27223))

(declare-fun d!27225 () Bool)

(assert (=> d!27225 (= (get!1294 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2813 (getValueByKey!149 (toList!774 lt!49898) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26643 d!27225))

(assert (=> d!26643 d!26943))

(declare-fun d!27227 () Bool)

(assert (=> d!27227 (isDefined!103 (getValueByKey!149 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(declare-fun lt!50745 () Unit!2998)

(assert (=> d!27227 (= lt!50745 (choose!617 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(declare-fun e!65383 () Bool)

(assert (=> d!27227 e!65383))

(declare-fun res!50375 () Bool)

(assert (=> d!27227 (=> (not res!50375) (not e!65383))))

(assert (=> d!27227 (= res!50375 (isStrictlySorted!300 (toList!774 call!10155)))))

(assert (=> d!27227 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))) lt!50745)))

(declare-fun b!100423 () Bool)

(assert (=> b!100423 (= e!65383 (containsKey!153 (toList!774 call!10155) (ite c!16896 (select (arr!2008 (_keys!4194 (v!2807 (underlying!334 thiss!992)))) from!355) (select (arr!2008 (_keys!4194 newMap!16)) (index!3173 lt!49837)))))))

(assert (= (and d!27227 res!50375) b!100423))

(assert (=> d!27227 m!109415))

(assert (=> d!27227 m!109415))

(assert (=> d!27227 m!109417))

(declare-fun m!111055 () Bool)

(assert (=> d!27227 m!111055))

(declare-fun m!111057 () Bool)

(assert (=> d!27227 m!111057))

(assert (=> b!100423 m!109411))

(assert (=> b!99582 d!27227))

(assert (=> b!99582 d!26847))

(assert (=> b!99582 d!26849))

(declare-fun b!100427 () Bool)

(declare-fun e!65385 () Option!155)

(assert (=> b!100427 (= e!65385 None!153)))

(declare-fun b!100426 () Bool)

(assert (=> b!100426 (= e!65385 (getValueByKey!149 (t!5556 (toList!774 lt!49968)) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))

(declare-fun d!27229 () Bool)

(declare-fun c!17241 () Bool)

(assert (=> d!27229 (= c!17241 (and ((_ is Cons!1587) (toList!774 lt!49968)) (= (_1!1177 (h!2182 (toList!774 lt!49968))) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992))))))))))

(declare-fun e!65384 () Option!155)

(assert (=> d!27229 (= (getValueByKey!149 (toList!774 lt!49968) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))) e!65384)))

(declare-fun b!100424 () Bool)

(assert (=> b!100424 (= e!65384 (Some!154 (_2!1177 (h!2182 (toList!774 lt!49968)))))))

(declare-fun b!100425 () Bool)

(assert (=> b!100425 (= e!65384 e!65385)))

(declare-fun c!17242 () Bool)

(assert (=> b!100425 (= c!17242 (and ((_ is Cons!1587) (toList!774 lt!49968)) (not (= (_1!1177 (h!2182 (toList!774 lt!49968))) (_1!1177 (tuple2!2333 lt!49899 (minValue!2382 (v!2807 (underlying!334 thiss!992)))))))))))

(assert (= (and d!27229 c!17241) b!100424))

(assert (= (and d!27229 (not c!17241)) b!100425))

(assert (= (and b!100425 c!17242) b!100426))

(assert (= (and b!100425 (not c!17242)) b!100427))

(declare-fun m!111059 () Bool)

(assert (=> b!100426 m!111059))

(assert (=> b!99307 d!27229))

(declare-fun condMapEmpty!3785 () Bool)

(declare-fun mapDefault!3785 () ValueCell!974)

(assert (=> mapNonEmpty!3784 (= condMapEmpty!3785 (= mapRest!3784 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3785)))))

(declare-fun e!65387 () Bool)

(declare-fun mapRes!3785 () Bool)

(assert (=> mapNonEmpty!3784 (= tp!9634 (and e!65387 mapRes!3785))))

(declare-fun b!100428 () Bool)

(declare-fun e!65386 () Bool)

(assert (=> b!100428 (= e!65386 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3785 () Bool)

(declare-fun tp!9635 () Bool)

(assert (=> mapNonEmpty!3785 (= mapRes!3785 (and tp!9635 e!65386))))

(declare-fun mapKey!3785 () (_ BitVec 32))

(declare-fun mapValue!3785 () ValueCell!974)

(declare-fun mapRest!3785 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3785 (= mapRest!3784 (store mapRest!3785 mapKey!3785 mapValue!3785))))

(declare-fun b!100429 () Bool)

(assert (=> b!100429 (= e!65387 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3785 () Bool)

(assert (=> mapIsEmpty!3785 mapRes!3785))

(assert (= (and mapNonEmpty!3784 condMapEmpty!3785) mapIsEmpty!3785))

(assert (= (and mapNonEmpty!3784 (not condMapEmpty!3785)) mapNonEmpty!3785))

(assert (= (and mapNonEmpty!3785 ((_ is ValueCellFull!974) mapValue!3785)) b!100428))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!974) mapDefault!3785)) b!100429))

(declare-fun m!111061 () Bool)

(assert (=> mapNonEmpty!3785 m!111061))

(declare-fun condMapEmpty!3786 () Bool)

(declare-fun mapDefault!3786 () ValueCell!974)

(assert (=> mapNonEmpty!3783 (= condMapEmpty!3786 (= mapRest!3783 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3786)))))

(declare-fun e!65389 () Bool)

(declare-fun mapRes!3786 () Bool)

(assert (=> mapNonEmpty!3783 (= tp!9633 (and e!65389 mapRes!3786))))

(declare-fun b!100430 () Bool)

(declare-fun e!65388 () Bool)

(assert (=> b!100430 (= e!65388 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3786 () Bool)

(declare-fun tp!9636 () Bool)

(assert (=> mapNonEmpty!3786 (= mapRes!3786 (and tp!9636 e!65388))))

(declare-fun mapKey!3786 () (_ BitVec 32))

(declare-fun mapRest!3786 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapValue!3786 () ValueCell!974)

(assert (=> mapNonEmpty!3786 (= mapRest!3783 (store mapRest!3786 mapKey!3786 mapValue!3786))))

(declare-fun b!100431 () Bool)

(assert (=> b!100431 (= e!65389 tp_is_empty!2635)))

(declare-fun mapIsEmpty!3786 () Bool)

(assert (=> mapIsEmpty!3786 mapRes!3786))

(assert (= (and mapNonEmpty!3783 condMapEmpty!3786) mapIsEmpty!3786))

(assert (= (and mapNonEmpty!3783 (not condMapEmpty!3786)) mapNonEmpty!3786))

(assert (= (and mapNonEmpty!3786 ((_ is ValueCellFull!974) mapValue!3786)) b!100430))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!974) mapDefault!3786)) b!100431))

(declare-fun m!111063 () Bool)

(assert (=> mapNonEmpty!3786 m!111063))

(declare-fun b_lambda!4469 () Bool)

(assert (= b_lambda!4445 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4469)))

(declare-fun b_lambda!4471 () Bool)

(assert (= b_lambda!4449 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4471)))

(declare-fun b_lambda!4473 () Bool)

(assert (= b_lambda!4441 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4473)))

(declare-fun b_lambda!4475 () Bool)

(assert (= b_lambda!4463 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4475)))

(declare-fun b_lambda!4477 () Bool)

(assert (= b_lambda!4455 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4477)))

(declare-fun b_lambda!4479 () Bool)

(assert (= b_lambda!4443 (or (and b!98866 b_free!2437) (and b!98863 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))))) b_lambda!4479)))

(declare-fun b_lambda!4481 () Bool)

(assert (= b_lambda!4447 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4481)))

(declare-fun b_lambda!4483 () Bool)

(assert (= b_lambda!4439 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4483)))

(declare-fun b_lambda!4485 () Bool)

(assert (= b_lambda!4461 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4485)))

(declare-fun b_lambda!4487 () Bool)

(assert (= b_lambda!4457 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4487)))

(declare-fun b_lambda!4489 () Bool)

(assert (= b_lambda!4451 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4489)))

(declare-fun b_lambda!4491 () Bool)

(assert (= b_lambda!4465 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4491)))

(declare-fun b_lambda!4493 () Bool)

(assert (= b_lambda!4459 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4493)))

(declare-fun b_lambda!4495 () Bool)

(assert (= b_lambda!4467 (or (and b!98866 b_free!2437 (= (defaultEntry!2501 (v!2807 (underlying!334 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98863 b_free!2439) b_lambda!4495)))

(check-sat (not d!27063) (not d!27121) (not bm!10304) (not d!26769) (not b!100206) (not b!100237) (not b!99912) (not bm!10279) (not b!100136) (not d!26805) (not d!27109) (not d!27131) (not b_lambda!4479) (not d!27163) (not b!99962) (not b!99756) (not d!27175) (not b!100275) (not d!26903) (not b!100395) (not bm!10325) (not b!99626) (not bm!10338) (not b!100386) (not b!100410) (not d!27085) (not bm!10324) (not b!99839) (not b!99847) (not b!99987) (not b!99960) (not d!27073) (not b!100334) (not d!26885) (not d!27185) (not d!27215) (not b!99768) (not b!100268) (not d!26951) (not b!100191) (not d!27081) (not b!99826) (not b!100362) (not b!100036) (not b!99885) (not b!99858) (not b!99933) (not d!26953) (not b!99890) (not d!26911) (not b!100186) (not b!100011) (not d!26983) (not b!100098) (not b!99942) (not b!100055) (not b!99613) (not bm!10256) (not b_next!2437) (not d!26945) (not b!100296) (not b!99661) (not b!100283) (not d!27059) (not b!99993) (not bm!10321) (not b!100315) (not b!100341) (not b!99999) (not b!99976) (not b!100353) (not b!99956) (not b!99977) (not b_lambda!4489) (not b!100053) (not d!26737) (not b!99723) (not bm!10295) (not b!99945) (not b!99864) (not d!27083) (not b!99855) (not b!100241) (not b!99820) (not d!26873) (not b!99745) (not b!99841) (not b!99690) (not b!100414) (not d!26787) (not b!99599) (not b!99884) (not b_lambda!4495) (not d!27065) (not d!26905) (not b!100117) (not b!100123) (not b!99872) (not b!99619) (not bm!10342) (not d!26935) (not d!26743) (not d!27079) (not b!99796) (not bm!10280) (not b!99715) (not d!27147) (not b_lambda!4475) (not b!99624) (not d!27193) (not d!27137) (not b!100122) (not mapNonEmpty!3785) (not b!99838) (not b!99928) (not d!26925) (not b!99781) (not b!100278) (not bm!10255) (not b!100320) (not b!100132) (not b!99903) (not b!99830) (not b!100321) (not b!99835) (not b!99950) (not b!99702) (not b!99681) (not d!27033) (not d!26977) (not bm!10261) (not b!100199) (not mapNonEmpty!3786) (not b!100369) (not b!99710) (not d!26975) (not d!26839) (not b!100372) (not d!26753) (not b!99846) (not b!99730) (not b!100285) (not b!100200) (not b!100400) (not b!99852) (not bm!10341) (not b!100120) (not b!100394) (not d!26941) (not b!100377) (not b!100026) (not b!100090) (not bm!10278) (not d!26957) (not d!27155) (not d!26829) (not b_lambda!4493) (not bm!10266) (not b!99771) (not b!99753) (not d!26783) (not b!99677) (not b!99924) (not b!99827) (not d!27051) (not bm!10275) (not b!99772) (not d!26939) (not b!99887) (not b!100421) (not b!99849) (not bm!10330) (not d!26981) (not d!27103) (not d!26931) (not d!26731) (not b!100396) (not b!100365) (not d!26965) (not d!26777) (not b!100411) (not b!99900) (not b!99843) (not b!99927) (not d!26881) (not b!100027) (not bm!10335) (not b!99881) (not b!99816) (not d!26767) (not d!26847) (not b!100093) (not d!26887) (not b!100111) (not b_lambda!4417) (not b!100150) (not b!100007) (not d!26895) (not b!100196) (not b!100044) (not d!27013) (not b!100417) (not b!99929) (not d!27097) (not d!26837) (not d!27197) (not d!27093) (not b!100048) (not d!26901) (not b!100269) (not b!100273) (not d!26869) (not d!27005) (not bm!10271) b_and!6169 (not d!27201) (not b!100313) (not d!26789) (not b!99693) (not b!99725) (not b!100379) (not b!100271) (not d!26879) (not b!99799) (not b!100240) (not b!99731) (not b!100221) (not b!100137) (not bm!10332) (not d!26917) (not b!99712) (not b_lambda!4491) (not b!100142) (not bm!10296) (not b!99823) (not d!26727) (not b!99902) (not b!99748) (not d!27139) (not bm!10259) (not bm!10287) (not b!99704) (not b!99829) (not b!100015) (not b!100326) (not b!100204) (not d!27107) (not bm!10306) (not d!26733) (not b!100288) (not b!100375) (not b!100193) (not bm!10285) b_and!6171 (not b!100371) (not b!100222) (not d!27177) (not bm!10317) (not b!100349) (not bm!10314) (not b!100087) (not b!100115) (not bm!10257) (not b!100183) (not b!100307) (not b!99853) (not bm!10331) (not b!100069) (not b!99882) (not b!100336) (not d!27133) (not b!100103) (not b!99705) (not b!99851) (not d!27227) (not b!100129) (not b!99740) (not b!99621) (not b!99671) (not b!99769) (not b!100089) (not b_lambda!4487) (not b!99717) (not d!26841) (not b!99737) (not b!99663) (not b!100233) (not b!99813) (not b!100328) (not b!100198) (not b!99795) (not b!99948) (not b!99869) (not d!27217) (not b!100104) (not b!100339) (not b!100401) (not b!100025) (not b!99936) (not d!26857) (not d!27149) (not b!100299) (not d!27165) (not b_lambda!4471) (not b!99686) (not d!26809) (not d!26961) (not b!100182) (not b!99590) (not d!26863) (not b!100228) (not b!100229) (not d!26993) (not b!100391) (not d!27039) (not d!26921) (not b!99785) (not b!99766) (not b!100367) (not b!99747) (not bm!10264) (not b!100266) (not d!27189) (not b!100274) (not b!100384) (not b_next!2439) (not d!27011) (not d!26835) (not b!99636) (not b_lambda!4437) (not b!99718) (not b!100342) (not d!27199) (not b!99861) (not b!100062) (not d!27125) (not d!26967) (not b!100238) (not b!100406) (not bm!10297) (not b!99635) (not d!26819) (not b!100043) (not b!99786) (not b!100220) (not b!100052) (not b!99832) (not d!26855) (not b!99975) (not d!27017) (not b!100347) (not d!27181) (not b!100235) (not b!99784) (not b!100279) (not d!27219) (not bm!10320) (not d!27213) (not d!27087) (not b_lambda!4453) (not b!100146) (not d!26779) (not b!100355) (not d!26933) (not b!100309) (not b!100385) (not d!26877) (not b!100364) (not b!99904) (not b!99834) (not d!26775) (not b!100009) (not bm!10251) (not b!99623) (not bm!10282) (not b!99767) (not b!100286) (not b!99831) (not b!100084) (not d!27205) (not b!99907) (not b!99741) (not b!99667) (not b!100216) (not d!27077) (not b!100426) (not d!27135) (not b!100001) (not b!100074) (not b!100181) (not d!26747) (not d!27129) (not d!27115) (not b!99899) (not b!100388) (not b!100143) (not d!27195) (not b!99871) (not b!100039) (not d!27091) (not bm!10252) (not b_lambda!4483) (not d!27021) (not b!100389) (not bm!10311) (not b!100374) (not b!100002) (not b!100056) (not b!99750) (not b!99972) (not b!100294) (not d!26891) (not b!100214) (not d!26803) (not b!99818) (not d!27191) (not bm!10269) (not b!100276) (not b!99983) (not b!100393) (not b!100333) (not b!100303) (not b!100049) (not b!100405) (not d!26899) (not d!27187) (not bm!10303) (not b!100412) (not d!26893) (not d!27105) (not b!100095) (not b!100378) (not b!99759) (not d!27167) (not d!26757) (not b!99949) (not d!27173) (not d!26949) (not d!27203) (not b!100029) (not b!100077) (not d!27043) (not b!99792) (not d!27111) (not bm!10286) (not b!100075) (not b!100189) (not b!99822) (not b!99921) (not bm!10270) (not b!100148) (not b_lambda!4429) (not d!27003) (not b!99862) (not b!100267) (not b!100301) (not bm!10315) (not d!26883) (not b!100050) (not b!100174) (not b!99700) (not d!26749) (not b!100096) (not b!99865) (not b!100145) (not b_lambda!4481) (not b!100282) (not b!99850) (not d!26827) (not b!99699) (not b!100023) (not b!100010) (not b!99911) (not b!100135) (not b!100225) (not d!27029) (not b!99878) (not b!100231) (not b!99743) (not b_lambda!4477) (not d!27089) (not b!99969) (not b!100409) (not b!99988) (not b_lambda!4469) (not b!99804) (not b!100070) (not b!99957) (not d!26897) (not b!100398) (not b!99808) (not b!100105) (not b_lambda!4473) (not b!100068) (not d!26823) (not b_lambda!4433) (not d!26807) (not d!27153) (not b!100392) (not d!26915) (not d!26871) (not b!99620) (not b!100079) (not b!99935) (not d!26937) (not b!100184) (not d!26973) (not b!100232) (not b!100065) (not d!27075) (not d!27117) (not bm!10302) (not d!27099) (not b!100423) (not b!99735) (not b!99696) (not d!27145) (not b!100211) (not d!26875) (not d!27141) (not d!26791) (not b!100118) (not b!99798) (not d!26825) (not b!100004) (not d!26989) (not d!26741) (not b_lambda!4431) (not b!99708) (not b!100322) (not bm!10343) (not b!100101) (not b!100224) (not b!100302) (not d!26797) (not b!100030) (not b!99844) (not d!27127) (not b!100042) (not b!100270) (not d!27019) (not d!26865) (not d!26971) (not b!100092) (not b!99914) (not b!99738) (not b!100234) (not b_lambda!4435) (not b!100376) (not b!99679) (not bm!10313) (not b!100081) (not d!26759) (not b!99959) (not d!27113) (not bm!10258) (not bm!10289) (not d!27095) (not b!99985) (not bm!10268) (not b!100017) (not d!26729) (not b!99856) (not b!100218) (not d!27007) (not b_lambda!4485) (not b!99719) (not bm!10312) (not b!100358) (not b!99591) (not d!26889) (not b!99778) (not b!100272) (not d!27023) (not b!100413) (not b!99854) (not d!26923) (not bm!10294) (not bm!10299) (not bm!10265) (not d!26947) (not b!99819) (not b!100109) (not b!99657) (not bm!10272) (not b!99963) (not d!27053) (not bm!10267) (not d!26985) (not b!99629) (not bm!10273) (not b!99915) (not d!26991) (not b!99990) (not b!100318) (not b!100293) (not b_lambda!4413) (not b!100343) (not d!27067) (not bm!10250) (not d!26927) tp_is_empty!2635 (not b!99595) (not d!27123) (not b!100403) (not d!27159) (not d!27101) (not d!27009) (not b!99801) (not d!27119) (not bm!10241))
(check-sat b_and!6169 b_and!6171 (not b_next!2437) (not b_next!2439))
